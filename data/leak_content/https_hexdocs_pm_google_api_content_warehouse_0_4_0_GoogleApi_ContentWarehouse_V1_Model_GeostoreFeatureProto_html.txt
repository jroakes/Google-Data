View Source GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureProto (google_api_content_warehouse v0.4.0)
Every entry in the GeoStore database is called a "feature". A feature is represented as a discriminated union of all the different feature types, where the actual feature type is specified by the "type" field. There are also various fields that are meaningful for most or all feature types, such as bounding regions and names. Every feature has a globally unique id that can be used to refer to it from other features.
Attributes
-
geopoliticalGeometry
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalGeometryProto.t
, default:nil
) - Geopolitical (unsimplified) polygons for a feature for different geopolitical use cases. -
doodle
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreDoodleProto.t
, default:nil
) - DEPRECATED -
name
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreNameProto.t)
, default:nil
) - The name(s) of this feature. A feature may have different names in different languages, colloquial or "vanity" names, etc. -
relatedTimezone
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreTimezoneProto.t)
, default:nil
) - Contains time zones known to be associated with a feature. Most features are associated with the single time zone that contains them. However, some larger features (countries, continents, etc.) are associated with all of the time zones they contain. Most features can have any number of related time zones, but TYPE_SEGMENT and TYPE_ESTABLISHMENT_POI features can have at most 1. -
storefrontGeometryModel
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t
, default:nil
) - Geometry Store ID and materialized geometry for a POI feature's storefront(s). IMPORTANT: Clients may not write to this field directly; see go/geometry-store-reading-and-writing#writing-to-geometry-store. -
center
(type:GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t
, default:nil
) - The conceptual center of the feature, used for routing. For cities, this would be the center of the downtown, or maybe the location of city hall. For states and countries it might be the capital city. Most feature types will not have a conceptual center - by default, routing will use the centroid of the feature's geometry. If you need a feature center point consider using GetFeatureGeometryCenter() function from geostore/base/public/feature.h rather than reading from this field directly. -
displayData
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreDisplayDataProto.t
, default:nil
) - Data used to render this feature on a map. -
detailed3dModel
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t
, default:nil
) - Geometry Store ID and materialized geometry representing the feature's physical presence in the world. Like geometry_3d above, but with additional semantic or renderable details, e.g. labeled surfaces ("door", "window"), material specifications, etc. IMPORTANT: Clients may not write to this field directly; see go/geometry-store-reading-and-writing#writing-to-geometry-store. -
building
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto.t
, default:nil
) - -
skiTrail
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiTrailProto.t
, default:nil
) - -
elevationModel
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreElevationModelProto.t
, default:nil
) - Captures elevation data used on TYPE_DIGITAL_ELEVATION_MODEL features. -
syntheticGeometry
(type:boolean()
, default:nil
) - We prefer features that have geometry over those that do not. In some cases we synthesize geometry (e.g., polygons for postal codes). This flag is set to indicate features that have such synthetic geometry. -
polygonForDisplay
(type:GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t
, default:nil
) - Provide version of the geometry suitable for display. This has been subject to water removal and (possibly) moderate simplification. -
logicalBorder
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreLogicalBorderProto.t
, default:nil
) - -
polyline
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostorePolyLineProto.t)
, default:nil
) - -
laneMarker
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreLaneMarkerProto.t
, default:nil
) - -
entrance
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreEntranceProto.t
, default:nil
) - -
geometryPrecisionMeters
(type:float()
, default:nil
) - If set, the feature's actual location can be assumed to be somewhere within a circle of this radius, centered on the feature's location. More information on this field at go/gpm-definition-update. NOTE: Only applicable to features with 'point' geometry. Please contact geo-schema-team@ if you have non-point use cases for which this field would be useful. -
accessPoint
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAccessPointProto.t)
, default:nil
) - Optional access point information. Access points hold detailed information about routing endpoints. For example, the main Google office is at "1600 Amphitheatre Parkway". The feature representing that office has a polygon, a center, and an address with components for the street number, route, locality, etc. The access point information, on the other hand, identifies the specific segment, the latitude/longitude of the driveway, and so forth. -
rankDetails
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRankDetailsProto.t
, default:nil
) - The rank field is computed as a weighted sum of several signals. This field contains a protocol buffer whose fields give those signals and their weights. Clients should try very hard not to depend on these individual signals and use the single rank field instead. At some point in the future, this field will not be exposed anymore. -
metadata
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureMetadataProto.t
, default:nil
) - Metadata about this particular feature. Metadata is managed internally by the Geo Data Infrastructure and in general should not be set by clients. Features that don't ultimately come from the Geo repository (MapFacts) won't have any metadata set. -
kgProperty
(type:list(GoogleApi.ContentWarehouse.V1.Model.FreebasePropertyValue.t)
, default:nil
) - Properties that apply to this feature whose schema is defined in the Knowledge Graph schema (see https://hume.google.com/graph/schema). Not all properties that exist in the KG schema can be asserted via this mechanism. The set of properties that are allowed to be set on a feature depends on the feature's GConcepts (and feature type). For instance, only gcid:country features may have the /geo/type/country/president property (made up example, since that property doesn't actually exist in the KG schema). GConcept hierarchy is taken into account for deciding the set of allowed properties. Additionally, the specific properties allowed are further constrained by the list specified at go/kg-property-allowlist. NOTE: not all types of properties are allowed to appear in the Geo Schema. For now, we limit ourselves to properties whose value type is TYPE_BOOL, TYPE_COMPOUND, TYPE_DATETIME, TYPE_FLOAT, TYPE_ID, TYPE_INT, TYPE_NESTED_STRUCT, TYPE_TEXT, or TYPE_URI. NOTE(b/35039936): We are in the process of changing how a KG property with multiple values is stored in this field. Currently, such a KG property is stored in a single instance of the kg_property field. However, we will be changing this so that each value will be stored in its own instance of kg_property. Any client that wants to read from this field should be prepared to read data represented in either format. See b/35039936 or the announcement at http://g/geo-schema-announce/7IXR3Fex8to/7yFyT5UoAwAJ for an example and more details. The mechanism to assert that a KG property has no value is via the property_value_status field below. freebase.PropertyValue.value_status is not allowed be set here for consistency reason. -
relatedFeature
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreRelationProto.t)
, default:nil
) - Geographic or logical relationships to other features. Importers don't need to fill a geographic relationship in - it is handled by related feature processing by a standalone pipeline. Adding "contained by" country relations is however encouraged (and required for TYPE_ROUTE features). WARNING: Updates to this field handled by standalone pipelines are NOT atomic with regard to updates to the features being referenced; we do not guarantee that a given MapFacts snapshot will be consistent between this field and the related features. -
visualizationArea
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t
, default:nil
) - Geometry Store ID and materialized geometry representing a bounding box of the feature's geometry (or the building/grounds a POI occupies) for stylized rendering, UX experiences, etc. IMPORTANT: Clients may not write to this field directly; see go/geometry-store-reading-and-writing#writing-to-geometry-store. -
inferredGeometry
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreInferredGeometryProto.t
, default:nil
) - -
attachment
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAttachmentsAttachmentProto.t)
, default:nil
) - The collection of attachments for this feature. Documentation: http://go/geo-attachments -
associatedEvChargingStation
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - -
locale
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreLocaleProto.t
, default:nil
) - -
skiLift
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiLiftProto.t
, default:nil
) - -
intersectionGroup
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreIntersectionGroupProto.t
, default:nil
) - -
polygon
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t)
, default:nil
) - -
sign
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadSignProto.t
, default:nil
) - -
skiBoundary
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiBoundaryProto.t
, default:nil
) - -
relatedTerminalPoint
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - Terminal points associated with this feature. For instance, an airport terminal may have specifically designated pickup and drop-off points. -
sourceInfo
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreSourceInfoProto.t)
, default:nil
) - A list of the data sources that were used to construct this feature, together with optional "raw data" in the provider's format. Raw data should not be used by production clients but may be useful for exploring data that is not currently converted to a canonical form. -
restrictionGroup
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRestrictionGroupProto.t
, default:nil
) - -
futureGeometryFor
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t
, default:nil
) - Specifies the feature that this feature's geometry will replace. If this field is populated, the referenced feature must have a future_geometry reference back to this feature. This field is only allowed (and required) for TYPE_FUTURE_GEOMETRY features. -
transitLine
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitLineProto.t
, default:nil
) - -
segment
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSegmentProto.t
, default:nil
) - -
track
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreTrackProto.t)
, default:nil
) - Defines the geometry of a feature as a sequence of 6D poses, including lat, lng, altitude, roll, pitch, and yaw. Only lat and lng are typically required. Each track has an index so that they can be viewed in a stable order. -
businessChain
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreBusinessChainProto.t
, default:nil
) - Data specific to business chain features, e.g., Canonical GConcepts. -
geopolitical
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto.t
, default:nil
) - -
geometry3d
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t
, default:nil
) - Geometry Store ID and materialized geometry representing the feature's physical shape in the world. IMPORTANT: Clients may not write to this field directly; see go/geometry-store-reading-and-writing#writing-to-geometry-store. -
point
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t)
, default:nil
) - Defines the geometry of the feature. The geometry may be specified as an arbitrary union of points, poses, polylines, tracks, and polygons. Points, poses, polylines, and tracks are assumed to represent regions of unspecified size or width rather than regions of zero area. Most features should have some sort of geometry. Geometry may be synthesized if none is available (e.g., polygons for postal codes). The synthetic_geometry flag should be set in that case. Point is currently enforced as a non-repeating field for all feature types, though it is defined as repeating in case future modeling requires multiple points. The number of allowed polylines, tracks, or polygons vary based on feature type. A feature can have at most one pose (it is an optional field). -
transitLineVariant
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitLineVariantProto.t
, default:nil
) - RESERVED -
interiorCovering
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreCellCoveringProto.t
, default:nil
) - S2 interior covering that consists of cells completely enclosed within the feature's geometry (for features with polygonal geometry). -
roadMonitor
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadMonitorProto.t
, default:nil
) - -
bestLocale
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreBestLocaleProto.t
, default:nil
) - Describes the best-match locale for this feature. -
child
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - Features can define themselves as a collection of other features. For example, a route is a collection of road segments, and a feature for the "Great Lakes" could be defined as lakes Superior, Michigan, Huron, Erie, and Ontario. It is not recommended to design a multi level tree using the child field to build up a feature because it requires fetching many features to see the details of the feature. In practice this is used to model archipelago, route, transit (agencies, lines, trips, departures), and river features. The geometry of a feature is implicitly defined by its children, so if a feature has children then it should not have any points, polylines, or polygons. In general, this field should not be used to represent political or postal hierarchies. For example, a county would not list its cities as children, because the county is not defined in terms of its cities (it also contains unincorporated areas, etc.). -
establishment
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreEstablishmentProto.t
, default:nil
) - Also allowed on TYPE_BUSINESS_CHAIN and TYPE_TRANSIT_AGENCY features, to model the feature's phone number(s). Other fields within EstablishmentProto are not permitted on non-TYPE_ESTABLISHMENT features. -
storefrontGeometry
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAnchoredGeometryProto.t)
, default:nil
) - Represents information about the store front geometry. Only TYPE_ESTABLISHMENT_POI should have this field set. -
website
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreUrlProto.t)
, default:nil
) - The official website of this feature. Stored as a repeated field to allow for multilingual official websites (see comments in url.proto). -
propertyValueStatus
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostorePropertyValueStatusProto.t)
, default:nil
) - The value status of properties on this feature. For example, this specifies whether the feature is known to have no name (this is the value status of the 'FEATURE_NAME' property). Only property IDs which have no specific value are allowed to have a value status. Note: not all field types will be supported, please contact geo schema team if you want to enable this field for a field type that is not currently supported. -
socialReference
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSocialReferenceProto.t
, default:nil
) - All establishments must have a social reference. WARNING: Aside from creating new establishments, please do NOT introduce new uses; treat social references as if they were deprecated. For alternatives and more, see g3doc/company/teams/gdeng/geo-schema-reference/home/feature-types/establishments/social-reference.md. -
tollPath
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreTollPathProto.t
, default:nil
) - Represents information about /geo/type/toll_path features. -
route
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRouteProto.t
, default:nil
) - Additional details on the feature types below can be found in the individual protocol buffer definitions. These extensions capture data that is specific to a set of feature types and which makes no sense for other feature types. -
parking
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreParkingProto.t
, default:nil
) - Describes parking details for the feature. -
knowledgeGraphReference
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreKnowledgeGraphReferenceProto.t
, default:nil
) - RESERVED -
border
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreBorderProto.t
, default:nil
) - -
tollCluster
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreTollClusterProto.t
, default:nil
) - Represents information about TYPE_TOLL_CLUSTER features. -
political
(type:GoogleApi.ContentWarehouse.V1.Model.GeostorePoliticalProto.t
, default:nil
) - -
transitStation
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitStationProto.t
, default:nil
) - -
rawGconceptInstanceContainer
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceContainerProto.t
, default:nil
) - Geo Ontology GConcept Instances - Design doc linked off http://go/geo-ontology - In order to shield clients from changes in GConcept representation we provide an accessor library: geostore/base/public/gconcept_instance.h -
internal
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreInternalFeatureProto.t
, default:nil
) - Data for this feature that is less about the feature and more about other data in the feature. For example, it might be data about the rights we have to other data in this FeatureProto, or MapFacts-internal shape IDs for this feature's polygons. -
threeDimModel
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreThreeDimensionalModelProto.t
, default:nil
) - Captures full model representing the feature's 3D geometry. Should only be found on TYPE_COMPOUND_BUILDING features for now, but not part of the BuildingProto extension for possible future extensions. -
temporaryData
(type:GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t
, default:nil
) - A place for clients to attach arbitrary data to a feature. Never set in MapFacts. -
originalId
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t
, default:nil
) - This field is used internally by the pipeline for id stability. It should not be set by individual importers, nor should it be read by consumer clients. In particular, this field will not be present in features read or snapshotted from the Mapfacts Repository. -
relatedBorder
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - For TYPE_COUNTRY or TYPE_ADMINISTRATIVE_AREA1 features, this field defines the associated TYPE_BORDERs which reference this feature. The linked TYPE_BORDERs must have the feature.border set, pointing to this feature. TYPE_COUNTRY or TYPE_ADMINISTRATIVE_AREA1 features must have this field set for each TYPE_BORDER referencing them. -
preferredViewport
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t
, default:nil
) - The preferred viewport for this feature. If present, this latitude-longitude rectangle holds the preferred viewport for the feature. For example, it might hold the bounds of the "central" portion of a large city. There are no aspect ratio requirements. This is an optional field: if no viewport is supplied, interested clients can use heuristics to determine a viewport. Calling the standard GetFeatureGeometryBound() function would be a good way to start but note that it can return an empty bounding box (e.g., if the feature has no geometry). The preferred viewport is not necessarily fully contained by the above bounding box. -
futureGeometry
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t
, default:nil
) - Specifies the TYPE_FUTURE_GEOMETRY whose geometry will replace this feature's geometry. If this field is populated, the referenced future geometry must have a future_geometry_for referencing this feature. -
intersection
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreIntersectionProto.t
, default:nil
) - -
segmentPath
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSegmentPathProto.t
, default:nil
) - -
exemptRegulatedArea
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - A list of feature ids of polygon based restrictions that do not apply to this feature. This may only include features of TYPE_REGULATED_AREA that also have a feature.regulated_area.restriction field defined. Setting this field opts the feature out of all restrictions set on that regulated area. -
disputedArea
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto.t
, default:nil
) - Represents information about disputed areas. Only TYPE_DISPUTED_AREA features should have the field set. -
level
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreLevelProto.t
, default:nil
) - Represents information about TYPE_LEVEL features. -
operations
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreOperationsProto.t
, default:nil
) - Information about this feature's operations, e.g. when this feature is temporarily closed. NOTE: for legacy reasons, some closure-specifc information (e.g. permanent closure reason) lives in ExistenceProto instead. In the future, such information should move here in OperationsProto. -
waterRemovedPolygon
(type:GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t
, default:nil
) - A version of the geometry which has water removed but is not simplified (thus having equal or more vertices than polygon_for_display). -
dataSource
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreDataSourceProto.t
, default:nil
) - -
type
(type:String.t
, default:nil
) - The type of this feature -- see comments above. -
pose
(type:GoogleApi.ContentWarehouse.V1.Model.GeostorePoseProto.t
, default:nil
) - Defines the geometry of a feature as a 6D pose, including lat, lng, altitude, roll, pitch, and yaw along the WGS-84 ellipsoid. Only the lat and lng are strictly required. -
attribute
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAttributeProto.t)
, default:nil
) - DEPRECATED A list of attributes that describe defined aspects of this feature. An attribute must be a concrete, high quality, and editable piece of information about a feature, and must be used on some general consumer facing Google property. The data types used for attributes must be primitive types or reusable in a generic manner. -
covering
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreCellCoveringProto.t
, default:nil
) - S2 cell coverings for this feature. See util/geometry/s2cell_union.h for more information about S2 cells. Coverings are useful for quick containment or intersection tests. S2 covering that consists of cells that intersect with the feature. -
schoolDistrict
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreSchoolDistrictProto.t
, default:nil
) - -
status
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreExistenceProto.t
, default:nil
) - All features can have "existence" information associated with them. -
parent
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t)
, default:nil
) - -
address
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t)
, default:nil
) - Address for this feature. A Geo Schema address is designed to model a mailing address, so only features that have mailing addresses in the real world may have addresses. Each feature should have only one address. If you want to describe the geographic location of a feature which does not have a mailing address with respect to other well-known features, some other schema constructs should be used. Note that the field is defined as repeated though features that use this field with its intended semantics are constrained to have a single address even if they may have multiple mailing addresses in the real world. The “single address” rule is enforced by lint. Current exceptions to the single address rule and mailing address rule are described in the g3doc. Bear note that the schema team is actively working on eliminating these exceptions. http://go/geo-addresses Note the following conventions: - Addresses follow the postal hierarchy, not the political hierarchy. Addresses may have components that refer to political entities when those entities also appear in the postal hierarchy. - As stated previously, but it bears repeating, addresses on features are mailing addresses. In many cases the physical address and the mailing address are the same but the address stored on a feature represents the mailing address of the feature. An example of a non-physical mailing address would be a PO Box. - These addresses are commonly defined and verifiable by a governmental authority (e.g. the United States Postal Service in the United States, Royal Mail in the United Kingdom, Correios in Brazil, etc.) and should follow conventions and rules defined by those authorities. -
rank
(type:number()
, default:nil
) - WARNING: Please do NOT introduce new uses of this field; treat it as if it were deprecated. For appropriate ranking contacts, see g3doc/company/teams/gdeng/geo-schema-reference/home/feature-properties/rank.md. A floating-point number between 0.0 and 1.0 indicating how "important" we think this feature is. This can be used to decide which features to render on maps, and how to rank results when the user does a search. The rank can depend on any number of factors such as the number of references to this feature in web pages, geographic size, population, number of referring geographic entities, "priority" information encoded in the source data, etc. -
id
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t
, default:nil
) - The globally unique id for this feature. -
anchoredGeometry
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreAnchoredGeometryProto.t
, default:nil
) - Represents information about the feature’s anchored geometry. -
htmlText
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreHtmlTextProto.t)
, default:nil
) - DEPRECATED Features can have zero or more HTML texts associated with them. These might be HTML balloons used by Google Earth, for example. -
regulatedArea
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRegulatedAreaProto.t
, default:nil
) - -
relatedEntrance
(type:list(GoogleApi.ContentWarehouse.V1.Model.GeostoreEntranceReferenceProto.t)
, default:nil
) - Logical relationship to other features that are entrances or exits to this feature. -
bound
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t
, default:nil
) - A latitude-longitude rectangle used by bucketing MapReduces. See the documentation on bucketing MapReduce for details. This field can be a source of confusion. Because it is called "bound", it is often assumed that it is a tight bound on the geometry but it can be (and often is) much larger. If a tight bound is needed then use the standard GetFeatureGeometryBound() function instead. To be more explicit, if you are using this field for anything else than a bucketing MapReduce, you are doing the wrong thing. Not all features are required to have bounding boxes. See geostore::IsBoundRequiredForFeatureType() for the list of feature types required to have a bounding box. This bound field will be updated when a feature changes in MapFacts to include its geometry. Also, a GeoSchema pipeline, go/geo-schema-pipelines-docs#expand-bounds runs periodically to update the field for strong references from other features. Therefore, most editors don't need to edit this field explicitly. See go/geo-changes:no-edit-for-feature-bound for the details. -
elevation
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreElevationProto.t
, default:nil
) - -
verticalOrdering
(type:GoogleApi.ContentWarehouse.V1.Model.GeostoreVerticalOrderingProto.t
, default:nil
) - Represents vertical ordering for this feature relative to other geometrically-overlaping features. See go/aboutgrades for more information about distinction among different levels.
Summary
Functions
Unwrap a decoded JSON object into its complex fields.
Types
@type t() :: %GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureProto{ accessPoint: [GoogleApi.ContentWarehouse.V1.Model.GeostoreAccessPointProto.t()] | nil, address: [GoogleApi.ContentWarehouse.V1.Model.GeostoreAddressProto.t()] | nil, anchoredGeometry: GoogleApi.ContentWarehouse.V1.Model.GeostoreAnchoredGeometryProto.t() | nil, associatedEvChargingStation: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, attachment: [GoogleApi.ContentWarehouse.V1.Model.GeostoreAttachmentsAttachmentProto.t()] | nil, attribute: [GoogleApi.ContentWarehouse.V1.Model.GeostoreAttributeProto.t()] | nil, bestLocale: GoogleApi.ContentWarehouse.V1.Model.GeostoreBestLocaleProto.t() | nil, border: GoogleApi.ContentWarehouse.V1.Model.GeostoreBorderProto.t() | nil, bound: GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t() | nil, building: GoogleApi.ContentWarehouse.V1.Model.GeostoreBuildingProto.t() | nil, businessChain: GoogleApi.ContentWarehouse.V1.Model.GeostoreBusinessChainProto.t() | nil, center: GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t() | nil, child: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, covering: GoogleApi.ContentWarehouse.V1.Model.GeostoreCellCoveringProto.t() | nil, dataSource: GoogleApi.ContentWarehouse.V1.Model.GeostoreDataSourceProto.t() | nil, detailed3dModel: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t() | nil, displayData: GoogleApi.ContentWarehouse.V1.Model.GeostoreDisplayDataProto.t() | nil, disputedArea: GoogleApi.ContentWarehouse.V1.Model.GeostoreDisputedAreaProto.t() | nil, doodle: GoogleApi.ContentWarehouse.V1.Model.GeostoreDoodleProto.t() | nil, elevation: GoogleApi.ContentWarehouse.V1.Model.GeostoreElevationProto.t() | nil, elevationModel: GoogleApi.ContentWarehouse.V1.Model.GeostoreElevationModelProto.t() | nil, entrance: GoogleApi.ContentWarehouse.V1.Model.GeostoreEntranceProto.t() | nil, establishment: GoogleApi.ContentWarehouse.V1.Model.GeostoreEstablishmentProto.t() | nil, exemptRegulatedArea: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, futureGeometry: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil, futureGeometryFor: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil, geometry3d: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t() | nil, geometryPrecisionMeters: float() | nil, geopolitical: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalProto.t() | nil, geopoliticalGeometry: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeopoliticalGeometryProto.t() | nil, htmlText: [GoogleApi.ContentWarehouse.V1.Model.GeostoreHtmlTextProto.t()] | nil, id: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil, inferredGeometry: GoogleApi.ContentWarehouse.V1.Model.GeostoreInferredGeometryProto.t() | nil, interiorCovering: GoogleApi.ContentWarehouse.V1.Model.GeostoreCellCoveringProto.t() | nil, internal: GoogleApi.ContentWarehouse.V1.Model.GeostoreInternalFeatureProto.t() | nil, intersection: GoogleApi.ContentWarehouse.V1.Model.GeostoreIntersectionProto.t() | nil, intersectionGroup: GoogleApi.ContentWarehouse.V1.Model.GeostoreIntersectionGroupProto.t() | nil, kgProperty: [GoogleApi.ContentWarehouse.V1.Model.FreebasePropertyValue.t()] | nil, knowledgeGraphReference: GoogleApi.ContentWarehouse.V1.Model.GeostoreKnowledgeGraphReferenceProto.t() | nil, laneMarker: GoogleApi.ContentWarehouse.V1.Model.GeostoreLaneMarkerProto.t() | nil, level: GoogleApi.ContentWarehouse.V1.Model.GeostoreLevelProto.t() | nil, locale: GoogleApi.ContentWarehouse.V1.Model.GeostoreLocaleProto.t() | nil, logicalBorder: GoogleApi.ContentWarehouse.V1.Model.GeostoreLogicalBorderProto.t() | nil, metadata: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureMetadataProto.t() | nil, name: [GoogleApi.ContentWarehouse.V1.Model.GeostoreNameProto.t()] | nil, operations: GoogleApi.ContentWarehouse.V1.Model.GeostoreOperationsProto.t() | nil, originalId: GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t() | nil, parent: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, parking: GoogleApi.ContentWarehouse.V1.Model.GeostoreParkingProto.t() | nil, point: [GoogleApi.ContentWarehouse.V1.Model.GeostorePointProto.t()] | nil, political: GoogleApi.ContentWarehouse.V1.Model.GeostorePoliticalProto.t() | nil, polygon: [GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t()] | nil, polygonForDisplay: GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t() | nil, polyline: [GoogleApi.ContentWarehouse.V1.Model.GeostorePolyLineProto.t()] | nil, pose: GoogleApi.ContentWarehouse.V1.Model.GeostorePoseProto.t() | nil, preferredViewport: GoogleApi.ContentWarehouse.V1.Model.GeostoreRectProto.t() | nil, propertyValueStatus: [GoogleApi.ContentWarehouse.V1.Model.GeostorePropertyValueStatusProto.t()] | nil, rank: number() | nil, rankDetails: GoogleApi.ContentWarehouse.V1.Model.GeostoreRankDetailsProto.t() | nil, rawGconceptInstanceContainer: GoogleApi.ContentWarehouse.V1.Model.GeostoreOntologyRawGConceptInstanceContainerProto.t() | nil, regulatedArea: GoogleApi.ContentWarehouse.V1.Model.GeostoreRegulatedAreaProto.t() | nil, relatedBorder: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, relatedEntrance: [GoogleApi.ContentWarehouse.V1.Model.GeostoreEntranceReferenceProto.t()] | nil, relatedFeature: [GoogleApi.ContentWarehouse.V1.Model.GeostoreRelationProto.t()] | nil, relatedTerminalPoint: [GoogleApi.ContentWarehouse.V1.Model.GeostoreFeatureIdProto.t()] | nil, relatedTimezone: [GoogleApi.ContentWarehouse.V1.Model.GeostoreTimezoneProto.t()] | nil, restrictionGroup: GoogleApi.ContentWarehouse.V1.Model.GeostoreRestrictionGroupProto.t() | nil, roadMonitor: GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadMonitorProto.t() | nil, route: GoogleApi.ContentWarehouse.V1.Model.GeostoreRouteProto.t() | nil, schoolDistrict: GoogleApi.ContentWarehouse.V1.Model.GeostoreSchoolDistrictProto.t() | nil, segment: GoogleApi.ContentWarehouse.V1.Model.GeostoreSegmentProto.t() | nil, segmentPath: GoogleApi.ContentWarehouse.V1.Model.GeostoreSegmentPathProto.t() | nil, sign: GoogleApi.ContentWarehouse.V1.Model.GeostoreRoadSignProto.t() | nil, skiBoundary: GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiBoundaryProto.t() | nil, skiLift: GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiLiftProto.t() | nil, skiTrail: GoogleApi.ContentWarehouse.V1.Model.GeostoreSkiTrailProto.t() | nil, socialReference: GoogleApi.ContentWarehouse.V1.Model.GeostoreSocialReferenceProto.t() | nil, sourceInfo: [GoogleApi.ContentWarehouse.V1.Model.GeostoreSourceInfoProto.t()] | nil, status: GoogleApi.ContentWarehouse.V1.Model.GeostoreExistenceProto.t() | nil, storefrontGeometry: [GoogleApi.ContentWarehouse.V1.Model.GeostoreAnchoredGeometryProto.t()] | nil, storefrontGeometryModel: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t() | nil, syntheticGeometry: boolean() | nil, temporaryData: GoogleApi.ContentWarehouse.V1.Model.Proto2BridgeMessageSet.t() | nil, threeDimModel: GoogleApi.ContentWarehouse.V1.Model.GeostoreThreeDimensionalModelProto.t() | nil, tollCluster: GoogleApi.ContentWarehouse.V1.Model.GeostoreTollClusterProto.t() | nil, tollPath: GoogleApi.ContentWarehouse.V1.Model.GeostoreTollPathProto.t() | nil, track: [GoogleApi.ContentWarehouse.V1.Model.GeostoreTrackProto.t()] | nil, transitLine: GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitLineProto.t() | nil, transitLineVariant: GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitLineVariantProto.t() | nil, transitStation: GoogleApi.ContentWarehouse.V1.Model.GeostoreTransitStationProto.t() | nil, type: String.t() | nil, verticalOrdering: GoogleApi.ContentWarehouse.V1.Model.GeostoreVerticalOrderingProto.t() | nil, visualizationArea: GoogleApi.ContentWarehouse.V1.Model.GeostoreGeometryStoreReferenceProto.t() | nil, waterRemovedPolygon: GoogleApi.ContentWarehouse.V1.Model.GeostorePolygonProto.t() | nil, website: [GoogleApi.ContentWarehouse.V1.Model.GeostoreUrlProto.t()] | nil }
Functions
Link to this function
decode(value, options)
View SourceUnwrap a decoded JSON object into its complex fields.