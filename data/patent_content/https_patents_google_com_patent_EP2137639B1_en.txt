EP2137639B1 - Large language models in machine translation - Google Patents
Large language models in machine translation Download PDFInfo
- Publication number
- EP2137639B1 EP2137639B1 EP08744308.1A EP08744308A EP2137639B1 EP 2137639 B1 EP2137639 B1 EP 2137639B1 EP 08744308 A EP08744308 A EP 08744308A EP 2137639 B1 EP2137639 B1 EP 2137639B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- backoff
- gram
- grams
- order
- language model
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013519 translation Methods 0.000 title claims description 46
- 238000000034 method Methods 0.000 claims description 48
- 230000006870 function Effects 0.000 claims description 37
- 238000012549 training Methods 0.000 claims description 33
- 238000012545 processing Methods 0.000 claims description 18
- 238000004590 computer program Methods 0.000 claims description 17
- 230000014616 translation Effects 0.000 description 49
- 241000220317 Rosa Species 0.000 description 27
- 238000004422 calculation algorithm Methods 0.000 description 8
- 230000008569 process Effects 0.000 description 8
- 238000004891 communication Methods 0.000 description 7
- 238000007476 Maximum Likelihood Methods 0.000 description 5
- 239000011159 matrix material Substances 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 238000009499 grossing Methods 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000011156 evaluation Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 239000000203 mixture Substances 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 239000003638 chemical reducing agent Substances 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000004836 empirical method Methods 0.000 description 1
- 230000035558 fertility Effects 0.000 description 1
- 238000009472 formulation Methods 0.000 description 1
- 238000007429 general method Methods 0.000 description 1
- 238000012804 iterative process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000003550 marker Substances 0.000 description 1
- 238000003058 natural language processing Methods 0.000 description 1
- 238000012015 optical character recognition Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000009897 systematic effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/44—Statistical methods, e.g. probability models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/49—Data-driven translation using very large corpora, e.g. the web
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/42—Data-driven translation
- G06F40/45—Example-based machine translation; Alignment
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
Definitions
- This specification relates to statistical machine translation.
- Machine translation attempts to identify a most probable translation in a target language given a particular input in a source language. For example, when translating a sentence from French to English, statistical machine translation identifies the most probable English sentence given the French sentence. This maximum likelihood translation can be written as: arg max e P e
- Bayes Rule provides that: P e
- f P e P f
- f argmax e P e P f
- the most likely e i.e., the most likely English translation
- f i.e., the probability that a given English sentence would be translated into the French sentence
- a system in one aspect, includes a language model including a collection of n-grams from a corpus, each n-gram having a corresponding relative frequency in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and a collection of backoff scores, each backoff score associated with an n-gram, the backoff score determined as a function of a backoff factor and a relative frequency of a corresponding backoff n-gram in the corpus.
- Other embodiments of this aspect include corresponding systems, apparatus, computer program products, and computer readable media.
- a method in one aspect, includes generating a language model, including identifying a collection of n-grams from a corpus of training data, each n-gram of the collection having a corresponding relative frequency of occurring in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and identifying one or more backoff factors, where the backoff factors are used to identify a backoff score for one or more n-grams as a function of a relative frequency of a backoff n-gram.
- Other embodiments of this aspect include methods, apparatus, computer program products, and computer readable media.
- a method in another aspect, includes receiving an input string having a plurality of tokens, the input string being divided into one or more n-grams, each n-gram having an order, the order identifying a number of tokens in the n-gram and using a language model to identify a probability for each n-gram in the input string.
- identifying a backoff n-gram When a first n-gram in the input string is not found in the language model, identifying a backoff n-gram, the backoff n-gram having an order that is one less than the order of the first n-gram, and when the backoff n-gram is found in the language model and identifying a backoff score for the first n-gram, the backoff score being a function of a backoff factor and a relative frequency of the backoff n-gram in the language model.
- Other embodiments of this aspect include corresponding systems, apparatus, computer program products, and computer readable media.
- a backoff for an n-gram is determined directly as a function of relative frequency without calculating normalized probabilities for a backoff n-gram.
- Language models can be generated in a distributed environment where n-gram backoff values for particular n-grams can be generated on a same shard.
- FIG. 1 is a block diagram of an example machine translation system 100.
- Machine translation system includes a target corpus 102, a language model 104, a parallel corpus 106, a translation model 108, and a decoder 110.
- Providing input text 112 to the translation system 100 produces translated text 114.
- the target corpus 102 provides a collection of text in a target language (e.g., English), which is used to train the language model 104.
- the target corpus 102 can include a number of different sources of text, including, e.g., web pages and news articles.
- the target corpus 102 includes text on the order of tens to hundreds of billions of words, or even more.
- One such corpus is the Linguistic Data Consortium ("LDC") Web IT 5-gram Version 1 corpus, LDC Catalog No.: DC2006T13, ISBN: 1-58563-397-6 , contributed by Google Inc. This corpus uses approximately one trillion tokens (including individual words, punctuation, and markers identifying a beginning and end of individual sentences) of text from publicly accessible Web pages.
- n-gram is a sequence of n consecutive tokens.
- An n-gram has an order, which is the number of tokens in the n-gram. For example, a 1-gram (or unigram) includes one token; a 2-gram (or bigram) includes two tokens.
- An n-gram language model uses n-gram sub-strings to calculate the probability of a string.
- the probability of a given string can be calculated as a product of n-gram conditional probabilities.
- x), is the probability that word y follows word x.
- the conditional probabilities are generally determined empirically, according to relative frequencies in the target corpus 102. In the example above, the probability of the word y given x is given by: P y
- x f xy f x , where f (xy) is a frequency or a count of the occurrences of the string "xy" in the target corpus 102.
- the probability for the string can be determined as a product of conditional probabilities. For example, to calculate P(The red wheelbarrow) for the sentence beginning with the phrase "The red wheelbarrow” using a bigram language model, the n-gram language model calculates: P The
- the parallel corpus 106 includes a collection of text in the source language (e. g., English) and a corresponding translation in one or more target languages (e.g ., French).
- the parallel corpus 106 can include a number of different sources of text, including, e.g ., web page and news article pairs where each pair includes text in the source language and the corresponding translated text in the target language.
- the parallel corpus 106 can include multi-lingual data. For example, United Nations proceedings are available, which provide parallel translations in six languages.
- the translation model 108 identifies the conditional probability of a particular target language string given a particular source string. Thus, for an English source language and a French target language, the translation model 108 identifies the probability P(f
- Translation models can be generated in a number of different ways. In some implementations, a number of parameters are estimated in order to determine P(f
- a translation model can be defined according to four parameters: t, n, d, and p ( e.g., IBM Model 3 described, for example, in P. F. Brown, V. J. Della Pietra, S. A. Della Pietra, and R. L. Mercer, The Mathematics of Statistical Machine Translation: Parameter Estimation, Computational Linguistics 19(2), 1993 ).
- a translation parameter, t provides a probability of producing a translated word from a source word, e.g ., t(bonjour
- a fertility parameter, n provides a probability that source word will produce n target words.
- hello) represents the probability that the source word "hello" will produce exactly two French words.
- a distortion parameter, d provides a probability associated with the position of a target word in a target sentence relative to the position of the corresponding source word in a source sentence.
- 5) represents the probability that the English word in position 5 of a sentence ( e.g ., the fifth word) will provide a French word in position 3 of a translated French sentence ( e.g ., the third word).
- a parameter p provides a probability of the translation including a spurious word.
- a spurious word is a word that appears in the target language translation of a source language string that does not correspond to a source word in the source string.
- the values of the model parameters can be estimated directly if the words in the source and target sentence pairs are all aligned.
- the term "alignment” will be used to refer to a data structure that represents a word-for-word connection between source and target words (e.g ., that "hello” in one sentence aligns with "bonjour") in a pair of sentences.
- the alignment is simply a vector identifying positions of source words that various target words connect to. If the alignment is known, the parameter values can be estimated.
- a sentence pair could have two equally likely alignments. Consequently, a probability can be calculated for a particular alignment.
- the alignment probability defines the likelihood that words are aligned in a particular way.
- the probability of a particular alignment given a particular sentence pair can be written P(a
- e , f P a , f
- e ⁇ a P a , f
- a is represented by a single letter; however, it represents a matrix whose dimension can vary.
- a is a matrix random variable, a specific value of which refers to a matrix of associations (e.g ., links) between a specific source sentence and a specific paired target sentence. Columns correspond to source word position and rows to target word positions. An additional row and column may be labeled with the null word, in cases where there is no correspondence.
- the elements in the matrix are zeroes and ones, indicating the presence or absence of an association between the corresponding source and target sentence words.
- constraints may be imposed on where in the matrix links can occur (e.g ., whether a source word can map to multiple target words, whether words can map to a null word, etc.)
- e, f) can be described in terms of P(a, f
- e) can also be described as a function of the parameter values.
- the alignment probabilities can be directly calculated.
- a particular alignment a refers to a specific alignment between a specific (f, e) pair, while P(a
- e, f) is described by parameters which can be estimated by some training procedure that iteratively learns the parameters by looping over a large number of (f, e) sentence pairs, using the current parameter values to achieve a better word alignment between each pair than was achieved in the previous iteration, then using that alignment to update the parameter values, then repeating. Additional details on alignment can be found, for example, in Franz Joseph Och and Hermann Ney, A Systematic Comparison of Various Statistical Alignment Models, Computational Linguistics, 29(1): 9--51, March 2003 .
- An expectation-maximization (“EM”) algorithm can be used to estimate parameter values and alignment probabilities using an iterative process until local optimum values are determined.
- An EM algorithm calculates maximum likelihood estimates of variables in probabilistic models.
- An EM algorithm is a two-step process.
- An expectation step calculates an expectation of the likelihood by including the variable values as if they were observed.
- a maximization step calculates the maximum likelihood estimates by maximizing the expected likelihood calculated in the expectation step. The process iterates between expectation and maximization steps where the values for the variable calculated in the maximization step are used for a next expectation step.
- the term "EM algorithm” refers to a class of related algorithms: the expectation and maximization steps provide a roadmap for developing specific EM algorithms. In some implementations, other techniques are used to find maximum likelihood estimates other than the EM algorithm, for example, gradient descent or conjugate gradient techniques.
- the translation model 108 is trained to determine a most likely parameter values and alignment probability for a give source and target language.
- the decoder 110 applies the language model 104 and the translation model 108 to a given string ( e.g ., from input text 112) in order to produce a translated string ( e.g ., as translated text 114).
- the decoder 110 translates an observed sentence, f, ( e.g ., a French sentence) by seeking the sentence, e, ( e.g ., an English sentence) that maximizes the product of P(e) determined by the language model 104 and P(f
- FIG. 2 is a block diagram of an example language model 200.
- the language model 200 includes n-grams 202, n-gram probabilities 204, and backoff scores 206.
- the n-grams 202 are derived from training data, for example, from target corpus 102.
- the n-grams 202 include n-grams of each order for the particular language model 200.
- the n-grams 202 include 5-grams, 4-grams, 3-grams, 2-grams, and 1-grams derived from the training data.
- the n-gram represents a string of n consecutive tokens, where a token can include punctuation and other information, e.g ., an identifier of a start of a sentence.
- the n-gram probabilities 204 are probability estimates calculated as a function of n-gram relative frequency in the training data.
- w 1 i ⁇ 1 ⁇ ⁇ i 1 L P ⁇ w i
- a frequency, f w i j can be calculated.
- the frequency of the substring denotes the frequency of occurrence of that substring in the training data, which can be considered a long fixed sample string.
- the maximum-likelihood probability estimates for the n-grams are given by their relative frequencies.
- the relative frequencies, r, for each n-gram can be determined as: r w i
- w i ⁇ n + 1 i ⁇ 1 f w i ⁇ n + 1 i f w i ⁇ n + 1 i ⁇ 1 .
- the relative frequency of an n-gram is the frequency of the n-gram divided by the frequency of the (n-1) gram.
- the probability estimates for each n-gram in the training data can be calculated and stored for each n-gram as n-gram probabilities 204 in the language model 200.
- the relative frequency can be zero or undefined for particular n-grams if they are not found in the training data. As a result, the corresponding probability estimates can be inaccurate or undefined. This is referred to as a sparse data problem. Additionally, the use of higher order n-grams, while potentially increasing language model accuracy, exacerbates the sparse data problem. As a result, smoothing techniques are used to account for missing n-grams.
- the smoothing can be provided by backoff scores 206.
- the back-off scores 206 can be used to ensure that there is always a non-zero probability for a given n-gram. Generally, the backoff considers whether some part of the n-gram occurs. For example, if the trigram "xyz" is not found, smoothing is performed to identify whether a backoff n-gram "yz" occurs. If "yz" does not occur, the smoothing can recursively identify whether "z” occurs.
- the backoff scores 206 are calculated directly as a function of the relative frequencies of the n-grams. Consequently, the probability for a given n-gram, P w i
- a backoff score is calculated as: ⁇ S w i
- the backoff factor applies a penalty to the relative frequency of the backoff n-gram ( e.g ., to compensate for the n-gram not being present).
- the backoff scores 206 include one or more ⁇ values for particular n-gram orders.
- the specific scores for a particular n-gram are then calculated at run-time in response to an input n-gram using the ⁇ value for the n-gram order and the relative frequency of an identified backoff n-gram.
- the individual backoff scores are not stored in the language model 200, but instead are generated as needed.
- FIG. 3 illustrates a method 300 for generating a language model. For convenience, the method 300 will be described with respect to a system that performs the method 300.
- the system receives 302 training data.
- the training data can be, for example, part or all of the text in a target corpus (e.g ., the target corpus 102).
- a target corpus e.g ., the target corpus 102
- an n-gram language model is generated using the identified training data.
- a distributed training environment is used for large training data (e.g ., terabytes of data).
- MapReduce describes both a programming model and an implementation of the model for processing and generating large data sets.
- the model and its library implementation will both be referred to as MapReduce.
- MapReduce programmers specify a map function that processes input (key, value) pairs to generate a set of intermediate (key, value) pairs, and a reduce function that merges all intermediate values associated with the same intermediate key.
- Programs written in this functional style can automatically be parallelized and executed on a large cluster of commodity computers.
- the runtime system or framework can be implemented to partition the input data, schedule the program's execution across a set of machines, handle machine failures, and manage the required inter-machine communication.
- a MapReduce computation takes a set of input (key, value) pairs, and produces a set of output (key, value) pairs.
- the user expresses the computation as two functions: Map and Reduce.
- Map written, e.g., by a programmer, takes an input (key, value) pair and produces a set of intermediate (key, value) pairs.
- the MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function.
- the Reduce function also written, e.g., by a programmer, accepts an intermediate key I and a set of values for that key. It merges together these values to form a possibly smaller set of values. Typically just zero or one output value is produced for each Reduce invocation.
- the intermediate values are supplied to the user's reduce function through an iterator. In this way lists of values that are too large to fit in memory can be handled. Additional details of MapReduce are described in J. Dean and S. Ghemawat, MapReduce: Simplified Data Processing on Large Clusters, Proceedings of the 6th Symposium on Operating Systems Design and Implementation, pp. 137 150 (December 6, 2004 ).
- map tasks operate independently on different processors ( e.g ., on different computing devices) and on different portions of input data.
- reduce tasks operate independently on a portion of the intermediate data.
- the portions of the intermediate data are partitioned according to the intermediate keys so that the same reducer operates on all values for a given intermediate key.
- the system generates 304 a vocabulary from the training data.
- the vocabulary identifies the individual tokens (e.g ., words, punctuation) within the training data.
- MapReduce can be applied to the training data to generate the vocabulary along with a frequency count associated with each token in the vocabulary.
- the Map phase takes an input (key, value) pair and produces an intermediate (key, value) pair.
- the input (key, value) pairs to the map phase correspond to a key identifying the node and a value that is the text in the node.
- the intermediate (key, value) pair has a key value corresponding to individual words and a corresponding value for the word.
- the Reduce phase reduces the intermediate (key, value) pairs having the same key into a single output (key, value). Specifically, the reduce outputs a vocabulary for the words in the training data and their frequencies, (word, frequency).
- Shard S1 includes training data text "a rose”.
- Shard S2 includes the text "is a rose”.
- Shard S3 includes the text "a rose is a rose”.
- the map from S1 produces intermediate (key, value) pairs:
- the map from S2 is output as intermediate (key, value) pairs:
- intermediate (key, value) pairs can be optimized before reduce phase by simplifying redundant entries.
- the intermediate (key, value) pairs from S3 can be optimized to:
- the resulting output (key, value) pairs in the example are:
- the results of the Reduce phase provide a vocabulary for the text in the training data as well as the word frequencies.
- a particular reduce shard is identified for intermediate (key, values) of a particular shard using, for example, a hash function.
- the map and reduce functions for generating the vocabulary can be expressed as follows:
- the system generates 306 n-grams using the vocabulary.
- the vocabulary allows the system to determine every possible combination of vocabulary token up to a maximum n-gram order.
- the system can be implemented using MapReduce to generate the n-grams and their frequencies within the training data..
- the Map phase can process the training data shards in view of the vocabulary.
- the Reduce phase combines n-grams such that the output (key, value) pairs are (n-gram, frequency) pairs.
- example shards are used to illustrate the n-gram frequency for 2-grams using MapReduce.
- the example shards are S4, S5, and S6.
- Shard S4 includes the text "a rose foo”.
- Shard S5 includes the text "is a rose bar” and the shard S6 includes the text "a rose is a rose”.
- a map function is applied for the input (key, value) for the node as a function of the vocabulary.
- the vocabulary in this example is ( ⁇ s>, ⁇ /s>, ⁇ UNK>, a, is, rose), where ⁇ UNK> provides a generic placeholder representing rare words in the training data e.g ., "foo".
- the intermediate (key, value) pairs produced in the map phase have keys equal to 2-grams and a value for the 2-gram.
- the intermediate (key, value) pairs are:
- the resulting output (key, value) pairs in the example are:
- the map function for generating the n-grams can be expressed as follows:
- the reduce function can be expressed in the same manner as the reduce function for the vocabulary generation.
- the system determines 308 relative frequencies for the n-grams. Recall, the relative frequency was defined above as: r w i
- w i ⁇ n + 1 i ⁇ 1 f w i ⁇ n + 1 i f w i ⁇ n + 1 i ⁇ 1 .
- the relative frequency of n-grams in the corpus can also be identified using MapReduce. For example, n-grams can be divided into a number of shards. The input of n-grams and frequencies can be processed in the Map and Reduce phases to produce relative frequencies for the n-grams in a similar manner as describe above.
- a sharding function can be used that places the values need for the numerator and denominator to calculate the relative frequency on the same shard.
- a hash function can be applied to the first words of the n-grams.
- sharding using the first word only can result in imbalanced shards.
- some terms can be found at the beginning of a disproportionate number of n-grams (e.g ., stopwords, some punctuation marks, or the beginning of sentence marker).
- the shards can be more evenly balanced by hashing based on the first two words of the n-grams, for example:
- the unigram counts are reproduced on each shard in order to calculate relative frequencies within individual shards.
- the data amount is small in comparison to the total number of n-grams.
- the system determines 310 backoff scores.
- the individual shards including all information necessary to calculate the relative frequencies for the n-grams in the shard.
- Backoff scores are calculated when a full n-gram is not found.
- the system recursively looks for the backoff relative frequencies, e.g., r w i
- the backoff scores are stored on each shard for the respective backoff n-grams of the shard.
- the system stores values for the backoff factor ⁇ , which are used by individual shards to calculate the particular backoff scores at run-time in response to an input n-gram (e.g., from an input string to be translated).
- a language model can be generated from a corpus in the following steps.
- the system generates a vocabulary.
- the system uses input text from the corpus, the system outputs a vocabulary of 1-grams and their frequencies.
- n-grams and their frequencies are identified.
- the n-grams and their frequencies are identified using the text and vocabulary as input.
- Relative frequencies for the n-grams are calculated using the n-grams and their respective frequencies.
- Each step in the process can be implemented using MapReduce as described above.
- the backoff scores are then determined directly as a function of the relative frequencies of the n-grams.
- the backoff factor ⁇ there can be multiple values for the backoff factor ⁇ depending on n-gram order. For example, if for particular sample data 4-grams are often used, then the penalty (i.e ., ⁇ value) for backing off from a 5-gram to a 4-gram should be small. Conversely, if 4-grams are often used within the sample data, then the penalty for backing off from a 4-gram to a 3-gram should be large.
- a count can be obtained as to how many of the n-grams at each order also occur in the language model.
- the ⁇ k values are proportional to the counts at each order.
- the notation ⁇ 5 denotes the backoff factor when backing off from a 5-gram to a 4-gram. In some implementations, there is no backoff from 1-grams to 0-grams, therefore that ⁇ 1 value is not used.
- cap values can be included.
- M k is the sum of the probabilities at order k that are used in the heldout data set.
- ⁇ 5 0.5396
- ⁇ 4 0.5138
- ⁇ 3 0.1111
- ⁇ max a maximum backoff value
- discriminative training can be used to determine the values for one or more backoff factors.
- Machine translation systems typically use discriminative training techniques to optimize free parameters in order to minimize an automated measure of translation quality, e.g., a Bilingual Evaluation Understudy ("BLEU") score, on some sample data for which a set of reference translations are available.
- BLEU Bilingual Evaluation Understudy
- Discriminative training does not attempt to optimize numeric scores directly. Instead, a set of backoff factor values are identified that produce a better translation score than other backoff factor values.
- BLEU scores are described, for example, in Papineni, K., Roukos, S., Ward, T., and Zhu, W. J. "BLEU: a method for automatic evaluation of machine translation” in ACL-2002: 40th Annual meeting of the Association for Computational Linguistics pp. 311-318 (2002 ).
- BLEU BLEU
- One example method of discriminatively training features in statistical machine translation is described in Franz Josef Och, Minimum error rate training in statistical machine translation, In Proc. of the 41st Annual Meeting of the Association for Computational Linguistics (ACL), pages 160-167 (2003 ).
- the above method can be used to train the backoff factors.
- the general method takes described in the above reference can be applied to determining backoff factors, by taking as additional "feature functions", the degree of actual backoff encountered when applying the language model at each word position during the translations.
- the resulting feature function weights are then converted to backoff factors using a log-linear relationship (e.g., a log-linear formulation of a decoding search objective function).
- the feature functions can be indicator functions for a specific backoff level (e.g ., 1 when the language model has backed off exactly k times, and zero otherwise), a step function (e.g ., 1 when the language model has backed off at least k times), or other parameterizations.
- FIG. 4 is an example system for machine translations.
- a data processing apparatus 410 can include hardware/firmware, an operating system and one or more programs, including translation program 420.
- the translation program 420 operates, in conjunction with the data processing apparatus 410, to effect the operations described in this specification.
- the translation program 420 in combination with one or more processors and computer-readable media (e.g., memory), represents one or more structural components in the system 400.
- the translation program 420 can be a translation processing application, or a portion.
- an application is a computer program that the user perceives as a distinct computer tool used for a defined purpose.
- An application can be built entirely into the operating system (OS) of the data processing apparatus 410, or an application can have different components located in different locations ( e.g ., one portion in the OS or kernel mode, one portion in the user mode, and one portion in a remote server), and an application can be built on a runtime library serving as a software platform of the apparatus 410.
- application processing can be distributed over a network 480 using one or more processors 490.
- a language model of the translation program 420 can be distributively trained over the one or more processors 490.
- the data processing apparatus 410 includes one or more processors 430 and at least one computer-readable medium 440 (e.g ., random access memory, storage device, etc.).
- the data processing apparatus 410 can also include a communication interface 450, one or more user interface devices 460, and one or more additional devices 470.
- the user interface devices 460 can include display screens, keyboards, mouse, stylus, or any combination thereof.
- the data processing apparatus 410 is operable to identify backoff factors as a function of relative n-gram frequency. Additionally, the language model can be generated such that the backoff factors can be derived from a single shard.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a tangible program carrier for execution by, or to control the operation of, data processing apparatus.
- the tangible program carrier can be a propagated signal or a computer-readable medium.
- the propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a computer.
- the computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g ., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files ( e.g ., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g ., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g ., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g ., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g ., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g ., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g ., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g ., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g ., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g ., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Description
- This specification relates to statistical machine translation.
- Manual translation of text by a human operator can be time consuming and costly. One goal of machine translation is to automatically translate text in a source language to corresponding text in a target language. There are several different approaches to machine translation including example-based machine translation and statistical machine translation. Statistical machine translation attempts to identify a most probable translation in a target language given a particular input in a source language. For example, when translating a sentence from French to English, statistical machine translation identifies the most probable English sentence given the French sentence. This maximum likelihood translation can be written as:
- Consequently, the most likely e (i.e., the most likely English translation) is one that maximizes the product of the probability that e occurs and the probability that e would be translated into f (i.e., the probability that a given English sentence would be translated into the French sentence).
- "Estimation of Probabilities from Sparse Data for the Language Model Component of a Speech Recognizer" by Slava M. Katz (IEEE Transactions on Acoustics, Speech, and Signal Processing VOL ASSP-35, NO.3 March 1987) describes a type of m-gram language model which offers, via a nonlinear recursive procedure, a solution to the problem of estimating probabilities from sparse data. The document describes use of a normalizing constant when determining a probability for an unseen m-gram.
- "Distributed Language Modeling for N-best List Re-ranking" by Zhang et al (Proceedings of the 2006 conference on Empirical Methods in Natural Language Processing, 22/23 July 2006) discloses a distributed language model for N-best list re-ranking. The model is based on the client/server paradigm where each server hosts a portion of the data and provides information to the client. This model is said to allow for using an arbitrarily large corpus in a very efficient way.
- The invention is defined by the claims.
- Systems, methods, and computer program products for machine translation are provided. In general, in one aspect, a system is provided. The system includes a language model including a collection of n-grams from a corpus, each n-gram having a corresponding relative frequency in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and a collection of backoff scores, each backoff score associated with an n-gram, the backoff score determined as a function of a backoff factor and a relative frequency of a corresponding backoff n-gram in the corpus. Other embodiments of this aspect include corresponding systems, apparatus, computer program products, and computer readable media.
- In general, in one aspect, a method is provided. The method includes generating a language model, including identifying a collection of n-grams from a corpus of training data, each n-gram of the collection having a corresponding relative frequency of occurring in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1 and identifying one or more backoff factors, where the backoff factors are used to identify a backoff score for one or more n-grams as a function of a relative frequency of a backoff n-gram. Other embodiments of this aspect include methods, apparatus, computer program products, and computer readable media.
- In general, in another aspect, a method is provided. The method includes receiving an input string having a plurality of tokens, the input string being divided into one or more n-grams, each n-gram having an order, the order identifying a number of tokens in the n-gram and using a language model to identify a probability for each n-gram in the input string. When a first n-gram in the input string is not found in the language model, identifying a backoff n-gram, the backoff n-gram having an order that is one less than the order of the first n-gram, and when the backoff n-gram is found in the language model and identifying a backoff score for the first n-gram, the backoff score being a function of a backoff factor and a relative frequency of the backoff n-gram in the language model. Other embodiments of this aspect include corresponding systems, apparatus, computer program products, and computer readable media.
- According to the invention, a backoff for an n-gram is determined directly as a function of relative frequency without calculating normalized probabilities for a backoff n-gram.
- Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Language models can be generated in a distributed environment where n-gram backoff values for particular n-grams can be generated on a same shard.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
-
FIG. 1 is a block diagram of an example machine translation system. -
FIG. 2 is a block diagram of an example language model. -
FIG. 3 illustrates a method for generating a language model. -
FIG. 4 is an example system for performing translations. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 1 is a block diagram of an examplemachine translation system 100. Machine translation system includes atarget corpus 102, alanguage model 104, aparallel corpus 106, atranslation model 108, and adecoder 110. Providinginput text 112 to thetranslation system 100 produces translatedtext 114. - The
target corpus 102 provides a collection of text in a target language (e.g., English), which is used to train thelanguage model 104. Thetarget corpus 102 can include a number of different sources of text, including, e.g., web pages and news articles. In some implementations, thetarget corpus 102 includes text on the order of tens to hundreds of billions of words, or even more. One such corpus is the Linguistic Data Consortium ("LDC") Web IT 5-gram Version 1 corpus, LDC Catalog No.: DC2006T13, ISBN: 1-58563-397-6, contributed by Google Inc. This corpus uses approximately one trillion tokens (including individual words, punctuation, and markers identifying a beginning and end of individual sentences) of text from publicly accessible Web pages. - The
language model 104 identifies the probability that a particular string (e.g., a phrase, sentence, or collection of sentences) in the source language occurs. Thus, for English, thelanguage model 104 identifies the probability that a particular string in English occurs. To identify the probability of a particular string occurring, thelanguage model 104 calculates the number of times the string occurs in thetarget corpus 102 divided by the total number of string in thetarget corpus 102. For example, if the phrase "The red wheelbarrow" occurs 53,000 times in a corpus of 100,000,000 words, the probability equals: - However, a number of possible strings will have a probability of zero since they are not found within the
target corpus 102. Therefore, in some implementations, the probability of a particular string is calculated as a function of the probabilities of sub-string components. One technique for representing sub-strings is by using n-grams. An n-gram is a sequence of n consecutive tokens. An n-gram has an order, which is the number of tokens in the n-gram. For example, a 1-gram (or unigram) includes one token; a 2-gram (or bigram) includes two tokens. - An n-gram language model uses n-gram sub-strings to calculate the probability of a string. The probability of a given string can be calculated as a product of n-gram conditional probabilities. The conditional probability for a bigram, represented P(y | x), is the probability that word y follows word x. The conditional probabilities are generally determined empirically, according to relative frequencies in the
target corpus 102. In the example above, the probability of the word y given x is given by:target corpus 102. - The probability for the string can be determined as a product of conditional probabilities. For example, to calculate P(The red wheelbarrow) for the sentence beginning with the phrase "The red wheelbarrow" using a bigram language model, the n-gram language model calculates:
-
- The
parallel corpus 106 includes a collection of text in the source language (e.g., English) and a corresponding translation in one or more target languages (e.g., French). Theparallel corpus 106 can include a number of different sources of text, including, e.g., web page and news article pairs where each pair includes text in the source language and the corresponding translated text in the target language. In another example, theparallel corpus 106 can include multi-lingual data. For example, United Nations proceedings are available, which provide parallel translations in six languages. - The
translation model 108 identifies the conditional probability of a particular target language string given a particular source string. Thus, for an English source language and a French target language, thetranslation model 108 identifies the probability P(f | e) of a French string f given an English string e. Translation models can be generated in a number of different ways. In some implementations, a number of parameters are estimated in order to determine P(f | e). For example, a translation model can be defined according to four parameters: t, n, d, and p (e.g., IBM Model 3 described, for example, in P. F. Brown, V. J. Della Pietra, S. A. Della Pietra, and R. L. Mercer, The Mathematics of Statistical Machine Translation: Parameter Estimation, Computational Linguistics 19(2), 1993). - A translation parameter, t, provides a probability of producing a translated word from a source word, e.g., t(bonjour | hello). A fertility parameter, n, provides a probability that source word will produce n target words. For example, n(2 | hello) represents the probability that the source word "hello" will produce exactly two French words. A distortion parameter, d, provides a probability associated with the position of a target word in a target sentence relative to the position of the corresponding source word in a source sentence. For example, d(3 | 5) represents the probability that the English word in position 5 of a sentence (e.g., the fifth word) will provide a French word in position 3 of a translated French sentence (e.g., the third word). Additionally, a parameter p provides a probability of the translation including a spurious word. A spurious word is a word that appears in the target language translation of a source language string that does not correspond to a source word in the source string.
- The values of the model parameters can be estimated directly if the words in the source and target sentence pairs are all aligned. The term "alignment" will be used to refer to a data structure that represents a word-for-word connection between source and target words (e.g., that "hello" in one sentence aligns with "bonjour") in a pair of sentences. In some implementations, the alignment is simply a vector identifying positions of source words that various target words connect to. If the alignment is known, the parameter values can be estimated.
- There can be more than one possible alignment. For example, a sentence pair could have two equally likely alignments. Consequently, a probability can be calculated for a particular alignment. The alignment probability defines the likelihood that words are aligned in a particular way. The probability of a particular alignment given a particular sentence pair can be written P(a | e, f), where:
- Therefore, P(a | e, f) can be described in terms of P(a, f | e). However, P(a, f|e) can also be described as a function of the parameter values. Thus, if the parameter values are known, the alignment probabilities can be directly calculated.
- A particular alignment a refers to a specific alignment between a specific (f, e) pair, while P(a | e, f) is the posterior probability over possible alignments, again for the specific (f, e) pair. P(a | e, f) is described by parameters which can be estimated by some training procedure that iteratively learns the parameters by looping over a large number of (f, e) sentence pairs, using the current parameter values to achieve a better word alignment between each pair than was achieved in the previous iteration, then using that alignment to update the parameter values, then repeating. Additional details on alignment can be found, for example, in Franz Joseph Och and Hermann Ney, A Systematic Comparison of Various Statistical Alignment Models, Computational Linguistics, 29(1): 9--51, March 2003.
- Consequently, to calculate P(f | e), the translation system calculates P(a, f |e). However, to calculate P (a, f|e), the parameter values are needed. Additionally, to get the parameter values, the system needs P(a | e, f), but to do that P(a, f | e) is again needed. Thus, a technique is used to solve for both parameter values and alignment probabilities substantially simultaneously.
- An expectation-maximization ("EM") algorithm can be used to estimate parameter values and alignment probabilities using an iterative process until local optimum values are determined. An EM algorithm calculates maximum likelihood estimates of variables in probabilistic models. An EM algorithm is a two-step process. An expectation step calculates an expectation of the likelihood by including the variable values as if they were observed. A maximization step calculates the maximum likelihood estimates by maximizing the expected likelihood calculated in the expectation step. The process iterates between expectation and maximization steps where the values for the variable calculated in the maximization step are used for a next expectation step. The term "EM algorithm" refers to a class of related algorithms: the expectation and maximization steps provide a roadmap for developing specific EM algorithms. In some implementations, other techniques are used to find maximum likelihood estimates other than the EM algorithm, for example, gradient descent or conjugate gradient techniques.
- Using a technique such as an EM algorithm, the
translation model 108 is trained to determine a most likely parameter values and alignment probability for a give source and target language. - The
decoder 110 applies thelanguage model 104 and thetranslation model 108 to a given string (e.g., from input text 112) in order to produce a translated string (e.g., as translated text 114). In particular, thedecoder 110 translates an observed sentence, f, (e.g., a French sentence) by seeking the sentence, e, (e.g., an English sentence) that maximizes the product of P(e) determined by thelanguage model 104 and P(f | e) determined by thetranslation model 108. -
FIG. 2 is a block diagram of anexample language model 200. Thelanguage model 200 includes n-grams 202, n-gram probabilities 204, and backoff scores 206. The n-grams 202 are derived from training data, for example, fromtarget corpus 102. The n-grams 202 include n-grams of each order for theparticular language model 200. For example, for a 5-gram language model, the n-grams 202 include 5-grams, 4-grams, 3-grams, 2-grams, and 1-grams derived from the training data. In some implementations, the n-gram represents a string of n consecutive tokens, where a token can include punctuation and other information, e.g., an identifier of a start of a sentence. - The n-
gram probabilities 204 are probability estimates calculated as a function of n-gram relative frequency in the training data. For example, a string of L tokens can be represented as - For any substring (e.g., a particular n-gram), denoted
- The relative frequency of an n-gram is the frequency of the n-gram divided by the frequency of the (n-1) gram. The probability estimates for each n-gram in the training data can be calculated and stored for each n-gram as n-
gram probabilities 204 in thelanguage model 200. - The relative frequency can be zero or undefined for particular n-grams if they are not found in the training data. As a result, the corresponding probability estimates can be inaccurate or undefined. This is referred to as a sparse data problem. Additionally, the use of higher order n-grams, while potentially increasing language model accuracy, exacerbates the sparse data problem. As a result, smoothing techniques are used to account for missing n-grams.
- The smoothing can be provided by backoff scores 206. The back-off
scores 206 can be used to ensure that there is always a non-zero probability for a given n-gram. Generally, the backoff considers whether some part of the n-gram occurs. For example, if the trigram "xyz" is not found, smoothing is performed to identify whether a backoff n-gram "yz" occurs. If "yz" does not occur, the smoothing can recursively identify whether "z" occurs. - In some implementations, the backoff scores 206 are calculated directly as a function of the relative frequencies of the n-grams. Consequently, the probability for a given n-gram,
-
- In some alternative implementations, the backoff scores 206 include one or more α values for particular n-gram orders. The specific scores for a particular n-gram are then calculated at run-time in response to an input n-gram using the α value for the n-gram order and the relative frequency of an identified backoff n-gram. Thus, the individual backoff scores are not stored in the
language model 200, but instead are generated as needed. -
FIG. 3 illustrates amethod 300 for generating a language model. For convenience, themethod 300 will be described with respect to a system that performs themethod 300. - The system receives 302 training data. The training data can be, for example, part or all of the text in a target corpus (e.g., the target corpus 102). In some implementations, an n-gram language model is generated using the identified training data.
- Additionally, in some implementations, a distributed training environment is used for large training data (e.g., terabytes of data). One example technique for distributed training is MapReduce. The term MapReduce describes both a programming model and an implementation of the model for processing and generating large data sets. The model and its library implementation will both be referred to as MapReduce. Using MapReduce, programmers specify a map function that processes input (key, value) pairs to generate a set of intermediate (key, value) pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Programs written in this functional style can automatically be parallelized and executed on a large cluster of commodity computers. The runtime system or framework can be implemented to partition the input data, schedule the program's execution across a set of machines, handle machine failures, and manage the required inter-machine communication.
- A MapReduce computation takes a set of input (key, value) pairs, and produces a set of output (key, value) pairs. The user expresses the computation as two functions: Map and Reduce.
- Map, written, e.g., by a programmer, takes an input (key, value) pair and produces a set of intermediate (key, value) pairs. The MapReduce library groups together all intermediate values associated with the same intermediate key I and passes them to the Reduce function.
- The Reduce function, also written, e.g., by a programmer, accepts an intermediate key I and a set of values for that key. It merges together these values to form a possibly smaller set of values. Typically just zero or one output value is produced for each Reduce invocation. The intermediate values are supplied to the user's reduce function through an iterator. In this way lists of values that are too large to fit in memory can be handled. Additional details of MapReduce are described in J. Dean and S. Ghemawat, MapReduce: Simplified Data Processing on Large Clusters, Proceedings of the 6th Symposium on Operating Systems Design and Implementation, pp. 137 150 (December 6, 2004).
- Typically, several map tasks operate independently on different processors (e.g., on different computing devices) and on different portions of input data. Similarly, several reduce tasks operate independently on a portion of the intermediate data. The portions of the intermediate data are partitioned according to the intermediate keys so that the same reducer operates on all values for a given intermediate key.
- The system generates 304 a vocabulary from the training data. The vocabulary identifies the individual tokens (e.g., words, punctuation) within the training data. MapReduce can be applied to the training data to generate the vocabulary along with a frequency count associated with each token in the vocabulary.
- The Map phase takes an input (key, value) pair and produces an intermediate (key, value) pair. In particular, the input (key, value) pairs to the map phase correspond to a key identifying the node and a value that is the text in the node. The intermediate (key, value) pair has a key value corresponding to individual words and a corresponding value for the word. The Reduce phase reduces the intermediate (key, value) pairs having the same key into a single output (key, value). Specifically, the reduce outputs a vocabulary for the words in the training data and their frequencies, (word, frequency).
- For example, for three shards S1, S2, and S3, the vocabulary and word frequencies can be generated. Shard S1 includes training data text "a rose". Shard S2 includes the text "is a rose". Shard S3 includes the text "a rose is a rose". During the Map phase, the input for each shard is key = ID and value = sentence. The map output is: key = word and value = 1. In particular, the map from S1 produces intermediate (key, value) pairs:
- (<s>, 1)
- (a, 1)
- (rose, 1)
- (</s>, 1).
- The map from S2 is output as intermediate (key, value) pairs:
- (<s>, 1)
- (is, 1)
- (a, 1)
- (rose, 1)
- (</s>, 1).
- Finally, the map from S3 produces intermediate (key, value) pairs:
- (<s>, 1)
- (a, 1)
- (rose, 1)
- (is, 1)
- (a, 1)
- (rose, 1)
- (</s>, 1).
- In some implementations, intermediate (key, value) pairs can be optimized before reduce phase by simplifying redundant entries. For example, the intermediate (key, value) pairs from S3 can be optimized to:
- (<s>, 1)
- (a, 2)
- (rose, 2)
- (is, 1)
- (</s>, 1).
- During the Reduce phase, the intermediate (key, value) pairs are combined to produce output (key, value) pairs where the key = word and value = count. The resulting output (key, value) pairs in the example are:
- (<s>, 3)
- (a, 4)
- (is, 2)
- (rose, 4)
- (</s>, 3).
- The results of the Reduce phase provide a vocabulary for the text in the training data as well as the word frequencies. In some implementations, a particular reduce shard is identified for intermediate (key, values) of a particular shard using, for example, a hash function.
- The map and reduce functions for generating the vocabulary can be expressed as follows:
Map (string key, string value) { //key=docid, ignored; value= document array words = Tokenize(value); for i=1..#words Emit (words[i], "1");} int ShardForKey (string key, int nshards) {return Hash(key) % nshards; } Reduce (string key, iterator values) { // key=term; values= counts int sum = 0; for each v in values sum += Parselnt (v); Emit (AsString(sum)); }
- (<s> a, 1)
- (a rose, 1)
- (rose <UNK>, 1)
- (<UNK> </s>, 1).
- (<s> is, 1)
- (is a, 1)
- (a rose, 1)
- (rose <UNK>, 1)
- (<UNK> </s>, 1).
- (<s> a, 1)
- (a rose, 1)
- (rose is, 1)
- (is a, 1)
- (a rose, 1)
- (rose </s>, 1).
- (<s> a, 2)
- (<s> is, 1)
- (a rose, 3)
- (is a, 2)
- (rose is, 1)
- (rose <UNK>, 2)
- (rose </s>, 1)
- (<UNK> </s>, 2).
Map (string key, string value) { // key=docid, ignored; value=document array ids = Tolds (Tokenize (value)); for i = 1 .. #ids for j = 0 .. maxorder-1 Emit (ids[i-j .. i], "1"); }
Int ShardForKey (string key, int nshards) { String prefix = FirstTwoWords (key); Return Hash(prefix) % nshards; }
α5 = 0.7012, α4 = 0.6090, α3 = 0.3632, and α2 = 0.1728.
Claims (11)
- A computer-implemented method comprising:
generating a language model (200), including:identifying a collection of n-grams (202) from a corpus of training data, each n-gram of the collection having a corresponding relative frequency of occurring in the corpus and an order n corresponding to a number of tokens in the n-gram, each n-gram corresponding to a backoff n-gram having an order of n-1;applying a sharding function to generate a plurality of shards containing one or more n-grams of the collection of n-grams, each shard comprising values needed to calculate the relative frequency of the one or more n-grams in the shard; andidentifying one or more backoff factors, where the backoff factors are used to identify a backoff score (206) for one or more n-grams as a function of a relative frequency of a backoff n-gram, wherein the relative frequency for each backoff n-gram is calculated from a single shard such that the backoff score can be identified without calculating normalized probabilities for the backoff n-gram. - The method of claim 1, where identifying the one or more backoff factors comprises:
performing discriminative training on a set of sample data, the discriminative training identifying values for the one or more backoff factors that maximize a measure of translation quality. - The method of claim 2, where indicator feature functions are used to identify the one or more backoff factors.
- The method of claim 1, where identifying the one or more backoff factors comprises:
determining a backoff factor for each n-gram order, where the backoff factor is derived from a number of occurrences of the n-gram at each order in a sample data set. - The method of claim 1, further comprising calculating backoff scores for n-grams using the one or more backoff factors and storing the backoff scores.
- The method of claim 1, wherein the backoff factors comprise a constant penalty value.
- A computer program product, encoded on a tangible program carrier, operable to cause data processing apparatus to perform operations according to anyone of the methods of claims 1 to 6.
- A computer-implemented system comprising the language model (200) of claims 1 to 6.
- A computer-implemented method comprising:receiving an input string having a plurality of tokens, the input string being divided into one or more n-grams, each n-gram having an order, the order identifying a number of tokens in the n-gram; andusing a language model (200) generated using the computer-implemented method of claim 1 to identify a probability (204) for each n-gram in the input string;when a first n-gram in the input string is not found in the language model, identifying a backoff n-gram, the backoff n-gram having an order that is one less than the order of the first n-gram; andwhen the backoff n- gram is found in the language model, identifying a backoff score (206) for the first n-gram, the backoff score being a function of a backoff factor and a relative frequency of the backoff n-gram in the language model, wherein the backoff score is identified from a single shard without calculating normalized probabilities for the backoff n-gram.
- The method of claim 9, where identifying a backoff score includes: looking up a calculated backoff score for the n-gram, and/or calculating the backoff score using the backoff factor for the n-gram and the relative frequency of the backoff n-gram.
- A computer program product, encoded on a tangible program carrier, operable to cause data processing apparatus to perform operations according to the method of claim 9 or 10.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US92028307P | 2007-03-26 | 2007-03-26 | |
US11/767,436 US8332207B2 (en) | 2007-03-26 | 2007-06-22 | Large language models in machine translation |
PCT/US2008/058116 WO2008118905A2 (en) | 2007-03-26 | 2008-03-25 | Large language models in machine translation |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2137639A2 EP2137639A2 (en) | 2009-12-30 |
EP2137639B1 true EP2137639B1 (en) | 2019-01-16 |
Family
ID=39789254
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP08744308.1A Active EP2137639B1 (en) | 2007-03-26 | 2008-03-25 | Large language models in machine translation |
Country Status (6)
Country | Link |
---|---|
US (2) | US8332207B2 (en) |
EP (1) | EP2137639B1 (en) |
JP (1) | JP5484317B2 (en) |
KR (1) | KR20100015518A (en) |
CN (1) | CN101707873B (en) |
WO (1) | WO2008118905A2 (en) |
Families Citing this family (55)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2008083503A1 (en) * | 2007-01-10 | 2008-07-17 | National Research Council Of Canada | Means and method for automatic post-editing of translations |
US8332207B2 (en) | 2007-03-26 | 2012-12-11 | Google Inc. | Large language models in machine translation |
US9002869B2 (en) | 2007-06-22 | 2015-04-07 | Google Inc. | Machine translation for query expansion |
US8060360B2 (en) * | 2007-10-30 | 2011-11-15 | Microsoft Corporation | Word-dependent transition models in HMM based word alignment for statistical machine translation |
US8849665B2 (en) * | 2008-01-30 | 2014-09-30 | At&T Intellectual Property I, L.P. | System and method of providing machine translation from a source language to a target language |
US8844033B2 (en) * | 2008-05-27 | 2014-09-23 | The Trustees Of Columbia University In The City Of New York | Systems, methods, and media for detecting network anomalies using a trained probabilistic model |
US20100023315A1 (en) * | 2008-07-25 | 2010-01-28 | Microsoft Corporation | Random walk restarts in minimum error rate training |
US8301619B2 (en) * | 2009-02-18 | 2012-10-30 | Avaya Inc. | System and method for generating queries |
US20100299132A1 (en) * | 2009-05-22 | 2010-11-25 | Microsoft Corporation | Mining phrase pairs from an unstructured resource |
JP2011028703A (en) * | 2009-07-23 | 2011-02-10 | Toyo Networks & System Integration Co Ltd | Security system incorporated in search system |
US20110035211A1 (en) * | 2009-08-07 | 2011-02-10 | Tal Eden | Systems, methods and apparatus for relative frequency based phrase mining |
WO2011050494A1 (en) * | 2009-10-29 | 2011-05-05 | Google Inc. | Generating input suggestions |
JP5408442B2 (en) | 2010-01-21 | 2014-02-05 | 株式会社日立製作所 | Parallel and distributed processing method and computer system |
US8655647B2 (en) * | 2010-03-11 | 2014-02-18 | Microsoft Corporation | N-gram selection for practical-sized language models |
CN101882226B (en) * | 2010-06-24 | 2013-07-24 | 汉王科技股份有限公司 | Method and device for improving language discrimination among characters |
TWI434187B (en) | 2010-11-03 | 2014-04-11 | Inst Information Industry | Text conversion method and system |
CN102486770B (en) * | 2010-12-02 | 2014-09-17 | 财团法人资讯工业策进会 | Character conversion method and system |
US8660836B2 (en) | 2011-03-28 | 2014-02-25 | International Business Machines Corporation | Optimization of natural language processing system based on conditional output quality at risk |
US9367526B1 (en) * | 2011-07-26 | 2016-06-14 | Nuance Communications, Inc. | Word classing for language modeling |
US8953885B1 (en) * | 2011-09-16 | 2015-02-10 | Google Inc. | Optical character recognition |
CN102509549B (en) * | 2011-09-28 | 2013-08-14 | 盛乐信息技术（上海）有限公司 | Language model training method and system |
CN102663083A (en) * | 2012-04-01 | 2012-09-12 | 南通大学 | Large-scale social network information extraction method based on distributed computation |
US8983211B2 (en) * | 2012-05-14 | 2015-03-17 | Xerox Corporation | Method for processing optical character recognizer output |
US20130325436A1 (en) * | 2012-05-29 | 2013-12-05 | Wright State University | Large Scale Distributed Syntactic, Semantic and Lexical Language Models |
CN103631771A (en) * | 2012-08-28 | 2014-03-12 | 株式会社东芝 | Method and device for improving linguistic model |
US10095692B2 (en) * | 2012-11-29 | 2018-10-09 | Thornson Reuters Global Resources Unlimited Company | Template bootstrapping for domain-adaptable natural language generation |
US9484023B2 (en) | 2013-02-22 | 2016-11-01 | International Business Machines Corporation | Conversion of non-back-off language models for efficient speech decoding |
IN2013MU02217A (en) * | 2013-07-01 | 2015-06-12 | Tata Consultancy Services Ltd | |
US20150051896A1 (en) * | 2013-08-14 | 2015-02-19 | National Research Council Of Canada | Method and apparatus to construct program for assisting in reviewing |
KR101509727B1 (en) * | 2013-10-02 | 2015-04-07 | 주식회사 시스트란인터내셔널 | Apparatus for creating alignment corpus based on unsupervised alignment and method thereof, and apparatus for performing morphological analysis of non-canonical text using the alignment corpus and method thereof |
US10346381B2 (en) * | 2013-11-14 | 2019-07-09 | Facebook, Inc. | Atomic update operations in a data storage system |
US10176256B1 (en) * | 2013-12-23 | 2019-01-08 | BroadbandTV, Corp | Title rating and improvement process and system |
US9842592B2 (en) | 2014-02-12 | 2017-12-12 | Google Inc. | Language models using non-linguistic context |
US9412365B2 (en) | 2014-03-24 | 2016-08-09 | Google Inc. | Enhanced maximum entropy models |
US20150317314A1 (en) * | 2014-04-30 | 2015-11-05 | Linkedln Corporation | Content search vertical |
WO2016065327A1 (en) * | 2014-10-24 | 2016-04-28 | Google Inc. | Neural machine translation systems with rare word processing |
US10134394B2 (en) * | 2015-03-20 | 2018-11-20 | Google Llc | Speech recognition using log-linear model |
US10268684B1 (en) * | 2015-09-28 | 2019-04-23 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10185713B1 (en) | 2015-09-28 | 2019-01-22 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US9959271B1 (en) | 2015-09-28 | 2018-05-01 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10339116B2 (en) | 2015-10-07 | 2019-07-02 | Oracle International Corporation | Composite sharding |
US9690777B1 (en) * | 2015-12-10 | 2017-06-27 | Webinterpret | Translating website listings and propagating the translated listings to listing websites in other regions |
US10832664B2 (en) | 2016-08-19 | 2020-11-10 | Google Llc | Automated speech recognition using language models that selectively use domain-specific model components |
CN107885716B (en) * | 2016-09-29 | 2020-02-11 | 腾讯科技（深圳）有限公司 | Text recognition method and device |
US9916305B1 (en) * | 2016-12-28 | 2018-03-13 | Facebook, Inc. | Translating terms within a digital communication |
CN113168830A (en) * | 2018-11-30 | 2021-07-23 | 谷歌有限责任公司 | Speech processing |
CN110472257A (en) * | 2019-08-20 | 2019-11-19 | 南京题麦壳斯信息科技有限公司 | A kind of MT engine assessment preferred method and system based on sentence pair |
US11194773B2 (en) | 2019-09-12 | 2021-12-07 | Oracle International Corporation | Integration of existing databases into a sharding environment |
US11735169B2 (en) * | 2020-03-20 | 2023-08-22 | International Business Machines Corporation | Speech recognition and training for data inputs |
US11704497B2 (en) * | 2020-09-09 | 2023-07-18 | International Business Machines Corporation | Generating and using a sentence model for answer generation |
CN112466292B (en) * | 2020-10-27 | 2023-08-04 | 北京百度网讯科技有限公司 | Language model training method and device and electronic equipment |
US11861320B1 (en) | 2023-02-27 | 2024-01-02 | Casetext, Inc. | Text reduction and analysis interface to a text generation modeling system |
US11860914B1 (en) | 2023-02-27 | 2024-01-02 | Casetext, Inc. | Natural language database generation and query system |
US11861321B1 (en) | 2023-06-29 | 2024-01-02 | Casetext, Inc. | Systems and methods for structure discovery and structure-based analysis in natural language processing models |
US11972223B1 (en) | 2023-06-30 | 2024-04-30 | Casetext, Inc. | Query evaluation in natural language processing systems |
Family Cites Families (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB9701866D0 (en) * | 1997-01-30 | 1997-03-19 | British Telecomm | Information retrieval |
US6272456B1 (en) * | 1998-03-19 | 2001-08-07 | Microsoft Corporation | System and method for identifying the language of written text having a plurality of different length n-gram profiles |
JP3004254B2 (en) * | 1998-06-12 | 2000-01-31 | 株式会社エイ・ティ・アール音声翻訳通信研究所 | Statistical sequence model generation device, statistical language model generation device, and speech recognition device |
US6167369A (en) * | 1998-12-23 | 2000-12-26 | Xerox Company | Automatic language identification using both N-gram and word information |
US20030191625A1 (en) * | 1999-11-05 | 2003-10-09 | Gorin Allen Louis | Method and system for creating a named entity language model |
US6865528B1 (en) * | 2000-06-01 | 2005-03-08 | Microsoft Corporation | Use of a unified language model |
US20020077823A1 (en) * | 2000-10-13 | 2002-06-20 | Andrew Fox | Software development systems and methods |
JP3950957B2 (en) * | 2002-03-15 | 2007-08-01 | 独立行政法人産業技術総合研究所 | Language processing apparatus and method |
US7171358B2 (en) * | 2003-01-13 | 2007-01-30 | Mitsubishi Electric Research Laboratories, Inc. | Compression of language model structures and word identifiers for automated speech recognition systems |
US7197457B2 (en) * | 2003-04-30 | 2007-03-27 | Robert Bosch Gmbh | Method for statistical language modeling in speech recognition |
US7603267B2 (en) * | 2003-05-01 | 2009-10-13 | Microsoft Corporation | Rules-based grammar for slots and statistical model for preterminals in natural language understanding system |
US7711545B2 (en) * | 2003-07-02 | 2010-05-04 | Language Weaver, Inc. | Empirical methods for splitting compound words with application to machine translation |
JP2005100335A (en) * | 2003-09-01 | 2005-04-14 | Advanced Telecommunication Research Institute International | Machine translation apparatus, machine translation computer program, and computer |
CA2486128C (en) * | 2003-10-30 | 2011-08-23 | At&T Corp. | System and method for using meta-data dependent language modeling for automatic speech recognition |
US7406416B2 (en) * | 2004-03-26 | 2008-07-29 | Microsoft Corporation | Representation of a deleted interpolation N-gram language model in ARPA standard format |
US7593843B2 (en) * | 2004-03-30 | 2009-09-22 | Microsoft Corporation | Statistical language model for logical form using transfer mappings |
US7260568B2 (en) * | 2004-04-15 | 2007-08-21 | Microsoft Corporation | Verifying relevance between keywords and web site contents |
US7701886B2 (en) * | 2004-05-28 | 2010-04-20 | Alcatel-Lucent Usa Inc. | Packet loss concealment based on statistical n-gram predictive models for use in voice-over-IP speech transmission |
US7584098B2 (en) * | 2004-11-29 | 2009-09-01 | Microsoft Corporation | Vocabulary-independent search of spontaneous speech |
US7565372B2 (en) * | 2005-09-13 | 2009-07-21 | Microsoft Corporation | Evaluating and generating summaries using normalized probabilities |
US20070078653A1 (en) * | 2005-10-03 | 2007-04-05 | Nokia Corporation | Language model compression |
WO2007091096A1 (en) * | 2006-02-10 | 2007-08-16 | Spinvox Limited | A mass-scale, user-independent, device-independent, voice message to text conversion system |
US7856350B2 (en) * | 2006-08-11 | 2010-12-21 | Microsoft Corporation | Reranking QA answers using language modeling |
US8401841B2 (en) * | 2006-08-31 | 2013-03-19 | Orcatec Llc | Retrieval of documents using language models |
US7783636B2 (en) * | 2006-09-28 | 2010-08-24 | Microsoft Corporation | Personalized information retrieval search with backoff |
US20080154600A1 (en) * | 2006-12-21 | 2008-06-26 | Nokia Corporation | System, Method, Apparatus and Computer Program Product for Providing Dynamic Vocabulary Prediction for Speech Recognition |
US20080162117A1 (en) * | 2006-12-28 | 2008-07-03 | Srinivas Bangalore | Discriminative training of models for sequence classification |
US8332207B2 (en) | 2007-03-26 | 2012-12-11 | Google Inc. | Large language models in machine translation |
US8583416B2 (en) * | 2007-12-27 | 2013-11-12 | Fluential, Llc | Robust information extraction from utterances |
US8364481B2 (en) * | 2008-07-02 | 2013-01-29 | Google Inc. | Speech recognition with parallel recognition tasks |
-
2007
- 2007-06-22 US US11/767,436 patent/US8332207B2/en active Active
-
2008
- 2008-03-25 KR KR1020097021287A patent/KR20100015518A/en not_active Application Discontinuation
- 2008-03-25 EP EP08744308.1A patent/EP2137639B1/en active Active
- 2008-03-25 CN CN2008800168306A patent/CN101707873B/en active Active
- 2008-03-25 JP JP2010501157A patent/JP5484317B2/en active Active
- 2008-03-25 WO PCT/US2008/058116 patent/WO2008118905A2/en active Application Filing
-
2012
- 2012-12-10 US US13/709,125 patent/US8812291B2/en active Active
Non-Patent Citations (1)
Title |
---|
None * |
Also Published As
Publication number | Publication date |
---|---|
JP5484317B2 (en) | 2014-05-07 |
EP2137639A2 (en) | 2009-12-30 |
US20130346059A1 (en) | 2013-12-26 |
CN101707873B (en) | 2013-07-03 |
US8812291B2 (en) | 2014-08-19 |
WO2008118905A3 (en) | 2009-02-12 |
CN101707873A (en) | 2010-05-12 |
US8332207B2 (en) | 2012-12-11 |
WO2008118905A2 (en) | 2008-10-02 |
JP2010522938A (en) | 2010-07-08 |
KR20100015518A (en) | 2010-02-12 |
US20080243481A1 (en) | 2008-10-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2137639B1 (en) | Large language models in machine translation | |
US8626488B1 (en) | Word alignment with bridge languages | |
US8521516B2 (en) | Linguistic key normalization | |
US8027938B1 (en) | Discriminative training in machine learning | |
US8478787B2 (en) | Name detection | |
US8775154B2 (en) | Query translation through dictionary adaptation | |
CN110427618B (en) | Countermeasure sample generation method, medium, device and computing equipment | |
US7983898B2 (en) | Generating a phrase translation model by iteratively estimating phrase translation probabilities | |
US20090326916A1 (en) | Unsupervised chinese word segmentation for statistical machine translation | |
US10346548B1 (en) | Apparatus and method for prefix-constrained decoding in a neural machine translation system | |
US20060015323A1 (en) | Method, apparatus, and computer program for statistical translation decoding | |
US8175864B1 (en) | Identifying nearest neighbors for machine translation | |
Le et al. | Measuring the influence of long range dependencies with neural network language models | |
US20120296633A1 (en) | Syntax-based augmentation of statistical machine translation phrase tables | |
Kirchhoff et al. | Improved language modeling for statistical machine translation | |
US20110218796A1 (en) | Transliteration using indicator and hybrid generative features | |
Ortiz Martínez | Advances in fully-automatic and interactive phrase-based statistical machine translation | |
Dashti | Real-word error correction with trigrams: correcting multiple errors in a sentence | |
JP2010244385A (en) | Machine translation device, machine translation method, and program | |
Jabaian et al. | A unified framework for translation and understanding allowing discriminative joint decoding for multilingual speech semantic interpretation | |
Farzi et al. | A neural reordering model based on phrasal dependency tree for statistical machine translation | |
CN113268452A (en) | Entity extraction method, device, equipment and storage medium | |
Blackwood | Lattice rescoring methods for statistical machine translation | |
JP2006127405A (en) | Method for carrying out alignment of bilingual parallel text and executable program in computer | |
Nalluri et al. | Statistical Machine Translation using Joshua: An approach to build “enTel” system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20091020 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MT NL NO PL PT RO SE SI SK TR |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: BRANTS, THORSTENInventor name: POPAT, ASHOK, C.Inventor name: OCH, FRANZ, JOSEFInventor name: DEAN, JEFFREYInventor name: XU, PENG |
|
DAX | Request for extension of the european patent (deleted) | ||
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20170307 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTG | Intention to grant announced |
Effective date: 20180706 |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: OCH, FRANZ JOSEFInventor name: BRANTS, THORSTENInventor name: XU, PENGInventor name: DEAN, JEFFREYInventor name: POPAT, ASHOK C. |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MT NL NO PL PT RO SE SI SK TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1090224Country of ref document: ATKind code of ref document: TEffective date: 20190215 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602008058777Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20190116 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1090224Country of ref document: ATKind code of ref document: TEffective date: 20190116 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190516Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190416Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190417Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190516Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190416 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602008058777Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602008058777Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: G06F0017280000Ipc: G06F0040400000 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190325 |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20190331 |
|
26N | No opposition filed |
Effective date: 20191017 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190325Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190331Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MTFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20190325 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602008058777Country of ref document: DERepresentative=s name: VENNER SHIPLEY GERMANY LLP, DERef country code: DERef legal event code: R082Ref document number: 602008058777Country of ref document: DERepresentative=s name: VENNER SHIPLEY LLP, DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20190116 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20080325 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230327Year of fee payment: 16 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20240327Year of fee payment: 17Ref country code: GBPayment date: 20240327Year of fee payment: 17 |