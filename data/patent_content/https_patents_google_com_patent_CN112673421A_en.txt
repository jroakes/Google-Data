CN112673421A - Training and/or using language selection models to automatically determine a language for voice recognition of spoken utterances - Google Patents
Training and/or using language selection models to automatically determine a language for voice recognition of spoken utterances Download PDFInfo
- Publication number
- CN112673421A CN112673421A CN201980026087.0A CN201980026087A CN112673421A CN 112673421 A CN112673421 A CN 112673421A CN 201980026087 A CN201980026087 A CN 201980026087A CN 112673421 A CN112673421 A CN 112673421A
- Authority
- CN
- China
- Prior art keywords
- language
- current
- audio data
- spoken
- tuple
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012549 training Methods 0.000 title claims abstract description 115
- 230000004044 response Effects 0.000 claims abstract description 12
- 238000012545 processing Methods 0.000 claims description 112
- 238000000034 method Methods 0.000 claims description 67
- 230000015654 memory Effects 0.000 claims description 6
- 238000009877 rendering Methods 0.000 claims description 5
- 230000000977 initiatory effect Effects 0.000 claims description 4
- 230000005540 biological transmission Effects 0.000 claims description 3
- 230000001902 propagating effect Effects 0.000 claims 1
- 230000000116 mitigating effect Effects 0.000 abstract description 2
- 230000006870 function Effects 0.000 description 14
- 230000008569 process Effects 0.000 description 12
- 238000010586 diagram Methods 0.000 description 11
- 238000009795 derivation Methods 0.000 description 7
- 239000000463 material Substances 0.000 description 5
- 230000000007 visual effect Effects 0.000 description 5
- 239000003795 chemical substances by application Substances 0.000 description 4
- 239000000284 extract Substances 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 230000008859 change Effects 0.000 description 3
- 238000004891 communication Methods 0.000 description 3
- 230000002093 peripheral effect Effects 0.000 description 3
- 238000011176 pooling Methods 0.000 description 3
- 238000012706 support-vector machine Methods 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 238000013528 artificial neural network Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 238000010801 machine learning Methods 0.000 description 2
- 230000007257 malfunction Effects 0.000 description 2
- 239000003550 marker Substances 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 239000002184 metal Substances 0.000 description 2
- 238000003062 neural network model Methods 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 230000026676 system process Effects 0.000 description 2
- 230000002123 temporal effect Effects 0.000 description 2
- 241000282412 Homo Species 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000037361 pathway Effects 0.000 description 1
- 230000033764 rhythmic process Effects 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 230000001755 vocal effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/005—Language recognition
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
Abstract
For training and/or using a speech selection model for use in determining a particular language of a spoken utterance captured in audio data. Features of the audio data may be processed using a trained language selection model to generate predicted probabilities for each of the N different languages, and a particular language may be selected based on the generated probabilities. The speech recognition results for a particular language of the spoken utterance may be employed in response to selection of the particular language. Many embodiments relate to training a language selection model using tuple losses instead of traditional cross entropy losses. Training a language selection model with tuple losses may result in more efficient training and/or may result in a more accurate and/or robust model — thereby mitigating erroneous language selections for spoken utterances.
Description
Background
Humans may engage in human conversations with interactive software applications, referred to herein as "automated assistants" (also referred to as "digital agents," "chat robots," "interactive personal assistants," "intelligent personal assistants," "assistant applications," "conversation agents," etc.). For example, a human being (which may be referred to as a "user" when they interact with the automated assistant) may provide commands and/or requests to the automated assistant using spoken natural language input (i.e., utterances) and/or by providing textual (e.g., typed) natural language input, which may in some cases be converted to text and then processed. The automated assistant responds to the request by providing responsive user interface output, which may include audible and/or visual user interface output.
As mentioned above, the automated assistant can convert audio data corresponding to a spoken utterance of the user into corresponding text (or other semantic representation). For example, the audio data may be generated based on detection of a spoken utterance by the user via one or more microphones of a client device that includes an assistant interface for enabling the user to interact with the automated assistant. The automated assistant can include a voice recognition engine that utilizes a voice recognition model to recognize various characteristics of a spoken utterance captured in audio data, such as sounds (e.g., phonemes) produced by the spoken utterance, a sequence of the produced sounds, a rhythm of the speech, tones, and so forth. Additionally, the speech recognition engine may identify text words or phrases represented by such characteristics. The text can then be further processed by the automated assistant (e.g., using a Natural Language Understanding (NLU) engine and/or a dialog state engine) when determining the response content of the spoken utterance. The speech recognition engine may be implemented by the client device and/or one or more automated assistant components that are remote from the client device but in network communication with the client device.
However, many speech recognition engines are configured to recognize only speech in a single language. Such single language voice recognition engines may be unsatisfactory for multi-lingual users and/or homes, and may cause automated assistants to malfunction and/or provide erroneous outputs when spoken utterances are received in additional languages that are not the single language supported by the voice recognition engine. This may render the automated assistant unavailable and/or cause overuse of computing and/or network resources. The overuse of computing and/or network resources may be due to the need for the user to provide additional spoken utterances in the single language supported when the automated assistant malfunctions or provides erroneous output. Such additional spoken utterances must be additionally processed by the corresponding client device and/or remote automation assistant component, thereby resulting in additional use of various resources.
Other speech recognition engines may be configured to recognize speech in multiple languages, but require the user to specify explicitly which of the multiple languages should be utilized in speech recognition at a given time. For example, some of the other speech recognition engines may require the user to manually specify a default language to be utilized in speech recognition of all spoken utterances received at a particular client device. To change the default language to another language, the user may be required to interact with a graphical and/or audible interface to explicitly change the default language. Such interaction may cause overuse of computing and/or network resources in the rendering of the interface, the processing of inputs provided by the user via the interface, and the like. Additionally, it may often occur that a user forgets to change the default language before providing a spoken utterance that is not currently in the default language. As described above, this may render the automated assistant unavailable and/or cause overuse of computing and/or network resources.
Disclosure of Invention
Embodiments described herein relate to methods and systems for training and/or using a language selection model (which is a neural network model or other machine learning model) to automatically determine a particular language of a spoken utterance captured in audio data. Features of the audio data may be processed using a trained language selection model to generate predicted probabilities for each of the N different languages, and a particular language selected based on the generated probabilities. The speech recognition results for a particular language may be utilized in response to selection of the particular language. Many embodiments relate to training a language selection model using tuple losses instead of traditional cross entropy losses. Training the language selection model using tuple losses may result in more efficient training, thereby resulting in less resources being utilized during training (e.g., processor and/or memory resources utilized in processing training examples during training). Additionally or alternatively, training the language selection model with tuple losses may result in a more accurate and/or robust model — thereby mitigating erroneous language selections for spoken utterances.
As used herein, a plurality of speech recognition models may be accessed for speech recognition, and each of the speech recognition models may be configured for a corresponding one of N supported speech recognition languages. For example, a first voice recognition model may be configured for use in generating english text based on processing audio data that includes an english spoken utterance, a second voice recognition model may be configured for use in generating french text based on processing audio data that includes a french spoken utterance, and a third voice recognition model may be configured for use in generating spanish text based on processing audio data that includes a spanish spoken utterance. As described above, the particular language of the spoken utterance may be selected based at least in part on processing audio data that captures at least a portion of the spoken utterance using a trained language selection model. Additionally, the speech recognition results for a particular language may be utilized in response to selecting the particular language. For example, speech recognition may be performed using only a speech recognition model that conforms to a particular language, or may be performed using a plurality of speech recognition models and speech recognition results generated using a particular one of the models that is utilized based on its conformance to the particular language.
Various embodiments disclosed herein employ the observation that most multilingual users only speak a limited number of languages from the set N of supported speech recognition languages. Those implementations can identify two or more candidate languages M for audio data capturing a spoken utterance and select a particular language for the spoken utterance based on comparing only the probabilities of the M candidate languages generated. In other words, while at least a portion of the audio data is processed with a trained language selection model and probabilities for N separate languages are generated, the selection of a particular language may be based on the probabilities for M languages that are a subset of the N supported speech recognition languages. As described in more detail herein, the tuple loss utilized in training the language selection model is also utilized in view of the above observations. Further, utilizing tuple losses instead of a cross-entropy loss only trained language selection model may result in the generation of probabilities for the N supported speech recognition languages that are more likely to result in the selection of the correct language when considering only M of those languages.
In embodiments where only M languages are considered for a given audio data, the M languages may be stored based on, for example, an indication that the M languages were provided in transmission with the audio data (e.g., an indication that the M languages were transmitted by the client with the audio data), based on the M languages being associated with a user profile or other identifier associated with the audio data, and/or based on the M languages being associated with the client device that generated the audio data. The language for the user profile and/or device may be specified manually by the user, for example, and/or automatically based on the user's past use of the language (e.g., across one or more platforms), past use of the language on the client device, and/or the like.
In some embodiments, the language selection model may be a discriminant N-class classifier, a Long Short Term Memory (LSTM) network, or other neural network model. Other types of models, such as Support Vector Machine (SVM) models, may be used. In some embodiments in which an SVM model is employed, tuple loss may be applied along with the linear kernel, since the linear kernel is solved with the gradient descent algorithm in raw form. Further, the language selection model is trained using supervised or unsupervised learning and with tuple loss as described herein. For the sake of brevity, many embodiments of training the language selection model described herein are described with respect to supervised learning.
As one particular example of training a language selection model based on tuple losses, a training example may be generated for each language in the set of supported speech recognition languages N. Each training example may include: a training example input corresponding to one or more features of audio data of a given training spoken utterance; and a training example output of the token probability measures for each language in the set N of the universe of possible languages. For example, for each training example, there may be a positive probability measure (e.g., "1" and/or other indication of a positive probability measure) for a particular language in the set of supported speech recognition languages N, and a negative probability measure (e.g., "0" and/or other indication of a negative probability measure) for each other language from the set N of possible languages. The language selection model may be trained based on the training examples, wherein tuple losses are generated based on the training examples, and the tuple losses are used to update weights of the language selection model (e.g., by back propagation).
Each tuple loss can be generated as a function of one or more individual tuple losses each for a corresponding tuple size less than N (the number of probabilities predicted by the language selection model). For example, the tuple loss for the given training model may be generated based at least in part on the pair-wise loss, wherein the pair-wise loss is for tuples of size 2, and is generated based on comparing the predicted probabilities for all pairs of the N probabilities (where the predicted probabilities are generated by processing the training example input for the given training example using the language selection model) to the labeled probabilities of the labeled probability measures for all pairs as indicated by the training example output.
In some embodiments, the pair-wise loss (L (y, z)) may be represented by the following equation 1:
wherein z iskIs a predicted non-normalized probability of the kth language (of the N languages), where EsRepresenting the expectation of the set s. Subsets
Although pair-wise losses are described above, in various embodiments, the tuple losses are further a function of additional individual tuple losses. For example, the tuple loss for a given training example may be further generated based at least in part on a triplet (tri-wise) loss (for tuple size of 3), based at least in part on a quadruplet (four-wise) loss (for tuple size of 4), and so on. In some embodiments, the pair-wise penalty in equation 1 above may be generalized as equation 2 below for determining the penalty for generating a token from a subset of n tokens:
wherein
Based on the immediately preceding equation 2, the total tuple loss L (y, z) can be determined as a weighted sum of all individual tuple losses of different sizes, all 1< N ≦ N, based on the prediction probability for each language. In some embodiments, the weighted sum of all individual tuple losses may be defined by equation 3 below:
wherein p isnIs the probability of a tuple of size n and Ln(y, z) is with pnAssociated losses. Probability p of tuple of size nnMay correspond to a percentage of multilingual users, devices, and/or requests associated with an amount of languages of size n. For example, if 90% of multilingual users specify only two predefined languages, p2May be 0.9. As another example, if 7% of users specify three predefined languages, p3May be 0.07. Thus, pnEffectively offsetting the total tuple loss towards the individual tuple losses of the tuple size that are more likely to occur (e.g., maximally biased towards pairwise losses, followed by triplets of losses, etc.). As understood above, in some implementations, in addition to individual tuple losses for tuples of size less than N, tuple losses are based in part on individual tuple losses for tuples of size N. This can be seen as a special case of loss of individual tuples where N equals N and equates to a cross-entropy loss. However, in many of those embodimentsIn the embodiment, the weight p of the cross entropy lossNMay be minimal based on, for example, few users actually designating all supported languages N as candidate languages for the spoken utterance. Thus, while the total tuple loss may be a function of the cross-entropy loss, it is also a function of the individual tuple losses for tuples smaller than N — and such tuple losses for tuples smaller than N may be weighted together significantly more heavily than the cross-entropy loss.
The above description is provided as an overview of some embodiments of the disclosure. Further description of those embodiments, as well as others, is described in more detail below.
In some implementations, a method implemented by one or more processors is set forth and includes generating a plurality of training examples. Generating each of the training examples is based on capturing corresponding audio data of a corresponding human utterance and corresponding tokens indicating a corresponding spoken language of the corresponding human utterance. The corresponding spoken language is one of N different languages to be recognized, where N is an integer greater than 10. Further, each training example includes a corresponding training example input including corresponding features of corresponding audio data and a corresponding training example output including corresponding token probability measures for each of the N different languages to be recognized. The corresponding token probability measure is based on corresponding tokens, including corresponding positive probability measure tokens corresponding to the corresponding spoken language, and corresponding negative probability measure tokens for all other corresponding token probability measures. The method further includes training a language selection model based on the training examples. Training the language selection model includes processing corresponding features of corresponding training example inputs of the training examples using the language selection model to generate respective prediction probabilities for each of the N different languages, generating respective tuple losses based on the generated corresponding prediction probabilities and corresponding token probability measures, and updating weights of the language selection model using the generated corresponding tuple losses.
In some implementations, generating the corresponding tuple loss based on the generated prediction probabilities and the corresponding token probability metrics includes generating a given tuple loss of the tuple losses for a given training example of the training examples. In some implementations, generating the given tuple loss further includes determining one or more individual tuple losses each for a corresponding tuple size less than N based on a comparison of the corresponding token probability metric for the given training example and the corresponding predicted probability for the given training example. The one or more individual tuple losses include at least a pair-wise loss for a corresponding tuple size of 2. In some implementations, generating the given tuple loss further includes generating the given tuple loss based on one or more individual tuple losses.
In some implementations, generating the given tuple includes using only the pairwise penalty as the given tuple penalty. In other embodiments, the one or more individual tuple losses further include at least a loss for a triplet of corresponding tuple size 3 and a loss for a quadruplet of corresponding tuple size 4. In some other implementations, generating the given tuple loss is based on a weighted combination of at least the pairwise loss, the tripled loss, and the quadruple loss. In some other implementations, the weighting of the pair-wise penalties in the weighted combination is based on a measured probability indicating the percentage of users that are only indicative of the two candidate languages for speech processing.
In some implementations, updating the weights of the language selection model using the generated corresponding tuple losses includes back-propagating tuple losses across the language selection model.
In some implementations, subsequent to training the language selection model, the method may further include receiving, via at least one microphone of the computing device, audio data capturing a current spoken utterance from the user, extracting one or more features of the current spoken utterance, processing the one or more features of the current spoken utterance using the language selection model to generate a current prediction probability for each of the N different languages, selecting a current spoken language of the N different languages based on the current prediction probabilities, performing speech-to-text processing of the audio data based on the selected current spoken language. In some of those implementations, the method may further include selecting a particular speech recognition model from the plurality of candidate speech recognition models that corresponds to the selected current spoken language, and processing features of the audio data using the selected speech recognition model to determine one or more words that correspond to the current spoken utterance. In some of those implementations, the method may further include generating content responsive to the one or more words, and providing the content for rendering by the computing device.
In some implementations, the method can further include, subsequent to training the language selection model, receiving, via at least one microphone of the computing device, current audio data capturing a current spoken utterance from the user. In some implementations, the method can further include identifying at least a first candidate spoken language and a second candidate spoken language of the N different languages based on the first candidate spoken language and the second candidate spoken language being specified as languages utilized at the computing device and/or utilized by a user of the computing device. In some implementations, the method may further include, based on identifying the first candidate spoken language and the second candidate spoken language, initiating first speech-to-text processing of the audio data using a first speech recognition model for the first candidate spoken language and initiating second speech-to-text processing of the audio data using a second speech recognition model for the second candidate spoken language. In some implementations, the method may further include extracting one or more features of the current audio data. In some implementations, the method may further include, concurrently with the first speech-to-text processing and the second speech-to-text processing, processing one or more features of the audio data using a trained language selection model to generate a current prediction probability for each of the N different languages, and determining that the current spoken utterance is the first candidate spoken language based on the current prediction probabilities. In some implementations, the method can further include, based on determining that the current spoken utterance is the first candidate spoken language, using output generated during the first speech-to-text processing in generating content responsive to the current spoken utterance.
In some of those embodiments, determining that the current spoken utterance is the first candidate spoken language based on the current prediction probability occurs before completion of the first speech-to-text processing and the second speech-to-text processing, and further comprising, in response to determining that the current spoken utterance is the first candidate spoken language, stopping the second speech-to-text processing before completion of the second speech-to-text processing while the first speech-to-text processing is made complete.
In some of those implementations, determining that the current spoken utterance is the first candidate spoken language is further based on a first confidence measure of an output generated during the first voice-to-text processing, the first confidence measure of the output generated during the first voice-to-text processing. In some of those implementations, determining that the current spoken utterance is the first candidate spoken language is further based on a second confidence measure of a second output generated during the second speech-to-text processing, the second confidence measure of the second output generated during the second speech-to-text processing.
In some implementations, the method may further include receiving, via at least one microphone of the computing device subsequent to training the language selection model, current audio data capturing a current spoken utterance, determining that the current spoken utterance is from a particular user of a plurality of candidate users of the computing device, identifying a subset of the N different languages based on the subset being designated as a language utilized by the particular user, and extracting one or more features of the current audio data. In some implementations, the method further includes processing one or more features of the current audio data using the trained language selection model subsequent to training the language selection model to generate a current prediction probability for each of the N different languages, and selecting the current spoken language from the subset based on the current prediction probability, wherein the selecting is made from the subset in response to identifying the subset based on the language the subset is designated to utilize by the particular user.
The above description is provided as an overview of some embodiments of the disclosure. Further description of those embodiments, as well as others, is described in more detail below.
In some implementations, a method implemented by one or more processors is set forth and includes receiving, via at least one microphone of a computing device, current audio data capturing a current spoken utterance from a user, extracting one or more features of the current audio data capturing the current spoken utterance, processing the one or more features of the current spoken utterance using a language selection model trained using tuple loss to generate current prediction probabilities for each of N different languages, selecting a current spoken language of the N different languages based on the current prediction probabilities, and performing speech-to-text processing of the audio data based on the selected current spoken language.
Other embodiments may include a non-transitory computer-readable storage medium storing instructions executable by one or more processors (e.g., a Central Processing Unit (CPU), a Graphics Processing Unit (GPU), and/or a Tensor Processor (TPU)) to perform a method such as one or more of the methods described above and/or elsewhere herein. Still other embodiments may include a system of one or more computers including one or more processors operable to execute stored instructions to perform one or more methods, such as those described above and/or elsewhere herein.
It should be understood that all combinations of the above concepts and additional concepts described in greater detail herein are considered a part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are considered part of the subject matter disclosed herein.
Drawings
Fig. 1 illustrates an example system that utilizes a trained language selection model to select a language in which an automated assistant interacts with a user according to various embodiments disclosed herein.
FIG. 2 illustrates an example of a language selection model, an example of training the language selection model with tuple losses, and an example of using the language selection model once trained.
FIG. 3 is a flow diagram illustrating an example method for training a language selection model in accordance with embodiments disclosed herein.
FIG. 4 is a flow diagram illustrating an example method for selecting a speech recognition language using a trained language selection model according to embodiments disclosed herein.
FIG. 5 is a flow diagram illustrating another example method for selecting a speech recognition language using a trained language selection model according to embodiments disclosed herein.
FIG. 6 is a block diagram of an example computer system in accordance with embodiments disclosed herein.
Detailed Description
Fig. 1 illustrates an example system that utilizes a trained language selection model 150 to select a language in which automated assistant 104 interacts with user 130, according to various embodiments disclosed herein. The automated assistant 104 may operate in part via automated assistant 126 provided at one or more client devices, such as client computing device 118 (e.g., portable computing device 132), and in part via one or more remote computing devices 112, such as server device 102 (e.g., which may form what is often referred to as a "cloud infrastructure" or simply a "cloud"). When used herein, the "automated assistant 104" may refer to one or both of 104 and 126. The user 130 can interact with the automated assistant 104 via the assistant interface 128 of the client computing device 118. The assistant interface 128 includes user interface input devices and user interface output devices for use by the automated assistant 126 in interacting with the user 130.
The assistant interface 128 accepts user interface input of the user 130 directed to the automated assistant 104 and renders content from the automated assistant 104 responsive to the user interface input for presentation to the user 140. The assistant interface 128 may include one or more of a microphone, a speaker, a display panel, a camera, a touch screen display, and/or any other user interface device of the client computing device 118. The assistant interface 128 may also include a display, a projector, a speaker, and/or any other user interface output device(s) of the client computing device 118 that may be used to render content from the automated assistant 104. The user may initialize the automated assistant 104 by providing verbal, textual, or graphical input to the assistant interface 128 to cause the automated assistant 104 to perform functions (e.g., provide data, control peripherals, access agents, etc.). In some implementations, the client computing device 118 can include a display device, which can be a display panel that includes a touch interface for receiving touch inputs and/or gestures to allow a user to control applications of the client computing device via the touch interface. In some implementations, the client computing device 118 may lack a display device, thereby providing audible user interface output, but not graphical user interface output. Further, the client computing device 118 may provide a user interface input device, such as a microphone, for receiving spoken natural language input from the user 130 (and from additional, not shown, users).
The client computing device 118 may communicate with the remote computing device 112 over one or more networks 114, such as the internet. The client computing device 118 may offload computing tasks to the remote computing device 112, for example, to conserve computing resources at the client computing device 118 and/or to take advantage of more robust resources available at the remote computing device 112. For example, the remote computing device 112 may host the automated assistant 104, and the client computing device 118 may transmit input received at one or more assistant interfaces to the remote computing device 112. However, in some implementations, the automated assistant 104 can be hosted by the automated assistant 126 at the client computing device 118. In various implementations, all or less than all aspects of the automated assistant 104 can be implemented by the automated assistant 126 at the client computing device 118. In some of those implementations, aspects of the automated assistant 104 are implemented via the local automated assistant 126 at the client computing device 118 and interface with the remote computing device 112 that implements other aspects of the automated assistant 104.
The remote computing device 112 may optionally service a plurality of users and their associated assistant applications via user profiles. In some implementations, the server device 102 can store the server user profile 120. In some other implementations, the client computing device 118 may store the client user profile 122. In embodiments where all or less than all aspects of the automated assistant 104 are implemented via a local automated assistant 126 of the client computing device 118, the local automated assistant 126 may be an application separate from the operating system of the client device 118 (e.g., installed on the "top" of the operating system) -or may alternatively be implemented directly by the operating system of the client device 118 (e.g., an application considered to be the operating system but integrated with the operating system).
In some implementations, server device 102 can include language selection model 150 and/or client computing device 118 can include language selection model 160. The language selection model 150 and the language selection model 160 may be the same model, or the language selection model 160 may optionally be a variant optimized for use on a more resource constrained client computing device 118. Moreover, in various embodiments, language selection model 150 may be implemented on server device 102 without implementing language selection model 160 on client computing device 118, or language selection model 160 may be implemented on client computing device 118 without implementing language selection model 150 on server device 102.
As described herein, the automated assistant 104 can utilize the language selection model 150 in selecting a particular language corresponding to the received spoken human utterance and/or the automated assistant 126 can utilize the language selection model 160 in selecting a particular language corresponding to the received spoken human utterance. For example, the automated assistant 104 can process at least a portion of the received audio data using the language selection model 150 to generate probabilities for each of the N supported speech recognition languages. Further, the automated assistant 104 can utilize the generated probabilities to select one of the N supported languages as the particular language of the spoken utterance captured by the audio data. For example, the automated assistant 104 can identify the first and second languages as candidate languages for the spoken utterance and select the first language or the second language based at least in part on a comparison of a first probability of the first language (from the N probabilities) to a second probability of the second language (from the N probabilities). It is noted that in various embodiments, automated assistant 104 and/or automated assistant 126 may also rely on one or more additional signals, such as other signals described herein, in selecting a particular language.
In some implementations, only a respective one of the speech recognition models 136 is selected with the particular language selected to perform speech-to-text (STT) processing of the audio data. In some implementations, STT processing may have been performed by multiple speech recognition models 136 in parallel with processing using the language selection model 150. For example, the STT process may be initialized for each of the M candidate languages while performing the process using the language selection model 150. However, in some of those embodiments, the particular language selected is used to select an output generated by only a respective one of the speech recognition models 136, and optionally processing that stops using speech recognition models 136 that do not correspond to the particular language selected. An example method for training language selection model 150 is described in more detail below with respect to fig. 2 and 3.
In some implementations, the remote computing device 112 can include a speech recognition engine 134, which speech recognition engine 134 can process audio data received at the assistant interface 128 to determine a text and/or other semantic representation of a spoken utterance embodied in the audio data. The speech recognition engine 134 may employ one or more speech recognition models 136 in determining text and/or other semantic representations of spoken utterances embodied in the audio data. As described herein, a plurality of speech recognition models 136 may be provided, and each speech recognition model may be for a corresponding language. For example, a first voice recognition model may be for english, a second voice recognition model may be for french, a third voice recognition model for spanish, a fourth voice recognition model for chinese, a fifth voice recognition model for japanese, and so on.
In some implementations, the speech recognition models 136 each include one or more machine learning models and/or statistical models for determining text (or other semantic representations) corresponding to spoken utterances embodied in the audio data. In some implementations, the speech recognition engine 134 can determine phonemes for a corresponding language included in the audio data using one of the speech recognition models 136 and then generate text for the corresponding language based on the determined phonemes. In some implementations, the voice recognition model receives an audio recording of the speech input, for example in the form of digital audio data, and converts the digital audio data into one or more text symbols (e.g., STT processing). The one or more models used by such functionality generally model the relationship between the audio signal and the phoneme units in a language along with the sequence of words in the language. In some implementations, the voice recognition model can be an acoustic model, a language model, a pronunciation model, and the like, as well as modeling the combined functionality of one or more of such models. In some implementations, for example, the speech recognition model can be implemented as a finite state decoding graph that includes multiple paths or pathways.
Further, as described herein, additional language selection models 150 may be utilized in determining which of the various speech recognition models 136 should be utilized in processing audio data to generate semantic and/or text representations and/or in selecting which semantic and/or text representations should be utilized. For example, in some of those embodiments, the language selection model 150 is used to generate predicted probabilities that the spoken utterance corresponds to each of N different languages, with multiple speech recognition models 136 corresponding to each of the N different languages. Each of the predicted probabilities for a given language may constitute a "guess" or "prediction" as to what language the user speaks.
When the user 130 communicates with the automated assistant 126 at the client computing device 118, the user 130 can provide spoken natural language input to the assistant interface 128 of the client computing device 118. The spoken natural language input may be converted into audio data that may be processed by a client language model 124, such as a call phrase model for identifying whether the audio data embodies a call phrase for calling the automated assistant 126. In some implementations, the invocation phrase model can be used at the client computing device 118 to determine whether the user 130 wants to invoke the automated assistant 104. When the user provides natural language input to the assistant interface 128 and the natural language input includes an invocation phrase for invoking the automated assistant 104, the client computing device 118 can cause the automated assistant 104 at the server device 102 to receive the natural language input and/or subsequent natural language input from the user 130.
For example, in response to determining that the user 130 wants to invoke the automated assistant 104 at the client computing device 118, one or more communication channels can be established between the client computing device 118 and the server device 102. Thereafter, as the user continues to provide natural language input to the assistant interface 128, the natural language input will be converted into data that is then transmitted over the network 114 and processed by the server device 102. The natural language input may be processed by the server device 102 using the language selection model 150 to generate a predicted probability that the natural language input corresponds to each of the N different languages. Based on the prediction probabilities, one or more speech recognition models 136 may be selected as appropriate models for each natural language input.
In some implementations, only one of the one or more speech recognition models 136 corresponding to a particular spoken language may be selected for STT processing of natural language input. In some other implementations, STT processing of the natural language input may have been performed by multiple ones of the one or more speech recognition models 136 corresponding to the particular spoken language and the at least one additional language of the N different languages in parallel with processing using the language selection model 150. For example, the STT process may be initialized for each of the M candidate languages while performing the process using the language selection model 150. However, in some of those embodiments, the particular language selected is used to select output generated by only a corresponding one of the speech recognition models 136, and processing using speech recognition models 136 that do not correspond to the particular language selected is optionally stopped based on the ranking.
FIG. 2 illustrates an example of a language selection model (LSTM model 250 in the example of FIG. 2), an example of training the language selection model 250 with tuple losses, and an example of using the language selection model 250 once trained. The training examples 280 may be stored in one or more databases, with each of the training examples 280 corresponding to a spoken human utterance of a corresponding spoken language. Further, each of the training examples 280 may be processed by the acoustic model 220 to extract, for each of the training examples 280, one or more features of the audio data 260, denoted as a sequence of features x, and a token probability metric 236, denoted as token y, where y ∈ {1, …, N }, and where N is a set of all possible languages, indicating that the target language is from a set N of all possible languages. One or more features of the audio data 260 may be used as training example inputs for a language selection model, such as the language selection models 150, 160 in fig. 1, which are represented in fig. 2 as Long Short Term Memory (LSTM) models 250 (although other network architectures may be utilized as described herein). The label probability measures 236 indicate positive probability measures for the language corresponding to the given training example and indicate negative probability measures for all other languages.
In some implementations, one or more features of audio data 260 may pass through the cascading layers before being processed using LSTM model 250. The cascading layers may allow for the sliding window approach to be utilized at the time of derivation, as described in more detail herein (e.g., with reference to fig. 4-6). By using cascading layers, the output generated by LSTM model 250 may be larger, but as a result of using cascading layers, training is significantly faster and LSTM250 is more robust. For example, the concatenation layer may concatenate adjacent segments of audio data such that the number of inputs is halved.
In some embodiments, after each layer of the LSTM model 250, a projection layer may be provided to reduce the size of the parameters for the LSTM model 250. By increasing the projection layer and decreasing the size of the parameters for LSTM model 250, training of LSTM model 250 and derivation using LSTM model 250 may significantly accelerate training and derivation without compromising performance. In some embodiments, after the LSTM model 250, a temporal pooling layer (temporal pooling layer) may be provided to map the final output of the LSTM model 250 to linear projections of each language in the set N of all possible languages. By adding a pooling layer, the trained neural network performs with minimal latency and does not require any context or padding.
With continued reference to fig. 2, in some embodiments, z may be an N-dimensional output of a last layer of the language selection model, and z ═ f (x; w) may represent a non-normalized distribution of the feature sequence x over N different languages, where w may represent a parameter of the language selection model. In some embodiments, zkCan be a predicted non-normalized probability for the kth language of the N different languages. The language selection model may be trained to output probabilities for each language in a set N of all possible languages, and the language may be selected from a subset S from the set N of all possible languages. The subset S may be identified using the techniques described herein. For example, the subset S may be selected for the received audio data based on the received audio data being associated with a user profile and the user profile indicating the subset S as a language spoken by a speaker associated with the user profile.
In some implementations, generating tuple losses by tuple loss engine 240 for each training example includes comparing the labeled probability metric 236 for each training example to the predicted probability 238 for each training example and determining a weighted combination for the n tuples. The tag probability metric 236 may be a vector indicating one or more values indicating which spoken language of the set N of all spoken languages should be recognized by one or more features of the audio data 206 for a given training example. In some implementations, the tag probability measures 236 can include positive probability measures (e.g., a value of "1") for spoken language captured by one or more features of the audio data 260 of a given training example, and negative probability measures (e.g., a value of "0") for all other spoken languages from the set N of all spoken languages. For example, assume that a language selection model has been utilized during training to generate a prediction probability 238[0.7, 0.3, 0.0, …, 0.0] for audio data for a given training example, and that the training example has a label probability metric 236[1, 0, 0, …,0 ]. In such an example, the total tuple loss may be generated by comparing all of the one or more size n tuples of the prediction probability 238[0.7, 0.3, 0.0, …, 0.0] (e.g., "0.7" and "0.3", "0.7" and "0.0", "0.3" and "0.0", etc.) to all of the one or more size n tuples of the marker probability metric 236[1, 0, 0, …, 0] (e.g., "1" and "0", "0" and "0", etc.).
In some embodiments, tuple loss is based at least in part on pairwise loss, but this is not intended to be limiting. The pair-wise loss as set forth herein (e.g., in connection with the summary of the invention) may be represented by equation 1 below:
wherein EsRepresenting the expected value of the set s. Subsets
wherein
Based on equation 2, the total penalty L (y, z) can be determined as a weighted sum of all tuple penalties of different sizes, all 1< N ≦ N, based on the prediction probability for each language. The weighted sum of all tuple losses is defined by the tuple loss function in equation 3 below:
wherein p isnIs the probability of a tuple of size n and Ln(y, z) is with pnAssociated losses. Probability p of tuple of size nnCorresponding to the percentage of users in the predefined n languages specified in the user profile or additional user profiles. For example, if 90% of users specify two predefined languages, p2May be 0.9. As another example, if 7% of users specify three predefined languages, p3May be 0.07. By training the language selection model using tuple loss, the system can significantly speed up training and derivation without compromising performance.
When derived, the prediction probabilities 238 may each correspond to a corresponding speech recognition model 232 for each of the N different languages1-232NAnd (4) associating. A system using the LSTM model 250 can be configured to determine one or more words corresponding to a current spoken utterance in a current spoken language from a set N of all possible languages based on the predicted probabilities in the speech recognition model 232 by processing the sequence of features x to determine one or more words corresponding to the current spoken utterance1-232NTo select between. For example, a system using the LSTM model 250 may receive a feature sequence x corresponding to audio data of a current spoken utterance in english. Based on the user profile, it can be known that a user providing spoken human utterances is able to speak english and spanish. Based on the feature sequence x, the system may determine that the predicted probability of the spoken human utterance is in English is 0.7 and the predicted probability of the spoken human utterance is in Spanish is 0.3.
Thus, a system using LSTM model 250 may select a voice recognition model associated with english, such as first recognition model 232, based on a prediction probability 0.7 associated with english being greater than a prediction probability 0.3 associated with spanish1Rather than a speech recognition model associated with Spanish, such as the second recognition model 2322. If a user is able to speak two languages, the two languages have a pair-wise relationship (e.g., a pair-wise relationship between English and Spanish, Spanish and German, German and French, etc.). In some implementations, once the voice recognition model is selected, STT processing of the audio data associated with the feature sequence x can be performed to determine one or more words 234 corresponding to the spoken human utterance. Further, the system may generate content 236 responsive to the one or more words and provide the content to a computing device to render the content. In some implementations, as described herein, STT processing of the audio data can be performed in parallel with selecting a language for the spoken utterance using the LSTM model 250, and utilizing a STT output corresponding to the selected language in generating the responsive content.
As another example, in deriving, a first predictive probability distribution [0.3,0.4,0.2,0.1] and a second predictive probability distribution [0.3, 0.25, 0.25, 0.2] are considered, where the first predictive probability corresponds to a first language that is the "correct" language for the spoken utterance, and where each of the predictive probabilities in each predictive probability distribution corresponds to each of the N different languages. Further, the first predictive probability distribution may correspond to a predictive probability distribution associated with a language selection model trained using a cross-entropy loss function, and the second predictive probability distribution may correspond to a predictive probability distribution associated with a language selection model trained by the tuple loss engine 240 using a tuple loss function, such as the loss function of equation (3). Based on the first predictive probability distribution, a language selection model trained using a cross-entropy loss function, as evidenced by a probability of 0.4, can provide a probability indicating that the spoken human utterance corresponds to the second spoken language. However, this selection of the second language is not correct. Based on the second predictive probability distribution, a language selection model trained using a tuple loss function can provide a probability indicating that the spoken human utterance corresponds to the first spoken language, as evidenced by the probability of 0.3. Thus, by using tuple loss functions during training, the language selection model may provide more accurate results in derivation, which reduces the number of inputs received by the user, saves computing resources, and provides a better experience for the user as a whole.
FIG. 3 is a flow diagram illustrating an example method 300 for training a language selection model in accordance with embodiments disclosed herein. For convenience, the operations of the flow diagram are described with reference to a system performing the operations. The system may include various components of various computer systems, such as one or more of the components depicted in FIG. 1. Further, while the operations of method 300 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 352, the system generates a plurality of training examples based on capturing corresponding audio data for a corresponding human utterance and corresponding tokens indicative of a corresponding spoken language for the corresponding human utterance. The corresponding spoken language of each training example is a corresponding one of N different languages to be recognized by the system. For example, the system may generate training examples based on human utterances in the english language. The human utterance may be associated with audio data and a tag that indicates that the human utterance is in an english language. Further, block 352 may include one or more sub-boxes.
At sub-box 352A, the system determines a corresponding training example input that includes corresponding features of corresponding audio data. Continuing with the above example, the system may determine one or more features of the audio data from the corresponding audio data, such as mel-frequency cepstral coefficients (MFCCs), log-mel-filter bank (log-mel-filter bank) features, and/or other features.
At sub-box 352B, the system determines a corresponding training example output that includes a corresponding tag probability measure for each of the N different languages to be recognized. Further, the corresponding token probability measures may include corresponding positive probability measure tokens corresponding to the corresponding spoken language corresponding to the training example input, and corresponding negative probability measure tokens for all other corresponding token probability measures. Continuing with the above example, the system can determine a token probability metric from a human utterance in the english language, which can be expressed as a vector such that a value of "1" corresponds to a positive probability metric for the english language and a value of "0" corresponds to a negative probability metric for all other of the N different languages.
At block 354, the system trains the language selection model based on the training examples. Continuing with the above example, the system may receive training examples that include corresponding training example inputs that capture features of audio data of a human utterance in the english language, and corresponding training example outputs of the token probability measures described herein (e.g., with respect to fig. 2). Further, block 354 may include one or more subframes.
In sub-box 354A, the system may process corresponding features of the training example input using the language selection model to generate a predicted probability for each of the spoken languages. Continuing with the above example, the system may process the features of the human utterance in English and generate at least a first prediction probability of 0.7 indicating that the features of the human utterance are likely to correspond to English, and generate at least a second prediction probability of 0.2 indicating that the features of the human utterance are unlikely, but likely, to correspond to Spanish. Other probabilities for other languages may be generated as well.
At sub-box 354B, the system generates tuple losses based on the generated prediction probabilities and corresponding tag probability measures. Examples of generating tuple losses are described herein, and as described, the tuple losses can optionally be a function of various individual tuple losses, such as pairwise losses, tripled losses, and so on.
At sub-box 354C, the system updates the weights of the language selection model using the generated tuple losses. Continuing with the example above, the system can update the weights of the language selection model by back-propagating tuple losses across the language selection model.
At block 356, the system determines whether to continue training the language selection model based on the additional training examples. If the system determines at block 356 to continue training the neural network based on the additional training examples, the system performs another iteration of block 354 (e.g., blocks 354A, 354B, and 354C). If the system determines at block 356 that the language selection model is not to continue to be trained based on additional training examples, the system proceeds to block 358 and ends training. In some implementations, the system can determine not to continue training the language selection model based on a lack of additional training examples. Additionally or alternatively, the system may determine not to continue training the language selection model based on the training having been performed for at least a threshold amount of time, a determination that a current training version of the language selection model satisfies one or more criteria, and/or other factor(s).
Referring now to fig. 4 and 6, a method for using a trained language selection model (e.g., trained using method 300 of fig. 3) in accordance with embodiments disclosed herein is depicted. In FIG. 4 and5, a brief overview of an implementation using a trained language selection model is provided. Upon derivation, a subset of candidate languages, S ∈ {1, …, N }, is identified, where N is the set of supported speech recognition languages, and where the subset S is the subset from which the system will select a given language. S is also referred to herein as M. The subset S can be determined for a given spoken utterance using techniques such as those described herein (e.g., based on a subset specified in a user profile associated with the given spoken utterance). The prediction for a given language can be expressed as:
wherein is xtIs input as an input segment of the t-th sliding window, and ztAre the corresponding responses from the trained language selection model. By using this sliding window approach, the trained language selection model can provide a more robust system for long spoken utterances. Further, the sliding window approach is applicable to several use cases of interest described herein (e.g., with respect to fig. 4 and 5). These use cases are non-limiting and are disclosed herein for exemplary purposes.
FIG. 4 is a flow diagram illustrating an example method 400 for selecting a speech recognition language using a trained language selection model according to embodiments disclosed herein. For convenience, the operations of the flow diagram are described with reference to a system performing the operations. The system may include various components of various computer systems, such as one or more of the components depicted in FIG. 1. Further, while the operations of method 400 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 452, the system receives audio data that captures a current spoken utterance from a user. For example, the audio data may be captured via a microphone of the computing device and a spoken utterance from the user in spanish language may be captured.
At block 454, the system extracts one or more features of the current spoken utterance. Continuing with the above example, the system may extract features such as mel-frequency cepstral coefficients (MFCCs), log-mel-filter bank (log-mel-filter bank) features, and/or other features. Further, at block 454, the system optionally may select a subset of the extracted features, wherein the subset of the extracted features includes features that are highly indicative of the language corresponding to the current spoken utterance.
At block 456, the system processes one or more features of the current spoken utterance using the trained language selection model to generate predicted probabilities for each of the N different languages. Continuing with the above example, the system can process the current spoken utterance to generate a first predicted probability 0.8 that the current spoken utterance corresponds to the spanish language, a second predicted probability 0.1 that features of the current spoken utterance correspond to the english language, and corresponding probabilities for each of the remaining N different languages.
At block 458, the system selects the current spoken language of the N different languages based on the current prediction probabilities generated at block 456. Continuing with the example above, rather than selecting the english language based on the second predicted language of 0.1 or selecting any other language based on a probability of selecting them, the system may select the spanish language based on a first predicted probability of 0.8 indicating that the current spoken language corresponds to spanish. As described herein, in various embodiments, the system selects the current spoken language at block 458 based on predicted probabilities of M candidate languages associated with the current spoken utterance, where M is a subset of N. For example, indications of the M candidate languages may be included in data transmitted with the audio data. Based on such an indication, one of the M candidate languages may be selected based on probabilities generated for only the M candidate languages. In those embodiments, the language with the highest probability among the M candidate languages may be selected-even if there is a higher probability for another language that is one of the N languages but is not one of the M languages.
At block 460, the system selects a speech recognition model to perform speech-to-text (STT) processing of the audio data based on the current spoken language selected at block 458. Continuing with the above example, the system selects a speech recognition model associated with the spanish language.
At block 462, the system determines to perform STT processing using the selected voice recognition model and not to perform STT processing using any unselected voice recognition models. Thus, with respect to the unselected voice recognition models, the system proceeds to block 472 where processing is performed for other voice recognition models.
At block 464, the system performs STT processing on the audio data using the selected voice recognition model to determine one or more words corresponding to the current spoken utterance. Continuing with the above example, the system performs STT processing using a speech recognition model of the spanish language to determine one or more words of a spoken utterance of the spanish language.
At block 466, the system generates content responsive to the one or more words. Continuing with the above example, the system generates content responsive to a spoken utterance in spanish language. The content responsive to the spoken utterance may include natural language responses, search results, content determined by interacting with a third-party agent, content that causes one or more applications installed on the computing device or a remote computing device to launch, and so forth. The system may utilize a Natural Language Understanding (NLU) engine and/or other engines in processing one or more words to determine an intent of the one or more words and, optionally, parameters of the intent, and may generate responsive content based on the intent and the parameters.
At block 468, the system provides the content for rendering by the computing device. Continuing with the above example, the system may provide content for audible and/or visual presentation to a user via a computing device. In additional or alternative implementations, the one or more words generated at block 464 may be determined to correspond to a request to control a smart device at a variation of block 466. In those implementations, a variation of block 468 may include providing one or more commands directly to the smart device or to a third party server controlling the smart device, where the commands cause the smart device to be controlled in accordance with the request.
At block 470, the system determines whether the user has provided additional utterances. If the system receives additional utterances at block 470, the system may return to block 452. If the system does not receive additional utterances from the user at block 470, the system may proceed to block 472 and the process ends.
FIG. 5 is a flow diagram illustrating another example method 500 for selecting a speech recognition language using a trained language selection model in accordance with embodiments disclosed herein. For convenience, the operations of the flow diagrams are described with reference to the system performing the operations. The system may include various components of various computer systems, such as one or more of the components depicted in FIG. 1. Further, while the operations of method 500 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 552, the system receives audio data that captures a current spoken utterance from a user. For example, the audio data may be captured via a microphone of the computing device and a spoken utterance from the user in spanish language may be captured.
At block 554, the system extracts one or more features of the audio data. Continuing with the above example, the system may extract features such as mel-frequency cepstral coefficients (MFCCs), log mel-filter bank features, and/or other features.
At block 556, the system selects a first speech recognition model corresponding to the first candidate spoken language and at least a second speech recognition model corresponding to the second candidate spoken language to perform STT processing of the audio data. The system may proceed to blocks 562A and 562B to begin execution of STT processing of the audio data. Continuing with the above example, the system may select a first voice recognition model associated with the spanish language for STT processing of the audio data and select a second voice recognition model associated with the english language for STT and processing of the audio data. Further, the system may perform STT processing of audio data using a spanish language model and an english language model. As described herein, in various implementations, the system selects, at block 556, first and second speech recognition models for respective ones of M candidate languages associated with the current spoken utterance, based on the first and second speech recognition models, where M is a subset of N. For example, english and spanish speech recognition models may be selected and used for STT processing based on those indications that are two candidate languages for the received audio data.
In block 558, the system processes one or more features of the audio data using the trained language selection model to generate a prediction probability for each of the N different languages. Continuing with the above example, the system can process the current spoken utterance to generate a first predicted probability 0.4 that the current spoken utterance corresponds to the spanish language, a second predicted probability 0.1 that features of the current spoken utterance correspond to the english language, and corresponding probabilities for each of the remaining N different languages. As described herein, in various embodiments, block 558 is performed in parallel with at least a portion of the performance of blocks 562A and 562B. In other words, the STT processing for each of the M candidate languages may be initialized while generating probabilities to enable selection of a language of the spoken utterance. The output from the STT processing corresponding to the selected language may then be utilized, and optionally, STT processing for other languages may be stopped if such processing is not done in the language in which the spoken utterance has been selected. By performing such parallel processing, latency in generating text corresponding to the spoken utterance may be reduced, and as a result, responsive actions may be taken based on the spoken utterance with reduced latency. Further, in an embodiment in which STT processing for other (undetermined) languages is stopped, unnecessary resource consumption employed in such processing can be prevented.
At block 560, the system selects a spoken language of the N different languages based on the predicted probabilities. Continuing with the above example, the system may select the spanish language as the spoken language utterance based on the first predicted probability of 0.4 being the highest probability of the total probabilities of the M candidate languages.
At block 562A, the system performs STT processing of the audio data using a first speech recognition model corresponding to a first candidate spoken language to determine one or more words corresponding to the current spoken utterance. Continuing with the above example, the system performs STT processing of the audio data using a spanish language model to determine one or more words of the spanish language corresponding to the current spoken utterance.
At block 562B, the system performs STT processing of the audio data using at least a second speech recognition model corresponding to a second candidate spoken language to determine one or more words corresponding to the current spoken utterance. Continuing with the above example, the system performs STT processing of the audio data using the english language model to determine one or more words in the english language that correspond to the current spoken utterance.
As described above, in various embodiments, the STT processing of blocks 562A and 562B may be performed in parallel with the processing of blocks 558 and 560. For example, while performing processing using the language selection model, STT processing may be initialized for each of M candidate languages (e.g., spanish language and english language in the continuation example). The spoken language selected at block 560 is used to select an output generated by only one of blocks 562A and 562B (i.e., an output generated using a speech recognition model corresponding to the selected spoken language). Further, if STT processing with the unselected language has not ended, the system optionally may stop such processing after selecting the spoken language at block 560.
Continuing with the previous example, the system may perform STT processing of audio data using both a spanish language model and an english language model. When the system performs this STT processing, the system may process the corresponding audio data using a language selection model to generate probabilities for each of the N different languages. Based on the predicted probability of 0.4 for the spanish language and 0.2 for the english language, the system may select the spanish language and use the output generated with the spanish recognition model. The system may optionally stop STT processing using the english language model if it is selected that spanish fashion is not complete. In some embodiments, the stopping optionally may occur only if the probability in spanish language meets a threshold (e.g., a threshold relative to the probability in english language). For example, if the prediction probabilities are relatively close (e.g., 0.55 for the spanish language and 0.45 for the english language), the system may complete STT processing using both the spanish language model and the english language model, and use confidence measures and/or other measures from the STT processing to ensure that the selected spanish language is in fact the correct language.
At block 564, the system determines whether STT processing using the model corresponding to the selected language is complete. If the system determines at block 564 that the STT processing is not complete, the system continues with STT processing at blocks 562A and/or 562B. If the system determines at block 564 that the STT processing is complete, the system proceeds to block 566. At block 566, the system generates the content of one or more words generated in response to the STT processing using the selected language. Continuing with the above example, the system generates content responsive to a spoken utterance in spanish language.
At block 568, the system provides the content for rendering by the computing device. Although the method 500 is described with respect to performing STT processing with two models (i.e., where M is 2), it is noted that STT processing may be performed in parallel for each of three corresponding models when M is 3, may be performed in parallel for each of four corresponding models when M is 4, and so forth.
Fig. 6 is a block diagram of a computer system 610 according to an example. Computer system 610 typically includes at least one processor 614, which communicates with a number of peripheral devices via a bus subsystem 612. These peripheral devices may include, for example, a storage subsystem 724 including a memory 625 and a file storage subsystem 626, a user interface output device 620, a user interface input device 622, and a network interface subsystem 616. The input and output devices allow user interaction with computer system 610. Network interface subsystem 616 provides an interface to external networks and couples to corresponding interface devices in other computer systems.
The user interface input devices 622 may include a keyboard, a pointing device such as a mouse, trackball, touchpad, or graphics pad, a scanner, a touch screen integrated into a display, an audio input device such as a voice recognition system, microphone, and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways to input information into computer system 610 or onto a communication network.
User interface output devices 620 may include a display subsystem, a printer, a facsimile machine, or a non-visual display such as an audio output device. The display subsystem may include a Cathode Ray Tube (CRT), a flat panel device such as a Liquid Crystal Display (LCD), a projection device, or some other mechanism for creating a visual image. The display subsystem may also provide a non-visual display, such as via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and ways to output information from computer system 610 to a user, or to another machine or computer system.
These software modules are typically executed by the processor 614 alone or in combination with other processors. Memory 625 used in storage subsystem 624 may include a number of memories including a main Random Access Memory (RAM)630 for storage of instructions and data during program execution and a Read Only Memory (ROM)632 in which fixed instructions are stored. File storage subsystem 626 may provide permanent storage for program and data files, and may include a hard disk drive, a floppy disk drive, along with associated removable media, a CD-ROM drive, an optical drive, or a removable media cartridge. Modules implementing the functionality of certain embodiments may be stored by file storage subsystem 626 in storage subsystem 624 or other machine accessible by processor 614.
Where the systems described herein collect or may utilize personal information about a user (or "participant" as often referred to herein), the user may be provided with an opportunity to control whether programs or features collect user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current geographic location), or whether and/or how to receive content from a content server that may be more relevant to the user. Moreover, certain data may be processed in one or more ways prior to being stored or used, such that personally identifiable information is removed. For example, the user's identity may be processed such that personally identifiable information of the user cannot be determined, or the user's geographic location may be generalized where location information is obtained (such as to a city, zip code, or state level, for example) such that the user's particular location cannot be determined. Thus, the user may control how information about the user is collected and/or used.
While several embodiments have been described and illustrated herein, various other means and/or structures for performing the functions and/or obtaining the results and/or one or more of the advantages described herein may be utilized and such variations and/or modifications are to be considered within the scope of the embodiments described herein. More generally, all parameters, dimensions, materials, and configurations described herein are intended to be exemplary, and the actual parameters, dimensions, materials, and/or configurations will depend on the specific application or applications for which the present teachings is/are used. Those skilled in the art will recognize, or be able to ascertain using no more than routine experimentation, many equivalents to the specific embodiments described herein. It is, therefore, to be understood that the foregoing embodiments are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, may be practiced otherwise than as specifically described and claimed. Embodiments of the present disclosure relate to each individual feature, system, article, material, apparatus, and/or method described herein. In addition, any combination of two or more such features, systems, articles, materials, equipment, and/or methods, if such features, systems, articles, materials, equipment, and/or methods are not mutually inconsistent, is included within the scope of the present disclosure.
Claims (17)
1. A method implemented by one or more processors, the method comprising:
generating a plurality of training examples, wherein generating each of the training examples is based on capturing corresponding audio data of a corresponding human utterance and corresponding markup indicative of a corresponding spoken language of the corresponding human utterance, the corresponding spoken language being one of N different languages to be recognized, wherein N is an integer greater than 10, and wherein each of the training examples comprises:
a corresponding training example input, the corresponding training example input comprising: a corresponding characteristic of the corresponding audio data; and
a corresponding training example output, the corresponding training example output comprising: a corresponding token probability metric for each of the N different languages to be recognized, wherein the corresponding token probability metric is based on corresponding tokens including a corresponding positive probability metric token for the corresponding spoken language and a corresponding negative probability metric token for all other corresponding token probability metrics of the corresponding token probability metric; and
training a language selection model based on the training examples, the training the language selection model comprising:
processing the corresponding features of the corresponding training example input of the training examples using the language selection model to generate corresponding prediction probabilities for each of the N different languages,
generating corresponding tuple losses based on the generated corresponding prediction probabilities and corresponding token probability measures, an
Updating the weights of the language selection model using the generated corresponding tuple losses.
2. The method of claim 1, wherein generating the corresponding tuple loss based on the generated prediction probability and the corresponding token probability metric comprises:
generating a given tuple loss of the tuple losses for a given training example of the training examples, wherein generating the given tuple loss comprises:
determining one or more individual tuple losses each for a corresponding tuple size less than N based on a comparison of a corresponding token probability metric of the given training example and a corresponding predicted probability of the given training example, wherein the one or more individual tuple losses include at least a pair-wise loss for a corresponding tuple size of 2; and is
Generating the given tuple loss based on the one or more individual tuple losses.
3. The method of claim 2, wherein generating the given tuple comprises using only the pairwise penalty as the given tuple penalty.
4. The method of claim 2, wherein the one or more individual tuple losses further comprise at least a triplet of losses for a corresponding tuple size of 3 and a quadruplet of losses for a corresponding tuple size of 4.
5. The method of claim 4, wherein generating the given tuple loss is based on a weighted combination of at least the pairwise loss, the tripled loss, and the quadrupled loss.
6. The method of claim 5, wherein the weighting of the pair-wise penalties in the weighted combination is based on a measured probability indicating a percentage of users specifying only two candidate languages for speech processing.
7. The method of claim 1, wherein updating the weights of the language selection model using the generated corresponding tuple losses comprises:
propagating the tuple loss back across the language selection model.
8. The method of claim 1, further comprising, subsequent to training the language selection model:
receiving, via at least one microphone of a computing device, current audio data that captures a current spoken utterance from a user;
extracting one or more features of the current audio data;
processing the one or more features of the current audio data using the language selection model to generate a current prediction probability for each of the N different languages;
selecting a current spoken language of the N different languages based on the current prediction probability; and
performing speech-to-text processing of the audio data based on the selected current spoken language.
9. The method of claim 8, wherein performing speech-to-text processing of the current audio data based on the selected current spoken language comprises:
selecting a particular speech recognition model from a plurality of candidate speech recognition models corresponding to the selected current spoken language; and
processing the features of the current audio data using the selected voice recognition model to determine one or more words corresponding to the current spoken utterance.
10. The method of claim 9, further comprising:
generating content responsive to the one or more words; and
providing the content for rendering by the computing device.
11. The method of claim 1, further comprising, subsequent to training the language selection model:
receiving, via at least one microphone of a computing device, current audio data that captures a current spoken utterance from a user;
identifying at least a first candidate spoken language and a second candidate spoken language of the N different languages based on the first candidate spoken language and the second candidate spoken language being specified as languages utilized at the computing device and/or utilized by a user of the computing device;
based on identifying the first candidate spoken language and the second candidate spoken language:
initiating a first speech-to-text processing of the audio data using a first speech recognition model for the first candidate spoken language, and
initiating second voice-to-text processing of the audio data using a second voice recognition model for the second candidate spoken language;
extracting one or more features of the current audio data;
concurrently with the first voice-to-text processing and the second voice-to-text processing:
processing the one or more features of the audio data using a trained language selection model to generate a current prediction probability for each of the N different languages, an
Determining that the current spoken utterance is the first candidate spoken language based on the current prediction probability;
based on determining that the current spoken utterance is the first candidate spoken language:
using the output generated during the first speech-to-text processing in generating content responsive to the current spoken utterance.
12. The method of claim 11, wherein determining, based on the current prediction probability, that the current spoken utterance is the first candidate spoken language occurs before the first speech-to-text processing and the second speech-to-text processing are complete, and further comprising:
in response to determining that the current spoken utterance is the first candidate spoken language:
stopping the voice-to-text processing while the first voice-to-text processing is made complete before the second voice-to-text processing is complete.
13. The method of claim 11, wherein determining that the current spoken utterance is the first candidate spoken language is further based on:
a first confidence measure of an output generated during the first voice-to-text processing, the first confidence measure of the output generated during the first voice-to-text processing; and
a second confidence measure of a second output generated during the second speech-to-text processing, the second confidence measure of the second output generated during the second speech-to-text processing.
14. The method of claim 1, further comprising: subsequent to training the language selection model:
receiving, via at least one microphone of a computing device, current audio data that captures a current spoken utterance;
determining that the current spoken utterance is from a particular user of a plurality of candidate users of the computing device;
identifying a subset of N different languages based on the language in which the subset is designated for utilization by the particular user;
extracting one or more features of the current audio data;
processing the one or more features of the current audio data using the trained language selection model to generate a current prediction probability for each of the N different languages; and
selecting a current spoken language from the subset based on the current prediction probability, wherein the selecting is made from the subset in response to identifying the subset based on the language the subset is designated to utilize by the particular user.
15. A method, comprising:
receiving, via at least one microphone of a computing device, current audio data that captures a current spoken utterance from a user;
extracting one or more features of the current audio data that captured the current spoken utterance;
processing the one or more features of the current audio data using a language selection model to generate a current prediction probability for each of N different languages, the language selection model being trained using tuple losses;
identifying M candidate languages for the spoken utterance based on data associated with the current audio data, the computing device, and/or the user, wherein the M candidate languages include two or more languages and are a subset of the N different languages;
selecting a current spoken language from the M candidate languages, wherein selecting the current spoken language is based on a comparison of current prediction probabilities of the M candidate languages; and
performing speech-to-text processing of the audio data based on the selected current spoken language.
16. The method of claim 15, further comprising:
receiving an indication of the M candidate languages in a transmission with the current audio data, wherein identifying the M candidate languages is based on the data associated with the current audio data, and wherein the data comprises the indication of the M candidate languages received in the transmission with the current audio data.
17. A system comprising a memory storing instructions and one or more processors operable to execute the instructions to cause the processors to perform the method of any preceding claim.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862772514P | 2018-11-28 | 2018-11-28 | |
US62/772,514 | 2018-11-28 | ||
US201862772922P | 2018-11-29 | 2018-11-29 | |
US62/772,922 | 2018-11-29 | ||
PCT/US2019/063643 WO2020113031A1 (en) | 2018-11-28 | 2019-11-27 | Training and/or using a language selection model for automatically determining language for speech recognition of spoken utterance |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112673421A true CN112673421A (en) | 2021-04-16 |
Family
ID=69024607
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980026087.0A Pending CN112673421A (en) | 2018-11-28 | 2019-11-27 | Training and/or using language selection models to automatically determine a language for voice recognition of spoken utterances |
Country Status (4)
Country | Link |
---|---|
US (2) | US11410641B2 (en) |
EP (1) | EP3707703A1 (en) |
CN (1) | CN112673421A (en) |
WO (1) | WO2020113031A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113744724A (en) * | 2021-08-30 | 2021-12-03 | 苏州浪潮智能科技有限公司 | Voice conversion method, device, equipment and storage medium |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP3707703A1 (en) | 2018-11-28 | 2020-09-16 | Google LLC. | Training and/or using a language selection model for automatically determining language for speech recognition of spoken utterance |
US11354504B2 (en) * | 2019-07-10 | 2022-06-07 | International Business Machines Corporation | Multi-lingual action identification |
US11423089B2 (en) * | 2019-09-25 | 2022-08-23 | Dell Products L.P. | System and method for determining application programming interface and object bindings on natural language processed inputs |
GB2600987B (en) * | 2020-11-16 | 2024-04-03 | Toshiba Kk | Speech Recognition Systems and Methods |
US11853712B2 (en) | 2021-06-07 | 2023-12-26 | International Business Machines Corporation | Conversational AI with multi-lingual human chatlogs |
CN113299314B (en) * | 2021-07-27 | 2021-11-02 | 北京世纪好未来教育科技有限公司 | Training method, device and equipment of audio event recognition model |
US20230290345A1 (en) * | 2022-03-08 | 2023-09-14 | Microsoft Technology Licensing, Llc | Code-Mixed Speech Recognition Using Attention and Language-Specific Joint Analysis |
CN116386602A (en) * | 2023-05-30 | 2023-07-04 | 中国科学院自动化研究所 | Training method of feature extraction model and voice identification method integrating pronunciation features |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6832191B1 (en) * | 1999-09-02 | 2004-12-14 | Telecom Italia Lab S.P.A. | Process for implementing a speech recognizer, the related recognizer and process for speech recognition |
CN1819018A (en) * | 2005-02-11 | 2006-08-16 | 微软公司 | Efficient language identification |
JP2011164175A (en) * | 2010-02-05 | 2011-08-25 | Nippon Hoso Kyokai <Nhk> | Language model generating device, program thereof, and speech recognition system |
CN103782291A (en) * | 2011-07-26 | 2014-05-07 | 国际商业机器公司 | Customization of natural language processing engine |
US20150340034A1 (en) * | 2014-05-22 | 2015-11-26 | Google Inc. | Recognizing speech using neural networks |
CN105229723A (en) * | 2013-03-14 | 2016-01-06 | 谷歌公司 | The Language Modeling of complete language sequence |
US9275635B1 (en) * | 2012-03-08 | 2016-03-01 | Google Inc. | Recognizing different versions of a language |
CN106469552A (en) * | 2015-08-20 | 2017-03-01 | 三星电子株式会社 | Speech recognition apparatus and method |
CN106782518A (en) * | 2016-11-25 | 2017-05-31 | 深圳市唯特视科技有限公司 | A kind of audio recognition method based on layered circulation neutral net language model |
CN108389576A (en) * | 2018-01-10 | 2018-08-10 | 苏州思必驰信息科技有限公司 | The optimization method and system of compressed speech recognition modeling |
CN108630197A (en) * | 2017-03-23 | 2018-10-09 | 三星电子株式会社 | Training method and equipment for speech recognition |
Family Cites Families (77)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6092038A (en) * | 1998-02-05 | 2000-07-18 | International Business Machines Corporation | System and method for providing lossless compression of n-gram language models in a real-time decoder |
US6049767A (en) * | 1998-04-30 | 2000-04-11 | International Business Machines Corporation | Method for estimation of feature gain and training starting point for maximum entropy/minimum divergence probability models |
ATE235733T1 (en) * | 1998-05-11 | 2003-04-15 | Siemens Ag | ARRANGEMENT AND METHOD FOR RECOGNIZING A GIVEN VOCABULARY IN SPOKEN LANGUAGE BY A COMPUTER |
WO2000025299A1 (en) * | 1998-10-27 | 2000-05-04 | Siemens Aktiengesellschaft | Method and layout for forming classes for a language model based on linguistic classes |
US6928404B1 (en) * | 1999-03-17 | 2005-08-09 | International Business Machines Corporation | System and methods for acoustic and language modeling for automatic speech recognition with large vocabularies |
US6484136B1 (en) * | 1999-10-21 | 2002-11-19 | International Business Machines Corporation | Language model adaptation via network of similar users |
US9076448B2 (en) * | 1999-11-12 | 2015-07-07 | Nuance Communications, Inc. | Distributed real time speech recognition system |
US6477488B1 (en) * | 2000-03-10 | 2002-11-05 | Apple Computer, Inc. | Method for dynamic context scope selection in hybrid n-gram+LSA language modeling |
US7860706B2 (en) * | 2001-03-16 | 2010-12-28 | Eli Abir | Knowledge system method and appparatus |
US8874431B2 (en) * | 2001-03-16 | 2014-10-28 | Meaningful Machines Llc | Knowledge system method and apparatus |
US20040138883A1 (en) * | 2003-01-13 | 2004-07-15 | Bhiksha Ramakrishnan | Lossless compression of ordered integer lists |
US7171358B2 (en) * | 2003-01-13 | 2007-01-30 | Mitsubishi Electric Research Laboratories, Inc. | Compression of language model structures and word identifiers for automated speech recognition systems |
US7324927B2 (en) * | 2003-07-03 | 2008-01-29 | Robert Bosch Gmbh | Fast feature selection method and system for maximum entropy modeling |
US8478597B2 (en) * | 2005-01-11 | 2013-07-02 | Educational Testing Service | Method and system for assessing pronunciation difficulties of non-native speakers |
US8165870B2 (en) * | 2005-02-10 | 2012-04-24 | Microsoft Corporation | Classification filter for processing data for creating a language model |
US7739286B2 (en) * | 2005-03-17 | 2010-06-15 | University Of Southern California | Topic specific language models built from large numbers of documents |
US20070078653A1 (en) * | 2005-10-03 | 2007-04-05 | Nokia Corporation | Language model compression |
US8700403B2 (en) * | 2005-11-03 | 2014-04-15 | Robert Bosch Gmbh | Unified treatment of data-sparseness and data-overfitting in maximum entropy modeling |
US7536295B2 (en) * | 2005-12-22 | 2009-05-19 | Xerox Corporation | Machine translation using non-contiguous fragments of text |
US7877256B2 (en) * | 2006-02-17 | 2011-01-25 | Microsoft Corporation | Time synchronous decoding for long-span hidden trajectory model |
US8442965B2 (en) * | 2006-04-19 | 2013-05-14 | Google Inc. | Query language identification |
US20080147579A1 (en) * | 2006-12-14 | 2008-06-19 | Microsoft Corporation | Discriminative training using boosted lasso |
US7856351B2 (en) * | 2007-01-19 | 2010-12-21 | Microsoft Corporation | Integrated speech recognition and semantic classification |
US7873209B2 (en) * | 2007-01-31 | 2011-01-18 | Microsoft Corporation | Segment-discriminating minimum classification error pattern recognition |
US8000971B2 (en) * | 2007-10-31 | 2011-08-16 | At&T Intellectual Property I, L.P. | Discriminative training of multi-state barge-in models for speech processing |
US8046221B2 (en) * | 2007-10-31 | 2011-10-25 | At&T Intellectual Property Ii, L.P. | Multi-state barge-in models for spoken dialog systems |
US8190423B2 (en) * | 2008-09-05 | 2012-05-29 | Trigent Software Ltd. | Word sense disambiguation using emergent categories |
US20100256977A1 (en) * | 2009-04-01 | 2010-10-07 | Microsoft Corporation | Maximum entropy model with continuous features |
US9031844B2 (en) * | 2010-09-21 | 2015-05-12 | Microsoft Technology Licensing, Llc | Full-sequence training of deep structures for speech recognition |
US20120290293A1 (en) * | 2011-05-13 | 2012-11-15 | Microsoft Corporation | Exploiting Query Click Logs for Domain Detection in Spoken Language Understanding |
US20130018650A1 (en) * | 2011-07-11 | 2013-01-17 | Microsoft Corporation | Selection of Language Model Training Data |
US9514109B2 (en) * | 2012-01-12 | 2016-12-06 | Educational Testing Service | Computer-implemented systems and methods for scoring of spoken responses based on part of speech patterns |
US9129591B2 (en) * | 2012-03-08 | 2015-09-08 | Google Inc. | Recognizing speech in multiple languages |
US20140035823A1 (en) * | 2012-08-01 | 2014-02-06 | Apple Inc. | Dynamic Context-Based Language Determination |
US9218335B2 (en) * | 2012-10-10 | 2015-12-22 | Verisign, Inc. | Automated language detection for domain names |
US20150278194A1 (en) * | 2012-11-07 | 2015-10-01 | Nec Corporation | Information processing device, information processing method and medium |
EP2929677B1 (en) * | 2012-12-06 | 2017-07-19 | Saronikos Trading and Services, Unipessoal Lda | Method and devices for language determination for voice to text transcription of phone calls |
US9110880B1 (en) * | 2013-02-08 | 2015-08-18 | Google Inc. | Acoustically informed pruning for language modeling |
US9484023B2 (en) * | 2013-02-22 | 2016-11-01 | International Business Machines Corporation | Conversion of non-back-off language models for efficient speech decoding |
US10170114B2 (en) * | 2013-05-30 | 2019-01-01 | Promptu Systems Corporation | Systems and methods for adaptive proper name entity recognition and understanding |
US9412365B2 (en) * | 2014-03-24 | 2016-08-09 | Google Inc. | Enhanced maximum entropy models |
US9437189B2 (en) * | 2014-05-29 | 2016-09-06 | Google Inc. | Generating language models |
US20150364129A1 (en) * | 2014-06-17 | 2015-12-17 | Google Inc. | Language Identification |
US10089977B2 (en) * | 2015-07-07 | 2018-10-02 | International Business Machines Corporation | Method for system combination in an audio analytics application |
US20170011735A1 (en) * | 2015-07-10 | 2017-01-12 | Electronics And Telecommunications Research Institute | Speech recognition system and method |
GB2544070B (en) * | 2015-11-04 | 2021-12-29 | The Chancellor Masters And Scholars Of The Univ Of Cambridge | Speech processing system and method |
US10789539B2 (en) * | 2015-12-31 | 2020-09-29 | Nuance Communications, Inc. | Probabilistic ranking for natural language understanding |
US10176799B2 (en) * | 2016-02-02 | 2019-01-08 | Mitsubishi Electric Research Laboratories, Inc. | Method and system for training language models to reduce recognition errors |
US20170364509A1 (en) * | 2016-06-16 | 2017-12-21 | Language Line Services, Inc. | Configuration that provides an augmented video remote language interpretation/translation session |
US10679643B2 (en) * | 2016-08-31 | 2020-06-09 | Gregory Frederick Diamos | Automatic audio captioning |
US11081105B2 (en) * | 2016-09-16 | 2021-08-03 | Nippon Telegraph And Telephone Corporation | Model learning device, method and recording medium for learning neural network model |
US10654380B2 (en) * | 2016-11-18 | 2020-05-19 | Microsoft Technology Licensing, Llc | Query rewriting and interactive inquiry framework |
US10169324B2 (en) * | 2016-12-08 | 2019-01-01 | Entit Software Llc | Universal lexical analyzers |
US10762892B2 (en) * | 2017-02-23 | 2020-09-01 | Semantic Machines, Inc. | Rapid deployment of dialogue system |
US10431225B2 (en) * | 2017-03-31 | 2019-10-01 | International Business Machines Corporation | Speaker identification assisted by categorical cues |
US10565318B2 (en) * | 2017-04-14 | 2020-02-18 | Salesforce.Com, Inc. | Neural machine translation with latent tree attention |
US10606898B2 (en) * | 2017-04-19 | 2020-03-31 | Brown University | Interpreting human-robot instructions |
CN107193792B (en) * | 2017-05-18 | 2020-10-02 | 北京百度网讯科技有限公司 | Method and device for generating article based on artificial intelligence |
US11056104B2 (en) * | 2017-05-26 | 2021-07-06 | International Business Machines Corporation | Closed captioning through language detection |
US20180357998A1 (en) * | 2017-06-13 | 2018-12-13 | Intel IP Corporation | Wake-on-voice keyword detection with integrated language identification |
US20180366110A1 (en) * | 2017-06-14 | 2018-12-20 | Microsoft Technology Licensing, Llc | Intelligent language selection |
EP3616085A1 (en) * | 2017-06-18 | 2020-03-04 | Google LLC | Processing natural language using machine learning to determine slot values based on slot descriptors |
EP3625792B1 (en) * | 2017-07-31 | 2023-05-10 | Beijing Didi Infinity Technology and Development Co., Ltd. | System and method for language-based service hailing |
US20190043475A1 (en) * | 2017-08-04 | 2019-02-07 | Walmart Apollo, Llc | Spoken Language Localization System |
US20190065458A1 (en) * | 2017-08-22 | 2019-02-28 | Linkedin Corporation | Determination of languages spoken by a member of a social network |
CN110753908B (en) * | 2017-08-22 | 2023-11-10 | 谷歌有限责任公司 | Facilitating user device and/or proxy device actions during a communication session |
US10607604B2 (en) * | 2017-10-27 | 2020-03-31 | International Business Machines Corporation | Method for re-aligning corpus and improving the consistency |
JP2019090942A (en) * | 2017-11-15 | 2019-06-13 | シャープ株式会社 | Information processing unit, information processing system, information processing method and information processing program |
US20190197430A1 (en) * | 2017-12-21 | 2019-06-27 | Lyft, Inc. | Personalized ride experience based on real-time signals |
US11106690B1 (en) * | 2018-02-20 | 2021-08-31 | A9.Com, Inc. | Neural query auto-correction and completion |
EP3723084A1 (en) * | 2018-03-07 | 2020-10-14 | Google LLC | Facilitating end-to-end communications with automated assistants in multiple languages |
US11842741B2 (en) * | 2018-03-15 | 2023-12-12 | Nec Corporation | Signal processing system, signal processing device, signal processing method, and recording medium |
US20190287012A1 (en) * | 2018-03-16 | 2019-09-19 | Microsoft Technology Licensing, Llc | Encoder-decoder network with intercommunicating encoder agents |
US10909157B2 (en) * | 2018-05-22 | 2021-02-02 | Salesforce.Com, Inc. | Abstraction of text summarization |
US10679610B2 (en) * | 2018-07-16 | 2020-06-09 | Microsoft Technology Licensing, Llc | Eyes-off training for automatic speech recognition |
EP3707703A1 (en) | 2018-11-28 | 2020-09-16 | Google LLC. | Training and/or using a language selection model for automatically determining language for speech recognition of spoken utterance |
US11019207B1 (en) * | 2019-11-07 | 2021-05-25 | Hithink Royalflush Information Network Co., Ltd. | Systems and methods for smart dialogue communication |
-
2019
- 2019-11-27 EP EP19828380.6A patent/EP3707703A1/en active Pending
- 2019-11-27 WO PCT/US2019/063643 patent/WO2020113031A1/en unknown
- 2019-11-27 US US16/959,037 patent/US11410641B2/en active Active
- 2019-11-27 CN CN201980026087.0A patent/CN112673421A/en active Pending
-
2022
- 2022-06-22 US US17/846,287 patent/US11646011B2/en active Active
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6832191B1 (en) * | 1999-09-02 | 2004-12-14 | Telecom Italia Lab S.P.A. | Process for implementing a speech recognizer, the related recognizer and process for speech recognition |
CN1819018A (en) * | 2005-02-11 | 2006-08-16 | 微软公司 | Efficient language identification |
JP2011164175A (en) * | 2010-02-05 | 2011-08-25 | Nippon Hoso Kyokai <Nhk> | Language model generating device, program thereof, and speech recognition system |
CN103782291A (en) * | 2011-07-26 | 2014-05-07 | 国际商业机器公司 | Customization of natural language processing engine |
US9275635B1 (en) * | 2012-03-08 | 2016-03-01 | Google Inc. | Recognizing different versions of a language |
CN105229723A (en) * | 2013-03-14 | 2016-01-06 | 谷歌公司 | The Language Modeling of complete language sequence |
US20150340034A1 (en) * | 2014-05-22 | 2015-11-26 | Google Inc. | Recognizing speech using neural networks |
CN106469552A (en) * | 2015-08-20 | 2017-03-01 | 三星电子株式会社 | Speech recognition apparatus and method |
CN106782518A (en) * | 2016-11-25 | 2017-05-31 | 深圳市唯特视科技有限公司 | A kind of audio recognition method based on layered circulation neutral net language model |
CN108630197A (en) * | 2017-03-23 | 2018-10-09 | 三星电子株式会社 | Training method and equipment for speech recognition |
CN108389576A (en) * | 2018-01-10 | 2018-08-10 | 苏州思必驰信息科技有限公司 | The optimization method and system of compressed speech recognition modeling |
Non-Patent Citations (2)
Title |
---|
DAVID SNYDER: "Spoken Language Recognition using X-vectors", 《ODYSSEY 2018 THE SPEAKER AND LANGUAGE RECOGNITION WORKSHOP》，, 1 January 2018 (2018-01-01), pages 105 - 111, XP055676277, DOI: 10.21437/Odyssey.2018-15 * |
金马: "基于卷积神经网络的语种识别方法研究", 《中国优秀硕士学位论文全文数据库》, 15 November 2017 (2017-11-15) * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113744724A (en) * | 2021-08-30 | 2021-12-03 | 苏州浪潮智能科技有限公司 | Voice conversion method, device, equipment and storage medium |
Also Published As
Publication number | Publication date |
---|---|
US11646011B2 (en) | 2023-05-09 |
US11410641B2 (en) | 2022-08-09 |
US20200335083A1 (en) | 2020-10-22 |
WO2020113031A1 (en) | 2020-06-04 |
EP3707703A1 (en) | 2020-09-16 |
US20220328035A1 (en) | 2022-10-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11817085B2 (en) | Automatically determining language for speech recognition of spoken utterance received via an automated assistant interface | |
US11735176B2 (en) | Speaker diarization using speaker embedding(s) and trained generative model | |
CN112673421A (en) | Training and/or using language selection models to automatically determine a language for voice recognition of spoken utterances | |
US11817080B2 (en) | Using corrections, of predicted textual segments of spoken utterances, for training of on-device speech recognition model | |
US11393476B2 (en) | Automatically determining language for speech recognition of spoken utterance received via an automated assistant interface | |
US11545157B2 (en) | Speaker diartzation using an end-to-end model | |
US10140977B1 (en) | Generating additional training data for a natural language understanding engine | |
CN110148416A (en) | Audio recognition method, device, equipment and storage medium | |
US20220284049A1 (en) | Natural language understanding clarifications | |
JP7400112B2 (en) | Biasing alphanumeric strings for automatic speech recognition | |
KR20230005966A (en) | Detect close matching hotwords or phrases | |
JP7250180B2 (en) | Voice-controlled entry of content into the graphical user interface | |
US20230317082A1 (en) | Generating and/or utilizing unintentional memorization measure(s) for automatic speech recognition model(s) | |
KR20230153450A (en) | Device arbitration for local implementation of automatic speech recognition |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |