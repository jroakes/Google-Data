US10002117B1 - Translating annotation tags into suggested markup - Google Patents
Translating annotation tags into suggested markup Download PDFInfo
- Publication number
- US10002117B1 US10002117B1 US14/062,498 US201314062498A US10002117B1 US 10002117 B1 US10002117 B1 US 10002117B1 US 201314062498 A US201314062498 A US 201314062498A US 10002117 B1 US10002117 B1 US 10002117B1
- Authority
- US
- United States
- Prior art keywords
- web page
- markup
- tag
- annotation
- node
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/241—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/169—Annotation, e.g. comment data or footnotes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/143—Markup, e.g. Standard Generalized Markup Language [SGML] or Document Type Definition [DTD]
Definitions
- Information and data available through the Internet are only available in a format chosen by those who control the data.
- tools have been developed to extract data from various data sources such as web pages.
- Webmasters may wish to add schema.org markup to a webpage or HTML email in ways recognized by major search providers. Search engines may rely on this markup to improve the display of search results, making it easier for people to find the right web pages.
- Some systems may mark up an example page, and send this page to the webmaster. Then the webmaster may add markup which is not entirely correct, and the webmaster may then have to iterate several times with a search engine provider before getting the markup correct.
- Working directly with the webmaster also does not scale to the entire web.
- a self-service, interactive tool to help webmasters more easily add schema.org annotations to their webpages or HTML emails.
- a point and click tool allows users to visually mark up important information on a webpage, for example by highlighting the information on a screen, and annotate it with a schema.org annotation.
- the tool generates markup based on user input, and generates a new file containing the original source such as HTML (from the rendered content of the webpage), with the markup.
- a method includes translating, by a processor of a computer device, a web page into a structured tree including a set of nodes; receiving, by the processor, an annotation tag based on a selection of a portion of the web page; translating, by the processor, the annotation tag into a markup; attaching, by the processor, the markup to a first node of the nodes; applying, by the processor, the markup to at least one parent node in the structured tree that is related to the first node; and outputting, by the processor, a new version of the web page in a source format, including the markup.
- the method may include determining, by the processor, the parent node in the structured tree that is related to the first node by traversing the structured tree from the first node for any nodes that contain properties of the annotation tag associated with the first node.
- the method may include receiving an annotation associated with the selection.
- the method may include determining if the annotation tag crosses multiple node boundaries, and inserting the new span.
- the method may include upon determining that the annotation tag crosses the multiple node boundaries in such a way that the new span encompasses the content as well as extra content, inserting a meta tag.
- the new version of the web page may be based on the structured tree.
- the markup may be in an HTML5 microdata format.
- the method may include matching, by the processor, the selection to the first node.
- the outputting may include highlighting the markup in the source format.
- the self-service tool helps webmasters make web pages more easily searchable using search engines by letting the webmasters add schema.org annotations to their web pages or HTML emails.
- FIG. 1 illustrates an example system in accordance with the disclosed subject matter.
- FIG. 2 illustrates example block diagram of a document object model (DOM) framework in accordance with the disclosed subject matter.
- DOM document object model
- FIG. 3A is an example of a user interface that may be used for inputting starting web page, consistent with disclosed implementations.
- FIG. 3B is an example of a user interface that may be used for adding user input to a starting web page, consistent with disclosed implementations.
- FIG. 4 is an example user interface including markup in HTML source format, consistent with disclosed implementations.
- FIG. 5 is flow diagram illustrating a process for page markup, consistent with disclosed implementations.
- FIG. 6 is flow diagram illustrating a process for translating annotation tags into suggested page markup, consistent with disclosed implementations.
- FIG. 7 is flow diagram illustrating a process for matching tags to DOM nodes, consistent with disclosed implementations.
- FIG. 8 is flow diagram illustrating a process for adding implied tags to a page, consistent with disclosed implementations.
- FIG. 9 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 10 shows an example of a distributed computer device that can be used to implement the described techniques.
- FIG. 1 is a block diagram of a page markup system 100 in accordance with an example implementation.
- the page markup system 100 may be used to implement the data extraction techniques described herein.
- the depiction of page markup system 100 in FIG. 1 is described as a system for extracting data from web pages available over the Internet, but it will be appreciated that the data extraction techniques described may be used to extract data from other data sources, such as HTML emails.
- the page markup system 100 may be a computing system that takes the form of a number of different devices, for example, a standard server, a group of such servers, or a rack server system. In some implementations, page markup system 100 may be implemented in a personal computer, or a laptop computer, as described in more detail below with respect to FIGS. 9 and 10 .
- Page markup system 100 can include one or more processors 113 configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof.
- the page markup system 100 can include an operating system 120 and one or more computer memories 114 , for example a main memory, configured to store data, either temporarily, permanently, semi-permanently, or a combination thereof.
- the memory 114 may include any type of storage device that stores information in a format that can be read and/or executed by processor 113 .
- Memory 114 may include volatile memory, non-volatile memory, or a combination thereof. In some implementations information may be stored in an external storage device (not shown) and loaded into memory 114 .
- the system 100 may also include a page markup engine 122 .
- the page markup engine 122 may provide at least one interface to allow a user of a computing device 190 to insert markup into a web page, such as microdata markup.
- HTML5 microdata is a way to label content to describe a specific type of information—for example, reviews, person information, or events in a web page or other HTML document such as HTML email. Each information type describes a specific type of item, such as a person, and event, or a review. For example, an event has the properties of venue, starting time, name, and category.
- Microdata uses simple attributes in HTML (such as ⁇ span> or ⁇ div>) to assign brief and descriptive names to items and properties.
- An example of HTML that describes an event is:
- a web page may have multiple events, each including names, dates, addresses, etc.
- the page markup engine 122 may locate a best common ancestor DOM node for a property (e.g., an address) or may use HTML itemref to add markup to the DOM node, as explained in more detail below, for example with respect to FIG. 6 .
- the page markup engine 122 may generate, based on user's input such as annotations provided to the page markup engine 122 , a new HTML source page 124 including markup 126 , as described in more detail below with respect to FIGS. 3-6 .
- the page markup system 100 may output the new HTML source page 124 , for example by displaying the HTML source page 124 with the markup 126 highlighted for the user in a graphical user interface.
- the HTML source page 124 may be formatted in the same way that it is on the original HTML page, with additional attributes to attach the appropriate markup to the page. In this way, a user may learn how to add markup to their webpages or HTML emails.
- markup 126 may be used, in addition to or as an alternative to microdata.
- JSON-LD uses a JAVASCRIPT object in an HTML page to define data.
- Microdata and JSON-LD are two different ways to mark up data using the schema.org vocabulary. The system may use other forms of markup.
- a user creating a markup page may use computing devices 190 , which may be any type of computing device in communication with system 100 , for example, over a network 160 .
- Computing devices 190 may include desktops, laptops, netbooks, tablet computers, mobile phones, smart phones, televisions with one or more processors, etc.
- computing devices 190 may be an example of computing device 950 of FIG. 9 .
- a computing device 190 may be part of page markup system 100 rather than a separate computing device.
- the computing device 190 may include a web browser 192 that allows the user to communicate with system 100 .
- the page markup system 100 may also include a data extractor engine 130 .
- the data extractor engine may extract structured data, such as markup 126 , from a webpage and store it in a data store.
- Page markup system 100 may be in communication with the computing devices 190 over network 160 .
- Network 160 may be for example, the Internet or the network 160 can be a wired or wireless local area network (LAN), wide area network (WAN), etc., implemented using, for example, gateway devices, bridges, switches, etc.
- the page markup system 100 may communicate with and transmit data from computing devices 190 .
- computing devices 190 may be incorporated into and part of the system 100 , making network 160 unnecessary.
- FIG. 1 nominally illustrates a single computing device executing the page markup system 100 , it may be appreciated from FIG. 1 and from the above description that, in fact, a plurality of computing devices, e.g., a distributed computing system, may be utilized to implement the system.
- a plurality of computing devices e.g., a distributed computing system
- FIG. 1 is illustrated and described with respect to example features and terminologies, which should be understood to be provided merely for the sake of example, and not as being at all limiting of various potential implementations of FIG. 1 which are not explicitly described herein.
- FIG. 2 is an example block diagram of a document object model (DOM) framework.
- an HTML web page 220 may include various titles, headers, text, images, links, or other elements.
- the web page 220 may include an “Events” element 224 , a “Blues Show” element 226 , and a “Reds Show” element 228 .
- the HTML web page 220 may be used to construct a document tree 202 .
- the document tree 202 may be a tree based representation of the rendered HTML on the web page 220 .
- the rendered HTML is distinguished from solely HTML, in that the document tree 202 may incorporate HTML that is generated by JAVASCRIPT or other means after the web page 220 loads or is rendered in a web browser, for example.
- the document tree 202 may include a node 204 , and one or more child nodes 206 , 208 , 209 , 210 , 211 , 212 , 214 , 215 , and 216 , as examples.
- Document tree 202 could include any number of child nodes.
- the document tree 202 may be composed when rendered for example, by a renderer process of a browser, into the HTML web page 220 .
- the nodes in the node tree have a hierarchical relationship to each other.
- the terms parent, child, and sibling are used to describe the relationships.
- Parent nodes have children.
- the top node is called the root. Every node has exactly one parent, except the root (which has no parent).
- a node can have any number of children.
- the root element ⁇ html> node 204 has no parent node as is the root node.
- the node 206 may represent a ⁇ head> element and its parent node is node 204 .
- the node 210 may represent an ⁇ title> element and its parent node is node 206 .
- the node 212 may represent a Text: “HOUSE OF BLUES” element and its parent node is node 210 .
- the node 208 may represent a ⁇ body> element.
- the node 214 may represent an ⁇ h1> element.
- the node 218 may represent a text: “Events” element.
- the node 209 may represent an ⁇ p> element.
- the node 211 may represent a text “Blues Show” 211 element.
- the node 213 may represent another ⁇ p> element.
- the node 215 may represent a text “Reds Show” element.
- the HTML source for the HTML web page 220 may include, for example, the following:
- the ⁇ html> node 204 has two child nodes: ⁇ head> 206 and ⁇ body> 208 .
- the ⁇ head> node 206 has one child node: the ⁇ title> node 210 .
- the ⁇ title> node 210 also has one child node: the text “HOUSE OF BLUES” node 212 .
- the ⁇ head> node 206 is the first child of the ⁇ html> node 204 .
- the ⁇ body> node 208 is the last child of the ⁇ html> node 204 .
- the ⁇ h1> node 214 is the first child of the ⁇ body> node 208 .
- other elements such as links, images, etc. may be included in the HTML web page 220 .
- FIG. 3A is an example of a user interface that may be used for inputting a starting web page, consistent with disclosed implementations.
- a graphical user interface 300 may include a toolbar 310 .
- a webmaster or other user may access the graphical user interface 300 by navigating to a specific URL, for example.
- the toolbar 310 may include an “Enter Page” 312 element, a “Tag Data” 314 element, and a “View HTML” 316 element, among other elements.
- the graphical user interface 300 may also include an input area 320 .
- the input area 320 may include a website element 322 and an email element 324 .
- a user may select either the website element 322 or the email element 324 to input a website address or a block of HTML email, respectively.
- a user has selected the website element 322 or the tool may default to the website feature.
- the user may then select one of various data types 326 , to specify the type of website.
- the data types 326 may include, for example, articles, local businesses, restaurants, tv episodes with ratings, book reviews, movies, software applications, events, products, or tv episodes, as examples.
- the system may use the selected data type to determine a schema for the web page, for example.
- the user may input a URL into input element 328 and select a “start tagging” element 330 to begin adding annotation tags to the web page, which may bring the user to another graphical user interface, as discussed in more detail below in FIG. 3B .
- the user may instead select the email element 324 to input a block of HTML source of the email the user wishes to mark up in an input element, and may begin annotating the HTML email.
- FIG. 3B illustrates a user interface that may be used for adding user input to a starting web page, consistent with disclosed implementations.
- the user interface 332 shown in FIG. 3B enables a user to select data items shown in a web page 334 , and to assign the selected data items an annotation tag.
- user interface 332 may allow a user to select rendered data items in web page 334 by highlighting the rendered data items.
- the rendered data items may include, for example, portions of text or images.
- the system may utilize different types of annotation tags including direct annotation tags, indirect grouping annotation tags, and missing annotation tags.
- Direct annotation tags applied to the page are annotation tags based on a selection such as a highlighting a portion of the page.
- Direct annotation tags may also include a data format, such as a date. If the direct annotation tags include a data format, the direct annotation tags may output a content field with the parsed value of the content of the annotation tag. They may be composed of subcomponents. For instance, the year of a date may be tagged separately from or in addition to the month of the date. If this is the case, the resulting microdata may be attached to the date itself, or to the first subcomponent if no date is present.
- Indirect grouping annotation tags are annotation tags that have properties that may be direct or indirect annotation tags. For instance, a location might have an address and a name.
- Missing annotation tags are annotation tags that are filled in by default when a direct annotation tag is not present on the page. Though they are direct annotation tags in that they have content, they have no place on the page.
- a rendered web page may include an element displaying a name of a location with no address displayed.
- the system may receive an address as a missing annotation tag for the address.
- the system may find the existing annotation tag for the name elsewhere on the rendered page, and may insert the location as a DOM node above the name, and insert a meta tag representing an address of the location in a new version of the HTML web page.
- the user has selected data items by highlighting areas 340 and 342 on the web page 334 .
- the area 340 corresponds to the text “Ryan Leslie” and the area 342 corresponds to an image.
- the user interface 332 may allow a user to select an item from a menu 350 .
- the menu 350 may be a pop-up menu that includes types of available items. The types of available items may depend upon the schema that is based on the type of web page selected in FIG. 3A (e.g., Articles, Local Businesses, etc.).
- the system may highlight a corresponding field 362 in a window 360 for the user to enter the relevant text, in this case the name “Ryan Leslie.”
- the relevant text may be used by the page markup engine 122 to create microdata markup.
- the system may automatically populate the relevant text or images. For example, upon selecting an image item type 354 , the system may automatically insert a version of the image in field 364 in window 360 .
- the window 360 may include an area displaying assigned or suggested annotation tags.
- one annotation tag may include “Name: Ryan Leslie” as shown in the window 360 .
- the user may update or modify the annotation tags in the window 360 at any time, for example by selecting various elements of web page 334 .
- This process of receiving data from the user may constitute adding annotation tags to the web page, and in some implementations, the data may be used by structured data extractors.
- the system may then add the marked up HTML to the webpage based on the annotation tags, for example upon receiving a user selection of the “Create HTML” button 370 .
- the user may view the new HTML source, as explained in more detail below with respect to FIG. 4 .
- FIG. 4 is an example user interface including markup in HTML source format, consistent with disclosed implementations.
- the user interface 400 includes HTML source of a webpage with microdata markup shown in a highlighted format.
- the system may highlight or otherwise emphasize the added microdata markup for the user, as illustrated by the boxes surrounding the added microdata markup in user interface 400 .
- the system may allow a user to view the user interface 400 adjacent to the rendered webpage.
- the system may include tag navigators on the scroll bar 418 such as tag navigator 420 .
- the tag navigators indicate where markup has been added in the page.
- the system may automatically scroll the window 411 to both a visual element associated with the annotation tag as shown in FIG. 3B , and to the added microdata markup corresponding to the tag navigator 420 , as shown in FIG. 4 .
- the markup is highlighted, and clicking on the highlighted text scrolls the user to the corresponding visual element in the rendered web page as shown in FIG. 3B , such as the name “Ryan Leslie” in area 340 .
- Interacting with the added markup in the HTML source will illustrate which elements the added markup corresponds to in the rendered web page.
- the rendered web page may be displayed adjacent to the user interface 400 , for example.
- FIG. 5 is flow diagram illustrating a process for page markup, consistent with disclosed implementations.
- the process shown in FIG. 5 may be implemented at least in part by the page markup system 100 shown in FIG. 1 , for example using the page markup engine 122 .
- the system may receive input of a URL or block of HTML and a schema ( 510 ), such as described above with respect to FIG. 3A .
- the system may receive an input of the URL “www.houseofblues.com” and a data type “local businesses” corresponding to a schema.
- the system may display the page in the tool ( 520 ), for example as shown in FIG. 3B .
- the system may receive annotation tags from the user ( 530 ), for example as described above with respect to FIG. 3B .
- the system may translate the annotation tags into markup ( 540 ), as described in more detail below with respect to FIG. 6 .
- the system may display markup in an HTML source format ( 550 ), for example as shown in FIG. 4 and as described in more detail below with respect to FIG. 6 .
- FIG. 6 is flow diagram illustrating a process for translating annotation tags into suggested page markup, consistent with disclosed implementations.
- the process shown in FIG. 5 may be implemented at least in part by the page markup system 100 shown in FIG. 1 , for example using the page markup engine 122 .
- the process may be performed as part of block 540 as shown in FIG. 5 .
- the system may translate an HTML web page into a DOM tree including a set of DOM nodes ( 602 ). This is a tree based representation of the rendered HTML on the page, including HTML generated by JAVASCRIPTTM or other means after the page loads in a web browser.
- the system may build a mapping of DOM nodes into token numbers.
- the web page may be tokenized such that each taggable section of the web page has a token identifier.
- the system may receive an annotation tag based upon a selection of a portion of the HTML web page and an annotation associated with the selection ( 604 ). For example, as shown in FIG. 3B , the system may receive a selection via a graphical user interface of the text “Ryan Leslie” in area 340 , a selection of a “Name” item type 352 and an annotation “Ryan Leslie” in field 362 .
- the annotation tag may include both the item type (e.g., Name) and the annotation (e.g., Ryan Leslie).
- the selection may be a highlighting, for example as shown in FIG. 3B .
- the annotation may be, for example, text or data that is selected from a predetermined list, data that is automatically populated by the page markup engine 122 , or an input directly received from a user, as examples.
- the system may translate the annotation tag into microdata markup ( 606 ).
- the system may match all tags to DOM nodes that contain them, as described in more detail below with respect to FIG. 7 .
- the system may attach the microdata markup to a first node of the DOM nodes ( 608 ). In this example, the system attaches the microdata markup to the node associated with the text “Ryan Leslie”.
- the system determines whether any parent node in the DOM tree is related to the first node ( 610 ), as described in more detail below with respect to FIGS. 7 and 8 . If so, the system may apply the microdata markup to the parent node ( 612 ).
- the system may continue to walk up the DOM tree until it determines there are no parent nodes related to the first node ( 610 , no).
- the system may output a new version of the HTML web page in an HTML source format including the microdata markup ( 614 ), for example as shown in FIG. 4 .
- the microdata markup may be highlighted or otherwise indicated, for example, to illustrate for the user the changes to the original HTML source.
- the user may download, copy, or email the new HTML source file for use in a website.
- the system may also provide the web page in a JSON-LD format, and the system translates the user tags into JSON-LD format.
- the system may also provide the web page in a Resource Description Framework in Attributes (RDFa) format. Additional or alternative implementations may instead include having a user fill out a set of forms and translating these forms data into markup.
- RDFa Resource Description Framework in Attributes
- FIG. 7 is flow diagram illustrating a process for matching tags to DOM nodes, consistent with disclosed implementations.
- the process shown in FIG. 7 may be implemented at least in part by the page markup system 100 shown in FIG. 1 , for example using the page markup engine 122 .
- the system may determine if an annotation tag encompasses an entire DOM node ( 712 ). If so ( 712 , yes), the system may attach markup to the DOM node ( 714 ). For instance, ⁇ div>tagged ⁇ /div> with the word “tagged” highlighted would become ⁇ div *microdata properties*>tagged ⁇ /div>.
- the system may determine if the annotation tag encompasses only a portion of the DOM node ( 716 ). If so, ( 716 , yes), the system may insert a new span containing just the contents associated with the annotation tag ( 718 ). For instance, ⁇ div>untagged tagged untagged ⁇ /div> with the word tagged highlighted would become ⁇ div> untagged ⁇ span *microdata properties*>tagged ⁇ /span>untagged ⁇ /div>.
- the system may determine if the annotation tag crosses DOM node boundaries and a new span can be added that fully encompasses the content associated with the annotation tag ( 720 ). If so ( 720 , yes), the system inserts a new span ( 722 ). For instance, ⁇ div>tagged ⁇ /div> ⁇ div>tagged ⁇ /div>becomes ⁇ span *microdata properties*> ⁇ div>tagged ⁇ /div> ⁇ div>tagged ⁇ /div> ⁇ /span>.
- an annotation tag includes a type “image” and refers to the contents of an HTML ⁇ a> tag but not the HTML ⁇ a> tag's SRC attribute
- the system may insert a span inside the HTML ⁇ a> tag.
- the system may perform special logic when necessary to transform an annotation schema into an output schema. For instance, the system may split a date range into a start date and end date, and include date contents in a format such as ISO-8601. The system may perform the process shown in FIG. 7 for all annotation tags received from a user at the same time, or one at a time as each annotation tag is received, as examples.
- the system may then add all implied tags to the page, i.e., the parents of the directly applied tags that are not applied directly. To do this, the system may generate a DOM tree representation of the page, with all direct annotations applied to elements of the DOM tree (or to new elements inserted into the DOM tree). For each annotation tag not already present on the page, the system may perform a process as described below with respect to FIG. 8 .
- FIG. 8 is flow diagram illustrating a process for adding implied tags to a page, consistent with disclosed implementations.
- the system may determine if the tag has a child property present on the page ( 814 ). If not ( 814 , no), the system may choose another annotation tag ( 815 ). If so, ( 814 , yes), the system finds the first property present on the page ( 816 ). The system walks up the DOM tree from the DOM node associated with that property ( 818 ) in search of a DOM node that contains all properties of the current annotation tag. If all properties are present and no other properties are present ( 820 , yes), the system attaches the annotation tag to the first DOM node ( 822 ) that meets this criteria.
- the system finds the match that includes the most correct properties ( 824 ). This may be a single DOM node, or it may mean inserting a new span and migrating some children DOM nodes to this new span, and attaching the annotation tag to the span.
- the system may then select any properties not included in the annotation tag placement ( 828 ).
- the system may determine if the DOM nodes associated with the properties are present on the page ( 830 ). If so, ( 830 , yes), the system may include them via an HTML “itemref”, if the DOM nodes associated with the properties are present on the page but not included within this DOM node. If the DOM nodes associated with the properties are not present on the page ( 830 , no), the system may add them as children to this DOM node.
- FIG. 9 shows an example of a generic computer device 900 , which may be system 100 of FIG. 1 for example, which may be used with the techniques described here.
- Computing device 900 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 900 includes a processor 902 , memory 904 , a storage device 906 , and expansion ports 910 connected via an interface 908 .
- computing device 900 may include transceiver 946 , communication interface 944 , and a GPS (Global Positioning System) receiver module 948 , among other components, connected via interface 908 .
- Device 900 may communicate wirelessly through communication interface 944 , which may include digital signal processing circuitry where necessary.
- Each of the components 902 , 904 , 906 , 908 , 910 , 940 , 944 , 946 , and 948 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 902 can process instructions for execution within the computing device 900 , including instructions stored in the memory 904 or on the storage device 906 to display graphical information for a GUI on an external input/output device, such as display 916 .
- Display 916 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 900 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 904 stores information within the computing device 900 .
- the memory 904 is a volatile memory unit or units.
- the memory 904 is a non-volatile memory unit or units.
- the memory 904 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 904 may include expansion memory provided through an expansion interface.
- the storage device 906 is capable of providing mass storage for the computing device 900 .
- the storage device 906 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 904 , the storage device 906 , or memory on processor 902 .
- the interface 908 may be a high speed controller that manages bandwidth-intensive operations for the computing device 900 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 940 may be provided so as to enable near area communication of device 900 with other devices.
- controller 908 may be coupled to storage device 906 and expansion port 914 .
- the expansion port which may include various communication ports (e.g., USB, BLUETOOTH, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 900 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 930 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 922 , or smart phone 936 . An entire system may be made up of multiple computing devices 900 communicating with each other. Other configurations are possible.
- FIG. 10 shows an example of a generic computer device 1000 , which may be system 100 of FIG. 1 , which may be used with the techniques described here.
- Computing device 1000 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 1000 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 1000 may include any number of computing devices 1080 .
- Computing devices 1080 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 1080 a includes multiple racks 1058 a - 1058 n .
- Each rack may include one or more processors, such as processors 1052 a - 1652 n and 1062 a - 1662 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 1058 , and one or more racks may be connected through switch 1078 .
- Switch 1078 may handle communications between multiple connected computing devices 1000 , for example.
- Each rack may include memory, such as memory 1054 and memory 1064 , and storage, such as 1056 and 1066 .
- Storage 1056 and 1066 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 1056 or 1066 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 1054 and 1064 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 1054 may also be shared between processors 1052 a - 1652 n . Data structures, such as an index, may be stored, for example, across storage 1056 and memory 1054 . Computing device 1000 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 100 , may be made up of multiple computing devices 1000 communicating with each other.
- device 1080 a may communicate with devices 1080 b , 1080 c , and 1080 d , and these may collectively be known as system 100 .
- system 100 of FIG. 1 may include one or more computing devices 1000 as graph building engine 114 the user interface 116 .
- some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of system 1000 is an example only and the system may take on other layouts or configurations.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a programmable processor which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
A system and method includes translating a web page into a structured tree including a set of nodes. The system receives an annotation tag based on a selection of a portion of the web page. The system translates the annotation tag into a markup. The system attaches the markup to a first node of the nodes. The system applies the markup to at least one parent node in the structured tree that is related to the first node. The system outputs a new version of the web page in a source format, including the markup.
Description
Information and data available through the Internet are only available in a format chosen by those who control the data. To provide the ability to collect, access, and analyze data which the analyzer does not control, for example by search engines, tools have been developed to extract data from various data sources such as web pages.
Webmasters may wish to add schema.org markup to a webpage or HTML email in ways recognized by major search providers. Search engines may rely on this markup to improve the display of search results, making it easier for people to find the right web pages. To assist in adding markup, some systems may mark up an example page, and send this page to the webmaster. Then the webmaster may add markup which is not entirely correct, and the webmaster may then have to iterate several times with a search engine provider before getting the markup correct. Working directly with the webmaster also does not scale to the entire web. Thus, there exists a need for a self-service, interactive tool to help webmasters more easily add schema.org annotations to their webpages or HTML emails.
A point and click tool allows users to visually mark up important information on a webpage, for example by highlighting the information on a screen, and annotate it with a schema.org annotation. The tool generates markup based on user input, and generates a new file containing the original source such as HTML (from the rendered content of the webpage), with the markup.
In one implementation, a method includes translating, by a processor of a computer device, a web page into a structured tree including a set of nodes; receiving, by the processor, an annotation tag based on a selection of a portion of the web page; translating, by the processor, the annotation tag into a markup; attaching, by the processor, the markup to a first node of the nodes; applying, by the processor, the markup to at least one parent node in the structured tree that is related to the first node; and outputting, by the processor, a new version of the web page in a source format, including the markup.
Other implementations of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. These and other implementations can each include one or more of the followings features. The method may include determining, by the processor, the parent node in the structured tree that is related to the first node by traversing the structured tree from the first node for any nodes that contain properties of the annotation tag associated with the first node. The method may include receiving an annotation associated with the selection. The method may include determining if the annotation tag crosses multiple node boundaries, and inserting the new span. The method may include upon determining that the annotation tag crosses the multiple node boundaries in such a way that the new span encompasses the content as well as extra content, inserting a meta tag. The new version of the web page may be based on the structured tree. The markup may be in an HTML5 microdata format. The method may include matching, by the processor, the selection to the first node. The outputting may include highlighting the markup in the source format.
One or more of the implementations of the subject matter described herein may provide one more of the following advantages. The self-service tool helps webmasters make web pages more easily searchable using search engines by letting the webmasters add schema.org annotations to their web pages or HTML emails.
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
Like reference symbols in the various drawings indicate like elements.
The page markup system 100 may be a computing system that takes the form of a number of different devices, for example, a standard server, a group of such servers, or a rack server system. In some implementations, page markup system 100 may be implemented in a personal computer, or a laptop computer, as described in more detail below with respect to FIGS. 9 and 10 .
In addition to operating system 120, the system 100 may also include a page markup engine 122. The page markup engine 122 may provide at least one interface to allow a user of a computing device 190 to insert markup into a web page, such as microdata markup. HTML5 microdata is a way to label content to describe a specific type of information—for example, reviews, person information, or events in a web page or other HTML document such as HTML email. Each information type describes a specific type of item, such as a person, and event, or a review. For example, an event has the properties of venue, starting time, name, and category. Microdata uses simple attributes in HTML (such as <span> or <div>) to assign brief and descriptive names to items and properties. An example of HTML that describes an event is:
<div>
Come hear the Tiny Tim Tribute Band, live in concert on July 6, 2013 at the beautiful Regency Theater!
</div>
An example of the same HTML with microdata markup is:
<div itemscope itemtype=“http://schema.org/Event”>
Come hear the <span itemprop=“name”>Tiny Tim Tribute Band</span>,
live in concert on <span itemprop=“startDate” content=“2013-07-
06>July 6, 2013</span> at the beautiful
<span itemprop=“location” itemscope
itemtype=“http://schema.org/Place”><span itemprop=“name”>Regency
Theater</span>!</span>
</div>
In some cases, a web page may have multiple events, each including names, dates, addresses, etc. In some implementations, the page markup engine 122 may locate a best common ancestor DOM node for a property (e.g., an address) or may use HTML itemref to add markup to the DOM node, as explained in more detail below, for example with respect to FIG. 6 .
The page markup engine 122 may generate, based on user's input such as annotations provided to the page markup engine 122, a new HTML source page 124 including markup 126, as described in more detail below with respect to FIGS. 3-6 . The page markup system 100 may output the new HTML source page 124, for example by displaying the HTML source page 124 with the markup 126 highlighted for the user in a graphical user interface. The HTML source page 124 may be formatted in the same way that it is on the original HTML page, with additional attributes to attach the appropriate markup to the page. In this way, a user may learn how to add markup to their webpages or HTML emails.
In some cases, various forms of markup 126 may be used, in addition to or as an alternative to microdata. For example, JSON-LD uses a JAVASCRIPT object in an HTML page to define data. Microdata and JSON-LD are two different ways to mark up data using the schema.org vocabulary. The system may use other forms of markup.
A user creating a markup page may use computing devices 190, which may be any type of computing device in communication with system 100, for example, over a network 160. Computing devices 190 may include desktops, laptops, netbooks, tablet computers, mobile phones, smart phones, televisions with one or more processors, etc. For example, computing devices 190 may be an example of computing device 950 of FIG. 9 . In some implementations, a computing device 190 may be part of page markup system 100 rather than a separate computing device. In some implementations, the computing device 190 may include a web browser 192 that allows the user to communicate with system 100.
The page markup system 100 may also include a data extractor engine 130. The data extractor engine may extract structured data, such as markup 126, from a webpage and store it in a data store.
Although FIG. 1 nominally illustrates a single computing device executing the page markup system 100, it may be appreciated from FIG. 1 and from the above description that, in fact, a plurality of computing devices, e.g., a distributed computing system, may be utilized to implement the system.
More generally, it may be appreciated that any single illustrated component in FIG. 1 may be implemented using two or more subcomponents to provide the same or similar functionality. Conversely, any two or more components illustrated in FIG. 1 may be combined to provide a single component which provides the same or similar functionality. Thus, FIG. 1 is illustrated and described with respect to example features and terminologies, which should be understood to be provided merely for the sake of example, and not as being at all limiting of various potential implementations of FIG. 1 which are not explicitly described herein.
The HTML web page 220 may be used to construct a document tree 202. In various implementations, the document tree 202 may be a tree based representation of the rendered HTML on the web page 220. The rendered HTML is distinguished from solely HTML, in that the document tree 202 may incorporate HTML that is generated by JAVASCRIPT or other means after the web page 220 loads or is rendered in a web browser, for example.
The document tree 202 may include a node 204, and one or more child nodes 206, 208, 209, 210, 211, 212, 214, 215, and 216, as examples. Document tree 202 could include any number of child nodes. The document tree 202 may be composed when rendered for example, by a renderer process of a browser, into the HTML web page 220.
In the example shown in FIG. 2 , the nodes in the node tree have a hierarchical relationship to each other. The terms parent, child, and sibling are used to describe the relationships. Parent nodes have children. In a node tree, the top node is called the root. Every node has exactly one parent, except the root (which has no parent). A node can have any number of children. The root element <html> node 204 has no parent node as is the root node. The node 206 may represent a <head> element and its parent node is node 204. The node 210 may represent an <title> element and its parent node is node 206. The node 212 may represent a Text: “HOUSE OF BLUES” element and its parent node is node 210. The node 208 may represent a <body> element. The node 214 may represent an <h1> element. The node 218 may represent a text: “Events” element. The node 209 may represent an <p> element. The node 211 may represent a text “Blues Show” 211 element. The node 213 may represent another <p> element. The node 215 may represent a text “Reds Show” element. The HTML source for the HTML web page 220 may include, for example, the following:
<html>
-
- <head>
- <title>HOUSE OF BLUES </title>
- </head>
- <body>
- <h1>Events</h1>
- <p> Blues Show</p>
- <p> Reds Show</p>
- <head>
</body>
</html>
In this example, the <html> node 204 has two child nodes: <head> 206 and <body> 208. The <head> node 206 has one child node: the <title> node 210. The <title> node 210 also has one child node: the text “HOUSE OF BLUES” node 212. The <head> node 206 is the first child of the <html> node 204. The <body> node 208 is the last child of the <html> node 204. The <h1> node 214 is the first child of the <body> node 208. Of course, other elements such as links, images, etc. may be included in the HTML web page 220.
The system may utilize different types of annotation tags including direct annotation tags, indirect grouping annotation tags, and missing annotation tags. Direct annotation tags applied to the page are annotation tags based on a selection such as a highlighting a portion of the page. Direct annotation tags may also include a data format, such as a date. If the direct annotation tags include a data format, the direct annotation tags may output a content field with the parsed value of the content of the annotation tag. They may be composed of subcomponents. For instance, the year of a date may be tagged separately from or in addition to the month of the date. If this is the case, the resulting microdata may be attached to the date itself, or to the first subcomponent if no date is present.
Indirect grouping annotation tags are annotation tags that have properties that may be direct or indirect annotation tags. For instance, a location might have an address and a name.
Missing annotation tags are annotation tags that are filled in by default when a direct annotation tag is not present on the page. Though they are direct annotation tags in that they have content, they have no place on the page. As one example, a rendered web page may include an element displaying a name of a location with no address displayed. The system may receive an address as a missing annotation tag for the address. The system may find the existing annotation tag for the name elsewhere on the rendered page, and may insert the location as a DOM node above the name, and insert a meta tag representing an address of the location in a new version of the HTML web page.
In the example shown in FIG. 3B , the user has selected data items by highlighting areas 340 and 342 on the web page 334. The area 340 corresponds to the text “Ryan Leslie” and the area 342 corresponds to an image. Upon or after selecting a rendered data item, the user interface 332 may allow a user to select an item from a menu 350. The menu 350 may be a pop-up menu that includes types of available items. The types of available items may depend upon the schema that is based on the type of web page selected in FIG. 3A (e.g., Articles, Local Businesses, etc.).
Upon selecting a type of item, in this example “Name” item type 352, the system may highlight a corresponding field 362 in a window 360 for the user to enter the relevant text, in this case the name “Ryan Leslie.” The relevant text may be used by the page markup engine 122 to create microdata markup. In some implementations, the system may automatically populate the relevant text or images. For example, upon selecting an image item type 354, the system may automatically insert a version of the image in field 364 in window 360.
The window 360 may include an area displaying assigned or suggested annotation tags. For example, one annotation tag may include “Name: Ryan Leslie” as shown in the window 360. The user may update or modify the annotation tags in the window 360 at any time, for example by selecting various elements of web page 334. This process of receiving data from the user may constitute adding annotation tags to the web page, and in some implementations, the data may be used by structured data extractors. The system may then add the marked up HTML to the webpage based on the annotation tags, for example upon receiving a user selection of the “Create HTML” button 370. The user may view the new HTML source, as explained in more detail below with respect to FIG. 4 .
The system may receive an annotation tag based upon a selection of a portion of the HTML web page and an annotation associated with the selection (604). For example, as shown in FIG. 3B , the system may receive a selection via a graphical user interface of the text “Ryan Leslie” in area 340, a selection of a “Name” item type 352 and an annotation “Ryan Leslie” in field 362. The annotation tag may include both the item type (e.g., Name) and the annotation (e.g., Ryan Leslie). The selection may be a highlighting, for example as shown in FIG. 3B . The annotation may be, for example, text or data that is selected from a predetermined list, data that is automatically populated by the page markup engine 122, or an input directly received from a user, as examples.
Turning back to FIG. 6 , the system may translate the annotation tag into microdata markup (606). The system may match all tags to DOM nodes that contain them, as described in more detail below with respect to FIG. 7 . The system may attach the microdata markup to a first node of the DOM nodes (608). In this example, the system attaches the microdata markup to the node associated with the text “Ryan Leslie”. The system determines whether any parent node in the DOM tree is related to the first node (610), as described in more detail below with respect to FIGS. 7 and 8 . If so, the system may apply the microdata markup to the parent node (612). The system may continue to walk up the DOM tree until it determines there are no parent nodes related to the first node (610, no). The system may output a new version of the HTML web page in an HTML source format including the microdata markup (614), for example as shown in FIG. 4 . The microdata markup may be highlighted or otherwise indicated, for example, to illustrate for the user the changes to the original HTML source. The user may download, copy, or email the new HTML source file for use in a website.
In some implementations, the system may also provide the web page in a JSON-LD format, and the system translates the user tags into JSON-LD format. In some implementations, the system may also provide the web page in a Resource Description Framework in Attributes (RDFa) format. Additional or alternative implementations may instead include having a user fill out a set of forms and translating these forms data into markup. An advantage of using microdata is that the markup is associated with a visual element on the page. This reduces spam possibilities, makes the page more concise, and allows search engines to better understand how the structured data relates to the visual content.
If not, (712, no), the system may determine if the annotation tag encompasses only a portion of the DOM node (716). If so, (716, yes), the system may insert a new span containing just the contents associated with the annotation tag (718). For instance, <div>untagged tagged untagged</div> with the word tagged highlighted would become <div> untagged <span *microdata properties*>tagged</span>untagged</div>.
If not, (716, no), the system may determine if the annotation tag crosses DOM node boundaries and a new span can be added that fully encompasses the content associated with the annotation tag (720). If so (720, yes), the system inserts a new span (722). For instance, <div>tagged</div><div>tagged</div>becomes <span *microdata properties*><div>tagged</div><div>tagged</div></span>.
If not (720, no), the system inserts a meta tag (724). For instance, <div>untagged tagged</div><div>tagged untagged</div> becomes <div>untagged tagged</div><div>tagged untagged</div><meta *microdata properties* content=”tagged tagged”>.
Additionally, if an annotation tag includes a type “image” and refers to the contents of an HTML <a> tag but not the HTML <a> tag's SRC attribute, the system may insert a span inside the HTML <a> tag. While attaching and outputting data nodes, the system may perform special logic when necessary to transform an annotation schema into an output schema. For instance, the system may split a date range into a start date and end date, and include date contents in a format such as ISO-8601. The system may perform the process shown in FIG. 7 for all annotation tags received from a user at the same time, or one at a time as each annotation tag is received, as examples.
The system may then add all implied tags to the page, i.e., the parents of the directly applied tags that are not applied directly. To do this, the system may generate a DOM tree representation of the page, with all direct annotations applied to elements of the DOM tree (or to new elements inserted into the DOM tree). For each annotation tag not already present on the page, the system may perform a process as described below with respect to FIG. 8 .
The system may then select any properties not included in the annotation tag placement (828). The system may determine if the DOM nodes associated with the properties are present on the page (830). If so, (830, yes), the system may include them via an HTML “itemref”, if the DOM nodes associated with the properties are present on the page but not included within this DOM node. If the DOM nodes associated with the properties are not present on the page (830, no), the system may add them as children to this DOM node.
The processor 902 can process instructions for execution within the computing device 900, including instructions stored in the memory 904 or on the storage device 906 to display graphical information for a GUI on an external input/output device, such as display 916. Display 916 may be a monitor or a flat touchscreen display. In some implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices 900 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
The memory 904 stores information within the computing device 900. In one implementation, the memory 904 is a volatile memory unit or units. In another implementation, the memory 904 is a non-volatile memory unit or units. The memory 904 may also be another form of computer-readable medium, such as a magnetic or optical disk. In some implementations, the memory 904 may include expansion memory provided through an expansion interface.
The storage device 906 is capable of providing mass storage for the computing device 900. In one implementation, the storage device 906 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in such a computer-readable medium. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The computer- or machine-readable medium is a storage device such as the memory 904, the storage device 906, or memory on processor 902.
The interface 908 may be a high speed controller that manages bandwidth-intensive operations for the computing device 900 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers. An external interface 940 may be provided so as to enable near area communication of device 900 with other devices. In some implementations, controller 908 may be coupled to storage device 906 and expansion port 914. The expansion port, which may include various communication ports (e.g., USB, BLUETOOTH, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
The computing device 900 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 930, or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 922, or smart phone 936. An entire system may be made up of multiple computing devices 900 communicating with each other. Other configurations are possible.
Distributed computing system 1000 may include any number of computing devices 1080. Computing devices 1080 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
In some implementations, each computing device may include multiple racks. For example, computing device 1080 a includes multiple racks 1058 a-1058 n. Each rack may include one or more processors, such as processors 1052 a-1652 n and 1062 a-1662 n. The processors may include data processors, network attached storage devices, and other computer controlled devices. In some implementations, one processor may operate as a master processor and control the scheduling and data distribution tasks. Processors may be interconnected through one or more rack switches 1058, and one or more racks may be connected through switch 1078. Switch 1078 may handle communications between multiple connected computing devices 1000, for example.
Each rack may include memory, such as memory 1054 and memory 1064, and storage, such as 1056 and 1066. Storage 1056 and 1066 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations. Storage 1056 or 1066 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors. Memory 1054 and 1064 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 1054 may also be shared between processors 1052 a-1652 n. Data structures, such as an index, may be stored, for example, across storage 1056 and memory 1054. Computing device 1000 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
An entire system, such as system 100, may be made up of multiple computing devices 1000 communicating with each other. For example, device 1080 a may communicate with devices 1080 b, 1080 c, and 1080 d, and these may collectively be known as system 100. As another example, system 100 of FIG. 1 may include one or more computing devices 1000 as graph building engine 114 the user interface 116. Furthermore, some of the computing devices may be located geographically close to each other, and others may be located geographically distant. The layout of system 1000 is an example only and the system may take on other layouts or configurations.
Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any non-transitory computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory (including Read Access Memory), Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor.
The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention.
In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A method comprising:
translating, by a processor of a computer device, a web page into a structured tree including a set of nodes;
displaying the web page in a first window;
receiving a selection of a portion of the displayed web page;
receiving, by the processor, an annotation tag based on the selection of the portion of the displayed web page;
translating, by the processor, the annotation tag into a markup by:
determining that the annotation tag crosses a boundary between two nodes that both include content associated with the selection;
determining that the annotation tag does not include all of the content of the two nodes because the two nodes encompass extra content in addition to the content associated with the selection; and
based on determining that the annotation crosses the boundary, generating a single meta tag having a property that includes all of the content associated with the selection;
attaching, by the processor, the markup to a first node of the nodes;
displaying the web page in a source format in a second window that is displayed simultaneously with the first window, the web page in the source format including an annotated source document with a rendering of the markup;
automatically generating a selectable tag navigator based on the markup;
displaying in the first window or the second window the selectable tag navigator, the tag navigator providing a visual indicator of where markup has been added in the web page; and
in response to user selection of the tag navigator, automatically scrolling through both the web page in the first window to focus display on a visual element in the web page associated with the annotation tag and through the web page in the source format in the second window to focus display on the markup.
2. The method of claim 1 , further comprising:
applying, by the processor, the markup to at least one parent node in the structured tree that is related to the first node; and
determining, by the processor, that the parent node in the structured tree is related to the first node by traversing the structured tree from the first node for any nodes that contain properties of the annotation tag associated with the first node.
3. The method of claim 1 , further comprising:
determining that the annotation tag encompasses only a portion of the first node; and
inserting a new span containing contents associated with the selection.
4. The method of claim 1 , further comprising:
receiving an input of an email element in a user interface;
receiving an annotation tag based on a selection of a portion of the email element and an annotation associated with the selection;
translating the annotation into a markup; and
displaying, adjacent to the user interface, a new version of the email element in a source format, the new version of the email element including a new file having an annotated source document with a rendering of the markup.
5. The method of claim 3 , further comprising:
determining that the annotation tag crosses two node boundaries that include text content associated with the selection; and
inserting the new span to include the text content.
6. The method of claim 1 , wherein the structured tree is a document object model (DOM) tree.
7. The method of claim 1 , wherein the web page in the source format is based on the structured tree.
8. The method of claim 1 , wherein the markup is in an HTML5 microdata format.
9. The method of claim 1 , further comprising:
matching, by the processor, the selection to the first node and automatically populating text associated with the first node.
10. The method of claim 1 , wherein the tag navigator is displayed on a scroll bar of the first window or on a scroll bar of the second window.
11. A non-transitory computer readable medium containing instructions that when executed by a processor of a computing device cause the processor to:
receive an input of an address for a web page;
translate the web page into a structured tree including a set of nodes;
display the web page in a first window;
receive a selection of a portion of the displayed web page;
receive, using a graphical user interface, an annotation tag based on the selection of a portion of the web page and an annotation associated with the selection;
translate the annotation tag into a markup by:
determining that the annotation tag crosses a boundary between two nodes that both include content associated with the selection;
determining that the annotation tag does not include all of the content of the two nodes because the two nodes encompass extra content in addition to the content associated with the selection; and
based on determining that the annotation tag crosses the boundary, generating a single meta tag having a property that includes all of the content associated with the selection;
attach the markup to a first node of the nodes;
display, the web page in a source format, the web page in the source format in a second window that is displayed simultaneously with the first window, the web page in the source format including an annotated source document that includes a rendering of the markup according to the at least one selected item type;
automatically generate a selectable tag navigator based on the markup;
display in the first window or the second window the selectable tag navigator, the tag navigator providing a visual indicator of where markup has been added in the web page; and
in response to user selection of the tag navigator, automatically scroll through both the web page in the first window to focus display on a visual element in the web page associated with the annotation tag and through the web page in the source format in the second window to focus display on the markup.
12. The non-transitory computer readable medium of claim 11 , wherein the instructions further cause the processor to:
apply the markup to at least one parent node in the structured tree that is related to the first node; and
determine the parent node in the structured tree that is related to the first node by traversing the structured tree from the first node for any nodes that contain properties of the annotation tag.
13. The non-transitory computer readable medium of claim 11 , wherein the instructions further cause the processor to:
determine that the annotation tag encompasses only a portion of the first node; and
insert a new span associated with contents of the web page that are associated with the selection.
14. A system comprising:
a display;
a memory; and
a processor operably coupled to the memory and configured to execute:
converting a web page into a structured tree including a set of nodes;
displaying the web page in a first window on the display;
receiving a selection of a portion of the displayed web page;
receiving an annotation tag based on the selection of a portion of the web page and an annotation associated with the selection, the annotation being selected from a menu provided in a graphical user interface, the menu including a plurality of selectable item types to associate with the portion, the plurality of selectable item types being provided in the graphical user interface based at least in part on a schema associated with the web page;
translating the annotation tag into a markup according to at least one of the item types by:
determining that the annotation tag crosses a boundary between two nodes that both include content associated with the selection;
determining that the annotation tag does not include all of the content of the two nodes because the two nodes encompass extra content in addition to the content associated with the selection; and
based on determining that the annotation tag crosses the boundary,
generating a single meta tag having a property that includes all of the content associated with the selection;
attaching the markup to a first node of the nodes;
displaying the web page in a source format in a second window in the display, the web page in the source format including an annotated source document with a rendering of the markup according to the at least one selected item type;
automatically generating a selectable tag navigator based on the markup;
displaying in the first window or the second window the selectable tag navigator, the tag navigator providing a visual indicator of where markup has been added in the page; and
in response to user selection of the tag navigator, automatically scrolling through both the web page in the first window to focus display on a visual element in the web page associated with the annotation tag and through the web page in the source format in the second window to focus display on the markup.
15. The system of claim 14 , further comprising:
determining that the annotation tag encompasses only a portion of the first node; and
inserting a new span containing contents of the web page that are associated with the selection.
16. The system of claim 15 , further comprising:
determining that the annotation tag crosses multiple node boundaries; and
inserting the new span.
17. The system of claim 15 , wherein the structured tree is a document object model (DOM) tree.
18. The system of claim 14 , wherein the web page in the source format is based on the structured tree.
19. The system of claim 14 , wherein the markup is in an HTML5 format.
20. The system of claim 14 , wherein the web page in the source format includes the markup in a highlighted format.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/062,498 US10002117B1 (en) | 2013-10-24 | 2013-10-24 | Translating annotation tags into suggested markup |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/062,498 US10002117B1 (en) | 2013-10-24 | 2013-10-24 | Translating annotation tags into suggested markup |
Publications (1)
Publication Number | Publication Date |
---|---|
US10002117B1 true US10002117B1 (en) | 2018-06-19 |
Family
ID=62554727
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/062,498 Active 2034-07-05 US10002117B1 (en) | 2013-10-24 | 2013-10-24 | Translating annotation tags into suggested markup |
Country Status (1)
Country | Link |
---|---|
US (1) | US10002117B1 (en) |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180198887A1 (en) * | 2017-01-09 | 2018-07-12 | International Business Machines Corporation | Displaying context in group chats using member tagging |
US20180239826A1 (en) * | 2017-02-22 | 2018-08-23 | Camelot Uk Bidco Limited | Systems and Methods for Direct In-Browser Markup of Elements in Internet Content |
US10587553B1 (en) * | 2017-12-29 | 2020-03-10 | Entefy Inc. | Methods and systems to support adaptive multi-participant thread monitoring |
US11074402B1 (en) * | 2020-04-07 | 2021-07-27 | International Business Machines Corporation | Linguistically consistent document annotation |
CN113495753A (en) * | 2021-07-06 | 2021-10-12 | 北京百度网讯科技有限公司 | Project label acquisition method and device, electronic equipment and storage medium |
US11176315B2 (en) * | 2019-05-15 | 2021-11-16 | Elsevier Inc. | Comprehensive in-situ structured document annotations with simultaneous reinforcement and disambiguation |
US11182542B2 (en) * | 2018-10-29 | 2021-11-23 | Microsoft Technology Licensing, Llc | Exposing annotations in a document |
US20220374582A1 (en) * | 2019-10-28 | 2022-11-24 | Beijing Bytedance Network Technology Co., Ltd. | Method and apparatus for obtaining loading time length of image in webpage, and electronic device |
Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030018668A1 (en) * | 2001-07-20 | 2003-01-23 | International Business Machines Corporation | Enhanced transcoding of structured documents through use of annotation techniques |
US20040090458A1 (en) * | 2002-11-12 | 2004-05-13 | Yu John Chung Wah | Method and apparatus for previewing GUI design and providing screen-to-source association |
US20050091604A1 (en) * | 2003-10-22 | 2005-04-28 | Scott Davis | Systems and methods that track a user-identified point of focus |
US20050108630A1 (en) * | 2003-11-19 | 2005-05-19 | Wasson Mark D. | Extraction of facts from text |
US7502770B2 (en) | 2001-04-11 | 2009-03-10 | Metaweb Technologies, Inc. | Knowledge web |
US7587387B2 (en) | 2005-03-31 | 2009-09-08 | Google Inc. | User interface for facts query engine with snippets from information sources that include query terms and answer terms |
US20100121839A1 (en) | 2007-03-15 | 2010-05-13 | Scott Meyer | Query optimization |
US20100145902A1 (en) | 2008-12-09 | 2010-06-10 | Ita Software, Inc. | Methods and systems to train models to extract and integrate information from data sources |
US7765206B2 (en) | 2002-12-13 | 2010-07-27 | Metaweb Technologies, Inc. | Meta-Web |
WO2010085523A1 (en) | 2009-01-21 | 2010-07-29 | Metaweb Technologies, Inc. | Graph store |
US7769579B2 (en) | 2005-05-31 | 2010-08-03 | Google Inc. | Learning facts from semi-structured text |
US7774328B2 (en) | 2006-02-17 | 2010-08-10 | Google Inc. | Browseable fact repository |
US20100223214A1 (en) | 2009-02-27 | 2010-09-02 | Kirpal Alok S | Automatic extraction using machine learning based robust structural extractors |
US7792837B1 (en) | 2007-11-14 | 2010-09-07 | Google Inc. | Entity name recognition |
US20100257440A1 (en) | 2009-04-01 | 2010-10-07 | Meghana Kshirsagar | High precision web extraction using site knowledge |
US7925610B2 (en) | 1999-09-22 | 2011-04-12 | Google Inc. | Determining a meaning of a knowledge item using document-based information |
US8122026B1 (en) | 2006-10-20 | 2012-02-21 | Google Inc. | Finding and disambiguating references to entities on web pages |
US8204856B2 (en) | 2007-03-15 | 2012-06-19 | Google Inc. | Database replication |
-
2013
- 2013-10-24 US US14/062,498 patent/US10002117B1/en active Active
Patent Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7925610B2 (en) | 1999-09-22 | 2011-04-12 | Google Inc. | Determining a meaning of a knowledge item using document-based information |
US7502770B2 (en) | 2001-04-11 | 2009-03-10 | Metaweb Technologies, Inc. | Knowledge web |
US20030018668A1 (en) * | 2001-07-20 | 2003-01-23 | International Business Machines Corporation | Enhanced transcoding of structured documents through use of annotation techniques |
US20040090458A1 (en) * | 2002-11-12 | 2004-05-13 | Yu John Chung Wah | Method and apparatus for previewing GUI design and providing screen-to-source association |
US7765206B2 (en) | 2002-12-13 | 2010-07-27 | Metaweb Technologies, Inc. | Meta-Web |
US20050091604A1 (en) * | 2003-10-22 | 2005-04-28 | Scott Davis | Systems and methods that track a user-identified point of focus |
US20050108630A1 (en) * | 2003-11-19 | 2005-05-19 | Wasson Mark D. | Extraction of facts from text |
US7587387B2 (en) | 2005-03-31 | 2009-09-08 | Google Inc. | User interface for facts query engine with snippets from information sources that include query terms and answer terms |
US7769579B2 (en) | 2005-05-31 | 2010-08-03 | Google Inc. | Learning facts from semi-structured text |
US7774328B2 (en) | 2006-02-17 | 2010-08-10 | Google Inc. | Browseable fact repository |
US8122026B1 (en) | 2006-10-20 | 2012-02-21 | Google Inc. | Finding and disambiguating references to entities on web pages |
US20100121839A1 (en) | 2007-03-15 | 2010-05-13 | Scott Meyer | Query optimization |
US8204856B2 (en) | 2007-03-15 | 2012-06-19 | Google Inc. | Database replication |
US7792837B1 (en) | 2007-11-14 | 2010-09-07 | Google Inc. | Entity name recognition |
US20100145902A1 (en) | 2008-12-09 | 2010-06-10 | Ita Software, Inc. | Methods and systems to train models to extract and integrate information from data sources |
WO2010085523A1 (en) | 2009-01-21 | 2010-07-29 | Metaweb Technologies, Inc. | Graph store |
US20100223214A1 (en) | 2009-02-27 | 2010-09-02 | Kirpal Alok S | Automatic extraction using machine learning based robust structural extractors |
US20100257440A1 (en) | 2009-04-01 | 2010-10-07 | Meghana Kshirsagar | High precision web extraction using site knowledge |
Non-Patent Citations (16)
Title |
---|
Aditya Kalyanpur, James Hendler, Bijan Parsia, and Jennifer Golbeck, "SMORE-Semantic Markup, Ontology, and RDF Editor," copyright 2006, published by www.dtic.mil, http://www.dtic.mil/dtic/tr/fulltext/u2/a447989.pdf, pp. 1-6. * |
Aditya Kalyanpur, James Hendler, Bijan Parsia, and Jennifer Golbeck, "SMORE—Semantic Markup, Ontology, and RDF Editor," copyright 2006, published by www.dtic.mil, http://www.dtic.mil/dtic/tr/fulltext/u2/a447989.pdf, pp. 1-6. * |
Ali Khalili and Soren Auer, "WYSIWYM authoring of structured content based on Schema.org," copyright 2013, WISE: The 14th International Conference on Web Information Systems Engineering-Oct. 13-15, 2013, pp. 1-14 (Year: 2013). * |
Ali Khalili and Soren Auer, "WYSIWYM authoring of structured content based on Schema.org," copyright 2013, WISE: The 14th International Conference on Web Information Systems Engineering—Oct. 13-15, 2013, pp. 1-14 (Year: 2013). * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor-From WYSIWYG to WYSIWYM", copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, pp. 531-540. * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor-From WYSIWYG to WYSIWYM," copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, Figure 2-"Annotation User Interface". * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor-From WYSIWYG to WYSIWYM," copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, pp. 531-540. * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor—From WYSIWYG to WYSIWYM," copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, Figure 2—"Annotation User Interface". * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor—From WYSIWYG to WYSIWYM," copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, pp. 531-540. * |
Ali Khalili, Soren Auer, and Daniel Hladky, "The RDFa Content Editor—From WYSIWYG to WYSIWYM", copyright Jul. 2012, published in Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, pp. 531-540. * |
Hill, "Structured Data First Steps: Adding Schema Location Markup to Your Website", retrieved from http://searchenginewatch.com/article/2216894/Structured-Data-First-Steps-Adding-Schema-Location-Markup-to-Your-Website, Oct. 16, 2012, 6 pages. |
Lancejpollard, "Complete List of HTML Meta Tags-GitHub," copyright 2012, GitHub, https://gist.github.com/lancejpollard/1978404, pp. 1-4. * |
Lancejpollard, "Complete List of HTML Meta Tags—GitHub," copyright 2012, GitHub, https://gist.github.com/lancejpollard/1978404, pp. 1-4. * |
Norbaitiah Ambiah and Dickson Lukose, "Enriching Webpages with Semantic Information," copyright 2012, published in Proceeding DCMI'12 Proceedings of 2012 International Conference on Dublin Core and Metadata Applications, pp. 1-11. * |
Siegfried Handschuh, Steffen Staab, and Alexander Maedche, "CREAM-Creating relational metadata with a component-based, ontology-driven annotation framework," copyright 2001, published by citeseerx.ist.psu.edu, pp. 1-14, http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.21.3877&rep=rep1&type=pdf. * |
Siegfried Handschuh, Steffen Staab, and Alexander Maedche, "CREAM—Creating relational metadata with a component-based, ontology-driven annotation framework," copyright 2001, published by citeseerx.ist.psu.edu, pp. 1-14, http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.21.3877&rep=rep1&type=pdf. * |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180198887A1 (en) * | 2017-01-09 | 2018-07-12 | International Business Machines Corporation | Displaying context in group chats using member tagging |
US11196835B2 (en) * | 2017-01-09 | 2021-12-07 | International Business Machines Corporation | Displaying context in group chats using member tagging |
US20180239826A1 (en) * | 2017-02-22 | 2018-08-23 | Camelot Uk Bidco Limited | Systems and Methods for Direct In-Browser Markup of Elements in Internet Content |
US11089052B2 (en) * | 2017-02-22 | 2021-08-10 | Opsec Online Limited | Systems and methods for direct in-browser markup of elements in internet content |
US10587553B1 (en) * | 2017-12-29 | 2020-03-10 | Entefy Inc. | Methods and systems to support adaptive multi-participant thread monitoring |
US11182542B2 (en) * | 2018-10-29 | 2021-11-23 | Microsoft Technology Licensing, Llc | Exposing annotations in a document |
US11176315B2 (en) * | 2019-05-15 | 2021-11-16 | Elsevier Inc. | Comprehensive in-situ structured document annotations with simultaneous reinforcement and disambiguation |
US20220374582A1 (en) * | 2019-10-28 | 2022-11-24 | Beijing Bytedance Network Technology Co., Ltd. | Method and apparatus for obtaining loading time length of image in webpage, and electronic device |
US11886798B2 (en) * | 2019-10-28 | 2024-01-30 | Beijing Bytedance Network Technology Co., Ltd. | Method and apparatus for obtaining loading time length of image in webpage, and electronic device |
US11074402B1 (en) * | 2020-04-07 | 2021-07-27 | International Business Machines Corporation | Linguistically consistent document annotation |
CN113495753A (en) * | 2021-07-06 | 2021-10-12 | 北京百度网讯科技有限公司 | Project label acquisition method and device, electronic equipment and storage medium |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10002117B1 (en) | Translating annotation tags into suggested markup | |
US11294968B2 (en) | Combining website characteristics in an automatically generated website | |
US11216453B2 (en) | Data visualization in a dashboard display using panel templates | |
US11620114B2 (en) | Responsive self-service template | |
US10318628B2 (en) | System and method for creation of templates | |
US9857959B2 (en) | Supporting webpage design and revision irrespective of webpage framework | |
US10078709B2 (en) | Managing a display of results of a keyword search on a web page by modifying attributes of a DOM tree structure | |
US8788935B1 (en) | Systems and methods for creating or updating an application using website content | |
US20130326333A1 (en) | Mobile Content Management System | |
US9575950B2 (en) | Systems and methods for managing spreadsheet models | |
US20150227276A1 (en) | Method and system for providing an interactive user guide on a webpage | |
US10296308B2 (en) | Automatically generating network applications from design mock-ups | |
Khalili et al. | Wysiwym authoring of structured content based on schema. org | |
US20170109442A1 (en) | Customizing a website string content specific to an industry | |
US20150199346A1 (en) | Hierarchical database report generation with automated query generation for placeholders | |
Schlegel et al. | Balloon synopsis: A modern node-centric RDF viewer and browser for the web | |
JP2008242873A (en) | Software automatic configuring device and method | |
Schlegel et al. | Balloon Synopsis: A jQuery plugin to easily integrate the Semantic Web in a website. | |
US10726076B2 (en) | Information acquisition method, and information acquisition device | |
Rachovski et al. | Models and methodologies for automated creating of webpage mobile versions | |
US20220207092A1 (en) | Computer service for indexing threaded comments with pagination support | |
TWI612432B (en) | Html webpage automatic generating method, and computer program product and system thereof | |
Pinapala | A Content-Sensitive Wiki Help System | |
US20150169742A1 (en) | Constructing concepts from a task specification | |
CN107491451A (en) | A kind of web site collection method, system and browser |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |