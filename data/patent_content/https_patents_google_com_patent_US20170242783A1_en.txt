US20170242783A1 - System and Method for Data Collection and Analysis of Information Relating to Mobile Applications - Google Patents
System and Method for Data Collection and Analysis of Information Relating to Mobile Applications Download PDFInfo
- Publication number
- US20170242783A1 US20170242783A1 US15/465,295 US201715465295A US2017242783A1 US 20170242783 A1 US20170242783 A1 US 20170242783A1 US 201715465295 A US201715465295 A US 201715465295A US 2017242783 A1 US2017242783 A1 US 2017242783A1
- Authority
- US
- United States
- Prior art keywords
- application
- address
- determining
- developer
- crash
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3688—Test management for test execution, e.g. scheduling of test suites
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0706—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment
- G06F11/0748—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment in a remote unit communicating with a single-box computer node experiencing an error/fault
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0706—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment
- G06F11/0736—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment in functional embedded systems, i.e. in a data processing system designed as a combination of hardware and software dedicated to performing a certain function
- G06F11/0742—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment in functional embedded systems, i.e. in a data processing system designed as a combination of hardware and software dedicated to performing a certain function in a data processing system embedded in a mobile device, e.g. mobile phones, handheld devices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0766—Error or fault reporting or storing
- G06F11/0778—Dumping, i.e. gathering error/state information after a fault for later diagnosis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0766—Error or fault reporting or storing
- G06F11/0784—Routing of error reports, e.g. with a specific transmission path or data flow
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
Definitions
- the present disclosure relates generally to application debugging and, more particularly, to providing a developer of an application with pertinent information associated with errors, bugs, and/or defects associated with an application that is executing on an end user's mobile device.
- Debugging is a process of finding and extracting bugs, error and/or defects (hereinafter generally “bugs”), in a computer program, such as an application, thus making the application behave as expected by the application developer.
- developers have been primarily limited to debugging applications prior to those applications being distributed to end users for installation on an end user's mobile device, e.g., a smart phone, personal digital assistant (PDA), tablet computer, etc.
- PDA personal digital assistant
- developers have limited ways of receiving information as to what may cause specific bugs in the applications, while the application is being utilized by the end user and executed on an end user's device.
- One technique is to have the developer provide a test group of end users with the application to obtain feedback and test results regarding the application prior to distributing the final version to all end users.
- Such testing commonly referred to as “beta testing”, is a well known technique to identify certain bugs prior to the general release of a product.
- the developer may receive feedback from end users after the distribution of the final version; however, in such cases, the end users are required to take a proactive role in contacting the developer and informing them as to the issues they may have with the application when executed on the end user's device. In both scenarios, end user initiation is required (e.g., participating in the test group and/or contacting the developer). Further, the developer may not be provided with all pertinent and useful information regarding the bugs, the end user's device (e.g., type), and/or other information that may help the developer in understanding and remedying the bug so that the application behaves as expected.
- the developer of the application may install analytic software, which may be embodied as a software development kit (SDK), on an integrated development environment (“IDE”) associated with the developer, wherein the analytic software may be installed with a wizard-like interface having a series of easy to follow instructions.
- SDK software development kit
- IDE integrated development environment
- the analytic software may be any type of software associated with a SDK, such as an advertising framework, or any other framework, as known by those skilled in the art.
- the analytic software is installed in a source code format that may be integrated into the developer's source code for the application.
- the analytic software is incorporated into the application. Once installed, the application, with the analytic software incorporated therein, may be provided and installed on a plurality of end user devices. Thereafter, the analytic software may work in conjunction with analytic processing logic to assist the developer in obtaining pertinent information related to bugs associated with the application that is being executed on the end user devices.
- a dSYM may allow a user to strip debug symbols from their built application, thus substantially reducing its size. Specifically, when a user sends a “crashdump,” the developer with the dSYM file can use the original dSYM file to generate a proper “stacktrace,” as know by those skilled in the art, for debugging. Thereafter, an end user may experience a crash or other error, associated with the application that incorporates the analytic software therein, on the end user's device. The crash data may then be sent to the web server over the network.
- Analytic processing logic may then be used in conjunction with the debugging information, that was sent to the server, to “symbolicate” the crash data to obtain pertinent information associated with bugs of the application executing on the end user's device (e.g., source code file names, method names, and/or line numbers).
- the developer may be notified, for example by receiving an email, that the crash data is available for the developer to review.
- the developer may then access the web server, managed by the analytic service provider, to view the pertinent information associated with the bugs of the application.
- a developer may be reluctant in sending the particular debugging information (e.g., dSYM file) over the network to the web server due to regulatory or compliance constraints.
- an identifier extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed.
- an end user may experience a bug associated with the application (the analytic software incorporated therein) on the end user's device, and the crash data may be sent to the web server over the network.
- the web server may then extract the same identifier from the crash data to identify the address of the developer's system.
- Analytic processing logic on the developer's system may then used in conjunction with the debugging information to “symbolicate” the crash data to obtain pertinent information associated with the bug of the application on end user's device (e.g., source code file names, method names, and line numbers).
- the pertinent information may then be sent to the web server, and the developer may be notified, for example by receiving an email, that the crash data may be available for the developer to review.
- the developer may then access the web server, managed by the analytic service provider, to view the pertinent information associated with the crash of the application.
- a third embodiment may entail a system that has some developers utilizing the first embodiment and some developers utilizing the second embodiment, wherein the overall system is a “hybrid system” that functions to provide both capabilities.
- a developer of an application may identify the particular location within the source code and other pertinent information associated with bugs that have occurred while the end user is utilizing or executing the application on an end user's device.
- FIG. 1 is a schematic block diagram of an exemplary computing environment in accordance with an illustrative embodiment of the present invention
- FIG. 2 is a schematic block diagram of an exemplary web server in accordance with an illustrative embodiment of the present invention
- FIG. 3 is a schematic block diagram of an exemplary IDE in accordance with an illustrative embodiment of the present invention.
- FIG. 4 is a schematic block diagram of an exemplary end user device in accordance with an illustrative embodiment of the present invention.
- FIG. 5 is a flowchart detailing the steps of an exemplary procedure for providing a developer of an application pertinent information associated with bugs associated with the application that is executing on an end user's device in accordance with an illustrative embodiment of the present invention
- FIG. 6 is a flowchart detailing the steps of an exemplary procedure for installing analytic software on an IDE in accordance with an illustrative embodiment of the present invention
- FIG. 8 is an exemplary GUI window displayed to a developer to enable integration of an analytic module on an IDE in accordance with an illustrative embodiment of the present invention
- FIG. 9 is an exemplary GUI window displayed to a developer to enable the developer to log in to the system in accordance with an illustrative embodiment of the present invention.
- FIG. 11 is an exemplary GUI window displayed to a developer to enable installation of analytic source code on an application in accordance with an illustrative embodiment of the present invention
- FIG. 12 is an exemplary GUI window displayed to a developer to enable installation of an analytic header on an application in accordance with an illustrative embodiment of the present invention
- FIG. 14 is a flowchart detailing the steps of an exemplary procedure for performing analytic processing logic on crash data in accordance with an illustrative embodiment of the present invention
- FIG. 16 is an exemplary message data structure that may be sent between the various entities of computing environment in accordance with an illustrative embodiment of the present invention.
- FIG. 17 is an exemplary message body data structure that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention
- FIG. 18 is an exemplary message body data structure that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention
- FIG. 19 is an exemplary message body data structure that may be sent from an end user device to a web server in accordance with an illustrative embodiment of the present invention
- FIG. 20 is an exemplary message data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention
- FIG. 21 is an exemplary message data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention
- FIG. 22 is an exemplary messages data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention
- FIG. 23 is an exemplary message data structure that may be sent between a web server and analytic processing logic in accordance with an illustrative embodiment of the present invention.
- FIG. 24 is a flowchart detailing the steps of a procedure for post-fact on-device symbolication in accordance with an illustrative embodiment of the present invention.
- a computer network is a geographically distributed collection of entities interconnected by communication links and segments for transporting data between end nodes, such as personal computers and workstations.
- Many types of networks are available, with the types ranging from Wi-Fi networks, cell phone networks, local area networks (LANs) to wide area networks (WANs).
- Wi-Fi is a mechanism for wirelessly connecting a plurality of electronic devices (e.g., computers, cell phones, etc.).
- a device enabled with Wi-Fi capabilities may connect to the Internet via a wireless network access point, as know by those skilled in the art.
- Cellular networks are radio network distributed over land areas called “cells”, wherein each cell may be served by at least one fixed-location transceiver known as a cell site or base station.
- LANs typically connect the entities over dedicated private communications links located in the same general physical location, such as a building or campus.
- WANs typically connect geographically dispersed entities over long-distance communications links, such as common carrier telephone lines, optical lightpaths, synchronous optical networks (SONET), or synchronous digital hierarchy (SDH) links.
- SONET synchronous optical networks
- SDH synchronous digital hierarchy
- the entities typically communicate over the network by exchanging discrete frames or packets of data according to predefined protocols, such as the Transmission Control Protocol/Internet Protocol (TCP/IP), Hypertext Transfer Protocol (HTTP).
- TCP/IP Transmission Control Protocol/Internet Protocol
- HTTP Hypertext Transfer Protocol
- a protocol consists of a set of rules defining how the entities interact with each other and how packets and messages are exchanged.
- FIG. 1 is a schematic block diagram of an exemplary computing environment 100 in accordance with an illustrative embodiment of the present invention.
- the computing environment 100 may include one or more integrated development environments (IDE) 300 coupled to one or more web servers 200 (managed by an analytic service provider), interconnected by one or more communication links 105 .
- IDE 300 described further below in reference to FIG. 3 , represent development environments utilized by application developers for creation of source code to be compiled, or otherwise built, to generate applications to be distributed for execution on end user device 400 .
- IDE 300 may implement an Xcode development environment.
- Xcode is a suite of tools for developing software on a Macintosh (MAC) Operating System X (OS), developed by Apple Inc. While the present invention is described in relation to IDE 300 utilizing Xcode, it should be noted that the teaching of the present invention may be utilized with any development environment.
- Web server 200 described further below in reference to FIG. 2 , is illustratively utilized to enable distribution of the analytic software to IDE 300 , collection of data from IDE 300 and end user device 400 , as well as provides proper message passing among the various entities in environment 100 .
- end user device 400 may be coupled to web servers 200 via communication link(s) 107 , 130 , 135 , 140 , 145 , and 150 , respectively.
- Storage device(s) 115 may for example store debugging information (e.g., dSYM file), among other data associated with the IDE 300 and end user device 400 .
- End user device 400 described further below in reference to FIG. 4 , may comprise any device capable of executing applications.
- end user device 400 may comprise a smart phone, a personal digital assistant and/or a tablet computer.
- Exemplary smart phones may utilize the Android operating system, available from Google, Inc., and/or the iOS system, available from Apple, Inc. It should be noted that other smart phones may be utilized in alternative embodiments. As such, the description herein directed to development for iOS systems should be taken as exemplary only.
- links 105 , 107 , 130 , 135 , 140 , 145 , and 150 are depicted in FIG. 1 as separate and individual links for simplicity purposes, and that communications between the devices may occur over a single link (e.g., Internet), a plurality of links, or virtual links as know by those skilled in the art.
- one or more web servers 200 , database 110 , analytic processing logic 125 , and storage device(s) 115 may all reside on a single device, or a plurality of devices, and managed by the analytic service provider.
- the devices are shown as separate entities in FIG. 1 for simplicity purposes. Further, those skilled in the art will understand that any number of devices and/or links may be used in the computer environment, and that the view shown herein is for simplicity.
- FIG. 2 is a schematic block diagram of an exemplary web server 200 in accordance with an illustrative embodiment of the present invention.
- the web server 200 may comprise a plurality of network interfaces 240 , one or more processors 220 , storage device 225 , and a memory 205 interconnected by a system bus 235 .
- the network interfaces 240 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such as links 105 , 107 , 130 , 135 , 145 , and 140 .
- the network interfaces may be configured to transmit and/or receive data using a variety of different communication protocols, including, inter alia, TCP/IP, UDP, ATM, SONET, HTTP, wireless protocols, Frame Relay, Ethernet, Fiber Distributed Data Interface (FDDI), etc.
- a physical network interface 240 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art.
- VPN Virtual Private Network
- the memory 205 comprises a plurality of locations that are addressable by the processor(s) 220 and the network interfaces 240 for storing software programs and data structures associated with the embodiments described herein.
- the processor 240 may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures.
- An operating system 210 portions of which are typically resident in memory 205 and executed by the processor(s), functionally organizes the web server 200 by, inter alia, invoking network operations in support of software processes and/or services executing on the web server.
- a web server 215 portions of which are typically resident in memory 205 are executed by the processor(s), functionally store and execute logical commands inputted by the analytic service provider and developers.
- web server 215 may implement a website managed by the analytic service provider, wherein developer may access that web site to obtain pertinent information associated with their applications and information associated with bugs incurred on the developer's application executing on an end user device.
- any system for distribution of the analytic software, collection of debugging information and crash data, etc. may be utilized.
- the description of a web server should be taken as exemplary only.
- the various functionalities may be distributed among a plurality of servers.
- the description of a single web server 200 should be taken as exemplary only.
- a storage device 225 may store debugging information 230 , such as a dSYM file, that is sent, for example automatically, over the communication links from an IDE.
- debugging information 230 such as a dSYM file
- a dSYM file may contain a plurality of mappings between memory offsets, such as addresses, and method names and line numbers associated with the built/compiled application created by the developer.
- the structure and information relating to a dSYM file and the functions associated therewith are well-known and described in more detail in “DWARF Debugging Information Format,” dated Jul. 27, 1993, the contents of which are hereby incorporated by reference.
- processors and memory including various computer-readable media, may be used to store and execute program instructions pertaining to the techniques described herein.
- processors and memory including various computer-readable media, may be used to store and execute program instructions pertaining to the techniques described herein.
- embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof.
- FIG. 3 is a schematic block diagram of an exemplary IDE 300 in accordance with an illustrative embodiment of the present invention.
- the IDE may comprise a plurality of network interfaces 340 , one or more processors 320 , a memory 305 , a storage device 325 , and database 355 interconnected by a system bus 335 .
- the network interfaces 340 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such as links 105 , 107 , 130 , 135 , 140 , 145 , and 150 .
- the network interfaces may be configured to transmit and/or receive data using a variety of different communication protocols, including, inter alia, TCP/IP, UDP, ATM, SONET, HTTP, wireless protocols, Frame Relay, Ethernet, Fiber Distributed Data Interface (FDDI), etc.
- a physical network interface 340 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art.
- VPN Virtual Private Network
- the memory 305 comprises a plurality of locations that are addressable by the processor(s) 320 and the network interfaces 340 for storing software programs and data structures associated with the embodiments described herein.
- the processor 340 may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures.
- An operating system 310 portions of which are typically resident in memory 305 and executed by the processor(s), functionally organizes the IDE by, inter alia, invoking network operations in support of software processes and/or services executing on the web server.
- a developer analytic module 315 that is associated with the analytic service provider, portions of which are typically resident in memory 305 are executed by the processor(s), may functionally be installed onto IDE 300 by a user, such as a developer.
- the analytic module 315 may, for example, assists in gathering debugging information 230 associated with the developer's application on IDE 300 .
- a storage device 325 may store debugging information 230 , such as a dSYM file, that is associated with application 330 of the developer. Further, storage device 325 may also store the application 330 of the developer that may be written and compiled on IDE 300 by a developer, for example.
- An analytic library 345 and analytic source code 350 may be installed/incorporated within application 330 of the developer through use of an analytic installer, that is described in further detail with reference to FIG. 6 and FIGS. 9-12 .
- Database 355 is illustratively configured to store an index of the debugging information 360 that may be gathered by developer analytic module 315 .
- database 355 may store an index of a URL of a dSYM file by an identifier, e.g., a universally unique identifier (UUID), associated with the debugging information 230 .
- identifier e.g., a universally unique identifier (UUID)
- UUID universally unique identifier
- database 355 may be implemented using the well-know SQLite database, however, it should be noted that in alternative embodiments any type of data structure that permits indexing, including, e.g., hash tables, etc., may be used. As such, the description of a database should be taken as exemplary only.
- the embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof.
- FIG. 4 is a schematic block diagram of an exemplary end user device 400 in accordance with an illustrative embodiment of the present invention.
- End user device 400 may comprise any device capable of executing applications.
- end user devices 400 may comprise a smart phone, a personal digital assistant and/or a tablet computer.
- Exemplary smart phones may utilize the Android operation system, available from Google, Inc., and/or the iOS system, available from Apple, Inc. It should be noted that other smart phones may be utilized in alternative embodiments. As such, the description herein directed to the development for iOS systems should be taken as exemplary only.
- the end user device may comprise network interfaces 440 , one or more processors 420 , a memory 405 , a storage device 425 , and a cellular network card 445 interconnected by a system bus 435 .
- the network interfaces 440 and cellular network 445 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such as links 105 , 107 , 130 , 135 , 140 , 145 , and 150 .
- the network interface 440 and cellular network card 445 may be configured to transmit and/or receive data using a variety of different communication protocols, including, inter alia, TCP/IP, UDP, ATM, SONET, HTTP, wireless protocols, Frame Relay, Ethernet, Fiber Distributed Data Interface (FDDI), etc.
- a physical network interface 440 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art.
- VPN Virtual Private Network
- Application 450 may be downloaded or installed on end user device 400 in any manner known to those skilled in the art. Further, application 450 includes analytic library 455 and analytic source code 460 that may have been incorporated within application 450 on IDE 300 by the developer. When the application 450 encounters a bug, crash data 430 associated with the bug and application (e.g., running processes, current RAM usage, IP address and network settings, physical orientation of the device in 3D space, among other aspects) may be created. Crash data 430 may be stored on storage device 425 . Such storage devices may be non-volatile random access memory, flash, micro HD, etc. Also, while the embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof.
- FIG. 5 is a flowchart detailing the steps of an exemplary procedure 500 for providing a developer of an application pertinent information associated with bugs associated with the application that is executing on an end user's device in accordance with an illustrative embodiment of the present invention.
- the procedure 500 starts at step 505 and continues to step 600 , described below in reference to FIG. 6 , where analytic source code and/or an analytic library is installed within the application on an IDE.
- debugging information e.g., version number, icon, dSYM file
- a plurality of different types of messages may be utilized to transmit the particular debugging information from the IDE to the storage device, and other entities as described above in reference to FIG. 1 .
- the particular debugging information is typically generated when the application developer compiles a new version of the application, i.e., a new “build” of the application.
- a developer may select a particular command, such as a “DWARF with dSYM file”, as a Debug Information Format in the build settings of an application (e.g., Xcode).
- a dSYM may then be generated automatically when the application is complied, wherein the dSYM file may be placed in the same destination, e.g., folder, as the resulting/compiled application file.
- particular debugging information such as an identifier, extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed.
- the application may be distributed and installed on end user devices, such as mobile phones or other entities.
- the application may be downloaded on the end user device over a cellular network or any other type of network.
- the application may be available to end users through libraries associated with particular end user devices (e.g., iTunes on an iPhone). The end user may then select the develop application from the library and download the application on the end user device. The end user may then utilize the application on his/her end user device.
- the application may simply be available on a particular website, that the user may find through conventional web based search techniques. After finding the application, the user may then download the application from the website and utilize the application on the end user device.
- applications may be available for installation on an end user device through various techniques, and the techniques described above are simply exemplary in nature.
- step 525 the application on the end user device encounters a bug.
- the application may crash unexpectedly or may behave in a manner not intended.
- crash data e.g., running processes, current usage, network address and network settings, physical orientation of the device in 3D space, among other aspects
- the crash data may be stored locally on the end user device. Thereafter, after network connectivity is obtained, the crash data may be sent and to web server 200 and stored at storage device 115 that is managed by the analytic service provider.
- the end user device may be out of “range” (e.g., in a tunnel) if he is utilizing a device that is trying to connect to a cellular phone network.
- the end user device may be device, such a laptop or iPad, that has WIFI connection capabilities, but for whatever reason has lost its connection or is not connected to the WIFI network.
- analytic processing that may be associated with the analytic service provider and/or the IDE, may be performed on the crash data, utilizing the dSYM file associated with the application and stored on storage device 115 .
- analytic processing logic 125 may be utilized by the analytic service provider to perform the processing as described in further detail with respect to FIG. 14 .
- analytic processing, associated with the IDE may be performed on the crash data, utilizing the dSYM file associated with the application and stored locally on the IDE.
- processor 320 of the IDE may be utilized to perform the analytic processing on the crash data as described in further detail with respect to FIG. 15 .
- the procedure 500 then ends at step 535 .
- FIG. 7 is an exemplary GUI window 700 displayed to a developer to enable selection of a application to be incorporated with the analytic software in accordance with an illustrative embodiments of the present invention.
- a window 700 may be displayed to the developer of the IDE that allows the developer to choose the application.
- window 700 may include a list of developer applications 705 , where a developer can choose a particular application from the list, that the developer wishes to associate the analytic software with.
- window 700 may include an other button/tab 710 (e.g., or other mechanism as know by those skilled in the art to execute a process on a computing device), that may allow a developer to choose a different application than one on the list of developer applications 705 , that the developer wishes to associate the analytic software with.
- the developer may select a sign-in button/tab 720 , that allows for an authentication procedure where the developer may provide a username and password to access particular information pertaining to applications associated with the developer.
- the developer may select a next button/tab 715 , to proceed to the next step in installing the analytic software.
- an analytic module may be integrated on the developer's IDE.
- the analytic module may assist in gathering debugging information on the IDE that is associated with the application on the developer's IDE.
- FIG. 8 is an exemplary GUI window 800 displayed to a developer to enable integration of an analytic module on an IDE in accordance with an illustrative embodiment of the present invention. As shown in FIG. 8 , window 800 my be displayed to the developer of the IDE that assists the developer in integrating the analytic module.
- window 800 may include a new run script 805 that may be displayed to the developer where the new run script, associated with the analytic software, may be integrated by having the developer select the copy button/tab 810 .
- the script may be copied into the Xcode build. It is noted that such a copy may be performed explicitly by the user, or may be automated.
- new run script into the Xcode build, particular information regarding the application may be extrapolated and gathered.
- next button/tab 715 may become clickable, so that the developer can proceed to the next phase in installing the analytic software.
- next button/tab 715 may be unclickable, so that the user cannot proceed to the next phase until the new run script is copied correctly.
- the developer may select a cancel button/tab 815 , if the developer wishes to cancel integrating the analytic module or cancel the installation process all together.
- FIG. 9 is an exemplary GUI window 900 displayed to a developer to enable the developer to log into the system in accordance with an illustrative embodiment of the present invention. As shown in FIG. 9 , window 900 may be displayed to the developer that may allow the developer to log into the system, for example, web server 215 .
- a developer may log into the system by providing an email address or other identifier that is unique to the developer in entry field 905 . Further, the developer may provide a password in entry 910 that may authenticate the developer. Authentication procedures are well known by those skilled in the art, and it is noted that any authentication procedure may be used. After the developer has provided the correct email address and password, the develop may click button/tab 915 to log into the system (e.g., web server 215 ).
- the developer is authenticated and may have access to the system managed by the analytic service provider (e.g., web server 215 ), and may further have access to particular information managed by the analytic servicer provider and associated with the application originally created on the developer's IDE, for example.
- the email address or password are incorrect, the developer may be denied access to the system, and may be prompted to enter the “correct” email address and/or password.
- FIG. 10 is an exemplary GUI window 1000 displayed to a developer to enable installation of an analytic library on an application in accordance with an illustrative embodiment of the present invention.
- window 1000 may be displayed to a developer that assists the user in installing the analytic library in the application selected by the user.
- window 1000 may include a draggable icon 1005 that may be dropped “into” the selected application.
- the draggable icon 1005 is associated with an on-disk file path to the analytic library (i.e., which may be copied into application directory during a previous step).
- the file path may be placed on a Drag and Drop Pasteboard, as know by those skilled in the art, thus “tricking” the selected application into thinking that a file (e.g., the library) was dragged instead of the picture/icon.
- the analytic library may be installed automatically after the developer selects the application at step 615 . After the developer has installed the analytic library, the developer may select the next button/tab 715 , to proceed to the next phase in the installation of the analytic software. Alternatively, the developer may select the back button/tab 1010 to revert back to step 625 and view window 900 .
- FIG. 11 is an exemplary GUI window 1100 displayed to a developer to enable installation of analytic source code on an application in accordance with an illustrative embodiment of the present invention.
- a window 1100 may be displayed to the developer.
- the developer may be displayed specific analytic software code 1105 that the user is to incorporate or install within the code associated with the application selected by the developer.
- the developer may select the next button/tab 715 , to proceed to the next phase in the installation of the analytic software.
- the developer may select the back button/tab 1010 to revert back to step 630 and view window 1000 .
- the developer may be provided with another window 1200 , as shown in FIG. 12 , that may display a header 1205 , for example, that the developer may incorporate or install within the code associated with the application as part of installing the analytic source code in the application selected by the developer.
- a done button/tab 1210 may be clickable to complete the installation of the analytic software.
- the developer may select the back button/tab 1010 to revert back to window 1100 . It should be noted that the installation of the analytic source code and header may be done automatically after the application has been selected, wherein the developer will not be required to manually incorporate the source code or header.
- step 640 after the developer logs in the system, he may be provided, through a list, or by any other layout, information associated with applications associated with the developer, information associated with bug(s) incurred by the applications associated with the developer, and other information associated with the developer.
- procedure 600 ends at step 645 .
- FIG. 13 is a flowchart detailing the steps of an exemplary procedure for obtaining settings associated with crash detection and reporting for an end user's device 400 in accordance with an illustrative embodiment of the present invention.
- the procedure 1300 starts at step 1305 and continues to step 1310 , where it is determined whether the setting are cached at the end user's device.
- Such settings may relate to whether the user of the end user device has enabled crash detection and reporting for the end user device, whether crash reporting should first alert the user of the end user device (via a dialog for example) that information will be reported, message text and options for this type of dialog, the extent to which additional device state information is collected, and how long the settings should be cached on the end user device.
- the settings may indicate the manner in which the end user device interacts with the web server, managed by the analytic service provider, and what type of information may be provided from the end user device to the web server. For example, assume that the settings indicate that crash detection and reporting is enabled on the end user device. When the application incurs a bug while executing on the end user's device, crash data may be automatically sent from the end user device to the web server, as described above. Alternatively, assume that the settings indicate that crash detection and reporting is not enabled on the end user device. When the application incurs a bug while executing on the end user's device, crash data may not be sent from the end user device to the web server.
- a request may be issued to the web server, managed by the analytic service provider, to obtain the settings regarding crash detection and reporting at the end user device utilizing an identifier associated with the end user and/or end user device.
- a GET request of the HTTP protocol may be issued by the end user device to the web server utilizing a unique identifier associated with the end user device to obtain the settings.
- the settings that are obtained from the server may be cached on the end user device for a time period indicated in the settings.
- the cached settings regarding crash detection and reporting are obtained to determine the manner in which the end user device interacts with the web server and what type of information may be sent from the end user device to the web server.
- the procedure ends. It is noted that other settings associated with end user device may be cached, and the particular settings are described above are simply exemplary in nature.
- FIG. 14 is a flowchart detailing the steps of an exemplary procedure 1400 for performing analytic processing on crash data in accordance with an illustrative embodiment of the present invention.
- analytic processing may be managed by and associated with the analytic service provider.
- Procedure 1400 starts at step 1405 and continues to step 1410 where the web server may receive crash data from an end user device in response to the application on the end user device incurring a bug, and the crash data may then be stored in database 110 that is coupled to web server 200 .
- the web server may extract an identifier (e.g., UUID) from the crash data to identify a particular debugging data structure (e.g., dSYM file) associated with the application that incurred the bug.
- UUID e.g., UUID
- analytic processing logic 125 may then use the debugging data structure (e.g., dSYM file) to convert the crash data into results.
- the analytic processing logic 125 may utilize the “dwarfdump” feature in conjunction with the debugging data structure, that is know by those skilled in the art, to convert the raw memory addresses present in the crash data into source code file names, method names, and line numbers, etc. Such information may be useful in rectifying the bug and learning more about what caused the bug. This process is commonly knows as “symbolication” by those skilled in the art.
- the DWARF debugging features are well-known and described in more detail in the previously incorporated by reference “DWARF Debugging Information Format,” dated Jul. 27, 1993.
- the converted results may be stored in database 110 .
- the developer of the application may be notified that information regarding a bug (e.g., the converted raw data) associated with the application is available for the developer's viewing. For example, it may be determined whether the bug has tripped one of the notification thresholds (e.g., a particular bug) and, if so, notify the developer via email. The developer may then access web server 215 , for example utilizing a login and password as described above, to view the results. Further, it is noted that bugs associated with a application may be given an impact score based on the number of crashes, the number people affected by the bug, the percentage of user affected, and other important criteria that may help signify the seriousness of the bug. This impact score may be provided to the developer through the web server 215 , thus allowing the developer to understand the “seriousness” of the bug. The procedure then ends at step 1435 .
- a bug e.g., the converted raw data
- the developer may be notified that information regarding a bug
- FIG. 15 is a flowchart detailing the steps of an exemplary procedure 1500 for performing analytic processing logic on crash data in accordance with an illustrative embodiment of the present invention.
- the analytic processing logic may reside on the developer's IDE. This embodiment may be favored by developers who do not want to send debugging information over a network to the web server due to regulatory or compliance constraints.
- Procedure 1500 starts at step 1505 and continues to step 1510 where the web server may receive crash data from an end user device in response to the developer's application on the end user device incurring a bug, and the crash data may then be stored in database 110 that is coupled to web server 200 .
- the web server may extract an identifier (e.g., UUID) from the crash data to identify a particular debugging data structure (e.g., dSYM file) associated with the developer's application that incurred the bug.
- the extracted identifier is then used to identify an address (e.g., URL/IP address) associated with the developer's IDE.
- a message may be sent to the developer, via email for example, informing the developer that a bug associated with the application needs to be processed.
- analytic processing logic on the IDE may then use the debugging data structure (e.g., dSYM file) to convert the crash data into results.
- the analytic processing logic on the IDE may utilize the “dwarfdump” feature and in conjunction with the debugging data structure, that is know by those skilled in the art, to convert the raw memory addresses present in the crash data into source code file names, method names, and line numbers, etc.
- This process is commonly knows as “symbolication” by those skilled in the art. It can be assured that the “dwarfdump” feature is installed on the IDE because the IDE is the system that created the debugging data structure (e.g., dSYM file) associated with the developer's application in the first place.
- the converted results may be sent to the web server and stored in database 110 .
- the developer of the application may be notified that information regarding a bug associated with the developer's application is available for the developer's viewing. For example, it may be determined whether the bug has tripped one of the notification thresholds (e.g., a particular bug) and, if so, notify the developer via email. The developer may then access web server 215 , for example utilizing a login and password as described above, to view the results. The procedure then ends at step 1545 .
- FIG. 16 is an exemplary message 1600 that may be sent between the various entities of computing environment in accordance with an illustrative embodiment of the present invention.
- message 1600 may be an HTTP message.
- HTTP messages may include POST, PUT, GET messages, as known by those skilled in the art and described in more detail in the Request for Comments (RFC) 2616, entitled “Hypertext Transfer Protocol-HTTP/1.1,” dated June 1999, the contents of which are hereby incorporated by reference.
- the message 1600 may have a start-line field 1605 that may include a request-line for a request message that begins with a method token, or a status line for a response message consisting of the protocol version followed by a numeric status code and its associated textual phrase.
- message 1600 may include a message header 1610 , and a Carriage Return Line Feed (CRLF) field 1615 , as known by those skilled in the art.
- message 1600 may include a message body 1620 that is used to carry the entity-body associated with the request or response.
- message body 1620 may carry the debugging information or the crash data.
- FIG. 17 is an exemplary message 1700 body that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention.
- the message body 1700 may be associated with an HTTP message.
- message body 1700 may be associated with a POST HTTP message that an IDE may utilize to post specific information to the web servers 200 .
- message body 1700 may send particular information, associated with the build of the developer's application on the IDE, from the IDE to the web server 200 .
- Such information may include version number 1705 , icon 1710 , debugging information (e.g., dSYM file) 1715 , and identifier 1720 associated with the debugging information.
- debugging information e.g., dSYM file
- identifier 1720 associated with the debugging information.
- other fields 1725 and information may be within message body 1700 .
- FIG. 18 is an exemplary message body 1800 that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention.
- message body 1800 may be associated with a POST HTTP message that an IDE may utilize to post specific information to the web server 200 .
- message body 1800 may send particular information, associated with the build of the developer's application on the IDE, from the IDE to the web server 200 .
- Such information may include an identifier 1805 extracted from debugging information and associated with developer's application, and an address 1810 associated with the developer's IDE (e.g., IP address). That information may then be stored on database 110 .
- FIG. 19 is an exemplary message body 1900 that may be sent from an end user device to a web server in accordance with an illustrative embodiment of the present invention.
- message body 1900 may be associated with a POST HTTP message that an end user device may utilize to post specific information to the web servers 200 .
- message body 1900 may send particular crash data associated with a bug of the developer's application being executed on the end user's device.
- Such information may include a field 1905 to store a state of the end user device, a field 1910 to store the processes running on the end user device, a field 1915 to store RAM used by the end user device, an IP address field 1920 to store an IP address associated with the end user device, a network settings field 1925 to store network settings associated with the end user device, and a physical orientation field 1930 to store a physical orientation of the end user device, when the developer's application incurs the bug. Further, it is noted that other crash data may be included in field 1935 .
- FIGS. 20-22 are exemplary messages that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention, such as mongoDB messages as known by those skilled in the art.
- Message 2000 for example, may have a header field 2005 , Full Collection Name field 2010 , flags field 215 , selector field 2020 , update/document field 2025 , and fields 2030 that may be used to transport other pertinent date, as known by those skilled in the art.
- Message 2000 may be used by the web server to update a document that is currently stored on the database. For example, information associated with the developer's IDE may change, where that information may need to be updated in database 110 .
- the message header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and/or a type of the message.
- the Full Collection Name field 2010 may be the concatenation of the database name with the collection name, using a “.” for the concatenation. For example, for the database “foo” and the collection “bar”, the full collection name may be “foo.bar”.
- the flags field 2015 may include a bit instruction as to how the database should utilize the received information. For example, if an “upsert” bit is set, the database may insert the supplied object in the collection if no matching document is found.
- Selector field 2020 may specify the query for selection of the document to update, and update/document field 2025 may specify the update to be performed.
- FIG. 21 is an exemplary message 2100 that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention.
- message 2100 such as a MongoDB message
- message 2100 may be sent from the database back to the web server for example, and may be referred to a database response message.
- Message 2001 may have a header field 2105 , response flags field 2110 , cursor ID field 2115 , a starting from field 2120 , number returned field 2125 , documents field 2130 , and fields 2135 that may be used to transport other pertinent date, as known by those skilled in the art.
- the message header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and a type of the message.
- response flag field 2110 may include a bit instruction how the database should utilize the received information. For example, a “QueryFailure” bit may be set when a query has failed.
- CursorID field 2115 may represent a cursor that the reply is a part of, as know by those skilled in the art. Starting from filed 2120 may indicate where in the cursor the reply is starting. Number returned field 2125 indicates a number of documents in the reply, and documents field 2130 indicates the specific documents.
- FIG. 22 is an exemplary messages 2200 that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention.
- message 220 such as a MongoDB message
- Message 2200 may have a header field 2205 , flags field 2210 , Full Collection Name Field 2215 , a query field 2220 , and fields 2225 that may be used to transport other pertinent date, as known by those skilled in the art.
- the message header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and a type of the message.
- flags field 2210 may include a bit instruction as to how the database should utilize the received information.
- a “SlaveOk” bit may be set to allow a query of replica slave, as known by those skilled in the art.
- the Full Collection Name field 2215 may be the concatenation of the database name with the collection name, using a “.” for the concatenation. For example, for the database “foo” and the collection “bar”, the full collection name may be “foo.bar”.
- a query field 2220 may contain one or more elements, all of which must match for a document to be included in a set of results.
- Field 2225 may include other fields that are pertinent with a query request (e.g., number of documents to skip and a number of documents to return).
- FIG. 23 is an exemplary message 2300 that may be sent between a web server and analytic processing logic in accordance with an illustrative embodiment of the present invention.
- message 2300 may be a PUT command of the beanstalk protocol, as known by those skilled in the art.
- Message 2300 may include a PRI field 2305 , delay field 2310 , TTR field 2315 , bytes field 2320 , data field 2320 , and fields 2330 that may be used to transport other pertinent date, as known by those skilled in the art.
- PRI field 2305 may be an integer representing a priority of the message 2300 , wherein the most urgent priority may be an integer value of 0.
- Delay field 2310 may be an integer number of seconds to wait before putting the job, e.g., PUT command, in a queue for processing. The job will be in a “delayed” state, during this time period.
- the TTR field 2315 may represent a “time to run” and may be an integer number of seconds to allow a worker (e.g., a worker thread) to run the job. For example, the time may be counted from the moment a worker reserves the job.
- Bytes field 2320 may be an integer value indicate the size of the job body, and data field 2320 may include the job body.
- An alternative embodiment is post-fact on-device symbolication and may be performed during the period post fact on device and enables the symbolication of a crash during a future execution of a copy of the application. This enables symbolication to occur on the end user device without interaction with the web server, etc.
- the Apple operating system e.g., iOS 5
- ASLR Address-Space Layout Randomization
- ASLR moves the application binary around in memory, on the end user device for example, and thus changes all of the memory addresses associated with the crash data that is to be symbolicated.
- symbolicating crash data in a subsequent execution of the application would produce results that are not accurate/correct.
- an application is typically compiled with an assumed-fixed base-address that represents the address at which the compiler believes the binary image associated with the application will be loaded into memory on the end user's device.
- ASLR breaks this assumption and translates between the assumed addresses and the actual addresses where the binary is loaded into memory.
- This delta is a “slide” of the binary.
- ALSR can be seen as a technique for choosing a random “slide” for the binary each time the application launches on the end user device.
- the present invention leverages ASLR to determine a relative slide between two launches of an application. By determining the relative slide between two launches, the crash data on the end user device can be symbolicated during any future execution of the application.
- the symbolication of the crash data may be accomplished without requiring the developer to send a copy of the application to the web server. As discussed above, the developer may not want to send a copy of the application due to privacy reasons, regulatory constraints, or compliance constraints.
- FIG. 24 is a flow chart detailing the steps of a procedure 2400 for post fact on device symbolication in accordance with an illustrative embodiment of the present invention.
- the procedure 2400 begins in step 2405 and continues to step 600 , described above in reference to FIG. 6 , where analytic source code and/or an analytic library is installed within the application on an IDE.
- debugging information e.g., version number, icon, dSYM file
- step 510 particular debugging information, such as an identifier, extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed.
- the application may be distributed and installed on end user devices, such as mobile phones or other entities.
- the application may be downloaded on the end user device over a cellular network or any other type of network.
- the application may be available to end users through libraries associated with particular end user devices (e.g., iTunes on an iPhone). The end user may then select the develop application from the library and download the application on the end user device.
- the end user may then utilize the application on his/her end user device.
- the application may simply be available on a particular website, that the user may find through conventional web based search techniques. After finding the application, the user may then download the application from the website and utilize the application on the end user device.
- applications may be available for installation on an end user device through various techniques, and the techniques described above are simply exemplary in nature.
- the application may be launched, by an end user for example, on the end user device.
- the end user may then utilize the application, that includes the analytic library and/or the analytic software, on the end user device.
- the end user may for example, go through a series of set up steps associated with whether crash detection and reporting. For example, some user may determine that they do not want to enable crash detection and reporting for privacy reasons or other reasons.
- the user of the end user device may indicate, utilizing a keypad associated with the end user device, that he/she wishes to disable crash detection and reporting on the end user device.
- network connectivity e.g., cell phone network or WIFI network
- the preference indicated by the user may be transmitted to the web server.
- the application incurs a bug, the crash data may remain on the end user device instead of sending the crash data to web server 200 for analytic processor.
- step 525 the application on the end user device encounters a bug.
- the application may crash unexpectedly or may behave in a manner not intended.
- the procedure 2400 continues to step 2410 where the memory address of the current instruction pointer, as well as all previous instruction pointers contained within the stack are recorded.
- the analytic code installed within the application records this information in persistent memory of the end user device for later retrieval.
- the procedure then continues to step 2415 and information related to binary images and/or libraries is recorded. Specifically, a list of all binary images/libraries that are utilized by or comprise the crash application are recorded. More specifically, for each of the binary images/libraries, a universally unique name (UUID) and a start and end address may be recorded.
- UUID universally unique name
- step 2430 the relative slide between the original instruction pointer and the later launched (e.g., relaunched) instruction pointer is determined to generate a rebased instruction pointer.
- a library responsible for a line of code associated with the application is determined by figuring out which start and end addresses surround the respective instruction pointer. Thereafter, the identifier from the recorded list associated with the library, that was determined for the respective instruction pointer, is loaded and the start address is subtracted from the instruction pointer in order to arrive at a “de-based” instruction pointer.
- the procedure 2400 then ends in step 2440 .
- the embodiments disclosed herein provide methods for providing a developer of an application pertinent information associated with errors, bugs, or defects associated with the application that is executing on an end user's device.
Abstract
Description
- The present application is a continuation of and claims priority under 35 U.S.C. §120 to U.S. patent application Ser. No. 13/426,493, filed Mar. 21, 2012 by Wayne Chang and Jeffrey Seibert and entitled System And Method For Data Collection And Analysis Of Information Relating To Mobile Applications, which is a continuation in part of and claims priority under 35 U.S.C. §120 to U.S. patent application Ser. No. 13/323,166, filed on Dec. 12, 2011, by Wayne Chang and Jeffrey Seibert and entitled System and Method for Data Collection and Analysis of Information Relating to Mobile Applications. U.S. patent application Ser. No. 13/426,493 and U.S. patent application Ser. No. 13/323,166 are incorporated herein by reference in their entirety.
- The present disclosure relates generally to application debugging and, more particularly, to providing a developer of an application with pertinent information associated with errors, bugs, and/or defects associated with an application that is executing on an end user's mobile device.
- Debugging is a process of finding and extracting bugs, error and/or defects (hereinafter generally “bugs”), in a computer program, such as an application, thus making the application behave as expected by the application developer. Conventionally, developers have been primarily limited to debugging applications prior to those applications being distributed to end users for installation on an end user's mobile device, e.g., a smart phone, personal digital assistant (PDA), tablet computer, etc. With the growth of applications that may be provided to end users across the world (e.g., mobile applications), developers have limited ways of receiving information as to what may cause specific bugs in the applications, while the application is being utilized by the end user and executed on an end user's device.
- One technique is to have the developer provide a test group of end users with the application to obtain feedback and test results regarding the application prior to distributing the final version to all end users. Such testing, commonly referred to as “beta testing”, is a well known technique to identify certain bugs prior to the general release of a product.
- Further, the developer may receive feedback from end users after the distribution of the final version; however, in such cases, the end users are required to take a proactive role in contacting the developer and informing them as to the issues they may have with the application when executed on the end user's device. In both scenarios, end user initiation is required (e.g., participating in the test group and/or contacting the developer). Further, the developer may not be provided with all pertinent and useful information regarding the bugs, the end user's device (e.g., type), and/or other information that may help the developer in understanding and remedying the bug so that the application behaves as expected.
- The disadvantages of the prior art are overcome by providing a system and method for data collection and analysis of information related to applications, and more specifically, mobile applications. Specifically, the developer of the application may install analytic software, which may be embodied as a software development kit (SDK), on an integrated development environment (“IDE”) associated with the developer, wherein the analytic software may be installed with a wizard-like interface having a series of easy to follow instructions. The analytic software may be any type of software associated with a SDK, such as an advertising framework, or any other framework, as known by those skilled in the art. Illustratively, the analytic software is installed in a source code format that may be integrated into the developer's source code for the application. During compilation and/or a build of the application, the analytic software is incorporated into the application. Once installed, the application, with the analytic software incorporated therein, may be provided and installed on a plurality of end user devices. Thereafter, the analytic software may work in conjunction with analytic processing logic to assist the developer in obtaining pertinent information related to bugs associated with the application that is being executed on the end user devices.
- Specifically, in a first embodiment, particular debugging information, for example, a dSYM file, may be automatically sent from the developer's IDE to a web server over a network, wherein the web server may be managed by an analytic service provider. Specifically, this is accomplished because the analytic software was installed on the IDE, which in turn may automatically detect when a new dSYM is generated, may then de-duplicate the dSYM based on an identifier (to obtain the most current version of the dSYM), and may then automatically upload or send the particular debugging information from the IDE to the web server. A dSYM file may be created, as known by those skilled in the art, when an Xcode project is built. A dSYM may allow a user to strip debug symbols from their built application, thus substantially reducing its size. Specifically, when a user sends a “crashdump,” the developer with the dSYM file can use the original dSYM file to generate a proper “stacktrace,” as know by those skilled in the art, for debugging. Thereafter, an end user may experience a crash or other error, associated with the application that incorporates the analytic software therein, on the end user's device. The crash data may then be sent to the web server over the network. Analytic processing logic may then be used in conjunction with the debugging information, that was sent to the server, to “symbolicate” the crash data to obtain pertinent information associated with bugs of the application executing on the end user's device (e.g., source code file names, method names, and/or line numbers).
- The developer may be notified, for example by receiving an email, that the crash data is available for the developer to review. The developer may then access the web server, managed by the analytic service provider, to view the pertinent information associated with the bugs of the application.
- In a second embodiment, a developer may be reluctant in sending the particular debugging information (e.g., dSYM file) over the network to the web server due to regulatory or compliance constraints. In such a situation, an identifier, extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed. Thereafter, an end user may experience a bug associated with the application (the analytic software incorporated therein) on the end user's device, and the crash data may be sent to the web server over the network. The web server may then extract the same identifier from the crash data to identify the address of the developer's system. Analytic processing logic on the developer's system may then used in conjunction with the debugging information to “symbolicate” the crash data to obtain pertinent information associated with the bug of the application on end user's device (e.g., source code file names, method names, and line numbers). The pertinent information may then be sent to the web server, and the developer may be notified, for example by receiving an email, that the crash data may be available for the developer to review. The developer may then access the web server, managed by the analytic service provider, to view the pertinent information associated with the crash of the application.
- It is noted, that a third embodiment may entail a system that has some developers utilizing the first embodiment and some developers utilizing the second embodiment, wherein the overall system is a “hybrid system” that functions to provide both capabilities.
- Advantageously, a developer of an application may identify the particular location within the source code and other pertinent information associated with bugs that have occurred while the end user is utilizing or executing the application on an end user's device.
- The embodiments herein may be better understood by referring to the following description in conjunction with the accompanying drawings in which like reference numerals indicate identically or functionally similar elements, of which:
-
FIG. 1 is a schematic block diagram of an exemplary computing environment in accordance with an illustrative embodiment of the present invention; -
FIG. 2 is a schematic block diagram of an exemplary web server in accordance with an illustrative embodiment of the present invention; -
FIG. 3 is a schematic block diagram of an exemplary IDE in accordance with an illustrative embodiment of the present invention; -
FIG. 4 is a schematic block diagram of an exemplary end user device in accordance with an illustrative embodiment of the present invention; -
FIG. 5 is a flowchart detailing the steps of an exemplary procedure for providing a developer of an application pertinent information associated with bugs associated with the application that is executing on an end user's device in accordance with an illustrative embodiment of the present invention; -
FIG. 6 is a flowchart detailing the steps of an exemplary procedure for installing analytic software on an IDE in accordance with an illustrative embodiment of the present invention; -
FIG. 7 is an exemplary graphical user interface (GUI) window displayed to a developer to enable selection of an application to be incorporated with the analytic software in accordance with an illustrative embodiment of the present invention; -
FIG. 8 is an exemplary GUI window displayed to a developer to enable integration of an analytic module on an IDE in accordance with an illustrative embodiment of the present invention; -
FIG. 9 is an exemplary GUI window displayed to a developer to enable the developer to log in to the system in accordance with an illustrative embodiment of the present invention; -
FIG. 10 is an exemplary GUI window displayed to a developer to enable installation of an analytic library on an application in accordance with an illustrative embodiment of the present invention; -
FIG. 11 is an exemplary GUI window displayed to a developer to enable installation of analytic source code on an application in accordance with an illustrative embodiment of the present invention; -
FIG. 12 is an exemplary GUI window displayed to a developer to enable installation of an analytic header on an application in accordance with an illustrative embodiment of the present invention; -
FIG. 13 is a flowchart detailing the steps of an exemplary procedure for obtaining settings associated with crash detection and reporting for an end user's device in accordance with an illustrative embodiment of the present invention; -
FIG. 14 is a flowchart detailing the steps of an exemplary procedure for performing analytic processing logic on crash data in accordance with an illustrative embodiment of the present invention; -
FIG. 15 is a flowchart detailing the steps of an exemplary procedure for performing analytic processing logic on crash data in accordance with an illustrative embodiment of the present invention; -
FIG. 16 is an exemplary message data structure that may be sent between the various entities of computing environment in accordance with an illustrative embodiment of the present invention; -
FIG. 17 is an exemplary message body data structure that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention; -
FIG. 18 is an exemplary message body data structure that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention; -
FIG. 19 is an exemplary message body data structure that may be sent from an end user device to a web server in accordance with an illustrative embodiment of the present invention; -
FIG. 20 is an exemplary message data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention; -
FIG. 21 is an exemplary message data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention; -
FIG. 22 is an exemplary messages data structure that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention; -
FIG. 23 is an exemplary message data structure that may be sent between a web server and analytic processing logic in accordance with an illustrative embodiment of the present invention; and -
FIG. 24 is a flowchart detailing the steps of a procedure for post-fact on-device symbolication in accordance with an illustrative embodiment of the present invention. - A computer network is a geographically distributed collection of entities interconnected by communication links and segments for transporting data between end nodes, such as personal computers and workstations. Many types of networks are available, with the types ranging from Wi-Fi networks, cell phone networks, local area networks (LANs) to wide area networks (WANs). Wi-Fi is a mechanism for wirelessly connecting a plurality of electronic devices (e.g., computers, cell phones, etc.). A device enabled with Wi-Fi capabilities may connect to the Internet via a wireless network access point, as know by those skilled in the art. Cellular networks are radio network distributed over land areas called “cells”, wherein each cell may be served by at least one fixed-location transceiver known as a cell site or base station. When joined together, these cells may provide radio coverage over a wide geographic area. As known by those skilled in the art, this may enable a large number of portable transceivers (e.g., mobile phones) to communicate with each other. LANs typically connect the entities over dedicated private communications links located in the same general physical location, such as a building or campus. WANs, on the other hand, typically connect geographically dispersed entities over long-distance communications links, such as common carrier telephone lines, optical lightpaths, synchronous optical networks (SONET), or synchronous digital hierarchy (SDH) links. The Internet is an example of a WAN that connects disparate networks throughout the world, providing global communication between entities on various networks. The entities typically communicate over the network by exchanging discrete frames or packets of data according to predefined protocols, such as the Transmission Control Protocol/Internet Protocol (TCP/IP), Hypertext Transfer Protocol (HTTP). In this context, a protocol consists of a set of rules defining how the entities interact with each other and how packets and messages are exchanged.
-
FIG. 1 is a schematic block diagram of anexemplary computing environment 100 in accordance with an illustrative embodiment of the present invention. Specifically, thecomputing environment 100 may include one or more integrated development environments (IDE) 300 coupled to one or more web servers 200 (managed by an analytic service provider), interconnected by one or more communication links 105.Developer IDE 300, described further below in reference toFIG. 3 , represent development environments utilized by application developers for creation of source code to be compiled, or otherwise built, to generate applications to be distributed for execution onend user device 400. Illustratively,IDE 300 may implement an Xcode development environment. As known by those skilled in the art, Xcode is a suite of tools for developing software on a Macintosh (MAC) Operating System X (OS), developed by Apple Inc. While the present invention is described in relation toIDE 300 utilizing Xcode, it should be noted that the teaching of the present invention may be utilized with any development environment.Web server 200, described further below in reference toFIG. 2 , is illustratively utilized to enable distribution of the analytic software toIDE 300, collection of data fromIDE 300 andend user device 400, as well as provides proper message passing among the various entities inenvironment 100. - Further,
end user device 400,database 110, analytic processing logic 125, and storage device(s) 115 may be coupled toweb servers 200 via communication link(s) 107, 130, 135, 140, 145, and 150, respectively. Storage device(s) 115 may for example store debugging information (e.g., dSYM file), among other data associated with theIDE 300 andend user device 400.End user device 400, described further below in reference toFIG. 4 , may comprise any device capable of executing applications. Illustratively,end user device 400 may comprise a smart phone, a personal digital assistant and/or a tablet computer. Exemplary smart phones may utilize the Android operating system, available from Google, Inc., and/or the iOS system, available from Apple, Inc. It should be noted that other smart phones may be utilized in alternative embodiments. As such, the description herein directed to development for iOS systems should be taken as exemplary only. - It is noted that
links FIG. 1 as separate and individual links for simplicity purposes, and that communications between the devices may occur over a single link (e.g., Internet), a plurality of links, or virtual links as know by those skilled in the art. Moreover, one ormore web servers 200,database 110, analytic processing logic 125, and storage device(s) 115 may all reside on a single device, or a plurality of devices, and managed by the analytic service provider. The devices are shown as separate entities inFIG. 1 for simplicity purposes. Further, those skilled in the art will understand that any number of devices and/or links may be used in the computer environment, and that the view shown herein is for simplicity. -
FIG. 2 is a schematic block diagram of anexemplary web server 200 in accordance with an illustrative embodiment of the present invention. Theweb server 200 may comprise a plurality ofnetwork interfaces 240, one ormore processors 220,storage device 225, and amemory 205 interconnected by asystem bus 235. The network interfaces 240 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such aslinks physical network interface 240 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art. - The
memory 205 comprises a plurality of locations that are addressable by the processor(s) 220 and the network interfaces 240 for storing software programs and data structures associated with the embodiments described herein. Theprocessor 240 may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures. Anoperating system 210, portions of which are typically resident inmemory 205 and executed by the processor(s), functionally organizes theweb server 200 by, inter alia, invoking network operations in support of software processes and/or services executing on the web server. Aweb server 215, portions of which are typically resident inmemory 205 are executed by the processor(s), functionally store and execute logical commands inputted by the analytic service provider and developers. For example,web server 215 may implement a website managed by the analytic service provider, wherein developer may access that web site to obtain pertinent information associated with their applications and information associated with bugs incurred on the developer's application executing on an end user device. It should be noted that any system for distribution of the analytic software, collection of debugging information and crash data, etc. may be utilized. As such, the description of a web server should be taken as exemplary only. In alternative embodiments, the various functionalities may be distributed among a plurality of servers. As such, the description of asingle web server 200 should be taken as exemplary only. - A
storage device 225 may store debugginginformation 230, such as a dSYM file, that is sent, for example automatically, over the communication links from an IDE. Those skilled in the art will understand that a dSYM file may contain a plurality of mappings between memory offsets, such as addresses, and method names and line numbers associated with the built/compiled application created by the developer. The structure and information relating to a dSYM file and the functions associated therewith are well-known and described in more detail in “DWARF Debugging Information Format,” dated Jul. 27, 1993, the contents of which are hereby incorporated by reference. It will be apparent to those skilled in the art that other types of processors and memory, including various computer-readable media, may be used to store and execute program instructions pertaining to the techniques described herein. Also, while the embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof. -
FIG. 3 is a schematic block diagram of anexemplary IDE 300 in accordance with an illustrative embodiment of the present invention. The IDE may comprise a plurality ofnetwork interfaces 340, one ormore processors 320, amemory 305, astorage device 325, anddatabase 355 interconnected by asystem bus 335. The network interfaces 340 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such aslinks physical network interface 340 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art. - The
memory 305 comprises a plurality of locations that are addressable by the processor(s) 320 and the network interfaces 340 for storing software programs and data structures associated with the embodiments described herein. Theprocessor 340 may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures. Anoperating system 310, portions of which are typically resident inmemory 305 and executed by the processor(s), functionally organizes the IDE by, inter alia, invoking network operations in support of software processes and/or services executing on the web server. - A developer
analytic module 315, that is associated with the analytic service provider, portions of which are typically resident inmemory 305 are executed by the processor(s), may functionally be installed ontoIDE 300 by a user, such as a developer. Theanalytic module 315 may, for example, assists in gatheringdebugging information 230 associated with the developer's application onIDE 300. Astorage device 325 may store debugginginformation 230, such as a dSYM file, that is associated withapplication 330 of the developer. Further,storage device 325 may also store theapplication 330 of the developer that may be written and compiled onIDE 300 by a developer, for example. Ananalytic library 345 andanalytic source code 350, that are associated with an analytic service provider, may be installed/incorporated withinapplication 330 of the developer through use of an analytic installer, that is described in further detail with reference toFIG. 6 andFIGS. 9-12 . -
Database 355, is illustratively configured to store an index of thedebugging information 360 that may be gathered by developeranalytic module 315. For example,database 355 may store an index of a URL of a dSYM file by an identifier, e.g., a universally unique identifier (UUID), associated with thedebugging information 230. In an illustrative embodiment,database 355 may be implemented using the well-know SQLite database, however, it should be noted that in alternative embodiments any type of data structure that permits indexing, including, e.g., hash tables, etc., may be used. As such, the description of a database should be taken as exemplary only. Also, while the embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof. -
FIG. 4 is a schematic block diagram of an exemplaryend user device 400 in accordance with an illustrative embodiment of the present invention.End user device 400 may comprise any device capable of executing applications. Illustratively,end user devices 400 may comprise a smart phone, a personal digital assistant and/or a tablet computer. Exemplary smart phones may utilize the Android operation system, available from Google, Inc., and/or the iOS system, available from Apple, Inc. It should be noted that other smart phones may be utilized in alternative embodiments. As such, the description herein directed to the development for iOS systems should be taken as exemplary only. The end user device may comprisenetwork interfaces 440, one ormore processors 420, amemory 405, astorage device 425, and acellular network card 445 interconnected by asystem bus 435. The network interfaces 440 andcellular network 445 contain the mechanical, electrical, and signaling circuitry for communicating data over physical links coupled to a network, such aslinks network interface 440 andcellular network card 445 may be configured to transmit and/or receive data using a variety of different communication protocols, including, inter alia, TCP/IP, UDP, ATM, SONET, HTTP, wireless protocols, Frame Relay, Ethernet, Fiber Distributed Data Interface (FDDI), etc. Notably, aphysical network interface 440 may also be used to implement one or more virtual network interfaces, such as for Virtual Private Network (VPN) access, known to those skilled in the art. - The
memory 405 comprises a plurality of locations that are addressable by the processor(s) 420 and the network interfaces 440 for storing software programs and data structures associated with the embodiments described herein. Theprocessor 420 may comprise necessary elements or logic adapted to execute the software programs and manipulate the data structures. Anoperating system 410, portions of which are typically resident inmemory 405 and executed by the processor(s), functionally organizes the end user device by, inter alia, invoking network operations in support of software processes and/or services executing on the web server. Anapplication 450, that may have been created by a developer on an IDE, and portions of which are typically resident inmemory 405, are executed by the processor(s).Application 450 may be downloaded or installed onend user device 400 in any manner known to those skilled in the art. Further,application 450 includesanalytic library 455 andanalytic source code 460 that may have been incorporated withinapplication 450 onIDE 300 by the developer. When theapplication 450 encounters a bug,crash data 430 associated with the bug and application (e.g., running processes, current RAM usage, IP address and network settings, physical orientation of the device in 3D space, among other aspects) may be created.Crash data 430 may be stored onstorage device 425. Such storage devices may be non-volatile random access memory, flash, micro HD, etc. Also, while the embodiments herein are described in terms of processes or services stored in memory, alternative embodiments also include the processes described herein being embodied as modules consisting of hardware, software, firmware, or combinations thereof. -
FIG. 5 is a flowchart detailing the steps of anexemplary procedure 500 for providing a developer of an application pertinent information associated with bugs associated with the application that is executing on an end user's device in accordance with an illustrative embodiment of the present invention. Theprocedure 500 starts atstep 505 and continues to step 600, described below in reference toFIG. 6 , where analytic source code and/or an analytic library is installed within the application on an IDE. Instep 1300, debugging information (e.g., version number, icon, dSYM file) may be locally stored on the IDE. Instep 510, particular debugging information, such as a dSYM file, may be automatically sent over a network, toweb server 200, and stored atstorage device 115. As explained above, the dSYM is capable of being automatically uploaded or sent toweb server 200 due to the installation of the analytic source code an/or analytic library. Specifically, the integration of the analytic source code and/or analytic library may automatically detect when a new dSYM is generated on the IDE, de-duplicate the dSYM based on an identifier, and automatically upload or send the dSYM to the web server. As described further below, with reference toFIGS. 16-23 , a plurality of different types of messages may be utilized to transmit the particular debugging information from the IDE to the storage device, and other entities as described above in reference toFIG. 1 . The particular debugging information is typically generated when the application developer compiles a new version of the application, i.e., a new “build” of the application. For example, and as know by those skilled in the art, a developer may select a particular command, such as a “DWARF with dSYM file”, as a Debug Information Format in the build settings of an application (e.g., Xcode). A dSYM may then be generated automatically when the application is complied, wherein the dSYM file may be placed in the same destination, e.g., folder, as the resulting/compiled application file. Further, and as described in further detail below, particular debugging information, such as an identifier, extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed. - In
step 515, the application may be distributed and installed on end user devices, such as mobile phones or other entities. For example, the application may be downloaded on the end user device over a cellular network or any other type of network. For example, the application may be available to end users through libraries associated with particular end user devices (e.g., iTunes on an iPhone). The end user may then select the develop application from the library and download the application on the end user device. The end user may then utilize the application on his/her end user device. In other instances, the application may simply be available on a particular website, that the user may find through conventional web based search techniques. After finding the application, the user may then download the application from the website and utilize the application on the end user device. As is known to those skilled in the art, applications may be available for installation on an end user device through various techniques, and the techniques described above are simply exemplary in nature. - In
step 520, the application may be launched, by an end user for example, on the end user device. The end user may then utilize the application, that includes the analytic library and/or the analytic software, on the end user device. The end user, may for example, go through a series of set up steps associated with whether crash detection and reporting. For example, some user may determine that they do not want to enable crash detection and reporting for privacy reasons or other reasons. In such a case, the user of the end user device may indicate, utilizing a keypad associated with the end user device, that he/she wishes to disable crash detection and reporting on the end user device. Thereafter, for example when network connectivity is obtained (e.g., cell phone network or WIFI network), the preference indicated by the user may be transmitted to the web server. Thereafter, when the application incurs a bug, the crash data may remain on the end user device instead of sending the crash data toweb server 200 for analytic processor. - In
step 525, the application on the end user device encounters a bug. For example, the application may crash unexpectedly or may behave in a manner not intended. Instep 530, crash data (e.g., running processes, current usage, network address and network settings, physical orientation of the device in 3D space, among other aspects) may be stored locally on the end user device. Thereafter, after network connectivity is obtained, the crash data may be sent and toweb server 200 and stored atstorage device 115 that is managed by the analytic service provider. For example, the end user device may be out of “range” (e.g., in a tunnel) if he is utilizing a device that is trying to connect to a cellular phone network. Alternatively, the end user device may be device, such a laptop or iPad, that has WIFI connection capabilities, but for whatever reason has lost its connection or is not connected to the WIFI network. Instep 1400, analytic processing, that may be associated with the analytic service provider and/or the IDE, may be performed on the crash data, utilizing the dSYM file associated with the application and stored onstorage device 115. Specifically, analytic processing logic 125 may be utilized by the analytic service provider to perform the processing as described in further detail with respect toFIG. 14 . Alternatively, instep 1500, analytic processing, associated with the IDE, may be performed on the crash data, utilizing the dSYM file associated with the application and stored locally on the IDE. Specifically,processor 320 of the IDE may be utilized to perform the analytic processing on the crash data as described in further detail with respect toFIG. 15 . Theprocedure 500 then ends atstep 535. -
FIG. 6 is a flowchart detailing the steps of anexemplary procedure 600 for installing analytic software, such as a software development kit (“SDK”), on anIDE 300 in accordance with an illustrative embodiment of the present invention. It is noted that the SDK may be analytic software or any type of SKD, such as an advertising framework. Further, it is noted that the analytic software may be obtained in a variety of ways. For example, the analytic software may be downloaded on the IDE from a library (e.g., iTunes), or downloaded from a website. In an alternate embodiment, the launcher may reside at a remote location, and may simply reside thereon wherein the IDE may have access to the analytic software via the Internet. Theprocedure 600 starts atstep 605 and continues to step 610, where an analytic installer is launched. For example, the analytic software may be launched utilizing a GUI or a command line interface (CLI), as known by those skilled in the art. - After the analytic software is launched, a developer may select an application with which the developer wishes to incorporate the analytic software on in
step 615.FIG. 7 is anexemplary GUI window 700 displayed to a developer to enable selection of a application to be incorporated with the analytic software in accordance with an illustrative embodiments of the present invention. As shown inFIG. 7 , awindow 700 may be displayed to the developer of the IDE that allows the developer to choose the application. Specifically,window 700 may include a list ofdeveloper applications 705, where a developer can choose a particular application from the list, that the developer wishes to associate the analytic software with. Further,window 700 may include an other button/tab 710 (e.g., or other mechanism as know by those skilled in the art to execute a process on a computing device), that may allow a developer to choose a different application than one on the list ofdeveloper applications 705, that the developer wishes to associate the analytic software with. Further, the developer may select a sign-in button/tab 720, that allows for an authentication procedure where the developer may provide a username and password to access particular information pertaining to applications associated with the developer. Moreover, after the user has selected a particular application (e.g., from the list or after selecting the other button/tab and choosing a particular application), the developer may select a next button/tab 715, to proceed to the next step in installing the analytic software. - Referring back to
FIG. 6 , after an application has been selected instep 615, the procedure continues to step 620, where an analytic module may be integrated on the developer's IDE. The analytic module, for example, may assist in gathering debugging information on the IDE that is associated with the application on the developer's IDE.FIG. 8 is anexemplary GUI window 800 displayed to a developer to enable integration of an analytic module on an IDE in accordance with an illustrative embodiment of the present invention. As shown inFIG. 8 ,window 800 my be displayed to the developer of the IDE that assists the developer in integrating the analytic module. Specifically,window 800 may include anew run script 805 that may be displayed to the developer where the new run script, associated with the analytic software, may be integrated by having the developer select the copy button/tab 810. Specifically, the script may be copied into the Xcode build. It is noted that such a copy may be performed explicitly by the user, or may be automated. By incorporating the new run script into the Xcode build, particular information regarding the application may be extrapolated and gathered. Once the analytic module is integrated, next button/tab 715 may become clickable, so that the developer can proceed to the next phase in installing the analytic software. For example, if the new run scrip is not copied or not copied correctly, the next button/tab 715 may be unclickable, so that the user cannot proceed to the next phase until the new run script is copied correctly. Further, the developer may select a cancel button/tab 815, if the developer wishes to cancel integrating the analytic module or cancel the installation process all together. - Referring back to
FIG. 6 , after the analytic module has been integrated instep 620, the procedure continues to step 625, where the developer may log into the system (e.g.,web server 215 that is managed by the analytic service provider) so that the developer's activity and files/applications associated with the developer may be tracked. It is noted, that if the user logs in prior to integrating the analytic module,step 625 may be skipped.FIG. 9 is anexemplary GUI window 900 displayed to a developer to enable the developer to log into the system in accordance with an illustrative embodiment of the present invention. As shown inFIG. 9 ,window 900 may be displayed to the developer that may allow the developer to log into the system, for example,web server 215. Specifically, a developer may log into the system by providing an email address or other identifier that is unique to the developer inentry field 905. Further, the developer may provide a password inentry 910 that may authenticate the developer. Authentication procedures are well known by those skilled in the art, and it is noted that any authentication procedure may be used. After the developer has provided the correct email address and password, the develop may click button/tab 915 to log into the system (e.g., web server 215). If the email address and password are correct, the developer is authenticated and may have access to the system managed by the analytic service provider (e.g., web server 215), and may further have access to particular information managed by the analytic servicer provider and associated with the application originally created on the developer's IDE, for example. However, if either the email address or password are incorrect, the developer may be denied access to the system, and may be prompted to enter the “correct” email address and/or password. - Referring back to
FIG. 6 , after the developer has logged in atstep 625, the procedure continues to step 630, where the analytic library may be installed in the application selected by the developer's (e.g., selected in step 615).FIG. 10 is anexemplary GUI window 1000 displayed to a developer to enable installation of an analytic library on an application in accordance with an illustrative embodiment of the present invention. As shown inFIG. 10 ,window 1000 may be displayed to a developer that assists the user in installing the analytic library in the application selected by the user. Specifically,window 1000 may include adraggable icon 1005 that may be dropped “into” the selected application. This is accomplished by associating thedraggable icon 1005 with an on-disk file path to the analytic library (i.e., which may be copied into application directory during a previous step). When the user initiates a drag operation, the file path may be placed on a Drag and Drop Pasteboard, as know by those skilled in the art, thus “tricking” the selected application into thinking that a file (e.g., the library) was dragged instead of the picture/icon. In a different embodiment, the analytic library may be installed automatically after the developer selects the application atstep 615. After the developer has installed the analytic library, the developer may select the next button/tab 715, to proceed to the next phase in the installation of the analytic software. Alternatively, the developer may select the back button/tab 1010 to revert back to step 625 andview window 900. - Referring back to
FIG. 6 , after the analytic library has been installed on the application instep 630, the procedure continues atstep 635, where analytic source code may be installed in the application selected by the developer.FIG. 11 is anexemplary GUI window 1100 displayed to a developer to enable installation of analytic source code on an application in accordance with an illustrative embodiment of the present invention. As shown inFIG. 11 , awindow 1100 may be displayed to the developer. Specifically, the developer may be displayed specificanalytic software code 1105 that the user is to incorporate or install within the code associated with the application selected by the developer. After the developer has installed the analytic source code, the developer may select the next button/tab 715, to proceed to the next phase in the installation of the analytic software. Alternatively, the developer may select the back button/tab 1010 to revert back to step 630 andview window 1000. - After selecting the next button/
tab 715, the developer may be provided with anotherwindow 1200, as shown inFIG. 12 , that may display aheader 1205, for example, that the developer may incorporate or install within the code associated with the application as part of installing the analytic source code in the application selected by the developer. After it is determined that the analytic software has been installed correctly, a done button/tab 1210 may be clickable to complete the installation of the analytic software. Alternatively, the developer may select the back button/tab 1010 to revert back towindow 1100. It should be noted that the installation of the analytic source code and header may be done automatically after the application has been selected, wherein the developer will not be required to manually incorporate the source code or header. Atstep 640, after the developer logs in the system, he may be provided, through a list, or by any other layout, information associated with applications associated with the developer, information associated with bug(s) incurred by the applications associated with the developer, and other information associated with the developer. Referring back toFIG. 6 , after the analytic software has been installed instep 640,procedure 600 ends atstep 645. -
FIG. 13 is a flowchart detailing the steps of an exemplary procedure for obtaining settings associated with crash detection and reporting for an end user'sdevice 400 in accordance with an illustrative embodiment of the present invention. Theprocedure 1300 starts atstep 1305 and continues to step 1310, where it is determined whether the setting are cached at the end user's device. Such settings may relate to whether the user of the end user device has enabled crash detection and reporting for the end user device, whether crash reporting should first alert the user of the end user device (via a dialog for example) that information will be reported, message text and options for this type of dialog, the extent to which additional device state information is collected, and how long the settings should be cached on the end user device. Thus, the settings may indicate the manner in which the end user device interacts with the web server, managed by the analytic service provider, and what type of information may be provided from the end user device to the web server. For example, assume that the settings indicate that crash detection and reporting is enabled on the end user device. When the application incurs a bug while executing on the end user's device, crash data may be automatically sent from the end user device to the web server, as described above. Alternatively, assume that the settings indicate that crash detection and reporting is not enabled on the end user device. When the application incurs a bug while executing on the end user's device, crash data may not be sent from the end user device to the web server. If the settings are not cached on the end user's device, at step 1325 a request may be issued to the web server, managed by the analytic service provider, to obtain the settings regarding crash detection and reporting at the end user device utilizing an identifier associated with the end user and/or end user device. For example, a GET request of the HTTP protocol, as known by those skilled in the art, may be issued by the end user device to the web server utilizing a unique identifier associated with the end user device to obtain the settings. Atstep 1330, the settings that are obtained from the server may be cached on the end user device for a time period indicated in the settings. However, if atstep 1310 it is determined that the settings are in fact cached at the end user device, the cached settings regarding crash detection and reporting are obtained to determine the manner in which the end user device interacts with the web server and what type of information may be sent from the end user device to the web server. Atstep 1320, the procedure ends. It is noted that other settings associated with end user device may be cached, and the particular settings are described above are simply exemplary in nature. -
FIG. 14 is a flowchart detailing the steps of anexemplary procedure 1400 for performing analytic processing on crash data in accordance with an illustrative embodiment of the present invention. Specifically, analytic processing may be managed by and associated with the analytic service provider.Procedure 1400 starts atstep 1405 and continues to step 1410 where the web server may receive crash data from an end user device in response to the application on the end user device incurring a bug, and the crash data may then be stored indatabase 110 that is coupled toweb server 200. Atstep 1415, the web server may extract an identifier (e.g., UUID) from the crash data to identify a particular debugging data structure (e.g., dSYM file) associated with the application that incurred the bug. Atstep 1420, analytic processing logic 125 may then use the debugging data structure (e.g., dSYM file) to convert the crash data into results. For example, the analytic processing logic 125 may utilize the “dwarfdump” feature in conjunction with the debugging data structure, that is know by those skilled in the art, to convert the raw memory addresses present in the crash data into source code file names, method names, and line numbers, etc. Such information may be useful in rectifying the bug and learning more about what caused the bug. This process is commonly knows as “symbolication” by those skilled in the art. The DWARF debugging features are well-known and described in more detail in the previously incorporated by reference “DWARF Debugging Information Format,” dated Jul. 27, 1993. Atstep 1425, the converted results may be stored indatabase 110. Atstep 1430, the developer of the application may be notified that information regarding a bug (e.g., the converted raw data) associated with the application is available for the developer's viewing. For example, it may be determined whether the bug has tripped one of the notification thresholds (e.g., a particular bug) and, if so, notify the developer via email. The developer may then accessweb server 215, for example utilizing a login and password as described above, to view the results. Further, it is noted that bugs associated with a application may be given an impact score based on the number of crashes, the number people affected by the bug, the percentage of user affected, and other important criteria that may help signify the seriousness of the bug. This impact score may be provided to the developer through theweb server 215, thus allowing the developer to understand the “seriousness” of the bug. The procedure then ends atstep 1435. -
FIG. 15 is a flowchart detailing the steps of anexemplary procedure 1500 for performing analytic processing logic on crash data in accordance with an illustrative embodiment of the present invention. Specifically, the analytic processing logic may reside on the developer's IDE. This embodiment may be favored by developers who do not want to send debugging information over a network to the web server due to regulatory or compliance constraints.Procedure 1500 starts atstep 1505 and continues to step 1510 where the web server may receive crash data from an end user device in response to the developer's application on the end user device incurring a bug, and the crash data may then be stored indatabase 110 that is coupled toweb server 200. Atstep 1515, the web server may extract an identifier (e.g., UUID) from the crash data to identify a particular debugging data structure (e.g., dSYM file) associated with the developer's application that incurred the bug. Atstep 1520, the extracted identifier is then used to identify an address (e.g., URL/IP address) associated with the developer's IDE. Atstep 1525, a message may be sent to the developer, via email for example, informing the developer that a bug associated with the application needs to be processed. Atstep 1530, analytic processing logic on the IDE may then use the debugging data structure (e.g., dSYM file) to convert the crash data into results. Such information may be useful in rectifying the bug and learning more about what caused the bug. For example, the analytic processing logic on the IDE may utilize the “dwarfdump” feature and in conjunction with the debugging data structure, that is know by those skilled in the art, to convert the raw memory addresses present in the crash data into source code file names, method names, and line numbers, etc. This process is commonly knows as “symbolication” by those skilled in the art. It can be assured that the “dwarfdump” feature is installed on the IDE because the IDE is the system that created the debugging data structure (e.g., dSYM file) associated with the developer's application in the first place. Atstep 1535, the converted results may be sent to the web server and stored indatabase 110. Atstep 1540, the developer of the application may be notified that information regarding a bug associated with the developer's application is available for the developer's viewing. For example, it may be determined whether the bug has tripped one of the notification thresholds (e.g., a particular bug) and, if so, notify the developer via email. The developer may then accessweb server 215, for example utilizing a login and password as described above, to view the results. The procedure then ends atstep 1545. -
FIG. 16 is anexemplary message 1600 that may be sent between the various entities of computing environment in accordance with an illustrative embodiment of the present invention. For example,message 1600 may be an HTTP message. Such HTTP messages may include POST, PUT, GET messages, as known by those skilled in the art and described in more detail in the Request for Comments (RFC) 2616, entitled “Hypertext Transfer Protocol-HTTP/1.1,” dated June 1999, the contents of which are hereby incorporated by reference. Specifically, themessage 1600 may have a start-line field 1605 that may include a request-line for a request message that begins with a method token, or a status line for a response message consisting of the protocol version followed by a numeric status code and its associated textual phrase. Further,message 1600 may include amessage header 1610, and a Carriage Return Line Feed (CRLF)field 1615, as known by those skilled in the art. Moreover,message 1600 may include amessage body 1620 that is used to carry the entity-body associated with the request or response. For example,message body 1620 may carry the debugging information or the crash data. -
FIG. 17 is anexemplary message 1700 body that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention. Specifically, themessage body 1700 may be associated with an HTTP message. For example,message body 1700 may be associated with a POST HTTP message that an IDE may utilize to post specific information to theweb servers 200. Specifically,message body 1700 may send particular information, associated with the build of the developer's application on the IDE, from the IDE to theweb server 200. Such information may includeversion number 1705,icon 1710, debugging information (e.g., dSYM file) 1715, andidentifier 1720 associated with the debugging information. Further, it is noted thatother fields 1725 and information may be withinmessage body 1700. -
FIG. 18 is anexemplary message body 1800 that may be sent from a developer's IDE to a web server in accordance with an illustrative embodiment of the present invention. For example,message body 1800 may be associated with a POST HTTP message that an IDE may utilize to post specific information to theweb server 200. Specifically,message body 1800 may send particular information, associated with the build of the developer's application on the IDE, from the IDE to theweb server 200. Such information may include anidentifier 1805 extracted from debugging information and associated with developer's application, and anaddress 1810 associated with the developer's IDE (e.g., IP address). That information may then be stored ondatabase 110. -
FIG. 19 is anexemplary message body 1900 that may be sent from an end user device to a web server in accordance with an illustrative embodiment of the present invention. For example,message body 1900 may be associated with a POST HTTP message that an end user device may utilize to post specific information to theweb servers 200. Specifically,message body 1900 may send particular crash data associated with a bug of the developer's application being executed on the end user's device. Such information may include afield 1905 to store a state of the end user device, afield 1910 to store the processes running on the end user device, afield 1915 to store RAM used by the end user device, anIP address field 1920 to store an IP address associated with the end user device, a network settings field 1925 to store network settings associated with the end user device, and aphysical orientation field 1930 to store a physical orientation of the end user device, when the developer's application incurs the bug. Further, it is noted that other crash data may be included infield 1935. -
FIGS. 20-22 are exemplary messages that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention, such as mongoDB messages as known by those skilled in the art.Message 2000 for example, may have aheader field 2005, FullCollection Name field 2010, flagsfield 215,selector field 2020, update/document field 2025, andfields 2030 that may be used to transport other pertinent date, as known by those skilled in the art.Message 2000 may be used by the web server to update a document that is currently stored on the database. For example, information associated with the developer's IDE may change, where that information may need to be updated indatabase 110. Themessage header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and/or a type of the message. Further, the FullCollection Name field 2010 may be the concatenation of the database name with the collection name, using a “.” for the concatenation. For example, for the database “foo” and the collection “bar”, the full collection name may be “foo.bar”. The flags field 2015 may include a bit instruction as to how the database should utilize the received information. For example, if an “upsert” bit is set, the database may insert the supplied object in the collection if no matching document is found.Selector field 2020 may specify the query for selection of the document to update, and update/document field 2025 may specify the update to be performed. -
FIG. 21 is anexemplary message 2100 that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention. Specifically,message 2100, such as a MongoDB message, may be sent from the database back to the web server for example, and may be referred to a database response message. Message 2001 may have aheader field 2105, response flagsfield 2110,cursor ID field 2115, a starting fromfield 2120, number returnedfield 2125,documents field 2130, andfields 2135 that may be used to transport other pertinent date, as known by those skilled in the art. Themessage header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and a type of the message. Further,response flag field 2110 may include a bit instruction how the database should utilize the received information. For example, a “QueryFailure” bit may be set when a query has failed.CursorID field 2115 may represent a cursor that the reply is a part of, as know by those skilled in the art. Starting from filed 2120 may indicate where in the cursor the reply is starting. Number returnedfield 2125 indicates a number of documents in the reply, and documents field 2130 indicates the specific documents. -
FIG. 22 is anexemplary messages 2200 that may be sent between a web server and a database in accordance with an illustrative embodiment of the present invention. Specifically,message 220, such as a MongoDB message, may be sent by the web server to query the database.Message 2200 may have aheader field 2205, flagsfield 2210, FullCollection Name Field 2215, aquery field 2220, andfields 2225 that may be used to transport other pertinent date, as known by those skilled in the art. Themessage header 2005 may include identification information, such as the total size of the message, an identifier that uniquely identifies the message, and a type of the message. Further, flagsfield 2210 may include a bit instruction as to how the database should utilize the received information. For example, a “SlaveOk” bit may be set to allow a query of replica slave, as known by those skilled in the art. Further, the FullCollection Name field 2215 may be the concatenation of the database name with the collection name, using a “.” for the concatenation. For example, for the database “foo” and the collection “bar”, the full collection name may be “foo.bar”. Aquery field 2220 may contain one or more elements, all of which must match for a document to be included in a set of results.Field 2225 may include other fields that are pertinent with a query request (e.g., number of documents to skip and a number of documents to return). -
FIG. 23 is anexemplary message 2300 that may be sent between a web server and analytic processing logic in accordance with an illustrative embodiment of the present invention. For example,message 2300 may be a PUT command of the beanstalk protocol, as known by those skilled in the art.Message 2300 may include aPRI field 2305,delay field 2310,TTR field 2315,bytes field 2320,data field 2320, andfields 2330 that may be used to transport other pertinent date, as known by those skilled in the art.PRI field 2305 may be an integer representing a priority of themessage 2300, wherein the most urgent priority may be an integer value of 0.Delay field 2310 may be an integer number of seconds to wait before putting the job, e.g., PUT command, in a queue for processing. The job will be in a “delayed” state, during this time period. TheTTR field 2315 may represent a “time to run” and may be an integer number of seconds to allow a worker (e.g., a worker thread) to run the job. For example, the time may be counted from the moment a worker reserves the job. Bytes field 2320 may be an integer value indicate the size of the job body, anddata field 2320 may include the job body. - An alternative embodiment is post-fact on-device symbolication and may be performed during the period post fact on device and enables the symbolication of a crash during a future execution of a copy of the application. This enables symbolication to occur on the end user device without interaction with the web server, etc. As known by those skilled in the art, the Apple operating system (e.g., iOS 5), utilizes Address-Space Layout Randomization (ASLR). ASLR moves the application binary around in memory, on the end user device for example, and thus changes all of the memory addresses associated with the crash data that is to be symbolicated. Thus, symbolicating crash data in a subsequent execution of the application would produce results that are not accurate/correct. Further, and as known by those skilled in the art, an application is typically compiled with an assumed-fixed base-address that represents the address at which the compiler believes the binary image associated with the application will be loaded into memory on the end user's device. ASLR breaks this assumption and translates between the assumed addresses and the actual addresses where the binary is loaded into memory. This delta, as known by those skilled in the art, is a “slide” of the binary. Thus, ALSR can be seen as a technique for choosing a random “slide” for the binary each time the application launches on the end user device. The present invention leverages ASLR to determine a relative slide between two launches of an application. By determining the relative slide between two launches, the crash data on the end user device can be symbolicated during any future execution of the application. Advantageously, the symbolication of the crash data may be accomplished without requiring the developer to send a copy of the application to the web server. As discussed above, the developer may not want to send a copy of the application due to privacy reasons, regulatory constraints, or compliance constraints.
-
FIG. 24 is a flow chart detailing the steps of aprocedure 2400 for post fact on device symbolication in accordance with an illustrative embodiment of the present invention. Theprocedure 2400 begins instep 2405 and continues to step 600, described above in reference toFIG. 6 , where analytic source code and/or an analytic library is installed within the application on an IDE. Instep 1300, debugging information (e.g., version number, icon, dSYM file) may be locally stored on the IDE. Instep 510, particular debugging information, such as an identifier, extracted from the debugging information that remains resident on the developer's system, is sent to the web server, wherein the identifier is associated with an address of the developer's system (e.g., IP address) and indexed. Instep 515, the application may be distributed and installed on end user devices, such as mobile phones or other entities. For example, the application may be downloaded on the end user device over a cellular network or any other type of network. For example, the application may be available to end users through libraries associated with particular end user devices (e.g., iTunes on an iPhone). The end user may then select the develop application from the library and download the application on the end user device. The end user may then utilize the application on his/her end user device. In other instances, the application may simply be available on a particular website, that the user may find through conventional web based search techniques. After finding the application, the user may then download the application from the website and utilize the application on the end user device. As is known to those skilled in the art, applications may be available for installation on an end user device through various techniques, and the techniques described above are simply exemplary in nature. - In
step 520, the application may be launched, by an end user for example, on the end user device. The end user may then utilize the application, that includes the analytic library and/or the analytic software, on the end user device. The end user, may for example, go through a series of set up steps associated with whether crash detection and reporting. For example, some user may determine that they do not want to enable crash detection and reporting for privacy reasons or other reasons. In such a case, the user of the end user device may indicate, utilizing a keypad associated with the end user device, that he/she wishes to disable crash detection and reporting on the end user device. Thereafter, for example when network connectivity is obtained (e.g., cell phone network or WIFI network), the preference indicated by the user may be transmitted to the web server. Thereafter, when the application incurs a bug, the crash data may remain on the end user device instead of sending the crash data toweb server 200 for analytic processor. - In
step 525, the application on the end user device encounters a bug. For example, the application may crash unexpectedly or may behave in a manner not intended. - In response to the application incurring a bug in
step 525, theprocedure 2400 continues to step 2410 where the memory address of the current instruction pointer, as well as all previous instruction pointers contained within the stack are recorded. Illustratively, the analytic code installed within the application records this information in persistent memory of the end user device for later retrieval. The procedure then continues to step 2415 and information related to binary images and/or libraries is recorded. Specifically, a list of all binary images/libraries that are utilized by or comprise the crash application are recorded. More specifically, for each of the binary images/libraries, a universally unique name (UUID) and a start and end address may be recorded. - In
step 2420, the end user launches the application at a later point in time. Typically, after a crash of an application, an end-user may quickly close the application and relaunch the application to continue performing whatever functions they were attempting. However, there may be a time delay before the application is relaunched by the user. Upon the relaunching of the application at a later point in time, the analytic software records information relating to all binary images and or libraries instep 2425. Illustratively, the same information is recorded as was previously recorded instep 2415. However, because there would be variations in the start and end addresses of the various images/libraries, the starting and ending address of the later execution of the application will be different from the original execution by a relative slide (e.g., offset). - In
step 2430, the relative slide between the original instruction pointer and the later launched (e.g., relaunched) instruction pointer is determined to generate a rebased instruction pointer. Moreover, and for each recorded instruction pointer for the crash, a library responsible for a line of code associated with the application is determined by figuring out which start and end addresses surround the respective instruction pointer. Thereafter, the identifier from the recorded list associated with the library, that was determined for the respective instruction pointer, is loaded and the start address is subtracted from the instruction pointer in order to arrive at a “de-based” instruction pointer. The current list of libraries are searched for the identifier, wherein after the identifier is found in the list, the identified library's start address is added to the debased instruction pointer resulting in a “re-based” instruction pointer. The difference between the original pointer and the “re-based” pointer is the relative slide between the two executions of the application (e.g., the difference between the start address of the library at a previous time and the current time). - Then, in
step 2435, the instruction pointer may be symbolicated using the re-based instruction pointers. That is, each re-based pointer can be symbolicated using the dladdr( ) function, as known by those skilled in the art, that loads the symbol at the address. Advantageously, symbolication can be achieved without the developer sending the application to the server. - The
procedure 2400 then ends instep 2440. - Advantageously, the embodiments disclosed herein provide methods for providing a developer of an application pertinent information associated with errors, bugs, or defects associated with the application that is executing on an end user's device.
Claims (21)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/465,295 US11016878B2 (en) | 2011-12-12 | 2017-03-21 | System and method for data collection and analysis of information relating to mobile applications |
US17/245,493 US11960388B2 (en) | 2011-12-12 | 2021-04-30 | System and method for data collection and analysis of information relating to mobile applications |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/323,166 US9262250B2 (en) | 2011-12-12 | 2011-12-12 | System and method for data collection and analysis of information relating to mobile applications |
US13/426,493 US8863086B2 (en) | 2011-12-12 | 2012-03-21 | System and method for data collection and analysis of information relating to mobile applications |
US14/476,103 US9606904B1 (en) | 2011-12-12 | 2014-09-03 | System and method for data collection and analysis of information relating to mobile applications |
US15/465,295 US11016878B2 (en) | 2011-12-12 | 2017-03-21 | System and method for data collection and analysis of information relating to mobile applications |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/476,103 Continuation US9606904B1 (en) | 2011-12-12 | 2014-09-03 | System and method for data collection and analysis of information relating to mobile applications |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/245,493 Continuation US11960388B2 (en) | 2011-12-12 | 2021-04-30 | System and method for data collection and analysis of information relating to mobile applications |
Publications (2)
Publication Number | Publication Date |
---|---|
US20170242783A1 true US20170242783A1 (en) | 2017-08-24 |
US11016878B2 US11016878B2 (en) | 2021-05-25 |
Family
ID=48573259
Family Applications (5)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/323,166 Active 2033-09-05 US9262250B2 (en) | 2011-12-12 | 2011-12-12 | System and method for data collection and analysis of information relating to mobile applications |
US13/426,493 Active US8863086B2 (en) | 2011-12-12 | 2012-03-21 | System and method for data collection and analysis of information relating to mobile applications |
US14/476,103 Active US9606904B1 (en) | 2011-12-12 | 2014-09-03 | System and method for data collection and analysis of information relating to mobile applications |
US15/465,295 Active US11016878B2 (en) | 2011-12-12 | 2017-03-21 | System and method for data collection and analysis of information relating to mobile applications |
US17/245,493 Active 2033-01-10 US11960388B2 (en) | 2011-12-12 | 2021-04-30 | System and method for data collection and analysis of information relating to mobile applications |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/323,166 Active 2033-09-05 US9262250B2 (en) | 2011-12-12 | 2011-12-12 | System and method for data collection and analysis of information relating to mobile applications |
US13/426,493 Active US8863086B2 (en) | 2011-12-12 | 2012-03-21 | System and method for data collection and analysis of information relating to mobile applications |
US14/476,103 Active US9606904B1 (en) | 2011-12-12 | 2014-09-03 | System and method for data collection and analysis of information relating to mobile applications |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/245,493 Active 2033-01-10 US11960388B2 (en) | 2011-12-12 | 2021-04-30 | System and method for data collection and analysis of information relating to mobile applications |
Country Status (3)
Country | Link |
---|---|
US (5) | US9262250B2 (en) |
EP (2) | EP2791800B1 (en) |
WO (1) | WO2013090320A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220405191A1 (en) * | 2021-06-18 | 2022-12-22 | Agora Lab, Inc. | Software development kit with independent automatic crash detection |
Families Citing this family (48)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9087154B1 (en) * | 2011-12-12 | 2015-07-21 | Crashlytics, Inc. | System and method for providing additional functionality to developer side application in an integrated development environment |
US20130185770A1 (en) * | 2012-01-12 | 2013-07-18 | Salesforce.Com, Inc. | Methods and systems for providing access to an online system |
CN103530199B (en) * | 2012-07-02 | 2015-12-02 | 腾讯科技（深圳）有限公司 | A kind of method, Apparatus and system repairing running software mistake |
US8819856B1 (en) * | 2012-08-06 | 2014-08-26 | Google Inc. | Detecting and preventing noncompliant use of source code |
US9213622B1 (en) * | 2013-03-14 | 2015-12-15 | Square, Inc. | System for exception notification and analysis |
US9417947B1 (en) * | 2013-03-15 | 2016-08-16 | Twitter, Inc. | System and method for robust storage of error event information |
US9542300B1 (en) | 2013-03-15 | 2017-01-10 | Twitter, Inc. | System and method for tracking callback functions for error identification |
US9075583B1 (en) * | 2013-03-15 | 2015-07-07 | Emc Corporation | Layout design for a mobile application using selected governance, risk management and compliance rules |
US9792321B2 (en) | 2013-07-09 | 2017-10-17 | Oracle International Corporation | Online database migration |
US10776244B2 (en) | 2013-07-09 | 2020-09-15 | Oracle International Corporation | Consolidation planning services for systems migration |
US9996562B2 (en) | 2013-07-09 | 2018-06-12 | Oracle International Corporation | Automated database migration architecture |
US9442983B2 (en) * | 2013-07-09 | 2016-09-13 | Oracle International Corporation | Method and system for reducing instability when upgrading software |
US9967154B2 (en) | 2013-07-09 | 2018-05-08 | Oracle International Corporation | Advanced customer support services—advanced support cloud portal |
US9762461B2 (en) | 2013-07-09 | 2017-09-12 | Oracle International Corporation | Cloud services performance tuning and benchmarking |
US9098364B2 (en) | 2013-07-09 | 2015-08-04 | Oracle International Corporation | Migration services for systems |
US11157664B2 (en) | 2013-07-09 | 2021-10-26 | Oracle International Corporation | Database modeling and analysis |
US9747311B2 (en) | 2013-07-09 | 2017-08-29 | Oracle International Corporation | Solution to generate a scriptset for an automated database migration |
US9805070B2 (en) | 2013-07-09 | 2017-10-31 | Oracle International Corporation | Dynamic migration script management |
JP5934160B2 (en) * | 2013-09-04 | 2016-06-15 | 株式会社Ｎｔｔドコモ | Debugging device, debugging method, and debugging program |
US9274894B1 (en) | 2013-12-09 | 2016-03-01 | Twitter, Inc. | System and method for providing a watchdog timer to enable collection of crash data |
CN104794046B (en) * | 2014-01-21 | 2018-12-18 | 腾讯科技（深圳）有限公司 | The method and system of symbolic program running log |
US9836343B2 (en) | 2014-03-17 | 2017-12-05 | Microsoft Technology Licensing, Llc | Framework for user-mode crash reporting |
US9565057B1 (en) | 2014-06-06 | 2017-02-07 | Twitter, Inc. | System and method for utilizing a font data container to store a device identifier |
US9767004B2 (en) * | 2014-06-16 | 2017-09-19 | Symantec Corporation | Dynamic call tracking method based on CPU interrupt instructions to improve disassembly quality of indirect calls |
US10114627B2 (en) * | 2014-09-17 | 2018-10-30 | Salesforce.Com, Inc. | Direct build assistance |
US10432497B2 (en) | 2014-09-19 | 2019-10-01 | Splunk Inc. | Injecting custom classes in application code to facilitate network traffic monitoring |
US10097430B2 (en) | 2015-02-27 | 2018-10-09 | Walmart Apollo, Llc | Tracking and analyzing mobile application user interactions |
WO2017072664A1 (en) * | 2015-10-27 | 2017-05-04 | Marvell World Trade Ltd. | System and method for establishing a trusted diagnosis/debugging agent over a closed commodity device |
CN106681900A (en) * | 2015-11-10 | 2017-05-17 | 北京搜狗科技发展有限公司 | Collapse processing method for target software and device |
CN105959372B (en) * | 2016-05-06 | 2019-05-14 | 华南理工大学 | A kind of Internet user's data analysis method based on mobile application |
US20170351560A1 (en) * | 2016-06-02 | 2017-12-07 | Microsoft Technology Licensing, Llc | Software failure impact and selection system |
US11036696B2 (en) | 2016-06-07 | 2021-06-15 | Oracle International Corporation | Resource allocation for database provisioning |
CN106126361B (en) * | 2016-06-12 | 2018-11-13 | 福建天晴数码有限公司 | Defend the method and system of the websites Spring MVC collapse |
CN106095607B (en) * | 2016-06-12 | 2018-11-13 | 福建天晴数码有限公司 | Defend the method and system of the websites asp.net collapse |
US10725797B2 (en) * | 2016-09-05 | 2020-07-28 | Microsoft Technology Licensing, Llc | Service-driven dynamic user interface technology |
US10169200B2 (en) | 2016-10-28 | 2019-01-01 | International Business Machines Corporation | Code component debugging in an application program |
US10025694B1 (en) * | 2016-12-22 | 2018-07-17 | SafeDK Mobile Ltd. | Monitoring activity of software development kits using stack trace analysis |
CN109284102B (en) * | 2017-07-21 | 2022-05-27 | 阿里巴巴集团控股有限公司 | Information acquisition method and device |
US10503631B1 (en) * | 2017-07-31 | 2019-12-10 | Cisco Technology, Inc. | Runtime intelligence within an integrated development environment |
CN107861865B (en) * | 2017-08-29 | 2020-11-17 | 平安普惠企业管理有限公司 | SDK positioning method, device and computer readable storage medium |
US20190121717A1 (en) * | 2017-10-20 | 2019-04-25 | Microsoft Technology Licensing, Llc | Dynamic, crowd-sourced error and crash resolution for computer programs |
CN108415828B (en) * | 2018-01-23 | 2021-09-24 | 广州视源电子科技股份有限公司 | Program testing method and device, readable storage medium and computer equipment |
US11256671B2 (en) | 2019-09-13 | 2022-02-22 | Oracle International Corporation | Integrated transition control center |
CN111258803B (en) * | 2020-02-12 | 2023-03-28 | 北京字节跳动网络技术有限公司 | Collapse positioning method and device and electronic equipment |
JP2021182185A (en) * | 2020-05-18 | 2021-11-25 | 株式会社日立製作所 | Storage device, dump data management method, and dump data management program |
CN113835912B (en) * | 2020-06-24 | 2024-02-09 | 北京新氧科技有限公司 | Crash information processing method and device for application program |
CN112306467A (en) * | 2020-11-10 | 2021-02-02 | 深圳市奋达智能技术有限公司 | SDK implementation method and device of wearable device |
CN114840400A (en) * | 2022-04-14 | 2022-08-02 | 北京字节跳动网络技术有限公司 | Abnormal component identification method, device, equipment, storage medium and program product |
Family Cites Families (74)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
FR2068147A5 (en) | 1969-11-28 | 1971-08-20 | Aquitaine Petrole | |
EP0417916B1 (en) * | 1989-09-13 | 1998-12-16 | Digital Equipment Corporation | Procedure state descriptor system for digital data processors |
US6009274A (en) | 1996-12-13 | 1999-12-28 | 3Com Corporation | Method and apparatus for automatically updating software components on end systems over a network |
US6237137B1 (en) | 1997-10-15 | 2001-05-22 | Dell Usa, L.P. | Method and system for preventing unauthorized access to a computer program |
US6247149B1 (en) | 1997-10-28 | 2001-06-12 | Novell, Inc. | Distributed diagnostic logging system |
US6282711B1 (en) | 1999-08-10 | 2001-08-28 | Hewlett-Packard Company | Method for more efficiently installing software components from a remote server source |
US6813707B1 (en) | 2001-03-23 | 2004-11-02 | Cisco Technology Inc. | Enhancing instruction execution using built-in macros |
DE10119754B4 (en) | 2001-04-23 | 2007-11-29 | Infineon Technologies Ag | Method and device for storing data packets |
WO2002095585A1 (en) * | 2001-05-24 | 2002-11-28 | Techtracker, Inc. | Program execution stack signatures |
US20030120707A1 (en) | 2001-12-21 | 2003-06-26 | Sander Bogdan | Systems and methods for exporting functionality of a modularized system |
US7143395B2 (en) | 2002-02-14 | 2006-11-28 | Hewlett-Packard Development Company, L.P. | Verifying a program version |
US7197671B2 (en) | 2002-06-07 | 2007-03-27 | Arm Limited | Generation of trace elements within a data processing apparatus |
US7516446B2 (en) | 2002-06-25 | 2009-04-07 | International Business Machines Corporation | Method and apparatus for efficient and precise datarace detection for multithreaded object-oriented programs |
EP1408410A1 (en) | 2002-09-30 | 2004-04-14 | Sap Ag | Remote debugging of computer programs |
ATE504446T1 (en) | 2002-12-02 | 2011-04-15 | Silverbrook Res Pty Ltd | DEAD NOZZLE COMPENSATION |
US20040157593A1 (en) | 2003-02-07 | 2004-08-12 | Sun Microsystems, Inc | Modularization for J2ME platform implementation |
US7814463B2 (en) | 2003-05-16 | 2010-10-12 | Oracle International Corporation | User interface debugger for software applications |
US7149929B2 (en) * | 2003-08-25 | 2006-12-12 | Hewlett-Packard Development Company, L.P. | Method of and apparatus for cross-platform core dumping during dynamic binary translation |
US20050097133A1 (en) | 2003-10-31 | 2005-05-05 | Quoc Pham | Producing software distribution kit (SDK) volumes |
US7191364B2 (en) * | 2003-11-14 | 2007-03-13 | Microsoft Corporation | Automatic root cause analysis and diagnostics engine |
GB0327571D0 (en) * | 2003-11-27 | 2003-12-31 | Ibm | A memory dump of a computer system |
US7180531B2 (en) | 2004-02-27 | 2007-02-20 | Microsoft Corporation | Method and apparatus for enabling application program compatibility with display devices having improved pixel density |
US7484220B2 (en) | 2004-05-26 | 2009-01-27 | Qualcomm Incorporated | Method, software and apparatus for using application state history information when re-launching applications |
US20060168587A1 (en) | 2005-01-24 | 2006-07-27 | Shahzad Aslam-Mir | Interoperable communications apparatus and method |
US20060174161A1 (en) | 2005-02-01 | 2006-08-03 | Credence Systems Corporation | Viewer for test apparatus hardware |
WO2006110991A1 (en) | 2005-04-18 | 2006-10-26 | Research In Motion Limited | Method and system for controlling software version updates |
US7447942B2 (en) | 2005-07-19 | 2008-11-04 | Microsoft Corporation | Fast data breakpoint emulation |
US20070118530A1 (en) | 2005-11-18 | 2007-05-24 | Microsoft Corporation | Scheduling of software updates |
US20070294710A1 (en) | 2006-06-19 | 2007-12-20 | Alps Automotive Inc. | Simple bluetooth software development kit |
US7613949B1 (en) * | 2006-06-30 | 2009-11-03 | Boone Lewis A | Fault isolation system and method |
US8219649B2 (en) | 2006-07-12 | 2012-07-10 | Ca, Inc. | Automated deployment of change and configuration management software tools |
US20080141221A1 (en) | 2006-12-08 | 2008-06-12 | Microsoft Corporation | Using recorder technology to find defects in software applications |
US20090013309A1 (en) | 2006-12-29 | 2009-01-08 | Mark Shavlik | Generation of Custom Software Applications |
CA2578466A1 (en) * | 2007-01-12 | 2008-07-12 | Truecontext Corporation | Method and system for customizing a mobile application using a web-based interface |
US8533678B2 (en) | 2007-07-13 | 2013-09-10 | Digi International Inc. | Embedded device program debug control |
US7925604B2 (en) | 2007-10-25 | 2011-04-12 | International Business Machines Corporation | Adaptive greedy method for ordering intersecting of a group of lists into a left-deep AND-tree |
US8230113B2 (en) | 2007-12-29 | 2012-07-24 | Amx Llc | System, method, and computer-readable medium for development and deployment of self-describing controlled device modules in a control system |
US8364296B2 (en) | 2008-01-02 | 2013-01-29 | International Business Machines Corporation | Method and system for synchronizing playing of an ordered list of auditory content on multiple playback devices |
US8621601B2 (en) | 2008-05-21 | 2013-12-31 | Sandisk Technologies Inc. | Systems for authentication for access to software development kit for a peripheral device |
US8352445B2 (en) | 2008-05-23 | 2013-01-08 | Microsoft Corporation | Development environment integration with version history tools |
US8539478B2 (en) | 2008-06-20 | 2013-09-17 | International Business Machines Corporation | Dynamic web installer |
US8533844B2 (en) * | 2008-10-21 | 2013-09-10 | Lookout, Inc. | System and method for security data collection and analysis |
US8769482B2 (en) | 2008-12-16 | 2014-07-01 | International Business Machines Corporation | Method and system for building an application |
US7989918B2 (en) | 2009-01-26 | 2011-08-02 | International Business Machines Corporation | Implementing tamper evident and resistant detection through modulation of capacitance |
US8060857B2 (en) | 2009-01-31 | 2011-11-15 | Ted J. Biggerstaff | Automated partitioning of a computation for parallel or other high capability architecture |
US20100287525A1 (en) | 2009-05-07 | 2010-11-11 | Microsoft Corporation | Extension through visual reflection |
GB0911099D0 (en) | 2009-06-26 | 2009-08-12 | Codeplay Software Ltd | Processing method |
US8972954B2 (en) | 2009-07-13 | 2015-03-03 | Adobe Systems Incorporated | Debugging method using program inspectors to debug programs developed using frameworks and libraries |
US8943478B2 (en) | 2009-07-14 | 2015-01-27 | International Business Machines Corporation | Fault detection and localization in dynamic software applications |
CA2698066A1 (en) | 2009-07-31 | 2011-01-31 | Nitobi Software Inc. | System and method for remotely compiling multi-platform native applications for mobile devices |
WO2011082380A1 (en) | 2009-12-31 | 2011-07-07 | Fiberlink Communications Corporation | Consolidated security application dashboard |
US8312324B2 (en) * | 2010-01-28 | 2012-11-13 | Xerox Corporation | Remote diagnostic system and method based on device data classification |
US20120042310A1 (en) | 2010-02-14 | 2012-02-16 | Nokia Corporation | Method, apparatus and computer program product for platform independent framework |
US8245082B2 (en) * | 2010-02-25 | 2012-08-14 | Red Hat, Inc. | Application reporting library |
US20110225074A1 (en) | 2010-03-12 | 2011-09-15 | Microsoft Corporation | System and method for providing information as a service via web services |
US8631390B2 (en) * | 2010-04-02 | 2014-01-14 | Apple Inc. | Archiving a build product |
WO2011146750A2 (en) | 2010-05-19 | 2011-11-24 | Google Inc. | Bug clearing house |
US8516446B2 (en) | 2010-05-21 | 2013-08-20 | Apple Inc. | Automated qualification of a binary application program |
US20110296009A1 (en) | 2010-05-27 | 2011-12-01 | Victor Baranov | System and method for wavelets-based adaptive mobile advertising fraud detection |
US8930895B2 (en) | 2010-06-07 | 2015-01-06 | Maxwell O. Drukman | Automatically displaying a related file in an editor |
US8683462B2 (en) | 2010-10-22 | 2014-03-25 | Adobe Systems Incorporated | Handling calls to native code in a managed code environment |
US8694988B2 (en) | 2010-10-22 | 2014-04-08 | Adobe Systems Incorporated | Runtime extensions |
US8898629B2 (en) | 2011-04-06 | 2014-11-25 | Media Direct, Inc. | Systems and methods for a mobile application development and deployment platform |
US8433687B1 (en) | 2011-04-07 | 2013-04-30 | Google Inc. | Off-line indexing for client-based software development tools |
US8763080B2 (en) * | 2011-06-07 | 2014-06-24 | Blackberry Limited | Method and devices for managing permission requests to allow access to a computing resource |
US9396290B2 (en) * | 2011-06-09 | 2016-07-19 | Cloudian Holdings, Inc. | Hybrid data management system and method for managing large, varying datasets |
US9383973B2 (en) | 2011-06-29 | 2016-07-05 | Microsoft Technology Licensing, Llc | Code suggestions |
US8990771B2 (en) | 2011-08-19 | 2015-03-24 | Red Hat, Inc. | Building and distributing software packages |
US9037642B2 (en) | 2011-08-29 | 2015-05-19 | Fiberlink Communications Corporation | Platform for deployment and distribution of modules to endpoints |
US8788886B2 (en) * | 2011-08-31 | 2014-07-22 | Apple Inc. | Verification of SoC scan dump and memory dump operations |
US8510523B2 (en) * | 2011-09-12 | 2013-08-13 | Microsoft Corporation | Memory dump with expanded data and user privacy protection |
US8732530B2 (en) * | 2011-09-30 | 2014-05-20 | Yokogawa Electric Corporation | System and method for self-diagnosis and error reporting |
US20130132933A1 (en) | 2011-11-17 | 2013-05-23 | Microsoft Corporation | Automated compliance testing during application development |
CN103491111B (en) | 2012-06-08 | 2016-12-14 | 阿里巴巴集团控股有限公司 | Wireless application issue, implementation method and device |
-
2011
- 2011-12-12 US US13/323,166 patent/US9262250B2/en active Active
-
2012
- 2012-03-21 US US13/426,493 patent/US8863086B2/en active Active
- 2012-12-12 EP EP12809467.9A patent/EP2791800B1/en active Active
- 2012-12-12 WO PCT/US2012/069074 patent/WO2013090320A1/en active Application Filing
- 2012-12-12 EP EP22198584.9A patent/EP4134824A1/en active Pending
-
2014
- 2014-09-03 US US14/476,103 patent/US9606904B1/en active Active
-
2017
- 2017-03-21 US US15/465,295 patent/US11016878B2/en active Active
-
2021
- 2021-04-30 US US17/245,493 patent/US11960388B2/en active Active
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220405191A1 (en) * | 2021-06-18 | 2022-12-22 | Agora Lab, Inc. | Software development kit with independent automatic crash detection |
US11586528B2 (en) * | 2021-06-18 | 2023-02-21 | Agora Lab, Inc. | Software development kit with independent automatic crash detection |
Also Published As
Publication number | Publication date |
---|---|
EP4134824A1 (en) | 2023-02-15 |
EP2791800A1 (en) | 2014-10-22 |
US9262250B2 (en) | 2016-02-16 |
US8863086B2 (en) | 2014-10-14 |
US20130152050A1 (en) | 2013-06-13 |
EP2791800B1 (en) | 2022-11-09 |
US9606904B1 (en) | 2017-03-28 |
WO2013090320A1 (en) | 2013-06-20 |
US11960388B2 (en) | 2024-04-16 |
US11016878B2 (en) | 2021-05-25 |
US20210248062A1 (en) | 2021-08-12 |
US20130152056A1 (en) | 2013-06-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11960388B2 (en) | System and method for data collection and analysis of information relating to mobile applications | |
US11296923B2 (en) | Network fault originator identification for virtual network infrastructure | |
CN110221872B (en) | Page jump method and device, electronic equipment and storage medium | |
US10180893B2 (en) | System and method for providing additional functionality to developer side application in an integrated development environment | |
US20170255546A1 (en) | System and method for automatic software development kit configuration and distribution | |
US10445214B2 (en) | System and method for tracking callback functions for error identification | |
US11567757B2 (en) | Container based application reification | |
US10817267B2 (en) | State machine representation of a development environment deployment process | |
KR20160061306A (en) | Method and apparatus for firmware virtualization | |
US10120707B2 (en) | Deployment of development environments | |
JP6015750B2 (en) | Log collection server, log collection system, and log collection method | |
US9417947B1 (en) | System and method for robust storage of error event information | |
US10810065B1 (en) | Application programming interface (API) platform | |
CN116820958A (en) | Agent-based multi-environment automation test method and system | |
CN114528222A (en) | Packaging test device and method and computer readable storage medium | |
CN115291945A (en) | Terminal function compatibility control method, device, equipment and medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: CRASHLYTICS, INC., MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHANG, WAYNE;SEIBERT, JEFFREY H., JR.;SIGNING DATES FROM 20120320 TO 20120321;REEL/FRAME:041685/0953Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CRASHLYTICS, INC.;TWITTER, INC.;REEL/FRAME:041686/0968Effective date: 20170125 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |