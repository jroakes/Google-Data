US9317391B2 - Logging graphical user interface events - Google Patents
Logging graphical user interface events Download PDFInfo
- Publication number
- US9317391B2 US9317391B2 US13/648,214 US201213648214A US9317391B2 US 9317391 B2 US9317391 B2 US 9317391B2 US 201213648214 A US201213648214 A US 201213648214A US 9317391 B2 US9317391 B2 US 9317391B2
- Authority
- US
- United States
- Prior art keywords
- user interface
- log
- server
- event
- client
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3438—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment monitoring of user actions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/3003—Monitoring arrangements specially adapted to the computing system or computing system component being monitored
- G06F11/302—Monitoring arrangements specially adapted to the computing system or computing system component being monitored where the computing system component is a software system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3466—Performance evaluation by tracing or monitoring
- G06F11/3476—Data logging
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3466—Performance evaluation by tracing or monitoring
- G06F11/3495—Performance evaluation by tracing or monitoring for systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
-
- G06F17/30861—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/86—Event-based monitoring
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/875—Monitoring of systems including the internet
Definitions
- GUI graphical user interface
- the disclosed subject matter relates to a computer-implemented method for logging client-side events of a graphical user interface for a client-server application.
- the method includes displaying on a client device, a graphical user interface for a client-server application.
- the graphical user interface includes a plurality of user interface elements. Each of the plurality of user interface elements has an identifier. The identifiers are communicated to the client device by a server.
- the method further includes detecting a first user interface event including a user interaction with a first user interface element of the plurality of user interface elements.
- the method further includes generating a first log entry in a log stored on the client device. The first log entry includes the first user interface event and the respective identifier associated with the first user interface element.
- the method further includes updating at least one of the plurality of user interface elements in the displayed graphical user interface in response to the first user interface event.
- a second user interface event includes the updating of the at least one of the plurality of user interface elements in the displayed graphical user interface.
- the method further includes generating a second log entry in the log stored on the client device.
- the second log entry includes the second user interface event and the respective identifier for each of the at least one of the plurality of user interface elements updated in the second user interface event.
- the method further includes sending the log stored on the client device to the server.
- the disclosed subject matter further relates to a computer-implemented method for logging graphical user interface events.
- the method includes receiving from a server, an identifier for a user interface element of a graphical user interface.
- the method further includes detecting a user interface event associated with the user interface element.
- the user interface event associated with the user interface element can be an operation performed on the user interface element or an effect caused by the operation performed on the user interface element.
- the method further includes entering into a log, the identifier for the user interface element and the user interface event associated with the user interface element.
- the method further includes sending the log to the server.
- the disclosed subject matter further relates to a computer-implemented method for logging graphical user interface events.
- the method includes generating an identifier for a user interface element of a graphical user interface.
- the method further includes providing the identifier to a logging component on a client device.
- the logging component is configured to detect and enter into a log, a user interface event associated with the user interface.
- the method further includes receiving the log from the logging component.
- the method further includes replaying, based on the received log, the user interface event associated with the user interface element.
- FIG. 1 illustrates an example of an architecture for logging graphical user interface events.
- FIG. 2 illustrates a block diagram using an example of a client device and a server in the architecture of FIG. 1 according to certain aspects of the disclosure.
- FIG. 3 illustrates an example of a process for logging graphical user interface events.
- FIG. 4A is an illustration of a client device and a server associated with the example of the process of FIG. 3 .
- FIG. 4B is an illustration of a graphical user interface of a client-server application.
- FIG. 4C is illustration providing additional details of one of the user interface elements of the graphical user interface of FIG. 4B .
- FIG. 5 conceptually illustrates an electronic system with which some aspects of the subject technology can be implemented.
- client-server implementation Some of the software instructions can be executed on a server, where the application may be hosted, and some of the software instructions can be executed on a client device accessing the application.
- the execution of some of the software instructions on the client computing device can occur without a data request being sent to the server.
- a logging method implemented solely on the server (“server-only implementation”) can not detect and log all the events that occur on the client device. Consequently, the log(s) generated by the server-only implementation can not be used to replay all the events that occurred on the client device.
- the subject technology relates to logging graphical user interface events that occur on a client device accessing a client-server application.
- client-server application is a web-based application, which may also be referred to as a web-application.
- the subject technology involves displaying a graphical user interface for the client-server application, on a client device.
- the graphical user interface includes user interface elements. Each of the user interface elements have identifier.
- the identifiers associated with the user interface elements are generated at a server.
- the identifiers are then communicated to the client device by the server.
- the client device accessing the client-server application includes a logging component that can receive the identifiers communicated by the server.
- the logging component detects user interface events associated with the user interface elements of the graphical user interface.
- a user interface event can include a user interaction with a user interface element.
- that same user interface element, or a different user interface element may be updated, based on the underlying software instructions of the graphical user interface. For example, a user interface element may be updated to be displayed at a different location within the graphical user interface, may no longer be visible within the graphical user interface, and/or may be made visible within the graphical user interface. That is, an update can include a change in appearance, visibility, size, and/or location of one or more user interface elements.
- the updating of the same user interface element, or the different user interface element, is also a user interface event which is detected by the logging component.
- Either, or both user interface events may occur in a manner that they are not directly communicated to the server. That is, either one or both the user interface events may be purely client-side user interface events.
- the logging component For each detected user interface event, the logging component generates a log entry, which is stored in a log on the client device. Each log entry includes the user interface event, and the respective identifier. Thus, in a case where a user interaction with a first user interface element causes a change in a second user interface element, two separate user interface events are generated by the logging component, and stored in the log.
- the logging component can be configured to detect and/or generate into the log, specific types of user interface events at specific frequencies.
- the log is sent from the client device to the server.
- the log may be stored at the server.
- the log may be used to replay user interface events recorded therein.
- an administrator may use the log to replay one or more of the user interface events. Replaying the user interface events can provide insight into a user's interaction with the graphical user interface of the client-server application.
- the log may be used to determine how often a particular user interface element (e.g., a menu item) is used.
- FIG. 1 illustrates an example of an architecture for logging graphical user interface events.
- the architecture 100 includes client devices 110 and servers 170 connected over a network 140 .
- the client devices 110 can be, for example, mobile computers, tablet computers, mobile devices (e.g., a smartphone or PDA), desktop computers, set top boxes (e.g., for a television), video game consoles, or any other devices having appropriate processing capabilities, communications capabilities, and memory.
- Each client device 110 is configured to include an input device for accepting user input, and an output device to display information to the user.
- the client devices 110 can be connected to the network 140 .
- the network 140 can include any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like. Further, the network 140 can include, but is not limited to, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, and the like.
- the servers 170 can be for example, stand-alone servers, shared servers, dedicated servers, cluster/grid servers (e.g., a server farm), or cloud servers. Each of the servers 170 may include one or more processors, communications modules, and memory. The servers 170 may be configured to distribute workload (e.g., for loadbalancing) across multiple servers.
- FIG. 2 is a block diagram 200 illustrating an example of a client device 110 and a server 170 in the architecture 100 of FIG. 1 according to certain aspects of the disclosure.
- the client device 110 includes an input device 202 , an output device 204 , a processor 220 , a communications module 222 , and memory 240 .
- the input device 202 can be a touchscreen, a mouse, a keyboard, or any other device to enable a user to supply input 206 to the client device 110 .
- the output device 204 can be a display screen. Input 206 received via the input device 202 can be processed locally on the client device 110 and/or the server 170 .
- the client device 110 is connected to the network 140 via a communications module 222 .
- the communications module 222 is configured to interface with the network 140 to send and receive information, such as data, requests, responses, and commands to other devices on the network 140 .
- the communications module 222 can be, for example, a modem or Ethernet card.
- the memory includes a graphical user interface 250 for a client-server application.
- the graphical user interface 250 can include several user interface elements.
- the graphical user interface 250 of the client-server application may be downloaded from the server 170 and/or installed locally at the client device 110 .
- the memory 240 includes a logging component 242 .
- the logging component can be implemented using a variety of approaches.
- the logging component 242 can be implemented as a standalone executable, a plug-in (e.g., for a web browser), or a background service.
- the logging component 242 can be implemented as software instructions (e.g., a JavaScript binary) which are executed by the application (e.g., a web browser) accessing the client-server application (e.g., a web-application).
- the software instructions may be embedded within the client-server application, and/or loaded simultaneously with the client server application.
- the logging component 242 detects user interface events that occur within the graphical user interface 250 . Upon detecting user interface events, the logging component 242 enters them into a log 244 .
- a user interface event can be an operation performed by a user on a user interface element of the graphical user interface 250 , or an effect caused by that operation to the user interface element or to some other user interface element within the graphical user interface 250 .
- An operation performed by the user on the user interface element may be referred to as an explicit action.
- Different types of input devices 202 can be used to perform different types of explicit actions.
- a computer mouse can be used to perform explicit actions such as click, double-click, scroll, hover, drag and/or drop operations.
- a keyboard can be used to perform explicit actions such as providing keystrokes corresponding to alphabet, numeral, arrow, function, and command keys.
- An implicit action is one which is not expressed directly by the user.
- the user may click on a first user interface element thereby selecting it. Subsequently, the user may click on a second user interface element thereby deselecting the first user interface element. That is, by explicitly selecting the second user interface element, the user implicitly deselects the first user interface element.
- Display changes can be the result of explicit and/or implicit actions.
- the logging component 242 may provide an application programming interface (“API”) to send and receive information. As an example of receiving information, the logging component 242 can receive parameterization commands via the API.
- API application programming interface
- a parameterization command can be used to set a level of detail for the user interface events which are entered into the log 244 .
- parameterization commands can be used to define the type of user interface events to be entered into the log 244 .
- the logging component 242 can be configured to detect and enter into the log, a subset of user interface events. Detecting and/or entering a subset of events into the log 244 may be referred to as sampling. The level of detail of sampling is referred to as a sample rate.
- the logging component 242 may sample user interface events at a default sample rate.
- the default sample rate may be altered via a parameterization command.
- the sample rate (e.g., the default sample rate) may be altered in response to other conditions.
- the sample rate may be altered (e.g., lowered or increased) in response to network conditions (e.g., connection speed) and the total wished bandwidth.
- the logging component 242 may be instructed to detect and/or enter into the log 244 , events that occur anywhere in the entire graphical user interface 250 .
- the instruction may be directed to only a specific user interface element and/or surface area of the graphical user interface 250 .
- the instruction may be directed to a particular type of event, or a subset thereof. For example, the instruction may be directed to 100% of user interface events of a first type, 50% of user interface events of a second type, 5% of events of a third type, and so on.
- the logging component 242 can also enter into the log 244 , temporal, session-related, and/or environmental information.
- the logging component 242 can include in the log 244 a timestamp for user interface events. The timestamp corresponds to the time, at which the user interface event occurs on the client device 110 .
- the logging component can include in the log 244 , an identifier associated with a particular session.
- the identifier associated with the session may be generated by the server 170 at the outset of a user's interaction (session) with the graphical user interface 250 .
- a session identifier may be associated with one or more user interface events.
- the logging component 242 may include information related to the software and/or the hardware of the client device 110 .
- the logging component 242 can include a listing of the hardware specifications, including but not limited to the resolution of the display 204 , the speed of the processor 220 , and the size of the memory 240 .
- the information related to the software can include a listing of software, including the firmware, installed on the client device 110 .
- the logging component 242 can increment counter values in response to occurrences of user interface events. For example, the logging component 242 may increment a counter value corresponding to an event entry number which is assigned to each user interface event entered into the log. Based on the event entry number, the entries in the log 244 may be arranged in a sequential order.
- the logging component 242 can also increment a counter value based on interaction with a particular user interface element. For example, upon detecting an operation performed on a particular user interface element, the logging component 242 can increment a counter value associated with how often a user interacts with that user interface element.
- the logging component can also increment counter values for particular types of events. For example, upon detecting a click on a particular user interface element, the logging component 242 can increment the counter value associated with the total number of click operations performed in a session.
- the log 244 can be sent to the server 170 .
- the log 244 can be sent in response to a request received from the server 170 , in response to a condition at the client device 110 , or at specified intervals.
- the conditions and/or intervals may be configured at the client device 110 by the user.
- the conditions and/or intervals may be configured based on instructions received from the server 170 .
- the conditions and/or intervals may be configured based on conditions (e.g., network conditions) detected by the logging component 242 .
- the log 244 can be sent to the server 170 based on the user's activity. For example, if the user ceases interaction with the client device 110 , starts or exits an application, or initiates a shutdown, the log 244 can be sent to the server 170 .
- Intervals can be based on elapsed time, the number of user interface events, or the file size of the log 244 .
- the log 244 may be sent every hour, every 100 events, or when the file size reaches 1 megabyte.
- the intervals may be adjusted based on conditions (e.g., network conditions) detected by the logging component 242 .
- the logging component 242 may process the log 244 before sending it to the server 170 .
- the logging component 242 may compress and/or encrypt the log 244 before sending it to the server 170 .
- the logging component 242 may truncate the log 244 and/or divide it into smaller files.
- the processor 220 of the client device 110 is configured to execute instructions, such as instructions physically coded into the processor 220 , instructions read from the memory 240 , or a combination of both. As an example, based on the instructions read from the memory 240 , the processor can be configured to execute a method for logging graphical user interface events.
- the processor 220 is configured to receive from a server 170 , an identifier for a user interface element of a graphical user interface (e.g., 250 ).
- the processor 220 is further configured to detect a plurality of user interface events associated with the user interface element.
- the processor 220 is further configured to enter into a log (e.g., 244 ), for each of the detected user interface events, the identifier for the user interface element and the respective user interface event associated with the user interface element.
- the processor is further configured to send the log (e.g., 244 ) to the server (e.g., 170 ).
- the server 170 includes a memory 280 , a processor 260 , and a communications module 262 .
- the memory includes software instructions that can be read by the processor 260 to implement a logging module 282 .
- the logging module 282 generates identifiers for user interface elements of the graphical user interface 250 .
- the logging module 282 provides the identifiers to a logging component 242 on a client device 110 .
- the logging module 242 on the client 110 is configured to detect user interface events associated with the user interface elements.
- the logging component 110 on the client is further configured to enter into the log 244 , the user interface events and the corresponding identifiers for the user interface elements.
- the logging module 282 receives the log 244 from the logging component 242 . Based on the received log 244 , the user interface events associated with the user interface element can be replayed.
- the server 170 is connected to the network 140 via a communications module 262 .
- the communications module 262 is configured to interface with the network 140 to send and receive information, such as data, requests, responses, and commands to other devices on the network 140 .
- the communications module 262 can be, for example, a modem or Ethernet card.
- the processor 260 of the server 170 is configured to execute instructions, such as instructions physically coded into the processor 260 , instructions read from the memory 280 , or a combination of both. As an example, based on the instructions read from the memory 280 , the processor 260 can be configured to execute a method for logging graphical user interface events.
- the processor 260 is configured to generate an identifier for a user interface element of a graphical user interface (e.g., 250 ).
- the processor 260 is further configured to provide the identifier to a logging component (e.g., 242 ) on a client device (e.g., 110 ).
- the logging component e.g., 242
- the logging component is configured to detect on the client (e.g., 110 ) a user interface event associated with the user interface element, and enter into a log (e.g., 244 ), the user interface event associated with the user interface element.
- the processor 260 is configured to receive the log (e.g., 244 ) from the logging component (e.g., 242 ) on the client device (e.g., 110 ). The processor 260 is further configured to replay, based on the received log (e.g., 244 ), the user interface event associated with the user interface element.
- FIG. 3 illustrates an example of a process 300 for logging graphical user interface events.
- an identifier for a user interface element of a graphical user interface 250 is generated.
- the identifier is provided by the server 170 and received by the client device 110 .
- a user interface event associated with the user interface element is detected.
- the user interface event associated with the user interface element can be an operation performed on the user interface element (e.g., an explicit action) or an effect caused by the operation performed on the user interface element (e.g., an implicit action).
- the identifier for the user interface element, and the user interface event are entered into the log 244 .
- the log 244 is sent by the client device 110 and received by the server 170 .
- the log 244 is used to replay the user interface event.
- a desktop computer will be used as the client device 110 , and a user interface of a web-based mapping application will be used as the graphical user interface 250 .
- the desktop computer 110 has installed on it as a web browser plug-in, the logging component 242 .
- the process begins when a user uses a web browser on the desktop computer 110 to access the mapping application to perform a location-based search for pizza.
- the user interface 250 of the web-based mapping application is displayed on the display 204 of the desktop computer 110 .
- the user interface 250 is illustrated in FIG. 4B .
- the server 170 generates identifiers corresponding to the various user interface elements of the mapping application 250 .
- the server generates an identifier 410 for a navigation menu, an identifier 420 for a search box, an identifier 440 for an area for providing search results, and an identifier 460 for an area for displaying text, images, and other visual data related to the search results.
- the server also generates identifiers for the various sub-elements of the user interface elements.
- three search results are displayed as sub-elements of the user interface element 440 .
- the server 170 generates identifiers 440 a , 440 b , and 440 c , for these sub-elements.
- the server 170 generates identifiers 460 a , 460 b , and 460 c for sub-elements of user interface element 460 .
- Sub-elements may further contain other sub-elements.
- the server 170 generates identifiers for these sub-elements as well.
- interface sub-element 440 a is displayed in greater detail in FIG. 4C .
- the server generates identifiers 442 , 444 , 446 , 448 , 450 , 452 , 454 , 456 , and 458 for the sub-elements of sub-element 440 a.
- user interface element 460 displays text, images, and other visual data related to the results of the search query.
- User interface element 460 displays information in layers.
- the layers correspond to search results, geographical information, and other visual representations of information.
- Geographical information can include map tiles, satellite images, relief maps, two-dimensional maps, or three dimensional maps.
- Other layers can visually represent information related to traffic and weather.
- One of the layers in user interface element 460 includes markers corresponding to the search results displayed in user interface element 440 .
- interface sub-elements 460 a , 460 b , and 460 c are geographical markers that correspond to the locations of the three pizza restaurants listed in sub-elements 440 a , 440 b , and 440 c respectively.
- the identifiers are provided by the server 170 and received by the desktop computer 110 .
- the logging component 242 detects user interface events.
- the user is interested in learning more about Joe's Pizza which is provided in interface element 440 a .
- the user uses the mouse pointer 480 to hover over user interface sub-element 440 a .
- the logging component 242 detects the movement of the mouse 202 , and the hover event associated with user interface element 440 a .
- the details of user interface element 440 a are provided in more detail in FIG. 4C .
- user interface sub-element 440 a further includes a sub-element 442 which is a pointer to the geographical location of Joe's Pizza, a sub-element 444 displaying the name Joe's Pizza, a sub-element 446 providing a dropdown menu, a sub-element 448 providing an image of Joe's Pizza, a sub-element 450 providing an address for Joe's Pizza, a sub-element 452 providing a phone number for Joe's Pizza, sub-element 454 providing a restaurant rating for Joe's Pizza, a sub-element 456 providing excerpts of reviews, and sub-element 458 which provides a link to additional reviews of Joe's Pizza.
- a sub-element 442 which is a pointer to the geographical location of Joe's Pizza
- a sub-element 444 displaying the name Joe's Pizza
- a sub-element 446 providing a dropdown menu
- a sub-element 448 providing an image of Joe's Pizza
- the user reads the excerpts of reviews provided in sub-element 456 .
- the user clicks on the pointer 442 to the geographical location of Joe's Pizza.
- the logging component 242 detects the user's explicit action of clicking on sub-element 442 .
- the mapping application highlights the corresponding geographical marker 460 a.
- the highlighting of the corresponding geographical marker 460 a is an example of an implicit action. This implicit action is also detected by the logging component 242 .
- the user clicks and drags to the left, the map area displayed in user interface sub-element 460 .
- the user's explicit actions include the click and drag operations associated with user interface element 460 .
- the user performs these operations to view pizza restaurants that may be located to the right of user interface sub-element 460 b , which is the geographical marker for Pizza Shack.
- sub-element 460 c which is the geographical marker for Pizzeria Italia, exits the visible area of user interface element 460 . That is, sub-element 460 c is no longer displayed. As sub-element 460 c disappears, the corresponding search result provided in sub-element 440 c also disappears.
- step 340 the logging component 242 enters into the log 244 , the identifiers for user interface elements, and the user interface events associated with the user interface elements.
- the logging component 242 can use identifiers to selectively describe the user interface elements, sub-elements, and layers of the graphical user interface 250 at various levels of abstraction, or detail, regardless of whether they are visible to the user. Consequently, the log 244 can be created at various levels of abstraction, or detail.
- the logging component can also include an identifier for the type of application. In this example, the letter M is used as an identifier for the mapping application.
- the initial state of the user interface of the mapping application can be described as M ⁇ 400 , 420 , 440 , 460 ⁇ .
- Interface elements 440 and 460 may be similarly described as 440 ⁇ 440 a , 440 b , 440 c ⁇ and 460 ⁇ 460 a , 460 b , 460 c ⁇ .
- the user interface 250 of the mapping application may be described as M ⁇ 400 , 420 , 440 ⁇ 440 a , 440 b , 440 c ⁇ , 460 ⁇ 460 a , 460 b , 460 c ⁇ .
- the user interface 250 may be described as M ⁇ 400 , 420 , 440 ⁇ 440 a ⁇ 442 , 444 , 446 , 448 , 450 , 452 , 454 , 456 , 458 ⁇ , 440 b , 440 c ⁇ , 460 ⁇ 460 a , 460 b , 460 c ⁇ .
- the logging component 242 enters the detected hover event into the log 244 .
- An event associated with a user interface element may be expressed using a path to that user interface element.
- the path to a user interface element is expressed hierarchically.
- the path to user interface sub-element 440 a may be expressed as M/ 440 / 440 a or M/ 440 [ 1 ].
- the hover event may be entered into the log 244 as “hover M/ 440 / 440 a ” or “hover M/ 440 [ 1 ].”
- An event associated with a user interface element may be expressed using a description of the user interface at a particular abstraction level.
- the hover event may be entered into the log 244 as M ⁇ 400 , 420 , 440 ⁇ Hover 440 a , 440 b , 440 c ⁇ , 460 ⁇ 460 a , 460 b , 460 c ⁇ .
- the logging component 242 adds entries for the click and drag operations to the log 244 .
- the graphical marker 460 c for Pizzeria Italia sub-elements and the corresponding search result 440 c disappeared. These changes in visibility are also entered into the log 244 .
- the logging component 242 expresses changes in visibility using plus (“+”) and minus (“ ⁇ ”) symbols.
- the logging component 242 expresses an appearance using a plus (“+”) symbol and a disappearance using a minus (“ ⁇ ”) symbol.
- the disappearance of interface sub-elements 440 c and 460 c may be expressed in the log 244 as ⁇ 440 c and ⁇ 460 c.
- changes in visibility may also be expressed using paths or a description of the user interface at a particular abstraction level.
- the disappearance of interface sub-element 460 c can be expressed as ⁇ M/ 460 / 460 c , or ⁇ M/ 460 [ 3 ].
- the disappearance of interface sub-element 440 a can be expressed as ⁇ M/ 440 / 440 a , or ⁇ M/ 440 [ 3 ].
- Changes in visibility can be expressed using a description of the interface at a level of abstraction.
- the disappearance of interface sub-elements 440 c and 460 c can be expressed as M ⁇ 400 , 420 , 440 ⁇ 440 a , 440 b , ⁇ 440 c ⁇ , 460 ⁇ 460 a , 460 b , ⁇ 460 c ⁇ .
- step 350 A and 350 B the log 244 is sent by the client device 110 and received by the server 170 . While in this example, the log 244 is sent at the end of the user's session, the log 244 may be sent at any time during the session as well.
- step 360 the log 244 is used to replay the user interface event. That is, using the log 244 , the hover, click and drag operations, and the corresponding changes in visibility are replayed.
- FIG. 5 conceptually illustrates an electronic system with which some aspects of the subject technology can be implemented.
- FIG. 5 illustrates an example of a computer system 500 with which the client device 110 or the server 170 of FIG. 2 can be implemented.
- the computer system 500 may be implemented using hardware or a combination of software and hardware, either in a dedicated server, or integrated into another entity, or distributed across multiple entities.
- Computer system 500 (e.g., client device 110 , server 170 ) includes a bus 508 or other communication mechanism for communicating information, and a processor 502 (e.g., processor 220 , processor 260 ) coupled with bus 508 for processing information.
- processor 502 e.g., processor 220 , processor 260
- the computer system 500 may be implemented with one or more processors 502 .
- Processor 502 may be a general-purpose microprocessor, a microcontroller, a Digital Signal Processor (DSP), an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a Programmable Logic Device (PLD), a controller, a state machine, gated logic, discrete hardware components, or any other suitable entity that can perform calculations or other manipulations of information.
- DSP Digital Signal Processor
- ASIC Application Specific Integrated Circuit
- FPGA Field Programmable Gate Array
- PLD Programmable Logic Device
- Computer system 500 can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them stored in an included memory 504 (e.g., memory 240 , memory 280 ), such as a Random Access Memory (RAM), a flash memory, a Read Only Memory (ROM), a Programmable Read-Only Memory (PROM), an Erasable PROM (EPROM), registers, a hard disk, a removable disk, a CD-ROM, a DVD, or any other suitable storage device, coupled to bus 508 for storing information and instructions to be executed by processor 502 .
- the processor 502 and the memory 504 can be supplemented by, or incorporated in, special purpose logic circuitry.
- the instructions may be stored in the memory 504 and implemented in one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, the computer system 500 , and according to any method well known to those of skill in the art, including, but not limited to, computer languages such as data-oriented languages (e.g., SQL, dBase), system languages (e.g., C, Objective-C, C++, Assembly), architectural languages (e.g., Java, .NET), and application languages (e.g., PHP, Ruby, Perl, Python).
- data-oriented languages e.g., SQL, dBase
- system languages e.g., C, Objective-C, C++, Assembly
- architectural languages e.g., Java, .NET
- application languages e.g., PHP, Ruby, Perl, Python.
- Instructions may also be implemented in computer languages such as array languages, aspect-oriented languages, assembly languages, authoring languages, command line interface languages, compiled languages, concurrent languages, curly-bracket languages, dataflow languages, data-structured languages, declarative languages, esoteric languages, extension languages, fourth-generation languages, functional languages, interactive mode languages, interpreted languages, iterative languages, list-based languages, little languages, logic-based languages, machine languages, macro languages, metaprogramming languages, multiparadigm languages, numerical analysis, non-English-based languages, object-oriented class-based languages, object-oriented prototype-based languages, off-side rule languages, procedural languages, reflective languages, rule-based languages, scripting languages, stack-based languages, synchronous languages, syntax handling languages, visual languages, wirth languages, embeddable languages, and xml-based languages.
- Memory 504 may also be used for storing temporary variable or other intermediate information during execution of instructions to be executed by processor 502 .
- a computer program as discussed herein does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, subprograms, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- Computer system 500 further includes a data storage device 506 such as a magnetic disk or optical disk, coupled to bus 508 for storing information and instructions.
- Computer system 500 may be coupled via input/output module 510 to various devices.
- the input/output module 510 can be any input/output module. Examples of input/output modules 510 include data ports such as USB ports.
- the input/output module 510 is configured to connect to a communications module 512 .
- communications modules 512 e.g., communications module 222 , communications module 262
- networking interface cards such as Ethernet cards and modems.
- the input/output module 510 is configured to connect to a plurality of devices, such as an input device 514 (e.g., input device 202 ) and/or an output device 516 (e.g., output device 204 ).
- input devices 514 include a keyboard and a pointing device, e.g., a mouse or a trackball, by which a user can provide input to the computer system 500 .
- Other kinds of input devices 514 can be used to provide for interaction with a user as well, such as a tactile input device, visual input device, audio input device, or brain-computer interface device.
- feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, tactile, or brain wave input.
- output devices 516 include display devices, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user.
- the client device 110 can be implemented using a computer system 500 in response to processor 502 executing one or more sequences of one or more instructions contained in memory 504 .
- Such instructions may be read into memory 504 from another machine-readable medium, such as data storage device 506 .
- Execution of the sequences of instructions contained in main memory 504 causes processor 502 to perform the process steps described herein.
- processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in memory 504 .
- hard-wired circuitry may be used in place of or in combination with software instructions to implement various aspects of the present disclosure.
- aspects of the present disclosure are not limited to any specific combination of hardware circuitry and software.
- a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- the communication network can include, for example, any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like.
- PAN personal area network
- LAN local area network
- CAN campus area network
- MAN metropolitan area network
- WAN wide area network
- BBN broadband network
- the communication network can include, but is not limited to, for example, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, or the like.
- the communications modules can be, for example, modems or Ethernet cards.
- Computing system 500 can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- Computer system 500 can be, for example, and without limitation, a desktop computer, laptop computer, or tablet computer.
- Computer system 500 can also be embedded in another device, for example, and without limitation, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, a video game console, and/or a television set top box.
- PDA personal digital assistant
- GPS Global Positioning System
- machine-readable storage medium or “computer readable medium” as used herein refers to any medium or media that participates in providing instructions to processor 502 for execution. Such a medium may take many forms, including, but not limited to, non-volatile media, volatile media, and transmission media.
- Non-volatile media include, for example, optical or magnetic disks, such as data storage device 506 .
- Volatile media include dynamic memory, such as memory 504 .
- Transmission media include coaxial cables, copper wire, and fiber optics, including the wires that include bus 508 .
- machine-readable media include, for example, floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH EPROM, any other memory chip or cartridge, or any other medium from which a computer can read.
- the machine-readable storage medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
Abstract
Description
Claims (6)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/648,214 US9317391B2 (en) | 2012-10-09 | 2012-10-09 | Logging graphical user interface events |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/648,214 US9317391B2 (en) | 2012-10-09 | 2012-10-09 | Logging graphical user interface events |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150169187A1 US20150169187A1 (en) | 2015-06-18 |
US9317391B2 true US9317391B2 (en) | 2016-04-19 |
Family
ID=53368450
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/648,214 Active 2034-05-24 US9317391B2 (en) | 2012-10-09 | 2012-10-09 | Logging graphical user interface events |
Country Status (1)
Country | Link |
---|---|
US (1) | US9317391B2 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150234930A1 (en) * | 2014-02-19 | 2015-08-20 | Google Inc. | Methods and systems for providing functional extensions with a landing page of a creative |
US10176153B1 (en) * | 2014-09-25 | 2019-01-08 | Amazon Technologies, Inc. | Generating custom markup content to deter robots |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6018619A (en) | 1996-05-24 | 2000-01-25 | Microsoft Corporation | Method, system and apparatus for client-side usage tracking of information server systems |
US20050044508A1 (en) * | 2003-08-21 | 2005-02-24 | International Business Machines Corporation | Method, system and program product for customizing a user interface |
US20060274763A1 (en) | 2005-06-03 | 2006-12-07 | Error Christopher R | Variable sampling rates for website visitation analysis |
US7467356B2 (en) * | 2003-07-25 | 2008-12-16 | Three-B International Limited | Graphical user interface for 3d virtual display browser using virtual display windows |
US20100095218A1 (en) * | 2008-10-15 | 2010-04-15 | At&T Intellectual Property I, L.P. | User interface monitoring in a multimedia content distribution network |
US20100268759A1 (en) | 2009-04-21 | 2010-10-21 | International Business Machines Corporation | Automated server controlled client-side logging |
US20140096081A1 (en) * | 2007-06-20 | 2014-04-03 | Boopsie, Inc. | Dynamic Menus for Multi-Prefix Interactive Mobile Searches |
US20140108208A1 (en) * | 2012-03-26 | 2014-04-17 | Tintoria Piana U.S., Inc. | Personalized virtual shopping assistant |
US8984441B2 (en) * | 2007-12-06 | 2015-03-17 | Sony Corporation | Dynamic update of a user interface based on collected user interactions |
-
2012
- 2012-10-09 US US13/648,214 patent/US9317391B2/en active Active
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6018619A (en) | 1996-05-24 | 2000-01-25 | Microsoft Corporation | Method, system and apparatus for client-side usage tracking of information server systems |
US7467356B2 (en) * | 2003-07-25 | 2008-12-16 | Three-B International Limited | Graphical user interface for 3d virtual display browser using virtual display windows |
US20050044508A1 (en) * | 2003-08-21 | 2005-02-24 | International Business Machines Corporation | Method, system and program product for customizing a user interface |
US20060274763A1 (en) | 2005-06-03 | 2006-12-07 | Error Christopher R | Variable sampling rates for website visitation analysis |
US20140096081A1 (en) * | 2007-06-20 | 2014-04-03 | Boopsie, Inc. | Dynamic Menus for Multi-Prefix Interactive Mobile Searches |
US8984441B2 (en) * | 2007-12-06 | 2015-03-17 | Sony Corporation | Dynamic update of a user interface based on collected user interactions |
US20100095218A1 (en) * | 2008-10-15 | 2010-04-15 | At&T Intellectual Property I, L.P. | User interface monitoring in a multimedia content distribution network |
US20100268759A1 (en) | 2009-04-21 | 2010-10-21 | International Business Machines Corporation | Automated server controlled client-side logging |
US20140108208A1 (en) * | 2012-03-26 | 2014-04-17 | Tintoria Piana U.S., Inc. | Personalized virtual shopping assistant |
Also Published As
Publication number | Publication date |
---|---|
US20150169187A1 (en) | 2015-06-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8640037B2 (en) | Graphical overlay related to data mining and analytics | |
US8006187B1 (en) | Checkpoint sequence fallout metrics management during path analysis | |
US8726189B2 (en) | Multiple tab stack user interface | |
US20190213765A1 (en) | Systems and methods for rendering a visualization using event data | |
US20140164893A1 (en) | Assisted portal navigation and crowd-based feedback | |
CA2791743C (en) | Private web browsing using encrytion | |
US9275398B1 (en) | Obtaining metrics for client-side display of content | |
JP6838560B2 (en) | Information analysis system, information analysis method, and program | |
US20190190927A1 (en) | Analysis of complex relationships among information technology security-relevant entities using a network graph | |
US20190034432A1 (en) | Method and system for determining rank positions of non-native items by a ranking system | |
US8621381B1 (en) | System and method for adaptive use of keyboard or search term based on recent use | |
US9043464B1 (en) | Automatically grouping resources accessed by a user | |
US20150205767A1 (en) | Link appearance formatting based on target content | |
US9152948B2 (en) | Method and system for providing a structured topic drift for a displayed set of user comments on an article | |
US9953093B1 (en) | Mapping system for a browser history stack and a browser page state | |
US9317391B2 (en) | Logging graphical user interface events | |
WO2022072201A1 (en) | Assisted detection of application performance issues using serverless compute templates | |
US9104573B1 (en) | Providing relevant diagnostic information using ontology rules | |
US9984125B1 (en) | Apparatus and method for acquiring, managing, sharing, monitoring, analyzing and publishing web-based time series data | |
US10275525B2 (en) | Method and system for mining trends around trending terms | |
WO2018175014A1 (en) | System and method for managing and displaying graphical elements | |
US10440144B2 (en) | Near real time notifications distribution platform | |
US9286263B1 (en) | System and method for providing information regarding posts on social networking sites | |
WO2016027173A1 (en) | Method of and a system for monitoring web site consistency | |
US10628109B2 (en) | Dynamically adapting panels of a user interface |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CALVELO AROS, DANIEL;OEHLER, CHRISTOPH URS;REEL/FRAME:029105/0191Effective date: 20120919 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |