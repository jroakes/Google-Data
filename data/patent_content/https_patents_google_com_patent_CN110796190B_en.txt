CN110796190B - Exponential modeling with deep learning features - Google Patents
Exponential modeling with deep learning features Download PDFInfo
- Publication number
- CN110796190B CN110796190B CN201911036166.8A CN201911036166A CN110796190B CN 110796190 B CN110796190 B CN 110796190B CN 201911036166 A CN201911036166 A CN 201911036166A CN 110796190 B CN110796190 B CN 110796190B
- Authority
- CN
- China
- Prior art keywords
- model
- discrete
- classification
- computer system
- embedding
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013135 deep learning Methods 0.000 title description 10
- 238000010801 machine learning Methods 0.000 claims abstract description 52
- 238000013507 mapping Methods 0.000 claims abstract description 37
- 230000006870 function Effects 0.000 claims abstract description 5
- 238000000034 method Methods 0.000 claims description 30
- 238000013145 classification model Methods 0.000 claims description 21
- 238000012549 training Methods 0.000 claims description 19
- 230000001902 propagating effect Effects 0.000 claims 1
- 230000006835 compression Effects 0.000 abstract description 14
- 238000007906 compression Methods 0.000 abstract description 14
- 239000010410 layer Substances 0.000 description 59
- 238000013528 artificial neural network Methods 0.000 description 44
- 230000015654 memory Effects 0.000 description 17
- 230000008901 benefit Effects 0.000 description 16
- 241000282326 Felis catus Species 0.000 description 7
- 238000010586 diagram Methods 0.000 description 7
- 238000003058 natural language processing Methods 0.000 description 7
- 230000000306 recurrent effect Effects 0.000 description 6
- 238000013527 convolutional neural network Methods 0.000 description 5
- 230000008569 process Effects 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 241000282994 Cervidae Species 0.000 description 4
- 238000004891 communication Methods 0.000 description 4
- 238000005094 computer simulation Methods 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000000513 principal component analysis Methods 0.000 description 3
- 241000282412 Homo Species 0.000 description 2
- 210000004027 cell Anatomy 0.000 description 2
- 238000000354 decomposition reaction Methods 0.000 description 2
- 238000013136 deep learning model Methods 0.000 description 2
- 238000004519 manufacturing process Methods 0.000 description 2
- 239000011159 matrix material Substances 0.000 description 2
- 210000002569 neuron Anatomy 0.000 description 2
- 238000013139 quantization Methods 0.000 description 2
- 238000007792 addition Methods 0.000 description 1
- 230000004075 alteration Effects 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000000605 extraction Methods 0.000 description 1
- 238000007477 logistic regression Methods 0.000 description 1
- 230000007787 long-term memory Effects 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000002356 single layer Substances 0.000 description 1
- 238000012706 support-vector machine Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 238000011144 upstream manufacturing Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2415—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on parametric or probabilistic models, e.g. based on likelihood ratio or false acceptance rate versus a false rejection rate
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/243—Classification techniques relating to the number of classes
- G06F18/2431—Multiple classes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/048—Activation functions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
Abstract
Aspects of the present disclosure enable artificially specified relationships to facilitate implementing a mapping that enables compression of an output structure of a machine learning model. An exponential model, such as a maximum entropy model, may utilize machine learning embedding and mapping to produce classification outputs. In this way, feature discovery functions of a machine learning model (e.g., a deep network) may be synergistically combined with relationships developed based on understanding of the structural properties of a human to-be-solved problem, enabling compression of the model output structure without significant loss of accuracy. These compression models improve the applicability of "on-device" or other resource-constrained scenarios.
Description
Priority claim
The present application claims priority from U.S. patent application Ser. No. 62/752,128, entitled "Exponential Modeling with Deep Learning Features," filed on 10/29 at 2018, the entire disclosure of which is incorporated herein by reference.
Technical Field
The present disclosure relates generally to machine learning. More particularly, the present disclosure relates to machine learning models, including exponential models (e.g., maximum entropy models) that utilize a mapping between output categories and embedded parameters to provide compression gains.
Background
Various forms of machine learning models have drastically changed many areas of machine intelligence. As an early example, at some point in the past, the maximum entropy model provided the most advanced performance in natural language processing and other technical fields. The maximum entropy model follows the following principle: the model should provide as few bias estimates as possible from the given information; that is, whether or not to put the possibility to the greatest extent for the lost information. Recently, however, artificial neural networks ("neural networks") have provided the most advanced solutions to many problem areas, including natural language processing. One of the main reasons for substituting maximum entropy modeling as a learning algorithm is that the features to be used by the maximum entropy model are manual, rather than automatic learning.
Neural networks are a class of machine learning models that are particularly powerful, accurate, or efficient in performing a variety of tasks. The neural network may comprise a set of connected nodes, also referred to as (artificial) neurons or perceptrons. The neural network may be organized into one or more layers. Nodes of the neural network may be connected to edges, and weights may be associated with each edge.
Neural networks comprising multiple layers may be referred to as "deep" networks. The depth network may include an input layer, an output layer, and one or more hidden layers located between the input layer and the output layer. Nodes of the neural network may be fully connected or not fully connected. Example neural networks include feed forward neural networks, recurrent neural networks, convolutional neural networks, other forms of artificial neural networks, or combinations thereof.
Today, numerous applications use various machine learning models, such as neural networks. However, their accuracy stems in part from the large number of parameters that can lead to high computational and memory overhead. As one example, a typical neural network may include a large number of weights (e.g., tens to tens of millions to billions), all of which may have unique values. Storing and running a neural network typically requires storing each of these values and performing mathematical operations using each of these values, which requires a significant amount of memory and processor usage.
This problem is exacerbated in cases where a machine learning model is used as a classifier to classify the input into a large number of different possible categories. In particular, a machine learning model used as a classifier will typically have an output layer (e.g., softmax layer) or other output structure that provides a corresponding output value for each available class, which can be a very large number for a particular task. As one example, a neural network used to perform a "next word prediction" or other natural language processing task will typically have an output layer that includes a number of nodes equal to the number of words included in the vocabulary associated with the classifier, which in some cases may include approximately one million words. Current applications on cell phones reduce the vocabulary to tens of thousands of words, as larger vocabularies are not currently available on cell phones. Models residing on servers in the cloud may have millions of words in the vocabulary of the application. Thus, in these cases, an oversized proportion of the network parameters may be located in the output layer of the network and related structures.
In addition, as networks and hardware become better and faster, many computations move to an "on-device" paradigm in which machine learning models are stored and implemented locally on embedded devices, user devices, edge devices, or other forms of "resource constrained" devices, providing faster response times and better security and privacy guarantees. In particular, it would be beneficial if these networks (and thus the accuracy benefits thereof) could be stored and run on mobile devices and other resource-constrained devices, such as smart devices or embedded devices. However, their use in resource constrained environments/devices is somewhat limited due to the large amount of computing resources (such as processing resources and memory resources) required to store and operate the network.
Thus, various techniques have been proposed to "compress" the machine learning model to reduce its computation and memory overhead, with some success. However, so far, effective solutions to achieve compression gain have not been determined for the output layer of models output to a very large number of different possible classes.
Disclosure of Invention
Aspects and advantages of embodiments of the disclosure will be set forth in part in the description which follows, or may be learned from the description, or may be learned by practice of the embodiments.
One example aspect of the present disclosure is directed to a computer system, comprising: one or more processors; and one or more non-transitory computer-readable media collectively storing a machine-learned classification model configured to generate a classification output based on the input data set, the classification output comprising a plurality of classification scores for a plurality of discrete categories, respectively. The classification score for each discrete category indicates a likelihood that the input data corresponds to the discrete category. The machine learning classification model includes an embedded model and an exponential model. The embedding model is configured to receive an input data set and to generate an embedding based on the input data set. The embedding comprises a plurality of parameter values for a plurality of parameters comprised in a final layer of the embedding model, respectively. The number of parameter values is less than the number of discrete categories. The exponential model is configured to receive the embedding and apply the mapping to generate a classification output. The map describes a plurality of relationships between a plurality of parameters included in a final layer of the embedded model and a plurality of discrete categories.
In some implementations, the exponential model includes a maximum entropy model.
In some implementations, the plurality of relationships specify, for each of a plurality of discrete categories, one or more of a plurality of parameters to which such discrete category is mapped.
In some implementations, for each of a plurality of discrete categories, the exponential model determines its respective classification score based at least in part on increasing to a power of a first sum of parameter values to which such discrete category is mapped by mapping divided by a sum of all possible output values.
In some implementations, at least one discrete category is mapped to two or more parameters included in a final layer of the embedded model.
In some implementations, at least one parameter included in the final layer of the embedded model is mapped to two or more discrete categories.
In some implementations, at least one of the plurality of relationships described by the mapping is user-specific.
In some implementations, at least one of the plurality of relationships described by the mapping is assigned deterministically.
In some implementations, at least one of the plurality of relationships is generated according to a heuristic.
In some implementations, at least one of the plurality of relationships is machine-learned.
In some implementations, the plurality of discrete categories includes a plurality of discrete words included in a vocabulary.
In some implementations, at least one of the plurality of relationships described by the mapping is based on the presence of one or more specific characters in each discrete word.
In some implementations, at least one of the plurality of relationships described by the mapping is based on the presence of a particular string of two or more characters in each discrete word.
In some implementations, the input data set includes one or more words surrounding the word to be classified.
In some implementations, the plurality of discrete categories includes a plurality of discrete items available for selection by the recommender system.
In some implementations, the plurality of discrete categories includes a plurality of objects.
In some implementations, at least one of the plurality of relationships described by the mapping is based on a shared characteristic between a subset of the plurality of discrete categories.
In some implementations, the embedded model includes a neural network.
In some implementations, the embedded model includes a recurrent neural network.
In some implementations, the embedded model includes a convolutional neural network.
In some implementations, the embedded model includes one or more additional layers that are structurally located before the final layer of the embedded model such that the final layer of the embedded model does not directly receive the input data set.
In some implementations, the final layer of the embedded model directly receives the input data set such that the final layer is the only layer of the embedded model.
In some implementations, the plurality of parameters of the last layer of the embedded model are user-specific hyper-parameters.
In some implementations, the classification score for each discrete category indicates a probability for that category given the input data set.
In some implementations, a machine learning classification model has been trained on a labeled training data set using supervised learning techniques.
In some implementations, the supervised learning technique includes counter-propagating gradients of the loss function through a plurality of parameters according to the mapping.
Other aspects of the disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the principles of interest.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification with reference to the accompanying drawings, in which:
FIG. 1 depicts a block diagram of an example machine learning classification model, according to an example embodiment of the present disclosure.
Fig. 2A depicts a block diagram of an example computing system, according to an example embodiment of the present disclosure.
Fig. 2B depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
Fig. 2C depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
Repeated reference characters in the drawings are intended to identify identical features in various implementations.
Detailed Description
SUMMARY
In general, the present disclosure is directed to machine learning models that take advantage of the benefits provided by a combination of deep learning and exponential modeling structures (e.g., maximum entropy models). More specifically, as described above, one of the main reasons that maximum entropy modeling has been replaced as a learning algorithm is that the features to be used by the maximum entropy model are manual and, unlike neural networks, are not automatically learned. However, the present disclosure demonstrates that exponential modeling techniques such as maximum entropy modeling can be combined with deep learning modeling to achieve a unique combination of benefits.
In particular, for many tasks, the deep learning model typically ends with a softmax layer that is used for classification of probabilities or condition estimation. However, according to an aspect of the present disclosure, if instead the output of the deep learning model, e.g., an embedded or logic vector that exists just prior to the softmax layer, is considered available for feature modeling, the benefits of both modeling forms may be realized. In particular, features may be automatically learned by a deep learning network while compression gains may be obtained in the output layer by establishing relationships with respect to the structure of the problem to be solved based at least in part on human knowledge. This provides the flexibility to use an exponential model in conjunction with a deep-learned feature discovery mechanism. The combination of the two modeling techniques is very useful for more complex modeling of the output compared to deep networks ending with a standard softmax layer.
According to an aspect of the disclosure, the machine learning model may include both an embedded model (e.g., a neural network) and an exponential model (e.g., a maximum entropy model). The embedding model may generate an embedding based on the input data set. In some implementations, the embedded model may include or resemble a portion of a neural network that is located before the exponential softmax layer. As such, in some implementations, embedding may include data output by a last layer of the embedding model, which may include or be similar to data output by a last layer of the deep neural network before the feature exponentiation (e.g., a last layer before the softmax layer).
The exponential model may utilize and apply a mapping describing the relationship between the output categories and the embedding parameters generated by the embedding model to generate classification outputs based on the embedding (e.g., based on the sharing of maximum entropy features). For example, the classification output may classify input data for a plurality of discrete categories.
Importantly, the number of parameters included in the embedding may be significantly less than the number of possible output categories (e.g., about-1 k feature output versus about-1M softmax output category). Thus, a mapping from embedded to output categories may be referred to as a "few to many" mapping. In this way, significant compression gains can be achieved because there is no need for the model to have an output layer with nodes (e.g., -1M nodes) or a set of weights for each different output class to compute the output from the upstream representation. However, mapping and exponential functions may be applied to the embedding to produce classification outputs for each discrete class directly from the embedding. Thus, example implementations of the present disclosure may be viewed as changing a conventional deep neural network that requires a separate unique feature for each discrete output to a case where each discrete output is described as a unique combination of features from the deep neural network output.
According to another aspect of the disclosure, in some implementations, at least some of the relationships defined between the embedded parameters and the discrete categories may be based on or generated from human knowledge or an understanding of the problem to be solved. Thus, some or all of the relationships included in the map may be user defined or established. In particular, example relationships that may be defined may generally take advantage of human understanding of shared or distinguishing characteristics or attributes of one or more categories, thereby enabling them to be compared or distinguished from other categories. This creation of manually generated features is why deep learning modeling replaces maximum entropy modeling. However, the present disclosure exploits a way in which these manually generated features can create structures for category output, rather than just long sequences of arbitrary symbols.
As one example, for natural language processing tasks, the set of output categories may correspond to a set of words in a vocabulary (e.g., "the," "cat," "bat," "car," "moose," etc.). Many different relationships can be defined that make use of human understanding of language constructs. As one example, all words (i.e., categories) that include the character "a" may be mapped to the embedded first parameter. Thus, the words "cat", "bat" and "car" will be mapped to share the value of the first parameter, while the words "they" and "moose" will not be mapped to use the value of the first parameter. As another example, all words having a string of two characters "at" may be mapped to an embedded second, different parameter. Thus, both the words "cat" and "bat" will be mapped to values sharing the second parameter, while the words "they", "car" and "moose" will not be mapped to values sharing the second parameter. Thus, in this example, the word "cat" is no longer the result of a single "cat" parameter or neuron, but rather the sum of various features, such as: "c" eigenvalue, "a" eigenvalue, "t" eigenvalue, "ca" eigenvalue, "at" eigenvalue, and "cat" eigenvalue.
In other non-language examples, various other characteristics of the possible output categories may be mapped to one or more parameters. As one example, in a book recommendation system, a first subset of books sharing authors may be mapped to values sharing a first parameter, while a second subset of books sharing a year of publication may be mapped to a second parameter, and so on. As yet another example, in an object recognition system, a first subset of objects having eyes may be mapped to a first parameter and a second subset of objects having a color green may be mapped to a second parameter. Thus, various relationships may be defined that take advantage of and benefit from human understanding of the structure associated with the problem to be solved. Current deep neural networks do not use any structure such as that described above. It is this ability to impose human or machine created structures on deep neural networks, allowing the resulting system to significantly reduce the number of parameters. Description of the book by features such as author, year of publication, book length, novice type, poetry, news, etc., allows description of objects that were previously just numbers in a very compact representation: such as "Book ISBN #0553278398". In contrast to its ISBN number, the author describing this book is "Isaac asinov" and is book_type: the "science fiction" gives people the possibility of more intuitively perceiving the book.
Further, while portions of the present disclosure focus on manually specified relationships, the systems and methods of the present disclosure are not limited to manually specified relationships. For example, in some implementations, relationships between categories and embedded parameters may be generated by machine learning or by algorithms in addition to or instead of manually specified relationships. As another example, in some implementations, relationships between categories and embedded parameters may be randomly assigned in addition to or instead of manually specified relationships. As another example, the features may be generated by a computer. For example, a person searching for the word "camera" has also searched for the word "tripod". Thus, the two words may be assigned features that they should share.
In addition, while the initial definition of the relationships included in the map may be guided based on or by an understanding of the shared or differentiated nature of the structure and/or output class of the problem to be solved by humans, the ability of the embedded model to learn its internal parameters and representations after defining such relationships means that the embedded model is not constrained specifically to meet the exact human intuition behind the relationships. Instead, during the learning process, the embedded model has flexibility to
Changing the basic meaning and/or re-weighting the importance of the various relationships.
As an example, for the example relationship described above, where a subset of books of the shared author is mapped to the first parameter, while the human intuition driving such a relationship is based on the knowledge of the shared author, this information is not passed to enforce constraints on the embedded model. Instead, the embedding model only learns to classify the input into one of the books included in the relevant group, and the embedding model should increase the parameter values assigned to the corresponding embedding parameters. Thus, the embedded model is free to learn its own relationships and features within the artificially specified structure. This enables one to contribute domain-specific structural knowledge while still enabling features to be automatically learned by the embedded model.
In other words, the constraint of the embedded model is that the sum of the artificially defined features should be large when the target object is a real tag. The artificially defined relationships between objects means that a particular set of combinations of features should be large. In the above example, the science fiction that Isaac asinov authored is the sum of two features: the name of the author and the type of book. The constraints of the embedded model are: when the shopper is interested in this book, the sum of the two features reaches a larger value. The computer is free to assign any value it likes to the author feature or book type feature. The only limitation is that the sum of the two is large.
Accordingly, aspects of the present disclosure enable artificially specified relationships to facilitate mapping, enabling compression of output structures of machine learning models. An exponential model, such as a maximum entropy model, may combine the machine learning embedded feature extraction capability with the features of the artificial design describing the class to be modeled to produce a classification output. In this way, the feature discovery capabilities of a machine learning model (e.g., a depth network) can be synergistically combined with relationships developed based on understanding of the structural properties of a human to-be-solved problem, thereby enabling compression of the model output structure without significant loss of accuracy. These compression models improve the applicability of "on-device" or other resource-constrained scenarios.
Aspects of the present disclosure also take advantage of the fact that: both the softmax layer and the maximum entropy formula of the deep neural network are exponential models. This recognition enables the systems and methods of the present disclosure to incorporate aspects of the maximum entropy modeling technique into the deep learning technique, desirably with the best attributes of both techniques. The structure imposed on the deep learning softmax aims at increasing the model compression so that the softmax probability can be accurately modeled with a very small number of parameters, resulting in model compression. This description of softmax pertains to the modeled logits section. Based on this relationship with softmax, the same process can be replicated for the embedded matrix decomposition process.
In view of the above, one technical effect and benefit of the present disclosure is to provide a machine learning model that more efficiently uses computing resources (such as processor usage, memory usage, network bandwidth, etc.), thereby enabling the model to be applied to resource constrained scenarios. In other words, the systems and methods of the present disclosure enable computing resources (such as processor usage, memory usage, network bandwidth, etc.) to be saved, and further enable applications to be deployed on resource-constrained devices (such as smartphones, home appliances, embedded computers, etc.).
Referring now to the drawings, exemplary embodiments of the present disclosure will be discussed in further detail.
Example machine learning model Structure
As one example of the concepts described herein, fig. 1 provides an example of a machine learning model classification model 10 that utilizes the benefits provided by the combination of machine learning features and an exponential modeling structure in accordance with example aspects described herein.
In particular, the machine-learned classification model 10 may be configured to generate the classification output 24 based on a set of input data 20. The input data 20 may be any form of data, depending on the type of problem to be solved. By way of example, the input data 20 may be image data (e.g., for object recognition), text data (e.g., for next word prediction), audio data (e.g., for speech-to-text analysis), sensor data, and/or other forms of data.
The classification output 24 may provide a plurality of classification scores for a plurality of discrete categories (e.g., one million or more words in a vocabulary), respectively. For example, the classification score may be a corresponding conditional probability of a discrete class given the input data 20 as a previous observation. Thus, in some implementations, the classification output 24 does not specifically select a particular class, but simply provides a corresponding probability for each class. Various techniques may be performed to generate a classification from the provided probabilities (e.g., select a category with the highest probability, select the first 5 categories with the first 5 high probabilities, select any category with a probability greater than a threshold, etc.).
According to an aspect of the disclosure, the machine learning model classification model 10 may include an embedded model 12 and an exponential model 14 located after the embedded model 12. The embedding model 12 may be configured to receive a set of input data 20 and generate an embedding 22 from the set of input data 20.
In some implementations, the embedded model 12 may be a multi-layer structure, such as a deep neural network (e.g., a deep recurrent neural network, a convolutional neural network, etc.). Thus, by way of example, the embedded model 12 shown in FIG. 1 includes N layers (first layer 16 and Nth layer 18 are shown). However, the embedded model 12 may include any number of layers, and in some examples, only a single layer. Furthermore, in some implementations, the embedded model 12 may be other forms of machine learning models besides neural networks, including, for example, support vector machines, linear models, logistic regression models, and/or other forms of models.
In some implementations, the embedding 22 may include a plurality of parameter values for a plurality of parameters included in the final layer 18 of the embedded model 12, respectively. As one example, the embedded model 12 may be similar to a standard neural network, except that the embedded model does not include a softmax layer. Thus, in some implementations, the embeddings 22 provided by the embedment model 12 may be referred to as or similar to the logits layer of a neural network. However, in some implementations, the mapping may also include or refer to parameter values from layers other than the final layer 18 of the embedded model 12. Thus, parameter values from any portion of the embedded model 12 may be used.
In some implementations, the parameter values of the embeddings 22 may be numeric in nature, and the parameters of the embeddings 22 may exist within embedding dimensions that are generally unintelligible to humans. Furthermore, in some implementations, the embedding model 12 may be trained (e.g., via a triplet training scheme) to produce the embeddings 22, wherein a distance (e.g., euclidean distance) between two embeddings indicates a similarity between two sets of input data respectively associated with the embeddings. In other implementations, the embedding 22 is not useful for determining similarity between sets of input data.
The embedding 22 may include any number of parameters. As two examples, in some implementations, the embedding 22 may include 96 parameters or 2048 parameters. In some implementations, the plurality of parameters included in the embedding 22 may be user-specified hyper-parameters. For example, the user may directly specify a number of parameters included in the embedment 22, may specify a ratio between the number of parameters included in the embedment 22 and the number of discrete categories associated with the classification output 24, or may specify a compression gain to be achieved (e.g., 3x, 10x, 500x, etc.).
Typically, however, the number of parameters included in the embedding 22 is less than the number of discrete parameters (e.g., -1M versus-1B) required to calculate the classification output 24. In this way, significant compression gain can be achieved.
More specifically, the machine learning model classification model 10 may also include an exponential model 14 located after the embedded model 12. The index model 14 may be configured to receive the embeddings 22 and apply the mapping to generate a classification output 24 of the classification model 10.
Specifically, according to another aspect of the present disclosure, the mapping applied by the exponential model 14 may describe a plurality of relationships between the parameters included in the final layer 18 of the embedding model 12 (i.e., the parameters of the embedding 22) and a plurality of discrete categories. The plurality of relationships may specify, for each of a plurality of discrete categories, one or more of a plurality of parameters to which such discrete category maps. As noted above, typically, the number of parameters embedded 22 will be less than the number of discrete categories. Thus, at least one of the discrete categories will be mapped to two or more parameters included in the final layer 18 of the embedded model 12 and/or at least one parameter included in the final layer 18 of the embedded model 12 is mapped to two or more discrete categories.
According to another aspect, at least some relationships between the parameters of the final layer 18 and the discrete categories may be defined by a user, and in this manner, the exponential model may be similar to or operate in a manner in which parameter values output by the embedded model 12 are the largest entropy model of the features to be used as the largest entropy model. Thus, some or all of the relationships included in the map may be user defined or established. In particular, example relationships that may be defined may generally take advantage of human understanding of shared or distinguishing characteristics or attributes of one or more categories, thereby enabling them to be compared or distinguished from other categories.
As one example, for natural language processing tasks, the set of output categories may correspond to a set of words in a vocabulary (e.g., "the", "cat", "bat", "car", "moose", etc.). Many different relationships can be defined that take advantage of human understanding of language structures. Table 1 below provides examples of many different example relationships that may be defined in natural language processing tasks.
Characteristics of | Parameter # | |
Relation 1 | Comprises 'A' | 1 |
Relation 2 | Comprises 'B' | 2 |
Relation 3 | Comprises 'C' | 3 |
… | … | … |
Relation 27 | Comprising 'AA' | 27 |
Relationship 28 | Included'AB' | 28 |
Relationship 29 | Comprises 'AC' | 29 |
… | … | … |
TABLE 1
The example relationships included in table 1 are provided as examples only. Many other different relationships may be used. For example, other characteristics may be defined, such as string "ing" containing three characters, or another example characteristic may consider whether the input data "immediately follows" the word 'April'. Further, although a single parameter number is mapped in each relationship, in some implementations, two or more parameters may be mapped to characteristics in the relationship.
In other non-language examples, various other characteristics of the possible output categories may be mapped to one or more parameters. As one example, in a book recommendation system, a first subset of books by a shared author may be mapped to a first parameter, a second subset of books by a shared year of publication may be mapped to a second parameter, and so on. However, in some cases, the number of unique authors may require too many parameters. Thus, another mapping might partition the "author" feature into different feature sets: the first name of the author, the intermediate name of the author, and the last name of the author. This is the flexibility provided by using the maximum entropy model. For very rare authors 'last names, the author's last name may consist of the letter sequence in his last name. Very popular authors have the potential to be modeled by full names. Moderately popular authors may be modeled with their last and first names. Moreover, very strange authors may be modeled with characters in their names.
As yet another example, in an object recognition system, a first subset of objects having eyes may be mapped to a first parameter and a second subset of objects having a color green may be mapped to a second parameter. Thus, various relationships may be defined, taking advantage of and benefiting from human understanding of the structure associated with the problem to be solved.
For any set of discrete entities, any set of features that a human may use to describe the quality of those entities may be used as a structure to help a computer compress a representation. This may be color, shape, taste, smell, concept, manufacturing site, material constituting the product, etc. The user may define a set of features that are nearly unlimited to impose a structure on the modeling of discrete entities. If one considers a feature to be relevant (e.g., whether manufacturing in the united states may be relevant to whether to purchase a product), it may be useful to computer model the likelihood of the entity. Labels provided by professional artwork distributors (e.g., the product is "decorative art", "post-modern", etc.), and any other type of label, may be used to apply the structure that may be used to compress the computer model. The ability of people to define features that are so powerful for maximum entropy models can now be used to combine them with deep learning modeling using this technique.
Further, while portions of the present disclosure focus on manually specified relationships, the systems and methods of the present disclosure are not limited to manually specified relationships. For example, in some implementations, relationships between categories and embedded parameters may be generated by machine learning or algorithmically in addition to or instead of manually specified relationships. In one example, a clustering algorithm (e.g., overlapping clustering (overlapping cluster)) may be performed and the respective parameters may be assigned based on cluster members. For example, there are computer programs that attempt to learn synonyms. All words that the computer marks as synonyms may then share features in the modeling network. In another example, a pre-trained embedding model (e.g., an embedding pre-trained to produce distance between embeddings to represent similarity—one example might be a Word2vec model) can be used to assign a respective embedding to each discrete category. The discrete categories may then be clustered based on their embedding and based on their assigned parameter relationships. In another example, one or more parameters may be initially assigned to each discrete category, and these assignments may be considered as learnable parameters. Thus, the number and/or nature of the mappings may be rearranged and learned by a learning algorithm. In another example, a class quantizer may be generated using quantization techniques (e.g., product quantization), and the parameter mapping for each class may be based on the distance between a particular class and one or more class quantizers. In another example, principal Component Analysis (PCA) may be performed on discrete categories, and parameter mappings for each category may be assigned based on relationships between the categories within the PCA component space (clustered within the component space, and parameters assigned based on cluster members). There are many other computer modeling techniques such as singular value decomposition, non-negative matrix factorization, and all other techniques that may be used to define the computer features of the modeling technique.
As another example, in some implementations, relationships between categories and embedded parameters may be randomly assigned in addition to or alternatively to manually specified relationships. As one example, each discrete category may be randomly mapped to two different parameters. For example, the mapping may be pseudo-random such that more common/possible categories share parameters at a lower frequency; while less common/possible categories share parameters at higher frequencies.
Referring again to fig. 1, in some implementations, the exponent model may determine a respective classification score for each of the plurality of discrete categories based at least in part on a first exponent raised to a power of a first sum of parameter values to which such discrete categories are mapped by mapping divided by a second exponent raised to a power of a second sum of all parameter values.
To provide an example, refer again to table 1, which provides an example set of relationships that may be included in an example map. Table 2 provided below provides examples of applying the relationships in table 1 to specific example inputs.
Words and phrases | Mapping to parameters |
cab | 1,2,3,28,… |
ab | 1,2,28 |
TABLE 2
Thus, for example, referring to tables 1 and 2 together, the word "cab" maps to parameters 1, 2, 3, and 28 because it contains strings "a", "b", "c", and "ab". The word "ab" maps to parameters 1, 2 and 28, but not parameter 3, because it does not contain the string "3".
As described above, in some implementations, the exponential model may determine a respective classification score for each of the plurality of discrete categories based at least in part on the first exponent raised to a power of a first sum of parameter values to which such discrete categories are mapped by mapping divided by a sum of all possible output values. Thus, in some cases, for each discrete class, the exponential model may estimate the following expression:
where l is the total number of output categories c, c j Is the j-th discrete class, x i Is the value of the i-th parameter of the embedding, n is the total number of parameters included in the embedding, and k j Is category c j A set of parameters mapped to.
Thus, as an example, according to the examples of tables 1 and 2, the output score of the word "ab" may be determined according to the following expression:
classification model 10 may be any type of classification model for any purpose. As one example, classification model 10 may be a next word prediction model, and the plurality of discrete categories may correspond to a plurality of discrete words included in a vocabulary, respectively. As another example, classification model 10 may be a language translation model, and the plurality of discrete categories may correspond to a plurality of discrete words included in a vocabulary, respectively. In some of these examples, the input data 20 may include data describing one or more words that are near (e.g., in front of) the word to be classified/predicted.
As another example, the classification model 10 may be a recommendation model, and the plurality of discrete categories may correspond to a plurality of products or other items (e.g., movies, books, clothing items, etc.) that can be recommended to the user based on the input data 10. For example, the input data 20 may describe previous items that the user represented endorsed or interacted with by the user. As yet another example, the plurality of discrete categories may correspond to a plurality of objects (e.g., type of car, breed of dog, etc.) that are available for identification. Accordingly, aspects of the present disclosure may be applied to any number of different situations, contexts, or use cases.
Example devices and systems
Fig. 2A depicts a block diagram of an example computing system 100, according to an example embodiment of the disclosure. The system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 communicatively coupled by a network 180.
The user computing device 102 may be any type of computing device, such as a personal computing device (e.g., a notebook or desktop), a mobile computing device (e.g., a smart phone or tablet), a game console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
The user computing device 102 includes one or more processors 112 and memory 114. The one or more processors 112 may be any suitable processing device (e.g., processor cores, microprocessors, ASIC, FPGA, GPU, custom chips (such as tensor processing units, controllers, microcontrollers), etc.), and may be one processor or multiple processors operatively connected. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 114 may store data 116 and instructions 118 to be executed by processor 112 to cause user computing device 102 to perform operations.
In some implementations, the user computing device 102 may store or include one or more machine learning models 120. For example, the machine learning model 120 may be or include various machine learning models, such as a neural network (e.g., deep neural network) or other types of machine learning models, including nonlinear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. An example machine learning model 120 is discussed with reference to fig. 1.
In some implementations, one or more machine learning models 120 may be received from the server computing system 130 over the network 180, stored in the user computing device memory 114, and then used or implemented by the one or more processors 112. In some implementations, the user computing device 102 may implement multiple parallel instances of a single machine learning model 120 (e.g., perform parallel classification on multiple instances of input data).
Additionally or alternatively, one or more machine learning models 140 may be included in the server computing system 130 or stored and implemented by the server computing system 130, the server computing system 130 in communication with the user computing device 102 according to a client-server relationship. For example, the machine learning model 140 may be implemented by the server computing system 140 as part of a web service (e.g., a natural language processing service). Accordingly, one or more models 120 may be stored and implemented at the user computing device 102 and/or one or more models 140 may be stored and implemented at the server computing system 130.
The user computing device 102 may also include one or more user input components 122 that receive user input. For example, the user input component 122 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touchpad) that is sensitive to touch by a user input object (e.g., a finger or stylus). The touch sensitive component may be used to implement a virtual keyboard. Other example user input components include a microphone, a conventional keyboard, or other device through which a user may provide user input.
The server computing system 130 includes one or more processors 132 and memory 134. The one or more processors 132 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 134 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 134 may store data 136 and instructions 138 for execution by processor 132 to cause server computing system 130 to perform operations.
In some implementations, the server computing system 130 includes or is implemented by one or more server computing devices. Where the server computing system 130 includes multiple server computing devices, such server computing devices may operate in accordance with a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 130 may store or include one or more machine learning models 140. For example, model 140 may be or may include various machine learning models. Example machine learning models include neural networks or other multi-layer nonlinear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. An example model 140 is discussed with reference to fig. 1.
The user computing device 102 and/or the server computing system 130 may train the models 120 and/or 140 by interacting with the training computing system 150, the training computing system 150 being communicatively coupled or downloaded to a local device via the network 180. The training computing system 150 may be separate from the server computing system 130 or may be part of the server computing system 130.
The training computing system 150 includes one or more processors 152 and memory 154. The one or more processors 152 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. The memory 154 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 154 may store data 156 and instructions 158 that are executed by processor 152 to cause training computing system 150 to perform operations. In some implementations, the training computing system 150 includes or is implemented by one or more server computing devices.
Training computing system 150 may include a model trainer 160 that trains machine learning models 120 and/or 140 stored at user computing device 102 and/or server computing system 130 using various training or learning techniques (e.g., back propagation of errors). In some implementations, performing back-propagation of the error may include performing truncated back-propagation over time. Model trainer 160 may perform a variety of generalization techniques (e.g., weight decay, loss, etc.) to enhance the generalization ability of the trained model.
In particular, model trainer 160 may train machine-learned models 120 and/or 140 based on a set of training data 162. Training data 162 may include, for example, a set of labeled training data including example input data labeled with a ground truth classification (e.g., a "correct" probability for one or more discrete categories).
In some implementations, the training examples may be provided by the user computing device 102 if the user has provided consent. Thus, in such implementations, the model 120 provided to the user computing device 102 may be trained by the training computing system 150 on user-specific data received from the user computing device 102. In some cases, this process may be referred to as a personalized model.
Model trainer 160 includes computer logic for providing the desired functionality. Model trainer 160 may be implemented in hardware, firmware, and/or software that controls a general purpose processor. For example, in some implementations, model trainer 160 includes program files stored on a storage device, loaded into memory, and executed by one or more processors. In other implementations, model trainer 160 includes one or more sets of computer-executable instructions stored in a tangible computer-readable storage medium, such as a RAM hard disk or an optical or magnetic medium.
The network 180 may be any type of communication network, such as a local area network (e.g., an intranet), a wide area network (e.g., the internet), or some combination thereof, and may include any number of wired or wireless links. In general, various communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), coding or formats (e.g., HTML, XML) and/or protection schemes (e.g., VPN, secure HTTP, SSL) may be used to carry communications over the network 180 via any type of wired and/or wireless connection.
FIG. 2A illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the user computing device 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be trained and used locally at the user computing device 102. In some such implementations, the user computing device 102 may implement the model trainer 160 to personalize the model 120 based on user-specific data.
Fig. 2B depicts a block diagram of an example computing device 30, according to an example embodiment of the present disclosure. The computing device 30 may be a user computing device or a server computing device.
Computing device 30 includes a plurality of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine learning model(s). For example, each application may include a machine learning model. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like.
As shown in fig. 2B, each application may communicate with a number of other components of the computing device, such as one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., public API). In some implementations, the API used by each application is specific to that application.
Fig. 2C depicts a block diagram of an example computing device 50, according to an example embodiment of the present disclosure. Computing device 50 may be a user computing device or a server computing device.
Computing device 50 includes a plurality of applications (e.g., applications 1 through N). Each application communicates with a central intelligent layer. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like. In some implementations, each application may communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a generic API for all applications).
The central intelligence layer includes a plurality of machine-learned models. For example, as shown in fig. 2C, a respective machine learning model (e.g., model) may be provided for each application and managed by a central intelligence layer. In other implementations, two or more applications may share a single machine learning model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all applications. In some implementations, the central intelligence layer is included within the operating system of computing device 50 or implemented by the operating system of computing device 50.
The central intelligence layer may communicate with the central device data layer. The central device data layer may be a data-set repository for computing devices 50. As shown in fig. 2C, the central device data layer may communicate with a plurality of other components of the computing device, such as one or more sensors, a context manager, a device status component, and/or other components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a proprietary API).
Additional disclosure
The technology discussed herein refers to servers, databases, software applications and other computer-based systems, as well as actions taken and information sent to such systems. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and divisions of tasks and functions between components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components working in combination. The database and applications may be implemented on a single system or may be distributed across multiple systems. Distributed components may run sequentially or in parallel.
While the subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of illustration and not limitation of the disclosure. Those skilled in the art, after having appreciated the foregoing, may readily make alterations, modifications and equivalents to these embodiments. Accordingly, the present disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For example, features illustrated or described as part of one embodiment can be used with another embodiment to yield still a further embodiment. Accordingly, the present disclosure is intended to cover such alternatives, modifications, and equivalents.
Claims (20)
1. A computer system, comprising:
one or more processors; and
one or more non-transitory computer-readable media collectively storing a machine-learned classification model configured to generate a classification output based on a set of input data, the classification output comprising a plurality of classification scores for a plurality of discrete categories, respectively, the classification score for each discrete category indicating a likelihood that the input data corresponds to a discrete category, wherein the input data comprises text data;
Wherein the machine learning classification model comprises a combination of an embedded model and an exponential model;
wherein the embedding model is configured to receive an input data set and generate an embedding based on the input data set, wherein the embedding includes a plurality of parameter values for a plurality of parameters included in a non-softmax final layer of the embedding model, respectively, such that a number of parameters included in the non-softmax final layer of the embedding model is less than a number of discrete categories; and
wherein the exponential model is configured to receive a plurality of classification scores embedded and apply a mapping to generate a classification output, wherein the mapping describes a plurality of relationships between a plurality of parameters included in a non-softmax final layer of the embedded model and a plurality of discrete categories,
wherein the classification output corresponds to a set of words.
2. The computer system of claim 1, wherein the exponential model comprises a maximum entropy model.
3. The computer system of claim 1, wherein the plurality of relationships specify, for each of a plurality of discrete categories, one or more of a plurality of parameters to which such discrete category is mapped.
4. The computer system of claim 1, wherein, for each of a plurality of discrete categories, the exponent model determines its respective classification score based at least in part on a first exponent raised to a power of a first sum of parameter values to which such discrete category is mapped by mapping divided by a sum of all possible output values.
5. The computer system of claim 1, wherein at least one discrete category is mapped to two or more parameters included in a final layer of the embedded model.
6. The computer system of claim 1, wherein at least one parameter included in a final layer of the embedded model is mapped to two or more discrete categories.
7. The computer system of claim 1, wherein at least one of the plurality of relationships described by the mapping is user-specific.
8. The computer system of claim 1, wherein at least one of the plurality of relationships described by the map is assigned deterministically.
9. The computer system of claim 1, wherein at least one of the plurality of relationships is machine-learned.
10. The computer system of claim 1, wherein the plurality of discrete categories comprises a plurality of discrete words included in a vocabulary.
11. The computer system of claim 10, wherein at least one of the plurality of relationships described by the mapping is based on the presence of one or more specific characters in each discrete word.
12. The computer system of claim 10, wherein at least one of the plurality of relationships described by the mapping is based on the presence of a particular string of two or more characters in each discrete word.
13. The computer system of claim 1, wherein the plurality of discrete categories includes a plurality of discrete items available for selection by the recommendation system.
14. The computer system of claim 1, wherein at least one of the plurality of relationships described by the mapping is based on a shared characteristic between a subset of the plurality of discrete categories.
15. The computer system of claim 1, wherein the embedded model includes one or more additional layers that precede a final layer of the embedded model such that the final layer of the embedded model does not directly receive the input data set.
16. The computer system of claim 1, wherein the final layer of the embedded model directly receives the input data set such that the final layer is the only layer of the embedded model.
17. The computer system of claim 1, wherein the plurality of parameters of the last layer of the embedded model are user-specific hyper-parameters.
18. The computer system of claim 1, wherein the machine learning classification model has been trained on the labeled training data set using a supervised learning technique, wherein the supervised learning technique includes back propagating gradients of the loss function across the plurality of parameters according to the mapping.
19. A computer-implemented method, comprising:
obtaining, by one or more computing devices, a set of input data, wherein the input data comprises text data;
inputting, by one or more computing devices, a set of input data to a machine learning classification model configured to generate a classification output based on the set of input data, the classification output comprising a plurality of classification scores for a plurality of discrete categories, respectively, the classification score for each discrete category indicating a likelihood that the input data corresponds to a discrete category, wherein the machine learning classification model comprises a combination of an embedding model and an exponential model, wherein the embedding model is configured to receive the set of input data and generate an embedding based on the set of input data, wherein the embedding comprises a plurality of parameter values for a plurality of parameters included in a non-softmax final layer of the embedding model, respectively, such that a number of parameters included in the non-softmax final layer of the embedding model is less than a number of discrete categories, and wherein the exponential model is configured to receive the embedding and apply a mapping to generate the plurality of scores of classification outputs, wherein the mapping describes a plurality of relationships between the plurality of parameters included in the non-softmax final layer of the embedding model and the plurality of discrete categories; and
A classification output of the machine-learned classification model is received by one or more computing devices,
wherein the classification output corresponds to a set of words.
20. The computer-implemented method of claim 19, further comprising: a machine learning classification model is trained on the labeled training data set using supervised learning techniques.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862752128P | 2018-10-29 | 2018-10-29 | |
US62/752,128 | 2018-10-29 |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110796190A CN110796190A (en) | 2020-02-14 |
CN110796190B true CN110796190B (en) | 2024-03-19 |
Family
ID=69441727
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201911036166.8A Active CN110796190B (en) | 2018-10-29 | 2019-10-29 | Exponential modeling with deep learning features |
Country Status (2)
Country | Link |
---|---|
US (2) | US11568260B2 (en) |
CN (1) | CN110796190B (en) |
Families Citing this family (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2018176000A1 (en) | 2017-03-23 | 2018-09-27 | DeepScale, Inc. | Data synthesis for autonomous control systems |
US11409692B2 (en) | 2017-07-24 | 2022-08-09 | Tesla, Inc. | Vector computational unit |
US11893393B2 (en) | 2017-07-24 | 2024-02-06 | Tesla, Inc. | Computational array microprocessor system with hardware arbiter managing memory requests |
US11157441B2 (en) | 2017-07-24 | 2021-10-26 | Tesla, Inc. | Computational array microprocessor system using non-consecutive data formatting |
US10671349B2 (en) | 2017-07-24 | 2020-06-02 | Tesla, Inc. | Accelerated mathematical engine |
US11561791B2 (en) | 2018-02-01 | 2023-01-24 | Tesla, Inc. | Vector computational unit receiving data elements in parallel from a last row of a computational array |
US11215999B2 (en) | 2018-06-20 | 2022-01-04 | Tesla, Inc. | Data pipeline and deep learning system for autonomous driving |
US11361457B2 (en) | 2018-07-20 | 2022-06-14 | Tesla, Inc. | Annotation cross-labeling for autonomous control systems |
US11636333B2 (en) | 2018-07-26 | 2023-04-25 | Tesla, Inc. | Optimizing neural network structures for embedded systems |
US11562231B2 (en) | 2018-09-03 | 2023-01-24 | Tesla, Inc. | Neural networks for embedded devices |
CN115512173A (en) | 2018-10-11 | 2022-12-23 | 特斯拉公司 | System and method for training machine models using augmented data |
US11196678B2 (en) | 2018-10-25 | 2021-12-07 | Tesla, Inc. | QOS manager for system on a chip communications |
US11816585B2 (en) | 2018-12-03 | 2023-11-14 | Tesla, Inc. | Machine learning models operating at different frequencies for autonomous vehicles |
US11537811B2 (en) | 2018-12-04 | 2022-12-27 | Tesla, Inc. | Enhanced object detection for autonomous vehicles based on field view |
US11610117B2 (en) | 2018-12-27 | 2023-03-21 | Tesla, Inc. | System and method for adapting a neural network model on a hardware platform |
US10997461B2 (en) | 2019-02-01 | 2021-05-04 | Tesla, Inc. | Generating ground truth for machine learning from time series elements |
US11567514B2 (en) | 2019-02-11 | 2023-01-31 | Tesla, Inc. | Autonomous and user controlled vehicle summon to a target |
US10956755B2 (en) | 2019-02-19 | 2021-03-23 | Tesla, Inc. | Estimating object properties using visual image data |
CN111428000A (en) * | 2020-03-20 | 2020-07-17 | 华泰证券股份有限公司 | Method, system and storage medium for quantizing unstructured text data |
WO2021234577A1 (en) * | 2020-05-21 | 2021-11-25 | Element Ai Inc. | Method of and system for training machine learning algorithm for object classification |
US11704558B2 (en) | 2020-05-21 | 2023-07-18 | Servicenow Canada Inc. | Method of and system for training machine learning algorithm for object classification |
US11259024B2 (en) * | 2020-06-05 | 2022-02-22 | Tencent America LLC | Quantizer design |
CN112182384B (en) * | 2020-09-28 | 2023-08-25 | 平安科技（深圳）有限公司 | Content recommendation method and device based on countermeasure learning and computer equipment |
CN112115237B (en) * | 2020-10-09 | 2024-01-19 | 湖北中烟工业有限责任公司 | Construction method and device of tobacco science and technology literature data recommendation model |
CN112434725B (en) * | 2020-10-30 | 2023-06-09 | 四川新网银行股份有限公司 | Model compression method deployed to HTML5 |
US20220147827A1 (en) * | 2020-11-11 | 2022-05-12 | International Business Machines Corporation | Predicting lagging marker values |
EP4341943A1 (en) * | 2021-05-17 | 2024-03-27 | Osmo Labs, Pbc | Calibrating an electronic chemical sensor to generate an embedding in an embedding space |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2006073384A1 (en) * | 2004-12-30 | 2006-07-13 | Sam Technology, Inc. | Neurocognitive function eeg measurement method and system |
CN108399421A (en) * | 2018-01-31 | 2018-08-14 | 南京邮电大学 | A kind of zero sample classification method of depth of word-based insertion |
CN108475438A (en) * | 2016-10-31 | 2018-08-31 | 谷歌有限责任公司 | The Facial reconstruction of insertion based on study |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8271408B2 (en) * | 2009-10-22 | 2012-09-18 | Yahoo! Inc. | Pairwise ranking-based classifier |
US11205103B2 (en) * | 2016-12-09 | 2021-12-21 | The Research Foundation for the State University | Semisupervised autoencoder for sentiment analysis |
US20190205829A1 (en) * | 2017-11-22 | 2019-07-04 | United Parcel Service Of America, Inc. | Automatically clustering shipping units at different hierarchical levels via machine learning models |
US20190156253A1 (en) * | 2017-11-22 | 2019-05-23 | United Parcel Service Of America, Inc. | Automatically generating volume forecasts for different hierarchical levels via machine learning models |
US11281969B1 (en) * | 2018-08-29 | 2022-03-22 | Amazon Technologies, Inc. | Artificial intelligence system combining state space models and neural networks for time series forecasting |
-
2019
- 2019-10-16 US US16/654,425 patent/US11568260B2/en active Active
- 2019-10-29 CN CN201911036166.8A patent/CN110796190B/en active Active
-
2023
- 2023-01-30 US US18/161,479 patent/US11922322B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2006073384A1 (en) * | 2004-12-30 | 2006-07-13 | Sam Technology, Inc. | Neurocognitive function eeg measurement method and system |
CN108475438A (en) * | 2016-10-31 | 2018-08-31 | 谷歌有限责任公司 | The Facial reconstruction of insertion based on study |
CN108399421A (en) * | 2018-01-31 | 2018-08-14 | 南京邮电大学 | A kind of zero sample classification method of depth of word-based insertion |
Also Published As
Publication number | Publication date |
---|---|
US11922322B2 (en) | 2024-03-05 |
CN110796190A (en) | 2020-02-14 |
US20200134466A1 (en) | 2020-04-30 |
US20230186096A1 (en) | 2023-06-15 |
US11568260B2 (en) | 2023-01-31 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110796190B (en) | Exponential modeling with deep learning features | |
CN111368996B (en) | Retraining projection network capable of transmitting natural language representation | |
KR102071582B1 (en) | Method and apparatus for classifying a class to which a sentence belongs by using deep neural network | |
Zhang et al. | Deep Learning over Multi-field Categorical Data: –A Case Study on User Response Prediction | |
CN114048331A (en) | Knowledge graph recommendation method and system based on improved KGAT model | |
CN111667022A (en) | User data processing method and device, computer equipment and storage medium | |
CN111400603A (en) | Information pushing method, device and equipment and computer readable storage medium | |
CN109871485A (en) | A kind of personalized recommendation method and device | |
CN111859149A (en) | Information recommendation method and device, electronic equipment and storage medium | |
US20190228297A1 (en) | Artificial Intelligence Modelling Engine | |
CN112836502B (en) | Financial field event implicit causal relation extraction method | |
CN112418059A (en) | Emotion recognition method and device, computer equipment and storage medium | |
US20230351473A1 (en) | Apparatus and method for providing user's interior style analysis model on basis of sns text | |
CN108475346A (en) | Neural random access machine | |
CN116628345B (en) | Content recommendation method and device, electronic equipment and storage medium | |
CN113609337A (en) | Pre-training method, device, equipment and medium of graph neural network | |
US20220207368A1 (en) | Embedding Normalization Method and Electronic Device Using Same | |
CN114861671A (en) | Model training method and device, computer equipment and storage medium | |
CN115129863A (en) | Intention recognition method, device, equipment, storage medium and computer program product | |
Gerard et al. | The basics of machine learning | |
US20230351107A1 (en) | Server, user terminal, and method for providing user interior decoration style analysis model on basis of sns text | |
KR102521020B1 (en) | Method, device and system for matching galleries, artists and consumers and providing payment platform services based on artificial intelligence | |
CN116778264B (en) | Object classification method, image classification method and related equipment based on class reinforcement learning | |
Kaur et al. | Machine Learning and its Applications-A Review Study | |
Muthuselvan et al. | Student academic performance prediction enhancement using t-SIDSBO and Triple Voter Network |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |