JP2024063060A - Low Latency Matrix Multiplication Unit - Google Patents
Low Latency Matrix Multiplication Unit Download PDFInfo
- Publication number
- JP2024063060A JP2024063060A JP2024024596A JP2024024596A JP2024063060A JP 2024063060 A JP2024063060 A JP 2024063060A JP 2024024596 A JP2024024596 A JP 2024024596A JP 2024024596 A JP2024024596 A JP 2024024596A JP 2024063060 A JP2024063060 A JP 2024063060A
- Authority
- JP
- Japan
- Prior art keywords
- weight
- register
- matrix
- multiplication unit
- vector
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 239000011159 matrix material Substances 0.000 title claims abstract description 192
- 239000013598 vector Substances 0.000 claims abstract description 147
- 238000012546 transfer Methods 0.000 claims description 6
- 238000002360 preparation method Methods 0.000 claims description 2
- 238000000034 method Methods 0.000 abstract description 26
- 238000012545 processing Methods 0.000 description 46
- 230000015654 memory Effects 0.000 description 38
- 238000013528 artificial neural network Methods 0.000 description 35
- 230000008569 process Effects 0.000 description 20
- 238000011068 loading method Methods 0.000 description 15
- 238000004590 computer program Methods 0.000 description 11
- 230000009467 reduction Effects 0.000 description 11
- 238000012549 training Methods 0.000 description 8
- 238000004364 calculation method Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 7
- 230000017105 transposition Effects 0.000 description 7
- 230000009471 action Effects 0.000 description 6
- 238000002347 injection Methods 0.000 description 6
- 239000007924 injection Substances 0.000 description 6
- 230000006870 function Effects 0.000 description 5
- 238000006243 chemical reaction Methods 0.000 description 4
- 230000004913 activation Effects 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000004422 calculation algorithm Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 238000010977 unit operation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Abstract
【課題】セルのシストリックアレイとして実装される行列乗算ユニット全体のレイテンシを低減する方法、システム及び装置を提供する。
【解決手段】シストリックアレイ内のマルチセル３００において、行列乗算の各セルは、転置されたまたは転置されない重みシフトレジスタから重み入力を受け取る重み行列レジスタ３２５と、重み行列レジスタに格納されるよう水平方向から重み入力を受け取る転置された重みシフトレジスタと、重み行列レジスタに格納されるよう垂直方向から重み入力を受け取る転置されない重みシフトレジスタと、重み行列レジスタに結合され、乗算結果を得るために重み行列レジスタの重み入力をベクトルデータ入力で乗算する乗算ユニットとを含む。
【選択図】図３
A method, system and apparatus for reducing the overall latency of a matrix multiplication unit implemented as a systolic array of cells.
[Solution] In a multicell 300 in a systolic array, each cell of matrix multiplication includes a weight matrix register 325 that receives weight inputs from a transposed or non-transposed weight shift register, a transposed weight shift register that receives weight inputs from the horizontal direction to be stored in the weight matrix register, a non-transposed weight shift register that receives weight inputs from the vertical direction to be stored in the weight matrix register, and a multiplication unit coupled to the weight matrix register that multiplies the weight inputs of the weight matrix register by a vector data input to obtain a multiplication result.
[Selected figure] Figure 3
Description
背景
この明細書は、ハードウェアでのニューラルネットワーク計算の実行に関する。
FIELD OF THE DISCLOSURE This specification relates to performing neural network computations in hardware.
ニューラルネットワークは機械学習モデルであり、モデルの１つ以上の層を用いて、受信した入力に対する出力、たとえば分類などを生成する。一部のニューラルネットワークには、出力層に加えて１つ以上の隠れ層が含まれる。各隠れ層の出力は、ネットワーク内の次の層、つまりネットワークの次の隠れ層または出力層への入力として用いられる。ネットワークの各層は、それぞれのパラメータのセットの現在の値に従って、受信した入力から出力を生成する。 A neural network is a machine learning model that uses one or more layers of the model to generate an output, such as a classification, for the input it receives. Some neural networks contain one or more hidden layers in addition to an output layer. The output of each hidden layer is used as the input to the next layer in the network, either the next hidden layer or the output layer of the network. Each layer of the network generates an output from the input it receives according to the current values of its respective set of parameters.
概要
この明細書では、ニューラルネットワークのトレーニング、ニューラルネットワークの推論の計算、またはその両方を行う専用ハードウェア回路、および特に重み値が行列乗算ユニット内の重み行列レジスタにロードされる速度を増大させることによって行列乗算ユニット全体のレイテンシを低減する専用ハードウェア回路に関する技術について記載する。
Overview This specification describes techniques for special purpose hardware circuitry that trains a neural network, computes the inference of a neural network, or both, and in particular that reduces the overall latency of a matrix multiplication unit by increasing the speed at which weight values are loaded into weight matrix registers within the matrix multiplication unit.
シストリックアレイは、行列乗算を実行するよう配線され、通常、アレイ全体を通して均一な構造を有する。シストリックアレイの行列乗算ユニットは、積和サブユニットで構成され、各サブユニットは、入力オペランドを取り、そのオペランドに格納された重みを乗算して結果を得、その結果を部分和に加算して新たな部分和を生成する。 Systolic arrays are wired to perform matrix multiplication and typically have a uniform structure throughout the array. The matrix multiplication unit of a systolic array consists of multiply-add subunits, each of which takes an input operand, multiplies it by a stored weight to obtain a result, and adds the result to a partial sum to produce a new partial sum.
レイテンシを短縮する1つの方法は、重みを積和ユニットにロードする速度を増大させ
ることである。
One way to reduce the latency is to increase the speed at which weights are loaded into the multiply-accumulate unit.
一般に、本明細書で説明する主題の革新的な一局面は、ニューラルネットワークのトレーニング、ニューラルネットワークの推論の計算、またはその両方を行う専用ハードウェア回路で実現できる。 In general, an innovative aspect of the subject matter described herein can be implemented in dedicated hardware circuitry for training a neural network, computing the inference of the neural network, or both.
この態様の他の実施形態は、各々、方法のアクションを実行するように構成された、対応するコンピュータシステム、装置、および１つ以上のコンピュータ記憶装置に記録されたコンピュータプログラムを含む。１つ以上のコンピュータのシステムが特定の操作またはアクションを実行するように構成されているとは、動作中にそのシステムにそのような操作またはアクションを実行させるソフトウェア、ファームウェア、ハードウェア、またはそれらの組み合わせがそのシステムにインストールされていることを意味する。１つ以上のコンピュータプログラムが特定の操作またはアクションを実行するように構成されるとは、１つ以上のプログラムが、データ処理装置によって実行されると、データ処理装置にそのような操作またはアクションを実行させる命令を含むことを意味する。 Other embodiments of this aspect include corresponding computer systems, devices, and computer programs stored on one or more computer storage devices, each configured to perform the actions of the method. When one or more computer systems are configured to perform a particular operation or action, it means that software, firmware, hardware, or a combination thereof is installed on the system that causes the system to perform such operation or action during operation. When one or more computer programs are configured to perform a particular operation or action, it means that one or more programs include instructions that, when executed by a data processing device, cause the data processing device to perform such operation or action.
前述の実施形態および他の実施形態は各々、以下の特徴のうちの１つ以上を単独でまたは組み合わせて任意選択で含むことができる。特に、一実施形態は、以下の特徴をすべて組み合わせて含む。 Each of the above and other embodiments may optionally include one or more of the following features, either alone or in combination. In particular, one embodiment includes all of the following features in combination:
行列乗算ユニットはセルのシストリックアレイとして実装されてもよい。セルのシストリックアレイの各セルは、転置されたまたは転置されない重みシフトレジスタから重み入力を受け取るように構成される重み行列レジスタと、重み行列レジスタに格納されるよう水平方向から重み入力を受け取るように構成される転置された重みシフトレジスタと、重み行列レジスタに格納されるよう垂直方向から重み入力を受け取るように構成される転置されない重みシフトレジスタと、重み行列レジスタに結合され、乗算結果を得るために重み行列レジスタの重み入力をベクトルデータ入力で乗算するように構成される乗算ユニットとを備えてもよい。各セルは、転置された重みシフトレジスタの重み入力と転置されない重みシフトレジスタとの間で選択を行い、選択された重み入力を重み行列レジスタに転送するように構成されるマルチプレクサを備えてもよい。 The matrix multiplication unit may be implemented as a systolic array of cells. Each cell of the systolic array of cells may comprise a weight matrix register configured to receive weight inputs from a transposed or non-transposed weight shift register, a transposed weight shift register configured to receive weight inputs from a horizontal direction to be stored in the weight matrix register, a non-transposed weight shift register configured to receive weight inputs from a vertical direction to be stored in the weight matrix register, and a multiplication unit coupled to the weight matrix register and configured to multiply the weight inputs of the weight matrix register with a vector data input to obtain a multiplication result. Each cell may comprise a multiplexer configured to select between the weight inputs of the transposed weight shift register and the non-transposed weight shift register and to forward the selected weight input to the weight matrix register.
行列乗算ユニットは、転置された重みシフトレジスタまたは転置されない重みシフトレジスタのいずれかからの重み値を保持するように構成された第１の重み保持レジスタを備えてもよい。 The matrix multiplication unit may include a first weight holding register configured to hold weight values from either the transposed weight shift register or the non-transposed weight shift register.
行列乗算ユニットは、転置された重みシフトレジスタまたは転置されない重みシフトレジスタのいずれかからの重み値を保持するように構成された第２の重み保持レジスタを備えてもよい。 The matrix multiplication unit may include a second weight holding register configured to hold weight values from either the transposed weight shift register or the non-transposed weight shift register.
重み値は、行列乗算ユニットに、転置された重みシフトレジスタから、水平方向に、第１の重み保持レジスタへ、および転置されない重みシフトレジスタから、垂直方向に、第２の重み保持レジスタへロードされてもよい。 Weight values may be loaded into the matrix multiplication unit horizontally from the transposed weight shift register into a first weight holding register, and vertically from the non-transposed weight shift register into a second weight holding register.
重み行列レジスタには、第１の重み保持レジスタまたは第２の重み保持レジスタから値がロードされてもよい。 The weight matrix register may be loaded with values from the first weight holding register or the second weight holding register.
別の実施形態では、シストリックアレイとして実施される行列乗算ユニットは、シストリックアレイの列に配置された複数のセルと、シストリックアレイの列ごとに設けられる重みシフトレジスタの２つのチェーンと、セルごとに設けられ、重みシフトレジスタから受け取られる重み入力を格納するように構成された重み行列レジスタと、重み行列レジスタに結合され、乗算結果を得るために重み行列レジスタの重み入力をベクトルデータ入力で乗算するように構成される乗算ユニットとを備えてもよい。各重みシフトレジスタは１つのチェーンのみに接続され、各セルは１つの重みシフトレジスタのみに接続される。 In another embodiment, a matrix multiplication unit implemented as a systolic array may comprise a number of cells arranged in columns of the systolic array, two chains of weight shift registers for each column of the systolic array, a weight matrix register for each cell and configured to store weight inputs received from the weight shift registers, and a multiplication unit coupled to the weight matrix registers and configured to multiply the weight inputs of the weight matrix registers by vector data inputs to obtain a multiplication result. Each weight shift register is connected to only one chain and each cell is connected to only one weight shift register.
重み値は、重み値の対を含むベクトルレジスタから重みシフトレジスタの２つのチェーンで送られてもよい。 The weight values may be fed in two chains of weight shift registers from a vector register containing pairs of weight values.
２つの重み値がベクトルレジスタから利用可能でない場合、各列の上部にある保持レジスタが重み値を保持してもよい。 If the two weight values are not available from a vector register, holding registers at the top of each column may hold the weight values.
２つの重み値が利用可能な場合、２つの重み値はクロックサイクルでセル内の重みシフトレジスタにシフトされる。 When two weight values are available, they are shifted into the weight shift register in the cell in a clock cycle.
２つの重み値が利用可能でない場合、第１の重み値が利用可能な第１のクロックサイクルで、保持レジスタに、第１の重み値が、保持される値としてロードされ、シフトは行われない。次のクロックサイクルで、第２の重み値が利用可能になると、第２の重み値と保持された値とが２つのシフトチェーンによってシフトされる。１つの値が、各シフトチェーンによって、シフトチェーンに接続された重みシフトレジスタにシフトされる。 If two weight values are not available, then in the first clock cycle when the first weight value is available, the first weight value is loaded into the holding register as the held value and no shifting occurs. In the next clock cycle, when the second weight value becomes available, the second weight value and the held value are shifted through the two shift chains. One value is shifted by each shift chain into the weight shift register connected to the shift chain.
各シフトチェーンは、重み値を注入するための２つの注入ポイントを有し、一方のポイントは列の上部にあり、他方のポイントは列の第２のポイントにあってもよい。ベクトルレジスタが、各々が別々の重み値を表す４つの８ビット整数のパックされたセットを含んでもよい。４つの整数のうちの２つが列の上部に注入され、４つの整数の他の２つがアレイの第２のポイントに注入されてもよい。 Each shift chain may have two injection points for injecting weight values, one point at the top of the column and the other point at a second point in the column. A vector register may contain a packed set of four 8-bit integers, each representing a separate weight value. Two of the four integers may be injected at the top of the column and the other two of the four integers may be injected at a second point in the array.
この明細書において記載される主題は、以下の利点の１つ以上を実現するように特定の実施の形態において実現することができる。シストリックアレイの列ごとに重みシフトレジスタのチェーンが２つある行列乗算ユニットは、ベクトルレジスタからの速度が、重みシフトレジスタのチェーンが１つだけの行列乗算ユニットの２倍で、重みを行列乗算ユニットに運ぶことができる。さらに、アレイ内の２つのポイント、つまりアレイの上部と中間ポイントとに重み値を送る、列ごとに重みシフトレジスタのチェーンが２つある行列乗算ユニットは、ベクトルレジスタからの速度が、重みシフトレジスタのチェーンが１つだけの行列乗算ユニットの４倍で、重みを行列乗算ユニットに運ぶことができる。 The subject matter described herein can be implemented in certain embodiments to achieve one or more of the following advantages: A matrix multiplication unit with two chains of weight shift registers per column of a systolic array can bring weights from a vector register to the matrix multiplication unit twice as fast as a matrix multiplication unit with only one chain of weight shift registers. Furthermore, a matrix multiplication unit with two chains of weight shift registers per column that delivers weight values to two points in the array, the top and the midpoint of the array, can bring weights from a vector register to the matrix multiplication unit four times as fast as a matrix multiplication unit with only one chain of weight shift registers.
追加的または代替的に、行列乗算ユニットは、転置されない重みシフトレジスタと転置された重みシフトレジスタとを各々が含むセルを有することができる。行列乗算ユニットは、その場合、垂直および水平方向の重みシフトチェーンに別々のレジスタを使用でき、その結果、行列乗算ユニットは、２つの重みシフトチェーンに別々のレジスタを有さない行列乗算ユニットの速度の２倍で、重み値をロードできる。 Additionally or alternatively, the matrix multiplication unit may have cells that each contain a non-transposed weight shift register and a transposed weight shift register. The matrix multiplication unit may then use separate registers for the vertical and horizontal weight shift chains, so that the matrix multiplication unit can load weight values twice as fast as a matrix multiplication unit that does not have separate registers for the two weight shift chains.
これらの重みシフトロード方法を組み合わせて、列ごとに重みシフトレジスタのチェーンが２つなく、垂直および水平方向の重みシフトチェーン用に別々のレジスタがない行列乗算ユニットから、ロード時間における増大を８倍得ることができる。これらの重みシフトチェーンおよび／または別々のレジスタは、行列乗算ユニットの複雑さやフットプリントを大幅に増加させることなく、行列乗算ユニットに追加できる。 Combining these weight shift loading methods, an 8x increase in load time can be obtained from a matrix multiplication unit that does not have two chains of weight shift registers per column and does not have separate registers for the vertical and horizontal weight shift chains. These weight shift chains and/or separate registers can be added to the matrix multiplication unit without significantly increasing the complexity or footprint of the matrix multiplication unit.
この明細書の主題の１つ以上の実施形態の詳細は、添付の図面および以下の詳細な説明において述べられる。主題の他の特徴、局面および利点は、詳細な説明、図面および特許請求の範囲から明らかになる。 The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the detailed description below. Other features, aspects, and advantages of the subject matter will become apparent from the detailed description, the drawings, and the claims.
さまざまな図面の同様の参照番号および名称は、同様の要素を示す。
詳細な説明
複数の層を有するニューラルネットワークをトレーニングし、それを推論の計算に用いることができる。たとえば、ニューラルネットワークは、ある値で各々初期化されるパラメータを有する。トレーニング中、ニューラルネットワークは、ニューラルネットワークのトレーニング手順を実行して、ニューラルネットワークのパラメータの値を調整して、たとえば、逆伝播を用いてパラメータの初期値からパラメータのトレーニングを経た値を判断する。トレーニングされたニューラルネットワークは、推論を計算でき、つまり、ニューラルネットワークの層を介して入力を処理し、その入力に対するニューラルネットワーク出力を生成できる。
Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION A neural network having multiple layers can be trained and used to compute inferences. For example, the neural network has parameters that are each initialized with a value. During training, the neural network performs a neural network training procedure to adjust the values of the neural network's parameters to determine the trained values of the parameters from their initial values, for example using backpropagation. The trained neural network can compute inferences, i.e., process inputs through the layers of the neural network and generate neural network outputs for the inputs.
たとえば、入力が与えられると、ニューラルネットワークはその入力に対する推論を計算することができる。ニューラルネットワークは、ニューラルネットワークの各層を通して入力を処理することによって、この推論を計算する。いくつかの実装形態では、ニューラルネットワークの層はシーケンスで配置される。 For example, given an input, a neural network can compute an inference for that input. The neural network computes this inference by processing the input through each layer of the neural network. In some implementations, the layers of a neural network are arranged in a sequence.
したがって、受け取った入力から推論を計算するために、ニューラルネットワークはその入力を受け取り、それを各ニューラルネットワーク層を通してシーケンスで処理して推論を生成し、１つのニューラルネットワーク層からの出力が次のニューラルネットワーク層への入力として与えられる。ニューラルネットワーク層へのデータ入力、たとえば、ニューラルネットワークへの入力、またはシーケンス内におけるその層の下の層の、あるニューラルネットワーク層への出力は、その層への活性化入力と呼ぶことができる。 Thus, to compute an inference from a received input, a neural network takes the input and processes it through each neural network layer in sequence to generate an inference, with the output from one neural network layer being given as the input to the next neural network layer. The data input to a neural network layer, e.g., the input to the neural network, or the output to a neural network layer of a layer below it in the sequence, can be referred to as the activation input to that layer.
いくつかの実装形態では、ニューラルネットワークの層は有向グラフで配置される。つまり、任意の特定の層が複数の入力、複数の出力、またはそれらの両方を受け取ることができる。ニューラルネットワークの層は、ある層の出力を前の層への入力として送り返すことができるように構成することもできる。 In some implementations, the layers of a neural network are arranged in a directed graph, meaning that any particular layer can receive multiple inputs, multiple outputs, or both. The layers of a neural network can also be configured so that the output of one layer can be sent back as input to a previous layer.
図１Ａは、ニューラルネットワークをトレーニングするための例示的な専用ハードウェアチップのハイレベル図を示す。図示されているように、単一の専用ハードウェアチップは２つの独立したプロセッサ、たとえば１０２ａ、１０２ｂを含む。各プロセッサ１０２ａ、１０２ｂには、２つの異なるコア：（１）コンピュートコア、つまり非常に長い命令語（ＶＬＩＷ）マシン（１０３ａ、１０３ｂ）、および（２）疎計算コア、つまり埋め込み層アクセラレータ（１０５ａ、１０５ｂ）が含まれる。
FIG. 1A shows a high-level view of an exemplary dedicated hardware chip for training neural networks. As shown, a single dedicated hardware chip includes two independent processors, e.g., 102a, 102b. Each
各コンピュートコア、たとえば１０３ａおよび１０３ｂは、密線形代数問題用に最適化される。各コンピュートコアは、単一の非常に長い命令語によって制御される。各コンピュートコアは、非常に長い命令語命令の、それ自身のストリームを実行する。 Each compute core, e.g., 103a and 103b, is optimized for dense linear algebra problems. Each compute core is controlled by a single very long instruction word. Each compute core executes its own stream of very long instruction word instructions.
例示的な疎計算コア、たとえば１０５ａまたは１０５ｂは、非常に疎である高次元データを密な低次元データにマッピングし、残りの層が密に充填された入力データを処理するようにする。たとえば、疎計算コアは、トレーニング中のニューラルネットワークの埋め込み層の計算を実行できる。 An exemplary sparse compute core, e.g., 105a or 105b, maps very sparse high-dimensional data into dense low-dimensional data, allowing the remaining layers to process densely packed input data. For example, a sparse compute core can perform computations for an embedding layer of a neural network during training.
この疎から密へのマッピングを実行するために、疎計算コアは、埋め込みテーブルである、予め構築されたルックアップテーブルを用いる。たとえば、ユーザ入力として一連のクエリワードがある場合、各クエリワードはハッシュ識別子またはワンホットエンコード
されたベクトルに変換される。識別子をテーブルインデックスとして用いて、埋め込みテーブルは対応する密なベクトルを返し、それは、次の層への入力活性化ベクトルになることができる。疎計算コアは、検索クエリワードにわたって簡約操作を実行して、１つの密な活性化ベクトルを作成することもできる。疎計算コアは、協働して、効率的な疎の、分散されたルックアップを実行し、なぜならば、埋め込みテーブルが巨大であり得、専用ハードウェアチップの１つの限られた容量の高帯域幅メモリに収まらないためである。疎計算コア機能に関する詳細は、２０１６年２月５日に提出された「MATRIX PROCESSING APPARATUS（行列処理装置）」と題される米国特許出願第１５／０１６，４８６号に見ること
ができる。
To perform this sparse-to-dense mapping, the sparse computing core uses a pre-built lookup table, which is an embedding table. For example, given a series of query words as user input, each query word is converted into a hash identifier or one-hot encoded vector. Using the identifier as a table index, the embedding table returns a corresponding dense vector, which can become the input activation vector for the next layer. The sparse computing core can also perform a reduction operation over the search query words to create one dense activation vector. The sparse computing cores work together to perform an efficient sparse, distributed lookup, because the embedding table can be huge and does not fit into the limited capacity high bandwidth memory of one of the dedicated hardware chips. Details regarding the sparse computing core functions can be found in U.S. Patent Application No. 15/016,486, entitled "MATRIX PROCESSING APPARATUS," filed on February 5, 2016.
図１Ｂは、コンピュートコア（１０１）のハイレベルの例を示す。コンピュートコアは、いくつかのコンピュートユニットを並列で制御するマシン、つまりＶＬＩＷマシンであることができる。各コンピュートコア（１０１）には、スカラーメモリ（１０４）、ベクトルメモリ（１０８）、スカラー処理ユニット（１０７）、ベクトルレジスタ（１０６）、および拡張ベクトルユニット（つまり、行列乗算ユニット（ＭＸＵ）（１１３）と、転置ユニット（ＸＵ）（１１４）と、簡約および置換ユニット（ＲＰＵ）（１１６））が含まれる。 Figure 1B shows a high-level example of a compute core (101). A compute core can be a machine that controls several compute units in parallel, i.e. a VLIW machine. Each compute core (101) includes a scalar memory (104), a vector memory (108), a scalar processing unit (107), vector registers (106), and an extended vector unit (i.e. a matrix multiplication unit (MXU) (113), a transposition unit (XU) (114), and a reduction and permutation unit (RPU) (116)).
例示的なスカラープロセッサは、ＶＬＩＷ命令のフェッチ／実行ループを実行し、コンピュートコアを制御する。命令バンドルをフェッチしてデコードした後、スカラープロセッサ自体は、スカラープロセッサ（１０７）およびスカラーメモリ（１０４）の複数のマルチビットレジスタ、つまり３２の３２ビットレジスタを用いて、命令バンドルのスカラースロットにおいて見いだされる命令を実行するのみである。スカラー命令セットには、アドレス計算、ロード／ストア命令、分岐命令などで使用される通常の算術演算が含まれる。残りの命令スロットは、ベクトル処理ユニットまたは他の拡張ベクトルユニット（１１３、１１４、１１６）の命令をエンコードする。デコードされたベクトル命令は、ベクトル処理ユニットに転送される。 The exemplary scalar processor executes a fetch/execute loop of VLIW instructions and controls the compute cores. After fetching and decoding an instruction bundle, the scalar processor itself only executes the instructions found in the scalar slots of the instruction bundle using the multiple multi-bit registers, i.e., 32 32-bit registers, of the scalar processor (107) and scalar memory (104). The scalar instruction set includes regular arithmetic operations used in address calculations, load/store instructions, branch instructions, etc. The remaining instruction slots encode instructions for the vector processing unit or other extended vector units (113, 114, 116). The decoded vector instructions are forwarded to the vector processing unit.
ベクトル命令とともに、スカラープロセッサ（１０７）は、最大３つのスカラーレジスタの値を他のプロセッサおよびユニットに転送して、演算を実行できる。スカラープロセッサは、ベクトルプロセッサから計算結果を直接取得することもできる。ただし、一部の実装形態では、例示的なチップは、ベクトルプロセッサからスカラープロセッサへの低帯域幅通信パスを有する。 With vector instructions, the scalar processor (107) can transfer the values of up to three scalar registers to other processors and units to perform the operations. The scalar processor can also get the computation results directly from the vector processor. However, in some implementations, the exemplary chip has a low-bandwidth communication path from the vector processor to the scalar processor.
ベクトル命令ディスパッチャは、スカラープロセッサとベクトルプロセッサとの間にある。このディスパッチャは、非スカラーＶＬＩＷスロットからデコードされた命令を受け取り、それらの命令をベクトル処理ユニットにブロードキャストする。ベクトル処理ユニットは、図１Ｃを参照して詳細に説明される。 The vector instruction dispatcher sits between the scalar and vector processors. It receives decoded instructions from non-scalar VLIW slots and broadcasts them to the vector processing unit. The vector processing unit is described in more detail with reference to Figure 1C.
例示的なスカラープロセッサ（１０７）は、小さい、高速な、プライベートスカラーメモリ（１０４）にアクセスする。このメモリは、はるかにより大きく、低速な高帯域幅メモリ（ＨＢＭ）（１１０）によってバックアップされる。同様に、例示的なベクトル処理ユニットは、小さい、高速な、プライベートベクトルメモリ（１０８）にアクセスする。このメモリも、ＨＢＭ（１１０）によってバックアップされる。ワード粒度アクセスは、スカラープロセッサ（１０７）とスカラーメモリ（１０４）との間、またはベクトル処理ユニットとベクトルメモリ（１０８）との間で起こる。ベクトルプロセッサとベクトルメモリとの間のロードおよびストアの粒度は、１２８個の３２ビットワードのベクトルである。ダイレクトメモリアクセスは、スカラーメモリ（１０４）とＨＢＭ（１１０）との間、およびベクトルメモリ（１０８）とＨＢＭ（１１０）との間で起こる。いくつかの実装形態では、ＨＢＭ（１１０）から処理ユニット（１０７）へのメモリ転送は、スカラーメ
モリまたはベクトルメモリを介してのみ実行できる。さらに、スカラーメモリとベクトルメモリとの間でダイレクトメモリ転送が行われない場合がある。
The exemplary scalar processor (107) accesses a small, fast, private scalar memory (104), which is backed by a much larger, slower high bandwidth memory (HBM) (110). Similarly, the exemplary vector processing unit accesses a small, fast, private vector memory (108), which is also backed by an HBM (110). Word granularity accesses occur between the scalar processor (107) and the scalar memory (104) or between the vector processing unit and the vector memory (108). The granularity of loads and stores between the vector processor and the vector memory is a vector of 128 32-bit words. Direct memory accesses occur between the scalar memory (104) and the HBM (110), and between the vector memory (108) and the HBM (110). In some implementations, memory transfers from the HBM (110) to the processing unit (107) can only be performed via the scalar memory or the vector memory. Furthermore, direct memory transfers may not occur between scalar and vector memories.
命令は、拡張ベクトルユニット演算を指定する場合がある。実行された各ベクトルユニット命令に加えて、各々が１つのレジスタ値を拡張ベクトルユニットに入力オペランドとして送ることができる２次元、つまり１２８×８のベクトルユニットがある。各拡張ベクトルユニットは、入力オペランドを受け取り、対応する演算を実行し、結果をベクトルプロセッサ（３０６）に返す。拡張ベクトルユニットは、図４を参照して以下に説明される。 An instruction may specify an extended vector unit operation. In addition to each vector unit instruction executed, there are two dimensional, or 128x8, vector units, each of which can send one register value as an input operand to the extended vector unit. Each extended vector unit receives the input operands, performs the corresponding operation, and returns the result to the vector processor (306). The extended vector unit is described below with reference to FIG. 4.
図１Ｃは、ニューラルネットワーク計算を実行するための例示的な専用集積回路１００を示す。説明したように、チップには２つのコンピュートコア（１０３ａ、１０３ｂ）と２つの疎計算コア（１５２ａ、１５２ｂ）とが含まれる。
FIG. 1C illustrates an exemplary dedicated
チップは、ホストコンピュータへのホストインターフェイス（１５０）、下部に沿った高帯域幅メモリの４つのスタック（１５６ａ～１５６ｄ）、およびインターフェイスとメモリとを接続するチップ間相互接続（１４８）、ならびに他のチップからのデータを含む共有領域を有する。高帯域幅メモリの２つのスタック（１５６ａ～１５６ｂ、１５６ｃ～１５６ｄ）が各コンピュートコア（１０３ａ、１０３ｂ）に関連付けられる。 The chip has a host interface (150) to the host computer, four stacks of high bandwidth memory (156a-156d) along the bottom, and inter-chip interconnects (148) connecting the interface to the memory, as well as a shared area containing data from other chips. Two stacks of high bandwidth memory (156a-156b, 156c-156d) are associated with each compute core (103a, 103b).
チップは、データを高帯域幅メモリ（１５６ｃ～１５６ｄ）に保存し、そのデータをベクトルメモリ（１０８）において読込および読出し、そのデータを処理する。コンピュートコア（１０３ｂ）自体は、２次元に分割されたオンチップＳ－ＲＡＭであるベクトルメモリ（１０８）を含む。ベクトルメモリには、アドレスが浮動小数点数、つまり各々３２ビットである１２８個の数値を保持するアドレス空間がある。コンピュートコア（１０３ｂ）は、値を計算する計算ユニット、および計算ユニットを制御するスカラーユニットも含む。 The chip stores data in high bandwidth memory (156c-156d) and processes the data by loading and unloading it in vector memory (108). The compute core (103b) itself contains vector memory (108), which is an on-chip S-RAM partitioned into two dimensions. The vector memory has an address space that holds 128 numbers whose addresses are floating point numbers, i.e., 32 bits each. The compute core (103b) also contains calculation units that calculate values, and scalar units that control the calculation units.
ベクトル処理ユニットは、ベクトル処理ユニットの２次元配列、すなわち１２８×８から成り、これらはすべて、同じ命令を単一命令複数データ（ＳＩＭＤ）方式で実行する。ベクトルプロセッサには、レーンとサブレーン、つまり１２８本のレーンおよび８本のサブレーンがある。レーン内において、ベクトルユニットはロード命令およびストア命令を介して互いに通信する。各ベクトルユニットは、一度に１つの４バイト値にアクセスできる。同じレーンに属さないベクトルユニットは直接通信できない。これらのベクトルユニットは、以下で説明する簡約／置換ユニットを用いる必要がある。 The Vector Processing Unit consists of a two-dimensional array of vector processing units, i.e. 128x8, all of which execute the same instructions in a single instruction multiple data (SIMD) fashion. The vector processor has lanes and sublanes, i.e. 128 lanes and 8 sublanes. Within a lane, the vector units communicate with each other via load and store instructions. Each vector unit can access one 4-byte value at a time. Vector units that do not belong to the same lane cannot communicate directly. They must use the reduction/substitution unit described below.
計算ユニットは、ベクトル処理ユニット（１０６）において、浮動小数点演算および整数演算の両方に用いることができるベクトルレジスタ、つまり３２個のベクトルレジスタを含む。計算ユニットは、計算を実行するための２つの算術論理ユニット（ＡＬＵ）（１２６ｃ～１２６ｄ）を含む。一方のＡＬＵ（１２６ｃ）は浮動小数点加算を実行し、他方のＡＬＵ（１２６ｄ）は浮動小数点乗算を実行する。両方のＡＬＵ（１２６ｃ～１２６ｄ）は、シフト、マスク、比較などの他のさまざまな演算を実行できる。たとえば、コンピュートコア（１０３ｂ）は、ベクトルレジスタＶ１と第２のベクトルレジスタＶ２とを加算し、結果を第３のベクトルレジスタＶ３に入れたい場合がある。この加算を計算するために、コンピュートコア（１０３ｂ）は複数、つまり１０２４の演算を１クロックサイクルで実行する。これらのレジスタをオペランドとして用いて、各ベクトルユニットは、クロックサイクルごとに２つのＡＬＵ命令、１つのロードおよび１つのストア命令を同時に実行できる。ロードまたはストア命令のベースアドレスは、スカラープロセッサで計算でき、ベクトルプロセッサに転送できる。各サブレーンにおけるベクトルユニットの各々は、ストライドや特別なインデックス付きアドレスレジスタなどのさまざまな方法を用いて
、それ自体のオフセットアドレスを計算できる。
The computation unit includes vector registers, i.e. 32 vector registers, that can be used for both floating point and integer operations in the vector processing unit (106). The computation unit includes two arithmetic logic units (ALUs) (126c-126d) for performing computations. One ALU (126c) performs floating point addition, and the other ALU (126d) performs floating point multiplication. Both ALUs (126c-126d) can perform various other operations such as shift, mask, compare, etc. For example, the compute core (103b) may want to add a vector register V1 and a second vector register V2 and place the result in a third vector register V3 . To compute this addition, the compute core (103b) performs multiple operations, i.e. 1024 operations, in one clock cycle. Using these registers as operands, each vector unit can simultaneously execute two ALU instructions, one load and one store instruction per clock cycle. The base address of a load or store instruction can be calculated by the scalar processor and forwarded to the vector processor. Each of the vector units in each sublane can calculate its own offset address using various methods such as strides or special indexed address registers.
計算ユニットは、平方根や逆数などの演算を実行する拡張単項パイプライン（ＥＵＰ）（１１６）も含む。コンピュートコア（１０３ｂ）は、これらの演算を実行するのに３クロックサイクルかかり、なぜならば、一度に１つのオペランドを取り込むからである。ＥＵＰ処理には１クロックサイクル以上かかるため、結果を保存する先入れ先出しのデータストレージがある。演算が終了すると、結果はＦＩＦＯに保存される。コンピュートコアは、後で別の命令を用いて、ＦＩＦＯからデータを引き出し、それをベクトルレジスタに格納できる。乱数生成器（１２０）により、コンピュートコア（１０３ｂ）はサイクルごとに乱数、つまりサイクルごとに１２８の乱数を生成できる。 The compute unit also includes an Extended Unary Pipeline (EUP) (116) that performs operations such as square root and reciprocal. The compute core (103b) takes three clock cycles to perform these operations because it takes in one operand at a time. Because the EUP processing takes more than one clock cycle, there is a first-in, first-out data storage to store the results. When the operation is finished, the results are stored in a FIFO. The compute core can later pull the data from the FIFO and store it in a vector register with another instruction. The random number generator (120) allows the compute core (103b) to generate a random number every cycle, i.e., 128 random numbers per cycle.
上に述べられるように、各プロセッサは３つの拡張ベクトルユニット、つまり、行列乗算演算を実行する行列乗算ユニット（１１３）と、行列、すなわち１２８×１２８の行列の転置演算を実行する転置ユニット（ＸＵ）（１１４）を含むクロスレーンユニット（ＸＬＵ）と、図１Ｃにおいて別個のユニット、簡約ユニット１１５および置換ユニット１１６として示される簡約および置換ユニットとを有する。
As mentioned above, each processor has three extended vector units, namely, a matrix multiplication unit (113) that performs matrix multiplication operations, a cross-lane unit (XLU) that includes a transposition unit (XU) (114) that performs transposition operations on matrices, i.e., 128×128 matrices, and a reduction and permutation unit, shown in FIG. 1C as separate units,
行列乗算ユニットは、２つの行列間で行列乗算を実行する。コンピュートコアは、乗算される行列である一連の数値を読み込む必要があるため、行列乗算ユニット（１１３）はデータを取り込む。図示されているように、データはベクトルレジスタ（１０６）から来る。各ベクトルレジスタには、ある数値、つまりある３２ビットの数値が含まれる。しかしながら、データを行列乗算ユニット（１１３）に送って、数値をより小さなビットサイズ、つまり３２ビットから１６ビットに変更すると、浮動小数点変換が発生する場合がある。並直列変換器（１３０）は、ベクトルレジスタから数値が読み取られるときに、２次元配列つまり１２８×８の行列が１２８個の数値のセットとして読み取られ、次の８クロックサイクルの各々ごとに行列乗算ユニット（１１３）に送信されることを保証する。行列乗算がその計算を完了した後、結果は非直列化され（１３２ａ、１３２ｂ）、これは、結果行列が、ある数のクロックサイクルの間保持されることを意味する。たとえば、１２８×８の配列の場合、１２８個の数値が８クロックサイクルの各々ごとに保持され、次いで適当なＦＩＦＯ、例えば、転置結果ＦＩＦＯ（ＴＲＦ）１３４または乗算結果ＦＩＦＯ（ＭＲＦ）１３６にプッシュされ、１２８×８の数値の２次元配列を１クロックサイクルで取得して、ベクトル処理ユニット（１０６）に含まれるベクトルレジスタに格納できる。 The matrix multiplication unit performs matrix multiplication between two matrices. The matrix multiplication unit (113) takes in data because the compute core needs to read a set of numbers, which are the matrices to be multiplied. As shown, the data comes from vector registers (106). Each vector register contains a number, i.e., a 32-bit number. However, sending the data to the matrix multiplication unit (113) to change the number to a smaller bit size, i.e., from 32-bit to 16-bit, may cause a floating-point conversion. The parallel-to-serializer (130) ensures that when the numbers are read from the vector registers, the two-dimensional array, i.e., a 128×8 matrix, is read as a set of 128 numbers and sent to the matrix multiplication unit (113) for each of the next 8 clock cycles. After the matrix multiplication completes its calculations, the result is deserialized (132a, 132b), which means that the result matrix is held for a certain number of clock cycles. For example, for a 128x8 array, 128 numbers are held for each of 8 clock cycles and then pushed into an appropriate FIFO, such as the Transpose Result FIFO (TRF) 134 or the Multiply Result FIFO (MRF) 136, to obtain a two-dimensional array of 128x8 numbers in one clock cycle that can be stored in a vector register included in the vector processing unit (106).
あるサイクル期間、すなわち１２８のサイクルからなる期間にわたって、重みが、行列を乗算する数値として行列乗算ユニット（１１３）にシフトされる。行列および重みがロードされると、コンピュートコア（１０３ｂ）は、数値のセット、つまり１２８×８の数値のセットを行列乗算ユニット（１１３）に送ることができる。セットの各ラインに行列を乗算して、クロックサイクルごとにある数の結果、つまり１２８の結果を生成できる。コンピュートコアが行列乗算を実行している間、コンピュートコアは、前の行列の計算プロセスが完了したときに、コンピュートコアが乗算する次の行列が利用できるように、バックグラウンドにおいて次の行列になる新たな数値のセットのシフトも行う。行列乗算ユニット（１１３）は、乗算されるべき行列におけるデータである重み入力と、行列で乗算されるべきベクトルにおけるデータである左辺データ入力とを処理し、出力のベクトルをベクトル処理ユニットに与えることができる。ベクトル処理ユニットは、出力のベクトルを処理し、処理された出力のベクトルをベクトルメモリに格納することができる。たとえば、ベクトル処理ユニットは、非線形関数を行列乗算ユニットの出力に適用して、ベクトルデータ値を生成できる。いくつかの実装形態では、ベクトル処理ユニット１０６は、正規化された値、プールされた値、またはその両方を生成する。処理された出力のベクトルは、たとえばニューラルネットワーク内の後続の層で用いるために、行列乗算ユニット１
１３への左辺データ入力として用いることができる。
Over a cycle period, i.e., 128 cycles, the weights are shifted into the matrix multiplication unit (113) as values to multiply the matrix. Once the matrices and weights are loaded, the compute core (103b) can send a set of values, i.e., a set of 128×8 values, to the matrix multiplication unit (113). Each line of the set can be multiplied by the matrix to generate a number of results, i.e., 128 results, per clock cycle. While the compute core is performing the matrix multiplication, it also shifts in a new set of values that will become the next matrix in the background so that the next matrix is available for the compute core to multiply when the calculation process of the previous matrix is completed. The matrix multiplication unit (113) can process the weight inputs, which are the data in the matrix to be multiplied, and the left-hand side data inputs, which are the data in the vector to be multiplied by the matrix, and provide a vector of outputs to the vector processing unit. The vector processing unit can process the vector of outputs and store the processed vector of outputs in a vector memory. For example, the vector processing unit can apply a nonlinear function to the output of the matrix multiplication unit to generate vector data values. In some implementations, the
13 can be used as the left-hand side data input to 13.
転置ユニットは、行列を転置する。転置論理ユニット（１１４）は、数値を取り込み、それらを転置して、レーンを横切る数値が他の次元の数値と転置されるようにする。一部の実装形態では、ベクトルプロセッサは１２８×８のベクトルユニットを含む。したがって、１２８×１２８の行列を転置するには、完全な行列転置のために１６個の個別の転置命令が必要である。転置が終了すると、転置された行列が利用可能になる。ただし、転置された行列をベクトルレジスタファイルに移動するには、明示的な命令が必要である。 The transpose unit transposes matrices. The transpose logic unit (114) takes numbers and transposes them so that numbers across lanes are transposed with numbers in the other dimension. In some implementations, the vector processor contains a 128x8 vector unit. Thus, to transpose a 128x128 matrix, 16 separate transpose instructions are required for the complete matrix transposition. Once the transposition is finished, the transposed matrix is available. However, an explicit instruction is required to move the transposed matrix to the vector register file.
簡約／置換ユニット（またはユニット１１５、１１６）は、置換、レーン回転、回転置換、レーン簡約、置換されたレーン簡約、およびセグメント化された置換されたレーン簡約などのさまざまな操作をサポートすることで、クロスレーン通信の問題に対処する。図示されているように、これらの計算は別々であるが、コンピュートコアは一方もしくは他方または一方に連鎖された他方を用いることができる。簡約ユニット（１１５）は、数値からなる各ラインを簡約し、それらの数値を置換ユニット（１１６）に供給する。置換ユニットは、異なるレーン間でデータを変更する。転置ユニット、簡約ユニット、置換ユニット、および行列乗算ユニットは、各々、完了までに１クロックサイクル以上かかる。したがって、各ユニットにはＦＩＦＯが関連付けられ、計算結果をＦＩＦＯにプッシュし、後で別の命令を実行して、データをＦＩＦＯからベクトルレジスタにプルできる。ＦＩＦＯを用いることにより、コンピュートコアは、長々とした演算の間、複数のベクトルレジスタを予約する必要がない。図示されているように、各ユニットはベクトル処理ユニット（１０６）におけるベクトルレジスタからデータを取得する。
The reduction/permutation unit (or
コンピュートコアは、スカラーユニットを用いて計算ユニットを制御する。スカラーユニットには２つの主要な機能があり、それは、（１）ループカウントおよびアドレス指定を実行すること、ならびに（２）ＤＭＡコントローラがバックグラウンドにおいて高帯域幅メモリ（１５６ｃ～１５６ｄ）とベクトルメモリ（１０８）との間で、および次いで例示のシステムにおける他のチップへのチップ間接続（１４８）にデータを移動するよう、ダイレクトメモリアドレス（ＤＭＡ）要求を生成することである。スカラーユニットは、命令メモリ（１０４）と、命令デコードおよび発行（１０２）と、スカラーレジスタすなわち３２ビットを含むスカラー処理ユニット（１０７）と、スカラーメモリ（１０４）と、クロックサイクルごとに２つの演算を実行する２つのＡＬＵ（１２６ａ、１２６ｂ）とを含む。スカラーユニットは、オペランドと即値とをベクトル演算に渡すことができる。各命令は、ベクトル処理ユニット（１０６）においてベクトルレジスタで実行される命令を含む命令バンドルとして、命令デコードおよび発行（１０２）から送ることができる。各命令バンドルは非常に長い命令語（ＶＬＩＷ）であり、各命令はある数のビット幅であり、ある数の命令フィールドに分割される。 The compute core controls the computational units using a scalar unit. The scalar unit has two main functions: (1) performing loop counting and addressing, and (2) generating direct memory address (DMA) requests for the DMA controller to move data between the high bandwidth memory (156c-156d) and the vector memory (108) in the background, and then to the inter-chip connections (148) to other chips in the exemplary system. The scalar unit includes an instruction memory (104), an instruction decode and issue (102), a scalar processing unit (107) that contains a scalar register, i.e., 32 bits, the scalar memory (104), and two ALUs (126a, 126b) that perform two operations per clock cycle. The scalar unit can pass operands and immediate values to the vector operations. Each instruction can be sent from the instruction decode and issue (102) as an instruction bundle that includes the instruction to be executed in the vector register in the vector processing unit (106). Each instruction bundle is a very long instruction word (VLIW), where each instruction is a certain number of bits wide and is divided into a certain number of instruction fields.
図２は、行列乗算ユニット（ＭＸＵ）２０１ａおよび２０１ｂを含む例示的なコアアーキテクチャ２００を示す。各ＭＸＵは２次元のシストリックアレイである。アレイは、行列乗算演算を実行するように配線される。ＭＸＵは、クロックサイクルごとに１つの乗算という一定のスループットで、１２８要素のベクトルをプリロードされた１２８×１２８の行列で乗算する。
Figure 2 shows an
各ＭＸＵは、１２８の行および１２８の列を有する。ＭＸＵは、タイルと呼ばれる同一のブロックに分割できる。たとえば、ＭＸＵは３２個のタイルに分割でき、各タイルには３２行×１６列が含まれる。各タイルは、さらに積和サブユニットセルに分割できる。各セルはベクトルデータ入力オペランドを取り、そのオペランドに格納された重みを乗算して結果を得、その結果を部分和に加算して新たな部分和を生成する。いくつかの実装形態では、サブユニットセルをより大きなマルチセル、つまり、２×２の積和サブユニットセ
ルのアレイまたはセーデキム（１６）セルと呼ばれる４×４の積和サブユニットセルのアレイにグループ化できる。入力データを１つの積和サブユニットセルからクロックサイクルごとに１つの速度で次のセルに移動する代わりに、データはクロックサイクルごとに１つのマルチセルでシストリックアレイを移動できる。
Each MXU has 128 rows and 128 columns. The MXU can be divided into identical blocks called tiles. For example, the MXU can be divided into 32 tiles, each containing 32 rows by 16 columns. Each tile can be further divided into sum-of-products subunit cells. Each cell takes a vector data input operand, multiplies it by a stored weight to get a result, and adds the result to a partial sum to generate a new partial sum. In some implementations, the subunit cells can be grouped into larger multicells, an array of 2x2 sum-of-products subunit cells or an array of 4x4 sum-of-products subunit cells called SeDekim (16) cells. Instead of moving input data from one sum-of-products subunit cell to the next cell at a rate of one per clock cycle, data can move through the systolic array one multicell per clock cycle.
一連のベクトル行列乗算を開始する前に、行列をＭＸＵにプリロードする必要がある。この行列のためのデータは「重み」データと呼ばれる。重み行列は、ソースバスを介して、ＭＸＵに接続されたバスによってＭＸＵに送られ、重みシフトレジスタにシフトされる。次いで、重みシフトレジスタの内容が重み行列レジスタにロードされ、行列の乗算が開始できるようになる。この重みロードプロセスは、図３～図８に関してより詳細に説明される。 Before a series of vector-matrix multiplications can begin, a matrix must be preloaded into the MXU. The data for this matrix is called "weight" data. The weight matrix is sent to the MXU by a bus connected to the MXU via the source bus and shifted into the weight shift register. The contents of the weight shift register are then loaded into the weight matrix register so that the matrix multiplications can begin. This weight loading process is described in more detail with respect to Figures 3-8.
図２に示すように、各ＭＸＵ、例えば１１３ａおよび１１３ｂは、３つのバス、転置されない重み用の第１のソースバス（２３０ａ、２３０ｂ）、転置された重み用の第２のソースバス（２２０ａ、２２０ｂ）、およびＭＸＵに格納されている行列で乗算されるベクトルデータ用の左辺バス（２１０ａ、２１０ｂ）に接続される。ＭＸＵは、ＭＸＵのエッジに接続するワイヤによってバスに接続される。各転置ユニット（ＸＵ）、たとえば１１４ａおよび１１４ｂも、第１のソースバスおよび第２のソースバスに接続される。 As shown in FIG. 2, each MXU, e.g., 113a and 113b, is connected to three buses, a first source bus (230a, 230b) for non-transposed weights, a second source bus (220a, 220b) for transposed weights, and a left-hand bus (210a, 210b) for vector data to be multiplied by the matrix stored in the MXU. The MXUs are connected to the buses by wires that connect to the edges of the MXU. Each transpose unit (XU), e.g., 114a and 114b, is also connected to a first source bus and a second source bus.
第１および第２のソースバスは、ＸＵまたはＭＸＵで消費されるべくベクトル処理ユニットから送られるデータを含む多目的バスである。データ処理は、ベクトルレジスタ２０６、直列化処理ユニット２０２、および選択ユニット２０４を含むベクトル処理データパスで発生する。ベクトル処理ユニットがバスで重みを送る方法はいくつかある。重みは、通常の「ハイ（Ｈ）」または「ロー（Ｌ）」で送られてもよい。レーンごとに８つの３２ビットの浮動小数点数（サブレーンごとに１つ）が、ｂｆｌｏａｔの１６ビットの浮動小数点数に丸められる。これらの値は４つの対にパックされ、８サイクルのコースにわたって１サイクルおきにＭＸＵに送られる。通常の「Ｈ」と「Ｌ」との違いは、ベクトル処理ユニットが浮動小数点の３２からｂｆｌｏａｔへの変換を行う方法である。重みがパックされる場合がある、とは、レーンごとの８つの３２ビット値の各々に、パックされたｂｆｌｏａｔの対が含まれることを意味する。８つの連続したサイクルの間に各サイクルでソースバスを使用して、８つではなく１６の値がＭＸＵに送られる。奇数サイクルでは、各サブレーンの下位１６ビットがＭＸＵに送られ、偶数サイクルでは、各サブレーンの上位１６ビットが送られる。重みは、追加または代替としてバイト単位で送られてもよい。各３２ビットオペランドには、４つの８ビット符号付き２の補数整数のパックされたセットが含まれる。各バイトは、修正された符号絶対値に変換される。これらの値は、連続する８サイクルにわたってソースバスによってＭＸＵに送られる。
The first and second source buses are general-purpose buses that contain data sent from the vector processing unit to be consumed by the XU or MXU. Data processing occurs in a vector processing datapath that includes vector registers 206,
重みは、第１または第２のソースバスを用いて転置されないまたは転置された命令として送られ、重みシフトレジスタにシフトされてもよい。ロード操作でトリガされると、以下に説明するように、重みシフトレジスタの内容は重み行列レジスタにロードされる。重みシフトレジスタから重み行列レジスタへのロードパスは、修正された符号絶対値からｂｆｌｏａｔへの変換がバイトモードデータで行われる場所でもある。ロード制御バスは、この変換を実行するかどうかを示す。 The weights may be sent as untransposed or transposed instructions using the first or second source bus and shifted into the weight shift register. When triggered by a load operation, the contents of the weight shift register are loaded into the weight matrix register, as described below. The load path from the weight shift register to the weight matrix register is also where the modified sign-magnitude to bfloat conversion is performed on the byte mode data. The load control bus indicates whether to perform this conversion.
実行中の命令に応じて、ソースバスからの３２ビット値には、ビット［１５：０］の値が（時間において）より早い値を表す１６ビット浮動小数点値のパックされた対、またはビット［７：０］の値が（時間において）より早い値を表し、他の値がシーケンスで後に続く、修正された符号絶対値形式の４つの８ビットの整数のパックされたセットが含まれてもよい。ＭＸＵがバスからデータを受け取ると、データ値はＭＸＵ全体に均等に、左側に値０、右側に値１２７で、拡散される。 Depending on the instruction being executed, the 32-bit values from the source bus may include a packed pair of 16-bit floating-point values where the value in bits [15:0] represents the earlier value (in time), or a packed set of four 8-bit integers in modified sign-magnitude format where the value in bits [7:0] represents the earlier value (in time) followed by the other values in sequence. When the MXU receives data from the bus, the data values are spread evenly across the MXU with a value of 0 on the left and a value of 127 on the right.
左辺（ＬＨＳ）データバスは、接続されたＭＸＵに格納される行列で乗算されるよう、１２８個の１６ビット浮動小数点数を特定の形式、たとえば、ｂｆｌｏａｔで運ぶ。ＬＨＳデータバスのデータは、ベクトル処理ユニットから来て、転置ユニット、例えば、１１４ａおよび１１４ｂを通過する。ＬＨＳ入力がＭＸＵに到着すると、値はＭＸＵ全体に均等に、左側に値０、右側に値１２７で、拡散される。 The left-hand side (LHS) data bus carries 128 16-bit floating-point numbers in a specific format, e.g., bfloat, to be multiplied by the matrix stored in the connected MXU. The data on the LHS data bus comes from the vector processing units and passes through the transposition units, e.g., 114a and 114b. When the LHS inputs arrive at the MXU, the values are spread evenly across the MXU, with values 0 on the left and values 127 on the right.
行列乗算の結果は、ＭＸＵ全体に均等に拡散され、ＭＸＵから行列結果ＦＩＦＯ（ＭＲＦ）、たとえば１３６ａおよび１３６ｂに送られる。ＸＵからの結果は、対応する転置結果ＦＩＦＯ（ＴＲＦ）、たとえば１３４ａおよび１３４ｂに送られる。 The results of the matrix multiplication are spread evenly across the MXUs and sent from the MXUs to matrix result FIFOs (MRFs), e.g., 136a and 136b. The results from the XUs are sent to corresponding transpose result FIFOs (TRFs), e.g., 134a and 134b.
図３は、行列乗算ユニット内のマルチセルの例示的なアーキテクチャを示す。上記で説明したように、行列乗算ユニットは２次元のシストリックアレイである。アレイは、マルチセルにグループ化できる複数の積和サブユニットを含む。いくつかの実装形態では、シストリックアレイの第１の次元はセルの列に対応し、シストリックアレイの第２の次元はセルの行に対応する。シストリックアレイは、列よりも行が多くてもよく、行よりも列が多くてもよく、または列と行とが同数であってもよい。この明細書では、列または垂直方向についての特定の処理について説明する。ただし、異なる設計で行または水平方向の処理を実行できる。 Figure 3 illustrates an example architecture of a multicell in a matrix multiplication unit. As described above, the matrix multiplication unit is a two-dimensional systolic array. The array includes multiple multiply-accumulate subunits that can be grouped into multicells. In some implementations, the first dimension of the systolic array corresponds to a column of cells, and the second dimension of the systolic array corresponds to a row of cells. The systolic array may have more rows than columns, more columns than rows, or an equal number of columns and rows. This specification describes specific processing in the column or vertical direction. However, different designs can perform processing in the row or horizontal direction.
図示された例では、左辺データレジスタ３１５ａ、３１５ｂは、アレイの行にベクトルデータ入力を送る。重みシフトチェーン３０１ａおよび３０１ｂは、重み入力値をアレイの列に送り、重みシフトチェーン３０２ａおよび３０２ｂは、重み入力値をアレイの行に送る。シフトチェーンは、たとえばメモリから行列乗算ユニット内のさまざまなレジスタの各々に値を渡すことができる有線経路である。
In the illustrated example, left-hand side data registers 315a, 315b route vector data inputs to rows of the array.
各重みシフトレジスタ３０５は、その重み内容値をソースバスから重みシフトレジスタ３０５のチェーンに沿ってシフトするように設計される。データがシフトインされた後、並列コピー操作により、すべてのデータが重みシフトレジスタ３０５から対応する重み行列レジスタ３２５に確実にコピーされる。データが重み行列レジスタ３２５にあるとき、データは任意の数の乗算サイクルで用いられる。この間、次の乗算セットに備えて、より多くの重みをバックグラウンドで重みレジスタ３０５にシフトしてもよい（通常はシフトされる）。 Each weight shift register 305 is designed to shift its weight content value from the source bus along the chain of weight shift registers 305. After the data is shifted in, a parallel copy operation ensures that all data is copied from the weight shift register 305 to the corresponding weight matrix register 325. When the data is in the weight matrix register 325, it is used for any number of multiplication cycles. During this time, more weights may (and typically are) shifted into the weight registers 305 in the background in preparation for the next set of multiplications.
左辺データレジスタ３１５ａ、３１５ｂは、ベクトルデータ入力を受け取ることができる。各左辺データレジスタは、１クロックサイクルについて各クロックサイクルで１つのＬＨＳデータ項目を保持する。マルチセルによって受け取られる各ベクトルデータ入力は、左辺データレジスタ３１５ａ、３１５ｂなど、マルチセルの対応する左辺レジスタ内を自由に流れてもよい。左辺データレジスタは、ベクトルレジスタによって、またはアレイ内の所与のマルチセルの位置に応じて、そのマルチセルの左にある隣接するマルチセルによって与えられ得るベクトルデータ入力を格納する。例えば、マルチセル３００が行列乗算ユニットのシストリックアレイ内の最も左の位置にある場合、ベクトルデータ入力はベクトルレジスタによって与えられる。ベクトルレジスタは、複数の異なるベクトルデータ入力をマルチセル３００に与えてもよく、各受け取られたベクトルデータ入力は、次いで、左辺データレジスタ３１５のうちの異なる１つによって格納されてもよい。各行は、マルチセルにグループ化される行の数に関係なく、クロックサイクルごとに１つの値を受け取る。 The left-hand side data registers 315a, 315b can receive vector data inputs. Each left-hand side data register holds one LHS data item each clock cycle for one clock cycle. Each vector data input received by a multicell may flow freely within the corresponding left-hand side register of the multicell, such as the left-hand side data registers 315a, 315b. The left-hand side data registers store vector data inputs that may be provided by the vector register or, depending on the position of a given multicell in the array, by an adjacent multicell to the left of that multicell. For example, if the multicell 300 is in the leftmost position in the systolic array of the matrix multiplication unit, the vector data input is provided by the vector register. The vector register may provide multiple different vector data inputs to the multicell 300, and each received vector data input may then be stored by a different one of the left-hand side data registers 315. Each row receives one value per clock cycle, regardless of the number of rows grouped into the multicell.
各左辺レジスタは、マルチセルのアレイの第１の次元に沿ってセルに結合されてもよい。左辺レジスタのセルへの接続は、図３において点線で示される。例えば、マルチセル内
の左辺データレジスタ３１５ａ（ある左辺データレジスタ）は、第１の行のセル３５０ａおよび３５０ｃに結合される。同様に、マルチセル内の左辺データレジスタ３１５ｂ（第２の左辺レジスタ）は、第２の行のセル３５０ｂおよび３５０ｄに結合される。各左辺レジスタ３１５は、格納されたベクトルデータ入力を、左辺レジスタが結合されるセル３５０に転送する。したがって、第１の次元に沿って（たとえば、所与の行または所与の列に沿って）延びる所与の数のセルについて、単一のセルだけでなく、マルチセル内のすべてのセルにベクトルデータ入力を渡すことができ、これにより、ベクトルデータ入力がセルのアレイ全体に速く拡散し、マルチセルの動作の効率が向上する。
Each left-side register may be coupled to a cell along a first dimension of the array of the multicell. The connections of the left-side register to the cells are shown by dotted lines in FIG. 3. For example, left-side data register 315a (a left-side data register) in the multicell is coupled to
複数のベクトルデータ入力を隣接する左辺レジスタに送って、複数のベクトルデータ入力をアレイの別のマルチセルで使用できるようにすることもできる。このプロセスにより、アレイの別の特定のマルチセルで使用するためにベクトルデータ入力をシフトできる。 Multiple vector data inputs can also be sent to adjacent left edge registers to make them available to different multicells of the array. This process allows vector data inputs to be shifted for use in another specific multicell of the array.
マルチセル３００の各セル３５０は、格納された重み値を含む。行列乗算プロセスを開始する前に、重みをシストリックアレイのセルにシフトしてロードする。専用チェーンおよび重みシフトレジスタが重みシフト用に設けられ、前の行列乗算処理の実行と同時に新たな重みをシフトインできる。行列入力演算処理全体のレイテンシを短縮する方法で、重み入力をマルチセルにロードできる。 Each cell 350 of the multicell 300 contains a stored weight value. Before starting the matrix multiplication process, the weights are shifted and loaded into the cells of the systolic array. Dedicated chains and weight shift registers are provided for weight shifting, allowing new weights to be shifted in simultaneously with the execution of the previous matrix multiplication operation. The weight inputs can be loaded into the multicell in a manner that reduces the overall latency of the matrix input computation process.
上述のように、重みシフトチェーン３０１、３０２は、メモリユニット、例えば図１のベクトルメモリ１０８から重み入力を受け取ることができる。シフトチェーンは、複数の対応する重み入力を、マルチセル３００に関連付けられた重み行列レジスタ３２５に送ることができる。
As mentioned above, the weight shift chains 301, 302 can receive weight inputs from a memory unit, such as the
いくつかの実装形態では、重みシフトレジスタは、ベクトルデータ入力をアレイ全体にわたって１つの次元に沿って、たとえば右にシフトし、重み入力をアレイ全体にわたって１つまたは両方の次元、たとえば右または下にシフトする。例えば、１クロックサイクルにわたって、マルチセル３００における複数のベクトルデータ入力の各ベクトルデータ入力は、同じ行における次のマルチセルにおいて対応する左辺データレジスタにシフトできる。水平データ（左辺データ）および垂直データ（部分和）は、各々、クロックサイクルごとに、クロックサイクルにつき１マルチセルずつ移動する。重みは、システムによって指示された場合にのみシフトし、実装形態および実行される命令に応じて、１、２、もしくは４行（または列）シフトしてもよい。 In some implementations, the weight shift register shifts the vector data inputs along one dimension across the array, e.g., to the right, and shifts the weight inputs across the array in one or both dimensions, e.g., to the right or down. For example, over one clock cycle, each vector data input of the multiple vector data inputs in the multicell 300 can be shifted to a corresponding left edge data register in the next multicell in the same row. The horizontal data (left edge data) and vertical data (partial sums) each move one multicell per clock cycle. Weights shift only when directed by the system, and may shift one, two, or four rows (or columns) depending on the implementation and the instructions being executed.
マルチプレクサ３３０は、第１のシフトチェーン３０１または第２のシフトチェーン３０２の重みシフトレジスタ３０５から重みを選択し、選択された入力を重み行列レジスタ３２５への単一のラインに転送する。マルチプレクサ３３０はセル３５０の境界線の外側に示されるが、いくつかの実装形態では、マルチプレクサ３３０はセル３５０内に存在する。 The multiplexer 330 selects a weight from the weight shift register 305 of the first shift chain 301 or the second shift chain 302 and forwards the selected input to a single line to the weight matrix register 325. Although the multiplexer 330 is shown outside the boundary of the cell 350, in some implementations the multiplexer 330 resides within the cell 350.
あるクロックサイクルで、各マルチセルは複数の所与の重み入力および複数の所与のベクトルデータ入力を処理して、複数の累積出力を生成できる。一般に、処理には、ベクトルデータ入力に格納された重みを乗算する乗算演算が含まれる。累積出力は、所与の重み入力と同じ次元に沿って、下に、隣接するマルチセルに渡すこともできる。いくつかの実装形態では、１つの畳み込み計算から別の畳み込み計算に移行するために、重みが所与のクロックサイクル中に１より多いマルチセルをシフトされる。 In a given clock cycle, each multicell can process multiple given weight inputs and multiple given vector data inputs to generate multiple accumulated outputs. In general, the processing involves a multiplication operation that multiplies the weights stored in the vector data inputs. The accumulated outputs can also be passed down along the same dimension as the given weight inputs to adjacent multicells. In some implementations, weights are shifted through more than one multicell during a given clock cycle to move from one convolution calculation to another.
累積出力は、重み入力と同じ列に沿って、たとえばアレイ内の列の一番下に向かって渡すことができる。いくつかの実装形態では、部分和レジスタ３１０ａ、３１１ａは、部分和値を前のマルチセルから当該のマルチセルに渡す。アレイは、マルチセルの各列から累
積出力を格納する部分和レジスタ３１０ｂ、３１１ｂを含むことができる。マルチセルの各列について、列のサブユニットセルによって生成された積は、上のマルチセルからの入来部分和と結合され、次の部分和として送られる。特定のマルチセル、例えばシストリックアレイの一番下の列のマルチセルなどの場合、累積出力は、ベクトル計算ユニットに転送できる最終的な累積値を含んでもよい。いくつかの実装形態では、最終的な累積値はアレイの一番下のマルチセルからベクトル計算ユニットに直接転送されるが、他の実装形態では、最終的な累積値はまずメモリに保存されるか、または異なるコンポーネントによって処理されてからベクトル計算ユニットに送られる。
The accumulated output may be passed along the same column as the weight input, e.g., toward the bottom of the column in the array. In some implementations, the
図４は、重み値のロード速度を高めるために、マルチセルサブアレイの列ごとに重みシフトレジスタの２つのチェーンを備えた行列乗算ユニットのマルチセルのアーキテクチャの例を示す。図４に示すように、セル４３５ａおよびセル４３５ｂはマルチセル４００の１つの列を構成し、セル４３５ｃおよびセル４３５ｄはマルチセル４００の第２の列を構成する。各列には、重みシフトレジスタのチェーンが２つある。所与の列の各セルは、その列の２つのチェーンのうちの１つのみから重み入力を受け取るように構成される。図４に示すように、１つのチェーン４０１は偶数行において重みシフトレジスタに接続し、１つのチェーン４０２は奇数行において重みシフトレジスタに接続する。各サイクルで、２つの新たな値が各列にシフトされ、既存のすべての重み値が２行下にシフトされる。したがって、重みは、シストリックアレイの列ごとに重みシフトレジスタの２つのチェーンを有さない行列乗算ユニットの２倍の速度でマルチセルにロードできる。
Figure 4 shows an example of a multi-cell architecture of a matrix multiplication unit with two chains of weight shift registers per column of the multi-cell sub-array to increase the loading speed of weight values. As shown in Figure 4,
図示されるように、重み値はベクトルレジスタ４０３からシフトインされる。一実装形態では、行列乗算ユニットの列ごとに１つのベクトルレジスタ４０３がある。図３の例では、ベクトルレジスタ４０３は行列乗算ユニットの上部に示されるが、ベクトルレジスタ４０３は、行列乗算ユニットに対して様々な位置、例えばユニットの底部に物理的に位置することができる。 As shown, the weight values are shifted in from vector registers 403. In one implementation, there is one vector register 403 for each column of the matrix multiplication unit. In the example of FIG. 3, the vector registers 403 are shown at the top of the matrix multiplication unit, but the vector registers 403 can be physically located in various locations relative to the matrix multiplication unit, for example, at the bottom of the unit.
ベクトルレジスタ４０３は、行列乗算ユニットによって演算される値よりも何らかの大きさだけ大きいまたは小さいレジスタ値を保持することができる。たとえば、レジスタはｎビット値を保持し、行列乗算ユニットはｎ／２ビット値で動作する。一部の実装形態では、各ベクトルレジスタは３２ビット値を保持し、行列乗算ユニットは１６ビット値で動作する。ある例示的な行列乗算ユニットは、レジスタの各３２ビット値を１６ビット値の対として処理するモードを有し、この対の１つの１６ビット値は、第１の重みシフトチェーン４０１に送られ、この対の第２の１６ビット値は、第２の重みシフトチェーン４０２に送られる。列ごとに１つのベクトルレジスタ４０３が示されるが、マルチセルごとにわずか１つのベクトルレジスタ４０３があってもよい。追加的または代替的に、各チェーンは、単一の１６ビットの重み値をチェーンに与える別個のベクトルレジスタ３０３に接続されてもよい。この場合、ベクトルレジスタ４０３における３２ビット浮動小数点値は１６ビット値に変換される。 The vector registers 403 can hold register values that are some magnitude larger or smaller than the values operated on by the matrix multiplication unit. For example, the registers hold n-bit values and the matrix multiplication unit operates on n/2-bit values. In some implementations, each vector register holds a 32-bit value and the matrix multiplication unit operates on 16-bit values. One exemplary matrix multiplication unit has a mode that processes each 32-bit value of the register as a pair of 16-bit values, with one 16-bit value of the pair being sent to a first weight shift chain 401 and the second 16-bit value of the pair being sent to a second weight shift chain 402. Although one vector register 403 per column is shown, there may be as few as one vector register 403 per multicell. Additionally or alternatively, each chain may be connected to a separate vector register 303 that provides a single 16-bit weight value to the chain. In this case, the 32-bit floating point values in the vector registers 403 are converted to 16-bit values.
ある実装形態では、重み値は、列ごとに２つのシフトチェーンがない状態で行列乗算ユニットの速度の２倍で値を送信するよう利用可能でない場合がある。この状況を処理するために、各垂直シフトチェーンに１つずつ、２つの重み値が利用可能になるまで、重み値を保持するよう、保持レジスタ４４５が各列の上部に配置される。１つの重み値のみが利用可能な最初のクロックサイクルで、利用可能な重み値は保持レジスタ４４５にコピーされる。新たな重み値が利用可能な次のクロックサイクルで、保持レジスタ内の重み値は１つの重みシフトチェーンによって保持レジスタから重みシフトレジスタにシフトされることになり、そのクロックサイクルで利用可能な新たな重み値は、第２の重みシフトチェーンによって第２の重みシフトレジスタにシフトされる。 In some implementations, weight values may not be available to transmit values at twice the rate of the matrix multiplication unit without two shift chains per column. To handle this situation, a holding register 445 is placed at the top of each column to hold weight values until two weight values are available, one for each vertical shift chain. On the first clock cycle when only one weight value is available, the available weight value is copied into the holding register 445. On the next clock cycle when a new weight value is available, the weight value in the holding register will be shifted from the holding register to the weight shift register by one weight shift chain, and the new weight value available in that clock cycle is shifted into the second weight shift register by the second weight shift chain.
水平シフトチェーン４０５は、上述のようにセルに重み値を与えてもよい。いくつかの実装形態では、上記の垂直シフトチェーン４０１、４０２と同じ方法で重みロードレイテンシを減少させるように機能する２つの水平シフトチェーンがあり得る。 The horizontal shift chain 405 may provide weight values to the cells as described above. In some implementations, there may be two horizontal shift chains that function to reduce weight load latency in the same manner as the vertical shift chains 401, 402 above.
マルチプレクサ４３０は、セル内の重み行列レジスタに送られる重み値が水平シフトチェーン４０５から来るか、または垂直シフトチェーン４０１ｂもしくは４０２ｂから来るかを判断する。重み値が重み行列レジスタにロードされ、左辺データレジスタ４１５がベクトルデータ入力を与えると、セル４３５で行列乗算を実行できる。
Multiplexer 430 determines whether the weight values fed into the weight matrix register in the cell come from horizontal shift chain 405 or from
図５は、重み値を所与のマルチセルの列にロードするための例示的なプロセス５００の流れ図である。インターフェイスは、ベクトルレジスタから少なくとも１つの重み値を受け取る（５０１）。
Figure 5 is a flow diagram of an
インターフェイスは、複数の重み値が利用可能かどうかを判断する（５０２）。
複数の重み値が利用可能な場合、インターフェイスは、重み値を、シフトチェーンによって、クロックサイクルで、マルチセル内のセル４３５の重みシフトレジスタにシフトする（５０４）。
The interface determines (502) whether multiple weight values are available.
If multiple weight values are available, the interface shifts the weight values by a shift chain into the weight shift registers of the cells 435 in the multicell in a clock cycle (504).
インターフェイスは、重み行列からのすべての重み値が行列乗算ユニットにロードされるまで、重み値をロードし続ける（５０６）。 The interface continues to load weight values until all weight values from the weight matrix are loaded into the matrix multiplication unit (506).
同じクロックサイクルで２つの重み値が利用可能でない場合、単一の重み値が利用可能な最初のサイクルで、保持レジスタ４４５にその利用可能な重み値がロードされ、シフトは行われない（５０３）。 If two weight values are not available in the same clock cycle, then in the first cycle in which a single weight value is available, the holding register 445 is loaded with that available weight value and no shifting occurs (503).
別の重み値が利用可能になる次のサイクルで、インターフェイスは、新たな値および保持レジスタ４４５に保持される値を２つのシフトチェーンによってマルチセルの重みシフトレジスタにシフトする（５０５）。 On the next cycle when another weight value becomes available, the interface shifts the new value and the value held in the holding register 445 through two shift chains into the multi-cell weight shift register (505).
次に、インターフェイスは、重み行列からのすべての重み値が行列乗算ユニット５０６にロードされるまで、重み値のロードを続ける。
The interface then continues loading weight values until all weight values from the weight matrix are loaded into the
サイクルごとに複数の重み値が利用可能でない場合、インターフェイスは１サイクルおきにシフトチェーンを活性化する。 If multiple weight values are not available per cycle, the interface will activate the shift chain every other cycle.
図６は、重み値のロード速度を４倍増加させるために、列ごとに２つのチェーンの重みシフトレジスタを伴い、列ごとに２つのポイントで重み値を注入する、行列乗算ユニットのアーキテクチャの例を示す。図３に示すように、行列乗算ユニットには、シストリックアレイの列ごとに２つのシフトチェーンがある。各セル６５０は、１つのシフトチェーンのみに接続されるシフトレジスタ６３５を含む。上述のように、ベクトルレジスタ６０３は、行列乗算ユニットによって演算される値よりも何らかの大きさだけ大きいまたは小さいレジスタ値を保持することができる。たとえば、あるレジスタはｎビット値を保持し、行列乗算ユニットはｎ／２ビット値で動作する。ベクトルレジスタ内の値は、行列乗算ユニットに期待される値サイズに一致するように分割または何らかの方法で変換できる。 Figure 6 shows an example of a matrix multiplication unit architecture with two chains of weight shift registers per column, injecting weight values at two points per column to increase the loading speed of weight values by a factor of four. As shown in Figure 3, the matrix multiplication unit has two shift chains per column of the systolic array. Each cell 650 contains a shift register 635 that is connected to only one shift chain. As mentioned above, the vector registers 603 can hold register values that are some magnitude larger or smaller than the values operated on by the matrix multiplication unit. For example, a register holds n-bit values and the matrix multiplication unit operates on n/2-bit values. The values in the vector registers can be divided or transformed in some way to match the value size expected of the matrix multiplication unit.
一実装形態では、各レジスタ６０３は３２ビットの値を保持することができる。各ベクトルレジスタ６０３の値は、各々別個の重み値である４つの８ビット符号付き整数のパックされたセットとして扱われる。図３に示すように、各８ビットの符号付き整数は、２つの１６ビットのチェーンで送られる。ただし、それらの整数はシストリックアレイにおいて列ごとに２つの注入ポイント６８０、６８１に送られる。それらの整数は、アレイの上
部（６８０ａ、６８０１ａ）および下の別のポイント（６８０ｂ、６８０ｂ）に送られる。説明した複数の注入ポイントを有する実施形態は、本明細書で説明する他の実施形態および特徴と組み合わせることができる。
In one implementation, each register 603 can hold a 32-bit value. The value of each vector register 603 is treated as a packed set of four 8-bit signed integers, each a separate weight value. As shown in FIG. 3, each 8-bit signed integer is sent in two 16-bit chains, except that the integers are sent to two injection points 680, 681 per column in the systolic array. The integers are sent to the top (680a, 6801a) and another point (680b, 680b) of the array. The described embodiment with multiple injection points can be combined with other embodiments and features described herein.
いくつかの実装形態では、整数がアレイの下半分のポイントに送られる場合、整数を注入するための追加の配線は必要ではなく、なぜならば、ベクトルレジスタからアレイの上部へのチェーンがアレイの全長を下から上まで横断するからである。各列の上部で、整数のうちの２つが、アレイで用いられる形式の１６ビットの浮動小数点値に変換され、上記の２つの重みシフトチェーン（６８０ａ、６８１ａ）に注入される。シフトチェーンはマルチプレクサによって中間ポイントで切断され、そのポイントでの整数から浮動小数点へのコンバータの第２のセットが、各３２ビット値から他の２つの整数を取得し、変換し、そのポイント（６８０ｂ、６８１ｂ）で注入する。たとえば、３２ビットのワードを、８ビットの４つの等しい部分、Ａ、Ｂ、Ｃ、Ｄに分割できる。重みインターフェイスで、部分Ａおよび部分Ｂをアレイの上部に送り、それらを、行列乗算ユニットによって演算される16ビット値に変換する。重みインターフェイスは、マルチプレクサを介してアレイの中間ポイントに部分Ｃおよび部分Ｄを送ることもできる。この実装形態では、部分Ｃおよび部分Ｄはアレイの上部には送られず、シフトチェーンの中間ポイントでセルの重みシフトレジスタに注入される。シフトチェーン上において中間ポイントにマルチプレクサが存在するため、重み値は、シフトチェーン上の前の重みシフトレジスタからではなく、注入ポイントから選択される。 In some implementations, if integers are sent to points in the lower half of the array, no additional wiring is needed to inject the integers, because the chains from the vector registers to the top of the array traverse the entire length of the array from bottom to top. At the top of each column, two of the integers are converted to 16-bit floating-point values in the format used by the array and injected into the two weight shift chains (680a, 681a) mentioned above. The shift chains are cut at the midpoint by a multiplexer, and a second set of integer-to-floating-point converters at that point take the other two integers from each 32-bit value, convert them, and inject them at that point (680b, 681b). For example, a 32-bit word can be split into four equal parts of 8 bits, A, B, C, and D. The weight interface sends part A and part B to the top of the array, which converts them to 16-bit values that are operated on by the matrix multiplication unit. The weight interface can also send part C and part D to the midpoint of the array via a multiplexer. In this implementation, parts C and D are not sent to the top of the array, but are injected into the weight shift registers of the cells at a midpoint in the shift chain. Because there is a multiplexer at a midpoint on the shift chain, the weight values are selected from the injection point, rather than from the weight shift registers earlier in the shift chain.
第２の重みの対をアレイに注入するポイントは、中間ポイントではなく、他のポイントである可能性がある。たとえば、アレイの下への１／４のポイントになる場合がある。この場合、上部に注入された重みは、行列乗算ユニットの最初の１／４のセルおよび行列乗算ユニットの３番目の１／４のセルにシフトされ、１／４のポイントに注入された重みは、行列乗算ユニットの２番目および４番目の１／４のセルにシフトされる。このプロセスには追加の配線が必要であるが、前の行列乗算が終了しつつある間に重みがより早くシフトし始めることができる。 The point at which the second pair of weights is injected into the array can be some other point rather than the midpoint. For example, it can be a quarter point down the array. In this case, the weights injected at the top are shifted to the first quarter cell of the matrix multiplication unit and the third quarter cell of the matrix multiplication unit, and the weights injected at the quarter point are shifted to the second and fourth quarter cells of the matrix multiplication unit. This process requires additional wiring, but allows the weights to start shifting sooner while the previous matrix multiplication is finishing.
示されるように、２つのシフティングチェーンは列ごとに発生する。ただし、一部の実装形態では、２つのシフティングチェーンは、追加的または代替的に、シフティングチェーンごとに２つの注入ポイントがある状態で、行ごとに生じ得る。 As shown, two shifting chains occur per column. However, in some implementations, two shifting chains may additionally or alternatively occur per row, with two injection points per shifting chain.
図７は、重み値をロードする速度を増加させるために、転置された重みシフトおよび通常の転置されない重みシフトのための別個のレジスタを有する行列乗算ユニットのアーキテクチャの例を示す。各マルチセル７００は複数のセル７５０を含み、垂直方向または水平方向のいずれかから重み値をロードすることができる。重みを上から垂直方向にロードすると、重み行列が行列乗算ユニットに格納される。同じ重みを同じ順序で横からロードすると、重み行列の転置が行列乗算ユニットに格納される。ニューラルネットワークシステムのトレーニングでは、転置されない重み行列および転置された重み行列の両方を、トレーニングアルゴリズムの異なるステップでロードする必要がある。重みが上から垂直方向にロードされると、重み値はセルを通して下にシフトされる。重みが左から水平方向にロードされると、重み値はマルチセル７００を通って右にシフトされる。図７は、通常のシフトレジスタ７０５に接続された通常のシフトチェーン７０１ａ、７０１ｂを示す。転置されたシフトチェーン７０２ａ、７０２ｂは転置されたシフトレジスタ７０５に接続される。マルチプレクサ７３０は、どのシフトチェーン７０１、７０２から重み行列レジスタ７２５をロードするかを判断する。
7 shows an example of a matrix multiplication unit architecture with separate registers for transposed and normal non-transposed weight shifts to increase the speed of loading weight values. Each multicell 700 contains multiple cells 750 and can load weight values from either vertical or horizontal directions. When weights are loaded vertically from the top, the weight matrix is stored in the matrix multiplication unit. When the same weights are loaded horizontally in the same order, the transpose of the weight matrix is stored in the matrix multiplication unit. In training a neural network system, both non-transposed and transposed weight matrices need to be loaded at different steps of the training algorithm. When weights are loaded vertically from the top, the weight values are shifted down through the cells. When weights are loaded horizontally from the left, the weight values are shifted right through the multicell 700. FIG. 7 shows
一部の実装形態では、ある重みのセットを行列乗算ユニットの重み行列レジスタにシフトするのにｎサイクルかかる。２番目の重みのセットは、そのシフトを、最初の重み値が
ロードされたｎ／２サイクル後に開始でき、新たな重みのセットをｎ／２サイクルごとにシフトレジスタから重み行列レジスタにロードしてもよい。
In some implementations, it takes n cycles to shift one set of weights into the weight matrix registers of the matrix multiplication unit, the second set of weights can begin its shifting n/2 cycles after the first weight values are loaded, and a new set of weights may be loaded from the shift registers into the weight matrix registers every n/2 cycles.
一部の実装形態では、１２８×１２８の重みのセット全体を常に使用する必要はない。未使用の位置の重みをゼロにセットして、重み行列を効果的に小さくすることができる。ある行列乗算ユニットは、その場合、データを重みシフトレジスタのすべての行またはすべての列にシフトする必要はない。各重みシフト命令は、８行のデータ、または転置されたロードの場合には８列のデータを、シストリックアレイにシフトすることになる。１６個の重みシフト命令は、１２８×１２８の行列全体をロードし、以前のすべてのデータを置き換える。データが重みシフトレジスタから対応する重み行列レジスタにコピーされると、各重みシフトレジスタはクリアされる。新たなデータを重みシフトレジスタにシフトすることは、このロード＆クリア信号の伝搬が開始された直後に開始できる。データがロードされる機会を有する前にシフトしないように、重みシフト信号は、ロード＆クリア波面の下および右のすべてのセルに対して禁止される。古いデータは完全にクリアされるため、データの行または列のすべてをシフトインする必要はない。シフトレジスタの上（または左）部分のみが新たなデータで埋められ、残りはゼロのままとなるため、それらの行への入来データは無視される（またはそれらの列からの出力データはゼロにされる）。 In some implementations, it is not necessary to always use the entire set of 128x128 weights. Weights in unused positions can be set to zero, effectively making the weight matrix smaller. Some matrix multiplication units then do not need to shift data into every row or every column of the weight shift register. Each weight shift instruction will shift 8 rows of data, or 8 columns in the case of a transposed load, into the systolic array. 16 weight shift instructions will load the entire 128x128 matrix, replacing all previous data. Each weight shift register is cleared once data has been copied from the weight shift register to the corresponding weight matrix register. Shifting new data into the weight shift registers can begin immediately after this load & clear signal begins to propagate. To avoid shifting before data has a chance to be loaded, the weight shift signal is inhibited for all cells below and to the right of the load & clear wavefront. It is not necessary to shift in every row or column of data, since the old data is completely cleared. Only the top (or left) part of the shift register is filled with new data, the rest remains zero, so the incoming data for those rows is ignored (or the output data from those columns is zeroed).
図８は、重み値のロード速度を高めるために保持レジスタのセットを有する例示的なセル８００を示す。セル８００は、シフトインされた重みのセットのための一時記憶として用いられる１つ以上の重み保持レジスタのセットを含む。１つのセットの重みシフトレジスタ８０５ａの値は、重み行列レジスタ８２５にコピーされる代わりに、またはそれに加えて、１つのセットの重み保持レジスタ８４５ａにコピーすることができる。第２のセットの重みシフトレジスタ８０５ｂの値は、重み行列レジスタ８２５にコピーされる代わりに、またはそれに加えて、第２のセットの重み保持レジスタ８４５ｂにコピーすることができる。重み値のセットが重み行列レジスタにロードされるとき、重み値のセットは、重みシフトレジスタ８０５ａ、８０５ｂから直接ではなく、保持レジスタ８４５のセットの１つから取得されてもよい。このプロセスにより、重み値のセットを、アレイへのシフト後に複数回ロードすることができる。たとえば、アルゴリズムが２つの重みセット間の切り替えを必要とする場合、１つのシフトチェーンからの重み値をロード間で保持レジスタにシフトできる。このプロセスにより、重みシフトのタイミングを重みロードから切り離すこともできる。たとえば、新たな重み値のセットがｎ／ｃサイクルごとにシフトを開始する場合、両方の重み値のセットを同時にシフトし、最初のセットが重み行列レジスタにロードされると、もう１つのセットが重み保持レジスタに移動されることが考えられる。追加のｎ／２サイクルの後、２番目のセットが保持レジスタから重み行列レジスタにロードされる。
8 shows an
いくつかの実装形態では、図４および／または図６の２つのシフトチェーンは、所与の時間に行列乗算ユニットにロードできる重み値の量の増大のために、通常のおよび転置されたシフトレジスタの追加と組み合わせることができる。 In some implementations, the two shift chains of Figures 4 and/or 6 can be combined with the addition of regular and transposed shift registers to increase the amount of weight values that can be loaded into the matrix multiplication unit at a given time.
本明細書において記載される主題および機能的動作の実施形態は、本明細書に開示される構造およびそれらの構造的等価物を含む、デジタル電子回路系において、有形で実施されるコンピュータソフトウェアもしくはファームウェアにおいて、コンピュータハードウェアにおいて、またはそれらの１つ以上の組合せにおいて実現され得る。本明細書に記載される主題の実施形態は、１つ以上のコンピュータプログラムとして、すなわち、データ処理装置による実行のために、または、データ処理装置の動作を制御するために有形の非一時的な記憶媒体上でエンコードされたコンピュータプログラム命令の１つ以上のモジュールとして実現され得る。コンピュータ記憶媒体は、機械可読記憶装置、機械可読記憶基板、ランダムもしくはシリアルアクセスメモリデバイス、または、それらの１つ以上の組
合せであり得る。代替的に、または加えて、プログラム命令は、データ処理装置による実行に対して好適な受信側装置への送信のために情報をエンコードするよう生成される、たとえばマシンにより生成された電気信号、光信号、または電磁気信号などの、人為的に生成された伝搬される信号上でエンコードすることができる。
Embodiments of the subject matter and functional operations described herein may be realized in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware, or in one or more combinations thereof, including the structures disclosed herein and their structural equivalents. Embodiments of the subject matter described herein may be realized as one or more computer programs, i.e., as one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by or to control the operation of a data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or one or more combinations thereof. Alternatively, or in addition, the program instructions may be encoded on an artificially generated propagated signal, such as, for example, a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to a receiving device suitable for execution by a data processing apparatus.
「データ処理装置」という用語は、データ処理ハードウェアを指し、例としてプログラマブルプロセッサ、コンピュータ、または複数のプロセッサもしくはコンピュータを含む、データを処理するためのすべての種類の装置、デバイスおよびマシンを包含する。当該装置は、たとえばＦＰＧＡ（フィールドプログラマブルゲートアレイ）またはＡＳＩＣ（特定用途向け集積回路）といった特定目的論理回路でもあることができるかまたはそれをさらに含み得る。当該装置は、ハードウェアに加えて、たとえばプロセッサファームウェア、プロトコルスタック、データベース管理システム、オペレーティングシステム、または、それらの１つ以上の組合せを構成するコードといった、コンピュータプログラムについて実行環境を作成するコードをオプションとして含み得る。 The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including, by way of example, a programmable processor, a computer, or multiple processors or computers. Such apparatus may also be or further include special purpose logic circuitry, such as, for example, an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, such apparatus may optionally include code that creates an execution environment for computer programs, such as, for example, code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or one or more combinations thereof.
プログラム、ソフトウェア、ソフトウェアアプリケーション、アプリケーション、モジュール、ソフトウェアモジュール、スクリプトまたはコードとも称され、または記載され得るコンピュータプログラムは、コンパイル型もしくはインタープリタ型言語、または宣言型もしくは手続き型言語を含む任意の形態のプログラミング言語で記述され得、スタンドアロンプログラムとして、または、モジュール、コンポーネント、サブルーチン、もしくは、コンピューティング環境で使用するのに好適な他のユニットとして任意の形態で展開され得る。プログラムは、ファイルシステムにおけるファイルに対応し得るが、対応する必要があるわけではない。プログラムは、当該プログラムに専用である単一のファイルにおいて、または、複数の連携ファイル（ｃｏｏｒｄｉｎａｔｅｄ ｆｉｌｅｓ）（たとえばコードの１つ以上のモジュール、サブプログラムまたは部分を格納するファイル）において、他のプログラムまたはデータ（たとえばマークアップ言語ドキュメントに格納される１つ以上のスクリプト）を保持するファイルの一部に格納され得る。コンピュータプログラムは、１つの場所に位置するかもしくは複数の場所にわたって分散されデータ通信ネットワークによって相互接続される１つのコンピュータまたは複数のコンピュータ上で実行されるように展開され得る。 A computer program, which may also be referred to or described as a program, software, software application, application, module, software module, script, or code, may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and may be deployed in any form, as a stand-alone program, or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may correspond to a file in a file system, but need not. A program may be stored in a single file dedicated to the program, or in multiple coordinated files (e.g., a file that stores one or more modules, subprograms, or portions of code), as part of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document). A computer program may be deployed to run on one computer or multiple computers located at one location or distributed across multiple locations and interconnected by a data communication network.
本明細書に記載されるプロセスおよび論理フローは、入力データ上で動作し出力を生成することにより機能を実行するよう１つ以上のプログラマブルコンピュータが１つ以上のコンピュータプログラムを実行することによって実行され得る。本プロセスおよび論理フローは、たとえばＦＰＧＡもしくはＡＳＩＣといった特殊目的論理回路系によっても、または特殊目的論理回路計と１つ以上のプログラムされたコンピュータとの組み合わせによっても実行され得る。 The processes and logic flows described herein may be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows may also be performed by special purpose logic circuitry, such as, for example, an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
コンピュータプログラムの実行に好適であるコンピュータは、汎用マイクロプロセッサもしくは特殊目的マイクロプロセッサもしくはその両方または任意の種類の中央処理ユニットに基づき得る。一般に、中央処理ユニットは、リードオンリメモリもしくはランダムアクセスメモリまたはその両方から命令およびデータを受け取る。コンピュータの必須の要素は、命令を実行するための中央処理ユニットと、命令およびデータを格納するための１つ以上のメモリデバイスとである。中央処理ユニットおよびメモリは、特殊目的論理回路系によって補足され得るか、または特殊目的論理回路に組み込まれ得る。一般に、コンピュータはさらに、たとえば磁気ディスク、光磁気ディスクまたは光ディスクといった、データを格納するための１つ以上の大容量記憶装置を含むか、当該１つ以上の大容量記憶装置からデータを受け取るかもしくは当該１つ以上の大容量記憶装置にデータを転送するよう動作可能に結合されるか、またはその両方を行う。しかしながら、コンピュータはそのような装置を有する必要はない。さらに、コンピュータはたとえば、携帯電話、携帯情
報端末（ＰＤＡ）、モバイルオーディオまたはビデオプレーヤ、ゲームコンソール、全地球測位システム（ＧＰＳ）受信機、またはポータブル記憶装置（たとえばユニバーサルシリアルバス（ＵＳＢ）フラッシュドライブ）といった別のデバイスに埋め込まれ得る。
A computer suitable for executing a computer program may be based on a general-purpose or special-purpose microprocessor or both, or on any kind of central processing unit. In general, the central processing unit receives instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory may be supplemented by or incorporated in special purpose logic circuitry. In general, the computer further includes one or more mass storage devices for storing data, e.g., magnetic disks, magneto-optical disks, or optical disks, and/or is operatively coupled to receive data from or transfer data to the one or more mass storage devices. However, a computer need not have such devices. Furthermore, the computer may be embedded in another device, e.g., a mobile phone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a global positioning system (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive).
コンピュータプログラム命令およびデータを格納するのに好適であるコンピュータ可読媒体は、例として、たとえばＥＰＲＯＭ、ＥＥＰＲＯＭおよびフラッシュメモリデバイスといった半導体メモリデバイスを含むすべての形態の不揮発性メモリ、媒体およびメモリデバイス；たとえば内部ハードディスクまたはリムーバブルディスクといった磁気ディスク；光磁気ディスク；ならびにＣＤ－ＲＯＭおよびＤＶＤ－ＲＯＭディスクを含む。 Computer-readable media suitable for storing computer program instructions and data include, by way of example, all forms of non-volatile memory, media and memory devices, including semiconductor memory devices such as EPROM, EEPROM and flash memory devices; magnetic disks such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
ユーザとの対話を与えるために、本明細書に記載される主題の実施形態は、たとえばＣＲＴ（陰極線管）またはＬＣＤ（液晶ディスプレイ）モニタといったユーザに対して情報を表示するための表示デバイスと、たとえばマウス、トラックボールといったユーザがコンピュータに入力を与えることができるキーボードおよびポインティングデバイスとを有するコンピュータ上で実現され得る。他の種類のデバイスが、同様に、ユーザとの対話を与えるために用いられ得；たとえば、ユーザに提供されるフィードバックは、たとえば視覚フィードバック、聴覚フィードバックまたは触覚フィードバックといった任意の形態の感覚フィードバックであり得；ユーザからの入力は、音響入力、音声入力、または触覚入力を含む任意の形態で受け取られ得る。加えて、コンピュータは、ユーザが使用するデバイスにドキュメントを送信しユーザが使用するデバイスからドキュメントを受信することによって、たとえば、ウェブブラウザから受信された要求に応答してユーザのデバイス上のウェブブラウザにウェブページを送信することによって、ユーザと対話し得る。また、コンピュータは、テキストメッセージまたは他の形式のメッセージを個人用デバイス、たとえばスマートフォンなどに送信し、メッセージングアプリケーションを実行し、ユーザから応答メッセージを受信することにより、ユーザと対話できる。 To provide for user interaction, embodiments of the subject matter described herein may be implemented on a computer having a display device, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user, and a keyboard and pointing device, such as a mouse or trackball, through which the user can provide input to the computer. Other types of devices may be used to provide for user interaction as well; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; input from the user may be received in any form, including acoustic input, speech input, or tactile input. In addition, the computer may interact with the user by sending documents to and receiving documents from a device used by the user, for example, by sending a web page to a web browser on the user's device in response to a request received from the web browser. The computer may also interact with the user by sending text messages or other forms of messages to a personal device, such as a smartphone, running a messaging application, and receiving a response message from the user.
本明細書に記載される主題の実施形態は、たとえばデータサーバとしてバックエンドコンポーネントを含む計算システムにおいて実現され得るか、たとえばアプリケーションサーバといったミドルウェアコンポーネントを含む計算システムにおいて実現され得るか、たとえば本明細書に記載される主題の実現例とユーザが対話することが可能であるグラフィカルユーザインターフェイス、ウェブブラウザもしくはアプリを有するクライアントコンピュータといったフロントエンドコンポーネントを含む計算システムにおいて実現され得るか、または１つ以上のそのようなバックエンドコンポーネント、ミドルウェアコンポーネントもしくはフロントエンドコンポーネントの任意の組合せの計算システムにおいて実現され得る。システムのコンポーネントは、たとえば通信ネットワークといったデジタルデータ通信の任意の形態または媒体によって相互接続され得る。通信ネットワークの例は、ローカルエリアネットワーク（ＬＡＮ）およびワイドエリアネットワーク（ＷＡＮ）、たとえばインターネットを含む。 Embodiments of the subject matter described herein may be implemented in a computing system that includes a back-end component, e.g., a data server, a middleware component, e.g., an application server, a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app by which a user can interact with an implementation of the subject matter described herein, or any combination of one or more such back-end, middleware, or front-end components. The components of the system may be interconnected by any form or medium of digital data communication, e.g., a communications network. Examples of communications networks include local area networks (LANs) and wide area networks (WANs), e.g., the Internet.
計算システムはクライアントおよびサーバを含むことができる。クライアントとサーバとは一般に互いから遠隔にあり、典型的には通信ネットワークを通じて対話する。クライアントとサーバとの関係は、それぞれのコンピュータ上で実行されるとともに互いに対してクライアント－サーバ関係を有するコンピュータプログラムによって発生する。いくつかの実施形態では、サーバは、例えば、クライアントとして振る舞うユーザデバイスと対話するユーザにデータを表示し、およびそのユーザからユーザ入力を受信する目的で、データ、例えば、ＨＴＭＬページをユーザデバイスに送信する。ユーザデバイスで生成されたデータ、例えば、ユーザ対話の結果は、ユーザデバイスからサーバで受信することができる。 A computing system may include clients and servers. Clients and servers are generally remote from each other and typically interact through a communications network. The relationship of clients and servers arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data, e.g., HTML pages, to a user device for the purpose of displaying the data to and receiving user input from a user interacting with the user device acting as a client. Data generated at the user device, e.g., results of user interaction, may be received at the server from the user device.
実施形態１は、セルのシストリックアレイとして実装される行列乗算ユニットであって
、セルのシストリックアレイの各セルは、転置されたまたは転置されない重みシフトレジスタから重み入力を受け取るように構成される重み行列レジスタと、重み行列レジスタに格納されるよう水平方向から重み入力を受け取るように構成される転置された重みシフトレジスタと、重み行列レジスタに格納されるよう垂直方向から重み入力を受け取るように構成される転置されない重みシフトレジスタと、重み行列レジスタに結合され、乗算結果を得るために重み行列レジスタの重み入力をベクトルデータ入力で乗算するように構成される乗算ユニットとを含む。
A first embodiment is a matrix multiplication unit implemented as a systolic array of cells, where each cell of the systolic array of cells includes a weight matrix register configured to receive weight inputs from a transposed or non-transposed weight shift register, a transposed weight shift register configured to receive weight inputs from a horizontal direction to be stored in the weight matrix register, a non-transposed weight shift register configured to receive weight inputs from a vertical direction to be stored in the weight matrix register, and a multiplication unit coupled to the weight matrix register and configured to multiply the weight inputs of the weight matrix register with a vector data input to obtain a multiplication result.
実施形態２は実施形態１の行列乗算ユニットであって、各セルはさらに、転置された重みシフトレジスタの重み入力と転置されない重みシフトレジスタとの間で選択を行い、選択された重み入力を重み行列レジスタに転送するように構成されるマルチプレクサを備える。
Embodiment 2 is the matrix multiplication unit of
実施形態３は、転置された重みシフトレジスタまたは転置されない重みシフトレジスタのいずれかからの重み値を保持するように構成された第１の重み保持レジスタをさらに備える、実施形態１または２の行列乗算ユニットである。
Embodiment 3 is the matrix multiplication unit of
実施形態４は、転置された重みシフトレジスタまたは転置されない重みシフトレジスタのいずれかからの重み値を保持するように構成された第２の重み保持レジスタをさらに備える、実施形態１～３のいずれか１つの行列乗算ユニットである。
Embodiment 4 is a matrix multiplication unit according to any one of
実施形態５は実施形態１～４のいずれか１つの行列乗算ユニットであって、ある重み値が転置された重みシフトレジスタから第１の重み保持レジスタにロードされ、ある重み値が垂直方向から第２の重み保持レジスタにロードされる。
Embodiment 5 is a matrix multiplication unit according to any one of
実施形態６は実施形態１～５のいずれか１つの行列乗算ユニットであって、重み行列レジスタには、第１の重み保持レジスタまたは第２の重み保持レジスタから値がロードされる。
Embodiment 6 is a matrix multiplication unit according to any one of
実施形態７はシストリックアレイとして実装される行列乗算ユニットであって、シストリックアレイの列に配置された複数のセルと、シストリックアレイの列ごとに設けられる重みシフトレジスタの２つのチェーンとを備え、各重みシフトレジスタは１つのチェーンのみに接続され、各セルは１つの重みシフトレジスタのみに接続され、行列乗算ユニットはさらに、セルごとに設けられ、重みシフトレジスタから受け取られる重み入力を格納するように構成された重み行列レジスタと、重み行列レジスタに結合され、乗算結果を得るために重み行列レジスタの重み入力をベクトルデータ入力で乗算するように構成される乗算ユニットとを備える。 Embodiment 7 is a matrix multiplication unit implemented as a systolic array, comprising a plurality of cells arranged in columns of the systolic array, and two chains of weight shift registers provided for each column of the systolic array, each weight shift register being connected to only one chain and each cell being connected to only one weight shift register, the matrix multiplication unit further comprising a weight matrix register provided for each cell and configured to store weight inputs received from the weight shift registers, and a multiplication unit coupled to the weight matrix registers and configured to multiply the weight inputs of the weight matrix registers by vector data inputs to obtain a multiplication result.
実施形態８は、実施形態７の行列乗算ユニットであり、重み値は、重み値の対を含むベクトルレジスタから重みシフトレジスタの２つのチェーンで送られる。 Embodiment 8 is a matrix multiplication unit of embodiment 7, in which the weight values are sent in two chains of weight shift registers from a vector register containing pairs of weight values.
実施形態９は、ベクトルレジスタから２つの重み値が利用可能でない場合に重み値を保持するために各列の上部に保持レジスタをさらに備える、実施形態７または８の行列乗算ユニットである。 Embodiment 9 is the matrix multiplication unit of embodiment 7 or 8, further comprising a holding register at the top of each column to hold a weight value if two weight values are not available from the vector register.
実施形態１０は、実施形態７～９のいずれか１つの行列乗算ユニットであり、２つの重み値が利用可能な場合、２つの重み値はクロックサイクルでセル内の重みシフトレジスタにシフトされる。 Embodiment 10 is a matrix multiplication unit according to any one of embodiments 7 to 9, in which, if two weight values are available, the two weight values are shifted into a weight shift register in the cell in a clock cycle.
実施形態１１は、実施形態７～１０のいずれか１つの行列乗算ユニットであって、２つ
の重み値が利用可能でない場合、第１の重み値が利用可能な第１のクロックサイクルで、保持レジスタに、第１の重み値が、保持される値としてロードされ、シフトは行われず、次のクロックサイクルで、第２の重み値が利用可能な場合、第２の重み値と保持された値とは、２つのシフトチェーンによって、１つの値が各シフトチェーンによりシフトされて、シフトチェーンに接続された重みシフトレジスタにシフトされる。
An eleventh embodiment is a matrix multiplication unit according to any one of the seventh to tenth embodiments, wherein, when two weight values are not available, in a first clock cycle in which the first weight value is available, the first weight value is loaded into a holding register as a value to be held, and no shifting is performed, and in a next clock cycle, when a second weight value is available, the second weight value and the held value are shifted by two shift chains, one value being shifted by each shift chain, into a weight shift register connected to the shift chains.
実施形態１２は、各シフトチェーンは、重み値を注入するための２つの注入ポイントを有し、一方のポイントは列の上部にあり、他方のポイントは列の第２のポイントにある、実施形態７～１１のいずれか１つの行列乗算ユニットである。 Embodiment 12 is a matrix multiplication unit of any one of embodiments 7 to 11, in which each shift chain has two injection points for injecting weight values, one point at the top of the column and the other point at the second point of the column.
実施形態１３は、各々別々の重み値を表す４つの８ビット整数のパックされたセットを含むベクトルレジスタをさらに備える、実施形態７～１２のいずれか１つの行列乗算ユニットである。 Embodiment 13 is a matrix multiplication unit according to any one of embodiments 7 to 12, further comprising a vector register containing a packed set of four 8-bit integers, each representing a separate weight value.
実施形態１４は、列の上部に４つの整数のうちの２つを注入し、アレイの第２のポイントに４つの整数の他の２つを注入することをさらに含む、実施形態７～１３のいずれか１つの行列乗算ユニットである。
本明細書は多くの特定の実現例の詳細を含んでいるが、これらは如何なる発明の範囲または請求され得るものの範囲に対する限定としても解釈されるべきではなく、特定の発明の特定の実施形態に特有の特徴であり得る記載として解釈されるべきである。別個の実施形態の文脈で本明細書において記載されるある特徴は、単一の実施形態において組合せでも実現され得る。反対に、単一の実施形態の文脈において記載されるさまざまな特徴は、複数の実施形態において別々に、または任意の好適な部分的組合わせでも実現され得る。さらに、特徴は、ある組合せにおいて作用すると上で記載され、最初はそのように請求されていさえする場合もあるが、請求される組合せからの１つ以上の特徴はいくつかの場合には当該組合せから削除され得、請求される組合せは、部分的組合わせまたは部分的組合わせの変形例に向けられ得る。 While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of a particular invention. Certain features described herein in the context of separate embodiments may also be implemented in combination in a single embodiment. Conversely, various features described in the context of a single embodiment may also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as operative in a combination, and may even be initially claimed as such, one or more features from a claimed combination may in some cases be deleted from the combination, and the claimed combination may be directed to a subcombination or a variation of the subcombination.
同様に、動作が図においては特定の順に示されているが、そのような動作は、望ましい結果を達成するために、示された当該特定の順もしくは連続した順で実行される必要があると理解されるべきではなく、または、すべての示された動作が実行される必要があると理解されるべきではない。ある状況においては、マルチタスキングおよび並列処理が有利であり得る。さらに、上述の実施形態におけるさまざまなシステムモジュールおよびコンポーネントの分離は、すべての実施形態においてそのような分離を必要とすると理解されるべきではなく、記載されるプログラムコンポーネントおよびシステムは一般に単一のソフトウェア製品に統合され得るかまたは複数のソフトウェア製品にパッケージ化され得ることが理解されるべきである。 Similarly, although operations are shown in a particular order in the figures, such operations should not be understood as necessarily being performed in the particular order shown, or in the sequential order shown, to achieve desirable results, or that all of the shown operations need to be performed. In some situations, multitasking and parallel processing may be advantageous. Furthermore, the separation of various system modules and components in the above-described embodiments should not be understood as requiring such separation in all embodiments, and it should be understood that the program components and systems described may generally be integrated into a single software product or packaged into multiple software products.
主題の特定の実施形態が記載された。他の実施形態は以下の請求の範囲内にある。たとえば、請求項において記載されるアクションは、異なる順で実行され得、それでも望ましい結果を達成し得る。一例として、添付の図において示されるプロセスは、望ましい結果を達成するために、示された特定の順または連続する順であることを必ずしも必要としない。ある場合においては、マルチタスキングおよび並列処理が有利であり得る。 Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As an example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (11)
転置されたまたは転置されない重みシフトレジスタから重み入力を受け取るように構成される重み行列レジスタと、
前記重み行列レジスタに格納されるよう水平方向から重み入力を受け取るように構成される転置された重みシフトレジスタと、
前記重み行列レジスタに格納されるよう垂直方向から重み入力を受け取るように構成される転置されない重みシフトレジスタと、
前記重み行列レジスタに結合され、乗算結果を得るために前記重み行列レジスタの重み入力をベクトルデータ入力で乗算するように構成される乗算ユニットとを備える、セルのシストリックアレイ。 1. A matrix multiplication unit implemented as a systolic array of cells, each cell of the systolic array of cells comprising:
a weight matrix register configured to receive weight inputs from a transposed or non-transposed weight shift register;
a transposed weight shift register configured to receive weight inputs from a horizontal direction for storage in the weight matrix register;
a non-transposed weight shift register configured to receive weight inputs from a vertical direction for storage in said weight matrix register;
a multiplication unit coupled to the weight matrix register and configured to multiply weight inputs of the weight matrix register with vector data inputs to obtain a multiplication result.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US62/507,766 | 2017-05-17 |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022138332A Division JP7444936B2 (en) | 2017-05-17 | 2022-08-31 | Low latency matrix multiplication unit |
Publications (1)
Publication Number | Publication Date |
---|---|
JP2024063060A true JP2024063060A (en) | 2024-05-10 |
Family
ID=
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7444936B2 (en) | Low latency matrix multiplication unit | |
EP3625670B1 (en) | Performing matrix multiplication in hardware | |
JP2024063060A (en) | Low Latency Matrix Multiplication Unit |