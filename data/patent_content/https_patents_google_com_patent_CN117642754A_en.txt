CN117642754A - Iteratively preparing stable quantum states using a quantum computer - Google Patents
Iteratively preparing stable quantum states using a quantum computer Download PDFInfo
- Publication number
- CN117642754A CN117642754A CN202280049949.3A CN202280049949A CN117642754A CN 117642754 A CN117642754 A CN 117642754A CN 202280049949 A CN202280049949 A CN 202280049949A CN 117642754 A CN117642754 A CN 117642754A
- Authority
- CN
- China
- Prior art keywords
- quantum
- iteration
- quantum state
- state
- qubit
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 92
- 239000002096 quantum dot Substances 0.000 claims abstract description 92
- 230000008569 process Effects 0.000 claims abstract description 46
- 238000004364 calculation method Methods 0.000 claims abstract description 5
- 238000005259 measurement Methods 0.000 claims description 27
- 239000011159 matrix material Substances 0.000 claims description 24
- 230000015654 memory Effects 0.000 claims description 16
- 230000006835 compression Effects 0.000 claims description 8
- 238000007906 compression Methods 0.000 claims description 8
- 238000000354 decomposition reaction Methods 0.000 claims description 7
- 230000008859 change Effects 0.000 claims description 6
- 230000005283 ground state Effects 0.000 claims description 6
- 230000005428 wave function Effects 0.000 claims description 5
- 230000001186 cumulative effect Effects 0.000 claims description 4
- 230000009466 transformation Effects 0.000 claims description 4
- 230000002123 temporal effect Effects 0.000 claims description 3
- 238000012545 processing Methods 0.000 description 18
- 238000004590 computer program Methods 0.000 description 16
- 238000003860 storage Methods 0.000 description 14
- 230000006870 function Effects 0.000 description 13
- 230000009471 action Effects 0.000 description 11
- 239000000463 material Substances 0.000 description 11
- 230000003993 interaction Effects 0.000 description 10
- 238000005457 optimization Methods 0.000 description 7
- 239000000047 product Substances 0.000 description 6
- 238000013459 approach Methods 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 230000008878 coupling Effects 0.000 description 5
- 238000010168 coupling process Methods 0.000 description 5
- 238000005859 coupling reaction Methods 0.000 description 5
- 230000005281 excited state Effects 0.000 description 4
- 238000004519 manufacturing process Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 238000004422 calculation algorithm Methods 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- 238000002360 preparation method Methods 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 239000002887 superconductor Substances 0.000 description 3
- 238000009825 accumulation Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 238000007796 conventional method Methods 0.000 description 2
- 238000005137 deposition process Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 239000000543 intermediate Substances 0.000 description 2
- 238000012804 iterative process Methods 0.000 description 2
- 239000002245 particle Substances 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000000126 substance Substances 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 230000001131 transforming effect Effects 0.000 description 2
- 229910052782 aluminium Inorganic materials 0.000 description 1
- XAGFODPZIPBFFR-UHFFFAOYSA-N aluminium Chemical compound [Al] XAGFODPZIPBFFR-UHFFFAOYSA-N 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 239000006227 byproduct Substances 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 238000005229 chemical vapour deposition Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000000151 deposition Methods 0.000 description 1
- 230000008021 deposition Effects 0.000 description 1
- 239000003989 dielectric material Substances 0.000 description 1
- 230000004069 differentiation Effects 0.000 description 1
- 238000001312 dry etching Methods 0.000 description 1
- 230000009977 dual effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000000609 electron-beam lithography Methods 0.000 description 1
- 230000008020 evaporation Effects 0.000 description 1
- 238000001704 evaporation Methods 0.000 description 1
- 230000004907 flux Effects 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 150000002500 ions Chemical class 0.000 description 1
- -1 isooctyl Chemical group 0.000 description 1
- 229910052751 metal Inorganic materials 0.000 description 1
- 239000002184 metal Substances 0.000 description 1
- 150000002739 metals Chemical class 0.000 description 1
- 239000000178 monomer Substances 0.000 description 1
- 229910052758 niobium Inorganic materials 0.000 description 1
- 239000010955 niobium Substances 0.000 description 1
- GUCVJGMIXFAOAE-UHFFFAOYSA-N niobium atom Chemical compound [Nb] GUCVJGMIXFAOAE-UHFFFAOYSA-N 0.000 description 1
- 238000000206 photolithography Methods 0.000 description 1
- 238000005240 physical vapour deposition Methods 0.000 description 1
- 238000012887 quadratic function Methods 0.000 description 1
- 230000005233 quantum mechanics related processes and functions Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000004544 sputter deposition Methods 0.000 description 1
- 238000001039 wet etching Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/20—Models of quantum computing, e.g. quantum circuits or universal quantum computers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/40—Physical realisations or architectures of quantum processors or components for manipulating qubits, e.g. qubit coupling or qubit control
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/60—Quantum algorithms, e.g. based on quantum optimisation, quantum Fourier or Hadamard transforms
Abstract
The present invention provides methods, systems, and apparatus for preparing a target quantum state of a quantum system, wherein the target quantum state is stable with respect to a parameterized multi-volumetric qubit operator. In one aspect, a method includes: preparing an initial quantum state as an input state of a first iteration; iteratively evolving the initial quantum state and the subsequent input quantum state as inputs for subsequent iterations until an approximation of the target stable quantum state is obtained, comprising, for each iteration: calculating parameter values of the multi-body qubit operator for iteration through a quantum calculation process; calculating an evolution time for the iteration by a quantum computing process, including evaluating variations of elements of the iterative 2-RDM; and evolving the initial quantum state or the subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the subsequent input quantum state of the subsequent iteration.
Description
Technical Field
The present description relates to quantum computing.
Classical computers have a memory consisting of bits, where each bit may represent either a zero or a one. Quantum computers maintain a sequence of qubits called qubits (qubits), where each qubit may represent zero, one, or any quantum superposition of zero and one. Quantum computers operate by setting qubits in an initial state and controlling the qubits, for example, according to a quantum logic gate sequence.
Disclosure of Invention
The present specification describes an iterative process for constructing stable quantum states on a quantum computer.
In general, one novel aspect of the subject matter described in this specification can be implemented with a method for preparing a target quantum state of a quantum system, wherein the target quantum state is stable relative to a parameterized multi-body qubit operator (operator), the method comprising: preparing an initial quantum state as an input state of a first iteration; iteratively evolving the initial quantum state and the subsequent input quantum state as inputs for subsequent iterations until an approximation of the target stable quantum state is obtained, comprising, for each iteration: calculating parameter values of a multi-body qubit operator for iteration through a quantum calculation process (computation); calculating an evolution time for the iteration by a quantum computing process, including evaluating a change in an element of a two-electron reduced density matrix (two-electron reduced density matrix) of the iteration; and evolving the initial quantum state or the subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the subsequent input quantum state of the subsequent iteration.
Other embodiments of these aspects include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of these methods. A system of one or more classical and/or quantum computers may be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes the system to perform the actions. One or more computer programs may be configured to perform particular operations or actions by virtue of comprising instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
Alternatively, the foregoing and other embodiments may each include one or more of the following features, alone or in combination. In some embodiments, evaluating the change in the element of the iterative two-electron reduced density matrix comprises evaluating a first derivative and a second derivative of the element of the iterative two-electron reduced density matrix.
In some embodiments, the evolution time for the iteration is calculated by a quantum computing process, including computing
Wherein lambda is i Representing the evolution time for iteration i, H represents the Hamiltonian characterizing the quantum system, D' i First derivative of element representing iterative two-electron reduced density matrix, and D' i The second derivative of the element of the two-electron reduced density matrix representing the iteration.
In some embodiments, evaluating the first and second derivatives of elements of the iterative two-electron reduced density matrix includes using a cumulative expansion.
In some embodiments, calculating parameter values for the iterative multi-volumetric qubit operator by a quantum computation process includes performing measurements of 3-RDM.
In some implementations, evolving an initial quantum state or a subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the subsequent iterative input quantum state includes approximating a temporal evolution of the multi-volumetric qubit operator at the calculated parameter values using low-rank bi-factorization.
In some embodiments, low rank decomposition is achieved on a linear lattice of qubits with linear depth.
In some implementations, evolving an initial quantum state or a subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the subsequent iterative input quantum state includes approximating a time evolution of the multi-volumetric qubit operator at the calculated parameter values using unitary compression (Unitary compression) of the multi-volumetric qubit operator.
In some embodiments, unitary compression of the multi-volumetric qubit operator represents the multi-volumetric qubit operator at the calculated parameter values in a sum of squares form.
In some embodiments, the target stable quantum state comprises a ground state or an excited quantum state.
In some embodiments, the initial quantum state is not orthogonal to the target quantum state.
In some embodiments, the target quantum state comprises a state of a quantum system characterized by a hamiltonian, and wherein the target quantum state satisfies a stability condition given by:
<ψ|[G,H]|ψ>＝0，
where |ψ > represents the target quantum state, H represents the hamiltonian characterizing the quantum system, and G represents the parameterized multi-volumetric qubit operator.
In some embodiments, the stability condition comprises a first order stability condition of the change in energy relative to a parameter of the multi-volumetric qubit operator.
In some embodiments, the parameterized multi-body qubit operator includes a fermi-sub-two-body qubit operator.
In some embodiments, the fermi-son-binary qubit operator consists ofGiven, where i, j, k, l are indices representing quantum system orbits, θ represents real-valued coefficients, and +.>a k Represents creation and annihilation operators, and the associated energy is represented by E (Θ) =<ψ|e -Θ He Θ |ψ>Given, wherein |ψ>Representing a target quantum state, H represents a hamiltonian characterizing the quantum system.
In some embodiments, the target quantum state is represented by a wave function transformation sequence given by:
wherein lambda is i Represents the evolution time for iteration i, A i Representing a multi-volumetric qubit operator with parameter values for iteration i, and |ψ 0 >Representing an initial quantum state.
The subject matter described in this specification can be implemented in a specific manner to realize one or more of the following advantages.
The presently described technology can be used to construct quantum circuits that produce targeted stable quantum states without the need for variation minimization. The target stable quantum state may be a ground state or an excited state.
In addition, quantum circuits can be compiled using low rank decomposition or unitary compression and therefore have lower circuit depth, for example, than conventional techniques that implement exact rotation to minimize energy. Thus, using the presently described techniques to prepare a target quantum state requires less computational resources and increases the operational runtime. In addition, due to the reduced circuit depth, the presently described technology is particularly well suited for implementations using near term quantum computing devices (e.g., noise mid-scale quantum (NISQ) devices) where gate errors and T1 decay rates may cause long circuits to have noise that drowns out any signal in the circuit.
In addition, for example, the method is combined with a method based on the inverse Hermite shrinkage Schrodinger equation (anti-HermitiancontractedThe equation, ACSE) and subject to imprecise 2-RDM evolution and error accumulation, the system implementing the presently described techniques may prepare the target quantum states with improved precision as compared to conventional approaches.
The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an example quantum computing system that prepares stable quantum states.
FIG. 2 is a flow chart of an example process for preparing a target stable quantum state using a quantum computing system.
Fig. 3 is a diagram of an example quantum computing system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Techniques for constructing a quantum circuit that produces a target quantum state that is stable relative to a parameterized multi-volume qubit operator are described. The initial quantum state is iteratively evolved until an approximation of the target stable quantum state is obtained. In each iteration, a quantum computation process is performed to compute parameter values for the iterative multi-volumetric qubit operator and the evolution time for the iteration. The evolution time is calculated by evaluating the variation of the elements of the iterative two-electron reduced density matrix.
Fig. 1 is a block diagram of an example quantum computing system 100 for performing the presently described quantum state preparation techniques. Example quantum computing system 100 is an example of a system implemented as classical and quantum computer programs on one or more classical computers and quantum computing devices in one or more locations, in which the systems, components, and techniques described herein may be implemented.
The example quantum computing system 100 includes a control system 102 thatIs configured to operate a quantum system (e.g., qubit) included in quantum computing system 100 and perform classical subroutines or computing processes. For example, control system 102 may be programmed to send control signals to qubits included in the vector subsystem, e.g., to implement quantum circuits, and to receive read-out signals from the qubits, e.g., as part of performing measurement operations. In FIG. 1, control system 102 performs operations to prepare for being in the target quantum state |ψ i >Is provided) and a quantum system 104 of (1). The target quantum state is a quantum state that is stable relative to the parameterized multi-body qubit operator and may be a ground state or an excited quantum state. Example target quantum states, stability conditions, and parameterized multi-volume qubit operators are described below with reference to fig. 2.
In order to prepare quantum system 104 in the target quantum state, in stage (a), control system 102 performs operations to set quantum system 104 to the initial quantum state |ψ, for example, by resetting the qubits included in quantum system 104 0 >. Control system 102 then iteratively evolves initial quantum state |ψ 0 >Until the target stable quantum state |psi is obtained i >Until that point.
In each iteration, control system 102 performs stages (B) through (D). In stage (B), the control system performs a quantum computation process to compute parameter values for the iterative multi-volumetric qubit operator. As described below with reference to equations (5) and (6), the parameter value a calculated in stage (B) ijkl An operator a is defined that, when applied to an input quantum state for a time λ, evolves the input quantum state in a manner that minimizes energy and approximately satisfies stability.
To calculate the parameter values, the control system 102 performs quantum and classical calculation processes. For example, for each parameter A as defined in equation (6) below ijkl Control system 102 can prepare a copy of the iterated input quantum states. Control system 102 may then apply quantum circuit 108 to the input quantum state, which implements qubit encoding of an observable to be measured (observable), e.g., as defined in equation (6) below Qubit encoding of the term in (a). The control system 102 may then perform measurements to obtain corresponding measurement results. The control system 102 may repeat the state preparation, quantum circuit application, and measurement steps multiple times to obtain multiple measurements. The control system 102 may then cause the classical processor 110 to post-process the measurement results and calculate the desired values of the parameter values. Control system 102 may repeat this process for each parameter value until multi-body qubit operator a can be fully specified.
In stage (C), the control system performs a quantum computation process to calculate an evolution time for the iteration. For example, control system 102 may calculate the evolution time λ by calculating first and second derivatives of elements of the iterative two-electron reduced density matrix, as described below with reference to equations (9) through (13). To calculate the derivative, control system 102 performs classical and quantum operations similar to those described above with reference to stage (B). For example, to calculate the first derivative of the 2-RDM element, control system 102 may prepare a copy of the iterative input quantum state. The control system 102 may then apply a quantum circuit that implements the qubit encoding of the observable to be measured, such as the qubit encoding of the items in the observable. The control system 102 may then take measurements to obtain corresponding measurements. The control system 102 may repeat the state preparation, quantum circuit application, and measurement steps multiple times to obtain multiple measurements. The control system 102 may then cause the classical processor 110 to post-process the measurement results and calculate the desired values of the parameter values. The control system 102 may repeat this process for the term in equation (13) until the evolution time λ can be fully specified.
In stage (D), control system 102 uses the calculated parameter values and the evolution time to evolve the iterative input quantum states. For example, the control system 102 can compare the unitary operator u=e iAλ Applied to the iterative input quantum states to evolve the input quantum states and generate corresponding output quantum states. In some implementations, the control system 102 can compare data specifying a unitary operator for iterationStored in a cache, for example, to help prepare a copy of the input quantum state as part of stages (B) and (C) in the next iteration.
If the iteration is the first iteration, then the input quantum state is the initial quantum state |ψ 0 >While the output quantum state is an evolving quantum stateFor the j-th subsequent iteration, the input quantum state is the output quantum state |ψ of the previous (j-1) th iteration j-1 >While the output quantum state is the evolution quantum state +.>Control system 102 may iteratively perform stages (B) through (D) until a predetermined number of iterations have completed or until the output quantum state converges within a predetermined convergence threshold. The predetermined convergence threshold may vary based on the target accuracy of the final output state, e.g., a smaller convergence threshold may yield a more accurate final output state.
When the iterative process terminates, quantum computing system 100 may provide the target quantum state for a subsequent quantum computing process. In some implementations, the quantum computing system 100 may store data representing a unitary operator (e.g., a unitary operator defined in equation (8) below) for evolving an initial quantum state to a target quantum state. Next, when the quantum computing system 100 needs a copy of the target quantum state (e.g., to perform a quantum computing process), the quantum computing system may retrieve data representing the unitary operator and apply the unitary operator to the initial quantum state.
Example procedure for preparing target stable Quantum states
Fig. 2 is a flow chart of an example process 200 for preparing a target quantum state. For convenience, process 200 will be described as being performed by a system including classical and quantum computers. For example, system 100 of fig. 1, suitably programmed in accordance with the present description, may perform process 200.
The target quantum state may be a ground state or an excited state of a quantum system characterized by the hamiltonian H. The target quantum state is a stable quantum state. For example, the target quantum state may be stable with respect to a parameterized multi-volumetric qubit operator (e.g., a rotating generator) and satisfy a stability condition given by:
<ψ|[G,H]|ψ>＝0 (1)
Where |ψ > represents a target quantum state, H represents a hamiltonian that characterizes the quantum system, and G represents a parameterized multi-body qubit operator, i.e., the expected value of the parameterized multi-body qubit operator for the easy (communicator) and target quantum states, for the hamiltonian is zero. These stability conditions are first order stability conditions of the energy of the quantum system with respect to the variation of the parameters of the multi-volumetric qubit operator.
In some embodiments, the parameterized multi-volumetric qubit operator may be a fermi-sub-bi-volumetric qubit operator. For example, the fermi-son binary qubit operator can be given by:
where i, j, k, l are indices representing the quantum system orbits, θ represents the real-valued coefficient, anda k representing creation and annihilation operators. The associated energy may be given by:
E(Θ)＝<ψ|e -Θ He Θ |ψ> (3)
where |ψ > represents the target quantum state and H represents the hamiltonian characterizing the quantum system. The application of the Baker-Campbell-Hausdorff (BCH) expansion and differentiation at Θ=0 gives
This indicates that the first order stable condition is for the phonon relationship.
In embodiments of the present disclosure, a parameterized multi-volumetric qubit operator may be represented by operator a whose coefficients are represented by a given some experimental state |ψ as shown below T >Stability condition of (c) determines:
as the BCH spreads out, such an operator applied to the trial state for a period of time λ will evolve the state in such a way that energy is minimized and stability is approximately met. This is because the BCH expansion can be regarded as taylor expansion of the desired value with respect to the rotation parameter. Proper selection of λ will minimize the low order taylor expansion. Determining the amount of time λ for the evolution state is an important step of the example process 200.
For convenience, the remainder of the description of the example process 200 is described with reference to the case of a particle conservation fermi generator (multi-body qubit operator), where the stability equation given at equation (1) is the brillouin condition (Brillouin conditions). In this case, there is no limitation on the coefficients for the binary fermi generatorA stability condition, wherein n represents the number of spin orbit basis functions. Example process 200 is for constructing a target quantum state |ψ using a quantum computer to satisfy these conditions f >. This can be achieved by: from the initial state |ψ i >Initially, the gradient is calculated using equation (4) and evolves for a period of time λ i So that the next iteration |psi i+1 >With a smaller residual value for the gradient, i.e. a gradient descent is performed on the wave function. Mathematically, the sequence is expressed as
Wherein A is i Representing a multi-volumetric qubit operator evaluated using the parameters of the current iteration i.
Due to the nonlinear dependence of the objective function on the rotation angle, a plurality of evolution steps are required. That is, the i-th state |ψ i >By transforming the i-1 st state |psi i-1 >The i-1 th state is generated by transforming the i-2 nd state |psi i-2 >Generated, etc. That is, the target quantum state is represented by a wave function transformation sequence given by:
wherein lambda is i Represents the evolution time for iteration i, A i Representing a multi-volumetric qubit operator with parameter values for iteration i, and |ψ 0 >Representing an initial quantum state.
In each iteration, a gradient operator based on equation (4) is obtained from the current iteration, and λ for the current iteration is determined i . The conventional procedure is to perform a line search optimization solution for λ so that energy is minimized. However, by approximating the hessian function via short-time propagation through the cumulatively reconstructed 2-RDM, the variational search or line search correlation can be eliminated by solving for the second-order BCH expansion.
The above equations (1) to (8) track energy<ψ i |H|ψ i >How to evolve with respect to the operator given by equation (4). However, by checking all n of the 2-RDM 4 How the elements evolve, where n is the number of spin orbit basis functions, a similar quadratic approximation of their values at the ith wave function can be obtained by truncating the BCH expansion to second order. For example, all n of 2-RDM 4 The individual elements being denoted as D i The BCH is unfolded to 2 nd order to obtain
Wherein prime and bipprime representations relate to lambda i-1 Is a derivative of (a). Each of the 2-RDM terms at i can be approximated by a BCH expansion.
This specifies that the first derivative of all 2-RDM elements has the following form
Thus, the task becomes the task of minimizing the quadratic function and depends only on the gradient of the 2-RDM at step i-1 and the approximated Heisen function.
In equation (13), λ i-1 Representing the evolution time for iteration i-1, H representing the Hamiltonian characterizing the quantum system, D' i-1 First derivative of element representing iterative two-electron reduced density matrix, and D' i-1 The second derivative of the element of the two-electron reduced density matrix representing the iteration. Inner product<H|D′ i-1 >And<H|D″ i-1 >the matrix representation of the Hamiltonian coefficient tensor is the Hilbert-Schmitt inner product between the 2-RDM first and second derivatives, respectively. Thus, the evolution time step for iteration i-1 is divided by the negative value of the Hilbert-Schmitt inner product between the Hamiltonian and the first derivative of 2-RDM, by the Hilbert-Schmitt inner product between the Hamiltonian and the second derivative of 2-RDM Given.
In other words, use D i Is used to represent all expected values of the 2-RDM (i.e., equation (10)) formed as matrix variables, the first and second derivatives of all 2-RDM elements are defined as D 'respectively using equation (11)' i-1 And D' i-1 . These are matrices of all coefficients corresponding to the first and second derivatives of the corresponding 2-RDM element. Next, the best time evolution step determined from the quadratic approximation of the similarity transformation to the 2-body operator can be expressed as equation (13), where<H|D′ i-1 >And<H|D″ i-1 >is the hilbert-schmitt inner product between the matrix representation of the tensor of the coefficients of the hamiltonian and the 2-RDM derivative.
The determination of the optimal time step uses Hilbert-Schmitt inner products between O (N≡4) sized matrices that are not large quantum states in index. They can be determined efficiently.
The cumulative expansion can be used to evaluate the derivative to obtain the parameter lambda i-1 Is indicative of the approximation along gradient term a i-1 How much evolves. A classical version of this theory propagates the inverse hermite shrink schrodinger equation (ACSE), however, it suffers from imprecise 2-RDM evolution and error accumulation. The quantum version of the presently described algorithm alleviates this problem.
In view of equations (1) through (13) above, the example process 200 may proceed as follows. The system prepares an initial quantum state |ψ 0 >As described in equation (8) above (step 202). The initial quantum state may be selected to be non-orthogonal to the target quantum state. The system then iteratively evolves the initial quantum state and subsequent quantum states until an approximation of the target stable quantum state is obtained (step 204). The accuracy of the approximation may depend on a predetermined acceptable accuracy, e.g. based on a predetermined convergence threshold.
In each iteration, the system performs a quantum computation process to compute parameter values for the iterative multi-volumetric qubit operator (step 204 a). That is, the system calculates the parameter value A given in equation (6) ijki To define for iteration A i Multi-body qubit operators of (a).
In addition, in each iteration, the system performs a quantum computation process to calculate the evolution time for the iteration (step 204 b). Calculating the evolution time for the iteration includes evaluating a first derivative and a second derivative of elements of the iterative two-electron reduced density matrix, for example, using a cumulative expansion. That is, the system performs a function for determining λ according to equation (13) above i Is a measurement operation of (a).
Once it has been calculated for iteration a i Parameter values of multi-volumetric qubit operators and for iterating lambda i The system evolves the initial quantum state or subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the input quantum state of the next iteration (step 204 c). That is, the system evolves an initial quantum state or a subsequent quantum state by equation (7) above.
For a completely general purpose i This is prohibitively expensive. As described above, at A i Is present in (a)A term. In general, the gradient will not be full rank, and thus, in some embodiments, a i The time evolution under can be controlled by A i Is approximated by a low rank double factorization in which a large number of terms are truncated. This can greatly reduce implementation a compared to precise twin spin which minimizes energy i The depth of the circuit required for evolution. Each low rank decomposition may be implemented on a linear lattice of qubits with linear depth. In some implementations, a will be low rank, and thus very little O (n) depth circuitry will be required to implement the tolteroized (Trotterized) version of a. This also obeys spin blocking because a is built by examining the rotation in each dual electron spin sector { alpha, beta, alpha beta }. The highest l rank of each component can then be evolved by a low rank decomposition scheme. Because of the low rank nature of a, very few factors will need to be implemented.
In other embodiments, the system may approximate a by performing unitary compression of multi-volumetric qubit operators i Time evolution ofWherein unitary compression represents the multi-volumetric qubit operator at the calculated parameter values in the form of a sum of squares. Techniques for compressing multi-volumetric operators are described below.
Optimizing compressed multi-body operators with continuous tracks
The general tensor associated with the non-positive semi-definite operator may be decomposed into the sum of squares of the standard (normal) operator and follows the fermi Gao Siyou and n 2 The evolutionary of the isooctyl interaction operator (Ising interaction operators) in which the coefficient matrix of the Xin Suanzi is rank one. The cost of implementing such an operator is proportional to the number of square standard operators required to represent the operator. Conventional techniques attempt to reduce this amount by increasing the rank of the coefficient matrix of i Xin Suanzi. In some cases, the compressed binary operator is a least squares fit coulomb interaction (Coulomb interaction) term. The disadvantage of this approach is the large number of free parameters and the large number of optimization steps required to fit the tensors.
The present disclosure generalizes to the case of generic binary operators and provides a greedy approach that naturally results in fewer variables. This is achieved by looking for single-particle groups in sequence, such that A is directed to n i n j The individual terms have large coefficients. This component is then eliminated, leaving a residual tensor. This process is repeated until the remainder is numerically zero or the norm (norm) is below a preset threshold. This greedy approach always guarantees convergence. A byproduct of this process is J above rank 1 ij (l) A matrix.
Consider the monomer conversion of the generator. Given binary generator
The orbital rotation generator is represented as follows
So that the following is causedN of (2) i n j The goal of coefficient maximization of the components can be expressed as
For optimization, a gradient is employed that produces the following formula:
to calculatePartial derivatives of the coefficients relative to the parameters of the generator κ are derived first of all +.>The form of (2):
wherein G is ab Is the inverse hermite operator obtained from the formula of Du Hamei (Wilcox) (Duhamel's (Wilcox)) for differentiating against: parameter kappa a,b And
its use
Thus, the first and second substrates are bonded together,
which may be represented by the formula O (n 5 ) Wherein n represents the number of spin orbits. When the real component and the imaginary component are considered, n in total exists 2 κ ab Individual items, and therefore in naive O (n 7 ) The total derivative is obtained in operation.
This method of obtaining the gradient is dependent onIs generic and sufficient. Universal scaling can be reduced by taking into account the function being optimized and applying the chain law. To understand how this works, consider the relative kappa ab Differentiating equation (15)
Wherein the method comprises the steps of
For all { c, d }, it is that each full derivative call is scaled at O (n 5 ) Is obtained once. n is n 2 The intermediates (intermediates) are reused for each kappa ab And (3) derivative. Thus, the overall expansion is O (n 5 ). Using Du Hamei or Wilkects identity, the unitary or its partial derivative of the Hermite conjugate is
This is all the same as O (n 7 ) The extended method is checked to be consistent with equation (24)Multiply and sum { c, d } back to the appropriate term in equation (21).
Kappa=0 gradient calculation
An example method for calculating the derivative is by updatingIs such that->Relative to kappa ab The gradient of (c) is always calculated around k=0. The first taylor expansion is to be known about κ=0 using BCH expansion>
Now, with respect to kappa ab The derivative of (c) results in the kronecker sign function reducing the complexity of the summation from fourth order to third order
This translates into copying the appropriate t coefficients into a new tensor to represent the gradient. After the BCH is expanded to second order and the derivative that produces the kronecker sign function is evaluated, the hessian function can be calculated in a similar manner.
Recursively fitting binary generator
Above, n is described for the binary operator i n j Objective function and gradient of component maximization. Using this infrastructure, recursive techniques for generating compressed binary operators are introduced. Starting from the target operator T, equation (16) is maximized to obtain a base, such that n i n j The coefficients are largest in magnitude. These coefficients are selected and stored with the kappa rotation. The operator represented by the diagonal coefficients is rotated back to the original base along with the kappa obtained from the optimization and then the tensor is subtracted from the original base to generate the remainder. This process is repeated until the norm of the remainder of the subtraction is small and below a predetermined threshold. With this approach, the cost of optimization never exceeds continuous track optimization. If the optimization is seeded with a rotation generated from the homowood decomposition (Takagi decomposition), then the process is guaranteed to be convergent.
Example operating Environment
Fig. 3 depicts an example classical/quantum computer 300 for performing some or all of the classical and quantum operations described in this specification. The example classical/quantum computer 300 includes an example quantum computing device 302. Quantum computing device 302 is intended to represent various forms of quantum computing devices. The components shown herein, their connections and relationships, and their functions, are meant to be exemplary only, and are not limiting of the embodiments of the invention described and/or claimed in this document.
The example quantum computing device 302 includes a qubit component 352 and a control and measurement system 304. The qubit component includes a plurality of qubits, such as qubit 306, for performing arithmetic operations or quantum computing processes. Although the qubits shown in fig. 3 are arranged in a rectangular array, this is depicted schematically and is not intended as a limitation. Qubit assembly 352 also includes an adjustable coupling element, such as coupler 308, that allows for interaction between coupled qubits. In the schematic depiction of fig. 3, each qubit is adjustably coupled to each of its four neighboring qubits by means of a respective coupling element. However, this is an example arrangement of qubits and couplers, and other arrangements are possible, including non-rectangular arrangements, arrangements that allow coupling between non-adjacent qubits, and arrangements that include adjustable coupling between more than two qubits.
Each qubit may be a physical two-stage quantum system or device having levels representing logical values 0 and 1. The specific physical implementation of the plurality of qubits and how they interact with each other depends on a variety of factors, including the type of quantum computing device 302 included in the example computer 300 or the type of quantum computing process being performed by the quantum computing device. For example, in an atomic quantum computer, qubits may be implemented via atomic, molecular, or solid state quantum systems (e.g., ultra-fine atomic states). As another example, in a superconducting quantum computer, a qubit may be implemented via a superconducting qubit or a semiconducting qubit (e.g., a superconducting transport sub-state). As another example, in NMR quantum computers, qubits may be realized via nuclear spin states.
In some implementations, the quantum computing process may be performed by loading the qubits from a quantum memory and applying a unitary operator sequence to the qubits, for example. Applying unitary operators to qubits may include applying corresponding sequences of quantum logic gates to qubits, e.g., to implement quantum algorithms, such as quantum principle component algorithms. Example quantum logic gates include single-qubit gates, such as Pauli-X, pauli-Y, pauli-Z (also known as X, Y, Z); hadamard (Hadamard) gates; s door; rotary, double qubit gates, e.g., controlled X, controlled Y, controlled Z (also known as CX, CY, CZ); controlled NOT gates (also known as CNOTs); controlled switching gates (also known as CSWAPs); and gates involving three or more qubits, such as Toffoli (Toffoli) gates. The quantum logic gate may be implemented by applying control signals 310 generated by control and measurement system 304 to the qubit and coupler.
For example, in some embodiments, the qubits in the qubit component 352 may be frequency tunable. In these examples, each qubit may have an associated operating frequency that may be adjusted by applying voltage pulses via one or more drive lines coupled to the qubit. Example operating frequencies include qubit idle frequency, qubit interaction frequency, and qubit readout frequency. Different frequencies correspond to different operations that the qubit may perform. For example, setting the operating frequency to the corresponding idle frequency may place the quanta in the following states: in this state it does not interact strongly with other qubits, and in this state it can be used to perform single qubit gates. As another example, where qubits interact via couplers with stable coupling, the qubits may be configured to interact with each other by setting their respective operating frequencies at some gate-related frequency that is detuned from their common interaction frequency. In other cases, for example, where qubits interact via tunable couplers, the qubits may be configured to effect interactions between the qubits by setting parameters of their respective couplers, and then to interact with each other by setting the respective operating frequencies of the qubits at some gate-related frequency that is detuned from their common interaction frequency. To perform multi-qubit gates, such interactions may be performed.
The type of control signal 310 used depends on the physical implementation of the qubit. For example, the control signals may include RF or microwave pulses in NMR or superconducting quantum computer systems or light pulses in atomic quantum computer systems.
The quantum computation process may be accomplished by measuring the state of the qubit (e.g., using quantum observables such as X or Z) using the corresponding control signals 310. The measurement causes a read signal 312 representing the measurement result to be communicated back to the measurement and control system 304. Readout signal 312 may include RF, microwave, or optical signals depending on the physical scheme of the quantum computing device and/or qubit. For convenience, control signals 310 and readout signals 312 shown in fig. 3 are depicted as addressing only selected elements (i.e., top and bottom rows) of the qubit assembly, but during operation control signals 310 and readout signals 312 may address each element in the qubit assembly 352.
Control and measurement system 304 is an example of a classical computer system that may be used to perform various operations on qubit component 352 and other classical subroutines or computing processes as described above. Control and measurement system 304 includes one or more classical processors, such as classical processor 314, connected by one or more data buses; one or more memories, such as memory 316; and one or more I/O units, such as I/O unit 318. Control and measurement system 304 may be programmed to send a sequence of control signals 310 to the vector sub-bit assembly, for example, to perform a series of selected quantum gate operations and receive a sequence of readout signals 312 from the quantum bit assembly, for example, as part of performing a measurement operation.
Processor 314 is configured to process instructions for execution within control and measurement system 304. In some implementations, the processor 314 is a single-threaded processor. In other implementations, the processor 314 is a multi-threaded processor. The processor 314 is capable of processing instructions stored in the memory 316.
Memory 316 stores information within control and measurement system 304. In some implementations, the memory 316 includes computer-readable media, volatile memory units, and/or nonvolatile memory units. In some cases, memory 316 may include a storage device capable of providing mass storage for system 304, such as a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), and/or some other mass storage device.
Input/output devices 318 provide input/output operations for the control and measurement system 304. Input/output devices 318 may include D/a converters, a/D converters, and RF/microwave/optical signal generators, transmitters, and receivers to transmit control signals 310 to the qubit components and receive readout signals 312 from the qubit components, as is appropriate for the physical scheme of a quantum computer. In some implementations, the input/output devices 318 may also include one or more network interface devices, such as an ethernet card, a serial communication device (e.g., RS-222 port), and/or a wireless interface device, such as an 802.11 card. In some implementations, the input/output device 318 may include a driver device configured to receive input data and send output data to other external devices (e.g., keyboard, printer, and display devices).
Although an example control and measurement system 304 has been depicted in fig. 3, implementations of the subject matter and functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
The example system 300 also includes an example classical processor 350. According to some embodiments, classical processor 350 may be used to perform classical arithmetic operations described in this specification.
Embodiments of the subject matter and operations described in this specification can be implemented in digital electronic circuitry, analog electronic circuitry, suitable quantum circuitry, or more generally, quantum computing systems, in tangibly embodied software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. The term "quantum computing system" may include, but is not limited to, a quantum computer, a quantum information processing system, a quantum cryptography system, or a quantum simulator.
Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, one or more qubits, or a combination of one or more of them. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is capable of encoding digital and/or quantum information, the artificially generated propagated signal being generated to encode digital and/or quantum information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The terms quantum information and quantum data refer to information or data carried, held, or stored by a quantum system, where the smallest nontrivial system is a qubit, i.e., a system that defines a quantum information unit. It should be understood that the term "qubit" encompasses all quantum systems that may be appropriately approximated in a corresponding context as secondary systems. Such quantum systems may include, for example, multi-stage systems having two or more levels. As examples, such systems may include atoms, electrons, photons, ions, or superconducting qubits. In many embodiments, the operational base state is identified with a ground state and a first excited state, however, it should be understood that other arrangements are possible in which the computing state is identified with a higher level of excited states.
The term "data processing apparatus" refers to digital and/or quantum data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing digital and/or quantum data, including by way of example programmable digital processors, programmable quantum processors, digital computers, quantum computers, multiple digital and quantum processors or computers, and combinations thereof. The device may also be or may also comprise dedicated logic circuitry, such as an FPGA (field programmable gate array), an ASIC (application specific integrated circuit) or a quantum simulator, i.e. a quantum data processing device designed to simulate or generate information about a specific quantum system. In particular, quantum simulators are specialized quantum computers that do not have the ability to perform general quantum computing processes. In addition to hardware, the apparatus may optionally include code that creates an execution environment for digital and/or quantum computer programs, such as code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
The digital computer program(s) may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it may be referred to or described as a program, software application, module, software module, script, or code, and it may be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a digital computing environment. A quantum computer program may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it may be interpreted as or described by a program, software application, module, software module, script, or code, or it may be written in a quantum programming language, such as QCL or quapper.
The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a digital and/or quantum data communication network. A quantum data communication network is understood to be a network in which quantum data can be transmitted using a quantum system (e.g. qubit). In general, digital data communication networks cannot transmit quantum data, however, quantum data communication networks may transmit both quantum data and digital data.
The processes and logic flows described in this specification can be performed by one or more programmable computers, optionally operating in conjunction with one or more processors, to execute one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can be implemented as, special purpose logic circuitry (e.g., an FPGA or ASIC or quantum simulator), or by a combination of special purpose logic circuitry or quantum simulators and one or more programmed digital and/or quantum computers.
For a system of one or more computers, "configured to" perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. For one or more computer programs, being configured to perform a particular operation or action means that the one or more programs include instructions that, when executed by a data processing apparatus, cause the apparatus to perform the operation or action. For example, a quantum computer may receive instructions from a digital computer that, when executed by the quantum computing device, cause the device to perform operations or actions.
A computer suitable for executing a computer program may be based on a general-purpose or special-purpose processor, or any other kind of central processing unit. In general, the central processing unit will receive instructions and data from a read-only memory, a random access memory, or a quantum system adapted to transmit quantum data (e.g., photons), or a combination thereof.
Elements of a computer include a central processing unit for executing or executing instructions and one or more memory devices for storing instructions and digital, analog, and/or quantum data. The central processing unit and memory may be supplemented by, or incorporated in, special purpose logic circuitry or quantum simulators. Generally, a computer will also include one or more mass storage devices (e.g., magnetic discs, magneto-optical discs, or quantum systems suitable for storing quantum information) for storing data, or a computer operably coupled to receive data from the mass storage devices or to transmit data to the mass storage devices, or both. However, the computer need not have such devices.
Quantum circuit elements (also referred to as quantum computing circuit elements) include circuit elements for performing quantum processing operations. That is, quantum circuit elements are configured to utilize quantum mechanical phenomena (such as superposition and entanglement) to perform operations on data in a non-deterministic manner. Some quantum circuit elements, such as qubits, may be configured to represent and operate on information in more than one state at the same time. Examples of superconducting quantum circuit elements include circuit elements such as quantum LC oscillators, qubits (e.g., flux qubits, phase qubits, or charge qubits), and superconducting quantum interference devices (SQUIDs) (e.g., RF-SQUIDs or DC-SQUIDs), among others.
Instead, classical circuit elements typically process data in a deterministic manner. Classical circuit elements may be configured to collectively perform instructions of a computer program by performing basic arithmetic, logic, and/or input/output operations on data represented in analog or digital form. In some embodiments, classical circuit elements may be used to send and/or receive data to and/or from quantum circuit elements through electrical or electromagnetic connections. Examples of classical circuit elements include CMOS circuitry-based circuit elements, fast single-pass quantum (RSFQ) devices, reciprocal Quantum Logic (RQL) devices, and ERSFQ devices, which are energy-efficient versions of RSFQ that do not use bias resistors.
In some cases, some or all of the quantum and/or classical circuit elements may be implemented using, for example, superconducting quantum and/or classical circuit elements. Fabrication of superconducting circuit elements requires deposition of one or more materials, such as superconductors, dielectrics, and/or metals. Depending on the materials selected, deposition processes such as chemical vapor deposition, physical vapor deposition (e.g., evaporation or sputtering), or epitaxial techniques, among other deposition processes, may be used to deposit these materials. The processes described herein for manufacturing circuit elements may require removal of one or more materials from the apparatus during manufacturing. The removal process may include, for example, a wet etching technique, a dry etching technique, or a lift-off process, depending on the material to be removed. Known lithographic techniques (e.g., photolithography or electron beam lithography) may be used to pattern the materials forming the circuit elements described herein.
During operation of a quantum computing system using superconducting quantum circuit elements and/or superconducting classical circuit elements (such as the circuit elements described herein), the superconducting circuit elements are cooled within a cryostat to a temperature that allows the superconductor material to exhibit superconducting properties. A superconductor (alternatively superconducting) material may be understood as a material that exhibits superconducting properties at or below the critical temperature of superconductivity. Examples of the superconducting material include aluminum (the superconducting critical temperature is 1.2 kelvin) and niobium (the superconducting critical temperature is 9.3 kelvin). Thus, the superconducting structure (such as a superconducting trace and a superconducting ground plane) is formed of a material that exhibits superconducting properties at or below a superconducting critical temperature.
In some embodiments, classical circuit elements electrically and/or electromagnetically coupled to quantum circuit elements may be used to provide control signals for quantum circuit elements (e.g., qubits and qubit couplers). The control signal may be provided in digital and/or analog form.
Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile digital and/or quantum memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs; and quantum systems, such as trapped atoms or electrons. It should be appreciated that quantum memories are devices that can store quantum data for long periods of time with high fidelity and high efficiency, for example, light-substance interfaces where light is used to transmit and substances are used to store and preserve quantum features (such as superposition or quantum coherence) of the quantum data.
Control of the various systems described in this specification, or portions thereof, may be implemented in a computer program product comprising instructions stored on one or more non-transitory machine-readable storage media and executable on one or more processing devices. The systems described in this specification, or portions thereof, may be implemented as an apparatus, method, or system, respectively, that may include one or more processing devices and memory for storing executable instructions to perform operations described in this specification.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular implementations. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Thus, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Also, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Furthermore, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (19)
1. A computer-implemented method for preparing a target quantum state of a quantum system, wherein the target quantum state is stable with respect to a parameterized multi-volumetric qubit operator, the method comprising:
preparing an initial quantum state as an input state of a first iteration;
iteratively evolving the initial quantum state and subsequent input quantum states as inputs for subsequent iterations until an approximation of the target stable quantum state is obtained, comprising, for each iteration:
calculating parameter values of the multi-body qubit operator for the iteration through a quantum calculation process;
calculating an evolution time for the iteration by a quantum computation process, including evaluating a change in an element of a two-electron reduced density matrix of the iteration; and
The calculated parameter values and evolution times are used to evolve the initial quantum state or the subsequent input quantum state of the iteration to generate a subsequent input quantum state of the subsequent iteration.
2. The method of claim 1, wherein evaluating the change in the element of the iterative two-electron reduced density matrix comprises evaluating a first derivative and a second derivative of the element of the iterative two-electron reduced density matrix.
3. The method of any of claims 1 or 2, wherein calculating an evolution time for the iteration by a quantum computing process comprises calculating
Wherein lambda is i Representing the evolution time for iteration i, H representing a Hamiltonian characterizing the quantum system, D i ′ A first derivative of an element of the two-electron reduced density matrix representing the iteration, and D i "represents the second derivative of the elements of the two-electron reduced density matrix of the iteration.
4. A method according to any one of claims 2 or 3, wherein evaluating the first and second derivatives of the elements of the two-electron reduced density matrix of the iteration comprises using a cumulative expansion.
5. A method according to any preceding claim, wherein calculating parameter values for the multi-volumetric qubit operator for the iteration by a quantum computation process comprises performing a measurement of 3-RDM.
6. The method of any preceding claim, wherein evolving the initial quantum state or a subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the input quantum state of the subsequent iteration comprises approximating a temporal evolution of the multi-volumetric qubit operator at the calculated parameter values using low-rank double factorization.
7. The method of claim 6, wherein low rank decomposition is implemented on a linear lattice of qubits with linear depth.
8. The method of any of claims 1-5, wherein evolving the initial or subsequent input quantum state of the iteration using the calculated parameter values and evolution time to generate the subsequent iteration input quantum state comprises approximating a temporal evolution of the multi-volumetric qubit operator at the calculated parameter values using unitary compression of the multi-volumetric qubit operator.
9. The method of claim 8, wherein the unitary compression of the multi-volumetric qubit operator represents the multi-volumetric qubit operator at the calculated parameter values in a sum of squares form.
10. The method of any preceding claim, wherein the target stable quantum state comprises a ground state or an excited quantum state.
11. A method according to any preceding claim, wherein the initial quantum state is not orthogonal to the target quantum state.
12. The method of any preceding claim, wherein the target quantum state comprises a state of a quantum system characterized by a hamiltonian, and wherein the target quantum state satisfies a stability condition given by:
<ψ|[G,H]|ψ>＝0，
where |ψ > represents the target quantum state, H represents the hamiltonian characterizing the quantum system, and G represents the parameterized multi-volumetric qubit operator.
13. The method of claim 12, wherein the stability condition comprises a first order stability condition of energy relative to a change in a parameter of the multi-volumetric qubit operator.
14. The method of any preceding claim, wherein the parameterized multi-volumetric qubit operator comprises a fermi-sub-binary qubit operator.
15. The method of claim 14, wherein the fermi-son-two-body qubit operator consists ofGiven, where i, j, k, l are indices representing quantum system orbits, θ represents real-valued coefficients, and +.>a k Represents creation and annihilation operators, and the associated energy is represented by E (Θ) = <ψ|e -Θ He Θ |ψ>Given, wherein |ψ>Representing the target quantum state, H represents the hamiltonian characterizing the quantum system.
16. A method according to any preceding claim, wherein the target quantum state is represented by a wave function transformation sequence given by:
wherein lambda is i Represents the evolution time for iteration i, A i Representing the multi-volumetric qubit operator with parameter values for iteration i, and |ψ 0 >Representing the initial quantum state.
17. A system for operating a quantum computer, the system comprising:
one or more processors;
one or more I/O devices coupled to the one or more processors and configured to send control signals to and receive readout signals from the quantum computer; and
one or more memories having stored thereon computer readable instructions configured to cause the one or more processors and the one or more I/O devices to perform the method of any of claims 1-16 using the quantum computer.
18. The system of claim 17, further comprising the quantum computer.
19. A non-transitory computer-readable medium storing instructions for execution by one or more computers configured to send control signals to a quantum computer and receive readout signals from a quantum computer, the instructions causing the one or more computers to use the quantum computer to perform the method of any one of claims 1-16.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163222533P | 2021-07-16 | 2021-07-16 | |
US63/222,533 | 2021-07-16 | ||
PCT/US2022/037304 WO2023080935A2 (en) | 2021-07-16 | 2022-07-15 | Iterative preparation of stationary quantum states using quantum computers |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117642754A true CN117642754A (en) | 2024-03-01 |
Family
ID=85037916
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280049949.3A Pending CN117642754A (en) | 2021-07-16 | 2022-07-15 | Iteratively preparing stable quantum states using a quantum computer |
Country Status (6)
Country | Link |
---|---|
US (1) | US20230030423A1 (en) |
EP (1) | EP4352663A2 (en) |
CN (1) | CN117642754A (en) |
AU (1) | AU2022382627A1 (en) |
CA (1) | CA3225821A1 (en) |
WO (1) | WO2023080935A2 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116702915B (en) * | 2023-08-07 | 2023-11-03 | 深圳量旋科技有限公司 | Multi-quantum bit quantum pulse control method, device and system |
CN117497071A (en) * | 2023-11-02 | 2024-02-02 | 正则量子(北京)技术有限公司 | Method and device for determining stable conformation of drug molecule through quantum computation |
-
2022
- 2022-07-15 CN CN202280049949.3A patent/CN117642754A/en active Pending
- 2022-07-15 WO PCT/US2022/037304 patent/WO2023080935A2/en active Application Filing
- 2022-07-15 CA CA3225821A patent/CA3225821A1/en active Pending
- 2022-07-15 EP EP22879577.9A patent/EP4352663A2/en active Pending
- 2022-07-15 AU AU2022382627A patent/AU2022382627A1/en active Pending
- 2022-07-18 US US17/867,182 patent/US20230030423A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
CA3225821A1 (en) | 2023-05-11 |
AU2022382627A1 (en) | 2024-01-25 |
WO2023080935A3 (en) | 2023-08-10 |
US20230030423A1 (en) | 2023-02-02 |
WO2023080935A9 (en) | 2023-07-13 |
EP4352663A2 (en) | 2024-04-17 |
WO2023080935A2 (en) | 2023-05-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11593696B2 (en) | Frequency tunable qubit control strategy | |
US11651263B2 (en) | Nonlinear calibration of a quantum computing apparatus | |
US11551133B2 (en) | Preparing correlated fermionic states on a quantum computer | |
Borzì et al. | Formulation and numerical solution of quantum control problems | |
CN117642754A (en) | Iteratively preparing stable quantum states using a quantum computer | |
US8315969B2 (en) | Estimating a quantum state of a quantum mechanical system | |
CN112368722A (en) | Estimating energy levels of a physical system | |
WO2020033481A1 (en) | Variational quantum state preparation | |
AU2021364446B2 (en) | Quantum computing with kernel methods for machine learning | |
CN112368721A (en) | Dual quantum bit gate implemented with tunable coupler | |
JP2024515802A (en) | Quantum Data Processing System | |
Willsch | Supercomputer simulations of transmon quantum computers | |
AU2023282270A1 (en) | Measuring quantum state purity | |
EP4200767A1 (en) | Quantum generative adversarial networks with provable convergence | |
Kuznetsova et al. | Exact solutions in the dynamics of alternating open chains of spins s= 1/2 with the XY Hamiltonian and their application to problems of multiple-quantum dynamics and quantum information theory | |
KR20210120869A (en) | Method, apparatus and computer program product for determining the component of a magnetic field in a predetermined direction | |
US20230385674A1 (en) | Enhanced classical shadows using matchgate quantum circuits | |
KR20240020733A (en) | Performing unbiased fermion quantum Monte Carlo calculations using quantum computers and shading tomography | |
Lami | Pushing the boundaries of Matrix Product States in quantum many-body physics and computing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |