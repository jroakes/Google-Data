US7818632B2 - Code-word list algorithm - Google Patents
Code-word list algorithm Download PDFInfo
- Publication number
- US7818632B2 US7818632B2 US11/427,057 US42705706A US7818632B2 US 7818632 B2 US7818632 B2 US 7818632B2 US 42705706 A US42705706 A US 42705706A US 7818632 B2 US7818632 B2 US 7818632B2
- Authority
- US
- United States
- Prior art keywords
- error
- bits
- candidate
- sequence
- sequences
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/004—Arrangements for detecting or preventing errors in the information received by using forward error control
- H04L1/0056—Systems characterized by the type of code used
- H04L1/0061—Error detection codes
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/45—Soft decoding, i.e. using symbol reliability information
- H03M13/451—Soft decoding, i.e. using symbol reliability information using a set of candidate code words, e.g. ordered statistics decoding [OSD]
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/45—Soft decoding, i.e. using symbol reliability information
- H03M13/458—Soft decoding, i.e. using symbol reliability information by updating bit probabilities or hard decisions in an iterative fashion for convergence to a final decoding result
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/004—Arrangements for detecting or preventing errors in the information received by using forward error control
- H04L1/0045—Arrangements at the receiver end
- H04L1/0054—Maximum-likelihood or sequential decoding, e.g. Viterbi, Fano, ZJ algorithms
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/09—Error detection only, e.g. using cyclic redundancy check [CRC] codes or single parity bit
Definitions
- the invention relates to relates to reducing bit errors in communications systems. Specifically, the invention relates to reducing bit errors by using probable code-words and code-word complexity reduction.
- Channel coding is used to ensure the reliable transfer of information.
- the radio link performance is poor except under the most benign conditions.
- performance can be significantly improved by utilizing the CRC error detecting code in conjunction with the soft valued output of the demodulator for partial error correction.
- a single most-likely bit sequence is obtained from the demodulator (frequently, a Maximum Likelihood Sequence Estimator [MLSE] equalizer or other advanced receiver). This bit sequence is checked for error-detection using a CRC decoder. The received frame is declared error-free if the CRC check succeeds (i.e. the syndrome is zero). Otherwise, the frame is said to be in error.
- the demodulator frequently, a Maximum Likelihood Sequence Estimator [MLSE] equalizer or other advanced receiver.
- FIG. 1 presents a method for determining a received data sequence using code-words and complexity reduction.
- FIG. 2 presents a method for generating code-words for possible candidate sequences in the invention.
- FIG. 3 presents a method for decoding a received sequence using a decoder and a list of candidate data sequences.
- FIG. 4 presents a method for generating code-words using permutations of possible error bits in a candidate sequence.
- FIG. 5 presents a method for reducing the computational complexity of the decoding process.
- FIG. 6 presents another method for reducing the computational complexity of the decoding process.
- FIG. 7 presents a communications device for reducing bit errors using the method shown in FIG. 4 .
- FIG. 8 presents a communications device for reducing bit errors using the methods shown in FIGS. 5 or 6 .
- the application presents a system for decoding a bit sequence by producing more than one possible estimated bit sequence (i.e., a list of sequences) in systems without error-correction coding.
- the error-detecting code is used to either select the correct sequence or reject all sequences.
- the list of possible sequences is generated in a manner that takes advantage of the structure of typical error-detecting coding schemes.
- the current application is applicable to un-coded systems as well as coded systems.
- FIG. 1 depicts a method for reducing errors in a data sequence 100 .
- a data sequence is transmitted by a transmitter employing some form of data coding, which includes error-detecting coding.
- the data sequence may be encoded with an error-correction coding, but error-correction coding need not be present. In fact, the system is configured to process the data sequence without error-correction coding.
- the transmitted data sequence is received by the system 101 .
- the data sequence may include one or more bits. As a consequence of transmission across a channel, the data sequence may have error bits in the data sequence. These error bits must be detected to decode the data sequence transmitted by the transmitter.
- the method next generates a list of most-likely transmitted data sequences 102 .
- most-likely transmitted data sequences are generated based on the bit sequence decoded from the transmitted data sequence.
- the most-likely transmitted data sequences are generated based on pre-selected parameters defining a likely number of error bits in the data sequence.
- the sequences are generated in order of decreasing likelihood or equivalently, increasing weight of an error vector with respect to the demodulated data sequence.
- the generated most-likely transmitted data sequences are then input to a decoder for processing 103 .
- a typical decoder may be a cyclic redundancy check (CRC) decoder.
- the decoder determines if a sequence has bit errors 104 . If there are no sequences without error bits in the decoded sequence, the method may declare an error 104 . If the decoder processes a sequence with no errors, the method may select this first sequence with no errors as the most-likely transmitted sequence 104 .
- FIG. 2 presents the details of the demodulation process depicted in 100 .
- a transmitted data sequence which may include one or more data bits, is received by the system 201 .
- the system may then demodulate the received data sequence 202 by assigning values to the received data bits. This may be accomplished by obtaining a soft decision on each of the data bits.
- An example of a soft decision process may include assigning a log-likelihood ratio (LLR) to each of the bits.
- LLR log-likelihood ratio
- a soft decision output process will assign a floating point value to each bit. The magnitude of the floating point number along with the sign of the number will determine the likelihood that the data bit can be assigned a binary value.
- the LLR of the bit expresses this likelihood using a logarithmic scale.
- the method may use the information contained in the LLR's of the bits, specifically generating an ordered list of bits ranked by their LLR from lowest to highest likelihood of correctness of the soft output decision.
- the method next assigns a hard decision output value to the received data bits 203 .
- the bits may be assigned a value of +1 or 0 based on the hard decision output process, using the sign of the received data bit as a determining factor.
- a number of bits, pre-determined by a number L, are selected 204 with the L lowest LLR values determined by the soft output decision process. These L bits are determined by the system as the most likely bits to be in error. In other words, they are the L bits most likely to be incorrect.
- the system could be adapted to correct every possible error in a data sequence. Instead, the system is configured to sacrifice 100% error detection for efficiency and reduced overhead of processing.
- the system next generates a list of possible sequences representing the most-likely received data sequence 205 , based on the number L of possible error bits and the demodulated data sequence.
- the sequences are generated in order of decreasing likelihood, so that the most likely sequences are processed first by the decoder. This allows efficiency of processing and is more likely to select a sequence with no errors.
- the parameter L may be selected by a system designer and pre-programmed in the system, and may vary based on design parameters and system requirements.
- FIG. 3 depicts the processing of the generated candidate sequences by the decoder to determine a most-likely transmitted sequence 300 .
- a list of data sequences is generated by the system for processing by a decoder.
- the decoder is generally a CRC decoder.
- the list of sequences are rank-ordered in order of decreasing likelihood, so that the most likely sequence is processed first 301 .
- This first sequence is evaluated by the CRC decoder 302 . If there is no error 303 in the processed sequence, then the candidate sequence is selected as the most-likely transmitted sequence 304 . If there are errors detected by the CRC decoder 303 , then the system determines if the candidate sequence is the last available sequence in the list of generated candidate sequences 305 .
- the system declares the sequence in error and may request a retransmission 307 of the data sequence from the transmitter. If the candidate sequence is not the last available candidate sequence from the list of generated candidate sequences, then the next candidate sequence from the rank-ordered list of candidate sequences is selected 306 and input to the CRC decoder 302 for evaluation. The method 300 continues until either a candidate sequence is selected as the most-likely transmitted sequence 304 or the CRC decoder cannot find a candidate sequence without errors 305 . Alternatively, the system may not request a retransmission of the data sequence and instead drops the received data sequence and process the next data sequence received by the receiver in the system.
- the list of candidate sequences for processing by the CRC decoder may be determined in several ways, depending on the level of overhead available or desired in the system.
- FIG. 4 presents a simple method of generating the list of sequences, which also requires a large amount of overhead.
- the method 400 assigns a log-likelihood ratio (LLR) 401 to the data bits in the received data sequence using a soft decision process.
- LLR log-likelihood ratio
- a number of bits L, specified by the system 402 are selected based on the LLR of the demodulated data bits in the received data sequence.
- the data bits with the lowest LLR values are rank-ordered and selected accordingly 403 .
- the bits are assigned a hard decision value 404 based on the signs of the demodulated data bits.
- a list of candidate sequences may be generated by taking all the possible permutations of the L most likely error bits 405 . This results in 2 L sequences, since each of the L bits can take a value of +1 or 0. By increasing the value of L, more possible error bits are detected. However, the cost of that efficiency is an exponentially increasing list of candidate sequences to be processed by the decoder.
- the system may incorporate complexity reduction to reduce the number of candidate sequences to be evaluated by the decoder.
- the system may select a subset of the 2 L possible generated sequences by taking advantage of attributes of the CRC encoding/decoding process and the CRC generator polynomial.
- the received data sequence which may represent a code word of a sequence of information bits and an error vector generated by the transmitter's CRC error-detecting coding mechanism, may be evaluated by the CRC decoder in the system.
- a generating polynomial such as in (1.1)
- the nature of the polynomial is such that the number of “1” values in a sequence that fails the CRC decoder (has one or more errors) indicates the number of errors in the data sequence (by evaluating (1.2)). For example, if the number of “1” values in a failed sequence is an even number, this indicates that the number of errors in the sequence is an even number. If the number of “1” values is an odd number, the number of errors is an odd number.
- FIG. 5 depicts a method 500 for reducing the complexity of the generated sequences in this manner.
- a received data sequence is demodulated 501 by the system using a soft output demodulation process.
- a log-likelihood ratio (LLR) is assigned 502 to each bit in the received data sequence.
- the method identifies 503 the L bits with the lowest LLR's, where L is a parameter assigned and encoded in the system.
- a rank-ordered list of possible error bits is selected in the demodulated data sequence.
- the demodulated sequence is input to a CRC decoder 504 for error detection.
- the CRC decoder then processes the demodulated sequence, and if there are no errors detected 504 , then the demodulated sequence is accepted as a most-likely received data sequence 508 .
- the method will generate a list of candidate sequence error vectors to add to the demodulated data sequence 506 .
- the sequences generated will have be rank-ordered in order of increasing error weight (i.e., decreasing likelihood of correctness) so that the sequences are processed by the CRC decoder in order of likelihood of correctness.
- the number of sequences to evaluate is reduced by approximately 50% over the method 400 above, where the number of sequences is the number of permutations 2 L .
- the data sequences with added error vectors are then input one at a time to the CRC decoder 507 for evaluation. If a sequence with even error vector passes (no errors), then that sequence is accepted as the most-likely transmitted data sequence 508 . If the CRC decoder fails the sequence 507 , then the next candidate sequence with error vector is input to the CRC decoder until all of the sequences are exhausted.
- the initial demodulated sequence fails the CRC decoder 504 and the number of errors in the demodulated sequence is an odd number, an identical procedure is followed. Instead, a list of sequence error vectors with odd numbers of possible errors is generated 505 and added to the candidate sequence 505 .
- the sequences generated may be rank-ordered in order of increasing error weight (i.e., decreasing likelihood of correctness) so that the sequences are processed by the CRC decoder in order of likelihood of correctness.
- the number of possible errors in the error vector will be an odd number 505 .
- the method may generate and select error vectors to add to the demodulated sequence with error weights ⁇ 1 ⁇ , ⁇ 3 ⁇ , and ⁇ 5 ⁇ , but not ⁇ 2 ⁇ or ⁇ 4 ⁇ .
- the number of sequences to evaluate is reduced by approximately 50% over the method 400 above where the number of sequences is the number of permutations 2 L .
- the data sequences with added error vectors are then input one at a time to the CRC decoder 509 for evaluation. If a sequence with an odd error vector passes (no errors), then that sequence is accepted as the most-likely transmitted data sequence 508 . If the CRC decoder fails the sequence 509 , then the next candidate sequence with an odd error vector is input to the CRC decoder until all of the sequences are evaluated.
- the number of possible candidate sequences to evaluate may be even further reduced by bounding the possible number of error bits to be evaluated by the CRC decoder.
- This method 600 parallels that presented in 500 .
- a received data sequence is demodulated 601 by the system using a soft output demodulation process.
- a log-likelihood ratio (LLR) is assigned 602 to each bit in the received data sequence.
- LLR log-likelihood ratio
- the method identifies 603 the L bits with the lowest LLR's, where L is a parameter assigned and encoded in the system.
- a rank-ordered list of possible error bits is selected in the demodulated data sequence.
- the demodulated sequence is input to a CRC decoder 604 for error detection.
- the CRC decoder then processes the demodulated sequence, and if there are no errors detected 604 , then the demodulated sequence is accepted as a most-likely received data sequence 608 .
- the method will generate a list of candidate sequence error vectors to add to the demodulated data sequence 606 .
- the sequences generated may be rank-ordered in order of increasing error weight (i.e., decreasing likelihood of correctness) so that the sequences are processed by the CRC decoder in order of likelihood of correctness.
- the number of possible errors in the error vector will be an even number 606 .
- the method will bound the number of possible errors by limiting the number of error vectors by an error weight bound K.
- K may be a number specified by the system, and will always be K ⁇ L.
- the method generates and selects a number of error vectors to add to the demodulated data sequence such that the error vectors have error weight less than or equal to K.
- the data sequences with added error vectors are then input one at a time to the CRC decoder 607 for evaluation. If a sequence with an even error vector passes (no errors), then that sequence is accepted as the most-likely transmitted data sequence 608 . If the CRC decoder fails the sequence 607 , then the next candidate sequence with error vector is input to the CRC decoder until all of the sequences are evaluated.
- the initial demodulated sequence fails the CRC decoder 604 and the number of errors in the demodulated sequence is an odd number, an identical procedure is followed. Instead, a list of sequence error vectors with odd numbers of possible errors generated 605 and added to the candidate sequence 605 .
- the sequences generated may be rank-ordered in order of increasing error weight (i.e., decreasing likelihood of correctness) so that the sequences are processed by the CRC decoder in order of likelihood of correctness.
- the number of possible errors in the error vector will be an odd number 605 .
- the method will bound the number of possible errors by limiting the number of error vectors by an error weight bound K.
- K may be a number specified by the system, and will always be K ⁇ L.
- the method generates and selects a number of error vectors to add to the demodulated data sequence such that the error vectors have error weight less than or equal to K.
- the data sequences with added error vectors are then input one at a time to the CRC decoder 609 for evaluation. If a sequence with an odd error vector passes (no errors), then that sequence is accepted as the most-likely transmitted data sequence 608 . If the CRC decoder fails the sequence 609 , then the next candidate sequence with an odd error vector is input to the CRC decoder until all of the sequences are evaluated.
- the performance improvement achieved by using this method 600 ranges from 2.1 dB to 4.8 dB over the method 500 .
- FIG. 9 compares the performance of this algorithm with that of the prior-art method for different values of L for the CS-4 coding scheme of GPRS with a DARP (Downlink Advanced Receiver Performance) receiver.
- the performance improves with increasing list-size and the gain could be as high as 5.5 dB.
- the complexity of the algorithm increases with L because of the exponentially increasing list-size.
- the system also provides a communications device 700 for reducing bit errors in a data sequence, as shown in FIG. 7 .
- the device 700 may be configured to implement the method indicated in 400 and may include a receiver 703 configured to receive a transmitted data sequence including one or more data bits, where the data sequence is encoded with an error-detecting code.
- the data sequence may be transmitted by a transmitter 701 and transmitted through a channel 702 , which may result in the creation of error bits in the sequence received at the receiver 703 .
- the device 700 may include a demodulator 704 configured to demodulate the data bits in the data sequence based on a decision process. The demodulator 704 may follow the receiver 703 in order to process the data sequence received at the receiver 703 .
- the decision process may be a soft output decision process or a hard output decision process. However, a CRC decoder 708 will process hard output demodulated data sequences.
- the device may also include a likelihood estimator 705 for assigning values to a one or more candidate error bits.
- the likelihood estimator 705 may use a log-likelihood ratio estimator to assign values to the bits in the received data sequence.
- the likelihood estimator 705 may follow the demodulator 704 in order to process the demodulated data sequence after the demodulator 704 .
- the device 700 may include a data sequence generator 706 configured to generate a one or more candidate sequences, in order of increasing error vector weight, based on the number of candidate error bits.
- the sequences may be created by generating a list of candidate sequences, where the number of candidate sequences may be the number of permutations of possible error bits determined by the likelihood estimator 705 , and where the number of possible error bits L may be specified by the system.
- the data sequence generator 706 may follow the likelihood estimator 705 to process the data sequence after processing by the likelihood estimator 705 .
- the device 700 may also include a decoder 708 to process the candidate data sequences created by the data sequence generator 706 .
- the device 700 may include a decoder 708 configured to detect errors in the candidate data sequences.
- the decoder 708 may follow the data sequence generator 706 so that the sequences generated by the data sequence generator 706 may be directly input to the decoder.
- the decoder 708 may further include a complexity reduction module 707 for reducing the number of sequences using a decision process such as described above in 500 or 600 .
- the system also provides a communications device 800 for reducing bit errors in a data sequence, as shown in FIG. 8 .
- the device 800 may be configured to implement the method indicated in 500 or 600 and may include a receiver 803 configured to receive a transmitted data sequence including one or more data bits, where the data sequence is encoded with an error-detecting code.
- the data sequence may be transmitted by a transmitter 801 and transmitted through a channel 802 , which may result in the creation of error bits in the sequence received at the receiver 803 .
- the device 800 may include a demodulator 804 configured to demodulate the data bits in the data sequence based on a decision process. The demodulator 804 may follow the receiver 803 in order to process the data sequence received at the receiver 803 .
- the decision process may be a soft output decision process or a hard output decision process. However, a CRC decoder 808 will process hard output demodulated data sequences.
- the device may also include a likelihood estimator 805 for assigning values to a one or more candidate error bits.
- the likelihood estimator 805 may use a log-likelihood ratio estimator to assign values to the bits in the received data sequence.
- the likelihood estimator 805 may follow the demodulator 804 in order to process the demodulated data sequence after the demodulator 804 .
- the device 800 may include a data sequence generator 808 configured to generate a one or more candidate sequences, in order of increasing error vector weight, based on the number of candidate error bits.
- the sequences may be created by generating a list of candidate sequences, where the candidate sequences may be determined by the number of possible error bits L and an error weighting bound K, which may be specified by the system.
- the data sequence generator 808 may follow the decoder 806 and provide interactive communication with the decoder 806 so that candidate sequences may be iteratively input to the decoder 806 .
- the demodulator ( 704 or 804 ) and LLR estimator ( 705 or 805 ) may be implemented with any standard demodulator architecture, such as a Maximum Likelihood Sequence Estimator [MLSE] equalizer or other advanced receiver/demodulator equivalent.
- the candidate vector sequence generator may be implemented with any standard microprocessor architecture components, and the coding for the sequence generator may be implemented in memory in the sequence generator, firmware, or other memory that may be included with the device ( 700 or 800 ) as implemented.
- the decoder ( 708 or 808 ) may be a cyclic redundancy checking (CRC) decoder, implemented with any standard CRC decoder component or integrated circuit architecture implementing the device ( 700 or 800 ).
- CRC cyclic redundancy checking
- the complexity reduction module ( 707 or 807 ) may likewise be implemented with any standard microprocessor architecture components, and the coding for the sequence generator may be implemented in memory in the sequence generator, firmware, or other memory that may be included with the device ( 700 or 800 ) as implemented.
- the device ( 700 or 800 ) may also provide architecture for accepting a demodulated data sequence as a most-likely transmitted data sequence, rejecting a data sequence as an error, or requesting a retransmission of the received data sequence from the transmitter ( 701 or 801 ).
- This architecture may be in the form of a standard microprocessor architecture, or implemented as coding in the memory or firmware associated with the device ( 700 or 800 ).
- the system presented above may be used in either voice or data communications. Although the algorithm described was illustrated using a CS-4 coding scheme, it is, in general, applicable to any non-coded system.
- the proposal may be integrated into terminals meeting any revision by 3GPP GERAN of the GSM terminal receiver performance specification in accordance with the results of the current 3GPP GERAN DARP (Downlink Advanced Receiver Performance) Feasibility Study. Also, it may also be used in other short-burst communication systems such as IS-54, or EDGE.
- the invention is applicable to a conventional GSM receiver operating on CS4 frames, and does not require DARP capability.
- FIGS. 1-6 may be encoded in a signal bearing medium, a computer readable medium such as a memory, programmed within a device such as one or more integrated circuits, or processed by a controller or a computer. If the methods are performed by software, the software may reside in a memory resident to or interfaced to the device, a communication interface, or any other type of non-volatile or volatile memory interfaced or resident to the network logic.
- the memory may include an ordered listing of executable instructions for implementing logical functions. A logical function may be implemented through digital circuitry, through source code, through analog circuitry, or through an analog source such through an analog electrical, audio, or video signal.
- the software may be embodied in any computer-readable or signal-bearing medium, for use by, or in connection with an instruction executable system, apparatus, or device.
- a system may include a computer-based system, a processor-containing system, or another system that may selectively fetch instructions from an instruction executable system, apparatus, or device that may also execute instructions.
- a “computer-readable medium,” “machine-readable medium,” “propagated-signal” medium, and/or “signal-bearing medium” may comprise any means that contains, stores, communicates, propagates, or transports software for use by or in connection with an instruction executable system, apparatus, or device.
- the machine-readable medium may selectively be, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium.
- a non-exhaustive list of examples of a machine-readable medium would include: an electrical connection “electronic” having one or more wires, a portable magnetic or optical disk, a volatile memory such as a Random Access Memory “RAM” (electronic), a Read-Only Memory “ROM” (electronic), an Erasable Programmable Read-Only Memory (EPROM or Flash memory) (electronic), or an optical fiber (optical).
- a machine-readable medium may also include a tangible medium upon which software is printed, as the software may be electronically stored as an image or in another format (e.g., through an optical scan), then compiled, and/or interpreted or otherwise processed. The processed medium may then be stored in a computer and/or machine memory.
Abstract
Description
p gen(D)=(1+D)(1+D+D 2 +D 3 +D 4 +D 12 +D 13 +D 14 +D 15) (1.1)
Since 1+D is a constituent polynomial of (1.1), the number of possible bit errors could be narrowed based on whether
-
- where r represents the candidate sequence.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/427,057 US7818632B2 (en) | 2005-06-30 | 2006-06-28 | Code-word list algorithm |
PCT/US2006/026027 WO2007005861A1 (en) | 2005-06-30 | 2006-06-30 | Code-word list algorithm |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US69545705P | 2005-06-30 | 2005-06-30 | |
US11/427,057 US7818632B2 (en) | 2005-06-30 | 2006-06-28 | Code-word list algorithm |
Publications (2)
Publication Number | Publication Date |
---|---|
US20070033495A1 US20070033495A1 (en) | 2007-02-08 |
US7818632B2 true US7818632B2 (en) | 2010-10-19 |
Family
ID=37036989
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/427,057 Expired - Fee Related US7818632B2 (en) | 2005-06-30 | 2006-06-28 | Code-word list algorithm |
Country Status (2)
Country | Link |
---|---|
US (1) | US7818632B2 (en) |
WO (1) | WO2007005861A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9543981B2 (en) * | 2014-03-25 | 2017-01-10 | Texas Instruments Incorporated | CRC-based forward error correction circuitry and method |
US20230253985A1 (en) * | 2022-01-27 | 2023-08-10 | Kioxia Corporation | Efficient decoding schemes for error correcting codes for memory devices |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5208816A (en) * | 1989-08-18 | 1993-05-04 | At&T Bell Laboratories | Generalized viterbi decoding algorithms |
EP0609188A2 (en) | 1993-01-25 | 1994-08-03 | Hughes Aircraft Company | Erasure decoder and decoding method for use in a concatenated error correcting scheme for data transmission systems |
US5537440A (en) * | 1994-01-07 | 1996-07-16 | Motorola, Inc. | Efficient transcoding device and method |
EP0998057A1 (en) | 1998-08-20 | 2000-05-03 | Nec Corporation | Mobile telephone system and site diversity reception method |
US6088407A (en) * | 1996-03-04 | 2000-07-11 | Glenayre Electronics, Inc. | Digital diversity receiver system |
US6105158A (en) * | 1998-04-03 | 2000-08-15 | Lucent Technologies, Inc. | Screening for undetected errors in data transmission systems |
US6437719B1 (en) * | 2000-08-18 | 2002-08-20 | Yamaha Corporation | Delta-sigma modulator for power amplification of audio signals |
WO2004040771A1 (en) * | 2002-10-30 | 2004-05-13 | Koninklijke Philips Electronics N.V. | Trellis-based receiver |
US20050108597A1 (en) * | 2003-11-18 | 2005-05-19 | Sanyo Electric Co., Ltd. | Radio communication apparatus suppressing correction error while maintaining communication quality, and method and program for error correction |
-
2006
- 2006-06-28 US US11/427,057 patent/US7818632B2/en not_active Expired - Fee Related
- 2006-06-30 WO PCT/US2006/026027 patent/WO2007005861A1/en active Application Filing
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5208816A (en) * | 1989-08-18 | 1993-05-04 | At&T Bell Laboratories | Generalized viterbi decoding algorithms |
EP0609188A2 (en) | 1993-01-25 | 1994-08-03 | Hughes Aircraft Company | Erasure decoder and decoding method for use in a concatenated error correcting scheme for data transmission systems |
US5537440A (en) * | 1994-01-07 | 1996-07-16 | Motorola, Inc. | Efficient transcoding device and method |
US6088407A (en) * | 1996-03-04 | 2000-07-11 | Glenayre Electronics, Inc. | Digital diversity receiver system |
US6105158A (en) * | 1998-04-03 | 2000-08-15 | Lucent Technologies, Inc. | Screening for undetected errors in data transmission systems |
EP0998057A1 (en) | 1998-08-20 | 2000-05-03 | Nec Corporation | Mobile telephone system and site diversity reception method |
US6437719B1 (en) * | 2000-08-18 | 2002-08-20 | Yamaha Corporation | Delta-sigma modulator for power amplification of audio signals |
WO2004040771A1 (en) * | 2002-10-30 | 2004-05-13 | Koninklijke Philips Electronics N.V. | Trellis-based receiver |
US7197689B2 (en) * | 2002-10-30 | 2007-03-27 | Nxp B.V. | Trellis-based receiver |
US20050108597A1 (en) * | 2003-11-18 | 2005-05-19 | Sanyo Electric Co., Ltd. | Radio communication apparatus suppressing correction error while maintaining communication quality, and method and program for error correction |
Non-Patent Citations (4)
Title |
---|
A. Hafeez, K. J. Molnar, G. E. Bottomley; "Co-channel Interference Cancellation for D-AMPS Handsets"; VTC 1999, vol. 2; pp. 1026-103.1. |
Nambirajan Seshadri, Carol-Erik W. Sundberg; "List Viterbi Decoding Algorithms with Applications"; Feb./Mar./Apr. 1994; pp. 313-323. |
P. Castoldi, R. Raheli, G. Marino; "Efficient Trellis Search Algorithms for Adaptive MLSE on Fast Rayleigh Fading Channels"; CTMC-Globecom, Nov. 1994, Paper CTM06.4. |
Seshadri N et al.: "Generalized Viterbi Algorithms for Error Detections with Convolutional Codes", IEEE Global Telecommunications Conference & Exhibtion, Nov. 27, 1989, pp. 1534-1538. |
Also Published As
Publication number | Publication date |
---|---|
US20070033495A1 (en) | 2007-02-08 |
WO2007005861A1 (en) | 2007-01-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7577899B2 (en) | Cyclic redundancy check (CRC) based error correction method and device | |
JP3239795B2 (en) | Error correction decoding device and error correction decoding method | |
US7716565B2 (en) | Method and system for decoding video, voice, and speech data using redundancy | |
US7093188B2 (en) | Decoding method and apparatus | |
WO1998007247A1 (en) | Decoder utilizing soft information output to minimize error rates | |
US20180351581A1 (en) | System and method for early termination of decoding in a multi user equipment environment | |
US8190964B2 (en) | Decoding method | |
CA2710773A1 (en) | Decoding scheme using multiple hypotheses about transmitted messages | |
EP0446745B1 (en) | Viterbi algorithm outputting a plurality of most probable sequences in descending probability order | |
US7046975B2 (en) | Method and system for blind detection of modulation type | |
US6732321B2 (en) | Method, apparatus, and article of manufacture for error detection and channel management in a communication system | |
US20070033478A1 (en) | System and method for blind transport format detection with cyclic redundancy check | |
US20070153693A1 (en) | Transport format detecting apparatus and method | |
US7818632B2 (en) | Code-word list algorithm | |
US7043678B2 (en) | Method for identifying bad frames | |
US7975212B2 (en) | Sequential decoding method and apparatus thereof | |
Sakunnithimetha et al. | An efficient new ARQ strategy for vector symbol decoding with performance in power line communications | |
JP2002501328A (en) | Method and apparatus for coding, decoding and transmitting information using source control channel decoding | |
CN107579803B (en) | Decoding device including error correction program and decoding method | |
JP6552776B1 (en) | Error correction decoding apparatus and error correction decoding method | |
JPH1022839A (en) | Soft discrimination error-correction decoding method | |
CN110460339B (en) | Method and device for detecting convolutional code decoding, storage medium and electronic equipment | |
JP3256006B2 (en) | Error correction code decoding method and error correction code decoding device | |
KR100551852B1 (en) | Method and system for blind detection of modulation type | |
JP2001339466A (en) | Variable-rate code receiving device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BACHU, RAJA S.;BUCKLEY, MICHAEL E.;STEWART, KENNETH A.;AND OTHERS;SIGNING DATES FROM 20060605 TO 20060620;REEL/FRAME:017854/0941Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BACHU, RAJA S.;BUCKLEY, MICHAEL E.;STEWART, KENNETH A.;AND OTHERS;REEL/FRAME:017854/0941;SIGNING DATES FROM 20060605 TO 20060620 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034448/0001Effective date: 20141028 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552)Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20221019 |