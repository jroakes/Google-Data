US6657565B2 - Method and system for improving lossless compression efficiency - Google Patents
Method and system for improving lossless compression efficiency Download PDFInfo
- Publication number
- US6657565B2 US6657565B2 US10/063,107 US6310702A US6657565B2 US 6657565 B2 US6657565 B2 US 6657565B2 US 6310702 A US6310702 A US 6310702A US 6657565 B2 US6657565 B2 US 6657565B2
- Authority
- US
- United States
- Prior art keywords
- character
- cache
- history buffer
- data
- processing means
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/3084—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction using adaptive string matching, e.g. the Lempel-Ziv method
- H03M7/3088—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction using adaptive string matching, e.g. the Lempel-Ziv method employing the use of a dictionary, e.g. LZ78
Definitions
- the present invention relates in general to computer-aided data compression, and in particular to a high throughput lossless compression technique.
- Data compression methods most of which exploit the redundancy that is characteristic of data streams, have become an essential element of many high speed data communications and storage systems. Data compression is useful in computer-aided communications because it enables devices to transmit the same amount of data in fewer bits.
- a transmitter can compress data before transmitting it, and a receiver can decompress the data after receiving it, thus increasing the effective data rate of the communications channel.
- data can be compressed before storage and decompressed upon retrieval, thereby increasing the effective capacity of a storage device.
- Data compression is widely utilized to reduce required storage capacity in backup utilities, spreadsheet applications, and database management systems.
- Other applications of data compression include magnetic and optical disk interfaces, satellite communications, computer network communications, interconnections between computers and attached devices, tape drive interfaces, and write-once media, where storage capacity is critical.
- Compression techniques can be generally categorized as being either lossless or lossy.
- Lossless data compression transforms a body of data into a smaller body of data from which it is possible to exactly and uniquely recover the original data.
- Lossy data compression transforms a body of data into a smaller body of data from which an acceptable approximation of the original—as defined by a selected fidelity criterion—can be reconstructed.
- Lossless compression is required for applications in which all information in the original stream must be preserved. Such applications include transmission or storage of textual data, such as a printed language, programming language source code or object code, database information, numerical data, and electronic mail. Lossless compression is also utilized for devices such as disk drive controllers that must provide exact preservation and restoration of the object data.
- the encoder can also update the dictionary with an entry based on the current match and the current contents of the dictionary. If insufficient space is available in the dictionary, space is created by deleting strings from the dictionary.
- the decoder operating in a converse manner, receives at its input a set of indices, retrieves each corresponding dictionary entry as a “current match”, and updates its dictionary. Because the encoder and decoder operate in a “lock-step” fashion to maintain identical dictionaries, no additional communication is necessary between the encoder and decoder.
- the input to the encoder is a stream of bytes or characters, and the output is a sequence of pointers.
- the input to the decoder is a stream of pointers and the output is a stream of bytes or characters.
- a recent history of the input data stream may be utilized to process and point to matching sequences within the history.
- the IBM adaptive lossless data compression (ALDC) family of products utilizes a derivative of Lempel-Ziv encoding to compress data.
- Lempel-Ziv algorithm integrates well into systems required to handle many different data types. This algorithm processes a sequence of bytes by keeping a recent history of the bytes processed and pointing to matching sequences within the history. Compression is achieved by replacing matching byte sequences with a copy pointer and length code that together are smaller in size than the replaced byte sequence.
- any given compression method can be evaluated in terms of compression efficiency, throughput, and latency.
- Factors affecting the performance of compression techniques such as ALDC in terms of compression efficiency and latency include data stream content and the size of the history buffer with respect to the amount of data to be compressed.
- ALDC and other LZ 1 -based compression algorithms rely upon a history buffer to perform compression by finding redundant strings.
- a history buffer reset is required. Resetting the history buffer significantly reduces the compression ratio of a segmented data stream. As the segmentation of a given data stream increases (resulting in smaller segments) the compression ratio correspondingly decreases.
- the size of the history buffer relative to the amount of data to be compressed is a limiting factor on the compression ratio of an ALDC compressor. Unmatched symbols are processed in raw form as literals with no compression technique applied thus reducing compression efficiency.
- the performance of ALDC in terms of throughput is ultimately limited by the bandwidth of the compression core device.
- the bandwidth limitation of conventional ALDC cores is one byte per cycle. This one byte per cycle limitation is set in accordance with the compression character increment, which for reasons of compression efficiency, is set to one character (ASCII, for example) per byte.
- ASCII the operational frequency of the core is limited to the system clock.
- ASIC application specific integrated circuit
- the data compression utility compresses a segmented input data stream into independently decompressible data blocks, and includes a history buffer that maintains a history of the data stream.
- a data segment is compressed utilizing a history buffer to identify repeated character sequences within the data segment.
- the method of processing a data segment entails updating the history buffer to include the data of the data segment while maintaining a preselected data set.
- the method of the present invention further includes compressing a data segment utilizing a history buffer to identify repeated character sequences within said data segment.
- an adaptable cache is searched for a matching character in response to identifying a next non-repeating character within the data segment. If a matching character is not found within the adaptable cache, a shadow cache is searched for a matching character. Characters found within the adaptable cache are identified in the compressed data stream through a cache reference.
- a further method to improve compression bandwidth processes data and searches the history buffer with two byte pairs.
- FIGS. 1A-1C are diagrams depicting a conventional Lempel-Ziv technique for compressing data using a relative addressing scheme
- FIG. 2 is a block diagram of a data compressor unit in which a preferred embodiment of the present invention may be incorporated;
- FIG. 3 illustrates compression of a series of data segments into dependently and independently decompressible blocks
- FIG. 4A depicts history buffer contents updated in accordance with a preferred embodiment of the present invention
- FIG. 4B illustrates an output compressed data segment resulting from compression of the updated history buffer contents
- FIG. 4C illustrates an output data segment resulting from double byte compression in accordance with an alternate embodiment of the present invention
- FIG. 4D depicts a comparison of length encoding between single byte encoding and double byte encoding in accordance with a preferred embodiment of the present invention
- FIG. 5 is a flow diagram depicting compression of a series data segments into independently decompressible data blocks in accordance with a preferred embodiment of the present invention
- FIG. 6 is a flow diagram illustrating a history buffer update performed in accordance with a preferred embodiment of the present invention.
- FIG. 7A depicts an adaptive cache that may be utilized to facilitate adaptive lossless data compression in accordance with a preferred embodiment of the present invention
- FIG. 7B illustrates a compressed output block that includes compressed data encoded in accordance with the adaptive cache shown in FIG. 7A.
- FIG. 8 is a flow diagram depicting an adaptive cache update sequence in accordance with a preferred embodiment of the present invention.
- Adaptive Lossless Data Compression is an IBM Corporation proprietary data compression technique implemented within a family of compression products that employs a derivative of Lempel-Ziv encoding to compress data.
- the ALDC algorithm processes a sequence of bytes by maintaining a recent history of the bytes processed and pointing to matching sequences within the history.
- a history buffer is utilized to store the input data stream sequences.
- FIGS. 1A-1C The basic ALDC algorithm is illustrated in FIGS. 1A-1C.
- a history buffer 10 that is N+1 bytes long is utilized to temporarily store previously processed data. If new data to be processed includes a string of data bytes that have been processed before, then a copy pointer including the length and relative address of the previously processed data string in the history buffer will be generated. Generally, the new data which includes such a string of previously processed data bytes can be expressed using fewer bits of information than that contained in the data string itself. Consequently, the data string is effectively compressed. If the new data to be processed does not form part of a previous data string existing in the history buffer, there can be no compression and a copy pointer or copy pointers must be generated to specifically specify this condition.
- FIG. 1B illustrates the generation of a copy pointer referencing previously processed data.
- the values A, B, C, and D were previously processed and are currently stored in the history buffer at addresses 34 , 35 , 36 , and 37 .
- New values to be processed are A, B, C, and E.
- the new data includes the string ABC that has a length of 3 and matches previously stored string ABC at relative address 34 .
- the address is relative with respect to the number of data values subsequently processed.
- FIG. 1C illustrates the generation of a second copy pointer referencing previously stored data.
- the values A, B, C, and Z are to be processed.
- the new data includes the string ABC that has a length of 3 and matches the previously stored string ABC at relative address 34 and N ⁇ 3.
- the copy pointer generated in this example is usually the lower relative address of N ⁇ 3.
- Copy pointers include the count and relative address of the previously processed string and are expressed as (count, relative address).
- the generated processed output will include: ( 3 , 34 ), E, ( 3 , N ⁇ 3), Z.
- FIG. 2 there is depicted a block diagram of a data compression system in which a preferred embodiment of the present invention may be incorporated.
- a compressor unit 52 is coupled to a controller 54 and a content addressable memory (CAM) 56 .
- compressor unit 52 includes an encoder (not depicted) that accepts data bytes from a data source 58 and provides compressed data bytes to a data sink 60 .
- the CAM 56 includes a history buffer 42 for the encoding logic within compressor unit 52 during compression operations.
- the CAM 56 has a selectable history buffer capacity (e.g., 2K, 1K, or 512 byte).
- the CAM 56 further includes an adaptive cache 44 and a shadow cache 46 , which as explained with reference to FIGS. 6, 7 , and 8 facilitate the data matching capability for the compression system.
- Controller 54 stores all permanent logic for the compressor.
- compressor unit 52 receives uncompressed data from data source 58 .
- the compressed data stream is then transmitted to data sink 60 .
- This sink could be a storage device or a communication channel.
- Segmented data In complex systems requiring higher levels of organization, data is separated into smaller, more manageable segments (e.g., packets, records, etc.). Segmented data can be found everywhere, from communications systems in channel service unit/data service units (CSU/DSUs), to networking protocols (Ethernet, Token Ring, and Asynchronous Transfer Mode (ATM)), and even personal computer file systems (hard disks, CD-ROMs, and tape drives). Partitioning the data permits structure to be preserved during compression and compressed data to be multiplexed after compression. Segmented compression generally requires division of the raw data input into fixed-length or variable length segments prior to compression.
- CSU/DSUs channel service unit/data service units
- ATM Asynchronous Transfer Mode
- a data segment from data source 58 is compressed as explained above, by passing it through compressor unit 52 , which, in the context of ALDC, is an ALDC core.
- compressor unit 52 which, in the context of ALDC, is an ALDC core.
- an entire data structure comprising multiple segments may be available for compression.
- the data structure may be compressed as a single block of data. It is important to note two things about compressing a data structure as a single block. First, any boundary within the original data will be indistinguishable in the compressed data. Second, to retrieve any byte within the original data structure, it is necessary to decompress the entire data structure.
- the contents of the history buffer within CAM 56 may either be retained or replaced between segments. If the history buffer contents are retained between segments, the compression efficiency is improved (i.e., compression ratio increases) since data from one segment is utilized as a match against data from a previous segment.
- the compression efficiency is improved (i.e., compression ratio increases) since data from one segment is utilized as a match against data from a previous segment.
- all previous data blocks must be decompressed prior to decompressing a particular data block. In many systems which employ out of order data transmission, however, such retention of sequential compression data is impracticable.
- the present invention provides a system for improving the compression efficiency (i.e., increasing the compression ratio) for relatively small data segments within an input data stream such that the resultant compressed data blocks are independently decompressible.
- the contents of the history buffer within CAM 56 is reset between compression of each data segment.
- the data stream represented in FIG. 3 as original data segments 1 , 2 , 3 , and 4 , which are compressed into corresponding compressed blocks 1 , 2 , 3 , and 4 .
- a history buffer reset is performed prior to compressing data segment into compressed block CB 1 , and also between compression of data segments 3 and 4 into compressed blocks CB 3 and CB 4 .
- CB 2 it will be necessary to decompress both CB 1 and CB 2 , in order.
- CB 4 is independently decompressible.
- the compression ratio achieved by compressor unit 52 is partially a function of history buffer capacity.
- the compression of the next segment is degraded from the loss of history from the previous segment(s).
- the effects of resetting the history buffer to permit independent decompression are magnified, and compression of small independently decompressible data blocks becomes very inefficient.
- FIG. 4A there is depicted a history buffer having contents updated in accordance with a preferred embodiment of the present invention.
- FIG. 4A illustrates a history buffer 6 that includes data bytes 00 through 23 .
- Conventional history buffers are utilized to collect bytes from incoming data segments, which are then cross-compared to find matches required for compression.
- the data loaded into history buffer 61 includes a first section 62 comprising bytes 00 through 11 and a second section 64 comprising bytes 12 through 23 .
- history buffer 61 upon receipt of a next data segment to be compressed, undergoes a bifurcated update aimed at avoiding a total reset of its contents.
- the data included within first section 62 is maintained as a pre-selected data set that is loaded into history buffer 61 prior to compression of one or more subsequent data segments.
- This pre-selected data set may be obtained from one or more previously compressed segments or it may consist of independently selected character sequences.
- the data within second section 64 which was previously loaded from the previous input data segment, is replaced by data from a next-to-be-compressed data segment in a manner similar to conventional history buffer resetting procedures. It is important to note that first section 62 does not include nor is derived from the data within second section 64 .
- the addition of the pre-selected data into history buffer 61 provides additional compression match bytes while avoiding inter-block decompression dependencies.
- next-to-be compressed data segment contained within bytes 12 through 23 is compressed following the above-described update to history buffer 61 .
- the compression algorithm employed by compressor unit 52 compresses data by searching for repeated sequences of characters in byte-wise increments within the contents of history buffer 61 .
- the strings “BC”, “ABC”, and “DRST”, are repeated within history buffer 61 and are thus compressible.
- the single character string “H” is not compressible since its length is not greater than or equal to two.
- the compression process includes the following steps. First, repeated strings (i.e., “BC”, “ABC”, and “DRST”) are identified using known iterative data string comparison algorithmic techniques. Next, the starting address of the first instance of each repeated string is recorded. This address is often referred to as the “displacement.” For repeated strings “BC”, “ABC”, and “DRST”, the displacements are recorded as corresponding to byte positions 01 , 00 , and 08 , respectively. The lengths of each repeated character string is also determined and recorded along with the displacement.
- repeated strings i.e., “BC”, “ABC”, and “DRST”
- FIG. 4B illustrates an output block 65 resulting from compression of the updated history buffer contents in accordance with a preferred embodiment of the invention.
- the compressed data is contained in buffer location positions 00 through 05 , which do not necessarily represent byte positions since compressed data does not fall on byte boundaries.
- the non-repeated (i.e., “raw”) characters “H”, “F”, and “G” are recorded in output block 65 as literals.
- the repeated strings are encoded within output block as copy pointers including the recorded displacement and length values. For example, the repeated string “BC” is recorded in buffer location position 01 as a copy pointer having an encoded displacement 01 and length 2 .
- the pre-selected data maintained within first section 62 is independently stored and thus may be referenced by a decompression utility when output block 65 is decompressed. Thus the content of first section need not be included within output block 65 .
- the bandwidth limitation of conventional ALDC cores is one byte per cycle. This one byte per cycle limitation is set in accordance with the compression character increment, which for reasons of compression efficiency, is set to one byte per symbol (ASCII, for example).
- FIG. 4C there is illustrated an output data segment resulting from double-byte compression in accordance with an alternate embodiment of the present invention.
- the history buffer contents are not addressed in double-byte units.
- the double-byte compression unit will be referred to as a “symbol” with a symbol comprising two bytes. In this manner, double-byte compression entails addressing half-symbol boundaries.
- the compression steps required to compress the contents of history buffer 61 into an output block 63 are as follows. Repeating strings of character pairs (i.e. “HB”, “CF”, etc.) are identified and the history buffer searched for matching pairs. The starting address and length of the first instance of a repeated pair (i.e. “BC”) is then recorded. The length of the string match is recorded as the number of 2-byte pairs contained within the matching string.
- strings of character pairs i.e. “HB”, “CF”, etc.
- the displacement and length pointers are recorded in output block 63 while the non-repeated double-byte units are recorded in output block 63 as literals.
- An additional control code must be utilized to support the half-symbol compression of such double-byte compression. Since the raw data may consist of an odd or even number of data bytes, a control code is required to indicate whether the literal ending the compressed data stream contains one or two valid data bytes. Therefore, for double-byte compression there are two defined control codes: END_MARKER_EVEN and END_MARKER_ODD. When a segment ends with the END_MARKER_ODD control code, the proceeding literal contains only one byte of valid data.
- Segments that end with END_MARKER_EVEN either contain a proceeding literal with two valid data bytes, or a copy pointer.
- the double-byte compression shown in FIG. 4C results in a higher compression throughput at a potential cost of a lower compression ratio than the single-byte compression shown in FIG. 4 B.
- FIG. 4 D A comparison of length encoding between single-byte encoding and double-byte encoding in accordance with a preferred embodiment of the present invention is depicted in FIG. 4 D.
- the unmatched pairs of bytes “HB”, “CF”, and “GA” are recorded as literals with a potential savings of one tag bit per byte pair. Offsetting this savings, is the loss of the string match “BC” encoded under the single-byte compression illustrated in FIG. 4 C.
- the first matched pair in FIG. 4C i.e. “BC”
- the second matched pair i.e. “DR” begins a string of matched pairs and is encoded with a displacement of 08 and length of 02.
- the length encoding in double-byte compression uses the same encoding table as single-byte compression as shown in FIG. 4 D.
- FIG. 5 there is illustrated a flow diagram depicting compression of a series of data segments into independently decompressible data blocks in accordance with a preferred embodiment of the present invention.
- the compression process commences as illustrated at step 66 and continues at step 67 with a pre-selected data set being loaded in a first history buffer section. Proceeding to step 72 , a second history buffer section is reset as described in further detail with reference to FIG. 6 . It should be noted that, depending on the nature of the pre-selected data set described in FIG. 4A, the compression process for the first segment may or may not be identical to the compression of subsequent segments.
- the pre-selected data set is an independently selected character sequence
- compression of the first data segment will proceed identically to compression of subsequent segments with the pre-selected data set maintained in the first history buffer section while the second history buffer section is reset in accordance with the next-to-be-compressed segment. If, however, the pre-selected data set is to be obtained from a previously compressed segment, the pre-selected data set will not be available until one or more segments have been processed and stored within the history buffer.
- a next-to-be-compressed data segment is received and sequentially loaded one byte at a time into the designated second section of the history buffer as illustrated at step 68 .
- the history buffer preload depicted at step 67 may include retaining a previously loaded segment within the designated first (“pre-load”) section of the history buffer where it will be maintained during subsequent compression iterations.
- pre-load the designated first
- the second, “active” section of the history buffer will be updated with each input data symbol until the independently compressed data segment has been processed at which point the second history buffer section will be reinitialized in preparation for the next input data segment.
- each data symbol is loaded and processed in the history buffer, and the next data segment is compressed in accordance with the content of the history buffer which is incrementally updated with each data symbol within the current data segment.
- the segment compression depicted at step 68 (described in further detail with reference to FIG. 6) continues until compression of the entire data segment has been completed.
- the process continues at inquiry step 69 which depicts a determination of whether or not the end of the data stream has been reached. If not, processing of the subsequent data segment commences at step 67 . When the end of the data stream has been reached data stream is reached, the process terminates as illustrated at step 70 .
- FIG. 6 there is depicted a flow diagram illustrating a history buffer update and compression iteration including a more detailed depiction of the process occurring with respect to steps 67 and 68 of FIG. 5 in accordance with a preferred embodiment of the present invention.
- the process begins as depicted at step 75 and proceeds to step 76 , wherein is illustrated the pre-loading of the first section of the history buffer with the pre-selected data set.
- the history buffer has a storage capacity of n bytes, and as shown at step 76 , the designated first section of the history buffer occupies approximately half (byte 0 through byte (n/2 ⁇ 1)) of the history buffer.
- a reset is performed with respect to the remaining portion (second section) of the history buffer such that the contents of the second section are incrementally replaced by part or all of the newly arrived next data segment.
- a history buffer “reset” refers to the process of invalidating the current data within the designated buffer positions locations in preparation for history buffer updates made during processing of a subsequent independently compressible data segment. In the embodiment depicted, this resetting is performed with respect to bytes n/2 through n ⁇ 1 for an n-byte history buffer.
- step 78 depicts setting a write pointer to buffer position n/2 (corresponding to the first position of the second history buffer section). Proceeding to step 79 , the next symbol within a given data segment is loaded into the history buffer position corresponding to the current write pointer setting.
- step 80 a search is conducted on the history buffer contents of all valid bytes contained therein. As illustrated at steps 81 and 83 , if the search results in a match being found for the currently pointed-to history buffer byte, a copy pointer that includes the displacement/length parameters described with reference to FIG. 4B is written to a corresponding compression buffer position wherein the output compression segment block is stored.
- step 84 a determination is made of whether or not compression of the entire data segment has been completed. If so, the compression process for the segment ends (step 87 ). If the end of data segment has not been reached, and as illustrated at step 85 the write pointer is incremented to the next byte position within the second section of the history buffer. As illustrated at step 86 , the foregoing compression steps are repeated for each byte in the second history buffer section until the end of the second section is reached and the write pointer is reset to the beginning of the second history buffer section (step 78 ).
- FIGS. 2 though 6 describe features of the present invention relating to improving adaptive lossless compression by reducing the loss of compression incident to resetting the history buffer.
- Another problem associated with conventional ALDC compression techniques relates to the incomprehensive nature of the history data iamb provided by the history buffers.
- the present invention proposes a cache-assisted ALDC (CAALDC), which as explained in further detail below, provides improved compression efficiency for the search-and-match steps depicted as steps 78 and 79 of FIG. 6 .
- CAALDC cache-assisted ALDC
- adaptive cache 90 that may be utilized to facilitate adaptive lossless data compression in accordance with a preferred embodiment of the present invention.
- adaptive cache 90 is a 64-byte two-dimensional storage space.
- Each of 64 data symbols are mapped within adaptive cache 90 in accordance with a first location parameter (“0” in for all entries in the depicted embodiment) followed by a second location parameter.
- the data symbol “J” corresponds to the mapped location at which column 0 ⁇ overscore (A) ⁇ - 1 intersects row 0 ⁇ overscore (A) ⁇ - 28 .
- the data symbol “J” is represented within a compressed output block by adding the column and row identifiers to obtain cache reference pointer 0 ⁇ overscore (A) ⁇ - 29 .
- FIG. 7B there is illustrated a compressed output block 95 that includes compressed data from history buffer 61 (FIG. 4B) encoded in accordance with the adaptive cache shown in FIG. 7 A.
- the history buffer search previously described for step 90 for a match.
- the result of this combination history buffer/cache search is, as shown in FIG. 7B, a compressed output block 95 that is a combination of history buffer and adaptive cache references.
- each of the reference pointers to adaptive cache 90 consists of less bits than a literal encoding of the same data byte.
- the second bit indicator is utilized to indicate the difference between a raw byte literal denoted as ⁇ 0> ⁇ 0> ⁇ RAW_BYTE> and a cache reference denoted as ⁇ 0> ⁇ 1> ⁇ DICT_REF>.
- the cache size need not be limited to 64 bytes. Smaller caches having fewer cache address bits may be utilized to further increase effective compression. However, the benefit derived from fewer address bits must be balanced against a potential cost in compression ratio resulting from fewer matching bytes.
- the adaptive cache described with respect to the embodiments depicted in FIGS. 7A and 7B is updated in accordance with a method that alleviates the need for pre-processing the raw data. As explained with reference to FIG. 8, this cache update method can be utilized to maintain the cache with the most frequent non-repeating characters encountered in the raw input data stream.
- FIG. 8 there is illustrated a flow diagram depicting an adaptive cache update sequence in accordance with a preferred embodiment of the present invention.
- the cache update process begins as illustrated at step 88 with initialization of the adaptive cache.
- the adaptive cache is incorporated into a random access memory such as CAM 56 , which is accessed by a compression encoder within a compressor unit such as compressor unit 52 .
- a set of pre-selected characters is mapped into the cache and an indexing system such as the two-dimensional indexing illustrated with reference to FIG. 7A is employed, thus enabling the compression encoder to associate reference pointers to data stream character sequences having matches within the cache.
- the update process continues with the compressor unit waiting for a next non-repeating byte within the history buffer as depicted at step 89 .
- an adaptive cache such as that depicted in FIGS. 2 and 4A, is searched for a match.
- a “hit count” maintained within a counter for the matched character(s) is incremented to denote the occurrence of the match as shown at steps 92 and 93 .
- the functionality required to implement such a hit counter must include a normalization function for all counts when one count reaches an implementation-specific maximum count value, and is preferably included within controller 54 . After the hit count has been incremented, the process returns to waiting for a next non-repeating byte at step 89 .
- a subsequent search of a shadow cache such as shadow cache 46 is commenced.
- the hit count associated with the matched character is incremented as illustrated at step 101 .
- the accumulated hit count of the matched character within the shadow directory is compared against the accumulated hit counts of each of the characters contained within the adaptive cache.
- a lesser hit count is found for a character within the adaptive cache the corresponding characters are swapped (i.e., the character with the lesser hit count within the adaptive cache is swapped with the matched character in the shadow cache) and the process returns to waiting for a next non-repeating byte at step 89 .
- a search is commenced to find a currently unoccupied shadow directory position (step 97 ). If, as depicted at step 98 , an available shadow cache position is not found, the process returns to waiting for a next non-repeating byte at step 89 . If, as depicted at steps 98 , 99 , and 100 , an available unoccupied shadow cache position is found, the unmatched character is inserted into the available location, a hit count for the newly acquired character is initialized and the process returns to waiting for a next non-repeating byte at step 89 .
- a method and system have been disclosed for increasing compression efficiency of a data compression utility that compresses a segmented input data stream into independently decompressible data blocks.
- Software written according to the present invention is to be stored in some form of computer readable medium, such as memory, CD-ROM or transmitted over a network, and executed by a processor. Alternatively, some or all of the present invention could be implemented in hardware.
- the present invention has been described in accordance with the embodiments shown, one of ordinary skill in the art will readily recognize that there could be variations to the embodiments and those variations would be within the spirit and scope of the present invention. Accordingly, many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the appended claims.
Abstract
Description
Claims (33)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/063,107 US6657565B2 (en) | 2002-03-21 | 2002-03-21 | Method and system for improving lossless compression efficiency |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/063,107 US6657565B2 (en) | 2002-03-21 | 2002-03-21 | Method and system for improving lossless compression efficiency |
Publications (2)
Publication Number | Publication Date |
---|---|
US20030179114A1 US20030179114A1 (en) | 2003-09-25 |
US6657565B2 true US6657565B2 (en) | 2003-12-02 |
Family
ID=28038697
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/063,107 Expired - Lifetime US6657565B2 (en) | 2002-03-21 | 2002-03-21 | Method and system for improving lossless compression efficiency |
Country Status (1)
Country | Link |
---|---|
US (1) | US6657565B2 (en) |
Cited By (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030018647A1 (en) * | 2001-06-29 | 2003-01-23 | Jan Bialkowski | System and method for data compression using a hybrid coding scheme |
US20040075596A1 (en) * | 2000-09-28 | 2004-04-22 | Richard Price | Huffman data compression method |
US20040092335A1 (en) * | 1996-03-11 | 2004-05-13 | Boehm Herbert C. | Method for making multilayer golf ball |
US20050015514A1 (en) * | 2003-05-30 | 2005-01-20 | Garakani Mehryar Khalili | Compression of repeated patterns in full bandwidth channels over a packet network |
US20050116859A1 (en) * | 2003-04-23 | 2005-06-02 | Miller Steven R. | Method and system for synchronizing multiple tracking devices for a geo-location system |
US20050179569A1 (en) * | 2002-05-09 | 2005-08-18 | Gordon Cockburn | Method and arrangement for data compression according to the lz77 algorithm |
US20060190251A1 (en) * | 2005-02-24 | 2006-08-24 | Johannes Sandvall | Memory usage in a multiprocessor system |
US20060244639A1 (en) * | 2003-10-17 | 2006-11-02 | Bruce Parker | Data compression system and method |
US7180433B1 (en) * | 2005-09-22 | 2007-02-20 | Tandberg Storage Asa | Fast data compression and decompression system and method |
US20080122665A1 (en) * | 2006-03-24 | 2008-05-29 | Luis Paris | High-speed data compression based on set associative cache mapping techniques |
US7512748B1 (en) | 2006-08-17 | 2009-03-31 | Osr Open Systems Resources, Inc. | Managing lock rankings |
US7548658B1 (en) | 2003-09-24 | 2009-06-16 | Cognitech, Inc. | Lossless video data compressor with very high data rate |
US20090226084A1 (en) * | 2008-03-07 | 2009-09-10 | Courchesne Adam J | Adaptive lossless data compression method for compression of color image data |
US20100074253A1 (en) * | 2008-09-19 | 2010-03-25 | Honeywell International Inc. | Enhanced data link communication over iridium |
US7719441B1 (en) * | 2009-01-05 | 2010-05-18 | Honeywell International Inc. | System and method for transferring bit-oriented data over an ACARS character-oriented data link |
US20100257320A1 (en) * | 2009-04-07 | 2010-10-07 | International Business Machines Corporation | Cache Replacement Policy |
US20110043387A1 (en) * | 2009-08-20 | 2011-02-24 | International Business Machines Corporation | Data compression using a nested hierachy of fixed phrase length static and dynamic dictionaries |
US20110102207A1 (en) * | 2009-11-03 | 2011-05-05 | Seagate Technology Llc | Evaluating Alternative Encoding Solutions During Data Compression |
US7949693B1 (en) | 2007-08-23 | 2011-05-24 | Osr Open Systems Resources, Inc. | Log-structured host data storage |
US8024433B2 (en) | 2007-04-24 | 2011-09-20 | Osr Open Systems Resources, Inc. | Managing application resources |
US8085171B2 (en) | 2006-03-24 | 2011-12-27 | University Of Mississippi | High-speed data compression based on set associative cache mapping techniques |
US8149145B2 (en) | 2010-08-05 | 2012-04-03 | Hewlett-Packard Development Company, L.P. | Method and apparatus for adaptive lossless data compression |
US8248279B2 (en) | 2010-10-26 | 2012-08-21 | Hewlett-Packard Development Company, L.P. | History buffer apparatus and method for adaptive lossless data compression |
US8373584B2 (en) | 2011-05-16 | 2013-02-12 | Hewlett-Packard Development Company, L.P. | Compressing and decompressing data |
US8521752B2 (en) | 2005-06-03 | 2013-08-27 | Osr Open Systems Resources, Inc. | Systems and methods for arbitrary data transformations |
US8539228B1 (en) | 2006-08-24 | 2013-09-17 | Osr Open Systems Resources, Inc. | Managing access to a resource |
US8903874B2 (en) | 2011-11-03 | 2014-12-02 | Osr Open Systems Resources, Inc. | File system directory attribute correction |
US8933824B1 (en) * | 2013-08-28 | 2015-01-13 | International Business Machines Corporation | Hardware decompression of deflate encoded data with multiple blocks |
US9374106B2 (en) | 2013-08-28 | 2016-06-21 | International Business Machines Corporation | Efficient context save/restore during hardware decompression of DEFLATE encoded data |
US9407287B2 (en) * | 2014-10-21 | 2016-08-02 | Huawei Technologies Co., Ltd. | Parallel history search and encoding for dictionary-based compression |
US9800640B2 (en) | 2013-10-02 | 2017-10-24 | International Business Machines Corporation | Differential encoder with look-ahead synchronization |
US9830329B2 (en) | 2014-01-15 | 2017-11-28 | W. Anthony Mason | Methods and systems for data storage |
US10020819B1 (en) * | 2017-09-28 | 2018-07-10 | Amazon Technologies, Inc. | Speculative data decompression |
US10187081B1 (en) * | 2017-06-26 | 2019-01-22 | Amazon Technologies, Inc. | Dictionary preload for data compression |
US10554220B1 (en) * | 2019-01-30 | 2020-02-04 | International Business Machines Corporation | Managing compression and storage of genomic data |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7269548B2 (en) * | 2002-07-03 | 2007-09-11 | Research In Motion Ltd | System and method of creating and using compact linguistic data |
US7348904B2 (en) * | 2004-02-19 | 2008-03-25 | Telefonaktiebolaget Lm Ericsson (Publ) | Selective updating of compression dictionary |
US20070162298A1 (en) * | 2005-01-18 | 2007-07-12 | Apple Computer, Inc. | Systems and methods for presenting data items |
FI20050590A0 (en) * | 2005-06-03 | 2005-06-03 | Nokia Corp | Lexicographic compression and decompression |
US20110010465A1 (en) * | 2007-07-18 | 2011-01-13 | Andrea G Forte | Methods and Systems for Providing Template Based Compression |
US7605721B2 (en) * | 2007-11-30 | 2009-10-20 | Red Hat, Inc. | Adaptive entropy coding compression output formats |
US8321326B2 (en) * | 2009-09-15 | 2012-11-27 | Auerbach Group Llc | Method and system for enhancing the efficiency of a digitally communicated data exchange |
US8682860B2 (en) * | 2011-08-12 | 2014-03-25 | Splunk Inc. | Data volume management |
CN105183557B (en) * | 2015-08-26 | 2018-11-20 | 东南大学 | A kind of hardware based configurable data compression system |
US10268537B2 (en) * | 2016-05-26 | 2019-04-23 | International Business Machines Corporation | Initializing a pseudo-dynamic data compression system with predetermined history data typical of actual data |
US10944423B2 (en) * | 2019-03-14 | 2021-03-09 | International Business Machines Corporation | Verifying the correctness of a deflate compression accelerator |
CN114244373B (en) * | 2022-02-24 | 2022-05-20 | 麒麟软件有限公司 | LZ series compression algorithm coding and decoding speed optimization method |
CN117056496B (en) * | 2023-10-12 | 2024-01-26 | 青岛海尔乐信云科技有限公司 | Intelligent customer service interaction data management method based on big data |
CN117240304B (en) * | 2023-11-10 | 2024-01-26 | 湖南中斯信息科技有限公司 | Electronic invoice data processing method and system |
Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4843389A (en) | 1986-12-04 | 1989-06-27 | International Business Machines Corp. | Text compression and expansion method and apparatus |
US5184126A (en) * | 1989-12-28 | 1993-02-02 | International Business Machines Corporation | Method of decompressing compressed data |
US5298895A (en) | 1990-01-19 | 1994-03-29 | Hewlett-Packard Company | Data compression method and apparatus utilizing an adaptive dictionary |
US5373290A (en) | 1991-09-25 | 1994-12-13 | Hewlett-Packard Corporation | Apparatus and method for managing multiple dictionaries in content addressable memory based data compression |
US5379036A (en) | 1992-04-01 | 1995-01-03 | Storer; James A. | Method and apparatus for data compression |
US5384567A (en) * | 1993-07-08 | 1995-01-24 | International Business Machines Corporation | Combination parallel/serial execution of sequential algorithm for data compression/decompression |
US5426779A (en) * | 1991-09-13 | 1995-06-20 | Salient Software, Inc. | Method and apparatus for locating longest prior target string matching current string in buffer |
WO1995019662A1 (en) * | 1994-01-13 | 1995-07-20 | Telco Systems, Inc. | Data compression apparatus and method |
US5572209A (en) | 1994-08-16 | 1996-11-05 | International Business Machines Corporation | Method and apparatus for compressing and decompressing data |
US5610603A (en) | 1995-09-28 | 1997-03-11 | International Business Machines Corporation | Sort order preservation method used with a static compression dictionary having consecutively numbered children of a parent |
US5778255A (en) * | 1995-10-10 | 1998-07-07 | International Business Machines Corporation | Method and system in a data processing system for decompressing multiple compressed bytes in a single machine cycle |
US6067381A (en) | 1997-06-13 | 2000-05-23 | International Business Machines Corporation | Method of reinitializing dictionaries in a data transmission system using data compression |
-
2002
- 2002-03-21 US US10/063,107 patent/US6657565B2/en not_active Expired - Lifetime
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4843389A (en) | 1986-12-04 | 1989-06-27 | International Business Machines Corp. | Text compression and expansion method and apparatus |
US5184126A (en) * | 1989-12-28 | 1993-02-02 | International Business Machines Corporation | Method of decompressing compressed data |
US5298895A (en) | 1990-01-19 | 1994-03-29 | Hewlett-Packard Company | Data compression method and apparatus utilizing an adaptive dictionary |
US5426779A (en) * | 1991-09-13 | 1995-06-20 | Salient Software, Inc. | Method and apparatus for locating longest prior target string matching current string in buffer |
US5373290A (en) | 1991-09-25 | 1994-12-13 | Hewlett-Packard Corporation | Apparatus and method for managing multiple dictionaries in content addressable memory based data compression |
US5379036A (en) | 1992-04-01 | 1995-01-03 | Storer; James A. | Method and apparatus for data compression |
US5384567A (en) * | 1993-07-08 | 1995-01-24 | International Business Machines Corporation | Combination parallel/serial execution of sequential algorithm for data compression/decompression |
WO1995019662A1 (en) * | 1994-01-13 | 1995-07-20 | Telco Systems, Inc. | Data compression apparatus and method |
US5572209A (en) | 1994-08-16 | 1996-11-05 | International Business Machines Corporation | Method and apparatus for compressing and decompressing data |
US5610603A (en) | 1995-09-28 | 1997-03-11 | International Business Machines Corporation | Sort order preservation method used with a static compression dictionary having consecutively numbered children of a parent |
US5778255A (en) * | 1995-10-10 | 1998-07-07 | International Business Machines Corporation | Method and system in a data processing system for decompressing multiple compressed bytes in a single machine cycle |
US6067381A (en) | 1997-06-13 | 2000-05-23 | International Business Machines Corporation | Method of reinitializing dictionaries in a data transmission system using data compression |
Non-Patent Citations (4)
Title |
---|
ALDC1-40S-M Data Compression, Data Sheet, (IBM Microelectornics Division), Nov. 2, 1994, pp 1-1, 2-1- 2-3, DCALD40DSU-02, IBM. |
ALDC-15S Data Compression, Data Sheet, IBM Microelectornics, Jun. 15, 1994, pp 1-1 thru 1-2; 2-1 thru 2-3; 4-1, DCALD5DSU-04, IBM. |
Ranganathan et al., A Lossless Image Compression Algorithm Using Variable Block Size Segmentation, (IEEE) Oct. 1995, pp 1396-1406, vol. 4, No. 10, IEEE. |
Slattery, Design Considerations for the ALDC Cores (IBM Journal of Research and Development), Nov. 1998, vol. 42, No. 6, pp 747-752, IBM. |
Cited By (56)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040092335A1 (en) * | 1996-03-11 | 2004-05-13 | Boehm Herbert C. | Method for making multilayer golf ball |
US20040075596A1 (en) * | 2000-09-28 | 2004-04-22 | Richard Price | Huffman data compression method |
US7064489B2 (en) * | 2000-09-28 | 2006-06-20 | Roke Manor Research Limited | Huffman data compression method |
US20030018647A1 (en) * | 2001-06-29 | 2003-01-23 | Jan Bialkowski | System and method for data compression using a hybrid coding scheme |
US7233265B2 (en) * | 2002-05-09 | 2007-06-19 | International Business Machines Corporation | Method and arrangement for data compression according to the LZ77 algorithm |
US20050179569A1 (en) * | 2002-05-09 | 2005-08-18 | Gordon Cockburn | Method and arrangement for data compression according to the lz77 algorithm |
US20050116859A1 (en) * | 2003-04-23 | 2005-06-02 | Miller Steven R. | Method and system for synchronizing multiple tracking devices for a geo-location system |
US20050015514A1 (en) * | 2003-05-30 | 2005-01-20 | Garakani Mehryar Khalili | Compression of repeated patterns in full bandwidth channels over a packet network |
US7908399B2 (en) * | 2003-05-30 | 2011-03-15 | Cisco Technology, Inc. | Compression of repeated patterns in full bandwidth channels over a packet network |
US8238679B1 (en) * | 2003-09-24 | 2012-08-07 | Cognitech, Inc. | Lossless video data compressor with very high data rate |
US7548658B1 (en) | 2003-09-24 | 2009-06-16 | Cognitech, Inc. | Lossless video data compressor with very high data rate |
US20060244639A1 (en) * | 2003-10-17 | 2006-11-02 | Bruce Parker | Data compression system and method |
US7224293B2 (en) * | 2003-10-17 | 2007-05-29 | Pacbyte Software Pty Limited | Data compression system and method |
USRE43292E1 (en) | 2003-10-17 | 2012-04-03 | Pacbyte Software Pty Limited | Data compression system and method |
US20060190251A1 (en) * | 2005-02-24 | 2006-08-24 | Johannes Sandvall | Memory usage in a multiprocessor system |
US8521752B2 (en) | 2005-06-03 | 2013-08-27 | Osr Open Systems Resources, Inc. | Systems and methods for arbitrary data transformations |
US8990228B2 (en) | 2005-06-03 | 2015-03-24 | Osr Open Systems Resources, Inc. | Systems and methods for arbitrary data transformations |
US7180433B1 (en) * | 2005-09-22 | 2007-02-20 | Tandberg Storage Asa | Fast data compression and decompression system and method |
US7436330B2 (en) | 2006-03-24 | 2008-10-14 | The University Of Mississippi | High-speed data compression based on set associative cache mapping techniques |
US20080122665A1 (en) * | 2006-03-24 | 2008-05-29 | Luis Paris | High-speed data compression based on set associative cache mapping techniques |
US8085171B2 (en) | 2006-03-24 | 2011-12-27 | University Of Mississippi | High-speed data compression based on set associative cache mapping techniques |
US7512748B1 (en) | 2006-08-17 | 2009-03-31 | Osr Open Systems Resources, Inc. | Managing lock rankings |
US7809897B1 (en) | 2006-08-17 | 2010-10-05 | Osr Open Systems Resources, Inc. | Managing lock rankings |
US8539228B1 (en) | 2006-08-24 | 2013-09-17 | Osr Open Systems Resources, Inc. | Managing access to a resource |
US8024433B2 (en) | 2007-04-24 | 2011-09-20 | Osr Open Systems Resources, Inc. | Managing application resources |
US7949693B1 (en) | 2007-08-23 | 2011-05-24 | Osr Open Systems Resources, Inc. | Log-structured host data storage |
US8238677B2 (en) | 2008-03-07 | 2012-08-07 | International Business Machines Corporation | Adaptive lossless data compression method for compression of color image data |
US20090226084A1 (en) * | 2008-03-07 | 2009-09-10 | Courchesne Adam J | Adaptive lossless data compression method for compression of color image data |
US9019960B2 (en) | 2008-09-19 | 2015-04-28 | Honeywell International Inc. | Enhanced data link communication over iridium |
US20100074253A1 (en) * | 2008-09-19 | 2010-03-25 | Honeywell International Inc. | Enhanced data link communication over iridium |
US8228911B2 (en) | 2008-09-19 | 2012-07-24 | Honeywell International Inc. | Enhanced data link communication over iridium |
US7719441B1 (en) * | 2009-01-05 | 2010-05-18 | Honeywell International Inc. | System and method for transferring bit-oriented data over an ACARS character-oriented data link |
US8918588B2 (en) | 2009-04-07 | 2014-12-23 | International Business Machines Corporation | Maintaining a cache of blocks from a plurality of data streams |
US20100257320A1 (en) * | 2009-04-07 | 2010-10-07 | International Business Machines Corporation | Cache Replacement Policy |
US20110043387A1 (en) * | 2009-08-20 | 2011-02-24 | International Business Machines Corporation | Data compression using a nested hierachy of fixed phrase length static and dynamic dictionaries |
US7982636B2 (en) * | 2009-08-20 | 2011-07-19 | International Business Machines Corporation | Data compression using a nested hierachy of fixed phrase length static and dynamic dictionaries |
US20110102207A1 (en) * | 2009-11-03 | 2011-05-05 | Seagate Technology Llc | Evaluating Alternative Encoding Solutions During Data Compression |
US8013762B2 (en) | 2009-11-03 | 2011-09-06 | Seagate Technology Llc | Evaluating alternative encoding solutions during data compression |
US8149145B2 (en) | 2010-08-05 | 2012-04-03 | Hewlett-Packard Development Company, L.P. | Method and apparatus for adaptive lossless data compression |
US8248279B2 (en) | 2010-10-26 | 2012-08-21 | Hewlett-Packard Development Company, L.P. | History buffer apparatus and method for adaptive lossless data compression |
US8373584B2 (en) | 2011-05-16 | 2013-02-12 | Hewlett-Packard Development Company, L.P. | Compressing and decompressing data |
US8903874B2 (en) | 2011-11-03 | 2014-12-02 | Osr Open Systems Resources, Inc. | File system directory attribute correction |
US9600486B2 (en) | 2011-11-03 | 2017-03-21 | Osr Open Systems Resources, Inc. | File system directory attribute correction |
US9374106B2 (en) | 2013-08-28 | 2016-06-21 | International Business Machines Corporation | Efficient context save/restore during hardware decompression of DEFLATE encoded data |
US8933824B1 (en) * | 2013-08-28 | 2015-01-13 | International Business Machines Corporation | Hardware decompression of deflate encoded data with multiple blocks |
US9715539B2 (en) | 2013-08-28 | 2017-07-25 | International Business Machines Corporation | Efficient context save/restore during hardware decompression of DEFLATE encoded data |
US9800640B2 (en) | 2013-10-02 | 2017-10-24 | International Business Machines Corporation | Differential encoder with look-ahead synchronization |
US9830329B2 (en) | 2014-01-15 | 2017-11-28 | W. Anthony Mason | Methods and systems for data storage |
US11720529B2 (en) | 2014-01-15 | 2023-08-08 | International Business Machines Corporation | Methods and systems for data storage |
US9407287B2 (en) * | 2014-10-21 | 2016-08-02 | Huawei Technologies Co., Ltd. | Parallel history search and encoding for dictionary-based compression |
US10187081B1 (en) * | 2017-06-26 | 2019-01-22 | Amazon Technologies, Inc. | Dictionary preload for data compression |
US10020819B1 (en) * | 2017-09-28 | 2018-07-10 | Amazon Technologies, Inc. | Speculative data decompression |
US10284226B1 (en) | 2017-09-28 | 2019-05-07 | Amazon Technologies, Inc. | Performing parallel deflate compression |
US10554220B1 (en) * | 2019-01-30 | 2020-02-04 | International Business Machines Corporation | Managing compression and storage of genomic data |
US20200244283A1 (en) * | 2019-01-30 | 2020-07-30 | International Business Machines Corporation | Managing compression and storage of genomic data |
US10778246B2 (en) * | 2019-01-30 | 2020-09-15 | International Business Machines Corporation | Managing compression and storage of genomic data |
Also Published As
Publication number | Publication date |
---|---|
US20030179114A1 (en) | 2003-09-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6657565B2 (en) | Method and system for improving lossless compression efficiency | |
JP2713369B2 (en) | Data compression apparatus and method | |
US5870036A (en) | Adaptive multiple dictionary data compression | |
US7403136B2 (en) | Block data compression system, comprising a compression device and a decompression device and method for rapid block data compression with multi-byte search | |
AU721734B2 (en) | A lempel-ziv data compression technique utilizing a dictionary pre-filled with frequent letter combinations, words and/or phrases | |
US5608396A (en) | Efficient Ziv-Lempel LZI data compression system using variable code fields | |
US5146221A (en) | Data compression apparatus and method | |
US5126739A (en) | Data compression apparatus and method | |
JP4533454B2 (en) | A content-based segmentation scheme for data compression during storage and transmission including hierarchical segment representation | |
US5406279A (en) | General purpose, hash-based technique for single-pass lossless data compression | |
US4464650A (en) | Apparatus and method for compressing data signals and restoring the compressed data signals | |
EP0129439B1 (en) | High speed data compression and decompression apparatus and method | |
US5058144A (en) | Search tree data structure encoding for textual substitution data compression systems | |
US5016009A (en) | Data compression apparatus and method | |
US20160294410A1 (en) | Staged data compression, including block level long range compression, for data streams in a communications system | |
US20120194361A1 (en) | Data Compression Using a Stream Selector with Edit-In-Place Capability for Compressed Data | |
WO1998006028A9 (en) | A lempel-ziv data compression technique utilizing a dicionary pre-filled with fequent letter combinations, words and/or phrases | |
US5874908A (en) | Method and apparatus for encoding Lempel-Ziv 1 variants | |
US5877711A (en) | Method and apparatus for performing adaptive data compression | |
US7379940B1 (en) | Focal point compression method and apparatus | |
US8244677B2 (en) | Focal point compression method and apparatus | |
JP3061278B2 (en) | Bit length communication method for variable bit length codeword | |
EP2779467B1 (en) | Staged data compression, including block-level long-range compression, for data streams in a communications system | |
JP3242795B2 (en) | Data processing device and data processing method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KAMPF, FRANCIS A.;REEL/FRAME:012505/0060Effective date: 20020301 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |