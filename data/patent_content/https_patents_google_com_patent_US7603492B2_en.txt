US7603492B2 - Automatic generation of streaming data interface circuit - Google Patents
Automatic generation of streaming data interface circuit Download PDFInfo
- Publication number
- US7603492B2 US7603492B2 US11/231,171 US23117105A US7603492B2 US 7603492 B2 US7603492 B2 US 7603492B2 US 23117105 A US23117105 A US 23117105A US 7603492 B2 US7603492 B2 US 7603492B2
- Authority
- US
- United States
- Prior art keywords
- stream
- circuit
- data
- data interface
- streaming data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0862—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with prefetch
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/60—Details of cache memory
- G06F2212/6028—Prefetching based on hints or prefetch instructions
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y02—TECHNOLOGIES OR APPLICATIONS FOR MITIGATION OR ADAPTATION AGAINST CLIMATE CHANGE
- Y02D—CLIMATE CHANGE MITIGATION TECHNOLOGIES IN INFORMATION AND COMMUNICATION TECHNOLOGIES [ICT], I.E. INFORMATION AND COMMUNICATION TECHNOLOGIES AIMING AT THE REDUCTION OF THEIR OWN ENERGY USE
- Y02D10/00—Energy efficient computing, e.g. low power processors, power management or thermal management
Definitions
- the present invention relates generally to reconfigurable computing, and in particular, to the field of scheduling the fetching of data from memory.
- integrated circuit processors are designed either as general purpose microprocessors or as application specific integrated circuits (ASIC's).
- the integrated circuit processors transfer data from memory through a tightly coupled memory interface.
- a general purpose microprocessor transfers data by following arbitrary sequences of microprocessor instructions defined by a user written program. This provides flexibility but decreases performance because the circuitry is not optimized for any specific application.
- An ASIC is designed by describing its structure in terms of circuit primitives such as Boolean gates and registers. The circuit designer arranges the circuit primitives so as to optimize performance for a specific application (such as video compression or audio decoding). While an ASIC provides high performance, its fixed architecture cannot be changed after fabrication to adapt to new algorithms or changing standards. Additionally, the high development costs and lengthy design cycle are not suited to rapidly developing markets.
- the memory interface for a processing architecture can be advantageously designed for certain applications in which a large amount of ordered data is processed.
- These architectures are known as streaming architectures, and typically, the ordered data is stored in a regular memory pattern (such as a vector, a two-dimensional shape, or a link list) or transferred in real-time from a peripheral.
- Processing such ordered data streams is common in media applications, such as digital audio and video, and in data communication applications (such as data compression or decompression). In many applications, relatively little processing of each data item is required, but high computation rates are required because of the large amount of data.
- Processors and their associated memory interface are conventionally designed with complex circuits that attempt to dynamically predict the data access patterns and pre-fetch required data. This approach is typically limited in performance because data access patterns are difficult to predict correctly for many cases. In addition, the associated circuits consume power and chip area that can otherwise be allocated to actual data processing.
- FIG. 1 is a diagram of a system for generating a streaming data interface device in accordance with some embodiments of the present invention
- FIG. 2 is a data flow diagram of an exemplary processing system, in accordance with some embodiments of the present invention.
- FIG. 3 is an electrical block diagram of the exemplary processing system described with reference to FIG. 2 , in accordance with some embodiments of the present invention
- FIG. 4 is a data flow diagram of a portion of the exemplary processing system described with reference to FIG. 2 , in accordance with some embodiments of the present invention
- FIG. 5 is a data stream diagram that shows an example of target data in a data stream, in accordance with some embodiments of the present invention.
- FIG. 6 is a flow chart of a method in accordance with some embodiments of the present invention.
- FIG. 7 is an electrical block diagram of an exemplary streaming data interface device, in accordance with some embodiment of the present invention.
- FIG. 8 is a flow chart of a method in accordance with an embodiment of the present invention.
- the present invention relates to the generation of interfaces for devices that transfer data in streaming data processing architectures.
- efficient data transfer becomes important because there are large quantities of data items having short lifetimes.
- Stream processing seeks to either minimize data movement by localizing the computation, or to overlap computation with data movement.
- Stream computations are localized into groups or self contained such that there are no data dependencies between other computation groups.
- Each computation group produces an output stream from one or more input streams.
- processing performed in each stream computation group is regular or repetitive. There are opportunities for using compiler optimization to increase processing efficiency by organizing the computation and the transfer of data to and from memory using regular access patterns.
- a data item When a data item is to be processed, it is typically retrieved by the processor from a memory. This typically requires that the memory address of the data item be calculated. Care needs to be taken to avoid memory address aliasing. Also, when the results of processing are to be written to a memory, the memory address where the result is to be stored typically needs to be calculated. These calculations are dependent upon the ordering of the data in memory.
- an input streaming data interface device is a circuit that may be programmed to calculate memory addresses for a data stream.
- an input streaming data interface device (alternatively called an input streaming data interface circuit) retrieves data items from memory or some other device having certain memory characteristics in a specified order and presents them consecutively to the memory or other device, such as a processor, served by the input streaming data circuit.
- an output streaming data interface circuit receives consecutive data items from a memory or other device and stores them in a specified data pattern in a memory or transfers them within a data stream to some other device.
- the streaming data interface circuit consisting of input and output streaming data devices
- the streaming data interface circuit is determined by an automation tool that takes as inputs circuit parameters that define the system hardware and stream descriptors that define patterns of data within streams of data which are needed for processor operations.
- the circuit parameters characterize the abilities of the different memory buffers and bus links in memory or other device having memory characteristics, while the stream descriptors define the location and shape of target data in memory storage or in a data stream that is being transferred.
- Streaming data consists of many target data that may be spread throughout the memory storage in complex arrangements and locations.
- the automation tool may generate an optimized streaming data interface that is tightly coupled to a stream processor for a more efficient transfer of required data.
- FIG. 1 a flow diagram shows an example of an automatic configuration of a streaming data interface circuit 108 , in accordance with some embodiments of the present invention.
- An automation tool 100 receives circuit constraints 104 , system constraints 106 , and a set of input or output stream descriptors 102 .
- the circuit constraints 104 comprise parameters that define hardware limitations of electronic circuits that may be used within the streaming data interface circuit 108 , for example, the maximum area, and the maximum number of buffer elements, the maximum circuit latency, and maximum power dissipation of the streaming data interface unit 108 .
- the system constraints 106 comprise parameters that define system and architectural limitations that are external to the streaming data interface circuit 108 , such as bus width, bus latency in cycles, bus bandwidth requirements in bytes per cycles, stream processor latency in cycles, and stream processor bandwidth in bytes per cycle.
- the stream descriptors 102 define patterns of data within streams of data, wherein the patterns of data comprise a set of data called “target data”.
- the processing system 200 comprises a processor 220 that operates under the control of machine instructions 225 .
- the processor 220 is coupled to a first level memory 215 , MEMORY I, a second level memory 210 , MEMORY II, and a data source/sink 205 .
- the data source/sink 205 is bi-directionally coupled via data bus 206 to the second level memory 210 ;
- the second level memory 210 is bi-directionally coupled via data bus 211 to the first level memory 215 ;
- the first level memory 215 is bi-directionally coupled via data bus 216 to the processor 220 .
- the processor 220 may be a processor that is optimized for the processing of streaming data, or it may be a more conventional processor, such as a scalar processor or DSP that is adapted for streaming data.
- the arrangement of devices shown in FIG. 2 illustrates a wide variety of possible hierarchical arrangements of devices in a processing system, between which data may flow.
- the data that flows may be described as streaming data, which is characterized by including repetitive patterns of information. Examples are series of vectors of known length and video image pixel information.
- the data source/sink 205 may be, for example, a memory of the type that may be referred to as an external memory, such as a synchronous dynamic random access memory (SDRAM).
- SDRAM synchronous dynamic random access memory
- the transfer of data between the data source/sink 205 and the processor 220 may be under the primary or sole control of the processor 220 .
- Such an external memory may receive or send data to or from an external device not shown in FIG.
- an external device that may transfer data into a memory 205
- an imaging device that transfers successive sets of pixel information into the memory 205
- Another example of an external device that may transfer data into a memory 205 is a general purpose processor that generates sets of vector information, such as speech characteristics.
- the data source/sink 205 may be part of a device or subsystem such as a video camera or display.
- the second level memory 210 may be an intermediate cache memory and the first level memory 215 may be a first level cache memory.
- the first level memory 215 may be a set of registers of a central processing device of the processor 220
- the second level memory 210 may be a cache memory.
- the first level memory, second level memory, and data source/sink may be included in the same integrated circuit as the processor. It will be appreciated that in some embodiments the second level memory 210 may not exist.
- FIG. 3 an electrical block diagram of the exemplary processing system 200 is shown, in accordance with some embodiments of the present invention.
- one or more data buses 305 , 310 may be used to electrically couple data in parallel form between the processor 220 , the first level memory 215 , the second level memory 210 , and the data source/sink 205 .
- the data bus 310 couples the processor 220 , the memory II 215 , and the memory I 210 .
- the memory I 210 is also coupled to the data source/sink 205 by data bus 305 , which may be coupled to other devices not shown in FIG. 3 .
- the data buses 305 , 310 may also be used for coupling control information from controlling devices, such as the processor 220 .
- Each of the devices 205 , 210 , 215 , 220 includes input and output interface circuits such as 315 , 320 , 325 , which may be conventional I/O circuits such as buffer registers and drivers that perform impedance and voltage matching functions, but may alternatively be input or output, or both input and output streaming data interface circuits.
- the data that is being transferred from the data source/sink 205 to the object processor 220 , or from the object processor 220 to the data source/sink 205 is transferred as streaming data.
- a first set of target data is needed for use by an operation to be performed within the processor 220 under control of the machine instructions 225 .
- the set of target data is included at known locations within a larger set of data that comprises a first data stream that is transferred on data bus 305 between data source/sink 205 and second level memory 210 .
- the first data stream may, for example, comprise values for all elements of each vector of a set of vectors, from which only certain elements of each vector are needed for a calculation.
- the first data stream is transferred over data bus 305 to memory I 210 for ultimate delivery to processor 220 through memory II 215 .
- the first data stream comprises element values for 20 vectors, each vector having 8 elements, wherein each element is one byte in length, and the target data set comprises only four elements of each of the 20 vectors. It will be appreciated that one method of transferring the set of target data to the object processor 220 would be to transfer all the elements of the 20 vectors over data buses 305 , 310 . However, this method may not be the most efficient method.
- a second data stream may be formed by accessing only the four elements of each vector and forming a second data stream for transfer over buses 305 , 310 that comprises essentially only the elements of the set of target data, sent in three groups of four elements from each of eight vectors, each group comprising 32 bytes, with the last group filled out with sixteen null bytes.
- the optimized data streams that are transferred over buses 305 , 310 are identical, but it will be further appreciated that different system constraints 106 related to each data stream transfer may be such that more efficiency may be achieved by using different data stream patterns for each of the data stream transfers over the data buses 305 , 310 .
- the bus width for bus 310 is sixteen bytes, using five transfers each comprising four elements from four of the 20 vectors may be more efficient.
- FIG. 4 a data flow diagram of a portion 400 of the exemplary processing system 200 is shown, in accordance with some embodiments of the present invention.
- This diagram illustrates two modes of data interface between a device such as a processor 408 (which could be processor 220 ) to a data source destination 404 (which could be the data source/destination 205 , memory II 210 , or memory I 215 ).
- Streaming data is coupled between the processor 408 and the data source/destination 404 through a streaming data interface device 406
- other non-streaming data such as scalar values, control data, and the type of data transferred in a cache access, is coupled using standard data transfer techniques and electronics, as indicated by path 410 .
- a data stream diagram shows an example of target data in a data stream 500 , in accordance with some embodiments of the present invention.
- the pattern may typically be specified by using data stream descriptors.
- Stream descriptors may be any set of values that serve to describe patterned locations of the target data within a data stream.
- One set of such stream descriptors consists of the following: starting address (SA), stride, span, skip, and type. These parameters may have different meanings for different embodiments. Their meaning for the embodiments described herein is as follows.
- the type descriptor identifies how many bytes are in a data element of the target data, wherein a data element is the smallest number of consecutive bits that represent a value that will be operated upon by the processor 220 .
- a data element is the smallest number of consecutive bits that represent a value that will be operated upon by the processor 220 .
- each element of a speech vector may be, for example, 8 bits.
- the type identifies how many 8 bit bytes are in an element.
- the type is 1.
- each element of the data stream is identified by a sequential position number.
- Data streams described by the descriptors of this example and following examples may be characterized by a quantity (span 515 ) of target data elements that are separated from each other by a first quantity (stride 510 ) of addresses. From the end of a first span of target data elements to the beginning of a second span of target data elements, there may be a second quantity of addresses that is different than the stride 510 . This quantity is called the skip 520 . Finally, a starting position may be identified. This is called the starting address 505 (SA). For the example of FIG.
- the values of the stream descriptors 525 (SA 505 , stride 510 , span 515 , skip 520 , type), also 102 in reference to FIG. 1 , are (0, 3, 4, 5, 1).
- the target data elements may be, for example, the 0 th , 3 rd , 6 th , and 9 th elements of a set of vectors, each vector having 14 elements.
- a set of stream descriptors may also include a field that defines the number of target data elements in the data stream. It will be further appreciated that the target data are provided to the destination as contiguous usable data without gaps even though the target data is stored at scattered locations in memory.
- a memory controller In contrast, a memory controller, dynamic memory access (DMA) controller and caches would provide interleaved target data and unused data.
- the target data being contiguous streams of data, provided by the streaming data interface device would avoid time-gaps in the processing of the same target data.
- DMA dynamic memory access
- a flow chart shows some steps of a method for automatic generation of a stream unit of a streaming data interface device, in accordance with some embodiments of the present invention.
- the method starts at step 602 .
- the automation tool 100 obtains a set of stream descriptors 525 , such as those describing a video data stream that comprises plurality of sequential vectors that are to be processed using the same algorithm.
- the automation tool 100 obtains a set of circuit constraints 104 , as described above with reference to FIG. 1 .
- the automation tool 100 ( FIG. 1 ) obtains a set of system constraints 106 , as described above with reference to FIG.
- the automation tool starts an iterative optimization process that includes steps 610 - 620 .
- each iteration instantiates a set of variables (circuit parameters) in a search space, and attempts to optimize for the remaining variables.
- a set of circuit parameters are selected from a list of circuit constraints 104 by the automation tool 100 . These circuit parameters may include the maximum area or the number of buffers, for example.
- the stream descriptors are used to determine the remaining circuit parameters.
- a number of logic gates consuming less than the maximum area to address the data, or a number of buffers to store the data are determined at step 612 , in units of bytes.
- a hardware description of a candidate streaming data interface circuit is generated, using a register transfer language description or other hardware description language.
- the candidate streaming data interface circuit of a current iteration is evaluated using one or more quality metrics, such as area of the candidate circuit, the bandwidth throughput of the candidate circuit, the clock speed of the candidate circuit, and/or the latency of the candidate circuit.
- a hardware description of the candidate circuit is stored at step 618 .
- the candidate circuit of a current iteration may be a pareto-optimal circuit; that is, the current candidate circuit is better than all previous candidate circuits evaluated in previous iterations in at least one quality metric.
- a check is made to determine if the design process is completed. The process may be completed when a specified number of iterations of the candidate circuit have been evaluated during the iterative optimization process, or when a desired quality metric is achieved, or when all combinations of circuit parameters have been evaluated.
- a circuit is selected from the set of pareto-optimal candidate circuits stored at step 618 and the description is presented at step 622 for designer review.
- the circuit is selected at step 622 based on a ranking of quality metrics that the designer chooses. For example, if the designer chooses area as the most important metric, the selected circuit is the pareto-optimal circuit for area.
- Other candidate circuits stored at step 618 are pareto-optimal circuits for different quality metric, such as latency, throughput, and clock speed.
- the selected circuit is presented to other processes such as a chip synthesis tool, not shown in FIG. 6 , wherein the streaming data interface circuit can be implemented in an ASIC or configurable logic such as a field programmable gate array (FPGA).
- the selected circuit is a configured stream unit that can be integrated into a streaming data interface device.
- the process terminates at step 624 .
- the streaming data interface device 700 comprises an arbiter 702 , at least one stream unit 710 , and control registers device 708 .
- the arbiter 702 is coupled to other system components such as another stream unit 711 or a conventional cache memory I/O unit, peripherals (not shown in FIG. 7 ), and at least one memory device, using an address bus 704 and a bi-directional data bus 706 .
- the arbiter 702 decides which of the stream units 710 , 711 has access to the address bus 704 and data bus 706 .
- the arbiter 702 is not needed when there is only one stream unit 710 .
- the arbiter 702 is coupled to the control registers unit 708 with a bi-directional command bus 718 and data bus 724 .
- the control registers unit 708 holds the stream descriptors and other control parameters of the stream unit 710 , 711 and arbiter 702 .
- the arbiter 702 is also coupled to the at least one stream unit 710 with bi-directional command bus 718 and data bus 724 .
- the arbiter 702 may give more priority to stream unit 710 compared to stream unit 711 if the stream descriptors used by stream unit 710 requires more bandwidth than the stream descriptors used by stream unit 711 .
- the arbiter 702 gives two access to stream unit 710 for each access by stream unit 711
- the stream unit 710 uses the stream descriptors stored in control registers unit 708 to transfer data.
- the stream unit 710 can be configured for one way data transfer either to or from other system components such as a stream processor, with a command bus 736 and data bus 746 .
- stream unit 710 is configured for one way data transfer from other system components on data bus 724 to a stream processor on data bus 746
- stream unit 711 is configured for one way data transfer from a stream processor on data bus 746 to other system components on data bus 724 .
- System components refer to stream data interface devices including, but not limited to, stream processors, bus modules, peripherals, and memory elements.
- the streaming data interface device transfers target data from one system component to another.
- both system components are characterized as a memory (i.e. memory device or memory element)
- the streaming data interface device is used to alter at least one of stream location or shape of the stream data.
- the stream unit 710 comprises an address generation unit 712 , a bus interface unit 750 , a stream storage unit 760 , and a stream interface unit 770 .
- the bus interface unit 750 comprises a bus address queue 720 and a line buffer 730 .
- the stream storage unit 760 comprises a stream address queue 722 and a stream data queue 732 .
- the stream interface unit 770 comprises a ready unit 734 and a select unit 740 .
- the address generation unit 712 serves as the primary controller of the stream unit 710 .
- the bus interface unit 750 serves to make bus requests based control signals from the address generation unit 712 .
- the stream storage unit 760 serves to store target data from stream data fetched by the bus interface unit 750 .
- the stream interface unit 770 serves to provide target data stored in stream storage unit 760 to system components.
- the address generation unit 712 controls the bus interface unit 750 by storing appropriate bus addresses in the bus address queue 720 .
- the bus interface unit 750 then makes transfer requests from the bus addresses stored in bus address queue 720 .
- the address generation unit 712 controls the stream storage unit 760 by storing stream address in the stream address queue 722 .
- the stream storage unit 760 then stores data from the line buffer 730 in the bus interface unit 750 .
- the stream interface unit 770 then transfer data stored by stream storage unit 760 to system components.
- the address generation unit 712 generates bus addresses based on stream descriptors.
- the address generation unit 712 contains circuitry such as adders to calculate an address as the sum of SA 505 and stride 510 .
- the bus address queue 720 accepts the generated bus addresses via control signals 714 .
- the bus address queue 720 issues data transfers via command bus 718 in the same order the bus address are generated by the address generation unit 712 .
- a generated bus address on control signals 714 that matches a bus address in the bus address queue 720 will not be stored so as to avoid duplicating bus transfers on command bus 718 .
- the line buffers 730 store data from the data bus 724 when the bus address queue 720 signals the line buffers 730 via control signal 726 that there is a match of the bus address on command bus 718 to an entry in the bus address queue 720 .
- the address generation unit 712 also generates stream addresses based on stream descriptors.
- the stream address queue 722 accepts the generated stream address via control signals 716 .
- the stream address queue 722 signals the stream data queue 732 to obtain data from the line buffers 730 when the line buffers 730 contain data elements specified in the stream address stored in the stream address queue 722 .
- the bus addresses stored in the bus address queue 720 are the upper 29 bits of a 32-bit address, while the stream addresses stored in stream address queue 722 comprise an index to the bus address queue 720 , plus the lower 3 bits of the 32-bit address.
- the index to the bus address queue 720 is used by the stream address queue 722 to determine if the line buffers 730 contain data to be stored in the stream data queue 732 .
- the lower 3 bits of the 32-bit address are used as an address to access the line buffers 730 and are used by the stream data queue 732 via control signal 728 to store at least one stream data element from the line buffers 730 via data bus 726 into the stream data queue 732 , in the same order as the generated stream addresses.
- the ready unit 734 receives commands via control signals 736 that data is needed, and informs the select unit 740 via control signal 738 to select the proper number of stream elements in the stream data queue 732 .
- the ready unit 734 activates a signal 736 to indicate that the requested stream data is available.
- the select unit provides the stream data on data bus 746 in the proper order requested on control signal 736 .
- the stream unit 710 can receive stream data from data bus 746 for transfer on data bus 724 .
- the ready unit 734 receives commands via control signals 736 that a number of stream data elements are available.
- the select unit 740 receives the stream data from data bus 746 and stores the stream data in stream data queue 732 .
- the line buffers 730 then write data on data bus 724 transferred from stream data queue 732 .
- the arbiter 702 , the control registers device 708 , the address generation unit 712 , the bus address queue 720 , the line buffer 730 , the stream address queue 722 , the stream data queue 732 , the ready unit 734 , and the select unit 740 are independent circuits, each of which is constructed as a state machine, or may be constructed using a microcontroller or equivalent thereto.
- FIG. 8 a flow chart shows some steps of the method step 612 described above with reference to FIG. 6 , which is used to optimize and generate a candidate stream unit of a streaming data interface device, in accordance with some embodiments of the present invention.
- the method starts at step 802 .
- an automation tool 100 sets a number of elements of the bus address queue 720 to match a bus latency of the bidirectional data bus 706 , measured by clock cycles.
- the number of bus address queue elements must be no more than a maximum number of queue elements, which is a circuit constraint ( 104 , FIG. 1 ), and should be at least the bus latency, which is a system constraint ( 106 , FIG. 1 ).
- bus latency is expressed as the maximum number of pending requests between system component and the streaming data interface device.
- the automation tool 100 sets a number of (byte wide) line buffer elements of the line buffers 730 to match a bus bandwidth of the bidirectional data bus 704 , in bytes.
- the number of line buffer elements must be no more than a maximum number of line buffer elements, which is a circuit constraint ( 104 , FIG.
- Bus bandwidth is expressed as the peak number of bytes transferred on the bidirectional data bus 704 or as the average number of bytes transferred on the bidirectional data bus 704 .
- the automation tool 100 sets a number of elements of the stream address queue 722 to match a latency of a streaming device to be coupled to the streaming data interface device 700 by the command bus 736 and data bus 746 , from which or to which the streaming data is to be streamed.
- the number of stream address queue elements must be no more than a maximum number of stream address queue elements, which is a circuit constraint ( 104 , FIG. 1 ), and should be at least the latency of the streaming device, which is a system constraint ( 106 , FIG. 1 ).
- the automation tool 100 sets a number of elements in the stream data queue 732 , the ready function 734 , and the select function 740 to match a bandwidth of the streaming device.
- the number of stream data queue elements must be no more than a maximum number of stream data queue elements, which is a circuit constraint ( 104 , FIG. 1 ), and the bandwidth of the streaming device, which is a system constraint ( 106 , FIG. 1 ).
- the automation tool 100 sets a circuit in the address generation unit 712 to generate an address according to the storage location of the streaming data in the memory from or to which the streaming data is to be read or written via address bus 704 and bi-directional data bus 706 .
- the address must match the width of the address, which is a system constraint ( 106 , FIG. 1 ).
- the process terminates at step 814 .
- an input stream has a rectangular shape of 60 by 30 8-bit pixels centered in a 640 by 480 pixel-image at address 153600.
- the values of the input stream descriptors (SA, stride, span, skip, type) are (153600, 1, 60, 580, 0).
- An output stream has a linear shape and storage location at address 307200.
- the values of the output stream descriptors (SA, stride, span, skip, type) are (307200, 1, 1, 1, 0).
- bus latency is given as an average of 20 clock cycles to read one stream element from memory.
- the bus bandwidth is given as the peak bandwidth of 8 bytes per cycle.
- the streaming device has a bandwidth of 4 bytes per cycle.
- two stream units 710 , 711 are configured in such a way that one stream unit 710 transfers data from memory to a streaming device and one stream unit 711 transfers data from a streaming device to memory.
- the bus address queue 720 is configured with at least 20 queue elements to match the bus latency of 20 clock cycles.
- line buffer 730 is configured to store 8 bytes to match the peak bandwidth of 8 bytes per cycle.
- the stream address queue 722 is configured with at least 4 queue elements to match the streaming device bandwidth of 4 bytes per cycle.
- the stream data queue is also configured with at least 4 queue elements to match the streaming device bandwidth of 4 bytes per cycle.
- the ready 734 and select 740 units are configured to support a transfer of at most 4 bytes per cycle.
- the address generation unit 712 for input stream unit 710 is configured to generate a bus address pattern of 153600, 153601, . . . 153629, 154240, 154241, and so on.
- the address generation unit 712 for output stream unit 711 is configured to generate a bus address pattern of 307200, 307201, 307202, . . . and so on. Referring to FIG. 6 and in step 622 , a candidate stream unit 710 , 711 is selected and integrated with the arbiter 702 and control register unit 708 to result in a new streaming data interface device.
- embodiments of the invention described herein may be comprised of one or more conventional processors and unique stored program instructions that control the one or more processors to implement, in conjunction with certain non-processor circuits, some, most, or all of the functions of a compiler or processor system that, among other things, generates executable code and setup parameters that control data transfer in the processing system and determines memory hierarchy configuration described herein.
- the non-processor circuits may include, but are not limited to signal drivers, clock circuits, power source circuits, and user input devices. As such, these functions may be interpreted as steps of a method to perform, among other things, generation of the executable code and setup parameters.
Abstract
Description
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/231,171 US7603492B2 (en) | 2005-09-20 | 2005-09-20 | Automatic generation of streaming data interface circuit |
PCT/US2006/025904 WO2007035197A2 (en) | 2005-09-20 | 2006-06-30 | Streaming data interface device and method for automatic generation thereof |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/231,171 US7603492B2 (en) | 2005-09-20 | 2005-09-20 | Automatic generation of streaming data interface circuit |
Publications (2)
Publication Number | Publication Date |
---|---|
US20070067508A1 US20070067508A1 (en) | 2007-03-22 |
US7603492B2 true US7603492B2 (en) | 2009-10-13 |
Family
ID=37885546
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/231,171 Active 2026-09-10 US7603492B2 (en) | 2005-09-20 | 2005-09-20 | Automatic generation of streaming data interface circuit |
Country Status (2)
Country | Link |
---|---|
US (1) | US7603492B2 (en) |
WO (1) | WO2007035197A2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080244152A1 (en) * | 2007-03-30 | 2008-10-02 | Motorola, Inc. | Method and Apparatus for Configuring Buffers for Streaming Data Transfer |
US20080294802A1 (en) * | 2007-05-24 | 2008-11-27 | Nobuaki Kohinata | Stream processing device and storage device |
US20120200315A1 (en) * | 2011-02-08 | 2012-08-09 | Maxeler Technologies, Ltd. | Method and apparatus and software code for generating a hardware stream processor design |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060265485A1 (en) * | 2005-05-17 | 2006-11-23 | Chai Sek M | Method and apparatus for controlling data transfer in a processing system |
US20080120497A1 (en) * | 2006-11-20 | 2008-05-22 | Motorola, Inc. | Automated configuration of a processing system using decoupled memory access and computation |
US9342383B2 (en) * | 2007-12-28 | 2016-05-17 | Sap Se | Streaming operations for workflow process models using multiple views on a same buffer |
US8055950B2 (en) * | 2008-01-11 | 2011-11-08 | Arm Limited | Method and apparatus for improved timing for trace synchronization |
TWI390442B (en) * | 2008-10-24 | 2013-03-21 | Univ Nat Taiwan | System and method for digital signal processing using stream processing |
US8176366B2 (en) | 2009-04-03 | 2012-05-08 | Arm Limited | Trace synchronization |
US8626621B2 (en) * | 2010-03-02 | 2014-01-07 | Microsoft Corporation | Content stream management |
US20130151766A1 (en) * | 2011-12-12 | 2013-06-13 | Moon J. Kim | Convergence of memory and storage input/output in digital systems |
US9449359B2 (en) * | 2012-09-13 | 2016-09-20 | Ati Technologies Ulc | Rendering settings in a multi-graphics processing unit system |
US11226768B2 (en) * | 2018-01-04 | 2022-01-18 | Montage Technology Co., Ltd. | Memory controller and method for accessing memory module |
Citations (49)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5535319A (en) | 1990-04-13 | 1996-07-09 | International Business Machines Corporation | Method of creating and detecting device independent controls in a presentation data stream |
US5694568A (en) * | 1995-07-27 | 1997-12-02 | Board Of Trustees Of The University Of Illinois | Prefetch system applicable to complex memory access schemes |
US5699277A (en) | 1996-01-02 | 1997-12-16 | Intel Corporation | Method and apparatus for source clipping a video image in a video delivery system |
US5854929A (en) | 1996-03-08 | 1998-12-29 | Interuniversitair Micro-Elektronica Centrum (Imec Vzw) | Method of generating code for programmable processors, code generator and application thereof |
US5856975A (en) | 1993-10-20 | 1999-01-05 | Lsi Logic Corporation | High speed single chip digital video network apparatus |
US6023579A (en) * | 1998-04-16 | 2000-02-08 | Unisys Corp. | Computer-implemented method for generating distributed object interfaces from metadata |
US6172990B1 (en) | 1997-06-19 | 2001-01-09 | Xaqti Corporation | Media access control micro-RISC stream processor and method for implementing the same |
US6195024B1 (en) | 1998-12-11 | 2001-02-27 | Realtime Data, Llc | Content independent data compression method and system |
US6195368B1 (en) | 1998-01-14 | 2001-02-27 | Skystream Corporation | Re-timing of video program bearing streams transmitted by an asynchronous communication link |
US6295586B1 (en) | 1998-12-04 | 2001-09-25 | Advanced Micro Devices, Inc. | Queue based memory controller |
US20020046251A1 (en) | 2001-03-09 | 2002-04-18 | Datacube, Inc. | Streaming memory controller |
US6408428B1 (en) | 1999-08-20 | 2002-06-18 | Hewlett-Packard Company | Automated design of processor systems using feedback from internal measurements of candidate systems |
US20020133784A1 (en) | 1999-08-20 | 2002-09-19 | Gupta Shail Aditya | Automatic design of VLIW processors |
US20020151992A1 (en) | 1999-02-01 | 2002-10-17 | Hoffberg Steven M. | Media recording device with packet data interface |
US6549991B1 (en) | 2000-08-31 | 2003-04-15 | Silicon Integrated Systems Corp. | Pipelined SDRAM memory controller to optimize bus utilization |
US6591349B1 (en) | 2000-08-31 | 2003-07-08 | Hewlett-Packard Development Company, L.P. | Mechanism to reorder memory read and write transactions for reduced latency and increased bandwidth |
US6647456B1 (en) | 2001-02-23 | 2003-11-11 | Nvidia Corporation | High bandwidth-low latency memory controller |
US20040003220A1 (en) | 2002-06-28 | 2004-01-01 | May Philip E. | Scheduler for streaming vector processor |
US20040003206A1 (en) * | 2002-06-28 | 2004-01-01 | May Philip E. | Streaming vector processor with reconfigurable interconnection switch |
US20040003376A1 (en) | 2002-06-28 | 2004-01-01 | May Philip E. | Method of programming linear graphs for streaming vector computation |
US6701515B1 (en) | 1999-05-27 | 2004-03-02 | Tensilica, Inc. | System and method for dynamically designing and evaluating configurable processor instructions |
US6721884B1 (en) | 1999-02-15 | 2004-04-13 | Koninklijke Philips Electronics N.V. | System for executing computer program using a configurable functional unit, included in a processor, for executing configurable instructions having an effect that are redefined at run-time |
US6744274B1 (en) * | 2001-08-09 | 2004-06-01 | Stretch, Inc. | Programmable logic core adapter |
US20040128473A1 (en) | 2002-06-28 | 2004-07-01 | May Philip E. | Method and apparatus for elimination of prolog and epilog instructions in a vector processor |
WO2004055667A2 (en) | 2002-12-16 | 2004-07-01 | Sun Microsystems, Inc. | System and method for data prefetching |
US20040153813A1 (en) | 2002-12-17 | 2004-08-05 | Swoboda Gary L. | Apparatus and method for synchronization of trace streams from multiple processors |
US6778188B2 (en) | 2002-02-28 | 2004-08-17 | Sun Microsystems, Inc. | Reconfigurable hardware filter for texture mapping and image processing |
US6813701B1 (en) | 1999-08-17 | 2004-11-02 | Nec Electronics America, Inc. | Method and apparatus for transferring vector data between memory and a register file |
US6825848B1 (en) | 1999-09-17 | 2004-11-30 | S3 Graphics Co., Ltd. | Synchronized two-level graphics processing cache |
US20050050252A1 (en) | 2003-08-29 | 2005-03-03 | Shinji Kuno | Information processing apparatus |
US20050071835A1 (en) | 2003-08-29 | 2005-03-31 | Essick Raymond Brooke | Method and apparatus for parallel computations with incomplete input operands |
US6892286B2 (en) | 2002-09-30 | 2005-05-10 | Sun Microsystems, Inc. | Shared memory multiprocessor memory model verification system and method |
US20050122335A1 (en) | 1998-11-09 | 2005-06-09 | Broadcom Corporation | Video, audio and graphics decode, composite and display system |
US6925507B1 (en) | 1998-12-14 | 2005-08-02 | Netcentrex | Device and method for processing a sequence of information packets |
US6941548B2 (en) | 2001-10-16 | 2005-09-06 | Tensilica, Inc. | Automatic instruction set architecture generation |
US6958040B2 (en) | 2001-12-28 | 2005-10-25 | Ekos Corporation | Multi-resonant ultrasonic catheter |
US20050257151A1 (en) | 2004-05-13 | 2005-11-17 | Peng Wu | Method and apparatus for identifying selected portions of a video stream |
US20050289621A1 (en) | 2004-06-28 | 2005-12-29 | Mungula Peter R | Power management apparatus, systems, and methods |
US20060031791A1 (en) | 2004-07-21 | 2006-02-09 | Mentor Graphics Corporation | Compiling memory dereferencing instructions from software to hardware in an electronic design |
US20060044389A1 (en) | 2004-08-27 | 2006-03-02 | Chai Sek M | Interface method and apparatus for video imaging device |
US20060067592A1 (en) * | 2004-05-27 | 2006-03-30 | Walmsley Simon R | Configurable image processor |
US7054989B2 (en) | 2001-08-06 | 2006-05-30 | Matsushita Electric Industrial Co., Ltd. | Stream processor |
US7075541B2 (en) | 2003-08-18 | 2006-07-11 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US20060242617A1 (en) | 2005-04-20 | 2006-10-26 | Nikos Bellas | Automatic generation of streaming processor architectures |
US20060265485A1 (en) | 2005-05-17 | 2006-11-23 | Chai Sek M | Method and apparatus for controlling data transfer in a processing system |
US7246203B2 (en) * | 2004-11-19 | 2007-07-17 | Motorola, Inc. | Queuing cache for vectors with elements in predictable order |
US20080120497A1 (en) | 2006-11-20 | 2008-05-22 | Motorola, Inc. | Automated configuration of a processing system using decoupled memory access and computation |
US7392498B1 (en) * | 2004-11-19 | 2008-06-24 | Xilinx, Inc | Method and apparatus for implementing a pre-implemented circuit design for a programmable logic device |
US7426709B1 (en) * | 2005-08-05 | 2008-09-16 | Xilinx, Inc. | Auto-generation and placement of arbitration logic in a multi-master multi-slave embedded system |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6368855B1 (en) * | 1996-06-11 | 2002-04-09 | Antigen Express, Inc. | MHC class II antigen presenting cells containing oligonucleotides which inhibit Ii protein expression |
-
2005
- 2005-09-20 US US11/231,171 patent/US7603492B2/en active Active
-
2006
- 2006-06-30 WO PCT/US2006/025904 patent/WO2007035197A2/en active Application Filing
Patent Citations (52)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5535319A (en) | 1990-04-13 | 1996-07-09 | International Business Machines Corporation | Method of creating and detecting device independent controls in a presentation data stream |
US5856975A (en) | 1993-10-20 | 1999-01-05 | Lsi Logic Corporation | High speed single chip digital video network apparatus |
US5694568A (en) * | 1995-07-27 | 1997-12-02 | Board Of Trustees Of The University Of Illinois | Prefetch system applicable to complex memory access schemes |
US5699277A (en) | 1996-01-02 | 1997-12-16 | Intel Corporation | Method and apparatus for source clipping a video image in a video delivery system |
US5854929A (en) | 1996-03-08 | 1998-12-29 | Interuniversitair Micro-Elektronica Centrum (Imec Vzw) | Method of generating code for programmable processors, code generator and application thereof |
US6172990B1 (en) | 1997-06-19 | 2001-01-09 | Xaqti Corporation | Media access control micro-RISC stream processor and method for implementing the same |
US6195368B1 (en) | 1998-01-14 | 2001-02-27 | Skystream Corporation | Re-timing of video program bearing streams transmitted by an asynchronous communication link |
US6023579A (en) * | 1998-04-16 | 2000-02-08 | Unisys Corp. | Computer-implemented method for generating distributed object interfaces from metadata |
US20050122335A1 (en) | 1998-11-09 | 2005-06-09 | Broadcom Corporation | Video, audio and graphics decode, composite and display system |
US6295586B1 (en) | 1998-12-04 | 2001-09-25 | Advanced Micro Devices, Inc. | Queue based memory controller |
US6195024B1 (en) | 1998-12-11 | 2001-02-27 | Realtime Data, Llc | Content independent data compression method and system |
US6925507B1 (en) | 1998-12-14 | 2005-08-02 | Netcentrex | Device and method for processing a sequence of information packets |
US20020151992A1 (en) | 1999-02-01 | 2002-10-17 | Hoffberg Steven M. | Media recording device with packet data interface |
US6721884B1 (en) | 1999-02-15 | 2004-04-13 | Koninklijke Philips Electronics N.V. | System for executing computer program using a configurable functional unit, included in a processor, for executing configurable instructions having an effect that are redefined at run-time |
US6701515B1 (en) | 1999-05-27 | 2004-03-02 | Tensilica, Inc. | System and method for dynamically designing and evaluating configurable processor instructions |
US6813701B1 (en) | 1999-08-17 | 2004-11-02 | Nec Electronics America, Inc. | Method and apparatus for transferring vector data between memory and a register file |
US20020133784A1 (en) | 1999-08-20 | 2002-09-19 | Gupta Shail Aditya | Automatic design of VLIW processors |
US6408428B1 (en) | 1999-08-20 | 2002-06-18 | Hewlett-Packard Company | Automated design of processor systems using feedback from internal measurements of candidate systems |
US6825848B1 (en) | 1999-09-17 | 2004-11-30 | S3 Graphics Co., Ltd. | Synchronized two-level graphics processing cache |
US6549991B1 (en) | 2000-08-31 | 2003-04-15 | Silicon Integrated Systems Corp. | Pipelined SDRAM memory controller to optimize bus utilization |
US6591349B1 (en) | 2000-08-31 | 2003-07-08 | Hewlett-Packard Development Company, L.P. | Mechanism to reorder memory read and write transactions for reduced latency and increased bandwidth |
US6647456B1 (en) | 2001-02-23 | 2003-11-11 | Nvidia Corporation | High bandwidth-low latency memory controller |
US20020046251A1 (en) | 2001-03-09 | 2002-04-18 | Datacube, Inc. | Streaming memory controller |
US7054989B2 (en) | 2001-08-06 | 2006-05-30 | Matsushita Electric Industrial Co., Ltd. | Stream processor |
US6744274B1 (en) * | 2001-08-09 | 2004-06-01 | Stretch, Inc. | Programmable logic core adapter |
US6941548B2 (en) | 2001-10-16 | 2005-09-06 | Tensilica, Inc. | Automatic instruction set architecture generation |
US6958040B2 (en) | 2001-12-28 | 2005-10-25 | Ekos Corporation | Multi-resonant ultrasonic catheter |
US6778188B2 (en) | 2002-02-28 | 2004-08-17 | Sun Microsystems, Inc. | Reconfigurable hardware filter for texture mapping and image processing |
US20040003376A1 (en) | 2002-06-28 | 2004-01-01 | May Philip E. | Method of programming linear graphs for streaming vector computation |
US20040003220A1 (en) | 2002-06-28 | 2004-01-01 | May Philip E. | Scheduler for streaming vector processor |
US20040003206A1 (en) * | 2002-06-28 | 2004-01-01 | May Philip E. | Streaming vector processor with reconfigurable interconnection switch |
US7159099B2 (en) * | 2002-06-28 | 2007-01-02 | Motorola, Inc. | Streaming vector processor with reconfigurable interconnection switch |
US20040128473A1 (en) | 2002-06-28 | 2004-07-01 | May Philip E. | Method and apparatus for elimination of prolog and epilog instructions in a vector processor |
US20040117595A1 (en) | 2002-06-28 | 2004-06-17 | Norris James M. | Partitioned vector processing |
US6892286B2 (en) | 2002-09-30 | 2005-05-10 | Sun Microsystems, Inc. | Shared memory multiprocessor memory model verification system and method |
WO2004055667A2 (en) | 2002-12-16 | 2004-07-01 | Sun Microsystems, Inc. | System and method for data prefetching |
US20040153813A1 (en) | 2002-12-17 | 2004-08-05 | Swoboda Gary L. | Apparatus and method for synchronization of trace streams from multiple processors |
US7075541B2 (en) | 2003-08-18 | 2006-07-11 | Nvidia Corporation | Adaptive load balancing in a multi-processor graphics processing system |
US20050050252A1 (en) | 2003-08-29 | 2005-03-03 | Shinji Kuno | Information processing apparatus |
US20050071835A1 (en) | 2003-08-29 | 2005-03-31 | Essick Raymond Brooke | Method and apparatus for parallel computations with incomplete input operands |
US20050257151A1 (en) | 2004-05-13 | 2005-11-17 | Peng Wu | Method and apparatus for identifying selected portions of a video stream |
US20060067592A1 (en) * | 2004-05-27 | 2006-03-30 | Walmsley Simon R | Configurable image processor |
US20050289621A1 (en) | 2004-06-28 | 2005-12-29 | Mungula Peter R | Power management apparatus, systems, and methods |
US20060031791A1 (en) | 2004-07-21 | 2006-02-09 | Mentor Graphics Corporation | Compiling memory dereferencing instructions from software to hardware in an electronic design |
US20060044389A1 (en) | 2004-08-27 | 2006-03-02 | Chai Sek M | Interface method and apparatus for video imaging device |
US7246203B2 (en) * | 2004-11-19 | 2007-07-17 | Motorola, Inc. | Queuing cache for vectors with elements in predictable order |
US7392498B1 (en) * | 2004-11-19 | 2008-06-24 | Xilinx, Inc | Method and apparatus for implementing a pre-implemented circuit design for a programmable logic device |
US20060242617A1 (en) | 2005-04-20 | 2006-10-26 | Nikos Bellas | Automatic generation of streaming processor architectures |
US7305649B2 (en) | 2005-04-20 | 2007-12-04 | Motorola, Inc. | Automatic generation of a streaming processor circuit |
US20060265485A1 (en) | 2005-05-17 | 2006-11-23 | Chai Sek M | Method and apparatus for controlling data transfer in a processing system |
US7426709B1 (en) * | 2005-08-05 | 2008-09-16 | Xilinx, Inc. | Auto-generation and placement of arbitration logic in a multi-master multi-slave embedded system |
US20080120497A1 (en) | 2006-11-20 | 2008-05-22 | Motorola, Inc. | Automated configuration of a processing system using decoupled memory access and computation |
Non-Patent Citations (30)
Title |
---|
"Automatic Generation of Interfaces for C-VHDL Cosimulation of Embedded Systems: An Industrial Experience" by Valderrama et al., Proceedings of the Seventh IEEE International Workshop on Rapid System Prototyping, Jun. 1996. * |
"Interface Architecture Generation for IP Integration in SoC Design" by Abbes et al., The 2006 International Conference on Computer Engineering and Systems, Nov. 2006. * |
"Interface Design Approach For System On Chip Based On Configuration" by Maalej et al., Proceedings of the 2003 International Symposium on Circuits and Systems, May 2003. * |
"The Reconfigurable Streaming Vector Processor (RSVP)" by Ciricescu et al., Proceedings of the 36th International Symposium on Microarchitecture, 2003. * |
Amarasinghe et al., "Stream Architectures," Architectures, Languages and Comilers for the Streaming Domain, Massachusetts Instititue of Technology, Pact Tutorial, Sep., 2003, pp. 1-49. |
Amarasinghe et al., "Stream Compilers," Architectures, Languages and Comilers for the Streaming Domain, Massachusetts Institute of Technology, Pact Tutorial, Sep., 2003, pp. 1-42. |
Babb et al., "Parallelizing Applications into Silicon," Proceedings of the 7th Annual IEEE Symposium on Field-Programmable Custom Computing machines, 1999, FCCM '99, Apr. 21-23, 1999, pp. 70-80. |
Bhattacharyya et al., "Mapping DSP Applications onto Self-Timed Multiporcessors," Conference Record of the 35th Asilomar Conference on Signals, Systems and Computers, Nov. 2001, vol. 1, pp. 441-448. |
Buck, "Static Scheduling and Code Generation from Dynamic Dataflow Graphs With Integer-Valued Control Streams," Conference Record of the 28th Asilomar Conference on Signals, Systems and Computers, Oct. 31 - Nov. 2, 1994, vol. 1, pp. 508-513. |
Callahan et al., "The Garp Architecture and C Compiler," Computer, vol. 33, Issue 4, Apr. 2000, pp. 62-69. |
Callahan, "Kernel Formation in Garpcc," 11th Annual IEEE Symposium on Field-Programmable Custom Computing Machines 2003, FCCM '03, Apr. 9-11, 2003, pp. 308-309. |
Caspi et al., "A Streaming Multithreaded model," 3rd Workshop on Media and Stream Processors (MSP-3) Dec. 2, 2001, 8 pages. |
Caspi et al., "Stream Computations Organized for Reconfigurable Execution (Score): Induction and Tutorial," Abstract, U.C. Berkley BRASS Group, Aug. 25, 2000, Version 1.0, pp. 1-31. |
Chiricescu et al., "RSVP II: A Next Generation Automotive Vector Processor," Proceedings of the IEEE Intelligent Vehicles Symposium, 2005, Jun. 6-8, 2005, pp. 563-568. |
Ebeling et al., "RaPiD - Reconfigurable Pipelined Datapath," The 6th International Workshop on Field-Programmable logic and Applications, 1996. |
Erez "Stream Architectures - Efficiency and Programmability," Proceedings of the International Symposium on System-on-Chip, Nov. 16-18, 2004, p. 41. |
Erez et al., "Merrimac - Supercomputing with Stream, Extended Abstract for GP2 Poster Session," Stanford University, Stanford CA, 1 page. |
Goldstein et al., "PipeRench: a Reconfigurable Architecture and Compiler," Computer, vol. 33, Issue 4, Apr. 2000, pp. 70-77. |
Govindarajan et al., "A Novel Framework for Multi-Rate Scheduling in DSP Applications," Proceedings of the International Conference on Application-Specific Array Processors, Oct. 25-27, 1993, pp. 77-88. |
Greb et al., "GPU-ABiSort: Optimal Parallel Sorting on Stream Architectures," 20th International Parallel and Distributed Processing Symposium, IPDPS, Apr. 25-29, 2006, 10 pages. |
Jayasena et al., "Streams and Vectors: A Memory System Perspective," Abstract, Computer Systems Laboratory, Stanford university, Stanford, CA, pp. 1-10. |
Kapasi et al, "The Imagine Stream Processor," Proceedings of the IEEE International Conference on Computer Design: VLSI in Computers and Processors, Sep. 16-18, 2002, 282-288. |
Kapasi et al., "Programmable Stream Processors," Computer, vol. 36, Issue 8, Aug. 2003, pp. 54-62. |
Kathail et al., "Pico: Automatically Designing Custom Computers," Computers, vol. 35, Issue 9, Sep. 2002, pp. 39-47. |
Li et al., "Hardware-Software Co-Design of Embedded Reconfigurable Architectures," Proceedings of the 37th Design Automation Conference 2000, Jun. 5-9, 2000, pp. 507-512. |
McKEE et al., "Dynamic Access Ordering for Streamed Computations," IEEE Transactions on Computers, vol. 49, No. 11, Nov. 2000, pp. 1255-1271. |
Ranganathan et al., "Reconfigurable Caches and their Applications to Media Processing," IEEE 2000, Proceedings of the 27th International Symposium on Computer Architecture, 2000, pp. 214-224. |
Serebrin et al., "A Stream Processor Development Platform," Proceedings of the IEEE International Conference on Computer Design: VLSI in Computers and Processors, Sep. 16-18, 2002, pp. 303-308. |
Taylor et al., "Evaluation of the Raw Microprocessor: An Exposed-Wire-Delay Architecture for ILP and Streams," Abstract, CSAIL, Massachusetts Institute of Technology, pp. 1-12. |
Vistnes et al., "Reconfigurable Address Generators for Stream-Based Computation Implemented on FPGAs," Proceedings of the 19th IEEE International Parallel and Distributed Processing Syumposium (IPDPS 2005), 4 pages. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080244152A1 (en) * | 2007-03-30 | 2008-10-02 | Motorola, Inc. | Method and Apparatus for Configuring Buffers for Streaming Data Transfer |
US7802005B2 (en) | 2007-03-30 | 2010-09-21 | Motorola, Inc. | Method and apparatus for configuring buffers for streaming data transfer |
US20080294802A1 (en) * | 2007-05-24 | 2008-11-27 | Nobuaki Kohinata | Stream processing device and storage device |
US20120200315A1 (en) * | 2011-02-08 | 2012-08-09 | Maxeler Technologies, Ltd. | Method and apparatus and software code for generating a hardware stream processor design |
US8972923B2 (en) * | 2011-02-08 | 2015-03-03 | Maxeler Technologies Ltd. | Method and apparatus and software code for generating a hardware stream processor design |
Also Published As
Publication number | Publication date |
---|---|
WO2007035197A2 (en) | 2007-03-29 |
WO2007035197A3 (en) | 2007-08-09 |
US20070067508A1 (en) | 2007-03-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7603492B2 (en) | Automatic generation of streaming data interface circuit | |
US11609862B2 (en) | Method and apparatus to sort a vector for a bitonic sorting algorithm | |
US11113057B2 (en) | Streaming engine with cache-like stream data storage and lifetime tracking | |
US11099933B2 (en) | Streaming engine with error detection, correction and restart | |
US10747636B2 (en) | Streaming engine with deferred exception reporting | |
US20220283809A1 (en) | Converting a Stream of Data Using a Lookaside Buffer | |
US11068164B2 (en) | Streaming engine with fetch ahead hysteresis | |
US11461096B2 (en) | Method and apparatus for vector sorting using vector permutation logic | |
US20220164188A1 (en) | Two-dimensional zero padding in a stream of matrix elements | |
US11714646B2 (en) | Streaming engine with early exit from loop levels supporting early exit loops and irregular loops | |
US10430210B2 (en) | Systems and devices for accessing a state machine | |
US11709778B2 (en) | Streaming engine with early and late address and loop count registers to track architectural state | |
US20190278597A1 (en) | Inserting Null Vectors nto a Stream of Vectors | |
US11947979B2 (en) | Systems and devices for accessing a state machine | |
US7483283B2 (en) | Apparatus for efficient streaming data access on reconfigurable hardware and method for automatic generation thereof | |
Soudris et al. | Data-reuse and parallel embedded architectures for low-power, real-time multimedia applications | |
WO2006124170A2 (en) | Method and apparatus for controlling data transfer in a processing system | |
CN114651249A (en) | Techniques to minimize the negative impact of cache conflicts caused by incompatible dominant dimensions in matrix multiplication and convolution kernels without dimension filling | |
US20230065512A1 (en) | Pseudo-First In, First Out (FIFO) Tag Line Replacement | |
US11500784B2 (en) | Pseudo-first in, first out (FIFO) tag line replacement |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHAI, SEK M.;BELLAS, NIKOS;DWYER, MALCOLM R.;AND OTHERS;REEL/FRAME:017040/0398Effective date: 20050920 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034419/0001Effective date: 20141028 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |