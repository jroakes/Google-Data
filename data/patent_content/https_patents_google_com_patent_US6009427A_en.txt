US6009427A - Method and apparatus for distributed control of a database - Google Patents
Method and apparatus for distributed control of a database Download PDFInfo
- Publication number
- US6009427A US6009427A US08/904,828 US90482897A US6009427A US 6009427 A US6009427 A US 6009427A US 90482897 A US90482897 A US 90482897A US 6009427 A US6009427 A US 6009427A
- Authority
- US
- United States
- Prior art keywords
- field
- record
- database
- client
- clients
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/52—Program synchronisation; Mutual exclusion, e.g. by means of semaphores
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99938—Concurrency, e.g. lock management in shared database
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99939—Privileged access
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99951—File or database maintenance
- Y10S707/99952—Coherency, e.g. same view to multiple users
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99951—File or database maintenance
- Y10S707/99952—Coherency, e.g. same view to multiple users
- Y10S707/99953—Recoverability
Definitions
- the field of the present invention relates in general to a system for, distributed control of shared resources on a computer network. More particularly the field of the invention relates to distributing control between the multiple hosts in a networked environment over resources such as: storage devices, databases, and projects.
- File servers operate under what is called the client/server paradigm. Under this paradigm a client makes requests of a server that then carries out the requests. In the case of a file server, there may be multiple clients making requests of the file server. The file server receives the requests, queues them, and then services them one at a time. In this way file system consistency is maintained because one entity, the file server, is operating upon the data structures that control the file system where the file information resides in a logical and coherent manner on a storage medium.
- NAP network attached peripheral
- a second approach is the distribution of the process among multiple processors that are attached through a network system.
- This approach is attractive since the number of participating processors can be virtually unlimited, and the type of machines used can be inexpensive and common.
- the primary drawback to network process distribution is that the communication of the information required by each machine to run the process, as well as, the communication of process results can be very slow as it needs to go over a typically slow network connection, through a traditional client/server network (along with the associated bottlenecks of the client/server model). These limitations produce very large processing overheads in cases that require large amounts of data on input and/or output.
- the efficiency of the distributed process is further degraded by the increased network traffic as more machines are added to the process.
- a distributed volume management system In a first embodiment of the invention a distributed volume management system is disclosed.
- multiple clients on a network share control over and responsibility for the coherency of a data storage volume.
- the system includes: a control table associated with the data storage volume.
- the control table includes availability indicia for indicating whether the control table is available and identification indicia for indicating ownership of the control table.
- the system also includes control processes each executed on a client. The control processes request and acquire exclusive ownership of the control table to provide the clients exclusive write access to the data storage volume.
- the method for enforcing mutually exclusive write access to a data storage volume among a plurality of clients connected to the data storage volume comprises the acts of:
- the request routine comprises the acts of:
- release routine comprises the acts of:
- a distributed database-management system In another embodiment of the invention a distributed database-management system is disclosed.
- multiple clients on a network share control over and responsibility for the coherency of a shared database with multiple records.
- the clients arbitrate between each other for exclusive editing access to each of the fields within each record.
- the database-management system includes lock fields with each field in the multiple records.
- Each client executes a resident coherency process.
- the coherency process is responsive to a request to edit a field.
- the process grants the request if there is not a field lock on the request.
- the coherency process asserts exclusive ownership of the field by placing a lock on the field.
- the coherency process is also responsive to a request to exit editing the field.
- the coherency process de-asserts exclusive ownership of the field by removing its lock.
- Each client also executes a database process: to receive a query, to provide records from the database in response to the query, to accept a request to edit a field and to pass the request to edit the field to the coherency process.
- the database process also accepts a request to exit editing a field and passes the request to exit editing the field to the coherency process.
- the method for managing a database with multiple records, and for providing exclusive edit access to each of the fields within each record to the clients connected to the database includes the acts of:
- the coherency routine includes the acts of:
- a distributed project management system In another embodiment of the invention a distributed project management system is disclosed.
- multiple clients on a network share control over and responsibility for a project defined in a project management folder that is stored on the network and that is accessible by the clients.
- the project management folder contains one or more records.
- the record includes: a source file name, a source file location, an application name, an application program code, a destination file name, and a destination file location.
- Each client on the network executes a management process for locating the folders, and for reading the record in a folder. When a record is read, a determination is made as to whether the resource, i.e. the application, which the record calls for is present on the client. If they are not the client passes on the folder.
- the management processes read the contents of the record including the source file name, source file location, application name, application program code, destination file name, and destination file location.
- the management processes then cause the client resident application/resource to open the source file named in the record.
- the management processes cause the client resident application to execute the processes on that source file under the direction of the application program code which was also obtained from the record.
- the management processes detect that the application has completed a task in accordance with the application program code the managment processes direct the application/recource to store the completed task/workproduct in a file with a name corresponding to the destination file name in the record, and to store that file in a location on the network corresponding to the destination file location found in the record.
- the management processes then mark the record in the project management folder as complete.
- the method for distributing the management of a project to selected clients attached to a computer network includes the acts of:
- a project management file on the computer network and the project management folder containing at least one record which includes: a source file name, a source file location, a first application name, a first application program code, a first application destination file name, and a first application destination file location;
- the management process including the acts of:
- FIG. 1A is a hardware block diagram of a prior art client server network.
- FIG. 1B shows the software modules present on each of the clients shown in FIG. 1A.
- FIG. 1C shows the functional relationship of the modules shown in FIG. 1B.
- FIG. 2A is a hardware block diagram showing a serverless network connection between multiple clients and shared storage volumes.
- FIG. 2B shows the software modules present on each client of FIG. 2A.
- FIG. 2C shows the functional relationship between the software modules shown in FIG. 2A.
- FIG. 3A shows the access control table on the shared storage volume shown in FIG. 2A.
- FIG. 3B shows the volume control tables in the shared storage volume shown in FIG. 2A.
- FIG. 4 shows an example of a file directory structure for the shared storage volume shown in FIG. 2A.
- FIGS. 5A-E show the processes for allowing multiple clients to share read and write access to a shared storage volume.
- FIG. 6 is a hardware block diagram of a prior art data base server connected to a client network.
- FIG. 7 is a hardware block diagram in which multiple clients are direct attached to a database on a shared storage volume.
- FIG. 8A shows the access control table on the shared volume of FIG. 7.
- FIG. 8B shows the volume control tables on the shared volume shown in FIG. 7.
- FIG. 8C shows the update list on the shared volume shown in FIG. 7.
- FIGS. 9A and 9B show respectively the enhanced data structures associated with either a relational or flat database on the shared volume of FIG. 7.
- FIG. 10 is a functional block diagram showing the software modules on each client which implement the distributed database processes.
- FIG. 11 is an overall process flow incorporating each of FIG. 10 within the overall structure of a database engine.
- FIGS. 12A-F shows the processes implemented on each client shown on FIG. 7 in order to maintain a coherent database on the shared storage volume.
- FIGS. 13A-C show a network environment in which multiple clients cooperatively process the task dictated by a project management file.
- FIGS. 14A-D are detailed data structures associated with the project management files shown in FIGS. 13A-C.
- FIGS. 15A-B shows examples of projects that can be implemented on the network shown in FIGS. 13A-C.
- FIGS. 16A-D show the screen interfaces associated with the process shown in FIG. 15A.
- FIGS. 17A-F show the processes implemented on the clients of FIGS. 13A-C for implementing distributed process management.
- FIG. 1A is a hardware block diagram of a prior art client server network.
- the network comprises clients 54-56 [labeled respectively as clients A-B], server 60 and storage volumes 64 and 66.
- Storage volume 66 is a compact disk.
- volume 64 is a redundant array of disks (RAID).
- Each storage volume has a file directory associated with it.
- Storage volume 64 contains a file directory 62.
- Each of clients 54-56 contains respectively cache copies 50-52 of file directory 62.
- Computers 54-56 are connected via a local area network (LAN) to server 60.
- Server 60 is connected to storage volumes 64 and 66 by a small computer system interface (SCSI) connection.
- SCSI small computer system interface
- clients A-B In order for clients A-B to connect to either of volumes 64-66 they must first log an access request with server 60.
- server 60 conducts processes 58 corresponding to volume management write access and file management in order to maintain the coherency of the storage volumes.
- FIG. 1B shows the hardware and software modules on server 60 during power on.
- Server 60 comprises a non-volatile memory 84, a CPU 80 and a local storage device 86.
- non-volatile storage device 84 is a software module identified as the operating system (OS) kernel.
- Storage device contains the full OS 90, associated drivers 92, and start-up configuration 94.
- OS operating system
- the CPU 80 initiates the code sequence of the operating system kernel 88.
- the CPU accesses the main operating system 90 on storage device 86.
- various drivers 92 are initialized. These drivers connect the CPU to peripheral devices such as keyboard, monitor, printer, and storage devices.
- a start-up file 94 is implemented which results in one or more applications being enabled.
- the module associated with the OS are the access control module 96, the command receipt module 98, the scheduling module 102 and the logical to physical translation and space allocation module 110.
- the modules are the screen driver 104, the CD driver 106 and the RAID storage driver 108.
- application module 100 is enabled by the start-up file 94.
- FIG. 1C is a block diagram showing the functional input output I/O relationship between the software modules shown in FIGS. 1B-C includes a client application 150 communicating with server 60, which in turn communicates with either of storage devices 64 or 66, as shown initially in FIG. 1A.
- the file server 60 comprises a logical I/O block 158 and physical I/O block 160.
- Logical I/O block 158 comprises command receipt module 98, access control modules 96 and file directories 166.
- Physical I/O block 160 comprises scheduling module 102, logical to physical translation and space allocation module 110 and drivers 104-108 associated with respectively the monitor, the CD and the RAID storage device.
- RAID storage device 64 includes a file directory 62 which contains the directory tree and access rights for all data located on storage device 64.
- a client application 150 communicates via server 60 with either of storage devices 64 and 66.
- Commands received from client application 150 includes: create, delete, open, close, read, and write. Each of these commands is accompanied by a logical file name.
- a command is passed from the command receipt module 98 to the access control module 96.
- the access control modules 96 each interface with a corresponding one of file directories 166.
- a physical volume can be a single storage device or a partition on a storage device.
- a file directory will be discussed in greater detail in connection with FIG. 4, and generally includes a directory tree of logical file names, and access privileges associated with each file name.
- the access control module 96 determines on the basis of access privileges contained in file directories 166 whether or not a specific command should be implemented. For example, if an application command comprises a write request to a file or volume, which is listed as read only, then that request will not be implemented by the access control module. Alternately, when a command is received that the access control module will implement then the data associated with that command is passed directly to the scheduling module 102.
- the physical I/O block is the primary interface with the environment outside the computer system. The physical I/O deals with blocks of data that are exchanged with disk or tape systems. Thus, it is concerned with the placement of those blocks on the secondary storage device and with the buffering of those blocks in main memory, the scheduling module is concerned with scheduling disk or tape accesses to optimize performance.
- I/O buffers are assigned and secondary memory is allocated at this level.
- a command to, e.g., read data from a specific logical location is passed to logical to physical translation and space allocation module 110.
- This module is responsible for translating a logical location into a actual physical location on a specific storage device.
- a file for example, may not be stored on a contiguous portion of a storage device. Instead, it may be stored on fragmented segments.
- This module then performs the translation of a logical file name to a series of physical segments.
- This module is also responsible for space allocation. Space allocation in the sense that when a write commands is received the actual physical locations to which the data is written, is determined by module 110.
- the final software interface between the server 60 and the storage device is via an appropriate device driver.
- Each device driver handles one device type.
- the device driver is the only part of the operating system that knows how many registers the disk controller has and what they are used for. It alone knows about sectors, tracks, cylinders, head-arm motion, interleave factors, motor drives, head settling times and all other mechanics of making the storage device work properly.
- the job of a device driver is to accept abstract requests from the device-independent software above it and see to it that the request is executed.
- FIG. 2A is a hardware block diagram of a preferred embodiment of the current invention in which clients may be directly attached to one or more shared storage volumes, without loss of coherency of the data contained on those volumes.
- Clients 54-56 storage devices 64-66 and server 60 are shown.
- RAID storage device 64 includes a file directory 204, an access control table 206 and a volume control table 208.
- Clients 54-56 each implement processes for distributed management of storage volumes 64-66.
- Client 54 implements process 214 and client 56 implements process 216.
- Clients 54-56 include resident copies 200-202 of file directory 62.
- Server 60 as indicated by x marker 212 is no longer needed in order to service a request from either client 54 or 56 to the storage volumes 64-66. Instead, clients 54-56 are directly connected to storage volumes 64-66.
- the connection is based on either the Fibre Channel ANSI Standard X3.230 and/or the SCSI-3 ANSI Standard X3.270, although other media connection systems may be supported.
- fibre channel architecture provides high speed interface links to both serial communications and storage I/O. These links can transmit data using industry standard interfaces at 10 to 100 times the speed of currently-existing architectures. Fibre channel is part of a very recent revolution in data communications caused by incorporating the serial transmission line, design techniques and technologies into applications and computer architecture that have traditionally used parallel bus-base types of data transport.
- Fibre channel supports a flexible topology including point -to- point links, packet-switching, and shared-media loop topologies.
- a fibre channel network links clients 54-56 to both of storage volumes 64-66.
- Storage volume 64 is equipped with striping software which reads and writes data concurrently across multiple disks. This striping capability allows the bandwidth of the network medium, i.e., fibre channel to be equaled by the bandwidth of the storage device. This is in spite of the fact that individual disks on the storage device can only provide data at a fraction of the bandwidth of the network connection. By striping a file across multiple disks the bandwidth constraints imposed by the physical limits on the head-arm are overcome by allowing multiple disks to operate in parallel to provide data drives.
- processes 214-216 are implemented on respectively clients 54-56. Each process controls the mounting of new volumes, write access and file management.
- a client In order to write data to the storage device 64, a client must first have determined that a write condition exists within both the access control table 206 and the volume control table 208 on the shared storage volume. When that condition is determined to exist, the client may write to the storage volume. When that condition does not exist a write request is denied.
- the access control table and volume control table reside on a separate volume on a physical storage device which has both a read and write capability.
- each of processes 214 and 216 utilizes the shared access and volume control tables to determine when and under what conditions they may write to any one of a number of volumes to which they may be attached.
- FIG. 2B is a hardware software block diagram of client 54.
- Client 54 comprises CPU 250 non-volatile memory 254 and local storage device 258.
- Non-volatile 254 comprises an ISO 256.
- Nonvolatile memory 258 comprises the main OS 260 device drivers 262 and start-up files 264.
- CPU 250 uploads the OS kernel from boot ROM 254 and reads the remaining portion of the operating system 260 from the local storage device 258, e.g., a disk drive.
- device drivers 262 and start-up file 264 are enabled.
- Software module block 252 shows the software modules that are enabled during the power on.
- the command receipt module 98, the access control modules 96, the scheduling module 102, the logical to physical translation and space allocation module 110, and the converter modules 268 are enabled.
- the screen driver 104, the CD driver 106 and the RAID driver 270 are enabled.
- the volume control application 266 and a resident application 100 are enabled.
- FIG. 2C shows the functional relationship between the software modules enabled during power on and shown in FIG. 2B.
- Client 54 and physical storage devices 64 and 66 are shown.
- Physical storage device 64 includes a file directory 62, access control table 206, volume control table 208 and blocks 1 through N.
- Physical storage device 62 includes its own file directory and data blocks 1 through N.
- Client 54 includes volume control application 266, logical I/O block 158 and physical I/O block 160.
- Logical I/O block 158 includes command receipt module 98, access control modules 96, file conversion module 268 and file directory 166.
- Physical block 160 includes scheduling module 102, logical to physical translation and space allocation module 110 and device drivers 104-106 and 270.
- device driver 270 is not filly enabled during the initialization of the operating system.
- the physical device 64 does not appear to client 54 to be available, i.e., connected.
- volume control 266 When volume control 266 is enabled it sends a series of commands to command receipt module 98. These commands result in the discovery of the lock storage driver 270 by the volume control module 266.
- the volume control module In the course of this discovery process, the volume control module also discovers the access and volume control tables 206 and 208 on the physical device 64. During this discovery process any other applications other than the volume control application will not have access to the physical storage device 64.
- volume control module 266 When the volume control module 266 has read the access and volume privileges from respectively the access control 206 and volume control tables, it then engages in a senes of commands designed to write those access privileges to the file directories 166. For example, if it is determined that the volume control table indicates that client 54 is to have read/write access to physical device 64, then the volume control module will issue a mount R/W command, which when received by the command receipt module will cause the file directory 166 to be updated and to include these privileges. Subsequently, when the file directory 166 is written back to physical device 64 then the file directory 62 resident on the actual physical device 64 will also be updated.
- the access and volume privileges are read from the access and volume control tables and written by the volume control module 266 to the cached 166 and physical 62 file directories.
- This process can be carried out across multiple physical devices on the basis of an access and volume control table which resides in only one of those devices in the preferred embodiment, however, other locations for these tables are possible.
- Protocol conversion module 268 interfaces the access control module 96 to the file directories 166, and maintains a uniform file directory structure across heterogenous operating systems, such as may be present on clients 54 and 56.
- Client 54 for example, may be running a MacIntosh System 7®, operating system while client 56 may be running Windows NT.
- the protocol conversion modules 268 on each of these clients enforce a homogenous file directory structure thus enabling cross platform operation of the current invention.
- the protocol conversion module 268 provide a communication rule conversion and command format conversion to the communication rules and command format of the common API. Thus, directories and files can be stored in a data format across multiple operating systems.
- the format has specific ASCII characters, conventions for file names and specific conventions which will be discussed in greater detail in connection with FIG. 4 for file directory and access control.
- FIG. 3A shows detailed data structure for the access control table 206 discussed above in connection with FIGS. 2A-C.
- Logged on fields 356 of the access control table indicate which user processes 214-216 [see FIG. 2A] are logged onto the access control and volume control tables. Until a user is logged onto the access control table any applications on that client will not be able to access any of the physical devices whose device drivers have a lock control similar to device driver 270 [See FIG. 2C].
- the access and control table also has refresh notification field 358 associated with each client.
- a boolean true condition in a field associated with a specific client assures that client will be notified by its resident volume control process, when changes in the access privileges of other users on the system take place.
- a boolean false has the opposite effect, i.e., no notification will be provided by the volume control process on a client having a boolean false in the refresh notification field of the access control table.
- the access control table also provide a message passing capability between clients.
- Field 360 contains a request message.
- Field 362 and 354 contain respectively, a text based and boolean based response message.
- the access control table includes a semaphore field 352. The presence of a semaphore in the semaphore field indicates that one of clients 54 or 56 has seized control of the access and volume control tables 206-208 respectively.
- a client process which has written a identifier in the semaphore field 352 can alter the privileges associated with each volume and can initiate a change in the write status.
- FIG. 3B shows the data structures associated with the volume control tables 208. Specifically, tables 208A and 208B are shown. There is one volume control table for each volume, which supports distributed control by multiple writers. The fields within volume control record 208A are all identified with the suffix "A.” The fields identified with volume control table 208B all contain a "B" suffix. Field 390 identifies the logical volume associated with a specific volume control table. Field 390A indicates that RAID storage device 64 [see FIG. 2A] is associated with volume control table 208A. Field 390B indicates that the CD-ROM 66 [see FIG. 2A] is associated with volume control table 208B.
- Field 392 contains a boolean TRUE/FALSE indicating whether or not a specific volume is write enabled.
- Field 392A indicates that the RAID device 64 [see FIG. 2A] is write enabled.
- Field 392B indicates that CD-ROM 66 [see FIG. 2A] is not write enabled
- Field 394 indicates which client currently has write access to a specific volume.
- Field 394-A indicates that client 54 [see FIG. 2A] currently has write access to RAID storage device 64.
- Field 394B indicates that no client has write access to CD-ROM 66 [see FIG. 2A].
- Field 388 indicate which clients have mount access privileges for each specific volume.
- a boolean true indicates that the client can mount the volume.
- a boolean false indicates the opposite.
- Field 396 indicates for each client as to the ability to request a change to its current volume settings.
- a boolean false indicates a client is not locked out from making change requests such as read-only to read-write (or vise versa).
- a boolean true indicates a client is locked out from making change requests.
- Field 384 is a boolean true/false indicating wether or not a client with read only privileges will be updated when changes are made to the volume by other clients with respect to a specific volume.
- Fields 386 are time stamps indicating the last time at which a client received an updated copy of a file directory 62 [See FIG. 2A].
- Field 382 is a time stamp indicating the last modification time for a specific volume by any client. By comparing the last modification time field 386 to the volume modification time field 382 the processes 214-216 [see FIG. 2A] can determine when a client with auto update privileges is in need of a file directory refresh.
- the access table comprises a StudioBOSS -- DB -- Header 14xx and an array of Partition -- Volume -- Record's 14xx.
- the Volume -- DB -- Header 14xx is stored at the beginning of the Volume Table in a first embodiment of the present invention, although the actual position could vary. A description of each of its fields follows:
- Request -- Response 14xx Set TRUE of the response was positive and the response -- Message is valid.
- Pascal style string of a message to be sent from the sender to the receiver as part of a request
- volume -- DB -- Header 14xx is followed by MAXIMUM -- VOLUMES 14xx (200) Partition -- Volume -- Record's 14xx.
- MAXIMUM -- VOLUMES 14xx Partition -- Volume -- Record's 14xx.
- the field is a Partition -- Volume -- Header 14xx record and contains information regarding the next volume in the table. See below for a complete description of its fields.
- This field is an array of Partition -- User -- Record 14xx records and contains information regarding the up to MAXIMUM -- USERS 14xx (200) users of the volume. See below for a complete description of its fields.
- each host computer Located on each host computer is a preference file that consists of a Preference -- Record 14xx.
- the purpose of this information is to allow each host a unique user number inside the Volume table so that each host can log into to the Volume table and have its own set of parameters configured for each file system.
- This value indicates the total number of Volume tables that have been configured and found at a previous search. This is the number that will automatically be expected to be found upon net startup.
- a Volume -- Node -- Record 14xx is a data structure used by the volume File Control software component in the form of a linked list, one for each file system to be monitored.
- This variable is a timer that, when expired, indicates it is time to check the volume to see if it needs to be refreshed.
- This variable indicates the amount of free space on the file system.
- This variable is an indication of the position in the Volume table that describes this file system for this host.
- This variable is an indication of the position in the Volume table that indicates this user information for this host.
- This variable is a reference data structure used to access the Volume table itself.
- a timer that when expired, indicates that is is time to check the next file system.
- a timer that when expired, indicates that is sis time to check for any pending table requests.
- a variable either TRUE or FALSE that indicates when the Volume File Control software component is operating with administrator functions available to the user.
- a variable either TRUE or FALSE, that indicates if is time to shutdown and restart the system by logging out of all tables, and relogging back in.
- a variable either TRUE or FALSE, that indicates if all file system and table monitoring should be suspended.
- FIG. 4 is a detailed data structure diagram for a uniform file directory format which can be implemented on both clients A-B utilizing the current invention. This directory structure can be maintained, not withstanding the operating system on each client by the protocol conversion modules 268 discussed above in FIG. 2C. Shown on FIG. 4 are the file directory 62 and a physical address map 452 for the storage device 64. File directory 62 comprises a volume header 454, a directory record 456, a file record 458 and a file location record (Extent) 460. This directory structure is generally associated with the HFS file directory format associated with the System 8 operating system provided with the MacIntosh® computers.
- the Volume header 454 contains the name of the volume, its creation date, its update date, a software lock, a listing of attributes and privileges, a volume availability bit map, and a number of other parameters broadly defining the physical volume.
- Associated with the volume record 454 are a plurality of directory records of which record 456 is referenced. Each directory record includes a pointer to a parent directory, a name, a creation time and a modification time.
- Next are the plurality of file records associated with each directory of which file record 458 is referenced. Each file record contains a name, a type, a lock indicator, a creation and modification time and other file level information.
- Associated with each file and directory record are a plurality of file location records of which record 460 is referenced.
- Each file location record includes a pointer to the physical address at which the file starts and an indication as to the length of the file. If a file is stored in noncontiguous segments, then there will be an overflow indicator indicating the physical address of the next portion of the file and the length of that portion. As indicated in the physical address record 452, the file location record addresses and address lengths correspond to the actual physical address locations of the file contents. For example in file location record, 460 file ONE is listed as starting at physical address 1000, having a length of 44 sectors. In the physical address record 452, file ONE begins at a physical memory address 1,000 and extending up to physical address 1044, for a total length of 44 sectors. Each operating system has its own file directory structure differing in numerous aspects from the one disclosed in FIG. 4.
- protocol conversion modules 268 associated with each of client processes 214-216 enforce a uniform file directory format notwithstanding the operating system on each client. This assures that there is cross-platform compatibility between any application on either of the clients notwithstanding the OS that may be present on the client.
- a client running a MacIntosh System 8® operating system can read or write a file created by another client operating with a Windows NTTM operating system.
- FIGS. 5A-E show the processes 214-216 associated with respectively clients A and B as shown in FIG. 2A. Each client implements all the capabilities shown in FIGS. 5A-E.
- FIG. 5A The processes associated with power up and log on are shown in FIG. 5A.
- the device drivers and the volume control processes are loaded to the client.
- Control passes to process 502 in which device drivers which have been customized to include the locking feature are located.
- specific device driver connected to the physical volume which contains the volume and access control tables [see FIG. 2C] is identified.
- Control passes to decision process 504.
- decision process 504 a determination is made as to whether a volume and access control table has been created. If that determination is in the negative, then control passes to process 506 in which the volume control process presents to an administrator a template on which to create an access and volume control table.
- Control is then passed to process 508 in which the newly created access and volume control tables are stored on a volume with a customized, i.e., lockable driver. Control then passes to decision process 512. Alternately, if in decision process 504, a determination in the affirmative is reached, i.e., that a volume control table does exist, then control passes directly to decision process 512.
- decision process 512 a determination is made as to whether the semaphore field 352 [see FIG. 3A] is empty. In the event this determination is in the negative, control passes to processes 510 for the introduction of a delay after which delay interval control returns to decision process 512.
- decision process 512 i.e., that the semaphore field 352 of the access control table 206 [see FIG. 2A] is empty then control passes to process 514.
- process 514 the client identifier is written to the semaphore field.
- Control passes to process 516 in which the client who has seized the access and control table reads the access and control tables. Control then passes to decision process 518.
- decision process 518 a determination is made as to whether the client identifier in field 352 is the I.D. of the client running the process. In the event that determination is in the negative, the client has not seized control of the access and volume tables. Therefore, control returns to decision process 512. If in the affirmative, a determination is made in decision process 518 the a client has seized control of the access and control table then control passes to process 522. In process 522, the client reads the access and volume control tables. Control is then passed to process 520. In process 520, the client writes their I.D. in the corresponding log on field 356 [see FIG. 3A] in the access control table 206. Control then passes to process 524.
- control passes to processes 526 in which the access control module 266 [see FIG. 2C] sets the access privileges for each physical device in accordance with those privileges indicated in the access and control table for the specific client running this process. As discussed above in FIG. 2C, these privileges are set by the volume control process sending mount volume commands to the command receipt module 98, which are accompanied by either a read or read/write privilege. Control then passes to splice block A.
- FIG. 5B shows the processes conducted on a client associated with requesting a write privilege for a file system or volume.
- control passes to decision process 550.
- decision process 550 a determination is made as to whether a write to request has been received by the volume control process 266 [see FIG. 2C].
- This write request can be received at any time by the volume control process via a graphical user interface (GUI).
- GUI graphical user interface
- the GUI allows a user to select a specific volume with respect to which the user has read privileges and to request that those privileges be altered to write privileges.
- a write request can be made programatically via another process.
- control is then passed to decision process 560.
- decision 560 a determination is made as to whether the value in field 352 corresponds to the client I.D. of the client running the process. In the event that determination is in the negative control returns to decision process 554. Alternately, if a determination in the affirmative is reached in decision process 560, then control passes to decision process 562. In decision process 562, a determination is made on the basis of the mount access field 388 [see FIG. 3B] as to whether this particular client can mount the volume to which the write to request is directed. If this determination is in the negative, then control passes to process 570 in which a notification is given that the write to request has been denied.
- Control passes to splice block D.
- decision process 562 a determination is reached that the volume is mountable with respect to this particular client running the process, then control passes to decision process 564.
- decision process 564 a determination is made on the basis of fields 396 [see FIG. 3B] as to whether this client can obtain write access to the specific volume or whether the client is locked out of request access. If a determination is reached in the affirmative, i.e., that the client cannot obtain write access then control passes to process 570 discussed above. Alternately, if a determination in the negative is reached in decision process 564, i.e., that the client is not locked out from obtaining write access to the volume then control passes to decision process 566.
- decision process 566 a determination is made on the basis of field 394 [see FIG. 3B] and fields 356 [see FIG. 3A] as to whether the current writer has in fact logged off the network. If that determination is in the affirmative, then control passes to process 572 in which a dismount command is issued for the volume. Control is then passed to process 574 in which a mount volume command is sent by the volume control process 266 [see FIG. 2C] to the command receipt module 98. This causes the volume to be mounted reflecting the most recent changes. Control then passes to process 576 in which field 394 [see FIG. 3B] in the volume control table is updated with the I.D. of the client running the process.
- Control then passes to process 578 in which the client releases the access and volume control tables by removing their semaphore i.e., I.D. from the semaphore field 352 [see FIG. 3A] of the volume control table. Control then passes to splice block C.
- a write request is written to the request field 360 [see FIG. 3A] of the access control table. This request includes an identifier of the volume to which the write request is directed; the identifier of the client making the request; and a textual message from the requestor.
- the identifier of the volume to which the write request is directed is read from field 394 of the volume record.
- the text message can be manually entered in a GUI interface provided by volume control process 266 [see FIG. 2].
- Control then passes to decision process 580.
- decision process 580 the response message and response boolean fields respectively 362 and 354 [see FIG.
- control passes to process 574 discussed above. Alternately, if that determination is in the negative, then control passes to process 578 in which the current requestor removes their I.D. from the access control table semaphore field 352 [see FIG. 3A] control then passes to splice block C.
- FIG. 5C shows the processes connected with a response to another client requesting write access privilege.
- Process portion begins at splice block B and control is passed to process 600.
- process 600 the access control table and specifically request message field 360 [see FIG. 3A] is read.
- Control is then passed to decision process 602.
- decision process 602 a determination is made as to whether the client I.D. associated with the request corresponds to the I.D. of the client running the process. If a determination in the affirmative is made, i.e., that the client running the process is the client to which the request is directed then control is passed to decision process 604.
- decision process 604 a determination is made as to whether an auto response capability has been enabled for this specific client.
- this determination could be made on the basis of yet another field entry in the access control table 206 [see FIG. 3A]. There would in this embodiment be a field corresponding to each client in which a Boolean true condition would indicate that auto response had been enabled and a boolean false condition would indicate that it had not been enabled. If a determination is made in decision process 604 that auto response has been enabled, then control would pass directly to decision process 610. In decision process 610, a determination would be made on the basis of the current processing on the client as to whether control could be relinquished at this time. If for example, the client was in the middle of conducting a large rendering project, decision in the negative might be reached.
- control would be passed to process 614.
- the responding client would write a boolean false condition in the response message field 362 [see FIG. 3A] of the access control table.
- Control would pass to splice block D.
- control would pass directly to splice block D.
- decision process 604 if a determination is made that the request was being made of a client running process (process block 602 YES) and further that auto response feature had not be enabled, then control would pass directly to process 606.
- process 606 a message prompt is presented by GUI portion of volume control process 266 [see FIG. 2C] to the user. The user would be given the alternative of answering the request yes or no, and including in the response a text based message. This response would be written to the response message and boolean response fields respectively, 362 and 354 [see FIG. 3A]. Control is then passed to decision process 608.
- decision process 608 a determination is reached as to whether the user has relinquished write privilege.
- decision process 610 if a determination is made that write control cannot be relinquished at the current time, then control is also passed to process 616.
- the boolean true condition is written to the access control table and specifically boolean response field 354 [see FIG. 3A]. This indicates that the client receiving the request and currently having write privileges is about to release those privileges.
- Control is then passed to process 618.
- process 618 any files on the requested volume are closed and the volume is dismounted as to read and write access and remounted in a read only access mode. Control is then passed to splice block D.
- process 612 a boolean false condition is written to the access control table and specifically boolean response field 354 thereof [see FIG. 3A]. Control is then passed to splice block D.
- FIG. 5D shows the portion of the processes connected with converting a write privilege into actual write access to a file system.
- Process portion begins at splice block C where control is passed to decision process 650.
- decision process 650 a determination is made on the basis of field 392 in the volume control table [see FIG. 3B] as to whether the volume to which the write to request is directed is in fact enabled. If this determination is in the negative, then control is passed to process 666 in which a message is delivered to the user by the GUI interface portion of volume control process 266 [see FIG. 2C] indicating that the volume is disabled and write access cannot be provided. Control is then passed to splice block B.
- decision process 650 if in decision process 650 an affirmative determination is reached, i.e., that the volume to which the write to request is directed is in fact enabled, then control passes to decision process 652.
- decision process 652 a determination is made as to whether the volume is mounted for the client running the process. If that determination is in the negative, then control is passed to process 658 in which the volume control process 266 [see FIG. 2C] sends a mount command with read write privileges to the command receipt module 98 [see FIG. 2C]. This results in the volume being mounted with read write privileges. Control is then passed to decision block 654.
- control is also passed to decision process 654.
- decision process 654 a determination is made as to whether a file directory level a software lock bit is enabled as to this specific volume and whether that software lock bit precludes access to the volume. In the event that determination is in the affirmative, then control is passed to process 660.
- process 660 the software lock and file directory is either bypassed or disabled. In a preferred embodiment, it is preferable to bypass the software lock. This has the benefit of preventing clients on the network which do not have the volume control process form inadvertantly accessing the controlled volume. Control is then passed to decision process 656. Alternately, if in decision process 654 determination is reached either that no software lock exists at the file directory level or that the software lock at the file directory level can be bypassed by the commands of the volume control process 266, then control is passed directly to decision process 656.
- decision process 656 a determination is made as to whether the volume is currently mounted with read and write privileges. In the event that the determination is in the negative, control is passed to process 662 in which the volume control process 266 sends a volume dismount followed by a volume mount R/W for the requested volume to the command receipt module 98 [see FIG. 2C]. This has the effect of remounting the volume with read write privileges as to this client. Control is then passed to splice block D. Alternately, if in decision process 656 a determination in the affirmative is reached, i.e., that a volume is mounted and mounted with read write privileges, then control passes directly to splice block B. The changes in the file directory brought about by the processes of FIG.
- 5D are first evidenced in the cached copy 166 of the file directory corresponding to the volume to which write access is provided [see FIG. 2C].
- the cached copy updates are then flushed back or written back to the file directory on the physical device 64 which results in a coherent set of file directories in which the new access privileges are evidenced.
- FIG. 5E includes that portion of the processes associated with read only volumes.
- a client mounted in a read only state to a volume will not be updated as to changes in the file directory that might take place with respect to that volume, i.e., when writes are conducted to that volume to other clients on the system.
- the processes of FIG. 5E provide that capability.
- the processes begin at splice block D where control passes to decision block 700 in decision block 700, a determination is made on the basis of fields 384 [see FIG. 3B] of the volume control table as to whether any of the volumes to which the client is currently connected in a read only state, are indicated for auto updating.
- the last modify time field 386 [see FIG. 3B] for this particular client is read in process 702 and compared with field 382 [see FIG. 3B].
- the purpose of this process is as follows.
- decision process 706 a determination is made as to whether the clients cached directory copy is stale. In the event this determination is in the negative, the client contains the most recent copy of the file directory resident on the volume. Control therefore passes to splice block A since no updating is necessary. Alternately, if in decision process 706 an affirmative determination is made, i.e., that the cached file directory 166 [see FIG. 2C] is stale, then control is passed to decision process 708. In decision process 708, a determination is made as to whether the access control database semaphore field 352 [see FIG.
- control is passed to process 710 in which the client I.D. is written to the semaphore field in the access control table 206 [see FIG. 3A].
- control passes to process 714 in which the semaphore field portion of the access control table is read and control is then passed to decision process 716.
- decision process 716 a determination is made as to whether the client I.D. present in the semaphore field is identical to the I.D. of the client conducting this process.
- a volume dismount command followed by a mount with read access only command is sent by the volume control process 266 [see FIG. 2C] to the command receipt module 98.
- the user display may include information as to all volumes and the status of all clients with respect to those volumes; i.e. mount/dismount, read only, read/write, locked/unlocked. Control then passes to splice block A.
- FIG. 6 shows a prior art client database server configuration.
- the hardware components include clients 54-56, server 60 and storage device 64.
- a database 754 of multiple records, each with a plurality of fields, is stored on storage device 64, which is connected to server 60 by a SCSI connection.
- Server 60 is connected via a LAN to both clients 54 and 56. Either of clients 54 or 56 launch a query and in response to that query, server 60 implements database functions 750. Then server 60 obtains a copy 752 of the database stored on the physical device 64 and sorts through the records to find those which match the client query. Then the server provides only those records matching the query to the client.
- This prior art architecture has the benefit of leaving the massive job of sorting and searching the database to the high speed server and allowing less expensive client workstations to engage in the querying process.
- FIG. 7 shows another embodiment of the current invention, in which a shared resource, i.e., a database is subject to distributed management by any one of the clients to which it is directly attached.
- a shared resource i.e., a database
- This architecture has the benefit of not requiring a server intermediate the physical device on which the database is stored and the clients which are accessing that database.
- This architecture has the disadvantage of requiring each client to implement a complete database engine.
- the current invention can be used to advantage. In this instance, processing time on either of the clients more closely correlates with the image transfer process than it does with the actual query and sorting process conducted with finding the pointer to the image audio file or animation to be transferred.
- FIG. 7 The components of FIG. 7 include clients 54-56 labeled as clients A-B respectively, and server 60 and storage device 64.
- Database 804 is resident on the physical storage device 64 and includes additional fields suitable for the implementation of this embodiment of the invention. These additional fields will be described in detail in the following FIGS. 9A-B.
- Storage device 64 is direct connected to each of clients A-B.
- the network connection can for example be fibre channel as described and discussed in FIG. 2A. This type of network provides a very high bandwidth communication path between storage device 64 and either of the clients. This allows the rapid transfer of bitmapped images, animation or sound clips without the impediment of a server, which as been eliminated as indicated by delete mark 212.
- Clients 54-56 each contain a cache copy of the database sorting indices.
- Sorting indices 800 are associated with client 54 while sorting indices 802 are associated with client 56. These indices are periodically refreshed from the main indices stored on the actual physical device 64.
- Each of clients 54-56 implements respectively enhanced database processes 808-810. In addition to the normal database functions of query, matching and locking, these processes also include record locking, record update and volume control fimctions which will be discussed in greater detail. Coherency of database access to individual records and fields within a record is maintained by virtue of the interaction of client resident processes 808-810 with an access control table 206, a volume control table 208 and an update list 806, all of which are resident on a volume within physical device 64, which volume is read/write accessible by all clients.
- FIG. 8A shows the detailed data structure for the access control table 206.
- the access control table is identical to that described and discussed in FIG. 3A. This access control table will be utilized in the processes discussed in the following FIG. 12F.
- FIG. 8B shows the detailed data structure for the volume control table associated with read volume 64 on which the database 804 [see FIG. 7] is stored. Note that in the lock out fields 396A each of clients 54 and 56 is indicated as Boolean false, meaning that they both have write privileges with respect to that volume. Additionally, both clients A and B are identified in field 394A as having concurrent write privilege.
- FIG. 8C shows the detailed data structure for the update list 806 [see FIG. 7].
- the update list contains for each client field 830, a corresponding record pointer 832 associated with the field that a client is editing. This list is utilized by the enhanced database processes 808-810 [see FIG. 7] for broadcasting updates to a field to all of the clients currently viewing the corresponding record. As indicated in fields 832, both clients 54 and 56 are currently viewing a field within record 2.
- FIG. 9A shows the detail data structures associated with a relational database embodiment 804A of database 804 discussed in FIG. 7.
- the relational database includes a name table 804A-1, a work address table 804A-2 and a home address table 804A-3.
- Each of the tables contains multiple fields and for each field there is a corresponding lock field.
- table 804A-1 there is a prefix and last name field for each record.
- Lock fields 856 are associated with each of the prefix fields and lock fields 858 are associated with the last name fields.
- In the work address table there are street fields and city fields for each record. Associated with each of the street fields is a corresponding field lock 862. Associated with each of the city fields is a field lock 864.
- Home address table 804A-3 includes both a street and a city field for 290 each of the records.
- the street field has a corresponding lock field 868.
- the city field has a corresponding lock field 870.
- free fields 860, 866 and 872 which indicates one of two states; active or free.
- a record with a free field marked active contains valid data.
- a record with a free field marked free contains no data and is available to be used as a new, added record.
- a free field marked delete contains a record destined to be physically removed from the database in order to reduce the storage requirements of the database. The deletion of a record from the database therefore, may be accomplished either by marking the record as free or by marking it as delete.
- a record may be added to the database either by converting a free field to an active field or by physically adding new records to the database. The processes connected with these activities will be discussed in greater detail in FIGS. 12A-12F.
- FIG. 9B shows detailed data structures associated with a flat database implementation 804B of database 804.
- the database 804B comprises rows each corresponding to an individual record.
- the database contains a prefix field, a last name field, a home and work address field and a city field.
- a lock field 880B Associated with the prefix field is a lock field 880B.
- a corresponding lock field 882B Associated with the last name fields is a corresponding lock field 882B.
- Associated with each of the home/work address fields is a corresponding lock field 884B.
- Associated with each of the city fields is a corresponding lock field 886B.
- Associated with each record is a corresponding free field 888B in which the possible states are active, free or delete. The effect of these free field states is identical to that discussed in FIG. 9A.
- FIG. 10 shows the software modules on each client for managing the distributed database.
- Client 54 and RAID storage device 64 are shown.
- RAID storage device 64 contains a database and locking fields 804.
- the client 54 includes run time supervisor 900, transaction routines 902, command and path intercept 904, buffer manager 908, lock manager 906 and lock rerouter 910.
- a query is received by the run time supervisor 900 and passed to a transaction routines module 902.
- the transaction routine module submits a request for records from storage medium 64. That request is intercepted by the command or path interception module 904.
- the command path intercept module initiates the distributed management functions which will be discussed in greater detail FIGS. 12A-F, before passing the request on to buffer manager 908.
- Buffer manager 908 reads data from and writes data to the database 804 within storage device 64.
- the lock manager issues a lock request for the required resource. That request is intercepted by lock rerouter 910.
- Lock rerouter 910 is responsible for implementing the field locking procedures, which will be discussed in greater detail in FIGS. 12C-F.
- FIG. 11 shows the overall process flow connected with either of the distributed database processes 808-810, on respectively clients 54-56.
- Processing begins at process 950 in which an administrator sets up a database on a specific storage volume having specific field and record characteristics and permitting multiple writers.
- Field within the database may contain text, or numerical data, or pointers to image files, sound files, and animation files.
- the database will be established with a plurality of empty/free/available records of predefined size for future use. Thus, new records may be added to the database without requiring that the physical storage space be altered.
- Control is then passed to process 952 in which a GUI is presented to the user for purposes of accepting and processing a query.
- Control is then passed to process 954 in which the records retrieved from the database are viewed.
- Subroutine block 956 corresponds to the processes shown in greater detail in FIG. 12A.
- decision block 958 a determination is made as to whether the user desires to edit a specific field within the record that is being viewed. If that determination is in the negative then control passes to decision block 966. Alternately, if the decision in the affirmative is reached, i.e., that a field is to be edited then control passes to subroutine block 960.
- the processes in subroutine 960 are set forth in greater detail in FIG. 12C. Control then returns to decision process 962. In decision process 962 a determination is made as to when the user has exited the field being edited.
- subroutine module 964 corresponds to the processes set forth in greater detail in FIG. 12D. Subsequent to the execution to the subroutine control returns to decision process 966. In decision process 966 a determination is made as to whether the user has exited the record. If that determination is in the negative control returns to decision process 958. Alternately, if the determination is in the affirmative, i.e., that the user has exited the record then control passes to subroutine block 968. Subroutine block 968 corresponds to the processes described in greater detail in FIG. 12B. From subroutine 968 control passes to decision process 970.
- decision process 970 a determination is made as to whether the user desires to add a record. In the event that determination is in the affirmative, control passes to subroutine 972. Subroutine 972 corresponds to processes described in greater detail in FIG. 12F. On return from subroutine 972, control passes to delete decision process 974. Alternately, if in decision process 970 a determination in the negative is reached, i.e., that the user does not desire to add a record then control passes directly to delete decision process 974. In delete decision process 974 determination is made as to whether the user desires to delete a record. If that determination is in the negative, control returns to query process 952.
- Subroutine module 976 includes the processes described in greater detail in the following FIG. 12E.
- FIG. 12A outlines the processes connected with the view record subroutine module 956 discussed above in FIG. 11.
- Process begins at splice block A and passes to intercept process 1000.
- intercept process 1000 a record pointer corresponding to the record being viewed is intercepted by the command path intercept module 904 [See FIG. 10].
- Control passes to reserve sector process 1002.
- reserve sector process 1002 the sector in storage device 64 corresponding to the record update table 806 [See FIG. 8C] is reserved.
- Control passes to reserve confirmation decision process 1004.
- reserve confirmation decision process 1004 determination is made as to whether the sector has in fact been reserved. In the event this determination is in the affirmative, control passes to read sector process 1006.
- the read sector process 1006 the sector containing the update table is read and a pointer is obtained for the specific record in the table having a I.D. identical to the client I.D. running the process. Control then passes to process 1008. In process 1008 the record I.D. and/or record pointer obtained in process 1000 is written to the field in the control table corresponding to the client running this process. Control then passes to release sector process 1010. In process 1010 the sector being read is released. Control then returns via splice block B.
- FIG. 12B shows the exit record processes associated with subroutine module 968 described above in FIG. 11.
- a subroutine commences at splice block C and control passes to process 1030.
- process 1030 a record pointer for the record from which the user is exiting is obtained by the command path intercept module 904 [See FIG. 10].
- Control is then passed to reserve sector process 1032.
- the sector on the storage device 64 in which the update table [See FIG. 8C] is reserved.
- Control passes to reserve confirmation decision process 1034. In this decision process, a confirmation is made as to whether the server reservation has been accepted and implemented. When an affirmative determination is reached, control is passed to read sector process 1036.
- control is then passed to process 1038.
- process 1038 the record I.D. field corresponding to the client running the process is erased. This indicates that the user is no longer viewing the record.
- process 1040 the reserve sector is released and control returns via splice block D.
- FIG. 12C shows the process implemented by subroutine module 960 [see FIG. 11] for editing a field.
- the subroutine commences at splice block E and control passes to process 1070.
- the command path intercept module 904 [See FIG. 10] intercepts the field pointer corresponding to the field being edited.
- Control then passes to process 1072.
- a reserve sector request is placed for a sector in the physical storage device 64 [See FIG. 10] in which the field is stored.
- Control is then passed to confirmation decision process 1074.
- confirmation decision process 1074 determination is made as to whether the requested sector has in fact been reserved. In the event a determination in the negative is reached, then control passes to broadcast decision process 1076.
- broadcast decision process 1076 a determination is made as to whether another client who is currently reserving the sector has broadcast a message indicating that the sector has been released. In the event of an affirmative determination, control returns to reserve sector process 1072. If in decision process 1074 an affirmative determination is reached, then control passes to process 1078. In process 1078 the reserve sector is read. Control then passes to decision process 1080. In decision process 1080 a determination is made as to whether the field with respect to which editing rights are being requested is in fact free. This determination is made on the basis of the lock fields described and discussed above in FIGS. 9A-B. In the event a negative determination is reached, control is passed to release sector process 1082. In process 1082 the sector is released and control returns to broadcast decision process 1076.
- the lock rerouter 910 [See FIG. 10] writes the client I.D. to the locking field to be edited.
- Control is then passed to release sector process 1086.
- release sector process 1086 the reserved sector is released and control is passed to process 1088.
- process 1088 the user edits the selected field and control returns via splice block F.
- FIG. 12D shows the processes implemented by subroutine module 964 [see FIG. 11] for exiting an edited field.
- Subroutine module 964 described and discussed above in connection with FIG. 11 corresponds to these processes.
- the subroutine commences at splice block G and control passes to process 1100.
- process 1100 the field pointer for the field being exited and the corresponding record pointer are obtained by the command path intercept module 904 [See FIG. 10].
- Control is then passed to process 1102.
- process 1102 the sector on the physical storage device on which the record and field reside is reserved.
- Control is then passed to reserve confirmation decision process 1104.
- decision process 1104 decision is made as to whether the sector has in fact been reserved. In the event this determination is in the negative, control is passed to broadcast decision 1106.
- broadcast decision 1106 a determination is made as to when the sector is released by whichever client currently has that sector reserved. Control then passes upon release to process 1102. Alternately, if an affirmative determination is reached in decision process 1104, i.e., that the sector has been reserved, then control passes to process 1108. In process 1108 the reserve sector is read and control passes to process 1110. In process 1110 the lock rerouter 910 [See FIG. 10] erases the block field associated with the field being exited and control passes to process 1112. In process 1112 the command path intercept module 904 [See FIG. 10] passes the update to the edited field to the physical storage device 64. Control is then passed to process 1114. In process 1114 the update table 806 [See FIG.
- Control is read and sorted by the record pointer fields 832 [See FIG. 8C]. Control then passes to process 1116 in which clients viewing the same record as that associated with the field which has just been updated are identified. Control then passes to process 1118. In process 1118 a broadcast message is sent to the clients viewing the updated record. The message contains an identifier corresponding to the record which is a field of which has just been updated. Control then passes to 1120. In process 1120 the reserved sector is released and control returns via splice block H.
- FIG. 12E shows the detailed processes associated with deleting a record and corresponding to subroutine module 976 described and discussed above in FIG. 11.
- the process begins at splice block I and control passes to process 1150.
- process 1150 the pointer to the record to be deleted is intercepted by the command path intercept module 904 [See FIG. 10].
- Control then passes to process 1152.
- process 1152 the sector in the physical storage device associated with a record to be deleted is reserved.
- decision process 1154 determination is made as to whether the reserved sector has in fact been reserved. In the event a determination in the negative is reached, then control returns to decision process 1156.
- decision process 1156 a determination is made as to when the other client that has reserved that sector releases the sector. When such an affirmative determination is reached, control returns to process 1152.
- the lock rerouter 910 [See FIG. 10] reads the sector on the physical storage device which contains the record.
- decision process 1160 in which a determination is made by the lock rerouter as to whether all the lock fields within that record are free.
- decision process 1162 In the event that determination is in the negative, i.e., all fields are not free and therefore another client is currently editing one of the fields, control passes to process 1162.
- process 1162 the reserve sector is released and control returns to broadcast decision process 1156.
- process 1164 the lock rerouter 910 writes to the free field [See FIGS. 9A-B] a delete indicator.
- process 1166 all fields within the deleted record are erased by the lock rerouter 910.
- process 1168 the reserve sector is released. Control then returns via splice block J.
- FIG. 12F shows the detailed processes associated with adding a record which are described and discussed above in connection with subroutine module 972 in FIG. 11.
- Control commences at splice block K and passes to process 1180.
- the command path intercept module 904 [See FIG. 10] intercepts the add transaction request and passes control to process 1182.
- process 1182 the free fields of all records in the database are analyzed and control is passed to decision process 1184.
- decision process 1184 a determination is made as to whether any of the free fields associated with each record currently in the database contains a free indicator. In the event that determination is in the negative, i.e., that no records are available, then control passes to process 1186.
- a semaphore field 352 [See FIG.
- control for the access control table is grabbed [see FIG. 5A, processes 510-518]. Control then passes to process 1188. In process 1188 the actual physical storage space reserved for the database is increased by adding new records. The free fields of those new records are marked with a free indicator. Control then passes to process 1190. In process 1190 the semaphore field 352 for the control table 206 [See FIG. 8A] is released. Control then returns to process 1192.
- process 1192 the physical sector associated with the free record is reserved.
- decision process 1194 a determination is made as to whether the sector has in fact been reserved. In the event that determination is in the negative then control passes to decision process 1196.
- decision process 1196 a determination is made as to when the client who has currently placed a reserve on that sector has released that reserve. When such a determination is in the affirmative, control returns to process 1192. Alternately, if in decision process 1194 an affirmative decision is reached, i.e., that the sector has in fact been reserved then control passes to process 1198.
- process 1198 the physical sector containing the free record is read. Control then passes to process 1200. In process 1200 an active indicator is written to the free field of the record [see FIG. 9A14 B]. This indicates that the record has been placed into use. Control then passes to process 1202. In process 1202 the reserved sector is released and control returns via splice block L.
- FIGS. 13A-C show the overall format for distributing control over multiple processors in a network environment.
- the network environment may be configured as either or both a NAP paradigm or a client-server paradigm.
- FIGS. 13A-C include clients 54-56 and 1302-1304, which are connected to a network 1300.
- a series of project management folders 1314-1320 are available to all the clients on the network.
- Each client includes application programs and distributed project management process.
- Client 54 includes distributed project management process 1310
- client 56 includes distributed process management process 1312
- client 1302 includes distributed process management process 1306,
- client 1304 includes distributed project management process 1308.
- the distributed project management processes each include the ability to select a project management folder to initiate the processing of a selected portion of that project management folder and to store a resultant file to an assembly location.
- a complex project such as a multimedia presentation involving image editing, rendering and key frame conversion can be accomplished cooperatively by the multiple clients in a network environment.
- clients 54-56 and 1302 have each obtained copies 1314A-C respectively, of project management folder 1314.
- Each client has selected a segment of the project defined in Project Management File [PMF] 1314.
- Project management processes 1310-1312 and 1306, engage applications present on their respective clients in the processing associated with the selected segments of the PMF 1314. As resident applications complete the required task, the results are stored in files.
- FIG. 13C shows that clients 54-56 and 1302 have released their copies of the PMF 1314.
- the resident processes 1310-12 and 1306 have caused the work product generated by the local applications to be stored on the network.
- Client 54 has stored its work product on the network in file 1330 depicted pictorially for purposes of example as the left hand portion 1500 of an image frame.
- Client 56 has stored its work product on the network in file 1332 depicted pictorially as the center portion 1502 of the image frame.
- Client 1302 has stored its work product on the network in file 1334 depicted pictorially as the right portion 1504 of the image frame. The location of each of these files on the network is recorded in the PMF 1314.
- PMF 1318 The next PMF on which processing is commenced is PMF 1318.
- Clients 1302-1304 have obtained copies respectively 1318C-D of PMF 1318. These clients will sign on for the processing of certain segments of these PMFS as well.
- FIGS. 14A-D show the data structures associated with a project management folder.
- FIG. 14A shows the data structures corresponding to a project management folder.
- Project management folder 1314 is shown to include a project file 1450, a capacity table 1350 and process option templates 1400A-B.
- FIG. 14B shows the detailed data structures associated with capacity table 1350.
- Capacity table 1350 contain one row/record for each client on the network.
- application availability fields 1356-1362 record the availability of the applications on the client.
- client A [54] is shown with an electric image rendering package 1358 consumes 25% of its processing capacity.
- a CAD package 1360 is shown consuming 10% of the processing capacity on client A [54].
- a rendering package 1362 is shown consuming 25% of the processing bandwidth of client A [54].
- remaining unspecified applications and the operating system consume another 10% of the processing bandwidth of client A.
- word processing package is listed in field 1356 as N/A indicating that that application is not even resident on client A [54].
- Fields 1352 record for each client and specifically in this instance, client A [54], the accumulation of the utilization entries in fields 1356-1362. Thus, client A has a utilization 1352 listed at 70% of its total processing bandwidth.
- the remaining fields in the capacity table are the processing speed in terms of millions of instructions per second (MIPS) 1354.
- Client A [54] as listed as having a processing capability of 266 MIPS.
- Corresponding information is available for all clients on the network.
- Each record in the capacity table is maintained and updated by a corresponding one of distributed project management processes 1306-1312. The processes cause operating systems calls to be generated. These calls return variables corresponding to percent utilization broken down on an application specific basis. The processes then write these updated results to the corresponding fields associated with their record in the control table.
- a single table is utilized to record percent utilization for all network resources in a common location.
- FIG. 14C shows the detailed data structures corresponding to process option templates 1400A-B.
- a process option template is associated with a specific application.
- a process option template causes an application resident on a client to be executed in a specific manner.
- process option template 1400A is associated with the software application Electric Image®.
- Fields 1402A-1408A record respectively the appropriate frame size, compression, format, frames per second, and duration indicators for the application.
- a frame size 1402A of 640 ⁇ 480 is shown.
- a JPEG compression technique 1404A is indicated.
- a playback rate 1406A expressed in frames/second is indicated at 15.
- intended duration 1408A of the animation is two seconds.
- Process option template 1400B is associated with computer aided design (CAD) application. For that application a frame size compression technique and bit depth preference is indicated in respectively, fields 1402B-1408B.
- the x axis frame size is 24, the y axis frame size is 12, the compression technique is TIFF and the bit resolution is 8 bit.
- Each of the process option templates can be generated in any one of a number of manners.
- the process option templates can be generated by a user enabling an application and selecting preferred processing parameters and storing those with an associated output file. Alternately, a process option template can be administratively generated and appended to a specific file in a shell program intended for just such a purpose.
- FIG. 14D shows the detailed data structures of the project file 1450.
- the project file includes a header with sign on fields 1454 and master preference fields 1452.
- the sign on fields indicate which amongst the various clients on the network have signed on for the project. Clients A, B and C are shown as having signed on to the project while client D has not. None of the clients has requested or been designated for master status since all the entries in the master status fields 1452 are zero.
- the project file 1450 includes a resource requirements section. This section includes the names of the applications required to complete the project. In addition, executable path fields 1456 name the executable file for the application. Source data file fields 1458 indicate which files should be loaded by each application. This particular project requires the word processing application, the electric image application, the CAD application and a rendering application. The electric image application requires a source data file named "center.vsd" and the path to that file is listed as c: ⁇ . . . ⁇ center.vsd. The next portion of the project file is the segments sections. Two segment sections are shown. Generally, the number of these sections corresponds to the number of clients on the network, which can simultaneously engage in the processing associated with a particular project. Some projects will have one segment while other complex rendering projects that can be divided amongst a large number of clients, will have a large number of segments.
- Each segment comprises a segment definition field 1460, a program field 1462, a storage path field 1464, a priority field 1466, a processed-by field 1468 and a segment status field 1470.
- the segment definition field 1460 defines the starting and ending point for a specific segment.
- the starting and ending point for the electric image application in the first segment is listed as frames 1-2.
- the program control field 1462 contains control script, e.g., Visual Basic® JavaTM or "DDE Script" which causes the application to perform in a manner appropriate for this specific project.
- control script e.g., Visual Basic® JavaTM or "DDE Script” which causes the application to perform in a manner appropriate for this specific project.
- the word “applications” include any processes running on a computer, from high level programs like Auto-Cad ® to low level applications including the OS.
- Storage path fields 1464 indicate where the results are to be stored [See FIG. 13C reference 1330-1334].
- Fields 1466 determine the processing order of applications and segments within a project.
- Processed-by fields 1468 indicate who amongst the clients on the network has caused a locally resident application to execute a segment of the PMF. For example, in segment 1 the "a" identifier shows that the project management processes on client A have taken on the processing of segment 1 of the electric image task. Finally, segment status field 1470 indicates for each segment and for each application within a project file, what the status of that segment is. Possible entries are "0", "1", or "2". A 0 entry indicates that the segment has not yet been processed, a "1" entry indicates that the segment is being processed and a "2" entry indicates that the segment processing is complete and that the file generated as a result of that processing, has been stored at the store path location on the network.
- the next portion of the project file is the assembly portion which comprises fields 1472-1478.
- Field 1472 is an I.D. field indicating who amongst the various clients has performed the final assembly.
- Field 1474 contains the program code or DDE sequence associated with performing that task.
- Field 1478 indicates the location on the network in which the results are to be stored.
- the next portion of the project file is the process option template fields 1480. This field lists each application a corresponding process option template or process option template path.
- FIGS. 15A-B show two examples of distributed projects.
- FIG. 15A shows a two dimensional image, in which an image to be rendered is divided into three portions, each of which is rendered on a separate client.
- Portion 1500 is the left hand side of the image
- portion 1502 is the center portion of the image
- portion 1504 is the right hand side of the image.
- Each of these portions is stored in a corresponding file 1330-1334 on the network.
- FIG. 15B is an animation sequence consisting of six frames.
- the first two frames 1522 are created by one client and stored in a file 1330 on the network.
- the next portion 1524 comprises frames 3 and 4 of the animation strip and it is stored in file 1332 on the network.
- the last portion 1526 of the project is frames 5 and 6 which are stored in file 1334 on the network.
- FIGS. 16A-D show a client resident application 1550 under the direction of a distributed project management process being caused to open a source data file [see FIGS. 16A-B] to process a file [see FIG. 16C] and to save the file [FIG. 16D].
- the application is caused to perform in this manner by the control script 1462 [see FIG. 14D] associated with a segment.
- This code is uploaded by the distributed management processes and utilized by those processes to cause the application to perform in a predefined manner.
- FIG. 16A the GUI 1550 for the application is shown. Superimposed on that GUI is a file open GUI 1554.
- the file open GUI is enabled by the program code script which implements the file open command found within the file menu 1552.
- Within the GUI operator 1554 is a preview window 1556 in which the contents of the selected file 1558 are shown.
- image 1560 associated with file 1558 is displayed in GUI 1550.
- the project management process has sent the next line of executable code to the CAD application resulting in a shading operation being selected from the tool menu 1562.
- the CAD application shades a portion 1564 of the image 1560 and displays it.
- the next line of code is delivered by the distributed project management processes to the application.
- the application Upon receipt of the next line of code, the application is caused to perform a file "save as” function found on menu tree 1552.
- a "save as" GUI interface 1566 is enabled and the file name "center.vsd” is placed in the file name window. Subsequently, the file corresponding to the segment that has just been processed is stored on the network.
- FIGS. 17A-F are process flow diagrams which show the various distributed project management processes.
- FIG. 17A shows the create project processes.
- control passes to process 1652.
- process 1652 a project file is created.
- the user is presented a GUI interface not unlike that shown in FIG. 14D. Using that template they enter the various parameters for the project file.
- Control then passes to process 1654.
- process 1654 the process option template(s) are created. In a preferred embodiment, these are also created by a user via a GUI interface resembling that shown in FIG. 14C.
- Control then passes to process 1656.
- process 1656 the process management files and related process option templates are stored on the network. Control then passes to splice block A.
- FIG. 17B shows the processes connected with maintaining the utilization/capacity table 1350 shown in FIG. 14B.
- the distributed management processes 1302, 1304, 1310 and 1312 [see FIGS. 13A-C] independently conduct these process steps.
- control passes to process 1680.
- a function call is sent to the OS to obtain utilization information broken down by application.
- Control is then passed to process 1682.
- process 1682 the utilization table is discovered and read.
- control is then passed to process 1684.
- the rowrecord is the utilization table corresponding to the client running this process is identified.
- Control is then passed to process 1686.
- the values obtained above in process 1680 are placed in the appropriate field in the utlization table.
- Control is then passed to process 1688.
- process 1688 the processing speed for the client entered in the utilization table is read from that table.
- Control then passes to process 1690.
- process 1690 function calls are sent to the OS to get the processing speed of the client.
- decision process 1692 a determination is made as to whether the entry in the table corresponds to the actual processing speed of the client running the process. In the event the two do not match, then process is passed to process 1694 in which the entry in the table is updated to reflect the current processing power of the client.
- Control then passes to splice block B. Alternately, if in decision process 1692 an affirmnative determination is reached, i.e., that the entry in the utilization table for this client is correct, then control passes directly to splice block B.
- FIG. 17C shows the portion of the distributed management processes performed when a master/slave relationship has been enabled.
- the client that is either predesignated for master status or that first seizes the PMF and obtains master status directs the subsequent processing of all segments of the project file.
- a peer-to-peer approach to distributed processing is implemented. In the peer-to-peer approach each client is continually looking for an incomplete PMF to process.
- processes commence at splice block B.
- Control passes to process 1720 in which the next PMF is located.
- the next PMF is selected from a first in first out (FIFO) queue and the processing on that PMF continues until the segments in the file are complete and the final assembly has been performed.
- the next PMF would be defined as any file which had incomplete segments or which had not been finally assembled.
- Control passes to process 1722 in which the selected PMF is read.
- decision process 1724 In decision process 1724 a determination is made as to whether this particular project management folder is enabled for master/slave status. In the event this determination is in the negative, control passes to splice block D.
- decision process 1726 a determination is made on the basis of master fields 1452 [see FIG. 14D] as to whether any master has signed on to this project management folder. In the event that determination is in the affirmative then control passes to splice block C.
- decision process 1728 a determination is made as to whether the client designated for master status in the master status fields 1452 [see FIG. 14D] has an I.D. corresponding to my I.D., i.e., the client running this process. In the event that determination is in the negative then control passes to splice block C.
- control passes to process 1730.
- the client signs on as accepting master status and it does so by writing a sign-on identifier to the appropriate field 1454 in the project management folder.
- Control then passes to control 1732.
- the utilization table is read to determine slave availability and processing capacity.
- Control is then passed to process 1734.
- the segment record with the highest priority 1466 [see FIG. 14D] that has not yet had its segment status field 1470 [see FIG. 14D] marked with a "2" is obtained, and the application 1456 required for that segment is determined. Control is then passed to process 1736.
- process 1736 the master engages in a slave solicitation and/or slave assignment process. Only those slaves with locally resident applications which match the application 1456 for the segment are chosen. Additionally, slaves with more available processing power and less utilization, as determined in process 1732, will be preferred over those with slow processing speed and limited capacity.
- Control passes to decision process 1738.
- decision process 1738 a determination is made as to which slaves have accepted slave status. For those slaves that have accepted slave status control passes to process 1740 in which the slave I.D. is determined.
- Control then passes to process 1742.
- process 1742 information is sent by the master to the slave based on the PMF segment that the slave is designated to process. That information includes: a pointer to the source file that the slave will need in order to engage in the process, a segment definition indicating what segment is to be processed, an executable code sequence to enable the slave to enable its resident application(s) and a process option template. Finally the master will send to the slave a pointer to the location on the network in which the slave should store its work product. Control then passes to decision process 1744.
- decision process 1744 a determination is made as to whether there are any remaining incomplete segments and if there are then control returns to decision process 1738 for the selection of the next slave. If there are no remaining incomplete items then control passes to decision process 1746.
- decision process 1746 a determination is made as to whether all of the slaves have completed their work. The completion of work is determined on the basis of entries made by the slaves in the project file, and specifically, the segment status fields 1470 [see FIG. 14D].
- process 1748 the master completes the final assembly of the segments of the project file according to the instructions contained in the assembly portion of the project file [see FIG. 14D].
- Control then passes to process 1750.
- the master writes in the PMF and specifically fields 1472 a status indicator indicating that the final assembly is complete and that this project management folder can be closed. Control then passes to splice block A.
- FIG. 17D sets forth the processes engaged in by a slave. Processing begins at splice block C and control is passed to decision process 1780. In decision process 1780 a determination is made as to whether or not a master request has been received. In the event that determination is in the negative control passes to splice block B. Alternately, if a determination on the affirmative is reached then control passes to process 1782 in process 1782 the slave sends an affractive response to the master indicating that they accept slave status. Control is then passed to process 1784 in which the slave receives the information from the master necessary for it to process its designated segment of the project file. Control then passes to process 1786. In process 1786 the slave enables the designated application(s) and controls that application with the appropriate control script and process option template.
- Control is then passed to process 1786.
- process 1786 the slave writes to the corresponding segment status field 1470 in the project file [see FIG. 14D] a status "1" indicator. This indicates to any client reading the project file that that segment is being processed currently by the slave.
- decision process 1788 the slave determines whether or not the resident application has completed its project segment.
- process 1790 the application is caused to store its work product in the location designated in process 1784 and the application is closed.
- Control passes to process 1800.
- process 1800 a segment complete indicator "2" is written to the appropriate field 1470 in the project file. Control then passes to splice block B.
- FIG. 17E discloses that portion of the distributed project processes associated with peer-to-peer, rather than master/slave relationships between the clients. Processing begins at splice block D. Control then passes to process 1820 in which the next PMF is read. Control then passes to process 1822 in which the utilization table is read. Control then passes to process 1824 in which the segments within the PMF are sorted by priority and a determination is made as to which of those segments is not yet completed. That determination is based on the entry in the above mentioned and discussed priority 1466 and segment status 1470 fields [see FIG. 14D]. Control then passes to decision process 1826. In decision process 1826 a determination is made as to whether there are any remaining incomplete segments. If that determination is in the negative then control is passed to splice block E.
- control is passed to process 1828.
- process 1828 a determination is made as to whether the application associated with the next prioritized segment is available on the client running this process. Control then passes to decision process 1830 in which that determination is implemented.
- process 1736 the master engages in a slave solicitation and/or slave assignment process. Only those slaves with locally resident applications which match the application 1456 for the segment are chosen. Additionally in a preferred embodiment, slaves with more available processing power and less utilization, as determined in process 1732, will be preferred over those with slow processing speed and limited capacity. If the client running the process does not have the application called for then control passes to splice block B. Alternately, if an affirmative determination is reached, i.e., that the client has the requisite application resident then control passes to process 1832. In process 1832 the client signs on to a segment within the project file. A client does this by writing a status "1" indicator in the appropriate segment status field 1470 in the project file. [See FIG.
- process 1834 the client reads from the process file the appropriate segment information including a pointer to the source file, segment definition, application processing code, process option template and/or path statement to process option template and a designated location in which to store the work product.
- process 1836 the client enables its resident application utilizing the program code sequence and the process option template provided to it from the project file.
- process 1840 In process 1840 the appropriate one of the status fields 1470 is updated to a status "2" to indicate in the project file that that particular segment is complete. Control then passes to splice block B.
- FIG. 17F indicates those processes engaged in a peer-to-peer relationship associated with the reassembly of a project file in which all segments have been completed.
- Processing begins at splice block E and passes to process 1860.
- process 1860 the project management folder is read.
- Control then passes to decision process 1862.
- decision process 1862 a determination is made on the basis of final assembly fields 1472 in the project file [see FIG. 14D] as to whether the PMF has been assembled. In the event that determination is in the affirmative then control returns to splice block B. Alternately, if a negative determination is reached, i.e., that the PMF has not been subject to final assembly then control passes to process 1864.
- process 1864 the final assembly is performed according to the assembly instructions stored in the PMF. Control then passes to process 1866. In process 1866 the appropriate final assembly field(s) is marked with a status "2" indicating that the final assembly is complete. Control then returns to splice block B.
- the plug-in either can assemble the results without any process application interaction, or it can as a option issue a Assemble -- Process IAC call to assemble everything.
Abstract
Description
______________________________________ From To Notes ______________________________________ Inter Application Calls Distribute.sub.-- Process(POT.sub.-- File.sub.-- Pathname, Project.sub.-- File.sub.-- Pathname) MPA MSB MPCA MSB Launch.sub.-- Process SSB SPA MSB SPA In case processing power of the master machine is wanted (not already open) Process.sub.-- Segment(PMF.sub.-- File.sub.-- Pathname, Plugin.sub.-- ID, Timestamp, Segment.sub.-- Parameters) SBPI SPA SBPI MPA In cases where processing power of master machine is wanted Processing.sub.-- Segment(PMF.sub.-- File.sub.-- Pathname, Plugin.sub.-- ID, Timestamp, Segment.sub.-- Parameters) SPA SSB Indicates that processing of requested segment has actually begun MPA MSB Indicates same, used in cases where processing power of master machine is wanted Segment.sub.-- Done(PMF.sub.-- File.sub.-- Pathname, Plugin.sub.-- ID, Timestamp, Segment.sub.-- Parameters) SPA SSB Indicates that processing of requested segment done MPA MSB Indicates same, used in cases where processing power of master machine is wanted Quit.sub.-- Process SSB SPA MSB SPA In case processing power of the master machine was used (wasn't open at start) Assemble.sub.-- Process(PMF.sub.-- File.sub.-- Pathname, Plugin.sub.-- ID, Timestamp) SBPI SPA Optional way to assemble when the plugin itself cannot assemble result SBPI MSB Same, used in cases where processing power of master machine is wanted Assembly.sub.-- Done(PMF.sub.-- File.sub.-- Pathname, Plugin.sub.-- ID, Timestamp) SPA SSB If assembly done with process assistance, indicates completion MPA MSB Same, used in cases where processing power of master machine was used. Process.sub.-- Complete(Pot.sub.-- File.sub.-- Pathname, Project.sub.-- File.sub.-- Pathname) MSB MPA Indicates completion of entire process MSB MPCA Same StudioBOSS to StudioBOSS Calls FOR PROCESS CONTROL SB.sub.-- Process.sub.-- Segment(PMF.sub.-- File.sub.-- Pathname, PMF.sub.-- Reference) MSB SSB SB.sub.-- Processing.sub.-- Segment(PMF.sub.-- Reference) SSB MSB Indicates that processing of requested segment has actually begun SB.sub.-- Segment.sub.-- Done(PMF.sub.-- Reference) SSB MSB Indicates that processing of requested segment done SB.sub.-- Quit.sub.-- Process(PMF.sub.-- Reference) MSB SSB Called to cleanup after process segments are done processing SB.sub.-- Assemble.sub.-- Process(PMF.sub.-- Reference) MSB SSB Called to assemble process results (when plugin/app not available on MSB) FOR ARBITRATION MASTER/SLAVE CONTROL SB.sub.-- Become.sub.-- Slave(PMF.sub.-- File.sub.-- Pathname, PMF.sub.-- Reference) MSB SSB Called to become slave SB.sub.-- Slave.sub.-- Response(PMF.sub.-- File.sub.-- Pathname, PMF.sub.-- Reference, Response) SSB MSB Response (true/false) if it will be slave for the process SB.sub.-- Become.sub.-- Free MSB SSB To free up slaves ______________________________________
Claims (17)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US2321896P | 1996-08-02 | 1996-08-02 | |
US08/905,307 US5999930A (en) | 1996-08-02 | 1997-08-01 | Method and apparatus for distributed control of a shared storage volume |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/905,307 Continuation-In-Part US5999930A (en) | 1996-08-02 | 1997-08-01 | Method and apparatus for distributed control of a shared storage volume |
Publications (1)
Publication Number | Publication Date |
---|---|
US6009427A true US6009427A (en) | 1999-12-28 |
Family
ID=21813768
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/905,307 Expired - Lifetime US5999930A (en) | 1996-08-02 | 1997-08-01 | Method and apparatus for distributed control of a shared storage volume |
US08/904,828 Expired - Lifetime US6009427A (en) | 1996-08-02 | 1997-08-01 | Method and apparatus for distributed control of a database |
US08/905,287 Expired - Lifetime US6076105A (en) | 1996-08-02 | 1997-08-01 | Distributed resource and project management |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/905,307 Expired - Lifetime US5999930A (en) | 1996-08-02 | 1997-08-01 | Method and apparatus for distributed control of a shared storage volume |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/905,287 Expired - Lifetime US6076105A (en) | 1996-08-02 | 1997-08-01 | Distributed resource and project management |
Country Status (9)
Country | Link |
---|---|
US (3) | US5999930A (en) |
EP (1) | EP0972247B1 (en) |
JP (1) | JP2000515657A (en) |
CN (1) | CN1227644A (en) |
AT (1) | ATE262196T1 (en) |
AU (1) | AU3889497A (en) |
CA (1) | CA2262450A1 (en) |
DE (1) | DE69728176T2 (en) |
WO (1) | WO1998006036A1 (en) |
Cited By (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6212610B1 (en) * | 1998-01-07 | 2001-04-03 | Fujitsu Limited | Memory protection mechanism for a distributed shared memory multiprocessor with integrated message passing support |
US6240416B1 (en) * | 1998-09-11 | 2001-05-29 | Ambeo, Inc. | Distributed metadata system and method |
US20010047319A1 (en) * | 2000-05-24 | 2001-11-29 | Fujitsu Limited | Data linking system |
US20020049738A1 (en) * | 2000-08-03 | 2002-04-25 | Epstein Bruce A. | Information collaboration and reliability assessment |
US20020089551A1 (en) * | 1997-07-14 | 2002-07-11 | Hugh Harlan M. | Method and apparatus for displaying a thought network from a thought's perspective |
US20020133561A1 (en) * | 1999-11-04 | 2002-09-19 | Xdrive Technologies, Inc. | Shared internet storage resource, user interface system, and method |
US6523032B1 (en) * | 2000-05-12 | 2003-02-18 | Oracle Corporation | Servicing database requests using read-only database servers coupled to a master database server |
US20030117434A1 (en) * | 2001-07-31 | 2003-06-26 | Hugh Harlan M. | Method and apparatus for sharing many thought databases among many clients |
US20030172070A1 (en) * | 2002-03-06 | 2003-09-11 | Sawadsky Nicholas Justin | Synchronous peer-to-peer multipoint database synchronization |
US20030182285A1 (en) * | 2002-03-08 | 2003-09-25 | Katie Kuwata | Method and implementation of session-based file locking for network applications |
US20040078360A1 (en) * | 2002-10-22 | 2004-04-22 | Defauw Randy | Data locking system and method for medical system architecture |
US20040249902A1 (en) * | 1999-10-20 | 2004-12-09 | Vali Tadayon | Method and apparatus for providing a web-based active virtual file system |
US20050044147A1 (en) * | 2003-07-30 | 2005-02-24 | Canon Kabushiki Kaisha | Distributed data caching in hybrid peer-to-peer systems |
US20050091289A1 (en) * | 2003-10-24 | 2005-04-28 | Microsoft Corporation | File sharing in P2P group shared spaces |
US20050171956A1 (en) * | 1999-11-04 | 2005-08-04 | O'brien Brett | Shared internet storage resource, user interface system, and method |
US20050216746A1 (en) * | 2004-03-24 | 2005-09-29 | Nobuyuki Saika | Data protection method, authentication method, and program therefor |
US20050289143A1 (en) * | 2004-06-23 | 2005-12-29 | Exanet Ltd. | Method for managing lock resources in a distributed storage system |
US20060149567A1 (en) * | 2004-12-30 | 2006-07-06 | International Business Machines Corporation | Method, system, and computer program product for dynamic field-level access control in shared documents |
US20060282438A1 (en) * | 2005-06-10 | 2006-12-14 | Microsoft Corporation | Performing a deletion of a node in a tree data storage structure |
US20070050377A1 (en) * | 2005-08-29 | 2007-03-01 | Manish Srivastava | Method or apparatus for locking shared data |
US20070067368A1 (en) * | 2005-09-22 | 2007-03-22 | Choi Patricia D | Apparatus, system, and method for dynamically allocating meta-data repository resources |
US20080021922A1 (en) * | 2006-07-21 | 2008-01-24 | Brent Tzion Hailpern | Method and system for maintaining originality-related information about elements in an editable object |
US7328263B1 (en) * | 2001-01-30 | 2008-02-05 | Cisco Technology, Inc. | Controlling access of concurrent users of computer resources in a distributed system using an improved semaphore counting approach |
US20090046344A1 (en) * | 2005-05-26 | 2009-02-19 | Canon Kabushiki Kaisha | Optical scanning apparatus and image-forming apparatus |
US20090106248A1 (en) * | 2004-02-06 | 2009-04-23 | Vmware, Inc. | Optimistic locking method and system for committing transactions on a file system |
US20110113059A1 (en) * | 2009-11-12 | 2011-05-12 | Salesforce.Com, Inc. | Security in enterprise level business information networking |
EP2370912A1 (en) * | 2008-12-05 | 2011-10-05 | International Business Machines Corporation | Accessing data in a multi-generation database |
US9378212B2 (en) | 1999-11-04 | 2016-06-28 | Xdrive, Llc | Methods and systems for providing file data and metadata |
US10776206B1 (en) | 2004-02-06 | 2020-09-15 | Vmware, Inc. | Distributed transaction system |
Families Citing this family (197)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6104802A (en) | 1997-02-10 | 2000-08-15 | Genesys Telecommunications Laboratories, Inc. | In-band signaling for routing |
US6480600B1 (en) | 1997-02-10 | 2002-11-12 | Genesys Telecommunications Laboratories, Inc. | Call and data correspondence in a call-in center employing virtual restructuring for computer telephony integrated functionality |
US7031442B1 (en) | 1997-02-10 | 2006-04-18 | Genesys Telecommunications Laboratories, Inc. | Methods and apparatus for personal routing in computer-simulated telephony |
US6381633B2 (en) * | 1997-05-09 | 2002-04-30 | Carmel Connection, Inc. | System and method for managing multimedia messaging platforms |
US6006331A (en) * | 1997-07-29 | 1999-12-21 | Microsoft Corporation | Recovery of online sessions for dynamic directory services |
US6985943B2 (en) | 1998-09-11 | 2006-01-10 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus for extended management of state and interaction of a remote knowledge worker from a contact center |
US6711611B2 (en) | 1998-09-11 | 2004-03-23 | Genesis Telecommunications Laboratories, Inc. | Method and apparatus for data-linking a mobile knowledge worker to home communication-center infrastructure |
US6061761A (en) * | 1997-10-06 | 2000-05-09 | Emc Corporation | Method for exchanging logical volumes in a disk array storage device in response to statistical analyses and preliminary testing |
USRE46528E1 (en) | 1997-11-14 | 2017-08-29 | Genesys Telecommunications Laboratories, Inc. | Implementation of call-center outbound dialing capability at a telephony network level |
US6658417B1 (en) * | 1997-12-31 | 2003-12-02 | International Business Machines Corporation | Term-based methods and apparatus for access to files on shared storage devices |
US6889358B1 (en) * | 1998-01-08 | 2005-05-03 | Lucent Technologies Inc. | Concurrency control in materialized views of a database |
US7907598B2 (en) | 1998-02-17 | 2011-03-15 | Genesys Telecommunication Laboratories, Inc. | Method for implementing and executing communication center routing strategies represented in extensible markup language |
US6332154B2 (en) | 1998-09-11 | 2001-12-18 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus for providing media-independent self-help modules within a multimedia communication-center customer interface |
US6370508B2 (en) * | 1998-09-11 | 2002-04-09 | Genesys Telecommunications Laboratories, Inc. | Interface engine for managing business processes within a multimedia communication-center |
US6182115B1 (en) * | 1998-03-06 | 2001-01-30 | International Business Machines Corp. | Method and system for interactive sharing of text in a networked environment |
US6148306A (en) * | 1998-05-28 | 2000-11-14 | Johnson Controls Technology Company | Data structure for scheduled execution of commands in a facilities management control system |
US7143193B1 (en) | 1998-05-29 | 2006-11-28 | Yahoo! Inc. | Content collection |
US7581006B1 (en) | 1998-05-29 | 2009-08-25 | Yahoo! Inc. | Web service |
US6976093B2 (en) | 1998-05-29 | 2005-12-13 | Yahoo! Inc. | Web server content replication |
US6336187B1 (en) * | 1998-06-12 | 2002-01-01 | International Business Machines Corp. | Storage system with data-dependent security |
US7756986B2 (en) | 1998-06-30 | 2010-07-13 | Emc Corporation | Method and apparatus for providing data management for a storage system coupled to a network |
US7165152B2 (en) * | 1998-06-30 | 2007-01-16 | Emc Corporation | Method and apparatus for managing access to storage devices in a storage system with access control |
US6446237B1 (en) | 1998-08-04 | 2002-09-03 | International Business Machines Corporation | Updating and reading data and parity blocks in a shared disk system |
US6332197B1 (en) | 1998-08-04 | 2001-12-18 | International Business Machines Corp. | System for updating data in a multi-adaptor environment |
US6446220B1 (en) | 1998-08-04 | 2002-09-03 | International Business Machines Corporation | Updating data and parity data with and without read caches |
US6279138B1 (en) | 1998-08-04 | 2001-08-21 | International Business Machines Corporation | System for changing the parity structure of a raid array |
US6272662B1 (en) * | 1998-08-04 | 2001-08-07 | International Business Machines Corporation | Distributed storage system using front-end and back-end locking |
USRE46153E1 (en) | 1998-09-11 | 2016-09-20 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus enabling voice-based management of state and interaction of a remote knowledge worker in a contact center environment |
US6847987B2 (en) * | 1998-09-30 | 2005-01-25 | International Business Machines Corporation | System and method for extending client-server software to additional client platforms for servicing thin clients requests |
US6453348B1 (en) | 1998-11-06 | 2002-09-17 | Ameritech Corporation | Extranet architecture |
US6427212B1 (en) | 1998-11-13 | 2002-07-30 | Tricord Systems, Inc. | Data fault tolerance software apparatus and method |
US6553376B1 (en) * | 1998-11-18 | 2003-04-22 | Infolibria, Inc. | Efficient content server using request redirection |
US6553375B1 (en) * | 1998-11-25 | 2003-04-22 | International Business Machines Corporation | Method and apparatus for server based handheld application and database management |
US6336171B1 (en) * | 1998-12-23 | 2002-01-01 | Ncr Corporation | Resource protection in a cluster environment |
GB2345555A (en) * | 1999-01-05 | 2000-07-12 | Ibm | Controlling device access in a network |
US6530036B1 (en) | 1999-08-17 | 2003-03-04 | Tricord Systems, Inc. | Self-healing computer system storage |
US6725392B1 (en) | 1999-03-03 | 2004-04-20 | Adaptec, Inc. | Controller fault recovery system for a distributed file system |
US6449731B1 (en) | 1999-03-03 | 2002-09-10 | Tricord Systems, Inc. | Self-healing computer system storage |
JP3763992B2 (en) * | 1999-03-30 | 2006-04-05 | 富士通株式会社 | Data processing apparatus and recording medium |
US6289376B1 (en) * | 1999-03-31 | 2001-09-11 | Diva Systems Corp. | Tightly-coupled disk-to-CPU storage server |
US6405219B2 (en) | 1999-06-22 | 2002-06-11 | F5 Networks, Inc. | Method and system for automatically updating the version of a set of files stored on content servers |
US6845395B1 (en) * | 1999-06-30 | 2005-01-18 | Emc Corporation | Method and apparatus for identifying network devices on a storage network |
US6665714B1 (en) | 1999-06-30 | 2003-12-16 | Emc Corporation | Method and apparatus for determining an identity of a network device |
US8179809B1 (en) * | 1999-08-23 | 2012-05-15 | Oracle America, Inc. | Approach for allocating resources to an apparatus based on suspendable resource requirements |
US6343324B1 (en) * | 1999-09-13 | 2002-01-29 | International Business Machines Corporation | Method and system for controlling access share storage devices in a network environment by configuring host-to-volume mapping data structures in the controller memory for granting and denying access to the devices |
US6944654B1 (en) * | 1999-11-01 | 2005-09-13 | Emc Corporation | Multiple storage array control |
US6385623B1 (en) * | 1999-11-12 | 2002-05-07 | Dell Usa, L.P. | System and method for ensuring proper execution of scheduled file updates |
US6928477B1 (en) * | 1999-11-18 | 2005-08-09 | International Business Machines Corporation | Availability and scalability in clustered application servers by transmitting expected loads of clients to load balancer |
US7929978B2 (en) | 1999-12-01 | 2011-04-19 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus for providing enhanced communication capability for mobile devices on a virtual private network |
US6526418B1 (en) * | 1999-12-16 | 2003-02-25 | Livevault Corporation | Systems and methods for backing up data files |
US6847984B1 (en) * | 1999-12-16 | 2005-01-25 | Livevault Corporation | Systems and methods for backing up data files |
JP4201447B2 (en) * | 1999-12-27 | 2008-12-24 | 富士通株式会社 | Distributed processing system |
US6826580B2 (en) | 2000-01-20 | 2004-11-30 | Emc Corporation | Distributed storage resource management in a storage area network |
USRE42153E1 (en) * | 2000-03-30 | 2011-02-15 | Hubbard Edward A | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US7254607B2 (en) * | 2000-03-30 | 2007-08-07 | United Devices, Inc. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US8010703B2 (en) | 2000-03-30 | 2011-08-30 | Prashtama Wireless Llc | Data conversion services and associated distributed processing system |
US7062527B1 (en) | 2000-04-19 | 2006-06-13 | Silicon Graphics, Inc. | Management and scheduling of a distributed rendering method and system |
US7783695B1 (en) | 2000-04-19 | 2010-08-24 | Graphics Properties Holdings, Inc. | Method and system for distributed rendering |
US7092983B1 (en) * | 2000-04-19 | 2006-08-15 | Silicon Graphics, Inc. | Method and system for secure remote distributed rendering |
US6769010B1 (en) * | 2000-05-11 | 2004-07-27 | Howzone.Com Inc. | Apparatus for distributing information over a network-based environment, method of distributing information to users, and method for associating content objects with a database wherein the content objects are accessible over a network communication medium by a user |
US6523047B1 (en) | 2000-08-17 | 2003-02-18 | International Business Machines Corporation | System and method for volume expansion in the presence of multiple plug-in features |
US6633870B1 (en) * | 2000-09-13 | 2003-10-14 | Radiant Data Corporation | Protocols for locking sharable files and methods for carrying out the protocols |
US6611848B1 (en) * | 2000-09-13 | 2003-08-26 | Radiant Data Corporation | Methods for maintaining data and attribute coherency in instances of sharable files |
US6687716B1 (en) * | 2000-09-13 | 2004-02-03 | Radiant Data Corporation | File consistency protocols and methods for carrying out the protocols |
US6604160B1 (en) | 2000-09-28 | 2003-08-05 | International Business Machines Corporation | Computing system arbitrating and selectively providing resource-seeking tasks with takeaway of non-shareable resources |
US6434682B1 (en) | 2000-09-28 | 2002-08-13 | International Business Machines Corporation | Data management system with shortcut migration via efficient automatic reconnection to previously migrated copy |
US6715070B1 (en) | 2000-10-12 | 2004-03-30 | International Business Machines Corporation | System and method for selectively enabling and disabling plug-ins features in a logical volume management enviornment |
US7346928B1 (en) * | 2000-12-01 | 2008-03-18 | Network Appliance, Inc. | Decentralized appliance virus scanning |
US7778981B2 (en) * | 2000-12-01 | 2010-08-17 | Netapp, Inc. | Policy engine to control the servicing of requests received by a storage server |
US7260636B2 (en) * | 2000-12-22 | 2007-08-21 | Emc Corporation | Method and apparatus for preventing unauthorized access by a network device |
US6795895B2 (en) * | 2001-03-07 | 2004-09-21 | Canopy Group | Dual axis RAID systems for enhanced bandwidth and reliability |
US7681032B2 (en) * | 2001-03-12 | 2010-03-16 | Portauthority Technologies Inc. | System and method for monitoring unauthorized transport of digital content |
US20050025291A1 (en) * | 2001-03-12 | 2005-02-03 | Vidius Inc. | Method and system for information distribution management |
US8478824B2 (en) * | 2002-02-05 | 2013-07-02 | Portauthority Technologies Inc. | Apparatus and method for controlling unauthorized dissemination of electronic mail |
US6941252B2 (en) * | 2001-03-14 | 2005-09-06 | Mcdata Corporation | Striping data frames across parallel fibre channel links |
US7266596B2 (en) * | 2001-04-18 | 2007-09-04 | International Business Machines Corporation | Dynamic storage space linking |
US6757695B1 (en) * | 2001-08-09 | 2004-06-29 | Network Appliance, Inc. | System and method for mounting and unmounting storage volumes in a network storage environment |
DK1417800T3 (en) * | 2001-08-15 | 2018-01-15 | Bentley Sys Inc | PROCEDURE AND SYSTEM FOR STORING LARGE DATA FILES |
US7428548B2 (en) * | 2001-08-15 | 2008-09-23 | Bentley Systems, Inc. | Computer readable medium for storing large data files |
DE10157251A1 (en) * | 2001-11-22 | 2003-06-05 | Siemens Ag | Method for accessing data of an automation device and automation device |
US6877045B2 (en) | 2001-12-18 | 2005-04-05 | International Business Machines Corporation | Systems, methods, and computer program products to schedule I/O access to take advantage of disk parallel access volumes |
US7113937B2 (en) * | 2001-12-18 | 2006-09-26 | International Business Machines Corporation | Systems, methods, and computer program products to improve performance of ported applications, such as a database, operating on UNIX system services for the OS/390 |
US7596627B2 (en) * | 2001-12-18 | 2009-09-29 | Cisco Technology, Inc. | Methods and apparatus for network congestion control |
US6754734B2 (en) * | 2001-12-18 | 2004-06-22 | International Business Machines Corporation | Systems, methods, and computer program products to improve performance of ported applications, such as a database |
US7734808B1 (en) | 2001-12-18 | 2010-06-08 | Cisco Technology, Inc. | End-to-end congestion control in a Fibre Channel network |
US7599360B2 (en) * | 2001-12-26 | 2009-10-06 | Cisco Technology, Inc. | Methods and apparatus for encapsulating a frame for transmission in a storage area network |
US7499410B2 (en) | 2001-12-26 | 2009-03-03 | Cisco Technology, Inc. | Fibre channel switch that enables end devices in different fabrics to communicate with one another while retaining their unique fibre channel domain—IDs |
US7433948B2 (en) * | 2002-01-23 | 2008-10-07 | Cisco Technology, Inc. | Methods and apparatus for implementing virtualization of storage within a storage area network |
US7548975B2 (en) * | 2002-01-09 | 2009-06-16 | Cisco Technology, Inc. | Methods and apparatus for implementing virtualization of storage within a storage area network through a virtual enclosure |
US7480909B2 (en) * | 2002-02-25 | 2009-01-20 | International Business Machines Corporation | Method and apparatus for cooperative distributed task management in a storage subsystem with multiple controllers using cache locking |
US6862668B2 (en) | 2002-02-25 | 2005-03-01 | International Business Machines Corporation | Method and apparatus for using cache coherency locking to facilitate on-line volume expansion in a multi-controller storage system |
US7464138B2 (en) * | 2002-03-29 | 2008-12-09 | International Business Machines Corporation | Mirror queue in a shared queue environment |
US7616637B1 (en) | 2002-04-01 | 2009-11-10 | Cisco Technology, Inc. | Label switching in fibre channel networks |
US7406034B1 (en) | 2002-04-01 | 2008-07-29 | Cisco Technology, Inc. | Methods and apparatus for fibre channel frame delivery |
US7266779B2 (en) * | 2002-04-22 | 2007-09-04 | Microsoft Corporation | Application sharing security |
US20040015556A1 (en) * | 2002-05-10 | 2004-01-22 | Renu Chopra | Software-based process/issue management system |
US7206288B2 (en) | 2002-06-12 | 2007-04-17 | Cisco Technology, Inc. | Methods and apparatus for characterizing a route in fibre channel fabric |
US20040006399A1 (en) * | 2002-06-26 | 2004-01-08 | Klein Alan L. | Method and system for managing and monitoring an organization |
US20040039781A1 (en) * | 2002-08-16 | 2004-02-26 | Lavallee David Anthony | Peer-to-peer content sharing method and system |
US7949690B2 (en) * | 2002-09-06 | 2011-05-24 | Autodesk, Inc. | Project structure |
US8805918B1 (en) | 2002-09-11 | 2014-08-12 | Cisco Technology, Inc. | Methods and apparatus for implementing exchange management for virtualization of storage within a storage area network |
US20040059734A1 (en) * | 2002-09-23 | 2004-03-25 | Hubbert Smith | Data access control |
US7437446B2 (en) | 2002-09-30 | 2008-10-14 | Electronic Data Systems Corporation | Reporting of abnormal computer resource utilization data |
US7243145B1 (en) * | 2002-09-30 | 2007-07-10 | Electronic Data Systems Corporation | Generation of computer resource utilization data per computer application |
US20040064523A1 (en) * | 2002-10-01 | 2004-04-01 | Zheng Zhang | Placing an object at a node within a logical space in a peer-to-peer system |
US7327680B1 (en) | 2002-11-05 | 2008-02-05 | Cisco Technology, Inc. | Methods and apparatus for network congestion control |
JP2004157637A (en) * | 2002-11-05 | 2004-06-03 | Hitachi Ltd | Storage management method |
US7433326B2 (en) | 2002-11-27 | 2008-10-07 | Cisco Technology, Inc. | Methods and devices for exchanging peer parameters between network devices |
US7367052B1 (en) * | 2002-12-04 | 2008-04-29 | Cisco Technology, Inc. | Access list key compression |
US7254736B2 (en) * | 2002-12-18 | 2007-08-07 | Veritas Operating Corporation | Systems and method providing input/output fencing in shared storage environments |
TWI238336B (en) * | 2003-01-10 | 2005-08-21 | Taiwan Semiconductor Mfg | System, method, and user interface providing customized document portfolio management |
WO2004068376A1 (en) * | 2003-01-30 | 2004-08-12 | Christoph Burkhard | Method for organizing teamwork in a project group or development group comprising several participants |
US20040162807A1 (en) * | 2003-02-14 | 2004-08-19 | Montagne Michael D. | Cooperative, simultaneous operation on data by many processes, with concurrent retention of process status, resumed processing, and minimal consumption of inter-nodal throughput |
US8706760B2 (en) | 2003-02-28 | 2014-04-22 | Microsoft Corporation | Method to delay locking of server files on edit |
US7603442B2 (en) * | 2003-06-20 | 2009-10-13 | Microsoft Corporation | Method and system for maintaining service dependency relationships in a computer system |
TWI225205B (en) * | 2003-07-16 | 2004-12-11 | Via Tech Inc | Object management system and method thereof |
US7225208B2 (en) * | 2003-09-30 | 2007-05-29 | Iron Mountain Incorporated | Systems and methods for backing up data files |
US7619974B2 (en) | 2003-10-31 | 2009-11-17 | Brocade Communication Systems, Inc. | Frame traffic balancing across trunk groups |
US7593336B2 (en) | 2003-10-31 | 2009-09-22 | Brocade Communications Systems, Inc. | Logical ports in trunking |
US7934023B2 (en) * | 2003-12-01 | 2011-04-26 | Cisco Technology, Inc. | Apparatus and method for performing fast fibre channel write operations over relatively high latency networks |
US20050198146A1 (en) * | 2004-01-14 | 2005-09-08 | International Business Machines Corporation | System and method for targeted notifications tracking |
US20050159968A1 (en) * | 2004-01-21 | 2005-07-21 | Stephen Cozzolino | Organizationally interactive task management and commitment management system in a matrix based organizational environment |
US7844646B1 (en) * | 2004-03-12 | 2010-11-30 | Netapp, Inc. | Method and apparatus for representing file system metadata within a database for efficient queries |
US7539702B2 (en) * | 2004-03-12 | 2009-05-26 | Netapp, Inc. | Pre-summarization and analysis of results generated by an agent |
US7630994B1 (en) | 2004-03-12 | 2009-12-08 | Netapp, Inc. | On the fly summarization of file walk data |
US7293039B1 (en) | 2004-03-12 | 2007-11-06 | Network Appliance, Inc. | Storage resource management across multiple paths |
JP4551680B2 (en) * | 2004-03-26 | 2010-09-29 | キヤノン株式会社 | Document management system, document management method and program, and storage medium |
EP1591916B1 (en) * | 2004-04-26 | 2013-11-06 | Sap Ag | Method, computer program and device for deleting data sets contained in a table system |
JP4451705B2 (en) | 2004-04-26 | 2010-04-14 | 株式会社日立製作所 | Storage device, storage system including the same, data management method for the system, and controller execution program for storage device |
US7630955B2 (en) * | 2004-08-10 | 2009-12-08 | International Business Machines Corporation | Apparatus, system, and method for analyzing the association of a resource to a business process |
US20060036579A1 (en) * | 2004-08-10 | 2006-02-16 | Byrd Stephen A | Apparatus, system, and method for associating resources using a time based algorithm |
US7661135B2 (en) * | 2004-08-10 | 2010-02-09 | International Business Machines Corporation | Apparatus, system, and method for gathering trace data indicative of resource activity |
US20060059118A1 (en) * | 2004-08-10 | 2006-03-16 | Byrd Stephen A | Apparatus, system, and method for associating resources using a behavior based algorithm |
US7546601B2 (en) * | 2004-08-10 | 2009-06-09 | International Business Machines Corporation | Apparatus, system, and method for automatically discovering and grouping resources used by a business process |
US8725547B2 (en) * | 2004-08-24 | 2014-05-13 | Epic Systems Corporation | Utilization indicating schedule scanner |
US7340610B1 (en) * | 2004-08-31 | 2008-03-04 | Hitachi, Ltd. | Trusted time stamping storage system |
US20060090071A1 (en) * | 2004-10-13 | 2006-04-27 | Werner Sinzig | Systems and methods for project management |
US7593324B2 (en) | 2004-10-25 | 2009-09-22 | Cisco Technology, Inc. | Graceful port shutdown protocol for fibre channel interfaces |
US7916628B2 (en) | 2004-11-01 | 2011-03-29 | Cisco Technology, Inc. | Trunking for fabric ports in fibre channel switches and attached devices |
US8359429B1 (en) * | 2004-11-08 | 2013-01-22 | Symantec Operating Corporation | System and method for distributing volume status information in a storage system |
US7649844B2 (en) | 2004-12-29 | 2010-01-19 | Cisco Technology, Inc. | In-order fibre channel packet delivery |
US20060168550A1 (en) * | 2005-01-21 | 2006-07-27 | International Business Machines Corporation | System, method and apparatus for creating and managing activities in a collaborative computing environment |
US20060168582A1 (en) * | 2005-01-21 | 2006-07-27 | International Business Machines Corporation | Managing resource link relationships to activity tasks in a collaborative computing environment |
US7177994B2 (en) * | 2005-03-04 | 2007-02-13 | Emc Corporation | Checkpoint and consistency markers |
US7609649B1 (en) | 2005-04-26 | 2009-10-27 | Cisco Technology, Inc. | Methods and apparatus for improving network based virtualization performance |
JP2007174062A (en) * | 2005-12-20 | 2007-07-05 | Canon Inc | Data communication apparatus, data communication system, data communication method, and program thereof |
US9008075B2 (en) | 2005-12-22 | 2015-04-14 | Genesys Telecommunications Laboratories, Inc. | System and methods for improving interaction routing performance |
US8744885B2 (en) * | 2006-03-28 | 2014-06-03 | Snowflake Itm, Inc. | Task based organizational management system and method |
US7734648B2 (en) * | 2006-04-11 | 2010-06-08 | Sap Ag | Update manager for database system |
US20080004925A1 (en) * | 2006-06-29 | 2008-01-03 | Bangel Matthew J | Multi-site project management |
US7890921B2 (en) | 2006-07-31 | 2011-02-15 | Lifecylce Technologies, Inc. | Automated method for coherent project management |
US20080034167A1 (en) * | 2006-08-03 | 2008-02-07 | Cisco Technology, Inc. | Processing a SCSI reserve in a network implementing network-based virtualization |
US20080040674A1 (en) * | 2006-08-09 | 2008-02-14 | Puneet K Gupta | Folksonomy-Enhanced Enterprise-Centric Collaboration and Knowledge Management System |
US8719174B2 (en) * | 2006-11-15 | 2014-05-06 | International Business Machines Corporation | Method, system, and computer program product for collaborative and integrated intellectual property management |
US8276167B2 (en) * | 2007-03-21 | 2012-09-25 | International Business Machines Corporation | Distributed pluggable middleware services |
US7945724B1 (en) | 2007-04-26 | 2011-05-17 | Netapp, Inc. | Non-volatile solid-state memory based adaptive playlist for storage system initialization operations |
US8825970B1 (en) * | 2007-04-26 | 2014-09-02 | Netapp, Inc. | System and method for mounting a storage volume utilizing a block reference list |
US20080300945A1 (en) * | 2007-05-31 | 2008-12-04 | Michel Shane Simpson | Techniques for sharing resources across multiple independent project lifecycles |
US20090048896A1 (en) * | 2007-08-14 | 2009-02-19 | Vignesh Anandan | Work management using integrated project and workflow methodology |
US7783666B1 (en) | 2007-09-26 | 2010-08-24 | Netapp, Inc. | Controlling access to storage resources by using access pattern based quotas |
CA2699362A1 (en) * | 2007-10-20 | 2009-04-23 | Citrix Systems, Inc. | Systems and methods for folder redirection |
SG194375A1 (en) * | 2007-11-27 | 2013-11-29 | Boeing Co | Method and apparatus for loadable software airplane parts (lsap) distribution |
US8271706B2 (en) * | 2008-05-22 | 2012-09-18 | International Business Machines Corporation | Stabilization of host to storage subsystem ownership |
US20090319544A1 (en) * | 2008-06-20 | 2009-12-24 | Griffin James R | Facilitating integration of different computer data systems |
US7975025B1 (en) | 2008-07-08 | 2011-07-05 | F5 Networks, Inc. | Smart prefetching of data over a network |
US8478798B2 (en) * | 2008-11-10 | 2013-07-02 | Google Inc. | Filesystem access for web applications and native code modules |
JP4892626B2 (en) * | 2009-07-08 | 2012-03-07 | 東芝テック株式会社 | Printer and message data management program |
US8843676B2 (en) | 2012-06-27 | 2014-09-23 | International Business Machines Corporation | Optimizing an operating system I/O operation that pertains to a specific program and file |
CN103544189A (en) * | 2012-07-17 | 2014-01-29 | 珠海金山办公软件有限公司 | Method and system for locking currently-edited file |
WO2016013116A1 (en) * | 2014-07-25 | 2016-01-28 | 株式会社日立製作所 | Storage device |
US9853873B2 (en) | 2015-01-10 | 2017-12-26 | Cisco Technology, Inc. | Diagnosis and throughput measurement of fibre channel ports in a storage area network environment |
US9900250B2 (en) | 2015-03-26 | 2018-02-20 | Cisco Technology, Inc. | Scalable handling of BGP route information in VXLAN with EVPN control plane |
US10222986B2 (en) | 2015-05-15 | 2019-03-05 | Cisco Technology, Inc. | Tenant-level sharding of disks with tenant-specific storage modules to enable policies per tenant in a distributed storage system |
US11588783B2 (en) | 2015-06-10 | 2023-02-21 | Cisco Technology, Inc. | Techniques for implementing IPV6-based distributed storage space |
US10778765B2 (en) | 2015-07-15 | 2020-09-15 | Cisco Technology, Inc. | Bid/ask protocol in scale-out NVMe storage |
US9892075B2 (en) | 2015-12-10 | 2018-02-13 | Cisco Technology, Inc. | Policy driven storage in a microserver computing environment |
US10140172B2 (en) | 2016-05-18 | 2018-11-27 | Cisco Technology, Inc. | Network-aware storage repairs |
US20170351639A1 (en) | 2016-06-06 | 2017-12-07 | Cisco Technology, Inc. | Remote memory access using memory mapped addressing among multiple compute nodes |
US10664169B2 (en) | 2016-06-24 | 2020-05-26 | Cisco Technology, Inc. | Performance of object storage system by reconfiguring storage devices based on latency that includes identifying a number of fragments that has a particular storage device as its primary storage device and another number of fragments that has said particular storage device as its replica storage device |
CN106126673A (en) * | 2016-06-29 | 2016-11-16 | 上海浦东发展银行股份有限公司信用卡中心 | A kind of based on Redis and HBase point of locking method |
US11563695B2 (en) | 2016-08-29 | 2023-01-24 | Cisco Technology, Inc. | Queue protection using a shared global memory reserve |
CN107885488B (en) | 2016-09-29 | 2021-06-01 | 微软技术许可有限责任公司 | Lock with intention and intention |
US10545914B2 (en) | 2017-01-17 | 2020-01-28 | Cisco Technology, Inc. | Distributed object storage |
US10243823B1 (en) | 2017-02-24 | 2019-03-26 | Cisco Technology, Inc. | Techniques for using frame deep loopback capabilities for extended link diagnostics in fibre channel storage area networks |
US10713203B2 (en) | 2017-02-28 | 2020-07-14 | Cisco Technology, Inc. | Dynamic partition of PCIe disk arrays based on software configuration / policy distribution |
US10254991B2 (en) | 2017-03-06 | 2019-04-09 | Cisco Technology, Inc. | Storage area network based extended I/O metrics computation for deep insight into application performance |
CN109213739A (en) * | 2017-06-29 | 2019-01-15 | 上海共联通信信息发展有限公司 | A kind of information processing method of shared file |
US10303534B2 (en) | 2017-07-20 | 2019-05-28 | Cisco Technology, Inc. | System and method for self-healing of application centric infrastructure fabric memory |
US10404596B2 (en) | 2017-10-03 | 2019-09-03 | Cisco Technology, Inc. | Dynamic route profile storage in a hardware trie routing table |
US10942666B2 (en) | 2017-10-13 | 2021-03-09 | Cisco Technology, Inc. | Using network device replication in distributed storage clusters |
RU2677494C1 (en) * | 2017-12-04 | 2019-01-17 | федеральное государственное автономное образовательное учреждение высшего образования "Российский государственный университет нефти и газа (национальный исследовательский университет) имени И.М. Губкина" | Kinetic inhibitor of hydrate formation |
US11227282B2 (en) | 2018-08-20 | 2022-01-18 | Probloch LLC | Time-bounded activity chains with multiple authenticated agent participation bound by distributed single-source-of-truth networks that can enforce automated value transfer |
JP2020052561A (en) * | 2018-09-25 | 2020-04-02 | キヤノン株式会社 | Apparatus allowed to use automatic order service for consumable, or the like, control method thereof, and program |
JP2020052566A (en) * | 2018-09-25 | 2020-04-02 | キヤノン株式会社 | Information processing apparatus and program |
US11163892B2 (en) * | 2019-01-09 | 2021-11-02 | International Business Machines Corporation | Buffering data until encrypted destination is unlocked |
CN110008225A (en) * | 2019-03-19 | 2019-07-12 | 阿里巴巴集团控股有限公司 | The treating method and apparatus of distributed transaction |
CN112905533B (en) * | 2021-02-05 | 2023-04-25 | 优车库网络科技发展(深圳)有限公司 | File submission management method, device, equipment and storage medium |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5226143A (en) * | 1990-03-14 | 1993-07-06 | International Business Machines Corporation | Multiprocessor system includes operating system for notifying only those cache managers who are holders of shared locks on a designated page by global lock manager |
US5261094A (en) * | 1991-04-08 | 1993-11-09 | International Business Machines Corporation | Asynchronous replication of data changes by distributed update requests |
US5386559A (en) * | 1992-07-16 | 1995-01-31 | International Business Machines Corporation | Variant domains and variant maps in a versioned database management system |
US5404510A (en) * | 1992-05-21 | 1995-04-04 | Oracle Corporation | Database index design based upon request importance and the reuse and modification of similar existing indexes |
US5442765A (en) * | 1990-12-20 | 1995-08-15 | Nec Corporation | Database system which adjusts the data storage order based on the processing speed of the storage media |
US5459862A (en) * | 1990-06-14 | 1995-10-17 | Sunquest Informaion Systems, Inc. | Network concurrency control for autonomous databases featuring independent lock release and lock ownership transfer |
US5469575A (en) * | 1992-10-16 | 1995-11-21 | International Business Machines Corporation | Determining a winner of a race in a data processing system |
US5485610A (en) * | 1990-02-26 | 1996-01-16 | Oracle Corporation | Physical database design system |
US5485607A (en) * | 1993-02-05 | 1996-01-16 | Digital Equipment Corporation | Concurrency-control method and apparatus in a database management system utilizing key-valued locking |
US5485608A (en) * | 1990-06-29 | 1996-01-16 | Oracle Corporation | Methods and apparatus for updating information in a computer system using logs and state identifiers |
US5499367A (en) * | 1991-11-15 | 1996-03-12 | Oracle Corporation | System for database integrity with multiple logs assigned to client subsets |
US5535361A (en) * | 1992-05-22 | 1996-07-09 | Matsushita Electric Industrial Co., Ltd. | Cache block replacement scheme based on directory control bit set/reset and hit/miss basis in a multiheading multiprocessor environment |
US5560005A (en) * | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US5564019A (en) * | 1992-10-30 | 1996-10-08 | International Business Machines Corporation | Program storage device and computer program product for managing a shared direct access storage device with a fixed block architecture |
US5625795A (en) * | 1994-05-13 | 1997-04-29 | Mitsubishi Denki Kabushiki Kaisha | Exclusive control unit for a resource shared among computers |
US5634122A (en) * | 1994-12-30 | 1997-05-27 | International Business Machines Corporation | System and method for multi-level token management for distributed file systems |
US5638518A (en) * | 1994-10-24 | 1997-06-10 | Lsi Logic Corporation | Node loop core for implementing transmission protocol in fibre channel |
US5649102A (en) * | 1993-11-26 | 1997-07-15 | Hitachi, Ltd. | Distributed shared data management system for controlling structured shared data and for serializing access to shared data |
US5734922A (en) * | 1996-07-01 | 1998-03-31 | Sun Microsystems, Inc. | Multiprocessing system configured to detect and efficiently provide for migratory data access patterns |
US5787175A (en) * | 1995-10-23 | 1998-07-28 | Novell, Inc. | Method and apparatus for collaborative document control |
US5806068A (en) * | 1991-09-20 | 1998-09-08 | Shaw; Venson M. | Document data processor for an object-oriented knowledge management system containing a personal database in communication with a packet processor |
US5826268A (en) * | 1996-04-12 | 1998-10-20 | Ontos, Inc. | Secure multilevel object oriented database management system |
Family Cites Families (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS6120148A (en) * | 1984-07-07 | 1986-01-28 | Nec Corp | Exclusive control system of file |
US4751635A (en) * | 1986-04-16 | 1988-06-14 | Bell Communications Research, Inc. | Distributed management support system for software managers |
JPS6381523A (en) * | 1986-09-25 | 1988-04-12 | Nec Corp | Exclusive control system for shared disk device |
US5175852A (en) * | 1987-02-13 | 1992-12-29 | International Business Machines Corporation | Distributed file access structure lock |
JPS63305438A (en) * | 1987-06-05 | 1988-12-13 | Nec Corp | Exclusive control system for files to be used in common between plural host computers |
JP2685530B2 (en) * | 1988-09-14 | 1997-12-03 | 株式会社日立製作所 | How to manage shared data |
EP0394173A3 (en) * | 1989-04-17 | 1993-10-27 | International Business Machines Corporation | High concurrency manager of open files |
JPH039443A (en) * | 1989-06-07 | 1991-01-17 | Hitachi Ltd | Data set managing system |
JPH04148363A (en) * | 1990-10-11 | 1992-05-21 | Toshiba Corp | Multi-computer system |
JPH05113894A (en) * | 1991-10-23 | 1993-05-07 | Nec Corp | File resource managing system in virtual computer system |
US5386525A (en) * | 1991-10-29 | 1995-01-31 | Pacific Bell | System for providing application programs with direct addressability into a shared dataspace |
JPH0619771A (en) * | 1992-04-20 | 1994-01-28 | Internatl Business Mach Corp <Ibm> | File management system of shared file by different kinds of clients |
AU4400893A (en) * | 1992-06-12 | 1994-01-04 | Dow Chemical Company, The | Stealth interface for process control computers |
JPH07507893A (en) * | 1992-06-12 | 1995-08-31 | ザ、ダウ、ケミカル、カンパニー | Security front-end communication system and method for process control computers |
JPH0695859A (en) * | 1992-09-09 | 1994-04-08 | Fujitsu Ltd | Software assets management system |
EP0706686B1 (en) * | 1993-07-01 | 1998-10-14 | Legent Corporation | System and method for distributed storage management on networked computer systems |
GB2302239B (en) * | 1994-04-01 | 1999-01-06 | Ericsson Telefon Ab L M | Mobility in telecommunication networks |
JP3499938B2 (en) * | 1994-12-15 | 2004-02-23 | 富士通株式会社 | I / O device sharing system between multiple systems with different protocols |
US5623670A (en) * | 1995-02-17 | 1997-04-22 | Lucent Technologies Inc. | Method and apparatus for crash safe enforcement of mutually exclusive access to shared resources in a multitasking computer system |
US5875327A (en) * | 1997-02-18 | 1999-02-23 | International Business Machines Corporation | Hierarchy of preferences and preference groups |
-
1997
- 1997-08-01 JP JP10507949A patent/JP2000515657A/en not_active Ceased
- 1997-08-01 AT AT97936155T patent/ATE262196T1/en not_active IP Right Cessation
- 1997-08-01 CA CA002262450A patent/CA2262450A1/en not_active Abandoned
- 1997-08-01 AU AU38894/97A patent/AU3889497A/en not_active Abandoned
- 1997-08-01 DE DE69728176T patent/DE69728176T2/en not_active Expired - Fee Related
- 1997-08-01 EP EP97936155A patent/EP0972247B1/en not_active Expired - Lifetime
- 1997-08-01 CN CN97197011A patent/CN1227644A/en active Pending
- 1997-08-01 US US08/905,307 patent/US5999930A/en not_active Expired - Lifetime
- 1997-08-01 US US08/904,828 patent/US6009427A/en not_active Expired - Lifetime
- 1997-08-01 WO PCT/US1997/012843 patent/WO1998006036A1/en active IP Right Grant
- 1997-08-01 US US08/905,287 patent/US6076105A/en not_active Expired - Lifetime
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5485610A (en) * | 1990-02-26 | 1996-01-16 | Oracle Corporation | Physical database design system |
US5226143A (en) * | 1990-03-14 | 1993-07-06 | International Business Machines Corporation | Multiprocessor system includes operating system for notifying only those cache managers who are holders of shared locks on a designated page by global lock manager |
US5459862A (en) * | 1990-06-14 | 1995-10-17 | Sunquest Informaion Systems, Inc. | Network concurrency control for autonomous databases featuring independent lock release and lock ownership transfer |
US5485608A (en) * | 1990-06-29 | 1996-01-16 | Oracle Corporation | Methods and apparatus for updating information in a computer system using logs and state identifiers |
US5442765A (en) * | 1990-12-20 | 1995-08-15 | Nec Corporation | Database system which adjusts the data storage order based on the processing speed of the storage media |
US5261094A (en) * | 1991-04-08 | 1993-11-09 | International Business Machines Corporation | Asynchronous replication of data changes by distributed update requests |
US5806068A (en) * | 1991-09-20 | 1998-09-08 | Shaw; Venson M. | Document data processor for an object-oriented knowledge management system containing a personal database in communication with a packet processor |
US5499367A (en) * | 1991-11-15 | 1996-03-12 | Oracle Corporation | System for database integrity with multiple logs assigned to client subsets |
US5404510A (en) * | 1992-05-21 | 1995-04-04 | Oracle Corporation | Database index design based upon request importance and the reuse and modification of similar existing indexes |
US5535361A (en) * | 1992-05-22 | 1996-07-09 | Matsushita Electric Industrial Co., Ltd. | Cache block replacement scheme based on directory control bit set/reset and hit/miss basis in a multiheading multiprocessor environment |
US5386559A (en) * | 1992-07-16 | 1995-01-31 | International Business Machines Corporation | Variant domains and variant maps in a versioned database management system |
US5469575A (en) * | 1992-10-16 | 1995-11-21 | International Business Machines Corporation | Determining a winner of a race in a data processing system |
US5553240A (en) * | 1992-10-16 | 1996-09-03 | International Business Machines Corporation | Determining a winner of a race in a data processing system |
US5564019A (en) * | 1992-10-30 | 1996-10-08 | International Business Machines Corporation | Program storage device and computer program product for managing a shared direct access storage device with a fixed block architecture |
US5485607A (en) * | 1993-02-05 | 1996-01-16 | Digital Equipment Corporation | Concurrency-control method and apparatus in a database management system utilizing key-valued locking |
US5649102A (en) * | 1993-11-26 | 1997-07-15 | Hitachi, Ltd. | Distributed shared data management system for controlling structured shared data and for serializing access to shared data |
US5560005A (en) * | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US5625795A (en) * | 1994-05-13 | 1997-04-29 | Mitsubishi Denki Kabushiki Kaisha | Exclusive control unit for a resource shared among computers |
US5638518A (en) * | 1994-10-24 | 1997-06-10 | Lsi Logic Corporation | Node loop core for implementing transmission protocol in fibre channel |
US5634122A (en) * | 1994-12-30 | 1997-05-27 | International Business Machines Corporation | System and method for multi-level token management for distributed file systems |
US5787175A (en) * | 1995-10-23 | 1998-07-28 | Novell, Inc. | Method and apparatus for collaborative document control |
US5826268A (en) * | 1996-04-12 | 1998-10-20 | Ontos, Inc. | Secure multilevel object oriented database management system |
US5734922A (en) * | 1996-07-01 | 1998-03-31 | Sun Microsystems, Inc. | Multiprocessing system configured to detect and efficiently provide for migratory data access patterns |
Non-Patent Citations (2)
Title |
---|
Stakutis, C., "Unconnected Islands for Video Editing is a Thing of the Past", Proceedings of the 31st SMPTE Advanced Motion Imaging Conference, New York, NY, Feb. 1997, pp. 1-10. |
Stakutis, C., Unconnected Islands for Video Editing is a Thing of the Past , Proceedings of the 31st SMPTE Advanced Motion Imaging Conference, New York, NY, Feb. 1997, pp. 1 10. * |
Cited By (69)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020089551A1 (en) * | 1997-07-14 | 2002-07-11 | Hugh Harlan M. | Method and apparatus for displaying a thought network from a thought's perspective |
US6212610B1 (en) * | 1998-01-07 | 2001-04-03 | Fujitsu Limited | Memory protection mechanism for a distributed shared memory multiprocessor with integrated message passing support |
US6240416B1 (en) * | 1998-09-11 | 2001-05-29 | Ambeo, Inc. | Distributed metadata system and method |
US9336213B2 (en) | 1999-09-29 | 2016-05-10 | Valiyolah Tadayon | Active file system |
US20040249902A1 (en) * | 1999-10-20 | 2004-12-09 | Vali Tadayon | Method and apparatus for providing a web-based active virtual file system |
US7444390B2 (en) * | 1999-10-20 | 2008-10-28 | Cdimensions, Inc. | Method and apparatus for providing a web-based active virtual file system |
US7496578B2 (en) | 1999-11-04 | 2009-02-24 | Aol Llc | Shared internet storage resource, user interface system, and method |
US20050204020A1 (en) * | 1999-11-04 | 2005-09-15 | O'brien Brett | Shared internet storage resource, user interface system, and method |
US10397224B2 (en) | 1999-11-04 | 2019-08-27 | Oath Inc. | Network personal digital video recorder system (NPDVR) |
US9378212B2 (en) | 1999-11-04 | 2016-06-28 | Xdrive, Llc | Methods and systems for providing file data and metadata |
US9369770B2 (en) | 1999-11-04 | 2016-06-14 | Xdrive, Llc | Network personal digital video recorder system (NPDVR) |
US7171472B2 (en) | 1999-11-04 | 2007-01-30 | Xdrive, Llc | Shared internet storage resource, user interface system, and method |
US20020133561A1 (en) * | 1999-11-04 | 2002-09-19 | Xdrive Technologies, Inc. | Shared internet storage resource, user interface system, and method |
US7337207B2 (en) | 1999-11-04 | 2008-02-26 | Xdrive, Llc | Shared internet storage resource, user interface system, and method |
US20050171956A1 (en) * | 1999-11-04 | 2005-08-04 | O'brien Brett | Shared internet storage resource, user interface system, and method |
US20050193132A1 (en) * | 1999-11-04 | 2005-09-01 | O'brien Brett | Shared internet storage resource, user interface system, and method |
US20050204063A1 (en) * | 1999-11-04 | 2005-09-15 | O'brien Brett | Shared internet storage resource, user interface system, and method |
US6985927B2 (en) * | 1999-11-04 | 2006-01-10 | Xdrive, Llc. | Shared internet storage resource, user interface system, and method |
US20070073840A1 (en) * | 1999-11-04 | 2007-03-29 | O'brien Brett | Network personal digital video recorder system (NPDVR) |
US6523032B1 (en) * | 2000-05-12 | 2003-02-18 | Oracle Corporation | Servicing database requests using read-only database servers coupled to a master database server |
US20010047319A1 (en) * | 2000-05-24 | 2001-11-29 | Fujitsu Limited | Data linking system |
US20020049738A1 (en) * | 2000-08-03 | 2002-04-25 | Epstein Bruce A. | Information collaboration and reliability assessment |
US20080162481A1 (en) * | 2001-01-30 | 2008-07-03 | Cisco Technology, Inc. | Controlling access of concurrent users of computer resources in a distributed system using an improved semaphore counting approach |
US7743146B2 (en) | 2001-01-30 | 2010-06-22 | Cisco Technology, Inc. | Controlling access of concurrent users of computer resources in a distributed system using an improved semaphore counting approach |
US7328263B1 (en) * | 2001-01-30 | 2008-02-05 | Cisco Technology, Inc. | Controlling access of concurrent users of computer resources in a distributed system using an improved semaphore counting approach |
US20030117434A1 (en) * | 2001-07-31 | 2003-06-26 | Hugh Harlan M. | Method and apparatus for sharing many thought databases among many clients |
US7076736B2 (en) * | 2001-07-31 | 2006-07-11 | Thebrain Technologies Corp. | Method and apparatus for sharing many thought databases among many clients |
US7366743B2 (en) | 2002-03-06 | 2008-04-29 | Colligo Networks Inc. | Synchronous peer-to-peer multipoint database synchronization |
US7966285B2 (en) | 2002-03-06 | 2011-06-21 | Ionaphal Data Limited Liability Company | Synchronous peer-to-peer multipoint database synchronization |
US20030172070A1 (en) * | 2002-03-06 | 2003-09-11 | Sawadsky Nicholas Justin | Synchronous peer-to-peer multipoint database synchronization |
US20060015546A1 (en) * | 2002-03-06 | 2006-01-19 | Colligo Networks, Inc. | Synchronous peer-to-peer multipoint database synchronization |
US20080243944A1 (en) * | 2002-03-06 | 2008-10-02 | Colligo Networks, Inc. | Synchronous peer-to-peer multipoint database synchronization |
US7246119B2 (en) | 2002-03-08 | 2007-07-17 | Kabushiki Kaisha Toshiba | Method and implementation of session-based file locking for network applications |
US20030182285A1 (en) * | 2002-03-08 | 2003-09-25 | Katie Kuwata | Method and implementation of session-based file locking for network applications |
US20040078360A1 (en) * | 2002-10-22 | 2004-04-22 | Defauw Randy | Data locking system and method for medical system architecture |
US20050044147A1 (en) * | 2003-07-30 | 2005-02-24 | Canon Kabushiki Kaisha | Distributed data caching in hybrid peer-to-peer systems |
US7394817B2 (en) | 2003-07-30 | 2008-07-01 | Canon Kabushiki Kaisha | Distributed data caching in hybrid peer-to-peer systems |
US20050091289A1 (en) * | 2003-10-24 | 2005-04-28 | Microsoft Corporation | File sharing in P2P group shared spaces |
US7567987B2 (en) * | 2003-10-24 | 2009-07-28 | Microsoft Corporation | File sharing in P2P group shared spaces |
US20090106248A1 (en) * | 2004-02-06 | 2009-04-23 | Vmware, Inc. | Optimistic locking method and system for committing transactions on a file system |
US8700585B2 (en) * | 2004-02-06 | 2014-04-15 | Vmware, Inc. | Optimistic locking method and system for committing transactions on a file system |
US10776206B1 (en) | 2004-02-06 | 2020-09-15 | Vmware, Inc. | Distributed transaction system |
US20050216746A1 (en) * | 2004-03-24 | 2005-09-29 | Nobuyuki Saika | Data protection method, authentication method, and program therefor |
US7979465B2 (en) | 2004-03-24 | 2011-07-12 | Hitachi, Ltd. | Data protection method, authentication method, and program therefor |
US20080072319A1 (en) * | 2004-03-24 | 2008-03-20 | Nobuyuki Sakai | Data protection method, authentication method, and program therefor |
US7308450B2 (en) * | 2004-03-24 | 2007-12-11 | Hitachi, Ltd. | Data protection method, authentication method, and program therefor |
US20090094243A1 (en) * | 2004-06-23 | 2009-04-09 | Exanet Ltd. | Method for managing lock resources in a distributed storage system |
US20050289143A1 (en) * | 2004-06-23 | 2005-12-29 | Exanet Ltd. | Method for managing lock resources in a distributed storage system |
US8566299B2 (en) | 2004-06-23 | 2013-10-22 | Dell Global B.V.-Singapore Branch | Method for managing lock resources in a distributed storage system |
US8086581B2 (en) | 2004-06-23 | 2011-12-27 | Dell Global B.V. - Singapore Branch | Method for managing lock resources in a distributed storage system |
US20060149567A1 (en) * | 2004-12-30 | 2006-07-06 | International Business Machines Corporation | Method, system, and computer program product for dynamic field-level access control in shared documents |
US7930316B2 (en) * | 2004-12-30 | 2011-04-19 | International Business Machines Corporation | Method, system, and computer program product for dynamic field-level access control in shared documents |
US20110153670A1 (en) * | 2004-12-30 | 2011-06-23 | International Business Machines Corporation | Method, system, and computer program product for dynamic field-level access control in a wiki |
US20090046344A1 (en) * | 2005-05-26 | 2009-02-19 | Canon Kabushiki Kaisha | Optical scanning apparatus and image-forming apparatus |
US7630998B2 (en) * | 2005-06-10 | 2009-12-08 | Microsoft Corporation | Performing a deletion of a node in a tree data storage structure |
US20060282438A1 (en) * | 2005-06-10 | 2006-12-14 | Microsoft Corporation | Performing a deletion of a node in a tree data storage structure |
US8666957B2 (en) * | 2005-08-29 | 2014-03-04 | Hewlett-Packard Development Company, L.P. | Method or apparatus for locking shared data |
US20070050377A1 (en) * | 2005-08-29 | 2007-03-01 | Manish Srivastava | Method or apparatus for locking shared data |
US8091089B2 (en) * | 2005-09-22 | 2012-01-03 | International Business Machines Corporation | Apparatus, system, and method for dynamically allocating and adjusting meta-data repository resources for handling concurrent I/O requests to a meta-data repository |
US20070067368A1 (en) * | 2005-09-22 | 2007-03-22 | Choi Patricia D | Apparatus, system, and method for dynamically allocating meta-data repository resources |
US8745630B2 (en) | 2005-09-22 | 2014-06-03 | International Business Machines Corporation | Dynamically allocating meta-data repository resources |
CN101110020B (en) * | 2006-07-21 | 2011-01-26 | 国际商业机器公司 | Method and system for maintaining originality-related information about elements in an editable object |
US7769787B2 (en) * | 2006-07-21 | 2010-08-03 | International Business Machines Corporation | Method and system for maintaining originality-related information about elements in an editable object |
US20080021922A1 (en) * | 2006-07-21 | 2008-01-24 | Brent Tzion Hailpern | Method and system for maintaining originality-related information about elements in an editable object |
EP2370912A1 (en) * | 2008-12-05 | 2011-10-05 | International Business Machines Corporation | Accessing data in a multi-generation database |
US20140214829A1 (en) * | 2009-11-12 | 2014-07-31 | Salesforce.Com, Inc. | Implementing enterprise level business information networking |
US9275094B2 (en) * | 2009-11-12 | 2016-03-01 | Salesforce.Com, Inc. | Security in enterprise level business information networking |
US20110113059A1 (en) * | 2009-11-12 | 2011-05-12 | Salesforce.Com, Inc. | Security in enterprise level business information networking |
US9864770B2 (en) | 2009-11-12 | 2018-01-09 | Salesforce.Com, Inc. | Customizing enterprise level business information networking |
Also Published As
Publication number | Publication date |
---|---|
US5999930A (en) | 1999-12-07 |
EP0972247B1 (en) | 2004-03-17 |
DE69728176D1 (en) | 2004-04-22 |
CN1227644A (en) | 1999-09-01 |
US6076105A (en) | 2000-06-13 |
WO1998006036A1 (en) | 1998-02-12 |
AU3889497A (en) | 1998-02-25 |
DE69728176T2 (en) | 2005-01-27 |
ATE262196T1 (en) | 2004-04-15 |
JP2000515657A (en) | 2000-11-21 |
EP0972247A1 (en) | 2000-01-19 |
CA2262450A1 (en) | 1998-02-12 |
EP0972247A4 (en) | 2000-01-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6009427A (en) | Method and apparatus for distributed control of a database | |
US6564234B2 (en) | Managing a resource used by a plurality of nodes | |
US7860907B2 (en) | Data processing | |
US6408298B1 (en) | Methods and systems for copying and moving across virtual namespaces | |
US20090094243A1 (en) | Method for managing lock resources in a distributed storage system | |
US20020138501A1 (en) | Method and apparatus to improve file management | |
US20050038836A1 (en) | Systems and methods of information backup | |
US20060155705A1 (en) | Managing hierarchical authority to access files in a shared database | |
US6611848B1 (en) | Methods for maintaining data and attribute coherency in instances of sharable files | |
US6687716B1 (en) | File consistency protocols and methods for carrying out the protocols | |
JP5241298B2 (en) | System and method for supporting file search and file operations by indexing historical file names and locations | |
US6633870B1 (en) | Protocols for locking sharable files and methods for carrying out the protocols | |
US7373393B2 (en) | File system | |
EP1176509B1 (en) | Managing recovery of data after failure of one or more caches | |
AU2007202588B2 (en) | Method and apparatus for transferring data from the cache of one node to the cache of another node | |
AU2003213536B2 (en) | Method and apparatus for transferring data from the cache of one node to the cache of another node | |
JPH05165702A (en) | File management method | |
EP1408408B1 (en) | Managing a resource used by a plurality of nodes |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: TRANSOFT TECHNOLOGY CORPORATION, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:WOLFF, JAMES J.;REEL/FRAME:009013/0315Effective date: 19980123 |
|
AS | Assignment |
Owner name: KLINE HAWKES CALIFORNIA SBIC, L.P., A LIMITED PARTFree format text: SECURITY INTEREST;ASSIGNOR:TRANSOFT TECHNOLOGY CORP., A CORP. OF DELAWARE;REEL/FRAME:009762/0914Effective date: 19990118 |
|
AS | Assignment |
Owner name: TRANSOFT TECHNOLOGY CORP., CALIFORNIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:KLINE HAWKES CALIFORNIA SBIC, L.P.;REEL/FRAME:010082/0278Effective date: 19990504 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD, CORP, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:TRANSOFT TECHNOLOGY;REEL/FRAME:010479/0640Effective date: 19991111 |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD COMPANY, COLORADOFree format text: MERGER;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:011523/0469Effective date: 19980520 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO SMALL (ORIGINAL EVENT CODE: LTOS); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 12 |
|
SULP | Surcharge for late payment |
Year of fee payment: 11 |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:026945/0699Effective date: 20030131 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.;HEWLETT-PACKARD COMPANY;REEL/FRAME:027661/0258Effective date: 20111025 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |