US20040107171A1 - Determining utility functions from ordenal rankings - Google Patents
Determining utility functions from ordenal rankings Download PDFInfo
- Publication number
- US20040107171A1 US20040107171A1 US10/308,401 US30840102A US2004107171A1 US 20040107171 A1 US20040107171 A1 US 20040107171A1 US 30840102 A US30840102 A US 30840102A US 2004107171 A1 US2004107171 A1 US 2004107171A1
- Authority
- US
- United States
- Prior art keywords
- objects
- neural network
- utility function
- implied
- ranked list
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 230000006870 function Effects 0.000 title description 59
- 238000000034 method Methods 0.000 claims abstract description 44
- 238000013528 artificial neural network Methods 0.000 claims description 61
- 230000008859 change Effects 0.000 claims description 21
- 230000004044 response Effects 0.000 claims description 16
- 238000012549 training Methods 0.000 claims description 11
- 230000003213 activating effect Effects 0.000 claims 2
- 238000004422 calculation algorithm Methods 0.000 description 19
- 210000000349 chromosome Anatomy 0.000 description 11
- 238000011156 evaluation Methods 0.000 description 6
- 210000002569 neuron Anatomy 0.000 description 5
- 239000000654 additive Substances 0.000 description 4
- 230000000996 additive effect Effects 0.000 description 4
- 238000004590 computer program Methods 0.000 description 3
- 230000002068 genetic effect Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000002922 simulated annealing Methods 0.000 description 3
- 230000006399 behavior Effects 0.000 description 2
- 238000005457 optimization Methods 0.000 description 2
- 230000008569 process Effects 0.000 description 2
- 238000005070 sampling Methods 0.000 description 2
- 230000004075 alteration Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 230000002349 favourable effect Effects 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 238000011835 investigation Methods 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000035772 mutation Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000008447 perception Effects 0.000 description 1
- 238000012545 processing Methods 0.000 description 1
- GOLXNESZZPUPJE-UHFFFAOYSA-N spiromesifen Chemical compound CC1=CC(C)=CC(C)=C1C(C(O1)=O)=C(OC(=O)CC(C)(C)C)C11CCCC1 GOLXNESZZPUPJE-UHFFFAOYSA-N 0.000 description 1
- 238000012706 support-vector machine Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
Definitions
- the present invention relates to determining utility functions for use in determining or representing user preferences.
- Auction software often allows bidders (for example, suppliers) to specify multiple attributes associated with their bids, such as quality, terms and conditions, etc. Consequently, bidders can differentiate themselves by factors other than price.
- Weighting factors enable buyers to rate the relative importance of attributes that may be associated with bids.
- a buyer can specify weighting factors for each attribute using a sliding scale, in which the user can choose from various options such as “do not care”, “important”, “more important”, “very important”, and “most important”.
- RFQ Request for Quotes
- Some software permits complex configuration and bill-of-material relationships.
- Suppliers can specify quotes having ranges of attributes, and price variations for terms and conditions.
- a buyer can post a RFQ, and the software automatically (i) searches supplier's rules (predefined and stored in a database), (ii) calculates a best offer for each supplier, and (iii) ranks all offers according to criteria that are most important to a buyer.
- the utility function of the item/bid is expressed as a parametric function of the attributes.
- a parametric function of the attributes There exist a number of investigations concerning techniques for representing the utility function of the bids/items having multiple attributes and subsequent techniques for the parametric model fitting on the ordinal data sets (that is, ordered set of items). In general, such an approach may be classified as belonging to multi-attribute utility theory (MAUT).
- MAUT multi-attribute utility theory
- parametric utility functions can be classified according to different levels of complexity.
- Types of parametric utility function include multilinear, multiplicative, and additive models. Solutions to the problem of evaluating attributes are proposed for additive models only, the utilities for individual attributes are considered to be independent. For additive utility functions, evaluation of the utility function, and subsequent ranking of the objects, is performed by assessing the weights of the attributes by formulating the problem as a linear programming task.
- users' preference structures are represented by what is essentially a linear additive utility function, namely a weighted sum of utility functions for individual attributes.
- U(price) and U(quality) are respectively the buyer's individual utility functions for price and quality.
- a technique for determining a utility function having multiple attributes is described herein, assuming that there exists a partly or fully ranked set of objects. Nonlinear interactions between individual attributes are assumed, and there is also assumed to be no a priori knowledge about individual attribute utility functions.
- Objects partially or fully ordered) having multiple attributes are accepted as input, and a multi-attribute utility function is provided as output.
- the ordered set of objects can either be directly obtained from a user, or determined from past interactions with the user or observed behavior of the user.
- This multi-attribute utility function is essentially “learned” from the ordered set of objects.
- a technique for learning a utility function using a feed-forward neural network is described. The neural network iteratively learns the utility function from pairs of items in the ranked list.
- the techniques described herein are presented in the context of a buyer selecting between alternative bids or quotes submitted by prospective suppliers.
- the described techniques apply more generally to any user's preference structure in respect of alternative “objects” with which the user is presented.
- the user ranks these competing objects in order of the user's relative preference for such objects.
- a utility function that defines the user's preference structure is provided as output on the basis of this relative ranking.
- FIG. 1 is a schematic representation of a feed-forward neural network used in a described technique for determing a multi-atttribute utility function.
- FIG. 2 is a flowchart that represents steps in the described technique for determining a multi-attribute utility function.
- FIG. 3 is a schematic representation of a computer system suitable for performing the techniques described with reference to FIGS. 1 and 2.
- a user may be considered to have an inherent preference structure involving objects having multiple attributes.
- An example of such a real-life problem is evaluating responses received, from suppliers, by a buyer for the buyer's RFQ.
- the buyer's preference structure is represented, mathematically, by a utility function that specifies these relevant attributes.
- the responses specify multiple attributes (of interest to the buyer), and the buyer chooses from amongst favorable responses received from suppliers.
- attributes that may comprise a response to a RFQ are “price”, “quality”, “quantity”.
- a buyer's preference structure over the entire attribute space is likely to involve dependencies between different attributes.
- attributes “price” and “quality” are likely to be related in a buyer's preference structure.
- a buyer may prefer a quote having a higher price and higher quality equally as much as a response having a lower price and medium quality. Interdependencies of this sort between different attributes are quite likely to be nonlinear.
- the described techniques can be used to learn a buyer's preference structure (represented as a utility function) over a space of multi-attributed responses.
- the buyer provides a set of ranked responses, as a training example, so that the utility function can be determined.
- FIG. 1 schematically represents a feed-forward neural network that is used to “learn” such a utility function.
- the output of the neural network of FIG. 1 corresponds to a learned utility function.
- the input vector X 110 comprises values ⁇ x 1 , x 2 , X 3 , . . . x m ⁇ that corresponds to different attributes of the multi-attributed object that is provided as input.
- Input vector X 110 is input to a first layer 120 of the neural network of FIG. 1. This first layer 120 connects to a second layer 130 , which in turn connects to a summation node 140 .
- the summation node 140 outputs the utility function ⁇ (x 1 , x 2 , x 3 , . . . x m ) 150 .
- Table 1 below presents a prescriptive indication of an approximate number of nodes to be used in the hidden layer of the feed-forward neural network of FIG. 1 for different number of attributes (that is, dimensionality of the input vector X 110 ), and different types of utility functions.
- TABLE 1 Number of Number of Hidden Hidden Type of Utility Function Nodes in Nodes in (m- Dimensional input vector) First Layer Second Layer Linear O(m) O(1) Quadratic O(m) O(2) Polnomial of O(r) O(m) O(r) Log-polynomial of O(r) O(m) O(r) Exponential of Polynomial of O(r) O(m) O(r)
- the described algorithm which can be conveniently referred to as “bid evaluation”, receives as input r, which is a ranked list of objects.
- the bid evaluation algorithm provides as output ⁇ (.), which is a utility function.
- the input list r an either partly or fully ranked subset of items/bids, can be represented as a set of ordered pairs in the following manner:
- r ⁇ (x 1 ,x j ): x i is preferred over x j by the user and provided as input to the system ⁇
- the Input Ranked List r consists of object pairs provided by the user, out of n(n ⁇ 1)/2 possible pairs for n objects (
- ⁇ n(n ⁇ 1)/2) specified by the system to the user.
- Each object pair indicates a transitive relationship of preference such that (a,b) indicates that a is preferred over b, and given (a,b) and (b,c), a is preferred over c, by implication.
- FIG. 2 flowcharts steps involved in the described algorithm for bid evaluation. Each of the flowcharted steps is described below with reference to correspondingly numbered steps, both briefly in Tables 2 and 3 below, and also in further detail under respectively entitled subsections.
- Step 210 Get the inputted ranked list r.
- Step 220 Initialize a multi-layered feed-forward neural network (represented in FIG. 1) for training. This procedure is repeat for every pair of objects (x i , x j ) in the ranked list r.
- Step 230 Compute the required change in parameter weights of the neural network in every iteration and for each individual pair of bids/items in r.
- Step 240 Compute an average change in parameter weights of the neural network of FIG.
- Step 250 Repeat steps 230 and 240 until there is no significant change in the parameter weights calculated in step 240.
- Step 260 For any given input object, the output of the trained neural network corresponds to the utility function f(.).
- Table 3 below presents pseudocode corresponding to the steps of Table 2 and FIG. 2.
- a user can explicitly provide a list of ranked objects (list r), or the list can be implicitly obtained from observed behavior of the user, or from other transactions with the user.
- the objects are ranked in descending order of the user's preference for the respective objects, from more preferred to less preferred.
- the ranking is relative not absolute; that is, only the ranked objects are considered, rather than the total set of objects.
- FIG. 1 presents a representative architecture
- Table 1 above presents a suggested order of magnitude for the number of nodes in hidden layers of the selected multi-layered network. These suggestions depend on the number of attributes of an object, which is the same as the number of inputs to the network (that is, m), and the order of complexity of the utility function to be obtained. For example, if an object has 12 attributes, the number of hidden nodes in the first hidden layer may be selected as 12 ⁇ 2.
- All weights of the links and thresholds of the nodes are initialized to small random values (for example, in the range specified by [ ⁇ 0.1,0.1]). These seed values provide a basis for training the neural network.
- Step 230 is performed for every pair of objects (x p , x q ) in the ranked list r.
- (x p , x q ) implies that (x p >x q ) in the ranked list r. That is, x p is preferred over x q .
- the repeated calculation in step 230 corresponds to the iterative training steps of the neural network of FIG. 1. In each iteration, all ordered pairs in the list of ranked objects r is desirably used.
- Step 240 is performed (as described below) to compute the average change in the parameters of the neural network required to perform the training in each iteration.
- a pair of objects (x p , x q ) is taken as an initial input.
- the neural network output is calculated for both objects in the pair individually, for computing the required change in network parameters as described below.
- To compute the neural network output for a particular object (for example, x p ) the input to the neural network is the attribute vector x p , which represents the corresponding object.
- the corresponding output of the neural network is the resulting utility function ⁇ (x p ) generated by the neural network.
- Equation (1) K is a constant between zero and one; that is, 0 ⁇ K ⁇ 1.
- a typical value of K may be, for example, 0.95.
- the described algorithm then computes the required change in weights of the links connecting neurons between successive layers of the neural network, to reduce the error made by the neural network with the current weights (as given by the error measure Equation (2)).
- the parameters that is, weights of the links connecting neurons between successive layers
- the parameters are changed in the opposite direction of the error gradient (gradient descent) so that a movement by a small factor in the parameter space opposite to the gradient direction results in a decrease in the total error (on the pairs of training bids/items).
- the expression ⁇ w ij l (p,q) is computed.
- This expression represents the required change in weight w ij l of the link connecting the neuron i of layer (l ⁇ 1) to neuron j of layer l of the neural network of FIG. 1.
- This expression ⁇ ik l (p,q) is computed in accordance with Equation (3) below which applies if ⁇ (x p ) ⁇ (x q ) for the objects x p >x q . Otherwise, the expression ⁇ w ij l (p,q) is equal to zero.
- K is a constant between zero and one; that is, 0 ⁇ K ⁇ 1.
- a typical value of K may be, for example, 0.95.
- the parameter ⁇ is a constant that is referred to as “learning rate”. This value, ⁇ , is computed in accordance with Equation (4) below.
- Equation (4) the value for ⁇ w ij l (p,q) is provided by the expression of Equation (3) below.
- v jl (p) and v jl (q) are respective outputs of the jth neuron in layer l of the network for x p and x q as inputs to the neural network.
- the output of node j of layer l for an input x p is calculated in accordance with Equation (6) below.
- v jl ⁇ ( p ) 1 1 + exp ⁇ ( - u jl ⁇ ( p ) ) ( 6 )
- v jl (q) can be computed for an input x q , for different layers and nodes.
- Equation (7) the error at a node i of layer l depends on the error of every node k of layer l+1 connected to node i.
- the topmost layer that is., the output layer
- Error value ⁇ can be recursively computed in accordance with Equation (7) below.
- ⁇ il ⁇ ( p ) ⁇ k ⁇ w ki ⁇ ⁇ k , l + 1 ⁇ ( p ) ⁇ v il ⁇ ( p ) ⁇ ( 1 - v il ⁇ ( p ) ) ( 7 )
- ⁇ 1,L (p) 1.
- L is the number of layers.
- ⁇ jl (q) can be computed for an input x q .
- step 230 The above-described training procedure of step 230 is repeated for all (x p , x q ) pairs in the ranked list r.
- N is the total number of instances in which the neural network makes an error in this iteration.
- Weights w ij l are updated in accordance with Equation (9) below.
- Steps 230 and 240 are both repeated until there is no significant change in ⁇ w ij , as determined in step 240 . That is, until Equation (10) below is satisfied. ⁇ i , j , l ⁇ ⁇ ⁇ ⁇ ⁇ w ij l ⁇ ⁇ ⁇ ( 10 )
- Equation (10) e is a small constant.
- the repeat-until loop can be repeated a predetermined number of times; that is, for a fixed number of iterations.
- Equation (1) and (2) Examples are now described of implementing the error measure given by Equation (1) and (2) using other techniques apart from neural networks (or without any reference to neural networks). Optimization techniques, such as genetic algorithms (GA) or simulated annealing (SA) can be used to minimize the error expressed in Equations (1) and (2). A specific case of using genetic algorithm for minimizing the error measure is described, as provided in Equations (1) and (2).
- GA genetic algorithms
- SA simulated annealing
- Equation (11) The utility function can be described as a known parametric form of second order as expressed in Equation (11) below.
- f ⁇ ( x ) a 0 + ⁇ i ⁇ a i ⁇ x i + ⁇ i , j ⁇ a ij ⁇ x i ⁇ x j ( 11 )
- Equation (11) i and j denote the indices of the attributes of the items/bids.
- i and j denote the indices of the attributes of the items/bids.
- (ii) Define chromosomes that encode the parameters a's. For example, if there are only two attributes, then there exist parameters a0, a1, a2, a12 (in total 4 parameters). Let all the parameters be bounded in ⁇ 1 ⁇ a ⁇ +1 and each can be encoded in 8 bits such that a maximum precision that can be achieved is ⁇ fraction (1/256) ⁇ in the representation of the value of each parameter. Thus, in this example, a chromosome length will be 4 byte (32 bits).
- a pool can consist of a large number of chromosomes depending on the constraints imposed the systems running time and resources). In the above example, one can start with 16 chromosomes in a pool. Initialize each chromosome randomly.
- This algorithm does not involve the use of neural networks.
- This algorithm can determine the utility function of complex nonlinear form using stochastic optimization.
- This algorithm can also be used for higher order complex form of utility functions.
- simulated annealing algorithm can be used to determine an optimal utility function of known complex form.
- the camera attributes considered are price, CCD resolution, memory card included or not, optical zoom, digital zoom, width, height, depth, and weight.
- Two possible utility functions that a user can have on these cameras are considered, based on the above attributes. These utility functions are:
- the performance measure that can be used to evaluate the effectiveness of the described techniques are the number of actual top k cameras predicted in the top k positions by the described techniques.
- FIG. 3 is a schematic representation of a computer system 300 that can be used to perform steps in a process that implement the techniques described herein.
- the computer system 300 is provided for executing computer software that is programmed to assist in performing the described techniques.
- This computer software executes under a suitable operating system installed on the computer system 300 .
- the computer software involves a set of programmed logic instructions that are able to be interpreted by the computer system 300 for instructing the computer system 300 to perform predetermined functions specified by those instructions.
- the computer software can be an expression recorded in any language, code or notation, comprising a set of instructions intended to cause a compatible information processing system to perform particular functions, either directly or after conversion to another language, code or notation.
- the computer software is programmed by a computer program comprising statements in an appropriate computer language.
- the computer program is processed using a compiler into computer software that has a binary format suitable for execution by the operating system.
- the computer software is programmed in a manner that involves various software components, or code means, that perform particular steps in the process of the described techniques.
- the components of the computer system 300 include: a computer 320 , input devices 310 , 315 and video display 390 .
- the computer 320 includes: processor 340 , memory module 350 , input/output (I/O) interfaces 360 , 365 , video interface 345 , and storage device 355 .
- I/O input/output
- the processor 340 is a central processing unit (CPU) that executes the operating system and the computer software executing under the operating-system.
- the memory module 1050 includes random access memory (RAM) and read-only memory (ROM), and is used under direction of the processor 1040 .
- the video interface 345 is connected to video display 390 and provides video signals for display on the video display 390 .
- User input to operate the computer 320 is provided from input devices 310 , 315 consisting of keyboard 310 and mouse 315 .
- the storage device 355 can include a disk drive or any other suitable non-volatile storage medium.
- Each of the components of the computer 320 is connected to a bus 330 that includes data, address, and control buses, to allow these components to communicate with each other via the bus 330 .
- the computer system 300 can be connected to one or more other similar computers via a input/output (I/O) interface 365 using a communication channel 385 to a network 380 , represented as the Internet.
- I/O input/output
- the computer software program may be provided as a computer program product, and recorded on a portable storage medium.
- the computer software program is accessed by the computer system 300 from the storage device 355 .
- the computer software can be accessed directly from the network 380 by the computer 320 .
- a user can interact with the computer system 300 using the keyboard 310 and mouse 315 to operate the programmed computer software executing on the computer 320 .
- the computer system 300 is described for illustrative purposes: other configurations or types of computer systems can be equally well used to implement the described techniques.
- the foregoing is only an example of a particular type of computer system suitable for implementing the described techniques.
- FIG. 4 flowcharts a generic implementation that does not necessarily use neural network capabilities.
- step 410 an at least partly ranked list of multi-attribute objects is received.
- step 420 an error measure associated with an implied utility function is calculated.
- step 430 the implied utility function is revised, based upon the calculated error measure.
- step 440 a determination is made concerning whether the revised implied utility function is satisfactory. If the implied utility function is satisfactory, the implied utility function is accepted in step 450 . Otherwise, steps 420 to 440 are repeated until the revised utility function is found to be satisfactory.
- a buyer receives a set of responses from his suppliers, the buyer can choose a subset of the received responses and rank these responses.
- the ranked subset can be presented to the above-described algorithm to train a neural network to represent this utility function.
- This utility function so computed by the described algorithm can then be used to order the entire set of responses. The buyer is likely to choose a winning responses from amongst the top ranking responses.
- Neural networks can be used to learn user utility functions from the ranked list.
- the objective function can be optimized with computing tools such as decision trees, support vector machines, evolutionary algorithms, Bayesian and belief networks, probabilistic reasoning.
Abstract
Description
- The present invention relates to determining utility functions for use in determining or representing user preferences.
- Auction software often allows bidders (for example, suppliers) to specify multiple attributes associated with their bids, such as quality, terms and conditions, etc. Consequently, bidders can differentiate themselves by factors other than price.
- Weighting factors enable buyers to rate the relative importance of attributes that may be associated with bids. A buyer can specify weighting factors for each attribute using a sliding scale, in which the user can choose from various options such as “do not care”, “important”, “more important”, “very important”, and “most important”.
- There also exists software for performing “Request for Quotes” (RFQ). Some software permits complex configuration and bill-of-material relationships. Suppliers can specify quotes having ranges of attributes, and price variations for terms and conditions. In some cases, a buyer can post a RFQ, and the software automatically (i) searches supplier's rules (predefined and stored in a database), (ii) calculates a best offer for each supplier, and (iii) ranks all offers according to criteria that are most important to a buyer.
- In some existing RFQ software, buyers (that is, users) can specify the weighting factors of each attribute explicitly. However, these softwares demand a thorough knowledge/perception about the attributes from a user. On the other hand, rest of the software accept input from a user about the order (partial or full) on the items or bids and extract the weighting factors (utilities) of the attributes from the specified order.
- In software that accepts an ordered list (full or partial) of items/bids from a user, the utility function of the item/bid is expressed as a parametric function of the attributes. There exist a number of investigations concerning techniques for representing the utility function of the bids/items having multiple attributes and subsequent techniques for the parametric model fitting on the ordinal data sets (that is, ordered set of items). In general, such an approach may be classified as belonging to multi-attribute utility theory (MAUT).
- In multi-attribute utility theory (MAUT), parametric utility functions can be classified according to different levels of complexity. Types of parametric utility function include multilinear, multiplicative, and additive models. Solutions to the problem of evaluating attributes are proposed for additive models only, the utilities for individual attributes are considered to be independent. For additive utility functions, evaluation of the utility function, and subsequent ranking of the objects, is performed by assessing the weights of the attributes by formulating the problem as a linear programming task.
- There are two primary limitations associated with the existing tools described above.
- First, users' preference structures are represented by what is essentially a linear additive utility function, namely a weighted sum of utility functions for individual attributes. For example, if attributes associated with a bid are price and quality, then a relevant utility function for the buyer, U(price, quality), is defined as U(price, quality)=w1×U(price)+w2×U(quality). In this expression, U(price) and U(quality) are respectively the buyer's individual utility functions for price and quality.
- Second, individual attribute utility functions are assumed a priori. In the example above, U(price) and U(quality) are assumed to be known, and the buyer effectively specifies weights w1 and w2 by indicating the relative importance of the respective attributes on a sliding scale, such as that described above.
- In view of the above observations, a need clearly exists for representing a user's preferences when selecting between competing alternatives.
- A technique for determining a utility function having multiple attributes is described herein, assuming that there exists a partly or fully ranked set of objects. Nonlinear interactions between individual attributes are assumed, and there is also assumed to be no a priori knowledge about individual attribute utility functions.
- Objects partially or fully ordered) having multiple attributes are accepted as input, and a multi-attribute utility function is provided as output. The ordered set of objects can either be directly obtained from a user, or determined from past interactions with the user or observed behavior of the user. This multi-attribute utility function is essentially “learned” from the ordered set of objects. A technique for learning a utility function using a feed-forward neural network is described. The neural network iteratively learns the utility function from pairs of items in the ranked list.
- The techniques described herein are presented in the context of a buyer selecting between alternative bids or quotes submitted by prospective suppliers. The described techniques, however, apply more generally to any user's preference structure in respect of alternative “objects” with which the user is presented. The user ranks these competing objects in order of the user's relative preference for such objects. A utility function that defines the user's preference structure is provided as output on the basis of this relative ranking.
- FIG. 1 is a schematic representation of a feed-forward neural network used in a described technique for determing a multi-atttribute utility function.
- FIG. 2 is a flowchart that represents steps in the described technique for determining a multi-attribute utility function.
- FIG. 3 is a schematic representation of a computer system suitable for performing the techniques described with reference to FIGS. 1 and 2.
- In “real-life” problems, a user may be considered to have an inherent preference structure involving objects having multiple attributes. An example of such a real-life problem is evaluating responses received, from suppliers, by a buyer for the buyer's RFQ. The buyer's preference structure is represented, mathematically, by a utility function that specifies these relevant attributes.
- The responses specify multiple attributes (of interest to the buyer), and the buyer chooses from amongst favorable responses received from suppliers. Examples of attributes that may comprise a response to a RFQ are “price”, “quality”, “quantity”. A buyer's preference structure over the entire attribute space is likely to involve dependencies between different attributes.
- For buyers, attributes “price” and “quality” are likely to be related in a buyer's preference structure. A buyer, for example, may prefer a quote having a higher price and higher quality equally as much as a response having a lower price and medium quality. Interdependencies of this sort between different attributes are quite likely to be nonlinear.
- The described techniques can be used to learn a buyer's preference structure (represented as a utility function) over a space of multi-attributed responses. The buyer provides a set of ranked responses, as a training example, so that the utility function can be determined.
- FIG. 1 schematically represents a feed-forward neural network that is used to “learn” such a utility function. The output of the neural network of FIG. 1 (that is, ƒ(x1,x2,x3, . . . xm)) corresponds to a learned utility function. The
input vector X 110 comprises values {x1, x2, X3, . . . xm} that corresponds to different attributes of the multi-attributed object that is provided as input.Input vector X 110 is input to afirst layer 120 of the neural network of FIG. 1. Thisfirst layer 120 connects to asecond layer 130, which in turn connects to asummation node 140. Thesummation node 140 outputs the utility function ƒ(x1, x2, x3, . . . xm) 150. - Table 1 below presents a prescriptive indication of an approximate number of nodes to be used in the hidden layer of the feed-forward neural network of FIG. 1 for different number of attributes (that is, dimensionality of the input vector X110), and different types of utility functions.
TABLE 1 Number of Number of Hidden Hidden Type of Utility Function Nodes in Nodes in (m- Dimensional input vector) First Layer Second Layer Linear O(m) O(1) Quadratic O(m) O(2) Polnomial of O(r) O(m) O(r) Log-polynomial of O(r) O(m) O(r) Exponential of Polynomial of O(r) O(m) O(r) - Techniques described herein are presented in the form of an algorithm, and each step of the algorithm is described in detail. Each object i is represented as an m-dimensional vector xi=(xi1, xi2, . . . , xim).
- The described algorithm, which can be conveniently referred to as “bid evaluation”, receives as input r, which is a ranked list of objects. The bid evaluation algorithm provides as output ƒ(.), which is a utility function.
- The input list r, an either partly or fully ranked subset of items/bids, can be represented as a set of ordered pairs in the following manner:
- r={(x1,xj): xi is preferred over xj by the user and provided as input to the system}
- The Input Ranked List r consists of object pairs provided by the user, out of n(n−1)/2 possible pairs for n objects (|r|=≦n(n−1)/2) specified by the system to the user. Each object pair indicates a transitive relationship of preference such that (a,b) indicates that a is preferred over b, and given (a,b) and (b,c), a is preferred over c, by implication.
- FIG. 2 flowcharts steps involved in the described algorithm for bid evaluation. Each of the flowcharted steps is described below with reference to correspondingly numbered steps, both briefly in Tables 2 and 3 below, and also in further detail under respectively entitled subsections.
TABLE 2 Step 210Get the inputted ranked list r. Step 220 Initialize a multi-layered feed-forward neural network (represented in FIG. 1) for training. This procedure is repeat for every pair of objects (xi, xj) in the ranked list r. Step 230 Compute the required change in parameter weights of the neural network in every iteration and for each individual pair of bids/items in r. Step 240 Compute an average change in parameter weights of the neural network of FIG. 1 for all possible pairs in the ranked sublist r provided by the user. Step 250 Repeat steps change in the parameter weights calculated in step 240.Step 260 For any given input object, the output of the trained neural network corresponds to the utility function f(.). - Table 3 below presents pseudocode corresponding to the steps of Table 2 and FIG. 2.
TABLE 3 algorithm bid_evaluation (Input r: ranked list of items; Output f(.): utility function) r = ranked list ! step 210 initilize neural network ! step 220 repeat for (every pair (xp, xq) in r) calculate change in weights in neural network; !step 230 end for compute average change in weights in neural network for all pairs (xp, xq) in r; ! step 240 until (only minimal change n parameter weights) ! step 250 return neural network !step 260 end bid_evaluation - Each of the above-described steps is described in further detail below.
- Obtaining a Ranked List—Step210
- A user can explicitly provide a list of ranked objects (list r), or the list can be implicitly obtained from observed behavior of the user, or from other transactions with the user. The objects are ranked in descending order of the user's preference for the respective objects, from more preferred to less preferred. The ranking is relative not absolute; that is, only the ranked objects are considered, rather than the total set of objects.
- Initializing Network for Training—
Step 220 - A suitable architecture is first selected for a feed-forward network. FIG. 1 presents a representative architecture, and Table 1 above presents a suggested order of magnitude for the number of nodes in hidden layers of the selected multi-layered network. These suggestions depend on the number of attributes of an object, which is the same as the number of inputs to the network (that is, m), and the order of complexity of the utility function to be obtained. For example, if an object has 12 attributes, the number of hidden nodes in the first hidden layer may be selected as 12±2.
- All weights of the links and thresholds of the nodes are initialized to small random values (for example, in the range specified by [−0.1,0.1]). These seed values provide a basis for training the neural network.
- Calculating Revised Parameter Weights—Step230
-
Step 230 is performed for every pair of objects (xp, xq) in the ranked list r. Here (xp, xq) implies that (xp>xq) in the ranked list r. That is, xp is preferred over xq. The repeated calculation instep 230 corresponds to the iterative training steps of the neural network of FIG. 1. In each iteration, all ordered pairs in the list of ranked objects r is desirably used. Step 240 is performed (as described below) to compute the average change in the parameters of the neural network required to perform the training in each iteration. - A pair of objects (xp, xq) is taken as an initial input. The neural network output is calculated for both objects in the pair individually, for computing the required change in network parameters as described below. To compute the neural network output for a particular object (for example, xp) the input to the neural network is the attribute vector xp, which represents the corresponding object. The corresponding output of the neural network is the resulting utility function ƒ(xp) generated by the neural network.
- If ƒ(xp) is less than or equal to ƒ(xq), then the network is considered to have made an error. An error is made because the utility function ƒ(.) implied by the neural network effectively ranks xq above xp.
-
-
- The described algorithm then computes the required change in weights of the links connecting neurons between successive layers of the neural network, to reduce the error made by the neural network with the current weights (as given by the error measure Equation (2)). The parameters (that is, weights of the links connecting neurons between successive layers) are changed in the opposite direction of the error gradient (gradient descent) so that a movement by a small factor in the parameter space opposite to the gradient direction results in a decrease in the total error (on the pairs of training bids/items).
- For the pair of objects (xp, xq), for every i, j, and l, the expression Δwij l(p,q) is computed. This expression represents the required change in weight wij l of the link connecting the neuron i of layer (l−1) to neuron j of layer l of the neural network of FIG. 1. This expression Δik l(p,q) is computed in accordance with Equation (3) below which applies if ƒ(xp)≦ƒ(xq) for the objects xp>xq. Otherwise, the expression Δwij l(p,q) is equal to zero.
- Δw ij l(p,q)=η(Kδ il(p)v jl(p)−δil(q)v jl(q)) (3)
- In Equation (3) above, K is a constant between zero and one; that is, 0<K<1. A typical value of K may be, for example, 0.95. K is constant which forces the network output such that ƒ(xq)/ƒ(xp)=K in the converged state where xp
- In Equation (4) above, the value for Δwij l(p,q) is provided by the expression of Equation (3) below.
- {overscore (Δw ij l(p,q))}=(K.δ il)v jl(p)−δil(q)v jl(q)) (5)
-
- In Equation (6) above, ujl(p) is the total input to the jth node of layer l from the previous layer, given as ujl(p)=Σwij lvi,l−1(p), for an input node vj0(p)=xpj in which xp=(xp1, xp2, . . . xpm). Similarly, vjl(q) can be computed for an input xq, for different layers and nodes.
-
- For the output layer, δ1,L(p)=1. In this case, L is the number of layers. Similarly, δjl(q) can be computed for an input xq.
- The above-described training procedure of
step 230 is repeated for all (xp, xq) pairs in the ranked list r. - Verifying Revised Parameter Weights—Step240
-
- In Equation (8) above, N is the total number of instances in which the neural network makes an error in this iteration.
- Weights wij l are updated in accordance with Equation (9) below.
- w ij l =w ij l +Δw ij l (9)
-
- In Equation (10), e is a small constant. Alternatively, the repeat-until loop can be repeated a predetermined number of times; that is, for a fixed number of iterations.
- Examples are now described of implementing the error measure given by Equation (1) and (2) using other techniques apart from neural networks (or without any reference to neural networks). Optimization techniques, such as genetic algorithms (GA) or simulated annealing (SA) can be used to minimize the error expressed in Equations (1) and (2). A specific case of using genetic algorithm for minimizing the error measure is described, as provided in Equations (1) and (2).
-
- In Equation (11) above, i and j denote the indices of the attributes of the items/bids. One can extend this second order form to higher order forms also. However, that does not affect the usage of GA and the error measure in this algorithm.
- The GA-based technique operates as described below under points (i) to (vi).
- (ii) Define chromosomes that encode the parameters a's. For example, if there are only two attributes, then there exist parameters a0, a1, a2, a12 (in total 4 parameters). Let all the parameters be bounded in −1<a<+1 and each can be encoded in 8 bits such that a maximum precision that can be achieved is {fraction (1/256)} in the representation of the value of each parameter. Thus, in this example, a chromosome length will be 4 byte (32 bits).
- (iii) Initialize a pool of chromosomes (a pool can consist of a large number of chromosomes depending on the constraints imposed the systems running time and resources). In the above example, one can start with 16 chromosomes in a pool. Initialize each chromosome randomly.
- (iv) Perform the crossover operation on the chromosomes.
- (v) Perform a mutation operation.
- (vi) Evaluate each chromosome to determine the error each chromosome is representing over all the bids/items. Perform selection, such as Roullette-wheel selection so that the chromosomes representing lower error measure (according to Equations (1) and (2)) have a higher probability of selection.
- (vii) Go to the step (ii) and repeat the procedure until the minimum error represented by the pool of chromosome does not decrease any further.
- The above algorithm does not involve the use of neural networks. This algorithm can determine the utility function of complex nonlinear form using stochastic optimization. This algorithm can also be used for higher order complex form of utility functions. In a similar manner, simulated annealing algorithm can be used to determine an optimal utility function of known complex form.
- Application of Described Techniques
- Consider the following application. A buyer wants to buy a digital camera. If the buyer goes to an online department store, he finds there are more than 100 digital cameras. Each digital camera has more than 12 attributes. The aim of the buyer is not to evaluate each of them separately but to evaluate a few of them and on the basis of these rank all the remaining cameras.
- The camera attributes considered are price, CCD resolution, memory card included or not, optical zoom, digital zoom, width, height, depth, and weight. Two possible utility functions that a user can have on these cameras are considered, based on the above attributes. These utility functions are:
- (ii) Sum of Products: f(camera)=0.4u(price)+0.3u(CCD-res).U(mem-card-incl).U(opt-zoom).U(digital-zoom)+0.3 u(width).u(height).u(depth).u(weight)
- (iii) Product: f(camera)=u(price).u(CCD-res).u(mem-card-incl).u(opt-zoom).u(digital-zoom).u(width).u(height).u(depth).u(weight)
- The effectiveness of the described techniques are tested for both of the above utility functions with random sampling and query based sampling algorithms. Different sizes of training sets, containing either a fully ranked set of cameras or the cameras are partially ranked, can be used.
- The performance measure that can be used to evaluate the effectiveness of the described techniques are the number of actual top k cameras predicted in the top k positions by the described techniques.
- Computer Hardware and Software
- FIG. 3 is a schematic representation of a
computer system 300 that can be used to perform steps in a process that implement the techniques described herein. Thecomputer system 300 is provided for executing computer software that is programmed to assist in performing the described techniques. This computer software executes under a suitable operating system installed on thecomputer system 300. - The computer software involves a set of programmed logic instructions that are able to be interpreted by the
computer system 300 for instructing thecomputer system 300 to perform predetermined functions specified by those instructions. The computer software can be an expression recorded in any language, code or notation, comprising a set of instructions intended to cause a compatible information processing system to perform particular functions, either directly or after conversion to another language, code or notation. - The computer software is programmed by a computer program comprising statements in an appropriate computer language. The computer program is processed using a compiler into computer software that has a binary format suitable for execution by the operating system. The computer software is programmed in a manner that involves various software components, or code means, that perform particular steps in the process of the described techniques.
- The components of the
computer system 300 include: acomputer 320,input devices 310, 315 andvideo display 390. Thecomputer 320 includes:processor 340,memory module 350, input/output (I/O) interfaces 360, 365,video interface 345, andstorage device 355. - The
processor 340 is a central processing unit (CPU) that executes the operating system and the computer software executing under the operating-system. The memory module 1050 includes random access memory (RAM) and read-only memory (ROM), and is used under direction of the processor 1040. - The
video interface 345 is connected tovideo display 390 and provides video signals for display on thevideo display 390. User input to operate thecomputer 320 is provided frominput devices 310, 315 consisting ofkeyboard 310 and mouse 315. Thestorage device 355 can include a disk drive or any other suitable non-volatile storage medium. - Each of the components of the
computer 320 is connected to abus 330 that includes data, address, and control buses, to allow these components to communicate with each other via thebus 330. - The
computer system 300 can be connected to one or more other similar computers via a input/output (I/O)interface 365 using acommunication channel 385 to anetwork 380, represented as the Internet. - The computer software program may be provided as a computer program product, and recorded on a portable storage medium. In this case, the computer software program is accessed by the
computer system 300 from thestorage device 355. Alternatively, the computer software can be accessed directly from thenetwork 380 by thecomputer 320. In either case, a user can interact with thecomputer system 300 using thekeyboard 310 and mouse 315 to operate the programmed computer software executing on thecomputer 320. - The
computer system 300 is described for illustrative purposes: other configurations or types of computer systems can be equally well used to implement the described techniques. The foregoing is only an example of a particular type of computer system suitable for implementing the described techniques. - Overview
- Though techniques are described herein in the context of neural networks, other implementations are possible, such as those involving genetic algorithms, as noted above.
- FIG. 4 flowcharts a generic implementation that does not necessarily use neural network capabilities. In
step 410, an at least partly ranked list of multi-attribute objects is received. Instep 420, an error measure associated with an implied utility function is calculated. Instep 430, the implied utility function is revised, based upon the calculated error measure. - In
step 440, a determination is made concerning whether the revised implied utility function is satisfactory. If the implied utility function is satisfactory, the implied utility function is accepted instep 450. Otherwise, steps 420 to 440 are repeated until the revised utility function is found to be satisfactory. - In the case of a RFQ problem, a buyer receives a set of responses from his suppliers, the buyer can choose a subset of the received responses and rank these responses. The ranked subset can be presented to the above-described algorithm to train a neural network to represent this utility function. This utility function so computed by the described algorithm can then be used to order the entire set of responses. The buyer is likely to choose a winning responses from amongst the top ranking responses.
- Various analogous contexts exist in which the described techniques can also be applied in a similar manner.
- The described techniques for learning a utility function over a subset of ranked objects have the following advantages.
- No restriction is imposed on interactions between the individual attribute utilities.
- No prior knowledge of individual attribute utility functions is required.
- Neural networks can be used to learn user utility functions from the ranked list.
- The objective function can be optimized with computing tools such as decision trees, support vector machines, evolutionary algorithms, Bayesian and belief networks, probabilistic reasoning.
- The techniques described herein require only a set of ranked objects to generate a utility function.
- Various alterations and modifications can be made to the techniques and arrangements described herein, as would be apparent to one skilled in the relevant art.
Claims (30)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/308,401 US7392231B2 (en) | 2002-12-03 | 2002-12-03 | Determining utility functions from ordenal rankings |
US11/950,490 US20080104000A1 (en) | 2002-12-03 | 2007-12-05 | Determining Utility Functions from Ordinal Rankings |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/308,401 US7392231B2 (en) | 2002-12-03 | 2002-12-03 | Determining utility functions from ordenal rankings |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/950,490 Division US20080104000A1 (en) | 2002-12-03 | 2007-12-05 | Determining Utility Functions from Ordinal Rankings |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040107171A1 true US20040107171A1 (en) | 2004-06-03 |
US7392231B2 US7392231B2 (en) | 2008-06-24 |
Family
ID=32392737
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/308,401 Active 2024-06-29 US7392231B2 (en) | 2002-12-03 | 2002-12-03 | Determining utility functions from ordenal rankings |
US11/950,490 Abandoned US20080104000A1 (en) | 2002-12-03 | 2007-12-05 | Determining Utility Functions from Ordinal Rankings |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/950,490 Abandoned US20080104000A1 (en) | 2002-12-03 | 2007-12-05 | Determining Utility Functions from Ordinal Rankings |
Country Status (1)
Country | Link |
---|---|
US (2) | US7392231B2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040243292A1 (en) * | 2003-06-02 | 2004-12-02 | Rini Roy | Vehicle control system having an adaptive controller |
US20070271269A1 (en) * | 2006-05-19 | 2007-11-22 | International Business Machines Corporation | Method and apparatus for ranking-based information processing |
US8548937B2 (en) | 2010-08-17 | 2013-10-01 | Wisercare Llc | Medical care treatment decision support system |
Families Citing this family (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11151617B2 (en) | 2012-03-09 | 2021-10-19 | Nara Logics, Inc. | Systems and methods for providing recommendations based on collaborative and/or content-based nodal interrelationships |
US10789526B2 (en) | 2012-03-09 | 2020-09-29 | Nara Logics, Inc. | Method, system, and non-transitory computer-readable medium for constructing and applying synaptic networks |
US11727249B2 (en) | 2011-09-28 | 2023-08-15 | Nara Logics, Inc. | Methods for constructing and applying synaptic networks |
US8732101B1 (en) | 2013-03-15 | 2014-05-20 | Nara Logics, Inc. | Apparatus and method for providing harmonized recommendations based on an integrated user profile |
US8170971B1 (en) | 2011-09-28 | 2012-05-01 | Ava, Inc. | Systems and methods for providing recommendations based on collaborative and/or content-based nodal interrelationships |
US10467677B2 (en) | 2011-09-28 | 2019-11-05 | Nara Logics, Inc. | Systems and methods for providing recommendations based on collaborative and/or content-based nodal interrelationships |
US9251461B2 (en) | 2013-03-15 | 2016-02-02 | International Business Machines Corporation | Interactive method to reduce the amount of tradeoff information required from decision makers in multi-attribute decision making under uncertainty |
US20150006267A1 (en) * | 2013-06-28 | 2015-01-01 | International Business Machines Corporation | Designing price incentives in a network with social interactions |
US9658260B2 (en) * | 2013-09-04 | 2017-05-23 | Abb Schweiz Ag | Power system state estimation using a two-level solution |
US20150220950A1 (en) * | 2014-02-06 | 2015-08-06 | Yahoo! Inc. | Active preference learning method and system |
CN109447334B (en) * | 2018-10-19 | 2021-07-16 | 江苏满运物流信息有限公司 | Data dimension reduction method and device for goods source information, electronic equipment and storage medium |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5754939A (en) * | 1994-11-29 | 1998-05-19 | Herz; Frederick S. M. | System for generation of user profiles for a system for customized electronic identification of desirable objects |
US20020161731A1 (en) * | 2001-02-07 | 2002-10-31 | Tayebnejad Mohammad Reza | Artificial intelligence trending system |
US6581048B1 (en) * | 1996-06-04 | 2003-06-17 | Paul J. Werbos | 3-brain architecture for an intelligent decision and control system |
US20030233310A1 (en) * | 2002-06-17 | 2003-12-18 | Boris Stavrovski | Method and system for implementing a business transaction over the internet with use and consecutive transformation of information from publicly available databases, actual preferences of potential customers and statistical models of the market situation |
US6678669B2 (en) * | 1996-02-09 | 2004-01-13 | Adeza Biomedical Corporation | Method for selecting medical and biochemical diagnostic tests using neural network-related applications |
US6708160B1 (en) * | 1999-04-06 | 2004-03-16 | Paul J. Werbos | Object nets |
US6732090B2 (en) * | 2001-08-13 | 2004-05-04 | Xerox Corporation | Meta-document management system with user definable personalities |
US6882992B1 (en) * | 1999-09-02 | 2005-04-19 | Paul J. Werbos | Neural networks for intelligent control |
US20050131847A1 (en) * | 1998-05-01 | 2005-06-16 | Jason Weston | Pre-processed feature ranking for a support vector machine |
US6915269B1 (en) * | 1999-12-23 | 2005-07-05 | Decisionsorter Llc | System and method for facilitating bilateral and multilateral decision-making |
-
2002
- 2002-12-03 US US10/308,401 patent/US7392231B2/en active Active
-
2007
- 2007-12-05 US US11/950,490 patent/US20080104000A1/en not_active Abandoned
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5754939A (en) * | 1994-11-29 | 1998-05-19 | Herz; Frederick S. M. | System for generation of user profiles for a system for customized electronic identification of desirable objects |
US6678669B2 (en) * | 1996-02-09 | 2004-01-13 | Adeza Biomedical Corporation | Method for selecting medical and biochemical diagnostic tests using neural network-related applications |
US6581048B1 (en) * | 1996-06-04 | 2003-06-17 | Paul J. Werbos | 3-brain architecture for an intelligent decision and control system |
US20050131847A1 (en) * | 1998-05-01 | 2005-06-16 | Jason Weston | Pre-processed feature ranking for a support vector machine |
US6708160B1 (en) * | 1999-04-06 | 2004-03-16 | Paul J. Werbos | Object nets |
US6882992B1 (en) * | 1999-09-02 | 2005-04-19 | Paul J. Werbos | Neural networks for intelligent control |
US6915269B1 (en) * | 1999-12-23 | 2005-07-05 | Decisionsorter Llc | System and method for facilitating bilateral and multilateral decision-making |
US20020161731A1 (en) * | 2001-02-07 | 2002-10-31 | Tayebnejad Mohammad Reza | Artificial intelligence trending system |
US6732090B2 (en) * | 2001-08-13 | 2004-05-04 | Xerox Corporation | Meta-document management system with user definable personalities |
US20030233310A1 (en) * | 2002-06-17 | 2003-12-18 | Boris Stavrovski | Method and system for implementing a business transaction over the internet with use and consecutive transformation of information from publicly available databases, actual preferences of potential customers and statistical models of the market situation |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040243292A1 (en) * | 2003-06-02 | 2004-12-02 | Rini Roy | Vehicle control system having an adaptive controller |
US7177743B2 (en) * | 2003-06-02 | 2007-02-13 | Toyota Engineering & Manufacturing North America, Inc. | Vehicle control system having an adaptive controller |
US20070271269A1 (en) * | 2006-05-19 | 2007-11-22 | International Business Machines Corporation | Method and apparatus for ranking-based information processing |
US20080256031A1 (en) * | 2006-05-19 | 2008-10-16 | International Bussiness Machines Corporation | Method and Apparatus for Ranking-Based Information Processing |
US7516131B2 (en) | 2006-05-19 | 2009-04-07 | International Business Machines Corporation | Method and apparatus for ranking-based information processing |
US9501532B2 (en) * | 2006-05-19 | 2016-11-22 | International Business Machines Corporation | Method and apparatus for ranking-based information processing |
US8548937B2 (en) | 2010-08-17 | 2013-10-01 | Wisercare Llc | Medical care treatment decision support system |
Also Published As
Publication number | Publication date |
---|---|
US7392231B2 (en) | 2008-06-24 |
US20080104000A1 (en) | 2008-05-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20080104000A1 (en) | Determining Utility Functions from Ordinal Rankings | |
Lappas et al. | A machine learning approach combining expert knowledge with genetic algorithms in feature selection for credit risk assessment | |
Lintusaari et al. | Fundamentals and recent developments in approximate Bayesian computation | |
Shukla | Neuro-genetic prediction of software development effort | |
CN109087178B (en) | Commodity recommendation method and device | |
US7349878B1 (en) | Simulation method and system for the valuation of derivative financial instruments | |
Boussabaine | The use of artificial neural networks in construction management: a review | |
US7752064B2 (en) | System and method for infrastructure design | |
Chuu | Group decision-making model using fuzzy multiple attributes analysis for the evaluation of advanced manufacturing technology | |
US6873979B2 (en) | Method of building predictive models on transactional data | |
CN112184391B (en) | Training method of recommendation model, medium, electronic equipment and recommendation model | |
US20030177103A1 (en) | Calculating price elasticity | |
US7421380B2 (en) | Gradient learning for probabilistic ARMA time-series models | |
US20030014379A1 (en) | Adaptive and reliable system and method for operations management | |
Astudillo et al. | Multi-attribute Bayesian optimization with interactive preference learning | |
CN111881359B (en) | Ordering method, ordering system, ordering equipment and ordering storage medium in internet information retrieval | |
WO2009094672A2 (en) | Belief propagation for generalized matching | |
US8032473B2 (en) | Generalized reduced error logistic regression method | |
Yang et al. | Designing fuzzy supply chain network problem by mean-risk optimization method | |
US7225174B2 (en) | Investment analysis tool and service for making investment decisions | |
CN111695024A (en) | Object evaluation value prediction method and system, and recommendation method and system | |
Mahmoodi et al. | A developed stock price forecasting model using support vector machine combined with metaheuristic algorithms | |
Kastens et al. | Feedforward backpropagation neural networks in prediction of farmer risk preferences | |
Qu et al. | Learning demand curves in B2B pricing: A new framework and case study | |
CN115146455A (en) | Complex supply chain multi-target decision-making method supported by calculation experiment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BASAK, JAYANTA;GUPTA, MANISH;REEL/FRAME:013551/0683Effective date: 20021023 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |