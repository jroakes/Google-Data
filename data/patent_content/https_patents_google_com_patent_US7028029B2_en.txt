US7028029B2 - Adaptive computation of ranking - Google Patents
Adaptive computation of ranking Download PDFInfo
- Publication number
- US7028029B2 US7028029B2 US10/925,189 US92518904A US7028029B2 US 7028029 B2 US7028029 B2 US 7028029B2 US 92518904 A US92518904 A US 92518904A US 7028029 B2 US7028029 B2 US 7028029B2
- Authority
- US
- United States
- Prior art keywords
- ranking function
- document
- instructions
- converged
- matrix
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
- 230000003044 adaptive effect Effects 0.000 title 1
- 238000000034 method Methods 0.000 claims abstract description 29
- 230000006870 function Effects 0.000 claims description 78
- 239000011159 matrix material Substances 0.000 claims description 38
- 230000004048 modification Effects 0.000 claims description 9
- 238000012986 modification Methods 0.000 claims description 9
- 239000003607 modifier Substances 0.000 claims description 2
- 238000004590 computer program Methods 0.000 claims 12
- 230000008569 process Effects 0.000 abstract description 5
- JTJMJGYZQZDUJJ-UHFFFAOYSA-N phencyclidine Chemical compound C1CCCCN1C1(C=2C=CC=CC=2)CCCCC1 JTJMJGYZQZDUJJ-UHFFFAOYSA-N 0.000 description 15
- 238000005192 partition Methods 0.000 description 13
- 238000009826 distribution Methods 0.000 description 9
- 230000007704 transition Effects 0.000 description 8
- 238000013459 approach Methods 0.000 description 4
- 230000008901 benefit Effects 0.000 description 4
- 238000004891 communication Methods 0.000 description 4
- 241000239290 Araneae Species 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 238000010168 coupling process Methods 0.000 description 2
- 238000005859 coupling reaction Methods 0.000 description 2
- 230000001186 cumulative effect Effects 0.000 description 2
- 230000001419 dependent effect Effects 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 210000003484 anatomy Anatomy 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 238000012804 iterative process Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000012545 processing Methods 0.000 description 1
- 238000005295 random walk Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 238000009827 uniform distribution Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99935—Query augmenting and refining, e.g. inexact access
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99937—Sorting
Definitions
- the present invention relates generally to improved techniques for analyzing large directed graphs for use in computer systems, and in particular to reducing the computational complexity of assigning ranks to nodes.
- a search engine is a software program designed to help a user access files stored on a computer, for example on the World Wide Web (WWW), by allowing the user to ask for documents meeting certain criteria (e.g., those containing a given word, a set of words, or a phrase) and retrieving files that match those criteria.
- Web search engines work by storing information about a large number of web pages (hereinafter also referred to as “pages” or “documents”), which they retrieve from the WWW. These documents are retrieved by a web crawler or spider, which is an automated web browser which follows the links it encounters in a crawled document.
- each successfully crawled document is indexed, thereby adding data concerning the words or terms in the document to an index database for use in responding to queries.
- Some search engines also store all or part of the document itself, in addition to the index entries. When a user makes a search query having one or more terms, the search engine searches the index for documents that satisfy the query, and provides a listing of matching documents, typically including for each listed document the URL, the title of the document, and in some search engines a portion of document's text deemed relevant to the query.
- the relevance of database search results can be improved by sorting the retrieved nodes according to their ranks, and presenting the most important, highly ranked nodes first.
- the search results can be sorted based on a query score for each document in the search results, where the query score is a function of the document ranks as well as other factors.
- One approach to ranking documents involves examining the intrinsic content of each document or the back-link anchor text in parents of each document. This approach can be computationally intensive and often fails to assign highest ranks to the most important documents.
- Another approach to ranking involves examining the extrinsic relationships between documents, i.e., from the link structure of the directed graph. This type of approach is called a link-based ranking.
- U.S. Pat. No. 6,285,999 to Page discloses a technique used by the Google search engine for assigning a rank to each document in a hypertext database.
- the rank of a node is recursively defined as a function of the ranks of its parent nodes.
- the rank of a node is the steady-state probability that an arbitrarily long random walk through the network will end up at the given node.
- a node will tend to have a high rank if it has many parents, or if its parents have high rank.
- link-based ranking techniques are improvements over prior techniques, in the case of an extremely large database, such as the world wide web which contains billions of pages, the computation of the ranks for all the pages can take considerable time. Accordingly, it would be valuable to provide techniques for calculating page ranks with greater computational efficiency.
- the invention includes iteratively solving a ranking function for a set of document rank values with respect to a set of linked documents until a first stability condition is satisfied.
- the ranking function is modified so as to reduce the ranking function's computation cost and then the modified ranking function is solved until a second stability condition is satisfied.
- FIG. 1 illustrates a search engine environment in accordance with an embodiment of the present invention.
- FIG. 2 illustrates a graph of the cumulative proportion of converged pages versus convergence time in accordance with an embodiment of the invention.
- FIG. 3 illustrates solving the ranking function in accordance with an embodiment of the invention
- FIG. 4 illustrates a ranking function in accordance with an embodiment of the invention.
- FIG. 5 illustrates a ranking function in accordance with an embodiment of the invention.
- FIG. 6 illustrates a computer system in accordance with an embodiment of the invention.
- FIG. 1 is a block diagram of one such typical search engine environment.
- a search engine 100 has a back end system 102 and a front end system 104 .
- the layout of the search engine system 100 is merely exemplary and can take on any other suitable layout or configuration.
- the back end system 102 may include one or more crawlers 105 (also known as spiders), one or more document indexers 106 and a document index 108 .
- crawlers 105 also known as spiders
- document indexers 106 To index the large number of Web pages that exist on the worldwide web, the web crawler 104 locates and downloads web pages and other information (hereinafter also referred to as “documents”).
- a set of content filters 110 identify and filter out duplicate documents, and determine which documents should be sent to the document indexers 106 for indexing.
- the document indexers 106 process the downloaded documents, creating a document index 108 of terms found in those documents. If a document changes, then the document index 108 is updated with new information. Until a document is indexed, it is generally not available to users of the search engine 100 .
- the front end system 104 may include a web server 112 , one or more controllers 114 , a cache 118 , a second level controller 120 and one or more document index servers 122 a , . . . , 122 n .
- the document index 108 is created by the search engine 100 and is used to identify documents that contain one or more terms in a search query.
- a user enters or otherwise specifies a search query, which includes one or more terms and operators (e.g., Boolean operators, positional operators, parentheses, etc.), and submits the search query to the search engine 100 using the web server 112 .
- terms and operators e.g., Boolean operators, positional operators, parentheses, etc.
- the controller 114 is coupled to the web server 112 and the cache 118 .
- the cache 118 is used to speed up searches by temporarily storing previously located search results.
- the cache 118 is distributed over multiple cache servers.
- the data (search results) in the cache 118 is replicated in a parallel set of cache servers.
- the second level controller 120 communicates with one or more document index servers 122 a , . . . , 122 n .
- the document index servers 122 a , . . . , 122 n (or alternately, one of the controllers 114 , 120 ) encode the search query into an expression that is used to search the document index 108 to identify documents that contain the terms specified by the search query.
- the document index servers 122 search respective partitions of the document index 108 generated by the back end system 102 and return their results to the second level controller 120 .
- the second level controller 120 combines the search results received from the document index servers 122 a , . . . , 122 n , removes duplicate results (if any), and forwards those results to the controller 114 .
- the controller 114 distributes the search query to the multiple second level controllers 120 and combines search results received from the second level controllers 120 .
- the controller 114 also stores the search query and search results in the cache 118 , and passes the search results to the web server 112 .
- a list of documents that satisfy the search query is presented to the user via the web server 112 .
- the content filters 110 identify all the links in every web page produced by the crawlers 105 and store information about those links in a set of link records 124 .
- the link records 124 indicate both the source URL and the target URL of each link, and may optionally contain other information as well, such as the “anchor text” associated with the link.
- a URL Resolver 126 reads the link records 124 and generates a database 128 of links, also called link maps, which include pairs of URLs or other web page document identifiers.
- the links database 128 is used by a set of one or more Page Rankers 130 to compute Page Ranks 132 for all the documents downloaded by the crawlers.
- Page Ranks 132 are then used by the controller 114 to rank the documents returned in response to a query of the document index 108 by document index servers 122 .
- the document index servers 122 may utilize the Page Ranks 132 when computing query scores for documents listed in the search results.
- the back end system 102 further comprises quantizers 134 that are used to quantize data in Page Ranks 132 .
- Brin and Page “The Anatomy of a Large-Scale Hypertextual Search Engine,” 7th International World Wide Web Conference, Brisbane, Australia, provides more details on how one type of Page Rank metric can be computed. Other types of link-based on non-link based ranking techniques could also be utilized.
- a link-based ranking system such as PageRank, makes the assumption that a link from a page u to a page v can be viewed as evidence that page v is an “important” page.
- the amount of importance conferred on page v by page u is proportional to the importance of page u and inversely proportional to the number of pages to which page u points. Since the importance of page u is itself not known, determining the importance for every page i requires an iterative fixed-point computation.
- the importance of a page i is defined as the probability that at some particular time step, a random web surfer is at page i. Provided that the surfer chooses one of the links on page i, that link is chosen with a probability of 1 divided by the number of outlinks from page i, when the probability of choosing any of the outlinks is uniform across the outlinks.
- a transition probability matrix, P may be created where P(i,j) is provided as 1/deg(i), where deg(i) represents the number of outlinks from page i.
- P(i,j) could take into consideration certain personalization information for an individual or for a group, or could take into account other information derived from page i itself and/or elsewhere, and need not be uniform over each outlink from a given page.
- a matrix P can be converted into a more useful transition matrix by adding a complete set of outgoing transitions to pages with outdegree(0), i.e., no outlinks, to account for the probability that the surfer visiting that page randomly jumps to another page.
- outdegree(0) i.e., no outlinks
- the row for a page having no outlinks is modified to account for a probability that the surfer will jump to a different page uniformly across all pages, i.e., each element in the row becomes 1/n, where n is the number of nodes, or pages.
- the modification could be non-uniform across all nodes and take into account personalization information.
- This personalization information might cause certain pages to have a higher probability compared to others based on a surfer's preferences, surfing habits, or other information. For example, if a surfer frequently visits http://www.google.com, the transition probability from page i to the Google homepage would be higher than a page that the user infrequently visits.
- Another modification to P may take into account the probability that any random surfer will jump to a random Web page (rather than following an outlink). The destination of the random jump is chosen according to certain probability distributions. In some embodiments, this is uniform across all pages and in some embodiments this distribution is non-uniform and based on certain personalization information.
- the unique stationary distribution of the Markov chain is defined as lim k ⁇ x (k) , which is equivalent to lim k ⁇ A (k) x (0) , and is independent of the initial distribution x (0) . This is simply the principal eigenvector of the matrix A and the values can be used as ranking values.
- FIG. 2 illustrates an exemplary cumulate plot of convergence times using the above described iterative process.
- the x-axis represents convergence by iteration number and the y-axis represents the cumulative proportion of document rank values that have converged.
- the x-axis represents convergence by iteration number
- the y-axis represents the cumulative proportion of document rank values that have converged.
- Embodiments of the invention take advantage of this skewed distribution of convergence times to reduce the computational cost required for the determination of the full set of document rank values.
- Computational cost can be reduced by reducing the number of operations that must be performed and/or simplifying the types that must be preformed. Additionally, reducing the need to move items in and out of main memory can have an effect on computational cost. By not recalculating the ranks of those ranks which have converged during a particular cycle of iterations, embodiments of the invention reduce the computation cost of determining document rank values.
- a directed graph of linked documents is initially created ( 302 ) where each document is represented by a node in the graph, and all nodes are associated with the set of nodes whose document rank values have not converged ( 304 ). If the set of nodes which have not converged is empty ( 306 -yes), then all the nodes have converged and the process ends ( 308 ). If the set of nodes which have not converged is not empty ( 330 -no), then an iteration of the function is calculated for those nodes which have not converged ( 310 ). A predetermined number of iterations are completed per given cycle before examining which nodes' document rank values have converged.
- the number of iterations per cycle can be chosen in different ways and in some embodiments may depend on the balancing the computation cost of identifying the nodes which have converged and modifying the ranking function versus computing the iterations. For example, the number of iterations could be chosen from a number between 5 and 15.
- the number of iterations prior to identifying converged ranks could vary depending on a given cycle, with successive cycles having different number of iterations. For example, when the number of iterations for a cycle has been met ( 312 -yes), the number of iterations for the next loop could be modified, such that the next iterative cycle would end after a different set of iterations, and so on.
- the cycle is based on a proportion of nodes whose rank has converged. For example, the first cycle of iterations could complete after 25% of the nodes have converged. The proportion for the next cycle could be set to be an additional 25% or some other percentage.
- this concept can be expanded using various criteria to end the iterative cycle.
- those nodes whose document ranking value has converged to within a predefined iteration tolerance are identified ( 314 ).
- the same tolerance value is used for each cycle of iteration and in other embodiments, the tolerance value could vary depending on the iterative cycle.
- Tolerances values could be selected from 0.00001 to 0.01, or other values.
- Those nodes which have converged are disassociated with the set of non-converged nodes ( 316 ). The process continues until all document rank values have converged or some other type of ending mechanism is triggered. Other triggering mechanisms might include, for example, identifying convergence for a specific subset of nodes.
- a first phase of rank computation may be computed using an initial tolerance level for convergence as described above and using the phase tolerance level for each cycle of iteration in the phase.
- another phase of rank computation could follow using a second tolerance level for the cycles in the phase and using the ranks previously computed in the first phase as respective, initial document rank values in the next phase of rank computation.
- the second tolerance level is smaller by an order of magnitude than the previous phase.
- more than two phases are used with successively narrower tolerances for convergence.
- FIG. 4 illustrates a ranking function accordance with some embodiments where some of the rank values have converged.
- Column 402 of FIG. 4 illustrates the document rank value at the k+1 st iteration of the ranking function for node, or document, i, x i (k+1) .
- the document ranking values for the k+1 st iteration are given by the matrix multiplication of A (shown at 404 ) by the k th iteration of the document rank values x i (k) (shown at 406 ).
- the ranks which have converged by iteration k can be represented by x n ⁇ m+1 (k) to x n (k) (shown at 408 ), where n represents the total number of nodes, or documents, and m represents the number of document rank values which have converged.
- the values for x n ⁇ m+1 (k+1) to x n (k+1) (shown at 410 ) at the k+1 st iteration will be the same as x n ⁇ m+1 (k) to x n (k) (shown at 408 ) and those document rank values need not be calculated again.
- only the calculations for those nodes which have not converged (shown at 412 ) are calculated.
- the ranking function is modified to remove those rows from the calculation.
- the rows of column 402 and matrix 404 corresponding to the converged nodes 410 are not read into memory.
- the matrix multiplication needed for rows corresponding to the converged ranks are simply ignored and not calculated.
- the rows of 402 and 404 corresponding to the converged ranks are replaced by all zeros (which significantly reduces computation time).
- the column 406 is not affected since the converged values therein are used in the ranking function iteration.
- the rows are initially ordered by decreasing order of convergence based on a previous solving of the ranking function. This has the effect of keeping longer converging nodes in main memory and reducing the amount of memory accesses to read portions of the modified ranking function into memory during the course of the computation. As mentioned earlier, reducing the amount of memory accesses can significantly reduce computation cost.
- the contributions to the rank of a non-converged node from the converged nodes is a constant. Accordingly, in some embodiments these contributions are only calculated once per cycle of iteration. These embodiments can be understood with reference to FIG. 5 .
- the nodes 502 After a period of iterations, the nodes 502 have converged as described above. Accordingly, the values at 504 will remain constant throughout each iteration cycle until another examination of convergence is made ( 314 and 316 of FIG. 3 ).
- the matrix 506 now may be thought of as consisting of 4 partitions 508 , 510 , 512 , 514 .
- the partition 508 illustrates the contributions that the non-converged nodes make to other non-converged nodes 516 (also called sub-matrix 516 ).
- the partition 510 illustrates the contributions that converged nodes make to converged nodes.
- the partition 512 illustrates the contributions that the non-converged nodes make to the converged nodes.
- the partition 514 illustrates the contributions that the converged nodes make to the non-converged nodes 516 .
- some embodiments only calculate the products produced by multiplying partition 514 (representing contributions of the converged nodes to the non-converged nodes) once per iteration cycle.
- the sum of those products is a constant for each row of partitions 508 and 514 . This constant for each row is used each time a new iteration is computed.
- the last term in the modified ranking function, A CN x C (k) produces a matrix of constants that may be computed once and then reused during subsequent computational iterations.
- stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.
- an embodiment of a computer 600 that implements the methods described above includes one or more processing units (CPU's) 602 , one or more network or other communications interfaces 604 , memory 606 , and one or more communication buses 608 for interconnecting these components.
- the computer 600 may optionally include a user interface 610 comprising a display device 612 (e.g., for displaying system status information) and/or a keyboard 614 (e.g., for entering commands).
- Memory 606 may include high speed random access memory and may also include non-volatile memory, such as one or more magnetic or optical storage disks.
- Memory 606 may include mass storage that is remotely located from CPU's 602 .
- the memory 606 may store:
- modules corresponds to a set of instructions for performing a function described above.
- modules i.e., sets of instructions
- modules need not be implemented as separate software programs, procedures or modules, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments.
Abstract
A system and method is disclosed in which a ranking function for a set of document rank values is iteratively solved with respect to a set of linked documents until a first stability condition is satisfied. After such condition is satisfied, some of the ranks will have converged. The ranking function is modified to take into account these converged ranks so as to reduce the ranking function's computation cost. The modified ranking function is then solved until a second stability condition is satisfied. After such condition is satisfied more of the ranks will have converged. The ranking function is again modified and process continues until complete.
Description
This application is a continuation-in-part of U.S. Utility patent application Ser. No. 10/646,331, filed Aug. 22, 2003, which claimed priority on U.S. Provisional Patent Application No. 60/458,921 filed Mar. 28, 2003, both of which are incorporated by reference herein in their entirety.
This invention was supported in part by the National Science Foundation under Grant No. IIS-0085896 and Grant No. CCR-9971010. The US Government has certain rights in this invention.
The present invention relates generally to improved techniques for analyzing large directed graphs for use in computer systems, and in particular to reducing the computational complexity of assigning ranks to nodes.
A search engine is a software program designed to help a user access files stored on a computer, for example on the World Wide Web (WWW), by allowing the user to ask for documents meeting certain criteria (e.g., those containing a given word, a set of words, or a phrase) and retrieving files that match those criteria. Web search engines work by storing information about a large number of web pages (hereinafter also referred to as “pages” or “documents”), which they retrieve from the WWW. These documents are retrieved by a web crawler or spider, which is an automated web browser which follows the links it encounters in a crawled document. The contents of each successfully crawled document are indexed, thereby adding data concerning the words or terms in the document to an index database for use in responding to queries. Some search engines, also store all or part of the document itself, in addition to the index entries. When a user makes a search query having one or more terms, the search engine searches the index for documents that satisfy the query, and provides a listing of matching documents, typically including for each listed document the URL, the title of the document, and in some search engines a portion of document's text deemed relevant to the query.
It can be useful for various purposes to rank or assign importance values to nodes in a large linked database. For example, the relevance of database search results can be improved by sorting the retrieved nodes according to their ranks, and presenting the most important, highly ranked nodes first. Alternately, the search results can be sorted based on a query score for each document in the search results, where the query score is a function of the document ranks as well as other factors.
One approach to ranking documents involves examining the intrinsic content of each document or the back-link anchor text in parents of each document. This approach can be computationally intensive and often fails to assign highest ranks to the most important documents. Another approach to ranking involves examining the extrinsic relationships between documents, i.e., from the link structure of the directed graph. This type of approach is called a link-based ranking. For example, U.S. Pat. No. 6,285,999 to Page discloses a technique used by the Google search engine for assigning a rank to each document in a hypertext database. According to the link-based ranking method of Page, the rank of a node is recursively defined as a function of the ranks of its parent nodes. Looked at another way, the rank of a node is the steady-state probability that an arbitrarily long random walk through the network will end up at the given node. Thus, a node will tend to have a high rank if it has many parents, or if its parents have high rank.
Although link-based ranking techniques are improvements over prior techniques, in the case of an extremely large database, such as the world wide web which contains billions of pages, the computation of the ranks for all the pages can take considerable time. Accordingly, it would be valuable to provide techniques for calculating page ranks with greater computational efficiency.
In one embodiment, the invention includes iteratively solving a ranking function for a set of document rank values with respect to a set of linked documents until a first stability condition is satisfied. The ranking function is modified so as to reduce the ranking function's computation cost and then the modified ranking function is solved until a second stability condition is satisfied.
The aforementioned features and advantages of the invention as well as additional features and advantages thereof will be more clearly understood hereinafter as a result of a detailed description of embodiments of the invention when taken in conjunction with the drawings. Like reference numerals refer to corresponding parts throughout the several views of the drawings.
The techniques of the present invention may used in a search engine environment where the linked database is generated from crawling a number of documents, such as the Internet. FIG. 1 is a block diagram of one such typical search engine environment. As illustrated in FIG. 1 , a search engine 100 has a back end system 102 and a front end system 104. The layout of the search engine system 100 is merely exemplary and can take on any other suitable layout or configuration.
The back end system 102 may include one or more crawlers 105 (also known as spiders), one or more document indexers 106 and a document index 108. To index the large number of Web pages that exist on the worldwide web, the web crawler 104 locates and downloads web pages and other information (hereinafter also referred to as “documents”). In some embodiments, a set of content filters 110 identify and filter out duplicate documents, and determine which documents should be sent to the document indexers 106 for indexing. The document indexers 106 process the downloaded documents, creating a document index 108 of terms found in those documents. If a document changes, then the document index 108 is updated with new information. Until a document is indexed, it is generally not available to users of the search engine 100.
The front end system 104 may include a web server 112, one or more controllers 114, a cache 118, a second level controller 120 and one or more document index servers 122 a, . . . , 122 n. The document index 108 is created by the search engine 100 and is used to identify documents that contain one or more terms in a search query. To search for documents on a particular subject, a user enters or otherwise specifies a search query, which includes one or more terms and operators (e.g., Boolean operators, positional operators, parentheses, etc.), and submits the search query to the search engine 100 using the web server 112.
The controller 114 is coupled to the web server 112 and the cache 118. The cache 118 is used to speed up searches by temporarily storing previously located search results. In some embodiments, the cache 118 is distributed over multiple cache servers. Furthermore, in some embodiments, the data (search results) in the cache 118 is replicated in a parallel set of cache servers.
While the following discussion describes certain functions as being performed by one or more second level controllers 120, it should be understood that the number of controllers (114, 120) and the distribution of functions among those controllers may vary from one implementation to another. The second level controller 120 communicates with one or more document index servers 122 a, . . . , 122 n. The document index servers 122 a, . . . , 122 n (or alternately, one of the controllers 114, 120) encode the search query into an expression that is used to search the document index 108 to identify documents that contain the terms specified by the search query. In some embodiments, the document index servers 122 search respective partitions of the document index 108 generated by the back end system 102 and return their results to the second level controller 120. The second level controller 120 combines the search results received from the document index servers 122 a, . . . , 122 n, removes duplicate results (if any), and forwards those results to the controller 114. In some embodiments, there are multiple second level controllers 120 that operate in parallel to search different partitions of the document index 108, each second level controller 120 having a respective set of document index servers 122 to search respective sub-partitions of document index 108. In such embodiments, the controller 114 distributes the search query to the multiple second level controllers 120 and combines search results received from the second level controllers 120. The controller 114 also stores the search query and search results in the cache 118, and passes the search results to the web server 112. A list of documents that satisfy the search query is presented to the user via the web server 112.
In some embodiments, the content filters 110, or an associated set of servers or processes, identify all the links in every web page produced by the crawlers 105 and store information about those links in a set of link records 124. The link records 124 indicate both the source URL and the target URL of each link, and may optionally contain other information as well, such as the “anchor text” associated with the link. A URL Resolver 126 reads the link records 124 and generates a database 128 of links, also called link maps, which include pairs of URLs or other web page document identifiers. In some embodiments, the links database 128 is used by a set of one or more Page Rankers 130 to compute Page Ranks 132 for all the documents downloaded by the crawlers. These Page Ranks 132 are then used by the controller 114 to rank the documents returned in response to a query of the document index 108 by document index servers 122. Alternately, the document index servers 122 may utilize the Page Ranks 132 when computing query scores for documents listed in the search results. In certain embodiments of the present invention, the back end system 102 further comprises quantizers 134 that are used to quantize data in Page Ranks 132. Brin and Page, “The Anatomy of a Large-Scale Hypertextual Search Engine,” 7th International World Wide Web Conference, Brisbane, Australia, provides more details on how one type of Page Rank metric can be computed. Other types of link-based on non-link based ranking techniques could also be utilized.
A link-based ranking system, such as PageRank, makes the assumption that a link from a page u to a page v can be viewed as evidence that page v is an “important” page. In particular, the amount of importance conferred on page v by page u is proportional to the importance of page u and inversely proportional to the number of pages to which page u points. Since the importance of page u is itself not known, determining the importance for every page i requires an iterative fixed-point computation.
In one embodiment, the importance of a page i is defined as the probability that at some particular time step, a random web surfer is at page i. Provided that the surfer chooses one of the links on page i, that link is chosen with a probability of 1 divided by the number of outlinks from page i, when the probability of choosing any of the outlinks is uniform across the outlinks. A transition probability matrix, P, may be created where P(i,j) is provided as 1/deg(i), where deg(i) represents the number of outlinks from page i. In other embodiments, P(i,j) could take into consideration certain personalization information for an individual or for a group, or could take into account other information derived from page i itself and/or elsewhere, and need not be uniform over each outlink from a given page.
Some web pages have no outlinks, but for P to be a more useful transition probability matrix, every node must have at least 1 outgoing transition, i.e., P should have no rows consisting of all zeros. A matrix P can be converted into a more useful transition matrix by adding a complete set of outgoing transitions to pages with outdegree(0), i.e., no outlinks, to account for the probability that the surfer visiting that page randomly jumps to another page. In one embodiment, the row for a page having no outlinks is modified to account for a probability that the surfer will jump to a different page uniformly across all pages, i.e., each element in the row becomes 1/n, where n is the number of nodes, or pages. In another embodiment, the modification could be non-uniform across all nodes and take into account personalization information. This personalization information might cause certain pages to have a higher probability compared to others based on a surfer's preferences, surfing habits, or other information. For example, if a surfer frequently visits http://www.google.com, the transition probability from page i to the Google homepage would be higher than a page that the user infrequently visits. Another modification to P may take into account the probability that any random surfer will jump to a random Web page (rather than following an outlink). The destination of the random jump is chosen according to certain probability distributions. In some embodiments, this is uniform across all pages and in some embodiments this distribution is non-uniform and based on certain personalization information. Taking the transpose of the twice modified matrix P provides a matrix A. In the matrix P, a row i provided the transition probability distribution for a surfer at node i, whereas in the matrix A this is provided by column i. Mathematically this can be represented as:
A=(c(P+D)+(1−c)E)T,
where P is a probability transition where P(i,j) represents the probability that the surfer will choose one of the links on i to page j; D represents the probability that a surfer visiting a page with no outlinks will jump to any other page; E represents the probability that a surfer will not choose any of the links and will jump to another page; and (1−c) represents a de-coupling factor indicating how likely it is that a surfer will jump to a random Web page, while c represents a coupling factor indicating how likely it is that a surfer will select one of the links in a currently selected or viewed page.
A=(c(P+D)+(1−c)E)T,
where P is a probability transition where P(i,j) represents the probability that the surfer will choose one of the links on i to page j; D represents the probability that a surfer visiting a page with no outlinks will jump to any other page; E represents the probability that a surfer will not choose any of the links and will jump to another page; and (1−c) represents a de-coupling factor indicating how likely it is that a surfer will jump to a random Web page, while c represents a coupling factor indicating how likely it is that a surfer will select one of the links in a currently selected or viewed page.
Assuming that the probability distribution over all the nodes of the surfer's location at time 0 is given by x(0), then the probability distribution for the surfer's location at time k is given by x(k)=A(k)x(0). The unique stationary distribution of the Markov chain is defined as limk→∞x(k), which is equivalent to limk→∞A(k)x(0), and is independent of the initial distribution x(0). This is simply the principal eigenvector of the matrix A and the values can be used as ranking values. One way to calculate the principal eigenvector begins with a uniform distribution x(0)=v and computes successive iterations of the ranking function, x(k)=A x(k−1), until convergence. Convergence can be defined when two successive iterations of the ranking function produce a difference within a tolerance value. Various method can be used to determine tolerance values based on desired convergence characteristics or how much variation exists as the tolerance decreases.
Embodiments of the invention take advantage of this skewed distribution of convergence times to reduce the computational cost required for the determination of the full set of document rank values. Computational cost can be reduced by reducing the number of operations that must be performed and/or simplifying the types that must be preformed. Additionally, reducing the need to move items in and out of main memory can have an effect on computational cost. By not recalculating the ranks of those ranks which have converged during a particular cycle of iterations, embodiments of the invention reduce the computation cost of determining document rank values.
Referring to FIG. 3 , a directed graph of linked documents is initially created (302) where each document is represented by a node in the graph, and all nodes are associated with the set of nodes whose document rank values have not converged (304). If the set of nodes which have not converged is empty (306-yes), then all the nodes have converged and the process ends (308). If the set of nodes which have not converged is not empty (330-no), then an iteration of the function is calculated for those nodes which have not converged (310). A predetermined number of iterations are completed per given cycle before examining which nodes' document rank values have converged. Accordingly, if a predetermined number of iterations for the current cycle has not been completed (312-no), then an additional iteration is calculated (310). On the other hand, if the predetermined number of iterations for the cycle been completed (312-yes), then those nodes whose ranks have converged are identified (314). The number of iterations per cycle can be chosen in different ways and in some embodiments may depend on the balancing the computation cost of identifying the nodes which have converged and modifying the ranking function versus computing the iterations. For example, the number of iterations could be chosen from a number between 5 and 15. In other embodiments, the number of iterations prior to identifying converged ranks could vary depending on a given cycle, with successive cycles having different number of iterations. For example, when the number of iterations for a cycle has been met (312-yes), the number of iterations for the next loop could be modified, such that the next iterative cycle would end after a different set of iterations, and so on. In other embodiments, instead of basing the end of a cycle on whether a number of iterations have been completed, the cycle is based on a proportion of nodes whose rank has converged. For example, the first cycle of iterations could complete after 25% of the nodes have converged. The proportion for the next cycle could be set to be an additional 25% or some other percentage. One of ordinary skill in the art will readily recognize other ways this concept can be expanded using various criteria to end the iterative cycle.
After the iteration cycle is complete (312-yes), those nodes whose document ranking value has converged to within a predefined iteration tolerance are identified (314). In some embodiments, the same tolerance value is used for each cycle of iteration and in other embodiments, the tolerance value could vary depending on the iterative cycle. Tolerances values could be selected from 0.00001 to 0.01, or other values. Those nodes which have converged are disassociated with the set of non-converged nodes (316). The process continues until all document rank values have converged or some other type of ending mechanism is triggered. Other triggering mechanisms might include, for example, identifying convergence for a specific subset of nodes.
In other embodiments, a first phase of rank computation may be computed using an initial tolerance level for convergence as described above and using the phase tolerance level for each cycle of iteration in the phase. However, another phase of rank computation could follow using a second tolerance level for the cycles in the phase and using the ranks previously computed in the first phase as respective, initial document rank values in the next phase of rank computation. In some embodiments, the second tolerance level is smaller by an order of magnitude than the previous phase. In some embodiments, more than two phases are used with successively narrower tolerances for convergence.
When the nodes whose document rank values are associated with the converged set, their document rank values are no longer calculated. In some embodiments, computing only document rank values which have not converged takes advantage of the matrix structure of the ranking function. As mentioned above, in some embodiments, the ranking function can be described as x(k)=A x(k−1). At some time k, some of the document rank values will have converged. FIG. 4 illustrates a ranking function accordance with some embodiments where some of the rank values have converged. Column 402 of FIG. 4 illustrates the document rank value at the k+1st iteration of the ranking function for node, or document, i, xi (k+1). The document ranking values for the k+1st iteration are given by the matrix multiplication of A (shown at 404) by the kth iteration of the document rank values xi (k) (shown at 406). The ranks which have converged by iteration k can be represented by xn−m+1 (k) to xn (k) (shown at 408), where n represents the total number of nodes, or documents, and m represents the number of document rank values which have converged. Accordingly, the values for xn−m+1 (k+1) to xn (k+1) (shown at 410) at the k+1st iteration will be the same as xn−m+1 (k) to xn (k) (shown at 408) and those document rank values need not be calculated again. In some embodiments, only the calculations for those nodes which have not converged (shown at 412) are calculated. The ranking function is modified to remove those rows from the calculation. In some embodiments, the rows of column 402 and matrix 404 corresponding to the converged nodes 410 are not read into memory. In some embodiments, the matrix multiplication needed for rows corresponding to the converged ranks are simply ignored and not calculated. In other embodiments the rows of 402 and 404 corresponding to the converged ranks are replaced by all zeros (which significantly reduces computation time). In these embodiments, the column 406 is not affected since the converged values therein are used in the ranking function iteration. In some embodiments, the rows are initially ordered by decreasing order of convergence based on a previous solving of the ranking function. This has the effect of keeping longer converging nodes in main memory and reducing the amount of memory accesses to read portions of the modified ranking function into memory during the course of the computation. As mentioned earlier, reducing the amount of memory accesses can significantly reduce computation cost.
During each cycle of iteration, the contributions to the rank of a non-converged node from the converged nodes is a constant. Accordingly, in some embodiments these contributions are only calculated once per cycle of iteration. These embodiments can be understood with reference to FIG. 5 . After a period of iterations, the nodes 502 have converged as described above. Accordingly, the values at 504 will remain constant throughout each iteration cycle until another examination of convergence is made (314 and 316 of FIG. 3 ). The matrix 506 now may be thought of as consisting of 4 partitions 508, 510, 512, 514. The partition 508 illustrates the contributions that the non-converged nodes make to other non-converged nodes 516 (also called sub-matrix 516). The partition 510 illustrates the contributions that converged nodes make to converged nodes. The partition 512 illustrates the contributions that the non-converged nodes make to the converged nodes. Finally, the partition 514 illustrates the contributions that the converged nodes make to the non-converged nodes 516. When matrix 518 (the previous document ranks values) is multiplied against a row i in matrix 506, the multiplication products corresponding to values in partition 514 are constants. Therefore, to modify the ranking function even further, some embodiments only calculate the products produced by multiplying partition 514 (representing contributions of the converged nodes to the non-converged nodes) once per iteration cycle. The sum of those products is a constant for each row of partitions 508 and 514. This constant for each row is used each time a new iteration is computed. If partition 508 is represented as ANN; partition 514 is represented as ACN; the non-converged nodes sub-matrix 516 is represented by xN (k+1) and the converged nodes sub-matrix 504 is represented by xC (k), then the modified ranking function is represented as xN (k+1)=ANN xN (k)+ACN xC (k). The last term in the modified ranking function, ACN xC (k), produces a matrix of constants that may be computed once and then reused during subsequent computational iterations.
Although some of the drawings illustrate a number of logical stages in a particular order, stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be obvious to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.
Referring to FIG. 6 , an embodiment of a computer 600 that implements the methods described above includes one or more processing units (CPU's) 602, one or more network or other communications interfaces 604, memory 606, and one or more communication buses 608 for interconnecting these components. The computer 600 may optionally include a user interface 610 comprising a display device 612 (e.g., for displaying system status information) and/or a keyboard 614 (e.g., for entering commands). Memory 606 may include high speed random access memory and may also include non-volatile memory, such as one or more magnetic or optical storage disks. Memory 606 may include mass storage that is remotely located from CPU's 602. The memory 606 may store:
- an
operating system 616 that include procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 618 that is used for connecting the
computer 600 to other computers via the one or more communications network interfaces 604 (wired or wireless), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; - a
page ranker 130 for computing page ranks as described above and includes:- a
computation module 620 for computing iterations of a ranking function as described above; - a
modification module 622 that modifies the ranking function to reduce the ranking function's computation cost as described above including aremoval module 624 for removing rows from the ranking functions as described above and/or amodifier module 626 for modifying the ranking function based on the identified converged nodes as described above;- an
identification module 628 for identifying those nodes that have converged; and - a
convergence module 630 for determining when a nodes has converged.
- an
- a
Each of the above identified modules corresponds to a set of instructions for performing a function described above. These modules (i.e., sets of instructions) need not be implemented as separate software programs, procedures or modules, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments.
The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.
Claims (31)
1. A method for determining document rank values, comprising:
iteratively solving a ranking function for a set of document rank values with respect to a set of linked documents until a first stability condition is satisfied;
modifying the ranking function so as to reduce the ranking function's computation cost;
solving the modified ranking function until a second stability condition is satisfied so as to produce a solution of the modified ranking function; and
assigning respective ranks to at least a subset of the documents in the set of linked documents in accordance with the solution of the modified ranking function.
2. The method of claim 1 , wherein the modifying includes identifying a subset of the document rank values that have converged to within a tolerance.
3. The method of claim 2 , wherein the modifying includes removing a portion of the ranking function corresponding to the identified subset of the document rank values.
4. The method of claim 3 , wherein the modifying includes modifying a portion of the ranking function corresponding to the identified subset of the document rank values.
5. The method of claim 1 , wherein the first stability condition is satisfied after completing a first number of iterations of the ranking function.
6. The method of claim 1 , wherein the second stability condition is satisfied after completing a second number of iterations of solving the modified ranking function.
7. The method of claim 1 , wherein the first stability condition is satisfied after completing a first number of iterations of solving the ranking function, and wherein the first and second numbers of iterations are different.
8. The method of claim 1 , wherein the first stability condition is satisfied when a percentage of the linked documents have a current rank which has converged to within a tolerance.
9. The method of claim 1 , further including:
providing a matrix A where A(j,i) represents a directed link value from a document to a document j; and
wherein the ranking function includes the matrix and the modifying includes removing from the matrix those rows corresponding to documents whose respective current document rank value has converged to within a tolerance.
10. The method of claim 1 , further including:
providing a matrix A where A(j,i) represents a directed link value from a document i to a document j; and
wherein the ranking function includes the matrix and the modifying includes removing from the matrix those columns corresponding to documents whose current document rank value has converged to within a tolerance.
11. The method of claim 1 , further including:
providing a matrix A where A(j,i) represents a directed link value from a document i to a document j; and
wherein the ranking function includes the matrix and the modifying includes removing from the matrix those columns and rows corresponding to documents whose respective current document rank value has converged to within a tolerance.
12. A computer program product, for use with a computer system, the computer program product comprising:
instructions for iteratively solving a ranking function for a set of document rank values with respect to a set of linked documents until a first stability condition is satisfied;
instructions for modifying the ranking function so as to reduce the ranking functions computation cost;
instructions for solving the modified ranking function until a second stability condition is satisfied so as to produce a solution of the modified ranking function; and
instructions for assigning respective ranks to at least a subset of the documents in the set of linked documents in accordance with the solution of the modified ranking function.
13. The computer program product of claim 12 , wherein the instructions for modifying include identifying a subset of the document rank values that have converged to within a tolerance.
14. The computer program product of claim 13 , wherein the instructions for modifying include instructions for removing a portion of the ranking function corresponding to the identified subset of the document rank values.
15. The computer program product of claim 13 , wherein the instructions for modifying include instructions for modifying a portion of the ranking function corresponding to the identified subset of the document rank values.
16. The computer program product of claim 12 , further including instructions for satisfying the first stability condition after completion of a first number of iterations of the ranking function.
17. The computer program product of claim 12 , further including instructions for satisfying the second stability condition after completion of a second number of iterations of solving the modified ranking function.
18. The computer program product of claim 17 , further including instructions for satisfying the first stability condition after completion of a first number of iterations of solving the ranking function, and wherein the first and second numbers of iterations are different.
19. The computer program product of claim 12 , further including instructions for satisfying the first stability condition when a percentage of the linked documents have a current rank which has converged to within a tolerance.
20. The computer program product of claim 12 , further including:
instructions for providing a matrix A where A(j,i) represents a directed link value from a document i to a document j; and
wherein the ranking function includes the matrix and the instructions for modifying includes instructions for removing from the matrix those rows corresponding to documents whose respective current document rank value has converged to within a tolerance.
21. The computer program product of claim 12 , further including:
instructions for providing a matrix A where A(j,i) represents a directed link value from a document i to a document j; and
wherein the ranking function includes the matrix and the instructions for modifying includes instructions for removing from the matrix those columns corresponding to documents whose current document rank value has converged to within a tolerance.
22. The computer program product of claim 12 , further including:
instructions for providing a matrix A where A(j,i) represents a directed link value from a document i to a document j; and
wherein the ranking function includes the matrix and the instructions for modifying includes instructions for removing from the matrix those columns and rows corresponding to documents whose respective current document rank value has converged to within a tolerance.
23. A system for determining document rank values, comprising:
a computation module that iteratively solves a ranking function for a set of document rank values with respect to a set of linked documents;
a modification module that modifies the ranking function so as to reduce the ranking function's computation cost; and
a control module that is configured to use the computation module to solve the ranking function until a first stability condition is satisfied, use the modification module to modify the ranking function, and use the computation module to solve the modified ranking function until a second stability condition is satisfied so as to produce a solution of the modified ranking function and assign respective ranks to at least a subset of the documents in the set of linked documents in accordance with the solution of the modified ranking function.
24. The system of claim 23 , further including an identification module that identifies a subset of the document rank values that have converged to within a tolerance.
25. The system of claim 24 , wherein the modification module includes removal instructions that remove a portion of the ranking function corresponding to the identified subset of the document rank values generated from the identification module.
26. The system of claim 24 , wherein the modification module includes a modifier instructions that modify a portion of the ranking function corresponding to the identified subset of the document rank values generated from the identification module.
27. The system of claim 23 , further including first convergence instructions corresponding to the first stability condition, the first convergence instructions identifying when a first number of iterations of solving the ranking function are completed.
28. The system of claim 27 , further including second convergence instructions corresponding to the second stability condition, the second convergence identifying when the second stability condition is satisfied.
29. The system of claim 28 , wherein the second stability condition corresponds to a second number of iterations of solving the ranking function, and wherein the first and second numbers of iterations are different.
30. The system of claim 23 , further including a convergence percentage and a convergence module that identifies the first stability condition when a percentage of the linked documents equal to the convergence percentage have a current rank which has converged to within a tolerance.
31. A system for determining document rank values, comprising:
means for iteratively solving a ranking function for a set of document rank values with respect to a set of linked documents until a first stability condition is satisfied;
means for modifying the ranking function so as to reduce the ranking function's computation cost; and
means for solving the modified ranking function until a second stability condition is satisfied;
wherein operation of the system produces a solution of the modified ranking function and assigns respective ranks to at least a subset of the documents in the set of linked documents in accordance with the solution of the modified ranking function.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/925,189 US7028029B2 (en) | 2003-03-28 | 2004-08-23 | Adaptive computation of ranking |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US45892103P | 2003-03-28 | 2003-03-28 | |
US10/646,331 US7216123B2 (en) | 2003-03-28 | 2003-08-22 | Methods for ranking nodes in large directed graphs |
US10/925,189 US7028029B2 (en) | 2003-03-28 | 2004-08-23 | Adaptive computation of ranking |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/646,331 Continuation-In-Part US7216123B2 (en) | 2003-03-28 | 2003-08-22 | Methods for ranking nodes in large directed graphs |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050027685A1 US20050027685A1 (en) | 2005-02-03 |
US7028029B2 true US7028029B2 (en) | 2006-04-11 |
Family
ID=46123808
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/925,189 Expired - Lifetime US7028029B2 (en) | 2003-03-28 | 2004-08-23 | Adaptive computation of ranking |
Country Status (1)
Country | Link |
---|---|
US (1) | US7028029B2 (en) |
Cited By (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040181543A1 (en) * | 2002-12-23 | 2004-09-16 | Canon Kabushiki Kaisha | Method of using recommendations to visually create new views of data across heterogeneous sources |
US20040193698A1 (en) * | 2003-03-24 | 2004-09-30 | Sadasivuni Lakshminarayana | Method for finding convergence of ranking of web page |
WO2004111759A2 (en) * | 2003-05-27 | 2004-12-23 | Purdue Research Foundation | Applied estimation of eigenvectors and eigenvalues |
US20050210006A1 (en) * | 2004-03-18 | 2005-09-22 | Microsoft Corporation | Field weighting in text searching |
US20050216533A1 (en) * | 2004-03-29 | 2005-09-29 | Yahoo! Inc. | Search using graph colorization and personalized bookmark processing |
US20060039286A1 (en) * | 2004-08-18 | 2006-02-23 | Anindya Basu | Method and apparatus for dynamically reducing end-to-end delay in multi-hop wireless networks in response to changing traffic conditions |
US20060069982A1 (en) * | 2004-09-30 | 2006-03-30 | Microsoft Corporation | Click distance determination |
US20060074871A1 (en) * | 2004-09-30 | 2006-04-06 | Microsoft Corporation | System and method for incorporating anchor text into ranking search results |
US20060074903A1 (en) * | 2004-09-30 | 2006-04-06 | Microsoft Corporation | System and method for ranking search results using click distance |
US20060136411A1 (en) * | 2004-12-21 | 2006-06-22 | Microsoft Corporation | Ranking search results using feature extraction |
US20060200460A1 (en) * | 2005-03-03 | 2006-09-07 | Microsoft Corporation | System and method for ranking search results using file types |
US20060294100A1 (en) * | 2005-03-03 | 2006-12-28 | Microsoft Corporation | Ranking search results using language types |
US20070038622A1 (en) * | 2005-08-15 | 2007-02-15 | Microsoft Corporation | Method ranking search results using biased click distance |
US20070130205A1 (en) * | 2005-12-05 | 2007-06-07 | Microsoft Corporation | Metadata driven user interface |
US20070214116A1 (en) * | 2006-03-13 | 2007-09-13 | Microsoft Corporation | Topic distillation via subsite retrieval |
US20070233679A1 (en) * | 2006-04-03 | 2007-10-04 | Microsoft Corporation | Learning a document ranking function using query-level error measurements |
US20080005226A1 (en) * | 2006-07-03 | 2008-01-03 | Srinivasan Subbian | A method and system for one-to-one communication through proxy |
US20080005227A1 (en) * | 2006-07-03 | 2008-01-03 | Srinivasan Subbian | Method and system for content processing |
US20080027925A1 (en) * | 2006-07-28 | 2008-01-31 | Microsoft Corporation | Learning a document ranking using a loss function with a rank pair or a query parameter |
US20080027936A1 (en) * | 2006-07-25 | 2008-01-31 | Microsoft Corporation | Ranking of web sites by aggregating web page ranks |
US20080082481A1 (en) * | 2006-10-03 | 2008-04-03 | Yahoo! Inc. | System and method for characterizing a web page using multiple anchor sets of web pages |
US20080162453A1 (en) * | 2006-12-29 | 2008-07-03 | Microsoft Corporation | Supervised ranking of vertices of a directed graph |
US20080195631A1 (en) * | 2007-02-13 | 2008-08-14 | Yahoo! Inc. | System and method for determining web page quality using collective inference based on local and global information |
US20080222138A1 (en) * | 2005-07-29 | 2008-09-11 | Shixia Liu | Method and Apparatus for Constructing a Link Structure Between Documents |
US7509344B1 (en) * | 2003-08-18 | 2009-03-24 | Google Inc. | Method for detecting link spam in hyperlinked databases |
US20090106223A1 (en) * | 2007-10-18 | 2009-04-23 | Microsoft Corporation | Enterprise relevancy ranking using a neural network |
US7603616B2 (en) | 2000-01-28 | 2009-10-13 | Microsoft Corporation | Proxy server using a statistical model |
US7698442B1 (en) * | 2005-03-03 | 2010-04-13 | Voltage Security, Inc. | Server-based universal resource locator verification service |
US20110125760A1 (en) * | 2006-07-14 | 2011-05-26 | Bea Systems, Inc. | Using tags in an enterprise search system |
US20110295832A1 (en) * | 2010-05-28 | 2011-12-01 | International Business Machines Corporation | Identifying Communities in an Information Network |
US8285737B1 (en) | 2008-04-10 | 2012-10-09 | Google Inc. | Selecting content for publication |
US8306964B2 (en) | 2010-07-20 | 2012-11-06 | Microsoft Corporation | Extraction of rich search information from index servers via an alternative asynchronous data path |
US8386495B1 (en) * | 2010-04-23 | 2013-02-26 | Google Inc. | Augmented resource graph for scoring resources |
US8738635B2 (en) | 2010-06-01 | 2014-05-27 | Microsoft Corporation | Detection of junk in search result ranking |
US8793706B2 (en) | 2010-12-16 | 2014-07-29 | Microsoft Corporation | Metadata-based eventing supporting operations on data |
US8812493B2 (en) | 2008-04-11 | 2014-08-19 | Microsoft Corporation | Search results ranking using editing distance and document information |
US8843486B2 (en) | 2004-09-27 | 2014-09-23 | Microsoft Corporation | System and method for scoping searches using index keys |
US9043351B1 (en) * | 2011-03-08 | 2015-05-26 | A9.Com, Inc. | Determining search query specificity |
US9348912B2 (en) | 2007-10-18 | 2016-05-24 | Microsoft Technology Licensing, Llc | Document length as a static relevance feature for ranking search results |
US9495462B2 (en) | 2012-01-27 | 2016-11-15 | Microsoft Technology Licensing, Llc | Re-ranking search results |
US10558623B2 (en) | 2014-04-28 | 2020-02-11 | Convida Wireless, Llc | Search engine optimization for resource directory |
US20200202819A1 (en) * | 2018-12-21 | 2020-06-25 | Arris Enterprises Llc | System and method for pre-filtering crawling overlay elements for display with reduced real-time processing demands |
Families Citing this family (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8136025B1 (en) | 2003-07-03 | 2012-03-13 | Google Inc. | Assigning document identification tags |
US7627613B1 (en) * | 2003-07-03 | 2009-12-01 | Google Inc. | Duplicate document detection in a web crawler system |
US7328136B2 (en) * | 2004-09-15 | 2008-02-05 | Council Of Scientific & Industrial Research | Computer based method for finding the effect of an element in a domain of N-dimensional function with a provision for N+1 dimensions |
US8626775B1 (en) | 2005-01-14 | 2014-01-07 | Wal-Mart Stores, Inc. | Topic relevance |
US8249915B2 (en) * | 2005-08-04 | 2012-08-21 | Iams Anthony L | Computer-implemented method and system for collaborative product evaluation |
US20070078670A1 (en) * | 2005-09-30 | 2007-04-05 | Dave Kushal B | Selecting high quality reviews for display |
US8010480B2 (en) * | 2005-09-30 | 2011-08-30 | Google Inc. | Selecting high quality text within identified reviews for display in review snippets |
US8438469B1 (en) | 2005-09-30 | 2013-05-07 | Google Inc. | Embedded review and rating information |
US7827052B2 (en) * | 2005-09-30 | 2010-11-02 | Google Inc. | Systems and methods for reputation management |
US7814102B2 (en) * | 2005-12-07 | 2010-10-12 | Lexisnexis, A Division Of Reed Elsevier Inc. | Method and system for linking documents with multiple topics to related documents |
US7933890B2 (en) | 2006-03-31 | 2011-04-26 | Google Inc. | Propagating useful information among related web pages, such as web pages of a website |
US7624104B2 (en) * | 2006-06-22 | 2009-11-24 | Yahoo! Inc. | User-sensitive pagerank |
US20080016061A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Using a Core Data Structure to Calculate Document Ranks |
US20080016052A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Using Connections Between Users and Documents to Rank Documents in an Enterprise Search System |
US8073832B2 (en) * | 2009-05-04 | 2011-12-06 | Microsoft Corporation | Estimating rank on graph streams |
US8150860B1 (en) * | 2009-08-12 | 2012-04-03 | Google Inc. | Ranking authors and their content in the same framework |
US11003687B2 (en) | 2012-05-15 | 2021-05-11 | Splunk, Inc. | Executing data searches using generation identifiers |
US10387448B2 (en) * | 2012-05-15 | 2019-08-20 | Splunk Inc. | Replication of summary data in a clustered computing environment |
US9130971B2 (en) | 2012-05-15 | 2015-09-08 | Splunk, Inc. | Site-based search affinity |
US20140012631A1 (en) * | 2012-07-03 | 2014-01-09 | Ramot At Tel-Aviv University Ltd. | Competitive economy as a ranking device over networks |
CN102854875B (en) * | 2012-07-13 | 2015-06-24 | 惠州市德赛西威汽车电子有限公司 | Automobile air conditioner controller testing method and system |
JP5799967B2 (en) * | 2013-03-01 | 2015-10-28 | トヨタ自動車株式会社 | Data transmitting apparatus, data sharing system, data sharing method, and message exchange system |
CN104503983A (en) * | 2014-11-27 | 2015-04-08 | 百度在线网络技术（北京）有限公司 | Method and device for providing website certification data for search engine |
US10747740B2 (en) * | 2015-03-24 | 2020-08-18 | Kyndi, Inc. | Cognitive memory graph indexing, storage and retrieval |
US11803918B2 (en) | 2015-07-07 | 2023-10-31 | Oracle International Corporation | System and method for identifying experts on arbitrary topics in an enterprise social network |
US10380207B2 (en) * | 2015-11-10 | 2019-08-13 | International Business Machines Corporation | Ordering search results based on a knowledge level of a user performing the search |
US9898544B2 (en) * | 2016-02-18 | 2018-02-20 | Eshaa Alkhalifa | Guided web navigation tool |
CN116094943B (en) * | 2023-04-07 | 2023-06-06 | 湖南快乐阳光互动娱乐传媒有限公司 | PCDN node importance ranking method, device and equipment |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6112202A (en) | 1997-03-07 | 2000-08-29 | International Business Machines Corporation | Method and system for identifying authoritative information resources in an environment with content-based links between information resources |
US6285999B1 (en) * | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6560600B1 (en) * | 2000-10-25 | 2003-05-06 | Alta Vista Company | Method and apparatus for ranking Web page search results |
US6584468B1 (en) * | 2000-09-29 | 2003-06-24 | Ninesigma, Inc. | Method and apparatus to retrieve information from a network |
US20030204502A1 (en) * | 2002-04-25 | 2003-10-30 | Tomlin John Anthony | System and method for rapid computation of PageRank |
US20030208482A1 (en) * | 2001-01-10 | 2003-11-06 | Kim Brian S. | Systems and methods of retrieving relevant information |
US20030208478A1 (en) * | 1994-09-01 | 2003-11-06 | Computer Associates Think, Inc. | Directory services searching system and methods |
US20040024752A1 (en) * | 2002-08-05 | 2004-02-05 | Yahoo! Inc. | Method and apparatus for search ranking using human input and automated ranking |
-
2004
- 2004-08-23 US US10/925,189 patent/US7028029B2/en not_active Expired - Lifetime
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030208478A1 (en) * | 1994-09-01 | 2003-11-06 | Computer Associates Think, Inc. | Directory services searching system and methods |
US6285999B1 (en) * | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6799176B1 (en) * | 1997-01-10 | 2004-09-28 | The Board Of Trustees Of The Leland Stanford Junior University | Method for scoring documents in a linked database |
US6112202A (en) | 1997-03-07 | 2000-08-29 | International Business Machines Corporation | Method and system for identifying authoritative information resources in an environment with content-based links between information resources |
US6584468B1 (en) * | 2000-09-29 | 2003-06-24 | Ninesigma, Inc. | Method and apparatus to retrieve information from a network |
US6560600B1 (en) * | 2000-10-25 | 2003-05-06 | Alta Vista Company | Method and apparatus for ranking Web page search results |
US20040111412A1 (en) * | 2000-10-25 | 2004-06-10 | Altavista Company | Method and apparatus for ranking web page search results |
US6871202B2 (en) * | 2000-10-25 | 2005-03-22 | Overture Services, Inc. | Method and apparatus for ranking web page search results |
US20030208482A1 (en) * | 2001-01-10 | 2003-11-06 | Kim Brian S. | Systems and methods of retrieving relevant information |
US20030204502A1 (en) * | 2002-04-25 | 2003-10-30 | Tomlin John Anthony | System and method for rapid computation of PageRank |
US20040024752A1 (en) * | 2002-08-05 | 2004-02-05 | Yahoo! Inc. | Method and apparatus for search ranking using human input and automated ranking |
Non-Patent Citations (9)
Title |
---|
Arasu, A., et al., "PageRank Computation and the Structure of the Web: Experiments and Algorithms," Proceedings of the 11th Int'l World Wide Web Conf., Poster Track, 2002. |
Bharat, K., et al., "Improved Algorithms for Topic Distillation in a Hyperlinked Environment," Proceedings of the ACM-SIGIR, 1998. |
Haveliwala, T., "Efficient Computation of PageRank," Stanford University Technical Report, 1999. |
Haveliwala, T., "Topic Sensitive PageRank," Proceedings of the 11th Int'l World Wide Web Conf., 2002. |
Haveliwala, T., et al., "The Second Eigenvalue of the Google Matrix," Stanford University Technical Report, 2003. |
Jeh, G., et al., "Scaling Personalized Web Search," Proceedings of the 12th Int'l World Wide Web Conf., 2003. |
Kamvar, S., et al., "Exploiting the Block Structure of the Web for Computing PageRank," Stanford University Technical Report, 1999. |
Kamvar, S., et al., "Extrapolation Methods for Accelerating PageRank Computations," Proceedings of the 12th Int'l World Wide Web Conf., 2003. |
Page, L., et al., "The PageRank Citation Ranking: Bringing Order to the Web," Stanford Digital Libraries Working Paper, 1998. |
Cited By (70)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7603616B2 (en) | 2000-01-28 | 2009-10-13 | Microsoft Corporation | Proxy server using a statistical model |
US20040181543A1 (en) * | 2002-12-23 | 2004-09-16 | Canon Kabushiki Kaisha | Method of using recommendations to visually create new views of data across heterogeneous sources |
US7644361B2 (en) * | 2002-12-23 | 2010-01-05 | Canon Kabushiki Kaisha | Method of using recommendations to visually create new views of data across heterogeneous sources |
US20040193698A1 (en) * | 2003-03-24 | 2004-09-30 | Sadasivuni Lakshminarayana | Method for finding convergence of ranking of web page |
WO2004111759A3 (en) * | 2003-05-27 | 2007-03-08 | Purdue Research Foundation | Applied estimation of eigenvectors and eigenvalues |
WO2004111759A2 (en) * | 2003-05-27 | 2004-12-23 | Purdue Research Foundation | Applied estimation of eigenvectors and eigenvalues |
US8250114B2 (en) | 2003-08-18 | 2012-08-21 | Google Inc. | Method for detecting link spam in hyperlinked databases |
US7953763B2 (en) | 2003-08-18 | 2011-05-31 | Google Inc. | Method for detecting link spam in hyperlinked databases |
US20090282081A1 (en) * | 2003-08-18 | 2009-11-12 | Kamvar Sepandar D | Method for Detecting Link Spam in Hyperlinked Databases |
US7509344B1 (en) * | 2003-08-18 | 2009-03-24 | Google Inc. | Method for detecting link spam in hyperlinked databases |
US20050210006A1 (en) * | 2004-03-18 | 2005-09-22 | Microsoft Corporation | Field weighting in text searching |
US7584221B2 (en) | 2004-03-18 | 2009-09-01 | Microsoft Corporation | Field weighting in text searching |
US20050216533A1 (en) * | 2004-03-29 | 2005-09-29 | Yahoo! Inc. | Search using graph colorization and personalized bookmark processing |
US7343374B2 (en) * | 2004-03-29 | 2008-03-11 | Yahoo! Inc. | Computation of page authority weights using personalized bookmarks |
US20060039286A1 (en) * | 2004-08-18 | 2006-02-23 | Anindya Basu | Method and apparatus for dynamically reducing end-to-end delay in multi-hop wireless networks in response to changing traffic conditions |
US8843486B2 (en) | 2004-09-27 | 2014-09-23 | Microsoft Corporation | System and method for scoping searches using index keys |
US20060074903A1 (en) * | 2004-09-30 | 2006-04-06 | Microsoft Corporation | System and method for ranking search results using click distance |
US8082246B2 (en) | 2004-09-30 | 2011-12-20 | Microsoft Corporation | System and method for ranking search results using click distance |
US20060069982A1 (en) * | 2004-09-30 | 2006-03-30 | Microsoft Corporation | Click distance determination |
US20060074871A1 (en) * | 2004-09-30 | 2006-04-06 | Microsoft Corporation | System and method for incorporating anchor text into ranking search results |
US7827181B2 (en) | 2004-09-30 | 2010-11-02 | Microsoft Corporation | Click distance determination |
US7761448B2 (en) | 2004-09-30 | 2010-07-20 | Microsoft Corporation | System and method for ranking search results using click distance |
US7739277B2 (en) * | 2004-09-30 | 2010-06-15 | Microsoft Corporation | System and method for incorporating anchor text into ranking search results |
US20060136411A1 (en) * | 2004-12-21 | 2006-06-22 | Microsoft Corporation | Ranking search results using feature extraction |
US7716198B2 (en) | 2004-12-21 | 2010-05-11 | Microsoft Corporation | Ranking search results using feature extraction |
US20060200460A1 (en) * | 2005-03-03 | 2006-09-07 | Microsoft Corporation | System and method for ranking search results using file types |
US7792833B2 (en) | 2005-03-03 | 2010-09-07 | Microsoft Corporation | Ranking search results using language types |
US7698442B1 (en) * | 2005-03-03 | 2010-04-13 | Voltage Security, Inc. | Server-based universal resource locator verification service |
US20060294100A1 (en) * | 2005-03-03 | 2006-12-28 | Microsoft Corporation | Ranking search results using language types |
US20080222138A1 (en) * | 2005-07-29 | 2008-09-11 | Shixia Liu | Method and Apparatus for Constructing a Link Structure Between Documents |
US7895195B2 (en) * | 2005-07-29 | 2011-02-22 | International Business Machines Corporation | Method and apparatus for constructing a link structure between documents |
US7599917B2 (en) | 2005-08-15 | 2009-10-06 | Microsoft Corporation | Ranking search results using biased click distance |
US20070038622A1 (en) * | 2005-08-15 | 2007-02-15 | Microsoft Corporation | Method ranking search results using biased click distance |
US8095565B2 (en) | 2005-12-05 | 2012-01-10 | Microsoft Corporation | Metadata driven user interface |
US20070130205A1 (en) * | 2005-12-05 | 2007-06-07 | Microsoft Corporation | Metadata driven user interface |
US20090282032A1 (en) * | 2006-03-13 | 2009-11-12 | Microsoft Corporation | Topic distillation via subsite retrieval |
US7580931B2 (en) | 2006-03-13 | 2009-08-25 | Microsoft Corporation | Topic distillation via subsite retrieval |
US20070214116A1 (en) * | 2006-03-13 | 2007-09-13 | Microsoft Corporation | Topic distillation via subsite retrieval |
US8612453B2 (en) | 2006-03-13 | 2013-12-17 | Microsoft Corporation | Topic distillation via subsite retrieval |
US20070233679A1 (en) * | 2006-04-03 | 2007-10-04 | Microsoft Corporation | Learning a document ranking function using query-level error measurements |
US20080005226A1 (en) * | 2006-07-03 | 2008-01-03 | Srinivasan Subbian | A method and system for one-to-one communication through proxy |
US20080005227A1 (en) * | 2006-07-03 | 2008-01-03 | Srinivasan Subbian | Method and system for content processing |
US20110125760A1 (en) * | 2006-07-14 | 2011-05-26 | Bea Systems, Inc. | Using tags in an enterprise search system |
US20080027936A1 (en) * | 2006-07-25 | 2008-01-31 | Microsoft Corporation | Ranking of web sites by aggregating web page ranks |
US7634476B2 (en) | 2006-07-25 | 2009-12-15 | Microsoft Corporation | Ranking of web sites by aggregating web page ranks |
US20080027925A1 (en) * | 2006-07-28 | 2008-01-31 | Microsoft Corporation | Learning a document ranking using a loss function with a rank pair or a query parameter |
US7593934B2 (en) | 2006-07-28 | 2009-09-22 | Microsoft Corporation | Learning a document ranking using a loss function with a rank pair or a query parameter |
US7912831B2 (en) * | 2006-10-03 | 2011-03-22 | Yahoo! Inc. | System and method for characterizing a web page using multiple anchor sets of web pages |
US20080082481A1 (en) * | 2006-10-03 | 2008-04-03 | Yahoo! Inc. | System and method for characterizing a web page using multiple anchor sets of web pages |
US20080162453A1 (en) * | 2006-12-29 | 2008-07-03 | Microsoft Corporation | Supervised ranking of vertices of a directed graph |
US7809705B2 (en) | 2007-02-13 | 2010-10-05 | Yahoo! Inc. | System and method for determining web page quality using collective inference based on local and global information |
US20080195631A1 (en) * | 2007-02-13 | 2008-08-14 | Yahoo! Inc. | System and method for determining web page quality using collective inference based on local and global information |
US7840569B2 (en) | 2007-10-18 | 2010-11-23 | Microsoft Corporation | Enterprise relevancy ranking using a neural network |
US9348912B2 (en) | 2007-10-18 | 2016-05-24 | Microsoft Technology Licensing, Llc | Document length as a static relevance feature for ranking search results |
US20090106223A1 (en) * | 2007-10-18 | 2009-04-23 | Microsoft Corporation | Enterprise relevancy ranking using a neural network |
US8732185B1 (en) | 2008-04-10 | 2014-05-20 | Google Inc. | Selecting content for publication |
US8285737B1 (en) | 2008-04-10 | 2012-10-09 | Google Inc. | Selecting content for publication |
US8812493B2 (en) | 2008-04-11 | 2014-08-19 | Microsoft Corporation | Search results ranking using editing distance and document information |
US8812520B1 (en) | 2010-04-23 | 2014-08-19 | Google Inc. | Augmented resource graph for scoring resources |
US8386495B1 (en) * | 2010-04-23 | 2013-02-26 | Google Inc. | Augmented resource graph for scoring resources |
US20110295832A1 (en) * | 2010-05-28 | 2011-12-01 | International Business Machines Corporation | Identifying Communities in an Information Network |
US8396855B2 (en) * | 2010-05-28 | 2013-03-12 | International Business Machines Corporation | Identifying communities in an information network |
US8738635B2 (en) | 2010-06-01 | 2014-05-27 | Microsoft Corporation | Detection of junk in search result ranking |
US8306964B2 (en) | 2010-07-20 | 2012-11-06 | Microsoft Corporation | Extraction of rich search information from index servers via an alternative asynchronous data path |
US8793706B2 (en) | 2010-12-16 | 2014-07-29 | Microsoft Corporation | Metadata-based eventing supporting operations on data |
US9043351B1 (en) * | 2011-03-08 | 2015-05-26 | A9.Com, Inc. | Determining search query specificity |
US9495462B2 (en) | 2012-01-27 | 2016-11-15 | Microsoft Technology Licensing, Llc | Re-ranking search results |
US10558623B2 (en) | 2014-04-28 | 2020-02-11 | Convida Wireless, Llc | Search engine optimization for resource directory |
US20200202819A1 (en) * | 2018-12-21 | 2020-06-25 | Arris Enterprises Llc | System and method for pre-filtering crawling overlay elements for display with reduced real-time processing demands |
US10902825B2 (en) * | 2018-12-21 | 2021-01-26 | Arris Enterprises Llc | System and method for pre-filtering crawling overlay elements for display with reduced real-time processing demands |
Also Published As
Publication number | Publication date |
---|---|
US20050027685A1 (en) | 2005-02-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7028029B2 (en) | Adaptive computation of ranking | |
EP1934823B1 (en) | Click distance determination | |
US7953763B2 (en) | Method for detecting link spam in hyperlinked databases | |
US7383299B1 (en) | System and method for providing service for searching web site addresses | |
US7308643B1 (en) | Anchor tag indexing in a web crawler system | |
US9679056B2 (en) | Document reuse in a search engine crawler | |
US7260573B1 (en) | Personalizing anchor text scores in a search engine | |
US6112203A (en) | Method for ranking documents in a hyperlinked environment using connectivity and selective content analysis | |
US7240064B2 (en) | Search engine with hierarchically stored indices | |
US6560600B1 (en) | Method and apparatus for ranking Web page search results | |
US7984039B2 (en) | Merging of results in distributed information retrieval | |
JP4246623B2 (en) | Method and system for improving query response time for partitioned database objects | |
US6792419B1 (en) | System and method for ranking hyperlinked documents based on a stochastic backoff processes | |
US20020198869A1 (en) | Metasearch technique that ranks documents obtained from multiple collections | |
AU2002312104A1 (en) | Method and system for improving response time of a query for a partitioned database object | |
Wu et al. | Index structures of user profiles for efficient web page filtering services | |
US20030018617A1 (en) | Information retrieval using enhanced document vectors | |
JP2002215674A (en) | Web page browsing support system, method and program | |
US8060816B1 (en) | Methods and apparatus for intelligent crawling on the world wide web | |
Rungsawang et al. | Parallel adaptive technique for computing PageRank | |
Kushwaha et al. | A Comparative study of Algorithms in SEO & approach for Optimizing the search engine results using Hybrid of Query Recommendation and Document clustering, Genetic algorithm | |
Soundalgekar et al. | Internet Search for Indian Languages | |
Chua et al. | Automatic generation and refinement of hypertext links | |
Gupta et al. | An overview of ranking algorithms for search engines | |
Gil Costa et al. | A parallel view for search engines |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: THE BOARD OF TRUSTEES OF THE LELAND STANFORD JUNIOFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KAMVAR, SEPANDAR D.;HAVELIWALA, TAHER H.;GOLUB, GENE;REEL/FRAME:019177/0474;SIGNING DATES FROM 20061108 TO 20070317 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553)Year of fee payment: 12 |