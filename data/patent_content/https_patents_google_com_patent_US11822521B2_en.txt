US11822521B2 - Associating application-specific methods with tables used for data storage - Google Patents
Associating application-specific methods with tables used for data storage Download PDFInfo
- Publication number
- US11822521B2 US11822521B2 US17/671,068 US202217671068A US11822521B2 US 11822521 B2 US11822521 B2 US 11822521B2 US 202217671068 A US202217671068 A US 202217671068A US 11822521 B2 US11822521 B2 US 11822521B2
- Authority
- US
- United States
- Prior art keywords
- server
- tablet
- access
- application
- data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 title claims abstract description 103
- 238000013500 data storage Methods 0.000 title description 4
- 230000004044 response Effects 0.000 claims abstract description 37
- 230000004931 aggregating effect Effects 0.000 claims description 4
- 238000001914 filtration Methods 0.000 claims description 4
- 238000010586 diagram Methods 0.000 description 21
- 238000012545 processing Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 5
- 239000000470 constituent Substances 0.000 description 4
- 210000001072 colon Anatomy 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 239000007787 solid Substances 0.000 description 2
- 238000003491 array Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/13—File access structures, e.g. distributed indices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
- G06F16/184—Distributed file systems implemented as replicated file system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5083—Techniques for rebalancing the load in a distributed system
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1029—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers using data related to the state of servers by a load balancer
Definitions
- the disclosed embodiments relate generally to managing data storage and retrieval, and more particularly, to a method and system for co-locating application-specific computational processing with access to data to be processed.
- Performing computations involving data stored in tables in a distributed computing system presents significant engineering challenges.
- a single request from a client might involve data stored in multiple table portions. Access to each table portion storing requested data may be controlled by various processes spread over multiple servers. Furthermore, the loads on the various processes and their respective servers may vary across the system, resulting in inefficiencies. Accordingly, it is desirable to provide an efficient manner of performing computations involving data stored in tables in a distributed computing system, while also performing load balancing.
- a method of accessing data includes storing a table data structure in a file system.
- the table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- a plurality of tablet access objects and a plurality of application objects are stored in a plurality of servers, wherein a distinct application object is associated with each tablet access object.
- each application object and the associated tablet access object are associated with and distinct from a respective tablet of the table data structure.
- Each application object corresponds to a distinct instantiation of an application associated with the table data structure.
- the tablet access objects and the associated application objects are redistributed among the plurality of servers in accordance with a first load-balancing criterion.
- a first request directed to a respective tablet is received from a client.
- the tablet access object associated with the respective tablet is used to perform a data access operation on the respective tablet, and the application object associated with the respective tablet is used to perform an additional computational operation to produce a result to be returned to the client.
- a system for accessing data includes, in a set of interconnected computers: memory, a plurality of processors, and one or more programs stored in the memory and configured for execution by the plurality of processors.
- the one or more programs include instructions to store a table data structure in a file system.
- the table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the one or more programs also include instructions to store, in a plurality of the interconnected computers, a plurality of tablet access objects and a plurality of application objects.
- a distinct application object is associated with each tablet access object.
- Each application object and the associated tablet access object are associated with and distinct from a respective tablet of the table data structure.
- Each application object corresponds to a distinct instantiation of an application associated with the table data structure.
- the one or more programs further include: instructions to redistribute the tablet access objects and the associated application objects among the plurality of the interconnected computers in accordance with a first load-balancing criterion; instructions to receive a first request directed to a respective tablet from a client; and instructions to use the tablet access object associated with the respective tablet to perform a data access operation on the respective tablet, and to use the application object associated with the respective tablet to perform an additional computational operation to produce a result to be returned to the client, in response to the first request.
- a computer readable storage medium stores one or more programs for use in accessing data.
- the one or more programs are configured to be executed by a set of interconnected computers and include instructions to store a table data structure in a file system.
- the table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the one or more programs also include instructions to store, in a plurality of the interconnected computers, a plurality of tablet access objects and a plurality of application objects.
- a distinct application object is associated with each tablet access object.
- Each application object and the associated tablet access object are associated with and distinct from a respective tablet of the table data structure.
- Each application object corresponds to a distinct instantiation of an application associated with the table data structure.
- the one or more programs further include: instructions to redistribute the tablet access objects and the associated application objects among the plurality of the interconnected computers in accordance with a first load-balancing criterion; instructions to receive a first request directed to a respective tablet from a client; and instructions to use the tablet access object associated with the respective tablet to perform a data access operation on the respective tablet, and to use the application object associated with the respective tablet to perform an additional computational operation to produce a result to be returned to the client, in response to the first request.
- a method of accessing data includes storing first and second table data structures in a file system.
- Each table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the first and second table data structures have distinct schemas.
- a plurality of tablet access objects, a plurality of first application objects, and a plurality of second application objects are stored in a plurality of servers.
- Each tablet access object is associated with either a distinct first application object or a distinct second application object.
- Each first application object and associated tablet access object are associated with and distinct from a respective tablet of the first table data structure, wherein each first application object corresponds to a distinct instantiation of a first application associated with the first table data structure.
- Each second application object and associated tablet access object are associated with and distinct from a respective tablet of the second table data structure, wherein each second application object corresponds to a distinct instantiation of a second application associated with the second table data structure.
- the tablet access objects and associated first or second application objects are redistributed among the plurality of servers in accordance with a first load-balancing criterion.
- a first request directed to a first tablet in the first table data structure is received from a first client.
- the tablet access object associated with the first tablet is used to perform a data access operation on the first tablet, and the first application object associated with the first tablet is used to perform an additional computational operation to produce a result to be returned to the first client.
- a second request directed to a second tablet in the second table data structure is received from a second client.
- the tablet access object associated with the second tablet is used to perform a data access operation on the second tablet
- the second application object associated with the second tablet is used to perform an additional computational operation to produce a result to be returned to the second client.
- a system for accessing data includes, in a set of interconnected computers: memory, a plurality of processors, and one or more programs stored in the memory and configured for execution by the plurality of processors.
- the one or more programs include instructions to store first and second table data structures in a file system. Each table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions. The first and second table data structures have distinct schemas.
- the one or more programs also include instructions to store in a plurality of servers a plurality of tablet access objects, a plurality of first application objects, and a plurality of second application objects. Each tablet access object is associated with either a distinct first application object or a distinct second application object.
- Each first application object and associated tablet access object are associated with and distinct from a respective tablet of the first table data structure, wherein each first application object corresponds to a distinct instantiation of a first application associated with the first table data structure.
- Each second application object and associated tablet access object are associated with and distinct from a respective tablet of the second table data structure, wherein each second application object corresponds to a distinct instantiation of a second application associated with the second table data structure.
- the one or more programs further include: instructions to redistribute the tablet access objects and associated first or second application objects among the plurality of servers in accordance with a first load-balancing criterion; instructions to receive from a first client a first request directed to a first tablet in the first table data structure; instructions to use the tablet access object associated with the first tablet to perform a data access operation on the first tablet, and to use the first application object associated with the first tablet to perform an additional computational operation to produce a result to be returned to the first client, in response to the first request; instructions to receive from a second client a second request directed to a second tablet in the second table data structure; and instructions to use the tablet access object associated with the second tablet to perform a data access operation on the second tablet, and to use the second application object associated with the second tablet to perform an additional computational operation to produce a result to be returned to the second client, in response to the second request.
- a computer readable storage medium stores one or more programs for use in accessing data.
- the one or more programs are configured to be executed by a set of interconnected computers and include instructions to instructions to store first and second table data structures in a file system.
- Each table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the first and second table data structures have distinct schemas.
- the one or more programs also include instructions to store in a plurality of servers a plurality of tablet access objects, a plurality of first application objects, and a plurality of second application objects.
- Each tablet access object is associated with either a distinct first application object or a distinct second application object.
- Each first application object and associated tablet access object are associated with and distinct from a respective tablet of the first table data structure, wherein each first application object corresponds to a distinct instantiation of a first application associated with the first table data structure.
- Each second application object and associated tablet access object are associated with and distinct from a respective tablet of the second table data structure, wherein each second application object corresponds to a distinct instantiation of a second application associated with the second table data structure.
- the one or more programs further include: instructions to redistribute the tablet access objects and associated first or second application objects among the plurality of servers in accordance with a first load-balancing criterion; instructions to receive from a first client a first request directed to a first tablet in the first table data structure; instructions to use the tablet access object associated with the first tablet to perform a data access operation on the first tablet, and to use the first application object associated with the first tablet to perform an additional computational operation to produce a result to be returned to the first client, in response to the first request; instructions to receive from a second client a second request directed to a second tablet in the second table data structure; and instructions to use the tablet access object associated with the second tablet to perform a data access operation on the second tablet, and to use the second application object associated with the second tablet to perform an additional computational operation to produce a result to be returned to the second client, in response to the second request.
- FIG. 1 illustrates a distributed computing and data storage system in accordance with some embodiments.
- FIG. 2 is a conceptual block diagram of a table data structure in accordance with some embodiments.
- FIG. 3 is a conceptual block diagram of a cell in a table data structure in accordance with some embodiments.
- FIGS. 4 A and 4 B are block diagrams illustrating processes executed in a distributed computing system in accordance with some embodiments.
- FIG. 4 C is a block diagram illustrating a tablet access object having multiple associated application objects in accordance with some embodiments.
- FIG. 4 D is a block diagram illustrating a distributed computing system in accordance with some embodiments.
- FIG. 5 A is a block diagram of a data structure for storing metadata associated with a set of tables in accordance with some embodiments.
- FIG. 5 B is a block diagram of a data structure for storing metadata associated with tablets in a set of tables in accordance with some embodiments.
- FIG. 5 C is a block diagram of a data structure for a tablet log that records memory locations of tablets stored in a file system in accordance with some embodiments.
- FIG. 5 D is a block diagram of a data structure that records loads on various servers in a distributed computing system.
- FIG. 6 is a block diagram illustrating a server in accordance with some embodiments.
- FIGS. 7 A- 7 F are flow diagrams illustrating methods of accessing data in accordance with some embodiments.
- FIG. 1 illustrates a distributed computing and data storage system 100 in accordance with some embodiments.
- the system 100 includes a plurality of data servers 106 that store one or more table data structures (“tables”) and are interconnected by a network 104 .
- a respective table is a sparse, distributed, persistent multidimensional sorted map and values in the map are uninterrupted arrays of bytes.
- a respective table may scale to a petabyte or more of data.
- the system 100 distributes data for the one or more tables among the plurality of data servers 106 .
- the network 104 may be any suitable network, including but not limited to a local area network (LAN), a wide-area network (WAN), the Internet, an Ethernet network, a virtual private network (VPN), or any combination of such networks.
- data servers 106 are clustered in a data center or in two or more interconnected data centers.
- the system 100 includes as many as 1000 servers or more.
- the operation of the plurality of the data servers 106 is coordinated by a master server 108 .
- the master server 108 assigns and reassigns portions of the one or more tables to various data servers 106 , monitors the status of each data server 106 , and performs load balancing procedures.
- Each portion of a respective table is referred to as a tablet.
- the tablets correspond to non-overlapping table portions.
- the master server 108 also assigns and reassigns to various data servers 106 responsibility for controlling access to tablets.
- control of access to tablets is independent of tablet storage: a first data server 106 controls access to a tablet, while a separate data server stores the tablet.
- the server that controls access to a tablet and the server that stores the tablet are situated in a common cluster of servers, or are situated such that latencies for data access operations are less than a predefined limit.
- tablet storage is redundant. For example, a tablet may be stored on three different data servers 106 . This redundant storage is handled by a file system and is independent of tablet access control.
- the system 100 includes one or more client systems 102 that may query tables stored in the plurality of data servers 106 .
- each client system 102 executes an application that stores and manipulates data in a respective table in the system 100 .
- a client system 102 may query or write to a respective table by providing appropriate requests to the data servers 106 via the network 104 .
- a client system also may instruct the data servers 106 to perform additional computational operations based on table data.
- the additional computational operations are performed by the data server or servers 106 that control access to the respective table.
- the system 100 thus co-locates application processing with access to the data to be processed.
- client systems 102 are described as being separate from data servers 106 , in some embodiments one or more client processes are executed by one or more of the data servers 106 .
- Each client process executes an application that stores and manipulates data in a respective table in the system 100 .
- each client process may query or write to a respective table by providing appropriate requests to the corresponding data servers 106 via the network 104 and also may instruct data servers 106 to perform additional computational operations based on table data.
- FIG. 2 is a conceptual block diagram of a table 200 in accordance with some embodiments.
- the table 200 has rows 202 and columns 204 that index values stored in the table and that are identified by respective row and column identifiers.
- the columns 204 are grouped into column families 206 - 1 through 206 -N, where N is an integer indicating the number of column families in the table 200 .
- each column family 206 includes one or more columns 204 .
- the column family is the basic unit for controlling accessing to data.
- the columns 204 in the first set are assigned to a first column family 206 while the columns 204 in the second set are assigned to a second (i.e., different) column family 206 .
- Contiguous sets of the rows 202 are grouped to form tablets 208 - 1 through 208 -L, where L is an integer indicating the number of tablets in the table 200 .
- a tablet 208 thus contains all the data in a corresponding set of contiguous rows 202 in the table 200 .
- the table 100 is sorted (at least conceptually) by row 202 , as identified by respective row identifiers. Thus, if the contents of the table 200 were scanned from beginning to end, the contents would be accessed in row order.
- Existing tablets 208 can be split to increase the number of tablets 208 , or merged to reduce the number of tablets 208 .
- the tablet 208 is the basic logical unit of storage for purposes of distributing portions of a table 200 across a set of files. Tablets 208 are logical units of storage, as opposed to physical units of storage, because the content of a tablet 208 may be stored in multiple files.
- each row identifier is a string of arbitrary length and arbitrary value.
- each column identifier is a string of arbitrary length and arbitrary value.
- restrictions may be placed on the value of a row or column identifier.
- the column identifier string may have to comply with a rule that disallows use of particular characters or symbols, or that requires the use of only printable characters or symbols. The rule may further disallow the use of a particular printable character, such as the colon character, except as a separator between first and second portions of the column identifier.
- column names are segmented into a column family portion and a qualifier portion (sometimes called the column portion), separated by a predefined separator character or symbol.
- a column name may have format such as cf1:c2, where the colon is the separator character.
- the column family name and the qualifier portion of a column name can each be arbitrarily long and have arbitrary value; however, the column family name may have to comply with a rule that disallows use of the predefined separator character in the column family name and/or in the qualifier portion of the column name.
- a cell 310 in the table 200 represents the junction of a specified row 202 , as identified by a row identifier 302 , and column 204 , as identified by a column identifier 304 .
- multiple versions 312 of a data item can be stored in a single cell 310 . Each version of the data item is assigned either a version number or timestamp.
- FIG. 4 A is a block diagram illustrating processes 400 executed in a distributed computing system (e.g., the system 100 , FIG. 1 ) that provides access to at least two tables (e.g., two tables 200 , FIG. 2 ) in accordance with some embodiments.
- a first table is referred to as “table A”
- a second table is referred to as “table B.”
- the processes 400 include a master process 402 , a metadata access process 404 , and multiple tablet server processes 408 - 1 through 408 -M, where M is an integer indicating the number of tablet server processes being executed.
- Each tablet server process 408 includes one or more tablet access objects 410 , each of which is associated with and distinct from an application object 412 .
- Each tablet access object 410 and associated application object 412 are associated with and distinct from a respective tablet for one of the tables. For example, tablet access object 410 -A 1 and associated application object 412 -A 1 are associated with a first tablet in table A, tablet access object 410 -A 2 and associated application object 412 -A 2 are associated with a second tablet in table A, and tablet access object 410 -A 3 and associated application object 412 -A 3 are associated with a third tablet in table A.
- tablet access object 410 -B 1 and associated application object 412 -B 1 are associated with a first tablet in table B
- tablet access object 410 -B 2 and associated application object 412 -B 2 are associated with a second tablet in table B
- tablet access object 410 -B 3 and associated application object 412 -B 3 are associated with a third tablet in table B.
- FIG. 4 A illustrates that tablet access objects 410 and associated application objects 412 for a respective table are split among multiple tablet server processes 408 : for example, for table A, objects 410 -A 1 , 412 -A 1 , 410 -A 2 , and 412 -A 2 are assigned to tablet server process 408 - 1 , while objects 410 -A 3 and 412 -A 3 are assigned to tablet server process 408 -M.
- FIG. 4 A also illustrates that tablet access objects 410 and associated application objects 412 for multiple tables may be assigned to the same tablet server process 408 : for example, processes 408 - 1 and 408 -M each include tablet access objects 410 and associated application objects 412 for tablets in both table A and table B.
- Each tablet access object 410 controls access to its associated tablet by enabling data access operations, such as table read operations or table write operations, for its associated tablet.
- data access operations are performed in response to a request directed to the associated tablet.
- requests originate from a client (e.g., a client system 102 , FIG. 1 ).
- Each application object 412 for a respective table corresponds to a distinct instantiation of an application associated with the respective table.
- application objects 412 -A 1 , 412 -A 2 , and 412 -A 3 are distinct instantiations of an application associated with table A
- application objects 412 -B 1 , 412 -B 2 , and 412 -B 3 are distinct instantiations of an application associated with table B.
- the application object 412 associated with the tablet enables performance of a computational operation in addition to the data access operation performed by the associated tablet access object 410 .
- requests are directed to the application object 412 , which in turn provides instructions to the associated tablet access object 410 to perform one or more data access operations in accordance with the request.
- Code associated with an application object 412 may be whatever code is necessary to implement the corresponding application, and thus is arbitrary, whereas code associated with a tablet access object 410 corresponds to data access operations. Associating an application object 412 with a tablet access object 410 thus attaches an application-specific method to the corresponding tablet 208 , and thereby co-locates application-specific computational processing with access to data to be processed.
- each application object 412 A corresponds to a distinct instantiation of a search application for table A, such as an application that provides regular expression searches for table A.
- a respective application object 412 A upon receiving a request to search for a specified pattern in its associated tablet, instructs its associated tablet access object 410 A to perform data access operations to search for the specified pattern.
- the application object 412 A may perform additional computational operations, such as filtering search results, aggregating search results, or verifying permission to perform the search.
- the application object 412 A also may cache tablet contents to facilitate searching.
- the application objects 412 in FIG. 4 A are internal to tablet server processes 408 .
- application objects 412 and their associated methods may be hard-coded into the binary code for a respective tablet server process 408 .
- application objects are executed separately from tablet server processes.
- the processes 420 executed in a distributed computing system include application objects 412 that are external to tablet server processes 422 - 1 through 422 -M that include the tablet access objects 410 with which the application objects 412 are associated.
- the application objects 412 are included in application processes executed by the same server 428 (e.g., a data server 106 , FIG. 1 ) that hosts the associated tablet access objects 410 .
- the server 428 - 1 executes a tablet server process 422 - 1 that includes tablet access objects 410 -A 1 and 410 -A 2 for table A and 410 -B 1 for table B.
- the server 428 - 1 also executes an application process 424 - 1 that includes application objects 412 -A 1 and 412 -A 2 , which are associated with tablet access objects 410 -A 1 and 410 -A 2 for table A.
- the server 428 - 1 executes an application process 426 - 1 that includes application object 412 -B 1 , which is associated with tablet access object 410 -B 1 for table B, and possibly other application objects for table B.
- FIG. 4 B shows application objects 412 as being located on the same servers 428 as their associated tablet access objects 410
- application objects 412 are located on separate servers from their associated tablet access objects 410 .
- a respective application object 412 may be located on a server on the same rack as the server storing the associated tablet access object 410 , or on a server that is near enough to the server storing the associated tablet access object 410 such that responses from the associated tablet access object 410 to commands from the respective application object 412 satisfy (e.g., the responses are received within) a maximum allowable latency.
- all application objects 412 hosted on a particular server 428 and associated with a particular table are included in a single process: for example, application objects 412 -A 1 and 412 -A 2 are included in a process 424 - 1 , and application objects 412 -B 2 and 412 -B 3 are included in a process 426 -M.
- each application object 412 could be included in a distinct process, such that a distinct application process is associated with each tablet.
- a tablet access object 410 has multiple associated application objects 412 , as illustrated in FIG. 4 C .
- multiple applications may access data in a tablet associated with the tablet access object 410 .
- Each application object 412 for a particular tablet thus may be a distinct instantiation of one of multiple applications.
- a master process 402 ( FIGS. 4 A- 4 B ) monitors the load on servers and on tablet access objects 410 and their associated application objects 412 .
- the master process redistributes tablet access objects 410 and/or associated application objects 412 among various servers in accordance with one or more load-balancing criteria as applied to a server, a tablet access object 410 , and/or an application object 412 .
- load-balancing criteria include criteria based on CPU usage (e.g., whether CPU usage exceeds a specified percentage), memory usage (e.g., whether memory usage exceeds a specified amount), and/or latency (e.g., whether the latency for responses to client requests or to requests from an application object 412 to its associated tablet access object 410 exceeds a specified amount of time).
- redistributing a tablet access object 410 and/or associated application object 412 includes unloading the object(s) 410 and/or 412 from a first server and loading the objects 410 and/or 412 onto a second server. Redistribution of tablet access objects 410 and associated application objects 412 does not affect the storage location of associated tablets.
- the master process 402 also may split or merge tablets. For example, if a tablet has a size or load that exceeds a threshold, the master process may split the tablet into two or more tablets that correspond to distinct non-overlapping portions (e.g., non-overlapping row ranges) of the original tablet. When a tablet is split, its associated tablet access object 410 and application object 412 also are split into two or more tablet access objects 410 and two or more application objects 412 , such that each pair of objects 410 and 412 is associated with one of the distinct non-overlapping portions of the original tablet. Similarly, if two or more tablets have sizes or loads below a threshold, the master process may merge the tablets into a single tablet. When tablets are merged, their associated tablet access objects 410 and application objects 412 are merged into a single pair of objects 410 and 412 .
- the master process may merge the tablets into a single tablet. When tablets are merged, their associated tablet access objects 410 and application objects 412 are merged into a single pair of objects 410 and 412
- a metadata access process 404 provides access to metadata regarding tables and their constituent tablets.
- the metadata access process 404 provides access to metadata that identifies tablet boundaries within tables 200 ( FIG. 2 ) and maps tablets to the server locations of their associated tablet access objects 410 and application objects 412 .
- the metadata access process 404 identifies the tablet or tablets that correspond to the request and the server location(s) of the tablet access objects 410 and application objects 412 associated with the identified tablet(s). The request is then directed to the associated application objects 412 and tablet access objects 410 .
- Other examples of metadata that may be accessed through the process 404 are described below with regard to FIGS. 5 A- 5 D .
- FIG. 4 D is a block diagram illustrating a distributed computing system 440 for executing the processes 400 ( FIG. 4 A ) or 420 ( FIG. 4 B ) in accordance with some embodiments.
- the distributed computing system 440 is an example of a system 100 ( FIG. 1 ). While FIG. 4 D illustrates application objects 412 that are external to tablet server processes 422 , a similar system may be implemented with application objects 412 that are internal to tablet server processes (e.g., as illustrated in FIG. 4 A ).
- a network 104 connects a client system 102 with multiple servers 106 .
- the servers 106 execute the master process 402 , metadata access process 404 , tablet server processes 422 , and application processes 424 and 426 .
- a server 106 executing the master process 402 corresponds to the master server 108 , FIG. 1 .
- Also implemented with the servers 106 is a file system for storing tablets for multiple tables (e.g., tablets 208 -A for table A and tablets 208 -B for table B) and for storing metadata.
- the servers 106 used for the file system may overlap with the servers 106 used to execute the processes 402 , 404 , 422 , 424 , and/or 426 .
- a request from the client 102 specifies (1) a row, a range or rows, or a set of row ranges in a particular table, and (2) argument data.
- the system 440 identifies the one or more tablets corresponding to the row, range of rows, or set of row ranges in the client request.
- Parallel requests e.g., remote procedure calls
- the servers 106 provide the requests to the associated application objects 412 , which direct the associated tablet access objects 410 to perform data access operations as specified by the client request.
- the associated application objects 412 also perform one or more computational operations in accordance with the client request and the argument data specified in the request. Results are returned from the servers 106 to the client 102 .
- Redistribution, tablet splitting, and tablet merging operations performed by the master process 402 are performed in parallel with and independently of processing of client requests. Moving a tablet access object 410 and/or application object 412 from a first server 106 to a second server 106 , or splitting or merging tablets, can cause a request to a particular application object 412 to fail.
- an application object 412 supplies a lock token to an operation issuing a request to the application object 412 . The lock token will produce an error if the application object 412 does not respond to the request in a specified amount of time, thus alerting the operation that the request failed.
- FIG. 5 A is a block diagram of a data structure for storing metadata 500 associated with a set of tables in accordance with some embodiments.
- the table metadata 500 includes a record 502 for each distinct table 200 ( FIG. 2 ) stored in a file system in a distributed computing system 100 ( FIG. 1 ).
- Each table metadata record 502 may include a table identifier 504 , a name of the table 506 , and optionally may include other per table parameters 508 (e.g., the identifier of an administrator or creator of the table).
- FIG. 5 B is a block diagram of a data structure for storing metadata 510 associated with tablets in a set of tables in accordance with some embodiments.
- the tablet metadata 510 includes a record 512 for each distinct tablet 208 ( FIG. 2 ) stored in a file system in a distributed computing system 100 ( FIG. 1 ).
- Each tablet metadata record 512 includes a table identifier 514 , the row identifier of the last row of the tablet 516 , an identifier or location 518 of the server that hosts the tablet access object 410 and application object 412 associated with the tablet and thus controls access to the tablet, and a set of information 519 representing the state of the tablet.
- the metadata 510 includes separate identifiers 518 for the objects 410 and 412 .
- the metadata 510 includes an identifier 518 for the application object 412 and the application object 412 stores a pointer to its associated tablet access object 410 .
- tablet state information 519 includes a list of files that store the content of the tablet.
- the tablet metadata 510 includes one or more load metrics 520 (e.g., 520 - 1 through 520 - 3 ).
- Examples of load metrics 520 include CPU usage (e.g., CPU usage for the tablet access object 410 and application object 412 associated with the tablet), memory usage, and/or latency for responses to requests directed to the tablet.
- the tablet metadata records 512 may optionally include additional fields.
- the combination of the table identifier 514 and last row identifier 516 provides a key to the tablet metadata table 510 , because the tablet metadata records 512 are ordered within the tablet metadata table 510 in accordance with the table identifier concatenated with the last row name or identifier.
- each tablet metadata record may include the table identifier and the name of the first row of the next tablet in the table as the key of tablet metadata table. If a tablet is the last tablet of a table, a predefined “infinity” designation may be used in place of the name of the (non-existent) first row in the next tablet in the table.
- the range of rows included in any particular tablet is specified by the last row identifiers 516 in two tablet metadata records 512 : the record 512 of the particular tablet and the immediately preceding record 512 in the tablet metadata table. If the immediately preceding record 512 in the tablet metadata table has a different table identifier, then the current tablet is the first tablet of its table.
- the tablet metadata 510 is searched or scanned until the first tablet metadata record 512 is found that (A) has the same table identifier 514 as the tablet and (B) has a last row 516 that is equal to (i.e., has the same value or sort value) or greater than (i.e., has a higher value, or sort value) the specified row.
- This record 512 identifies the tablet that stores the specified row, and the server location 518 specified by this record 512 identifies the server that hosts the application object 412 (and in some embodiments, the tablet access object 410 ) associated with the tablet and thus controls access to the tablet.
- the record identifying the tablet that stores a specified row of a table is located by scanning the tablet metadata until the first tablet metadata record is found that (A) has the same table identifier as the tablet and (B) has a first row (of the next tablet) name that is greater (i.e., has a higher value, or sort value) than the specified row.
- the master process 402 ( FIGS. 4 A, 4 B, and 4 D ) monitors the load metrics 520 to determine whether to split or merge tablets and their associated tablet access objects 410 and application objects 412 .
- a decision to split a tablet is based on the combined load on the tablet's associated tablet access object 410 and application object 412 .
- the tablet metadata 510 is sufficiently voluminous that this metadata is itself stored in a table data structure divided into tablets.
- the tablet metadata table 510 contains thousands, hundreds of thousands or millions of entries 512 , each of which indicates the location of a distinct respective tablet in the distributed computing system 100 ( FIG. 1 ).
- FIG. 5 C is a block diagram of a data structure for a tablet log 530 that records memory locations of tablets stored in a file system in accordance with some embodiments.
- the tablet log 530 includes a record 532 for each distinct tablet in the one or more tables stored in a file system in a distributed computing system 100 .
- Each record 532 includes a tablet identifier 534 (e.g., a concatenation of a table identifier 514 and the last row 516 of the tablet) and at least one memory location 536 where the tablet is stored.
- tablets are stored redundantly, with corresponding multiple memory locations 536 listed in the tablet log 530 .
- a tablet may be redundantly stored on three separate servers 106 ( FIGS.
- the tablet log 530 may be queried by a tablet server process 408 ( FIG. 4 A ) or 422 ( FIG. 4 B ), in response to instructions from a tablet access object 410 to perform a data access operation on a tablet, to identify a memory location 536 for the tablet and thereby enable performance of the data access operation.
- FIG. 5 D is a block diagram of a data structure 540 that records loads on various servers 106 in a distributed computing system 100 ( FIG. 1 ).
- the data structure 540 includes a record 542 for each server 106 in the system 100 .
- Each record 542 includes a server identifier 544 and one or more load metrics 546 (e.g., 546 - 1 through 546 - 3 ) for a respective server 106 . Examples of load metrics include CPU usage, memory usage, and latency for requests directed to the server 106 .
- the master process 402 FIGS.
- a tablet access object 410 and/or associated application objects 412 monitors the load metrics 546 to determine whether to transfer tablet access objects 410 and/or associated application objects 412 to or from respective servers 106 (e.g., whether to unload or load a tablet access object 410 and/or associated application object 412 from or to a respective server 106 ). In some embodiments, if a tablet access object 410 and its associated application object 412 are located on separate servers, a decision to move an object 410 or 412 is based on a load on the server hosting the object 410 or 412 .
- FIG. 6 is a block diagram illustrating a server 600 in accordance with some embodiments.
- the server 600 is an example of an implementation of a server 106 ( FIG. 1 ) and typically includes one or more processing units (CPUs) 602 , one or more network or other communications interfaces 604 , memory 610 , and one or more communication buses 612 for interconnecting these components.
- Memory 610 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices, and may include non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices.
- Memory 610 may optionally include one or more storage devices remotely located from the CPU(s) 602 .
- Memory 610 or alternately the non-volatile memory device(s) within memory 610 , comprises a computer readable storage medium.
- the memory 610 stores the following programs, modules, and data structures, or a subset thereof:
- the master module 618 includes a tablet distribution module 620 for distributing tablets among servers in a distributed computing system (e.g., by moving, splitting, and merging tablets).
- the metadata access module includes a server location lookup module 624 for identifying servers that control access to tablets corresponding to rows, row ranges, or sets of row ranges specified in client requests.
- the tablet server module 626 includes tablet access objects 628 and application objects 630 .
- application objects are included in one or more application modules 632 .
- the file system 636 includes metadata 638 , which may include table metadata 640 , tablet metadata 642 , a tablet log 644 , and server load metrics 646 .
- the file system also includes one or more tables 648 and their constituent tablets 650 .
- Each of the above identified elements of the server 600 may be stored in one or more of the previously mentioned memory devices in memory 610 , and corresponds to a set of instructions for performing a function described above.
- the above identified modules or programs i.e., sets of instructions
- memory 610 may store a subset of the modules and data structures identified above.
- memory 610 may store additional modules and data structures not described above.
- FIG. 6 shows a server 600
- FIG. 6 is intended more as a functional description of the various features which may be present in a server, or a set of such servers, than as a structural schematic of the embodiments described herein.
- items shown separately could be combined and some items could be separated.
- some items shown separately in FIG. 6 could be implemented on single servers and single items could be implemented by one or more servers.
- FIGS. 7 A- 7 D are flow diagrams illustrating a method 700 of accessing data in accordance with some embodiments.
- the method 700 is performed in a distributed computing system (e.g., a system 100 , FIG. 1 , such as a system 440 , FIG. 4 D ) that includes multiple servers (e.g., multiple servers 106 , FIG. 1 , such as servers 600 , FIG. 6 ).
- a table data structure e.g., a table 200 , FIG. 2
- the table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the tablets correspond ( 704 ) to distinct ranges of rows, as illustrated for tablets 208 - 1 through 208 -L ( FIG. 2 ).
- a plurality of tablet access objects e.g., objects 410 , FIG. 4 A or 4 B
- a plurality of application objects e.g., objects 412 , FIG. 4 A or 4 B
- a distinct application object is associated with each tablet access object.
- Each application object and associated tablet access object are associated with and distinct from a respective tablet of the table data structure.
- Each application object corresponds to a distinct instantiation of an application associated with the table data structure.
- the file system is implemented in a cluster of servers that includes the plurality of servers.
- each application object is stored on the same server as its associated tablet access object.
- a respective application object may be stored on a separate server from its associated tablet access object.
- the respective application object may be stored on a server on the same rack as the server storing the associated tablet access object, or on a server that is near enough to the server storing the associated tablet access object such that responses from the associated tablet access object to commands from the respective application object satisfy (e.g., the responses are received within) a maximum allowable latency.
- one or more tablets are stored on a different server than their associated tablet access objects and application objects.
- the tablet access objects and associated application objects are redistributed ( 708 ) among the plurality of servers in accordance with a first load-balancing criterion.
- the master process 402 FIGS. 4 A- 4 B ) directs redistribution of the objects 410 and 412 among servers 106 in accordance with one or more load-balancing criteria.
- redistributing the tablet access objects and associated application objects among the plurality of servers does not modify storage locations of tablets associated with the redistributed objects.
- a first request directed to a respective tablet is received ( 710 ) from a client (e.g., a client 102 , FIG. 1 ).
- a client e.g., a client 102 , FIG. 1
- the client is distinct from the plurality of servers.
- the client may be a particular server in the plurality of servers.
- the tablet access object associated with the respective tablet is used ( 712 ) to perform a data access operation on the respective tablet and the application object associated with the respective tablet is used to perform an additional computational operation to produce a result to be returned to the client.
- the data access operation is a search operation and the additional computational operation includes filtering search results, aggregating search results, or verifying permission to perform the search.
- the application object associated with the respective tablet caches search results.
- a tablet access object and/or associated application object are unloaded ( 716 ) from the first server and loaded ( 718 ) onto a second server in the plurality of servers.
- the master process 402 FIGS. 4 A- 4 B ) may determine that the load on the first server exceeds the second load-balancing criterion, and in response may direct the first server to unload the object(s) and the second server to load the object(s).
- both objects may be unloaded and loaded onto another server in response to the determination of operation 714 . If only the tablet access object or the associated application object is stored on the first server, that particular object may be unloaded and loaded onto another server in response to the determination of operation 714 .
- a tablet is divided ( 722 ) into first and second new tablets that correspond to distinct non-overlapping portions of the particular tablet.
- a first application object and first tablet access object are associated ( 724 ) with the first new tablet and a second application object and second tablet access object are associated with the second new tablet.
- the first and second application objects correspond to distinct instantiations of the application associated with the table data structure.
- operations 722 and 724 are performed in response to a determination that the tablet has a size exceeding a first size criterion or a determination that a load on the tablet exceeds a first load criterion. For example, the master process 402 ( FIGS.
- operations 722 and 724 may direct that the tablet be divided in response to determining that the tablet size or load exceeds the first size or load criterion.
- operations 722 and 724 are performed in response to a determination that the number of requests for at least two distinct rows in the tablet exceed specified amounts; the tablet is then split such that each of the at least two distinct rows is in a distinct new tablet.
- operations 722 and 724 are performed in response to a user command.
- a second request directed to a specified range of rows (or set of row ranges) in the table data structure is received ( 726 , FIG. 7 D ) from the client.
- the specified range of rows (or set of row ranges) includes rows in multiple tablets.
- the multiple tablets are identified ( 728 ).
- One or more servers are identified ( 730 ) that store the application objects associated with the identified multiple tablets and one or more servers are identified that store the tablet access objects associated with the identified multiple tablets.
- each application object associated with the identified multiple tablets is stored on the same server as its associated tablet access object.
- a respective application object associated with the identified multiple tablets may be stored on a separate server from its associated tablet access object.
- the request is directed ( 732 ) to the each of the identified one or more servers that store the application objects associated with the identified multiple tablets.
- a remote procedure call is issued ( 734 ) to the each of the identified one or more servers that store the application objects associated with the identified multiple tablets.
- the application objects and tablet access objects associated with the identified multiple tablets are used ( 736 ) to execute the requests.
- the method 700 co-locates application-specific processing with access to the data to be processed, thereby providing an efficient way to process data stored in a table in a distributed computing system, while also enabling load balancing. While the method 700 includes a number of operations that appear to occur in a specific order, it should be apparent that the method 700 can include more or fewer operations, which can be executed serially or in parallel (e.g., using parallel processors or a multi-threading environment), an order of two or more operations may be changed and/or two or more operations may be combined into a single operation. For example, operation 708 may be performed in parallel with operations 710 - 712 .
- FIGS. 7 E- 7 F are flow diagrams illustrating a method 750 of accessing data in multiple tables in accordance with some embodiments.
- the method 750 is performed in a distributed computing system (e.g., a system 100 , FIG. 1 , such as a system 440 , FIG. 2 ) that includes multiple servers (e.g., multiple servers 106 , FIG. 1 , such as servers 600 , FIG. 6 ).
- first and second table data structures e.g., tables 200 , FIG. 2
- the file system is implemented in a cluster of servers that includes the plurality of servers.
- Each table data structure includes a plurality of tablets that correspond to distinct non-overlapping table portions.
- the tablets correspond to distinct ranges of rows, as illustrated for tablets 208 - 1 through 208 -L ( FIG. 2 ).
- the first and second table data structures have distinct schemas.
- a plurality of tablet access objects (e.g., objects 410 , FIG. 4 A or 4 B ), a plurality of first application objects (e.g., objects 412 -A, FIG. 4 A or 4 B ), and a plurality of second application objects (e.g., objects 412 -B, FIG. 4 A or 4 B ) are stored ( 754 ) in a plurality of servers.
- Each tablet access object is associated with either a distinct first application object or a distinct second application object.
- Each first application object and associated tablet access object are associated with and distinct from a respective tablet of the first table data structure.
- Each first application object corresponds to a distinct instantiation of a first application associated with the first table data structure.
- Each second application object and associated tablet access object are associated with and distinct from a respective tablet of the second table data structure.
- Each second application object corresponds to a distinct instantiation of a second application associated with the second table data structure.
- each application object is stored on the same server as its associated tablet access object. In some embodiments, one or more tablets are stored on a different server than their associated tablet access objects and application objects.
- the tablet access objects and associated first or second application objects are redistributed ( 756 ) among the plurality of servers in accordance with a first load-balancing criterion.
- the master process 402 FIGS. 4 A- 4 B ) directs redistribution of the objects 410 and 412 among servers 106 in accordance with one or more load-balancing criteria.
- redistributing the tablet access objects and associated application objects among the plurality of servers does not modify storage locations of tablets associated with the redistributed objects.
- a first request directed to a first tablet in the first table data structure is received ( 758 ) from a first client (e.g., a client 102 , FIG. 1 ).
- the first client is distinct from the first plurality of servers.
- the first client may be a particular server in the plurality of servers.
- the tablet access object associated with the first tablet is used to perform ( 760 , FIG. 7 F ) a data access operation on the first tablet and the first application object associated with the first tablet is used to perform an additional computational operation to produce a result to be returned to the first client.
- a second request directed to a second tablet in the second table data structure is received ( 762 ) from a second client (e.g., a client 102 , FIG. 1 ).
- the second client is distinct from the first plurality of servers.
- the second client may be a particular server in the plurality of servers.
- the tablet access object associated with the second tablet is used to perform ( 764 ) a data access operation on the second tablet and the second application object associated with the second tablet is used to perform an additional computational operation to produce a result to be returned to the second client.
- the method 750 co-locates, for multiple tables, application-specific processing with access to the data to be processed, thereby providing an efficient way to process data stored in a table in a distributed computing system, while also enabling load balancing. While the method 750 includes a number of operations that appear to occur in a specific order, it should be apparent that the method 750 can include more or fewer operations, which can be executed serially or in parallel (e.g., using parallel processors or a multi-threading environment), an order of two or more operations may be changed and/or two or more operations may be combined into a single operation. For example, operation 756 may be performed in parallel with operations 758 - 760 and also with operations 762 - 764 .
Abstract
Description
-
- an
operating system 614 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network communication module 616 that is used for connecting theserver 600 to other computers via the one or more communication network interfaces 604 and one or more communication networks, such as a local area network, the Internet, other wide area networks, metropolitan area networks, and so on; - a
master module 618 for monitoring loads on servers and on tablet access objects and their associated application objects, and for performing load-balancing operations such as splitting or merging tablets and moving tablet access objects and/or their associated application objects from one server to another server; - a
metadata access module 622 for accessing metadata regarding tables and their constituent tablets; - a
tablet server module 626 for controlling access to tablets and, in some embodiments, for performing additional computational operations in response to client requests; - one or
more application modules 632 corresponding to applications associated with respective tables, for performing computational operations in response to client requests; and - a
file system 636 for storing tables or constituent portions of tables (e.g., tablets);
- an
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/671,068 US11822521B2 (en) | 2008-10-08 | 2022-02-14 | Associating application-specific methods with tables used for data storage |
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/247,984 US8484351B1 (en) | 2008-10-08 | 2008-10-08 | Associating application-specific methods with tables used for data storage |
US13/938,126 US9870371B2 (en) | 2008-10-08 | 2013-07-09 | Associating application-specific methods with tables used for data storage |
US15/868,928 US10740301B2 (en) | 2008-10-08 | 2018-01-11 | Associating application-specific methods with tables used for data storage |
US16/927,264 US11281631B2 (en) | 2008-10-08 | 2020-07-13 | Associating application-specific methods with tables used for data storage |
US17/671,068 US11822521B2 (en) | 2008-10-08 | 2022-02-14 | Associating application-specific methods with tables used for data storage |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/927,264 Continuation US11281631B2 (en) | 2008-10-08 | 2020-07-13 | Associating application-specific methods with tables used for data storage |
Publications (2)
Publication Number | Publication Date |
---|---|
US20220222219A1 US20220222219A1 (en) | 2022-07-14 |
US11822521B2 true US11822521B2 (en) | 2023-11-21 |
Family
ID=48701537
Family Applications (5)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/247,984 Active 2032-04-14 US8484351B1 (en) | 2008-10-08 | 2008-10-08 | Associating application-specific methods with tables used for data storage |
US13/938,126 Active 2031-01-06 US9870371B2 (en) | 2008-10-08 | 2013-07-09 | Associating application-specific methods with tables used for data storage |
US15/868,928 Active 2028-11-02 US10740301B2 (en) | 2008-10-08 | 2018-01-11 | Associating application-specific methods with tables used for data storage |
US16/927,264 Active US11281631B2 (en) | 2008-10-08 | 2020-07-13 | Associating application-specific methods with tables used for data storage |
US17/671,068 Active US11822521B2 (en) | 2008-10-08 | 2022-02-14 | Associating application-specific methods with tables used for data storage |
Family Applications Before (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/247,984 Active 2032-04-14 US8484351B1 (en) | 2008-10-08 | 2008-10-08 | Associating application-specific methods with tables used for data storage |
US13/938,126 Active 2031-01-06 US9870371B2 (en) | 2008-10-08 | 2013-07-09 | Associating application-specific methods with tables used for data storage |
US15/868,928 Active 2028-11-02 US10740301B2 (en) | 2008-10-08 | 2018-01-11 | Associating application-specific methods with tables used for data storage |
US16/927,264 Active US11281631B2 (en) | 2008-10-08 | 2020-07-13 | Associating application-specific methods with tables used for data storage |
Country Status (1)
Country | Link |
---|---|
US (5) | US8484351B1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8484351B1 (en) * | 2008-10-08 | 2013-07-09 | Google Inc. | Associating application-specific methods with tables used for data storage |
US9141916B1 (en) | 2012-06-29 | 2015-09-22 | Google Inc. | Using embedding functions with a deep network |
US9501483B2 (en) * | 2012-09-18 | 2016-11-22 | Mapr Technologies, Inc. | Table format for map reduce system |
US10534645B2 (en) * | 2016-11-23 | 2020-01-14 | Wipro Limited | Method and system for executing processes in a virtual storage area network |
US11375012B2 (en) * | 2020-06-15 | 2022-06-28 | Dell Products, L.P. | Method and apparatus for determining feature usage on a set of storage systems deployed across multiple customer sites |
Citations (61)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5386559A (en) | 1992-07-16 | 1995-01-31 | International Business Machines Corporation | Variant domains and variant maps in a versioned database management system |
US5414834A (en) | 1988-04-08 | 1995-05-09 | International Business Machines Corporation | Method and apparatus for data storage and interchange using a relational database table, and a data record for use in connection therewith |
US5668352A (en) | 1994-12-21 | 1997-09-16 | At&T Global Information Solutions Company | Data compression in digitizing tablet |
US5729730A (en) | 1995-03-28 | 1998-03-17 | Dex Information Systems, Inc. | Method and apparatus for improved information storage and retrieval system |
US5794228A (en) | 1993-04-16 | 1998-08-11 | Sybase, Inc. | Database system with buffer manager providing per page native data compression and decompression |
US5828833A (en) * | 1996-08-15 | 1998-10-27 | Electronic Data Systems Corporation | Method and system for allowing remote procedure calls through a network firewall |
US5856826A (en) | 1995-10-06 | 1999-01-05 | Apple Computer, Inc. | Method and apparatus for organizing window groups and windows in a table |
US5918225A (en) | 1993-04-16 | 1999-06-29 | Sybase, Inc. | SQL-based database system with improved indexing methodology |
US5937402A (en) | 1997-06-19 | 1999-08-10 | Ontos, Inc. | System for enabling access to a relational database from an object oriented program |
US5946699A (en) | 1996-08-05 | 1999-08-31 | Kabushiki Kaisha Toshiba | Version management apparatus and method for data having link structure |
US5953503A (en) | 1997-10-29 | 1999-09-14 | Digital Equipment Corporation | Compression protocol with multiple preset dictionaries |
US6006232A (en) | 1997-10-21 | 1999-12-21 | At&T Corp. | System and method for multirecord compression in a relational database |
US6169990B1 (en) | 1996-03-02 | 2001-01-02 | University Of Strathclyde | Databases |
US6182121B1 (en) | 1995-02-03 | 2001-01-30 | Enfish, Inc. | Method and apparatus for a physical storage architecture having an improved information storage and retrieval system for a shared file environment |
US6233580B1 (en) | 1987-05-26 | 2001-05-15 | Xerox Corporation | Word/number and number/word mapping |
US6289358B1 (en) | 1998-04-15 | 2001-09-11 | Inktomi Corporation | Delivering alternate versions of objects from an object cache |
US6298342B1 (en) | 1998-03-16 | 2001-10-02 | Microsoft Corporation | Electronic database operations for perspective transformations on relational tables using pivot and unpivot columns |
US20020038301A1 (en) | 2000-03-09 | 2002-03-28 | International Business Machines Corporation | Speculative caching of individual fields in a distributed object system |
US6374256B1 (en) | 1997-12-22 | 2002-04-16 | Sun Microsystems, Inc. | Method and apparatus for creating indexes in a relational database corresponding to classes in an object-oriented application |
US6430549B1 (en) | 1998-07-17 | 2002-08-06 | Electronic Data Systems Corporation | System and method for selectivety defining access to application features |
US6446092B1 (en) | 1996-11-01 | 2002-09-03 | Peerdirect Company | Independent distributed database system |
US6453313B1 (en) | 1999-07-06 | 2002-09-17 | Compaq Information Technologies Group, L.P. | Database management system and method for dequeuing rows published to a database table |
US20020147849A1 (en) * | 2001-04-05 | 2002-10-10 | Chung-Kei Wong | Delta encoding using canonical reference files |
US20020178171A1 (en) | 2001-05-16 | 2002-11-28 | Reengineering Llc | Semantic encoding and compression of database tables |
US6636870B2 (en) | 1999-10-25 | 2003-10-21 | Oracle Corporation | Storing multidimensional data in a relational database management system |
US20030200235A1 (en) | 2002-04-23 | 2003-10-23 | International Business Machines Corporation | System and method for item versioning in a content management system |
US20030204534A1 (en) | 2002-04-26 | 2003-10-30 | Oracle International Corporation | Techniques for managing what-if analysis of data managed by a relational database system |
US20040025035A1 (en) | 2000-10-23 | 2004-02-05 | Rais Jean-Claude | Contactless electronic identification system |
US6725225B1 (en) | 1999-09-29 | 2004-04-20 | Mitsubishi Denki Kabushiki Kaisha | Data management apparatus and method for efficiently generating a blocked transposed file and converting that file using a stored compression method |
US6728727B2 (en) | 1999-07-19 | 2004-04-27 | Fujitsu Limited | Data management apparatus storing uncomplex data and data elements of complex data in different tables in data storing system |
US20040148301A1 (en) | 2003-01-24 | 2004-07-29 | Mckay Christopher W.T. | Compressed data structure for a database |
US20040225673A1 (en) | 2003-05-05 | 2004-11-11 | International Business Machines Corporation | Range-clustered tables in a database management system |
US20040236728A1 (en) | 2003-04-07 | 2004-11-25 | Newman Gary H. | Grouping of computers in a computer information database system |
US20050071336A1 (en) | 2003-09-30 | 2005-03-31 | Microsoft Corporation | Systems and methods for logging and recovering updates to data structures |
US6879984B2 (en) | 2000-10-05 | 2005-04-12 | Clareos, Inc. | Analytical database system that models data to speed up and simplify data analysis |
US20050120293A1 (en) | 2003-12-01 | 2005-06-02 | International Business Machines Corporation | Table column spanning |
US6909384B2 (en) | 2002-01-31 | 2005-06-21 | Microsoft Corporation | Generating and searching compressed data |
US20050149584A1 (en) | 2004-01-07 | 2005-07-07 | International Business Machines Corporation | Transparent archiving |
US20050210253A1 (en) * | 2004-01-30 | 2005-09-22 | Canon Kabushiki Kaisha | Secure communication method, terminal device, authentication server, computer program, and computer-readable recording medium |
US20050219076A1 (en) | 2004-03-22 | 2005-10-06 | Michael Harris | Information management system |
US20050278384A1 (en) * | 2004-06-10 | 2005-12-15 | Oracle International Corporation | External authentication against a third-party directory |
US20050283615A1 (en) * | 2004-06-22 | 2005-12-22 | Avaya Technology Corp. | Method and apparatus for user authentication and authorization |
US7013304B1 (en) | 1999-10-20 | 2006-03-14 | Xerox Corporation | Method for locating digital information files |
US7024414B2 (en) | 2001-08-06 | 2006-04-04 | Sensage, Inc. | Storage of row-column data |
US7028039B2 (en) | 2001-01-18 | 2006-04-11 | Hewlett-Packard Development Company, L.P. | System and method for storing connectivity information in a web database |
US20060089992A1 (en) * | 2004-10-26 | 2006-04-27 | Blaho Bruce E | Remote computing systems and methods for supporting multiple sessions |
US20060123035A1 (en) | 2004-12-06 | 2006-06-08 | Ivie James R | Applying multiple compression algorithms in a database system |
US20060129609A1 (en) | 2002-06-05 | 2006-06-15 | Datasplice, Llc | Database synchronization using change log |
US20060143149A1 (en) | 2004-12-28 | 2006-06-29 | Li Hong C | Deriving and using data access control information to determine whether to permit derivations of data elements |
US7085768B2 (en) | 2001-12-17 | 2006-08-01 | Oracle International Corporation | Data storage system |
US7103608B1 (en) | 2002-05-10 | 2006-09-05 | Oracle International Corporation | Method and mechanism for storing and accessing data |
US20070033354A1 (en) * | 2005-08-05 | 2007-02-08 | Michael Burrows | Large scale data storage in sparse tables |
US7181457B2 (en) | 2003-05-28 | 2007-02-20 | Pervasive Software, Inc. | System and method for utilizing compression in database caches to facilitate access to database information |
US20070091899A1 (en) | 2005-10-21 | 2007-04-26 | Cisco Technology, Inc., A California Corporation | Data structure for storing and accessing multiple independent sets of forwarding information |
US7237062B2 (en) | 2004-04-02 | 2007-06-26 | Seagate Technology Llc | Storage media data structure system and method |
US20080084880A1 (en) | 2006-10-10 | 2008-04-10 | Pranav Dharwadkar | Two-level load-balancing of network traffic over an MPLS network |
EP0877327B1 (en) | 1997-04-07 | 2008-07-23 | International Business Machines Corporation | Method and apparatus for performing a join query in a database system |
US20080222646A1 (en) * | 2007-03-06 | 2008-09-11 | Lev Sigal | Preemptive neural network database load balancer |
US20090019013A1 (en) * | 2007-06-29 | 2009-01-15 | Allvoices, Inc. | Processing a content item with regard to an event |
US20090091899A1 (en) | 2007-09-26 | 2009-04-09 | Sanyo Electric Co., Ltd. | Circuit Device |
US8484351B1 (en) | 2008-10-08 | 2013-07-09 | Google Inc. | Associating application-specific methods with tables used for data storage |
-
2008
- 2008-10-08 US US12/247,984 patent/US8484351B1/en active Active
-
2013
- 2013-07-09 US US13/938,126 patent/US9870371B2/en active Active
-
2018
- 2018-01-11 US US15/868,928 patent/US10740301B2/en active Active
-
2020
- 2020-07-13 US US16/927,264 patent/US11281631B2/en active Active
-
2022
- 2022-02-14 US US17/671,068 patent/US11822521B2/en active Active
Patent Citations (69)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6233580B1 (en) | 1987-05-26 | 2001-05-15 | Xerox Corporation | Word/number and number/word mapping |
US5414834A (en) | 1988-04-08 | 1995-05-09 | International Business Machines Corporation | Method and apparatus for data storage and interchange using a relational database table, and a data record for use in connection therewith |
US5386559A (en) | 1992-07-16 | 1995-01-31 | International Business Machines Corporation | Variant domains and variant maps in a versioned database management system |
US5794228A (en) | 1993-04-16 | 1998-08-11 | Sybase, Inc. | Database system with buffer manager providing per page native data compression and decompression |
US5918225A (en) | 1993-04-16 | 1999-06-29 | Sybase, Inc. | SQL-based database system with improved indexing methodology |
US5668352A (en) | 1994-12-21 | 1997-09-16 | At&T Global Information Solutions Company | Data compression in digitizing tablet |
US6182121B1 (en) | 1995-02-03 | 2001-01-30 | Enfish, Inc. | Method and apparatus for a physical storage architecture having an improved information storage and retrieval system for a shared file environment |
US5729730A (en) | 1995-03-28 | 1998-03-17 | Dex Information Systems, Inc. | Method and apparatus for improved information storage and retrieval system |
US5856826A (en) | 1995-10-06 | 1999-01-05 | Apple Computer, Inc. | Method and apparatus for organizing window groups and windows in a table |
US6169990B1 (en) | 1996-03-02 | 2001-01-02 | University Of Strathclyde | Databases |
US5946699A (en) | 1996-08-05 | 1999-08-31 | Kabushiki Kaisha Toshiba | Version management apparatus and method for data having link structure |
US5828833A (en) * | 1996-08-15 | 1998-10-27 | Electronic Data Systems Corporation | Method and system for allowing remote procedure calls through a network firewall |
US6446092B1 (en) | 1996-11-01 | 2002-09-03 | Peerdirect Company | Independent distributed database system |
EP0877327B1 (en) | 1997-04-07 | 2008-07-23 | International Business Machines Corporation | Method and apparatus for performing a join query in a database system |
US5937402A (en) | 1997-06-19 | 1999-08-10 | Ontos, Inc. | System for enabling access to a relational database from an object oriented program |
US6006232A (en) | 1997-10-21 | 1999-12-21 | At&T Corp. | System and method for multirecord compression in a relational database |
US5953503A (en) | 1997-10-29 | 1999-09-14 | Digital Equipment Corporation | Compression protocol with multiple preset dictionaries |
US6374256B1 (en) | 1997-12-22 | 2002-04-16 | Sun Microsystems, Inc. | Method and apparatus for creating indexes in a relational database corresponding to classes in an object-oriented application |
US6298342B1 (en) | 1998-03-16 | 2001-10-02 | Microsoft Corporation | Electronic database operations for perspective transformations on relational tables using pivot and unpivot columns |
US6289358B1 (en) | 1998-04-15 | 2001-09-11 | Inktomi Corporation | Delivering alternate versions of objects from an object cache |
US6430549B1 (en) | 1998-07-17 | 2002-08-06 | Electronic Data Systems Corporation | System and method for selectivety defining access to application features |
US6453313B1 (en) | 1999-07-06 | 2002-09-17 | Compaq Information Technologies Group, L.P. | Database management system and method for dequeuing rows published to a database table |
US6728727B2 (en) | 1999-07-19 | 2004-04-27 | Fujitsu Limited | Data management apparatus storing uncomplex data and data elements of complex data in different tables in data storing system |
US6725225B1 (en) | 1999-09-29 | 2004-04-20 | Mitsubishi Denki Kabushiki Kaisha | Data management apparatus and method for efficiently generating a blocked transposed file and converting that file using a stored compression method |
US7013304B1 (en) | 1999-10-20 | 2006-03-14 | Xerox Corporation | Method for locating digital information files |
US6778996B2 (en) | 1999-10-25 | 2004-08-17 | Oracle International Corporation | Techniques for indexing into a row of a database table |
US6636870B2 (en) | 1999-10-25 | 2003-10-21 | Oracle Corporation | Storing multidimensional data in a relational database management system |
US6618737B2 (en) | 2000-03-09 | 2003-09-09 | International Business Machines Corporation | Speculative caching of individual fields in a distributed object system |
US20020038301A1 (en) | 2000-03-09 | 2002-03-28 | International Business Machines Corporation | Speculative caching of individual fields in a distributed object system |
US6879984B2 (en) | 2000-10-05 | 2005-04-12 | Clareos, Inc. | Analytical database system that models data to speed up and simplify data analysis |
US20040025035A1 (en) | 2000-10-23 | 2004-02-05 | Rais Jean-Claude | Contactless electronic identification system |
US7028039B2 (en) | 2001-01-18 | 2006-04-11 | Hewlett-Packard Development Company, L.P. | System and method for storing connectivity information in a web database |
US20020147849A1 (en) * | 2001-04-05 | 2002-10-10 | Chung-Kei Wong | Delta encoding using canonical reference files |
US20020178171A1 (en) | 2001-05-16 | 2002-11-28 | Reengineering Llc | Semantic encoding and compression of database tables |
US7024414B2 (en) | 2001-08-06 | 2006-04-04 | Sensage, Inc. | Storage of row-column data |
US7085768B2 (en) | 2001-12-17 | 2006-08-01 | Oracle International Corporation | Data storage system |
US6909384B2 (en) | 2002-01-31 | 2005-06-21 | Microsoft Corporation | Generating and searching compressed data |
US6937171B2 (en) | 2002-01-31 | 2005-08-30 | Microsoft Corporation | Generating and searching compressed data |
US7026964B2 (en) | 2002-01-31 | 2006-04-11 | Microsoft Corporation | Generating and searching compressed data |
US20030200235A1 (en) | 2002-04-23 | 2003-10-23 | International Business Machines Corporation | System and method for item versioning in a content management system |
US20030204534A1 (en) | 2002-04-26 | 2003-10-30 | Oracle International Corporation | Techniques for managing what-if analysis of data managed by a relational database system |
US7103608B1 (en) | 2002-05-10 | 2006-09-05 | Oracle International Corporation | Method and mechanism for storing and accessing data |
US20060129609A1 (en) | 2002-06-05 | 2006-06-15 | Datasplice, Llc | Database synchronization using change log |
US20040148301A1 (en) | 2003-01-24 | 2004-07-29 | Mckay Christopher W.T. | Compressed data structure for a database |
US20040236728A1 (en) | 2003-04-07 | 2004-11-25 | Newman Gary H. | Grouping of computers in a computer information database system |
US20040225673A1 (en) | 2003-05-05 | 2004-11-11 | International Business Machines Corporation | Range-clustered tables in a database management system |
US7103588B2 (en) | 2003-05-05 | 2006-09-05 | International Business Machines Corporation | Range-clustered tables in a database management system |
US7181457B2 (en) | 2003-05-28 | 2007-02-20 | Pervasive Software, Inc. | System and method for utilizing compression in database caches to facilitate access to database information |
US20050071336A1 (en) | 2003-09-30 | 2005-03-31 | Microsoft Corporation | Systems and methods for logging and recovering updates to data structures |
US20050120293A1 (en) | 2003-12-01 | 2005-06-02 | International Business Machines Corporation | Table column spanning |
US20050149584A1 (en) | 2004-01-07 | 2005-07-07 | International Business Machines Corporation | Transparent archiving |
US20050210253A1 (en) * | 2004-01-30 | 2005-09-22 | Canon Kabushiki Kaisha | Secure communication method, terminal device, authentication server, computer program, and computer-readable recording medium |
US20050219076A1 (en) | 2004-03-22 | 2005-10-06 | Michael Harris | Information management system |
US7237062B2 (en) | 2004-04-02 | 2007-06-26 | Seagate Technology Llc | Storage media data structure system and method |
US20050278384A1 (en) * | 2004-06-10 | 2005-12-15 | Oracle International Corporation | External authentication against a third-party directory |
US20050283615A1 (en) * | 2004-06-22 | 2005-12-22 | Avaya Technology Corp. | Method and apparatus for user authentication and authorization |
US20060089992A1 (en) * | 2004-10-26 | 2006-04-27 | Blaho Bruce E | Remote computing systems and methods for supporting multiple sessions |
US20060123035A1 (en) | 2004-12-06 | 2006-06-08 | Ivie James R | Applying multiple compression algorithms in a database system |
US20060143149A1 (en) | 2004-12-28 | 2006-06-29 | Li Hong C | Deriving and using data access control information to determine whether to permit derivations of data elements |
US20070033354A1 (en) * | 2005-08-05 | 2007-02-08 | Michael Burrows | Large scale data storage in sparse tables |
US20070091899A1 (en) | 2005-10-21 | 2007-04-26 | Cisco Technology, Inc., A California Corporation | Data structure for storing and accessing multiple independent sets of forwarding information |
US20080084880A1 (en) | 2006-10-10 | 2008-04-10 | Pranav Dharwadkar | Two-level load-balancing of network traffic over an MPLS network |
US20080222646A1 (en) * | 2007-03-06 | 2008-09-11 | Lev Sigal | Preemptive neural network database load balancer |
US20090019013A1 (en) * | 2007-06-29 | 2009-01-15 | Allvoices, Inc. | Processing a content item with regard to an event |
US20090091899A1 (en) | 2007-09-26 | 2009-04-09 | Sanyo Electric Co., Ltd. | Circuit Device |
US8484351B1 (en) | 2008-10-08 | 2013-07-09 | Google Inc. | Associating application-specific methods with tables used for data storage |
US9870371B2 (en) * | 2008-10-08 | 2018-01-16 | Google Llc | Associating application-specific methods with tables used for data storage |
US10740301B2 (en) * | 2008-10-08 | 2020-08-11 | Google Llc | Associating application-specific methods with tables used for data storage |
US11281631B2 (en) * | 2008-10-08 | 2022-03-22 | Google Llc | Associating application-specific methods with tables used for data storage |
Non-Patent Citations (20)
Title |
---|
Anonymous, Oracle 9i, database concepts, release 2 (9.2), part No. A96524-01, excerpt, chapters 2-3, Mar. 2002, 68 pgs. |
Anonymous, Oracle Database Cache Concepts and Administration Guide, Release 1.0.2.1, Feb. 2001, pp. ii-iv, 1-1 to 1-8 and 2-1 to 2-27. |
Anonymous, Oracle database performance tuning guide 10g release 1 (10.1), TOC, Chap 4, 7, 8, Dec. 2003, 98 pgs. |
Anonymous, Oracle9i Replication, An Oracle White Paper, Jun. 2001, pp. 1-15. |
Antoshenkov, G., "Dictionary-based Order Preserving String Compression," Feb. 1997, Springer-Verlag New York, Inc., vol. 6, Issue 1 pp. 26-39. |
Barroso, L., et al. "Memory System Characterization of Commercial Workloads," Proceedings of the 25th International Symposium on Computer Architecture, Barcelona, Jun. 1998, pp. 3-14. |
Bauer A. et al., Data-Warehouse-Systeme, Architektur Entwicklung Anwendung, Umsetzung Des Multidimensionalen Datenmodells, Jan. 1, 2001, Data-Warehouse-Systeme, Architektur Entwicklung Anwendung, Dpunkt.Verlag GmbH, Heidelberg, Germany, pp. 198-247,312-323, ISBN: 978-3-932588-76-1 (No English Translation Provided). |
Bell, Compression of Sparse Matrices by Arithmetic Coding, Data Compression Conference, 1998. DCC '98. Proceedings Snowbird, UT, USA Mar. 1-Apr. 1998, Los Alamitos, CA, USA IEEE Comput. Soc, US, Mar. 30 (Mar. 30. 1998), pp. 23-32. |
Bentley, J., et al., "Data Compression Using Long Common Strings," Proceedings of the IEEE Data Compression Conf., Mar. 1999, pp. 287-295. |
Bobrowski, Oracle8 architecture, passage, 1998, 9 pgs. |
Chang, F., "Bigtable: A Distributed Storage System for Structured Data," OSDI 2006: 7th USENIX Symposium on Operating Systems Design and Implementation, pp. 205-218. |
Chen, Z. et al., "Query Optimization in Compressed Database Systems," Year 2001, ACM, pp. 271-282. |
Elmasri, Database Security and Authorization, Chapter 23, Fundamentals of Database Systems, 2004, pp. 731-754. |
Elmasri, R., et al., Portions of Chapters 24 and 25 of Fundamentals of Database Systems, Addison-Wesley, Reading, MA, 2004, pp. 767-819. |
European Search Report, EP Application 08007412, dated Mar. 27, 2009, 2 pgs. |
Gamal-Eldin, M.S., et al., "Integrating Relational Databases with Support for Updates," Proceedings of 1988 Int'l Symposium on Databases in Parallel and Distributed Systems, Dec. 5, 1988, pp. 202-209. |
Google Inc., Extended ESR, EP 11190394.4, Feb. 29, 2012, 11 pgs. |
Google Inc., Office Action, EP 08007412.3, dated Feb. 29, 2012, 8 pgs. |
International Search Report and Written Opinion for International Application No. PCT/US2006/028236, dated Feb. 8, 2007, 12 pages. |
Kouramajian, V., et al., "Mapping of 2-D Temporal Extended ER models in Temporal Pint and NFNF Relational Models," Int'l Conf on the Entity-Relationship Approach, Amsterdam, Netherlands, Oct. 23, 1991, pp. 671-689. |
Also Published As
Publication number | Publication date |
---|---|
US8484351B1 (en) | 2013-07-09 |
US20180173722A1 (en) | 2018-06-21 |
US11281631B2 (en) | 2022-03-22 |
US20200341950A1 (en) | 2020-10-29 |
US20220222219A1 (en) | 2022-07-14 |
US9870371B2 (en) | 2018-01-16 |
US10740301B2 (en) | 2020-08-11 |
US20130297592A1 (en) | 2013-11-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11822521B2 (en) | Associating application-specific methods with tables used for data storage | |
US9223820B2 (en) | Partitioning data for parallel processing | |
US10248676B2 (en) | Efficient B-Tree data serialization | |
Vora | Hadoop-HBase for large-scale data | |
US11496588B2 (en) | Clustering layers in multi-node clusters | |
US10394782B2 (en) | Chord distributed hash table-based map-reduce system and method | |
US20140136510A1 (en) | Hybrid table implementation by using buffer pool as permanent in-memory storage for memory-resident data | |
US20130006993A1 (en) | Parallel data processing system, parallel data processing method and program | |
CN107180113B (en) | Big data retrieval platform | |
US20120131022A1 (en) | Methods and systems for merging data sets | |
CN113377868B (en) | Offline storage system based on distributed KV database | |
Elmeleegy et al. | Spongefiles: Mitigating data skew in mapreduce using distributed memory | |
US11093143B2 (en) | Methods and systems for managing key-value solid state drives (KV SSDS) | |
US11151081B1 (en) | Data tiering service with cold tier indexing | |
US20190073395A1 (en) | Metad search process for large scale storage system | |
WO2010039426A2 (en) | Storage tiers for database server system | |
US20150169623A1 (en) | Distributed File System, File Access Method and Client Device | |
US9703788B1 (en) | Distributed metadata in a high performance computing environment | |
US20210397373A1 (en) | Peer Storage Compute Sharing Using Memory Buffer | |
Zhao et al. | Toward efficient and flexible metadata indexing of big data systems | |
Kaneko et al. | A guideline for data placement in heterogeneous distributed storage systems | |
Khafagy | Indexed map-reduce join algorithm | |
KR101872414B1 (en) | Dynamic partitioning method for supporting load balancing of distributed RDF graph | |
Chang et al. | Resilient distributed computing platforms for big data analysis using Spark and Hadoop | |
Seera et al. | Leveraging mapreduce with column-oriented stores: Study of solutions and benefits |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DEAN, JEFFREY A.;GHEMAWAT, SANJAY;FIKES, ANDREW B.;AND OTHERS;REEL/FRAME:059012/0595Effective date: 20080916 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:059168/0706Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |