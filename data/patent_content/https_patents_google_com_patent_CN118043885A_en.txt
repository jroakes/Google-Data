CN118043885A - Contrast twin network for semi-supervised speech recognition - Google Patents
Contrast twin network for semi-supervised speech recognition Download PDFInfo
- Publication number
- CN118043885A CN118043885A CN202180102886.9A CN202180102886A CN118043885A CN 118043885 A CN118043885 A CN 118043885A CN 202180102886 A CN202180102886 A CN 202180102886A CN 118043885 A CN118043885 A CN 118043885A
- Authority
- CN
- China
- Prior art keywords
- speech recognition
- audio
- encoder
- output
- sequence
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 56
- 230000000052 comparative effect Effects 0.000 claims abstract description 35
- 238000013518 transcription Methods 0.000 claims abstract description 35
- 230000035897 transcription Effects 0.000 claims abstract description 35
- 230000002123 temporal effect Effects 0.000 claims abstract description 32
- 238000012549 training Methods 0.000 claims description 36
- 238000009826 distribution Methods 0.000 claims description 13
- 238000012545 processing Methods 0.000 claims description 11
- 238000013528 artificial neural network Methods 0.000 claims description 8
- 230000000873 masking effect Effects 0.000 claims description 8
- 230000004048 modification Effects 0.000 claims description 7
- 238000012986 modification Methods 0.000 claims description 7
- 230000015654 memory Effects 0.000 description 38
- 230000008569 process Effects 0.000 description 14
- 230000036961 partial effect Effects 0.000 description 12
- 238000004590 computer program Methods 0.000 description 8
- 239000013598 vector Substances 0.000 description 8
- 238000004891 communication Methods 0.000 description 7
- 238000010586 diagram Methods 0.000 description 6
- 238000003058 natural language processing Methods 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 4
- 238000010606 normalization Methods 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 230000007613 environmental effect Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 230000003595 spectral effect Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- ORILYTVJVMAKLC-UHFFFAOYSA-N Adamantane Natural products C1C(C2)CC3CC1CC2C3 ORILYTVJVMAKLC-UHFFFAOYSA-N 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 230000001143 conditioned effect Effects 0.000 description 1
- 238000013527 convolutional neural network Methods 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 239000012634 fragment Substances 0.000 description 1
- 238000002347 injection Methods 0.000 description 1
- 239000007924 injection Substances 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000001537 neural effect Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 230000002829 reductive effect Effects 0.000 description 1
- 230000008439 repair process Effects 0.000 description 1
- 230000004043 responsiveness Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Abstract
A method (400) includes receiving a plurality of unlabeled audio samples (303) corresponding to a spoken utterance (106) that is not paired with a corresponding transcription (308). At a target branch (310) of the comparative twin network (300), the method further includes generating a sequence of encoder outputs (312) for the plurality of unlabeled audio samples and modifying a temporal characteristic of the encoder outputs to generate a sequence of target branch outputs (316). At an enhancement branch (320) of the comparative twinning network, the method further includes performing enhancement on the unlabeled audio samples, generating a sequence of enhancement encoder outputs (326) for the enhanced unlabeled audio samples, and generating a prediction (329) of the sequence of target branch outputs generated at the target branch. The method further comprises determining an unsupervised loss term (330) and updating parameters of the audio encoder based on the unsupervised loss term.
Description
Technical Field
The present disclosure relates to a comparative twin (Siamese) network for semi-supervised speech recognition.
Background
Automatic Speech Recognition (ASR) systems attempt to provide accurate transcription of what a person speaks by taking an audio input and transcribing the audio input into text. In many instances, supervised learning is used to train an ASR system with a large amount of tag training data (including audio data and corresponding transcription). However, obtaining the large amount of tag training data required to train an ASR system is often difficult due to the amount of time, cost, and/or privacy issues associated with collecting the large tag training data set. Training an ASR system using unlabeled training data that includes only audio data may alleviate some of the difficulties of collecting large amounts of labeled training data.
Disclosure of Invention
One aspect of the present disclosure provides a comparative twinning network for training a speech recognition model. The comparative twin network includes an unsupervised subnetwork trained over a plurality of unlabeled audio samples corresponding to spoken utterances that are not paired with any corresponding transcription. The unsupervised subnetwork includes a target branch configured to: receiving as input to an audio encoder of a speech recognition model a sequence of acoustic frames extracted from unlabeled audio samples; and at each of the plurality of time steps, generating a target branch output for a corresponding acoustic frame in the sequence of acoustic frames input to the audio encoder at the corresponding time step. The unsupervised subnetwork further comprises an enhanced branch configured to: performing enhancement on a sequence of acoustic frames extracted from unlabeled audio samples to generate a sequence of enhanced acoustic frames; at each of a plurality of time steps, generating a higher order feature representation for a corresponding enhanced acoustic frame in the sequence of enhanced acoustic frames as an output from the audio encoder; and at each of the plurality of time steps, generating a prediction of a target branch output generated by the target branch at the corresponding time step using the higher-order feature representation output from the audio encoder at the corresponding time step. The unsupervised subnetwork is configured to: at each of the plurality of time steps, an unsupervised penalty term is determined based on the target branch output generated by the target branch at the corresponding time step and the predictions of the target branch generated by the enhanced branch at the corresponding time step. Here, the unsupervised subnetwork is further configured to update parameters of the audio encoder based on the unsupervised loss terms determined at each of the plurality of time steps.
Implementations of the disclosure may include one or more of the following optional features. In some embodiments, the unsupervised loss term comprises a contrast loss term. The enhancement performed on the sequence of acoustic frames may include temporal modification and masking. In some examples, the target branch is further configured to: at each of a plurality of time steps, a higher order feature representation for a corresponding acoustic frame in a sequence of acoustic frames input to the audio encoder at the corresponding time step is generated as an output from the audio encoder. Here, the target branch is configured to generate a target branch output for the corresponding acoustic frame by modifying the temporal characteristics of the higher-order feature representation. In these examples, modifying the temporal characteristics of the high-order feature representation may include: at each of a plurality of time steps, modifying a temporal characteristic of a higher-order feature representation generated as output from the audio encoder for the corresponding acoustic frame to match a temporal characteristic associated with a higher-order feature representation generated as output from the audio encoder for the corresponding enhanced acoustic frame at the corresponding time step.
In some implementations, the enhancement branch includes a prediction network of the transducer layer configured to, at each of a plurality of time steps: receiving as input a representation of higher-order features output from the audio encoder at corresponding time steps; and generating as output a prediction of the target branch output generated by the target branch at the corresponding time step. In some examples, the comparative twin network includes a supervisory subnetwork trained over a plurality of labeled audio samples corresponding to spoken utterances paired with corresponding transcriptions. In these examples, at each of the plurality of output steps for each tagged audio sample, the supervisory subnetwork is configured to generate a corresponding speech recognition result for the tagged audio sample using the speech recognition model; and determining a supervision loss term based on the corresponding speech recognition result for the tagged audio sample and the corresponding transcription of the tagged audio sample. Here, the supervision subnetwork updates parameters of the speech recognition model based on supervision loss terms determined at each of the plurality of output steps for each of the plurality of tagged audio samples.
The corresponding speech recognition results generated for the labeled audio samples using the speech recognition model may include a probability distribution over possible speech recognition hypotheses for the labeled audio samples at the corresponding output steps. In some examples, the supervisory subnetwork is configured to: parameters of the audio encoder of the speech recognition model are updated independently of the unsupervised network, and parameters of the speech recognition model are updated based on the supervised loss term. In other examples, the supervisory subnetwork is further configured to apply the data enhancement to at least one of the plurality of tagged audio samples input to the speech recognition model. In these other examples, the applied data enhancements include at least one of adding noise, adding reverberation, or manipulating timing.
In some implementations, the trained speech recognition model includes a Transducer-Transducer (T-T) model that includes an audio encoder configured to: receiving as input a sequence of acoustic frames extracted from audio data characterizing a spoken utterance; and generating a high-order feature representation for a corresponding acoustic frame in the sequence of acoustic frames at each of a plurality of time steps. In these embodiments, the T-T model further comprises: a tag encoder configured to receive as input a sequence of non-blank symbols output by the final softmax layer and generate a dense representation at each of a plurality of time steps; and a joint network configured to receive as inputs a high-order feature representation (ah t) generated by the audio encoder at each of the plurality of time steps and a dense representation (ih u) generated by the tag encoder at each of the plurality of time steps, and to generate a probability distribution over possible speech recognition hypotheses at the corresponding time step at each of the plurality of time steps. Here, the audio encoder includes a neural network having a stack of stride convolutional layers and transform layers.
Another aspect of the present disclosure provides a computer-implemented method that, when executed on data processing hardware, causes the data processing hardware to perform operations for training a speech recognition model using a comparative twin network. The operation includes: a plurality of unlabeled audio samples corresponding to spoken utterances that are not paired with corresponding transcriptions are received. At a target branch of a comparative twin network, operations include: generating a sequence of encoder outputs for a plurality of unlabeled audio samples using an audio encoder of a speech recognition model; and modifying the temporal characteristics of the encoder output to generate a sequence of target branch outputs. At an enhanced branch of a comparative twin network, operations include: performing enhancement on unlabeled audio samples; generating a sequence of enhancement encoder outputs for enhanced unlabeled audio samples using an audio encoder of a speech recognition model; and generating a prediction of the sequence of target branch outputs generated at the target branch using a prediction network configured to receive the sequence of enhancement encoder outputs. The operations further include determining an unsupervised penalty term based on the target branch output generated at the target branch and the predictions of the sequence of target branch outputs generated at the enhanced branch. The operations further include updating parameters of the audio encoder based on the unsupervised loss term.
Implementations of the disclosure may include one or more of the following optional features. In some embodiments, the unsupervised loss term comprises a contrast loss term. Performing enhancement on the unlabeled audio samples may include performing temporal modification and masking on the unlabeled audio samples. In some examples, the operations further comprise generating a high-order feature representation for the plurality of unlabeled audio samples as an output from the audio encoder. In these examples, modifying the temporal characteristics of the encoder output to generate the sequence of target branch outputs includes: the temporal characteristics of the encoder output generated as output from the audio encoder are modified to match the temporal characteristics associated with the sequence of enhancement encoder outputs from the audio encoder. In some implementations, the operations further comprise: receiving a sequence of enhancement encoder outputs as input to a prediction network of a transducer layer of an enhancement branch; and generating a prediction of the sequence of target branch outputs generated at the target branch as an output from the prediction network of the transducer layer of the enhanced branch.
In some examples, the operations further comprise: receiving a plurality of labeled audio samples corresponding to a spoken utterance paired with a corresponding transcription; generating a speech recognition result for the marked audio sample using the speech recognition model; determining a supervision loss term based on the speech recognition result for the tagged audio sample and the corresponding transcription of the tagged audio sample; and updating parameters of the speech recognition model based on the supervised loss term. In these examples, the operations may further include: parameters of the speech recognition model are updated based on the supervised loss terms, independent of updating parameters of the audio encoder based on the unsupervised loss terms. Optionally, the operations further comprise applying data enhancement to at least one of the marked audio samples. Here, applying the data enhancement may include at least one of adding noise, adding reverberation, or manipulating timing.
In some implementations, the speech recognition model includes a Transducer-Transducer (T-T) model, and the operations further include: receiving as input to an audio encoder of a T-T model a plurality of unlabeled audio samples corresponding to spoken utterances that are not paired with corresponding transcriptions; generating, by the audio encoder, a sequence of acoustic frames extracted from audio data characterizing the spoken utterance at each of a plurality of time steps; receiving as input to the tag encoder of the T-T model a sequence of non-blank symbols output by the final softmax layer; and generating, by the tag encoder, a dense representation at each of the plurality of time steps. In these embodiments, the operations further comprise: receiving as input to the joint network of T-T models a high-order feature representation generated by the audio encoder at each of a plurality of time steps and a dense representation generated by the audio encoder at each of the plurality of time steps; and generating, by the federated network, a probability distribution over possible speech recognition hypotheses at each of a plurality of time steps. Here, the audio encoder includes a neural network having a stack of stride convolutional layers and transform layers.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic illustration of a speech environment in which an example speech recognition model is implemented.
FIG. 2 is a schematic diagram of the example speech recognition model of FIG. 1.
FIG. 3A is a schematic diagram of a supervised portion of a comparative twin network performing a semi-supervised training process for a speech recognition model.
FIG. 3B is a schematic diagram of an unsupervised portion of a comparative twin network performing a semi-supervised training process for a speech recognition model.
FIG. 4 is a flow chart of an example operational arrangement of a method of training a speech recognition model using a comparative twin network.
FIG. 5 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Automatic Speech Recognition (ASR) systems are typically trained using supervised training techniques that utilize tag training data. The tag training data includes voice audio data and corresponding transcriptions of the voice. Collecting large amounts of labeled training data is often difficult due to the associated cost, time, and privacy issues of the user required to collect the training data. In some examples, the ASR system is trained using unlabeled training data that includes only speech audio data without any corresponding transcription. In these examples, the ASR may train the speech recognition system with only unlabeled training data (i.e., self-supervised training), or may train the speech recognition system with unlabeled training data in addition to the labeled training data (i.e., semi-supervised training).
Embodiments herein are directed to a comparative twin network that trains a speech recognition model using semi-supervised training techniques. The twinning network includes a supervisory subnetwork that trains the speech recognition model using the labeled audio samples (including utterances and corresponding transcriptions). That is, the supervisory subnetwork receives acoustic frames extracted from the marked audio samples and predicts speech recognition results. Thereafter, the supervising subnetwork determines a penalty by comparing the predicted speech recognition result with the corresponding transcription, and updates the speech recognition model based on the penalty.
The twin network also includes an unsupervised subnetwork that trains speech recognition using unlabeled audio samples. The unsupervised subnetwork may train the speech recognition model in addition to or instead of the supervised subnetwork. The unsupervised subnetwork includes a target branch that receives acoustic frames from unlabeled audio samples and generates a target branch output for each acoustic frame. The unsupervised subnetwork also includes an enhancement branch that performs enhancement on acoustic frames from unlabeled audio samples and uses the enhanced acoustic frames to generate high-order feature representations (i.e., "encoder outputs"). Thus, the enhanced branch uses the high-order feature representation to predict the target branch output generated by the target branch. Using the target branch output from the target branch and the prediction of the target branch output by the enhanced branch, the unsupervised subnetwork determines an unsupervised loss term and updates parameters of the audio encoder of the speech recognition model based on the unsupervised loss term.
Fig. 1 is an example of a speech environment 100. In the speech environment 100, the manner in which the user 104 interacts with a computing device, such as the user device 10, may be through speech input. The user device 10 is configured to capture sound (e.g., streaming audio data) from one or more users 104 within the speech environment 100. Here, the streaming audio data may refer to the spoken utterance 106 of the user 104 that serves as an audible query, a command to the user device 10, or an audible communication captured by the user device 10. The speech-enabled system of the user device 10 may respond to the query or command by answering the query and/or causing the command to be executed/fulfilled by one or more downstream applications.
User device 10 may correspond to any computing device associated with user 104 and capable of receiving audio data. Some examples of user devices 10 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smartwatches), smart appliances, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc. The user device 10 includes data processing hardware 12 and memory hardware 14 in communication with the data processing hardware 12 and storing instructions that, when executed by the data processing hardware 12, cause the data processing hardware 12 to perform one or more operations. The user device 10 further comprises an audio system 16, the audio system 16 having: an audio capturing device (e.g., microphone) 16, 16a for capturing and converting spoken utterances 106 within the speech environment 100 into electrical signals; and a voice output device (e.g., speaker) 16, 16b for conveying audible audio signals (e.g., as output audio data from the user device 10). Although in the illustrated example the user device 10 implements a single audio capture device 16a, the user device 10 may implement an array of audio capture devices 16a without departing from the scope of the disclosure, whereby one or more capture devices 16a in the array may not physically reside on the user device 10, but communicate with the audio system 16.
In the speech environment 100, an Automatic Speech Recognition (ASR) system 118 implementing the speech recognition model 200 resides on the user device 10 of the user 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud computing environment) in communication with the user device 10 via the network 40. The user device 10 and/or the remote computing device (i.e., remote server) 60 also includes an audio subsystem 108, the audio subsystem 108 being configured to receive the utterance 106 spoken by the user 104 and captured by the audio capture device 16a, and to convert the utterance 106 into a corresponding digital format associated with the input acoustic frame 110 that can be processed by the ASR system 118. In the illustrated example, the user speaks the respective utterance 106 and the audio subsystem 108 converts the utterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to the ASR system 118. Thereafter, the speech recognition model 200 receives as input the audio data 110 corresponding to the utterance 106 and generates/predicts as output a corresponding transcription 120 (e.g., speech recognition results/hypotheses) of the utterance 106. As described in more detail below, the speech recognition model 200 may include a Transducer-Transducer (T-T) model 200 that is trained with a variable look-ahead audio context to allow the T-T model 200 to set different durations of the look-ahead audio context when performing speech recognition during inference based on how sensitive the query specified by the utterance 106 is to delay and/or how tolerant the user 106 is to delay. For example, digital assistant application 50 executing on user device 10 may need to stream speech recognition such that it appears on screen as soon as a word, word segment, and/or single character is spoken. In addition, the user 104 of the user device 10 may also have a low tolerance for delay in issuing a query to be executed by the digital assistant application 50. In such a scenario, where minimizing speech recognition latency is preferred, the speech recognition model 200 may apply zero or minimal look-ahead audio context (also referred to as "correct context") to provide streaming transcription capability in real-time as the user 104 speaks the speech 106. On the other hand, when the user has a higher tolerance to speech recognition delays and/or the utterance 106 to be recognized is associated with long form speech, the same speech recognition model 200 may apply a duration of the look-ahead audio context sufficient to provide accurate transcription 120, but incur increased delays based on the duration of the look-ahead audio context. Thus, the ASR system 118 may implement only a single speech recognition model 200 for multiple different speech recognition tasks to provide both streaming and non-streaming transcription capabilities, without having to utilize separate ASR models on a task-by-task basis.
In some implementations, the speech recognition model 200 performs both streaming and non-streaming speech recognition on the audio data 110 in parallel. For example, in the illustrated example, the speech recognition model 200 performs streaming speech recognition on the audio data 110 in parallel to produce partial speech recognition results 120, 120a, and non-streaming speech recognition on the same audio data 110 to produce final speech recognition results 120, 120b. Notably, the speech recognition model 200 can use a first look-ahead audio context that can be set to zero (or about 240 milliseconds) to produce the partial speech recognition result 120a and a second look-ahead audio context that is longer in duration than the first look-ahead audio context to produce the final speech recognition result 120b. Thus, the final speech recognition result 120b for the input utterance 106 may be delayed relative to the partial speech recognition result 120a for the input utterance by a duration based on the difference between the second look-ahead audio context and the first look-ahead audio context.
The user device 10 and/or the remote computing device 60 also executes a user interface generator 107 configured to present a representation of the transcription 120 of the utterance 106 to the user 104 of the user device 10. As described in more detail below, the user interface generator 107 may stream the partial speech recognition result 120a during time 1 and then display the final speech recognition result 120b during time 2. In some configurations, the transcript 120 output from the ASR system 118 is processed to execute the user command/query specified by the utterance 106, for example, by a Natural Language Understanding (NLU) module executing on the user device 10 or the remote computing device 60. Additionally or alternatively, a text-to-speech system (not shown) (e.g., executing on any combination of user device 10 or remote computing device 60) may convert the transcription into synthesized speech for audible output by user device 10 and/or another device.
In the illustrated example, the user 104 interacts with a program or application 50 (e.g., a digital assistant application 50) of the user device 10 using the ASR system 118. For example, fig. 1 depicts user 104 in communication with digital assistant application 50, and digital assistant application 50 displays digital assistant interface 18 on a screen of user device 10 to depict a conversation between user 104 and digital assistant application 50. In this example, user 104 asks digital assistant application 50, "WHAT TIME IS THE concert tonight? (this evening concert is a few o' clock. This problem from the user 104 is the spoken utterance 106 captured by the audio capturing device 16a and processed by the audio system 16 of the user device 10. In this example, the audio system 16 receives the spoken utterance 106 and converts it into an acoustic frame 110 for input to the ASR system 118.
Continuing with the example, the speech recognition model 200 encodes the acoustic frames 110 using the first look-ahead audio context while receiving acoustic frames (i.e., audio data) 110 corresponding to the utterance 106 while the user 104 is speaking, and then decodes the encoded acoustic frames 110 into partial speech recognition results 120a using the first look-ahead audio context. During time 1, user interface generator 107 presents a representation of the partial speech recognition result 120a of utterance 106 to user 104 of user device 10 via digital assistant interface 18 in a streaming manner such that words, word fragments, and/or single characters appear on the screen as soon as they are spoken. In some examples, the first look-ahead audio context is equal to zero.
In parallel, and after receiving all acoustic frames 110 corresponding to the utterance 106, the speech recognition model 200 encodes all acoustic frames 110 corresponding to the utterance 106 using the second look-ahead audio context, and then decodes the acoustic frames 110 into the final speech recognition result 120b using the second look-ahead audio context. The duration of the second look-ahead audio context may be 1.2 seconds, 2.4 seconds, or any other duration. In some examples, an indication, such as an indication indicating that the user 104 has completed speaking the end point of the utterance 106, triggers the speech recognition model 200 to encode all of the acoustic frames 110 using the second look-ahead audio context. During time 2, user interface generator 107 presents a representation of final speech recognition result 120b of utterance 106 to user 104 of user device 10 via digital assistant interface 18. In some implementations, the user interface generator 107 replaces the representation of the partial speech recognition result 120a with a representation of the final speech recognition result 120b. For example, since the final speech recognition result 120b is considered more accurate than the partial speech recognition result 120a that would have been produced without utilizing the look-ahead audio context, the final speech recognition result 120b that is ultimately displayed as transcription 120 may repair any items that may have been incorrectly recognized in the partial speech recognition result 120 a. In this example, the streaming partial speech recognition result 120a output by the speech recognition model 200 and displayed on the screen of the user device 10 at time 1 is associated with low latency and provides the user 104 with responsiveness in which his/her query is being processed, while the final speech recognition result 120b output by the speech recognition model 200 and displayed on the screen at time 2 utilizes the look-ahead audio context to improve speech recognition quality in terms of accuracy, but latency increases. However, because the partial speech recognition result 120a is displayed when the user speaks the speech 106, the user 104 does not notice the higher latency associated with generating and ultimately displaying the final recognition result.
In the example shown in fig. 1, digital assistant application 50 may use natural language processing to respond to questions posed by user 104. Natural language processing generally refers to the process of interpreting a written language (e.g., partial speech recognition results 120a and/or final speech recognition results 120 b) and determining whether the written language suggests any actions. In this example, the digital assistant application 50 uses natural language processing to identify that the problem from the user 104 relates to the user's calendar and more particularly to a concert on the user's calendar. By identifying these details using natural language processing, the automated assistant returns a response 19 to the user's query, where the response 19 indicates "Venue doors open at 6:30PM and concert starts at 8pm" (the venue gate opens at 6:30pm, the concert starts at 8 pm) ". In some configurations, natural language processing occurs on a remote server 60 in communication with the data processing hardware 12 of the user device 10.
Referring to fig. 2, the speech recognition model 200 may provide end-to-end (E2E) speech recognition by integrating acoustic, pronunciation, and language models into a single neural network, and does not require a dictionary or separate text normalization components. Various structures and optimization mechanisms may provide increased accuracy and reduced model training time. In some implementations, the speech recognition model 200 includes a Transducer-Transducer (T-T) model architecture that complies with latency constraints associated with interactive applications. The T-T model 200 may include the T-T model 200 described in U.S. patent application Ser. No. 17/210,465, filed 3/23 at 2021, the contents of which are incorporated herein by reference in their entirety. The T-T model 200 provides a small computational footprint and utilizes less memory requirements than conventional ASR architectures, making the T-T model architecture suitable for performing speech recognition entirely on the user device 10 (e.g., without requiring communication with the remote server 60). The T-T model 200 includes an audio encoder 210, a tag encoder 220, and a joint network 230. An audio encoder 210, substantially similar to an Acoustic Model (AM) in a conventional ASR system, includes a stacked neural network with a stride convolutional layer 212 (fig. 3) and a transducer layer 214 (fig. 3). For example, the audio encoder 210 reads a sequence x= (x 1,x2,…,xT) of d-dimensional feature vectors, e.g., acoustic frames 110 (fig. 1), where,And at each time step a higher order feature representation (also referred to as "encoder output") is produced. The higher order feature representation is denoted ah 1,...,ahT. Each transducer layer 214 of the audio encoder 210 may include a normalization layer, a masking multi-headed attention layer with relative position coding, a residual connection, a stack/un-stack layer, and a feed forward layer. Similarly, the tag encoder 220 may also include a neural network of a transformer layer or a look-up table embedded model that processes the sequence of non-blank symbols y 0,...,yui-I output so far by the final Softmax layer 240 as a Language Model (LM) into a dense representation Ih u that encodes the predicted tag history. In embodiments of the neural network in which the tag encoder 220 includes a transducer layer, each transducer layer may include a normalization layer, a masking multi-headed attention layer with relative position encoding, a residual connection, a feed-forward layer, and a sag layer. In these embodiments, the tag encoder 220 may include two transducer layers. In embodiments where the tag encoder 220 includes a look-up table embedding model with binary tag contexts, the embedding model is configured to learn a d-dimensional weight vector for each possible binary tag context, where d is the dimension of the output of the audio encoder 210 and the tag encoder 220. In some examples, the total number of parameters embedded in the model is N 2 x d, where N is the lexical size of the tag. Here, the learned weight vector is then used as an embedding of the binary tag context in the T-T model 200 to produce a fast tag encoder 220 runtime.
Finally, using the T-T model architecture, the representations generated by the audio encoder 210 and the tag encoder 220 are combined by the union network 230 using the dense layer J u,t. The federated network 230 then predicts P (z u,t|x,t,y1,...,yu-1), which is the distribution over the next output symbol. In other words, the federated network 230 generates a probability distribution 242 over possible speech recognition hypotheses at each output step (e.g., time step). Here, a "possible speech recognition hypothesis" corresponds to a set of output labels (also referred to as "phonetic units"), each representing a grapheme (e.g., symbol/character) or word segment in a specified natural language. For example, when the natural language is english, the output set of labels may include twenty-seven (27) symbols, e.g., one label for each of the 26 letters in the english alphabet, and one label specifying a space. Thus, the federated network 230 may output a set of values that indicate the likelihood of the occurrence of each output label in the predetermined set of output labels. The set of values may be vectors (e.g., one-hot vectors) and may indicate a probability distribution over the set of output tags. In some cases, the output labels are graphemes (e.g., single characters, and possibly punctuation and other symbols), but the set of output labels is not so limited. For example, the output tag set may include word segments and/or whole words in addition to or instead of graphemes. The output profile of the federated network 230 may include a posterior probability value for each of the different output tags. Thus, if there are 100 different output labels representing different graphemes or other symbols, the output z u,t of the federated network 230 may include 100 different probability values, one for each output label. The probability distribution may then be used to select and assign scores to candidate spelling elements (e.g., graphemes, word segments, and/or words) in a beam search process (e.g., through Softmax layer 240) to determine transcription 120.
The Softmax layer 240 may employ any technique to select the output label/symbol in the distribution with the highest probability as the next output symbol predicted by the T-T model 200 at the corresponding output step. In this way, the T-T model 200 does not make a condition independent assumption, but rather the predictions for each symbol are conditioned not only on acoustics, but also on the sequence of labels output so far. Although the speech recognition model 200 is described as having a T-T model architecture, the speech recognition model 200 may include other types of Transducer-based architectures, such as Conformer-Transducer (C-T) model architecture or recurrent neural network-Transducer (RNN-T) model architecture.
Fig. 3A and 3B illustrate schematic diagrams of a comparative twinning network 300 performing a semi-supervised training process for training the speech recognition model 200 (fig. 2). The comparative twin network includes a supervised subnetwork training process 301 (fig. 3A) and an unsupervised subnetwork training process 302 (fig. 3B). The supervisory subnetwork training process (i.e., supervisory subnetwork) 301 trains the speech recognition model 200 using a plurality of labeled audio samples 305, the plurality of labeled audio samples 305 including a sequence of acoustic frames 306 extracted from the spoken utterance 106 paired with corresponding transcriptions (i.e., tags) 308. An unsupervised subnetwork training process (i.e., an unsupervised subnetwork) 302 trains the speech recognition model 200 using a plurality of unlabeled audio samples 303, the plurality of unlabeled audio samples 303 comprising a sequence of acoustic frames 304 extracted from the spoken utterance 106 without any pairing.
In some examples, the acoustic frames 306 used by the supervisory subnetwork (i.e., the supervisory portion) 301 are the same as the acoustic frames 304 used by the non-supervisory subnetwork (i.e., the non-supervisory portion) 302. That is, the supervising portion 301 and the unsupervised portion 302 may use the same acoustic frames 304, 306 simultaneously to train the speech recognition model 200. In other examples, the acoustic frame 306 used to train the supervised section 301 is different from the acoustic frame 304 used to train the unsupervised section 302. This scenario is particularly advantageous because unlabeled audio samples 303 without any corresponding transcription are readily available and can be utilized to train the speech recognition model 200. In this way, the speech recognition model 200 may be trained based on any combination of labeled audio samples 305 and/or unlabeled audio samples 303. In some examples, the sequence of acoustic frames 304, 306 extracted from the unlabeled audio samples 303 and the labeled audio samples 305 includes logarithmic mel-filter bank energy. The unsupervised portion 302 may be trained using a greater number of acoustic frames 304 than the number of acoustic frames 306 used to train the supervised portion 301. Alternatively, the supervision section 301 may be trained using a greater number of acoustic frames 306 than the number of acoustic frames 304 used to train the unsupervised section 302. In some examples, the number of acoustic frames 306 used to train the supervised section 301 and the number of acoustic frames 304 used to train the unsupervised section 302 are the same.
The supervising portion 301 and the unsupervised portion 302 share the same audio encoder 210 comprising a stack of stride convolutional layers 212 and transform layers 214 trained together using the same Adam optimizer and the same learning rate. When the speech recognition model 200 corresponds to Conformer-Transducer model architecture, the audio encoder 210 may include conformer layers in place of the Transducer layers.
Referring now to fig. 3A, a supervision portion 301 of a comparative twin network 300 trains a speech recognition model 200 using a plurality of tagged audio samples 305. The plurality of marked audio samples 305 includes a sequence of acoustic frames 306 and corresponding tags/transcriptions 308 extracted from the marked audio samples 305. In addition to the tag encoder 220 and the federated network 230 (not shown in FIG. 3A), the supervised section 301 and the unsupervised section 302 also share the same audio encoder 210 from the speech recognition model 200 as the unsupervised section 302.
In some implementations, the supervision portion 301 includes a data enhancement module 365 that applies data enhancement to at least one acoustic frame 306 extracted from the labeled audio samples 305 to generate a sequence of enhanced acoustic frames 306, 306A. The data enhancement module 365 of the supervision section 301 may be the same as (or different from) the data enhancement module 360 of the unsupervised section 302 (fig. 3B). In some examples, the data enhancement module 365 of the supervised section 301 applies a different data enhancement technique than the data enhancement module of the unsupervised section. Applying data enhancement to the acoustic frames 306 further facilitates acoustic diversity of the audio frames used to train the speech recognition model 200. In some examples, the data enhancement module 360 includes a time modification component that manipulates the timing of the sequence of acoustic frames 306. The data enhancement module 360 may additionally or alternatively include a temporal masking component that masks portions of the acoustic frame 306. Other techniques applied by the data enhancement module 360 may include adding/injecting noise and/or adding reverberation marking the audio samples 305. One data enhancement technique includes using multi-lattice training (MTR) to inject various environmental noise into the marked audio samples 305. In addition to or in lieu of the MTR, another data enhancement technique that may be applied by the data enhancement module 360 includes using spectral enhancement (SpecAugment) to make the acoustics of the tagged audio samples 305 more similar to the adverse acoustics of other tagged audio samples 305. In combination, MTRs and SpecAugment can inject noise into the labeled audio samples 305, tile random external noise sources over time and insert and overlay onto the representation prior to the representation, and filter the noise injection labeled audio samples prior to training the speech recognition model 200.
The audio encoder 210 of the supervision section 301 receives the enhancement sequence of acoustic frames 306A and generates an encoder output 341 for each enhanced acoustic frame 306A. The encoder output 342 may include a probability distribution of possible speech recognition hypotheses. Specifically, the stride convolutional layer 212 receives the enhanced acoustic frame 306A and generates a corresponding output 211. the transformer layer 214 receives the output 211 from the stride convolutional layer 212 and generates an encoder output 341.
The tag encoder 220 is a streaming transformer that does not care for future tags 308. Thus, the tag encoder 220 receives the tag 308 corresponding to the enhanced acoustic frame 306A received by the audio encoder 210 and generates the language embedding 344 (i.e., dense representation Ih u (fig. 2)). The supervision section 301 includes a dense layer 346 that processes the language embedding 344 from the tag encoder 220 and the encoder output 341 (i.e., acoustic embedding) from the audio encoder 210 to produce a corresponding speech recognition result 342 that is input to each acoustic frame 306 (e.g., enhanced acoustic frame 306A) of the speech recognition model 200 at a corresponding time step. Dense layer 346 includes trainable bias vector 347, which performs linear operations on encoder output 341 and language embedding 344 to generate speech recognition result 342. The loss module 351 of the supervision section 301 determines the supervision loss term 350 based on the output of the dense layer 346 for the resulting speech recognition result 342. That is, the penalty module 351 compares the speech recognition result 342 with the tag (e.g., real transcription) 308 to generate the supervisory penalty 350. The supervised loss term (e.g., RNN-T loss) 350 may be expressed as:
rt＝linear(tanh(linear(at)+linear(lt))) (2)
In equation 2, r t represents a logic vector specifying the probability of a grapheme including a white symbol, a t represents the encoder output 341 from the audio encoder 210, l t represents the language embedding 344 from the tag encoder 220, and linear represents the conventional dense layer 346 with trainable bias vector 347.
The supervision section 301 updates the parameters of the speech recognition model 200 based on the supervision loss term 350 determined at each of the plurality of output steps for each of the plurality of tagged audio samples 305. In some implementations, the supervision section 301 is configured to: the parameters of the audio encoder 210 of the speech recognition model 200 are updated independently of the unsupervised portion 302, and the parameters of the speech recognition model 200 are updated based on the supervised loss terms 350.
Referring now to fig. 3B, the unsupervised portion 302 trains the speech recognition model 200 using a plurality of unlabeled audio samples 303, the plurality of unlabeled audio samples 303 comprising a sequence of acoustic frames 304 extracted from the spoken utterance 106 that is not paired with any transcription. As shown in the example, the unsupervised portion 302 of the comparative twin network 300 includes a target branch 310 and an enhancement branch 320 that share the same audio encoder 210 of the speech recognition model 200 (fig. 2), which speech recognition model 200 includes a stack of a stride convolutional layer 212 and a transducer layer 214. The unsupervised portion 302 is configured to extract language information by matching the output sequences of the transducer audio encoder 210 (i.e., the sequences of encoder outputs 312, 326) from the target branch 310 and the enhancement branch 320.
The target branch 310 is configured to generate a target branch output 316 based on a sequence of acoustic frames 304 extracted from the unlabeled audio samples 303. The audio encoder 210 of the target branch 310 receives the sequence of acoustic frames 304 and generates a high order feature representation 312 at each time step. Specifically, the stride convolutional layer 212 receives acoustic frames 304 from a sequence of acoustic frames 304 and generates an output 215. the transducer layer 214 receives the output 215 from the stride convolutional layer 212 and generates a higher order feature representation (i.e., encoder output) 312 for the corresponding acoustic frame 304.
The transducer audio encoder 210 included in the target and enhancement branches 310, 320 benefits from the temporal dynamics of position embedding to capture the sequence of acoustic frames 304. Thus, it is necessary to modify the temporal characteristics of the high-order feature representation 312 output by the audio encoder 210 at the target branch 310 to avoid that the audio encoder 210 at the unsupervised portion 302 generates encoder outputs 312, 326 with low contrast loss based on location-only embedding. In other words, without modifying the temporal characteristics of the high-order feature representation 312 output by the audio encoder 210 at the target branch 310, all outputs of the unsupervised portion 302 of the comparative twin network 300 will "collapse" to a constant value. Thus, the target branch 310 applies a stop gradient operation 314 that modifies the temporal characteristics of the high-order feature representation 312 to generate a target branch output 316 for the corresponding acoustic frame 304. In some implementations, the stop gradient operation 314 modifies the temporal characteristics of the high-order feature representation 312 output by the audio encoder 210 by: the temporal characteristics of the higher-order feature representation 312 are modified to match the temporal characteristics associated with the corresponding enhanced acoustic frame 304, 304A input to the audio encoder 210 at the enhancement branch 320 to generate a corresponding higher-order feature representation 326. As will become apparent, the high-order feature representation 326 generated by the audio encoder 210 at the enhancement branch 320 corresponds to an enhanced high-order feature representation 326 (or enhanced encoder output) having modified temporal characteristics based on the enhanced acoustic frame 304A input to the audio encoder 210.
The enhancement branch 320 of the unsupervised portion 302 includes a data enhancement module 360 that applies data enhancement to each acoustic frame 304 extracted from the unlabeled audio samples 303. The enhancement module 360 receives the sequence of acoustic frames 304 and generates a sequence of enhanced acoustic frames 304A. Applying data enhancement to the acoustic frames 304 facilitates acoustic diversity of the audio frames used to train the speech recognition model 200. In some examples, the data enhancement module 360 includes a time modification component 322 that manipulates the timing of the sequence of acoustic frames 304. The data enhancement module 360 may additionally or alternatively include a temporal masking component 324 that masks portions of the acoustic frame 304. Other techniques applied by the data enhancement module 360 may include adding/injecting noise and/or adding reverberation that marks the audio samples. One data enhancement technique includes using multi-lattice training (MTR) to inject various environmental noise into unlabeled audio samples 303. In addition to or in lieu of MTR, another data enhancement technique that may be applied by the data enhancement module 360 includes using spectral enhancement (SpecAugment) to make the acoustics of the enhanced acoustic frame 304 more similar to the adverse acoustics of the other unlabeled audio samples 303. In combination, MTR and SpecAugment can inject noise into labeled audio samples 303, tile random external noise sources over time and insert and overlay onto the representation prior to the representation, and filter noise injected unlabeled audio samples 303 prior to training speech recognition model 200.
The audio encoder 210 of the enhancement branch 320 receives the sequence of enhanced acoustic frames 304A from the data enhancement module 360 and generates a high-order feature representation 326 for the corresponding enhanced acoustic frame 304A. Specifically, the stride convolutional layer 212 receives the enhanced acoustic frames from the sequence of enhanced acoustic frames 304A and generates an output 213. the transducer layer 214 receives the output 213 from the stride convolutional layer 212 and generates a higher order feature representation (i.e., enhancement encoder output) 326 for the corresponding enhanced acoustic frame 304A. Subsequently, the prediction transformer network 328 receives the high-order feature representation 326 and generates predictions 329 of the target branch output 316 generated by the target branch 310 at corresponding time steps. That is, the prediction transformer328 may use the contrast loss 330 to learn to generate the prediction 329 as an output from the enhanced branch 320 that matches the target branch output 316 at each corresponding time step.
The unsupervised portion 302 determines the unsupervised loss term 330 based on the target branch output 316 generated by the target branch 310 and the prediction 329 of the target branch output 316 generated by the enhanced branch 320. In some examples, the unsupervised loss term 330 includes a contrast loss term represented by:
In equation 1, M comprises a mask frame index set, K comprises an interference term index set, h t is the encoder output, and c t is the convolutional neural network output. In other examples, the supervised penalty term includes a reconstruction penalty term L1 or a cosine distance penalty term. The unsupervised portion 302 updates the parameters of the audio encoder 210 based on the unsupervised loss term 330 determined at each of the plurality of time steps. Notably, using audio frame 304, target branch 310 generates a desired representation (i.e., target branch output 316) based on the current state of audio encoder 210, and enhancement branch 320 is intended to match the desired representation using enhancement audio frame 304A.
FIG. 4 is a flow chart of an exemplary operational arrangement of a computer-implemented method 400 for training a speech recognition model using a comparative twin network. At operation 402, the method 400 includes receiving a plurality of unlabeled audio samples 303 corresponding to the spoken utterance 106 that is not paired with any corresponding transcription (i.e., tag 308). Operations 404 and 406 are performed against the target branch 310 of the twin network 300. At operation 404, the method 400 includes generating a sequence of encoder outputs 312 for a plurality of unlabeled audio samples 303 using the audio encoder 210 of the speech recognition model 200. At operation 406, the method 400 includes modifying a temporal characteristic of the encoder output 312 using the stop gradient operation 314 to generate a sequence of target branch outputs 316.
Operations 408 through 412 are performed against the enhanced branch 320 of the twin network 300. At operation 408, the method 400 includes performing enhancement on the unlabeled audio samples 303 using the enhancement module 360. At operation 410, the method 400 includes generating a sequence of enhancement encoder outputs 326 for the enhanced unlabeled audio samples 304A using the audio encoder 210 of the speech recognition model 200. At operation 412, the method includes generating a prediction 329 of the sequence of target branch outputs 316 generated at the target branch 310.
At operation 414, the method includes determining an unsupervised loss term 330 based on a prediction 329 of the sequence of target branch outputs 316 generated at target branch 310 and target branch outputs 316 generated at enhanced branch 320. At operation 416, the method 400 includes updating parameters of the audio encoder 210 based on the unsupervised loss 330.
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," app, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
The non-transitory memory may be a physical device for storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by the computing device on a temporary or permanent basis. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., commonly used for firmware such as a boot strap). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
FIG. 5 is a schematic diagram of an example computing device 500 that may be used to implement the systems and methods described in this document. Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
Computing device 500 includes a processor 510, memory 520, storage device 530, high-speed interface/controller 540 connected to memory 520 and high-speed expansion port 550, and low-speed interface/controller 560 connected to low-speed bus 570 and storage device 530. Each of the components 510, 520, 530, 540, 550, and 560 are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 510 may process instructions for execution within the computing device 500, including instructions stored in the memory 520 or on the storage device 530, to display graphical information for a Graphical User Interface (GUI) on an external input/output device, such as a display 580 coupled to the high-speed interface 540. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and memory types. In addition, multiple computing devices 500 may be connected, with each device providing a portion of the necessary operations (e.g., as a server bank, a set of blade servers, or a multiprocessor system).
Memory 520 non-transitory stores information within computing device 500. Memory 520 may be a computer-readable medium, a volatile memory unit, or a non-volatile memory unit. Non-transitory memory 520 may be a physical device for storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 500 on a temporary or permanent basis. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., commonly used for firmware such as a boot strap). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), and Phase Change Memory (PCM), as well as magnetic disks or tapes.
The storage device 530 is capable of providing mass storage for the computing device 500. In some implementations, the storage device 530 is a computer-readable medium. In various embodiments, storage device 530 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices (including devices in a storage area network or other configuration). In a further embodiment, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as the methods described above. The information carrier is a computer-or machine-readable medium, such as the memory 520, the storage device 530, or memory on processor 510.
The high speed controller 540 manages bandwidth-intensive operations of the computing device 500, while the low speed controller 560 manages lower bandwidth-intensive operations. This allocation of responsibilities is exemplary only. In some implementations, the high-speed controller 540 is coupled to the memory 520, the display 580 (e.g., via a graphics processor or accelerator), and a high-speed expansion port 550, which may accept various expansion cards (not shown). In some implementations, a low speed controller 560 is coupled to the storage device 530 and the low speed expansion port 590. The low-speed expansion port 590, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a network device such as a switch or router, for example, through a network adapter.
Computing device 500 may be implemented in a number of different forms, as shown. For example, it may be implemented as a standard server 500a or multiple times in a group of such servers 500a, as a laptop computer 500b, or as part of a rack server system 500 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments may include embodiments in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to a storage system, at least one input device, and at least one output device to receive data and instructions therefrom, and to transmit data and instructions thereto.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such a device. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices including, for example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure may be implemented on a computer having: a display device, for example, a CRT (cathode ray tube), LCD (liquid crystal display) monitor or a touch screen, for displaying information to a user; and optionally a keyboard and pointing device, such as a mouse or trackball, by which a user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from devices used by the user; for example, by sending a Web page to a Web browser on a user's client device in response to a request received from the Web browser.
Various embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other embodiments are within the scope of the following claims.
Claims (24)
1. A comparative twin network (300) for training a speech recognition model (200), the comparative twin network comprising an unsupervised subnetwork (302) trained over a plurality of unlabeled audio samples (303) corresponding to spoken utterances (106) that are not paired with corresponding transcriptions (308), the unsupervised subnetwork (302) comprising:
A target branch (310), the target branch (310) configured to:
Receiving as input to an audio encoder (210) of the speech recognition model (200) a sequence of acoustic frames (304) extracted from the unlabeled audio samples (303); and
At each of a plurality of time steps, generating a target branch output (316) for a corresponding acoustic frame (304) in the sequence of acoustic frames (304) input to the audio encoder (210) at the corresponding time step; and
-An enhancement branch (320), the enhancement branch (320) being configured to:
performing enhancement on the sequence of acoustic frames (304) extracted from the unlabeled audio samples (303) to generate a sequence of enhanced acoustic frames (304A);
At each of the plurality of time steps, generating a high-order feature representation (326) for a corresponding enhanced acoustic frame (304A) in the sequence of enhanced acoustic frames (304A) as an output from the audio encoder (210); and
At each of the plurality of time steps, generating a prediction (329) of the target branch output (316) generated by the target branch (310) at the corresponding time step using the high-order feature representation (326) output from the audio encoder (210) at the corresponding time step,
Wherein the unsupervised subnetwork (302) is configured to:
at each of the plurality of time steps, determining an unsupervised penalty term (330) based on the target branch output (316) generated by the target branch (310) at the corresponding time step and the prediction (329) of the target branch (310) generated by the enhanced branch (320) at the corresponding time step; and
-Updating parameters of the audio encoder (210) based on the unsupervised loss term (330) determined at each of the plurality of time steps.
2. The comparative twinning network (300) of claim 1, wherein the unsupervised loss term (330) comprises a comparative loss term.
3. The comparative twin network (300) of claim 1 or 2, wherein the enhancement performed on the sequence of acoustic frames (304) comprises temporal modification and masking.
4. A comparative twin network (300) according to any of claims 1 to 3, wherein the target branch (310) is further configured to:
At each of a plurality of time steps, generating a high-order feature representation (312) for the corresponding acoustic frame (304) in the sequence of acoustic frames (304) input to the audio encoder (210) at the corresponding time step as an output from the audio encoder (210),
Wherein the target branch (310) is configured to generate the target branch output (316) for the corresponding acoustic frame (304) by modifying a temporal characteristic of the high-order feature representation (312).
5. The comparative twinning network (300) of claim 4, wherein modifying the temporal characteristics of the higher order feature representation (312) includes: at each of the plurality of time steps, modifying the temporal characteristics of the higher-order feature representation (312) generated as output from the audio encoder (210) for the corresponding acoustic frame (304) to match temporal characteristics associated with the higher-order feature representation (312) generated as output from the audio encoder (210) for the corresponding enhanced acoustic frame (304A) at the corresponding time step.
6. The comparative twinning network (300) of any one of claims 1 to 5, wherein the enhancement branch (320) comprises a prediction network (328) of a transducer layer, the prediction network (328) being configured to, at each of the plurality of time steps:
-receiving as input the high order feature representation (326) output from the audio encoder (210) at a corresponding time step; and
-Generating as output the prediction (329) of the target branch output (310) generated by the target branch (310) at the corresponding time step.
7. The comparative twinning network (300) according to any one of claims 1 to 6, further comprising a supervision subnetwork (301) trained over a plurality of labeled audio samples (305) corresponding to spoken utterances (106) paired with corresponding transcriptions (308), the supervision subnetwork (301) being configured to:
At each of a plurality of output steps for each marked audio sample (305):
generating corresponding speech recognition results (342) for the labeled audio samples (305) using the speech recognition model (200); and
-Determining a supervision loss term (350) based on the corresponding speech recognition result (342) for the marked audio sample (305) and the corresponding transcription (308) of the marked audio sample (305); and
Parameters of the speech recognition model (200) are updated based on the supervised loss term (350) determined for each of the plurality of tagged audio samples (305) at each of the plurality of output steps.
8. The comparative twinning network (300) of claim 7, wherein the corresponding speech recognition result (342) generated for the tagged audio sample (305) using the speech recognition model (200) comprises a probability distribution over possible speech recognition hypotheses for the tagged audio sample (305) at corresponding output steps.
9. The comparative twinning network (300) according to claim 7 or 8, wherein the supervisory subnetwork (301) is configured to: -updating the parameters of the audio encoder (210) of the speech recognition model (200) independently of the unsupervised network (302), -updating the parameters of the speech recognition model (200) based on the supervised loss term (350).
10. The comparative twinning network (300) according to any one of claims 7 to 9, wherein the supervisory subnetwork (301) is further configured to apply data enhancement to at least one of the plurality of tagged audio samples (305) input to the speech recognition model (200).
11. The comparative twin network (300) of claim 10, wherein the applied data enhancement includes at least one of adding noise, adding reverberation, or manipulating timing.
12. The comparative twinning network (300) according to any one of claims 1 to 11, wherein the trained speech recognition model (200) comprises a Transducer-Transducer (T-T) model (200), the T-T model (200) comprising:
the audio encoder (210), the audio encoder (210) being configured to:
receiving as input a sequence of acoustic frames (110) extracted from audio data characterizing a spoken utterance (106); and
Generating a high-order feature representation (ah t) for a corresponding acoustic frame (110) in the sequence of acoustic frames (110) at each of a plurality of time steps;
a tag encoder (220), the tag encoder (220) being configured to:
receiving as input a sequence of non-blank symbols (y ui-1) output by the final softmax layer (240); and
Generating a dense representation (ih u) at each of the plurality of time steps; and a federated network (230), the federated network (230) configured to:
Receiving as inputs the high-order feature representation (ah t) generated by the audio encoder (210) at each of the plurality of time steps and the dense representation (ih u) generated by the tag encoder (220) at each of the plurality of time steps; and
A probability distribution 242 over possible speech recognition hypotheses at the corresponding time step is generated at each of the plurality of time steps,
Wherein the audio encoder (210) comprises a neural network having a stack of stride convolutional layers and transform layers.
13. A computer-implemented method (400), which when executed on data processing hardware (12), causes the data processing hardware (12) to perform operations comprising:
Receiving a plurality of unlabeled audio samples (303) corresponding to a spoken utterance (306) that is not paired with a corresponding transcription (308):
At a target branch (310) of a comparative twin network (300):
Generating a sequence of encoder outputs (312) for the plurality of unlabeled audio samples (303) using an audio encoder (210) of a speech recognition model (200); and
Modifying a temporal characteristic of the encoder output (312) to generate a sequence of target branch outputs (316);
At an enhancement branch (320) of the comparative twin network (300):
performing enhancement on the unlabeled audio samples (303);
-generating a sequence of enhancement encoder outputs (326) for enhanced unlabeled audio samples (304A) using the audio encoder (210) of the speech recognition model (200); and
Generating a prediction (329) of the sequence of target branch outputs (316) generated at the target branch (310) using a prediction network (328) configured to receive the sequence of enhancement encoder outputs (326);
determining an unsupervised loss term (330) based on the target branch output (316) generated at the target branch (310) and the prediction (329) of the sequence of the target branch output (316) generated at the enhanced branch (320); and
-Updating parameters of the audio encoder (210) based on the unsupervised loss term (330).
14. The computer-implemented method (400) of claim 13, wherein the unsupervised loss term (330) comprises a contrast loss term.
15. The computer-implemented method (400) of claim 13 or 14, wherein performing enhancement on the unlabeled audio samples (303) includes performing temporal modification and masking on the unlabeled audio samples (305).
16. The computer-implemented method (400) of any of claims 13-16, wherein the operations further comprise generating a high-order feature representation for the plurality of unlabeled audio samples (303) as an output from the audio encoder (210).
17. The computer-implemented method (400) of claim 16, wherein modifying the temporal characteristic of the encoder output (312) to generate the sequence of target branch outputs (316) comprises: the temporal characteristics of the encoder output (316) generated as output from the audio encoder (210) are modified to match temporal characteristics associated with a sequence of the enhancement encoder output (326) from the audio encoder (210).
18. The computer-implemented method (400) of any of claims 13-17, wherein the operations further comprise:
-receiving a sequence of the enhancement encoder outputs (326) as input to a prediction network (328) of a transducer layer of the enhancement branch (320); and
The prediction (329) of the sequence of target branch outputs (316) generated at the target branch (310) is generated as an output from the prediction network (328) of a transducer layer of the enhanced branch (320).
19. The computer-implemented method (400) of any of claims 13-18, wherein the operations further comprise:
Receiving a plurality of labeled audio samples (305) corresponding to a spoken utterance (306) paired with a corresponding transcription (308);
Generating a speech recognition result (342) for the labeled audio sample (305) using the speech recognition model (200);
-determining a supervision loss term (350) based on the speech recognition result (342) for the marked audio sample (305) and the corresponding transcription (308) of the marked audio sample (305); and
Parameters of the speech recognition model (200) are updated based on the supervised loss term (350).
20. The computer-implemented method (400) of claim 19, wherein the speech recognition results (342) generated for the labeled audio samples (305) using the speech recognition model (200) include probability distributions over possible speech recognition hypotheses for the labeled audio samples (305) at the corresponding output steps.
21. The computer-implemented method (400) of claim 19 or 20, wherein the operations further comprise: -updating parameters of the speech recognition model (200) based on the supervised loss term (350), independently of updating parameters of the audio encoder (210) based on the unsupervised loss term (330).
22. The computer-implemented method (400) of any of claims 19-21, wherein the operations further comprise applying data enhancement to at least one of the marked audio samples (305).
23. The computer-implemented method (400) of claim 22, wherein applying data enhancement includes at least one of adding noise, adding reverberation, or manipulating timing.
24. The computer-implemented method (400) of any of claims 13-23, wherein the speech recognition model (200) comprises a Transducer-Transducer (T-T) model (200), and the operations further comprise:
Receiving as input to the audio encoder (210) of the T-T model (200) a plurality of unlabeled audio samples (303) corresponding to spoken utterances (306) that are not paired with corresponding transcriptions (308);
generating, by the audio encoder (210), a sequence of acoustic frames (ah t) extracted from audio data characterizing the spoken utterance (106) at each of a plurality of time steps;
Receiving as input to a tag encoder (220) of the T-T model (200) a sequence of non-blank symbols (y ui-1) output by a final softmax layer (240);
Generating, by the tag encoder (220), a dense representation (ih u) at each of the plurality of time steps;
receiving the high order feature representation generated by the audio encoder (210) at each of the plurality of time steps and the dense representation (ah t) generated by the tag encoder (220) at each of the plurality of time steps as inputs to a federated network (230) of the T-T model (200); and
Generating by the federated network (230) at each of the plurality of time steps a probability distribution (242) over possible speech recognition hypotheses at the corresponding time step,
Wherein the audio encoder (210) comprises a neural network having a stack of stride convolutional layers and transform layers.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US63/261,895 | 2021-09-30 |
Publications (1)
Publication Number | Publication Date |
---|---|
CN118043885A true CN118043885A (en) | 2024-05-14 |
Family
ID=
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11837216B2 (en) | Speech recognition using unspoken text and speech synthesis | |
KR20210146368A (en) | End-to-end automatic speech recognition for digit sequences | |
US11961515B2 (en) | Contrastive Siamese network for semi-supervised speech recognition | |
US11929060B2 (en) | Consistency prediction on streaming sequence models | |
JP2023545988A (en) | Transformer transducer: One model that combines streaming and non-streaming speech recognition | |
KR20230147685A (en) | Word-level reliability learning for subword end-to-end automatic speech recognition | |
US20230104228A1 (en) | Joint Unsupervised and Supervised Training for Multilingual ASR | |
US20220122581A1 (en) | Using Speech Recognition to Improve Cross-Language Speech Synthesis | |
US11823697B2 (en) | Improving speech recognition with speech synthesis-based model adapation | |
CN117083668A (en) | Reducing streaming ASR model delay using self-alignment | |
CN118043885A (en) | Contrast twin network for semi-supervised speech recognition | |
CN117727288B (en) | Speech synthesis method, device, equipment and storage medium | |
KR20240068704A (en) | Contrast Siamese networks for semi-supervised speech recognition. | |
KR102637025B1 (en) | Multilingual rescoring models for automatic speech recognition | |
US20230298565A1 (en) | Using Non-Parallel Voice Conversion for Speech Conversion Models | |
US20240029715A1 (en) | Using Aligned Text and Speech Representations to Train Automatic Speech Recognition Models without Transcribed Speech Data | |
KR20230156795A (en) | Word segmentation regularization | |
KR20240068699A (en) | Guided data selection for masked speech modeling | |
KR20240068723A (en) | Convergence of sound and text expression in an automatic speech recognition system implemented with Rnn-T | |
CN117597729A (en) | Use of advanced text and speech in ASR pre-training with consistency and contrast loss | |
CN117716422A (en) | Injecting text in self-supervising speech pre-training |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication |