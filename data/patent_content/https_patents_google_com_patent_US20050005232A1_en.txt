US20050005232A1 - Web services access to classification engines - Google Patents
Web services access to classification engines Download PDFInfo
- Publication number
- US20050005232A1 US20050005232A1 US10/613,560 US61356003A US2005005232A1 US 20050005232 A1 US20050005232 A1 US 20050005232A1 US 61356003 A US61356003 A US 61356003A US 2005005232 A1 US2005005232 A1 US 2005005232A1
- Authority
- US
- United States
- Prior art keywords
- document
- text
- web service
- host
- generating
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/353—Clustering; Classification into predefined classes
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99936—Pattern matching access
Definitions
- the present invention relates generally to a method and system for document analysis and retrieval, and more specifically to a method and system for determining categories and document links relating to a given document.
- Transmitting a given document for analysis, and subsequently analyzing the given document to determine categories and document links relating to the given document may be slow, inefficient, and difficult.
- a speedy, efficient, and simple method and system for transmitting and analyzing documents to determine categories and document links relating to the given document may be slow, inefficient, and difficult.
- the present invention provides a method for document analysis and retrieval, comprising the following steps performed in the order recited:
- the present invention provides a first computing system that includes a remote host, wherein the remote host is remote relative to a web service host in a second computing system, and wherein the remote host is adapted to:
- the present invention provides a method for document analysis and retrieval, comprising the following steps performed in the order recited:
- the present invention provides a system for document analysis and retrieval, comprising a second computing system that includes a web service host, wherein the web service host is remote relative to a remote host in a first computing system, and wherein the web service host is adapted to:
- the present invention provides a speedy, efficient, and simple method and system for transmitting and analyzing documents to determine categories and document links relating to the given document.
- FIG. 1 is a flow chart for generating document keys of a given document, in accordance with embodiments of the present invention.
- FIG. 2 is a flow chart for determining which categories of a given taxonomy are at a close distance to the document keys of FIG. 1 , in accordance with embodiments of the present invention.
- FIG. 3 is a flow chart for determining links to documents based on the document keys of FIG. 1 , in accordance with embodiments of the present invention.
- FIG. 4 depicts a system for determining categories and document links relating to the given document of FIG. 1 , in accordance with embodiments of the present invention.
- FIG. 5 depicts a system for processing the given document of FIG. 1 , wherein the document is divided into chucks before a web service host receives and processes the document by text extraction, text analysis, and classification, in accordance with embodiments of the present invention.
- FIG. 6 depicts a variant of the system of FIG. 5 wherein the web service host performs only the text extraction, in accordance with embodiments of the present invention.
- FIG. 7 depicts a variant of the system of FIG. 5 wherein the web service host performs only the text analysis, in accordance with embodiments of the present invention.
- FIG. 8 depicts a variant of the system of FIG. 5 wherein the web service host performs only the classification, in accordance with embodiments of the present invention.
- FIG. 9 depicts a variant of the system of FIG. 5 wherein the web service host performs only the text extraction and text analysis, in accordance with embodiments of the present invention.
- FIG. 10 depicts a variant of the system of FIG. 5 wherein the web service host performs only the text extraction and classification, in accordance with embodiments of the present invention.
- FIG. 11 depicts a variant of the system of FIG. 5 wherein the web service host performs only the text analysis and classification, in accordance with embodiments of the present invention.
- FIG. 12 is a flow chart depicting a determination of the web service host of the systems of FIGS. 5-11 and further depicting breaking the document into chucks and transmission of the chunks to the web service host, in accordance with embodiments of the present invention.
- FIG. 13 depicts a computing system for determining categories and document links relating to a given document, in accordance with embodiments of the present invention.
- FIG. 1 is a flow chart for generating document keys of a document 10 , in accordance with embodiments of the present invention.
- the document 10 includes text and the document keys are the generic roots of words and phrases appearing in said text of the document 10 .
- the document 10 is any text document in any application environment such as a document in any commercial word processor environment (e.g., Microsoft Word, WordPerfect®, etc.), a web page accessed through a web browser, etc.
- the application environment is called a “host” or a “host application”.
- step 11 the document 10 is received from the host by a computing system that will subsequently process the text in steps 12 - 16 .
- Step 12 determines whether the text in the document 10 is formatted (i.e., whether the text appears in a non-text format such as in a format that is specific to the host). If the text is not formatted, then step 14 is next executed. If the text is formatted, then step 13 extracts the text such that the text is separated from its non-text format, and step 14 is next executed. Extracting the text leaves format parameters behind. For example, in a HyperText Markup Language (HTML) document, extracting the text leaves the HTML tags behind. There may be some generic formatting retained (e.g., paragraph breaks), but formatting specific to the host application is removed.
- the output of step 13 is a text file.
- the text extraction may be performed by any method known to one of ordinary skill in the art. Additionally, there are software products on the market (e.g., Verify Key View filter) that may be utilized to perform the text extraction.
- Step 14 tokenizes the text (i.e., generates tokens from the text).
- a token is the text that appears between delimiters (blanks, periods, commas, etc.).
- the output of said tokenizing is a list of tokens such as, inter alia, in an array or vector of tokens.
- Step 15 removes stop words from the tokens.
- Stop words are generic words that have no substantive meaning in relation to the subject content in the document. Examples of stop words include “a”, “the”, “he”, “she”. Stop words may be context-dependent (e.g., stop words for E-mail and for instant message chat may be different), since a word may have a meaning in one context but not in another context.
- FIG. 1 shows step 15 as being executed after step 14 , the stop words may alternatively be removed from the text prior to execution of the tokenizing of step 14 .
- Step 16 generates, by stemming, the document keys of the document 10 from the tokens.
- Stemming is a process that determines the normal form or root of each word or phrase in each token. For example, “changing” has the root “change”.
- Alternative expressions for root words and root phrases are “keywords” and “keyphrases”, respectively.
- Stemming algorithms are known in the art (e.g., the Porter Stemming Algorithm), and any such known stemming algorithm may be used to implement step 16 .
- the document keys generated by step 16 are said roots determined by said stemming.
- a document key is defined herein as a root word (i.e., keyword) or root phrase (i.e., keyphrase) in the document.
- Step 16 also generates weights associated with said document keys on a on-to-one basis.
- Generating the weights may comprise determining the frequency count of each document key in the document.
- the frequency count of a document key is the number of appearances of the document key in the document.
- the weight may be a linear function of the frequency count.
- the weight may be numerically equal to, or proportional to, the frequency count.
- the weight may be a nonlinear function of the frequency count.
- the weights may also take into account the location of the document key in the document.
- words or phrases appearing at the beginning of the document, or in the document title, or in the document abstract, etc. may have a higher weight than words or phrases located elsewhere in the document.
- the importance of the location of the document key in the document is context sensitive, since relevance of different locations (e.g., title, abstract, etc.) may depends on the document itself, on the type of document, on the subject matter of the document, etc.
- FIG. 2 is a flow chart for determining which categories of a given taxonomy are at a close distance to the document keys generated in step 16 of FIG. 1 , in accordance with embodiments of the present invention.
- the document keys 20 are the document keys generated in step 16 of FIG. 1 .
- Step 21 provides as input a document taxonomy and categories of the document taxonomy, as well as category keys of each said category.
- a document taxonomy is a based on a subject matter classification in conjunction with a collection of stored documents, wherein each taxonomy is a general subject area.
- Each taxonomy comprises categories.
- Each category comprises both category keys and category weights associated with the category keys on a one-to-one basis.
- the taxonomy may be “houses”, and the categories of “houses” may be “house style” and house color”.
- the “house style” category may have category keys of “colonial”, “ranch”, and “split level”.
- the “house color” category” may have category keys of “white”, “blue”, and “green”.
- the category keys are analogous to the document keys discussed supra. Accordingly, the category keys may comprise root words (i.e., keywords) and root phrases (i.e., keyphrases).
- Step 21 also generates weights associated with said category keys on a on-to-one basis.
- Generating the weights may comprise determining the frequency count of each category key in the stored documents associated with the taxonomy.
- the frequency count of a category key is the number of appearances of the category key in the stored documents.
- the weight may be a linear function of the frequency count.
- the weight may be numerically equal to, or proportional to, the frequency count.
- the weight may be a linear function of the frequency count.
- the weights may also take into account the location of the category key in the stored documents.
- Step 22 compares the category keys of each category with the document keys 20 to make a determination of a distance D between the document 10 (or equivalently, the document keys 20 ) and each category as a measure of how close the document 10 (or equivalently, the document keys 20 ) is to each category.
- the distance between the document 10 and each category may be computed as a dot product of a vector of the document keys 20 and a vector of the category keys for each category as follows. Let a reference dictionary for the taxonomy encompass all categories of the taxonomy, and all said categories of the taxonomy collectively comprise N category keys, wherein N is a positive integer.
- V DOC represent a vector of order N of the document keys 20 such that each element of V DOC is associated with a unique category key of the reference dictionary, and each element of V DOC contains 1 if there exists a document key of the document keys 20 that matches the category key associated with the element of V DOC , or contains 0 otherwise.
- V CAT (I) represent a vector of order N of the I th category of the taxonomy such that each element of V CAT (I) is associated with said unique category key of the reference dictionary, and each element of V CAT (I) contains 1 if there exists a category key of the I th category that matches the category key associated with the element of V CAT (I), or contains 0 otherwise.
- the preceding distance D was computed independent of the document weights associated with the document keys 20 and independent of the category weights associated with the category keys provided for each category in step 21 .
- V DOC could be replaced by the weighted vector W DOC wherein the ones (1) in V DOC are replaced by their associated document weights.
- V CAT (I) could be replaced by the weighted vector W CAT (I) wherein the ones (1) in V CAT (I) are replaced by their associated category weights.
- W CAT (I) the distance D could be represented by various alternative dot products, including W DOC ⁇ V CAT (I), V DOC ⁇ W CAT (I), and W DOC ⁇ W CAT (I).
- Step 23 returns a subset of the categories to the host that provided the document 10 , such that the returned subset includes those categories that are closest to the document 10 along with their associated distances from the document 10 .
- the number of such categories returned may be based on any criteria, such as a predetermined number of categories, a predetermined percentage of the categories, categories having a distance below a predetermined threshold distance, etc.
- the returned categories may be returned in any form such as a file of categories, a printout of the categories, a display of the categories such that a user can use the categories to link to documents related to the categories, etc.
- FIG. 3 is a flow chart for determining links to documents based on the document keys generated in step 16 of FIG. 1 , in accordance with embodiments of the present invention.
- the document keys 20 are the document keys generated in step 16 of FIG. 1 .
- Step 25 creates a search string.
- the search string comprises a logical function of a subset of the document keys 20 .
- the subset may include all of the document keys or less than all of the document keys.
- the subset may be determined by any criteria, including criteria that depend on the weights associated with the document keys.
- the number of such document keys in the subset may be based on any criteria, such as a predetermined number of document keys, a predetermined percentage of the document keys, document keys having an associated weight above a predetermined threshold weight, etc.
- the specific document keys in the subset may be based on the respective weights such that the highest weighted document keys are used in the search string and the remaining document keys are not used in the search string.
- the subset comprises document keys K 1 , K 2 , . . . K M (M ⁇ 2)
- the logical function may be, inter alia, ⁇ K 1 AND K 2 . . . AND K M ⁇ or ⁇ K 1 OR K 2 , . . . OR K M ).
- a default type of search string, or a default algorithm for generating the search string may be configurable and thus subject to control by the user.
- the default search string may be automatically generated in accordance with the default algorithm.
- Step 26 submits the search string to a search engine or to multiple search engines.
- Step 27 receives links to documents related to the document 10 (i.e., to the document keys 20 ) from the search engine or from the multiple search engines. Since the search engine or multiple search engines utilized the search string for performing the search(es), the links received from the search engine or from the multiple search engines are based on the search string.
- Step 28 returns the links to the host that provided the document 10 .
- the returned links may be returned in any form such as a file of links, a printout of the links, a display of the links such that a user can use the links to link to the documents related to the document 10 . Additionally, the steps of FIGS.
- FIGS. 1-3 may be may be re-utilized by being applied to any found document previously determined from steps 25 - 28 to be related to the document 10 .
- Such re-utilization of the steps of FIGS. 1-3 may be accomplished by applying steps 11 - 16 of FIG. 1 to said found document to generate the document keys 20 in step 16 , followed by applying at least one of the following step sequences to the document keys 20 associated with said found document: the sequence of steps 21 - 23 in FIG. 2 and the sequence of steps 25 - 28 in FIG. 3 .
- FIG. 4 depicts a system 30 for determining categories and document links relating to the document 10 of FIG. 1 , in accordance with embodiments of the present invention:
- the document 10 of FIG. 1 may be a text document in any application environment such as a document in any commercial word processor environment (e.g., Microsoft Word, WordPerfect, etc.), a web page accessed through a web browser, an instant messaging application, etc.
- the application environment is called a “host”or a “host application”.
- the system 30 comprises a first computing system 40 , a second computing system 50 , and a third computing system 70 .
- the first computing system 40 comprises a host which is a source of the given document (i.e., the document 10 of FIG. 1 ) to be processed in accordance with the present invention.
- the host may be a local host 42 or a remote host 44 .
- the local host 42 is local to the second computing system 50 .
- the remote host 44 is remote the second computing system 50 and may communicate with the second computing system 50 through any transmission means or path such, inter alia, the Internet, an Intranet, telephone lines, cable, etc.
- the remote host 44 may establish communication with the second computing system 50 by establishing a “session”, with an associated session identification (“session id”), in accordance with communication protocols.
- session id session identification
- the second computing system 50 receives and processes the given document from the first computing system 40 .
- the second computing system 50 comprises an Information Management Application Programming Interfaces (APIs) which encapsulate three types of services: text extraction, text analysis, and classification.
- the text extraction relates to step 13 of FIG. 2 and includes a text extraction API 54 interfacing a text extraction adapter 55 which is a text extraction tool.
- the text analysis relates to steps 14 - 16 of FIG. 1 and includes a text analysis API 56 interfacing a text analysis adapter 57 which is a set of text analysis tools associated with steps 14 - 16 of FIG. 2 .
- the classifiers relate to steps 21 - 23 of FIG. 2 and includes a classification API 58 interfacing classifier adapters 59 which implement steps 21 - 23 of FIG.
- the classifier adapters 59 have access to taxonomy rules 60 , which may be stored in a database, file, table or tables, etc.
- taxonomy rules 60 An example of a taxonomy rule of the taxonomy rule 60 is a specification of the category keys of a category. See FIG. 2 supra and accompanying text for a discussion of category keys of a category.
- a Java API 53 directly interfaces the local host 42 to said text extraction, text analysis, and classification.
- the Java API 53 indirectly interfaces the remote host 44 to said text extraction, text analysis, and classification, inasmuch as the Java API 53 is wrapped in a Java Bean API 52 which is wrapped in WebServices Definitions 51 .
- the WebServices Definitions 51 serves as a direct interface with the remote host 44 and allows the remote host 44 to access the text extraction, text analysis, and classification through whatever Remote Procedure Call (RPC) mechanism is defined in the WebServices Definitions 51 .
- RPC Remote Procedure Call
- the third computing system 70 comprises Search Facilities that relate to the search engine of steps 26 - 27 of FIG. 3 .
- the Search Facilities of the third computing system 70 may comprise a local search engine 71 or an external search engine 72 .
- the local search engine 71 is local to the first computing system 40 (e.g., an operating system that indexes files in a file system and has a search interface).
- the external search engine 72 is external to the first computing system 40 (e.g., an Internet search engine).
- first computing system 40 , the second computing system 50 , and the third computing system 70 are shown in FIG. 4 as separate computer systems, the first computing system 40 and the second computing system 50 may each be included within a first same computing system. Similarly, the first computing system 40 and the third computing system 70 may each be included within a second same computing system. Additionally, the first computing system 40 , the second computing system 50 , and the third computing system 70 may each be included within a third same computing system.
- FIG. 5 depicts a system 130 for determining categories and document links relating to the document 10 of FIG. 1 , in accordance with embodiments of the present invention.
- the system 130 comprises a first computing system 140 and a second computing system 170 .
- the first computing system 140 and the second computing system 170 of FIG. 5 are respectively similar in many respects to the first computing system 40 and the second computing system 50 of FIG. 4 .
- the taxonomy rules 60 and the third computing system 70 of FIG. 4 are not shown in FIG. 5 for simplicity, but may nonetheless be present in conjunction with FIG. 5 and have the same role as was described supra in conjunction with FIG. 4 .
- the first computing system 140 comprises a remote host 144 which is a source of the given document (i.e., the document 10 of FIG. 1 ) to be processed in accordance with the present invention.
- the remote host 144 is any remote application environment (or remote application) such any commercial word processor environment (e.g., Microsoft Word, WordPerfect, etc.), a web browser, an instant messaging application, etc.
- the remote host 144 is remote the second computing system 170 and may communicate with the web services host 160 through any transmission means or path such, inter alia, the Internet, an Intranet, telephone lines, cable, etc.
- the remote host 144 may establish communication with the web services host 160 by establishing a “session”, with an associated session identification (“session id”), in accordance with communication protocols.
- the remote host 144 is linked to Universal Description, Discovery (UDDI) services 146 .
- UDDI services 146 enables the remote host 144 to select the web service host 160 of the second computing system 170 for processing the given document as will be described infra.
- the second computing system 170 receives and processes the given document from the first computing system 140 .
- the second computing system 170 comprises the web service host 160 which encapsulates, in accordance with the Web Services Definitions 150 , three types of services: text extraction, text analysis, and classification.
- the text extraction relates to step 13 of FIG. 2 and includes a text extraction Enterprise Java Bean (EJB) 151 which wraps a text extraction Application Programming Interface (API) 154 and a text extraction adapter 157 (a text extraction tool).
- the text extraction receives the document text in a non-text format, extracts the text, and configures the extracted text in a text format. Text extraction is unnecessary if the received document text is in a text format.
- the text analysis relates to steps 14 - 16 of FIG.
- the text analysis generates document keys associated with the text from analysis of the text (in the text format), by generating tokens of the text such that stop words do not appear in the tokens, and stemming the tokens to generate the document keys from the tokens.
- the classifiers relate to steps 21 - 23 of FIG. 2 and includes a classification EJB 153 which wraps a classification API 156 and classification adapters 159 which implement steps 21 - 23 of FIG. 2 .
- the classification determines, from given categories of a document taxonomy, a set of closet categories to the document based on a comparison between document keys and category keys of the given categories as explained supra in conjunction with FIG. 2 .
- the classification adapters 159 have access to taxonomy rules 60 (see FIG. 1 ), described supra.
- the Web Services Definitions 150 serves as a direct interface with the remote host 144 and allows the remote host 144 to access the text extraction, text analysis, and classification through whatever Remote Procedure Call (RPC) mechanism is defined in the Web Services Definitions 150 .
- RPC Remote Procedure Call
- the web services host 160 receives the given document from the remote host 144 in a plurality of chunks after the given document has been broken down into said chunks by the remote host 144 .
- the web services host 160 is capable of receiving said chunks of said document, and of synthesizing said chucks to reconstruct the entire document for subsequent processing (i.e., text extraction, text analysis, and classification).
- the remote host 144 can break down the given document in any manner such that the web services host 160 is capable of receiving the largest of said chunks.
- the session id associated with the session between the remote host 144 and the web services host 160 may be used to make sure that the correct document chunk is reconciled with the reconstructed document.
- the processing i.e., text extraction, text analysis, classification
- utilization of the document keys resulting therefrom can be implemented in the manner described supra in conjunction with FIGS. 1-3 .
- the remote host 144 is linked to Universal Description, Discovery (UDDI) services 146 .
- UDDI services 146 enables the remote host 144 to select the web service host 160 of the second computing system 170 for processing the given document as will be described next.
- the remote application of the remote host 144 may have knowledge of an information processing service that can serve as the web service host 160 . If the remote host 144 does not have knowledge of an information processing service that can serve as the web service host 160 , then the remote host 144 can determine an appropriate web service to serve as the web service host 160 , by utilizing the UDDI services 146 which could be internal to a network or which could alternatively be a public server such as the Extensible Markup Language (XML)-based public registry (“XML-based public UDDI registry”) to which over 130 companies (e.g., IBM, Microsoft, etc.) are affiliated. This XML-based public UDDI registry enables businesses worldwide to list themselves on the Internet.
- XML Extensible Markup Language
- XML-based public UDDI registry serves to streamline online transactions by enabling companies to find one another on the Web and make their systems interoperable for e-commerce.
- UDDI is often compared to a telephone book's white, yellow, and green pages, and allows businesses to list themselves by name, product, location, or the Web services they offer.
- This XML-based public UDDI registry has a specification which utilizes World Wide Web Consortium (W3C) and Internet Engineering Task Force, and Domain Name System (DNS) protocols, and has also adopted early versions of the proposed Simple Object Access Protocol (SOAP) messaging guidelines for cross platform programming.
- W3C World Wide Web Consortium
- DNS Domain Name System
- the remote host 144 can have a search performed in conjunction with the UDDI services 146 to determine one or more information processing services for the text extraction services, the text analysis services, and the classification services needed from the web service host 150 , as well as the service of being able to read a document in two or more chunks, thereby enabling the remote host 144 to select the information processing service that can serve as web service host 160 .
- the search results in a Web Services Description (WSDL) 148 document that describes how to access each information processing service identified in the UDDI search.
- the remote host 144 can use the WSDL 148 document to connect to the web service host 160 in accordance with the Web Services Definitions 150 .
- WSDL Web Services Description
- FIG. 6 depicts a system 230 which is a variant of the system 130 of FIG. 5 , wherein the web service host 260 of FIG. 6 performs only the text extraction, in accordance with embodiments of the present invention.
- the Web Services Definitions 250 of FIG. 6 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 260 of FIG. 6 is analogous to the web service host 160 of FIG. 5 .
- the text extraction EJB 251 , the text extraction API 254 , and the text extraction adapters 257 of FIG. 6 are respectively analogous to the text extraction EJB 151 , the text extraction API 154 , and the text extraction adapters 157 of FIG. 5 .
- the text analysis and the classification of FIG. 5 are not performed by the web service host 260 of FIG. 6 .
- the text analysis and/or the classification may be subsequently performed by one or more web service hosts other than the web service host 260 , utilizing the text extracted by the web service host 260 .
- FIG. 7 depicts a system 330 which is a variant of the system 130 of FIG. 5 , wherein the web service host 360 of FIG. 7 performs only the text analysis, in accordance with embodiments of the present invention.
- the Web Services Definitions 350 of FIG. 7 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 360 of FIG. 7 is analogous to the web service host 160 of FIG. 5 .
- the text analysis EJB 352 , the text analysis API 355 , and the text analysis adapters 358 of FIG. 7 are respectively analogous to the text analysis EJB 152 , the text analysis API 155 , and the text analysis adapters 158 of FIG. 5 .
- the reconstructed document synthesized by the web service host 360 includes text in a text format. Additionally, classification may be subsequently performed by a web service host other than the web service host 360 , utilizing the document keys generated by the web service host 360 .
- FIG. 8 depicts a system 430 which is a variant of the system 130 of FIG. 5 , wherein the web service host 460 of FIG. 8 performs only the classification, in accordance with embodiments of the present invention.
- the Web Services Definitions 450 of FIG. 8 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 460 of FIG. 8 is analogous to the web service host 160 of FIG. 5 .
- the classification EJB 453 , the classification API 456 , and the classification adapters 459 of FIG. 8 are respectively analogous to the classification EJB 153 , the classification API 156 , and the classification adapters 159 of FIG. 5 .
- the text extraction and the text analysis of FIG. 5 are not performed by the web service host 460 of FIG. 8 .
- the reconstructed document synthesized by the web service host 460 includes document keys.
- FIG. 9 depicts a system 530 which is a variant of the system 130 of FIG. 5 , wherein the web service host 560 of FIG. 9 performs only the text extraction and the text analysis, in accordance with embodiments of the present invention.
- the Web Services Definitions 550 of FIG. 9 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 560 of FIG. 9 is analogous to the web service host 160 of FIG. 5 .
- the text extraction EJB 551 , the text extraction API 554 , and the text extraction adapters 557 of FIG. 9 are respectively analogous to the text extraction EJB 151 , the text extraction API 154 , and the text extraction adapters 157 of FIG. 5 .
- the text analysis EJB 552 , the text analysis API 555 , and the text analysis adapters 558 of FIG. 9 are respectively analogous to the text analysis EJB 152 , the text analysis API 155 , and the text analysis adapters 158 of FIG. 5 .
- the classification of FIG. 5 is not performed by the web service host 560 of FIG. 9 . Additionally, classification may be subsequently performed by a web service host other than the web service host 560 , utilizing the document keys generated by the web service host 560 .
- FIG. 10 depicts a system 630 which is a variant of the system 130 of FIG. 5 , wherein the web service host 660 of FIG. 10 performs only the text extraction and the classification, in accordance with embodiments of the present invention.
- the Web Services Definitions 650 of FIG. 10 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 660 of FIG. 10 is analogous to the web service host 160 of FIG. 5 .
- the text extraction EJB 651 , the text extraction API 654 , and the text extraction adapters 657 of FIG. 10 are respectively analogous to the text extraction EJB 151 , the text extraction API 154 , and the text extraction adapters 157 of FIG. 5 .
- the classification EJB 653 , the classification API 656 , and the classification adapters 659 of FIG. 10 are respectively analogous to the classification EJB 153 , the classification API 156 , and the classification adapters 159 of FIG. 5 .
- the text analysis of FIG. 5 is not performed by the web service host 660 of FIG. 10 , but is instead performed by a web service host other than the web service host 660 to generate the document keys, utilizing the text in a text format extracted from the reconstructed document by the web service host 660 , and the document keys are subsequently made available to the web service host 660 for performing the classification.
- FIG. 11 depicts a system 730 which is a variant of the system 130 of FIG. 5 , wherein the web service host 760 of FIG. 11 performs only the text analysis and the classification, in accordance with embodiments of the present invention.
- the Web Services Definitions 750 of FIG. 11 is analogous to the Web Services Definitions 150 of FIG. 5 .
- the web service host 760 of FIG. 11 is analogous to the web service host 160 of FIG. 5 .
- the text analysis EJB 752 , the text analysis API 755 , and the text analysis adapters 758 of FIG. 11 are respectively analogous to the text analysis EJB 152 , the text analysis API 155 , and the text extraction adapters 158 of FIG. 5 .
- the classification EJB 753 , the classification API 756 , and the classification adapters 759 of FIG. 11 are respectively analogous to the classification EJB 153 , the classification API 156 , and the classification adapters 159 of FIG. 5 .
- the text extraction of FIG. 5 is not performed by the web service host 760 of FIG. 1 .
- the reconstructed document synthesized by the web service host 760 includes text in a text format.
- FIG. 12 is a flow chart depicting a determination of the web service host of the systems of FIGS. 5-11 and further depicting breaking a document into chucks and transmission of the chunks to the web service host, in accordance with embodiments of the present invention.
- Step 101 provides a remote application on a remote host of a first computing system.
- Step 102 determines whether the web services host of the second computing system is known to the remote host. If the web services host is known to the remote host, then step 105 is next executed. If the web services host is not known to the remote host, then step 103 implements a UDDI lookup (i.e., UDDI search), as explained supra, to determine one or more web services host for performing at least one of the text extraction services, the text analysis services, and the classification services, and for performing the service of being able to read a document in two or more chunks which enables the remote host to select the web service host. As a result of the UDDI lookup, step 104 provides a Web Services Description (WSDL) document that describes how to access each web services host identified in the UDDI lookup. The remote host can use the WSDL document to connect to the web service host in accordance with the Web Services Definitions as explained supra. Step 105 is next executed.
- UDDI lookup i.e., UDDI search
- step 105 the remote host breaks the document into chunks.
- step 106 a session with a session id is established between the remote host and the web services host.
- step 107 the next document chunk is sent by the remote host to the web services host, and in step 108 the next document chunk is received by the web services host.
- step 109 a determination is made of whether all document chunks have been sent by the remote host to the web services host. If it is determined that all document chunks have been sent by the remote host to the web services host, then step 110 is next executed. If it is determined that all document chunks have not been sent by the remote host to the web services host, then the procedure loops back to step 107 to send another document chunk to the web services host.
- the web service host reconstructs the entire document from the totality of document chucks received from the remote host.
- Reconstructing the entire document may, but not necessarily, include storing the document chucks contiguously in a memory medium.
- the documents could be stored in any fragmented manner so long as the web services host has sufficient information to logically link the chunks together in the proper sequence.
- each document chunk could include an appended pointer that points to the next sequential document chunk.
- the web services host may construct a table of pointers which respectively point to the document chunks, wherein the pointers are arranged in the table in a sequential order that corresponds to the sequential order of the document chunks.
- step 111 the web service hosts processes the reconstructed document, which includes at least one of text extraction, text analysis, and classification as explained supra.
- step 112 the web server host sends results back to the remote host.
- the results may include, inter alia, document keys, classification results, etc.
- step 113 the session ends.
- step 114 the reconstructed document is purged from the web server host.
- FIG. 13 illustrates a computer system 90 for determining categories and document links relating to a given document, in accordance with embodiments of the present invention.
- the computer system 90 may represent any of the following computing systems of FIG. 4 : the first computing system 40 , the second computing system 50 , or the third computing system 70 .
- the computer system 90 may represent any of the following computing systems of FIGS. 5 - 11 : the first computing system 140 or the second computing system 170 .
- the computer system 90 comprises a processor 91 , an input device 92 coupled to the processor 91 , an output device 93 coupled to the processor 91 , and memory devices 94 and 95 each coupled to the processor 91 .
- the input device 92 may be, inter alia, a keyboard, a mouse, etc.
- the output device 93 may be, inter alia, a printer, a plotter, a computer screen, a magnetic tape, a removable hard disk, a floppy disk, etc.
- the memory devices 94 and 95 may be, inter alia, a hard disk, a dynamic random access memory (DRAM), a read-only memory (ROM), etc.
- the memory device 95 includes a computer code 97 .
- the computer code 97 comprises at least one algorithm whose functionality depends on which of the first computing system 40 , the second computing system 50 , and the third computing system 70 is represented by the computer system 90 .
- the at least one algorithm comprised by the computer code 97 may have the functionality of any or all of the text extraction adapters ( 55 , 157 , 257 , 557 , 657 ), the text analysis adapters ( 57 , 158 , 358 , 558 , 758 ), and the classifier adapters ( 59 , 159 , 459 , 659 , 759 ) of FIGS. 4-11 .
- the processor 91 executes the computer code 97 .
- the memory device 94 includes input data 96 .
- the input data 96 includes input required by the computer code 97 .
- the output device 93 displays output from the computer code 97 .
- Either or both memory devices 94 and 95 may be used as a computer usable medium having a computer readable program code embodied therein, wherein the computer readable program code comprises the computer code 97 .
- FIG. 13 shows the computer system 90 as a particular configuration of hardware and software
- any configuration of hardware and software may be utilized for the purposes stated supra in conjunction with the particular computer system 90 of FIG. 13 .
- the memory devices 94 and 95 may be portions of a single memory device rather than separate memory devices.
Abstract
Description
- 1. Technical Field
- The present invention relates generally to a method and system for document analysis and retrieval, and more specifically to a method and system for determining categories and document links relating to a given document.
- 2. Related Art
- Transmitting a given document for analysis, and subsequently analyzing the given document to determine categories and document links relating to the given document, may be slow, inefficient, and difficult. Thus, there is a need for a speedy, efficient, and simple method and system for transmitting and analyzing documents to determine categories and document links relating to the given document.
- In first embodiments, the present invention provides a method for document analysis and retrieval, comprising the following steps performed in the order recited:
-
- transmitting, by a remote host in a first computing system to a web service host in a second computing system, a first portion of a document; and
- sequentially transmitting, by the remote host to the web service host, at least one additional portion of the document, wherein the first portion and the at least one additional portion collectively comprise the entire document, wherein the entire document is adapted to be reconstructed and subsequently processed via processing said entire document by the web service host, said processing comprising at least one of:
- extracting text from said entire document to configure said text in a text format, if said entire document received by said web service host comprises said text in a non-text format; determine
- generating document keys associated with said text from analysis of said text in said text format, if said entire document received by said web service host comprises said text in said text format, or if said web service host has previously performed said extracting such that said text in said text format is available to said web service host; and
- determining, from given categories of a document taxonomy, a set of closet categories to the document based on a comparison between the document keys and category keys of the given categories, if said entire document received by said web service host comprises said document keys, or if said web service host has previously performed said generating such that said document keys are available to said web service host.
- In second embodiments, the present invention provides a first computing system that includes a remote host, wherein the remote host is remote relative to a web service host in a second computing system, and wherein the remote host is adapted to:
-
- transmit a first portion of a document to the web service host; and
- sequentially transmit at least one additional portion of the document to the web service host, wherein the first portion and the at least one additional portion collectively comprise the entire document, wherein the entire document is adapted to be reconstructed and subsequently processed via processing said entire document by the web service host, said processing comprising at least one of:
- extracting text from said entire document to configure said text in a text format, if said entire document received by said web service host comprises said text in a non-text format; determine
- generating document keys associated with said text from analysis of said text in said text format, if said entire document received by said web service host comprises said text in said text format, or if said web service host has previously performed said extracting such that said text in said text format is available to said web service host; and
- determining, from given categories of a document taxonomy, a set of closet categories to the document based on a comparison between the document keys and category keys of the given categories, if said entire document received by said web service host comprises said document keys, or if said web service host has previously performed said generating such that said document keys are available to said web service host.
- In third embodiments, the present invention provides a method for document analysis and retrieval, comprising the following steps performed in the order recited:
-
- receiving, by a web service host in a second computing system from a remote host in a first computing system, a first portion of a document;
- sequentially receiving, by the web service host from the remote host, at least one additional portion of the document, wherein the first portion and the at least one additional portion collectively comprise the entire document;
- reconstructing the entire document from the first portion and the at least one additional portion; and
- processing the entire document by the web service host, wherein said processing comprises at least one of:
- extracting text from said entire document to configure said text in a text format, if said entire document received by said web service host comprises said text in a non-text format;
- generating document keys associated with said text from analysis of said text in said text format, if said entire document received by said web service host comprises said text in said text format, or if said web service host has previously performed said extracting such that said text in said text format is available to said web service host; and
- determining, from given categories of a document taxonomy, a set of closet categories to the document, if said entire document received by said web service host comprises said document keys, or if said web service host has previously performed said generating such that said document keys are available to said web service host.
- In fourth embodiments, the present invention provides a system for document analysis and retrieval, comprising a second computing system that includes a web service host, wherein the web service host is remote relative to a remote host in a first computing system, and wherein the web service host is adapted to:
-
- receive a first portion of a document from the remote host;
- sequentially receive at least one additional portion of the document from the remote host, wherein the first portion and the at least one additional portion collectively comprise the entire document;
- reconstruct the entire document from the first portion and the at least one additional portion; and
- implement processing the entire document, said processing comprising at least one of:
- extracting text from said entire document to configure said text in a text format, if said entire document received by said web service host comprises said text in a non-text format;
- generating document keys associated with said text from analysis of said text in said text format, if said entire document received by said web service host comprises said text in said text format, or if said web service host has previously performed said extracting such that said text in said text format is available to said web service host; and
- determining, from given categories of a document taxonomy, a set of closet categories to the document, if said entire document received by said web service host comprises said document keys, or if said web service host has previously performed said generating such that said document keys are available to said web service host.
- The present invention provides a speedy, efficient, and simple method and system for transmitting and analyzing documents to determine categories and document links relating to the given document.
-
FIG. 1 is a flow chart for generating document keys of a given document, in accordance with embodiments of the present invention. -
FIG. 2 is a flow chart for determining which categories of a given taxonomy are at a close distance to the document keys ofFIG. 1 , in accordance with embodiments of the present invention. -
FIG. 3 is a flow chart for determining links to documents based on the document keys ofFIG. 1 , in accordance with embodiments of the present invention. -
FIG. 4 depicts a system for determining categories and document links relating to the given document ofFIG. 1 , in accordance with embodiments of the present invention. -
FIG. 5 depicts a system for processing the given document ofFIG. 1 , wherein the document is divided into chucks before a web service host receives and processes the document by text extraction, text analysis, and classification, in accordance with embodiments of the present invention. -
FIG. 6 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the text extraction, in accordance with embodiments of the present invention. -
FIG. 7 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the text analysis, in accordance with embodiments of the present invention. -
FIG. 8 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the classification, in accordance with embodiments of the present invention. -
FIG. 9 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the text extraction and text analysis, in accordance with embodiments of the present invention. -
FIG. 10 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the text extraction and classification, in accordance with embodiments of the present invention. -
FIG. 11 depicts a variant of the system ofFIG. 5 wherein the web service host performs only the text analysis and classification, in accordance with embodiments of the present invention. -
FIG. 12 is a flow chart depicting a determination of the web service host of the systems ofFIGS. 5-11 and further depicting breaking the document into chucks and transmission of the chunks to the web service host, in accordance with embodiments of the present invention. -
FIG. 13 depicts a computing system for determining categories and document links relating to a given document, in accordance with embodiments of the present invention. -
FIG. 1 is a flow chart for generating document keys of adocument 10, in accordance with embodiments of the present invention. Thedocument 10 includes text and the document keys are the generic roots of words and phrases appearing in said text of thedocument 10. Thedocument 10 is any text document in any application environment such as a document in any commercial word processor environment (e.g., Microsoft Word, WordPerfect®, etc.), a web page accessed through a web browser, etc. The application environment is called a “host” or a “host application”. - In
step 11, thedocument 10 is received from the host by a computing system that will subsequently process the text in steps 12-16.Step 12 determines whether the text in thedocument 10 is formatted (i.e., whether the text appears in a non-text format such as in a format that is specific to the host). If the text is not formatted, thenstep 14 is next executed. If the text is formatted, thenstep 13 extracts the text such that the text is separated from its non-text format, andstep 14 is next executed. Extracting the text leaves format parameters behind. For example, in a HyperText Markup Language (HTML) document, extracting the text leaves the HTML tags behind. There may be some generic formatting retained (e.g., paragraph breaks), but formatting specific to the host application is removed. The output ofstep 13 is a text file. The text extraction may be performed by any method known to one of ordinary skill in the art. Additionally, there are software products on the market (e.g., Verify Key View filter) that may be utilized to perform the text extraction. -
Step 14 tokenizes the text (i.e., generates tokens from the text). A token is the text that appears between delimiters (blanks, periods, commas, etc.). The output of said tokenizing is a list of tokens such as, inter alia, in an array or vector of tokens. -
Step 15 removes stop words from the tokens. Stop words are generic words that have no substantive meaning in relation to the subject content in the document. Examples of stop words include “a”, “the”, “he”, “she”. Stop words may be context-dependent (e.g., stop words for E-mail and for instant message chat may be different), since a word may have a meaning in one context but not in another context. AlthoughFIG. 1 shows step 15 as being executed afterstep 14, the stop words may alternatively be removed from the text prior to execution of the tokenizing ofstep 14. -
Step 16 generates, by stemming, the document keys of thedocument 10 from the tokens. Stemming is a process that determines the normal form or root of each word or phrase in each token. For example, “changing” has the root “change”. Alternative expressions for root words and root phrases are “keywords” and “keyphrases”, respectively. Stemming algorithms are known in the art (e.g., the Porter Stemming Algorithm), and any such known stemming algorithm may be used to implementstep 16. The document keys generated bystep 16 are said roots determined by said stemming. A document key is defined herein as a root word (i.e., keyword) or root phrase (i.e., keyphrase) in the document. -
Step 16 also generates weights associated with said document keys on a on-to-one basis. Generating the weights may comprise determining the frequency count of each document key in the document. The frequency count of a document key is the number of appearances of the document key in the document. The weight may be a linear function of the frequency count. For example, the weight may be numerically equal to, or proportional to, the frequency count. Alternatively, the weight may be a nonlinear function of the frequency count. For example, the weight may be proportional to the frequency count raised to a power P wherein P>1 (e.g., P=2). The weights may also take into account the location of the document key in the document. For example, words or phrases appearing at the beginning of the document, or in the document title, or in the document abstract, etc. may have a higher weight than words or phrases located elsewhere in the document. The importance of the location of the document key in the document is context sensitive, since relevance of different locations (e.g., title, abstract, etc.) may depends on the document itself, on the type of document, on the subject matter of the document, etc. -
FIG. 2 is a flow chart for determining which categories of a given taxonomy are at a close distance to the document keys generated instep 16 ofFIG. 1 , in accordance with embodiments of the present invention. InFIG. 2 , thedocument keys 20 are the document keys generated instep 16 ofFIG. 1 .Step 21 provides as input a document taxonomy and categories of the document taxonomy, as well as category keys of each said category. A document taxonomy is a based on a subject matter classification in conjunction with a collection of stored documents, wherein each taxonomy is a general subject area. Each taxonomy comprises categories. Each category comprises both category keys and category weights associated with the category keys on a one-to-one basis. For example, the taxonomy may be “houses”, and the categories of “houses” may be “house style” and house color”. The “house style” category may have category keys of “colonial”, “ranch”, and “split level”. The “house color” category” may have category keys of “white”, “blue”, and “green”. The category keys are analogous to the document keys discussed supra. Accordingly, the category keys may comprise root words (i.e., keywords) and root phrases (i.e., keyphrases). -
Step 21 also generates weights associated with said category keys on a on-to-one basis. Generating the weights may comprise determining the frequency count of each category key in the stored documents associated with the taxonomy. The frequency count of a category key is the number of appearances of the category key in the stored documents. The weight may be a linear function of the frequency count. For example, the weight may be numerically equal to, or proportional to, the frequency count. Alternatively, the weight may be a linear function of the frequency count. For example, the weight may be proportional to the frequency count raised to a power P wherein P>1 (e.g., P=2). The weights may also take into account the location of the category key in the stored documents. -
Step 22 compares the category keys of each category with thedocument keys 20 to make a determination of a distance D between the document 10 (or equivalently, the document keys 20) and each category as a measure of how close the document 10 (or equivalently, the document keys 20) is to each category. The distance between thedocument 10 and each category may be computed as a dot product of a vector of thedocument keys 20 and a vector of the category keys for each category as follows. Let a reference dictionary for the taxonomy encompass all categories of the taxonomy, and all said categories of the taxonomy collectively comprise N category keys, wherein N is a positive integer. Let V DOC represent a vector of order N of thedocument keys 20 such that each element of V DOC is associated with a unique category key of the reference dictionary, and each element of V DOC contains 1 if there exists a document key of thedocument keys 20 that matches the category key associated with the element of V DOC, or contains 0 otherwise. Let V CAT(I) represent a vector of order N of the Ith category of the taxonomy such that each element of V CAT(I) is associated with said unique category key of the reference dictionary, and each element of V CAT(I) contains 1 if there exists a category key of the Ith category that matches the category key associated with the element of V CAT(I), or contains 0 otherwise. The distance D(I) between the document 10 (or equivalently, the document keys 20) and the Ith category of the taxonomy may be expressed as the dot product of V DOC and V CAT(I); i.e., D=V DOC·V CAT(I). Note that the dot product of two vectors is the summation over the product of corresponding elements of the two vectors, as is conventionally understood in the art of mathematics of vectors. As an example, if N=5, V DOC=[1, 1, 1, 0, 1], and V CAT(I)=[1, 0, 1, 1, 1], then D(I)=3. - The preceding distance D was computed independent of the document weights associated with the
document keys 20 and independent of the category weights associated with the category keys provided for each category instep 21. Recalling that a one (1) in V DOC denotes the existence of a document key that matches a category key of the taxonomy dictionary, V DOC could be replaced by the weighted vector WDOC wherein the ones (1) in V DOC are replaced by their associated document weights. Recalling that a one (1) in V CAT(I) denotes the existence of a category key of the Ith category that matches a category key of the taxonomy dictionary, V CAT(I) could be replaced by the weighted vector W CAT(I) wherein the ones (1) in V CAT(I) are replaced by their associated category weights. Then the distance D could be represented by various alternative dot products, including W DOC·V CAT(I), V DOC·W CAT(I), and W DOC·W CAT(I). - As an example, consider the “houses” taxonomy, discussed supra. For this example, let N=6 and the pertinent vectors have elements representing the sequentially ordered 6 category keys of the taxonomy “houses” dictionary: “colonial”, “ranch”, and “split level”, “white”, “blue”, and “green”. Assume that the
document keys 20 include document keys of only “ranch”, “white”, and “blue” with associated weights 2, 3, and 1, respectively. Category (1) of taxonomy “houses” are assumed to have category keys of “colonial”, “ranch”, and “split level” with associated category weights of 1, 2, and 3, respectively, in this example. Category (2) of taxonomy “houses” are assumed to have category keys of “white”, “blue”, and “green”with associated category weights of 2, 2, and 1, respectively, in this example. Then, the pertinent vectors are: -
- V DOC=[0, 1, 0, 1, 1, 0]
- W DOC=[0, 2, 0, 3, 1, 0]
- V CAT(1)=[1, 1, 1, 0, 0, 0]
- W CAT(1)=[1, 2, 3, 0, 0, 0]
- V CAT(2)=[0, 0, 0, 1, 1, 1]
- W CAT(2)=[0, 0, 0, 2, 2, 1]
The various dot products for this example are: - V DOC·V CAT(1)=1
- V DOC·W CAT(1)=2
- W DOC·V CAT(1)=2
- W DOC·W CAT(1)=4
- V DOC·V CAT(2)=2
- V DOC·W CAT(2)=4
- W DOC·V CAT(2)=4
- W DOC·W CAT(2)=8
In this example, if the weights are neglected then D(1)=V DOC·V CAT(1)=1 and D(2)=V DOC V CAT(2)=2, so that thedocument 10 is closer to category 1 than to category 2 by a factor of 2.
-
Step 23 returns a subset of the categories to the host that provided thedocument 10, such that the returned subset includes those categories that are closest to thedocument 10 along with their associated distances from thedocument 10. The number of such categories returned may be based on any criteria, such as a predetermined number of categories, a predetermined percentage of the categories, categories having a distance below a predetermined threshold distance, etc. The returned categories may be returned in any form such as a file of categories, a printout of the categories, a display of the categories such that a user can use the categories to link to documents related to the categories, etc. -
FIG. 3 is a flow chart for determining links to documents based on the document keys generated instep 16 ofFIG. 1 , in accordance with embodiments of the present invention. InFIG. 3 , thedocument keys 20 are the document keys generated instep 16 ofFIG. 1 .Step 25 creates a search string. The search string comprises a logical function of a subset of thedocument keys 20. The subset may include all of the document keys or less than all of the document keys. The subset may be determined by any criteria, including criteria that depend on the weights associated with the document keys. The number of such document keys in the subset may be based on any criteria, such as a predetermined number of document keys, a predetermined percentage of the document keys, document keys having an associated weight above a predetermined threshold weight, etc. When the subset comprises less than all of the document keys, the specific document keys in the subset may be based on the respective weights such that the highest weighted document keys are used in the search string and the remaining document keys are not used in the search string. If the subset comprises document keys K1, K2, . . . KM (M≧2), then the logical function may be, inter alia, {K1 AND K2 . . . AND KM}or {K1 OR K2, . . . OR KM). A default type of search string, or a default algorithm for generating the search string, may be configurable and thus subject to control by the user. The default search string may be automatically generated in accordance with the default algorithm. -
Step 26 submits the search string to a search engine or to multiple search engines.Step 27 receives links to documents related to the document 10 (i.e., to the document keys 20) from the search engine or from the multiple search engines. Since the search engine or multiple search engines utilized the search string for performing the search(es), the links received from the search engine or from the multiple search engines are based on the search string.Step 28 returns the links to the host that provided thedocument 10. The returned links may be returned in any form such as a file of links, a printout of the links, a display of the links such that a user can use the links to link to the documents related to thedocument 10. Additionally, the steps ofFIGS. 1-3 may be may be re-utilized by being applied to any found document previously determined from steps 25-28 to be related to thedocument 10. Such re-utilization of the steps ofFIGS. 1-3 may be accomplished by applying steps 11-16 ofFIG. 1 to said found document to generate thedocument keys 20 instep 16, followed by applying at least one of the following step sequences to thedocument keys 20 associated with said found document: the sequence of steps 21-23 inFIG. 2 and the sequence of steps 25-28 inFIG. 3 . -
FIG. 4 depicts asystem 30 for determining categories and document links relating to thedocument 10 ofFIG. 1 , in accordance with embodiments of the present invention: Thedocument 10 ofFIG. 1 may be a text document in any application environment such as a document in any commercial word processor environment (e.g., Microsoft Word, WordPerfect, etc.), a web page accessed through a web browser, an instant messaging application, etc. The application environment is called a “host”or a “host application”. Thesystem 30 comprises afirst computing system 40, asecond computing system 50, and athird computing system 70. - The
first computing system 40 comprises a host which is a source of the given document (i.e., thedocument 10 ofFIG. 1 ) to be processed in accordance with the present invention. InFIG. 4 , the host may be alocal host 42 or aremote host 44. Thelocal host 42 is local to thesecond computing system 50. Theremote host 44 is remote thesecond computing system 50 and may communicate with thesecond computing system 50 through any transmission means or path such, inter alia, the Internet, an Intranet, telephone lines, cable, etc. Theremote host 44 may establish communication with thesecond computing system 50 by establishing a “session”, with an associated session identification (“session id”), in accordance with communication protocols. - The
second computing system 50 receives and processes the given document from thefirst computing system 40. Thesecond computing system 50 comprises an Information Management Application Programming Interfaces (APIs) which encapsulate three types of services: text extraction, text analysis, and classification. The text extraction relates to step 13 ofFIG. 2 and includes atext extraction API 54 interfacing atext extraction adapter 55 which is a text extraction tool. The text analysis relates to steps 14-16 ofFIG. 1 and includes atext analysis API 56 interfacing atext analysis adapter 57 which is a set of text analysis tools associated with steps 14-16 ofFIG. 2 . The classifiers relate to steps 21-23 ofFIG. 2 and includes aclassification API 58interfacing classifier adapters 59 which implement steps 21-23 ofFIG. 12 . Theclassifier adapters 59 have access totaxonomy rules 60, which may be stored in a database, file, table or tables, etc. An example of a taxonomy rule of thetaxonomy rule 60 is a specification of the category keys of a category. SeeFIG. 2 supra and accompanying text for a discussion of category keys of a category. - A
Java API 53 directly interfaces thelocal host 42 to said text extraction, text analysis, and classification. TheJava API 53 indirectly interfaces theremote host 44 to said text extraction, text analysis, and classification, inasmuch as theJava API 53 is wrapped in aJava Bean API 52 which is wrapped inWebServices Definitions 51. Thus theWebServices Definitions 51 serves as a direct interface with theremote host 44 and allows theremote host 44 to access the text extraction, text analysis, and classification through whatever Remote Procedure Call (RPC) mechanism is defined in theWebServices Definitions 51. - The
third computing system 70 comprises Search Facilities that relate to the search engine of steps 26-27 ofFIG. 3 . The Search Facilities of thethird computing system 70 may comprise alocal search engine 71 or anexternal search engine 72. Thelocal search engine 71 is local to the first computing system 40 (e.g., an operating system that indexes files in a file system and has a search interface). Theexternal search engine 72 is external to the first computing system 40 (e.g., an Internet search engine). - Although the
first computing system 40, thesecond computing system 50, and thethird computing system 70 are shown inFIG. 4 as separate computer systems, thefirst computing system 40 and thesecond computing system 50 may each be included within a first same computing system. Similarly, thefirst computing system 40 and thethird computing system 70 may each be included within a second same computing system. Additionally, thefirst computing system 40, thesecond computing system 50, and thethird computing system 70 may each be included within a third same computing system. -
FIG. 5 depicts asystem 130 for determining categories and document links relating to thedocument 10 ofFIG. 1 , in accordance with embodiments of the present invention. Thesystem 130 comprises afirst computing system 140 and asecond computing system 170. Thefirst computing system 140 and thesecond computing system 170 ofFIG. 5 are respectively similar in many respects to thefirst computing system 40 and thesecond computing system 50 ofFIG. 4 . The taxonomy rules 60 and thethird computing system 70 ofFIG. 4 are not shown inFIG. 5 for simplicity, but may nonetheless be present in conjunction withFIG. 5 and have the same role as was described supra in conjunction withFIG. 4 . - The
first computing system 140 comprises aremote host 144 which is a source of the given document (i.e., thedocument 10 ofFIG. 1 ) to be processed in accordance with the present invention. InFIG. 5 , theremote host 144 is any remote application environment (or remote application) such any commercial word processor environment (e.g., Microsoft Word, WordPerfect, etc.), a web browser, an instant messaging application, etc. Theremote host 144 is remote thesecond computing system 170 and may communicate with the web services host 160 through any transmission means or path such, inter alia, the Internet, an Intranet, telephone lines, cable, etc. Theremote host 144 may establish communication with the web services host 160 by establishing a “session”, with an associated session identification (“session id”), in accordance with communication protocols. - The
remote host 144 is linked to Universal Description, Discovery (UDDI) services 146. The UDDI services 146 enables theremote host 144 to select theweb service host 160 of thesecond computing system 170 for processing the given document as will be described infra. - The
second computing system 170 receives and processes the given document from thefirst computing system 140. Thesecond computing system 170 comprises theweb service host 160 which encapsulates, in accordance with theWeb Services Definitions 150, three types of services: text extraction, text analysis, and classification. The text extraction relates to step 13 ofFIG. 2 and includes a text extraction Enterprise Java Bean (EJB) 151 which wraps a text extraction Application Programming Interface (API) 154 and a text extraction adapter 157 (a text extraction tool). The text extraction receives the document text in a non-text format, extracts the text, and configures the extracted text in a text format. Text extraction is unnecessary if the received document text is in a text format. The text analysis relates to steps 14-16 ofFIG. 1 and includes anEJB 152 which wraps atext analysis API 155 and a text analysis adapter 158 (a set of text analysis tools associated with steps 14-16 ofFIG. 1 ). The text analysis generates document keys associated with the text from analysis of the text (in the text format), by generating tokens of the text such that stop words do not appear in the tokens, and stemming the tokens to generate the document keys from the tokens. The classifiers relate to steps 21-23 ofFIG. 2 and includes aclassification EJB 153 which wraps aclassification API 156 andclassification adapters 159 which implement steps 21-23 ofFIG. 2 . The classification determines, from given categories of a document taxonomy, a set of closet categories to the document based on a comparison between document keys and category keys of the given categories as explained supra in conjunction withFIG. 2 . InFIG. 5 , theclassification adapters 159 have access to taxonomy rules 60 (seeFIG. 1 ), described supra. TheWeb Services Definitions 150 serves as a direct interface with theremote host 144 and allows theremote host 144 to access the text extraction, text analysis, and classification through whatever Remote Procedure Call (RPC) mechanism is defined in theWeb Services Definitions 150. - If there is a size limit to the amount of data that can be transferred in one chunk to the web services host 160, the web services host 160 receives the given document from the
remote host 144 in a plurality of chunks after the given document has been broken down into said chunks by theremote host 144. Thus, the web services host 160 is capable of receiving said chunks of said document, and of synthesizing said chucks to reconstruct the entire document for subsequent processing (i.e., text extraction, text analysis, and classification). Theremote host 144 can break down the given document in any manner such that the web services host 160 is capable of receiving the largest of said chunks. The session id associated with the session between theremote host 144 and the web services host 160 may be used to make sure that the correct document chunk is reconciled with the reconstructed document. After the web services host 160 reconstructs the entire document, the processing (i.e., text extraction, text analysis, classification) of the reconstructed document, and utilization of the document keys resulting therefrom, can be implemented in the manner described supra in conjunction withFIGS. 1-3 . - The
remote host 144 is linked to Universal Description, Discovery (UDDI) services 146. The UDDI services 146 enables theremote host 144 to select theweb service host 160 of thesecond computing system 170 for processing the given document as will be described next. - The remote application of the
remote host 144 may have knowledge of an information processing service that can serve as theweb service host 160. If theremote host 144 does not have knowledge of an information processing service that can serve as theweb service host 160, then theremote host 144 can determine an appropriate web service to serve as theweb service host 160, by utilizing theUDDI services 146 which could be internal to a network or which could alternatively be a public server such as the Extensible Markup Language (XML)-based public registry (“XML-based public UDDI registry”) to which over 130 companies (e.g., IBM, Microsoft, etc.) are affiliated. This XML-based public UDDI registry enables businesses worldwide to list themselves on the Internet. Thus XML-based public UDDI registry serves to streamline online transactions by enabling companies to find one another on the Web and make their systems interoperable for e-commerce. UDDI is often compared to a telephone book's white, yellow, and green pages, and allows businesses to list themselves by name, product, location, or the Web services they offer. This XML-based public UDDI registry has a specification which utilizes World Wide Web Consortium (W3C) and Internet Engineering Task Force, and Domain Name System (DNS) protocols, and has also adopted early versions of the proposed Simple Object Access Protocol (SOAP) messaging guidelines for cross platform programming. - The
remote host 144 can have a search performed in conjunction with theUDDI services 146 to determine one or more information processing services for the text extraction services, the text analysis services, and the classification services needed from theweb service host 150, as well as the service of being able to read a document in two or more chunks, thereby enabling theremote host 144 to select the information processing service that can serve asweb service host 160. The search results in a Web Services Description (WSDL) 148 document that describes how to access each information processing service identified in the UDDI search. Theremote host 144 can use theWSDL 148 document to connect to theweb service host 160 in accordance with theWeb Services Definitions 150. -
FIG. 6 depicts asystem 230 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 260 ofFIG. 6 performs only the text extraction, in accordance with embodiments of the present invention. TheWeb Services Definitions 250 ofFIG. 6 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 260 ofFIG. 6 is analogous to theweb service host 160 ofFIG. 5 . Thetext extraction EJB 251, thetext extraction API 254, and thetext extraction adapters 257 ofFIG. 6 are respectively analogous to thetext extraction EJB 151, thetext extraction API 154, and thetext extraction adapters 157 ofFIG. 5 . The text analysis and the classification ofFIG. 5 are not performed by theweb service host 260 ofFIG. 6 . Thus, the text analysis and/or the classification may be subsequently performed by one or more web service hosts other than theweb service host 260, utilizing the text extracted by theweb service host 260. -
FIG. 7 depicts asystem 330 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 360 ofFIG. 7 performs only the text analysis, in accordance with embodiments of the present invention. TheWeb Services Definitions 350 ofFIG. 7 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 360 ofFIG. 7 is analogous to theweb service host 160 ofFIG. 5 . Thetext analysis EJB 352, thetext analysis API 355, and thetext analysis adapters 358 ofFIG. 7 are respectively analogous to thetext analysis EJB 152, thetext analysis API 155, and thetext analysis adapters 158 ofFIG. 5 . The text extraction and the classification ofFIG. 5 are not performed by theweb service host 360 ofFIG. 7 . Thus, the reconstructed document synthesized by theweb service host 360 includes text in a text format. Additionally, classification may be subsequently performed by a web service host other than theweb service host 360, utilizing the document keys generated by theweb service host 360. -
FIG. 8 depicts asystem 430 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 460 ofFIG. 8 performs only the classification, in accordance with embodiments of the present invention. TheWeb Services Definitions 450 ofFIG. 8 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 460 ofFIG. 8 is analogous to theweb service host 160 ofFIG. 5 . Theclassification EJB 453, theclassification API 456, and theclassification adapters 459 ofFIG. 8 are respectively analogous to theclassification EJB 153, theclassification API 156, and theclassification adapters 159 ofFIG. 5 . The text extraction and the text analysis ofFIG. 5 are not performed by theweb service host 460 ofFIG. 8 . Thus, the reconstructed document synthesized by theweb service host 460 includes document keys. -
FIG. 9 depicts asystem 530 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 560 ofFIG. 9 performs only the text extraction and the text analysis, in accordance with embodiments of the present invention. TheWeb Services Definitions 550 ofFIG. 9 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 560 ofFIG. 9 is analogous to theweb service host 160 ofFIG. 5 . Thetext extraction EJB 551, thetext extraction API 554, and thetext extraction adapters 557 ofFIG. 9 are respectively analogous to thetext extraction EJB 151, thetext extraction API 154, and thetext extraction adapters 157 ofFIG. 5 . Thetext analysis EJB 552, thetext analysis API 555, and thetext analysis adapters 558 ofFIG. 9 are respectively analogous to thetext analysis EJB 152, thetext analysis API 155, and thetext analysis adapters 158 ofFIG. 5 . The classification ofFIG. 5 is not performed by theweb service host 560 ofFIG. 9 . Additionally, classification may be subsequently performed by a web service host other than theweb service host 560, utilizing the document keys generated by theweb service host 560. -
FIG. 10 depicts asystem 630 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 660 ofFIG. 10 performs only the text extraction and the classification, in accordance with embodiments of the present invention. TheWeb Services Definitions 650 ofFIG. 10 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 660 ofFIG. 10 is analogous to theweb service host 160 ofFIG. 5 . Thetext extraction EJB 651, thetext extraction API 654, and thetext extraction adapters 657 ofFIG. 10 are respectively analogous to thetext extraction EJB 151, thetext extraction API 154, and thetext extraction adapters 157 ofFIG. 5 . Theclassification EJB 653, theclassification API 656, and theclassification adapters 659 ofFIG. 10 are respectively analogous to theclassification EJB 153, theclassification API 156, and theclassification adapters 159 ofFIG. 5 . The text analysis ofFIG. 5 is not performed by theweb service host 660 ofFIG. 10 , but is instead performed by a web service host other than theweb service host 660 to generate the document keys, utilizing the text in a text format extracted from the reconstructed document by theweb service host 660, and the document keys are subsequently made available to theweb service host 660 for performing the classification. -
FIG. 11 depicts asystem 730 which is a variant of thesystem 130 ofFIG. 5 , wherein theweb service host 760 ofFIG. 11 performs only the text analysis and the classification, in accordance with embodiments of the present invention. TheWeb Services Definitions 750 ofFIG. 11 is analogous to theWeb Services Definitions 150 ofFIG. 5 . Theweb service host 760 ofFIG. 11 is analogous to theweb service host 160 ofFIG. 5 . Thetext analysis EJB 752, thetext analysis API 755, and thetext analysis adapters 758 ofFIG. 11 are respectively analogous to thetext analysis EJB 152, thetext analysis API 155, and thetext extraction adapters 158 ofFIG. 5 . Theclassification EJB 753, theclassification API 756, and theclassification adapters 759 ofFIG. 11 are respectively analogous to theclassification EJB 153, theclassification API 156, and theclassification adapters 159 ofFIG. 5 . The text extraction ofFIG. 5 is not performed by theweb service host 760 ofFIG. 1 . Thus, the reconstructed document synthesized by theweb service host 760 includes text in a text format. -
FIG. 12 is a flow chart depicting a determination of the web service host of the systems ofFIGS. 5-11 and further depicting breaking a document into chucks and transmission of the chunks to the web service host, in accordance with embodiments of the present invention. Step 101 provides a remote application on a remote host of a first computing system. - Step 102 determines whether the web services host of the second computing system is known to the remote host. If the web services host is known to the remote host, then step 105 is next executed. If the web services host is not known to the remote host, then step 103 implements a UDDI lookup (i.e., UDDI search), as explained supra, to determine one or more web services host for performing at least one of the text extraction services, the text analysis services, and the classification services, and for performing the service of being able to read a document in two or more chunks which enables the remote host to select the web service host. As a result of the UDDI lookup,
step 104 provides a Web Services Description (WSDL) document that describes how to access each web services host identified in the UDDI lookup. The remote host can use the WSDL document to connect to the web service host in accordance with the Web Services Definitions as explained supra. Step 105 is next executed. - In
step 105, the remote host breaks the document into chunks. Instep 106, a session with a session id is established between the remote host and the web services host. Instep 107, the next document chunk is sent by the remote host to the web services host, and instep 108 the next document chunk is received by the web services host. Instep 109, a determination is made of whether all document chunks have been sent by the remote host to the web services host. If it is determined that all document chunks have been sent by the remote host to the web services host, then step 110 is next executed. If it is determined that all document chunks have not been sent by the remote host to the web services host, then the procedure loops back to step 107 to send another document chunk to the web services host. - In
step 110, the web service host reconstructs the entire document from the totality of document chucks received from the remote host. Reconstructing the entire document may, but not necessarily, include storing the document chucks contiguously in a memory medium. Alternatively, the documents could be stored in any fragmented manner so long as the web services host has sufficient information to logically link the chunks together in the proper sequence. For example, each document chunk could include an appended pointer that points to the next sequential document chunk. As another example, the web services host may construct a table of pointers which respectively point to the document chunks, wherein the pointers are arranged in the table in a sequential order that corresponds to the sequential order of the document chunks. - In
step 111, the web service hosts processes the reconstructed document, which includes at least one of text extraction, text analysis, and classification as explained supra. Instep 112, the web server host sends results back to the remote host. The results may include, inter alia, document keys, classification results, etc. Instep 113, the session ends. Instep 114, the reconstructed document is purged from the web server host. -
FIG. 13 illustrates acomputer system 90 for determining categories and document links relating to a given document, in accordance with embodiments of the present invention. Thecomputer system 90 may represent any of the following computing systems ofFIG. 4 : thefirst computing system 40, thesecond computing system 50, or thethird computing system 70. Alternatively, thecomputer system 90 may represent any of the following computing systems of FIGS. 5-11: thefirst computing system 140 or thesecond computing system 170. Thecomputer system 90 comprises aprocessor 91, aninput device 92 coupled to theprocessor 91, anoutput device 93 coupled to theprocessor 91, andmemory devices processor 91. Theinput device 92 may be, inter alia, a keyboard, a mouse, etc. Theoutput device 93 may be, inter alia, a printer, a plotter, a computer screen, a magnetic tape, a removable hard disk, a floppy disk, etc. Thememory devices memory device 95 includes acomputer code 97. Thecomputer code 97 comprises at least one algorithm whose functionality depends on which of thefirst computing system 40, thesecond computing system 50, and thethird computing system 70 is represented by thecomputer system 90. For example, if thecomputer system 90 represents thesecond computing system 50 then the at least one algorithm comprised by thecomputer code 97 may have the functionality of any or all of the text extraction adapters (55, 157, 257, 557, 657), the text analysis adapters (57, 158, 358, 558, 758), and the classifier adapters (59, 159, 459, 659, 759) ofFIGS. 4-11 . Theprocessor 91 executes thecomputer code 97. Thememory device 94 includesinput data 96. Theinput data 96 includes input required by thecomputer code 97. Theoutput device 93 displays output from thecomputer code 97. Either or bothmemory devices 94 and 95 (or one or more additional memory devices not shown inFIG. 13 ) may be used as a computer usable medium having a computer readable program code embodied therein, wherein the computer readable program code comprises thecomputer code 97. - While
FIG. 13 shows thecomputer system 90 as a particular configuration of hardware and software, any configuration of hardware and software, as would be known to a person of ordinary skill in the art, may be utilized for the purposes stated supra in conjunction with theparticular computer system 90 ofFIG. 13 . For example, thememory devices - While embodiments of the present invention have been described herein for purposes of illustration, many modifications and changes will become apparent to those skilled in the art. Accordingly, the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.
Claims (40)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/613,560 US7321880B2 (en) | 2003-07-02 | 2003-07-02 | Web services access to classification engines |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/613,560 US7321880B2 (en) | 2003-07-02 | 2003-07-02 | Web services access to classification engines |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050005232A1 true US20050005232A1 (en) | 2005-01-06 |
US7321880B2 US7321880B2 (en) | 2008-01-22 |
Family
ID=33552718
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/613,560 Expired - Fee Related US7321880B2 (en) | 2003-07-02 | 2003-07-02 | Web services access to classification engines |
Country Status (1)
Country | Link |
---|---|
US (1) | US7321880B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050276479A1 (en) * | 2004-06-10 | 2005-12-15 | The Board Of Trustees Of The University Of Illinois | Methods and systems for computer based collaboration |
US20060010117A1 (en) * | 2004-07-06 | 2006-01-12 | Icosystem Corporation | Methods and systems for interactive search |
US20070067212A1 (en) * | 2005-09-21 | 2007-03-22 | Eric Bonabeau | System and method for aiding product design and quantifying acceptance |
US20090055345A1 (en) * | 2007-08-22 | 2009-02-26 | Harish Mehta | UDDI Based Classification System |
US20090144617A1 (en) * | 2007-02-01 | 2009-06-04 | Pablo Funes | Method and system for fast, generic, online and offline, multi-source text analysis and visualization |
US20100211558A1 (en) * | 2004-07-06 | 2010-08-19 | Icosystem Corporation | Methods and apparatus for interactive searching techniques |
US8117140B2 (en) | 2003-08-01 | 2012-02-14 | Icosystem Corporation | Methods and systems for applying genetic operators to determine systems conditions |
US8117139B2 (en) | 2003-04-04 | 2012-02-14 | Icosystem Corporation | Methods and systems for interactive evolutionary computing (IEC) |
US20120124234A1 (en) * | 2010-11-16 | 2012-05-17 | Martin Tewes | Reliable message transfer |
US20210049512A1 (en) * | 2016-02-16 | 2021-02-18 | Amazon Technologies, Inc. | Explainers for machine learning classifiers |
Families Citing this family (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050154769A1 (en) * | 2004-01-13 | 2005-07-14 | Llumen, Inc. | Systems and methods for benchmarking business performance data against aggregated business performance data |
US7774456B1 (en) * | 2004-02-27 | 2010-08-10 | Packeteer, Inc. | Methods, apparatuses and systems facilitating classification of web services network traffic |
US8468445B2 (en) * | 2005-03-30 | 2013-06-18 | The Trustees Of Columbia University In The City Of New York | Systems and methods for content extraction |
US7877678B2 (en) * | 2005-08-29 | 2011-01-25 | Edgar Online, Inc. | System and method for rendering of financial data |
US7917841B2 (en) * | 2005-08-29 | 2011-03-29 | Edgar Online, Inc. | System and method for rendering data |
US8209407B2 (en) * | 2006-02-10 | 2012-06-26 | The United States Of America, As Represented By The Secretary Of The Navy | System and method for web service discovery and access |
US20080140591A1 (en) * | 2006-12-12 | 2008-06-12 | Yahoo! Inc. | System and method for matching objects belonging to hierarchies |
US8620849B2 (en) * | 2010-03-10 | 2013-12-31 | Lockheed Martin Corporation | Systems and methods for facilitating open source intelligence gathering |
US8650198B2 (en) | 2011-08-15 | 2014-02-11 | Lockheed Martin Corporation | Systems and methods for facilitating the gathering of open source intelligence |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6519631B1 (en) * | 1999-08-13 | 2003-02-11 | Atomica Corporation | Web-based information retrieval |
Family Cites Families (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2973944B2 (en) | 1996-06-26 | 1999-11-08 | 富士ゼロックス株式会社 | Document processing apparatus and document processing method |
US5802508A (en) | 1996-08-21 | 1998-09-01 | International Business Machines Corporation | Reasoning with rules in a multiple inheritance semantic network with exceptions |
JPH11120183A (en) | 1997-10-08 | 1999-04-30 | Ntt Data Corp | Method and device for extracting keyword |
US5987457A (en) | 1997-11-25 | 1999-11-16 | Acceleration Software International Corporation | Query refinement method for searching documents |
WO2000033215A1 (en) | 1998-11-30 | 2000-06-08 | Justsystem Corporation | Term-length term-frequency method for measuring document similarity and classifying text |
CA2404337A1 (en) | 2000-03-27 | 2001-10-04 | Documentum, Inc. | Method and apparatus for generating metadata for a document |
JP2001344246A (en) | 2000-05-30 | 2001-12-14 | Kansai Electric Power Co Inc:The | Method for preparing term table data base and method for retrieving electronic document |
US6463430B1 (en) | 2000-07-10 | 2002-10-08 | Mohomine, Inc. | Devices and methods for generating and managing a database |
JP2002140356A (en) | 2000-11-02 | 2002-05-17 | Mitsubishi Heavy Ind Ltd | Database system and database retrieving method |
KR20020049164A (en) | 2000-12-19 | 2002-06-26 | 오길록 | The System and Method for Auto - Document - classification by Learning Category using Genetic algorithm and Term cluster |
-
2003
- 2003-07-02 US US10/613,560 patent/US7321880B2/en not_active Expired - Fee Related
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6519631B1 (en) * | 1999-08-13 | 2003-02-11 | Atomica Corporation | Web-based information retrieval |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8117139B2 (en) | 2003-04-04 | 2012-02-14 | Icosystem Corporation | Methods and systems for interactive evolutionary computing (IEC) |
US8117140B2 (en) | 2003-08-01 | 2012-02-14 | Icosystem Corporation | Methods and systems for applying genetic operators to determine systems conditions |
US20050276479A1 (en) * | 2004-06-10 | 2005-12-15 | The Board Of Trustees Of The University Of Illinois | Methods and systems for computer based collaboration |
US7904512B2 (en) * | 2004-06-10 | 2011-03-08 | The Board Of Trustees Of The University Of Illinois | Methods and systems for computer based collaboration |
US20060010117A1 (en) * | 2004-07-06 | 2006-01-12 | Icosystem Corporation | Methods and systems for interactive search |
US20100211558A1 (en) * | 2004-07-06 | 2010-08-19 | Icosystem Corporation | Methods and apparatus for interactive searching techniques |
US20070067212A1 (en) * | 2005-09-21 | 2007-03-22 | Eric Bonabeau | System and method for aiding product design and quantifying acceptance |
US8423323B2 (en) | 2005-09-21 | 2013-04-16 | Icosystem Corporation | System and method for aiding product design and quantifying acceptance |
US7792816B2 (en) * | 2007-02-01 | 2010-09-07 | Icosystem Corporation | Method and system for fast, generic, online and offline, multi-source text analysis and visualization |
US20090144617A1 (en) * | 2007-02-01 | 2009-06-04 | Pablo Funes | Method and system for fast, generic, online and offline, multi-source text analysis and visualization |
US20090055345A1 (en) * | 2007-08-22 | 2009-02-26 | Harish Mehta | UDDI Based Classification System |
US10133826B2 (en) * | 2007-08-22 | 2018-11-20 | Sap Se | UDDI based classification system |
US20120124234A1 (en) * | 2010-11-16 | 2012-05-17 | Martin Tewes | Reliable message transfer |
US8539095B2 (en) * | 2010-11-16 | 2013-09-17 | Sap Ag | Reliable message transfer |
US20210049512A1 (en) * | 2016-02-16 | 2021-02-18 | Amazon Technologies, Inc. | Explainers for machine learning classifiers |
Also Published As
Publication number | Publication date |
---|---|
US7321880B2 (en) | 2008-01-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7321880B2 (en) | Web services access to classification engines | |
US8015171B2 (en) | Document analysis and retrieval | |
US7809710B2 (en) | System and method for extracting content for submission to a search engine | |
US7577739B2 (en) | Employee internet management device | |
EP1522933B1 (en) | Computer aided query to task mapping | |
US7246118B2 (en) | Method and system for automated collaboration using electronic book highlights and notations | |
US8606795B2 (en) | Frequency based keyword extraction method and system using a statistical measure | |
WO2000039711A1 (en) | System and method for aggregating distributed data | |
US20020073165A1 (en) | Real-time context-sensitive customization of user-requested content | |
US20030074400A1 (en) | Web user profiling system and method | |
CN102722501B (en) | Search engine and realization method thereof | |
MXPA03005451A (en) | Method and system for associating actions with semantic labels in electronic documents. | |
JP2005535039A (en) | Interact with desktop clients with geographic text search systems | |
WO2001027793A2 (en) | Indexing a network with agents | |
CN103942268B (en) | Search for method, equipment and the application interface being combined with application | |
TW200527229A (en) | Learning and using generalized string patterns for information extraction | |
JP5048956B2 (en) | Information retrieval by database crawling | |
US6799166B2 (en) | Method and apparatus for preventing duplicate transactions on batch mode failure recovery in a data processing system | |
US20090327323A1 (en) | Integrating Data Resources by Generic Feed Augmentation | |
US20090077028A1 (en) | Web services access to classification engines | |
KR20020075359A (en) | System and method for capturing and managing information from digital source | |
WO2001052078A1 (en) | Dead hyper link detection method and system | |
JP2003016101A (en) | System and method for retrieving electronic catalog | |
KR102570178B1 (en) | Method for generating and utilizing a training dataset for deep learning based generative ai system using super-large ai | |
US7207003B1 (en) | Method and apparatus in a data processing system for word based render browser for skimming or speed reading web pages |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOSBY, DESIREE D. G.;REEL/FRAME:014299/0672Effective date: 20030609 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
REMI | Maintenance fee reminder mailed | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20160122 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |