US9021087B1 - Method to improve caching accuracy by using snapshot technology - Google Patents
Method to improve caching accuracy by using snapshot technology Download PDFInfo
- Publication number
- US9021087B1 US9021087B1 US13/359,516 US201213359516A US9021087B1 US 9021087 B1 US9021087 B1 US 9021087B1 US 201213359516 A US201213359516 A US 201213359516A US 9021087 B1 US9021087 B1 US 9021087B1
- Authority
- US
- United States
- Prior art keywords
- cache
- snapshot
- data
- server
- requests
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1095—Replication or mirroring of data, e.g. scheduling or transport for data synchronisation between network nodes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0866—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches for peripheral storage systems, e.g. disk cache
- G06F12/0868—Data transfer between cache memory and other subsystems, e.g. storage devices or host systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1458—Management of the backup or restore process
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/46—Caching storage objects of specific type in disk cache
- G06F2212/465—Structured object, e.g. database record
Definitions
- Embodiments are generally related to a system and method to improve caching accuracy by using snapshot technology.
- a cache allows for the storage of data, so that future requests for that data can be served faster.
- data is requested, if the data exists within the cache, this request can be served quickly by reading the cache.
- the requested data is not contained within the cache, the data is retrieved from the original storage location, which is comparatively slower. Snapshot technology enables the copying and preservation of a state of a storage device at any given moment for restoring the storage device in the event that it fails.
- Embodiments described herein relate to methods and systems for improving caching accuracy by utilizing snapshot technology.
- One or more requests for data are received.
- the requests for data may be requests to load one or more web pages.
- the requests for data return valid data, the valid data is used to populate a cache.
- the response performance of a server device is monitored. When the response performance of the server device is above a predetermined threshold, one or more snapshot versions of a memory block are taken.
- the memory block may include the current state of the data in the cache at the time the snapshot version was taken.
- FIG. 1 is a diagram illustrating an exemplary system, according to an embodiment.
- FIG. 2 is a diagram illustrating an exemplary server, according to an embodiment.
- FIG. 3 is a diagram illustrating an exemplary snapshot generator, according to an embodiment.
- FIG. 5 is a flowchart of an exemplary method, according to an embodiment.
- FIG. 6 is a block diagram of a computer system in which embodiments can be implemented.
- references to “one embodiment”, “an embodiment”, “an example embodiment”, etc. indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.
- Warming up a cache is the preloading of a server's cache with data that was referenced the last time the database was started. It is designed to help reduce the execution times of the initial queries executed against a database. This results in improved performance when the same or similar queries are executed against a database, each time it is started.
- Warming up a cache involves a server checking whether a database contains a previously recorded collection of pages. If it does, the server loads the corresponding pages into a cache. The database can still process requests while the cache is loading pages, but warming up may stop if a significant amount of I/O activity is detected in the database. In such an case, warming up of the cache stops to avoid performance degradation of queries that access pages that are not contained in the set of pages being reloaded into the cache. However, this is done at a cost to the user, who may experience delay until the warm up process reconvenes.
- a caching system allows for the use of a snapshot version of data to be returned when requested.
- one or more requests for data are received. These requests may be, for example, one or more HTTP messages from a client device, such as a web browser.
- a server device Upon, receiving the one or more requests for data, a server device stores the data within a cache for faster retrieval at a later time. The response performance of the cache is monitored to determine the state and accuracy of the cache system.
- a cache access of the cache is performed to determine if the data is presently stored in the cache. If the data is found within the cache, this is considered a cache hit.
- the response performance of the cache is the ratio of the total number of cache hits to the total number of cache accesses.
- a snapshot version of the current state of the data within the cache is taken and stored.
- a snapshot version creates a point-in-time copy of the data within the cache. For example, a response performance of the cache of at least 0.85 over a span of an hour indicates that 85% of the cache accesses resulted in a cache hit and the return of reliable and accurate data. At that moment in time, a snapshot version of the data in the cache is taken.
- a snapshot version of the data is loaded into the cache and the snapshot version of the data is sent in response to any requests for that data. Since the data loaded during a request will be a snapshot version of the data with a high response performance, the accuracy of the data within the cache is improved. This results in improved request-response performance time between the client device and the server While a client-server relationship and HTTP have been described, it may be recognized by one skilled in the art that other protocols and architectures may serve as the basis of data exchange, such as peer-to-peer networking.
- FIG. 1 is a diagram illustrating an exemplary system, according to an embodiment.
- FIG. 1 illustrates a snapshot cache system 100 .
- Snapshot system 100 includes one or more client devices 102 A, 102 B . . . 102 N and server 108 , coupled via one or more networks 104 , such as the Internet or local area network.
- Client devices 102 A, 102 B . . . 102 N includes respective browser applications 116 A, 116 B . . . 116 N.
- Server 108 includes resource database 110 , cache database 112 , snapshot generator 114 , and data manager 118 .
- snapshot system 100 operates as follows: One or more requests for data from client devices 102 A, 102 B . . . 102 N utilizing respective browsers 116 A, 116 B . . . 116 N are received by data manager 118 . In response to the request for data, data manager 118 retrieves the data from resource database 110 while storing a copy of the data within cache database 112 . Upon, subsequent requests for the same data, data manager 118 retrieves the data from cache database 112 . Snapshot generator 114 monitors the response performance of cache database 112 by measuring the ratio of cache hits in relation to the number of cache accesses.
- a snapshot version of the data within cache database 112 is taken and stored within a storage device.
- the storage device Upon receiving a request to warm up the cache, the storage device is accessed and a snapshot version of the data is retrieved based on a send priority and stored in cache database 112 .
- Server 108 then sends the data of the snapshot version to client devices 102 A, 102 B . . . 102 N when requested.
- Client devices 102 A, 102 B . . . 102 N are processor-based electronic devices that may be manipulated by a user and are capable of requesting and receiving resources 110 over network 104 .
- Examples of client devices 102 A, 102 B . . . 102 N may include personal computers, mobile communication devices and tablet computers.
- Client devices 102 A, 102 B . . . 102 N typically include an application, such as browsers 116 A, 116 B . . . 116 N.
- a user may utilize browsers 116 A, 116 B . . . 116 N to request data in resource database 110 , such as HTML pages over network 104 .
- a user requests data within resource database 110 by typing the resource address associated with that data.
- server 108 delivers the data within resource database 110 to client devices 102 A, 102 B . . . 102 N.
- the request for data by client devices 102 A, 102 B . . . 102 N can be satisfied by server 108 utilizing the snapshot version of the data within resource database 110 , as will be discussed below.
- client devices 102 A, 102 B . . . 102 N receive data from server 108
- client devices 102 A, 102 B . . . 102 N use respective browsers 116 A, 116 B . . . 116 N to display the data to the user
- Network 104 may be any network or combination of networks that can carry data communications. Such a network 104 may include, but is not limited to, a local area network, metropolitan area network, and/or wide area network such as the Internet. Network 104 can support protocols and technology including, but not limited to, World Wide Web (or simply the “Web”) protocols such as a Hypertext Transfer Protocol (“HTTP”) protocols, and/or services. Intermediate web servers, gateways, or other servers may be provided between components of the system shown in FIG. 1 , depending upon a particular application or environment.
- Web World Wide Web
- HTTP Hypertext Transfer Protocol
- Server 108 is a computing device or an application executing on a computing device that hosts resource database 110 .
- Resource database 110 may store data associated with a domain name.
- Resource database 110 can be hosted by one or more servers 108 .
- Server 108 delivers data within resource database 110 to client devices 102 A, 102 B . . . 102 N.
- Resource database 110 can store any data that can be provided over network 104 .
- the data stored in resource database 110 may be identified by a resource address that is associated with each domain name.
- the data within resource database 110 may include, for example, hypertext markup language (HTML) pages, word processing documents, portable document format (PDF) documents, images, video, and feed sources.
- HTML hypertext markup language
- PDF portable document format
- the data in resource database 110 can include content, such as words, phrases, images and sounds, that may include embedded information (such as meta-information in hyperlinks) and/or embedded instructions (such as JavaScript scripts). Further embodiments will be described using one client device 102 A. However, it will be known by one skilled in the art that any number of client devices 102 A, 102 B . . . 102 N may be used.
- Server 108 includes data manager 118 and cache database 112 .
- data manager 118 includes the functionality to store, organize, manage, and access data in cache database 112 .
- data manager 118 upon a request for data by client device 102 A, data manager 118 receives the request and searches for the data within resource database 110 .
- Data manager 118 retrieves the data within resource database 118 and a copy of the data is stored within cache database 112 .
- Cache database 112 may be any type of structured memory, including a persistent memory.
- cache database 112 may be implemented as an array, relational database or file system.
- Snapshot generator 114 monitors the response performance of cache database 112 .
- the response performance of cache database 112 is determined by the ratio of cache hits within cache database 112 to the number of cache accesses of cache database 112 . Every request from client device 102 A results in a cache access of database 112 to determine whether a copy of the data is stored within cache database 112 .
- a cache hit is a request from client device 102 A which can be satisfied by accessing cache database 112 .
- a cache miss is a request from client device 102 A which cannot be satisfied by accessing cache database 112 .
- a cache miss will result in a query of resource database 110 to satisfy the data request, as described above.
- the response performance of cache database 112 is monitored for a predetermined amount of time.
- snapshot generator 114 When the response performance of cache database 112 is above a predetermined threshold, snapshot generator 114 generates and stores one or more snapshot versions of the data within cache database 112 .
- the one or more snapshot versions are copies of the data within cache database 112 at different times when the response performance of cache database 112 is above the predetermined threshold.
- data manager 118 Upon initial startup or restart of server 108 , data manager 118 sends a warm-up cache signal to populate cache database 112 .
- Snapshot generator 114 A selects and loads a snapshot version in cache database 112 .
- data manager 118 Upon a subsequent request for data from client device 102 A, data manager 118 sends the copy of the data of the selected snapshot to client device 102 A. Further details of the snapshot versions are discussed below.
- each of the constituent parts of system 100 may be implemented in hardware, software, firmware, or any combination thereof.
- modules or instructions that constitute operative parts of embodiments may utilize any type of structured memory, including a persistent memory.
- each data storage infrastructure may be implemented as a relational database.
- computer-readable storage medium embodiments may include any physical medium which is capable of having instructions encoded thereon that may subsequently be used by one or more processors to implement methods described herein.
- Example physical media may include floppy discs, optical discs (e.g. CDs, mini-CDs, DVDs, HD-DVD, Blu-ray), hard drives, punch cards, tape drives, flash memory, and memory chips.
- any other type of tangible storage medium that can serve in the role of providing instructions to one or more processors may be used to store the instructions in these embodiments.
- FIG. 2 is a more detailed diagram of components of the system in FIG. 1 , according to an embodiment.
- FIG. 2 illustrates server 108 where the back-end of snapshot cache system 100 may be located.
- Server 108 contains a combination of hardware, software, and firmware constituent parts that allow it to operate cache database 112 and snapshot generator 114 with access to additional resources over a network 104 .
- Server 108 may be a conventional computer such as a desktop or laptop PC, but it may additionally be any web-enabled device that is able to manage data for the snapshot cache system 100 .
- Server 108 as shown in FIG. 2 may be organized around a system bus 208 , but any type of infrastructure that allows the hardware infrastructure elements of server 108 to communicate with and interact with each other may be used to function as this part of snapshot server 108 .
- the processing task in the embodiment of FIG. 2 is carried out by one or more processors 202 A . . . 202 N, but it should be noted that any type of processing technology may be used here, including multi-core processors, multiple processors, or distributed processors. Additional specialized processing resources such as graphics, multimedia, or mathematical processing capabilities may also be used as adjuncts or replacements for processors 202 A . . . 202 N for certain processing tasks.
- processors 202 A . . . 202 N access a memory 204 via system bus 208 .
- Processors 202 A . . . 202 N and memory 204 operate in conjunction with operating system 210 to provide basic functionality for server 108 .
- server 108 includes cache database 112 and snapshot generator 114 , which may be configured to generate snapshot versions of stored data within cache database 112 and populate cache database 112 with a snapshot version of data upon startup or restart of server 108 .
- FIG. 3 is a block diagram of an exemplary snapshot generator 114 .
- Snapshot generator 114 may be part of or may be implemented with a computing device.
- computing devices include, but are not limited to, a computer, workstation, distributed computing system, computer cluster, embedded system, standalone electronic device, networked device, mobile device (e.g. mobile phone, smart phone, navigation device, tablet or mobile computing device), rack server, set-top box, or other type of computer system having at least one processor and memory.
- Such a computing device may include software, firmware, hardware, or a combination thereof.
- Software may include one or more applications and an operating system.
- Hardware can include, but is not limited to, a processor, memory and user interface display.
- Snapshot generator 114 may include a snapshot manager 302 and a snapshot library 304 . Snapshot generator 114 is in communication with cache database 112 , which may be used to store data. Snapshot generator 116 may allow for the generation of a snapshot version of data within cache database 112 . By performing a snapshot of cache database 112 , snapshot manager 302 and snapshot library 304 are configured to copy, store, and manage data within cache database 112 . For example, upon a determination that the performance of cache database 112 is above a predetermined threshold, a snapshot version of the data in cache database 112 will be taken and stored in snapshot library 304 . Upon startup or restart of server 108 , a warm-up cache signal to populate cache database 112 will be received by snapshot generator 114 .
- FIG. 4 is a detailed illustration of an example snapshot operation of snapshot system 100 .
- one or more requests for data are received by server 108 from client device 102 A.
- a copy of the data is stored within cache database 112 .
- a user utilizing client device 102 A may use respective browser application 116 A to type in a URL for a website.
- the URL is sent as a request message to server 108 .
- Server 108 searches for the URL within resource database 110 . Once the URL is found, the data associated with that URL is copied into cache database 112 .
- a response message containing the data is then sent to client device 102 A for display. This is done for a plurality of data requests.
- the data is retrieved from cache database 112 instead of resource database 110 .
- snapshot manager 302 of snapshot generator 114 monitors a response performance of server 108 .
- a response performance of server 108 may be the measure of cache hits to cache accesses of cache database 112 , according to an embodiment.
- cache database 112 is searched to determine whether the data is within the cache. The search for data within cache database 112 represents a cache access. When the data is located within cache database 112 , it represents a cache hit and this data is sent to client device 102 A. When the data is not located within cache database 112 , it represents a cache miss and server 108 accesses resource database 110 to retrieve and send the data to client device 102 A.
- the ratio of cache hits to cache accesses represents the response performance of server 108 .
- snapshot manager 302 may monitor the response performance of server 108 for a predetermined amount of time. When the response performance of server 108 is above a predetermined threshold, snapshot manager 302 takes a snapshot version of the cache database 112 . For example, cache manager 302 may monitor the number of cache hits in relation to the number of cache accesses of cache database 112 over a period of 5 hours. During that 5 hour period, if the ratio of cache hits to cache accesses is above a predetermined threshold of 0.85, snapshot manager can take a snapshot version of cache database 112 and store the snapshot version within snapshot library 304 . In the example above, a response performance above a predetermined threshold of 0.85 indicates that cache database 112 generates a cache hit at least 85 percent of the time in which cache database 112 is searched due to a request for data from client device 102 A.
- FIG. 4 is a detailed illustration of an example operation of snapshot system 100 .
- Cache database 112 is illustrated during a time period 408 A, 408 B . . . 408 N.
- Cache database 112 has one or more index entries 404 A, 404 B, 404 C . . . 404 N with corresponding data blocks 406 A, 406 B, 406 C . . . 406 N.
- index entries 404 A, 404 B, 404 C . . . 404 N may be a unique number corresponding to the physical location of data blocks 406 A, 406 B, 406 C . . . 406 N within cache database 112 .
- Snapshot library 304 may be any type of structured memory, including a persistent memory.
- snapshot library 304 may be implemented as an array, relational database or file system.
- cache manger 302 generates snapshot versions 402 A, 402 B . . . 402 N of snapshot library 304 during time period 408 A, 408 B . . . 408 N.
- Time period 408 A, 408 B . . . 408 N are the moments when the response performance of server 108 is above the predetermined threshold.
- time period 408 A, 408 B . . . 408 N may be the moment in time when cache database 112 generates a cache hit at least 85 percent of the time.
- Snapshot library 304 stores a copy of the data blocks 406 A, 406 B, 406 C . . .
- Snapshot versions 402 A, 402 B, 402 N may have a time stamp 410 A, 410 B . . . 410 N, which corresponds to time period 408 A, 408 B . . . 408 N.
- An identical copy of data blocks 406 A, 406 B, 406 C . . . 406 N of cache database 112 can be stored within snapshot table 412 of snapshot library 304 .
- Snapshot table 412 is configured to store identical copies of data blocks 406 A, 406 B, 406 C . . .
- index entries 404 A, 404 B, 404 C . . . 404 N and time period 408 A, 408 B . . . 408 N are stored as snapshot version 402 A with a time stamp of 410 A.
- a warm-up cache signal 308 may be received by snapshot generator 114 .
- Warm-up cache signal 308 may be a signal giving an instruction to populate cache database 112 with initial data which may be sent in response to requests from client devices 102 A, 102 B . . . 102 N.
- snapshot generator 114 receives warm-up cache signal 304
- snapshot manager 302 retrieves a snapshot version 402 A, 402 B . . . 402 N from snapshot library 304 .
- the data from the retrieved snapshot version 402 A, 402 B . . . 402 N is used to populate cache database 112 .
- 402 N may be assigned a send priority.
- the send priority may determine which snapshot version 402 A, 402 B . . . 402 N will be selected to populate cache database 112 , according to an embodiment.
- snapshot version 402 A, 402 B . . . 402 N may have a send priority based on the response performance.
- a higher response performance of cache database 112 may result in a higher send priority assigned to snapshot version 402 A, 402 B . . . 402 N when the snapshot version is generated at time period 408 A, 408 B . . . 408 N.
- other factors may determine the send priority of a snapshot version 402 A, 402 B . . . 402 N, such as the performance rate of a client device, the size of the data or the kind of data.
- FIG. 5 is a flowchart of an exemplary method 500 of improving initial caching accuracy, according to an embodiment.
- one or more requests for data are received.
- data requests may be received by data manager 118 of server 108 .
- the one or more requests for data may include HTTP requests generated by a user of client device 102 A, for example, via respective browser 116 A.
- a user may type the name of a website domain name into a browser 116 A, 116 B . . . 116 N, which generates a request message that may be received by server 108 .
- the data requested may be all of the content associated with a web page of the website domain that is stored on a storage device.
- stage 504 the data requested by client device 102 A may be retrieved and copied into a cache.
- stage 504 may be performed by data manager 118 in conjunction with resource database 110 and cache database 112 on server 108 .
- server 108 conducts retrieval of the data from resource database 110 .
- Resource database 110 includes the original content of the data.
- cache database 112 Upon the retrieval of the data from resource database 110 , a copy of the data is stored within cache database 112 .
- cache database 112 may be searched initially to retrieve the data.
- a response message can be sent containing the requested data.
- all of the contents of the webpage requested by the user may be retrieved from resource database 112 initially and stored within cache database 112 for all subsequent requests for the webpage and its content.
- multiple requests for data are received and all the data for each request is stored in cache database 112 .
- a response performance of server 108 is monitored.
- stage 506 may be performed by snapshot generator 114 on server 108 .
- the response performance of server 108 is determined by the hit rate of cache database 112 , according to an embodiment.
- the hit rate is the measure of cache hits to cache accesses.
- a high hit rate of cache database 112 indicates increased accuracy of the requested data along with a reduced latency for the responses to the one or more data requests.
- a cache hit is recorded. If the data for the requested webpage does not reside within cache database 112 , a cache access will be performed with the generation of a cache miss.
- the data for the webpage is then retrieved from resource database 110 .
- stage 508 it is determined whether the response performance of server 108 is above a predetermined threshold.
- stage 508 may be performed by snapshot generator 114 on server 108 .
- method 400 proceeds to stage 510 . If the response performance is below the predetermined threshold, then stage 508 will repeat until the threshold is met or surpassed.
- the predetermined threshold level may be 0.85. This represents a hit rate of 85 percent of cache database 112 . In the example above, all of the cache accesses of cache database 112 for the requested webpages will be monitored to determine when the content of the requested webpages are retrieved from cache database 112 at least 85 percent of the time.
- one or more snapshot versions of one or more memory blocks of cache database 112 is taken.
- stage 510 may occur at snapshot generator 114 on server 108 .
- a snapshot version of the data within cache database 112 is taken.
- a snapshot version is a copy of the data at a time when the response performance is greater than the predetermined threshold of 0.85.
- One or more snapshot versions may be taken of cache database 112 and time stamped with the time the data was copied, according to an embodiment.
- the one or more snapshot versions may be stored in a snapshot library 304 .
- a send priority is assigned to each of the snapshot versions within snapshot library 304 . The send priority may be determined by the response performance value. A higher response performance value may result in a higher assigned priority for a snapshot version.
- a warm-up cache signal may be received.
- a snapshot version is loaded into cache database 112 and sent in a response message.
- stage 512 may be performed by data manager 118 on server 108 .
- a warm-up cache signal may be sent to populate cache database 112 .
- Snapshot generator 114 will search snapshot library 304 for matching snapshot versions taken during stage 408 and load the data of the selected snapshot version into cache database 112 .
- the selected snapshot version may be the matching snapshot version with the highest send priority.
- a snapshot version of the previous requests for the webpage will be loaded into cache database 112 .
- a snapshot version of the webpage and its content will be sent to the user for display.
- a snapshot operation utilizing a copy-on-write algorithm includes a pre-designated space for a snapshot version.
- the snapshot version may track when the blocks of data within cache database 112 change. Blocks of data within cache database 112 may change when a write operation is performed on the data.
- the blocks of data within cache database 112 are copied into the pre-designated space for the snapshot version prior to the write operation, according to an embodiment. This allows the data of the snapshot version data to remain consistent with the data in cache database 112 at the exact time the snapshot version was taken. Read requests of the unchanged data blocks of cache database 112 are redirected to cache database 112 , while read requests to data blocks that have been changed are directed to the data blocks in the snapshot version.
- Utilizing the copy-on-write snapshot algorithm may initially impact performance, because write requests to cache database 112 must wait while the original data is being copied to the snapshot version.
- use of the copy-on-write algorithm requires less space, because the storage required to create a snapshot version is minimal to hold only the data that is changing.
- a snapshot operation utilizing a redirect-on-write algorithm is similar to the copy-on-write algorithm.
- the original blocks of data within cache database 112 remain intact.
- One or more new write operations to cache database 112 are redirected to the snapshot library 304 , according to an embodiment.
- One advantage of redirecting the write operations to the snapshot library 304 is that only one write takes place. This is in contrast to the copy-on-write algorithm, where two writes occur (one write to copy original data into the snapshot library and another write to copy any changed data).
- the snapshot version of the data and the changed data of cache database 112 reside in the snapshot library 304 . If a snapshot version is deleted, the data from snapshot library 304 may be merged back into cache database 112 .
Abstract
Description
Claims (40)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/359,516 US9021087B1 (en) | 2012-01-27 | 2012-01-27 | Method to improve caching accuracy by using snapshot technology |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/359,516 US9021087B1 (en) | 2012-01-27 | 2012-01-27 | Method to improve caching accuracy by using snapshot technology |
Publications (1)
Publication Number | Publication Date |
---|---|
US9021087B1 true US9021087B1 (en) | 2015-04-28 |
Family
ID=52987119
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/359,516 Active 2033-09-14 US9021087B1 (en) | 2012-01-27 | 2012-01-27 | Method to improve caching accuracy by using snapshot technology |
Country Status (1)
Country | Link |
---|---|
US (1) | US9021087B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140149664A1 (en) * | 2012-11-29 | 2014-05-29 | Infinidat Ltd. | Storage System Capable of Managing a Plurality of Snapshot Families and Method of Operating Thereof |
US20140244935A1 (en) * | 2012-11-29 | 2014-08-28 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of snapshot family based read |
US9251003B1 (en) * | 2013-08-14 | 2016-02-02 | Amazon Technologies, Inc. | Database cache survivability across database failures |
US20160266947A1 (en) * | 2015-03-11 | 2016-09-15 | Microsoft Technology Licensing, Llc | Mobile application memory profiling for custom extensions |
US20170168916A1 (en) * | 2015-11-12 | 2017-06-15 | International Business Machines Corporation | Object monitoring in code debugging |
US10474486B2 (en) * | 2015-06-30 | 2019-11-12 | Veritas Technologies Llc | Data access accelerator |
US10558480B2 (en) | 2015-09-10 | 2020-02-11 | Veritas Technologies Llc | Optimizing access to production data |
US20220075534A1 (en) * | 2014-11-21 | 2022-03-10 | Security First Corp. | Gateway for Cloud-Based Secure Storage |
US11968186B2 (en) | 2004-10-25 | 2024-04-23 | Security First Innovations, Llc | Secure data parser method and system |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020133537A1 (en) | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20030167380A1 (en) | 2002-01-22 | 2003-09-04 | Green Robbie A. | Persistent Snapshot Management System |
US7237075B2 (en) | 2002-01-22 | 2007-06-26 | Columbia Data Products, Inc. | Persistent snapshot methods |
US20070168404A1 (en) * | 2006-01-17 | 2007-07-19 | Sadahiro Nakamura | NAS system and remote copy method |
US20080098173A1 (en) | 2006-10-20 | 2008-04-24 | Lakshminarayanan Chidambaran | Consistent client-side cache |
US20090193064A1 (en) * | 2008-01-29 | 2009-07-30 | Ying Chen | Method and system for access-rate-based storage management of continuously stored data |
US7644109B2 (en) | 2002-03-19 | 2010-01-05 | Netapp, Inc. | System and method for storage of snapshot metadata in a remote file |
US20110106939A1 (en) * | 2009-11-05 | 2011-05-05 | Hitachi, Ltd. | Computer system and its management method |
US8527722B1 (en) * | 2012-04-24 | 2013-09-03 | Hitachi, Ltd. | Selecting a snapshot method based on cache memory consumption |
-
2012
- 2012-01-27 US US13/359,516 patent/US9021087B1/en active Active
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020133537A1 (en) | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20030167380A1 (en) | 2002-01-22 | 2003-09-04 | Green Robbie A. | Persistent Snapshot Management System |
US7237075B2 (en) | 2002-01-22 | 2007-06-26 | Columbia Data Products, Inc. | Persistent snapshot methods |
US20070250663A1 (en) | 2002-01-22 | 2007-10-25 | Columbia Data Products, Inc. | Persistent Snapshot Methods |
US7644109B2 (en) | 2002-03-19 | 2010-01-05 | Netapp, Inc. | System and method for storage of snapshot metadata in a remote file |
US20070168404A1 (en) * | 2006-01-17 | 2007-07-19 | Sadahiro Nakamura | NAS system and remote copy method |
US20120158663A1 (en) * | 2006-01-17 | 2012-06-21 | Sadahiro Nakamura | Nas system and remote copy method |
US20080098173A1 (en) | 2006-10-20 | 2008-04-24 | Lakshminarayanan Chidambaran | Consistent client-side cache |
US20090193064A1 (en) * | 2008-01-29 | 2009-07-30 | Ying Chen | Method and system for access-rate-based storage management of continuously stored data |
US20110106939A1 (en) * | 2009-11-05 | 2011-05-05 | Hitachi, Ltd. | Computer system and its management method |
US8527722B1 (en) * | 2012-04-24 | 2013-09-03 | Hitachi, Ltd. | Selecting a snapshot method based on cache memory consumption |
Cited By (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11968186B2 (en) | 2004-10-25 | 2024-04-23 | Security First Innovations, Llc | Secure data parser method and system |
US20140149698A1 (en) * | 2012-11-29 | 2014-05-29 | Infinidat Ltd. | Storage System Capable of Managing a Plurality of Snapshot Families and Method of Operating Thereof |
US20140244935A1 (en) * | 2012-11-29 | 2014-08-28 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of snapshot family based read |
US9146877B2 (en) * | 2012-11-29 | 2015-09-29 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of snapshot family based read |
US20140149664A1 (en) * | 2012-11-29 | 2014-05-29 | Infinidat Ltd. | Storage System Capable of Managing a Plurality of Snapshot Families and Method of Operating Thereof |
US9311016B2 (en) * | 2012-11-29 | 2016-04-12 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of operating thereof |
US9311015B2 (en) * | 2012-11-29 | 2016-04-12 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of operating thereof |
US9311014B2 (en) | 2012-11-29 | 2016-04-12 | Infinidat Ltd. | Storage system and methods of mapping addresses of snapshot families |
US9383942B2 (en) | 2012-11-29 | 2016-07-05 | Infinidat Ltd. | Storage system capable of managing a plurality of snapshot families and method of operating thereof |
US9251003B1 (en) * | 2013-08-14 | 2016-02-02 | Amazon Technologies, Inc. | Database cache survivability across database failures |
US20220075534A1 (en) * | 2014-11-21 | 2022-03-10 | Security First Corp. | Gateway for Cloud-Based Secure Storage |
US20160266947A1 (en) * | 2015-03-11 | 2016-09-15 | Microsoft Technology Licensing, Llc | Mobile application memory profiling for custom extensions |
US10474486B2 (en) * | 2015-06-30 | 2019-11-12 | Veritas Technologies Llc | Data access accelerator |
US10558480B2 (en) | 2015-09-10 | 2020-02-11 | Veritas Technologies Llc | Optimizing access to production data |
US11144339B2 (en) | 2015-09-10 | 2021-10-12 | Veritas Technologies Llc | Optimizing access to production data |
US20170168916A1 (en) * | 2015-11-12 | 2017-06-15 | International Business Machines Corporation | Object monitoring in code debugging |
US20170177462A1 (en) * | 2015-11-12 | 2017-06-22 | International Business Machines Corporation | Object monitoring in code debugging |
US10761963B2 (en) * | 2015-11-12 | 2020-09-01 | International Business Machines Corporation | Object monitoring in code debugging |
US10761964B2 (en) * | 2015-11-12 | 2020-09-01 | International Business Machines Corporation | Object monitoring in code debugging |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9021087B1 (en) | Method to improve caching accuracy by using snapshot technology | |
JP6517263B2 (en) | System, method and storage medium for improving access to search results | |
US11347760B2 (en) | Systems and methods for indexing content | |
US10191856B2 (en) | Method of managing web browser cache size using logical relationships and clustering | |
US9426200B2 (en) | Updating dynamic content in cached resources | |
CN110046133B (en) | Metadata management method, device and system for storage file system | |
US11586506B2 (en) | System and method for indexing image backups | |
US10891265B2 (en) | Local networked storage linked to remote networked storage system | |
US20120233199A1 (en) | Intelligent Web Caching | |
US9864684B2 (en) | Performing efficient cache invalidation | |
US20210133248A1 (en) | System and method for searching backups | |
US9928174B1 (en) | Consistent caching | |
CN111273863B (en) | Cache management | |
US20210200767A1 (en) | Asynchronous Predictive Caching Of Content Listed In Search Results | |
US20140195888A1 (en) | Tagging autofill field entries | |
CN107015978B (en) | Webpage resource processing method and device | |
Patel et al. | A novel approach for efficient handling of small files in HDFS | |
CN112433921A (en) | Method and apparatus for dynamic point burying | |
CN111026333A (en) | Access request processing method, processing device, electronic equipment and storage medium | |
US20220078161A1 (en) | Method and apparatus for advertisement anti-blocking | |
US10338972B1 (en) | Prefix based partitioned data storage | |
CN111291083B (en) | Webpage source code data processing method and device and computer equipment | |
US11126520B2 (en) | Skew detector for data storage system | |
US10482101B1 (en) | Method and system for optimizing data replication for large scale archives | |
US11500837B1 (en) | Automating optimizations for items in a hierarchical data store |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WENG, ZHI;ZHENG, LANTIAN;REEL/FRAME:027609/0126Effective date: 20120111 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |