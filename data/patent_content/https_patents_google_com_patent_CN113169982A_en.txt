CN113169982A - Low entropy browsing history for content quasi-personalization - Google Patents
Low entropy browsing history for content quasi-personalization Download PDFInfo
- Publication number
- CN113169982A CN113169982A CN202080006300.4A CN202080006300A CN113169982A CN 113169982 A CN113169982 A CN 113169982A CN 202080006300 A CN202080006300 A CN 202080006300A CN 113169982 A CN113169982 A CN 113169982A
- Authority
- CN
- China
- Prior art keywords
- content
- category
- application
- identifier
- request
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/535—Tracking the activity of the user
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0251—Targeted advertisements
- G06Q30/0255—Targeted advertisements based on user history
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0407—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the identity of one or more communicating identities is hidden
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0407—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the identity of one or more communicating identities is hidden
- H04L63/0421—Anonymous communication, i.e. the party's identifiers are hidden from the other party or parties, e.g. using an anonymizer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0428—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1441—Countermeasures against malicious traffic
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/20—Network architectures or network communication protocols for network security for managing network security; network security policies in general
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/30—Profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/30—Profiles
- H04L67/306—User profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/566—Grouping or aggregating service requests, e.g. for unified processing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/42—Anonymization, e.g. involving pseudonyms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0428—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload
- H04L63/0442—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload wherein the sending and receiving network entities apply asymmetric encryption, i.e. different keys for encryption and decryption
Abstract
The present disclosure provides systems and methods for content quasi-personalized or anonymized content retrieval via aggregated browsing history of multiple devices, such as millions or billions of devices. The sparse matrix may be constructed from the aggregated browsing history and reduced in dimension, thereby reducing entropy and providing anonymity for individual devices. The relevant content may be selected via quasi-personalized clustering to represent similar browsing histories without exposing individual device details to the content provider.
Description
Cross Reference to Related Applications
The present application claims priority from U.S. patent application No.16/698,548 entitled "Low entry Browsing History for Content Quasi-Personalization" filed on 27.11.2019, U.S. patent application No.16/535,912 entitled "Low entry Browsing History for Content Quasi-Personalization" filed on 8.8.2019, and U.S. patent application No.62/887,902 entitled "Low entry Browsing History for Content Quasi-Personalization" (Low-Entropy Browsing History for Content Quasi-Personalization) filed on 16.8.2019, each of which is incorporated herein by reference in its entirety.
Background
In a computer networking environment, such as the internet, a content provider may provide content items to be inserted into information resources (e.g., web pages) that are processed and rendered by an application (e.g., a web browser) executing on a client device.
Personalized content delivery is typically based on capturing identifying information of the user and/or device, such as a browsing or access history of the device. However, this may result in the collection of separately traceable data, exposing the user to potential security risks and consuming excessive computing resources.
Disclosure of Invention
The systems and methods discussed herein provide content quasi-personalized or anonymized content retrieval via the aggregated browsing history of a large number of devices, such as millions or billions of devices. The sparse matrix may be constructed from the aggregated browsing history and reduced in dimension to reduce entropy and provide anonymity for individual devices. Relevant content can be selected via quasi-personalized clustering to represent similar browsing histories without exposing individual device details to the content provider.
In one aspect, the present disclosure is directed to a method for anonymized content retrieval. The method includes generating, by a browser application of a computing device, a profile based on a browsing history of the computing device. The method also includes encoding, by the browser application, the profile as an n-dimensional vector. The method also includes calculating, by the browser application, a reduced-dimension vector from the n-dimension vector. The method also includes determining, by the browser application, a first cluster corresponding to the reduced-dimension vector. The method also includes transmitting, by the browser application, a request for the content item to a content server, the request including an identification of the first cluster. The method further comprises receiving, by the browser application from the content server, the content items selected according to the identification of the first cluster.
In some implementations, the method includes generating a profile based on a browsing history of a user of the computing device by identifying, from a log of the browsing history, a number of accesses to each of a plurality of addresses within a predetermined time period. In some embodiments, the method includes generating a string having values representing: each of the one or more accesses to an address associated with a corresponding location in the string within a predetermined period of time.
In some embodiments, the method includes performing a singular value decomposition of the n-dimensional vector. In another embodiment, the method includes receiving a set of singular vectors of a singular value decomposition from a second computing device. In yet another embodiment, the method includes transmitting the n-dimensional vector to a second computing device that computes the set of singular vectors based on an aggregation of the n-dimensional vector of the computing device and n-dimensional vectors of at least one other computing device.
In some implementations, the method includes receiving, from the second computing device, a boundary for each of a plurality of clusters. In another embodiment, the method includes selecting a first cluster of the plurality of clusters in response to the dimensionality reduction vector being within the boundaries of the first cluster.
In some implementations, the method includes receiving, by the browser application from the second computing device, weights for the neural network model determined based on an aggregation of the n-dimensional vector of the computing device and the n-dimensional vector of the at least one other computing device; applying, by a machine learning system of a browser application, a neural network model to the reduced-dimension vector to generate a ranking of the predetermined cluster set; and selecting, by the browser application, the first cluster as a highest-ranked cluster of the predetermined set of clusters.
In another aspect, the present disclosure is directed to a method for anonymized content retrieval. The method includes receiving, by a server computing device from each of a plurality of client computing devices, a profile based on a browsing history of the respective client computing device, each profile including an n-dimensional vector. The method also includes aggregating, by the server computing device, a plurality of n-dimensional vectors of a plurality of profiles into a matrix. The method also includes calculating, by the server computing device, a singular value decomposition of the matrix to generate a set of singular values. The method also includes transmitting, by the server computing device, the set of singular values to each of the plurality of client computing devices and the at least one content provider device.
In some implementations, the method includes determining, by the server computing device, a boundary of each cluster in the set of clusters of the matrix. In another embodiment, the method includes transmitting, by the server computing device, to each of the plurality of client computing devices and the at least one content provider device, the boundary of each cluster in the set of clusters of the matrix.
In some implementations, the method includes identifying, by the server computing device, each cluster in a set of clusters via a neural network model from the matrix. In another embodiment, the method includes transmitting weights of the neural network model to each of the plurality of client computing devices and the at least one content provider device.
In another aspect, the present disclosure is directed to a system for anonymized content retrieval. The system comprises: a computing device comprising a network interface in communication with a content server; a memory storing a browsing history of the computing device; and a browser application. The browser application is configured to: generating a profile based on a browsing history of the computing device; and encoding the profile as an n-dimensional vector; calculating a dimensionality reduction vector according to the n-dimensional vector; determining a first cluster corresponding to the dimensionality reduction vector; transmitting a request for a content item to a content server via a network interface, the request comprising an identification of a first cluster; and receiving, from a content server via the network interface, a content item selected in accordance with the identification of the first cluster.
In some implementations, the browser application is further configured to generate a string having a value representing each of the one or more accesses to the address associated with the corresponding location in the string within a predetermined time period. In some embodiments, the browser application is further configured to perform singular value decomposition of the n-dimensional vector. In another embodiment, the browser application is further configured to receive, from the second computing device via the network interface, a set of singular vectors of the singular value decomposition. In yet another embodiment, the browser application is further configured to transmit the n-dimensional vector to a second computing device via a network interface, the second computing device calculating the set of singular vectors based on an aggregation of the n-dimensional vector of the computing device and the n-dimensional vector of at least one other computing device.
In some implementations, the browser application is further configured to receive, from the second computing device via the network interface, weights for the neural network model determined based on an aggregation of the n-dimensional vector of the computing device and the n-dimensional vector of the at least one other computing device; applying the neural network model to a reduced-dimension vector to generate a ranking of a set of predetermined clusters; and selecting the first cluster as a highest ranked cluster of the predetermined set of clusters.
At least one aspect relates to a method of encoding an identifier for content selection. A first application executing on a client device may identify a browsing history maintained on the client device. The browsing history may record information resources accessed by the client device via the first application. The first application may apply a classification model to a browsing history of the first application to identify a category into which to classify the first application. The first application may assign the first application to a category identifier corresponding to the identified category. The category identifier for the first application may be the same as the category identifier for the second application. The first application may receive an information resource from the content publisher device, the information resource including primary content and a content slot available to receive content from the content selection service. A first application may generate a request for content for the content slot of the information resource, the request for content including the category identifier for the first application. The first application may communicate the request for content to the content selection service. The content selection service may use the category identifiers for the first application and for the second application to select content items for insertion into the content slots of the information resource.
In some implementations, the first application may receive a set of parameters from an application manager service to update a classification model for classifying the application into one of a plurality of classes. In some implementations, the first application can modify a classification model maintained on the client device based on a set of parameters received from the application manager service. In some implementations, a first application can train a classification model maintained on a client device using a distributed learning protocol in coordination with a plurality of application systems executing on a respective plurality of client devices.
In some implementations, the first application can generate a reduced set of feature vectors from the browsing history identified from the client device using a dimension reduction process, the feature vectors being smaller in file size than the browsing history. In some implementations, applying the classification model may include applying the classification model to a simplified set of feature vectors generated from a browsing history.
In some implementations, the first application can determine to apply the classification model to the browsing history according to an identifier assignment policy. In some embodiments, applying the classification model may include: the classification model is applied in response to determining that the classification model is to be applied according to the identifier assignment policy.
In some implementations, applying the classification model can include applying the classification model to identify a category from a plurality of categories. Each of the plurality of categories may have at least a predetermined number of clients to be classified into the category. In some implementations, assigning the first application to the category identifier may further include assigning the first application to a category identifier of the plurality of category identifiers. Each category identifier may correspond to one of a plurality of categories.
In some implementations, generating the request for content can include: the request for content is generated without a unique tracking identifier corresponding to an account associated with the first application, or a client device provided by the content selection service. In some implementations, generating the request for content can include: a request for content is generated for transmission over a connection to a content selection service that includes a secure cookie. The security cookie may have a category identifier for the first application. In some implementations, identifying the browsing history can include: identifying the browsing history within a predetermined time range in which the classification model is applied.
At least one aspect is directed to a system for encoding an identifier for content selection. The system may include a first application executable on a client device having one or more processors. A first application executing on a client device may identify a browsing history maintained on the client device. The browsing history may record information resources accessed by the client device via the first application. The first application may apply a classification model to a browsing history of the first application to identify a category into which to classify the first application. The first application may assign the first application to a category identifier corresponding to the identified category. The category identifier for the first application may be the same as the category identifier for the second application. The first application may receive an information resource from the content publisher device, the information resource including primary content and a content slot available to receive content from the content selection service. A first application may generate a request for content for the content slot of the information resource, the request for content including the category identifier for the first application. The first application may communicate the request for content to the content selection service. The content selection service may use the category identifiers for the first application and for the second application to select content items for insertion into the content slots of the information resource.
In some implementations, the first application may receive a set of parameters from an application manager service for updating a classification model for classifying the application into one of a plurality of classes. In some implementations, the first application can modify a classification model maintained on the client device based on a set of parameters received from the application manager service. In some implementations, a first application can train a classification model maintained on a client device using a distributed learning protocol in coordination with a plurality of application systems executing on a respective plurality of client devices.
In some implementations, a first application can generate a set of simplified feature vectors from the browsing history identified from the client device using a dimension reduction process, the feature vectors being smaller in file size than the browsing history. In some implementations, the first application can apply the classification model to a simplified set of feature vectors generated from the browsing history.
In some implementations, the first application can determine to apply the classification model to the browsing history according to an identifier assignment policy. In some implementations, the first application can apply the classification model in response to determining that the classification model is to be applied according to the identifier assignment policy.
In some implementations, the first application can apply a classification model to identify the category from a plurality of categories. Each of the plurality of categories may have at least a predetermined number of clients to be classified into the category. In some implementations, the first application can assign the first application to a category identifier of a plurality of category identifiers. Each category identifier may correspond to one of a plurality of categories.
In some implementations, the first application generates the request for content without a unique tracking identifier corresponding to an account associated with the first application, or a client device provided by the content selection service. In some implementations, the first application generates a request for content to transmit over a connection to a content selection service that includes a secure cookie. The security cookie may have a category identifier for the first application. In some implementations, identifying the browsing history may include identifying the browsing history within a predetermined time range in which the classification model is applied.
The present disclosure also provides a computer program comprising instructions which, when executed by a computing device, cause the computing device to perform any of the methods disclosed herein. The present disclosure also provides a computer-readable medium comprising instructions that, when executed by a computing device, cause the computing device to perform any of the methods disclosed herein.
At least one aspect relates to a method of encoding an identifier for content selection. The method may include identifying a plurality of information resources accessed via a first application executing on a client device. The method may include extracting, from each of the plurality of information resources, features corresponding to at least a portion of the content of the information resource. The method may include applying a classification model to features extracted from the plurality of information resources to identify a set of categories into which to classify the first application. The method may include determining that a category from the set of categories satisfies a threshold number of applications assigned to the category. The method can comprise the following steps: in response to determining that the category satisfies the threshold number, assigning the first application to a category identifier corresponding to the category. The class identifier for the first application may be the same as the class identifier for the second application. The method can comprise the following steps: an information resource is received from a content publisher device for presentation via the first application, the information resource including primary content and a content slot available to receive content from a content selection service. The method may include generating a request for content for the content slot of the information resource, the request for content including the category identifier for the first application. The method may include transmitting the request for content to the content selection service, the content selection service selecting a content item for insertion into the content slot of the information resource using a category identifier for the first application and for the second application.
In some embodiments, the method may comprise: in response to receiving the information resource, selecting a category from the set of categories according to a obfuscation policy. The obfuscation policy may specify a condition under which a corresponding category identifier is allowed to be included in a request for content associated with the content slot of the information resource.
In some embodiments, the method may comprise: in response to receiving a second information resource, selecting a second category identifier from the set of categories identified by applying the classification model according to a obfuscation policy. The second category identifier may be different from the category assigned to the first application. In some implementations, the method can include generating, for a content slot of the second information resource, a second request for content that includes a second category identifier corresponding to the second category instead of the category identifier corresponding to the category.
In some embodiments, the method may comprise: in response to receiving the second information resource, determining, in accordance with an obfuscation policy, to not include any category identifiers into the second request for content to insert into a content slot of the second information resource. In some embodiments, the method may comprise: in response to determining that no category identifier is included, transmitting the second request for content to the content selection service, the second request for content lacking any category identifier.
In some implementations, determining that the category satisfies the threshold number may include: performing a threshold cryptographic protocol in cooperation with a class authorization service by using an encrypted class identifier generated using the class identifier corresponding to the class. In some implementations, determining that the category satisfies the threshold number may include: the class identifier is checked against a probabilistic data structure for the class identifier maintained by the class authorization service.
In some implementations, transmitting the request for content can include transmitting the request for content. The content selection service may maintain an aggregated browsing history for the first application and the second application using the category identifier. In some embodiments, applying the classification model may include: applying the classification model to identify, from a plurality of classes, the set of classes that are within a proximity threshold of each other in a feature space defined by the classification model.
In some embodiments, the method may comprise: generating a set of simplified feature vectors from the browsing history identified from the client device by using a dimension reduction process, the feature vectors being smaller in file size than the browsing history. In some embodiments, applying the classification model may include; applying the classification model to a simplified set of feature vectors generated from the browsing history. In some embodiments, extracting the features further comprises: extracting the features from at least a portion of content of the information resource, the portion of content including at least one of: text data, visual data, or audio data.
At least one aspect is directed to a system for encoding an identifier for selecting content. The system may include a first application executable on a client device having one or more processors. The first application may identify a plurality of information resources accessed via the first application executing on the client device. The first application may extract features from each of the plurality of information resources corresponding to at least a portion of the content of the information resource. The first application may apply a classification model to the features extracted from the plurality of information resources to identify a set of categories into which to classify the first application. The first application may determine that a category from the set of categories satisfies a threshold number of applications assigned to the category. The first application may assign the first application to a category identifier corresponding to the category in response to determining that the category satisfies the threshold number. The class identifier for the first application may be the same as the class identifier for the second application. The first application may receive an information resource from a content publisher device for presentation via the first application, the information resource including primary content and a content slot available to receive content from a content selection service. A first application may generate a request for content for the content slot of the information resource, the request for content including the category identifier for the first application. The first application may communicate the request for content to the content selection service. The content selection service may select a content item for insertion into the content slot of the information resource using a category identifier for the first application and for the second application.
In some implementations, the first application can select a category from the set of categories in accordance with a obfuscation policy in response to receiving the information resource. The obfuscation policy may specify a condition under which a corresponding category identifier is allowed to be included in a request for content associated with the content slot of the information resource.
In some embodiments, the first application may select, in response to receiving the second information resource, a second category identifier from the set of categories identified from applying the classification model according to a obfuscation policy. The second category identifier may be different from the category assigned to the first application. In some embodiments, the first application may generate a second request for content for a content slot of the second information resource, the second request for content including a second category identifier corresponding to the second category instead of the category identifier corresponding to the category.
In some implementations, the first application can determine, in response to receiving the second information resource, not to include any category identifier into the second request for content for insertion into the content slot of the second information resource in accordance with the obfuscation policy. In some implementations, the first application may transmit the second request for content to the content selection service in response to determining that no category identifier is included, the second request for content lacking any category identifier.
In some implementations, the first application may determine that the category satisfies the threshold number by performing a threshold cryptographic protocol in cooperation with a category authorization service using an encrypted category identifier generated with the category identifier corresponding to the category. In some implementations, the first application can determine that the category satisfies the threshold number by checking the category identifier against a probabilistic data structure for category identifiers maintained by the category authorization service.
In some implementations, the first application can transmit the request for content. The content selection service may maintain an aggregated browsing history for the first application and the second application using the category identifier. In some embodiments, the first application may apply the classification model to identify the set of classes from a plurality of classes that are within a proximity threshold of each other in a feature space defined by the classification model.
In some implementations, the first application can generate a reduced set of feature vectors from the browsing history identified from the client device using a dimension reduction process, the feature vectors being smaller in file size than the browsing history. In some implementations, the first application can apply the classification model to a simplified set of feature vectors generated from the browsing history. In some embodiments, the first application may extract the feature from at least a portion of content of the information resource, the portion of content including at least one of: text data, visual data, or audio data.
Optional features of one aspect may be combined with any other aspect.
Drawings
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the disclosure will become apparent from the description, the drawings, and the claims, wherein:
FIG. 1A is an illustration of an example profile vector, according to some embodiments;
FIG. 1B is an illustration of aggregating profile vectors into a sparse matrix, according to some embodiments.
FIG. 1C is an illustration of a process for anonymization to provide pseudo-personalized clusters, according to some embodiments;
FIG. 2 is a block diagram of a system for anonymization to provide pseudo-personalized clusters, according to some embodiments;
FIG. 3 is a flow diagram of a method for anonymization to provide pseudo-personalized clusters, according to some embodiments;
FIG. 4 is a block diagram depicting a system for encoding an identifier for selecting content using a classification model in accordance with an illustrative embodiment;
FIG. 5 is a block diagram depicting a client device and an application manager service in a system for encoding identifiers for selecting content using a classification model in accordance with an illustrative embodiment;
FIG. 6 is a block diagram depicting a client device, a content provider, a content publisher, and a content selection service in a system for encoding identifiers for selecting content using a classification model in accordance with an illustrative embodiment;
FIG. 7 is a block diagram depicting a client device and a content selection service in a system for encoding identifiers for selecting content using a classification model in accordance with an illustrative embodiment;
FIG. 8 is a flowchart depicting a method for encoding an identifier for selecting content using a classification model in accordance with an illustrative embodiment; and
FIG. 9 is a block diagram illustrating a general architecture of a computer system that may be used to implement the elements of the systems and methods described and illustrated herein, in accordance with an illustrative embodiment.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Personalized content delivery is typically based on capturing identifying information of the user and/or device, such as a browsing or access history of the device. For example, the device may provide identification information, such as a device identifier, account name, Cookie, or other such information; and the content provider may store such information for use in selecting personalized content. As a result, the content provider can acquire a large amount of data about each individual. This significantly affects the privacy and security of the device and the user. Opt-out and no-tracking policies allow the user some degree of control over his privacy (provided that the content provider follows these policies). However, these policies impair the ability of content providers to provide relevant content. Furthermore, requests generated according to these policies may lack any user requests at all, thereby preventing proper resolution of these requests.
The systems and methods discussed herein provide content quasi-personalized or anonymized content retrieval via the aggregated browsing history of a large number of devices, such as millions or billions of devices. For example, the browsing history of each device may be encoded as a long data string or an n-dimensional vector. FIG. 1A is an illustration of an example profile vector 100 according to some embodiments. The profile vector may include an identification of a device's visit or visit to a domain, website, or web page within a given time period. In the illustrated example, the vector identifies the number of views or visits to each of a number of domains 1-n during each day of the week. Although shown as a one-dimensional vector, in a similar implementation, the vector may comprise an n-by-7 array (e.g., one row per day). In other implementations, additional data may be included (e.g., each day of the month, time of day, etc.). Thus, a vector may comprise a large n-dimensional vector or array. Additional data may be included in the vector, such as an identification of the time of generation, location, IP address, or any other such information.
As noted above, in many embodiments, the vector may be very large. For example, there are approximately 18 million active web sites and over 3.3 million registered domains on the internet. In some implementations, the vector may record a visit or access (visits or access) to any of these domains or websites. In other implementations, the vector may record visits or visits to only a subset of domains or websites. For example, less than one million Web sites account for about 50% of Web traffic. Thus, in many embodiments, a vector may only record or represent visits or tours to a subset of domains or websites. However, even in many such embodiments, the vector may be large, such as about 226Or larger.
The vectors may be provided to a server device, which may aggregate the vectors with those of other devices, as shown in the diagram of FIG. 1B. The profile vector 100 from each of the plurality of devices 102 mayTo be aggregated to create a very large matrix. For example, billions of months (e.g., at 2) on the web30Magnitude) of the active user or device. The matrix of the combined profile vector 100 for each of these devices may thus be 230×226Dimension, or in some embodiments, larger.
However, this matrix is highly sparse. A typical user may visit hundreds of millions of possible domains in a given time period, such as a week. The dimensionality of such matrices can be reduced due to the highly sparse nature and redundancy in the browsing history of any given device.
In some implementations, a linear dimension reduction technique such as Singular Vector Decomposition (SVD) may be used to compute the rank X matrix that is closest to the matrix (e.g., minimizing the squared error). Each profile vector 100 may be projected to X dimensions, where X is smaller than the original dimension of the matrix. For each dimension, the projection result can be quantized to a power of 2 bucket, where i ∈ [1, X ], and the number of buckets is proportional to the singular value of the corresponding dimension. K ∑ Ni bits may be used to represent the quantized projection results for all X dimensions. Those bits concatenated together may be the cluster identifier of the device. In other embodiments, a clustering algorithm (e.g., nearest neighbors) may be used to cluster the devices together in a reduced-dimension space.
Because the singular vectors are orthogonal to each other and as a result of the quantization process, a statistically similar number of devices (e.g., about equal in the case of a large total number of devices) may be located in or identified as belonging to each cluster, assuming no non-linear correlation between the profile vectors. Each cluster may be represented by an identifier (sometimes referred to as a cluster identifier, a browsing group identifier) or by similar terms.
In other embodiments, other linear decomposition methods may be used, such as principal component analysis. In other embodiments, a non-linear dimension reduction algorithm may be used to reduce the dimension of the matrix. Various classification techniques may be used, including nearest neighbor searches, potential category analysis, and the like.
Fig. 1C is a diagram of this process, according to some embodiments. As shown, profile vectors from a large number of devices may be aggregated into a large matrix at step 120. The matrix may be reduced in dimension at step 122. As described above, clusters may be identified at step 124.
In some embodiments, the classification system may be trained as part of and/or in accordance with the cluster identifications. For example, in some implementations, neural networks may be used to classify devices as part of a predetermined number of clusters. Such a network may use a reduced-dimension profile vector as an input and a cluster identifier as an output. In various embodiments, the network may be trained via supervised or unsupervised learning.
In some implementations, the neural network model or a weight of the model may be provided to the client device, or other parameters for classification may be provided. Singular vectors generated from the dimensionality reduction may also be provided to the client device. Thus, after receiving the vectors and/or models, the clients can generate their own classifications by using the local profile vectors without further communication with the server. The server may periodically (e.g., monthly or quarterly) regenerate the singular vectors and/or classification model parameters. In some embodiments, the data transfer may be very large (e.g., at 2 in some embodiments)4Magnitude of singular vectors, each singular vector being about 226Dimension, resulting in the need for approximately 2GB of data). In some embodiments, to reduce data transmission to other devices, the server may compare the parameters and vectors to previously generated parameters and vectors and provide a new set only if there is a significant difference (e.g., exceeding a threshold difference), or only a subset of significant changes in the parameters and/or vectors. In various implementations, the client may use these parameters and vectors to update their classifications locally more frequently (e.g., daily, hourly, or with each content request).
Similarly, in some implementations, singular vectors and/or model parameters may be provided to the content provider. When a client device requests a content item, the request may include a cluster identification. The cluster identity may be embedded in the payload or header of the request, for example in the HTTPS request or in an optional field of the HTTP header. In some implementations, the content provider can use a neural network model or provider-specific neural network model to infer demographics and/or user interest for the devices within each cluster (e.g., by determining an approximate profile vector corresponding to the cluster identification based on the reduced-dimension singular vectors, and then providing the vector to a machine learning system to infer the features) without being able to identify features of any individual device or user.
Accordingly, these embodiments provide device anonymity by aggregating devices, i.e., devices with similar browsing histories or patterns. Clustering algorithms attempt to maintain similar cluster sizes so that each cluster contains approximately the same number of users. The entropy of the cluster identifier controls the cluster size given a fixed number of active devices on the internet (e.g., the higher the entropy of the cluster identifier, the fewer devices in each cluster, which reduces privacy protection). By tuning the entropy of the cluster identifiers (e.g., by providing a fewer or greater number of clusters), the system can achieve a desired level of anonymization and privacy protection while still maintaining the effectiveness of content personalization.
These embodiments improve on systems that do not use aggregation and pseudo-personalization with increased privacy while maintaining effectiveness. In such an unmodified system, a browsing history of the device may be recorded using the user or device identifier, and demographic information and interests of the respective user may be inferred based on the accumulated history. This inferred information may be used to predict the effectiveness of personalized content selection, such as click-through rate, attention, or other such metrics. However, via the systems and methods discussed herein, browsing history may be accumulated only for the device groups associated with a given cluster identifier or group. The inferred group demographics and interests may still be used for content selection along with the inferred effectiveness metrics, without the content provider being able to distinguish the characteristics of the devices or users within the group or cluster.
In some implementations, a typical browsing history pattern of powers of 2K is defined based on the aggregated browsing history of billions of internet users. Each typical browsing history pattern has a unique cluster identifier or browsing history identifier, which may be represented by a K-bit integer for some smaller K, such that each cluster identifier is shared by a large number of devices. When a user chooses to opt out of personalized content selection or to join pseudo-personalization, the browser application of his device may select a typical browsing history pattern that best matches the user's actual browsing history. The browser may provide the corresponding cluster identifier to the content provider for content personalization purposes.
The typical browsing history pattern and the encoding of the cluster identifiers are selected in such a way that an approximately equal number of devices will be associated with each cluster identifier. By controlling the value of K and the entropy of other signals that each content provider can obtain from the browser through a content request (e.g., IP address, user agent identifier, etc.), the browser can significantly reduce the risk of re-identification of the user while achieving pseudo-personalization of the content.
Fig. 2 is a block diagram of a system for anonymization to provide pseudo-personalized clusters according to some embodiments. Client device 200 (which may include a desktop computer, laptop computer, tablet computer, wearable computer, smart phone, embedded computer, smart car, or any other type and form of computing device) may communicate with one or more servers, such as classifier server 230 and/or content server 250, via network 225.
In many implementations, the client device 200 may include a processor 202 and a memory device 206. The memory device 206 may store machine instructions that, when executed by a processor, cause the processor to perform one or more of the operations described herein. The processor 202 may comprise a microprocessor, ASIC, FPGA, the like, or a combination thereof. In many embodiments, the processor may be a multi-core processor or an array of processors. The memory device 206 may include, but is not limited to, an electronic, optical, magnetic, or any other storage device capable of providing a processor with program instructions. The memory device may include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, a ROM, a RAM, an EEPROM, an EPROM, a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may include code from any suitable computer programming language, such as, but not limited to, C, C + +, C #, Java, JavaScript, Perl, HTML, XML, Python, and Visual Basic.
Client device 200 may include one or more network interfaces 204. The network interface 204 may include any type and form of interface, including: ethernet networks including 10 Base T, 100 Base T, or 1000 Base T ("gigabits"); any of a variety of 802.11 wireless (such as 802.11a, 802.11b, 802.11g, 802.11n, or 802.11 ac); cellular networks, including CDMA, LTE, 3G, or 4G cellular networks; bluetooth or other short-range wireless connection; or any combination of these or other interfaces for communicating with a network. In many embodiments, the client device 200 may include multiple network interfaces 204 of different types to allow connection to various networks 225. Accordingly, the network 225 may include a Local Area Network (LAN), a Wide Area Network (WAN), such as the internet, a cellular network, a broadband network, a bluetooth network, an 802.11(WiFi) network, a satellite network, or any combination of these or other networks, and may include one or more additional devices (e.g., routers, switches, firewalls, hubs, network accelerators, caches, etc.).
The client device may include one or more user interface devices. The user interface device may be any electronic device (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.) for communicating data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, haptic feedback, etc.) and/or converting sensory information received from a user into electronic signals. According to various embodiments, the one or more user interface devices may be internal to the housing of the client device (such as a built-in display, touch screen, microphone, etc.), or external to the housing of the client device (such as a monitor connected to the client device, a speaker connected to the client device, etc.).
The memory 206 may include an application 208 that is executed by the processor 202. The applications 208 may include any type and form of application (such as a media application, a web browser, a productivity application, or any other such application), and may generally be referred to herein as browser applications. The application 208 may receive content from a content server and may display the content to a user of the client device via a user interface.
Memory 206 may store an access log 210 (shown as log 210a of client device 200), which may be part of application 208 or maintained by application 208 (e.g., as part of a profile, preference file, history file, or other such file). The access log 210 may be stored in any format available to the application 208. The access log may include an identification of a website, domain, web page, content, or other data accessed, retrieved, displayed, or otherwise obtained by the application 208. The access log 210 may also store a profile vector 100 as discussed above, which may be generated from an access history of the application and/or device. The profile vector 100 may include an n-dimensional string or array of values representing access to one or more domains, web pages, web sites, or other such data during a predetermined time period (e.g., a day, a week, a time of day, etc.). As discussed above, the profile vector may be provided to the classifier server 230 (step a). The profile vector 100 may be generated by the application 208 or the log reducer 214, and the log reducer 214 may include an application, service, daemon, routine, plug-in, or other executable logic for generating the profile vector from the access log. In many implementations, the log reducer 214 may comprise a portion of the application 208.
The memory 206 may also store singular vectors 212. As described above, the singular vectors 212 may be obtained from the classifier server 230 (step B), which may be computed from a dimensionality reduction of a matrix of profile vectors for the plurality of client devices 200, as discussed above. The singular vectors 212 may be stored in any suitable format, such as a flat file, data array, or other structure, and may be compressed in many embodiments.
The memory 206 may also store parameters of the neural network model 216. As discussed above, the neural network model 216 may be generated by the classifier server and the parameters or weights provided to the client device 200 (step C). Classifier 218 of client device 200 (which may include an application, service, server, daemon, routine, or other executable logic for performing a machine learning algorithm) may utilize neural network model 216 parameters to generate cluster identifier 220 from a reduced-dimension profile vector of the client device. In some implementations, the classifier 218 may include hardware circuitry (such as a tensor processing unit) or other such hardware. In other implementations, the classifier 218 may include software that is executed by the processor 202 of the device.
The memory 206 may also store a cluster identifier 220. The cluster identifier 220 may include a cookie or other string associated with the cluster identifier, and/or may encode or include information (e.g., XML code or parameters, parameter value peers) identifying characteristics of the cluster. The cluster identifier 220 may be predetermined or generated by the server 230 and provided to the client device 200. The classifier 218 of the client device may process the client device's reduced-dimension profile vector using a neural network model to generate a ranking or score for each cluster identifier 220, and may select the highest ranking or score identifier for transmission to the content server during the content request (step D).
The one or more classifier servers 230 may include one or more server computing devices, and may include one or more physical computing devices, or one or more virtual computing devices (e.g., a cloud, cluster, or server farm) executed by one or more physical computing devices. One or more classifier servers 230 may be generally referred to as a server, a measurement server, an aggregation server, or by other such terms.
The one or more classifier servers 230 may include one or more processors 202, network interfaces 204, and memory devices 206, among other devices not shown. One or more classifier servers 230 may store access logs and/or profile vectors 210a-210n obtained from multiple client devices 200 in memory. As discussed above, an aggregator 232 (which may include an application, server, service, routine, other executable logic executed by the processor 202) of the classifier server 230 may aggregate the profile vectors 210a-210n into a matrix or n-dimensional array. The aggregator 232 may also compute a decomposition or dimensionality reduction of the matrix into singular vectors 212, which may be provided to the client device 200 (in some implementations, the content server 250).
One or more classifier servers 230 may also store the classifiers 218 in memory. The classifier 218 may be part of the aggregator 232 or may be a separate application, service, server, routine, or other executable logic executed by the processor 202 and/or a hardware processor (such as a tensor processing unit) to identify clusters in the dimension reduction matrix. In many embodiments, the classifier 218 may include a neural network or similar artificial intelligence for classifying the reduced-dimension vector into one of a plurality of clusters. Once trained, parameters of the neural network may be provided to one or more client devices 200 to similarly generate cluster identifications or rankings, as discussed above.
The one or more content servers 250 may include any type and form of content providing server or service, including content delivery networks, web servers, media servers, social media services, or any other type and form of computing system. The one or more content servers 250 may include one or more processors 202, a network interface 204, and a memory device 206. In many implementations, one or more content servers 250 may store a plurality of content items 252, which may include any type and form of content, including text, audio, video, animation, images, executable scripts, web pages, or any other such data.
One or more of the content servers 250 may include a content selector 254, which may be part of a web server or file server, or may be a separate application, service, server, daemon, routine, or other executable logic for selecting content for delivery to a client device. The content may be selected based on the inferred characteristics of the device. The content server may receive a cluster identifier and a request for content from a device and may select content based on inferred characteristics of the device for the cluster. In some implementations, the content server can use the singular vectors obtained from the classifier server 230 to expand the cluster identifier into the corresponding profile vector that represents the aggregated cluster. The profile vector for the cluster may not match the profile vector for any particular device, but may be an approximation or average of the vectors for all devices associated with the cluster.
Fig. 3 is a flow diagram of a method for anonymization to provide pseudo-personalized clusters, according to some embodiments. At step 302, the client device 200 may provide the access log or a profile vector generated from the access log to the classifier server 230. As discussed above, the profile vector may be based on a browsing or access history of the client device and may include an n-dimensional vector or string of characters representing each of one or more accesses to an address associated with a corresponding location in the string or array for a predetermined period of time.
At step 304, the classifier server 230 may aggregate the profile vectors or logs from the client device 200 with profile vectors or logs obtained from one or more additional client devices 200 into a matrix. The profile vector may be obtained periodically by the classifier server 230 or upon logging into a service provided by the classifier server or an associated server. Step 302-304 may be repeated for a number of client devices, which may be a fraction of all devices that may utilize the singular vectors in 312 to perform the dimension reduction in 314. In some implementations, steps 302-312 may be replaced with joint learning on the client device, and the classifier server 230 may be optional or removed.
At step 306, classifier server 230 may compute a dimensionality reduction or decomposition of the matrix. The classifier server may use a singular value decomposition algorithm in some embodiments, and may generate a plurality of singular vectors and a dimension reduction matrix.
At step 308, the classifier server may optionally identify cluster boundaries or cluster parameters of the dimension reduction matrix. The classifier server may identify the clusters using any suitable algorithm (e.g., principal component analysis) or machine learning system (e.g., neural network).
At step 310, in some implementations, the classifier model may be adjusted or trained based on the identified clusters and the reduced-dimension profile vector. In various embodiments, the training may be supervised or unsupervised.
At step 312, the singular vectors and, in some embodiments, weights of the neural network model or other learning algorithm may be provided to one or more client devices 200, and in some embodiments, to one or more content servers 250.
At step 314, the client device 200 may compute a dimensionality reduction of the profile vector or access log of the device by using the singular vectors received from the classifier server. At step 316, the reduced-dimension vectors may be classified using the model parameters received from the classifier server via artificial intelligence or a neural network, and at step 318, the classification is determined. Determining the classification may include calculating, for the profile vector of the device, a score or rank for each of a plurality of clusters (e.g., identified by a classifier server and provided via the parameters in some embodiments).
At step 320, the client device may transmit a request for a content item to one or more content servers 250. The request may include an identification of a cluster corresponding to a profile vector of the device. After completing playback of the media item or a portion of the media item, or any other such circumstance, the request may be generated in response to execution of a script on the web page.
At step 322, the content server may determine features of the cluster based on the classifier model parameters and the singular vectors received from the classifier server. In some implementations, the content server can use the singular vectors to compute a profile vector representing an aggregate browsing history for all devices in a cluster, and then can infer features of the cluster based on various aspects of the history (e.g., keywords/topics associated with web pages or domains or other content, other associated domains or web pages, etc.). At step 324, the content server may select a content item using the cluster identification in the request (or the inferred characteristic associated with the cluster as discussed above). The content may be transmitted to the client device at step 326 and the client device may render or display the content item at step 328.
Thus, the systems and methods discussed herein provide content quasi-personalized or anonymized content retrieval via the aggregated browsing history of a large number of devices, such as millions or billions of devices. The sparse matrix may be constructed from the aggregated browsing history and reduced in dimension, thereby reducing entropy and providing anonymity for individual devices. The relevant content may be selected via quasi-personalized clustering to represent similar browsing histories without exposing detailed information of the respective devices to the content provider.
In a networked environment, an application (e.g., a web browser) running on a client device can receive an information resource (e.g., a web page) having primary content provided by a content publisher and one or more content slots (e.g., iframes) for supplemental content. The information resources may include code segments or scripts (e.g., content selection tags) that specify the retrieval of content items of a content provider from a content selection service for insertion into content slots. Upon parsing the script of the information resource, the application may generate a request for content to be inserted into the content slot and may send the request to a content selection service. In response to receiving the request, the content selection service may select one of the content items offered by the content provider for embedding into a content slot of the information resource.
Selection of a content item by a content selection service may rely on the use of a deterministic tracking identifier that is unique to the user (or via an account), the client device operated by the user, or an application running on the client device. The identifier may be maintained on the client device and accessed by the content selection service via a cookie. The cookie may be, for example, a third party cookie associated with a domain of the content selection service that is different from the domain of the content publisher of the information resource. When the content slot of the information resource specifies retrieval of content from the content selection service, a cookie containing the identifier may be passed from the client device to the content selection service. By using cookies, the content selection service may track which information resources the user accesses via an application running on the client device. Additionally, the content selection service may identify content items determined to be relevant to a user operating the application on the client device based on the tracked information resources.
Although the use of these unique tracking identifiers allows for the selection of content items that are customized for a particular user, there may be a number of disadvantages, particularly in terms of data security and integrity. On the one hand, with user data being communicated between the client device and the content selection service, the user may be exposed to data security risks. For example, a manager of the content selection service may intentionally provide private user data to a third party without user consent. Further, unauthorized malicious entities can also intercept third party cookies in transit and can use the unique tracking identifier to monitor online activity of affected client devices and applications. On the other hand, accessing a collection of information resources by using such category identifiers may increase the risk of data leakage on a portion of the content selection service. For example, a malicious attack (some of which may be traced back to a particular user individually) of an accidental release of data or stealing of collected data may result in a loss of data privacy for the user.
A method of solving a problem with a unique tracking identifier may include: disabling a third party cookie with a unique tracking identifier from the client device. An application running on the client device may be configured to inhibit generation, maintenance, or transmission of the unique tracking identifier to the content selection service. However, the limitation of third party cookies may cause many other problems. By disabling the third-party cookie, the content selection service may not be able to track the information resources accessed by the client device via the application. As such, when a request for content is received, the content selection service may not be able to use such information to determine the relevance of the content item to the user operating the application. Thus, the selected content item may have a lower likelihood of interaction with the user of the client device than a content item selected through the use of the tracking identifier. As a result, the information resources on which the content item is inserted for display may suffer from a degradation in the quality of human-computer interaction (HCI).
To address the technical challenge of prohibiting the use of unique identifiers to track individual client devices or applications when selecting content, each application may classify it into one of a plurality of clusters based on locally maintained browsing history. The applications and, in relation, users operating the applications with similar browsing patterns may be categorized into the same cluster. Users having similar browsing patterns and categorized in the same cluster may be associated with similar features and interests and may therefore be more likely to have similar responses to the same content item. Each cluster may have a large number of associated users (e.g., greater than 1000), so classifying users as clusters may not be a feature specific to a single user.
When the application itself is assigned to one of the clusters, the application may convert or encode the browsing history into a vector having a preset dimensionality. For example, one element in the feature vector may indicate whether a user visited a particular domain, a portion of a website, a particular category (e.g., vacation) of web pages, or even a particular URL at a particular time slot (e.g., at a particular hour of the day and a particular day of the week). The application may then apply a clustering or classification algorithm (e.g., k-nearest neighbor algorithm, linear classification, support vector machine, and pattern identification) to the feature vectors to identify clusters to which the application is to be assigned and to which the user is relevant. The clustering algorithm may be provided and updated by an application manager (e.g., browser vendor) of the application.
After finding clusters using a clustering algorithm, the application may identify a cluster identifier (also referred to as a category identifier or a browsing history identifier) for the cluster. A cluster identifier may be assigned to each cluster by the application manager and may be provided to the application and content selection service. In contrast to a unique deterministic tracking identifier, a cluster identifier may not be specific to an individual user, application, or client device. Because multiple users may be categorized into the same cluster, the cluster identifier may also be common among multiple users, applications, or client devices having similar browsing patterns. Because the cluster identifier is shared among multiple users, the cluster identifier may have a lower entropy than the unique tracking identifiers assigned to the individual users. For example, a deterministic unique tracking identifier for all internet users may have an entropy of over 30 bits, while a cluster identifier may be set to an entropy of 18 to 22 bits. With lower entropy, the cluster identifier itself may be of smaller length and size than the unique tracking identifier.
When an information resource having a content slot is received, the application can include a cluster identifier, rather than a unique tracking identifier, in a request for content of the content slot and send the request to a content selection service. Additional safeguards may be taken to increase data security and integrity and reduce the likelihood of revealing cluster identifiers and related information. To protect interception of the cluster identifier during transmission over the network, the application may use an encryption protocol, such as the hypertext transfer protocol secure (HTTPS) protocol. Additionally, to protect the cluster identifier maintained on the client device, the application may restrict other client processes (e.g., JavaScript on the information resource) from accessing the cluster identifier. For example, the cluster identifier may be included in a security token or HTTP-only token cookie maintained on the client device to prevent access to the cluster identifier. This can be contrasted with third party cookies that do not have such access controls.
In response to receiving the request, the content selection service may select one of the content items using the cluster identifier. The content selection service may accumulate browsing histories of users categorized as clusters by using previous requests for content containing cluster identifiers for the clusters. By applying a profile model to the cumulative history of the cluster, the content selection service may infer characteristics and interests of the users in the cluster. Using the results of the profile model, the content selection service may find content items determined to be relevant to the cluster into which the user associated with the request is categorized.
By using the cluster identifier, the browsing history of an application maintained on a client device may be prevented from being accessed by the content selection service so that the browsing history can be traced back to a particular user, application, or client device. Furthermore, the content selection service may not be able to track individual users, applications, or client devices in different domains to aggregate detailed browsing histories. Rather, the content selection service may aggregate the browsing history of a particular cluster of users associated with the cluster identifier received from the application. When aggregated, the content selection service may protect data privacy of individual users by merging browser histories of different users from the same cluster. The degree of data privacy can also be controlled by setting the number of users to be assigned to each cluster.
Further, under the assumption that users in the same cluster have similar browsing patterns, the content selection service may extrapolate and determine similar characteristics and interests of users of the same cluster based on the browsing history aggregated for that cluster. The content selection service may further select content items by anticipation that users of the same cluster will respond similarly. In this way, data security, integrity and privacy over the browsing history of the individual users may be maintained. At the same time, the quality of human-computer interaction (HCI) with the selected content item or the overall information resource can be maintained by the ability to determine relevance in the selection of the content item.
Referring now to FIG. 4, a block diagram depicting one embodiment of a computer networking environment or system 400 for encoding identifiers for selecting content using a classification model is depicted. In general, the system 400 may include at least one network 405 for communicating between components of the system 400. The system 400 may include at least one application manager service 410 (also referred to herein as a browser provider) to provide services to at least one application (e.g., a browser). The system 400 may include at least one content provider 415 to provide content items. The system 400 may include at least one content publisher 420 to provide information resources (e.g., web pages). The system 400 may include at least one content selection service 425 to select content items. System 400 may include one or more client devices 430A-N (generally referred to herein as client devices 430). Each client device 430 may include at least one application 435A-N (generally referred to herein as application 435). Each of the components of system 400 (e.g., network 405, application manager service 410 and components thereof, content provider 415 and components thereof, content publisher 420 and components thereof, content selection service 425 and components thereof, and client device 430 and components thereof) may be implemented using the components of computing system 900 described in detail herein in connection with fig. 9.
In more detail, the network 405 of the system 400 may communicatively couple the application manager service 410, the content provider 415, the content publisher 420, the content selection service 425, and the client device 430 to one another. Each of the application manager service 410, content provider 415, content publisher 420, and content selection service 425 of the system 400 may include a plurality of servers located in at least one data center or server farm that are communicatively coupled to one another via a network 405. The application manager service 410 may communicate with content providers 415, content publishers 420, content selection services 425, and client devices 430 via the network 405. Content provider 415 may communicate with application manager service 410, content publisher 420, content selection service 425, and client device 430 via network 405. The content publisher 420 may communicate with the application manager service 410, the content publisher 420, the content selection service 425, and the client device 430 via the network 405. The content selection service 425 may be in communication with the application manager service 410, the content provider 415, the content publisher 420, and the client device 430 via the network 405. Each client device 430 may communicate with an application manager service 410, a content provider 415, a content publisher 420, and a content selection service 425 via a network 405.
The application manager service 410 may include a server or other computing device operated by an application provider (sometimes referred to herein as a browser provider) to provide resources and updates to applications 435 running on the client device 430. For example, the application manager service 410 may provide the application 435 to be installed to the client device 430. The application manager service 410 may also provide updates to applications 435 installed on the client device 430. The update may affect at least one subcomponent of the application 435. The application manager service 410 may also provide plug-ins or attachments to the applications 435 to enhance the functionality of the applications 435 running on the client device 430. The application manager service 410 may communicate with the content selection service 425 to provide information about applications 435 running on the client device 430. Applications 435 and associated files or data provided may be communicated by the application manager service 410 over the network 405.
The content publisher 420 may include a server or other computing device operated by a content publishing entity to provide information resources including primary content for display via the network 405. For example, the content publisher 420 may include a web page operator that provides primary content for display on an information resource. The information resources may include content other than that provided by the content publisher 420, and the information resources may include content slots configured to display content items from the content provider 415. For example, the content publisher 420 may operate a website of a company and may provide content about the company for display on a web page of the website. The web page may include a content slot configured to display content items provided by the content provider 415 or by the content publisher 420 itself. In some implementations, the content publisher 420 includes a search engine computing device (e.g., a server) of a search engine operator operating a search engine website. The primary content of a search engine web page (e.g., a results or login web page) may include search results and third party content items (such as content items from content provider 415) displayed in content slots of an information resource. In some implementations, the content publisher 420 can include one or more servers for providing video content.
The content selection service 425 may include a server or other computing device operated by a content placement entity to select or identify content items to be inserted into content slots of an information resource via the network 405. In some implementations, the content selection service 425 can include a content placement system (e.g., an online advertising server). The content selection service 425 may maintain a manifest of content items from which to select for provision over the network 405 for insertion into content slots of the information resources. The manifest may be maintained on a database accessible to content selection service 425. The content item or an identifier (e.g., address) of the content item may be provided by the content provider 415.
Each client device 430 may be a computing device that communicates via the network 405 to display data. The displayed data may include content provided by the content publisher 420 (e.g., information resources) and content provided by the content provider 415 (e.g., content items for display in content slots of the information resources), as identified by the content selection service 425. Client devices 430 may include desktop computers, laptop computers, tablet computers, smart phones, personal digital assistants, mobile devices, consumer computing devices, servers, clients, digital video recorders, set-top boxes for televisions, video game consoles, or any other computing devices configured to communicate over network 405. Client device 430 may be a communication device through which an end user may submit a request to receive content. The request may be a request to a search engine, and the request may include a search query. In some implementations, the request can include a request to access a web page.
Applications 435 executing on client device 430 may include, for example, an internet browser, a mobile application, or any other computer program capable of executing or otherwise invoking computer-executable instructions provided to client device 430, such as computer-executable instructions contained in information resources and content items. The information resources included therein may correspond to scripts, logic, tags, or instructions (e.g., hypertext markup language (HTML), extensible hypertext markup language (XHTML), extensible markup language (XML), Cascading Style Sheets (CSS), and JavaScript, or any combination thereof). The content item may be inserted into a content slot of the information resource.
Referring now to FIG. 5, a block diagram depicting one embodiment of a client device 430 and an application manager service 410 in a system 400 is depicted. In general, the application manager service 410 can include at least one classification model 500 to classify applications 435 based on browsing patterns. The application manager service 410 may include at least one model trainer 505 to train and maintain at least one classification model 500. Application manager service 410 may include at least one model updater 510 to change or adjust classification models 500. The application manager service 410 may include at least one database 515 to store and maintain a set of category identifiers 520A-N (generally referred to herein as category identifiers 520, and sometimes referred to herein as "network area identifiers" or "network zip codes"). The application manager server 410 may include at least one instance of a category authorizer 550 (sometimes referred to herein as a category authentication service) to allow the category identifier 520 to be included in requests transmitted via the network 405.
On each client device 430, the applications 435 can include at least one classification model 500 to categorize the applications 435 based on browsing patterns. The application 435 may include at least one model trainer 505 to train and maintain the classification model 500. The application 435 may include at least one content extractor 525 to select features from information resources accessed via the application 435. The application 435 may include at least one model applicator 530 to categorize the application 435 using the classification model 500. The application 435 may also include at least one instance of a category authorizer 550. Model trainer 505, content extractor 525, model applicator 530, and category authorizer 550 can be an integral part of application 435, an accessory or plug-in to application 435, or another application that interfaces with application 435. The application 435 can include at least one browsing history 535 to maintain and store one or more entries 540A-N (generally referred to herein as entries 540). The application 435 can include at least one identifier cache 545 to maintain and store at least one category identifier 520 for the application 435.
In further detail, the classification model 500 may classify, group, or otherwise categorize each application 435 (or each client device 430 running the application 435 or an account associated with the application 435) based on the browsing history 535. The classification of the application 435 on the client device 430 may indicate or represent a classification of an instance of the application 435 running on the client device 430. For example, there may be an instance of one application 435 (e.g., a web browser) running on one client device 430 and another instance of the application 435 (e.g., the same type of web browser) running on another client device 430. The two instances may be classified into the same category or different categories. Further, the classification of the application 435 can be extended to correspond to or include a classification of a user associated with an account operating the application 435 or a client device 430 operated by the user.
The classification model 500 may be a classification or clustering model or algorithm. The classification model 500 may include classification algorithms such as linear classifiers (e.g., linear regression, log regression and naive bayes classifier), Support Vector Machines (SVM), quadratic classifiers, k-nearest neighbor algorithms, Artificial Neural Networks (ANN), and the like. The classification model 500 may include clustering models such as centroid-based clustering algorithms (e.g., k-means algorithms or expectation-maximization (EM) algorithms), density-based clustering algorithms (e.g., density-based spatial clustering applications with noise), distribution-based clustering algorithms (e.g., gaussian mixture models), and Artificial Neural Networks (ANN), among others. The classification model 500 may also include a Hash function, such as a location-sensitive hashing scheme (e.g., MinHash, SimHash, and nilsmisa Hash).
The classification model 500 may include a set of inputs, a set of parameters, and a set of outputs according to any classification or clustering model and algorithm. The input set may take or include entries 540 of browsing history 535. In some implementations, the input set can employ or include a reduced-dimension representation of the entries 540 of the browsing history 535. In some implementations, the set of inputs can include a complete representation of the entries 540 of the browsing history 535. A set of parameters (or weights) may connect or correlate the set of inputs with the set of outputs. In some implementations, the set of parameters can include multiple categories and a value for each category. For example, for each class, the set of parameters may be centroids in a k-means cluster. In another example, the set of parameters may include a range of values associated with each category. The number of classifications may be equal to the number of category identifiers 520. The number of classifications and the number of classification identifiers 520 may be predetermined (e.g., fixed values) or dynamically determined. The output set may produce or include a category corresponding to one of the category identifiers 520. The output set may include one of the category identifiers 520 themselves. For example, the category identifier 520 may be a hash value calculated by using a hash function. Each category identifier 520 may be or include a set of alphanumeric characters or numerical values (e.g., integers or binary numbers).
Model trainer 505 executing on application manager service 410 may train classification model 500. The model trainer 505 may train the classification model 500 using a training data set. The training of the classification model 500 may be based on unsupervised. The training data set may include a sample browsing history 530 of a sample set from an application 435 running on a sample set of the client device 430. In some implementations, the model trainer 505 can obtain and accumulate the sample browsing history 530 from the content provider 415, the content publisher 420, the content selection service 425, or an application 435 running on the client device 430. Prior to training, the model trainer 505 may identify a number of classes for classifying the model 500. In some implementations, the number of categories may be predetermined or assigned by an administrator of the application manager service 410. In some implementations, the number of categories can be determined by the model trainer 505 based on the number of client devices 430 having the application 435. For example, the number of categories may be set such that a set number of client devices 430 (e.g., 800 to 1000 devices) are assigned to each category.
In training the classification model 500, the model trainer 505 may change, adjust, or otherwise set parameter values (e.g., values for each class) in the classification model 500 using the training data set. In each iteration, the model trainer 505 may determine whether the classification model 500 has converged with respect to a previous iteration based on changes in the set of parameter values. In some implementations, the model trainer 505 can compare changes in a set of values in the parameters of the classification model 500 to a convergence threshold. If the change is less than the convergence threshold, the model trainer 505 may determine that the classification model 500 has converged. Otherwise, if the change is greater than the convergence threshold, the model trainer 505 may determine that the classification model 500 has not converged. When it is determined that the classification model 500 has not converged, the model trainer 505 may continue to train the classification model 500.
Otherwise, when it is determined that the classification model 500 has converged, the model trainer 505 may end, terminate, or stop training the classification model 500. The model trainer 505 may store the classification model 500 on the application manager service 410. Additionally, the model trainer 505 may transmit or send the classification model 500 to an application 435 running on the client device 430. In some implementations, the model trainer 505 may transmit or send a set of parameters for the classification model 500. For each class in the classification model 500, the model trainer 505 may identify, assign, or otherwise associate the class to a corresponding class identifier 520. The category identifier 520 may be a set of alphanumeric characters to reference the category. The classification model 500 may associate each category with a corresponding category identifier 520. The model trainer 505 may communicate and provide a set of category identifiers 520 to the application 435 running on each client device 430 and to the content selection service 425.
The model trainer 505 of the application 435 executing on the client device 430 may also train the classification model 500. In some implementations, the model trainer 505 can train the classification model 500 using a distributed learning protocol. The distributed learning protocol may be coordinated with applications 435 executing on other client devices 430 and the application manager service 410 communicating over the network 405. The distributed learning protocol may include, for example, joint learning using an optimization algorithm (e.g., Stochastic Gradient Descent (SGD) or averaging) to train the classification model 500. As discussed above, the number of categories and the number of category identifiers 520 may be predetermined (e.g., fixed values) or dynamically determined. During each iteration, each model trainer 505 may change, adjust, or otherwise set the values of the parameters (e.g., the values for each class) in the classification model 500 by using the training data set. At the end of the iteration, each model trainer 505 (an instance of the model trainer 505 on the other client device 430) may provide values of the parameters in the classification model 500 (e.g., values for each class) to each other. The model trainer 505 may use the received values of the parameters to adjust, change, or set parameters on the locally maintained classification model 500. The model trainer 505 may repeat the iterations until it is determined that the classification model 500 has converged with respect to the previous iteration based on changes in the set of values of the parameters as discussed above.
Model updater 510 executing on application manager service 410 may provide or send updates to classification model 500 maintained on each client device 430 running on application 435. Model updater 510 may determine whether to update classification model 500 according to a model update policy. The model update policy may specify a set of conditions under which the classification model 500 is to be updated. In some embodiments, the model update strategy may include a schedule indicating when to update the classification model 500. The model update policy may specify that the classification model 500 is to be updated when the number of applications 435 assigned to each category is not evenly distributed (e.g., the difference in category sizes is within 5% to 100% of another category). The model update policy may specify that the classification model 500 is to be updated when the amount of accumulated additional browsing history 535 meets a threshold amount. If it is determined that classification model 500 is not to be updated, model updater 510 may maintain classification model 500.
On the other hand, if it is determined to be updated, model updater 510 may invoke model trainer 505 (on application manager service 410 or on application 435 running on client device 430) to retrain classification model 500. In some implementations, model updater 510 may accumulate browsing history 530 of training data sets from content providers 415, content publishers 420, content selection service 425, or applications 435 running on client device 430. The updater 510 may pass the accumulated browsing history 530 to the model trainer 505 to retrain the classification model 500. After determining that the classification model 500 has converged, the model trainer 505 may end, terminate, or stop training the classification model 500. The model updater 510 may communicate or send the newly trained classification model 500 (or a set of parameters for the classification model 500) to each application 435 to update the classification model 500. Model updater 510 may communicate and provide a set of category identifiers 520 to applications 435 running on each client device 430 and to content selection service 425.
A model application 530 of an application 435 executing on a client device 430 may receive a classification model 500 from an application manager service 410 via a network 405. Upon receipt, model application 530 may store and maintain classification model 500 on client device 430. In some implementations, model applicator 530 may receive a set of parameters for classification model 500 from application manager service 410. The receiving of the set of parameters may be updating the classification model 500. Upon receipt, model applicator 530 may change, configure, or otherwise modify classification model 500 by using the received set of parameters. Further, model applicator 530 may receive a set of class identifiers 520 for classifying classes in model 500 from application manager service 410. The receipt of the category identifier 520 may be as part of an update to the classification model 500.
Through configuration of classification model 500, model applicator 530 may identify, through application 435, browsing history 535 maintained on client device 430. The application 435 may maintain the browsing history 535 by creating an entry 540 each time an information resource is accessed. The browsing history 535 may record information resources (e.g., web pages) and other online content accessed via the application 435. Browsing history 535 may include a collection of entries 540. Each entry 540 may include an address for the accessed information resource (e.g., a Uniform Resource Locator (URL) including a host name and a pathname of the web page) and a timestamp indicating the time at which the information resource was accessed. The set of entries 540 may be indexed by a timestamp or address of an information resource within the browsing history 535. In some embodiments, the model applicator 530 may identify a portion of the browsing history 535 over the entire time frame for further processing by the model applicator 530. A portion of the browsing history 535 may include a subset of entries 540 having timestamps within the time range. The time range may be, for example, the number of entries 540 for one week from the current time.
In conjunction, the content extractor 525 of the application 435 executing on the client device 430 may identify, select, or otherwise extract one or more features from each of the information resources for the corresponding entry 540 in the browsing history 535. The features may be extracted from at least a portion of the content on the information resource. These features may include, for example, textual data, visual data, or audio data. In some implementations, when the application 435 accesses the information resource via the network 405, the content extractor 525 may identify the feature from the content of the information resource. In some implementations, the content extractor 525 can access each information resource via a corresponding entry in the browsing history 535 to extract the feature. The access may be separate from or subsequent to presenting the information resource via the application 435.
Upon extraction from the information resources, the content extractor 525 may apply one or more attribute selection algorithms to the content of each information resource accessed by the application 535. To extract the textual data, the content extractor 525 may apply at least one natural choice processing algorithm, such as term extraction, named entity identification, relationship extraction, auto-summarization, and term frequency inverse document frequency (tf-idf), among others. The textual data identified using the natural language processing algorithm may include a subset of textual content on the information resource. To extract visual data, the content extractor 525 may apply at least one computer vision algorithm, such as object identification and optical character identification (OCR). The visual algorithm identified using the computational visual algorithm may include a subset of the graphics (or an identifier corresponding to the subset) on the information resource. To extract the audio data, the content extractor 525 may apply at least one of an audio signal analysis algorithm and a voice recognition algorithm. The extracted audio data may include, for example, words identified from the audio, and so forth.
After identifying the browsing history 535, the model applicator 535 may form or generate a set of feature vectors using the entries 540 of the browsing history 535. In some implementations, model applicator 535 may generate a set of feature vectors by using features extracted from information resources accessed by application 435. A set of feature vectors may be used as input to the classification model 500. The set of feature vectors may comprise dimensions, or may be defined by dimensions. The dimensions may include a time range (e.g., hours of the day or days of the week) and address attributes (e.g., domain name, a portion of a website, a subject category, or the address itself). The dimensions may also include text data, image data, and audio data corresponding to the extracted features. Each feature vector may be associated with at least one time range based on a timestamp associated with the corresponding entry 540. Each feature vector may be associated with at least one of the address attributes of the information resource based on the address of the information resource identified in the corresponding entry 540.
In some implementations, the model applicator 535 may generate a set of feature vectors by projecting the entries 540 of the browsing history 535 onto dimensions of the feature vectors defined by a time range and address attributes. For each entry 540 of browsing history 535, model applicator 535 may identify whether an existing feature vector exists based on the address and timestamp in entry 540. To identify, model applicator 530 may determine whether entry 540 matches any of the existing feature vectors. When there are existing feature vectors, model applicator 535 may add entry 540 to the feature vectors. Conversely, when there are no existing features, model applicator 535 may create a new feature vector for entry 540.
In some embodiments, model applicator 535 may use a dimension reduction process to form or generate a reduced set of feature vectors. The dimensionality reduction process may include linear reduction techniques (e.g., Principal Component Analysis (PCA), Singular Value Decomposition (SVD), non-negative matrix decomposition (NMF)), non-linear dimensionality reduction (e.g., Generalized Discriminant Analysis (GDA), local linear embedding, and Sammon mapping)), or others (e.g., Johnson-lindenstruss lemma and multi-factor dimensionality reduction), among others. In some implementations, model applicator 530 may apply a dimension reduction process when projecting entries 540 of browsing history 535 onto dimensions of feature vectors. In some embodiments, model applicator 535 may apply a dimensionality reduction process to the generated set of feature vectors. By applying a dimensionality reduction process, model applicator 535 may reduce the dimensionality in the original set of feature vectors to generate a reduced set of feature vectors. The reduced set of feature vectors may have fewer dimensions and data points than the initial set of reduced feature vectors. For example, the reduced feature vector set may omit the time range or address attributes without any associated entries 540. In some embodiments, model applicator 535 may omit the dimension reduction process and continue to process the feature vectors without the dimension reduction process.
The model applicator 530 may apply the classification model 500 to the browsing history 535 (or any subset or representation of the entries 540 of the browsing history 535, such as feature vectors) to identify one or more categories in which to categorize the application 435. For application, model applicator 530 may feed browsing history 535 as a set of inputs to classification model 500. In some embodiments, model applicator 530 may feed a set of feature vectors or reduced feature vectors as input to classification model 500. Once fed, model applicator 530 may use classification model 500 to compare the input to the parameters used to define the categories and generate or produce a set of outputs based on the comparison. The output set may include one or more categories into which the browsing patterns are classified as indicated in the browsing history 535 maintained by the application 435.
From the output of classification model 500, model applicator 530 may identify one or more categories. In some embodiments, model applicator 530 may identify a single class (sometimes referred to herein as the closest or closest class) from the output. A single class may correspond to a portion of the feature space defined by the classification model 500 that is closest in distance to the input feature vector. The feature space defined by the classification model 300 may have the same parameters and values as the inputs.
In some embodiments, model applicator 530 may identify a set of categories (sometimes referred to herein as the closest or closest categories) from the output. The identified set may be a subset of the categories defined by the classification model 500. The member classes of the set may be within a proximity threshold of each other in the feature space defined by the classification model 300. The proximity threshold may define a distance within a particular space in which one or more categories are to be selected. In some implementations, model applicator 530 may identify a set of classes that are within a proximity threshold of the feature vectors input into classification model 500. In some implementations, model applicator 530 may rank the set of categories by distance from the input feature vector within the feature space.
Each identified category may correspond to one of a plurality of categories as defined by the classification model 500. The identified categories of applications 435 running on client device 430 may be common, shared, or the same as the identified categories of at least some other applications 435 running on other client devices 430. As discussed above, each category defined by the classification model 500 may have multiple client devices to classify into that category.
By identifying one or more categories for the applications 435, the category authorizer 550 can determine whether each category satisfies (e.g., is greater than or equal to) a threshold number of applications 435 assigned to the category. The threshold number may delineate or define the number of applications 435 assigned to the category in which requests for content may be generated using the category. The threshold number may be set to match or reach the target entropy. There may be multiple applications 435 assigned to the same category by each separate instance of model applicator 530. However, until the number of such applications 435 exceeds a threshold number, the category may not be used to generate a request for content. The determination of the application 435 on the client device 435 may be coordinated or coordinated with a category authentication service (e.g., a category authorizer 550 executing on the application manager service 410). The functionality of the category authorizer 550 may be divided between the application 435 and the application manager service 410 (or some other server device). The determination may be according to a threshold cryptographic protocol or a check against a probabilistic data structure.
In some implementations, the class authorizer 550 of the application 435 and the class authorizer 550 of the application manager service 410 may perform a threshold cryptographic protocol when making the determination. For each identified category, the category authorizer 550 on the application 435 can identify a category identifier 520 corresponding to the category. Upon identification, the category authorizer 550 can generate an encrypted copy of the category identifier 520. In some implementations, the class authorizer 550 can generate an encrypted copy using at least a portion of the private encryption key according to an asymmetric cryptographic algorithm. Asymmetric cryptographic algorithms may include, for example, digital signatures, Diffie-Hellman key exchanges, elliptic curve cryptography, or the Rivest-Shamir-Adleman (RSA) algorithm, among others. The category authorizer 550 of the application 435 may generate an authentication request that includes an encrypted copy of the category identifier 520. Once generated, the category authorizer 550 of the application 435 may transmit the request to the category authorizer 550 over the application manager service 410 via the network 405.
Upon receipt from the client device 430, the category authorizer 550 executing on the application manager service 410 can parse the authentication request to identify an encrypted copy of the category identifier 520. With this identification, the category authorizer 550 can attempt to decrypt the original category identifier 520 from the encrypted copy of the category identifier 520. The decryption may be according to an asymmetric cryptographic algorithm. Under the threshold cryptographic protocol, the class authorizer 550 may not be able to successfully decrypt an encrypted copy having the same class identifier 520 until the number of received authentication requests for the encrypted copy meets a threshold number. For example, the inability to decrypt may be because the class authorizer 550 may not receive a sufficient portion of the private key of the request from the different application 435. Upon receiving a sufficient portion of the private key, the class authorizer 550 can successfully decrypt the encrypted copy to recover the original class identifier 520.
The category authorizer 550 can generate an output from the decryption of the encrypted copy. If the number of requests having encrypted copies for the same category identifier 520 does not satisfy (e.g., is less than) the threshold, the category authorizer 550 may not be able to recover the original category identifier 550 from the decryption. Thus, the output generated from attempting to decrypt may not match the original category identifier 520. On the other hand, if the number of requests for encrypted copies having the same category identifier 520 meets (e.g., is greater than or equal to) the threshold, the category authorizer 550 can recover the original category identifier 550 from the decryption. Thus, the output generated from the attempted decryption may match the original category identifier 520. Using the resulting output, the category authorizer 550 can generate a response that includes the output. Once generated, category authorizer 550 on application manager service 510 may transmit a response with the resulting output to client device 430 over network 405.
The category authorizer 550 of the application 435 may then receive the response from the category authorizer 550 running on the application manager service 410. Upon receipt, the class authorizer 550 may parse the response to identify the resulting output from the decryption attempt. The category authorizer 550 may compare the resulting output to the category identifier 520 corresponding to the category included in the authentication request. When it is determined that the resulting outputs match, the category authorizer 550 may determine that the category satisfies the threshold number of applications 435. Model applicator 530 may continue to use the category and corresponding category identifier 520. Conversely, when the resulting output is determined to not match, the category authorizer 550 may determine that the category does not satisfy the threshold number of applications 435. Model applicator 530 may discard the class and corresponding class identifier 520 from further use. In addition, the category authorizer 550 can utilize another category repeat threshold cryptographic protocol to find a category to use in the request for content.
In some implementations, for each identified category, the category authorizer 550 of the application 435 can check the category identifier 520 corresponding to the category against at least one data structure to make the determination. The data structure may be maintained by a category authorizer 550 running on the application manager service 410 (e.g., database 515). The data structure may indicate whether any applications 435 are assigned to the category. The data structure may also indicate whether the number of applications 435 assigned to the category satisfies a threshold number. In some embodiments, the data structure may be a probabilistic data structure. The probabilistic data structures may include, for example, a count bloom filter, a quotient filter, a valley filter, a count-min thumbnail, and so forth.
To perform the check, the category authorizer 550 of the application 435 may generate an authentication request that includes the category identifier 520 corresponding to the category. Upon generation, the category authorizer 550 may send an authentication request to the category authorizer 550 running on the application manager service 410. The category authorizer 550 on the application manager service 410 can then receive the authentication request. The category authorizer 550 can parse the authentication request to identify the category identifier 520. The category authorizer 550 can determine whether the number of applications 435 assigned to the category satisfies a threshold number with the application data structure. In applying the data structure, the category authorizer 550 can feed the category identifier 520 included in the request into the data structure and identify the output from the data structure. In addition, each time an authentication request is received, the class authorizer 550 can update the data structure for the class maintained by the application manager service 410.
If the data structure indicates that the number meets (e.g., is greater than or equal to) a threshold number, the category authorizer 550 on the application manager service 410 can generate a success response. The response may indicate that the number of applications 435 satisfies a threshold number. Category authorizer 550 on application manager service 410 may send the success response to category authorizer 550 on application 435. Based on receiving a successful response, the category authorizer 550 of the application 435 may identify the response as indicating that the threshold number is met. Additionally, model applicator 530 may continue to use the categories and corresponding category identifiers 520.
On the other hand, if the data structure indicates that the number does not satisfy (e.g., is less than) the threshold number, the category authorizer 550 on the application manager service 410 may generate a failure response. The response may indicate that the number of applications 435 does not satisfy the threshold number. The category authorizer 550 on the application manager service 410 can send a failure response to the category authorizer 550 on the application 435. Based on receiving the failure response, the category authorizer 550 of the application 435 may identify the response as indicating that the threshold number is not satisfied. Model applicator 530 may discard the class and corresponding class identifier 520 from further use. In addition, the category authorizer 550 can repeat the check with another category to find a category to use in the request for content.
Upon determining that at least one category satisfies the threshold number of applications 435 assigned to that category, model applicator 530 may assign applications 435 to the corresponding category identifiers 520 of that category. In some implementations, model applicator 530 may identify the category identifier 520 corresponding to the closest category determined to satisfy a threshold number. By default, the category identifier 520 assigned to the application 435 by the model applicator 530 may correspond to the closest category. In some implementations, model applicator 530 may use classification model 500 to identify a category identifier 520 associated with the identified category. With this identification, model applicator 530 may then assign category identifier 520 to application 435. Assigning the category identifier 520 to the application 435 may indicate that the browsing history 535 of the application 435 is similar to other browsing histories 530 on other applications 435 having the same category identifier 520. The category identifiers 520 assigned to the applications 435 running on the client device 430 may be common, shared, or the same as the category identifiers 520 of at least some other applications 435 running on other client devices 430.
Through the assignment, model applicator 530 can store and maintain category identifiers 520 onto identifier cache 545. For example, as depicted, model applicator 530 of first application 435A may have identified first application 435A as having a similar browsing pattern as other applications 435B-N having a category corresponding to first category identifier 520A. The identifier cache 545 may control access of scripts executed by the application 435 to avoid accessing the category identifiers 520. In some embodiments, model applicator 530 may store category identifier 520 in a secure cookie maintained on identifier cache 545. The secure cookie may comprise a cookie with a secure token or HTTP-only token set. The security cookie may prevent scripts on the information resource from accessing the category identifier 520 maintained on the identifier cache 545. In addition, the security cookie can allow authorized entities to access the category identifiers 520 stored in the identifier cache 545. The secure cookie may identify the content selection service 425 or the application manager service 410 as allowing access to the category identifier 520 on the identifier cache 545.
Referring now to FIG. 6, a block diagram depicting one embodiment of a client device 430, a content provider 415, a content publisher 420, and a content selection service 425 in a system 400 is depicted. In general, the application 435 (e.g., as depicted for the first client device 430A) on each client device 430 may include at least one resource handler 615 to handle reading and parsing of at least one information resource 600 and other data in communication with the content provider 415, the content publisher 420, or the content selection service 425. The application 435 may also include at least one identifier selector 620 to determine which category identifier 520 to insert into a request for content sent via the network 405.
In more detail, the resource handler 615 executing on the client device 430 can receive the information resource 600 from the content publisher 420. The receipt of the information resource 600 can be in response to a request for the information resource 600 sent by the application 435 to the content publisher 420 and can be for presentation on the client device 430. The received information resource 600 (e.g., a web page) may include at least one primary content 605 (e.g., body, text, and images of the web page) and at least one content slot 610 (e.g., an iframe of the web page). The primary content 605 may correspond to a portion of the information resource 600 provided by the content publisher 420. Content slot 610 may be available to receive content from content provider 415 or content selection service 425. The content to be inserted into the content slot 610 may have a host name that is different from the host name of the information resource 600. Once received, the resource handler 615 can parse the information resource 600 including the primary content 605 and the content slot 610.
For the content slots 610 of the information resource 600, the resource handler 615 may generate requests 625A-N (generally referred to herein as requests for content 625) to send to the content selection service 425. The request 625 for content may be generated according to a script (e.g., an advertisement tag or a content selection tag) for inserting content into the content slot 610. The script for the content slot 610 may be embedded or included in the content slot 610 itself or another portion of the information resource 600. In generating the request 625 for content, the resource handler 615 may include addresses 630A-N (generally referred to herein as addresses 630) in the request 625 for content. The address 630 may reference a content selection service 425, such as a URL for the content selection service 425, specified by the script for the content slot 610. The address 630 may indicate a destination address to which the request for content 625 is to be routed. Further, the resource handler 615 may include a source address for referencing the client device 430 into the request for content 625. The resource handler 615 may also include an address corresponding to the content publisher 420 that provides the information resource 600 to the application 435.
Further, the identifier selector 620 can identify or otherwise select which category identifier 520 to insert into the request 625 for content according to at least one obfuscation policy (sometimes referred to herein as a distribution policy). The obfuscation policy may specify one or more conditions that allow or restrict the category identifier 520 from being included in the request 625 for content. In some implementations, the condition of the obfuscation policy may be specific to one or more of the information resource 600, the primary content 605 of the information resource 610, or the information slot 610 of the information resource 600, or any combination thereof. In some implementations, the condition can depend on the entry 540 of the browsing history 535. For example, a condition of the obfuscation policy may specify that another category identifier 520 or no category identifier 520 is included in the request for content 625 for the information resource 600 to be accessed via the application 435 for the first time. In another example, a condition of the obfuscation policy may specify that another category identifier 520 is to be used for information resources 600 that are rarely accessed (or are accessed below a threshold number as indicated by the browsing history 535). In another example, the obfuscation policy may specify: the category identifier 520 will not be used unless the received information resource 600 is in accordance with the hypertext transfer protocol secure (HTTPS) protocol. In this manner, the obfuscation policy may further protect data privacy by accessing the information resource 600 via the application 435 over the network 405.
In selecting according to an obfuscation policy, the identifier selector 620 may identify one or more conditions to compare the obfuscation policies. In some implementations, the identifier selector 620 can identify the information resource 600 that includes various portions of content and addresses (e.g., protocol, domain name, and path name). In some implementations, the identifier selector 620 can identify the respective primary content 605 on the information resource 600. In some implementations, the identifier selector 620 can identify the content slots 610 for which requests 625 for content are to be generated. In some implementations, the identifier selector 620 can identify an entry 540 of the browsing history 535 of the application 435. With these identifications, the identifier selector 620 can compare the conditions specified by the obfuscation policy. If it is determined that the conditions do not match, the identifier selector 620 may maintain the category identifier 520 for inclusion in the request 625 for content.
On the other hand, if it is determined that the conditions match, the identifier selector 620 may determine whether the obfuscation policy specifies allowing or restricting the category identifier 520. When the obfuscation policy specifies that the category identifier 520 is allowed, the identifier selector 620 may maintain the category identifier 520 for inclusion in the request for content 625. Conversely, when the obfuscation policy specifies restricting the category identifier 520, the identifier selector 620 may find another category identifier 520 or no category identifier 520. In some implementations, the obfuscation policy may specify that another category identifier 520 is to be used under such conditions. Accordingly, identifier selector 620 may use another category identifier 520 corresponding to the set of categories identified by model applicator 530. In some implementations, the obfuscation policy may specify that the category identifier 620 is not included under such conditions. Accordingly, the identifier selector 620 may prevent, remove, or otherwise restrict any category identifiers 620 from being included in the request 625 for content.
By selecting the category identifier 520, the resource handler 615 can include the category identifier 520 selected for the application 435 in the request 625 for content. In some embodiments, the resource handler 615 can access the identifier cache 545 to retrieve the category identifier 520. Once retrieved, the resource handler 615 may include a category identifier 520 to include the request 625 for content. In some implementations, the request 625 for content is initially generated by the application 435 when parsing the script for the content slot 610 and may initially include a unique tracking identifier. The resource handler 615 may delete or otherwise exclude from the request for content 625 any unique tracking identifiers corresponding to the application 435 (or the client device 430 running the application 435, or an account associated with the application 435). The unique tracking identifier may include, for example, a cookie user identifier corresponding to an account associated with the application 435, or a cookie device identifier corresponding to the client device 430 running the application 435. The unique tracking identifier may have been provided by content provider 415 or another content placement service. Once removed, the resource handler 615 may include the category identifier 520 in the request for content 625. In some implementations, the resource handler 615 can replace the unique tracking identifier included in the request 625 for content with the category identifier 520. In some implementations, the resource handler 615 can remove any identifiers or any category identifiers 520 that include the tracking identifier in response to a determination according to the obfuscation policy.
In some implementations, the resource handler 615 can package or include the category identifier 520 in a specified portion of the request for the content 620. In some implementations, the resource handler 615 can include the category identifier 520 in at least one header field of the request 625 for content. In some implementations, the resource handler 615 can include the category identifier 520 in the body of the request for content 625. In some implementations, the resource handler 615 can include the category identifier 520 in a cookie. In some implementations, a cookie can be generated in conjunction with the request for content 625. In some implementations, the cookie can be retrieved from the application 435 (e.g., the identifier cache 545). The cookie may have a secure token or an HTTP-only token set to prevent interception and access to the category identifier 520 by unauthorized entities. Unauthorized entities may include those other than content selection service 425 or application manager service 410. The Cookie may also restrict access to the class identifier 520 over a secure communication channel (e.g., Hypertext Transfer Protocol Secure (HTTPs)) over the network 405 by setting a secure flag or an HTTP-only flag. The resource handler 615 may include a cookie containing the category identifier 520 in the request for content 625. The cookie may also include an address corresponding to the content publisher 420 that provided the information resource 600 to the application 435. Upon generation, the resource handler 615 may communicate a request 625 for content to the content selection service 425 via the network 405. In some implementations, the application 435 can establish a secure communication channel (e.g., according to HTTP) between the client device 430 and the content selection service 425 to communicate the request 625 for the content. The establishment of the channel may allow the content selection service 425 to access the category identifier 520 included in the cookie of the request for content 625.
The class identifiers 520A-N assigned by the various model applicators 530 to the different applications 435A-N running on the client devices 430A-N may not be specific to one application 435A-N and may not uniquely identify the applications 435A-N. For example, as depicted, a first category identifier 520A may have been assigned to a first application 435A on a first client device 430A and a second application 435B running on a second client device 430B. In contrast, the second category identifier 520B may have been assigned to the nth application 435N running on the nth client device 430N. This may be in contrast to a unique tracking identifier, such as a user or client identifier, that specifically identifies an application 435A-N or client device 430A-N provided by the content provider 415 or other content placement service. Additionally, the category identifiers 520A-N may have a lower entropy than such unique tracking identifiers, as the category identifiers 520A-N may not be able to uniquely identify each application 435 running on the client device 430. For example, the entropy of the unique tracking identifier may have an entropy greater than 63 bits, while the entropy of the category identifiers 520A-N may have an entropy between 18 and 52 bits. In this way, the size of the category identifiers 520A-N may be smaller than the size of these unique tracking identifiers, thereby reducing the size of the request 625 for content sent over the network 405.
Referring now to FIG. 7, a block diagram depicting one embodiment of a client device 430 and a content selection service 425 in a system 400 is depicted. The content selection service 425 may include at least one history aggregator 700 to store and maintain browsing history. The content selection service 425 may include at least one category characterizer 705 to determine the selection parameters for each category. The content selection service 425 may include at least one content placer 710 to identify content items 725A-N (generally referred to herein as content items 725) for the application 435 associated with the request 620 using the identified categories. The content selection service 425 may include at least one history database 715 to maintain and store browsing histories 720A-N (generally referred to herein as entries 720) of the category identifiers 520.
In more detail, the history aggregator 700 executing on the content selection service 425 may collect, aggregate, or otherwise maintain the history database 715 through the use of cookies 630 included in requests for content 620 received from the client devices 430. The history database 715 may include a set of entries 720 indexed by the category identifiers 520 defined by the application manager service 410. Each entry 720 may include an address for the accessed information resource 600 and a timestamp indicating the time at which the information resource 600 was accessed. Instead of aggregating the browsing history of the client device 430 by using a unique tracking identifier (e.g., a cookie identifier), the history aggregator 700 may aggregate the browsing history by category identifier 520. Unlike the browsing history 530 maintained on each individual application 435, the history database 715 may not individually identify the application 435 (or the user associated with the application 435) from which the entry 720 was generated. Each time a request 625 for content is received, the history aggregator 700 may identify an address corresponding to the information resource 600 on which the content is to be returned. The history aggregator 700 may also identify the category identifier 520 included in the request 625 for content. With these identifications, the history aggregator 700 may add an entry 720 including an address and a timestamp (not shown in FIG. 4) to the set of entries 720 for the category identifier 520 included in the request 625 for content.
A category characterizer 705 executing on the content selection service 425 may determine one or more characteristics for each category based on the entry 720 of the category identifier 520 for that category. The characteristics may include, for example, common characteristics, profiles, behaviors, or interests of the categories corresponding to the category identifiers 520. In some implementations, the category characterizer 705 can use a category profile model to determine features for the category based on the set of entries 720 in the history database 715 for the category identifier 520. The category profile model may be any model, such as linear regression, logistic regression, Artificial Neural Networks (ANNs), Support Vector Machines (SVMs), and naive Bayes classifiers, among others. The category profile model may be trained using a sample data set that associates the browsing history tagged by the category identifier 520 with certain features. The category profile model may convert the entry 720 for each category identifier 520 on the history database 715 into a feature for the corresponding category. In some implementations, the class characterizer 705 can store and maintain characteristics for each class identifier 520. The content placer 710 executing on the content selection service 425 may select or identify a content item 725 from a collection of content items 725 in response to a request 625 for content by using the category identifier 520. The use of the category identifier 520 may be contrasted with the use of a unique identifier for a particular user associated with the request for content, as the selection of the content item 725 may not be based on an identifier unique to the particular user. Each content item 725 may include an object or element to be embedded, inserted, or otherwise added to the content slot 610 of the information resource 600. Each content item 725 may be provided by one or more content providers 415. Upon receipt, the content placer 710 may parse the request 625 for content to identify the category identifier 520. Upon identification, the content placer 710 may identify the characteristics of the category corresponding to the category identifier 520. The content placer 710 may identify or select content items 725 that are associated with the characteristics of the category. In some implementations, the content placer 710 may select the content item 725 using a content placement process. The content placement process may use models such as linear regression, logistic regression, Artificial Neural Networks (ANNs), Support Vector Machines (SVMs), naive Bayes classifiers, and so on. For each content item 725, the content placement process may calculate, determine, or generate a predicted likelihood of interaction by the user in the category corresponding to the category identifier 520 included in the request for content 625. The content placer 710 may identify the content item 725 that has the greatest likelihood of interacting with users in the category. Once selected, the content placer 710 may send the content item 725 to the client device 430 that initiated the request 625 for content. In some implementations, the content placer 710 may send an address for the content item 725 to the client device 430 for the application 435 to retrieve the selected content item 725 from the content provider 415.
Referring back to FIG. 6 in conjunction with FIG. 7, the resource handler 615 may receive a content item 725 identified by the content selection service 425. The resource handler 615 may embed, insert, or add the content item 725 into the content slot 610 of the information resource 600. In some implementations, the resource processor 615 can receive an address of the content item 725. The address of the content item 725 may reference the content provider 415. The resource handler 615 may send another request to the content provider 415 to retrieve the content item 725 and insert the content item 725 into the content slot 610 of the information resource 600.
In this manner, the content selection service 425 may select the content item 725 in anticipation of desiring to have a similar response with users associated with the same category identifier 520. In addition, data security, integrity, and privacy over the browsing history 530 of the respective user may be preserved. At the same time, the quality of human-computer interaction (HCI) with the overall information resource 600 may be maintained through the ability to determine the relevance of the selection of content items 725 to the various categories.
Referring now to FIG. 8, a flow diagram is depicted depicting one embodiment of a method 800 for encoding an identifier for selecting content using a classification model. The functions described herein with respect to method 800 may be performed or otherwise performed by system 400 as shown in fig. 4 or a computing device as described in fig. 9. In brief overview, an application running on a client device may identify an accessed information resource (805). The application may reduce the dimension (810). The application may apply a classification model (815). The application may identify a category (820). The application may assign a category identifier (825). The application may determine whether the category identifier is allowed (830). If not, the application may assign another category identifier (835). The application may receive an information resource (840). The application may generate a request for content (845). The application may determine whether to obfuscate the category identifier (850). If so, the application may use another category identifier (855). The application may include a category identifier (860). The application may transmit a request for content (865). The application may receive the selected content item (870). The application may determine whether to reassign (875). If not, the application may maintain a category identifier (880).
In more detail, an application (e.g., application 435) on a client device (e.g., client device 430) may identify an accessed information resource (805). In some implementations, the application can identify the accessed information resource from a browsing history (e.g., browsing history 530). The browsing history may include a set of entries (e.g., entry 540). Each entry may include an address of the accessed information resource and, in some embodiments, a timestamp identifying the time at which the information resource was accessed. For each accessed information resource, the application may extract features from content on the information resource. The application may generate a set of feature vectors from a set of entries of the browsing history. The feature vector may be a projection of the browsing history onto the set of dimensions. The dimensions may include time ranges and address attributes, among others. The application may reduce the dimension (810). Using a dimension reduction process, the application may generate a reduced set of feature vectors from the initial set of feature vectors. In some implementations, step (810) may be performed across the application 435 and another server. In some embodiments, step (810) may be omitted. In some embodiments, step (810) may be replaced with or combined with training of a classification model. For example, the classification model may be trained using a distributed learning protocol, such as joint learning using an optimization algorithm (e.g., Stochastic Gradient Descent (SGD) or averaging). During each iteration, each application may set or adjust the values of the classification model by using the training data set, and may provide the values to each other according to a distributed learning protocol.
The application may apply a classification model (e.g., classification model 500) to features extracted from the stored information resources (815). The classification model may include a set of inputs, a set of parameters, and a set of outputs. The classification model may for example be a classification algorithm, a clustering model or a locality sensitive hash function, etc. The input set may include features extracted from the accessed information resources, entries of the browsing history, or representations of the browsing history. A set of parameters may associate an input with an output. The output set may include categories into which a user interacting with the application is categorized based on a browsing history of the user on the application. The application may feed a set of reduced-dimension feature vectors as input to the classification model. The classification model may apply the parameters to the input. The application may identify a category (820). Through application of the classification model, the classification model may generate an output identifying one or more categories into which a user interacting with the application is categorized. The classification of an application may, by extension, correspond to or include a classification of a user associated with an account operating the application or a client device operated by the user. The application may assign a category identifier (e.g., category identifier 520) (825). The classification model may associate each category with one of the category identifiers. Once the category identifier is identified, the application may identify the category identifier corresponding to the category and assign the application to the category identifier.
The application may determine whether the category identifier is allowed (830). This determination may be coordinated or coordinated with an authentication service (e.g., class authorizer 550 on application manager service 410) according to a threshold cryptographic scheme. The application may send an encrypted copy of the category identifier corresponding to the category. Under a threshold cryptographic scheme, the authentication service may not be able to decrypt the category identifier unless the number of requests with encrypted copies of the same identifier exceeds a threshold number. The inability to decrypt may be, for example, because the authentication service may not receive a sufficient portion of the decryption key (e.g., private key) from the request. Once enough portions are received, the authentication service can successfully decrypt the encrypted copy. The authentication service may return an output of the decryption attempt. The application may compare the output to the original category identifier. Upon matching, the application may determine that the category is allowed. Otherwise, the application may determine that the category is not allowed. If the category identifier is not allowed, the application may assign another category identifier (835). The application may find another category identifier from the identified set of categories, and may repeat (830) the functionality in.
The application may receive an information resource (e.g., information resource 600) (840). The information resources may include primary content (e.g., primary content 605) and a content slot (e.g., content slot 610). The primary content may be provided by a content publisher (e.g., content publisher 420). The content slots may be used to insert content from a content provider (e.g., content provider 415) or a content selection service (e.g., content selection service 425). Upon receipt, the application may parse the information resource. The application may generate a request for content (e.g., request for content 625) (845). The generation of the request for content may be combined with the parsing of the information resource.
The application may determine whether to obfuscate the category identifier (850). The determination may be in accordance with a obfuscation policy. The obfuscation policy may specify one or more conditions under which the category identifier is restricted from being included in the request for content. For example, the condition may include a security protocol (e.g., HTTPS) according to which the information resource is received. In this example, the obfuscation policy may specify that the category identifier is not included in the request for content when the information resource is not encrypted under HTTPS. The application may identify conditions related to the information resource for comparison with conditions specified by the obfuscation policy. When the conditions do not match, the application may determine not to obfuscate the category identifier and maintain the current category identifier. Otherwise, the application may determine to obfuscate the category identifier when the conditions do match. If it is determined that the category identifier is obfuscated, the application may use another category identifier (855).
The application may include the category identifier in the request for content (860). The request for content may include a category identifier corresponding to a category identified using the classification model. The application may also remove any unique tracking identifiers associated with the user of the application, the application itself, or the client device running on the application. The unique tracking identifier may have been provided as part of a third party cookie from the content provider or another content placement platform. The category identifier may be included as part of a secure cookie included in the request for content. The application may communicate the request for content to a content selection service or other content provider (865). The transfer may be over a secure communication channel established between the client device and the content selection service. The request for content may be received by a content selection service. The content selection service may use the category identifier included in the request to identify a content item from a set of content items (e.g., content item 725). Through the selection, the content selection service may send the content item to the application. The application may receive the selected content item (870). The application may insert the content item into a content slot defined on the information resource.
The application may determine whether to reassign the category identifier (875). The reallocation may be according to an identifier allocation policy. The policy may specify a set of conditions under which the classification model is to be applied again to the browsing history for new category identifiers. For example, the re-allocation policy may specify that the classification model is to be re-applied when the number of additional entries in the browsing history since the previous allocation exceeds a threshold number. If it is determined to be reallocated, the application may repeat functions (805) - (835) and proceed. On the other hand, if there is no reassignment determination, the application may maintain a category identifier (880).
Thus, the systems and methods described herein allow for selection of content items relevant to a user without the need to separately track user activity. In this way, data security, integrity and privacy over the browsing history of the respective user may be preserved. At the same time, by the ability to determine the relevance of the selection of content items to the respective categories, the quality of human-computer interaction (HCI) with the overall information resource can be maintained.
Fig. 9 illustrates the general architecture of an exemplary computer system 900 that may be used to implement any of the computer systems discussed herein, including the application manager service 410 and its components, the content provider 415 and its components, the content publisher 420 and its components, the content selection service 425 and its components, and the client device 430 and its components, according to some embodiments. Computer system 900 may be used to provide information for display via network 930. Computer system 900 includes one or more processors 920 communicatively coupled to a memory 925, one or more communication interfaces 905 communicatively coupled to at least one network 930 (e.g., network 405), and one or more output devices 910 (e.g., one or more display units) and one or more input devices 915.
The processor 920 may include a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. The memory 925 may include any computer-readable storage medium and may store computer instructions such as processor-executable instructions for implementing various functionalities described herein for the respective system, as well as any data generated thereby or associated therewith received via a communication interface or input device (if present). The memory 925 may comprise a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a Read Only Memory (ROM), a Random Access Memory (RAM), an electrically erasable ROM (eeprom), an erasable programmable ROM (eprom), a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may include code from any suitable computer programming language.
The processor 920 shown in fig. 9 may be used to execute instructions stored in the memory 925 and, in so doing, may also read from and write to the memory various information processed and/or generated in accordance with the execution of the instructions. The processor 920 (collectively referred to herein as a processing unit), coupled with the memory 925, may be included in the application manager service 410. For example, the application manager service 410 may include a memory 925 as the database 515. The processor 920 (collectively referred to herein as processing units) coupled with the memory 925 may be included in the content provider 415. For example, the content provider 415 may include a memory 925 for storing the content item 725. The processor 920 (collectively referred to herein as a processing unit), coupled with the memory 925, may be included in the content publisher 420. For example, the content publisher 420 may include a memory 925 for storing the information resource 600. A processor 920 (collectively referred to herein as a processing unit), coupled with a memory 925, may be included in the content selection service 425. For example, the content selection service 425 may include a memory 925 as the history database 720. The processor 920 (collectively referred to herein as processing units), coupled with the memory 925, may be included in the client device 430. For example, the client device 430 may include a memory 925 as the browsing history 535 and the identifier cache 545.
The processor 920 of the computer system 900 may also be communicatively coupled to the communication interface 905 or made to control the communication interface 905 to transmit or receive various information according to the execution of instructions. For example, communication interface 905 may be coupled to a wired or wireless network, bus, or other communication means, and thus may allow computer system 900 to send information to and receive information from other devices (e.g., other computer systems). Although not explicitly shown in the systems of fig. 4-7 or 9, one or more communication interfaces facilitate the flow of information between components of the system 900. In some implementations, the communication interface can be configured (e.g., via various hardware or software components) to provide a website as an access portal for at least some aspects of computer system 900. Examples of communication interfaces 905 include user interfaces (e.g., applications 435, information resources 600, primary content 605, content slots 610, and content items 725) through which a user can communicate with other users of the system 400.
For example, an output device 910 of the computer system 900 shown in fig. 9 may be provided to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. An input device 915 may be provided, for example, to allow a user to manually adjust, select, enter data, or interact with the processor in any of a number of ways during execution of instructions. Additional information regarding general computer system architectures that may be used for the various systems discussed herein is further provided herein.
The network 930 may include computer networks such as the internet, local area networks, wide area networks, metropolitan area networks, or other local area networks, intranets, satellite networks, other computer networks such as voice or data mobile telephone communication networks, and combinations thereof. Network 930 may be any form of computer network that relays information between components of system 400, such as application manager service 410, content provider 415, content publisher 420, content selection service 425, and client device 430. For example, network 930 may include the internet and/or other types of data networks, such as a Local Area Network (LAN), a Wide Area Network (WAN), a cellular network, a satellite network, or other types of data networks. Network 930 may also include any number of computing devices (e.g., computers, servers, routers, network switches, etc.) configured to receive and/or transmit data within network 930. Network 930 may further include any number of hardwired and/or wireless connections. For example, the client device 430 may communicate wirelessly (e.g., via WiFi, cellular, radio, etc.) with a transceiver that is hardwired (e.g., via fiber optic cable, CAT5 cable, etc.) to other computing devices in the network 930.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied in tangible media, firmware, or hardware, including the structures disclosed in this specification and their equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more components of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. The program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage media may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can comprise a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage media may also be or be embodied in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.) that may include a processing module configured to integrate internet connectivity with more traditional television programming sources (e.g., via cable, satellite, wireless, or other signal reception). The smart television module may be physically incorporated into a television set or may comprise a separate device, such as a set-top box, a blu-ray or other digital media player, a game console, a hotel television system, and other companion devices. The smart television module may be configured to allow viewers to search for and find videos, movies, photos, and other content on the web, on local cable channels, on satellite television channels, or stored on a local hard disk. A set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television and an external signal source, tune the signal to content, and then display the content on a television screen or other display device. The smart television module may be configured to provide a home screen or top-level screen that includes icons for a plurality of different applications (such as Web browsers) and a plurality of streaming media services, connected cable or satellite media sources, other Web channels, and so forth. The smart television module may be further configured to provide an electronic program guide to the user. A companion application to the smart television module may operate on the mobile computing device to provide additional information to the user about available programming, to allow the user to control the smart television module, and so on. In some implementations, the features may be implemented on a laptop or other personal computer, smartphone, other mobile phone, palmtop, tablet, or other computing device. In some implementations, the features disclosed herein may be implemented on a wearable device or component (e.g., a smart watch) that may include a processing module configured to integrate internet connectivity (with another computing device or network 930).
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "data processing apparatus," "data processing system," "user device" or "computing device" encompass all types of apparatus, devices, and machines for processing data, including by way of example the aforementioned programmable processor, computer, system on a chip or system on multiple chips, or a combination of the aforementioned. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform execution environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game player, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example: semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse and a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with the user. For example, feedback provided to the user can include any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computing system, such as system 900 or system 400, may include clients and servers. For example, each of the application manager service 410, the content providers 415, the content publishers 420, and the content selection service 425 of the system 400 can include one or more servers in one or more data centers or server farms. A client (e.g., client device 430) and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received from the client device at the server.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
Where the system described herein collects personal information about a user, or can use personal information, the user may be provided with an opportunity to control whether programs or features can collect user information (e.g., information about the user's social network, social behavior or activity, profession, the user's preferences, or the user's current geographic location), or whether and/or how to receive content from a content server that is more relevant to the user. In addition, some data may be processed in one or more ways before it is stored or used, so that the personally identifiable information is deleted when the parameters are generated. For example, the identity of the user may be anonymized so that no personal identity information can be determined for the user, or the geographic location of the user (such as city, zip code, or state level) may be summarized where location information is obtained so that a specific location of the user cannot be determined. Thus, the user may control how information is collected about him or her and/or information used by the content server.
While this specification contains many specifics of particular embodiments, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the systems and methods described herein. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the present subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking or parallel processing may be utilized.
Claims (20)
1. A method of encoding an identifier for selecting content, comprising:
identifying a plurality of information resources accessed via a first application executing on a client device;
extracting features corresponding to at least a portion of the content of the information resource from each of the plurality of information resources;
applying a classification model to features extracted from the plurality of information resources to identify a set of categories into which to classify the first application;
determining that a category from the set of categories satisfies a threshold number of applications assigned to the category;
in response to determining that the category satisfies the threshold number, assign the first application to a category identifier corresponding to the category, the category identifier for the first application being the same as the category identifier for a second application;
receiving an information resource from a content publisher device for presentation via the first application, the information resource including primary content and a content slot available to receive content from a content selection service;
generating a request for content for the content slot of the information resource, the request for content including the category identifier for the first application; and
transmitting the request for content to the content selection service, the content selection service selecting a content item for insertion into the content slot of the information resource using the category identifiers for the first application and the second application.
2. The method of claim 1, further comprising: in response to receiving the information resource, selecting the category from the set of categories in accordance with an obfuscation policy that specifies a condition under which a corresponding category identifier is allowed to be included in a request for content associated with the content slot of the information resource.
3. The method of claim 1, further comprising:
in response to receiving a second information resource, selecting a second category identifier from the set of categories identified from applying the classification model, the second category identifier being different from the category assigned to the first application, in accordance with a obfuscation policy; and
generating, for a content slot of the second information resource, a second request for content that includes a second category identifier corresponding to the second category instead of the category identifier corresponding to the category.
4. The method of claim 1, further comprising:
in response to receiving the second information resource, determining, according to an obfuscation policy, to not include any category identifiers into a second request for content to insert into a content slot of the second information resource; and
in response to determining that no category identifier is included, transmitting the second request for content to the content selection service, the second request for content lacking any category identifier.
5. The method of claim 1, wherein determining that the category satisfies the threshold number further comprises: performing a threshold cryptographic protocol in cooperation with a class authorization service by using an encrypted class identifier generated using the class identifier corresponding to the class.
6. The method of claim 1, wherein determining that the category satisfies a threshold number further comprises: the class identifier is checked against a probabilistic data structure for the class identifier maintained by the class authorization service.
7. The method of claim 1, wherein transmitting the request for content further comprises: transmitting the request for content, the content selection service maintaining an aggregated browsing history for the first application and the second application using the category identifier.
8. The method of claim 1, wherein applying the classification model further comprises: applying the classification model to identify the set of classes from a plurality of classes that are within a proximity threshold of each other in a feature space defined by the classification model.
9. The method of claim 1, further comprising: generating a set of simplified feature vectors from the browsing history identified from the client device by using a dimension reduction process, the feature vectors being smaller in file size than the browsing history; and
wherein applying the classification model further comprises: applying the classification model to a simplified set of feature vectors generated from the browsing history.
10. The method of claim 1, wherein extracting the features further comprises: extracting the features from at least a portion of content of the information resource, the portion of content including at least one of: text data, visual data, or audio data.
11. A system for encoding an identifier for selecting content, comprising:
a first application executable on a client device having one or more processors, the first application configured to:
identifying a plurality of information resources accessed via a first application executing on the client device;
extracting features corresponding to at least a portion of the content of each of the plurality of information assets from the information asset;
applying a classification model to features extracted from the plurality of information resources to identify a set of categories into which to classify the first application;
determining that a category from the set of categories satisfies a threshold number of applications assigned to the category;
in response to determining that the category satisfies the threshold number, assign the first application to a category identifier corresponding to the category, the category identifier for the first application being the same as the category identifier for a second application;
receiving an information resource from a content publisher device for presentation via the first application, the information resource including primary content and a content slot available to receive content from a content selection service;
generating a request for content for the content slot of the information resource, the request for content including the category identifier for the first application; and
transmitting the request for content to the content selection service, the content selection service selecting a content item for insertion into the content slot of the information resource using the category identifiers for the first application and the second application.
12. The system of claim 11, wherein the first application is further configured to: in response to receiving the information resource, selecting the category from the set of categories in accordance with an obfuscation policy that specifies a condition under which a corresponding category identifier is allowed to be included in a request for content associated with the content slot of the information resource.
13. The system of claim 11, wherein the first application is further configured to:
in response to receiving a second information resource, selecting a second category identifier from the set of categories identified from applying the classification model, the second category identifier being different from the category assigned to the first application, in accordance with a obfuscation policy; and
generating, for a content slot of the second information resource, a second request for content that includes a second category identifier corresponding to the second category instead of the category identifier corresponding to the category.
14. The system of claim 11, wherein the first application is further configured to:
in response to receiving the second information resource, determining, according to an obfuscation policy, to not include any category identifiers into a second request for content to insert into a content slot of the second information resource; and
in response to determining that no category identifier is included, transmitting the second request for content to the content selection service, the second request for content lacking any category identifier.
15. The system of claim 11, wherein the first application is further configured to: determining that the category satisfies the threshold number by performing a threshold cryptographic protocol in cooperation with a category authorization service using an encrypted category identifier generated using the category identifier corresponding to the category.
16. The system of claim 11, wherein the first application is further configured to: determining that the category satisfies the threshold number by checking the category identifier against a probabilistic data structure for the category identifier maintained by the category authorization service.
17. The system of claim 11, wherein the first application is further configured to communicate the request for content, the content selection service maintaining an aggregated browsing history for the first application and the second application using the category identifier.
18. The system of claim 11, wherein the first application is further configured to apply the classification model to identify the set of classes from a plurality of classes that are within a proximity threshold of each other in a feature space defined by the classification model.
19. The system of claim 11, wherein the first application is further configured to:
generating a set of simplified feature vectors from the browsing history identified from the client device using a dimension reduction process, the feature vectors being smaller in file size than the browsing history; and
applying the classification model to a simplified set of feature vectors generated from the browsing history.
20. The system of claim 11, wherein the first application is further configured to extract the features from at least a portion of content of the information resource, the portion of content including at least one of: text data, visual data, or audio data.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN202211463304.2A CN115766253A (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
Applications Claiming Priority (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/535,912 | 2019-08-08 | ||
US16/535,912 US11194866B2 (en) | 2019-08-08 | 2019-08-08 | Low entropy browsing history for content quasi-personalization |
US201962887902P | 2019-08-16 | 2019-08-16 | |
US62/887,902 | 2019-08-16 | ||
US16/698,548 US11423441B2 (en) | 2019-08-08 | 2019-11-27 | Low entropy browsing history for ads quasi-personalization |
US16/698,548 | 2019-11-27 | ||
PCT/US2020/026020 WO2021025732A1 (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202211463304.2A Division CN115766253A (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
Publications (2)
Publication Number | Publication Date |
---|---|
CN113169982A true CN113169982A (en) | 2021-07-23 |
CN113169982B CN113169982B (en) | 2022-11-29 |
Family
ID=70471098
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202211463304.2A Pending CN115766253A (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
CN202080006300.4A Active CN113169982B (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202211463304.2A Pending CN115766253A (en) | 2019-08-08 | 2020-03-31 | Low entropy browsing history for content quasi-personalization |
Country Status (8)
Country | Link |
---|---|
US (1) | US11954705B2 (en) |
EP (1) | EP3868077A1 (en) |
JP (2) | JP7254923B2 (en) |
KR (1) | KR102502616B1 (en) |
CN (2) | CN115766253A (en) |
DE (1) | DE112020000136T5 (en) |
GB (1) | GB2593363A (en) |
WO (1) | WO2021025732A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220239733A1 (en) * | 2021-01-28 | 2022-07-28 | Intuit Inc. | Scalable request authorization |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP3868077A1 (en) | 2019-08-08 | 2021-08-25 | Google LLC | Low entropy browsing history for content quasi-personalization |
CN111475392B (en) * | 2020-04-08 | 2022-05-20 | 北京字节跳动网络技术有限公司 | Method, device, electronic equipment and computer readable medium for generating prediction information |
US11895178B2 (en) * | 2022-02-14 | 2024-02-06 | Adshield, Inc. | Method and device for providing obfuscated advertisement by couteracting on advertisement blocking function |
KR102598102B1 (en) * | 2022-02-14 | 2023-11-03 | 주식회사 애드쉴드 | Method and device for providing obfuscated advertisement by counteracting on advertisement blocking function |
EP4328779A1 (en) * | 2022-08-26 | 2024-02-28 | Siemens Healthineers AG | Structuring data for privacy risks assessments |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110270857A1 (en) * | 2010-04-30 | 2011-11-03 | International Business Machines Corporation | Method and System for Centralized Control of Database Applications |
EP2533168A1 (en) * | 2011-06-07 | 2012-12-12 | Research In Motion Limited | Method and devices for managing permission requests to allow access to computing resource |
US20120317638A1 (en) * | 2011-06-07 | 2012-12-13 | Research In Motion Limited | Method and devices for managing permission requests to allow access to a computing resource |
JP2013073524A (en) * | 2011-09-28 | 2013-04-22 | Ntt Docomo Inc | Application recommendation device, application recommendation method and application recommendation program |
CN103647800A (en) * | 2013-11-19 | 2014-03-19 | 乐视致新电子科技（天津）有限公司 | Method and system of recommending application resources |
WO2015131803A1 (en) * | 2014-03-06 | 2015-09-11 | Tencent Technology (Shenzhen) Company Limited | Application recommending method and system |
CN105608117A (en) * | 2015-12-14 | 2016-05-25 | 微梦创科网络科技（中国）有限公司 | Information recommendation method and apparatus |
US20160162924A1 (en) * | 2015-11-27 | 2016-06-09 | Yogesh Rathod | Track user activities and in exchange provide points to use for various activities including advertising contents to targeted users of network |
CN105991722A (en) * | 2015-02-12 | 2016-10-05 | 广东欧珀移动通信有限公司 | Downloader recommendation method, application server, terminal and system |
US20170046510A1 (en) * | 2015-08-14 | 2017-02-16 | Qualcomm Incorporated | Methods and Systems of Building Classifier Models in Computing Devices |
US20170262894A1 (en) * | 2016-03-11 | 2017-09-14 | Facebook, Inc. | Expanding targeting criteria for content items based on user characteristics and weights associated with users satisfying the targeting criteria |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6962940B2 (en) * | 2002-03-20 | 2005-11-08 | Celgene Corporation | (+)-2-[1-(3-Ethoxy-4-methoxyphenyl)-2-methylsulfonylethyl]-4-acetylaminoisoindoline-1,3-dione: methods of using and compositions thereof |
US8122360B2 (en) | 2007-06-27 | 2012-02-21 | Kosmix Corporation | Automatic selection of user-oriented web content |
US7779040B2 (en) * | 2007-09-27 | 2010-08-17 | Amazon Technologies, Inc. | System for detecting associations between items |
JP5242507B2 (en) | 2009-06-22 | 2013-07-24 | 日本電信電話株式会社 | Advertisement delivery system, advertisement delivery server, advertisement delivery method, and advertisement delivery program |
US20120203723A1 (en) | 2011-02-04 | 2012-08-09 | Telefonaktiebolaget Lm Ericsson (Publ) | Server System and Method for Network-Based Service Recommendation Enhancement |
US9519726B2 (en) * | 2011-06-16 | 2016-12-13 | Amit Kumar | Surfacing applications based on browsing activity |
US20170091303A1 (en) | 2015-09-24 | 2017-03-30 | Intel Corporation | Client-Side Web Usage Data Collection |
US11030651B2 (en) | 2016-05-06 | 2021-06-08 | Adp, Llc | Segmented user profiles |
US10496263B2 (en) | 2017-01-03 | 2019-12-03 | Jpmorgan Chase Bank, N.A. | De-anonymization of website visitor identity |
RU2757546C2 (en) * | 2017-07-25 | 2021-10-18 | Общество С Ограниченной Ответственностью "Яндекс" | Method and system for creating personalized user parameter of interest for identifying personalized target content element |
US20190122111A1 (en) * | 2017-10-24 | 2019-04-25 | Nec Laboratories America, Inc. | Adaptive Convolutional Neural Knowledge Graph Learning System Leveraging Entity Descriptions |
US11194866B2 (en) | 2019-08-08 | 2021-12-07 | Google Llc | Low entropy browsing history for content quasi-personalization |
EP3868077A1 (en) | 2019-08-08 | 2021-08-25 | Google LLC | Low entropy browsing history for content quasi-personalization |
-
2020
- 2020-03-31 EP EP20722410.6A patent/EP3868077A1/en active Pending
- 2020-03-31 CN CN202211463304.2A patent/CN115766253A/en active Pending
- 2020-03-31 JP JP2021527202A patent/JP7254923B2/en active Active
- 2020-03-31 CN CN202080006300.4A patent/CN113169982B/en active Active
- 2020-03-31 DE DE112020000136.9T patent/DE112020000136T5/en active Pending
- 2020-03-31 GB GB2107197.2A patent/GB2593363A/en active Pending
- 2020-03-31 KR KR1020217014523A patent/KR102502616B1/en active IP Right Grant
- 2020-03-31 WO PCT/US2020/026020 patent/WO2021025732A1/en unknown
-
2022
- 2022-08-22 US US17/892,699 patent/US11954705B2/en active Active
-
2023
- 2023-03-29 JP JP2023053848A patent/JP2023093490A/en active Pending
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110270857A1 (en) * | 2010-04-30 | 2011-11-03 | International Business Machines Corporation | Method and System for Centralized Control of Database Applications |
EP2533168A1 (en) * | 2011-06-07 | 2012-12-12 | Research In Motion Limited | Method and devices for managing permission requests to allow access to computing resource |
US20120317638A1 (en) * | 2011-06-07 | 2012-12-13 | Research In Motion Limited | Method and devices for managing permission requests to allow access to a computing resource |
JP2013073524A (en) * | 2011-09-28 | 2013-04-22 | Ntt Docomo Inc | Application recommendation device, application recommendation method and application recommendation program |
CN103647800A (en) * | 2013-11-19 | 2014-03-19 | 乐视致新电子科技（天津）有限公司 | Method and system of recommending application resources |
WO2015131803A1 (en) * | 2014-03-06 | 2015-09-11 | Tencent Technology (Shenzhen) Company Limited | Application recommending method and system |
CN105991722A (en) * | 2015-02-12 | 2016-10-05 | 广东欧珀移动通信有限公司 | Downloader recommendation method, application server, terminal and system |
US20170046510A1 (en) * | 2015-08-14 | 2017-02-16 | Qualcomm Incorporated | Methods and Systems of Building Classifier Models in Computing Devices |
US20160162924A1 (en) * | 2015-11-27 | 2016-06-09 | Yogesh Rathod | Track user activities and in exchange provide points to use for various activities including advertising contents to targeted users of network |
CN105608117A (en) * | 2015-12-14 | 2016-05-25 | 微梦创科网络科技（中国）有限公司 | Information recommendation method and apparatus |
US20170262894A1 (en) * | 2016-03-11 | 2017-09-14 | Facebook, Inc. | Expanding targeting criteria for content items based on user characteristics and weights associated with users satisfying the targeting criteria |
Non-Patent Citations (1)
Title |
---|
ERO BALSA: "OB-PWS: Obfuscation-Based PrivateWeb Search", 《IEEE》 * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220239733A1 (en) * | 2021-01-28 | 2022-07-28 | Intuit Inc. | Scalable request authorization |
Also Published As
Publication number | Publication date |
---|---|
JP2022542624A (en) | 2022-10-06 |
CN113169982B (en) | 2022-11-29 |
CN115766253A (en) | 2023-03-07 |
KR20210066009A (en) | 2021-06-04 |
US20230222542A9 (en) | 2023-07-13 |
WO2021025732A1 (en) | 2021-02-11 |
JP7254923B2 (en) | 2023-04-10 |
DE112020000136T5 (en) | 2021-07-29 |
GB202107197D0 (en) | 2021-06-30 |
GB2593363A (en) | 2021-09-22 |
KR102502616B1 (en) | 2023-02-23 |
US11954705B2 (en) | 2024-04-09 |
JP2023093490A (en) | 2023-07-04 |
EP3868077A1 (en) | 2021-08-25 |
US20220391947A1 (en) | 2022-12-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN113169982B (en) | Low entropy browsing history for content quasi-personalization | |
KR102564387B1 (en) | Low entropy browsing history for semi-personalization of content | |
KR20140006063A (en) | Privacy protection in recommendation services | |
US11423441B2 (en) | Low entropy browsing history for ads quasi-personalization | |
US20220311754A1 (en) | Generating bridge match identifiers for linking identifers from server logs | |
EP3971811A1 (en) | Privacy supporting messaging systems and methods | |
Harkous et al. | C3p: Context-aware crowdsourced cloud privacy | |
US11379604B2 (en) | Systems and methods for encryption of content request data | |
US20220374546A1 (en) | Privacy preserving data collection and analysis | |
CN113785307A (en) | System and method for security and privacy preserving device classification |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |