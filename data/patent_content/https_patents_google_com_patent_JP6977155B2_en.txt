JP6977155B2 - Controlling the triggering of function calls from content items - Google Patents
Controlling the triggering of function calls from content items Download PDFInfo
- Publication number
- JP6977155B2 JP6977155B2 JP2020519079A JP2020519079A JP6977155B2 JP 6977155 B2 JP6977155 B2 JP 6977155B2 JP 2020519079 A JP2020519079 A JP 2020519079A JP 2020519079 A JP2020519079 A JP 2020519079A JP 6977155 B2 JP6977155 B2 JP 6977155B2
- Authority
- JP
- Japan
- Prior art keywords
- event
- dialogue
- content item
- registration
- touch
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0487—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser
- G06F3/0488—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/547—Remote procedure calls [RPC]; Web services
Description
関連出願の相互参照
本出願は、その全体が参照により本明細書に組み込まれる、2018年3月28日に出願した米国特許出願第15/938,990号の利益および優先権を主張する。
Cross-reference to related applications This application claims the interests and priority of US Patent Application No. 15 / 938,990 filed March 28, 2018, which is incorporated herein by reference in its entirety.
インターネットなどのコンピュータネットワーク化された環境では、コンテンツプロバイダは、クライアントデバイス上で実行しているアプリケーション(たとえば、ウェブブラウザ)によって処理およびレンダリングされた情報リソース(たとえば、ウェブページ)に挿入されることになる、コンテンツアイテムを提供することができる。そのようなコンテンツアイテムおよび情報リソースとの対話は、クライアントデバイスに接続された入出力(I/O)デバイスを使用して行われ得る。 In computer-networked environments such as the Internet, content providers are inserted into information resources (eg, web pages) processed and rendered by applications running on client devices (eg, web browsers). It is possible to provide content items. Interactions with such content items and information resources can take place using input / output (I / O) devices connected to client devices.
少なくとも1つの態様は、コンテンツアイテム上で実施される対話を検証する方法を対象とする。1つまたは複数のプロセッサを有するデータ処理システムは、コンテンツアイテムの第1の部分のコードにおいて、対話検証スクリプトを挿入することができる。対話検証スクリプトは、コンテンツアイテムに起因する第1の対話イベントを検出することができる。第1の対話イベントは、コンテンツアイテムを提示するように構成されたアプリケーションによってスクリプトに渡され得、アプリケーションによる、コンテンツアイテムとの対話の検出に応答して情報リソース上にコンテンツアイテムが提示される。対話検証スクリプトは、コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別することができる。関数呼出しは、アプリケーションがコンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされ得る。第2の対話イベントは、コンテンツアイテムに起因し、コンテンツアイテムとの対話に応じて生成され得る。対話検証スクリプトは、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であると決定することができる。対話検証スクリプトは、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることができる。 At least one aspect is intended for a method of validating a dialogue performed on a content item. A data processing system with one or more processors can insert a dialogue validation script in the code of the first part of the content item. The dialogue validation script can detect the first dialogue event caused by the content item. The first dialogue event can be passed to the script by an application configured to present the content item, and the content item is presented on the information resource in response to the application's detection of a dialogue with the content item. The dialogue validation script can identify the registration of a function call to perform a predetermined action through the execution of the code in the second part of the content item. The function call can be triggered in response to the application passing a second dialogue event to the content item. The second dialogue event is due to the content item and can be generated in response to the dialogue with the content item. The dialogue validation script can determine that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold. The dialogue validation script is pre-determined by the application in response to the determination that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than the pre-determined threshold. Actions can be taken.
いくつかの実装形態では、対話検証スクリプトは、touch-startイベントおよびtouch-endイベントの後で、コンテンツアイテムに起因する第1のon-clickイベントを含む第1の対話イベントを検出することができる。第1のon-clickイベントは、コンテンツアイテムのon-clickイベントハンドラによって処理され得る。いくつかの実装形態では、対話検証スクリプトは、第1のon-clickイベントの後で、コンテンツアイテムに起因する第2のon-clickイベントを含む第2の対話イベントを検出することができる。第2のon-clickイベントは、コンテンツアイテムのon-clickイベントハンドラによって処理され得る。いくつかの実装形態では、対話検証スクリプトは、第2のon-clickイベントと第1のon-clickイベントとの間の時間が、あらかじめ決定されたしきい値未満であると決定することができる。 In some implementations, the dialogue validation script can detect the first dialogue event, including the first on-click event resulting from the content item, after the touch-start and touch-end events. .. The first on-click event can be processed by the content item's on-click event handler. In some implementations, the dialogue validation script can detect a second dialogue event, including a second on-click event resulting from a content item, after the first on-click event. The second on-click event can be processed by the content item's on-click event handler. In some implementations, the dialogue validation script can determine that the time between the second on-click event and the first on-click event is less than a predetermined threshold. ..
いくつかの実装形態では、対話検証スクリプトは、コンテンツアイテムに起因するtouch-endイベントを含む第2の対話イベントを検出することができる。touch-endイベントは、コンテンツアイテムのtouch-endイベントハンドラによって処理され得る。touch-endイベントのためのtouch-endイベントハンドラは、あらかじめ決定されたアクションを実施するための関数呼出しとともに構成され得る。いくつかの実装形態では、対話検証スクリプトは、touch-endイベントの検出に応答して、あらかじめ決定されたアクションを実行することなしに、あらかじめ決定されたアクションを実施するための関数呼出しを登録することができる。いくつかの実装形態では、対話検証スクリプトは、touch-endイベントの後で、コンテンツアイテムに起因するon-clickイベントを含む第1の対話イベントを検出することであって、on-clickイベントが、コンテンツアイテムのon-clickイベントハンドラによって処理される、検出することを行うことができる。 In some implementations, the dialogue validation script can detect a second dialogue event, including a touch-end event resulting from a content item. The touch-end event can be handled by the content item's touch-end event handler. A touch-end event handler for a touch-end event can be configured with a function call to perform a predetermined action. In some implementations, the dialogue validation script registers a function call to perform a predetermined action in response to the detection of a touch-end event, without performing a predetermined action. be able to. In some implementations, the dialogue validation script is to detect the first dialogue event, including the on-click event resulting from the content item, after the touch-end event. It can do things to detect, which is processed by the content item's on-click event handler.
いくつかの実装形態では、対話検証スクリプトは、第1の対話イベントの検出に応答して、第1の対話イベントの検出が、関数呼出しの登録に先行すると決定することができる。いくつかの実装形態では、対話検証スクリプトは、第1の対話イベントの検出が、関数呼出しの登録に先行するとの決定に基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、対話検証スクリプトは、第1の対話イベントに対応する第1のタイプの対話を処理するための第1のイベントハンドラを介して、コンテンツアイテムに起因する第1の対話イベントを検出することができる。いくつかの実装形態では、対話検証スクリプトは、第1のタイプの対話、および第2の対話イベントに対応する第2のタイプの対話のうちの少なくとも1つを処理するための、第2のイベントハンドラを介して、コンテンツアイテムに起因する第2の対話イベントを検出することができる。いくつかの実装形態では、対話検証スクリプトは、アプリケーションに、アプリケーションプログラムインターフェース(API)関数呼出しを介して、あらかじめ決定されたアクションを実施させることができる。 In some implementations, the dialogue validation script can determine in response to the detection of the first dialogue event that the detection of the first dialogue event precedes the registration of the function call. In some implementations, the dialogue validation script can set a predetermined threshold based on the determination that the detection of the first dialogue event precedes the registration of the function call. In some implementations, the dialogue validation script is a first dialogue event resulting from a content item via a first event handler to handle the first type of dialogue corresponding to the first dialogue event. Can be detected. In some implementations, the dialogue validation script is for handling at least one of the first type of dialogue, and the second type of dialogue that corresponds to the second type of dialogue event. A second dialogue event caused by the content item can be detected via the handler. In some implementations, the dialogue validation script allows an application to perform a predetermined action via an application program interface (API) function call.
いくつかの実装形態では、データ処理システムは、あらかじめ決定されたアクションを実施するための複数のあらかじめ決定されたイベントハンドラのうちの1つに一致する、コンテンツアイテムの第2の部分のコードにおける、第2の対話イベントを処理するためのイベントハンドラを識別することができる。イベントハンドラは、あらかじめ決定されたアクションを実施するようにあらかじめ構成され得る。いくつかの実装形態では、対話検証スクリプトを挿入することは、コンテンツアイテムの第1の部分のコードにおける、あらかじめ決定された複数のイベントハンドラに、イベントハンドラをアタッチすることを含み得る。第1の部分のコードは、第2の部分のコードの実行より前に、クライアント上でランしているアプリケーションによって実行され得る。 In some implementations, the data processing system matches one of several predetermined event handlers for performing a predetermined action, in the code of the second part of the content item. You can identify the event handler to handle the second dialogue event. Event handlers can be preconfigured to perform predetermined actions. In some implementations, inserting a dialogue validation script may include attaching an event handler to multiple predetermined event handlers in the code of the first part of the content item. The code in the first part can be executed by the application running on the client before the code in the second part is executed.
少なくとも1つの態様は、コンテンツアイテム上で実施される対話を検証するためのシステムを対象とする。システムは、コンテンツアイテムの第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行可能な、イベント検出器を含み得る。イベント検出器は、コンテンツアイテムに起因する第1の対話イベントを検出することができる。第1の対話イベントは、コンテンツアイテムを提示するように構成されたアプリケーションによってスクリプトに渡され得、アプリケーションによる、コンテンツアイテムとの対話の検出に応答して、情報リソース上にコンテンツアイテムが提示される。システムは、第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行可能な、登録ロガーを含み得る。登録ロガーは、コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別することができる。関数呼出しは、アプリケーションがコンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされるように構成され得る。第2の対話イベントは、コンテンツアイテムに起因し、コンテンツアイテムとの対話に応じて生成され得る。システムは、第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行可能な、関数アクティベータを含み得る。関数アクティベータは、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であると決定することができる。関数アクティベータは、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることができる。 At least one aspect is intended for a system for verifying dialogues performed on content items. The system may include an event detector, encoded in the code of the first part of the content item and running on one or more processors. The event detector can detect the first dialogue event caused by the content item. The first dialogue event can be passed to a script by an application configured to present a content item, and the content item is presented on an information resource in response to the application's detection of a dialogue with the content item. .. The system may include a registration logger encoded in the code of the first part and run on one or more processors. The registration logger can identify the registration of a function call to perform a predetermined action through the execution of the code in the second part of the content item. The function call can be configured to be triggered in response to the application passing a second dialogue event to the content item. The second dialogue event is due to the content item and can be generated in response to the dialogue with the content item. The system may include a function activator encoded in the code of the first part and running on one or more processors. The function activator can determine that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold. The function activator is pre-determined by the application in response to the determination that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold. Actions can be taken.
いくつかの実装形態では、イベント検出器は、touch-startイベントおよびtouch-endイベントの後で、コンテンツアイテムに起因する第1のon-clickイベントを含む第1の対話イベントを検出することができる。いくつかの実装形態では、イベント検出器は、第1のon-clickイベントの後で、コンテンツアイテムに起因する第2のon-clickイベントを含む第2の対話イベントを検出することができる。第2のon-clickイベントは、コンテンツアイテムのon-clickイベントハンドラによって処理され得る。第2のon-clickイベントのためのイベントハンドラは、あらかじめ決定されたアクションを実施するための関数呼出しとともに構成され得る。いくつかの実装形態では、登録ロガーは、コンテンツアイテムに起因する第2のon-clickイベントを含む第2の対話イベントの検出に応じて、関数呼出しの登録を識別することができる。 In some implementations, the event detector can detect a first dialogue event, including a first on-click event resulting from a content item, after the touch-start and touch-end events. .. In some implementations, the event detector can detect a second dialogue event, including a second on-click event resulting from a content item, after the first on-click event. The second on-click event can be processed by the content item's on-click event handler. The event handler for the second on-click event can be configured with a function call to perform a predetermined action. In some implementations, the registration logger can identify the registration of a function call in response to the detection of a second dialogue event, including a second on-click event resulting from a content item.
いくつかの実装形態では、イベント検出器は、touch-endイベントの後で、コンテンツアイテムに起因するon-clickイベントを含む第1の対話イベントを検出することができる。on-clickイベントは、コンテンツアイテムのon-clickイベントハンドラによって処理され得る。いくつかの実装形態では、イベント検出器は、コンテンツアイテムに起因するtouch-endイベントを含む第2の対話イベントを検出することができる。touch-endイベントは、コンテンツアイテムのtouch-endイベントハンドラによって処理され得る。touch-endイベントのためのtouch-endイベントハンドラは、あらかじめ決定されたアクションを実施するための関数呼出しとともに構成され得る。いくつかの実装形態では、登録ロガーは、touch-endイベントハンドラを含む第2の対話イベントの検出に応じて、関数呼出しの登録を識別することができる。 In some implementations, the event detector can detect a touch-end event followed by a first dialogue event, including an on-click event resulting from a content item. The on-click event can be processed by the content item's on-click event handler. In some implementations, the event detector can detect a second dialogue event, including a touch-end event resulting from a content item. The touch-end event can be handled by the content item's touch-end event handler. A touch-end event handler for a touch-end event can be configured with a function call to perform a predetermined action. In some implementations, the registration logger can identify the registration of a function call in response to the detection of a second dialogue event that includes a touch-end event handler.
いくつかの実装形態では、イベント検出器は、第1の対話イベントを、複数のアタッチされた対話イベントからの第2の対話イベントとペアにされるものとして識別することであって、複数のアタッチされた対話イベントが、on-clickイベントおよびtouch-endイベントのうちの少なくとも1つを含む、識別することを行うことができる。いくつかの実装形態では、関数アクティベータは、第1の対話イベントを第2の対話イベントとペアにされるものとする識別に応答して、第1の対話イベントの検出と、関連付けられた関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であると決定することができる。 In some embodiments, the event detector identifies the first dialogue event as being paired with a second dialogue event from multiple attached dialogue events, with multiple attachments. It is possible to identify the dialogue event that has been made, including at least one of the on-click event and the touch-end event. In some implementations, the function activator responds to the identification that the first dialogue event is to be paired with the second dialogue event, with the detection of the first dialogue event and the associated function. It can be determined that the time between the identification of the registration of the call is less than a predetermined threshold.
いくつかの実装形態では、関数アクティベータは、第1の対話イベントの検出が、関数呼出しの登録に先行すると決定することができる。いくつかの実装形態では、関数アクティベータは、第1の対話イベントの検出が、関数呼出しの登録に先行するとの決定に基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、関数アクティベータは、第2の対話イベントの検出の後で、時間があらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることができる。 In some implementations, the function activator can determine that the detection of the first dialogue event precedes the registration of the function call. In some implementations, the function activator can set a predetermined threshold based on the determination that the detection of the first dialogue event precedes the registration of the function call. In some implementations, the function activator takes a pre-determined action on the application in response to a determination that the time is less than a pre-determined threshold after the detection of the second dialogue event. Can be implemented.
いくつかの実装形態では、関数アクティベータは、第1の対話イベントの検出が、関数呼出しの登録に後続すると決定することができる。いくつかの実装形態では、関数アクティベータは、第1の対話イベントの検出が、関数呼出しの登録に後続するとの決定に基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、関数アクティベータは、第1の対話イベントの検出の後で、時間があらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることができる。いくつかの実装形態では、コンテンツアイテムの第1の部分のコードにおいて符号化された、イベント検出器、登録ロガー、および関数アクティベータのうちの少なくとも1つが、コンテンツアイテムの第2の部分のコードの実行より前に、アプリケーションによって実行可能であり得る。 In some implementations, the function activator can determine that the detection of the first dialogue event follows the registration of the function call. In some implementations, the function activator can set a predetermined threshold based on the determination that the detection of the first dialogue event follows the registration of the function call. In some implementations, the function activator takes a pre-determined action on the application in response to a determination that the time is less than a pre-determined threshold after the detection of the first dialogue event. Can be implemented. In some implementations, at least one of the event detector, registration logger, and function activator encoded in the code of the first part of the content item is the code of the second part of the content item. It may be feasible by the application prior to execution.
少なくとも1つの態様は、コンテンツアイテム上で実施される対話を検証する方法を対象とする。コンテンツアイテムの第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行している、対話検証器は、コンテンツアイテムに起因する第1の対話イベントを検出することができる。第1の対話イベントは、コンテンツアイテムを提示するように構成されたアプリケーションによってスクリプトに渡され得、アプリケーションによる、コンテンツアイテムとの対話の検出に応答して、情報リソース上にコンテンツアイテムが提示される。対話検証器は、コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別することができる。関数呼出しは、アプリケーションがコンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされるように構成され得る。第2の対話イベントは、コンテンツアイテムに起因し、コンテンツアイテムとの対話に応じて生成され得る。対話検証器は、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であると決定することができる。対話検証器は、第1の対話イベントの検出と、関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることができる。 At least one aspect is intended for a method of validating a dialogue performed on a content item. Encoded in the code of the first part of the content item and running on one or more processors, the dialogue verifier can detect the first dialogue event resulting from the content item. The first dialogue event can be passed to a script by an application configured to present a content item, and the content item is presented on an information resource in response to the application's detection of a dialogue with the content item. .. The dialogue verifier can identify the registration of a function call to perform a predetermined action through the execution of the code in the second part of the content item. The function call can be configured to be triggered in response to the application passing a second dialogue event to the content item. The second dialogue event is due to the content item and can be generated in response to the dialogue with the content item. The dialogue verifier can determine that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold. The dialogue verifier is pre-determined by the application in response to the determination that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold. Actions can be taken.
いくつかの実装形態では、第1の対話イベントを検出することは、touch-startイベントおよびtouch-endイベントの後で、コンテンツアイテムに起因する第1のon-clickイベントを含む第1の対話イベントを検出することを含み得る。いくつかの実装形態では、対話検証器は、第1のon-clickイベントの後で、コンテンツアイテムに起因する第2のon-clickイベントを含む第2の対話イベントを検出することができる。第2のon-clickイベントは、コンテンツアイテムのon-clickイベントハンドラによって処理され得、第2のon-clickイベントのためのイベントハンドラが、あらかじめ決定されたアクションを実施するための関数呼出しとともに構成される。いくつかの実装形態では、関数呼出しの登録を識別することは、コンテンツアイテムに起因する第2のon-clickイベントを含む第2の対話イベントの検出に応じて、関数呼出しの登録を識別することを含み得る。 In some implementations, detecting the first dialogue event is a first dialogue event that includes a first on-click event resulting from a content item after the touch-start and touch-end events. May include detecting. In some implementations, the dialogue verifier can detect a second dialogue event, including a second on-click event resulting from a content item, after the first on-click event. The second on-click event can be processed by the content item's on-click event handler, and the event handler for the second on-click event is configured with a function call to perform a predetermined action. Will be done. In some implementations, identifying a function call registration identifies a function call registration in response to the detection of a second dialogue event, including a second on-click event resulting from a content item. May include.
いくつかの実装形態では、第1の対話イベントを検出することは、touch-endイベントの後で、コンテンツアイテムに起因するon-clickイベントを含む第1の対話イベントを検出することであって、on-clickイベントが、コンテンツアイテムのon-clickイベントハンドラによって処理される、検出することを含み得る。いくつかの実装形態では、対話検証器は、コンテンツアイテムに起因するtouch-endイベントを含む第2の対話イベントを検出することができる。touch-endイベントは、コンテンツアイテムのtouch-endイベントハンドラによって処理され得る。touch-endイベントのためのtouch-endイベントハンドラは、あらかじめ決定されたアクションを実施するための関数呼出しとともに構成され得る。いくつかの実装形態では、関数呼出しの登録を識別することは、touch-endイベントハンドラを含む第2の対話イベントの検出に応じて、関数呼出しの登録を識別することを含み得る。 In some implementations, detecting the first dialogue event is to detect the first dialogue event, including the on-click event resulting from the content item, after the touch-end event. The on-click event may include detecting, being processed by the content item's on-click event handler. In some implementations, the dialogue verifier can detect a second dialogue event, including a touch-end event resulting from a content item. The touch-end event can be handled by the content item's touch-end event handler. A touch-end event handler for a touch-end event can be configured with a function call to perform a predetermined action. In some implementations, identifying a function call registration may include identifying a function call registration in response to the detection of a second dialogue event that includes a touch-end event handler.
いくつかの実装形態では、対話検証器は、第1の対話イベントを、複数のアタッチされた対話イベントからの第2の対話イベントとペアにされるものとして識別することであって、複数のアタッチされた対話イベントが、on-clickイベントおよびtouch-endイベントのうちの少なくとも1つを含む、識別することを行うことができる。いくつかの実装形態では、時間があらかじめ決定されたしきい値未満であると決定することが、第1の対話イベントを第2の対話イベントとペアにされるものとする識別に応答して、第1の対話イベントの検出と、関連付けられた関数呼出しの登録の識別との間の時間が、あらかじめ決定されたしきい値未満であると決定することを含み得る。 In some embodiments, the dialogue verifier identifies the first dialogue event as being paired with a second dialogue event from multiple attached dialogue events, with multiple attachments. It is possible to identify the dialogue event that has been made, including at least one of the on-click event and the touch-end event. In some implementations, determining that the time is less than a predetermined threshold responds to the identification that the first dialogue event is to be paired with the second dialogue event. It may include determining that the time between the detection of the first dialogue event and the identification of the registration of the associated function call is less than a predetermined threshold.
いくつかの実装形態では、対話検証器は、第1の対話イベントの検出が、関数呼出しの登録に先行すると決定することができる。いくつかの実装形態では、対話検証器は、第1の対話イベントの検出が、関数呼出しの登録に先行するとの決定に基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、アプリケーションにあらかじめ決定されたアクションを実施させることは、第2の対話イベントの検出の後で、時間があらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることを含み得る。 In some implementations, the dialogue verifier can determine that the detection of the first dialogue event precedes the registration of the function call. In some implementations, the dialogue verifier can set a predetermined threshold based on the determination that the detection of the first dialogue event precedes the registration of the function call. In some implementations, having the application perform a predetermined action depends on the determination that the time is less than the predetermined threshold after the detection of the second dialogue event. It may include having the application perform a predetermined action.
いくつかの実装形態では、対話検証器は、第1の対話イベントの検出が、関数呼出しの登録に後続すると決定することができる。いくつかの実装形態では、対話検証器は、第1の対話イベントの検出が、関数呼出しの登録に後続するとの決定に基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、アプリケーションにあらかじめ決定されたアクションを実施させることは、第1の対話イベントの検出の後で、時間があらかじめ決定されたしきい値未満であるとの決定に応じて、アプリケーションにあらかじめ決定されたアクションを実施させることを含み得る。 In some implementations, the dialogue verifier can determine that the detection of the first dialogue event follows the registration of the function call. In some implementations, the dialogue verifier can set a predetermined threshold based on the determination that the detection of the first dialogue event follows the registration of the function call. In some implementations, having the application perform a predetermined action depends on the determination that the time is less than the predetermined threshold after the detection of the first dialogue event. It may include having the application perform a predetermined action.
これらおよび他の態様および実装形態について、以下で詳細に説明する。上記の情報および以下の詳細な説明は、様々な態様および実装形態の例示的な例を含み、請求される態様および実装形態の本質および性質を理解するための概観またはフレームワークを提供する。図面は、様々な態様および実装形態の例示およびさらなる理解を提供し、本明細書に組み込まれ、本明細書の一部を構成する。 These and other embodiments and implementations will be described in detail below. The above information and the detailed description below include exemplary examples of various embodiments and implementations, and provide an overview or framework for understanding the nature and nature of the claimed embodiments and implementations. The drawings provide illustrations and further understanding of various aspects and embodiments, which are incorporated herein and constitute parts of this specification.
添付の図面は、一定の縮尺で描かれることを意図していない。様々な図面における同様の参照番号および指示は、同様の要素を示す。明快のために、あらゆる構成要素があらゆる図面においてラベルを付けられるとは限らないことがある。図面においては、以下の通りである。 The attached drawings are not intended to be drawn to a certain scale. Similar reference numbers and instructions in various drawings indicate similar elements. For clarity, not all components may be labeled in every drawing. In the drawing, it is as follows.
以下は、コンテンツアイテム上で実施される対話を検証する方法、装置、およびシステムに関する様々な概念、およびそれらの実装形態のより詳細な説明である。上記で紹介し、以下でより詳細に説明する様々な概念は、多数の方法のいずれかにおいて実装され得、その理由は、説明する概念が、実装形態のいかなる特定の様式にも限定されないからである。 The following is a more detailed description of various concepts about methods, devices, and systems, and their implementations, of how to validate the dialogues performed on content items. The various concepts introduced above and described in more detail below can be implemented in any of a number of ways, because the concepts described are not limited to any particular mode of implementation. be.
コンテンツアイテムは、情報リソース(たとえば、ウェブページ)のコンテンツスロット(たとえば、インラインフレーム要素)に挿入され得、クライアントデバイス上で実行しているアプリケーション(たとえば、ウェブブラウザ)によって読み取られることになる実行可能コードを含み得る。コンテンツアイテムの実行可能コードは、特に、カスケーディングスタイルシート(CSS)およびJavaScript(商標)を伴う、ハイパーテキストマークアップ言語(HTML)(たとえば、HTML5)の形態であり得る。実行可能コードは、アプリケーションを介して、デバイスに接続された入出力(I/O)デバイスから渡された、様々な対話イベントに応答するために、様々なイベントハンドラ(イベントリスナーと呼ばれることがある)を含み得る。各イベントハンドラは、特定のタイプの対話イベントに対応し得、対話イベントに異なるように応答するように構成され得る。いくつかのイベントハンドラは、対応する対話イベントに応じて、特定の関数(たとえば、別の情報リソースにナビゲートするためのアプリケーションプログラミングインターフェース(API)関数)をトリガするように構成され得る。他のイベントハンドラは、それぞれの対話イベントに応じて、いかなるアクションも実施しないように構成され得る。 Content items can be inserted into content slots (eg, inline frame elements) of information resources (eg, web pages) and can be read by an application (eg, web browser) running on a client device. May include code. The executable code for a content item can be in the form of a hypertext markup language (HTML) (eg HTML5), with in particular cascading style sheets (CSS) and JavaScript ™. Executable code is sometimes referred to as various event handlers (event listeners) to respond to various interactive events passed by an input / output (I / O) device connected to the device through an application. ) Can be included. Each event handler may correspond to a particular type of dialogue event and may be configured to respond differently to the dialogue event. Some event handlers may be configured to trigger a particular function (for example, an application programming interface (API) function for navigating to another information resource) depending on the corresponding dialogue event. Other event handlers may be configured to take no action in response to their respective dialogue events.
異なるコンテンツアイテムにわたって一貫性のないイベントハンドラの構成によって、それぞれのイベントハンドラのために構成された関数呼出しのトリガリングのタイミングにおいてなど、挙動における不一致が生じ得る。この問題は、ユーザによるI/Oデバイスとの単一の物理的対話に応じて、複数のイベントハンドラが呼び出されるとき、悪化し得る。たとえば、モバイルスマートフォンのタッチスクリーン上のユーザによる単一のタッチによって、touch-startイベントハンドラ、touch-endイベントハンドラ、scrollイベントハンドラ、およびon-clickイベントハンドラの呼出しが生じ得る。いくつかのコンテンツアイテムは、touch-endイベントハンドラに応じて、関数呼出しをトリガするように構成され得るのに対して、他のコンテンツアイテムは、on-clickイベントハンドラに応じて、関数呼出しをトリガするように構成され得る。単一の物理的対話に応じてすべてが呼び出され得る、これらのイベントハンドラの構成における変動は、エンドユーザの観点からすれば、不要な対話、または不注意による対話につながり得る。さらに、そのような対話は、エンドユーザによって期待された時間に対して早すぎるかまたは遅れた関数呼出しのトリガリングにつながり得る。したがって、コンテンツアイテムの挙動および機能における非整合が、コンテンツアイテムおよび情報リソースとの人間とコンピュータの対話(HCI)の品質の低下において、結果として起こり得る。加えて、生じる関数呼出しは、コンピュータ処理リソースの浪費、ネットワーク帯域幅の過剰な消費、および不要な電力の利用につながり得る。不注意による関数呼出しのそのような悪影響は、エンドユーザがクライアントデバイス上で対話より前の情報リソースの以前の状態を訂正し、取り出すための手段を講じるとき、悪化し得る。 Inconsistent configuration of event handlers across different content items can lead to behavioral discrepancies, such as in the timing of triggering function calls configured for each event handler. This problem can be exacerbated when multiple event handlers are called in response to a single physical interaction with the I / O device by the user. For example, a single touch by a user on the touch screen of a mobile smartphone can result in calls to the touch-start event handler, touch-end event handler, scroll event handler, and on-click event handler. Some content items can be configured to trigger a function call depending on the touch-end event handler, while other content items can trigger a function call depending on the on-click event handler. Can be configured to. Variations in the configuration of these event handlers, all of which can be called in response to a single physical dialogue, can lead to unwanted or inadvertent dialogues from the end user's perspective. Moreover, such dialogue can lead to triggering function calls that are too early or too late for the time expected by the end user. Therefore, inconsistencies in the behavior and functionality of content items can result in poor quality human-computer interaction (HCI) with content items and information resources. In addition, the resulting function calls can lead to wasted computer processing resources, excessive consumption of network bandwidth, and use of unnecessary power. Such adverse effects of inadvertent function calls can be exacerbated when the end user takes steps to correct and retrieve the previous state of the pre-dialogue information resource on the client device.
コンテンツアイテムの期待された挙動からの逸脱に対処するための既存の手法は、コンテンツアイテムの他の機能における低下または停止を生じ得る。ある既存の技法は、コンテンツアイテムのイベントハンドラからトリガされることが可能にされる関数呼出しのセットを制限することであり得る。この手法の下では、コンテンツアイテムのイベントハンドラからの各関数呼出しが、許可されたパラメータを伴う特定のコンテキストにおいて使用されることを検証するために、関数呼出しが確認され得る。しかしながら、このような関数呼出しの確認は、困難であることがあり、コンテンツアイテムの他の機能に対する著しい遅延を生じ得る。別の既存の技法は、最初にプログラムされたイベントハンドラを新しいイベントハンドラに置換することであり得る。この手法では、新しいイベントハンドラが、対応する対話イベントの検出に応じて、指定された関数呼出しをトリガするように構成され得る。しかしながら、最初にプログラムされたイベントハンドラを置き換えることは、特に、最初にプログラムされたイベントハンドラとともに呼び出されることになっていた関数呼出しが考慮されないとき、誤りを起こしやすくなることがあり、予期しない結果につながることがある。 Existing techniques for dealing with deviations from the expected behavior of a content item can result in degradation or outages in other features of the content item. One existing technique could be to limit the set of function calls that can be triggered from the content item's event handler. Under this technique, function calls can be verified to verify that each function call from the content item's event handler is used in a particular context with the allowed parameters. However, confirming such a function call can be difficult and can result in significant delays to other features of the content item. Another existing technique could be to replace the initially programmed event handler with a new event handler. In this technique, a new event handler can be configured to trigger a specified function call in response to the detection of a corresponding dialogue event. However, replacing the first programmed event handler can be error-prone, especially when the function call that was supposed to be called with the first programmed event handler is not taken into account, which can lead to unpredictable results. May lead to.
これらおよび他の技術的課題に対処するため、情報リソース上でサービスされることになる各コンテンツアイテムは、コンテンツアイテムのイベントハンドラからの予期しない関数呼出しのトリガリングを防止するために、対話検証スクリプトを含むように修正され得る。アプリケーションが、イベントハンドラなどの後続の実行可能コードより前にスクリプトを実行するように、対話検証スクリプトは、コンテンツアイテムのための実行可能コードの上部分に挿入され得る。クライアントデバイス上のアプリケーションによる実行時に、対話検証スクリプトは、アプリケーションに、指定されたイベントハンドラのための対話イベントの検出と、指定された関数の登録とを待機させることができる。対話検証スクリプトは、アプリケーションに、検出および登録のタイミングに基づいて、指定された関数のトリガリングを修正させることができる。対話検証スクリプトは、アプリケーションに、指定されたイベントハンドラのためのコンテンツに起因する対話イベントを検出させることができる。イベントハンドラは、指定された関数とともに構成され得る。イベントハンドラは、指定された関数なしで構成され得、あらかじめ指定されたイベントハンドラのセットのうちの1つであり得る。対話イベントの検出は、関数の登録より前、または関数の登録の後で発生し得る。 To address these and other technical challenges, each content item that will be serviced on an information resource has a dialogue validation script to prevent unexpected function call triggering from the content item's event handler. Can be modified to include. Dialog verification scripts can be inserted above the executable code for content items, just as an application executes the script before subsequent executable code such as event handlers. When run by an application on a client device, the dialogue validation script can cause the application to wait for the dialog event to be detected for the specified event handler and for the specified function to be registered. The dialogue verification script can cause the application to modify the triggering of the specified function based on the timing of detection and registration. Dialog verification scripts can cause an application to detect dialogue events that result from content for a given event handler. Event handlers can be configured with the specified function. An event handler can be configured without a specified function and can be one of a pre-specified set of event handlers. Detection of dialogue events can occur prior to function registration or after function registration.
指定されたイベントハンドラのためのコンテンツアイテムに起因する対話イベントが最初に発生するとき、対話検証スクリプトは、アプリケーションに、あらかじめ決定された時間制限の間、特定の関数の登録を待機させることができる。関数呼出しの登録が、あらかじめ決定された時間制限内に発生しない場合、対話検証スクリプトは、アプリケーションに、検出されたイベントを無視させることができる。一方、関数の登録が、あらかじめ決定された時間制限内に発生する場合、対話検証スクリプトは、アプリケーションに、登録された関数が遂行および実行されることを可能にさせることができる。逆に、指定されたイベントハンドラのための対話イベントが、指定された関数の登録の後で発生するとき、対話検証スクリプトは、アプリケーションに、検出および登録があらかじめ決定された時間制限内に発生したか否かを決定させることができる。検出および登録が、あらかじめ決定された時間制限内に発生すると決定される場合、対話検証スクリプトは、登録された関数が遂行および実行されることを可能にすることができる。一方、検出および登録が、あらかじめ決定された時間制限外で発生すると決定される場合、対話検証スクリプトは、アプリケーションに、対話イベントの検出を無視させ、登録された関数の実行を防止させることができる。このようにして、コンテンツアイテムは、異なるように挙動することができ、ユーザが期待したときとは異なる、早すぎるかまたは遅れた応答のトリガリングが防止され、それによって、コンテンツアイテムおよび下にある情報リソースとの対話の品質が向上し得る。 When a dialogue event resulting from a content item for a given event handler first occurs, the dialogue validation script can cause the application to wait for the registration of a particular function for a predetermined time limit. .. If the registration of the function call does not occur within a predetermined time limit, the dialogue validation script can force the application to ignore the detected event. On the other hand, if the registration of the function occurs within a predetermined time limit, the dialogue verification script can allow the application to perform and execute the registered function. Conversely, when a dialogue event for the specified event handler occurs after registration of the specified function, the dialogue validation script has occurred to the application within a predetermined time limit for detection and registration. You can let them decide whether or not. If it is determined that the detection and registration will occur within a predetermined time limit, the dialogue verification script can allow the registered function to be performed and executed. On the other hand, if it is determined that the detection and registration will occur outside the predetermined time limit, the dialogue validation script can cause the application to ignore the detection of the dialogue event and prevent the registered function from executing. .. In this way, the content item can behave differently, preventing triggering of premature or late responses that are different from what the user expected, thereby being on the content item and underneath. The quality of dialogue with information resources can be improved.
次に図1を参照すると、図1は、コンテンツアイテム上で実施される対話を検証するためのコンピュータネットワーク化された環境100の一実装形態を示すブロック図である。環境100は、少なくとも1つのデータ処理システム110を含む。1つのデータ処理システム110のみが図示されているが、多数の実装形態では、データ処理システム110は、複数のデータ処理システムまたはコンピューティングデバイスのファーム、クラウド、クラスタ、または他のグループ化であり得る。データ処理システム110は、処理回路と呼ばれることがある、少なくとも1つのプロセッサとメモリとを含み得、その各々について、図6に関して以下でより詳細に説明する。メモリは、プロセッサによって実行されると、本明細書で説明する動作のうちの1つまたは複数をプロセッサに実施させる、プロセッサ実行可能命令を記憶する。プロセッサは、マイクロプロセッサ、特定用途向け集積回路(ASIC)、フィールドプログラマブルゲートアレイ(FPGA)など、またはそれらの組合せを含み得る。メモリは、限定はしないが、プロセッサにプログラム命令を提供することが可能な、電子、光学、磁気、または任意の他の記憶もしくは送信デバイスを含み得る。メモリは、フロッピーディスク、CD-ROM、DVD、磁気ディスク、メモリチップ、ASIC、FPGA、読取り専用メモリ(ROM)、ランダムアクセスメモリ(RAM)、電気的消去可能ROM(EEPROM)、消去可能プログラマブルROM(EPROM)、フラッシュメモリ、光メディア、または、それからプロセッサが命令を読み取ることができる任意の他の好適なメモリをさらに含み得る。命令は、任意の好適なコンピュータプログラミング言語からのコードを含み得る。
Next, referring to FIG. 1, FIG. 1 is a block diagram showing an implementation of a computer-
ネットワーク105は、インターネットなどのコンピュータネットワーク、ローカルエリアネットワーク、ワイドエリアネットワーク、メトロエリアネットワーク、または他のエリアネットワーク、イントラネット、衛星ネットワーク、音声もしくはデータモバイルフォン通信ネットワークなどの他のコンピュータネットワーク、およびそれらの組合せを含み得る。システム100のデータ処理システム110は、少なくとも1つのコンテンツプロバイダ115、少なくとも1つのコンテンツパブリッシャ120、少なくとも1つのクライアントデバイス125などと、ネットワーク105を介して通信することができる。ネットワーク105は、クライアントデバイス125と、データ処理システム110と、コンテンツプロバイダ115またはコンテンツパブリッシャ120など、1つまたは複数のコンテンツソースとの間で情報を中継する、任意の形態のコンピュータネットワークであり得る。たとえば、ネットワーク105は、インターネット、および/またはローカルエリアネットワーク(LAN)、ワイドエリアネットワーク(WAN)、セルラーネットワーク、衛星ネットワーク、もしくは他のタイプのデータネットワークなど、他のタイプのデータネットワークを含み得る。ネットワーク105はまた、ネットワーク105内でデータを受信および/または送信するように構成される、任意の数のコンピューティングデバイス(たとえば、コンピュータ、サーバ、ルータ、ネットワークスイッチなど)を含み得る。ネットワーク105は、任意の数のハードワイヤードおよび/またはワイヤレス接続をさらに含み得る。クライアントデバイス125は、ネットワーク105における他のコンピューティングデバイスに(たとえば、光ファイバーケーブル、CAT5ケーブルなどを介して)ハードワイヤードされているトランシーバと、(たとえば、WiFi、セルラー、無線などを介して)ワイヤレス通信し得る。
コンテンツプロバイダ115は、クライアントデバイス125において情報リソース上で表示するためのコンテンツアイテム155を提供するために、コンテンツプロバイダエンティティによって動作させられるサーバまたは他のコンピューティングデバイスを含み得る。コンテンツプロバイダ115によって提供されるコンテンツは、任意の好都合な形態をとることができる。たとえば、サードパーティコンテンツは、他の表示されたコンテンツに関連するコンテンツを含み得、たとえば、表示されたコンテンツに関連するウェブサイトのページであり得る。コンテンツは、コンテンツパブリッシャ120によって提供された1次コンテンツを含む、情報リソース150などの情報リソース上で表示するための、サードパーティコンテンツアイテムまたはクリエイティブ(たとえば、広告)を含み得る。コンテンツアイテム155はまた、検索結果ウェブページ上で表示され得る。たとえば、コンテンツプロバイダ115は、ウェブページの1次コンテンツが会社によって提供される、会社のウェブページなど、情報リソース150のコンテンツスロット(たとえば、インラインフレーム要素)において表示するための、または検索エンジンによって提供された検索結果ランディングページ上で表示するための、コンテンツアイテム155のソースを提供し得るか、またはそのソースであり得る。コンテンツプロバイダ115に関連付けられたコンテンツアイテム155は、スマートフォンまたは他のクライアントデバイス125上のアプリケーションの実行の一部として表示されるコンテンツなど、ウェブページ以外の情報リソース150上で表示され得る。 The content provider 115 may include a server or other computing device operated by the content provider entity to provide the content item 155 for display on the information resource on the client device 125. The content provided by content provider 115 can take any convenient form. For example, third-party content may include content related to other displayed content, for example, a page of a website related to the displayed content. Content may include third-party content items or creatives (eg, advertisements) for display on information resources such as Information Resource 150, including primary content provided by Content Publisher 120. Content item 155 may also be displayed on the search results web page. For example, content provider 115 may display the primary content of a web page in a content slot (eg, an inline frame element) of information resource 150, such as a company's web page, or by a search engine. Can provide, or can be, the source of content item 155 for display on the searched search results landing page. Content item 155 associated with content provider 115 may be displayed on information resources 150 other than web pages, such as content that is displayed as part of running an application on a smartphone or other client device 125.
コンテンツパブリッシャ120は、ネットワーク105を介して表示するための1次コンテンツを含む情報リソース150を提供するために、コンテンツ発行エンティティによって動作させられるサーバまたは他のコンピューティングデバイスを含み得る。たとえば、コンテンツパブリッシャ120は、情報リソース150上で表示するための1次コンテンツを提供する、ウェブページオペレータを含み得る。情報リソース150は、コンテンツパブリッシャ120によって提供されるもの以外のコンテンツを含み得、情報リソース150は、コンテンツプロバイダ115からのコンテンツアイテム155の表示のために構成されたコンテンツスロットを含み得る。たとえば、コンテンツパブリッシャ120は、会社のウェブサイトを動作させることができ、ウェブサイトのウェブページ上で表示するための、その会社についてのコンテンツを提供することができる。ウェブページは、コンテンツプロバイダ115によって、またはコンテンツパブリッシャ120自体によって提供されたコンテンツアイテム155の表示のために構成された、コンテンツスロットを含み得る。いくつかの実装形態では、コンテンツパブリッシャ120は、検索エンジンウェブサイトを動作させる検索エンジンオペレータの検索エンジンコンピューティングデバイス(たとえば、サーバ)を含む。検索エンジンウェブページ(たとえば、結果またはランディングウェブページ)の1次コンテンツは、検索の結果、ならびに、コンテンツプロバイダ115からのコンテンツアイテム155など、情報リソース150のコンテンツスロットにおいて表示されるサードパーティコンテンツアイテム155を含み得る。いくつかの実装形態では、コンテンツパブリッシャ120は、ビデオコンテンツを提供するための1つまたは複数のサーバを含み得る。
The content publisher 120 may include a server or other computing device operated by the content publishing entity to provide an information resource 150 containing primary content for display over the
クライアントデバイス125は、コンテンツパブリッシャ120によって提供されたコンテンツ(たとえば、情報リソース150)、およびコンテンツプロバイダ115によって提供されたコンテンツ(たとえば、情報リソース150のコンテンツスロットにおいて表示するためのコンテンツアイテム155)などのデータを表示するために、ネットワーク105を介して通信するように構成されたコンピューティングデバイスを含み得る。クライアントデバイス125、コンテンツプロバイダ115、およびコンテンツパブリッシャ120は、デスクトップコンピュータ、ラップトップコンピュータ、タブレットコンピュータ、スマートフォン、携帯情報端末、モバイルデバイス、コンシューマコンピューティングデバイス、サーバ、クライアント、デジタルビデオレコーダ、テレビジョン用のセットトップボックス、ビデオゲームコンソール、またはネットワーク105を介して通信するように構成された任意の他のコンピューティングデバイスを含み得る。クライアントデバイス125は、それを通してエンドユーザがコンテンツを受信するための要求を出すことができる、通信デバイスであり得る。要求は、検索エンジンに対する要求であり得、要求は、検索クエリを含み得る。いくつかの実装形態では、要求は、ウェブページにアクセスするための要求を含み得る。
The client device 125 includes content provided by content publisher 120 (eg, information resource 150) and content provided by content provider 115 (eg, content item 155 for display in the content slot of information resource 150). It may include computing devices configured to communicate over
コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125は、処理回路の一部として、プロセッサとメモリとを各々含み得る。メモリは、プロセッサによって実行されると、本明細書で説明する動作のうちの1つまたは複数をプロセッサに実施させる、マシン語命令を記憶する。プロセッサは、マイクロプロセッサ、特定用途向け集積回路(ASIC)、フィールドプログラマブルゲートアレイ(FPGA)など、またはそれらの組合せを含み得る。メモリは、限定はしないが、プロセッサにプログラム命令を提供することが可能な、電子、光学、磁気、または任意の他の記憶もしくは送信デバイスを含み得る。メモリは、フロッピーディスク、CD-ROM、DVD、磁気ディスク、メモリチップ、ASIC、FPGA、読取り専用メモリ(ROM)、ランダムアクセスメモリ(RAM)、電気的消去可能ROM(EEPROM)、消去可能プログラマブルROM(EPROM)、フラッシュメモリ、光メディア、または、それからプロセッサが命令を読み取ることができる任意の他の好適なメモリをさらに含み得る。命令は、任意の好適なコンピュータプログラミング言語からのコードを含み得る。 The content provider 115, the content publisher 120, and the client device 125 may each include a processor and memory as part of a processing circuit. The memory stores a machine language instruction that, when executed by the processor, causes the processor to perform one or more of the operations described herein. Processors can include microprocessors, application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), and the like, or a combination thereof. Memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. Memory includes floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random access memory (RAM), electrically erasable ROM (EEPROM), erasable programmable ROM (erasable programmable ROM). It may further include EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions. The instructions may include code from any suitable computer programming language.
コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125はまた、1つまたは複数のユーザインターフェースデバイスを各々含み得る。一般に、ユーザインターフェースデバイスは、感覚情報(たとえば、ディスプレイ上の視覚化、1つまたは複数のサウンドなど)を生成することによって、ユーザにデータを伝達し、かつ/またはユーザから受信された感覚情報を電子信号に変換する、任意の電子デバイス(たとえば、キーボード、マウス、ポインティングデバイス、タッチスクリーンディスプレイ、マイクロフォンなど)を指す。1つまたは複数のユーザインターフェースデバイスは、様々な実装形態によれば、コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125のハウジングの内部(たとえば、内蔵ディスプレイ、マイクロフォンなど)、またはコンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125のハウジングの外部(たとえば、クライアントデバイス125に接続されたモニタ、クライアントデバイス125に接続されたスピーカなど)にあり得る。たとえば、コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125は、1つもしくは複数のコンテンツソースから、および/またはネットワーク105を介して、データ処理システム110から受信されたウェブページデータを使用して、ウェブページを視覚的に表示する、電子ディスプレイを含み得る。いくつかの実装形態では、コンテンツプレースメントキャンペーンマネージャ、またはサードパーティコンテンツプロバイダは、コンテンツプロバイダ115を介して、データ処理システム110と通信することができる。いくつかの実装形態では、コンテンツプロバイダは、コンテンツプロバイダ115のユーザインターフェースデバイス上に表示されたユーザインターフェースを介して、データ処理システム110と通信することができる。
The content provider 115, the content publisher 120, and the client device 125 may also include one or more user interface devices, respectively. In general, a user interface device conveys data to and / or receives sensory information from a user by generating sensory information (eg, visualization on a display, one or more sounds, etc.). Refers to any electronic device that converts to an electronic signal (eg, keyboard, mouse, pointing device, touch screen display, microphone, etc.). One or more user interface devices may be inside the housing of Content Provider 115, Content Publisher 120, and Client Device 125 (eg, internal display, microphone, etc.), or Content Provider 115, Content, according to various implementations. It can be outside the housing of the publisher 120, and the client device 125 (for example, a monitor connected to the client device 125, a speaker connected to the client device 125, and so on). For example, content provider 115, content publisher 120, and client device 125 use web page data received from data processing system 110 from one or more content sources and / or over
クライアントデバイス125は、アプリケーション145を実行することができる。アプリケーション145は、たとえば、インターネットブラウザ、モバイルアプリケーション、あるいは、情報リソース150およびコンテンツアイテム155中に含まれたコンピュータ実行可能命令など、クライアントデバイス125によって処理されるコンピュータ実行可能命令を実行またはさもなければ呼び出すことが可能な、任意の他のコンピュータプログラムを含み得る。その中に含まれた情報リソース150は、スクリプト、論理、マークアップ、または命令(たとえば、ハイパーテキストマークアップ言語(HTML)、拡張可能ハイパーテキストマークアップ言語(XHTML)、拡張可能マークアップ言語(XML)、カスケーディングスタイルシート(CSS)、およびJavaScript、またはそれらの任意の組合せ)に対応し得る。情報リソース150は、ヘッダ162と本文164とを含み得る。コンテンツアイテム155は、情報リソース150に挿入され得る。 The client device 125 can execute the application 145. Application 145 executes or otherwise invokes computer-executable instructions processed by client device 125, such as an internet browser, mobile application, or computer-executable instructions contained within information resource 150 and content item 155. It may include any other computer program that is possible. The information resource 150 contained therein is a script, logic, markup, or instruction (eg, hypertext markup language (HTML), extensible hypertext markup language (XHTML), extensible markup language (XML). ), Cascading Style Sheets (CSS), and JavaScript, or any combination thereof). The information resource 150 may include a header 162 and a body 164. Content item 155 may be inserted into information resource 150.
情報リソース150のうちの1つをフェッチするために、クライアントデバイス125のアプリケーション145は、リソースの要求をコンテンツパブリッシャ120に送ることができる。要求は、データの中でも、情報リソース150のためのアドレス、デバイス識別子、デバイスタイプ、およびアプリケーションプロファイルを含み得る。アドレスは、ユニバーサルリソースロケータ(URL)であり得、パラメータの中でも、プロトコル、ホスト名、およびファイルパス名を含み得る。ホスト名は、コンテンツパブリッシャ120に対応し得る。ファイルパス名は、コンテンツパブリッシャ120によってホストされた情報リソース150のうちの1つに対応し得る。デバイス識別子は、クライアントデバイス125に対応し得る。デバイスタイプは、クライアントデバイス125のシステム構成に対応し得る。アプリケーションプロファイルは、情報リソース150を実行およびランさせるために、どのアプリケーション(たとえば、ウェブブラウザタイプおよびバージョンなど)がクライアントデバイス125上でランしているかを示し得る。要求が送られると、ネットワーク105は、ホスト名において識別されるコンテンツパブリッシャ120に、要求を転送し得る。
To fetch one of the information resources 150, application 145 on the client device 125 can send a request for the resource to the content publisher 120. The request may include, among the data, an address for information resource 150, a device identifier, a device type, and an application profile. The address can be a universal resource locator (URL) and can include a protocol, a host name, and a file path name among the parameters. The host name may correspond to the content publisher 120. The file path name may correspond to one of the information resources 150 hosted by the content publisher 120. The device identifier may correspond to the client device 125. The device type may correspond to the system configuration of the client device 125. The application profile may indicate which application (eg, web browser type and version) is running on the client device 125 to run and run the information resource 150. When the request is sent,
続いて、コンテンツパブリッシャ120は、アプリケーション145から要求を受信することができる。次に、コンテンツパブリッシャ120は、要求をパースして、クライアントデバイス125に提供するための情報リソース150を識別することができる。いくつかの実装形態では、コンテンツパブリッシャ120は、データベースにアクセスして、情報リソース150を取り出すことができる。データベースは、コンテンツパブリッシャ120の一部であるか、コンテンツパブリッシャ120と通信しているか、またはさもなければコンテンツパブリッシャ120によってアクセス可能であり得る。コンテンツパブリッシャ120は、要求中に含まれたホスト名およびファイルパス名に基づいて、提供するための情報リソース150を識別することができる。情報リソース150を識別すると、コンテンツパブリッシャ120は、クライアントデバイス125のアプリケーション145に、情報リソース150を送信するか、または送ることができる。いくつかの実装形態では、情報リソース150は、コンテンツプロバイダ115またはデータ処理システム110によって提供されたコンテンツアイテム155を挿入するための、1つまたは複数のコンテンツスロットを有し得る。いくつかの実装形態では、情報リソース150は、コンテンツパブリッシャ120からのコンテンツアイテム155とともに、1つまたは複数のコンテンツスロットを有し得る。いくつかの実装形態では、コンテンツアイテム155は、あらかじめ挿入され得るか、またはクライアントデバイス125上でランしているアプリケーション145に、情報リソース150とともに提供され得る。 Subsequently, the content publisher 120 can receive the request from the application 145. The content publisher 120 can then parse the request to identify the information resource 150 to provide to the client device 125. In some implementations, the content publisher 120 can access the database and retrieve the information resource 150. The database may be part of Content Publisher 120, communicate with Content Publisher 120, or be accessible by Content Publisher 120. Content publisher 120 can identify the information resource 150 to provide based on the host name and file path name included in the request. Once the information resource 150 is identified, the content publisher 120 can send or send the information resource 150 to the application 145 on the client device 125. In some implementations, the information resource 150 may have one or more content slots for inserting the content item 155 provided by the content provider 115 or the data processing system 110. In some implementations, the information resource 150 may have one or more content slots, along with a content item 155 from the content publisher 120. In some implementations, the content item 155 may be pre-inserted or provided with the information resource 150 to the application 145 running on the client device 125.
情報リソース150を処理するために、アプリケーション145は、ドキュメントツリージェネレータ、レンダリングツリージェネレータ、およびディスプレイモジュールなど、任意の数の構成要素を含み得る。情報リソース150を読み取る際に、ドキュメントツリージェネレータは、情報リソース150をパースして、階層的に配置された情報リソース150のドキュメントオブジェクトモデル(DOM)ツリーを生成することができる。DOMツリーを使用して、レンダリングツリージェネレータは、情報リソースのコンテンツアイテムの視覚的プロパティまたは属性を指定するレンダリングツリーを生成することができる。ディスプレイモジュールは、レンダリングツリーに基づいて、クライアントデバイス125のディスプレイ上に情報リソースをレンダリングおよび表示することができる。アプリケーション145はまた、情報リソース150のCSSおよびJavaScriptをパースすることもできる。 To process the information resource 150, the application 145 may include any number of components, such as a document tree generator, a rendering tree generator, and a display module. Upon reading the information resource 150, the document tree generator can parse the information resource 150 to generate a document object model (DOM) tree of the information resource 150 arranged hierarchically. Using the DOM tree, the rendering tree generator can generate a rendering tree that specifies the visual properties or attributes of the content item of the information resource. The display module can render and display information resources on the display of client device 125 based on the rendering tree. Application 145 can also parse CSS and JavaScript for information resource 150.
情報リソース150が処理される間、アプリケーション145は、情報リソース150のコンテンツスロットをパースすることができる。コンテンツスロットは、コンテンツアイテム155に対応するアドレスを含み得る。アドレスは、ユニバーサルリソースロケータ(URL)であり得、パラメータの中でも、プロトコル、ホスト名、およびファイルパス名を含み得る。ホスト名は、コンテンツプロバイダ115(たとえば、ファーストパーティコンテンツの場合)、コンテンツパブリッシャ120(たとえば、サードパーティコンテンツの場合)、またはデータ処理システム110に対応し得る。ファイルパス名は、コンテンツプロバイダ115、コンテンツパブリッシャ120、またはデータ処理システム110によって維持された、コンテンツアイテム155のうちの1つに対応し得る。いくつかの実装形態では、アプリケーション145は、情報リソース150に挿入するための追加のコンテンツを取り出すために、アドレスを使用して、コンテンツパブリッシャ120にアクセスすることができる。いくつかの実装形態では、アドレスは、コンテンツプロバイダ115に対するコンテンツの要求の生成において使用され得る。いくつかの実装形態では、アドレスは、コンテンツ選択プロセスにおいて、コンテンツアイテム155がデータ処理システム110によって選択されるためのプレースホルダーであり得る。コンテンツスロット中に含まれたアドレスを使用して、アプリケーション145は、情報リソース150に挿入するためのコンテンツの要求を生成することができる。要求は、データの中でも、コンテンツアイテム155のためのアドレス、デバイス識別子、デバイスタイプ、およびアプリケーションプロファイルを含み得る。デバイス識別子は、クライアントデバイス125に対応し得る。デバイスタイプは、クライアントデバイス125のシステム構成に対応し得る。アプリケーションプロファイルは、情報リソース150を実行およびランさせるために、どのアプリケーション(たとえば、ウェブブラウザタイプおよびバージョンなど)がクライアントデバイス125上でランしているかを示し得る。要求が送られると、ネットワーク105は、ホスト名において識別されるコンテンツプロバイダ115またはデータ処理システム110に、要求を転送し得る。
While the information resource 150 is processed, the application 145 can parse the content slot of the information resource 150. The content slot may contain the address corresponding to the content item 155. The address can be a universal resource locator (URL) and can include a protocol, a host name, and a file path name among the parameters. The host name may correspond to content provider 115 (for example, for first-party content), content publisher 120 (for example, for third-party content), or data processing system 110. The file path name may correspond to one of the content items 155 maintained by the content provider 115, the content publisher 120, or the data processing system 110. In some implementations, application 145 can use the address to access content publisher 120 to retrieve additional content for insertion into information resource 150. In some implementations, the address may be used in generating a content request to the content provider 115. In some implementations, the address can be a placeholder for the content item 155 to be selected by the data processing system 110 in the content selection process. The address contained in the content slot can be used by application 145 to generate a request for content to insert into information resource 150. The request may include, among the data, an address for content item 155, a device identifier, a device type, and an application profile. The device identifier may correspond to the client device 125. The device type may correspond to the system configuration of the client device 125. The application profile may indicate which application (eg, web browser type and version) is running on the client device 125 to run and run the information resource 150. When the request is sent,
続いて、コンテンツプロバイダ115またはデータ処理システム110は、アプリケーション145から、コンテンツの要求を受信することができる。次に、コンテンツプロバイダ115またはデータ処理システム110は、要求をパースして、クライアントデバイス125に提供するためのコンテンツアイテム155を識別することができる。コンテンツアイテム155を識別すると、コンテンツプロバイダ115またはデータ処理システム110は、情報リソース150に挿入するために、クライアントデバイス125のアプリケーション145に、コンテンツアイテム155を送信するか、または送ることができる。コンテンツアイテム155は、対話検証スクリプト160(対話検証器とも呼ばれる)を含み得る。対話検証スクリプト160の機能に関する詳細については、本明細書の以下で提供する。
Subsequently, the content provider 115 or the data processing system 110 can receive the content request from the application 145. The content provider 115 or the data processing system 110 can then parse the request to identify the content item 155 for delivery to the client device 125. Once the content item 155 is identified, the content provider 115 or the data processing system 110 can send or send the content item 155 to the application 145 on the client device 125 for insertion into the information resource 150. Content item 155 may include a dialogue validation script 160 (also known as a dialogue verifier). More details on the functionality of the
データ処理システム110は、少なくとも1つのサーバを含み得る。いくつかの実装形態では、データ処理システム110は、少なくとも1つのデータセンターまたはサーバファームに位置する、複数のサーバを含み得る。いくつかの実装形態では、データ処理システム110は、コンテンツプレースメントシステムを含む。データ処理システム110は、少なくとも1つのコンテンツアイテム評価器130と、少なくとも1つのスクリプト挿入器135と、少なくとも1つのデータベース140とを含み得る。コンテンツアイテム評価器130およびスクリプト挿入器135は、データベース140と、およびネットワーク105を介して他のコンピューティングデバイス(たとえば、コンテンツプロバイダ115、コンテンツパブリッシャ120、またはクライアントデバイス125)と通信するように構成された、少なくとも1つの処理ユニット、サーバ、仮想サーバ、回路、エンジン、エージェント、アプライアンス、またはプログラマブル論理アレイなどの他の論理デバイスを各々含み得る。
The data processing system 110 may include at least one server. In some implementations, the data processing system 110 may include multiple servers located in at least one data center or server farm. In some implementations, the data processing system 110 includes a content placement system. The data processing system 110 may include at least one content item evaluator 130, at least one
コンテンツアイテム評価器130およびスクリプト挿入器135は、データベース140と、およびネットワーク105を介して他のコンピューティングデバイス(たとえば、コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125)と通信するように構成された、少なくとも1つの処理ユニット、サーバ、仮想サーバ、回路、エンジン、エージェント、アプライアンス、またはプログラマブル論理アレイなどの他の論理デバイスを各々含み得る。コンテンツアイテム評価器130およびスクリプト挿入器135は、少なくとも1つのコンピュータプログラムまたは少なくとも1つのスクリプトを各々含むか、または実行することができる。コンテンツアイテム評価器130およびスクリプト挿入器135は、別個の構成要素、単一の構成要素、またはデータ処理システム110の一部であり得る。コンテンツアイテム評価器130およびスクリプト挿入器135は、1つまたは複数のスクリプトを実行するように構成された1つまたは複数のプロセッサなど、ソフトウェアおよびハードウェアの組合せを含み得る。
The content item evaluator 130 and
データ処理システム110はまた、1つまたは複数のコンテンツリポジトリまたはデータベース140を含み得る。データベース140は、データ処理システム110のローカルであり得る。いくつかの実装形態では、データベース140は、データ処理システム110に対してリモートであり得るが、ネットワーク105を介して、データ処理システム110と通信することができる。データベース140は、コンテンツプロバイダ115によって提供されたコンテンツアイテム155、または各コンテンツアイテム155を識別する基準アドレスを含み得る。いくつかの実装形態では、データベース140は、コンテンツパブリッシャ120によって提供された情報リソース150、または各情報リソース150を識別する基準アドレスを含み得る。データベース140はまた、コンテンツプロバイダ115、コンテンツパブリッシャ120、またはクライアントデバイス125に提供するために、対話検証スクリプト160を含み得る。対話検証スクリプト160の詳細については、本明細書の以下で提供する。
The data processing system 110 may also include one or more content repositories or databases 140. Database 140 can be local to the data processing system 110. In some implementations, the database 140 may be remote to the data processing system 110, but may communicate with the data processing system 110 over the
コンテンツアイテム評価器130は、コンテンツプロバイダ115の1つまたは複数のコンテンツアイテム155を識別することができる。いくつかの実装形態では、コンテンツアイテム評価器130は、クライアントデバイス125からのコンテンツの要求の受信に応じて、1つまたは複数のコンテンツアイテム155を識別することができる。いくつかの実装形態では、コンテンツアイテム評価器130は、クライアントデバイス125からのコンテンツの要求とは無関係に、1つまたは複数のコンテンツアイテム155を識別することができる。いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツプロバイダ115のコンテンツアイテム155のために、データベース140にアクセスすることができる。いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツプロバイダ115からコンテンツアイテム155を受信することができる。コンテンツプロバイダ115は、コンテンツアイテム評価器130に、コンテンツアイテム155を修正するための要求を送信することができる。修正するための要求は、コンテンツアイテム155を含み得る。各コンテンツアイテム155は、コンテンツアイテム識別子(たとえば、アドレス、または英数字の文字セット)によってインデックス付けされ得る。コンテンツアイテム評価器130は、要求をパースして、コンテンツアイテム155を識別することができる。識別された各コンテンツアイテム155について、コンテンツアイテム評価器130は、コンテンツアイテム155の実行可能コードをパースすることができる。コンテンツアイテム155の実行可能コードは、マークアップ(たとえば、HTMLおよびCSS)およびスクリプト言語コード(たとえば、JavaScript(商標))の形態におけるコードを含み得る。コンテンツアイテム155の実行可能コードをパースすることから、コンテンツアイテム評価器130は、1つまたは複数のイベントハンドラ(イベントリスナーとも呼ばれる)を識別することができる。いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツアイテム155のスクリプト言語コードをパースして、1つまたは複数のイベントハンドラを識別することができる。コンテンツアイテム155の各イベントハンドラは、クライアントデバイス125のアプリケーション145から情報リソース150に、またはコンテンツアイテム155に渡された、対応する対話イベントを処理するためのルーチン(たとえば、非同期コールバックサブルーチン)であり得る。たとえば、コンテンツアイテム155は、クリック対話イベントを処理するためのon-clickイベントハンドラと、キーボード押下を処理するためのkeypressイベントハンドラとを含み得る。 The content item evaluator 130 can identify one or more content items 155 of the content provider 115. In some implementations, the content item evaluator 130 can identify one or more content items 155 in response to receiving a request for content from the client device 125. In some implementations, the content item evaluator 130 can identify one or more content items 155 regardless of the content request from the client device 125. In some implementations, the content item evaluator 130 can access the database 140 for the content item 155 of the content provider 115. In some implementations, the content item evaluator 130 can receive the content item 155 from the content provider 115. The content provider 115 can send a request to the content item evaluator 130 to modify the content item 155. The request for modification may include content item 155. Each content item 155 can be indexed by a content item identifier (eg, an address, or an alphanumerical character set). The content item evaluator 130 can parse the request to identify the content item 155. For each identified content item 155, the content item evaluator 130 can parse the executable code for the content item 155. The executable code for Content Item 155 may include code in the form of markup (eg, HTML and CSS) and scripting language code (eg, JavaScript ™). By parsing the executable code for content item 155, the content item evaluator 130 can identify one or more event handlers (also known as event listeners). In some implementations, the content item evaluator 130 can parse the scripting language code of the content item 155 to identify one or more event handlers. Each event handler for content item 155 is a routine (eg, asynchronous callback subroutine) for handling the corresponding interactive event passed from application 145 on client device 125 to information resource 150 or to content item 155. obtain. For example, content item 155 may include an on-click event handler for handling click dialogue events and a keypress event handler for handling keyboard presses.
コンテンツアイテム155のイベントハンドラの中で、コンテンツアイテム評価器130は、対応する対話イベントの検出に応答して、あらかじめ決定されたアクションを実施するための関数とともに構成された、1つまたは複数のイベントハンドラを識別することができる。イベントハンドラのうちの少なくとも1つは、あらかじめ決定されたアクションを実施するための関数とともに構成され得る。関数は、コンテンツアイテム評価器130によって検索されることになる、あらかじめ指定された関数のセットのうちの1つであり得る。いくつかの実装形態では、関数、および関数のトリガリングに応じて実施されることになる、あらかじめ決定されたアクションが、アプリケーションプログラミングインターフェース(API)によって定義され得る。たとえば、関数呼出しは、アプリケーション145によってアクセスまたはロードされた現在の情報リソースから、そのアドレスが関数呼出しによって指定される別の情報リソースにナビゲートするための、「ExitAPI.exit()」であり得る。いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツアイテム155の各イベントハンドラの実行可能コードをパースして、あらかじめ決定されたアクションを実施するための関数とともに構成される、1つまたは複数のイベントハンドラを識別することができる。 Within the event handler for content item 155, the content item evaluator 130 is configured with a function to perform a predetermined action in response to the detection of the corresponding dialogue event, one or more events. You can identify the handler. At least one of the event handlers can be configured with a function to perform a predetermined action. The function can be one of a pre-specified set of functions that will be searched by the content item evaluator 130. In some implementations, a function, and a predetermined action that will be performed in response to the triggering of the function, may be defined by the application programming interface (API). For example, a function call can be "ExitAPI.exit ()" for navigating from the current information resource accessed or loaded by application 145 to another information resource whose address is specified by the function call. .. In some implementations, the content item evaluator 130 is configured with a function to parse the executable code of each event handler of the content item 155 and perform a predetermined action, one or more. Can identify event handlers for.
コンテンツアイテム評価器130は、コンテンツアイテム155のために識別されたイベントハンドラをトラバースして、あらかじめ決定されたアクションを実施するための関数を識別することができる。コンテンツアイテム評価器130は、クライアントデバイス125からのコンテンツの要求の受信に応じて、または要求の受信とは無関係に、コンテンツアイテム155のためのイベントハンドラをトラバースすることができる。各イベントハンドラの実行可能コードをパースする際に、コンテンツアイテム評価器130は、あらかじめ決定されたアクションを実施するための関数のためのあらかじめ定義された文字列に一致する、実行可能コードの文字列を識別することができる。イベントハンドラのための実行可能コードのための文字列が、関数のための文字列を含まない場合、コンテンツアイテム評価器130は、イベントハンドラを、関数とともに構成されていないものとして識別することができる。逆に、イベントハンドラのための実行可能コードのための文字列が、関数のための文字列を含む場合、コンテンツアイテム評価器130は、イベントハンドラを、あらかじめ決定されたアクションを実施するための関数とともに構成されるものとして識別することができる。 The content item evaluator 130 can traverse the event handler identified for the content item 155 to identify a function for performing a predetermined action. The content item evaluator 130 can traverse the event handler for the content item 155 in response to or independently of receiving a request for content from the client device 125. When parsing the executable code for each event handler, the content item evaluator 130 is a string of executable code that matches the predefined string for the function to perform the predetermined action. Can be identified. If the string for the executable code for the event handler does not contain the string for the function, the content item evaluator 130 can identify the event handler as not configured with the function. .. Conversely, if the string for executable code for the event handler contains a string for the function, the content item evaluator 130 will use the event handler as a function to perform a predetermined action. Can be identified as being composed of.
いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツアイテム155が、コンテンツアイテム155中に含まれることが期待される、あらかじめ定義されたイベントハンドラのリストのうちの1つまたは複数のイベントハンドラを含むか否かを決定することができる。コンテンツアイテム155はまた、いくつかのイベントハンドラを欠くか、または除外することがある。たとえば、コンテンツアイテム155のための実行可能コードは、on-clickイベントハンドラのための明確な定義を有し得るが、touch-startハンドラのためのいかなるコードも欠くことがある。あらかじめ定義された期待されるイベントハンドラのリストは、関数とともに構成されるものとして識別されたイベントハンドラにアタッチされるか、バインドされるか、またはペアにされることになる1つまたは複数のイベントハンドラを含むか、または指定することができる。あらかじめ定義された期待イベントハンドラのリストは、データベース140上で維持され得る。いくつかの実装形態では、コンテンツアイテム評価器130は、コンテンツアイテム155中に含まれたイベントハンドラの中をトラバースすることができる。コンテンツアイテム155中に含まれたイベントハンドラがトラバースされるとき、コンテンツアイテム評価器130は、イベントハンドラが、あらかじめ定義された期待されるイベントハンドラのリストのうちの1つに一致するか否かを決定することができる。コンテンツアイテム155のイベントハンドラの中をトラバースすることによって、コンテンツアイテム評価器130は、あらかじめ定義された期待されるイベントハンドラのリストのうちのどのイベントハンドラが、コンテンツアイテム155中に含まれていないかを決定することができる。コンテンツアイテム評価器130は、あらかじめ定義された期待されるイベントハンドラのリストのうちの、コンテンツアイテム155中に最初に含まれていないイベントハンドラを、コンテンツアイテム155の実行可能コードに挿入するか、または含めることができる。挿入されたイベントハンドラは、最初はヌルであり得、対応する対話イベントの検出に応じて、アクションを実施しないように構成され得る。コンテンツアイテム評価器130はまた、挿入されたイベントハンドラを、関数とともに構成されてい
ないものとして識別することもできる。
In some implementations, the content item evaluator 130 is an event handler for one or more of the predefined event handlers that the content item 155 is expected to contain in the content item 155. Can be determined whether or not to include. Content item 155 may also lack or exclude some event handlers. For example, the executable code for content item 155 may have a clear definition for the on-click event handler, but may lack any code for the touch-start handler. The predefined list of expected event handlers is one or more events that will be attached, bound, or paired to the event handler identified as being configured with the function. Can include or specify a handler. A predefined list of expected event handlers may be maintained on database 140. In some implementations, the content item evaluator 130 can traverse within the event handler contained within the content item 155. When the event handler contained in the content item 155 is traversed, the content item evaluator 130 determines whether the event handler matches one of the predefined expected list of event handlers. Can be decided. By traversing through the event handlers for content item 155, the content item evaluator 130 tells which event handler in the predefined list of expected event handlers is not included in the content item 155. Can be determined. The content item evaluator 130 either inserts an event handler from the predefined list of expected event handlers that is not initially included in the content item 155 into the executable code of the content item 155. Can be included. The inserted event handler can be initially null and can be configured to take no action in response to the detection of the corresponding dialogue event. The content item evaluator 130 can also identify the inserted event handler as not configured with a function.
コンテンツアイテム評価器130によって、関数とともに構成されていないものとして識別された、コンテンツアイテム155の各イベントハンドラについて、スクリプト挿入器135は、イベントハンドラが、あらかじめ定義されたイベントハンドラのリストのうちの1つに一致するか否かを決定することができる。あらかじめ定義されたイベントハンドラのリストは、関数とともに構成されるものとして識別されたイベントハンドラにアタッチされるか、バインドされるか、またはペアにされることになる1つまたは複数のイベントハンドラを含むか、または指定することができる。あらかじめ定義されたイベントハンドラのリストは、データベース140上で維持され得る。あらかじめ定義されたイベントハンドラのリストは、クライアントデバイス125におけるユーザによる単一の物理的対話とともに呼び出されるようにあらかじめ決定されたイベントハンドラのセットまたはグループを含み得る。たとえば、ユーザが、クライアントデバイス125におけるタッチスクリーン上のある点に接触するとき、物理的接触が比較的短い時間の持続である場合、touch-startイベント、touch-endイベント、およびclickイベントが呼び出され得るか、または物理的接触が比較的長い時間の持続にわたる場合、scrollイベントが呼び出され得る。このことから見て、あらかじめ定義されたイベントハンドラのリストは、touch-endイベントおよびon-clickイベントを含むように定義され得る。
For each event handler for content item 155 identified by the content item evaluator 130 as not configured with a function, the
スクリプト挿入器135は、関数とともに構成されていないものとして識別された1つまたは複数のイベントハンドラの中をトラバースして、対話検証スクリプト160にアタッチするか、関数とともに構成されるものとして識別されたイベントハンドラにアタッチするかを決定することができる。関数とともに構成されていないものとして識別された1つまたは複数のイベントハンドラをトラバースする間、スクリプト挿入器135は、関数とともに構成されていないものとして識別されたイベントハンドラを、あらかじめ定義されたイベントハンドラのリストのうちの1つと比較することができる。イベントハンドラが、あらかじめ定義されたイベントハンドラのリスト上のいずれにも一致しないものとして識別される場合、スクリプト挿入器135は、イベントハンドラをそのままで維持する。このようにして、イベントハンドラの元の機能が維持され得る。一方、イベントハンドラが、あらかじめ定義されたイベントハンドラのリストのうちの1つに一致するものとして識別される場合、スクリプト挿入器135は、関数とともに構成されていないものとして識別されたイベントハンドラを、(たとえば、JavaScript(商標)関数「addEventListener()」を使用して)関数とともに構成されるものとして識別された1つまたは複数のイベントハンドラにアタッチすることができる。いずれの場合も、スクリプト挿入器135は、関数とともに構成されていないより多くのイベントハンドラがあるか否かを決定することができる。関数とともに構成されていないものとして識別されたより多くのイベントハンドラがある場合、スクリプト挿入器135は、関数とともに構成されていないものとして識別された次のイベントハンドラを識別し、関数を繰り返すことができる。さもなければ、関数とともに構成されていないものとして識別されたイベントハンドラがそれ以上ない場合、スクリプト挿入器135は、続けて対話検証スクリプト160をコンテンツアイテム155に挿入することができる。
The
スクリプト挿入器135は、対話検証スクリプト160をコンテンツアイテム155に挿入するか、または含めることができる。いくつかの実装形態では、スクリプト挿入器135は、コンテンツアイテム155をパースして、コンテンツアイテム155が前に対話検証スクリプト160とともに構成されているか、または対話検証スクリプト160をすでに含むか否かを決定することができる。コンテンツアイテム155が、前に対話検証スクリプト160とともに構成されているか、または対話検証スクリプト160をすでに含むと決定される場合、スクリプト挿入器135は、さらなる修正なしに、コンテンツアイテム155を送ることができる。さもなければ、コンテンツアイテム155が、前に対話検証スクリプト160とともに構成されていないと決定されるか、または対話検証スクリプト160を含んでいない場合、スクリプト挿入器135は、対話検証スクリプト160をコンテンツアイテム155に挿入することができる。対話検証スクリプト160は、スクリプト挿入器135によって、1つまたは複数のイベントハンドラを含む実行可能コードの別の部分より前に、実行可能コードの一部分に挿入され得る。このようにして、クライアントデバイス125において実行しているアプリケーション145は、後続の実行可能コード中に含まれたイベントハンドラより前に、対話検証スクリプト160を処理および実行することになる。いくつかの実装形態では、スクリプト挿入器135は、イベントハンドラを含む実行可能コードの部分より前に、コンテンツアイテム155の実行可能コードの部分に、イベントハンドラのアタッチメントを挿入するか、または含めることができる。いくつかの実装形態では、スクリプト挿入器135は、あらかじめ定義されたイベントハンドラのリスト上の関数とともに構成されていないものとして識別されたイベントハンドラと、関数とともに構成されるものとして識別されたイベントハンドラとを、対話検証スクリプト160にアタッチすることができる。
The
いくつかの実装形態では、スクリプト挿入器135は、対話検証スクリプト160をコンテンツアイテム155の外部に挿入することができる。対話検証スクリプト160は、コンテンツアイテム155の外部に挿入されたとき、コンテンツアイテム155の1つまたは複数のイベントハンドラとインターフェースすることができる。スクリプト挿入器135は、対話検証スクリプト160を情報リソース150に挿入することができる。いくつかの実装形態では、スクリプト挿入器135は、対話検証スクリプト160を、コンテンツアイテム155のための情報リソース150のコンテンツスロット(たとえば、インラインフレーム)に挿入することができる。いくつかの実装形態では、スクリプト挿入器135は、対話検証スクリプト160をシャドウDOMツリー要素として挿入することができる。シャドウDOMツリー要素は、コンテンツアイテム155のための情報リソース150のコンテンツスロットの一部であり得る。対話検証スクリプト160の機能に関する詳細については、本明細書の以下で提供する。
In some implementations, the
次に図2を参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証するためのシステム200である。システム200は、環境100の要素の一部または全部を含み得、図1に関して上記で説明したコンテンツアイテム155および対話検証スクリプト160のより詳細な構成を表し得る。概して、システム200は、クライアントデバイス125上でランしているアプリケーション145に提供された情報リソース150中に挿入されたコンテンツアイテム155を含み得る。システム200の各構成要素は、アプリケーション145によって指定された方法で、クライアントデバイス125の1つまたは複数のプロセッサによって実行されることになる、メモリ上の命令として記憶され得る。コンテンツアイテム155は、コンテンツアイテム155のための実行可能コードの第1の部分210Aにおいて、対話検証スクリプト160を含み得る。対話検証スクリプト160は、イベント検出器220と、登録ロガー230と、関数アクティベータ240とを含み得る。コンテンツアイテム155はまた、コンテンツアイテム155のための実行可能コードの第2の部分210Bにおいて、1つまたは複数のイベントハンドラ250A〜Nを含み得る。
Next, referring to FIG. 2, what is illustrated is a
コンテンツプロバイダ115またはデータ処理システム110からコンテンツアイテム155を受信すると、アプリケーション145は、情報リソース150のコンテンツスロット(たとえば、インラインフレーム要素)にコンテンツアイテム155を挿入することができる。クライアントデバイス125上でランしているアプリケーション145は、その中の実行可能コードに従って、コンテンツアイテム155をパース、実行、および提示することができる。コンテンツアイテム155を処理する際に、アプリケーション145は、コンテンツアイテム155の実行可能コードを上から下まで連続的にパースし、読み取ることができる。いくつかの実装形態では、アプリケーション145は、実行可能コードの第2の部分210Bにおける1つまたは複数のイベントハンドラ250A〜Nを実行するより前に、実行可能コードの第1の部分210Aにおける対話検証スクリプト160のイベント検出器220、登録ロガー230、または関数アクティベータ240を実行することができる。このようにして、コンテンツアイテム155のための実行可能コードの第1の部分210Aにおいて符号化された対話検証スクリプト160の機能が、実行可能コードの第2の部分210Bにおいて符号化されたイベントハンドラ250A〜Nのいずれよりも前に実行され得る。いくつかの実装形態では、対話検証スクリプト160が、コンテンツアイテム155の外部で(たとえば、コンテンツアイテム155のためのコンテンツスロットを定義するインラインフレームにおいて)情報リソース150に挿入されるとき、アプリケーション145は、コンテンツアイテム155のための実行可能コードより前に、対話検証スクリプト160に対応する実行可能コードを実行することができる。
Upon receiving the content item 155 from the content provider 115 or the data processing system 110, the application 145 can insert the content item 155 into the content slot (eg, an inline frame element) of the information resource 150. The application 145 running on the client device 125 can parse, execute, and present the content item 155 according to the executable code in it. When processing content item 155, application 145 can continuously parse and read the executable code of content item 155 from top to bottom. In some implementations, application 145 interacts with the first part 210A of the executable code before executing one or more event handlers 250A-N in the second part 210B of the executable code. You can run the event detector 220, registration logger 230, or function activator 240 in
イベント検出器220は、コンテンツアイテム155に起因する1つまたは複数の対話イベントを監視することができる。対話イベントは、クライアントデバイス125の任意の入出力(I/O)デバイスを用いた、ユーザによる対話またはジェスチャーに対応し得る。対話イベントは、特に、touch-startイベント、touch-endイベント、touch-move、long pressイベント、on-scrollイベント、on-flingイベント、mouse-upイベント、mouse-downイベント、on-clickイベント、double-clickイベント、key-upイベント、key-downイベント、keypressイベント、mouse-moveイベント、mouse-upイベント、mouse-downイベント、mouse-scrollイベント、およびmouse-wheelイベントを含み得る。対話イベントは、アプリケーション145によって検出され得、クライアントデバイス125のI/Oデバイスから、アプリケーション145を介して、情報リソース150またはコンテンツアイテム155に渡され得る。アプリケーション145は、対話イベントがコンテンツアイテム155に起因するか否かを決定することができる。いくつかの実装形態では、対話イベントの座標が、コンテンツアイテム155に対応する座標の範囲内であるとき、アプリケーション145は、対話イベントがコンテンツアイテム155に起因すると決定することができる。対話イベントがコンテンツアイテム155に起因すると決定される場合、アプリケーション145は、その中の実行可能コードによって処理するために、対話イベントをコンテンツアイテム155に渡すことができる。 The event detector 220 can monitor one or more interactive events resulting from content item 155. Dialogue events can correspond to user dialogues or gestures using any input / output (I / O) device on client device 125. Dialogue events are especially touch-start event, touch-end event, touch-move, long press event, on-scroll event, on-fling event, mouse-up event, mouse-down event, on-click event, double. -Can include click event, key-up event, key-down event, keypress event, mouse-move event, mouse-up event, mouse-down event, mouse-scroll event, and mouse-wheel event. Dialogue events can be detected by application 145 and passed from the I / O device on client device 125 through application 145 to information resource 150 or content item 155. Application 145 can determine whether the dialogue event is due to content item 155. In some implementations, when the coordinates of the dialogue event are within the range of coordinates corresponding to the content item 155, the application 145 can determine that the dialogue event is due to the content item 155. If it is determined that the dialogue event is due to content item 155, application 145 can pass the dialogue event to content item 155 for processing by the executable code in it.
クライアントデバイス125のI/Oデバイスを用いたユーザによる単一の対話に応じて、複数の対話イベントが渡され得、コンテンツアイテム155の対応するイベントハンドラ250A〜Nがトリガされ得る。コンテンツアイテム155のレンダリングに対応するクライアントデバイス125のタッチスクリーン上の点における単一の対話とともに、アプリケーション145は、touch-startイベントおよびtouch-endイベントをコンテンツアイテム155に順次渡すことができる。アプリケーション145は、ファクタの中でも、ユーザ対話の位置および持続時間の変化に基づいて、1つまたは複数の追加イベントを渡すことができる。ユーザ対話の間の位置の変化に基づいて、アプリケーション145はまた、特に、touch-startイベントとtouch-endイベントとの間で、on-scrollイベントまたはtouch-moveイベントをコンテンツアイテム155に渡すこともできる。ユーザ対話の持続時間が、あらかじめ決定された時間しきい値よりも大きい場合、アプリケーション145はまた、touch-startイベントおよびtouch-endイベントの後で、long pressイベントをコンテンツアイテム155に渡すこともできる。逆に、ユーザ対話の持続時間が、あらかじめ決定された時間しきい値以下である場合、アプリケーション145はまた、touch-startイベントおよびtouch-endイベントの後で、on-clickイベントをコンテンツアイテム155に渡すこともできる。 Multiple dialogue events can be passed and the corresponding event handlers 250A-N of content item 155 can be triggered in response to a single dialogue by the user using the I / O device of client device 125. With a single interaction at a point on the touch screen of the client device 125 that corresponds to the rendering of content item 155, application 145 can sequentially pass touch-start and touch-end events to content item 155. Application 145 can pass one or more additional events, among other factors, based on changes in the position and duration of user dialogue. Based on the change in position during user interaction, application 145 can also pass on-scroll or touch-move events to content item 155, especially between touch-start and touch-end events. can. If the duration of the user dialogue is greater than the predetermined time threshold, the application 145 can also pass a long press event to the content item 155 after the touch-start and touch-end events. .. Conversely, if the duration of the user interaction is less than or equal to a predetermined time threshold, application 145 also sends an on-click event to content item 155 after the touch-start and touch-end events. You can also pass it.
イベント検出器220は、アプリケーション145によって渡された1つまたは複数の対話イベントを受信、識別、または検出することができる。イベント検出器220は、実行可能コードの第1の部分210Aにおいて符号化されるので、イベント検出器220は、実行可能コードの第2の部分210Bにおいて符号化された対話イベントのための対応するイベントハンドラ250A〜Nのトリガリングより前に、対話イベントを受信または検出することができる。さらに、アプリケーション145から渡された同じ対話イベントが、第1の部分210Aにおいて符号化されたイベント検出器220によって、および次いで、コンテンツアイテム155の第2の部分210Bにおいて符号化された対応するイベントハンドラ250A〜Nによって、複数回検出または登録され得る。いくつかの実装形態では、イベント検出器220は、対話イベントがアプリケーション145によってコンテンツアイテム155に渡されるとき、1つまたは複数の対話イベントを順次検出することができる。ユーザ対話が、クライアントデバイス125のタッチスクリーンを伴うものであるとき、イベント検出器220は、アプリケーション145によって渡されたtouch-startイベントおよびtouch-endイベントを順次検出することができる。いくつかの実装形態では、イベント検出器220は、touch-startイベントとtouch-endイベントとの間で、on-scrollイベントまたはtouch-moveイベントを検出することができる。いくつかの実装形態では、イベント検出器220は、touch-startイベントおよびtouch-endイベントの後で、on-clickイベントを検出することができる。対話検証スクリプト160が検出された対話イベントに応答することになるか否かは、どの対応するイベントハンドラ250A〜Nが関数260とともに構成されるかに依存し得る。
The event detector 220 can receive, identify, or detect one or more dialogue events passed by application 145. Since the event detector 220 is encoded in the first part 210A of the executable code, the event detector 220 is the corresponding event for the interactive event encoded in the second part 210B of the executable code. Dialogue events can be received or detected prior to the triggering of handlers 250A-N. In addition, the same dialogue event passed by application 145 is encoded by the event detector 220 in the first part 210A and then in the second part 210B of the content item 155. Can be detected or registered multiple times by 250A-N. In some implementations, the event detector 220 can sequentially detect one or more dialogue events when the dialogue event is passed by application 145 to content item 155. When the user dialogue involves the touch screen of the client device 125, the event detector 220 can sequentially detect the touch-start and touch-end events passed by application 145. In some implementations, the event detector 220 can detect on-scroll or touch-move events between touch-start and touch-end events. In some implementations, the event detector 220 can detect on-click events after touch-start and touch-end events. Whether or not the
イベント検出器220による各対話イベントの検出の後で、対話イベントに対応するイベントハンドラ250A〜Nは、対話イベントを処理することができる。各イベントハンドラ250A〜Nは、特定のタイプの対話イベントを処理することができる。たとえば、touch-startイベントハンドラは、touch-startイベントを処理することができ、on-scrollイベントハンドラは、on-scrollイベントを処理することができ、touch-endイベントハンドラは、touch-endイベントを処理することができ、on-clickイベントハンドラは、on-clickイベントを処理することができる、などとなる。イベントハンドラ250A〜Nのサブセットが、対話検証スクリプト160において指定されるようにアタッチされ得る。いくつかの実装形態では、イベントハンドラ250A〜Nのサブセットは、互いに、またはイベント検出器220、登録ロガー230、もしくは関数アクティベータ240にアタッチされ得る。イベントハンドラ250A〜Nの残りのセットは、対話検証スクリプト160からのいかなる影響もなしに、プログラムされた機能を実施し得る。いくつかの実装形態では、イベント検出器220は、報告モードにおいて作動することができる。報告モードである間、イベント検出器220は、特定のタイプの対話と、イベントハンドラ250A〜Nのために構成された関数260とを含む、診断メッセージを生成することができる。イベント検出器は、データ処理システム110に診断メッセージを送信することができる。このようにして、多数のクライアントデバイス125にわたって集められた診断メッセージが、コンテンツアイテム155の挙動を決定または測定するために使用され得る。さらに、報告モードである間、イベント検出器220は、1つまたは複数のイベントハンドラ250A〜Nなど、コンテンツアイテム155の最初にプログラムされた機能を維持することができる。イベント検出器220はまた、関数アクティベータ240の機能を無効化することもできる。
After the event detector 220 detects each dialogue event, the event handlers 250A-N corresponding to the dialogue event can process the dialogue event. Each event handler 250A-N can handle a particular type of dialogue event. For example, a touch-start event handler can handle a touch-start event, an on-scroll event handler can handle an on-scroll event, and a touch-end event handler can handle a touch-end event. It can be processed, the on-click event handler can process the on-click event, and so on. A subset of event handlers 250A-N can be attached as specified in
少なくとも1つのイベントハンドラ250A〜N(以下、一般にイベントハンドラ250Aと呼ばれる)は、コンテンツアイテム155から渡された対話イベントに応じて、あらかじめ定義されたアクションを実施するための関数260とともに構成され得る。他のイベントハンドラ250A〜N(以下、一般にイベントハンドラ250Bと呼ばれる)は、関数260なしで構成され得る。したがって、イベントハンドラ250Aは、アプリケーション145からコンテンツアイテム155に渡された対応する対話イベントの検出または受信に応じて、あらかじめ定義されたアクションを実施するために、関数260を呼び出すか、またはトリガすることができる。上記で説明したように、関数260は、コンテンツアイテム評価器130によって指定された、あらかじめ指定された関数のセットのうちの1つを含み得る。いくつかの実装形態では、関数、および関数のトリガリングに応じて実施されることになる、あらかじめ決定されたアクションは、アプリケーションプログラミングインターフェース(API)によって定義され得る(たとえば、アプリケーション145によってアクセスまたはロードされた情報リソース150から、別の情報リソースにナビゲートするための「ExitAPI.exit()」)。イベントハンドラ250Aは、特に、touch-endイベントまたはon-clickイベントであり得る。対照的に、イベントハンドラ250Bは、アプリケーション145からコンテンツアイテム155に渡された対応する対話イベントの検出または受信に応じて、アクションを実施しないことができ、または関数260以外の他の機能を呼び出すことができる。イベントハンドラ250Bは、特に、touch-endイベントまたはon-clickイベントであり得る。いくつかの実装形態では、イベントハンドラ250Bによって処理される対話イベントのタイプは、イベントハンドラ250Aによって処理される対話イベントのタイプとは異なり得る。たとえば、イベントハンドラ250Aは、関数260とともに構成されたtouch-endイベントハンドラであり得るが、イベントハンドラ250Bは、on-clickイベントハンドラであり得る。 At least one event handler 250A-N (hereinafter generally referred to as event handler 250A) may be configured with a function 260 for performing a predefined action in response to a dialogue event passed from content item 155. Other event handlers 250A-N (hereinafter commonly referred to as event handlers 250B) can be configured without function 260. Therefore, event handler 250A calls or triggers function 260 to perform a predefined action in response to the detection or reception of the corresponding dialogue event passed from application 145 to content item 155. Can be done. As described above, the function 260 may include one of a pre-specified set of functions specified by the content item evaluator 130. In some implementations, functions, and predetermined actions that will be performed in response to function triggering, can be defined by application programming interfaces (APIs) (eg, accessed or loaded by application 145). "ExitAPI.exit ()" for navigating from the provided information resource 150 to another information resource. The event handler 250A can be, in particular, a touch-end event or an on-click event. In contrast, the event handler 250B may not take any action or call any other function other than function 260 in response to the detection or reception of the corresponding dialogue event passed from application 145 to content item 155. Can be done. The event handler 250B can be, in particular, a touch-end event or an on-click event. In some implementations, the type of dialogue event handled by event handler 250B may differ from the type of dialogue event handled by event handler 250A. For example, event handler 250A can be a touch-end event handler configured with function 260, while event handler 250B can be an on-click event handler.
アプリケーション145によって渡された対話イベントを検出すると、イベント検出器220は、対話イベントが、対話検証スクリプト160において指定された、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応するか否かを決定することができる。上記で説明したように、アタッチされたイベントハンドラ250A〜Nは、データベース140において維持された、あらかじめ定義されたイベントハンドラのリストによって指定されたイベントハンドラのうちのいずれか1つであり得る。いくつかの実装形態では、アタッチされたイベントハンドラ250A〜Nは、特に、touch-startイベントハンドラ、touch-endイベントハンドラ、およびon-clickイベントハンドラを含み得る。対話イベントが、アタッチされたイベントハンドラ250A〜Nのいずれにも対応しないと決定される場合、対応するイベントハンドラ250A〜N(いずれかがコンテンツアイテム155において構成される場合)は、対話イベントを処理することができる。一方、対話イベントが、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応すると決定される場合、イベント検出器220は、イベントハンドラ250A〜Nに対応する対話イベントの検出の時間を識別することができる。いくつかの実装形態では、イベント検出器220は、時間を追跡するために、タイマーを維持することができる。いくつかの実装形態では、イベント検出器220は、対話イベントが、関数260とともに構成されたイベントハンドラ250Aに対応するか否かを決定することができる。対話イベントが、関数260とともに構成されたイベントハンドラ250Aに対応すると決定される場合、イベント検出器220は、イベントハンドラ250Aに対応する対話イベントの検出の時間を識別することができる。イベント検出器220はまた、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する別の対話イベントの検出を待機するために、イベントハンドラ250Aに対応する対話イベントの検出から、タイマーのカウントを開始することもできる。
Upon detecting the dialogue event passed by application 145, the event detector 220 determines whether the dialogue event corresponds to one of the attached event handlers 250A-N specified in the
イベント検出器220が対話イベントを監視するとき、登録ロガー230は、あらかじめ決定されたアクションを実施するための関数260の呼出しの登録を識別または監視することができる。イベントハンドラ250A〜Nのうちの1つが呼び出されることの検出に応じて、登録ロガー230は、どのイベントハンドラ250A〜Nが呼び出されるかを識別することができる。いくつかの実装形態では、登録ロガー230は、アプリケーション145によって渡された対応する対話イベントの検出に応じて、どのイベントハンドラ250A〜Nが呼び出されることになるかを識別することができる。どのイベントハンドラ250A〜Nがトリガされるかの識別を使用して、登録ロガー230は、関数260とともに構成されたイベントハンドラ250Aがトリガされるか否か、または構成なしのイベントハンドラ250Bがトリガされるか否かを決定する。イベントハンドラ250Aが、対応する対話イベントに応じてトリガされると決定される場合、登録ロガー230は、イベントハンドラ250Aにおいて構成された関数260の呼出しを登録することができる。いくつかの実装形態では、イベントハンドラ250Aに対応する対話イベントを検出すると、登録ロガー230は、関数260の呼出しを登録することができる。登録ロガー230は、関数260の呼出しを追跡し、クライアントデバイス125のローカルのメモリにおいて、関数260の呼出しの登録を記憶することができる。イベントハンドラ250Aのための対応する対話イベントが、アプリケーション145からコンテンツアイテム155に渡されるとき、イベントハンドラ250Aは、関数260を呼び出すか、またはトリガすることができる。いくつかの実装形態では、関数260の呼出しを登録する際に、登録ロガー230は、関数260のためのあらかじめ決定されたアクションの実行を防止または保留することができる。登録ロガー230は、関数260の呼出しの登録の時間を識別することができる。いくつかの実装形態では、登録ロガー230は、時間を追跡するために、タイマーを維持することができる。関数260の呼出しの登録に応じて、登録ロガー230は、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する別の対話イベントの検出を待機するために、登録の時間からタイマーのカウントを開始することができる。 When the event detector 220 monitors an interactive event, the registration logger 230 can identify or monitor the registration of a call to function 260 to perform a predetermined action. Upon detecting that one of the event handlers 250A-N is called, the registration logger 230 can identify which event handlers 250A-N are called. In some implementations, the registration logger 230 can identify which event handlers 250A-N will be called in response to the detection of the corresponding dialogue event passed by application 145. Using the identification of which event handlers 250A-N are triggered, the registration logger 230 will either trigger the event handler 250A configured with the function 260, or trigger the unconfigured event handler 250B. Decide whether or not to do so. If event handler 250A is determined to be triggered in response to a corresponding dialogue event, registration logger 230 may register a call to function 260 configured in event handler 250A. In some implementations, the registration logger 230 can register a call to function 260 when it detects an interactive event corresponding to event handler 250A. Registration logger 230 can track the call to function 260 and store the registration of the call to function 260 in the local memory of client device 125. When the corresponding dialogue event for event handler 250A is passed from application 145 to content item 155, event handler 250A can call or trigger function 260. In some implementations, when registering a call to function 260, the registration logger 230 can prevent or suspend the execution of a predetermined action for function 260. The registration logger 230 can identify the time of registration of the call to function 260. In some implementations, the registration logger 230 can maintain a timer to keep track of time. In response to the registration of the call to function 260, the registration logger 230 counts the timer from the time of registration to wait for the detection of another dialogue event corresponding to one of the attached event handlers 250A-N. Can be started.
一方、イベントハンドラ250Bが、対応する対話イベントに応じてトリガされると決定される場合、登録ロガー230は、イベントハンドラ250Aにおいて構成された関数260の呼出しの登録を識別することができる。いくつかの実装形態では、イベントハンドラ250Bのトリガリングは、イベントハンドラ250Aのトリガリングより前に発生し得る。イベントハンドラ250Bが、イベントハンドラ250Aのトリガリングより前にトリガされるとき、登録ロガー230は、関数の呼出しの登録がないことを識別することができる。登録ロガー230はまた、イベントハンドラ250Aのトリガリングを待機することもでき、関数呼出し260の登録を監視し続けることができる。いくつかの実装形態では、イベントハンドラ250Bのトリガリングは、イベントハンドラ250Aのトリガリングの後で発生し得る。イベントハンドラ250Bが、イベントハンドラ250Aのトリガリングの後でトリガされるとき、イベントハンドラ250Aにおいて構成された関数260は、すでに呼び出されていることがあり、登録ロガー230は、関数260の呼出しを登録していることがある。 On the other hand, if the event handler 250B is determined to be triggered in response to the corresponding dialogue event, the registration logger 230 can identify the registration of the call to the function 260 configured in the event handler 250A. In some implementations, the triggering of event handler 250B can occur before the triggering of event handler 250A. When the event handler 250B is triggered prior to the triggering of the event handler 250A, the registration logger 230 can identify that there is no registration of the function call. The registration logger 230 can also wait for the triggering of the event handler 250A and can continue to monitor the registration of the function call 260. In some implementations, the triggering of event handler 250B can occur after the triggering of event handler 250A. When the event handler 250B is triggered after the triggering of the event handler 250A, the function 260 configured in the event handler 250A may have already been called, and the registration logger 230 registers the call to the function 260. I have something to do.
あらかじめ決定されたしきい値(たとえば、時間ウィンドウ)に対する、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する対話イベントの検出、および関数260の呼出しの登録のタイミングを使用して、関数アクティベータ240は、アプリケーション145に、関数260のあらかじめ決定されたアクションを実施させることができる。関数アクティベータ240は、アタッチされたイベントハンドラ250A〜Nに対応する1つまたは複数の対話イベントが検出されるか否かを決定することができる。上記で説明したように、アタッチされたイベントハンドラ250A〜Nは、関数260とともに構成されたイベントハンドラ250Aと、構成なしのイベントハンドラ250Bとを含み得る。検出されると決定された、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する各対話イベントについて、関数アクティベータ240は、対話イベントのための時間を識別することができる。対話イベントのいずれも検出されると決定されない場合、関数アクティベータ240は、アプリケーション145によって渡された対話イベントのうちのいずれかの検出を待機することができる。関数アクティベータ240はまた、関数260の呼出しが登録されているか否かを決定することもできる。関数260の呼出しが登録されていると決定される場合、関数アクティベータ240は、関数260の呼出しの登録の時間を識別することができる。関数260の呼出しが登録されていないと決定される場合、関数アクティベータ240は、関数260の呼出しの登録を待機することができる。対話イベントの検出または関数260の呼出しの登録に応じて、関数アクティベータ240は、対話イベントの検出の時間を、登録の時間と比較することができる。 Using the timing of detecting a dialogue event corresponding to one of the attached event handlers 250A-N for a predetermined threshold (for example, a time window) and registering a call to function 260, The function activator 240 can cause the application 145 to perform a predetermined action of the function 260. The function activator 240 can determine whether one or more dialogue events corresponding to the attached event handlers 250A-N are detected. As described above, the attached event handlers 250A-N may include an event handler 250A configured with the function 260 and an unconfigured event handler 250B. For each dialogue event corresponding to one of the attached event handlers 250A-N determined to be detected, the function activator 240 can identify the time for the dialogue event. If none of the dialogue events are determined to be detected, the function activator 240 may wait for the detection of any of the dialogue events passed by application 145. The function activator 240 can also determine if a call to function 260 is registered. If it is determined that a call to function 260 is registered, the function activator 240 can identify the time of registration of the call to function 260. If it is determined that the call to function 260 is not registered, the function activator 240 may wait for the call to function 260 to be registered. Depending on the detection of the dialogue event or the registration of the call to the function 260, the function activator 240 can compare the time of detection of the dialogue event with the time of registration.
関数アクティベータ240は、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する対話イベントの検出が、イベントハンドラ250Aの関数260の呼出しの登録に先行するか、後続するかを決定することができる。対話イベントの検出が関数260の呼出しの登録に先行するか、後続するかを決定するために、関数アクティベータ240は、対話イベントの検出の時間を、登録の時間と比較することができる。関数アクティベータ240は、アタッチされたイベントハンドラ250A〜Nのうちのいずれか1つに対応する対話イベントが最初に検出され、関数260の呼出しが登録されていないとき、対話イベントの検出が関数260の呼出しの登録に先行すると決定することができる。対話イベントは、関数260とともに構成されたイベントハンドラ250A、または関数260の構成なしのイベントハンドラ250Bに対応し得る。関数アクティベータ240はまた、対話イベントの検出の時間が関数260の呼出しの登録の時間より前であるとき、対話イベントの検出が関数260の呼出しの登録に先行すると決定することもできる。逆に、関数アクティベータ240は、関数260の呼出しが最初に登録され、アタッチされたイベントハンドラ250A〜Nのうちのいずれかに対応する対話イベントのいずれも検出されないとき、対話イベントの検出が関数260の呼出しの登録に後続すると決定することができる。関数アクティベータ240はまた、対話イベントの検出の時間が関数260の呼出しの登録の時間の後であるとき、対話イベントの検出が関数260の呼出しの登録に後続すると決定することもできる。 The function activator 240 determines whether the detection of the dialogue event corresponding to one of the attached event handlers 250A to N precedes or follows the registration of the call to function 260 of event handler 250A. Can be done. To determine whether the detection of a dialogue event precedes or follows the registration of a call to function 260, the function activator 240 can compare the time of detection of the dialogue event with the time of registration. The function activator 240 first detects the dialogue event corresponding to any one of the attached event handlers 250A to N, and when the call to function 260 is not registered, the detection of the dialogue event is function 260. Can be determined to precede the registration of the call. Dialogue events can correspond to event handler 250A configured with function 260, or unconfigured event handler 250B for function 260. The function activator 240 can also determine that the detection of a dialogue event precedes the registration of a call to function 260 when the time to detect the dialogue event is earlier than the time to register the call to function 260. Conversely, the function activator 240 detects a dialogue event when the call to function 260 is first registered and does not detect any of the dialogue events corresponding to any of the attached event handlers 250A-N. It can be determined to follow the registration of 260 calls. The function activator 240 can also determine that the detection of a dialogue event follows the registration of a call to function 260 when the time of detection of the dialogue event is after the time of registration of the call to function 260.
対話イベントの検出が関数260の呼出しの登録に先行するか、後続するかに基づいて、関数アクティベータ240は、検出と登録との間のあらかじめ決定されたしきい値を設定することができる。あらかじめ決定されたしきい値は、アプリケーション145が関数アクティベータ240、および次いで、クライアントデバイス125のI/Oデバイスから受信された対話イベントの処理において、対応するイベントハンドラ250A〜Nを実行するとき、経過すると期待される時間を考慮するために設定され得る。対話イベントの検出が関数260の呼出しの登録に先行すると決定される場合、関数アクティベータ240は、あらかじめ決定されたしきい値を、あらかじめ決定された時間の範囲(たとえば、1000ms〜2000ms)からの1つの値に設定することができる。関数アクティベータ240は、関数260とともに構成されたイベントハンドラ250Aのタイプに基づいて、あらかじめ決定されたしきい値を設定することができる。たとえば、touch-endイベントハンドラが関数260とともに構成される場合、関数アクティベータ240は、あらかじめ決定されたしきい値を1500msに設定することができる。一方、対話イベントの検出が関数260の呼出しの登録に後続すると決定される場合、関数アクティベータ240は、あらかじめ決定されたしきい値を、異なるあらかじめ決定された時間の範囲(たとえば、50ms〜350ms)からの別の値に設定することができる。関数アクティベータ240は、関数260なしで構成されたイベントハンドラ250Bのタイプに基づいて、あらかじめ決定されたしきい値を設定することができる。いくつかの実装形態では、関数アクティベータ240は、対話イベントの検出が関数260の呼出しの登録に先行するか、後続するかにかかわらず、あらかじめ決定されたしきい値を同じ固定された値に設定することができる。 Based on whether the detection of a dialogue event precedes or follows the registration of a call to function 260, the function activator 240 can set a predetermined threshold between detection and registration. The predetermined threshold is when the application 145 executes the corresponding event handlers 250A-N in processing the dialogue events received from the function activator 240 and then the I / O device on the client device 125. It can be set to take into account the expected amount of time to elapse. If it is determined that the detection of a dialogue event precedes the registration of a call to function 260, the function activator 240 sets a predetermined threshold from a predetermined time range (eg, 1000ms to 2000ms). Can be set to one value. The function activator 240 can set a predetermined threshold value based on the type of event handler 250A configured with the function 260. For example, if the touch-end event handler is configured with function 260, function activator 240 can set a predetermined threshold to 1500ms. On the other hand, if it is determined that the detection of a dialogue event follows the registration of a call to function 260, the function activator 240 sets a predetermined threshold to a different predetermined time range (eg, 50ms to 350ms). ) Can be set to another value. Function activator 240 can set predetermined thresholds based on the type of event handler 250B configured without function 260. In some implementations, the function activator 240 sets a predetermined threshold to the same fixed value regardless of whether the detection of the dialogue event precedes or follows the registration of the call to function 260. Can be set.
関数アクティベータ240は、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する対話イベントの検出と、関数260の呼出しの登録との間の時間が、あらかじめ決定されたしきい値未満であるか否かを決定することができる。イベントハンドラ250A以外のアタッチされたイベントハンドラ250A〜Nのうちの1つに対応する対話イベントが、登録より前に検出される場合、関数アクティベータ240は、あらかじめ決定されたしきい値内で、関数260の呼出しの登録を待機することができる。いくつかの実装形態では、関数アクティベータ240は、対話イベントの検出からの時間をカウントするために、タイマーを維持することができる。関数アクティベータ240は、対話イベントの検出から経過した時間を、あらかじめ決定されたしきい値と比較することができる。逆に、関数260の呼出しの登録が、対話イベントの検出より前に発生する場合、関数アクティベータ240は、あらかじめ決定されたしきい値内で、アタッチされたイベントハンドラ250A〜Nのうちの1つに対応する対話イベントの検出を待機することができる。いくつかの実装形態では、関数アクティベータ240は、関数260の呼出しの登録からの時間をカウントするために、タイマーを維持することができる。関数アクティベータ240は、関数260の呼出しの登録から経過した時間を、あらかじめ決定されたしきい値と比較することができる。 The function activator 240 has a time between the detection of the dialogue event corresponding to one of the attached event handlers 250A-N and the registration of the call to the function 260 below a predetermined threshold. You can decide if there is one. If the dialogue event corresponding to one of the attached event handlers 250A-N other than the event handler 250A is detected prior to registration, the function activator 240 will be within a predetermined threshold. You can wait for the registration of the call to function 260. In some implementations, the function activator 240 can maintain a timer to count the time since the detection of a dialogue event. The function activator 240 can compare the time elapsed since the detection of the dialogue event with a predetermined threshold. Conversely, if the registration of a call to function 260 occurs prior to the detection of a dialogue event, the function activator 240 will be one of the attached event handlers 250A-N within a predetermined threshold. You can wait for the detection of the corresponding dialogue event. In some implementations, the function activator 240 can maintain a timer to count the time since the registration of the call to the function 260. The function activator 240 can compare the time elapsed since the registration of the call to function 260 with a predetermined threshold.
対話イベントの検出および関数260の呼出しの登録が、あらかじめ決定されたしきい値内に発生したと決定される場合、関数アクティベータ240は、アプリケーション145に、関数260のあらかじめ決定されたアクションを実施させることができる。いくつかの実装形態では、関数アクティベータ240は、イベントハンドラ250Aにおいて構成された関数260のトリガリングを許可することができる。いくつかの実装形態では、関数アクティベータ240は、あらかじめ決定されたアクションを実行するために、関数260の呼出しの登録を取り出すことができる。対照的に、対話イベントの検出および関数260の呼出しの登録が、あらかじめ決定されたしきい値内に発生しなかったと決定される場合、関数アクティベータ240は、関数260のあらかじめ決定されたアクションの実行を防止することができる。いくつかの実装形態では、関数アクティベータ240は、対話イベントを無視することができる。 If it is determined that the detection of the dialogue event and the registration of the call to the function 260 have occurred within a predetermined threshold, the function activator 240 performs the predetermined action of the function 260 on the application 145. Can be made to. In some implementations, function activator 240 can allow triggering of function 260 configured in event handler 250A. In some implementations, the function activator 240 can retrieve the registration of a call to function 260 to perform a predetermined action. In contrast, if it is determined that the detection of a dialogue event and the registration of a call to function 260 did not occur within a predetermined threshold, then the function activator 240 is a predetermined action of function 260. Execution can be prevented. In some implementations, the function activator 240 can ignore dialogue events.
このようにして、対話検証スクリプト160は、ユーザが期待したときに対して早すぎるかまたは遅れた関数260のトリガリングを防止するために、コンテンツアイテム155に異なる挙動をさせることができる。したがって、対話検証スクリプト160は、コンテンツアイテム155および下にある情報リソース150との対話の品質を向上させ得る。さらに、対話検証スクリプト160が、コンテンツアイテム155の残りの構成に最小限の影響を及ぼし得るので、コンテンツアイテム155(たとえば、イベントハンドラ250A〜N)の最初にプログラムされた機能が保たれ得る。
In this way, the
次に図3Aを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証するプロセスのためのシーケンス図である。概して、プロセス300Aは、対話検証スクリプト160なしで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス305Aは、対話検証スクリプト160ありで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス300Aと305Aの両方において、コンテンツアイテム155のon-clickイベントハンドラが、あらかじめ決定されたアクションを実施するために、関数260をトリガするように構成されていることがある。対話検証スクリプト160は、on-clickイベントハンドラを、コンテンツアイテム155のtouch-endイベントハンドラとともにアタッチしていることがある。
Next, with reference to FIG. 3A, what is illustrated is a sequence diagram for the process of verifying the dialogue performed on the content item. In general,
プロセス300Aでは、クライアントデバイス125のユーザは、情報リソース150内で提示されたコンテンツアイテム155のレンダリングに対応する、タッチスクリーン上の点へのタッチ302を実施し得る。アプリケーション145は、コンテンツアイテム155に渡すために、タッチ302をtouch-startイベント304に変換することができる。コンテンツアイテム155のtouch-startイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-startイベント304を無視するか、または関数260とは異なる別の動作を実施することができる。クライアントデバイス125のタッチスクリーンからのタッチ302のリリース306があると、アプリケーション145は、リリース306をtouch-endイベント308と、touch-endイベント308に後続するon-clickイベント310とに変換することができる。タッチ302およびリリース306は、ユーザによるクライアントデバイス125のタッチスクリーンとの同じ対話の一部であり得る。コンテンツアイテム155のtouch-endイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-endイベント308を無視するか、または関数260とは異なる別の動作を実施することができる。しかしながら、コンテンツアイテム155は、関数260をトリガするために、on-clickイベントハンドラとともに構成され得る。on-clickイベント310の検出に応じて、コンテンツアイテム155は、関数260(たとえば、別の情報リソースにナビゲートするための「ExitAPI.exit()」)の登録312を実施することができる。次いで、アプリケーション145は、関数260の実行314(たとえば、他の情報リソースへのナビゲーション)を実施し得る。
In
プロセス305Aでは、機能は、on-clickイベント310まで、プロセス300Aと同様または同じであり得る。この時点で、on-clickイベント310は、元のon-clickイベントハンドラより前に、最初に対話検証スクリプト160を通過し得る。したがって、登録312は、対話検証スクリプト160による処理の後で発生し得る。対話検証スクリプト160に従って、コンテンツアイテム155は、後続の対話イベントを待機するために、タイマーを開始すること316ができる。アプリケーション145はまた、コンテンツアイテム155のon-clickイベントハンドラに渡すために、ユーザによるリリース306を別のon-clickイベント318に変換することもできる。on-clickイベント318を検出すると、on-clickイベントハンドラは、関数260の登録312'を実施することができる。対話検証スクリプト160が、タイマーの開始316および登録312'があらかじめ決定された時間ウィンドウ(たとえば、200ms)内であると決定する場合、対話検証スクリプト160は、アプリケーション145が関数260の実行314'を実施することを許可することができる。
In
次に図3Bを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証するプロセスのためのシーケンス図である。概して、プロセス300Bは、対話検証スクリプト160なしで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス305Bは、対話検証スクリプト160ありで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。図3Aに関して詳述したプロセス300Aおよび305Aの場合のように、プロセス300Bおよび305Bでは、コンテンツアイテム155のon-clickイベントハンドラが、あらかじめ決定されたアクションを実施するために、関数260をトリガするように構成されていることがある。加えて、対話検証スクリプト160は、on-clickイベントハンドラを、コンテンツアイテム155のtouch-endイベントハンドラとともにアタッチしていることがある。
Next, with reference to FIG. 3B, what is illustrated is a sequence diagram for the process of verifying the dialogue performed on the content item. In general,
プロセス300Bでは、クライアントデバイス125のユーザは、情報リソース150内で提示されたコンテンツアイテム155のレンダリングに対応する、タッチスクリーン上の点へのタッチ320を実施し得る。アプリケーション145は、コンテンツアイテム155に渡すために、タッチ320をtouch-startイベント322に変換することができる。コンテンツアイテム155のtouch-startイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-startイベント322を無視するか、または関数260とは異なる別の動作を実施することができる。続いて、クライアントデバイス125のユーザは、タッチスクリーン上のある点から別の点に移動することによって、スクロール324を実施し得る。クライアントデバイス125のタッチスクリーンからのタッチ320および後に続くスクロール324のリリース326があると、アプリケーション145は、リリース326をtouch-endイベント328に変換することができる。タッチ320およびリリース326は、ユーザによるクライアントデバイス125のタッチスクリーンとの同じ対話の一部であり得る。スクロール324がリリース326より前に発生したので、on-clickイベントはトリガされないことがある。コンテンツアイテム155のtouch-endイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-endイベント328を無視するか、または関数260とは異なる別の動作を実施することができる。コンテンツアイテム155が、touch-endイベント328ではなく、on-clickイベントに応じて、関数260をトリガするように構成されているので、プロセス305Bは、プロセス300Bと同様であり得る。
In
次に図3Cを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証するプロセスのためのシーケンス図である。概して、プロセス300Cは、対話検証スクリプト160なしで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス305Cは、対話検証スクリプト160ありで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス300Cと305Cの両方において、コンテンツアイテム155のtouch-endイベントハンドラが、あらかじめ決定されたアクションを実施するために、関数260をトリガするように構成されていることがある。対話検証スクリプト160は、touch-endイベントハンドラを、コンテンツアイテム155のon-clickイベントハンドラとともにアタッチしていることがある。
Next, with reference to FIG. 3C, what is illustrated is a sequence diagram for the process of verifying the dialogue performed on the content item. In general,
プロセス300Cでは、クライアントデバイス125のユーザは、情報リソース150内で提示されたコンテンツアイテム155のレンダリングに対応する、タッチスクリーン上の点へのタッチ340を実施していることがある。アプリケーション145は、コンテンツアイテム155に渡すために、タッチ340をtouch-startイベント342に変換することができる。コンテンツアイテム155のtouch-startイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-startイベント342を無視するか、または関数260とは異なる別の動作を実施することができる。クライアントデバイス125のタッチスクリーンからのタッチ340のリリース344があると、アプリケーション145は、リリース344をtouch-endイベント346と、touch-endイベント346に後続するon-clickイベント348とに変換することができる。タッチ340およびリリース344は、ユーザによるクライアントデバイス125のタッチスクリーンとの同じ対話の一部であり得る。touch-endイベントハンドラが、touch-endイベント346の検出に応じて関数260をトリガするように構成されていることがあるので、コンテンツアイテム155は、関数260(たとえば、別の情報リソースにナビゲートするための「ExitAPI.exit()」)の登録350を実施することができる。次いで、アプリケーション145は、関数260の実行352(たとえば、他の情報リソースへのナビゲーション)を実施し得る。対照的に、on-clickイベントハンドラは、関数260の構成を欠くことがあるので、コンテンツアイテム155は、後続のon-clickイベント348を無視し得る。ユーザの観点からすれば、関数260のトリガリングが、on-clickイベントハンドラではなく、touch-endイベントハンドラに結びつけられるので、関数260の実行352が早すぎるように見えることがあり、予期しないものであり得る。
In
プロセス305Cでは、機能は、touch-endイベント346まで、プロセス300Cと同様または同じであり得る。この時点で、touch-endイベント346は、対話検証スクリプト160を通過して、コンテンツアイテム155の元のtouch-endイベントハンドラまで行き得る。touch-endイベント346の検出に応じて、コンテンツアイテム155は、関数260の呼出しの登録350'を実施することができ、対話検証スクリプト160に従って、アタッチされたイベントハンドラのうちの1つに対応する別の対話イベントを待機するために、タイマーを開始することができる。後続のon-clickイベント348が受信されるとき、コンテンツアイテム155は、登録350'およびon-clickイベント348の受信のタイミングの比較354を実施することができる。関数260の呼出しの登録350'、およびon-clickイベント348の受信が、あらかじめ決定された時間ウィンドウ(たとえば、1500ms)内に発生すると決定される場合、対話検証スクリプト160は、アプリケーション145が関数260の実行352'を実施することを許可することができる。このようにして、早すぎるかまたは予期しない関数260のトリガリングが防止され得る。
In
次に図3Dを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証するプロセスのためのシーケンス図である。概して、プロセス300Dは、対話検証スクリプト160なしで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。プロセス305Dは、対話検証スクリプト160ありで、アプリケーション145および関数260に関して連続的に示されたコンテンツアイテム155の機能を含み得る。図3Cに関して詳述したプロセス300Cおよび305Cの場合のように、プロセス300Dおよび305Dでは、コンテンツアイテム155のtouch-endイベントハンドラが、あらかじめ決定されたアクションを実施するために、関数260をトリガするように構成されていることがある。対話検証スクリプト160は、touch-endイベントハンドラを、コンテンツアイテム155のon-clickイベントハンドラとともにアタッチしていることがある。
Next, with reference to Figure 3D, what is illustrated is a sequence diagram for the process of verifying the dialogue performed on the content item. In general,
プロセス300Dでは、クライアントデバイス125のユーザは、情報リソース150内で提示されたコンテンツアイテム155のレンダリングに対応する、タッチスクリーン上の点へのタッチ360を実施していることがある。アプリケーション145は、コンテンツアイテム155に渡すために、タッチ360をtouch-startイベント362に変換することができる。コンテンツアイテム155のtouch-startイベントハンドラが、関数260の構成を欠いていることがあるので、コンテンツアイテム155は、touch-startイベント362を無視するか、または関数260とは異なる別の動作を実施することができる。続いて、クライアントデバイス125のユーザは、タッチスクリーン上のある点から別の点に移動することによって、スクロール364を実施し得る。クライアントデバイス125のタッチスクリーンからのタッチ360および後に続くスクロール364のリリース366があると、アプリケーション145は、リリース366をtouch-endイベント368に変換することができる。タッチ360およびリリース366は、ユーザによるクライアントデバイス125のタッチスクリーンとの同じ対話の一部であり得る。touch-endイベントハンドラが、touch-endイベント368の検出に応じて関数260をトリガするように構成されていることがあるので、コンテンツアイテム155は、関数260(たとえば、別の情報リソースにナビゲートするための「ExitAPI.exit()」)の登録370を実施することができる。次いで、アプリケーション145は、関数260の実行372(たとえば、他の情報リソースへのナビゲーション)を実施し得る。スクロール364がリリース366より前に発生したので、on-clickイベントはトリガされないことがある。ユーザの観点からすれば、関数260のトリガリングが、on-clickイベントハンドラではなく、touch-endイベントハンドラに結びつけられるので、関数260の実行372が早すぎるように見えることがあり、予期しないものであり得る。
In
プロセス305Dでは、機能は、touch-endイベント368まで、プロセス300Dと同様または同じであり得る。この時点で、touch-endイベント368は、対話検証スクリプト160を通過して、コンテンツアイテム155の元のtouch-endイベントハンドラまで行き得る。touch-endイベント368の検出に応じて、コンテンツアイテム155は、関数260の呼出しの登録370'を実施することができ、対話検証スクリプト160に従って、アタッチされたイベントハンドラのうちの1つに対応する別の対話イベントを待機するために、タイマーを開始することができる。アプリケーション145から渡された、後に続くon-clickイベントがないので、対話検証スクリプト160は、あらかじめ決定された時間ウィンドウ(たとえば、1500ms)内で検出された他の対話イベントがないと決定することができる。したがって、対話検証スクリプト160は、アプリケーション145が関数260の実行を実施することを制限することができる。このようにして、早すぎるかまたは予期しない関数260のトリガリングが防止され得る。
In
次に図4を参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証する方法400の流れ図である。方法400に関して本明細書で説明する機能は、図1に示されるようなシステム100(たとえば、データ処理システム110、コンテンツプロバイダ115、コンテンツパブリッシャ120、およびクライアントデバイス125)、もしくは図6に示されるようなコンピューティングデバイス、またはそれらの任意の組合せによって実施されるか、または別段に実行され得る。
Next, referring to FIG. 4, what is illustrated is a flow chart of
データ処理システムは、データベースからのコンテンツアイテムを識別することができる(405)。データ処理システムは、あらかじめ指定された関数とともに構成されたイベントハンドラを識別することができる(410)。あらかじめ指定された関数は、データ処理システムによって検索されることになる、あらかじめ指定された関数のセットのうちの1つであり得る。いくつかの実装形態では、関数は、APIによって定義され得る。データ処理システムは、関数なしのイベントハンドラを識別することができる(415)。構成なしのイベントハンドラは、関数の構成をもつイベントハンドラとは異なり得る。 The data processing system can identify content items from the database (405). The data processing system can identify event handlers configured with pre-specified functions (410). The pre-specified function can be one of a set of pre-specified functions that will be searched by the data processing system. In some implementations, the function can be defined by the API. The data processing system can identify event handlers without functions (415). An unconfigured event handler can be different from an event handler with a function configuration.
データ処理システムは、イベントハンドラが、あらかじめ定義されたハンドラのリストのうちの1つに一致するか否かを決定することができる(420)。あらかじめ定義されたリストにおける各イベントハンドラは、コンピューティングデバイスのI/Oデバイス上の単一の物理的対話(たとえば、touch-startイベント、touch-endイベント、およびon-clickイベント)に関連付けられ得る。イベントハンドラが、あらかじめ定義されたハンドラのリストのうちの1つに一致すると決定される場合、データ処理システムは、構成なしのイベントハンドラをアタッチすることができる(425)。いくつかの実装形態では、データ処理システムは、構成なしのイベントハンドラと、構成をもつイベントハンドラとを、コンテンツアイテムに挿入されることになるスクリプトにアタッチすることができる。いずれの場合も、データ処理システムは、より多くのイベントハンドラがあるか否かを決定することができる(430)。解析されることになるより多くのイベントハンドラがある場合、データ処理システムは、ステップ415〜430の機能を繰り返すことができる。 The data processing system can determine if an event handler matches one of a predefined list of handlers (420). Each event handler in a predefined list can be associated with a single physical dialogue (for example, touch-start event, touch-end event, and on-click event) on the compute device's I / O device. .. If the event handler is determined to match one of a predefined list of handlers, the data processing system can attach an unconfigured event handler (425). In some implementations, the data processing system can attach unconfigured event handlers and configured event handlers to scripts that will be inserted into content items. In either case, the data processing system can determine if there are more event handlers (430). If there are more event handlers to be parsed, the data processing system can repeat the functions of steps 415-430.
解析されることになるイベントハンドラがそれ以上ない場合、データ処理システムは、コンテンツアイテムのためのコードの上部分にアタッチメントとともにスクリプトを挿入することができる(435)。このようにして、コンテンツアイテムがコンピューティングデバイスによって読み取られ、実行されるとき、スクリプトは、コンテンツアイテムにおいて最初にプログラムされたイベントハンドラに対応するコードより前に読み取られ得る。データ処理システムは、挿入されたスクリプトをもつコンテンツアイテムを、コンピューティングデバイスに提供することができる(440)。次に、コンテンツアイテムが、コンピューティングデバイス上で提示された情報リソースに挿入され得る。 If there are no more event handlers to be parsed, the data processing system can insert a script with an attachment at the top of the code for the content item (435). In this way, when the content item is read and executed by the computing device, the script can be read before the code corresponding to the event handler originally programmed in the content item. Data processing systems can provide content items with inserted scripts to computing devices (440). Content items can then be inserted into the information resource presented on the computing device.
次に図5Aを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証する方法500の流れ図である。方法500に関して本明細書で説明する機能は、図1に示されるようなシステム100、図2に示されるようなシステム200、もしくは図6に示されるようなコンピューティングデバイス、またはそれらの任意の組合せによって実施されるか、または別段に実行され得る。図4に関して、方法500は、ステップ440からの方法400の継続であり得る。方法500は、最初に検出された対話イベントのためのコンテンツアイテムのイベントハンドラが、あらかじめ定義されたアクションを実施するための関数の構成を欠くことがある、シナリオに対応し得る。
Next, with reference to FIG. 5A, what is illustrated is a flow chart of
コンピューティングデバイスは、対話イベントを検出することができる(502)。対話イベントのためのコンテンツアイテムのイベントハンドラは、関数の構成を欠くことがある。いくつかの実装形態では、コンピューティングデバイスは、検出された対話イベントが、アタッチされたイベントハンドラのセットのうちの1つに対応すると決定することができる。あらかじめ定義されたセットにおける各イベントハンドラは、コンピューティングデバイスのユーザによる単一の対話(たとえば、touch-startイベント、touch-endイベント、およびon-clickイベント)に関連し得る。コンピューティングデバイスは、関数呼出しが登録されているか否かを決定することができる(504)。関数は、検出された対話イベントに対応するイベントハンドラとは異なる別のイベントハンドラ上で構成され得る。関数呼出しが登録されている場合、コンピューティングデバイスは、時間しきい値を第1の値に設定することができる(506)。第1の値は、50msから350msに及び得る。一方、関数呼出しが登録されていない場合、コンピューティングデバイスは、時間しきい値を第2の値に設定することができる(508)。第2の値は、1000msから2000msに及び得る。第1の値と第2の値の両方は、関数呼出しの登録と対話イベントの検出との間に経過した時間を考慮するために設定され得る。 Computing devices can detect dialogue events (502). Content item event handlers for interactive events may lack the configuration of functions. In some implementations, the computing device can determine that the detected dialogue event corresponds to one of the set of attached event handlers. Each event handler in a predefined set can be associated with a single dialogue (eg, touch-start event, touch-end event, and on-click event) by the user of the computing device. The computing device can determine whether a function call is registered (504). The function can be configured on a different event handler than the event handler that corresponds to the detected dialogue event. If a function call is registered, the computing device can set the time threshold to the first value (506). The first value can range from 50ms to 350ms. On the other hand, if no function call is registered, the computing device can set the time threshold to a second value (508). The second value can range from 1000ms to 2000ms. Both the first and second values can be set to take into account the time elapsed between the registration of the function call and the detection of the dialogue event.
コンピューティングデバイスは、対話イベントの時間が第1の値だけ関数呼出しの時間より前であるか否かを決定することができる(510)。コンピューティングデバイスは、対話の検出に応じて、対話イベントの時間を識別することができる。コンピューティングデバイスは、関数呼出しの登録に応じて、関数呼出しの時間を識別することができる。コンピューティングデバイスは、現在の時間が第2の値だけ対話イベントの時間より前であるか否かを決定することができる(512)。いくつかの実装形態では、コンピューティングデバイスは、対話イベントの検出の時間から開始して、現在の時間を追跡するために、タイマーを維持することができる。コンピューティングデバイスは、第2の値に設定された時間しきい値内で、対話イベントの検出を待機することができる。現在の時間が第2の値だけ対話イベントの時間より後である場合、コンピューティングデバイスは、関数呼出しの登録を監視することができる(514)。関数呼出しの登録が検出されない場合、コンピューティングデバイスは、ステップ512および514の機能を繰り返し得る。
The computing device can determine whether the time of the dialogue event is the first value before the time of the function call (510). The computing device can identify the time of the dialogue event depending on the detection of the dialogue. The computing device can identify the time of the function call according to the registration of the function call. The computing device can determine whether the current time is a second value before the time of the dialogue event (512). In some implementations, the computing device can start from the time of detection of the dialogue event and maintain a timer to keep track of the current time. The computing device can wait for the detection of the dialogue event within the time threshold set to the second value. If the current time is only a second value after the time of the dialogue event, the computing device can monitor the registration of the function call (514). If the registration of the function call is not detected, the computing device may repeat the functions of
対話イベントの時間が第1の値だけ関数呼出しの時間より後であるか、または、現在の時間が第2の値だけ対話イベントの時間の後である場合、コンピューティングデバイスは、対話イベントを無視することができる(516)。コンピューティングデバイスはまた、関数呼出しが登録されている場合、関数呼出しの実行を防止することもできる。一方、対話イベントの時間が第1の値だけ関数呼出しの時間の後であるか、または、現在の時間が第2の値だけ対話イベントの時間より前であるとき、関数呼出しの登録が検出される場合、コンピューティングデバイスは、関数呼出しを実行することができる(518)。いくつかの実装形態では、コンピューティングデバイスは、関数呼出しの実行を許可することができる。 If the dialogue event time is after the function call time by the first value, or the current time is after the dialogue event time by the second value, the computing device ignores the dialogue event. Can be (516). The computing device can also prevent the execution of the function call if the function call is registered. On the other hand, when the conversation event time is after the function call time by the first value, or when the current time is before the function call time by the second value, the function call registration is detected. If so, the computing device can make a function call (518). In some implementations, the computing device can allow the execution of function calls.
次に図5Bを参照すると、図示されているものは、コンテンツアイテム上で実施される対話を検証する方法550の流れ図である。方法550に関して本明細書で説明する機能は、図1に示されるようなシステム100、図2に示されるようなシステム200、もしくは図6に示されるようなコンピューティングデバイス、またはそれらの任意の組合せによって実施されるか、または別段に実行され得る。図4に関して、方法550は、ステップ440からの方法400の継続であり得る。方法550は、上記で詳述した方法500と同様であり得、検出対話イベントに対応するイベントハンドラが、あらかじめ決定されたアクションを実施するために、関数呼出しをトリガするように構成される、シナリオのためのものであり得る。
Next, with reference to FIG. 5B, what is illustrated is a flow chart of
コンピューティングデバイスは、対話イベントを検出することができる(552)。対話イベントの検出とともに、コンピューティングデバイスは、関数呼出しを登録することができる(554)。対話イベントのためのコンテンツアイテムのイベントハンドラは、あらかじめ定義されたアクションを実施するための関数とともに構成され得る。いくつかの実装形態では、コンピューティングデバイスは、検出された対話イベントが、関数とともに構成されたイベントハンドラに対応すると決定することができる。いくつかの実装形態では、コンピューティングデバイスは、登録時に関数の実行を防止することができる。コンピューティングデバイスは、アタッチされた対話イベントが検出されるか否かを決定することができる(556)。アタッチされた対話イベントは、あらかじめ定義された、アタッチされたイベントハンドラのセットのうちの1つであり得る。あらかじめ定義されたセットにおける各イベントハンドラは、コンピューティングデバイスのユーザによる単一の対話(たとえば、touch-startイベント、touch-endイベント、およびon-clickイベント)に関連し得る。アタッチされた対話イベントが検出される場合、コンピューティングデバイスは、時間しきい値を第1の値に設定することができる(558)。第1の値は、1000msから2000msに及び得る。一方、アタッチされた対話イベントが検出されない場合、コンピューティングデバイスは、時間しきい値を第2の値に設定することができる(560)。第2の値は、50msから350msに及び得る。 Computing devices can detect dialogue events (552). With the detection of dialogue events, computing devices can register function calls (554). Content item event handlers for interactive events can be configured with functions to perform predefined actions. In some implementations, the computing device can determine that the detected dialogue event corresponds to an event handler configured with the function. In some implementations, the computing device can prevent the function from executing during registration. The computing device can determine whether or not an attached dialogue event is detected (556). An attached dialogue event can be one of a predefined set of attached event handlers. Each event handler in a predefined set can be associated with a single dialogue (eg, touch-start event, touch-end event, and on-click event) by the user of the computing device. If an attached dialogue event is detected, the computing device can set the time threshold to the first value (558). The first value can range from 1000ms to 2000ms. On the other hand, if no attached dialogue event is detected, the computing device can set the time threshold to a second value (560). The second value can range from 50ms to 350ms.
コンピューティングデバイスは、登録の時間が第1の値だけアタッチされた対話イベントの時間より前であるか否かを決定することができる(562)。コンピューティングデバイスは、対話の検出に応じて、対話イベントの時間を識別することができる。コンピューティングデバイスは、関数呼出しの登録に応じて、関数呼出しの時間を識別することができる。コンピューティングデバイスは、現在の時間が第2の値だけ登録の時間より前であるか否かを決定することができる(564)。いくつかの実装形態では、コンピューティングデバイスは、関数呼出しの登録の検出の時間から開始して、現在の時間を追跡するために、タイマーを維持することができる。コンピューティングデバイスは、第2の値に設定された時間しきい値内で、アタッチされた対話イベントの検出を待機することができる。現在の時間が第2の値だけ登録の時間より後である場合、コンピューティングデバイスは、アタッチされた対話イベントを監視することができる(566)。 The computing device can determine whether the registration time is prior to the time of the dialogue event to which the first value is attached (562). The computing device can identify the time of the dialogue event depending on the detection of the dialogue. The computing device can identify the time of the function call according to the registration of the function call. The computing device can determine whether the current time is only a second value before the registration time (564). In some implementations, the computing device can start from the time of detection of the registration of the function call and maintain a timer to keep track of the current time. The computing device can wait for the detection of the attached dialogue event within the time threshold set to the second value. If the current time is only a second value after the registration time, the computing device can monitor the attached dialogue event (566).
関数呼出しの登録が検出されない場合、コンピューティングデバイスは、ステップ564および566の機能を繰り返し得る。登録の時間が第1の値だけ対話イベントの時間より後であるか、または、現在の時間が第2の値だけ登録の時間の後である場合、コンピューティングデバイスは、対話イベントを無視することができる(568)。コンピューティングデバイスはまた、関数呼出しが登録されている場合、関数呼出しの実行を防止することもできる。一方、対話イベントの時間が第1の値だけ関数呼出しの時間の前であるか、または、現在の時間が第2の値だけ対話イベントの時間より前であるとき、関数呼出しの登録が検出される場合、コンピューティングデバイスは、関数呼出しを実行することができる(570)。いくつかの実装形態では、コンピューティングデバイスは、関数呼出しの実行を許可することができる。
If the registration of the function call is not detected, the computing device may repeat the functions of
図6は、いくつかの実装形態による、(データ処理システム110およびその構成要素と、コンテンツプロバイダ115およびその構成要素と、コンテンツパブリッシャ120およびその構成要素と、クライアントデバイス125およびその構成要素とを含む)本明細書で説明するコンピュータシステムのいずれかを実装するために採用され得る、例示的なコンピュータシステム600の全体的なアーキテクチャを示す。コンピュータシステム600は、表示のために、ネットワーク105を介して情報を提供するために使用され得る。図6のコンピュータシステム600は、メモリ625に通信可能に結合された1つまたは複数のプロセッサ620と、1つまたは複数の通信インターフェース605と、1つまたは複数の出力デバイス610(たとえば、1つまたは複数のディスプレイユニット)と、1つまたは複数の入力デバイス615とを備える。プロセッサ620は、データ処理システム110、またはデータ処理システム110の他の構成要素中に含まれ得る。プロセッサ620は、コンテンツプロバイダ115中に含まれ得る。プロセッサ620は、コンテンツパブリッシャ120中に含まれ得る。プロセッサ620は、クライアントデバイス125、またはクライアントデバイス125の他の構成要素中に含まれ得る。
FIG. 6 includes several implementations (data processing system 110 and its components, content provider 115 and its components, content publisher 120 and its components, client device 125 and its components). ) Shows the overall architecture of an exemplary computer system 600 that can be employed to implement any of the computer systems described herein. Computer system 600 may be used to provide information over
図6のコンピュータシステム600では、メモリ625は、任意のコンピュータ可読記憶媒体を備え得、それぞれのシステムのための本明細書で説明する様々な機能を実施するためのプロセッサ実行可能命令などのコンピュータ命令、ならびにそれに関する、それによって生成された、または通信インターフェースもしくは入力デバイス(存在する場合)を介して受信された任意のデータを記憶し得る。図1のシステム100を再度参照すると、データ処理システム110は、特に、1つまたは複数のコンテンツアイテムの利用可能性に関連する情報を記憶するために、メモリ625を含み得る。メモリ625は、データベース140を含み得る。図6に示されるプロセッサ620は、メモリ625中に記憶された命令を実行するために使用され得、そうする際に、また、命令の実行に従って処理および/または生成された様々な情報を、メモリから読み取るか、またはメモリに書き込み得る。
In the computer system 600 of FIG. 6, the memory 625 may include any computer-readable storage medium, such as computer instructions such as processor-executable instructions for performing the various functions described herein for each system. , As well as any data about it, generated by it, or received via a communication interface or input device (if any). Referring again to
図6に示されるコンピュータシステム600のプロセッサ620はまた、命令の実行に従って、様々な情報を送信または受信するために、通信インターフェース605に通信可能に結合されるか、または通信インターフェース605を制御するようにされ得る。たとえば、通信インターフェース605は、ワイヤードもしくはワイヤレスネットワーク、バス、または他の通信手段に結合され得、したがって、コンピュータシステム600が他のデバイス(たとえば、他のコンピュータシステム)に情報を送信するか、または他のデバイスから情報を受信することを可能にし得る。図1、図2、または図6のシステムにおいて明示的に示されないが、1つまたは複数の通信インターフェースが、システム600の構成要素の間の情報フローを容易にする。いくつかの実装形態では、通信インターフェースは、コンピュータシステム600の少なくともいくつかの態様へのアクセスポータルとしてのウェブサイトを提供するように(たとえば、様々なハードウェア構成要素またはソフトウェア構成要素を介して)構成され得る。通信インターフェース605の例には、ユーザインターフェース(たとえば、ウェブページ)が含まれ、ユーザインターフェースを通して、ユーザはデータ処理システム110と通信することができる。
The
図6に示されるコンピュータシステム600の出力デバイス610は、たとえば、命令の実行に関連して、様々な情報が視聴またはそれ以外で知覚されることを可能にするために提供され得る。入力デバイス615は、たとえば、ユーザが手動の調整を行うこと、選択を行うこと、データを入力すること、または、命令の実行中にプロセッサと様々な方法のいずれかにおいて対話することを可能にするために提供され得る。本明細書で説明する様々なシステムのために採用され得る全体的なコンピュータシステムアーキテクチャに関する追加の情報が、本明細書でさらに提供される。 The output device 610 of the computer system 600 shown in FIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with the execution of instructions. The input device 615 allows, for example, the user to make manual adjustments, make selections, enter data, or interact with the processor in any way during the execution of an instruction. Can be provided for. Further information is provided herein regarding the overall computer system architecture that may be employed for the various systems described herein.
本明細書で説明する主題および動作の実装形態は、本明細書で開示する構造およびそれらの構造的等価物を含む、デジタル電子回路において、または有形媒体上で実施されたコンピュータソフトウェア、ファームウェア、もしくはハードウェアにおいて、あるいはそれらのうちの1つまたは複数の組合せにおいて実装され得る。本明細書で説明する主題の実装形態は、1つまたは複数のコンピュータプログラム、すなわち、データ処理装置による実行のための、またはデータ処理装置の動作を制御するために、コンピュータ記憶媒体上に符号化されたコンピュータプログラム命令の1つまたは複数のモジュールとして実装され得る。プログラム命令は、データ処理装置による実行のために、好適な受信機装置に送信するための情報を符号化するために生成される、人工的に生成された伝搬信号、たとえば、マシンにより生成された電気信号、光信号、または電磁信号上で符号化され得る。コンピュータ記憶媒体は、コンピュータ可読記憶デバイス、コンピュータ可読記憶基板、ランダムもしくは順次アクセスメモリアレイもしくはデバイス、またはそれらのうちの1つもしくは複数の組合せであり得るか、またはその中に含まれ得る。その上、コンピュータ記憶媒体は、伝搬信号ではないが、コンピュータ記憶媒体は、人工的に生成された伝搬信号において符号化されたコンピュータプログラム命令のソースまたは宛先を含み得る。コンピュータ記憶媒体はまた、1つまたは複数の別個の物理的構成要素または媒体(たとえば、複数のCD、ディスク、または他の記憶デバイス)であり得るか、またはその中に含まれ得る。 Implementations of the subject matter and operations described herein include computer software, firmware, or implementations implemented in digital electronic circuits or on tangible media, including the structures disclosed herein and their structural equivalents. It can be implemented in hardware or in one or more combinations of them. The embodiments of the subject described herein are encoded on a computer storage medium for execution by one or more computer programs, i.e., or to control the operation of the data processing apparatus. It can be implemented as one or more modules of computer program instructions. Program instructions are artificially generated propagating signals, eg, machine-generated, that are generated to encode information for transmission to a suitable receiver device for execution by a data processing device. It can be encoded on an electrical, optical, or electromagnetic signal. The computer storage medium can be or include a computer-readable storage device, a computer-readable storage board, a random or sequential access memory array or device, or a combination thereof. Moreover, although the computer storage medium is not a propagating signal, the computer storage medium may include a source or destination of computer program instructions encoded in the artificially generated propagating signal. The computer storage medium can also be or be contained within one or more separate physical components or media (eg, multiple CDs, disks, or other storage devices).
本明細書で開示する特徴は、スマートテレビジョンモジュール(または、接続されたテレビジョンモジュール、ハイブリッドテレビジョンモジュールなど)上で実装され得、スマートテレビジョンモジュールは、インターネット接続性を(たとえば、ケーブル、衛星、オーバージエア、または他の信号を介して受信された)より従来のテレビジョンプログラミングソースと統合するように構成された、処理モジュールを含み得る。スマートテレビジョンモジュールは、テレビ受信機に物理的に組み込まれ得るか、あるいは、セットトップボックス、Blu-ray(登録商標)もしくは他のデジタルメディアプレーヤ、ゲームコンソール、ホテルテレビジョンシステム、または他のコンパニオンデバイスなど、別個のデバイスを含み得る。スマートテレビジョンモジュールは、視聴者がウェブ上、ローカルケーブルTVチャネル上、衛星TVチャネル上の、またはローカルハードドライブ上に記憶された、ビデオ、映画、写真、および他のコンテンツを検索および発見することを可能にするように構成され得る。セットトップボックス(STB)またはセットトップユニット(STU)は、チューナーを含み、テレビ受信機および外部の信号ソースに接続し、信号を、次いでテレビジョン画面または他のディスプレイデバイス上に表示されるコンテンツに変え得る、情報アプライアンスデバイスを含み得る。スマートテレビジョンモジュールは、ウェブブラウザおよび複数のストリーミングメディアサービス、接続されたケーブルまたは衛星メディアソース、他のウェブ「チャネル」など、複数の異なるアプリケーションのためのアイコンを含む、ホームスクリーンまたはトップレベルスクリーンを提供するように構成され得る。スマートテレビジョンモジュールは、電子プログラミングガイドをユーザに提供するようにさらに構成され得る。スマートテレビジョンモジュールへのコンパニオンアプリケーションは、ユーザがスマートテレビジョンモジュールなどを制御することを可能にするために、利用可能なプログラムについての追加の情報をユーザに提供するために、モバイルコンピューティングデバイス上で動作可能であり得る。いくつかの実装形態では、特徴は、ラップトップコンピュータもしくは他のパーソナルコンピュータ、スマートフォン、他のモバイルフォン、ハンドヘルドコンピュータ、タブレットPC、または他のコンピューティングデバイス上で実装され得る。いくつかの実装形態では、本明細書で開示する特徴は、(たとえば、別のコンピューティングデバイスまたはネットワーク105との)インターネット接続性を統合するように構成された処理モジュールを含み得る、ウェアラブルデバイスまたは構成要素(たとえば、スマートウォッチ)上で実装され得る。 The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.), which provides internet connectivity (eg, cable, cable, etc.). It may include a processing module configured to integrate with a more conventional television programming source (received via satellite, over-the-air, or other signal). The smart television module can be physically integrated into the television receiver, or it can be a set-top box, Blu-ray® or other digital media player, game console, hotel television system, or other companion. It may include a separate device, such as a device. The Smart Television Module allows viewers to search and discover videos, movies, photos, and other content stored on the web, on local cable TV channels, on satellite TV channels, or on local hard drives. Can be configured to enable. A set-top box (STB) or set-top unit (STU), including a tuner, connects to a television receiver and an external signal source to direct the signal to the content displayed on the television screen or other display device. It may include information appliance devices that can be changed. The smart television module has a home screen or top-level screen that includes icons for multiple different applications such as web browsers and multiple streaming media services, connected cable or satellite media sources, and other web "channels". Can be configured to provide. The smart television module may be further configured to provide the user with an electronic programming guide. Companion applications to smart television modules are on mobile computing devices to provide users with additional information about available programs to allow users to control smart television modules etc. It may be possible to operate with. In some embodiments, the features may be implemented on a laptop computer or other personal computer, smartphone, other mobile phone, handheld computer, tablet PC, or other computing device. In some implementations, the features disclosed herein may include a wearable device or a processing module configured to integrate Internet connectivity (eg, with another computing device or network 105). It can be implemented on a component (eg, a smartwatch).
本明細書で説明する動作は、1つもしくは複数のコンピュータ可読記憶デバイス上に記憶されたデータにおいて、または他のソースから受信されたデータにおいて、データ処理装置によって実施される動作として実施され得る。 The operations described herein can be performed as operations performed by a data processor on data stored on one or more computer-readable storage devices, or on data received from other sources.
「データ処理装置」、「データ処理システム」、「ユーザデバイス」または「コンピューティングデバイス」という用語は、例として、プログラマブルプロセッサ、コンピュータ、システムオンチップ、もしくは複数のシステムオンチップ、または前述の組合せを含む、データを処理するためのすべての種類の装置、デバイス、およびマシンを包含する。装置は、専用論理回路、たとえば、FPGA(フィールドプログラマブルゲートアレイ)、またはASIC(特定用途向け集積回路)を含み得る。装置はまた、ハードウェアに加えて、問題になっているコンピュータプログラムのための実行環境を作成するコード、たとえば、プロセッサファームウェア、プロトコルスタック、データベース管理システム、オペレーティングシステム、クロスプラットフォームランタイム環境、仮想マシン、またはそれらのうちの1つもしくは複数の組合せを構成するコードを含み得る。装置および実行環境は、ウェブサービス、分散コンピューティングおよびグリッドコンピューティングインフラストラクチャなど、様々な異なるコンピューティングモデルインフラストラクチャを実現することができる。コンテンツアイテム評価器130およびスクリプト挿入器135は、1つまたは複数のデータ処理装置、コンピューティングデバイス、またはプロセッサを含むか、または共有することができる。
The terms "data processing device", "data processing system", "user device" or "computing device" are, for example, programmable processors, computers, system-on-chips, or multiple system-on-chips, or combinations described above. Includes all types of devices, devices, and machines for processing data, including. The device may include dedicated logic circuits, such as FPGAs (Field Programmable Gate Arrays) or ASICs (Application Specific Integrated Circuits). In addition to the hardware, the device also has code that creates an execution environment for the computer program in question, such as processor firmware, protocol stacks, database management systems, operating systems, cross-platform runtime environments, virtual machines, etc. Or it may contain code that constitutes one or more combinations of them. Equipment and execution environments can implement a variety of different computing model infrastructures, including web services, distributed computing and grid computing infrastructure. The content item evaluator 130 and
(プログラム、ソフトウェア、ソフトウェアアプリケーション、スクリプト、またはコードとしても知られる)コンピュータプログラムは、コンパイラ型言語またはインタープリタ型言語、宣言型言語または手続き型言語を含む、任意の形式のプログラミング言語において記述され得、スタンドアロンプログラムとして、またはモジュール、コンポーネント、サブルーチン、オブジェクト、もしくはコンピューティング環境において使用するのに好適な他のユニットとしてを含む、任意の形態において展開され得る。コンピュータプログラムは、ファイルシステムにおけるファイルに対応し得るが、そうである必要はない。プログラムは、他のプログラムもしくはデータ(たとえば、マークアップ言語文書中に記憶された1つもしくは複数のスクリプト)を保持するファイルの一部分において、問題になっているプログラム専用の単一のファイルにおいて、または、複数の協調されたファイル(たとえば、1つもしくは複数のモジュール、サブプログラム、もしくはコードの部分を記憶するファイル)において記憶され得る。コンピュータプログラムは、1つのコンピュータ上、または、1つのサイトに位置するか、もしくは複数のサイトにわたって分散され、通信ネットワークによって相互接続される、複数のコンピュータ上で実行されるように展開され得る。 Computer programs (also known as programs, software, software applications, scripts, or code) can be written in any form of programming language, including compiler or interpreted languages, declarative or procedural languages. It can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. Computer programs can, but need not, correspond to files in the file system. A program may be part of a file that holds other programs or data (eg, one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or. , May be stored in multiple coordinated files (eg, a file that stores one or more modules, subprograms, or parts of code). Computer programs may be deployed to run on multiple computers, located on one computer, at one site, or distributed across multiple sites and interconnected by communication networks.
本明細書で説明するプロセスおよび論理フローは、入力データにおいて動作すること、および出力を生成することによって、アクションを実施するために、1つまたは複数のプログラマブルプロセッサが1つまたは複数のコンピュータプログラムを実行することによって実施され得る。プロセスおよび論理フローはまた、専用論理回路、たとえば、FPGA(フィールドプログラマブルゲートアレイ)またはASIC(特定用途向け集積回路)によって実施され得、装置もまた専用論理回路として実装され得る。 The processes and logical flows described herein are one or more programmable processors running one or more computer programs to perform actions by operating on input data and producing outputs. It can be done by doing. Processes and logic flows can also be implemented by dedicated logic circuits, such as FPGAs (Field Programmable Gate Arrays) or ASICs (Application Specific Integrated Circuits), and devices can also be implemented as dedicated logic circuits.
コンピュータプログラムの実行に好適なプロセッサには、例として、汎用マイクロプロセッサと専用マイクロプロセッサの両方、および任意の種類のデジタルコンピュータの任意の1つまたは複数のプロセッサが含まれる。一般に、プロセッサは、読取り専用メモリもしくはランダムアクセスメモリ、または両方から、命令およびデータを受信することになる。コンピュータの本質的な要素は、命令に従ってアクションを実施するためのプロセッサ、ならびに、命令およびデータを記憶するための1つまたは複数のメモリデバイスである。一般に、コンピュータはまた、データを記憶するための1つまたは複数の大容量記憶デバイス、たとえば、磁気ディスク、光磁気ディスク、または光ディスクを含むか、または、それからデータを受信するため、もしくはそれにデータを転送するため、もしくはその両方のために動作可能に結合されることになる。ただし、コンピュータは、そのようなデバイスを有する必要はない。その上、コンピュータは、別のデバイス、たとえば、たとえば、モバイル電話、携帯情報端末(PDA)、モバイルオーディオもしくはビデオプレーヤ、ゲームコンソール、全地球測位システム(GPS)受信機、またはポータブル記憶デバイス(たとえば、ユニバーサルシリアルバス(USB)フラッシュドライブ)中に埋め込まれ得る。コンピュータプログラム命令およびデータを記憶するのに好適なデバイスには、例として、半導体メモリデバイス、たとえば、EPROM、EEPROM、およびフラッシュメモリデバイス、磁気ディスク、たとえば、内蔵ハードディスクまたはリムーバブルディスク、光磁気ディスク、ならびにCD-ROMおよびDVD-ROMディスクを含む、すべての形態の不揮発性メモリ、媒体、およびメモリデバイスが含まれる。プロセッサおよびメモリは、専用論理回路によって補助されるか、または専用論理回路に組み込まれ得る。 Suitable processors for running computer programs include, for example, both general purpose and dedicated microprocessors, and any one or more processors of any type of digital computer. In general, the processor will receive instructions and data from read-only memory, / or random access memory. An essential element of a computer is a processor for performing actions according to instructions, as well as one or more memory devices for storing instructions and data. In general, computers also include, or receive data from, one or more mass storage devices for storing data, such as magnetic disks, magneto-optical disks, or optical discs, or data on it. It will be operably combined for transfer or both. However, the computer does not have to have such a device. Moreover, the computer may be another device, such as a mobile phone, personal digital assistant (PDA), mobile audio or video player, game console, Global Positioning System (GPS) receiver, or portable storage device (eg,). Can be embedded in a universal serial bus (USB) flash drive). Suitable devices for storing computer program instructions and data include, for example, semiconductor memory devices such as EPROM, EEPROM, and flash memory devices, magnetic disks such as internal hard disks or removable disks, magneto-optical disks, and Includes all forms of non-volatile memory, media, and memory devices, including CD-ROMs and DVD-ROM discs. The processor and memory may be assisted by or incorporated into a dedicated logic circuit.
ユーザとの対話を提供するために、本明細書で説明する主題の実装形態は、情報をユーザに表示するためのディスプレイデバイス、たとえば、CRT(陰極線管)、プラズマ、またはLCD(液晶ディスプレイ)モニタと、それによってユーザがコンピュータに入力を与えることができるキーボードおよびポインティングデバイス、たとえば、マウスまたはトラックボールとを有する、コンピュータ上で実装され得る。他の種類のデバイスが、ユーザとの対話を提供するために同様に使用され得る。たとえば、ユーザに与えられるフィードバックは、任意の形態の感覚フィードバック、たとえば、視覚フィードバック、聴覚フィードバック、または触覚フィードバックを含み得、ユーザからの入力は、音響入力、音声入力、または触覚入力を含む、任意の形態で受信され得る。加えて、コンピュータは、ユーザによって使用されるデバイスに文書を送ること、およびそのデバイスから文書を受信することによって、たとえば、ウェブブラウザから受信された要求に応じて、ユーザのクライアントデバイス上のウェブブラウザにウェブページを送ることによって、ユーザと対話することができる。 To provide user interaction, the embodiments of the subject described herein are display devices for displaying information to the user, such as a CRT (cathode tube), plasma, or LCD (liquid crystal display) monitor. And can be implemented on a computer having a keyboard and pointing device, eg, a mouse or trackball, which allows the user to give input to the computer. Other types of devices may be used as well to provide dialogue with the user. For example, the feedback given to the user may include any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback, and input from the user may include acoustic input, audio input, or tactile input. Can be received in the form of. In addition, the computer sends a document to and from a device used by the user, for example, in response to a request received from a web browser, a web browser on the user's client device. You can interact with the user by sending a web page to.
本明細書で説明する主題の実装形態は、バックエンド構成要素を、たとえば、データサーバとして含むか、あるいは、ミドルウェア構成要素、たとえば、アプリケーションサーバを含むか、あるいは、フロントエンド構成要素、たとえば、それを通してユーザが、本明細書で説明する主題の実装形態と対話することができる、グラフィカルユーザインターフェースもしくはウェブブラウザを有するクライアントコンピュータ、または、1つもしくは複数のそのようなバックエンド構成要素、ミドルウェア構成要素、もしくはフロントエンド構成要素の任意の組合せを含む、コンピューティングシステムにおいて実装され得る。システムの構成要素は、任意の形態または任意の媒体のデジタルデータ通信、たとえば、通信ネットワークによって相互接続され得る。通信ネットワークの例には、ローカルエリアネットワーク(「LAN」)およびワイドエリアネットワーク(「WAN」)、インターネットワーク(たとえば、インターネット)、ならびにピアツーピアネットワーク(たとえば、アドホックピアツーピアネットワーク)が含まれる。 Implementations of the subject described herein include a back-end component, eg, as a data server, or a middleware component, eg, an application server, or a front-end component, eg, it. A client computer with a graphical user interface or web browser, or one or more such backend components, middleware components, through which the user can interact with the implementations of the subject matter described herein. , Or can be implemented in a computing system, including any combination of front-end components. The components of the system may be interconnected by digital data communication of any form or medium, eg, a communication network. Examples of communication networks include local area networks (“LAN”) and wide area networks (“WAN”), internetworks (eg, the Internet), and peer-to-peer networks (eg, ad hoc peer-to-peer networks).
システム600またはシステム100などのコンピューティングシステムは、クライアントおよびサーバを含み得る。たとえば、データ処理システム110は、1つまたは複数のデータセンターまたはサーバファームにおいて、1つまたは複数のサーバを含み得る。クライアントおよびサーバは、一般に互いからリモートであり、典型的には、通信ネットワークを通して対話する。クライアントおよびサーバの関係は、それぞれのコンピュータ上でランしており、互いとクライアントサーバ関係を有する、コンピュータプログラムによって生じる。いくつかの実装形態では、サーバは、(たとえば、クライアントデバイスと対話するユーザにデータを表示し、ユーザからユーザ入力を受信するために)データ(たとえば、HTMLページ)をクライアントデバイスに送信する。クライアントデバイスにおいて生成されたデータ(たとえば、ユーザ対話の結果)が、クライアントデバイスからサーバにおいて受信され得る。
Computing systems such as System 600 or
本明細書は、多数の特定の実装詳細を含むが、これらは、いずれかの発明の範囲の限定、または請求され得るものの範囲の限定として解釈されるべきではなく、むしろ、本明細書で説明するシステムおよび方法の特定の実装形態に固有の特徴の説明として解釈されるべきである。別個の実装形態との関連で本明細書で説明するいくつかの特徴はまた、単一の実装形態において組み合わせて実装され得る。逆に、単一の実装形態との関連で説明する様々な特徴もまた、複数の実装形態において別個に、または任意の好適な部分組合せにおいて実装され得る。その上、特徴は、いくつかの組合せにおいて作用するとして上記で説明されることがあり、最初にそのようなものとして請求されることさえあるが、請求される組合せからの1つまたは複数の特徴は、場合によっては、その組合せから削除され得、請求される組合せは、部分組合せ、または部分組合せの変形形態を対象とし得る。 The present specification includes a number of specific implementation details, which should not be construed as a limitation of the scope of any invention, or a limitation of the scope of what can be claimed, rather as described herein. It should be construed as an explanation of the characteristics specific to a particular implementation of the system and method. Some of the features described herein in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, the various features described in the context of a single implementation can also be implemented separately in multiple implementations or in any suitable subcombination. Moreover, features may be described above as acting in some combinations and may even be initially claimed as such, but one or more features from the claimed combination. Can, in some cases, be removed from the combination, and the claimed combination may be a partial combination, or a variant of the partial combination.
同様に、動作は、特定の順序で図面において図示されるが、これは、望ましい結果を達成するために、そのような動作が、図示された特定の順序で、もしくは連続した順序で実施されること、または、すべての図示された動作が実施されることを必要とするものとして理解されるべきではない。場合によっては、特許請求の範囲に記載されているアクションは、異なる順序で実施され、なお、望ましい結果を達成することが可能である。加えて、添付の図面に図示されたプロセスは、望ましい結果を達成するために、必ずしも図示の特定の順序、または連続した順序を必要とするとは限らない。 Similarly, the operations are illustrated in the drawings in a particular order, which means that such operations are performed in the specific order shown or in a continuous order to achieve the desired result. That, or should not be understood as requiring all the illustrated actions to be performed. In some cases, the actions described in the claims may be performed in a different order and still achieve the desired result. In addition, the processes illustrated in the accompanying drawings do not necessarily require the specific order or sequence shown in the illustration to achieve the desired result.
いくつかの状況では、マルチタスキングおよび並列処理が有利であり得る。その上、上記で説明した実装形態における様々なシステム構成要素の分離は、すべての実装形態においてそのような分離を必要とするものとして理解されるべきではなく、説明したプログラム構成要素およびシステムは、一般に単一のソフトウェア製品にともに統合され得るか、または複数のソフトウェア製品にパッケージ化され得ることを理解されたい。コンテンツアイテム評価器130およびスクリプト挿入器135は、データ処理システム110の一部、単一のモジュール、1つもしくは複数の処理モジュールを有する論理デバイス、1つもしくは複数のサーバ、または検索エンジンの一部であり得る。
In some situations, multitasking and parallelism can be advantageous. Moreover, the separation of the various system components in the implementations described above should not be understood as requiring such separation in all implementations, and the program components and systems described are described. It should be understood that in general they can be integrated together into a single software product or packaged into multiple software products. The content item evaluator 130 and
ここでいくつかの例示的な実装形態および実装形態について説明したが、上記は例示的であり、限定ではなく、例として提示されたことは明らかである。具体的には、本明細書で提示した例の多くは、方法の行為またはシステム要素の特定の組合せを伴うが、それらの行為およびそれらの要素は、同じ目的を達成するために、他の方法で組み合わせられ得る。ある実装形態のみに関連して説明した行為、要素、および特徴は、他の実装形態または実装形態における同様の役割から除外されるものではない。 Although some exemplary implementations and implementations have been described here, it is clear that the above are exemplary, not limiting, and presented as examples. Specifically, many of the examples presented herein involve specific combinations of method actions or system elements, but those actions and those elements are other methods to achieve the same purpose. Can be combined with. Actions, elements, and features described in relation to one implementation alone are not excluded from similar roles in other implementations or implementations.
本明細書で使用する言い回しおよび専門用語は、説明のためのものであり、限定として見なされるべきではない。本明細書での「含む(including)」「備える(comprising)」「有する(having)」「含む(containing)」「伴う(involving)」「によって特徴づけられる(characterized by)」「ことを特徴とする(characterized in that)」、およびそれらの変形形態の使用は、その後に列挙される項目、それらの等価物、および追加の項目、ならびに、排他的にその後に列挙される項目からなる代替実装形態を包含するように意図されている。一実装形態では、本明細書で説明するシステムおよび方法は、説明する要素、行為、または構成要素のうちの1つ、2つ以上の各組合せ、または全部からなる。 The wording and terminology used herein are for illustration purposes only and should not be considered limiting. Characterized by "including," "comprising," "having," "containing," "involving," "characterized by," and "characterized by," as used herein. The use of "characterized in that", and their variants, is an alternative implementation consisting of the items listed thereafter, their equivalents, and additional items, as well as the items listed exclusively thereafter. Is intended to include. In one implementation, the systems and methods described herein consist of one, two or more combinations, or all of the elements, actions, or components described.
本明細書で単数形において言及したシステムおよび方法の実装形態または要素または行為へのいかなる言及も、複数のこれらの要素を含む実装形態をも包含し得、本明細書のいかなる実装形態または要素または行為への複数形におけるいかなる言及も、単一の要素のみを含む実装形態をも包含し得る。単数形または複数形における言及は、本開示のシステムまたは方法、それらの構成要素、行為、または要素を単一の構成または複数の構成に限定するものではない。いずれかの情報、行為、または要素に基づいている、いずれかの行為または要素への言及は、その行為または要素がいずれかの情報、行為、または要素に少なくとも部分的に基づく実装形態を含み得る。 Any reference to an implementation or element or action of a system and method referred to herein in the singular may include any implementation or element or action comprising any of these elements. Any reference in the plural to an act may include an implementation containing only a single element. References in the singular or plural form are not intended to limit the systems or methods of the present disclosure, their components, acts, or elements to a single or multiple components. References to any action or element that are based on any information, action, or element may include an implementation in which the action or element is at least partially based on any information, action, or element. ..
本明細書で開示するいかなる実装形態も、任意の他の実装形態と組み合わせられてよく、「実装形態」、「いくつかの実装形態」、「代替実装形態」、「様々な実装形態」、「一実装形態」などへの言及は、必ずしも相互排他的であるとは限らず、実装形態に関連して説明する特定の特徴、構造、または特性が、少なくとも1つの実装形態中に含まれ得ることを示すものである。本明細書で使用するそのような用語は、必ずしもすべて同じ実装形態に言及しているとは限らない。いかなる実装形態も、包含的にまたは排他的に、本明細書で開示する態様および実装形態に一致するいずれかの方法で、任意の他の実装形態と組み合わせられてよい。 Any implementations disclosed herein may be combined with any other implementation, "implementation", "some implementations", "alternative implementations", "various implementations", "various implementations", ". References such as "Implementation" are not necessarily mutually exclusive, and specific features, structures, or characteristics described in relation to the implementation may be included in at least one implementation. Is shown. Not all such terms used herein refer to the same implementation. Any implementation may be inclusively or exclusively combined with any other implementation in any manner consistent with the aspects and implementations disclosed herein.
「または(or)」への言及は、「または(or)」を使用して説明するいかなる用語も、説明する用語のうちの単一、2つ以上、および全部のいずれかを示し得るように、包含的として解釈され得る。 References to "or" so that any term described using "or" may refer to any one, two or more, or all of the terms described. , Can be interpreted as inclusive.
図面、発明を実施するための形態、またはいずれかの請求項における技術的特徴の後に参照符号が続く場合、参照符号は、図面、発明を実施するための形態、および特許請求の範囲の了解度を増すことを唯一の目的として含まれている。したがって、参照符号もそれらの不在も、いかなる請求項要素の範囲におけるいかなる限定の効果を有するものでもない。 Where a drawing, a form for carrying out an invention, or a technical feature in any claim is followed by a reference code, the reference code is the drawing, the form for carrying out the invention, and the intelligibility of the claims. It is included with the sole purpose of increasing. Thus, neither the reference codes nor their absence have any limiting effect within the scope of any claim element.
本明細書で説明するシステムおよび方法は、それらの特性から逸脱することなしに、他の特定の形態において実施され得る。本明細書で提供する例は、コンテンツアイテム上で実施される対話を検証すること、およびその対応策を展開することに関するが、本明細書で説明するシステムおよび方法は、他の環境に適用され得る。上記の実装形態は、説明したシステムおよび方法の限定ではなく、それらを説明するものである。したがって、本明細書で説明するシステムおよび方法の範囲は、上記の説明ではなく、添付の特許請求の範囲によって示され、特許請求の範囲の等価の意味および範囲内に入る変更は、特許請求の範囲内に包含される。 The systems and methods described herein can be implemented in other particular embodiments without departing from their properties. The examples provided herein relate to validating the dialogues that take place on content items and deploying countermeasures, but the systems and methods described herein apply to other environments. obtain. The above implementations are not limited to the systems and methods described, but are intended to illustrate them. Accordingly, the scope of the systems and methods described herein is indicated by the appended claims rather than the description above, and any changes that fall within the equivalent meaning and scope of the claims are in the claims. It is included in the range.
100 コンピュータネットワーク化された環境、環境、システム
105 ネットワーク
110 データ処理システム
115 コンテンツプロバイダ
120 コンテンツパブリッシャ
125 クライアントデバイス
130 コンテンツアイテム評価器
135 スクリプト挿入器
140 データベース、コンテンツリポジトリまたはデータベース
145 アプリケーション
150 情報リソース
155 コンテンツアイテム、サードパーティコンテンツアイテム
160 対話検証スクリプト
162 ヘッダ
164 本文
200 システム
210A 第1の部分
210B 第2の部分
220 イベント検出器
230 登録ロガー
240 関数アクティベータ
250A〜N イベントハンドラ
260 関数、関数呼出し
302、320、340、360 タッチ
304、322、342、362 touch-startイベント
306、326、344、366 リリース
308、328、346、368 touch-endイベント
310、318、348 on-clickイベント
312、312'、350、350'、370、370' 登録
314、314'、352、352'、372 実行
316 タイマーを開始すること、タイマーの開始
324、364 スクロール
354 比較
600 コンピュータシステム、システム
605 通信インターフェース
610 出力デバイス
615 入力デバイス
620 プロセッサ
625 メモリ
100 Computer networked environment, environment, system
105 network
110 Data processing system
115 Content Provider
120 Content Publisher
125 Client device
130 Content Item Evaluator
135 Script Inserter
140 database, content repository or database
145 application
150 Information resources
155 Content Items, Third Party Content Items
160 Dialogue validation script
162 Header
164 Body
200 system
210A first part
210B second part
220 Event detector
230 Registered Logger
240 function activator
250A ~ N event handler
260 functions, function calls
302, 320, 340, 360 touch
304, 322, 342, 362 touch-start events
306, 326, 344, 366 releases
308, 328, 346, 368 touch-end events
310, 318, 348 on-click events
312, 312', 350, 350', 370, 370' registration
314, 314', 352, 352', 372 Execution
316 Starting the timer, starting the timer
324, 364 scroll
354 comparison
600 computer system, system
605 Communication interface
610 output device
615 Input device
620 processor
625 memory
Claims (20)
1つまたは複数のプロセッサを有するデータ処理システムによって、コンテンツアイテムの第1の部分のコードにおいて、対話検証スクリプトを挿入するステップを含み、前記対話検証スクリプトが、
ユーザによる前記コンテンツアイテムとの第1の対話に対応する第1の対話イベントを検出することであって、前記第1の対話イベントが、前記コンテンツアイテムを情報リソース上に提示するように構成されたアプリケーションによって前記スクリプトに渡され、前記アプリケーションによる、前記第1の対話イベントの検出に応答して、前記情報リソース上に前記コンテンツアイテムが提示される、検出すること、
前記コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別することであって、前記関数呼出しが、前記アプリケーションが前記コンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされ、前記第2の対話イベントが、ユーザによる前記コンテンツアイテムとの第2の対話に対応する、識別すること、
前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の時間があらかじめ決定されたしきい値未満であると決定すること、および
前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させること
を行うように構成される、方法。 A way to verify the dialogue that takes place on a content item,
By a data processing system with one or more processors, the dialogue validation script comprises a step of inserting a dialogue validation script in the code of the first part of the content item.
By detecting a first dialogue event corresponding to a first dialogue with the content item by the user , the first dialogue event is configured to present the content item on an information resource. To detect, the content item is presented on the information resource in response to the application's detection of the first dialogue event , which is passed to the script by the application.
Identifying the registration of a function call to perform a predetermined action through the execution of the code in the second part of the content item, wherein the function call causes the application to the content item. Identifying that the second interaction event corresponds to the second interaction with the content item by the user, triggered in response to passing the second interaction event.
Determining that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold, and the detection of the first dialogue event and the function. It is configured to cause the application to perform the predetermined action in response to the determination that the time between the identification of the registration of the call is less than the predetermined threshold. How to do it.
touch-startイベントおよびtouch-endイベントの後で、第1のon-clickイベントを含む前記第1の対話イベントを検出することであって、前記第1のon-clickイベントが、前記コンテンツアイテムのon-clickイベントハンドラによって処理される、検出すること、
前記第1のon-clickイベントの後で、第2のon-clickイベントを含む前記第2の対話イベントを検出することであって、前記第2のon-clickイベントが、前記コンテンツアイテムの前記on-clickイベントハンドラによって処理される、検出すること、および
前記第2のon-clickイベントと前記第1のon-clickイベントとの間の前記時間が、前記あらかじめ決定されたしきい値未満であると決定すること
を行うようにさらに構成される、請求項1に記載の方法。 The dialogue verification script
The first on-click event is to detect the first dialogue event including the first on-click event after the touch-start event and the touch-end event, and the first on-click event is the content item. Processed by the on-click event handler, to detect,
The second on-click event is to detect the second dialogue event including the second on-click event after the first on-click event, and the second on-click event is the content item. The time between the second on-click event and the first on-click event that is processed and detected by the on-click event handler is less than the predetermined threshold. The method of claim 1, further configured to do what is determined to be.
touch-endイベントを含む前記第2の対話イベントを検出することであって、前記touch-endイベントが、前記コンテンツアイテムのtouch-endイベントハンドラによって処理され、前記touch-endイベントのための前記touch-endイベントハンドラが、前記あらかじめ決定されたアクションを実施するための前記関数呼出しとともに構成される、検出すること、
前記touch-endイベントの検出に応答して、前記あらかじめ決定されたアクションを実行することなしに、前記あらかじめ決定されたアクションを実施するための前記関数呼出しを登録すること、および
前記touch-endイベントの後で、on-clickイベントを含む前記第1の対話イベントを検出することであって、前記on-clickイベントが、前記コンテンツアイテムのon-clickイベントハンドラによって処理される、検出すること
を行うようにさらに構成される、請求項1に記載の方法。 The dialogue verification script
and detecting said second interactive events including t ouch-end The event, the touch-end The event is processed by the touch-end The event handler of the content item, said for the touch-end The event The detection that the touch-end event handler is configured with the function call to perform the predetermined action.
Registering the function call to perform the predetermined action without performing the predetermined action in response to the detection of the touch-end event, and the touch-end event. after, and detecting said first interactive events including o n-the click event, said on-the click event is processed by on-the click event handler for the content item to detect The method of claim 1, further configured to do so.
前記第1の対話イベントの前記検出に応答して、前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行すると決定すること、および
前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行するとの前記決定に基づいて、前記あらかじめ決定されたしきい値を設定すること
を行うようにさらに構成される、請求項1に記載の方法。 The dialogue verification script
In response to said detection of the first dialogue event, it is determined that said detection of said first dialogue event precedes said said registration of the function call, and said said detection of said first dialogue event. The method of claim 1, further configured to set the predetermined threshold value based on the determination to precede the registration of the function call.
前記第1の対話イベントに対応する第1のタイプの対話を処理するための第1のイベントハンドラを介して、前記第1の対話イベントを検出すること、および
前記第1のタイプの対話、および前記第2の対話イベントに対応する第2のタイプの対話のうちの少なくとも1つを処理するための、第2のイベントハンドラを介して、前記第2の対話イベントを検出すること
を行うようにさらに構成される、請求項1に記載の方法。 The dialogue verification script
Via the first event handler for processing the interaction of a first type corresponding to said first interactive event, before Symbol detecting a first interactive event, and the first type of interaction, performed and the second corresponding to the second interaction event type for processing at least one of the dialogue, that through a second event handler to detect the previous SL second interactive event The method of claim 1, further configured as such.
前記データ処理システムによって、前記あらかじめ決定されたアクションを実施するための複数のあらかじめ決定されたイベントハンドラのうちの1つに一致する、前記コンテンツアイテムの前記第2の部分のコードにおける、前記第2の対話イベントを処理するためのイベントハンドラを識別するステップであって、前記イベントハンドラが、前記あらかじめ決定されたアクションを実施するようにあらかじめ構成される、ステップをさらに含み、
前記対話検証スクリプトを挿入するステップが、前記コンテンツアイテムの前記第1の部分のコードにおける、あらかじめ決定された複数のイベントハンドラに、前記イベントハンドラをアタッチするステップであって、前記第1の部分のコードが、前記第2の部分のコードの実行より前に、クライアント上でランしている前記アプリケーションによって実行されることになる、ステップをさらに含む、請求項1に記載の方法。 The above method
The second in the code of the second part of the content item that matches one of a plurality of predetermined event handlers for performing the predetermined action by the data processing system. A step of identifying an event handler for processing an interactive event of, further comprising a step in which the event handler is preconfigured to perform the predetermined action.
The step of inserting the dialogue verification script is a step of attaching the event handler to a plurality of predetermined event handlers in the code of the first part of the content item, and is a step of attaching the event handler to the plurality of predetermined event handlers. The method of claim 1, further comprising a step in which the code will be executed by the application running on the client prior to the execution of the code in the second part.
コンテンツアイテムの第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行可能であり、ユーザによる前記コンテンツアイテムとの第1の対話に対応する第1の対話イベントを検出するように構成された、イベント検出器であって、前記第1の対話イベントが、前記コンテンツアイテムを情報リソース上に提示するように構成されたアプリケーションによってスクリプトに渡され、前記アプリケーションによる、前記第1の対話イベントの検出に応答して、前記情報リソース上に前記コンテンツアイテムが提示される、イベント検出器と、
前記第1の部分のコードにおいて符号化され、前記1つまたは複数のプロセッサ上で実行可能であり、前記コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別するように構成された、登録ロガーであって、前記関数呼出しが、前記アプリケーションが前記コンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされるように構成され、前記第2の対話イベントが、ユーザによる前記コンテンツアイテムとの対話に対応する、登録ロガーと、
前記第1の部分のコードにおいて符号化され、前記1つまたは複数のプロセッサ上で実行可能な、関数アクティベータであって、
前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の時間があらかじめ決定されたしきい値未満であると決定すること、および
前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させること
を行うように構成された、関数アクティベータと
を備えるシステム。 A system for verifying dialogues that take place on content items.
Encoded in the code of the first part of the content item, run on one or more processors, to detect the first interaction event corresponding to the user 's first interaction with the content item. The first interactive event is passed to a script by an application configured to present the content item on an information resource, and the first interactive event is passed by the application . With an event detector, the content item is presented on the information resource in response to detection of an interactive event.
Encoded in the code of the first part, it can be executed on the one or more processors, and performs a predetermined action through the execution of the code of the second part of the content item. A registration logger configured to identify the registration of a function call for, said function call to be triggered in response to the application passing a second interactive event to the content item. And the second dialogue event corresponds to the user interacting with the content item with the registered logger.
A function activator encoded in the code of the first part and running on the one or more processors.
Determining that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold, and the detection of the first dialogue event and the function. It is configured to cause the application to perform the predetermined action in response to the determination that the time between the identification of the registration of the call is less than the predetermined threshold. Also, a system with a function activator.
touch-startイベントおよびtouch-endイベントの後で、第1のon-clickイベントを含む前記第1の対話イベントを検出すること、
前記第1のon-clickイベントの後で、第2のon-clickイベントを含む前記第2の対話イベントを検出することであって、前記第2のon-clickイベントが、前記コンテンツアイテムのon-clickイベントハンドラによって処理され、前記第2のon-clickイベントのための前記イベントハンドラが、前記あらかじめ決定されたアクションを実施するための前記関数呼出しとともに構成される、検出すること
を行うようにさらに構成され、
前記登録ロガーが、前記第2のon-clickイベントを含む前記第2の対話イベントの前記検出に応じて、前記関数呼出しの前記登録を識別するようにさらに構成される、請求項8に記載のシステム。 The event detector
Detecting the first dialogue event, including the first on-click event , after the touch-start and touch-end events,
The second on-click event is to detect the second dialogue event including the second on-click event after the first on-click event, and the second on-click event is the on of the content item. -The event handler processed by the click event handler and for the second on-click event is configured to perform detection along with the function call to perform the predetermined action. Further configured,
The registration logger, pre SL in response to the detection of the second interactive events including a second on-the click event, further configured to identify the registration of the function call, according to claim 8 System.
touch-endイベントの後で、on-clickイベントを含む前記第1の対話イベントを検出することであって、前記on-clickイベントが、前記コンテンツアイテムのon-clickイベントハンドラによって処理される、検出すること
前記touch-endイベントを含む前記第2の対話イベントを検出することであって、前記touch-endイベントが、前記コンテンツアイテムのtouch-endイベントハンドラによって処理され、前記touch-endイベントのための前記touch-endイベントハンドラが、前記あらかじめ決定されたアクションを実施するための前記関数呼出しとともに構成される、検出すること
を行うようにさらに構成され、
前記登録ロガーが、前記touch-endイベントハンドラを含む前記第2の対話イベントの前記検出に応じて、前記関数呼出しの前記登録を識別するようにさらに構成される、請求項8に記載のシステム。 The event detector
After touch-end The event, and detecting said first interactive events including o n-the click event, the on-the click event is processed by on-the click event handler of the content item, To detect
And detecting said second interactive events including pre Symbol touch-end The event, the touch-end The event, the is processed by touch-end The event handler of the content item, for the touch-end The event The touch-end event handler is further configured to perform detection, which is configured with the function call to perform the predetermined action.
8. The system of claim 8, wherein the registration logger is further configured to identify the registration of the function call in response to the detection of the second dialogue event, including the touch-end event handler.
前記関数アクティベータが、前記第1の対話イベントを前記第2の対話イベントとペアにされるものとする識別に応答して、前記第1の対話イベントの検出と、関連付けられた前記関数呼出しの前記登録の識別との間の前記時間が、前記あらかじめ決定されたしきい値未満であると決定するようにさらに構成される、請求項8に記載のシステム。 The event detector identifies the first dialogue event as being paired with the second dialogue event from a plurality of attached dialogue events, wherein the plurality of attached dialogue events. The event is further configured to do something to detect, including at least one of the on-click and touch-end events.
The function activator responds to the identification that the first dialogue event is to be paired with the second dialogue event, in response to the detection of the first dialogue event and the associated function call. 8. The system of claim 8, further configured to determine that the time between the identification of the registration is less than the predetermined threshold.
前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行すると決定すること、
前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行するとの前記決定に基づいて、前記あらかじめ決定されたしきい値を設定すること、および
前記第2の対話イベントの前記検出の後で、前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させること
を行うようにさらに構成される、請求項8に記載のシステム。 The function activator
Determining that the detection of the first dialogue event precedes the registration of the function call.
Setting the predetermined threshold value based on the determination that the detection of the first dialogue event precedes the registration of the function call, and the detection of the second dialogue event. 8 is further configured to cause the application to perform the predetermined action in response to the determination that the time is less than the predetermined threshold. The system described in.
前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に後続すると決定すること、
前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に後続するとの前記決定に基づいて、前記あらかじめ決定されたしきい値を設定すること、および
前記第1の対話イベントの前記検出の後で、前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させること
を行うようにさらに構成される、請求項8に記載のシステム。 The function activator
Determining that the detection of the first dialogue event follows the registration of the function call.
Setting the predetermined threshold value based on the determination that the detection of the first dialogue event follows the registration of the function call, and the detection of the first dialogue event. 8 is further configured to cause the application to perform the predetermined action in response to the determination that the time is less than the predetermined threshold. The system described in.
コンテンツアイテムの第1の部分のコードにおいて符号化され、1つまたは複数のプロセッサ上で実行している、対話検証器によって、ユーザによる前記コンテンツアイテムとの第1の対話に対応する第1の対話イベントを検出するステップであって、前記第1の対話イベントが、前記コンテンツアイテムを情報リソース上に提示するように構成されたアプリケーションによってスクリプトに渡され、前記アプリケーションによる、前記第1の対話イベントの検出に応答して、前記情報リソース上に前記コンテンツアイテムが提示される、ステップと、
前記対話検証器によって、前記コンテンツアイテムの第2の部分のコードの実行を介して、あらかじめ決定されたアクションを実施するための関数呼出しの登録を識別するステップであって、前記関数呼出しが、前記アプリケーションが前記コンテンツアイテムに第2の対話イベントを渡すことに応じてトリガされるように構成され、前記第2の対話イベントが、ユーザによる前記コンテンツアイテムとの第2の対話に対応する、ステップと、
前記対話検証器によって、前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の時間があらかじめ決定されたしきい値未満であると決定するステップと、
前記対話検証器によって、前記第1の対話イベントの検出と前記関数呼出しの前記登録の識別との間の前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させるステップと
を含む方法。 A way to verify the dialogue that takes place on a content item,
A first dialogue corresponding to a user 's first dialogue with the content item by a dialogue verifier, encoded in the code of the first part of the content item and running on one or more processors. In the step of detecting an event, the first dialogue event is passed to a script by an application configured to present the content item on an information resource, and the first dialogue event by the application. A step and a step in which the content item is presented on the information resource in response to a detection.
The step of identifying the registration of a function call for performing a predetermined action by the dialogue verifier through the execution of the code of the second part of the content item, wherein the function call is said. application in response to passing a second interactive event on the content item is adapted to be triggered, the second interactive event corresponds to a second interaction with the content item by the user; ,
A step of determining by the dialogue verifier that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than a predetermined threshold.
The application responds to a determination by the dialogue verifier that the time between the detection of the first dialogue event and the identification of the registration of the function call is less than the predetermined threshold. A method comprising the step of performing the predetermined action.
前記対話検証器によって、前記第1のon-clickイベントの後で、第2のon-clickイベントを含む前記第2の対話イベントを検出するステップであって、前記第2のon-clickイベントが、前記コンテンツアイテムのon-clickイベントハンドラによって処理され、前記第2のon-clickイベントのための前記イベントハンドラが、前記あらかじめ決定されたアクションを実施するための前記関数呼出しとともに構成される、ステップ
をさらに含み、
前記関数呼出しの前記登録を識別するステップが、前記第2のon-clickイベントを含む前記第2の対話イベントの前記検出に応じて、前記関数呼出しの前記登録を識別するステップをさらに含む、請求項15に記載の方法。 Detecting said first interactive event, after the touch-start event and touch-end The event, further comprising detecting said first interactive events including a first on-the click event, the method but,
The second on-click event is a step of detecting the second dialogue event including the second on-click event after the first on-click event by the dialogue verifier. , The event handler for the second on-click event, which is processed by the on-click event handler for the content item, is configured with the function call to perform the predetermined action. Including
Identifying the registration of the function call, before SL in response to the detection of the second interactive events including a second on-the click event, further comprising identifying the registration of the function call, The method of claim 15.
前記対話検証器によって、前記touch-endイベントを含む前記第2の対話イベントを検出するステップであって、前記touch-endイベントが、前記コンテンツアイテムのtouch-endイベントハンドラによって処理され、前記touch-endイベントのための前記touch-endイベントハンドラが、前記あらかじめ決定されたアクションを実施するための前記関数呼出しとともに構成される、ステップ
をさらに含み、
前記関数呼出しの前記登録を識別するステップが、前記touch-endイベントハンドラを含む前記第2の対話イベントの前記検出に応じて、前記関数呼出しの前記登録を識別するステップをさらに含む、請求項15に記載の方法。 The step of detecting the first dialogue event is a step of detecting the first dialogue event including the on-click event after the touch-end event, and the on-click event is the content. The method, which further comprises steps, is processed by the item's on-click event handler.
By the interaction verifier, comprising the steps of: detecting a second interaction events including pre Symbol touch-end The event, the touch-end The event is processed by the touch-end The event handler of the content item, the touch -The touch-end event handler for the end event further comprises a step configured with the function call to perform the predetermined action.
15. The step of identifying the registration of the function call further comprises a step of identifying the registration of the function call in response to the detection of the second dialogue event including the touch-end event handler. The method described in.
前記対話検証器によって、前記第1の対話イベントを、複数のアタッチされた対話イベントからの前記第2の対話イベントとペアにされるものとして識別するステップであって、前記複数のアタッチされた対話イベントが、on-clickイベントおよびtouch-endイベントのうちの少なくとも1つを含む、ステップ
をさらに含み、
前記時間が前記あらかじめ決定されたしきい値未満であると決定するステップが、前記第1の対話イベントを前記第2の対話イベントとペアにされるものとする識別に応答して、前記第1の対話イベントの検出と、関連付けられた前記関数呼出しの前記登録の識別との間の前記時間が、前記あらかじめ決定されたしきい値未満であると決定するステップをさらに含む、請求項15に記載の方法。 The above method
A step of identifying the first dialogue event as being paired with the second dialogue event from a plurality of attached dialogue events by the dialogue verifier, wherein the plurality of attached dialogues. The event further contains steps, including at least one of the on-click and touch-end events.
The first step in response to the identification that the first dialogue event is to be paired with the second dialogue event by determining that the time is less than the predetermined threshold. 15 further comprises determining that the time between the detection of the dialogue event and the identification of the registration of the associated function call is less than the predetermined threshold. the method of.
前記対話検証器によって、前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行すると決定するステップと、
前記対話検証器によって、前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に先行するとの前記決定に基づいて、前記あらかじめ決定されたしきい値を設定するステップと
をさらに含み、
前記アプリケーションに前記あらかじめ決定されたアクションを実施させるステップが、前記第2の対話イベントの前記検出の後で、前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させるステップをさらに含む、請求項15に記載の方法。 The above method
A step of determining that the detection of the first dialogue event precedes the registration of the function call by the dialogue verifier.
The dialogue verifier further comprises setting the predetermined threshold value based on the determination that the detection of the first dialogue event precedes the registration of the function call.
The step of causing the application to perform the predetermined action, in response to the determination that the time is less than the predetermined threshold after the detection of the second dialogue event, said. 15. The method of claim 15, further comprising causing the application to perform the predetermined action.
前記対話検証器によって、前記第1の対話イベントの前記検出が、前記関数呼出しの前記登録に後続すると決定するステップと、
前記対話検証器によって、前記第1の対話イベントの前記検出が前記関数呼出しの前記登録に後続するとの前記決定に基づいて、前記あらかじめ決定されたしきい値を設定するステップと
をさらに含み、
前記アプリケーションに前記あらかじめ決定されたアクションを実施させるステップが、前記第1の対話イベントの前記検出の後で、前記時間が前記あらかじめ決定されたしきい値未満であるとの決定に応じて、前記アプリケーションに前記あらかじめ決定されたアクションを実施させるステップをさらに含む、請求項15に記載の方法。 The above method
The step of determining that the detection of the first dialogue event follows the registration of the function call by the dialogue verifier.
The dialogue verifier further comprises setting the predetermined threshold value based on the determination that the detection of the first dialogue event follows the registration of the function call.
The step of causing the application to perform the predetermined action, in response to the determination that the time is less than the predetermined threshold after the detection of the first dialogue event, said. 15. The method of claim 15, further comprising causing the application to perform the predetermined action.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/938,990 US10970139B2 (en) | 2018-03-28 | 2018-03-28 | Controlling the triggering of function calls from content items |
US15/938,990 | 2018-03-28 | ||
PCT/US2018/049977 WO2019190587A1 (en) | 2018-03-28 | 2018-09-07 | Controlling the triggering of function calls from content items |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2021504774A JP2021504774A (en) | 2021-02-15 |
JP6977155B2 true JP6977155B2 (en) | 2021-12-08 |
Family
ID=63684602
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020519079A Active JP6977155B2 (en) | 2018-03-28 | 2018-09-07 | Controlling the triggering of function calls from content items |
Country Status (6)
Country | Link |
---|---|
US (1) | US10970139B2 (en) |
EP (1) | EP3676709B1 (en) |
JP (1) | JP6977155B2 (en) |
KR (1) | KR102392095B1 (en) |
CN (1) | CN111226198B (en) |
WO (1) | WO2019190587A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
DE102017000569A1 (en) * | 2017-01-23 | 2018-07-26 | e.solutions GmbH | Method, computer program product and device for determining input areas in a graphical user interface |
US10783316B2 (en) | 2018-02-26 | 2020-09-22 | Servicenow, Inc. | Bundled scripts for web content delivery |
US11340964B2 (en) * | 2019-05-24 | 2022-05-24 | International Business Machines Corporation | Systems and methods for efficient management of advanced functions in software defined storage systems |
CN113867553B (en) * | 2020-06-15 | 2023-09-26 | 武汉斗鱼鱼乐网络科技有限公司 | Quick click processing method and device, storage medium and electronic equipment |
US11816206B2 (en) * | 2021-02-25 | 2023-11-14 | Red Hat, Inc. | Function pointer protection |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6275232B1 (en) | 1998-12-14 | 2001-08-14 | Sony Corporation | Polymorphic event handling for zooming graphical user interface |
DE60230512D1 (en) | 2002-09-25 | 2009-02-05 | Sap Ag | Method and computer system for event handling |
KR101094129B1 (en) | 2009-10-20 | 2011-12-14 | 주식회사 인프라웨어 | Method of executing instruction and apparatus performing the same |
CA2686995A1 (en) | 2009-12-03 | 2011-06-03 | Ibm Canada Limited - Ibm Canada Limitee | Handling user-interface gestures in non-rectangular regions |
CN103336787B (en) * | 2013-06-05 | 2017-07-07 | 百度在线网络技术（北京）有限公司 | A kind of method and apparatus for scaling webpage |
US9733716B2 (en) * | 2013-06-09 | 2017-08-15 | Apple Inc. | Proxy gesture recognizer |
US10067652B2 (en) | 2013-12-24 | 2018-09-04 | Dropbox, Inc. | Providing access to a cloud based content management system on a mobile device |
US20170045981A1 (en) * | 2015-08-10 | 2017-02-16 | Apple Inc. | Devices and Methods for Processing Touch Inputs Based on Their Intensities |
EP3249554A1 (en) * | 2016-05-24 | 2017-11-29 | Google LLC | Systems and methods for client-side dynamic information resource activation and deactivation |
-
2018
- 2018-03-28 US US15/938,990 patent/US10970139B2/en active Active
- 2018-09-07 CN CN201880064904.7A patent/CN111226198B/en active Active
- 2018-09-07 WO PCT/US2018/049977 patent/WO2019190587A1/en unknown
- 2018-09-07 JP JP2020519079A patent/JP6977155B2/en active Active
- 2018-09-07 KR KR1020207009368A patent/KR102392095B1/en active IP Right Grant
- 2018-09-07 EP EP18778769.2A patent/EP3676709B1/en active Active
Also Published As
Publication number | Publication date |
---|---|
JP2021504774A (en) | 2021-02-15 |
US20190303215A1 (en) | 2019-10-03 |
KR20200046092A (en) | 2020-05-06 |
EP3676709B1 (en) | 2022-06-22 |
KR102392095B1 (en) | 2022-04-28 |
CN111226198B (en) | 2023-09-12 |
US10970139B2 (en) | 2021-04-06 |
EP3676709A1 (en) | 2020-07-08 |
WO2019190587A1 (en) | 2019-10-03 |
CN111226198A (en) | 2020-06-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6977155B2 (en) | Controlling the triggering of function calls from content items | |
US11068584B2 (en) | Systems and methods for deploying countermeasures against unauthorized scripts interfering with the rendering of content elements on information resources | |
CN108140196B (en) | System and method for reducing latency of content item interactions using client-generated click identifiers | |
US9959192B1 (en) | Debugging interface for inserted elements in a resource | |
US20170309046A1 (en) | Rendering interaction statistics data for content elements of an information resource using a graph element | |
US10205678B2 (en) | Systems and methods for client-side dynamic information resource activation and deactivation | |
US20170309047A1 (en) | Rendering interaction statistics data for content elements of an information resource by identifying client device segments | |
EP3533228B1 (en) | Distribution of network traffic for streaming content | |
US11349942B2 (en) | Methods and apparatus to identify sponsored media in a document object model | |
US20210352150A1 (en) | Maintaining session identifiers across multiple webpages for content selection | |
WO2017189368A1 (en) | Dynamically rendering interaction statistics data for content elements of an information resource using visual styles | |
US9083676B2 (en) | Systems and methods for reliably using ping to account for interactions with electronic content | |
US9319451B2 (en) | Systems and methods for selecting an accounting technique for interactions with electronic content | |
US20180176631A1 (en) | Methods and systems for providing an interactive second screen experience | |
US11089085B2 (en) | Passing of data via deep links for application components |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20200526 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20210622 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20210628 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20210928 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20211011 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20211110 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 6977155Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |