US20170192993A1 - Method and system for generating search shortcuts and inline auto-complete entries - Google Patents
Method and system for generating search shortcuts and inline auto-complete entries Download PDFInfo
- Publication number
- US20170192993A1 US20170192993A1 US15/462,722 US201715462722A US2017192993A1 US 20170192993 A1 US20170192993 A1 US 20170192993A1 US 201715462722 A US201715462722 A US 201715462722A US 2017192993 A1 US2017192993 A1 US 2017192993A1
- Authority
- US
- United States
- Prior art keywords
- identifier
- search
- input
- user
- presenting
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 title claims description 33
- 238000004590 computer program Methods 0.000 claims 1
- 230000008569 process Effects 0.000 description 8
- 238000010586 diagram Methods 0.000 description 6
- 230000006870 function Effects 0.000 description 5
- 230000003993 interaction Effects 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 230000009471 action Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000006978 adaptation Effects 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
Images
Classifications
-
- G06F17/3097—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9032—Query formulation
- G06F16/90324—Query formulation using system suggestions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G06F17/3053—
-
- G06F17/30867—
-
- G06F17/30876—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/0482—Interaction with lists of selectable items, e.g. menus
Definitions
- Embodiments of the present invention relate to network technology, and more particularly to web browsers.
- a user may choose to perform a task such as searching for content within a website.
- many websites have their own search engines which allow users to search for content within the websites or search for specialized types of information.
- a website may provide a “search box” on its home page to allow users to search for content.
- search box In order to use a website's search box, users first navigate to the website and then search content using the search box.
- users may perform other tasks. In many cases users perform a certain task or a certain combination of tasks during repeated visits to a website or content area.
- Embodiments of the present invention relate to generation of search shortcuts.
- Search shortcuts may allow a user to perform search of content in a content area prior to navigating to a content area where the search is to be performed.
- An embodiment includes, detecting text input in a browser, determining if the text input corresponds to an identifier from where a search was previously initiated, and presenting one or more identifiers and an option to search content based on the determining step. Additionally, the embodiment includes receiving an input to select a option to search presented in the presenting step and generating a user interface to allow searching of content associated with a selected identifier based on the receiving step.
- Another embodiment includes, categorizing one or more inputs entered into a browser input receiver, determining a plurality of relevance scores based on the categorizing step, ranking auto-complete entries based on the relevance scores, and presenting one or more of higher ranked auto-complete entries inline in the input receiver of the browser where the one or more inputs were received.
- Another method embodiment includes, determining if a user attempted to navigate to an identifier or if the user provided a search query, presenting one or more search results based on the search query, providing a HTTP request concurrently with the presenting step to retrieve content associated with the identifier, and presenting a user interaction area to determine if the user intended to navigate to the identifier.
- users may be able to search for content within a content area prior to navigating to the content area. Furthermore, work done by a user may be reduced as input text provided by a user may be automatically completed prior to inputting the entire text input.
- FIG. 1 is a diagram illustrating a system for generating search shortcuts, according to an embodiment.
- FIG. 2 is diagram illustrating a repository, according to an embodiment.
- FIG. 3 is a flowchart illustrating receiving and recording of an input in a repository, according to an embodiment.
- FIG. 4 is a flowchart illustrating the operation of a match engine, according to an embodiment.
- FIG. 5 is a flowchart illustrating the operation of a user interface generator, according to an embodiment.
- FIG. 6 is a flowchart illustrating the generation of a search box, according to an embodiment.
- FIG. 7 is a flowchart illustrating searching of content by a user, according to an embodiment.
- FIG. 8 is a flowchart illustrating an exemplary process of determining inline auto-complete candidates, according to an embodiment.
- FIG. 9A and 9B are diagrams illustrating screenshots of an exemplary user interface interaction area of the system in FIG. 1
- Embodiments relate to generating search shortcuts.
- An embodiment includes receiving text input in a browser, determining if the text input corresponds to an identifier from where a search was initiated and presenting one or more URLs based on the determining step and concurrently with the receiving step. Additionally, the embodiment includes receiving an input to select one of the URLs presented in the presenting step and generating a user interface to allow searching of content associated with a selected URL.
- Another embodiment includes, categorizing one or more inputs entered into a browser input receiver, determining a plurality of relevance scores based on the categorizing step, ranking auto-complete entries based on the relevance scores, and presenting one or more of higher ranked auto-complete entries inline in the input receiver of the browser where the one or more inputs were received.
- Another method embodiment includes, determining if a user attempted to navigate to an identifier or if the user provided a search query, presenting one or more search results based on the search query, providing a HTTP request concurrently with the presenting step to retrieve content associated with the identifier, and presenting a user interaction area to determine if the user intended to navigate to the identifier.
- users may be able to search for content within a content area prior to navigating to the content area. Furthermore, work done by a user may be reduced as input text provided by a user may be automatically completed prior to inputting the entire text input.
- identifier refers to a content address.
- An example of an identifier is a uniform resource locator (URL). URLs may address content stored across one or more networks, such as the Internet.
- an identifier may be a path and filename corresponding to a location of a locally store file.
- FIG. 1 is a diagram of system 100 for generating search shortcuts and inline auto-complete entries.
- search shortcuts While the following is described in terms of search shortcuts, the invention is not limited to this embodiment and any other task in place of a search related task may be used. Exemplary tasks may include completing a purchase, checking or composing an email and checking flight or travel information. The invention is applicable to any system having generally the structure of FIG. 1 , or that would benefit from the operation, methods and functions as described herein.
- System 100 includes computing device 105 .
- Computing device 105 can be any type of computing device having one or more processors.
- computing device 105 can be a workstation, mobile device, computer, cluster of computers, set-top box, or other device having at least one processor.
- Such a computing device may include software, firmware, hardware, or a combination thereof
- Software may include one or more applications and an operating system.
- Hardware can include, but is not limited to, a processor, memory and graphical user interface display.
- computing device 105 may include input receiver 102 , input recorder 110 , option generator 120 , repository 130 , match engine 140 , user interface generator 150 . Additionally, user 104 may communicate with input receiver 102 .
- Input receiver 102 may be any form of input system, capable of receiving a text input from a user.
- input receiver 102 may be an input text box in a browser that is capable of receiving an alphanumeric string.
- input receiver 102 may be a uniform resource locator (URL) bar of a browser that receives content addresses.
- Input receiver 102 may receive an identifier from user 104 .
- input receiver 102 may receive input in any form from user 104 and convert the received input into text.
- Input recorder 110 may record identifiers received by input receiver 102 in repository 130 .
- input recorder 110 may record all identifiers that user 104 has requested to navigate.
- Input recorder 110 may also record metadata associated with the content of an identifier. Identifier content metadata is described further in the description.
- Repository 130 may store identifiers received from input recorder 110 .
- repository 130 may store all the identifiers that user 104 has navigated over a period of time. As an example, if user 104 has navigated to the website “http://www.amazon.com,” input recorder 110 may store the identifier “http://www.amazon.com” in repository 130 . Labels, URL patterns, indexes or other ways of storing or managing identifiers and retrieval of identifiers can also be stored in repository 130 .
- Repository 130 can be located at the same or a different location than computing device 105 .
- Repository 130 may be any form of database.
- a database based on the SQLite library may be used.
- SQLite is popular database library known to those skilled in the art and is a form of a transactional SQL database engine.
- In-memory database 180 may be used to store at least a subset of identifiers received by input receiver 102 .
- in-memory database 180 can be instantiated within memory associated with computing device 105 .
- Such memory may include a form of random access memory (RAM).
- RAM random access memory
- in-memory database 180 may have a smaller size and due to its in-memory nature, can be queried near-instantaneously.
- FIG. 2 shows a detailed diagram of repository 130 .
- repository 130 may further include identifier value(s) 210 and identifier content metadata 220 .
- Identifier value(s) 210 may include all identifiers navigated by user 104 .
- Identifier content metadata 220 may include any form of metadata associated with content of an identifier. As an example, not intended to limit the invention, identifier content metadata 220 may indicate if content associated with an identifier includes a search box or any other form of functionality that allows user 104 to perform a task.
- Identifier content metadata 220 may also include a counter to store a count of visits by a user to each identifier in identifier value(s) 210 and a flag to indicate if a particular content area is associated with a search box or any other search mechanism.
- identifier value(s) 210 and identifier content metadata 220 may be database tables and identifier value(s) 210 may point to identifier content metadata 220 or reference identifier content metadata 220 .
- each identifier in identifier value(s) 210 may point to its respective content metadata in identifier content metadata 220 .
- identifier content metadata 220 may be populated by input recorder 110 .
- input recorder 110 may parse content associated with an identifier to determine if there is a search box or any other search functionality embedded within the content to populate identifier content metadata 220 with such information.
- input recorder 110 may check if there is an OpenSearch description document associated with content.
- the OpenSearch specification is known to those skilled in the art as a collection of formats for sharing search results.
- search clients may use OpenSearch description documents to learn about the public interface of a search engine. These description documents may include identifier templates that indicate bow the search client should make search requests. Search engines may also use OpenSearch elements to add search metadata to results in a variety of content formats.
- Match engine 140 checks for matches between text that is being received by input receiver 102 and identifiers that are stored in identifier values 210 . For example, match engine 140 may begin checking identifier value(s) 210 for matches as soon as user 104 inputs a first character in input receiver 102 . As an example, consider that user 104 intends to navigate to “amazon.com” and begins typing “amazon.com” using input receiver 102 . Match engine 140 may begin determining potential matches to identifier value(s) 210 as soon as a user types in “a” and may determine “amazon.com” to be potentially what user 104 intends to type by the time user 104 has completed entering the text “amaz”. This example is illustrative and is not intended to limit the invention. In an embodiment, match engine 140 determines a plurality of matches and is not limited to one match.
- Option generator 120 may receive input from match engine 140 and may provide a list of identifiers with their associated content metadata to user interface generator 150 as input. In an embodiment, option generator 120 receives all matches between input received by input receiver 102 and identifier value(s) 210 that have been determined by match engine 140 . As an example, if input receiver 102 has received the text “amaz” from user 104 , match engine may provide a list of identifiers that includes “amazon.com” to option generator 120 . Option generator 120 may then provide the identifier “amazon.com” including any other identifiers to user interface generator 150 for presentation to user 104 .
- option generator 120 checks identifier content metadata 220 to determine if an identifier that has matched is associated with content that includes a search box. For example, if the identifier “amazon.com” is associated with a search box, option generator 120 provides this information to user interface generator 150 . It is to be appreciated that in place of a search box, identifier content metadata 220 may point to other features or functionalities within the content of a website.
- User interface generator 150 may receive input from option generator 120 and generate a user interface to allow interaction with the input.
- user interface generator 150 may present a list of identifiers to user 104 .
- user interface generator 150 may display an icon next to an identifier whose content includes a search box or any other such functionality.
- user interface generator 150 may display a list of identifiers adjacent to a URL bar of a browser. As a list of identifiers is displayed adjacent to a URL bar by user interface generator 150 , user 104 may be able to see matching identifiers as soon as user 104 begins providing an input to input receiver 102 . Exemplary user interfaces with respective screenshots are described further in the description.
- input receiver 102 may receive an alphanumeric, text based input from user 104 . If the input corresponds to an identifier, input recorder 110 may record the identifier in repository 130 .
- FIG. 3 is a flowchart illustrating an exemplary process of recording an identifier in repository 130 , according to an embodiment of the invention.
- Method 300 begins with input receiver 102 receiving an input (step 302 ).
- input receiver 102 may receive an input from user 104 .
- Input recorder 110 checks if user 104 has attempted to navigate to the identifier in the input (step 304 ). For example, user 104 may attempt to navigate to an identifier by pressing the “Enter” key on a keyboard.
- step 304 If the user has not attempted to navigate to the identifier in the input (step 304 ), method 300 returns (step 306 ). If the user has attempted to navigate to the identifier in the input (step 304 ), input recorder 110 records the identifier in identifier value(s) 210 in repository 130 (step 308 ). Additionally, input recorder 110 may also record metadata associated with the content of the identifier in identifier content metadata 220 in repository 130 .
- input receiver 102 receives an identifier and input recorder 110 records the identifier in repository 130 .
- input recorder 110 may store a number of identifiers in repository 130 .
- input recorder 110 may store a number of identifiers in repository 130 .
- match engine 140 may determine matches between an identifier that is being received by input receiver 102 and an identifier previously stored in repository 130 .
- Option generator 120 may then present any snatches as options to user 104 using user interface generator 150 .
- FIG. 4 is a flowchart illustrating an exemplary operation of match engine 140 and option generator 120 , according to an embodiment of the invention.
- Method 400 begins with input receiver 102 receiving an input (step 402 ).
- input receiver 102 may receive an identifier such as a URL from user 104 .
- Match engine 140 then checks if a match condition is satisfied (step 404 ).
- a match condition may be satisfied when an identifier received by input receiver 102 is present in identifier values 210 , or when an identifier exactly matches an identifier in identifier values 210 , or even when an identifier matches at least a portion of an identifier in identifier values 210 .
- an identifier is a URL
- a portion of the URL may match the URL name or a prefix (e.g. www.) associated with a URL stored in identifier values 210 .
- option generator 120 may generate options based on browsing history of user 104 (step 406 ).
- browsing history may include content areas visited by user 104 in the past.
- Options for example, may include one or more identifiers. Presenting of options is described further below.
- input recorder 110 checks identifier content metadata 220 (step 408 ). As an example, input recorder 110 checks identifier content metadata 220 to determine if user 104 has attempted to search content associated with the identifier in the past or if there is a search box or any other search functionality embedded within the content.
- option generator 120 provides an input to user interface generator 150 that indicates that the content may not be searchable using a search box (step 412 ).
- option generator 120 provides an input to user interface generator 150 that indicates that the content may be searchable (step 414 ).
- matches between an identifier received by input receiver 102 and identifiers stored in repository 130 may be determined by match engine 140 .
- option generator 120 may provide an input to user interface generator 150 that an identifier corresponds to searchable content. The operation of user interface generator 150 is described further below with respect to FIG. 5-6 .
- user interface generator 150 receives an input from option generator 120 which may include one or more identifiers with information if a particular identifier is associated with content that includes search functionality. User interface generator 150 may then generate a user interface based on input from option generator 120 .
- FIG. 5 is a flowchart illustrating the operation of user interface generator 150 , according to an embodiment of the invention.
- Method 500 begins with user interface generator 150 receiving an input from option generator 120 (step 502 ).
- user interface generator 150 receives an input from option generator 120 which may include one or more identifiers with information if a particular identifier is associated with content that includes search functionality.
- User interface generator 150 may then check if the input received from option generator 120 includes an identifier that is associated with a search box or any other search mechanism (step 504 ).
- user interface generator 150 presents the identifier with an option to user 104 indicating that the content can be searched (step 506 ).
- user interface generator 150 may display an icon next to an identifier indicating that content associated with the identifier can be searched.
- user interface generator 150 may display the identifier adjacent to a URL bar in a browser to allow user to quickly select an identifier of interest without disrupting workflow.
- user interface generator 150 presents the identifier without an option to user 104 indicating that the content can be searched (step 508 ).
- user interface generator 150 generates a user interface using input from option generator 120 .
- user interface generator 150 may display an icon next to an identifier to indicate searchable content, user 104 may be able to identify content that can be searched prior to navigating to the content to perform a search.
- user interface generator 150 generates a user interface based on an input from option generator 120 .
- a user interface may include identifiers presented as a list adjacent to a URL bar in a browser.
- user interface generator 150 may indicate (using an icon) that an identifier in the list is associated with content that has search functionality.
- FIG. 6 is a flowchart illustrating a process of selecting an identifier from a list of identifiers presented by user interface generator 150 .
- Method 600 begins with user interface generator 150 displaying a list of identifiers as options to user 104 (step 602 ).
- a user interface may include identifiers presented as a list adjacent to a URL bar in a browser or input receiver 102 .
- Input receiver 102 then receives an input from user 104 (step 604 ).
- user 104 may select an identifier from the options presented in step 602 .
- user 104 may select an option to search content associated with an identifier.
- Input receiver 102 checks if user 104 has selected an option to search content associated with an identifier (step 606 ).
- user 104 is presented with an option to search the content associated with the identifier (step 608 ).
- user interface generator 150 may generate a search box user interface to allow user 104 to search content within a website.
- user 104 selects an option to search “http://www.amazon.com”
- user 104 will be provided with an option to search Amazon.com before user 104 navigates to Amazon.com.
- input receiver 102 checks if user 104 has selected an identifier (step 610 ).
- method 600 returns (step 612 ).
- system 100 allows user 104 to navigate to content represented by the identifier (step 614 ). As an example, if user 104 selects “http://www.amazon.com” user 104 will navigate to Amazon's website.
- users may be able to search for content within a website prior to navigating to the website or webpage. For example, a user may search for content associated with “http://www.amazon.com” prior to navigating to “http://www.amazon.com”.
- a user may be able to directly compose an email prior to searching for a contact.
- a user may be able to check flight delays prior to navigating to a site that includes flight information.
- user interface generator 150 may generate a search box, after a user selects an option to search, to allow a user to search content prior to navigating to content represented by an identifier. User 104 may then type a query into the search box and initiate a search of the content. Once a search system associated with the content completes a search, search results are provided to user 104 .
- FIG. 7 is a flowchart illustrating the searching of content using a search box that has been generated by user interface generator 150 .
- Method 700 begins with user 104 providing a search query to a search box generated by user interface generator 150 (step 702 ).
- User 104 may then initiate a search operation (step 704 ).
- user 104 may initiate a search operation using the “Enter” key on a keyboard.
- a search query may then be sent to a search engine (not shown) which returns search results.
- User interface generator 150 may then present the search results to user 104 (step 706 ).
- search results are presented to user 104 as a search results page associated with the content.
- search results are displayed to user 104 in the form of a Google results page.
- these search results from amazon.com are then displayed in a results page generated by the Google.com website or in a Google results page format. It is to be appreciated that the form of presenting search results to user 104 is not limited to these embodiments and other presentation formats and methods may be used.
- search results may be presented to user 104 , according to embodiments of the invention.
- input receiver 102 may auto-complete text that is being typed in by user 104 based on input from match engine 140 .
- Input receiver 102 may auto-complete a URL address or an identifier associated with a content area, prior to user 104 typing in the address or identifier completely.
- input receiver 102 may first determine whether to allow inline auto-completion. Once input receiver 102 determines to allow inline auto-completion, it may ask match engine 140 to return possible matches associated with user 104 's input and pass along results of this determination so that input receiver 102 can provide auto-completed text to user 104 while user 104 is still in the process of typing in an input.
- matches determined by match engine 140 may include URL addresses or search queries that have been previously navigated to or executed by user 104 .
- match engine 140 returns zero or more matches, which are inline auto-complete candidates, for each input provided by user 104 . All of the matches which are inline auto-complete candidates may be assigned relevance scores by match engine 140 . Relevance scores are used by match engine 140 to merge and sort the matches. If the highest ranking match based on at least the relevance scores has been marked as a candidate for inline auto-completion, input receiver 102 will then inline auto-complete user 104 's input using the highest ranking match provided by match engine 140 .
- input receiver 102 may disable inline auto-completion if user 104 has just deleted text from input receiver 102 or the user 104 has “pasted” into input receiver 102 contents that have been copied from another source.
- inline auto-completion is disabled by input receiver 102 because it may interfere with user 104 's ability to continue deleting characters typed within input receiver 102 . Furthermore, if the user 104 was trying to discard auto-completed text by deleting it, inline auto-complete may unnecessarily undo their action.
- inline auto-completion is disabled by input receiver 102 because user 104 is likely trying to navigate to a specific URL or search for a specific phrase, and if inline auto-completion were enabled by input receiver 102 , it may incorrectly alter the URL or phrase that has been pasted by user 104 in input receiver 102 .
- inline auto-completion may also be disabled by input receiver 102 if a cursor in input receiver 102 is not at the end of the text that has been typed into it. This is because, when user 104 is editing text at the middle or within their input, inline auto-completion no longer acts a typing accelerator and may instead be counter-intuitive. Additionally, inline auto-completion may be disabled by input receiver 102 if user 104 is using an input method editor (IME).
- IME is a program that allows users to enter complex characters and symbols, such as Japanese characters, using a standard keyboard. Inline auto-completion may be disabled in this case as it may interfere with the IME and may again be counter-intuitive.
- input receiver 110 may selectively disable inline auto-completion of text typed by user 104 to preserve good user experience.
- Match engine 140 may use repository 130 to store and track statistics including the number of times user 104 has visited a content area, the number of times user 104 has typed an identifier (e.g. URL) into input receiver 102 , and the time of the last visit to a content area.
- match engine 140 attempts to match it against previously stored URLs or identifiers in repository 130 , and pre-pends various common prefixes (e.g. “www.”) so that user 104 does not have to explicitly type them into input receiver 102 .
- Match engine 140 then ranks the resulting matches, and marks all matches which have been typed a pre-determined number of times (e.g. one time for bare hostnames or two times for URLs with a non-empty path) as inline auto-complete candidates. If the top-most or the highest ranked match is such a candidate and has been typed a pre-determined number of times, match engine 140 gives the match a relevance score which may be sufficient to promote it as the best match from all matching URLs or identifiers stored in repository 130 .
- a pre-determined number of times e.g. one time for bare hostnames or two times for URLs with a non-empty path
- inline auto-completion occurs synchronously while user 104 is typing into input receiver 102 , and not on a delay that can cause the behavior of input strings to change based on how fast user 104 hits the “Enter” key to perform an action.
- repository 130 may take non-trivial time to query based on the type of database employed. Since all candidates for inline auto-completion must have been typed at least once, for example, to be stored in repository 130 , a subset of identifiers user 104 has typed before may be also loaded into a in-memory database 180 .
- in-memory database 180 may have a smaller size and due to its in-memory nature, can he queried near-instantaneously.
- in-memory database 180 can be instantiated within memory associated with computing device 105 . Such memory may include a form of random access memory (RAM).
- RAM random access memory
- match engine 140 when the match engine 140 determines matches, it first performs the steps of ranking and marking identifiers using in-memory database 180 , and returns only the highest ranked match, which may be sufficient to cover all cases where inline auto-completion is initiated by input receiver 102 . Match engine 140 may then perform the steps described above, again, using the repository 130 which includes all identifiers navigated to by user 104 and returns a complete result set. In an embodiment, to make this effective, all matching algorithms used by match engine 140 produce the same “highest ranked” result when given either repository 130 or in-memory data sets. This prevents the results of inline auto-completion from changing between separate passes of repository 130 and in-memory database 180 .
- any ranking function within match engine 140 proceeds in an order calculated not only to provide good results from repository 130 , but to provide the same “highest ranked” result for both the in-memory database and repository 130 .
- the match engine 140 may determine that exact matches of user 104 's input are better and need to be ranked highest, and failing that, identifiers which have been typed more often are better and ranked higher by match engine 140 .
- match engine 140 searches for shorter identifiers visited by user 104 , of which the input string is still a prefix. If no such URLs are found, but the original best match can be trimmed to just a hostname and still match user 104 's input, that match is used as the new highest ranked match.
- FIG. 8 is a diagram illustrating an exemplary process of determining inline auto-complete candidates, according to an embodiment of the invention.
- Method 800 begins with match engine 140 determining if there are any exact matches to an input provided by user 104 to input receiver 102 (step 802 ).
- match engine 140 may assign those exact matches a higher rank compared to other matches (step 806 ) and method 800 proceeds to step 810 .
- match engine 140 may assign inputs that have been typed more often by user 104 in input receiver 102 a higher rank as compared to other matches that may be determined and determines a highest ranked match (step 808 ).
- Match engine 140 may then check if the highest ranked match is a URL or any identifier with a non-empty path (step 810 ).
- match engine 140 searches for shorter URLs the user has visited, of which the input string is still a prefix (step 812 ).
- match engine 140 may determine if the highest ranked match determined in step 808 can be trimmed to just a hostname and still match the user input (step 814 ).
- step 808 If the highest ranked match determined in step 808 can be trimmed to just a hostname and still match user 104 's input (step 814 ), that match may be determined to be the highest ranked match (step 816 ). If the highest ranked match determined in step 808 can not be trimmed to just a hostname and still match user 104 's input (step 814 ), the match is preserved as-is by match engine 140 (step 818 ).
- match engine 140 may determine determining inline auto-complete candidates and present the highest ranked candidates to user 104 , according to an embodiment of the invention.
- the steps illustrated in method 800 are exemplary and are not intended to limit the invention. Furthermore, it is to be appreciated that the steps of method 800 may occur concurrently or in a different order to determine inline auto-complete candidates.
- the database statistics for that URL are updated by input recorder 110 in repository 130 to indicate that the URL has been both visited and typed.
- input recorder 110 may not update repository 130 if user 104 has just replaced the contents of input receiver 102 with “pasted” text. This is because, if the text is copied and pasted into input receiver 110 the contents have not been “typed” into input receiver 110 .
- user 104 may be probably pasting text in as a substitute for clicking a link to the page from another program, and may be less interested in typing it in again to revisit it.
- the text is scored as “visited” by match engine 140 , in a manner similar to scoring a hyperlink click on web content.
- Input recorder 110 may not update repository 130 if user 104 is attempting to reload or refresh a content area. In this scenario, user 104 's attempt to reload or refresh the content area is also scored as “visited” by match engine 140 .
- repository 130 may not be updated by input recorder 110 if user 104 is accepts an inline auto-complete match that does not look like a URL (e.g. the string “Search Google for airline prices”).
- one or more match engine(s) 140 return matches in parallel, with assigned relevance scores. The results may then be merged into a sorted list by match engine 140 .
- match engine 140 may select the six most relevant matches available at any time, as well as an optional seventh entry at the bottom of the list. This optional seventh entry, for example, may indicate when user 104 has additional non-shown matches stored in repository 130 .
- Match engine 140 may return more results continuously over an arbitrary period of time after user 104 types a key into input receiver 102 . Furthermore, input receiver 102 may change the set of results visible at any instant if newer results come in with higher relevance scores than the older results generated by match engine 140 .
- Input from user 104 is first categorized by input recorder 110 as either being a URL, a search (for inputs which cannot possibly be URLs), or “unknown” (inputs like “food”, which could reasonably be considered intranet URLs or search terms).
- match engine 140 ranks the search-related matches for these inputs higher than the navigation matches. Search-related matches are matches associated with search queries and navigation matches are matches associated with URLs.
- categorization by input recorder 110 includes, distinguishing between e.g. “google.com” (a URL) and “google.co” (an “unknown”, since “co” is the country code for Colombia, whose registrar does not allow this particular form of URL), or between “http://abc@google.com” (a HTTP authentication login) and “abc@google.com”.
- abc@google.com may be an email address, and so categorized as an “unknown” by input recorder 110 since user 104 may probably wish to search, but “abc@google.com” also could be an HTTP authentication login.
- match engine 140 may assign relevance scores to identifiers (e.g. URLs) based on an ordering of different types of results for each distinct kind of input received from user 104 (e.g. URL, search query or “unknown”), and then determines fixed relevance scores so that the actual results generated by match engine 140 are ranked based on the ordering of the results.
- match engine 140 scores a match as a function of content of data received by input receiver 102 instead of simply assigning it a fixed score.
- Embodiments allow match engine 140 to determine results synchronously with input received from user 104 while providing a consistent and stable ranking of results. Accordingly, the rankings of identifiers in the results generated by match engine 140 are chosen by match engine 140 such that all inputs from user 104 that can return any results will always return at least one result synchronously, and in a manner that one of the results is the highest-ranked match for that input.
- auto-completed text may not change based on the time required to rank results. This improves overall user experience.
- inputs e.g. URLs
- input receiver 102 can be classified as “unknown” when user 104 navigates to them but is more likely to want to search content.
- this tradeoff turns out to be wrong for intranet URLs, which often take to form of a single word as a hostname.
- input receiver 102 needs to determine if user 104 intends to search for the term “shoes” or navigate to a server associated with the name “shoes”.
- users on intranets don't always know about or wish to navigate to all local addresses. As an example, just because a coworker sets up a machine named “shoes” does not mean a user would want to navigate to that server address.
- input receiver 102 detects cases where user 104 expected to navigate to a URL or identifier but received search results instead as the URL was treated as a search query. Even if the URL or identifier is treated as a search query, in parallel to presenting a search results page to user 104 based on user 104 's input, a browser (such as a browser in computing device 105 ) sends a “HTTP HEAD” request to the relevant URL.
- the HTTP HEAD request may traverse through HTTP 301 and HTTP 302 re-direct responses.
- the HTTP 301 and HTTP 302 redirects are used to automatically redirect a web request.
- HTTP 2xx, HTTP 401 , or HTTP 407 response code When the request returns with a HTTP 2xx, HTTP 401 , or HTTP 407 response code, input recorder 110 considers it to be a potential “accidental search” case and it is recorded in repository 130 .
- HTTP 2xx, HTTP 401 and HTTP 407 response codes are associated with HTTP requests that return partial or no content.
- the browser determines whether the search result page is finished loading. If not, it waits until the search results page loads, and then user interface generator 150 displays a separate user interaction area or an “Infobar” asking if user 104 intended a navigate to a URL address. To detect such cases, input receiver 110 flags inputs where the user 104 's text was classified as “unknown” and user 104 hit the “Enter” key without explicitly selecting an option for inline auto-complete candidates.
- this URL address may be inline auto-completed by input receiver 110 .
- input receiver 102 may be able to determine if user 104 intends to navigate to a content area or execute a search query. Such a determination allows input receiver 102 to inline auto-complete user 104 's input in an intuitive manner. Furthermore, it is to be appreciated that inline auto-completion serves as a “shortcut” to complete a task as it allows auto-completion of a user's input prior to the user typing the input in its entirety. Additionally, for example, the Infobar may help to check if a user input has been correctly interpreted as either a URL or a search query.
- FIG. 9A and 9B are screenshots of exemplary user interfaces, according to embodiments of the invention.
- FIG. 9A shows a screenshot of user interface 900 prior to initiation of a search by user 104 .
- FIG. 9A shows URL bar 902 , URL list 904 and option to search 906 .
- URL bar 902 receives an input from user 104 .
- user 104 may type in an identifier into URL bar 902 .
- URL list 904 may be generated by user interface generator 150 based on input from option generator 120 .
- the exemplary URL list 90 shown in FIG. 9A may include different types of URLs. These URLs may be URLs that have been visited by user 104 previously.
- URL list 904 shows exemplary URLs “www.amazon.com”, and other URLs such as “www.amazon.com/ . . .
- URL bar 902 may transform into a search bar that allows user 104 to directly search content within Amazon.com.
- User 104 may also initiate an option to search Amazon.com by pressing the “Tab” key as indicated by option to search 906 .
- FIG. 9B shows a screenshot of user interface 900 , after user 104 has pressed the “Tab” key or accepted the option to search by selecting “Search Amazon.com for ⁇ enter query>” (as shown in FIG. 9A ).
- URL bar 902 is now transformed into a search box user interface that allows user 104 to search “amazon.com” by entering a search query into search input area 910 .
- the browser may display results to user 104 as an Amazon.com results page.
- the last entry in URL list 912 displays “Search Google for Amazon.com”. Selecting this last input in URL list 912 , allows user 104 to perform a Google search on Amazon.com. Such a search may return results to user 104 displayed as a Google results page.
Abstract
Description
- This patent application is a continuation of U.S. patent application Ser. No. 12/552,144 filed Sep. 1, 2009 which claims the benefit of U.S. Provisional Patent Application No. 61/093,434, filed Sep. 1, 2008, the disclosures of which are both incorporated herein by reference in their entireties.
- Field
- Embodiments of the present invention relate to network technology, and more particularly to web browsers.
- Background Art
- The growth of the Internet has resulted in a large number of content rich websites. When users navigate to a website or a content area, they perform various tasks within the content area. For instance, a user may choose to perform a task such as searching for content within a website. To assist users in searching for content, many websites have their own search engines which allow users to search for content within the websites or search for specialized types of information. For example, a website may provide a “search box” on its home page to allow users to search for content. In order to use a website's search box, users first navigate to the website and then search content using the search box. In addition to searching a website, users may perform other tasks. In many cases users perform a certain task or a certain combination of tasks during repeated visits to a website or content area.
- For many users who frequently navigate to a certain website and perform the same task during recurring visits to the website, a multi-step process of first navigating to a website and then performing a certain task is time consuming and degrades a user's experience.
- Embodiments of the present invention relate to generation of search shortcuts.
- Search shortcuts, for example may allow a user to perform search of content in a content area prior to navigating to a content area where the search is to be performed.
- An embodiment includes, detecting text input in a browser, determining if the text input corresponds to an identifier from where a search was previously initiated, and presenting one or more identifiers and an option to search content based on the determining step. Additionally, the embodiment includes receiving an input to select a option to search presented in the presenting step and generating a user interface to allow searching of content associated with a selected identifier based on the receiving step.
- Another embodiment includes, categorizing one or more inputs entered into a browser input receiver, determining a plurality of relevance scores based on the categorizing step, ranking auto-complete entries based on the relevance scores, and presenting one or more of higher ranked auto-complete entries inline in the input receiver of the browser where the one or more inputs were received.
- Another method embodiment includes, determining if a user attempted to navigate to an identifier or if the user provided a search query, presenting one or more search results based on the search query, providing a HTTP request concurrently with the presenting step to retrieve content associated with the identifier, and presenting a user interaction area to determine if the user intended to navigate to the identifier.
- In this way, users may be able to search for content within a content area prior to navigating to the content area. Furthermore, work done by a user may be reduced as input text provided by a user may be automatically completed prior to inputting the entire text input.
- Further embodiments, features, and advantages of the invention, as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.
- Embodiments are described with reference to the accompanying drawings. In the drawings, like reference numbers may indicate identical or functionally similar elements. The drawing in which an element first appears is generally indicated by the left-most digit in the corresponding reference number.
-
FIG. 1 is a diagram illustrating a system for generating search shortcuts, according to an embodiment. -
FIG. 2 is diagram illustrating a repository, according to an embodiment. -
FIG. 3 is a flowchart illustrating receiving and recording of an input in a repository, according to an embodiment. -
FIG. 4 is a flowchart illustrating the operation of a match engine, according to an embodiment. -
FIG. 5 is a flowchart illustrating the operation of a user interface generator, according to an embodiment. -
FIG. 6 is a flowchart illustrating the generation of a search box, according to an embodiment. -
FIG. 7 is a flowchart illustrating searching of content by a user, according to an embodiment. -
FIG. 8 is a flowchart illustrating an exemplary process of determining inline auto-complete candidates, according to an embodiment. -
FIG. 9A and 9B are diagrams illustrating screenshots of an exemplary user interface interaction area of the system inFIG. 1 - Embodiments relate to generating search shortcuts. An embodiment includes receiving text input in a browser, determining if the text input corresponds to an identifier from where a search was initiated and presenting one or more URLs based on the determining step and concurrently with the receiving step. Additionally, the embodiment includes receiving an input to select one of the URLs presented in the presenting step and generating a user interface to allow searching of content associated with a selected URL. Another embodiment includes, categorizing one or more inputs entered into a browser input receiver, determining a plurality of relevance scores based on the categorizing step, ranking auto-complete entries based on the relevance scores, and presenting one or more of higher ranked auto-complete entries inline in the input receiver of the browser where the one or more inputs were received. Another method embodiment includes, determining if a user attempted to navigate to an identifier or if the user provided a search query, presenting one or more search results based on the search query, providing a HTTP request concurrently with the presenting step to retrieve content associated with the identifier, and presenting a user interaction area to determine if the user intended to navigate to the identifier.
- In this way, users may be able to search for content within a content area prior to navigating to the content area. Furthermore, work done by a user may be reduced as input text provided by a user may be automatically completed prior to inputting the entire text input.
- While embodiments of the present invention are described herein with reference to illustrative embodiments for particular applications, it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications, applications, and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.
- The term “identifier” used herein refers to a content address. An example of an identifier is a uniform resource locator (URL). URLs may address content stored across one or more networks, such as the Internet. In another example, an identifier may be a path and filename corresponding to a location of a locally store file. These examples are illustrative and are not intended to limit the definition.
- This detailed description of the embodiments of the present invention is divided into several sections as shown by the following table of contents.
- 5. Selecting an Identifier from Options and Searching Content
- This section describes a system for generating search shortcuts and inline auto-complete entries according to an embodiment illustrated in
FIG. 1 .FIG. 1 is a diagram ofsystem 100 for generating search shortcuts and inline auto-complete entries. (While the following is described in terms of search shortcuts, the invention is not limited to this embodiment and any other task in place of a search related task may be used. Exemplary tasks may include completing a purchase, checking or composing an email and checking flight or travel information. The invention is applicable to any system having generally the structure ofFIG. 1 , or that would benefit from the operation, methods and functions as described herein.) -
System 100 includescomputing device 105.Computing device 105 can be any type of computing device having one or more processors. For example,computing device 105 can be a workstation, mobile device, computer, cluster of computers, set-top box, or other device having at least one processor. Such a computing device may include software, firmware, hardware, or a combination thereof Software may include one or more applications and an operating system. Hardware can include, but is not limited to, a processor, memory and graphical user interface display. - According to an embodiment,
computing device 105 may includeinput receiver 102,input recorder 110,option generator 120,repository 130,match engine 140, user interface generator 150. Additionally, user 104 may communicate withinput receiver 102. -
Input receiver 102 may be any form of input system, capable of receiving a text input from a user. As an example,input receiver 102 may be an input text box in a browser that is capable of receiving an alphanumeric string. In an embodiment,input receiver 102 may be a uniform resource locator (URL) bar of a browser that receives content addresses.Input receiver 102 may receive an identifier from user 104. In another example, not intended to limit the invention,input receiver 102 may receive input in any form from user 104 and convert the received input into text. These examples are illustrative, and other input receiving mechanisms may be used. -
Input recorder 110 may record identifiers received byinput receiver 102 inrepository 130. In an embodiment,input recorder 110 may record all identifiers that user 104 has requested to navigate.Input recorder 110 may also record metadata associated with the content of an identifier. Identifier content metadata is described further in the description. -
Repository 130 may store identifiers received frominput recorder 110. In an embodiment,repository 130 may store all the identifiers that user 104 has navigated over a period of time. As an example, if user 104 has navigated to the website “http://www.amazon.com,”input recorder 110 may store the identifier “http://www.amazon.com” inrepository 130. Labels, URL patterns, indexes or other ways of storing or managing identifiers and retrieval of identifiers can also be stored inrepository 130.Repository 130 can be located at the same or a different location than computingdevice 105. -
Repository 130 may be any form of database. For example, a database based on the SQLite library may be used. SQLite is popular database library known to those skilled in the art and is a form of a transactional SQL database engine. - In-
memory database 180 may be used to store at least a subset of identifiers received byinput receiver 102. As an example, not intended to limit the invention, in-memory database 180 can be instantiated within memory associated withcomputing device 105. Such memory may include a form of random access memory (RAM). In an embodiment, in-memory database 180 may have a smaller size and due to its in-memory nature, can be queried near-instantaneously. -
FIG. 2 shows a detailed diagram ofrepository 130. As shown inFIG. 2 ,repository 130 may further include identifier value(s) 210 andidentifier content metadata 220. Identifier value(s) 210 may include all identifiers navigated by user 104.Identifier content metadata 220 may include any form of metadata associated with content of an identifier. As an example, not intended to limit the invention,identifier content metadata 220 may indicate if content associated with an identifier includes a search box or any other form of functionality that allows user 104 to perform a task.Identifier content metadata 220 may also include a counter to store a count of visits by a user to each identifier in identifier value(s) 210 and a flag to indicate if a particular content area is associated with a search box or any other search mechanism. - In an embodiment, not intended to limit the invention, identifier value(s) 210 and
identifier content metadata 220 may be database tables and identifier value(s) 210 may point toidentifier content metadata 220 or referenceidentifier content metadata 220. As an example, each identifier in identifier value(s) 210 may point to its respective content metadata inidentifier content metadata 220. In this way, it may be possible to check if a particular identifier has a certain type of content metadata associated with it. For example it may be possible to check if the identifier “http://www.amazon.com” has a search box in its content. - As described earlier,
identifier content metadata 220 may be populated byinput recorder 110. In an embodiment,input recorder 110 may parse content associated with an identifier to determine if there is a search box or any other search functionality embedded within the content to populateidentifier content metadata 220 with such information. As an example,input recorder 110 may check if there is an OpenSearch description document associated with content. The OpenSearch specification is known to those skilled in the art as a collection of formats for sharing search results. Additionally, search clients may use OpenSearch description documents to learn about the public interface of a search engine. These description documents may include identifier templates that indicate bow the search client should make search requests. Search engines may also use OpenSearch elements to add search metadata to results in a variety of content formats. -
Match engine 140 checks for matches between text that is being received byinput receiver 102 and identifiers that are stored in identifier values 210. For example,match engine 140 may begin checking identifier value(s) 210 for matches as soon as user 104 inputs a first character ininput receiver 102. As an example, consider that user 104 intends to navigate to “amazon.com” and begins typing “amazon.com” usinginput receiver 102.Match engine 140 may begin determining potential matches to identifier value(s) 210 as soon as a user types in “a” and may determine “amazon.com” to be potentially what user 104 intends to type by the time user 104 has completed entering the text “amaz”. This example is illustrative and is not intended to limit the invention. In an embodiment,match engine 140 determines a plurality of matches and is not limited to one match. -
Option generator 120 may receive input frommatch engine 140 and may provide a list of identifiers with their associated content metadata to user interface generator 150 as input. In an embodiment,option generator 120 receives all matches between input received byinput receiver 102 and identifier value(s) 210 that have been determined bymatch engine 140. As an example, ifinput receiver 102 has received the text “amaz” from user 104, match engine may provide a list of identifiers that includes “amazon.com” tooption generator 120.Option generator 120 may then provide the identifier “amazon.com” including any other identifiers to user interface generator 150 for presentation to user 104. In an embodiment,option generator 120 checksidentifier content metadata 220 to determine if an identifier that has matched is associated with content that includes a search box. For example, if the identifier “amazon.com” is associated with a search box,option generator 120 provides this information to user interface generator 150. It is to be appreciated that in place of a search box,identifier content metadata 220 may point to other features or functionalities within the content of a website. - User interface generator 150 may receive input from
option generator 120 and generate a user interface to allow interaction with the input. In an embodiment, user interface generator 150 may present a list of identifiers to user 104. Furthermore, user interface generator 150 may display an icon next to an identifier whose content includes a search box or any other such functionality. As an example, user interface generator 150 may display a list of identifiers adjacent to a URL bar of a browser. As a list of identifiers is displayed adjacent to a URL bar by user interface generator 150, user 104 may be able to see matching identifiers as soon as user 104 begins providing an input to inputreceiver 102. Exemplary user interfaces with respective screenshots are described further in the description. - As described above,
input receiver 102 may receive an alphanumeric, text based input from user 104. If the input corresponds to an identifier,input recorder 110 may record the identifier inrepository 130. -
FIG. 3 is a flowchart illustrating an exemplary process of recording an identifier inrepository 130, according to an embodiment of the invention. -
Method 300 begins withinput receiver 102 receiving an input (step 302). As an example,input receiver 102 may receive an input from user 104. -
Input recorder 110 then checks if user 104 has attempted to navigate to the identifier in the input (step 304). For example, user 104 may attempt to navigate to an identifier by pressing the “Enter” key on a keyboard. - If the user has not attempted to navigate to the identifier in the input (step 304),
method 300 returns (step 306). If the user has attempted to navigate to the identifier in the input (step 304),input recorder 110 records the identifier in identifier value(s) 210 in repository 130 (step 308). Additionally,input recorder 110 may also record metadata associated with the content of the identifier inidentifier content metadata 220 inrepository 130. - In this way,
input receiver 102 receives an identifier andinput recorder 110 records the identifier inrepository 130. Over time,input recorder 110 may store a number of identifiers inrepository 130. - As described earlier, over time,
input recorder 110 may store a number of identifiers inrepository 130. At each attempt to navigate to using an identifier,match engine 140 may determine matches between an identifier that is being received byinput receiver 102 and an identifier previously stored inrepository 130.Option generator 120 may then present any snatches as options to user 104 using user interface generator 150. -
FIG. 4 is a flowchart illustrating an exemplary operation ofmatch engine 140 andoption generator 120, according to an embodiment of the invention. - Method 400 begins with
input receiver 102 receiving an input (step 402). As anexample input receiver 102 may receive an identifier such as a URL from user 104. -
Match engine 140 then checks if a match condition is satisfied (step 404). As an example, a match condition may be satisfied when an identifier received byinput receiver 102 is present inidentifier values 210, or when an identifier exactly matches an identifier inidentifier values 210, or even when an identifier matches at least a portion of an identifier in identifier values 210. In an example where an identifier is a URL, a portion of the URL may match the URL name or a prefix (e.g. www.) associated with a URL stored in identifier values 210. These examples are illustrative and other methods of determining a match between an identifier received byinput receiver 102 andidentifier values 210 may be used. - If a match condition is not satisfied (step 404),
option generator 120 may generate options based on browsing history of user 104 (step 406). As an example, browsing history may include content areas visited by user 104 in the past. Options, for example, may include one or more identifiers. Presenting of options is described further below. - If a match condition is satisfied (step 404),
input recorder 110 checks identifier content metadata 220 (step 408). As an example,input recorder 110 checksidentifier content metadata 220 to determine if user 104 has attempted to search content associated with the identifier in the past or if there is a search box or any other search functionality embedded within the content. - If user 104 has not attempted to search content associated with the identifier in the past or if there is no search box or any other search functionality embedded within the content (step 410),
option generator 120 provides an input to user interface generator 150 that indicates that the content may not be searchable using a search box (step 412). - If user 104 has attempted to search content associated with the identifier in the past or if there is a search box or any other search functionality embedded within the content (step 410),
option generator 120 provides an input to user interface generator 150 that indicates that the content may be searchable (step 414). - In this way, matches between an identifier received by
input receiver 102 and identifiers stored inrepository 130 may be determined bymatch engine 140. Additionally,option generator 120 may provide an input to user interface generator 150 that an identifier corresponds to searchable content. The operation of user interface generator 150 is described further below with respect toFIG. 5-6 . - As described above, user interface generator 150 receives an input from
option generator 120 which may include one or more identifiers with information if a particular identifier is associated with content that includes search functionality. User interface generator 150 may then generate a user interface based on input fromoption generator 120. -
FIG. 5 is a flowchart illustrating the operation of user interface generator 150, according to an embodiment of the invention. -
Method 500 begins with user interface generator 150 receiving an input from option generator 120 (step 502). As an example, user interface generator 150 receives an input fromoption generator 120 which may include one or more identifiers with information if a particular identifier is associated with content that includes search functionality. - User interface generator 150 may then check if the input received from
option generator 120 includes an identifier that is associated with a search box or any other search mechanism (step 504). - If the input received from
option generator 120 includes an identifier that is associated with a search box or any other search mechanism (step 504), user interface generator 150 presents the identifier with an option to user 104 indicating that the content can be searched (step 506). As an example, user interface generator 150 may display an icon next to an identifier indicating that content associated with the identifier can be searched. Furthermore, user interface generator 150 may display the identifier adjacent to a URL bar in a browser to allow user to quickly select an identifier of interest without disrupting workflow. - If the input received from
option generator 120 does not include an identifier that is associated with a search box or any other search mechanism (step 504), user interface generator 150 presents the identifier without an option to user 104 indicating that the content can be searched (step 508). - In this way, user interface generator 150 generates a user interface using input from
option generator 120. As user interface generator 150 may display an icon next to an identifier to indicate searchable content, user 104 may be able to identify content that can be searched prior to navigating to the content to perform a search. - 5. Selecting an Identifier from Options and Searching Content
- As described above, user interface generator 150 generates a user interface based on an input from
option generator 120. As an example, such a user interface may include identifiers presented as a list adjacent to a URL bar in a browser. Furthermore, user interface generator 150 may indicate (using an icon) that an identifier in the list is associated with content that has search functionality. -
FIG. 6 is a flowchart illustrating a process of selecting an identifier from a list of identifiers presented by user interface generator 150. - Method 600 begins with user interface generator 150 displaying a list of identifiers as options to user 104 (step 602). As an example, such a user interface may include identifiers presented as a list adjacent to a URL bar in a browser or
input receiver 102. -
Input receiver 102 then receives an input from user 104 (step 604). As an example, user 104 may select an identifier from the options presented in step 602. In another example, user 104 may select an option to search content associated with an identifier. -
Input receiver 102 then checks if user 104 has selected an option to search content associated with an identifier (step 606). - If user 104 has selected an option to search content associated with an identifier (step 606), user 104 is presented with an option to search the content associated with the identifier (step 608). As an example, user interface generator 150 may generate a search box user interface to allow user 104 to search content within a website. As an example, if user 104 selects an option to search “http://www.amazon.com”, user 104 will be provided with an option to search Amazon.com before user 104 navigates to Amazon.com.
- If user 104 has not selected an option to search content associated with an identifier (step 606),
input receiver 102 checks if user 104 has selected an identifier (step 610). - If user 104 has not selected an identifier (step 610), method 600 returns (step 612).
- If user 104 has selected an identifier (step 610),
system 100 allows user 104 to navigate to content represented by the identifier (step 614). As an example, if user 104 selects “http://www.amazon.com” user 104 will navigate to Amazon's website. - In this way, users may be able to search for content within a website prior to navigating to the website or webpage. For example, a user may search for content associated with “http://www.amazon.com” prior to navigating to “http://www.amazon.com”. In another example, not intended to limit the invention, a user may be able to directly compose an email prior to searching for a contact. In still another example, not intended to limit the invention, a user may be able to check flight delays prior to navigating to a site that includes flight information. Thus, a multi-step process of first navigating to a website and then performing a certain task is avoided. This may improve user experience as a user is able to perform task associated with a content area prior to navigating to the content area.
- As described above, user interface generator 150 may generate a search box, after a user selects an option to search, to allow a user to search content prior to navigating to content represented by an identifier. User 104 may then type a query into the search box and initiate a search of the content. Once a search system associated with the content completes a search, search results are provided to user 104.
-
FIG. 7 is a flowchart illustrating the searching of content using a search box that has been generated by user interface generator 150. -
Method 700 begins with user 104 providing a search query to a search box generated by user interface generator 150 (step 702). - User 104 may then initiate a search operation (step 704). As an example, user 104 may initiate a search operation using the “Enter” key on a keyboard. A search query may then be sent to a search engine (not shown) which returns search results.
- User interface generator 150 may then present the search results to user 104 (step 706). In an embodiment, search results are presented to user 104 as a search results page associated with the content. As an example, if user 104 has initiated a search on “amazon.com”, search results are presented to user 104 on a results page generated by “amazon.com”. These search results from amazon.com are displayed within the results page generated by the Amazon.com website. In another embodiment, search results are displayed to user 104 in the form of a Google results page. In this case, these search results from amazon.com are then displayed in a results page generated by the Google.com website or in a Google results page format. It is to be appreciated that the form of presenting search results to user 104 is not limited to these embodiments and other presentation formats and methods may be used.
- In this way, search results may be presented to user 104, according to embodiments of the invention.
- In an embodiment,
input receiver 102 may auto-complete text that is being typed in by user 104 based on input frommatch engine 140.Input receiver 102, for example, may auto-complete a URL address or an identifier associated with a content area, prior to user 104 typing in the address or identifier completely. - When user 104 types in an input (e.g. a character) in the input receiver 102 (e.g. a URL bar of a browser),
input receiver 102 may first determine whether to allow inline auto-completion. Onceinput receiver 102 determines to allow inline auto-completion, it may askmatch engine 140 to return possible matches associated with user 104's input and pass along results of this determination so thatinput receiver 102 can provide auto-completed text to user 104 while user 104 is still in the process of typing in an input. As an example, matches determined bymatch engine 140 may include URL addresses or search queries that have been previously navigated to or executed by user 104. - In an embodiment,
match engine 140 returns zero or more matches, which are inline auto-complete candidates, for each input provided by user 104. All of the matches which are inline auto-complete candidates may be assigned relevance scores bymatch engine 140. Relevance scores are used bymatch engine 140 to merge and sort the matches. If the highest ranking match based on at least the relevance scores has been marked as a candidate for inline auto-completion,input receiver 102 will then inline auto-complete user 104's input using the highest ranking match provided bymatch engine 140. - In another embodiment,
input receiver 102 may disable inline auto-completion if user 104 has just deleted text frominput receiver 102 or the user 104 has “pasted” intoinput receiver 102 contents that have been copied from another source. - In the former case where user 104 has just deleted text from
input receiver 102, inline auto-completion is disabled byinput receiver 102 because it may interfere with user 104's ability to continue deleting characters typed withininput receiver 102. Furthermore, if the user 104 was trying to discard auto-completed text by deleting it, inline auto-complete may unnecessarily undo their action. - In the latter case where user 104 has “pasted” into
input receiver 102 contents that have been copied from another source, inline auto-completion is disabled byinput receiver 102 because user 104 is likely trying to navigate to a specific URL or search for a specific phrase, and if inline auto-completion were enabled byinput receiver 102, it may incorrectly alter the URL or phrase that has been pasted by user 104 ininput receiver 102. - According to the same embodiment, inline auto-completion may also be disabled by
input receiver 102 if a cursor ininput receiver 102 is not at the end of the text that has been typed into it. This is because, when user 104 is editing text at the middle or within their input, inline auto-completion no longer acts a typing accelerator and may instead be counter-intuitive. Additionally, inline auto-completion may be disabled byinput receiver 102 if user 104 is using an input method editor (IME). An IME is a program that allows users to enter complex characters and symbols, such as Japanese characters, using a standard keyboard. Inline auto-completion may be disabled in this case as it may interfere with the IME and may again be counter-intuitive. - Thus, in the exemplary scenarios described above,
input receiver 110 may selectively disable inline auto-completion of text typed by user 104 to preserve good user experience. -
Match engine 140 may userepository 130 to store and track statistics including the number of times user 104 has visited a content area, the number of times user 104 has typed an identifier (e.g. URL) intoinput receiver 102, and the time of the last visit to a content area. Wheninput receiver 102 receives an input string,match engine 140 attempts to match it against previously stored URLs or identifiers inrepository 130, and pre-pends various common prefixes (e.g. “www.”) so that user 104 does not have to explicitly type them intoinput receiver 102. -
Match engine 140 then ranks the resulting matches, and marks all matches which have been typed a pre-determined number of times (e.g. one time for bare hostnames or two times for URLs with a non-empty path) as inline auto-complete candidates. If the top-most or the highest ranked match is such a candidate and has been typed a pre-determined number of times,match engine 140 gives the match a relevance score which may be sufficient to promote it as the best match from all matching URLs or identifiers stored inrepository 130. - In an embodiment, in order for inline auto-completion to appear intuitive and be stable, inline auto-completion occurs synchronously while user 104 is typing into
input receiver 102, and not on a delay that can cause the behavior of input strings to change based on how fast user 104 hits the “Enter” key to perform an action. - In some cases,
repository 130 may take non-trivial time to query based on the type of database employed. Since all candidates for inline auto-completion must have been typed at least once, for example, to be stored inrepository 130, a subset of identifiers user 104 has typed before may be also loaded into a in-memory database 180. In an embodiment, in-memory database 180 may have a smaller size and due to its in-memory nature, can he queried near-instantaneously. As an example, not intended to limit the invention, in-memory database 180 can be instantiated within memory associated withcomputing device 105. Such memory may include a form of random access memory (RAM). - In an embodiment, when the
match engine 140 determines matches, it first performs the steps of ranking and marking identifiers using in-memory database 180, and returns only the highest ranked match, which may be sufficient to cover all cases where inline auto-completion is initiated byinput receiver 102.Match engine 140 may then perform the steps described above, again, using therepository 130 which includes all identifiers navigated to by user 104 and returns a complete result set. In an embodiment, to make this effective, all matching algorithms used bymatch engine 140 produce the same “highest ranked” result when given eitherrepository 130 or in-memory data sets. This prevents the results of inline auto-completion from changing between separate passes ofrepository 130 and in-memory database 180. - As an example, any ranking function within
match engine 140 proceeds in an order calculated not only to provide good results fromrepository 130, but to provide the same “highest ranked” result for both the in-memory database andrepository 130. - In general terms, the
match engine 140 may determine that exact matches of user 104's input are better and need to be ranked highest, and failing that, identifiers which have been typed more often are better and ranked higher bymatch engine 140. - In an embodiment, if the highest ranked match is an identifier with a non-empty path,
match engine 140 searches for shorter identifiers visited by user 104, of which the input string is still a prefix. If no such URLs are found, but the original best match can be trimmed to just a hostname and still match user 104's input, that match is used as the new highest ranked match. - In this way, users are not presented with auto-completed text that takes them to a longer URL on a site where they would have preferred a shorter one or just wanted to visit a site's front page even when the most common action they had been taking was to visit a page deeper on the site.
-
FIG. 8 is a diagram illustrating an exemplary process of determining inline auto-complete candidates, according to an embodiment of the invention. -
Method 800 begins withmatch engine 140 determining if there are any exact matches to an input provided by user 104 to input receiver 102 (step 802). - If
match engine 140 determines exact matches to the input provided by user 104 to input receiver 102 (step 804), match engine 104 may assign those exact matches a higher rank compared to other matches (step 806) andmethod 800 proceeds to step 810. - If
match engine 140 does not determine exact matches to the input provided by user 104 to input receiver 102 (step 804), match engine 104 may assign inputs that have been typed more often by user 104 in input receiver 102 a higher rank as compared to other matches that may be determined and determines a highest ranked match (step 808). -
Match engine 140 may then check if the highest ranked match is a URL or any identifier with a non-empty path (step 810). - If the highest ranked match is a URL or any identifier with a non-empty path (step 810),
match engine 140 searches for shorter URLs the user has visited, of which the input string is still a prefix (step 812). - If the highest ranked match is a not a URL or any identifier with a non-empty path (step 810),
match engine 140 may determine if the highest ranked match determined instep 808 can be trimmed to just a hostname and still match the user input (step 814). - If the highest ranked match determined in
step 808 can be trimmed to just a hostname and still match user 104's input (step 814), that match may be determined to be the highest ranked match (step 816). If the highest ranked match determined instep 808 can not be trimmed to just a hostname and still match user 104's input (step 814), the match is preserved as-is by match engine 140 (step 818). - In this way,
match engine 140 may determine determining inline auto-complete candidates and present the highest ranked candidates to user 104, according to an embodiment of the invention. The steps illustrated inmethod 800 are exemplary and are not intended to limit the invention. Furthermore, it is to be appreciated that the steps ofmethod 800 may occur concurrently or in a different order to determine inline auto-complete candidates. - In an embodiment, when user 104 hits the “Enter” key to navigate to a URL typed in
input receiver 102, the database statistics for that URL are updated byinput recorder 110 inrepository 130 to indicate that the URL has been both visited and typed. However,input recorder 110 may not updaterepository 130 if user 104 has just replaced the contents ofinput receiver 102 with “pasted” text. This is because, if the text is copied and pasted intoinput receiver 110 the contents have not been “typed” intoinput receiver 110. For example, user 104 may be probably pasting text in as a substitute for clicking a link to the page from another program, and may be less interested in typing it in again to revisit it. Thus, the text is scored as “visited” bymatch engine 140, in a manner similar to scoring a hyperlink click on web content. -
Input recorder 110 may not updaterepository 130 if user 104 is attempting to reload or refresh a content area. In this scenario, user 104's attempt to reload or refresh the content area is also scored as “visited” bymatch engine 140. - Additionally,
repository 130 may not be updated byinput recorder 110 if user 104 is accepts an inline auto-complete match that does not look like a URL (e.g. the string “Search Google for airline prices”). In this exemplary scenario,match engine 140 does not score the underlying URL (e.g. “http://www.google.com/search?q= . . . ” or similar) as having been “typed”, since in this case user 104 did not see or type that explicit URL. - As a result of these changes, the typed counts for certain kinds of navigations stored in
repository 130 byinput recorder 110 are lower, and thus inputreceiver 102 may not initiate inline auto-completion for them. - In an embodiment, one or more match engine(s) 140 return matches in parallel, with assigned relevance scores. The results may then be merged into a sorted list by
match engine 140. As an example,match engine 140 may select the six most relevant matches available at any time, as well as an optional seventh entry at the bottom of the list. This optional seventh entry, for example, may indicate when user 104 has additional non-shown matches stored inrepository 130. -
Match engine 140 may return more results continuously over an arbitrary period of time after user 104 types a key intoinput receiver 102. Furthermore,input receiver 102 may change the set of results visible at any instant if newer results come in with higher relevance scores than the older results generated bymatch engine 140. - Input from user 104 is first categorized by
input recorder 110 as either being a URL, a search (for inputs which cannot possibly be URLs), or “unknown” (inputs like “food”, which could reasonably be considered intranet URLs or search terms). In an embodiment,match engine 140 ranks the search-related matches for these inputs higher than the navigation matches. Search-related matches are matches associated with search queries and navigation matches are matches associated with URLs. - This categorization of whether an input is a URL, search query or “unknown” is sent to match
engine 140 byinput recorder 110 when requesting their matches. For example, categorization byinput recorder 110 includes, distinguishing between e.g. “google.com” (a URL) and “google.co” (an “unknown”, since “co” is the country code for Colombia, whose registrar does not allow this particular form of URL), or between “http://abc@google.com” (a HTTP authentication login) and “abc@google.com”. In this case “abc@google.com” may be an email address, and so categorized as an “unknown” byinput recorder 110 since user 104 may probably wish to search, but “abc@google.com” also could be an HTTP authentication login. These examples are illustrative and are not intended to limit the invention. - In an embodiment,
match engine 140 may assign relevance scores to identifiers (e.g. URLs) based on an ordering of different types of results for each distinct kind of input received from user 104 (e.g. URL, search query or “unknown”), and then determines fixed relevance scores so that the actual results generated bymatch engine 140 are ranked based on the ordering of the results. In another embodiment,match engine 140 scores a match as a function of content of data received byinput receiver 102 instead of simply assigning it a fixed score. - Embodiments allow
match engine 140 to determine results synchronously with input received from user 104 while providing a consistent and stable ranking of results. Accordingly, the rankings of identifiers in the results generated bymatch engine 140 are chosen bymatch engine 140 such that all inputs from user 104 that can return any results will always return at least one result synchronously, and in a manner that one of the results is the highest-ranked match for that input. - In this way, for example, when user 104 hits the “Enter” key to execute a search or navigate to an identifier, auto-completed text may not change based on the time required to rank results. This improves overall user experience.
- As described earlier, inputs (e.g. URLs) provided by user 104 to input
receiver 102 can be classified as “unknown” when user 104 navigates to them but is more likely to want to search content. On various corporate and educational intranets, this tradeoff turns out to be wrong for intranet URLs, which often take to form of a single word as a hostname. Thus, there is a need to determine if user 104 intends to search for a query or if user 104 intends to navigate to a content area. For example, if user 104 types in the term “shoes” ininput receiver 102,input receiver 102 needs to determine if user 104 intends to search for the term “shoes” or navigate to a server associated with the name “shoes”. Furthermore, users on intranets don't always know about or wish to navigate to all local addresses. As an example, just because a coworker sets up a machine named “shoes” does not mean a user would want to navigate to that server address. - In an embodiment,
input receiver 102 detects cases where user 104 expected to navigate to a URL or identifier but received search results instead as the URL was treated as a search query. Even if the URL or identifier is treated as a search query, in parallel to presenting a search results page to user 104 based on user 104's input, a browser (such as a browser in computing device 105) sends a “HTTP HEAD” request to the relevant URL. The HTTP HEAD request may traverse through HTTP 301 andHTTP 302 re-direct responses. The HTTP 301 andHTTP 302 redirects are used to automatically redirect a web request. - When the request returns with a HTTP 2xx, HTTP 401, or HTTP 407 response code,
input recorder 110 considers it to be a potential “accidental search” case and it is recorded inrepository 130. As an example, HTTP 2xx, HTTP 401 and HTTP 407 response codes are associated with HTTP requests that return partial or no content. - The browser then determines whether the search result page is finished loading. If not, it waits until the search results page loads, and then user interface generator 150 displays a separate user interaction area or an “Infobar” asking if user 104 intended a navigate to a URL address. To detect such cases,
input receiver 110 flags inputs where the user 104's text was classified as “unknown” and user 104 hit the “Enter” key without explicitly selecting an option for inline auto-complete candidates. - If user 104 confirms intent to navigate by providing an input to the Infobar, this is scored by
input recorder 110 inrepository 130 as having typed in a URL address in the first place and as a result, in the future this URL address may be inline auto-completed byinput receiver 110. - In this way,
input receiver 102 may be able to determine if user 104 intends to navigate to a content area or execute a search query. Such a determination allowsinput receiver 102 to inline auto-complete user 104's input in an intuitive manner. Furthermore, it is to be appreciated that inline auto-completion serves as a “shortcut” to complete a task as it allows auto-completion of a user's input prior to the user typing the input in its entirety. Additionally, for example, the Infobar may help to check if a user input has been correctly interpreted as either a URL or a search query. -
FIG. 9A and 9B are screenshots of exemplary user interfaces, according to embodiments of the invention. -
FIG. 9A shows a screenshot ofuser interface 900 prior to initiation of a search by user 104.FIG. 9A showsURL bar 902,URL list 904 and option to search 906. In an embodiment,URL bar 902 receives an input from user 104. As an example, user 104 may type in an identifier intoURL bar 902.URL list 904 may be generated by user interface generator 150 based on input fromoption generator 120. The exemplary URL list 90 shown inFIG. 9A may include different types of URLs. These URLs may be URLs that have been visited by user 104 previously.URL list 904 shows exemplary URLs “www.amazon.com”, and other URLs such as “www.amazon.com/ . . . ”, If user 104 selects the URL “www.amazon.com”, user 104 may navigate to the Amazon.com homepage. If user 104 selects the other URL i.e. “www.amazon.com/ . . . ”, user 104 may navigate to content deeper in the Amazon.com website, for example, a specific product page. Furthermore, the last entry of URL list 104 displays “Search Amazon for <enter query>”. If user 104 selects this option,URL bar 902 may transform into a search bar that allows user 104 to directly search content within Amazon.com. User 104 may also initiate an option to search Amazon.com by pressing the “Tab” key as indicated by option to search 906. -
FIG. 9B shows a screenshot ofuser interface 900, after user 104 has pressed the “Tab” key or accepted the option to search by selecting “Search Amazon.com for <enter query>” (as shown inFIG. 9A ). As shown inFIG. 9B ,URL bar 902 is now transformed into a search box user interface that allows user 104 to search “amazon.com” by entering a search query intosearch input area 910. If user 104 now provides a search query into thesearch input area 910 and initiates a search, the browser may display results to user 104 as an Amazon.com results page. The last entry inURL list 912 displays “Search Google for Amazon.com”. Selecting this last input inURL list 912, allows user 104 to perform a Google search on Amazon.com. Such a search may return results to user 104 displayed as a Google results page. - In this way, a multi-step process of first navigating to a website and then performing a certain task, such as a search related task is avoided. This may improve user experience as a user is able to perform task associated with a content area prior to navigating to the content area.
- The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.
- The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.
- The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.
- The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.
Claims (15)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/462,722 US10678858B2 (en) | 2008-09-01 | 2017-03-17 | Method and system for generating search shortcuts and inline auto-complete entries |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US9343408P | 2008-09-01 | 2008-09-01 | |
US12/552,144 US8438148B1 (en) | 2008-09-01 | 2009-09-01 | Method and system for generating search shortcuts and inline auto-complete entries |
US13/860,102 US9600531B1 (en) | 2008-09-01 | 2013-04-10 | Method and system for generating search shortcuts and inline auto-complete entries |
US15/462,722 US10678858B2 (en) | 2008-09-01 | 2017-03-17 | Method and system for generating search shortcuts and inline auto-complete entries |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/860,102 Continuation US9600531B1 (en) | 2008-09-01 | 2013-04-10 | Method and system for generating search shortcuts and inline auto-complete entries |
Publications (2)
Publication Number | Publication Date |
---|---|
US20170192993A1 true US20170192993A1 (en) | 2017-07-06 |
US10678858B2 US10678858B2 (en) | 2020-06-09 |
Family
ID=48183340
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/552,144 Active 2031-02-21 US8438148B1 (en) | 2008-09-01 | 2009-09-01 | Method and system for generating search shortcuts and inline auto-complete entries |
US13/860,102 Active 2029-10-06 US9600531B1 (en) | 2008-09-01 | 2013-04-10 | Method and system for generating search shortcuts and inline auto-complete entries |
US15/462,722 Active 2031-01-11 US10678858B2 (en) | 2008-09-01 | 2017-03-17 | Method and system for generating search shortcuts and inline auto-complete entries |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/552,144 Active 2031-02-21 US8438148B1 (en) | 2008-09-01 | 2009-09-01 | Method and system for generating search shortcuts and inline auto-complete entries |
US13/860,102 Active 2029-10-06 US9600531B1 (en) | 2008-09-01 | 2013-04-10 | Method and system for generating search shortcuts and inline auto-complete entries |
Country Status (1)
Country | Link |
---|---|
US (3) | US8438148B1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN109857958A (en) * | 2019-02-13 | 2019-06-07 | 杭州孝道科技有限公司 | A kind of method that http input point is searched |
US10922103B2 (en) | 2015-12-31 | 2021-02-16 | Maria Francisca Jones | Electronic transaction method and apparatus |
US11507730B1 (en) * | 2021-09-30 | 2022-11-22 | Atlassian Pty Ltd. | User interface with command-line link creation for generating graphical objects linked to third-party content |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8438148B1 (en) | 2008-09-01 | 2013-05-07 | Google Inc. | Method and system for generating search shortcuts and inline auto-complete entries |
US20120311480A1 (en) * | 2010-02-12 | 2012-12-06 | Michael Cohen | Type and select data input field |
US20130018915A1 (en) * | 2010-07-16 | 2013-01-17 | Onuka Kalu Kalu | Mobile wireless communications device with search shortcut and related methods |
US9721040B2 (en) * | 2010-12-09 | 2017-08-01 | Oracle International Corporation | Mechanism to input, search and create complex data strings within a single dialog |
US8732660B2 (en) * | 2011-02-02 | 2014-05-20 | Novell, Inc. | User input auto-completion |
US20140195977A1 (en) * | 2012-04-11 | 2014-07-10 | Sherry S. Chang | User interface content personalization system |
US9930167B2 (en) * | 2014-07-07 | 2018-03-27 | Verizon Patent And Licensing Inc. | Messaging application with in-application search functionality |
US10025764B2 (en) * | 2014-10-30 | 2018-07-17 | Snap-On Incorporated | Methods and systems for taxonomy assist at data entry points |
US20170285932A1 (en) * | 2016-03-29 | 2017-10-05 | Microsoft Technology Licensing, Llc | Ink Input for Browser Navigation |
CN105956067B (en) * | 2016-04-27 | 2019-07-05 | 北京小米移动软件有限公司 | Resource search method and device |
US10387568B1 (en) * | 2016-09-19 | 2019-08-20 | Amazon Technologies, Inc. | Extracting keywords from a document |
US11138286B2 (en) * | 2018-07-31 | 2021-10-05 | Google Llc | Browser-based navigation suggestions for task completion |
US10824306B2 (en) * | 2018-10-16 | 2020-11-03 | Lenovo (Singapore) Pte. Ltd. | Presenting captured data |
CA3225789A1 (en) | 2021-08-11 | 2023-02-16 | Google Llc | User interfaces for surfacing web browser history data |
Family Cites Families (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6564213B1 (en) * | 2000-04-18 | 2003-05-13 | Amazon.Com, Inc. | Search query autocompletion |
US7110936B2 (en) * | 2001-02-23 | 2006-09-19 | Complementsoft Llc | System and method for generating and maintaining software code |
US6778979B2 (en) * | 2001-08-13 | 2004-08-17 | Xerox Corporation | System for automatically generating queries |
US20090006543A1 (en) * | 2001-08-20 | 2009-01-01 | Masterobjects | System and method for asynchronous retrieval of information based on incremental user input |
US20080148193A1 (en) * | 2001-09-13 | 2008-06-19 | John Moetteli | System and method of efficient web browsing |
US7668816B2 (en) * | 2002-06-11 | 2010-02-23 | Microsoft Corporation | Dynamically updated quick searches and strategies |
US7185271B2 (en) * | 2002-08-20 | 2007-02-27 | Hewlett-Packard Development Company, L.P. | Methods and systems for implementing auto-complete in a web page |
US8370203B2 (en) * | 2002-10-07 | 2013-02-05 | Amazon Technologies, Inc. | User interface and methods for recommending items to users |
US20080177994A1 (en) * | 2003-01-12 | 2008-07-24 | Yaron Mayer | System and method for improving the efficiency, comfort, and/or reliability in Operating Systems, such as for example Windows |
US7941762B1 (en) * | 2003-02-14 | 2011-05-10 | Shoretel, Inc. | Display of real time information for selected possibilities |
CN100485603C (en) * | 2003-04-04 | 2009-05-06 | 雅虎公司 | Systems and methods for generating concept units from search queries |
US8676830B2 (en) * | 2004-03-04 | 2014-03-18 | Yahoo! Inc. | Keyword recommendation for internet search engines |
US7603349B1 (en) * | 2004-07-29 | 2009-10-13 | Yahoo! Inc. | User interfaces for search systems using in-line contextual queries |
US20060074980A1 (en) * | 2004-09-29 | 2006-04-06 | Sarkar Pte. Ltd. | System for semantically disambiguating text information |
US7499940B1 (en) * | 2004-11-11 | 2009-03-03 | Google Inc. | Method and system for URL autocompletion using ranked results |
US20060190441A1 (en) * | 2005-02-07 | 2006-08-24 | William Gross | Search toolbar |
US7543244B2 (en) * | 2005-03-22 | 2009-06-02 | Microsoft Corporation | Determining and displaying a list of most commonly used items |
US7512904B2 (en) * | 2005-03-22 | 2009-03-31 | Microsoft Corporation | Operating system launch menu program listing |
US20060224951A1 (en) * | 2005-03-30 | 2006-10-05 | Yahoo! Inc. | Multiple window browser interface and system and method of generating multiple window browser interface |
US20070244868A1 (en) * | 2005-10-31 | 2007-10-18 | Grubb Michael L | Internet book marking and search results delivery |
US20070255702A1 (en) * | 2005-11-29 | 2007-11-01 | Orme Gregory M | Search Engine |
US8316429B2 (en) * | 2006-01-31 | 2012-11-20 | Blue Coat Systems, Inc. | Methods and systems for obtaining URL filtering information |
US20070198643A1 (en) * | 2006-02-21 | 2007-08-23 | Cope Ronald S | Address retrieval system and method |
US20070255754A1 (en) * | 2006-04-28 | 2007-11-01 | James Gheel | Recording, generation, storage and visual presentation of user activity metadata for web page documents |
US20080034424A1 (en) * | 2006-07-20 | 2008-02-07 | Kevin Overcash | System and method of preventing web applications threats |
US8564544B2 (en) * | 2006-09-06 | 2013-10-22 | Apple Inc. | Touch screen device, method, and graphical user interface for customizing display of content category icons |
US7580858B2 (en) * | 2007-02-21 | 2009-08-25 | Unoweb Inc. | Advertising revenue sharing |
US20080235383A1 (en) * | 2007-03-22 | 2008-09-25 | Eric Schneider | Methods, Systems, Products, And Devices For Generating And Processing DNS Friendly Identifiers |
US7693842B2 (en) * | 2007-04-09 | 2010-04-06 | Microsoft Corporation | In situ search for active note taking |
US8302013B2 (en) * | 2007-08-16 | 2012-10-30 | Yahoo! Inc. | Personalized page modules |
US8201081B2 (en) * | 2007-09-07 | 2012-06-12 | Google Inc. | Systems and methods for processing inoperative document links |
US8862690B2 (en) * | 2007-09-28 | 2014-10-14 | Ebay Inc. | System and method for creating topic neighborhood visualizations in a networked system |
US20100223259A1 (en) * | 2007-10-05 | 2010-09-02 | Aharon Ronen Mizrahi | System and method for enabling search of content |
US8667004B2 (en) * | 2007-11-30 | 2014-03-04 | Microsoft Corporation | Providing suggestions during formation of a search query |
US8131731B2 (en) * | 2007-12-27 | 2012-03-06 | Microsoft Corporation | Relevancy sorting of user's browser history |
US20090327913A1 (en) * | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Using web revisitation patterns to support web interaction |
US8438148B1 (en) | 2008-09-01 | 2013-05-07 | Google Inc. | Method and system for generating search shortcuts and inline auto-complete entries |
-
2009
- 2009-09-01 US US12/552,144 patent/US8438148B1/en active Active
-
2013
- 2013-04-10 US US13/860,102 patent/US9600531B1/en active Active
-
2017
- 2017-03-17 US US15/462,722 patent/US10678858B2/en active Active
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10922103B2 (en) | 2015-12-31 | 2021-02-16 | Maria Francisca Jones | Electronic transaction method and apparatus |
CN109857958A (en) * | 2019-02-13 | 2019-06-07 | 杭州孝道科技有限公司 | A kind of method that http input point is searched |
US11507730B1 (en) * | 2021-09-30 | 2022-11-22 | Atlassian Pty Ltd. | User interface with command-line link creation for generating graphical objects linked to third-party content |
US11822869B2 (en) | 2021-09-30 | 2023-11-21 | Atlassian Pty Ltd. | User interface with command-line link creation for generating graphical objects linked to third-party content |
Also Published As
Publication number | Publication date |
---|---|
US8438148B1 (en) | 2013-05-07 |
US9600531B1 (en) | 2017-03-21 |
US10678858B2 (en) | 2020-06-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10678858B2 (en) | Method and system for generating search shortcuts and inline auto-complete entries | |
US10789309B1 (en) | Associating an entity with a search query | |
US9323808B1 (en) | Predictive query suggestion caching | |
US8745067B2 (en) | Presenting comments from various sources | |
US8799280B2 (en) | Personalized navigation using a search engine | |
US10423668B2 (en) | System, method, and user interface for organization and searching information | |
US8423610B2 (en) | User interface for web comments | |
US8332426B2 (en) | Indentifying referring expressions for concepts | |
US20120059838A1 (en) | Providing entity-specific content in response to a search query | |
US20140012839A1 (en) | Suggesting alternative queries in query results | |
US8782029B1 (en) | Customizing image search for user attributes | |
US20110307432A1 (en) | Relevance for name segment searches | |
WO2011090638A2 (en) | Search suggestion clustering and presentation | |
JP2008508605A (en) | Search system and method using inline context query | |
KR20080024208A (en) | Systems and methods for providing search results | |
US10282358B2 (en) | Methods of furnishing search results to a plurality of client devices via a search engine system | |
US8959093B1 (en) | Ranking search results based on anchors | |
US7657513B2 (en) | Adaptive help system and user interface | |
CN109952571B (en) | Context-based image search results | |
US20150339387A1 (en) | Method of and system for furnishing a user of a client device with a network resource | |
US7970758B2 (en) | Automatic completion with LDAP | |
US8364672B2 (en) | Concept disambiguation via search engine search results | |
US9697281B1 (en) | Autocomplete search methods | |
US10592573B1 (en) | Interactively suggesting network location | |
US8595225B1 (en) | Systems and methods for correlating document topicality and popularity |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RAKOWSKI, BRIAN;MURPHY, GLEN;GOODGER, BEN;AND OTHERS;REEL/FRAME:051820/0190Effective date: 20091119 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |