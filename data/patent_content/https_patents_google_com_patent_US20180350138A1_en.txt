US20180350138A1 - Guided traversal in compression of triangular meshes - Google Patents
Guided traversal in compression of triangular meshes Download PDFInfo
- Publication number
- US20180350138A1 US20180350138A1 US15/612,736 US201715612736A US2018350138A1 US 20180350138 A1 US20180350138 A1 US 20180350138A1 US 201715612736 A US201715612736 A US 201715612736A US 2018350138 A1 US2018350138 A1 US 2018350138A1
- Authority
- US
- United States
- Prior art keywords
- vertices
- bitstream
- faces
- vertex
- traversal order
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T9/00—Image coding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
- G06T17/20—Finite element generation, e.g. wire-frame surface description, tesselation
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/50—Controlling the output signals based on the game progress
- A63F13/52—Controlling the output signals based on the game progress involving aspects of the displayed game scene
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/005—General purpose rendering architectures
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/60—Methods for processing data by generating or executing the game program
- A63F2300/66—Methods for processing data by generating or executing the game program for rendering three dimensional images
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2200/00—Indexing scheme for image data processing or generation, in general
- G06T2200/04—Indexing scheme for image data processing or generation, in general involving 3D image data
Definitions
- This description relates to compression of three-dimensional object data.
- Some applications such as video games involve representing three-dimensional objects to a user.
- an adventure game played by a user in a virtual reality environment may require the generation of virtual trees, rocks, and people.
- a mapping application may require the representation of buildings.
- each such object includes a triangular mesh having a plurality of vertices, i.e., points in space that form triangles.
- Such a triangular mesh involves a plethora of data that may be stored on disk and transmitted to the user.
- Practical implementations of storing and transmitting the triangular mesh data representing a virtual object include compressing the triangular mesh data.
- a method can include receiving, by processing circuitry of a computer configured to represent information related to a three-dimensional object, a plurality of vertices of a triangular mesh representing the three-dimensional object, the triangular mesh including a plurality of faces, each if the plurality of faces including three vertices of the plurality of vertices.
- the method can also include generating, by the processing circuitry, a first bitstream representing a traversal order for the plurality of vertices.
- the method can further include generating, by the processing circuitry, a second bitstream representing an array of errors between predicted vertices and vertices of the plurality of vertices.
- the method can further include performing, by the processing circuitry, a first compression operation on the first bit stream to produce a first compressed bitstream.
- the method can further include performing, by the processing circuitry, a second compression operation on the second bit stream to produce a second compressed bitstream, the first compressed bitstream and the second compressed bitstream producing the plurality of vertices of the triangular mesh in response to a decompression operation.
- FIG. 1 is a diagram that illustrates an example electronic environment for implementing improved techniques described herein.
- FIG. 2 is a diagram that illustrates an example method of performing the improved techniques within the electronic environment shown in FIG. 1 .
- FIG. 3 is a diagram that illustrates example generation of prediction error in a triangular mesh within the electronic environment shown in FIG. 1 .
- FIG. 4 is a diagram that illustrates an example encoding of a guided traversal within the electronic environment shown in FIG. 1 .
- FIG. 5A is a diagram that illustrates an example generation of a guided traversal using a minimum spanning tree within the electronic environment shown in FIG. 1 .
- FIG. 5B is a diagram that illustrates an example generation of a depth-first traversal.
- FIG. 6 is a diagram that illustrates an example generation of a guided traversal using a greedy algorithm within the electronic environment shown in FIG. 1 .
- FIG. 7 is a table that illustrates example results of encoding various objects using the guided traversals illustrated in FIGS. 5A and 6 .
- FIG. 8 illustrates an example of a computer device and a mobile computer device that can be used with circuits described here.
- a conventional approach to compressing triangular mesh data involves generating a traversal order for the vertices of the triangular mesh according to a deterministic formula. For example, a traversal order generated by the Edgebreaker algorithm begins at a specified face of the triangular mesh and proceeds to adjacent faces to the right if possible.
- the deterministic formula used to generate the traversal order for the vertices of the triangular mesh is arbitrary and is not optimal with respect to prediction errors that result from the traversal.
- Such prediction errors may be seen with respect to a parallelogram prediction; in this case, when traversal to any of several triangular faces is possible, there is no mechanism for the deterministic formula to produce as the next face that which would minimize the parallelogram prediction error.
- Larger prediction errors produce a larger entropy of the triangular mesh data to be compressed, which in turns results in a less efficient compression scheme.
- improved techniques of compressing triangular mesh data involve encoding a bitstream that defines a traversal order for vertices in a triangular mesh.
- the encoded bitstream defining the traversal order is in addition to an encoded bitstream of prediction errors and is an explicit, rather than implicit, traversal.
- One example of a bitstream that defines a traversal order is an array in which a bit signifies whether a step in an implicit, deterministic scheme such as a depth-first traversal.
- the usual deterministic steps are used to find the vertices of the triangular mesh unless specified by the traversal bitstream.
- Such an encoded bitstream when occupying less memory than that saved from the compression efficiencies gained in defining the traversal order defined in the bitstream, offers a simple, efficient compression.
- FIG. 1 is a diagram that illustrates an example electronic environment 100 in which the above-described improved techniques may be implemented. As shown, in FIG. 1 , the example electronic environment 100 includes a compression computer 120 .
- the compression computer 120 is configured to compress data associated with a triangular mesh representing a three-dimensional object.
- the compression computer 120 includes a network interface 122 , one or more processing units 124 , and memory 126 .
- the network interface 122 includes, for example, Ethernet adaptors, Token Ring adaptors, and the like, for converting electronic and/or optical signals received from the network 170 to electronic form for use by the point cloud compression computer 120 .
- the set of processing units 124 include one or more processing chips and/or assemblies.
- the memory 126 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like.
- the set of processing units 124 and the memory 126 together form control circuitry, which is configured and arranged to carry out various methods and functions as described herein.
- one or more of the components of the compression computer 120 can be, or can include processors (e.g., processing units 124 ) configured to process instructions stored in the memory 126 .
- processors e.g., processing units 124
- Examples of such instructions as depicted in FIG. 1 include a mesh manager 130 , an initialization manager 140 , a traversal manager 150 , a difference manager 160 , an encoding manager 170 , and a decoding manager 180 .
- the memory 126 is configured to store various data, which is described with respect to the respective managers that use such data.
- the mesh manager 130 is configured to receive, store, and/or transmit triangular mesh data, including face data 132 and vertex data 134 .
- Each of the vertices of the vertex data 134 includes an ordered triplet representing a point in space.
- the vertex data 134 includes as the ordered triplet indices which point to the point in space.
- each component of the ordered triplet is quantized, i.e., represented by a bit string of a specified length.
- the vertex data 134 also includes a vertex identifier for each vertex.
- the face data 132 includes a face identifier of a triangular face and the vertex identifiers of the three vertices that make up the triangular face.
- the mesh manager 130 is configured to receive the triangular mesh data from an external source over a network (not shown).
- the initialization manager 140 is configured to generate an initial traversal order 142 from which a deviation from that order may be derived.
- the initial traversal order 142 is an implicit, deterministic order such as a depth-first traversal order.
- the initial traversal order 142 is an implicit, deterministic order such as a breadth-first traversal order.
- the traversal manager 150 is configured to generate a traversal order 152 in which the vertices 134 are arranged for purposes of compressing the prediction error between a vertex and one predicted from consideration of its neighbors.
- the traversal manager 150 is configured to generate, as the traversal order 152 , a deviation from the initial traversal order 142 when the traversal manager 150 determines that the prediction error from a current triangular face is larger than that from another triangular face. It is the traversal order 152 and not the initial traversal order 142 that is encoded by the encoding manager 170 .
- the difference manager 160 is configured to produce difference data 162 between a point predicted by the vertices of a triangular face 132 of the triangular mesh and a neighboring vertex that is next according to the traversal order 152 .
- the difference data 162 includes a triplet of bit strings of some length specified by a quantization procedure.
- the encoding manager 170 is configured to encode the difference data 162 to produce encoded difference data 172 .
- the encoding manager 170 uses an entropy encoder such as, e.g., arithmetic coding or Huffman coding to perform the encoding of the difference data 162 .
- an entropy encoder such as, e.g., arithmetic coding or Huffman coding to perform the encoding of the difference data 162 .
- arithmetic coding or Huffman coding
- the decoding manager 180 is configured to decode the encoded difference data 172 to produce decoded difference data 182 . Given the decoded difference data 182 and the predictions made by each respective triangular face 132 in the triangular mesh, each of the vertices 134 of the triangular mesh may be deduced.
- the memory 126 can be any type of memory such as a random-access memory, a disk drive memory, flash memory, and/or so forth. In some implementations, the memory 126 can be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with the components of the compression computer 120 . In some implementations, the memory 126 can be a database memory. In some implementations, the memory 126 can be, or can include, a non-local memory. For example, the memory 126 can be, or can include, a memory shared by multiple devices (not shown). In some implementations, the memory 126 can be associated with a server device (not shown) within a network and configured to serve the components of the compression computer 120 .
- a server device not shown
- the components (e.g., modules, processing units 124 ) of the compression computer 120 can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or so forth.
- the components of the compression computer 120 can be configured to operate within a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the components of the compression computer 120 can be distributed to several devices of the cluster of devices.
- the components of the compression computer 120 can be, or can include, any type of hardware and/or software configured to process attributes.
- one or more portions of the components shown in the components of the compression computer 120 in FIG. 1 can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer).
- DSP digital signal processor
- FPGA field programmable gate array
- a memory e.g., a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer).
- a software-based module e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer.
- the components of the compression computer 120 can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server/host devices, and/or so forth.
- the components of the compression computer 120 can be configured to operate within a network.
- the components of the compression computer 120 can be configured to function within various types of network environments that can include one or more devices and/or one or more server devices.
- a network can be, or can include, a local area network (LAN), a wide area network (WAN), and/or so forth.
- the network can be, or can include, a wireless network and/or wireless network implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the network can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol.
- IP Internet Protocol
- the network can include at least a portion of the Internet.
- one or more of the components of the compression computer 120 can be, or can include, processors configured to process instructions stored in a memory.
- the mesh manager 130 (and/or a portion thereof), the initialization manager 140 (and/or a portion thereof), the traversal manager 150 (and/or a portion thereof), the difference manager 160 (and/or a portion thereof), the encoding manager 170 (and/or a portion thereof), and the decoding manager 180 (and/or a portion thereof) can be a combination of a processor and a memory configured to execute instructions related to a process to implement one or more functions.
- FIG. 2 is a flow chart depicting an example method 200 of compressing triangular mesh data.
- the method 200 may be performed by software constructs described in connection with FIG. 1 , which reside in memory 126 of the user device computer 120 and are run by the set of processing units 124 .
- the compression computer 120 receives a plurality of vertices of a triangular mesh representing the three-dimensional object.
- the triangular mesh includes a plurality of faces, each of the plurality of faces including three vertices of the plurality of vertices.
- the compression computer 120 generates a first bitstream representing a traversal order for the plurality of vertices.
- the traversal order is expressed as a deviation from an implicit, deterministic traversal order.
- the compression computer 120 generates a second bitstream representing an array of errors between predicted vertices and vertices of the plurality of vertices.
- the compression computer 120 performs a first compression (i.e., encoding) operation on the first bit stream to produce a first compressed bitstream.
- a first compression i.e., encoding
- the compression computer 120 performs a second compression operation on the second bit stream to produce a second compressed bitstream.
- the first compressed bitstream and the second compressed bitstream produce the plurality of vertices of the triangular mesh in response to a decompression operation.
- FIG. 3 is a diagram illustrating an example triangular mesh 300 and an example generation of prediction error.
- the triangle labeled “T” is taken to be the current triangular face for the purpose of generating a traversal order.
- One of the points of the triangle was a previous neighboring vertex to a previous triangular face.
- a predicted vertex position is generated using a parallelogram prediction method as illustrated in FIG. 3 .
- a parallelogram is formed from the triangle T. The vertex furthest from the triangle T would then be the prediction point for a neighboring vertex of the triangular mesh.
- a parallelogram is formed by a predicted vertex V 1 ′ opposite the vertex 330 .
- V 1 ′ is the predicted vertex to be compared with the vertex V 1 .
- the error vector 310 is the difference between V 1 and V 1 ′.
- a parallelogram is formed by a predicted vertex V 2 ′ opposite the vertex 340 .
- V 2 ′ is the predicted vertex to be compared with the vertex V 2 .
- the error vector 320 is the difference between V 2 and V 2 ′.
- predicted vertex may be derived using an alternative method.
- predicted vertex V 1 ′ may be derived by mirroring the vertex 330 across the side opposite the vertex 330 .
- FIG. 4 is a diagram illustrating an example triangular mesh with vertex identifiers at each vertex.
- the mesh includes interior vertices (e.g., vertices with indices 3, 6, 7, 10) and corner vertices (e.g., vertices with indices 0, 1, 2, 4, 5, 8, 9, 11, 12, 13).
- the approach defined herein begins by selecting an initial triangular face.
- that face is defined by the vertices with indices 3, 6, and 7 and is bolded.
- the next traversal step is one of the neighboring vertices (i.e., vertices with indices 2, 4, 10).
- the traversal manager 150 determines that the prediction error from the current triangular face (e.g., based on the parallelogram prediction shown in FIG. 3 ) is larger than that from another triangular face, as in this case, the traversal manager 150 indicates that the traversal order will deviate from an initial traversal 142 , in this case, the depth-first, deterministic traversal order.
- Such an indication is illustrated in FIG. 4 by a large “X” at the tip of the arrow that represents the first step in the initial traversal 142 . Further, the traversal manager 150 indicates this deviation with a “0” in the traversal order data 410 . That is, when the traversal step is to the left rather than the right, the traversal order data 410 has a “0”.
- the traversal manager 150 indicates each agreement with a “1” in the traversal order data 410 .
- the traversal order has a “1”.
- the traversal order 410 has very low entropy when there are mostly “1”s, which is the case with the traversal order 410 .
- the traversal manager may cause the compression manager 170 to not encode the traversal order data 410 but rather revert to the implicit formulation instead. This is because there are roughly an equal number of “1”s and “0”s in the traversal order data 410 and therefore a relatively high entropy.
- FIG. 5A is a diagram illustrating a triangular mesh 500 in which the traversal order data 152 is derived using a minimum spanning tree.
- the traversal order data 152 is derived using a minimum spanning tree.
- deriving the traversal order by maximizing the compression ratio of the difference data 162 plus the traversal order data 152 .
- it is reasonable to assume that such an optimization is an NP-hard problem so that approximate solutions like the minimum spanning tree are practical alternatives.
- each triangular face of the mesh 500 is a node of a graph and all neighboring faces are connected by a graph edge.
- the traversal manager 150 weights each edge by the prediction error at the end of an edge, i.e., in the face at which an edge terminates.
- the minimum spanning tree resulting from choosing the least of the prediction errors in choosing a branch of the spanning tree, while not producing the optimal overall prediction error, provides a small prediction error that can be close to the optimal.
- the runtime complexity of generating such a spanning tree is 0(F log F), where F is the number of faces in the triangular mesh.
- FIG. 5B is a diagram illustrating a depth-first implicit traversal of the triangular mesh 510 . Accordingly, the traversal manager 150 may generate the traversal order data as a deviation of the minimum spanning tree illustrated in FIG. 5A from the traversal illustrated in FIG. 5B .
- FIG. 6 is a diagram illustrating a triangular mesh 600 in which a traversal order is generated using a greedy algorithm as an alternative to the minimum spanning tree shown in FIG. 5A .
- the traversal manager 150 In the greedy algorithm, the traversal manager 150 always takes a given move, i.e., that provided by depth-first implicit traversal, unless the prediction error resulting from this move is much larger than that of the minimal prediction error available for a given vertex.
- the traversal manager 150 may control the deviation of the resulting traversal order 152 from the initial traversal order 142 by specifying the maximum allowed difference between the actual and minimal prediction error for a given vertex.
- This traversal strategy is shown in FIG. 6 .
- the initial prediction error is significantly larger than the prediction error from a different face of the triangular mesh. Accordingly, the step specified by the initial traversal 142 is not taken, and the resulting difference used will come later in the sequence specified by the traversal order 152 .
- FIG. 7 is a table illustrating some example compression gains resulting from applications of the traversal strategies described above.
- traversal encoding as described herein provides at least about 1-6% compression gain in the examples shown.
- FIG. 8 illustrates an example of a generic computer device P 00 and a generic mobile computer device P 50 , which may be used with the techniques described here.
- Computing device P 00 is intended to represent various forms of digital computers, such as laptops, desktops, tablets, workstations, personal digital assistants, televisions, servers, blade servers, mainframes, and other appropriate computing devices.
- Computing device P 50 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device P 00 includes a processor P 02 , memory P 04 , a storage device P 06 , a high-speed interface P 08 connecting to memory P 04 and high-speed expansion ports P 10 , and a low speed interface P 12 connecting to low speed bus P 14 and storage device P 06 .
- the processor P 02 can be a semiconductor-based processor.
- the memory P 04 can be a semiconductor-based memory.
- Each of the components P 02 , P 04 , P 06 , P 08 , P 10 , and P 12 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor P 02 can process instructions for execution within the computing device P 00 , including instructions stored in the memory P 04 or on the storage device P 06 to display graphical information for a GUI on an external input/output device, such as display P 16 coupled to high speed interface P 08 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices P 00 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory P 04 stores information within the computing device P 00 .
- the memory P 04 is a volatile memory unit or units.
- the memory P 04 is a non-volatile memory unit or units.
- the memory P 04 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device P 06 is capable of providing mass storage for the computing device P 00 .
- the storage device P 06 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory P 04 , the storage device P 06 , or memory on processor P 02 .
- the high speed controller P 08 manages bandwidth-intensive operations for the computing device P 00 , while the low speed controller P 12 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only.
- the high-speed controller P 08 is coupled to memory P 04 , display P 16 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports P 10 , which may accept various expansion cards (not shown).
- low-speed controller P 12 is coupled to storage device P 06 and low-speed expansion port P 14 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device P 00 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server P 20 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system P 24 . In addition, it may be implemented in a personal computer such as a laptop computer P 22 . Alternatively, components from computing device P 00 may be combined with other components in a mobile device (not shown), such as device P 50 . Each of such devices may contain one or more of computing device P 00 , P 50 , and an entire system may be made up of multiple computing devices P 00 , P 50 communicating with each other.
- Computing device P 50 includes a processor P 52 , memory P 64 , an input/output device such as a display P 54 , a communication interface P 66 , and a transceiver P 68 , among other components.
- the device P 50 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components P 50 , P 52 , P 64 , P 54 , P 66 , and P 68 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor P 52 can execute instructions within the computing device P 50 , including instructions stored in the memory P 64 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device P 50 , such as control of user interfaces, applications run by device P 50 , and wireless communication by device P 50 .
- Processor P 52 may communicate with a user through control interface P 58 and display interface P 56 coupled to a display P 54 .
- the display P 54 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface P 56 may comprise appropriate circuitry for driving the display P 54 to present graphical and other information to a user.
- the control interface P 58 may receive commands from a user and convert them for submission to the processor P 52 .
- an external interface P 62 may be provided in communication with processor P 52 , so as to enable near area communication of device P 50 with other devices. External interface P 62 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory P 64 stores information within the computing device P 50 .
- the memory P 64 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory P 74 may also be provided and connected to device P 50 through expansion interface P 72 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory P 74 may provide extra storage space for device P 50 , or may also store applications or other information for device P 50 .
- expansion memory P 74 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory P 74 may be provide as a security module for device P 50 , and may be programmed with instructions that permit secure use of device P 50 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory P 64 , expansion memory P 74 , or memory on processor P 52 that may be received, for example, over transceiver P 68 or external interface P 62 .
- Device P 50 may communicate wirelessly through communication interface P 66 , which may include digital signal processing circuitry where necessary. Communication interface P 66 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver P 68 . In addition, short-range communication may occur, such as using a Bluetooth, Wi-Fi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module P 70 may provide additional navigation- and location-related wireless data to device P 50 , which may be used as appropriate by applications running on device P 50 .
- GPS Global Positioning System
- Device P 50 may also communicate audibly using audio codec P 60 , which may receive spoken information from a user and convert it to usable digital information. Audio codec P 60 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device P 50 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device P 50 .
- Audio codec P 60 may receive spoken information from a user and convert it to usable digital information. Audio codec P 60 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device P 50 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device P 50 .
- the computing device P 50 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone P 80 . It may also be implemented as part of a smart phone P 82 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This description relates to compression of three-dimensional object data.
- Some applications such as video games involve representing three-dimensional objects to a user. In one example, an adventure game played by a user in a virtual reality environment may require the generation of virtual trees, rocks, and people. In another example, a mapping application may require the representation of buildings. In some applications, each such object includes a triangular mesh having a plurality of vertices, i.e., points in space that form triangles. Such a triangular mesh involves a plethora of data that may be stored on disk and transmitted to the user. Practical implementations of storing and transmitting the triangular mesh data representing a virtual object include compressing the triangular mesh data.
- In one general aspect, a method can include receiving, by processing circuitry of a computer configured to represent information related to a three-dimensional object, a plurality of vertices of a triangular mesh representing the three-dimensional object, the triangular mesh including a plurality of faces, each if the plurality of faces including three vertices of the plurality of vertices. The method can also include generating, by the processing circuitry, a first bitstream representing a traversal order for the plurality of vertices. The method can further include generating, by the processing circuitry, a second bitstream representing an array of errors between predicted vertices and vertices of the plurality of vertices. The method can further include performing, by the processing circuitry, a first compression operation on the first bit stream to produce a first compressed bitstream. The method can further include performing, by the processing circuitry, a second compression operation on the second bit stream to produce a second compressed bitstream, the first compressed bitstream and the second compressed bitstream producing the plurality of vertices of the triangular mesh in response to a decompression operation.
- The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a diagram that illustrates an example electronic environment for implementing improved techniques described herein. -
FIG. 2 is a diagram that illustrates an example method of performing the improved techniques within the electronic environment shown inFIG. 1 . -
FIG. 3 is a diagram that illustrates example generation of prediction error in a triangular mesh within the electronic environment shown inFIG. 1 . -
FIG. 4 is a diagram that illustrates an example encoding of a guided traversal within the electronic environment shown inFIG. 1 . -
FIG. 5A is a diagram that illustrates an example generation of a guided traversal using a minimum spanning tree within the electronic environment shown inFIG. 1 . -
FIG. 5B is a diagram that illustrates an example generation of a depth-first traversal. -
FIG. 6 is a diagram that illustrates an example generation of a guided traversal using a greedy algorithm within the electronic environment shown inFIG. 1 . -
FIG. 7 is a table that illustrates example results of encoding various objects using the guided traversals illustrated inFIGS. 5A and 6 . -
FIG. 8 illustrates an example of a computer device and a mobile computer device that can be used with circuits described here. - A conventional approach to compressing triangular mesh data involves generating a traversal order for the vertices of the triangular mesh according to a deterministic formula. For example, a traversal order generated by the Edgebreaker algorithm begins at a specified face of the triangular mesh and proceeds to adjacent faces to the right if possible.
- In the above-described conventional approach to compressing triangular mesh data, the deterministic formula used to generate the traversal order for the vertices of the triangular mesh is arbitrary and is not optimal with respect to prediction errors that result from the traversal. Such prediction errors may be seen with respect to a parallelogram prediction; in this case, when traversal to any of several triangular faces is possible, there is no mechanism for the deterministic formula to produce as the next face that which would minimize the parallelogram prediction error. Larger prediction errors produce a larger entropy of the triangular mesh data to be compressed, which in turns results in a less efficient compression scheme.
- In accordance with the implementations described herein, improved techniques of compressing triangular mesh data involve encoding a bitstream that defines a traversal order for vertices in a triangular mesh. The encoded bitstream defining the traversal order is in addition to an encoded bitstream of prediction errors and is an explicit, rather than implicit, traversal. One example of a bitstream that defines a traversal order is an array in which a bit signifies whether a step in an implicit, deterministic scheme such as a depth-first traversal. Upon decoding, the usual deterministic steps are used to find the vertices of the triangular mesh unless specified by the traversal bitstream. Such an encoded bitstream, when occupying less memory than that saved from the compression efficiencies gained in defining the traversal order defined in the bitstream, offers a simple, efficient compression.
-
FIG. 1 is a diagram that illustrates an exampleelectronic environment 100 in which the above-described improved techniques may be implemented. As shown, inFIG. 1 , the exampleelectronic environment 100 includes acompression computer 120. - The
compression computer 120 is configured to compress data associated with a triangular mesh representing a three-dimensional object. Thecompression computer 120 includes a network interface 122, one ormore processing units 124, andmemory 126. The network interface 122 includes, for example, Ethernet adaptors, Token Ring adaptors, and the like, for converting electronic and/or optical signals received from thenetwork 170 to electronic form for use by the pointcloud compression computer 120. The set ofprocessing units 124 include one or more processing chips and/or assemblies. Thememory 126 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like. The set ofprocessing units 124 and thememory 126 together form control circuitry, which is configured and arranged to carry out various methods and functions as described herein. - In some embodiments, one or more of the components of the
compression computer 120 can be, or can include processors (e.g., processing units 124) configured to process instructions stored in thememory 126. Examples of such instructions as depicted inFIG. 1 include amesh manager 130, aninitialization manager 140, atraversal manager 150, adifference manager 160, anencoding manager 170, and adecoding manager 180. Further, as illustrated inFIG. 1 , thememory 126 is configured to store various data, which is described with respect to the respective managers that use such data. - The
mesh manager 130 is configured to receive, store, and/or transmit triangular mesh data, includingface data 132 andvertex data 134. Each of the vertices of thevertex data 134 includes an ordered triplet representing a point in space. In some implementations, thevertex data 134 includes as the ordered triplet indices which point to the point in space. In some implementations, each component of the ordered triplet is quantized, i.e., represented by a bit string of a specified length. In some implementations, thevertex data 134 also includes a vertex identifier for each vertex. In some implementations, theface data 132 includes a face identifier of a triangular face and the vertex identifiers of the three vertices that make up the triangular face. In some implementations, themesh manager 130 is configured to receive the triangular mesh data from an external source over a network (not shown). - The
initialization manager 140 is configured to generate an initialtraversal order 142 from which a deviation from that order may be derived. In some implementations, the initialtraversal order 142 is an implicit, deterministic order such as a depth-first traversal order. In some implementations, the initialtraversal order 142 is an implicit, deterministic order such as a breadth-first traversal order. - The
traversal manager 150 is configured to generate atraversal order 152 in which thevertices 134 are arranged for purposes of compressing the prediction error between a vertex and one predicted from consideration of its neighbors. Along these lines, thetraversal manager 150 is configured to generate, as thetraversal order 152, a deviation from the initialtraversal order 142 when thetraversal manager 150 determines that the prediction error from a current triangular face is larger than that from another triangular face. It is thetraversal order 152 and not the initialtraversal order 142 that is encoded by theencoding manager 170. - The
difference manager 160 is configured to producedifference data 162 between a point predicted by the vertices of atriangular face 132 of the triangular mesh and a neighboring vertex that is next according to thetraversal order 152. In some implementations, thedifference data 162 includes a triplet of bit strings of some length specified by a quantization procedure. - The
encoding manager 170 is configured to encode thedifference data 162 to produce encodeddifference data 172. In some arrangements, theencoding manager 170 uses an entropy encoder such as, e.g., arithmetic coding or Huffman coding to perform the encoding of thedifference data 162. Ideally, there is as little variation in thedifference data 162 as possible so that the encodeddifference data 172 has small entropy. - The
decoding manager 180 is configured to decode the encodeddifference data 172 to produce decodeddifference data 182. Given the decodeddifference data 182 and the predictions made by each respectivetriangular face 132 in the triangular mesh, each of thevertices 134 of the triangular mesh may be deduced. - In some implementations, the
memory 126 can be any type of memory such as a random-access memory, a disk drive memory, flash memory, and/or so forth. In some implementations, thememory 126 can be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with the components of thecompression computer 120. In some implementations, thememory 126 can be a database memory. In some implementations, thememory 126 can be, or can include, a non-local memory. For example, thememory 126 can be, or can include, a memory shared by multiple devices (not shown). In some implementations, thememory 126 can be associated with a server device (not shown) within a network and configured to serve the components of thecompression computer 120. - The components (e.g., modules, processing units 124) of the
compression computer 120 can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or so forth. In some implementations, the components of thecompression computer 120 can be configured to operate within a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the components of thecompression computer 120 can be distributed to several devices of the cluster of devices. - The components of the
compression computer 120 can be, or can include, any type of hardware and/or software configured to process attributes. In some implementations, one or more portions of the components shown in the components of thecompression computer 120 inFIG. 1 can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer). For example, in some implementations, one or more portions of the components of thecompression computer 120 can be, or can include, a software module configured for execution by at least one processor (not shown). In some implementations, the functionality of the components can be included in different modules and/or different components than those shown inFIG. 1 . - Although not shown, in some implementations, the components of the compression computer 120 (or portions thereof) can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server/host devices, and/or so forth. In some implementations, the components of the compression computer 120 (or portions thereof) can be configured to operate within a network. Thus, the components of the compression computer 120 (or portions thereof) can be configured to function within various types of network environments that can include one or more devices and/or one or more server devices. For example, a network can be, or can include, a local area network (LAN), a wide area network (WAN), and/or so forth. The network can be, or can include, a wireless network and/or wireless network implemented using, for example, gateway devices, bridges, switches, and/or so forth. The network can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol. The network can include at least a portion of the Internet.
- In some embodiments, one or more of the components of the
compression computer 120 can be, or can include, processors configured to process instructions stored in a memory. For example, the mesh manager 130 (and/or a portion thereof), the initialization manager 140 (and/or a portion thereof), the traversal manager 150 (and/or a portion thereof), the difference manager 160 (and/or a portion thereof), the encoding manager 170 (and/or a portion thereof), and the decoding manager 180 (and/or a portion thereof) can be a combination of a processor and a memory configured to execute instructions related to a process to implement one or more functions. -
FIG. 2 is a flow chart depicting anexample method 200 of compressing triangular mesh data. Themethod 200 may be performed by software constructs described in connection withFIG. 1 , which reside inmemory 126 of theuser device computer 120 and are run by the set ofprocessing units 124. - At 202, the compression computer 120 (
FIG. 1 ) receives a plurality of vertices of a triangular mesh representing the three-dimensional object. The triangular mesh includes a plurality of faces, each of the plurality of faces including three vertices of the plurality of vertices. - At 204, the
compression computer 120 generates a first bitstream representing a traversal order for the plurality of vertices. In some implementations, the traversal order is expressed as a deviation from an implicit, deterministic traversal order. - At 206, the
compression computer 120 generates a second bitstream representing an array of errors between predicted vertices and vertices of the plurality of vertices. - At 208, the
compression computer 120 performs a first compression (i.e., encoding) operation on the first bit stream to produce a first compressed bitstream. - At 210, the
compression computer 120 performs a second compression operation on the second bit stream to produce a second compressed bitstream. The first compressed bitstream and the second compressed bitstream produce the plurality of vertices of the triangular mesh in response to a decompression operation. -
FIG. 3 is a diagram illustrating an exampletriangular mesh 300 and an example generation of prediction error. In this example, the triangle labeled “T” is taken to be the current triangular face for the purpose of generating a traversal order. One of the points of the triangle was a previous neighboring vertex to a previous triangular face. - In generating the traversal order, one wishes to minimize the prediction error from neighboring vertices, in this case labeled “V1” and “V2.” In some implementations, a predicted vertex position is generated using a parallelogram prediction method as illustrated in
FIG. 3 . In the parallelogram prediction method, a parallelogram is formed from the triangle T. The vertex furthest from the triangle T would then be the prediction point for a neighboring vertex of the triangular mesh. - As shown in
FIG. 3 , there are two neighboring vertices, and hence two possible traversal steps that may be selected as the next traversal step. In one example, a parallelogram is formed by a predicted vertex V1′ opposite thevertex 330. V1′ is the predicted vertex to be compared with the vertex V1. Theerror vector 310 is the difference between V1 and V1′. In another example, a parallelogram is formed by a predicted vertex V2′ opposite thevertex 340. V2′ is the predicted vertex to be compared with the vertex V2. Theerror vector 320 is the difference between V2 and V2′. - In some implementations, the predicted vertex may be derived using an alternative method. For example, predicted vertex V1′ may be derived by mirroring the
vertex 330 across the side opposite thevertex 330. - It turns out, nevertheless, that selecting a traversal order based directly on minimal prediction error is too computationally demanding for compression. Rather, the approach taken herein involves defining an explicit, or guided, traversal that does not rely on the connectivity of the mesh. This approach is disclosed in
FIGS. 4-6 . -
FIG. 4 is a diagram illustrating an example triangular mesh with vertex identifiers at each vertex. The mesh includes interior vertices (e.g., vertices withindices indices - The approach defined herein according to the above-described improved techniques begins by selecting an initial triangular face. In
FIG. 3 , that face is defined by the vertices withindices indices traversal manager 150 determines that the prediction error from the current triangular face (e.g., based on the parallelogram prediction shown inFIG. 3 ) is larger than that from another triangular face, as in this case, thetraversal manager 150 indicates that the traversal order will deviate from aninitial traversal 142, in this case, the depth-first, deterministic traversal order. - Such an indication is illustrated in
FIG. 4 by a large “X” at the tip of the arrow that represents the first step in theinitial traversal 142. Further, thetraversal manager 150 indicates this deviation with a “0” in thetraversal order data 410. That is, when the traversal step is to the left rather than the right, thetraversal order data 410 has a “0”. - Further steps agree with the
initial traversal order 142, and thetraversal manager 150 indicates each agreement with a “1” in thetraversal order data 410. In this case, when the traversal step is to the right, the traversal order has a “1”. In this form, thetraversal order 410 has very low entropy when there are mostly “1”s, which is the case with thetraversal order 410. - When the expense of the additional encoded data resulting from compressing the
traversal order data 410 is greater than the savings resulting from introducing smaller prediction errors in thedifference data 162, then the traversal manager may cause thecompression manager 170 to not encode thetraversal order data 410 but rather revert to the implicit formulation instead. This is because there are roughly an equal number of “1”s and “0”s in thetraversal order data 410 and therefore a relatively high entropy. -
FIG. 5A is a diagram illustrating atriangular mesh 500 in which thetraversal order data 152 is derived using a minimum spanning tree. In principle, one could imagine deriving the traversal order by maximizing the compression ratio of thedifference data 162 plus thetraversal order data 152. Nevertheless, it is reasonable to assume that such an optimization is an NP-hard problem so that approximate solutions like the minimum spanning tree are practical alternatives. - In the minimum spanning tree illustrated in
FIG. 5A , each triangular face of themesh 500 is a node of a graph and all neighboring faces are connected by a graph edge. Thetraversal manager 150 weights each edge by the prediction error at the end of an edge, i.e., in the face at which an edge terminates. The minimum spanning tree resulting from choosing the least of the prediction errors in choosing a branch of the spanning tree, while not producing the optimal overall prediction error, provides a small prediction error that can be close to the optimal. The runtime complexity of generating such a spanning tree is 0(F log F), where F is the number of faces in the triangular mesh. -
FIG. 5B is a diagram illustrating a depth-first implicit traversal of the triangular mesh 510. Accordingly, thetraversal manager 150 may generate the traversal order data as a deviation of the minimum spanning tree illustrated inFIG. 5A from the traversal illustrated inFIG. 5B . -
FIG. 6 is a diagram illustrating atriangular mesh 600 in which a traversal order is generated using a greedy algorithm as an alternative to the minimum spanning tree shown inFIG. 5A . In the greedy algorithm, thetraversal manager 150 always takes a given move, i.e., that provided by depth-first implicit traversal, unless the prediction error resulting from this move is much larger than that of the minimal prediction error available for a given vertex. Thetraversal manager 150 may control the deviation of the resultingtraversal order 152 from theinitial traversal order 142 by specifying the maximum allowed difference between the actual and minimal prediction error for a given vertex. - This traversal strategy is shown in
FIG. 6 . There, the initial prediction error is significantly larger than the prediction error from a different face of the triangular mesh. Accordingly, the step specified by theinitial traversal 142 is not taken, and the resulting difference used will come later in the sequence specified by thetraversal order 152. -
FIG. 7 is a table illustrating some example compression gains resulting from applications of the traversal strategies described above. In general, traversal encoding as described herein provides at least about 1-6% compression gain in the examples shown. -
FIG. 8 illustrates an example of a generic computer device P00 and a generic mobile computer device P50, which may be used with the techniques described here. - Computing device P00 is intended to represent various forms of digital computers, such as laptops, desktops, tablets, workstations, personal digital assistants, televisions, servers, blade servers, mainframes, and other appropriate computing devices. Computing device P50 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device P00 includes a processor P02, memory P04, a storage device P06, a high-speed interface P08 connecting to memory P04 and high-speed expansion ports P10, and a low speed interface P12 connecting to low speed bus P14 and storage device P06. The processor P02 can be a semiconductor-based processor. The memory P04 can be a semiconductor-based memory. Each of the components P02, P04, P06, P08, P10, and P12, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor P02 can process instructions for execution within the computing device P00, including instructions stored in the memory P04 or on the storage device P06 to display graphical information for a GUI on an external input/output device, such as display P16 coupled to high speed interface P08. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices P00 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- The memory P04 stores information within the computing device P00. In one implementation, the memory P04 is a volatile memory unit or units. In another implementation, the memory P04 is a non-volatile memory unit or units. The memory P04 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- The storage device P06 is capable of providing mass storage for the computing device P00. In one implementation, the storage device P06 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory P04, the storage device P06, or memory on processor P02.
- The high speed controller P08 manages bandwidth-intensive operations for the computing device P00, while the low speed controller P12 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller P08 is coupled to memory P04, display P16 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports P10, which may accept various expansion cards (not shown). In the implementation, low-speed controller P12 is coupled to storage device P06 and low-speed expansion port P14. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- The computing device P00 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server P20, or multiple times in a group of such servers. It may also be implemented as part of a rack server system P24. In addition, it may be implemented in a personal computer such as a laptop computer P22. Alternatively, components from computing device P00 may be combined with other components in a mobile device (not shown), such as device P50. Each of such devices may contain one or more of computing device P00, P50, and an entire system may be made up of multiple computing devices P00, P50 communicating with each other.
- Computing device P50 includes a processor P52, memory P64, an input/output device such as a display P54, a communication interface P66, and a transceiver P68, among other components. The device P50 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of the components P50, P52, P64, P54, P66, and P68, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- The processor P52 can execute instructions within the computing device P50, including instructions stored in the memory P64. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of the device P50, such as control of user interfaces, applications run by device P50, and wireless communication by device P50.
- Processor P52 may communicate with a user through control interface P58 and display interface P56 coupled to a display P54. The display P54 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface P56 may comprise appropriate circuitry for driving the display P54 to present graphical and other information to a user. The control interface P58 may receive commands from a user and convert them for submission to the processor P52. In addition, an external interface P62 may be provided in communication with processor P52, so as to enable near area communication of device P50 with other devices. External interface P62 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- The memory P64 stores information within the computing device P50. The memory P64 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Expansion memory P74 may also be provided and connected to device P50 through expansion interface P72, which may include, for example, a SIMM (Single In Line Memory Module) card interface. Such expansion memory P74 may provide extra storage space for device P50, or may also store applications or other information for device P50. Specifically, expansion memory P74 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, expansion memory P74 may be provide as a security module for device P50, and may be programmed with instructions that permit secure use of device P50. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory P64, expansion memory P74, or memory on processor P52 that may be received, for example, over transceiver P68 or external interface P62.
- Device P50 may communicate wirelessly through communication interface P66, which may include digital signal processing circuitry where necessary. Communication interface P66 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver P68. In addition, short-range communication may occur, such as using a Bluetooth, Wi-Fi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module P70 may provide additional navigation- and location-related wireless data to device P50, which may be used as appropriate by applications running on device P50.
- Device P50 may also communicate audibly using audio codec P60, which may receive spoken information from a user and convert it to usable digital information. Audio codec P60 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device P50. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device P50.
- The computing device P50 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone P80. It may also be implemented as part of a smart phone P82, personal digital assistant, or other similar mobile device.
- Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- In this specification and the appended claims, the singular forms “a,” “an” and “the” do not exclude the plural reference unless the context clearly dictates otherwise. Further, conjunctions such as “and,” “or,” and “and/or” are inclusive unless the context clearly dictates otherwise. For example, “A and/or B” includes A alone, B alone, and A with B. Further, connecting lines or connectors shown in the various figures presented are intended to represent exemplary functional relationships and/or physical or logical couplings between the various elements. Many alternative or additional functional relationships, physical connections or logical connections may be present in a practical device. Moreover, no item or component is essential to the practice of the embodiments disclosed herein unless the element is specifically described as “essential” or “critical”.
- Terms such as, but not limited to, approximately, substantially, generally, etc. are used herein to indicate that a precise value or range thereof is not required and need not be specified. As used herein, the terms discussed above will have ready and instant meaning to one of ordinary skill in the art.
- Moreover, use of terms such as up, down, top, bottom, side, end, front, back, etc. herein are used with reference to a currently considered or illustrated orientation. If they are considered with respect to another orientation, it should be understood that such terms must be correspondingly modified.
- Further, in this specification and the appended claims, the singular forms “a,” “an” and “the” do not exclude the plural reference unless the context clearly dictates otherwise. Moreover, conjunctions such as “and,” “or,” and “and/or” are inclusive unless the context clearly dictates otherwise. For example, “A and/or B” includes A alone, B alone, and A with B.
- In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
Priority Applications (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/612,736 US10950042B2 (en) | 2017-06-02 | 2017-06-02 | Guided traversal in compression of triangular meshes |
CN201880034683.9A CN110663062B (en) | 2017-06-02 | 2018-05-30 | Guide traversal in triangle mesh compression |
PCT/US2018/035077 WO2018222681A1 (en) | 2017-06-02 | 2018-05-30 | Guided traversal in compression of triangular meshes |
EP18175671.9A EP3410400A1 (en) | 2017-06-02 | 2018-06-04 | Guided traversal in compression of triangular meshes |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/612,736 US10950042B2 (en) | 2017-06-02 | 2017-06-02 | Guided traversal in compression of triangular meshes |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180350138A1 true US20180350138A1 (en) | 2018-12-06 |
US10950042B2 US10950042B2 (en) | 2021-03-16 |
Family
ID=62685175
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/612,736 Active 2037-08-07 US10950042B2 (en) | 2017-06-02 | 2017-06-02 | Guided traversal in compression of triangular meshes |
Country Status (4)
Country | Link |
---|---|
US (1) | US10950042B2 (en) |
EP (1) | EP3410400A1 (en) |
CN (1) | CN110663062B (en) |
WO (1) | WO2018222681A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2024015692A1 (en) * | 2022-07-12 | 2024-01-18 | Tencent America LLC | Texture coordinate coding in mesh compression |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112348935B (en) * | 2020-11-06 | 2022-09-23 | 芯勍(上海)智能化科技股份有限公司 | Wire frame rendering method, terminal device and computer-readable storage medium |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6262737B1 (en) * | 1998-01-30 | 2001-07-17 | University Of Southern California | 3D mesh compression and coding |
US20100086050A1 (en) * | 2004-05-04 | 2010-04-08 | University Technologies International Inc. | Mesh based frame processing and applications |
US20140198182A1 (en) * | 2011-09-29 | 2014-07-17 | Dolby Laboratories Licensing Corporation | Representation and Coding of Multi-View Images Using Tapestry Encoding |
US20140376827A1 (en) * | 2011-11-07 | 2014-12-25 | Wenfei Jiang | Predictive position encoding |
Family Cites Families (51)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5793371A (en) | 1995-08-04 | 1998-08-11 | Sun Microsystems, Inc. | Method and apparatus for geometric compression of three-dimensional graphics data |
US6525722B1 (en) | 1995-08-04 | 2003-02-25 | Sun Microsystems, Inc. | Geometry compression for regular and irregular mesh structures |
IL119082A (en) | 1996-08-16 | 2001-04-30 | Virtue Ltd | Method for creating graphic images |
US6167159A (en) | 1998-04-30 | 2000-12-26 | Virtue Ltd. | Triangle mesh compression |
KR19990085657A (en) | 1998-05-20 | 1999-12-15 | 윤종용 | Method and device for compressing connectivity information of graphic modeling data |
US6879324B1 (en) | 1998-07-14 | 2005-04-12 | Microsoft Corporation | Regional progressive meshes |
KR100294927B1 (en) | 1998-08-29 | 2001-07-12 | 윤종용 | 3-D mesh coding method and apparatus for incremental rendering |
US6204854B1 (en) | 1998-12-04 | 2001-03-20 | France Telecom | Method and system for encoding rotations and normals in 3D generated scenes |
AU2316500A (en) | 1999-01-27 | 2000-08-18 | Enbaya Ltd. | Progressive compression of triangular meshes |
KR100292803B1 (en) | 1999-07-06 | 2001-06-15 | 정선종 | Method and Apparatus for compressing vertex position of 3D mesh model |
KR100420006B1 (en) | 2001-06-13 | 2004-03-02 | 이상욱 | Method for coding a mesh based on triangular fan structure |
FR2827409B1 (en) | 2001-07-10 | 2004-10-15 | France Telecom | WAVELLET-BASED IMAGE CODING PROCESS ALLOWING ADAPTIVE TRANSMISSION OF WAVELLET COEFFICIENTS, SYSTEM SIGNAL AND CORRESPONDING DEVICES |
US7103211B1 (en) | 2001-09-04 | 2006-09-05 | Geometrix, Inc. | Method and apparatus for generating 3D face models from one camera |
KR100450823B1 (en) | 2001-11-27 | 2004-10-01 | 삼성전자주식회사 | Node structure for representing 3-dimensional objects using depth image |
KR100473704B1 (en) | 2002-02-27 | 2005-03-08 | 이상욱 | Method for progressively coding three-dimensional mesh image |
US20100166056A1 (en) | 2002-12-10 | 2010-07-01 | Steve Perlman | System and method for encoding video using a selected tile and tile rotation pattern |
KR100490121B1 (en) | 2003-05-07 | 2005-05-17 | 한국과학기술연구원 | Method for compressing 3d mesh model |
KR100511717B1 (en) | 2003-07-08 | 2005-09-02 | 재단법인서울대학교산학협력재단 | 3-dimension normal mesh data compression and transmission apparatus by using view-dependent processing |
KR100511719B1 (en) | 2003-07-08 | 2005-09-02 | 재단법인서울대학교산학협력재단 | 3-dimension normal mesh data compression apparatus by using rate-distortion optimization |
US7804498B1 (en) | 2004-09-15 | 2010-09-28 | Lewis N Graham | Visualization and storage algorithms associated with processing point cloud data |
KR20060087631A (en) | 2005-01-29 | 2006-08-03 | (주) 써니그라피 | Single-rate geometry coding for 3d triangle meshes |
KR20060087662A (en) | 2005-01-31 | 2006-08-03 | (주) 써니그라피 | Single-rate geometry coding for 3d quad meshes |
KR20060087647A (en) | 2005-01-31 | 2006-08-03 | (주) 써니그라피 | Single-rate connectivity codec for triangle meshes |
KR20060088136A (en) | 2005-02-01 | 2006-08-04 | (주) 써니그라피 | Single-rate connectivity codec for quad meshes |
KR101268508B1 (en) | 2007-01-11 | 2013-06-05 | 한양대학교 산학협력단 | Method and apparatus for encoding/decoding 3D mesh information including stitching information |
KR100927601B1 (en) | 2007-04-19 | 2009-11-23 | 한국전자통신연구원 | Method and apparatus for encoding / decoding of 3D mesh information |
KR100910031B1 (en) | 2007-09-06 | 2009-07-30 | 한양대학교 산학협력단 | Apparatus and Method of encoding 3 dimensional mesh model and Recording medium thereof |
KR20090097057A (en) | 2008-03-10 | 2009-09-15 | 삼성전자주식회사 | Method for coding and decoding connectivity of 3d data implemented as mesh model |
KR101048368B1 (en) | 2008-07-14 | 2011-07-11 | 한양대학교 산학협력단 | Apparatus and method for encoding 3D mesh model through connection information analysis |
KR100947595B1 (en) | 2008-07-29 | 2010-03-15 | 중앙대학교 산학협력단 | Method for voxelization using color coded polygons |
CN101403909B (en) * | 2008-11-12 | 2010-07-21 | 山东理工大学 | Triangular gridding subdivision curved surface NC tool track fast generation method |
EP2216750A1 (en) | 2009-02-06 | 2010-08-11 | Thomson Licensing | Method and apparatus for encoding 3D mesh models, and method and apparatus for decoding encoded 3D mesh models |
KR101590185B1 (en) | 2009-04-10 | 2016-02-01 | 삼성전자주식회사 | 3 methods for compressing and decompressing three-dimensional mesh |
US9753124B2 (en) | 2009-07-13 | 2017-09-05 | Celartem, Inc. | LIDAR point cloud compression |
KR101637624B1 (en) | 2009-10-15 | 2016-07-07 | 톰슨 라이센싱 | Method and apparatus for encoding a mesh model, encoded mesh model, and method and apparatus for decoding a mesh model |
KR101669873B1 (en) | 2009-10-16 | 2016-10-27 | 삼성전자주식회사 | APPARATUS AND METHOD FOR coding three dimentional mesh |
WO2011088595A1 (en) | 2010-01-25 | 2011-07-28 | Thomson Licensing | Method for encoding normals of a 3d mesh model, method for decoding normals of a 3d mesh model, encoder and decoder |
US8619085B2 (en) | 2010-03-08 | 2013-12-31 | Broadcom Corporation | Method and system for compressing tile lists used for 3D rendering |
FR2961930B1 (en) | 2010-06-29 | 2013-01-04 | Fittingbox | METHOD OF COMPRESSING / DECOMPRESSING THREE DIMENSIONAL MESH |
KR101654777B1 (en) | 2010-07-19 | 2016-09-06 | 삼성전자주식회사 | Apparatus and method for scalable encoding 3d mesh, and apparatus and method for scalable decoding 3d mesh |
CN102467753B (en) | 2010-11-04 | 2013-10-09 | 中国科学院深圳先进技术研究院 | Method and system for reconstructing time-varying point cloud based on framework registration |
KR101794537B1 (en) | 2011-01-21 | 2017-11-07 | 삼성전자주식회사 | Data processing apparatus and method |
KR101844297B1 (en) | 2011-03-17 | 2018-04-02 | 삼성전자주식회사 | Apparatus and method for encoding 3d mesh |
KR20140018919A (en) | 2011-04-12 | 2014-02-13 | 톰슨 라이센싱 | Method for encoding a mesh model, encoded mesh model and method for decoding a mesh model |
US8736603B2 (en) | 2011-11-02 | 2014-05-27 | Visual Technology Services Limited | Compression of texture rendered wire mesh models |
EP2777019A4 (en) | 2011-11-07 | 2016-07-06 | Thomson Licensing | Predictive position decoding |
US8811758B2 (en) | 2011-12-18 | 2014-08-19 | Numerica Corporation | Lossy compression of data points using point-wise error constraints |
US9396512B2 (en) | 2012-03-09 | 2016-07-19 | Nvidia Corporation | Fully parallel construction of k-d trees, octrees, and quadtrees in a graphics processing unit |
CN102682103B (en) | 2012-04-28 | 2014-03-26 | 北京建筑工程学院 | Three-dimensional space index method aiming at massive laser radar point cloud models |
US9734595B2 (en) | 2014-09-24 | 2017-08-15 | University of Maribor | Method and apparatus for near-lossless compression and decompression of 3D meshes and point clouds |
CN104318025B (en) * | 2014-10-27 | 2017-10-27 | 福州大学 | VLSI under anistree structure Steiner minimum trees is around barrier wiring unit |
-
2017
- 2017-06-02 US US15/612,736 patent/US10950042B2/en active Active
-
2018
- 2018-05-30 WO PCT/US2018/035077 patent/WO2018222681A1/en active Application Filing
- 2018-05-30 CN CN201880034683.9A patent/CN110663062B/en active Active
- 2018-06-04 EP EP18175671.9A patent/EP3410400A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6262737B1 (en) * | 1998-01-30 | 2001-07-17 | University Of Southern California | 3D mesh compression and coding |
US20100086050A1 (en) * | 2004-05-04 | 2010-04-08 | University Technologies International Inc. | Mesh based frame processing and applications |
US20140198182A1 (en) * | 2011-09-29 | 2014-07-17 | Dolby Laboratories Licensing Corporation | Representation and Coding of Multi-View Images Using Tapestry Encoding |
US20140376827A1 (en) * | 2011-11-07 | 2014-12-25 | Wenfei Jiang | Predictive position encoding |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2024015692A1 (en) * | 2022-07-12 | 2024-01-18 | Tencent America LLC | Texture coordinate coding in mesh compression |
Also Published As
Publication number | Publication date |
---|---|
WO2018222681A1 (en) | 2018-12-06 |
CN110663062A (en) | 2020-01-07 |
CN110663062B (en) | 2023-07-07 |
US10950042B2 (en) | 2021-03-16 |
EP3410400A1 (en) | 2018-12-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9787321B1 (en) | Point cloud data compression using a space-filling curve | |
CN111670463B (en) | Geometric grid simplification based on machine learning | |
US20200265552A1 (en) | Cost-driven framework for progressive compression of textured meshes | |
US20220020211A1 (en) | Efficient compression of data representing triangular mesh attributes | |
US10560698B2 (en) | Graphics server and method for streaming rendered content via a remote graphics processing service | |
US10158963B2 (en) | Ambisonic audio with non-head tracked stereo based on head position and time | |
US10950042B2 (en) | Guided traversal in compression of triangular meshes | |
US10553035B2 (en) | Valence based implicit traversal for improved compression of triangular meshes | |
US11094087B2 (en) | Dual serving scheme for LOD sequences | |
US20180124540A1 (en) | Projection-based audio coding | |
KR20100111660A (en) | Byte representation for enhanced image compression | |
CN116866658A (en) | Video data processing method, device, equipment and medium | |
US10511928B2 (en) | Spatial audio triggered by a users physical environment | |
CN111800622B (en) | Spatial adaptive video compression of multiple color and depth streams | |
US9264707B2 (en) | Multi-symbol run-length coding | |
WO2023071462A1 (en) | Point cloud encoding method and apparatus, point cloud decoding method and apparatus, and device, storage medium and program product | |
WO2024083039A1 (en) | Mesh encoding method, mesh decoding method and related device | |
TW201637456A (en) | Processing data in a thin client terminal |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:STAVA, ONDREJ;HEMMER, MICHAEL;SIGNING DATES FROM 20170602 TO 20170605;REEL/FRAME:042621/0058 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |