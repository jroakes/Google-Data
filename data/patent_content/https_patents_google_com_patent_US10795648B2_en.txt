US10795648B2 - Systems and methods of developments, testing, and distribution of applications in a computer network - Google Patents
Systems and methods of developments, testing, and distribution of applications in a computer network Download PDFInfo
- Publication number
- US10795648B2 US10795648B2 US15/828,071 US201715828071A US10795648B2 US 10795648 B2 US10795648 B2 US 10795648B2 US 201715828071 A US201715828071 A US 201715828071A US 10795648 B2 US10795648 B2 US 10795648B2
- Authority
- US
- United States
- Prior art keywords
- application
- server
- product
- modules
- product modules
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 title claims abstract description 31
- 238000012360 testing method Methods 0.000 title claims description 42
- 238000011161 development Methods 0.000 title description 16
- 230000018109 developmental process Effects 0.000 title 1
- 238000013507 mapping Methods 0.000 claims description 22
- 238000004891 communication Methods 0.000 claims description 11
- 230000000052 comparative effect Effects 0.000 claims description 5
- 230000007423 decrease Effects 0.000 claims description 4
- 238000004364 calculation method Methods 0.000 description 13
- 239000008186 active pharmaceutical agent Substances 0.000 description 11
- 238000010801 machine learning Methods 0.000 description 9
- 238000007781 pre-processing Methods 0.000 description 9
- 238000012545 processing Methods 0.000 description 8
- 238000004590 computer program Methods 0.000 description 6
- 238000004458 analytical method Methods 0.000 description 4
- 230000002787 reinforcement Effects 0.000 description 4
- QIVUCLWGARAQIO-OLIXTKCUSA-N (3s)-n-[(3s,5s,6r)-6-methyl-2-oxo-1-(2,2,2-trifluoroethyl)-5-(2,3,6-trifluorophenyl)piperidin-3-yl]-2-oxospiro[1h-pyrrolo[2,3-b]pyridine-3,6'-5,7-dihydrocyclopenta[b]pyridine]-3'-carboxamide Chemical compound C1([C@H]2[C@H](N(C(=O)[C@@H](NC(=O)C=3C=C4C[C@]5(CC4=NC=3)C3=CC=CN=C3NC5=O)C2)CC(F)(F)F)C)=C(F)C=CC(F)=C1F QIVUCLWGARAQIO-OLIXTKCUSA-N 0.000 description 3
- 230000008569 process Effects 0.000 description 3
- 230000035945 sensitivity Effects 0.000 description 3
- WZFUQSJFWNHZHM-UHFFFAOYSA-N 2-[4-[2-(2,3-dihydro-1H-inden-2-ylamino)pyrimidin-5-yl]piperazin-1-yl]-1-(2,4,6,7-tetrahydrotriazolo[4,5-c]pyridin-5-yl)ethanone Chemical compound C1C(CC2=CC=CC=C12)NC1=NC=C(C=N1)N1CCN(CC1)CC(=O)N1CC2=C(CC1)NN=N2 WZFUQSJFWNHZHM-UHFFFAOYSA-N 0.000 description 2
- 230000009471 action Effects 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 238000009434 installation Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- XULSCZPZVQIMFM-IPZQJPLYSA-N odevixibat Chemical compound C12=CC(SC)=C(OCC(=O)N[C@@H](C(=O)N[C@@H](CC)C(O)=O)C=3C=CC(O)=CC=3)C=C2S(=O)(=O)NC(CCCC)(CCCC)CN1C1=CC=CC=C1 XULSCZPZVQIMFM-IPZQJPLYSA-N 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- HMUNWXXNJPVALC-UHFFFAOYSA-N 1-[4-[2-(2,3-dihydro-1H-inden-2-ylamino)pyrimidin-5-yl]piperazin-1-yl]-2-(2,4,6,7-tetrahydrotriazolo[4,5-c]pyridin-5-yl)ethanone Chemical compound C1C(CC2=CC=CC=C12)NC1=NC=C(C=N1)N1CCN(CC1)C(CN1CC2=C(CC1)NN=N2)=O HMUNWXXNJPVALC-UHFFFAOYSA-N 0.000 description 1
- VZSRBBMJRBPUNF-UHFFFAOYSA-N 2-(2,3-dihydro-1H-inden-2-ylamino)-N-[3-oxo-3-(2,4,6,7-tetrahydrotriazolo[4,5-c]pyridin-5-yl)propyl]pyrimidine-5-carboxamide Chemical compound C1C(CC2=CC=CC=C12)NC1=NC=C(C=N1)C(=O)NCCC(N1CC2=C(CC1)NN=N2)=O VZSRBBMJRBPUNF-UHFFFAOYSA-N 0.000 description 1
- CONKBQPVFMXDOV-QHCPKHFHSA-N 6-[(5S)-5-[[4-[2-(2,3-dihydro-1H-inden-2-ylamino)pyrimidin-5-yl]piperazin-1-yl]methyl]-2-oxo-1,3-oxazolidin-3-yl]-3H-1,3-benzoxazol-2-one Chemical compound C1C(CC2=CC=CC=C12)NC1=NC=C(C=N1)N1CCN(CC1)C[C@H]1CN(C(O1)=O)C1=CC2=C(NC(O2)=O)C=C1 CONKBQPVFMXDOV-QHCPKHFHSA-N 0.000 description 1
- 241001672694 Citrus reticulata Species 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000012790 confirmation Methods 0.000 description 1
- 238000007405 data analysis Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000009429 electrical wiring Methods 0.000 description 1
- 230000005670 electromagnetic radiation Effects 0.000 description 1
- 230000002349 favourable effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 239000012092 media component Substances 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 238000003909 pattern recognition Methods 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000001105 regulatory effect Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 238000004088 simulation Methods 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/34—Graphical or visual programming
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/35—Creation or generation of source code model driven
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/15—Correlation function computation including computation of convolution operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/18—Complex mathematical operations for evaluating statistical data, e.g. average values, frequency distributions, probability functions, regression analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/71—Version control; Configuration management
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/50—Service provisioning or reconfiguring
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/60—Subscription-based services using application servers or record carriers, e.g. SIM application toolkits
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44521—Dynamic linking or loading; Link editing at or after load time, e.g. Java class loading
Definitions
- Conventional application publishing platforms provide a developer with a platform for uploading their applications and from which users can purchase applications. Typically, the developer can control distribution aspects such as pricing and geographical coverage from the platform. The provider of the platform often has some control over the applications available to maintain quality. Some platforms notify the developer of any missing application requirements before the application can be published. In some instances, a platform may notify the developer of new features of the platform.
- a method includes receiving, at a server having a mobile application publishing platform, application information.
- the method includes determining, at the server, a plurality of product modules based on the received application information.
- the product module may be stored or accessed from a library.
- the method includes dynamically determining, at the server, an affinity score for each of the product modules determined from the received application information.
- the method includes providing, by the server, at least one of the plurality of product modules for selection based on the dynamically determined affinity score.
- the method includes receiving, at the server, a selection of at least one of the plurality of product modules that is provided for selection based on the dynamically determined affinity score and generating, at the server, an application that integrates the selected at least one of the plurality of product modules with the received application information.
- the generated application may include a feature provided by the integrated at least one of the plurality of product modules.
- a system includes a storage device and a server, communicatively coupled to the storage device, having a mobile application publishing platform.
- the servers receives, via a communications interface, application information, and determines, at a processor of the server, a plurality of product modules stored in the storage device based on the received application information.
- the processor of the server dynamically determines an affinity score for each of the product modules determined from the received application information.
- the server provides at least one of the plurality of product modules for selection based on the dynamically determined affinity score.
- the server receives, via the communications interface, a selection of at least one of the plurality of product modules that is provided for selection based on the dynamically determined affinity score.
- the processor of the server generates an application that integrates the selected at least one of the plurality of product modules with the received application information so that the generated application includes a feature provided by the integrated at least one of the plurality of product modules.
- the system may be summarized as a system for developing applications.
- means for generating and publishing an application include receiving, at a server having a mobile application publishing platform, application information.
- the server determines a plurality of product modules based on the received application information.
- the server dynamically determines an affinity score for at least one of the plurality of product modules determined from the received application information.
- the server provides at least one of the plurality of product modules for selection based on the dynamically determined affinity score.
- the server receives a selection of the least one of the plurality of product modules that is provided for selection based on the dynamically determined affinity score and generates an application that integrates the selected at least one of the plurality of product modules with the received application information so that the generated application includes a feature provided by the integrated at least one of the plurality of product modules.
- FIG. 1 shows a method of generating and publishing an application according to an implementation of the disclosed subject matter.
- FIGS. 2-5 show display screens to receive application information according to an implementation of the disclosed subject matter.
- FIG. 6 shows suggested product modules for an application based on the provided application information according to an implementation of the disclosed subject matter.
- FIG. 7 shows testing of selected product modules according to an implementation of the disclosed subject matter.
- FIG. 8 shows product module testing results according to an implementation of the disclosed subject matter.
- FIG. 9 shows a computing device according to an implementation of the disclosed subject matter.
- FIG. 10 shows a network configuration according to an implementation of the disclosed subject matter.
- FIG. 11 shows an example network and system configuration according to an implementation of the disclosed subject matter.
- the disclosed invention relates to an application (“app”) development and publishing platform.
- the platform allows for submission by a developer of application code and/or descriptive information, images, video, or the like to be used to generate an application and/or improve the functionality, features, and/or performance of an application on a computing device and/or for use within a computer network.
- the platform of the disclosed subject matter allows developers of various programming skill levels to develop and publish applications.
- the information submitted by the developer may be used to determine the application genre or the developer may specify the genre as part of application submission process.
- the platform may suggest or recommend product modules to be added or used with the application to be developed. These product modules, when selected and integrated, may add features and/or functionality to the application.
- the platform may suggest product modules such as a speech-to-text module, a mapping module, and/or a purchasing module (e.g., shopping cart and purchase transaction module) that may be relevant to the development, functionality, and/or performance of the application on a computing device and/or within a computer network. That is, the recommended product module may provide additional features and/or functionality, or support the functionality of an application to be generated and published.
- the recommended product module may replace an alternative product module or append to the application to provide additional features and/or functionality.
- Interfacing between the recommended product module and the application may be through a common series of arguments (e.g., an Application Programming Interface “API”).
- API Application Programming Interface
- interfacing between an application and a mapping module may be provided by the application providing an address or destination and the product module returning the map.
- a speech-to-text product module may return a text string after receiving an instruction to initiate the module.
- the platform may generate an affinity score for possible product modules by, for example, examining one or more product modules in other existing applications of a similar genre, and relevant product modules may be suggested to the developer for integration with the application.
- the suggested product modules may be provided in a stacked arrangement where the modules are ordered based on affinity scores, with the product module with the highest affinity score appearing first in the stack.
- the developer can select one or more of the recommended product modules of the stack to be integrated with the application.
- the developer can also test the operating performance of application with the selected modules, and perform AB testing of various modules that may be used with the application. That is, the application performance with different recommended modules may be compared. Additionally, original modules of an application may be compared with recommended modules.
- Implementations of the disclosed subject matter are directed to a technical problem of improved application development, such as for mobile computing devices.
- the technical solution results in providing to a developer, at a publishing platform, recommendations of program modules relevant a to a developer's application, application type or genre. By recommending these program modules, the publishing platform may allow the developer to improve the quality of his application product as well as increase how quickly a developer can complete development of an application.
- Such recommended program modules may also provide additional features and/or functionality more readily.
- a program module provided by a publishing platform provider may be more extensively tested than by a developer and may be continually updated, program modules and applications in which they are included may be more reliable than those which are produced by the developer alone.
- a further technical problem addressed by this disclosure is how to improve consistency of common functions across applications provided by multiple developers.
- multiple developers may be encouraged to incorporate the same program modules such that users of applications will experience consistency among applications across different developers.
- a user may experience application features that he or she is more accustomed to or has familiarity with. This consistency of approach may also have benefits in applications where regulatory control is present.
- app publishing platforms provide developers and other users an interface to upload files, and provide options to control various aspects of distribution, such as the intended geographic distribution of the application, pricing, the devices capable of using the application, and analytics to monitor performance and earnings.
- Implementations of the disclosed subject matter provide application development assistance, development tools, product modules, and application performance testing so improve the features, capabilities, functionality, and performance of the application on a computing device and within a communications network.
- Some application development platforms have attempted to assist developers in developing an application. For example, such development platforms provided notification or alerts, where developers are notified for any missing requirement before the application could be published (e.g., alerting a developer regarding a missing content rating for an application when it is mandatory, or providing notification of a new service tax on in-application sales). In another example, such development platforms marketed a new feature or product (e.g., a new template for pricing, or a different analytics report integrated with a new service). The assistance provided by such application development platforms do not provide targeted assistance to developers of an application so as to improve the operation, features, and/or functionality of the application on a device and/or with computer networks.
- Implementations of the disclosed subject matter provide an application development platform which assists a developer in developing and publishing an application, and improving the performance of the application for a computing device and computer networks.
- a server may have an initial mapping of ⁇ app genre, product modules>. This tuple reflects the relevant product modules for a genre or category of applications. The server may utilize machine learning to determine which product modules are most relevant for one or more genres of applications.
- the initial mapping may be stored in a storage device communicatively coupled to the server, such as a database (e.g., database 15 shown in FIGS. 10-11 ).
- the server may dynamically generate an affinity score for one or more of the tuples.
- the server may use application information provided by the developer, and may suggest one or more product modules for the proposed application, which may be ordered by affinity score. That is, for a particular application genre, one or more product modules may be relevant, and can be presented to the developer in stacked order (e.g., ordered by affinity score).
- a threshold affinity score may be set at the server for recommendations of product modules. That is, the server may not suggest product modules for an application to be developed if the affinity score for a possible suggested product module does not meet or exceed the threshold affinity score.
- a recommendation engine module or ‘speech-to-text’ module may be relevant for a music genre application, but an ‘optimal delivery route’ module may not have an affinity score that meets the threshold for the music application.
- the optimal delivery route module may be more relevant for, and may have a have higher affinity score, for a delivery application (e.g., food delivery application, grocery delivery application, or the like).
- the relevant product modules may be constructed and/or suggested using application store metrics and/or analysis of similar applications of the same or similar genre or category. For example, developers of a music application or a content application would likely be interested in a recommendation engine module and/or a speech detection module. In another example, developers of e-commerce applications may be interested in a shopping cart analytics module, an order pattern module, and/or an item recommendation module.
- the server may suggest product module(s) to the developer based on application information provided by the developer to the server.
- the developer may provide feedback to the server 13 as to whether the suggested product modules are, for example, (1) useful, (2) useful later, and/or (3) not relevant.
- the server may adjust the affinity score for one or more product modules (e.g., suggested product modules) based on developer input. That is, the server may augment the affinity score for every positive confirmation, and may reduce the score for a negative association.
- the server may assist in application development by not suggesting product modules that may already be used and/or previously suggested, honoring developer input, regardless of an affinity score for a product module. For example, if a geolocation based application developer declines the suggested maps module, the server may not suggest the maps module again, despite a high affinity score for the module).
- Implementations of the disclosed subject matter may allow a developer to perform performance testing (e.g., A/B testing) with the one or more selected product modules.
- the developer may test one or more modules that they have developed against the suggested product modules, and/or test the performance of one or more suggested product modules against one another.
- implementations of the disclosed subject matter may provide developers with the ability to integrate a ‘cloud machine learning module’ into an application and test it with 10% of traffic to determine if the application performance improves.
- the improvement may be determined via a report generated by the server, which may show the performance of the module with respect to performance criteria (e.g., performance watchlists), and with respect to other tested modules.
- the server may increase the affinity score for a module if there is an increase in performance based on the testing, while the server may reduce the affinity score if there is a reported decrease in performance, based on the testing.
- the relevance of suggested product modules may improve over time, as more developers use the application development and publishing platform. That is, as usage of the platform increases, the affinity scores for product modules may have increased accuracy, and the product modules and applications that are generated may improve.
- FIG. 1 shows a method 100 of generating and publishing an application according to an implementation of the disclosed subject matter.
- the method 100 includes receiving, at a server having a mobile application publishing platform, application information at operation 110 .
- the application information may be received by server 13 and/or remote platform 17 shown in FIG. 10 , and/or by remote service 11 and/or processing unit 14 shown in FIG. 11 , as described in detail below.
- the server 13 may receive the application information from, for example, device 10 , 11 shown in FIGS. 9-11 .
- the application information can include an application, one or more code segments, a description of an application, images, audio, video, and the like.
- the application information may also include one or more genres of the application to be developed and published by the server. The application information received by the server is discussed in detail below in connection with FIGS. 2-5 .
- the server may determine product modules based on the received application information.
- the application information can include at least one genre type of the application.
- the developer may select one or more genres 230 related to the application to be provided to the server.
- the server may determine one or more existing applications in a storage device coupled to the server, with each having a genre type that corresponds to that of the determined genre type of the application.
- the storage device which stores the existing applications may be remote service 11 , processing unit 14 , database 15 , and/or remote platform 17 shown in FIGS. 10-11 and described below.
- the server may determine one or more existing applications that each have the genre type that corresponds to that of the determined genre type of the application by determining a statistical correlation between the genre type and one or more product modules of the existing applications.
- the server may determine the statistical correlation with the dynamically determined affinity score.
- the affinity score may be based on a weighting factor assigned to the one or more product modules.
- the statistical correlation is determined from the frequency of application programming interface calls to the one or more product modules.
- the server may map a tuple that includes the genre type and the one or more product modules stored in the storage device. That is, the server may map a correspondence between a genre and one or more modules that may be relevant for the genre.
- the server may revise the tuple mapping and the affinity score based on the use of the one or more product modules, a received input to the server, and the like.
- the server may dynamically determine an affinity score for each of the product modules determined from the received application information.
- the application information is an identification of a genre type
- the program modules may have an affinity score for each genre.
- the at least one product module provided for selection by the server has an affinity score that exceeds a threshold affinity score.
- the server may provide product modules for selection based on the dynamically determined affinity score at operation 135 .
- the server may receive a selection of at least one of the product modules that is provided for selection based on the dynamically determined affinity score at operation 140 .
- the product modules suggested by the server are shown in FIG. 6 and described in detail below.
- the server may provide the product modules for selection in an order based on the dynamically determined affinity score. That is, product modules with higher and/or more desirable affinity scores may be towards the beginning of the stack (e.g., list), whereas product modules with lower affinity scores or less desirable affinity scores may be placed later in the provided stack.
- the server may adjust the affinity scores for the product modules based on an at least one input received at the server.
- the input may be the selection of one or more product modules by the application developer.
- the selection of a product module may augment the affinity score for the product module and the corresponding genre which includes the application.
- the server may perform a comparative testing of two or more of the selected product modules. Selection of product modules for testing, setting performance goals, and providing testing results is shown in FIGS. 6-8 , and are described in detail below.
- the comparative testing of the two or more selected product modules may be performed by the server testing the two or more selected product modules using predetermined percentages of data, where the data are received by the server and/or retrieved from a storage device coupled to the server.
- the server may perform a comparative testing of a first application having a first program module of a first type that is included in the application information with a second application having a second program module that is different from the first program module and is of the first type.
- the server may generate an application that integrates the selected product modules with the received application information so that the generated application includes a feature provided by the integrated product modules. That is, the selected product modules add one or more features to the application that is generated by the server. In some implementations, one or more product modules of the application may be selected for testing.
- the server may publish the application by making it available for download by, for example, computing devices 10 , 11 .
- FIG. 2 shows a display 200 to receive application information according to an implementation of the disclosed subject matter.
- the display 200 includes a file directory 210 , where a developer at computing device 10 , 11 , communicatively coupled to the server 13 via network 7 , may select one or more applications (e.g., Application_1, Application_2, or the like), one or more graphics files (e.g., Graphics_1 or the like), one or more video files (e.g., Video_1 of the like), one or more image files (e.g., Images_1, Images_2, or the like), and/or one or more icon files (e.g., Icon_1, Icon_2, or the like) which may be uploaded to the server 13 via the computing device 10 , 11 .
- applications e.g., Application_1, Application_2, or the like
- graphics files e.g., Graphics_1 or the like
- video files e.g., Video_1 of the like
- image files e.g., Images_1, Images_2,
- the display 200 may include genre directory 230 , which may receive selections from a developer for a genre of the application that the developer would like to develop and publish via an application publishing platform of the server 13 .
- the one or more selectable genres may include, for example, books, business, catalogs, education, entertainment, finance, food & drink, games, health & fitness, lifestyle, medical, music, navigation, news, photo & video, productivity, reference, social networking, sports, travel, utilities, weather, and the like.
- a sub-genre may be received by the server.
- the games genre may include the following sub-genres: action, adventure, arcade, board, card, casino, dice, educational, family, kids, music, puzzle, racing, role playing, simulation, sports, strategy, trivia, word, and the like.
- FIG. 3 shows a display 300 to receive application information according to an implementation of the disclosed subject matter.
- the developer may enter in text box 310 a proposed application name for the application to be developed and published, and may select a submit button 320 to finalize the name and provide it to the server 13 .
- the developer may enter a text description for the application to be developed and published in the text box 330 , and may select a submit button 340 to finalize the text and provide it to the server 13 .
- the developer may enter keywords related to the application in text box 360 , and may select a submit button 370 to finalize the text at provide it to the server 13 .
- FIG. 4 shows a display 400 to receive application information according to an implementation of the disclosed subject matter.
- a developer may select a default language for the application to be developed and published by the server 13 from the selectable default language list 410 .
- the default language list 410 may include, for example, English, Spanish, French, Chinese (Mandarin), Japanese, Russian, Hindi/Urdu, Arabic, Portuguese, German, Bengali, and the like.
- the developer may select one or more geographic regions 430 in which the application may be made available when it is generated and published by the server 13 .
- the geographic regions may include, for example, the United States, Canada, Mexico, Europe, the Middle East, South America, Central America, Japan, Korea, China, India, Australia, and the like.
- the geographic regions may be individual countries and/or regions which include one or more countries.
- the developer may select the submit button 440 to provide the geographic regions as application information to the server 13 .
- FIG. 5 shows a display 500 to receive application information according to an implementation of the disclosed subject matter.
- the display 500 may include a release date text box 510 for a developer to enter an intended release date of the application to be generated and published by the server.
- the developer may select submit button 520 to provide the release date to the server 13 as application information.
- the display 500 may provide an application price 530 that may provide selectable prices for the application when it is published. For example, the developer may select the pricing to be free, $0.99, $1.99, $2.99, $3.99, $4.99, or the like.
- the developer may select the submit button 540 to provide the pricing information to the server 13 as application information.
- FIG. 6 shows a display 600 that provides suggested product modules for an application based on the provided application information from displays 200 , 300 , 400 , and/or 500 of FIGS. 2-5 according to an implementation of the disclosed subject matter.
- the server 13 may recommend one or more product modules 610 .
- the suggested product modules may be stored, for example, in a storage device coupled to the server 13 , a database 15 , a remote platform 17 , and/or a remote service 11 shown in FIGS. 10-11 .
- the sever 13 may perform a pre-processing calculation on one or more applications and/or product modules that may be stored, for example, in database 15 and/or remote platform 17 (e.g., which may be a mobile application store).
- the server 13 may determine significant applications and/or product modules for each genre or category, and for any sub-genre and/or any subcategory. The significance may be determined based on affinity score, frequency of usage, length of time installed, average user rating of the application, number of installations, or the like.
- the server 13 may determine a statistical correlation between genres or categories used (including any sub-genres and/or subcategories), and may represent the determined statistical correlation with the affinity score.
- the affinity score may integrate frequency of API (application programming interface) calls for one or more product modules to determine which product modules of applications are used, and determine the frequency of their use.
- API application programming interface
- the calculation of an affinity score may be based on rule-based machine learning, which may be performed server 13 shown in FIG. 10 .
- the rule-based machine learning may be able to determine relationships and/or the strength of relationships between product modules (and/or APIs), and the category of applications from a large dataset of applications (e.g., where the applications may include games, and where the applications may be stored in the database 15 and/or remote platform 17 shown in FIG. 10 ).
- the large dataset of applications may include the applications which may be offered via a mobile application store (e.g., which may be part of database 15 and/or remote platform 17 shown in FIG. 10 ).
- the calculation of the affinity score may be performed by the server 13 in two phases, where the first phase may be a pre-processing calculation, and the second phase may be a reinforcement calculation.
- the server 13 may utilize machine learning to determine true positive and/or true negative set(s) of applications (i.e., successful and not-so-successful apps, based on usage) from the one or more applications stored, for example, in the database 15 as part of the pre-processing phase (i.e., the first phase) of determining the affinity score.
- This determined set of applications may be used by the server 13 so as to establish the correlation and weight of the modules of the applications.
- This pre-processing by the server 13 may be used to perform an initial mapping of ⁇ app genre, product modules> tuple(s) across the applications and/or product modules stored in the databased 15 .
- the set of applications and/or the initial mapping of applications may be tested with manual curation.
- the pre-preprocessing performed by, for example, the server 13 may utilize an association rule learning method of machine learning.
- This association rule learning of the pre-processing may be performed over a set of product modules having positive associations and a set of applications and/or product modules having negative associations.
- the positive associations may include at least a portion of the subset of the most popular applications
- the negative associations may include at least a portion of the subset of least popular applications.
- the subset of most popular applications may be determined based on metrics of applications from an application store (e.g., a mobile application store), which may be remote platform 17 and/or database 15 shown in FIG. 10 .
- the popularity of an application may be determined by the average amount of time that an application is installed for (e.g., greater than 30 days, greater than 60 days, greater than 90 days, or the like), an application engagement (e.g., the average usage time over a period of time, such as 30 days, 60 days, or 90 days), an average user rating of the application, the number of user ratings above a threshold rating value, the number of installations (e.g., by general users and/or by influential users), the number of favorable reviews by publications, or the like.
- an application store e.g., a mobile application store
- the popularity of an application may be determined by the average amount of time that an application is installed for (e.g., greater than 30 days, greater than 60 days, greater than 90 days, or the like), an application engagement (e.g., the
- the subset of least popular applications may be determined based the number of downloads and/or sales that are below a predetermined threshold level, the average amount of time that the application is installed for before it is uninstalled (e.g., less than 3 days, less than 7 days, less than 14 days, less than 30 days, or the like), the average user rating of the application that is below a predetermined threshold rating value, and the like.
- the set of n binary attributes or ‘items’ may represent the available APIs and/or product modules that the application store (e.g., remote platform 17 shown in FIG. 10 ) and/or database (e.g., database 15 shown in FIG. 10 ) may offer.
- Each application in the positive association subcategory and the negative association subcategory may represent a unique transaction.
- the set of transactions may be collectively referred to as the database in the association rule learning of the machine learning method performed by server 13 .
- the presence of an ‘item’ in a ‘transaction’ does not constitute a positive ‘implication’. Rather, an actual usage of the ‘item’, such as by runtime call of the product module by an application and/or a client-server exchange of data related to the product module may constitute a positive ‘implication’.
- the association rule may be used by the server 13 to provide a mapping of a successful transaction (e.g., one having a positive ‘implication’) and the set of items (e.g., ⁇ subcategory_example> ⁇ item1, item2 ⁇ ) which may provide the basis for a normalized affinity score distribution.
- the association rule may be used by server 13 so that implication rules within items (e.g., if ⁇ item1, item2 ⁇ item 4 ⁇ ) may be used to provide additional suggestions (e.g., advanced suggestions that may have increased granularity) in the application development environment of the disclosed subject matter.
- the following example may illustrate the pre-preprocessing performed by, for example, the server 13 , as described above.
- ⁇ music_player> may be a subcategory of interest under a “Music & Audio” category in the application store.
- the database or set of transactions in this case may be one or more music_player product modules (e.g., Music_app1_Example1, Music_app2_Example2, Music_app3_Example3, Music_app4_Example4, Music_app5_Example5, Music_app6_Example6_Long_Tail_Music_Player1, Music_app7 Example7_Long_Tail_Music_Player2, and Music_app8_Example8_Long_Tail_Music_Player3, or the like, such as shown in Table 1 below).
- music_player product modules e.g., Music_app1_Example1, Music_app2_Example2, Music_app3_Example3, Music_app4_Exa
- These applications may represent the positive association (e.g., successful datasets in that subcategory, which may be defined by the length of their installs, such as greater than 30 days of being installed on a computing device, such as device 10 , 11 shown in FIG. 10 ). While the negative association may represent the unsuccessful datasets (e.g., which may be represented by Music_app_longtail_Unsuccessful).
- the items and/or binary attributes for the “Music & Audio” subcategory may be product modules and/or APIs.
- these product modules and/or APIs for this subcategory may include “speech_text_api” (e.g., to search songs by voice input), “recommendation_engine” (e.g., to suggest a similar song, artist, and/or playlist), “social_plugin_module” (e.g., to share a song, album, and/or playlist with others), “authentication api” (e.g., to allow users to sign in and be authenticated), or the like. That is, the association rule applied by the machine learning of server 13 may output a mapping table as shown in Table 1 below.
- Table 1 The examples of the applications and their respective values are for illustration purposes only, and other music applications and/or modules may be used. In Table 1, an entry of ‘1’ may represent a positive ‘implication’, and ‘0’ may represent an absence of an implication:
- Music_app1_Example1 may have positive implications for Module1_speech_text_api, Module2_recommendation_engine, Module3_social_plugin_module, and Module5_user_Authentication_api, but may not have an implication for Module4_vision_api.
- Music_app4_Example4 may have positive implications for all of the product modules and/or APIs for the subcategory ⁇ music_player>, including Module1_speech_text_api, Module2_recommendation_engine, Module3_social_plugin_module, Module4_vision_api, and Module5_user_Authentication_api.
- the affinity value may be a numerical digest and/or value that represents the mapping of applications with product modules and/or APIs as illustrated in Table 1. For example, if 100% of successful transactions (i.e. list of applications) has a positive implication represented by the numerical value 1 above for a binary attribute (e.g., an API and/or product module), then the affinity score for that binary attribute for that subcategory may be 1.00 (e.g., as with Music_app4_Example4).
- the associations may be expressed as a percentile (e.g., associations appearing 85% of the time may result in an affinity score of 0.85).
- the example above, which includes Table 1, may be a simple digest. Depending on the cluster density (e.g., if most attributes are between 0.7 and 0.9), a scaling factor may be applied to spread out the distribution.
- the end result is a mapping of application subcategory (e.g., the ⁇ music_player> subcategory in the example above) and various product modules and/or APIs (e.g., Music_app1_Example1, Music_app2_Example2, Music_app3_Example3, and the like), as explained throughout.
- application subcategory e.g., the ⁇ music_player> subcategory in the example above
- various product modules and/or APIs e.g., Music_app1_Example1, Music_app2_Example2, Music_app3_Example3, and the like
- the reinforcement calculation may be performed.
- the derived affinity score (e.g., the first phase pre-processing calculation of the affinity score, as discussed above) for the ⁇ app_genre, product_module> tuple may be adjusted based on a developer's feedback.
- the feedback may include, for example, selection of the product module and/or API for use in an application being developed, selection of a related product module and/or API for use in the application being developed, the declining of a recommendation for a product module and/or API, or the like.
- the reinforcement calculation of the second phase may include presenting the modules to the developer based on the subcategory (e.g., the ⁇ music_player> subcategory in the example above).
- the feedback from developers may be used to adjust the affinity score.
- the adjustment of the affinity score may be periodically adjusted and/or continuously adjusted based on developer feedback.
- An affirmative use of the module e.g., selection of the module for an application to be developed, or the like
- a negative signal input e.g., such as input from the developer to decline to use the module for an application to be developed
- the developer feedback may weighted lower in the affinity score calculation than the first phase of affinity score calculation, which uses the association rule mapping.
- a dampening factor may be applied to the feedback received from developer.
- a scale factor of 0.1 (or lower for feedback with modules and/or APIs with a large range in the feedback provided by developers—i.e., noisy feedback) may be applied to the feedback from the developer. This scale factor may indicate that 10 affirmative (or negative) developer feedback instances would count as 1 affirmative (or negative) in the affinity score calculation. This may adjust the score by 0.1 percent.
- the initial tuple mapping and affinity scores from above pre-processing may be reinforced and/or refined using developer feedback when product modules 610 are suggested in display 600 shown in FIG. 6 , and as discussed in detail below. This may be performed by the server 13 as part of the second phase of calculating the affinity score, which is the reinforcement calculation.
- An affirmative use of the module i.e., selection of one or more product modules 610 by a developer
- may augment the affinity score i.e., increase the affinity score
- a negative signal input from the developer e.g., an input received by the server 13 that one or more of the product modules 610 is not relevant or useful
- a developer may select a photography genre from the list of genres 230 in display 200 of FIG. 2 so that the server 13 determines that the developer would like to generate a photography application.
- the developer may also enter text and/or related description in display 300 , such as the application name 310 , application description 330 , and keywords 360 such that the server 13 may determine that the developer would like to generate a photography application.
- the server 13 may determine that a photography application would have a higher affinity score for vision modules than the affinity score for a music application for the same modules.
- a vision module (having a vision API) may be useful to a photography application, as such a module may be used to recognize faces, objects, places, context and meaning of images, and the like. Using a popular application as an example for the genre or category, this can be expressed as:
- the affinity score for a SpeechToText module (having a SpeechToText API, where SpeectToText modules may help convert a voice input to text input) is likely much higher for Popular_Music_App than for Popular_Photog_App, as shown in the example affinity score relationship below:
- affinity score list may have the format ⁇ sub_genre, module, affinity_score ⁇ would look something like the below:
- the database 15 may include a plurality of such lists, and the server 13 may generate different lists based on ⁇ precision, recall> sensitivity.
- precision also called positive predictive value
- recall also known as sensitivity
- precision and recall may be based on relevance.
- the server 13 and/or the developer may set the ⁇ precision, recall> sensitivity before the server 13 generates affinity_score lists and/or retrieves such lists from the database 15 , such as shown in the example above.
- the database 15 may include modules that are developed by third parties (i.e., another party from the application development platform provider).
- the 3DGraphics_module e.g., a product module for three-dimensional graphics generation
- Gaming_module e.g., a gaming engine module
- affinity score list may have the format ⁇ sub_genre, module, affinity_score ⁇ would look something like the below:
- the game engines developed by third parties may be highly relevant to adventure genres in games (as they have affinity scores of 0.9), while the maps module (i.e., maps_api) may be less useful (as it has an affinity score of 0.5), based on affinity score.
- the maps module i.e., maps_api
- the game engine modules i.e., 3DGraphics_module and Gaming_module
- real-estate applications may be less relevant (i.e., as they have 0.1 affinity scores).
- the developer may select one or more product modules 610 suggested by the server to use with the application to be generated by the server 13 .
- the product modules 610 are presented for selection based on the inputted application information and the pre-processed affinity scores of related modules.
- the suggested product modules may include a speech module, a map module, a vision module (e.g., to recognize faces, objects, places, context and meaning of images, and the like), a search module, or the like.
- the suggested product modules may differ based on the genre of the application, and based on the application information provided by the developer in displays 200 , 300 , 400 , and/or 500 .
- the developer may select the generate application button 620 , and the server 13 may generate the application to be published with the selected product modules.
- the developer may test one or more of the product modules with the application by selecting test module(s) button 630 .
- Implementations of the disclosed subject matter may include testing product modules, as well as testing results, as shown in FIGS. 7-8 and described in detail below. This may provide developers with an ability to compare various modules and/or APIs modules using selected dataset and/or real-world traffic to a generated application.
- the database 15 may include a plurality of “speech to text” modules and/or APIs from a variety of different parties. Some application developers may have difficulty in determining what modules and/or APIs are available, and knowing which one is best suited for their application to be developed and published.
- the server 13 may suggest product modules 610 that may be relevant for an application that a developer is attempting to generate and publish. One or more of the product modules 610 may be selected, and may be tested by selecting the test modules button 630 .
- Various versions of application packages may be constructed in real-time by the server 13 with, for example, different “speech to text” modules or other modules which may be subject to a percent of traffic to compare the performance.
- the server 13 may present options to a developer for selection of product modules to be tested, and the performance goals for each function. For example, as discussed in detail below, display 700 of FIG. 7 shows four different speech modules to be tested using the performance goals 740 . The performance goals may be developer-specified or may be predetermined at the server 13 . When the test button 750 is selected, the performance of the modules for the selected product modules may be determined for the assigned percentages (in this example, 25%) of the data traffic.
- the display 800 shown in FIG. 8 that includes testing results for the performance watchlists 810 , 820 may be generated by the server 13 . The developer may use the generated testing results to determine selection or removal of product modules from an application.
- FIG. 7 shows a display 700 for testing of product modules 610 selected in display 600 of FIG. 6 according to an implementation of the disclosed subject matter.
- one or more module configurations 710 may be used.
- the Module_config_1 may include a Product Module 720 to be tested (e.g., Speech Module 1 ), and a selection of the amount or proportion of data and/or “traffic” that an application receives (e.g., 25%) to test the performance of the module with traffic selection percentage 730 .
- each module configuration may have a different product module and a different percentage of data and/or traffic for the module to be tested with.
- display 700 shows that each module configuration has an equal 25% of traffic to be tested with, this is merely an example, and different modules may use different traffic percentages.
- One or more performance goals to test the product modules against may be specified in performance goals 740 .
- a performance watchlist 1 may determine a goal for the percentage of a search completed using the Module_config_1, Module_config_2, Module_config_3, and Module_config_4, and a performance watchlist 2 may determine a goal for the percentage of utterances recognized using the speech modules of these configurations.
- the developer may select the test button 750 to test the module configurations. The test results after selection of the test button 750 may be shown in FIG. 8 .
- FIG. 8 shows product module testing results display 800 according to an implementation of the disclosed subject matter.
- the display 800 may show the results of the performance watchlist 1 in display 810 , where the performance of the speech modules to be tested are ranked based on the percentage of searches completed.
- the modules have the results ranking of: Speech Module 3 (93% of searches completed); Speech Module 1 (86% of searches completed), Speech Module 4 (72% of the searches completed), and Speech Module 2 (66% of the searches completed).
- the display 800 may include the results from performance watchlist 2 in display 820 , where the performance of the speech modules to be tested are ranked based on the percentage of utterances recognized.
- the modules For performance watchlist 2 , the modules have the results ranking of: Speech Module 1 (84% of utterances recognized); Speech Module 4 (78% of utterances recognized), Speech Module 3 (75% of utterances recognized), and Speech Module 2 (68% of utterances recognized).
- the developer may modify the modules of the application so as to remove or replace the modules that are not performing as desired, and may re-generate and publish the application.
- the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user.
- user information e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- the user may have control over how information is collected about the user and used by a system as disclosed herein.
- FIG. 9 is an example computing device 10 , 11 suitable for implementing embodiments of the presently disclosed subject matter.
- the device 10 , 11 may be, for example, a desktop or laptop computer, or a mobile computing device such as a smart phone, tablet, or the like.
- the device 10 , 11 may include a bus 21 which interconnects major components of the computing device 10 , 11 , such as a central processor 24 , a memory 27 such as Random Access Memory (RAM), Read Only Memory (ROM), flash RAM, or the like, a user display 22 such as a display screen, a user input interface 26 , which may include one or more controllers and associated user input devices such as a keyboard, mouse, touch screen, and the like, a fixed storage 23 such as a hard drive, flash storage, and the like, a removable media component 25 operative to control and receive an optical disk, flash drive, and the like, and a network interface 29 operable to communicate with one or more remote devices via a suitable network connection.
- a bus 21 which interconnects major components of the computing device 10 , 11 , such as a central processor 24 , a memory 27 such as Random Access Memory (RAM), Read Only Memory (ROM), flash RAM, or the like, a user display 22 such as a display screen, a user input interface 26 , which may include
- the bus 21 allows data communication between the central processor 24 and one or more memory components, which may include RAM, ROM, and other memory, as previously noted.
- RAM is the main memory into which an operating system and application programs are loaded.
- a ROM or flash memory component can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components.
- BIOS Basic Input-Output system
- Applications resident with the computing device 10 , 11 are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed storage 23 ), an optical drive, floppy disk, or other storage medium.
- the fixed storage 23 may be integral with the computing device 10 , 11 or may be separate and accessed through other interfaces.
- the network interface 29 may provide a direct connection to a remote server via a wired or wireless connection.
- the network interface 29 may provide such connection using any suitable technique and protocol as will be readily understood by one of skill in the art, including digital cellular telephone, WiFi, Bluetooth®, near-field, and the like.
- the network interface 29 may allow the computer to communicate with other computers via one or more local, wide-area, or other communication networks, as described in further detail below.
- FIG. 9 Many other devices or components (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the components shown in FIG. 9 need not be present to practice the present disclosure. The components can be interconnected in different ways from that shown. The operation of a computer such as that shown in FIG. 9 is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer-readable storage media such as one or more of the memory 27 , fixed storage 23 , removable media 25 , or on a remote storage location.
- FIG. 10 shows an example network arrangement according to an implementation of the disclosed subject matter.
- One or more devices 10 , 11 such as local computers, smart phones, tablet computing devices, and the like may connect to other devices via one or more networks 7 .
- Each device may be a computing device as previously described.
- the network may be a local network, wide-area network, the Internet, or any other suitable communication network or networks, and may be implemented on any suitable platform including wired and/or wireless networks.
- the devices may communicate with one or more remote devices, such as servers 13 and/or databases 15 .
- the remote devices may be directly accessible by the devices 10 , 11 , or one or more other devices may provide intermediary access such as where a server 13 provides access to resources stored in a database 15 .
- the devices 10 , 11 also may access remote platforms 17 or services provided by remote platforms 17 such as cloud computing arrangements and services.
- the remote platform 17 may include one or more servers 13 and/or databases 15 .
- FIG. 11 shows an example arrangement according to an implementation of the disclosed subject matter.
- One or more devices or systems 10 , 11 such as remote services or service providers 11 , user devices 10 such as local computers, smart phones, tablet computing devices, and the like, may connect to other devices via one or more networks 7 .
- the network may be a local network, wide-area network, the Internet, or any other suitable communication network or networks, and may be implemented on any suitable platform including wired and/or wireless networks.
- the devices 10 , 11 may communicate with one or more remote computer systems, such as processing units 14 , databases 15 , and user interface systems 13 .
- the devices 10 , 11 may communicate with a user-facing interface system 13 , which may provide access to one or more other systems such as a database 15 , a processing unit 14 , or the like.
- the user interface 13 may be a user-accessible web page that provides data from one or more other computer systems.
- the user interface 13 may provide different interfaces to different clients, such as where a human-readable web page is provided to a web browser client on a user device 10 , and a computer-readable API or other interface is provided to a remote service client 11 .
- the user interface 13 , database 15 , and/or processing units 14 may be part of an integral system, or may include multiple computer systems communicating via a private network, the Internet, or any other suitable network.
- One or more processing units 14 may be, for example, part of a distributed system such as a cloud-based computing system, search engine, content delivery system, or the like, which may also include or communicate with a database 15 and/or user interface 13 .
- an analysis system 5 may provide back-end processing, such as where stored or acquired data is pre-processed by the analysis system 5 before delivery to the processing unit 14 , database 15 , and/or user interface 13 .
- a machine learning system 5 may provide various prediction models, data analysis, or the like to one or more other systems 13 , 14 , 15 .
- implementations of the presently disclosed subject matter may include or be embodied in the form of computer-implemented processes and apparatuses for practicing those processes.
- Implementations also may be embodied in the form of a computer program product having computer program code containing instructions embodied in non-transitory and/or tangible media, such as floppy diskettes, CD-ROMs, hard drives, USB (universal serial bus) drives, or any other machine readable storage medium, such that when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing implementations of the disclosed subject matter.
- Implementations also may be embodied in the form of computer program code, for example, whether stored in a storage medium, loaded into and/or executed by a computer, or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, such that when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing implementations of the disclosed subject matter.
- the computer program code segments configure the microprocessor to create specific logic circuits.
- a set of computer-readable instructions stored on a computer-readable storage medium may be implemented by a general-purpose processor, which may transform the general-purpose processor or a device containing the general-purpose processor into a special-purpose device configured to implement or carry out the instructions.
- Embodiments may be implemented using hardware that may include a processor, such as a general purpose microprocessor and/or an Application Specific Integrated Circuit (ASIC) that embodies all or part of the techniques according to embodiments of the disclosed subject matter in hardware and/or firmware.
- the processor may be coupled to memory, such as RAM, ROM, flash memory, a hard disk or any other device capable of storing electronic information.
- the memory may store instructions adapted to be executed by the processor to perform the techniques according to implementations of the disclosed subject matter.
Abstract
Description
TABLE 1 | |||
Module1_speech_text_api | | Module3_social_plugin_module | |
Music_app1_Example | |||
1 | 1 | 1 | 1 |
Music_app2_Example2 | 0 | 1 | 0 |
|
1 | 1 | 0 |
|
1 | 1 | 1 |
|
1 | 1 | 1 |
Music_app6_LongTail_Music_Player1 | 0 | 1 | 0 |
Music_app7_LongTail_Music_Player2 | 0 | 0 | 1 |
Music_app8_LongTail_Music_Player3 | 0 | 0 | 0 |
| Module5_user_Authentication_api | |||
Music_app1_Example | ||||
1 | 0 | 1 | ||
Music_app2_Example2 | 0 | 1 | ||
Music_app3_Example3 | 0 | 1 | ||
|
1 | 1 | ||
Music_app5_Example5 | 0 | 1 | ||
Music_app6_LongTail_Music_Player1 | 1 | 1 | ||
Music_app7_LongTail_Music_Player2 | 0 | 1 | ||
|
1 | 0 | ||
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/828,071 US10795648B2 (en) | 2017-11-30 | 2017-11-30 | Systems and methods of developments, testing, and distribution of applications in a computer network |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/828,071 US10795648B2 (en) | 2017-11-30 | 2017-11-30 | Systems and methods of developments, testing, and distribution of applications in a computer network |
Publications (2)
Publication Number | Publication Date |
---|---|
US20190163450A1 US20190163450A1 (en) | 2019-05-30 |
US10795648B2 true US10795648B2 (en) | 2020-10-06 |
Family
ID=66633232
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/828,071 Active 2038-05-14 US10795648B2 (en) | 2017-11-30 | 2017-11-30 | Systems and methods of developments, testing, and distribution of applications in a computer network |
Country Status (1)
Country | Link |
---|---|
US (1) | US10795648B2 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10963369B2 (en) * | 2018-04-18 | 2021-03-30 | Ashkan Ziaee | Software as a service platform utilizing novel means and methods for analysis, improvement, generation, and delivery of interactive UI/UX using adaptive testing, adaptive tester selection, and persistent tester pools with verified demographic data and ongoing behavioral data collection |
US11003498B1 (en) * | 2020-08-10 | 2021-05-11 | Coupang Corp. | Computerized systems and methods for fail-safe loading of information on a user interface using a circuit breaker |
CN112860247B (en) * | 2021-02-09 | 2023-11-28 | 恒安嘉新（北京）科技股份公司 | Custom generation method, device, equipment and medium of model component |
CN115859225A (en) * | 2021-09-23 | 2023-03-28 | 中兴通讯股份有限公司 | Reinforcement method, registration method, operation method, electronic device, and storage medium |
Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060168355A1 (en) * | 2005-01-24 | 2006-07-27 | Michael Shenfield | System and method for provisioning component applications |
US20090138898A1 (en) * | 2007-05-16 | 2009-05-28 | Mark Grechanik | Recommended application evaluation system |
US20090178026A1 (en) * | 2008-01-08 | 2009-07-09 | Microsoft Corporation | Self-describing re-usable software components |
US20100049534A1 (en) * | 2008-08-19 | 2010-02-25 | Thomas Scott Whitnah | Determining User Affinity Towards Applications on a Social Networking Website |
US20100257127A1 (en) * | 2007-08-27 | 2010-10-07 | Stephen Patrick Owens | Modular, folder based approach for semi-automated document classification |
US20100281475A1 (en) | 2009-05-04 | 2010-11-04 | Mobile On Services, Inc. | System and method for mobile smartphone application development and delivery |
US8008034B2 (en) * | 2006-10-13 | 2011-08-30 | Theranos, Inc. | Reducing optical interference in a fluidic device |
US8261231B1 (en) | 2011-04-06 | 2012-09-04 | Media Direct, Inc. | Systems and methods for a mobile application development and development platform |
US20130159103A1 (en) * | 2011-12-16 | 2013-06-20 | AppLovin Corporation | Advertisement Selection Based on Mobile Applications |
US20140053126A1 (en) | 2012-02-13 | 2014-02-20 | Mark A. Watson | Integrated mobile application development platform |
CN104102489A (en) | 2014-07-24 | 2014-10-15 | 深圳市神州通在线科技有限公司 | Third-party database APP (Application) construction system and construction method |
US20150161386A1 (en) * | 2013-12-06 | 2015-06-11 | Qualcomm Incorporated | Methods and Systems of Using Application-Specific and Application-Type-Specific Models for the Efficient Classification of Mobile Device Behaviors |
US20150281878A1 (en) * | 2011-06-06 | 2015-10-01 | Brian Roundtree | Beacon Based Privacy Centric Network Communication, Sharing, Relevancy Tools and Other Tools |
US20150381709A1 (en) * | 2014-06-27 | 2015-12-31 | Amazon Technologies, Inc. | Input/output management in a distributed strict queue |
US20160170712A1 (en) | 2014-12-15 | 2016-06-16 | Beijing Jinher Software Co., Ltd | Method for integrally implementing development and release of APP |
US20160196270A1 (en) * | 2013-12-19 | 2016-07-07 | Gracenote, Inc. | Station library creaton for a media service |
US9513891B2 (en) | 2012-06-08 | 2016-12-06 | Alibaba Group Holding Limited | Method and device for publishing and implementing wireless application |
US20170131978A1 (en) | 2015-11-06 | 2017-05-11 | appsFreedom Inc. | Automated offline application (app) generation system and method therefor |
US9658739B1 (en) * | 2013-10-22 | 2017-05-23 | Google Inc. | Optimizing presentation of interactive graphical elements based on contextual relevance |
US20170228229A1 (en) | 2016-02-10 | 2017-08-10 | Vignet Incorporated | Publishing customized application modules |
US20170251259A1 (en) * | 2016-02-29 | 2017-08-31 | Rovi Guides, Inc. | Methods and systems of recommending media assets to users based on content of other media assets |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6006034A (en) * | 1996-09-05 | 1999-12-21 | Open Software Associates, Ltd. | Systems and methods for automatic application version upgrading and maintenance |
US10579360B2 (en) * | 2016-11-18 | 2020-03-03 | Lenovo (Singapore) Pte. Ltd. | Application update control |
-
2017
- 2017-11-30 US US15/828,071 patent/US10795648B2/en active Active
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060168355A1 (en) * | 2005-01-24 | 2006-07-27 | Michael Shenfield | System and method for provisioning component applications |
US8008034B2 (en) * | 2006-10-13 | 2011-08-30 | Theranos, Inc. | Reducing optical interference in a fluidic device |
US20090138898A1 (en) * | 2007-05-16 | 2009-05-28 | Mark Grechanik | Recommended application evaluation system |
US20100257127A1 (en) * | 2007-08-27 | 2010-10-07 | Stephen Patrick Owens | Modular, folder based approach for semi-automated document classification |
US20090178026A1 (en) * | 2008-01-08 | 2009-07-09 | Microsoft Corporation | Self-describing re-usable software components |
US20100049534A1 (en) * | 2008-08-19 | 2010-02-25 | Thomas Scott Whitnah | Determining User Affinity Towards Applications on a Social Networking Website |
US20100281475A1 (en) | 2009-05-04 | 2010-11-04 | Mobile On Services, Inc. | System and method for mobile smartphone application development and delivery |
US8261231B1 (en) | 2011-04-06 | 2012-09-04 | Media Direct, Inc. | Systems and methods for a mobile application development and development platform |
US20150281878A1 (en) * | 2011-06-06 | 2015-10-01 | Brian Roundtree | Beacon Based Privacy Centric Network Communication, Sharing, Relevancy Tools and Other Tools |
US20130159103A1 (en) * | 2011-12-16 | 2013-06-20 | AppLovin Corporation | Advertisement Selection Based on Mobile Applications |
US20140053126A1 (en) | 2012-02-13 | 2014-02-20 | Mark A. Watson | Integrated mobile application development platform |
US9513891B2 (en) | 2012-06-08 | 2016-12-06 | Alibaba Group Holding Limited | Method and device for publishing and implementing wireless application |
US9658739B1 (en) * | 2013-10-22 | 2017-05-23 | Google Inc. | Optimizing presentation of interactive graphical elements based on contextual relevance |
US20150161386A1 (en) * | 2013-12-06 | 2015-06-11 | Qualcomm Incorporated | Methods and Systems of Using Application-Specific and Application-Type-Specific Models for the Efficient Classification of Mobile Device Behaviors |
US20160196270A1 (en) * | 2013-12-19 | 2016-07-07 | Gracenote, Inc. | Station library creaton for a media service |
US20150381709A1 (en) * | 2014-06-27 | 2015-12-31 | Amazon Technologies, Inc. | Input/output management in a distributed strict queue |
CN104102489A (en) | 2014-07-24 | 2014-10-15 | 深圳市神州通在线科技有限公司 | Third-party database APP (Application) construction system and construction method |
US20160170712A1 (en) | 2014-12-15 | 2016-06-16 | Beijing Jinher Software Co., Ltd | Method for integrally implementing development and release of APP |
US20170131978A1 (en) | 2015-11-06 | 2017-05-11 | appsFreedom Inc. | Automated offline application (app) generation system and method therefor |
US20170228229A1 (en) | 2016-02-10 | 2017-08-10 | Vignet Incorporated | Publishing customized application modules |
US20170251259A1 (en) * | 2016-02-29 | 2017-08-31 | Rovi Guides, Inc. | Methods and systems of recommending media assets to users based on content of other media assets |
Also Published As
Publication number | Publication date |
---|---|
US20190163450A1 (en) | 2019-05-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9965522B2 (en) | Mobile application search ranking | |
US10795648B2 (en) | Systems and methods of developments, testing, and distribution of applications in a computer network | |
US20140114901A1 (en) | System and method for recommending application resources | |
US8954836B1 (en) | Systems and methods for directing access to products and services | |
US20160055256A1 (en) | Systems and methods for directing access to products and services | |
US9032392B2 (en) | Similarity engine for facilitating re-creation of an application collection of a source computing device on a destination computing device | |
US20170097967A1 (en) | Automated Customization of Display Component Data for Search Results | |
US10380124B2 (en) | Searching data sets | |
US20160055133A1 (en) | Systems and methods for directing access to products and services | |
US20160188684A1 (en) | Consolidating Search Results | |
US20140324839A1 (en) | Determining candidate scripts from a catalog of scripts | |
US9043333B1 (en) | Systems and methods for directing access to products and services | |
US10474688B2 (en) | System and method to recommend a bundle of items based on item/user tagging and co-install graph | |
JP2023162154A (en) | Method, computer device and computer program for providing recommendation information based on local knowledge graph | |
US10223728B2 (en) | Systems and methods of providing recommendations by generating transition probability data with directed consumption | |
CN113221572B (en) | Information processing method, device, equipment and medium | |
US20150170035A1 (en) | Real time personalization and categorization of entities | |
US11301458B2 (en) | Automated content generation | |
JP7354330B2 (en) | Methods, systems, and computer programs for providing location-related recommendations by taste | |
KR20230032811A (en) | Method, system, and computer program to dynamically provide sub-item recommendation list for each item included in search results based on search query | |
KR20230160210A (en) | Aapparatus, method and program for recommending economic information content that sets the content evaluation time and calculates the evaluation score for each content based on this | |
WO2016028339A1 (en) | Systems and methods for directing access to products and services | |
WO2021009583A1 (en) | Instant answers to search queries | |
JP2023035896A (en) | Method, system, and computer program for dynamically providing sub-item recommendation list for each item included in search result by search query | |
CN116842257A (en) | Content recommendation method and device, electronic equipment and storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KUMAR, ATUL;PETRILLO, MICHAEL;REEL/FRAME:044267/0625Effective date: 20171025 |
|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |