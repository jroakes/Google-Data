US20160275953A1 - Speaker identification - Google Patents
Speaker identification Download PDFInfo
- Publication number
- US20160275953A1 US20160275953A1 US15/170,264 US201615170264A US2016275953A1 US 20160275953 A1 US20160275953 A1 US 20160275953A1 US 201615170264 A US201615170264 A US 201615170264A US 2016275953 A1 US2016275953 A1 US 2016275953A1
- Authority
- US
- United States
- Prior art keywords
- speaker
- speech
- vector
- computers
- data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
- G10L17/02—Preprocessing operations, e.g. segment selection; Pattern representation or modelling, e.g. based on linear discriminant analysis [LDA] or principal components; Feature selection or extraction
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
- G10L17/06—Decision making techniques; Pattern matching strategies
- G10L17/08—Use of distortion metrics or a particular distance between probe pattern and reference templates
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
- G10L17/18—Artificial neural networks; Connectionist approaches
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/48—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 specially adapted for particular use
- G10L25/51—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 specially adapted for particular use for comparison or discrimination
Definitions
- This specification generally relates to speech recognition systems, and some implementations relate to determining or verifying an identity of a speaker.
- Speaker identification generally involves determining a likely identity of a speaker based on speech samples from the speaker. Often, the more potential speaker identities a system has to select from among, the more computation and time is required to identify the correct speaker from among the potential speaker identities.
- Speaker identification is an important area of speech processing. In addition to identification accuracy, large-scale applications of speaker identification give rise to another challenge: fast search in the database of speakers.
- a system for speaker identification can use speaker vectors such as identity vectors (“i-vectors”) and locality sensitive hashing, an algorithm for fast nearest-neighbor search in high dimensions.
- the connection between the two techniques is the cosine distance: the cosine distance may be used to compare vectors, and locality sensitive hashing allows approximation of the cosine distance in the retrieval procedure.
- an approach that combines the use of speaker vector techniques and locality sensitive hashing can be faster than a linear search while maintaining high identification accuracy.
- a method includes: obtaining an utterance vector that is derived from an utterance; determining hash values for the utterance vector according to multiple different hash functions; determining a set of speaker vectors from a plurality of hash tables using the hash values, each speaker vector being derived from one or more utterances of a respective speaker; comparing the speaker vectors in the set with the utterance vector; and selecting a speaker vector based on comparing the speaker vectors in the set with the utterance vector.
- the utterance vector includes obtaining an utterance i-vector for the utterance, the utterance i-vector comprising parameters determined using multivariate factor analysis of the utterance; and determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining a set of speaker i-vectors from the plurality of hash tables, each speaker i-vector comprising parameters determined using multivariate factor analysis of one or more utterances of a respective speaker.
- Obtaining the utterance vector includes obtaining an utterance vector comprising parameters determined based on deep neural network activations that occur in response to information about the utterance being provided to the deep neural network; and determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining a set of speaker vectors in which each speaker vector includes parameters determined based on deep neural network activations that occur in response to information about one or more utterances of a respective speaker being provided to the deep neural network.
- Implementations may include one or more of the following features. For example, accessing data indicating associations between the speaker vectors and respective speakers; determining, based on the data indicating the associations between the speaker vectors and the respective speakers, a speaker identity corresponding to the selected speaker vector; and outputting data indicating the speaker identity.
- the method may include: identifying one or more media items that include utterances of a speaker corresponding to the selected speaker vector; and outputting data indicating the identified one or more media items.
- the method may include: determining that the selected speaker vector corresponds to a particular user; and based at least in part on the determining that the selected speaker vector corresponds to a particular user identity, authenticating the particular user.
- Implementations may include one or more of the following features. For example, determining the hash values includes determining the hash values using one or more locality sensitive hash functions. Determining the hash values includes determining the hash values based on a position of the utterance vector with respect to different hyperplanes. Determining the hash values includes: determining first hash values for the utterance vector based on a first set of hash functions; and determining second hash values as different combinations of two or more of the first hash values; where determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining the set of speaker vectors from the plurality of hash tables using the second hash values.
- Comparing the speaker vectors in the set with the utterance vector includes determining similarity scores that each indicate a degree of similarity of the utterance vector and one of the speaker vectors in the set; and selecting a speaker vector includes selecting the speaker vector that the similarity scores indicate is most similar to the utterance vector.
- Implementations may include one or more of the following features. For example, determining similarity scores that each indicate a degree of similarity of the utterance vector and one of the speaker vectors in the set includes determining a cosine distance between the utterance vector and each of the speaker vectors in the set. Selecting the speaker vector that the similarity scores indicate is most similar to the utterance vector includes: identifying the smallest cosine distance from among the determined cosine distances; determining that the smallest cosine distance is less than a maximum distance threshold value; and based on determining that the smallest cosine distance is less than the maximum distance threshold value, selecting the speaker vector corresponding to the smallest cosine distance.
- Each of the speaker vectors corresponds to a different speaker; and the method further includes providing data indicating that the speaker corresponding to the selected speaker vector is the speaker of the utterance.
- the method may include obtaining multiple speaker vectors that each indicate characteristics of speech of a respective speaker; and, for each particular speaker vector of the multiple speaker vectors: determining hash values for the particular speaker vector according to each of the multiple different hash functions; and inserting the particular speaker vector into each of the plurality of hash tables based on the hash values.
- Obtaining multiple speaker vectors that each indicate characteristics of speech of a respective speaker includes: accessing a set of multiple video resources; and generating a speaker vector for each of the multiple video resources.
- a method in another general aspect, includes: obtaining an utterance i-vector for an utterance; determining hash values for the utterance i-vector according to multiple different hash functions; determining a set of speaker i-vectors from a plurality of hash tables using the hash values; comparing the speaker i-vectors in the set with the utterance i-vector; and selecting a speaker i-vector based on comparing the speaker i-vectors in the set with the utterance i-vector.
- a method in another general aspect, includes: obtaining multiple speaker i-vectors that each correspond to a different speaker; and for each of the multiple speaker i-vectors: (i) determining hash values for the speaker i-vector according to multiple different hash functions; and (ii) inserting the speaker i-vector into a plurality of hash tables based on the hash values.
- Implementations may include one or more of the following features. For example, determining the hash values includes determining the hash values using locality sensitive hash functions. Determining the hash values includes determining the hash values based on a position of the speaker i-vector with respect to different hyperplanes. Determining hash values for the speaker i-vector according to multiple different hash functions includes: determining first hash values for the speaker i-vector based on a first set of hash functions; and determining second hash values as different combinations of two or more of the first hash values. Inserting the speaker i-vector into a plurality of hash tables based on the hash values includes inserting the speaker i-vector into each of the plurality of hash tables based on the second hash values.
- implementations of these and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- a system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions.
- One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- FIGS. 1A and 1B are diagrams illustrating a system for speaker identification.
- FIG. 2 is a flow diagram illustrating a process for speaker identification.
- FIG. 3 is a schematic diagram that shows an example of a computing device and a mobile computing device.
- Speaker identification is one of the core areas of speech processing and acoustic modeling.
- Applications of speaker identification include authentication in security-critical systems, personalized speech recognition, and searching for speakers in large corpora. Due to the increasing amount of data—especially in web-scale applications—fast processing of speech data is becoming increasingly important. While the audio corpus can usually be pre-processed offline and in parallel, the retrieval procedure directly impacts user latency and needs to be executed as quickly as possible.
- the techniques discussed below can be used to perform fast, text-independent speaker identification in large corpora. Good identification performance (e.g., accuracy) can be maintained while significantly increasing the speed of retrieval.
- These techniques can include an i-vector-based speaker identification system combined with locality sensitive hashing (LSH), a powerful tool for approximate nearest neighbor search in high dimensions.
- LSH locality sensitive hashing
- Web-based videos are an example of the challenges of fast retrieval from a large data set. Each day, several years' worth of video are being uploaded to the web. Even if only a small fraction of this video is human speech, the amount of data to be processed for a single query is still very large.
- LSH-based retrieval approach discussed below can be faster than a linear search. In some instances, LSH-based search is several times faster, or even one or more orders of magnitude faster. At the same time, the identification accuracy may be close to or roughly equivalent to the more expensive algorithm.
- LSH is used to approximate the cosine-distance of i-vectors, the techniques can be implemented with provable performance guarantees. Implementations of LSH-based similarity search may be used with large data sets, such as data sets of hundreds of thousands of items, millions of items, tens of millions of items, hundreds of millions of items, or a billion items or more. Thus, some implementations can have excellent scalability for large-scale data.
- i-vector-based speaker identification techniques are used to identify a speaker. Robustly recognizing a speaker in spite of large inter-session variability such as background noise or different communication channels is one of the main limitations for speaker identification systems. Most techniques can be framed into the Factor Analysis (FA) paradigm, which aims to express the main “factors” contributing to the observed variability in a compact way. Another technique is the Joint Factor Analysis (JFA) formulation, where the acoustic space is divided into different subspaces. These subspaces independently model factors associated with the session variability and factors contributing to the interspeaker variability, e.g., a speaker corresponds to a vector in a low-dimensional subspace.
- FFA Factor Analysis
- JFA Joint Factor Analysis
- TVM Total Variability Model
- LDA Linear Discriminant Analysis
- WCCN Within Class Covariance Normalization
- the cosine distance is typically used for the final comparison of a speaker reference i-vector with an utterance i-vector.
- PDA Probabilistic Linear Discriminant Analysis
- locality sensitive hashing may be used to facilitate data retrieval.
- the nearest neighbor problem is a core element in many search tasks: given a set of a points ⁇ x 1 , . . . , x n ⁇ ⁇ X, a query point q ⁇ X and a distance function d:X ⁇ X ⁇ + , find the point x i minimizing d(x i , q). While efficient data structures for the exact problem in low-dimensional spaces are known, they have an exponential dependence on the dimension of X (“curse of dimensionality”).
- LSH solves the c-approximate nearest-neighbor problem: instead of finding the nearest neighbor, it suffices to return a point x i with d(x i , q) ⁇ c min xj ⁇ X d(x j , q).
- An approximate guarantee is still useful because the distance function d is often only an approximation of the ground truth.
- a particular strength of LSH is its provably sublinear running time, which also holds in practice.
- a hash function is locality sensitive if two elements that are close under d are more likely to collide.
- Locality sensitive hash functions can include any of various distance metrics, including, for example, the Euclidean distance, the Jaccard index, and the cosine similarity.
- the LSH algorithm Given a family of locality sensitive hash functions, the LSH algorithm builds a set of hash tables and hashes all points x i into each hash table. For each hash table, several locality sensitive hash functions may be concatenated to avoid unnecessary collisions, which can increase precision. Several hash tables can be maintained to increase the probability of finding a close neighbor, which may improve recall. Given a query point q, the system can look through all hash tables to find the x i colliding with q and then return the best match.
- LSH techniques may be used for speaker identification.
- LSH may be used for storage and retrieval of i-vectors and data associated with speakers.
- LSH indexing techniques may be used to select one or more speaker
- the speaker identification system can generate i-vectors and can retrieve similar i-vectors.
- the utterance is first represented in terms of a large Gaussian mixture model (GMM), the so-called Universal Background Model (UBM), which can be parameterized with ⁇ .
- GMM Gaussian mixture model
- UBM Universal Background Model
- the i-vector associated with the sequence ⁇ is denoted as x ⁇ d .
- the vector F is related to x via the rectangular low-rank matrix T ⁇ CD ⁇ d , known as the TV subspace, as shown in Equation 2:
- T ⁇ CD ⁇ CD is a diagonal matrix with C blocks of size D ⁇ D along the diagonal.
- Block m 1, . . .
- C is the matrix N m l (D ⁇ D ).
- Equation 3 The constraints imposed on the distributions of P(x) and P(F
- the i-vector is the mean of this distribution and is given as shown below in Equation 3:
- Equation 3 ⁇ CD ⁇ CD is the covariance matrix of F. Therefore, in some implementations, i-vector extraction depends on the utterance data and the TV model parameters ⁇ , T, and ⁇ .
- the final speaker i-vector is normally obtained by averaging all i-vectors belonging to the same speaker.
- the i-vector averaging step can be omitted, and instead the i-vectors of all utterances are kept.
- locality-sensitive hashing may be used with i-vectors to identify speakers.
- One application of the system is enabling fast retrieval of speaker information.
- this may include, for example, for a given query i-vector, it may be desirable to find a similar vector in a previously computed set of i-vectors. In some instances, it may be desirable to find the best match, or a set of the closest matches. Since this task is an instance of the nearest neighbor problem introduced above, LSH may be used to enable fast retrieval.
- Cosine distance measurements as shown in Equation 4, gives competitive performance for speaker identification. Since the cosine distance can also be approximated well with locality sensitive hash functions, the cosine distance may be used in the LSH algorithm. In particular, hash functions of the form shown below in Equation 5:
- h r ⁇ ( x ) ⁇ 1 if ⁇ ⁇ x ⁇ r ⁇ 0 0 if ⁇ ⁇ x ⁇ r ⁇ 0 ,
- the data structure has two main parameters: l, the number of hash tables, and k, the number of hyperplanes per hash table.
- H 1 , . . . , H l be the hash tables in the data structure.
- the system can maintain m ⁇ square root over (l) ⁇ hash functions of length k/2 and use the
- h i (x) (h 1 i (x), h 2 i (x), . . . , h k/2 i (x)) for i ⁇ 1, . . . , m ⁇ and h j i (x) sampled as described above.
- the LSH data structure may be initialized as follows: each i-vector x i is hashed with each hash function h j and then inserted at position h j (x i ) in hash table H j .
- the overall time complexity of the initialization step is 0 (ndk ⁇ square root over (l) ⁇ +nl).
- Process 1 describes an example of a retrieval procedure.
- the running time of the retrieval procedure is 0(dk ⁇ square root over (l) ⁇ +l+M), where M is the total number of matches found.
- speaker vectors are well clustered under well-matched recording conditions and so a small number of candidates in the hash tables may be sufficient to find a correct match.
- the search for matches across data sets having widely varying recording conditions is more challenging and may require iterating over a larger set of candidates.
- the techniques discussed herein can be used to allow fast retrieval method for speaker identification in large data sets.
- the system combines aspects of two approaches that interact via the cosine distance: locality sensitive hashing, which enables fast nearest-neighbor search, and i-vectors, which provide good identification accuracy.
- LSH could also be very useful for other large-scale applications of i-vectors, such as clustering.
- FIGS. 1A and 1B are diagrams illustrating examples of a system 100 for speaker identification.
- the system 100 includes a computing system 110 , a network 112 , data storage 114 , and a client device 116 .
- the computing system 110 processes audio information and uses LSH to store information about various different speakers.
- the computing system 110 uses the stored information to identify a speaker of an utterance.
- the functions performed by the computing system 110 can be performed by individual computer systems or can be distributed across multiple computer systems.
- the network 112 can be wired or wireless or a combination of both and can include the Internet.
- the client device 114 can be, for example, a desktop computer, laptop computer, a tablet computer, a wearable computer, a cellular phone, a smart phone, a music player, an e-book reader, a navigation system, or any other appropriate device.
- the speaker identification system 110 accesses audio data 120 that includes utterances of multiple speakers.
- the audio data 120 may include various audio recordings or videos.
- the audio data 120 may include data from public data sources, such as videos available on the Internet. Other collections of audio data 120 may additionally or alternatively be used.
- the audio data 120 includes three different audio segments 120 a - 120 c , which each include an utterance of a different speaker.
- the speaker identification system can use audio data 120 including utterances of hundreds, thousands, or millions of different speakers.
- the speaker identification system 110 obtains speaker vectors 130 for the various speakers whose utterances are included in the audio data 112 .
- a speaker vector 130 may be data that indicates characteristics of a speaker's voice.
- the speaker vectors are i-vectors.
- the speaker vectors are deep vectors (“d-vectors”) determined using a deep neural network. Other data that indicates characteristics of a speaker's voice may be additionally or alternatively be used as a speaker vector.
- an i-vector can be a set of parameters extracted or determined using factor analysis of one or more utterances.
- the i-vector may be data indicative of latent variables of multivariate factor analysis.
- the i-vector may represent a projection into a low-dimensional, total variability subspace that was trained using factor analysis.
- the i-vector may indicate audio characteristics that are independent of the words spoken by the speaker.
- the i-vector may represent any of various factors indicative of the identity of the speaker, including, for example, characteristics of the speaker's speaking style, the speaker's gender, the speaker's age, the speaker's language, and/or the speaker's accent.
- the i-vector may be derived from only a portion of an utterance, an entire utterance, or multiple utterances of a speaker.
- a d-vector can be as set of speaker-specific features extracted from a layer of a neural network.
- Various types of neural networks may be sued, including deep neural networks and recurrent neural networks.
- the d-vector can be a set of activations at an output layer of a neural network, or a set of activations at a hidden layer of a neural network.
- individual d-vectors for an utterance or for different portions of an utterance may be used as speaker vectors.
- multiple vectors e.g., for different portions of an utterance, or for multiple utterances of the same speaker, may be averaged together to form a d-vector.
- features extracted from an utterance can be provided as input to a trained neural network.
- the neural network has been trained to classify inputs of a defined set of speakers, but the speaker that spoke the utterance for which the d-vector is being generated is not required to be in the defined set of speakers.
- Speech features may be determined for individual speech frames, for example, segments of 10 ms to 50 ms of the utterance.
- the set of speech features for each frame are input to the neural network, sequentially, with each set of speech features producing a corresponding set of activations at predetermined layer of the neural network. For each input speech frame, a vector may be determined based on the activations at the predetermined output layer.
- vectors may each be used as different d-vectors corresponding to the same speaker.
- the vectors for multiple speech frames may be averaged together.
- the averaged vector like the d-vectors for individual frames, may be saved as a d-vector that indicates qualities characteristic of the speaker's voice.
- a speaker vector 130 a - 130 c may be generated from each audio segment 120 a - 120 c .
- a different speaker vector may be generated for each file, to indicate the characteristics of the utterances in that file.
- the speaker vector 130 a indicates characteristics of the voice of the speaker of the utterances in the audio segment 120 a
- the speaker vector 130 b indicates characteristics of the voice of the speaker of the utterances in the audio segment 120 b
- a separate speaker vector may be generated for each speaker. For example, a recording with speech of multiple speakers may be split into separate segments each including utterances of a single speaker. As a result, processing a particular recording may result in multiple speaker vectors that each correspond to a different speaker.
- a speaker vector may be determined using multiple utterances or multiple recordings for a single speaker. For example, multiple recordings of a particular speaker may be identified, for example, based on labels assigned to the recordings. A different i-vector may be generated from each recording, and the i-vectors may be averaged or otherwise combined to form an average or composite speaker vector that represents characteristics of the particular speaker's voice.
- a speaker whose utterances are recorded in an audio segment 120 a - 120 c may be unknown.
- the speaker vector may be associated with information indicating the source of the audio segment, such as a URL or other identifier for the audio recording or video that included the utterances from which the speaker vector was derived.
- the speaker identification system 110 determines keys or index values for each speaker vector 130 a - 130 c .
- the keys or indexes can be hash values, for example, hash values determined using one or more LSH algorithms.
- a hash value may be determined for each of multiple hash functions 140 .
- a set of n hash functions 140 a - 140 n are used.
- n different hash values may be determined.
- hash values for a speaker may be determined based on a position of a speaker vector with respect to different hyperplanes, such as random or pseudo-random hyperplanes.
- hyperplanes such as random or pseudo-random hyperplanes.
- a set of k-dimensional hyperplanes may be defined.
- a hash value may be determined by projecting the speaker vector onto the k-dimensional space and making a binary determination, for each hyperplane, which side of the hyperplane the projection falls. The comparison of the projection with each hyperplane may produce one bit of the hash value.
- Hash values may also be determined by combining or concatenating hash values or other values derived from speaker vectors. Calculating shorter hash values may require less computation, but longer hash values may be desirable to allow for greater precision. In addition, longer hash values often lead to fewer hash collisions in a hash table. If three hash values A, B, and C are determined for a particular speaker vector, a set of longer hash values may be determined by concatenating different combinations of the hash values, for example, generating hash values AB, AC, and BC. In this example, the length of the hash values doubles and the only computation required is the concatenation operation.
- the speaker identification system 100 stores associations between the keys or index values and corresponding speaker vectors 130 a - 130 c .
- Data identifying the speaker corresponding to a speaker vector, or a source of the audio data was used to determine the speaker vector, may be associated with the keys or index values.
- the associations may be stored in the data storage 114 , for example, in an associative array such as a hash table, for later use in identifying speakers.
- speaker vectors 130 a - 130 c are stored in a plurality of hash tables 150 .
- a set of n hash tables 150 a - 150 n are used, with one hash table 150 a - 150 n corresponding to each hash function 140 a - 140 n .
- An entry for each speaker vector 130 a - 130 c is included in each hash table 150 a - 150 .
- the speaker vector 130 a is associated with the hash value determined by applying the hash function 140 a to the speaker vector 130 a .
- hash table 150 b the same speaker vector 130 a is associated with the hash value determined by applying the hash function 140 b to the speaker vector 130 a .
- the pattern continues for all of the n hash tables, so that in hash table 150 n , the speaker vector 130 a is associated with the hash value determined by applying the hash function 140 n to the speaker vector 130 a .
- the other speaker vectors 130 b , 130 c and their associated speaker information are indexed in the hash tables 150 a - 150 n in the same manner.
- Associating the speaker vectors 130 a - 130 c with different hash values in different hash tables can increase the likelihood of identifying appropriate speaker vectors during speaker identification. Some hash functions may indicate that certain items match or are similar, while other hash functions may not. As a result, it may be easier to identify speaker vectors as similar to a particular vector using multiple hash functions and multiple hash tables than when using a single hash function and a single hash table.
- the speaker identification system 110 uses the hash tables to identify a speaker of an utterance.
- the speaker identification system 110 receives data that identifies an utterance 160 of a speaker to be identified.
- the utterance 160 may be identified in or included in a request to identify the speaker of the utterance 160 , or a request for other content containing utterances of the same speaker.
- the client device 116 may provide an audio recording that includes an utterance or a video that includes an utterance.
- the speaker identification system 110 may receive an identifier, such as a Uniform Resource Locator (URL) for a resource that includes a recording of an utterance. Having found a particular video of interest in a large video collection, a user may desire to find other videos in the collection that involve the same speaker or speakers as the particular video.
- URL Uniform Resource Locator
- the speaker identification system 110 obtains an utterance vector 162 for the utterance 160 .
- the utterance vector 162 can indicate characteristics of the voice of the speaker of the utterance 160 .
- the utterance vector 162 may indicate characteristics of the utterance 160 independent of the specific words or sounds spoken.
- the utterance vector 162 can be determined in the same manner as the speaker vectors 130 a - 130 c discussed above. In some implementations, when the speaker vectors 130 a - 130 c are i-vectors, the utterance vector 162 may also be an i-vector.
- the utterance vector may also be a d-vector.
- Other data that indicates characteristics of a speaker's voice may be additionally or alternatively be used as an utterance vector 162 .
- the speaker identification system 110 determines keys or index values using the utterance vector 162 . For example, multiple hash values may be determined. Each of the hash functions 140 a - 140 n may be applied to the utterance vector 162 to generate n hash values. As discussed above, the hash functions 140 a - 140 n may use locality-sensitive algorithms so that similar inputs to the hash functions 140 a - 140 n produce similar outputs. For example, the outputs may be clustered according to similarity of the inputs, or the differences between outputs may generally correspond to a cosine distance or other distance between the inputs.
- the speaker identification system 110 uses the keys or index values to identify a set of speaker vectors 170 .
- the hash values that are generated based on the utterance vector 162 can be used to identify similar speaker vectors in the hash tables 150 a - 150 n .
- the hash value produced by applying the hash function 140 a to the utterance vector 162 is used to identify speaker vectors from the hash table 150 a .
- the hash value produced by applying the hash function 140 b to the utterance vector 162 is used to identify speaker vectors from the hash table 150 b , and so on.
- Speaker vectors may be retrieved from any or all of the hash tables 150 a - 150 n , and different speaker vectors may be obtained from different hash tables 150 a - 150 n .
- the set of candidate speaker vectors 170 may be selected using all of the hash tables 150 a - 150 n . For example, a lookup may be performed for each of the hash tables 150 a - 150 n , and in some instances, one or more speaker vectors may be selected from each of the hash tables 150 a - 150 n . In some implementations, each speaker vector that is identified from any of the hash tables 150 a - 150 n is included in the set of candidate speaker vectors 170 . In some implementations, a speaker vector is included in the set of candidate speaker vectors 170 only if the same speaker vector is selected from multiple hash tables 150 a - 150 n . A minimum threshold number can be set.
- a speaker vector may be included in the set of candidate speaker vectors 170 only when the same speaker vector is selected from a number of the hash tables 150 a - 150 n that is equal to or greater than the minimum threshold. For example, if the threshold is set to 2, speaker vectors retrieved from only a single hash table 150 a - 150 n would not be included, but speaker vectors that are retrieved from each of two or more different hash tables 150 a - 150 n would be included in the set of candidate speaker vectors 170 .
- the set 170 is a group of candidate speaker vectors that have a degree of similarity to the utterance vector 162 . Since locality-sensitive hashing is used to select the speaker vectors in the set 170 , the set 170 may include the vectors that are most similar to the utterance vector 162 . For example, using LSH hash functions that approximate cosine distance measures, the speaker vectors may be those that have the lowest cosine distance relative to the utterance vector 162 . As a result, a very large set of speaker vectors can be quickly narrowed down to a subset that is most likely to be similar to the utterance vector 162 . Rather than comparing the utterance vector 162 to every speaker vector one by one, the utterance vector 162 may be compared with the speaker vectors included in the set 170 of candidate speaker vectors.
- the speaker identification system 110 compares the utterance vector 162 with the speaker vectors in the set 170 of candidate speaker vectors. In some implementations, the speaker identification system 110 determines similarity scores 180 that indicate how similar each speaker vector in the set 170 is to the utterance vector 162 . For example, the speaker identification system 110 may determine a cosine distance between each speaker vector in the set 170 and the utterance vector.
- the speaker identification system 110 selects a speaker vector from the set 170 based on the similarity scores 180 . For example, the speaker vector having the highest degree of similarity to the utterance vector 162 may be selected. In the example of FIG. 1A , the speaker vector having the smallest cosine distance from the utterance vector 162 is selected. The speaker whose utterance was used to generate the selected speaker vector may be considered to be the most likely speaker of the utterance 160 . As a result, the name or other information about the speaker associated with the selected speaker vector may be accessed and provided, for example, to the client device 116 or another device. In some implementations, audio or video that was used to generate the selected speaker vector may be provided. As a result, data identifying media items including utterances of the same speaker that spoke the utterance 160 may be provided to the client device 116 .
- a similarity threshold is set, and a speaker vector is selected only if the most similar speaker vector satisfies the similarity threshold. For example, a maximum cosine distance threshold may be set. Cosine distance scores that exceed the threshold may be considered too different to represent the same speaker as the utterance 162 , and may not be selected as likely being the same speaker. In some instances, the most similar speaker vector in the set 170 may not satisfy the similarity threshold, and so the speaker identification system 110 may determine that no speaker can be identified with a high degree of confidence. In some instances, multiple speaker vectors from the set 170 may satisfy the similarity threshold, indicating that multiple good candidate speakers have been identified.
- each speaker vector having a similarity score that satisfies the threshold may be likely to include speech of the same speaker.
- the speaker identification system 110 indicates multiple of or each of the speakers or media items corresponding to speaker vectors satisfying the similarity threshold.
- FIG. 2 is a flow diagram illustrating an example of a process 200 for speaker identification. The process may be performed by one or more computing systems, such as the computing system 110 of FIGS. 1A and 1B .
- An utterance vector for an utterance is obtained ( 202 ).
- the utterance vector is an utterance i-vector comprising parameters determined using multivariate factor analysis of the utterance.
- the utterance vector includes parameters determined based on deep neural network activations that occur in response to information about the utterance being provided to a trained deep neural network.
- Hash values are determined for the utterance vector according to multiple different hash functions ( 204 ).
- the hash values are determined using one or more locality sensitive hash functions.
- the hash values may be determined based on a position of the utterance i-vector with respect to different hyperplanes, such as random or pseudo-random hyperplanes.
- hash values are determined as a combination of other hash values.
- first hash values for the utterance vector can be determined based on a first set of hash functions.
- Second hash values may also be determined as different combinations of two or more of the first hash values.
- the second hash values can each be a different permutation of the first hash values.
- a set of speaker vectors is determined using the hash values ( 206 ).
- a candidate set of speaker vectors can be selected from a plurality of hash tables.
- the set of speaker vectors determined using the hash values is a proper subset of the speaker vectors in the hash tables.
- a set of candidate speaker vectors may be selected, where the number of candidate speaker vectors is an order of magnitude smaller, or several orders of magnitude smaller, than the total number of speaker vectors referenced by the hash tables.
- the set includes only a few speaker vectors, for example, one or two of the speaker vectors selected from each hash table.
- the hash values for the utterance vector may each correspond to a different one of the hash tables.
- the speaker vectors that correspond to the hash values of the utterance vector, if any exist, may be identified and included in the candidate set. In some implementations, one or more other speaker vectors may also be selected. For example, a system may select speaker vectors that are not associated with the exact hash values determined for the utterance vector but are nonetheless associated with similar or nearby hash values, e.g., hash values within a range or cluster about the hash values for the utterance.
- the set of speaker vectors is a set of speaker i-vectors where each speaker i-vector includes parameters determined using multivariate factor analysis of one or more utterances of a respective speaker.
- the set of speaker vectors is a set of speaker vectors in which each speaker vector includes parameters determined based on deep neural network activations that occur in response to information about one or more utterances of a respective speaker being provided to the deep neural network.
- the speaker vectors in the set are compared with the utterance vector ( 208 ). For example, similarity scores can be generated to indicate the degree of similarity of the utterance vector and each of the speaker vectors. In some implementations, a cosine distance is computed between the utterance vector and each of the speaker vectors in the candidate set.
- a speaker vector is selected from the set based on comparing the speaker vectors in the set with the utterance vector ( 210 ). For example, the speaker vector that has the smallest cosine distance with respect to the utterance vector can be selected. The speaker corresponding to the selected speaker vector can be determined to be the likely speaker of the utterance.
- data is accessed that indicates associations between speaker vectors and the respective speakers. Based on the data, a speaker identity corresponding to the selected speaker vector can be identified. Data indicating the speaker identity can then be output.
- one or media items that include utterances of the identified speaker are also identified.
- Data indicating the media items that include utterances of the identified speaker may then be provided to a user.
- the system may indicate that the media includes speech or other content relating to the same person, and the system may indicate the identity of the person. For example, a user watching a particular video on the internet may request other videos involving the same person or people.
- a system may analyze the utterances in the particular video, identify the speaker, and provide links or other information about additional videos that also include speech of the same person or people.
- the speaker identification techniques may be used for authentication. For example, it may be determined that the selected speaker vector corresponds to a particular user, and based on the determination, the particular user may be authenticated to, for example, a device, application, website, or service.
- FIG. 3 shows an example of a computing device 300 and an example of a mobile computing device 350 that can be used to implement the techniques described above.
- the computing device 300 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- the computing device 300 includes a processor 302 , a memory 304 , a storage device 306 , a high-speed interface 308 connecting to the memory 304 and multiple high-speed expansion ports 310 , and a low-speed interface 312 connecting to a low-speed expansion port 314 and the storage device 306 .
- Each of the processor 302 , the memory 304 , the storage device 306 , the high-speed interface 308 , the high-speed expansion ports 310 , and the low-speed interface 312 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 302 can process instructions for execution within the computing device 300 , including instructions stored in the memory 304 or on the storage device 306 to display graphical information for a GUI on an external input/output device, such as a display 316 coupled to the high-speed interface 308 .
- an external input/output device such as a display 316 coupled to the high-speed interface 308 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 304 stores information within the computing device 300 .
- the memory 304 is a volatile memory unit or units.
- the memory 304 is a non-volatile memory unit or units.
- the memory 304 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 306 is capable of providing mass storage for the computing device 300 .
- the storage device 306 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as the memory 304 , the storage device 306 , or memory on the processor 302 .
- the high-speed interface 308 manages bandwidth-intensive operations for the computing device 300 , while the low-speed interface 312 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only.
- the high-speed interface 308 is coupled to the memory 304 , the display 316 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 310 , which may accept various expansion cards (not shown).
- the low-speed interface 312 is coupled to the storage device 306 and the low-speed expansion port 314 .
- the low-speed expansion port 314 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 300 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 320 , or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer 322 . It may also be implemented as part of a rack server system 324 . Alternatively, components from the computing device 300 may be combined with other components in a mobile device (not shown), such as a mobile computing device 350 . Each of such devices may contain one or more of the computing device 300 and the mobile computing device 350 , and an entire system may be made up of multiple computing devices communicating with each other.
- the mobile computing device 350 includes a processor 352 , a memory 364 , an input/output device such as a display 354 , a communication interface 366 , and a transceiver 368 , among other components.
- the mobile computing device 350 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage.
- a storage device such as a micro-drive or other device, to provide additional storage.
- Each of the processor 352 , the memory 364 , the display 354 , the communication interface 366 , and the transceiver 368 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 352 can execute instructions within the mobile computing device 350 , including instructions stored in the memory 364 .
- the processor 352 may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor 352 may provide, for example, for coordination of the other components of the mobile computing device 350 , such as control of user interfaces, applications run by the mobile computing device 350 , and wireless communication by the mobile computing device 350 .
- the processor 352 may communicate with a user through a control interface 358 and a display interface 356 coupled to the display 354 .
- the display 354 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 356 may comprise appropriate circuitry for driving the display 354 to present graphical and other information to a user.
- the control interface 358 may receive commands from a user and convert them for submission to the processor 352 .
- an external interface 362 may provide communication with the processor 352 , so as to enable near area communication of the mobile computing device 350 with other devices.
- the external interface 362 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 364 stores information within the mobile computing device 350 .
- the memory 364 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- An expansion memory 374 may also be provided and connected to the mobile computing device 350 through an expansion interface 372 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- the expansion memory 374 may provide extra storage space for the mobile computing device 350 , or may also store applications or other information for the mobile computing device 350 .
- the expansion memory 374 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- the expansion memory 374 may be provide as a security module for the mobile computing device 350 , and may be programmed with instructions that permit secure use of the mobile computing device 350 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below.
- NVRAM memory non-volatile random access memory
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can be a computer- or machine-readable medium, such as the memory 364 , the expansion memory 374 , or memory on the processor 352 .
- the computer program product can be received in a propagated signal, for example, over the transceiver 368 or the external interface 362 .
- the mobile computing device 350 may communicate wirelessly through the communication interface 366 , which may include digital signal processing circuitry where necessary.
- the communication interface 366 may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others.
- GSM voice calls Global System for Mobile communications
- SMS Short Message Service
- EMS Enhanced Messaging Service
- MMS messaging Multimedia Messaging Service
- CDMA code division multiple access
- TDMA time division multiple access
- PDC Personal Digital Cellular
- WCDMA Wideband Code Division Multiple Access
- CDMA2000 Code Division Multiple Access
- GPRS General Packet Radio Service
- a GPS (Global Positioning System) receiver module 370 may provide additional navigation- and location-related wireless data to the mobile computing device 350 , which may be used as appropriate by applications running on the mobile computing device 350 .
- the mobile computing device 350 may also communicate audibly using an audio codec 360 , which may receive spoken information from a user and convert it to usable digital information.
- the audio codec 360 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device 350 .
- Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device 350 .
- the mobile computing device 350 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 380 . It may also be implemented as part of a smart-phone 382 , personal digital assistant, tablet computer, wearable computer, or other similar mobile device.
- implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system may include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This application is a continuation of U.S. application Ser. No. 14/523,198, filed Oct. 24, 2014, which claims the benefit of U.S. Provisional Patent Application Ser. No. 61/899,434, filed Nov. 4, 2013, which are incorporated by reference.
- This specification generally relates to speech recognition systems, and some implementations relate to determining or verifying an identity of a speaker.
- Speaker identification generally involves determining a likely identity of a speaker based on speech samples from the speaker. Often, the more potential speaker identities a system has to select from among, the more computation and time is required to identify the correct speaker from among the potential speaker identities.
- Speaker identification is an important area of speech processing. In addition to identification accuracy, large-scale applications of speaker identification give rise to another challenge: fast search in the database of speakers. As discussed below, a system for speaker identification can use speaker vectors such as identity vectors (“i-vectors”) and locality sensitive hashing, an algorithm for fast nearest-neighbor search in high dimensions. The connection between the two techniques is the cosine distance: the cosine distance may be used to compare vectors, and locality sensitive hashing allows approximation of the cosine distance in the retrieval procedure. In some implementations, an approach that combines the use of speaker vector techniques and locality sensitive hashing can be faster than a linear search while maintaining high identification accuracy.
- In one general aspect, a method includes: obtaining an utterance vector that is derived from an utterance; determining hash values for the utterance vector according to multiple different hash functions; determining a set of speaker vectors from a plurality of hash tables using the hash values, each speaker vector being derived from one or more utterances of a respective speaker; comparing the speaker vectors in the set with the utterance vector; and selecting a speaker vector based on comparing the speaker vectors in the set with the utterance vector.
- Implementations may include one or more of the following features. For example, the utterance vector includes obtaining an utterance i-vector for the utterance, the utterance i-vector comprising parameters determined using multivariate factor analysis of the utterance; and determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining a set of speaker i-vectors from the plurality of hash tables, each speaker i-vector comprising parameters determined using multivariate factor analysis of one or more utterances of a respective speaker. Obtaining the utterance vector includes obtaining an utterance vector comprising parameters determined based on deep neural network activations that occur in response to information about the utterance being provided to the deep neural network; and determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining a set of speaker vectors in which each speaker vector includes parameters determined based on deep neural network activations that occur in response to information about one or more utterances of a respective speaker being provided to the deep neural network.
- Implementations may include one or more of the following features. For example, accessing data indicating associations between the speaker vectors and respective speakers; determining, based on the data indicating the associations between the speaker vectors and the respective speakers, a speaker identity corresponding to the selected speaker vector; and outputting data indicating the speaker identity. The method may include: identifying one or more media items that include utterances of a speaker corresponding to the selected speaker vector; and outputting data indicating the identified one or more media items. The method may include: determining that the selected speaker vector corresponds to a particular user; and based at least in part on the determining that the selected speaker vector corresponds to a particular user identity, authenticating the particular user.
- Implementations may include one or more of the following features. For example, determining the hash values includes determining the hash values using one or more locality sensitive hash functions. Determining the hash values includes determining the hash values based on a position of the utterance vector with respect to different hyperplanes. Determining the hash values includes: determining first hash values for the utterance vector based on a first set of hash functions; and determining second hash values as different combinations of two or more of the first hash values; where determining the set of speaker vectors from the plurality of hash tables using the hash values includes determining the set of speaker vectors from the plurality of hash tables using the second hash values. Comparing the speaker vectors in the set with the utterance vector includes determining similarity scores that each indicate a degree of similarity of the utterance vector and one of the speaker vectors in the set; and selecting a speaker vector includes selecting the speaker vector that the similarity scores indicate is most similar to the utterance vector.
- Implementations may include one or more of the following features. For example, determining similarity scores that each indicate a degree of similarity of the utterance vector and one of the speaker vectors in the set includes determining a cosine distance between the utterance vector and each of the speaker vectors in the set. Selecting the speaker vector that the similarity scores indicate is most similar to the utterance vector includes: identifying the smallest cosine distance from among the determined cosine distances; determining that the smallest cosine distance is less than a maximum distance threshold value; and based on determining that the smallest cosine distance is less than the maximum distance threshold value, selecting the speaker vector corresponding to the smallest cosine distance. Each of the speaker vectors corresponds to a different speaker; and the method further includes providing data indicating that the speaker corresponding to the selected speaker vector is the speaker of the utterance. The method may include obtaining multiple speaker vectors that each indicate characteristics of speech of a respective speaker; and, for each particular speaker vector of the multiple speaker vectors: determining hash values for the particular speaker vector according to each of the multiple different hash functions; and inserting the particular speaker vector into each of the plurality of hash tables based on the hash values. Obtaining multiple speaker vectors that each indicate characteristics of speech of a respective speaker includes: accessing a set of multiple video resources; and generating a speaker vector for each of the multiple video resources.
- In another general aspect, a method includes: obtaining an utterance i-vector for an utterance; determining hash values for the utterance i-vector according to multiple different hash functions; determining a set of speaker i-vectors from a plurality of hash tables using the hash values; comparing the speaker i-vectors in the set with the utterance i-vector; and selecting a speaker i-vector based on comparing the speaker i-vectors in the set with the utterance i-vector.
- In another general aspect, a method includes: obtaining multiple speaker i-vectors that each correspond to a different speaker; and for each of the multiple speaker i-vectors: (i) determining hash values for the speaker i-vector according to multiple different hash functions; and (ii) inserting the speaker i-vector into a plurality of hash tables based on the hash values.
- Implementations may include one or more of the following features. For example, determining the hash values includes determining the hash values using locality sensitive hash functions. Determining the hash values includes determining the hash values based on a position of the speaker i-vector with respect to different hyperplanes. Determining hash values for the speaker i-vector according to multiple different hash functions includes: determining first hash values for the speaker i-vector based on a first set of hash functions; and determining second hash values as different combinations of two or more of the first hash values. Inserting the speaker i-vector into a plurality of hash tables based on the hash values includes inserting the speaker i-vector into each of the plurality of hash tables based on the second hash values.
- Other implementations of these and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other potential features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIGS. 1A and 1B are diagrams illustrating a system for speaker identification. -
FIG. 2 is a flow diagram illustrating a process for speaker identification. -
FIG. 3 is a schematic diagram that shows an example of a computing device and a mobile computing device. - Like reference numbers and designations in the various drawings indicate like elements.
- Speaker identification is one of the core areas of speech processing and acoustic modeling. Applications of speaker identification include authentication in security-critical systems, personalized speech recognition, and searching for speakers in large corpora. Due to the increasing amount of data—especially in web-scale applications—fast processing of speech data is becoming increasingly important. While the audio corpus can usually be pre-processed offline and in parallel, the retrieval procedure directly impacts user latency and needs to be executed as quickly as possible. The techniques discussed below can be used to perform fast, text-independent speaker identification in large corpora. Good identification performance (e.g., accuracy) can be maintained while significantly increasing the speed of retrieval. These techniques can include an i-vector-based speaker identification system combined with locality sensitive hashing (LSH), a powerful tool for approximate nearest neighbor search in high dimensions.
- One application of the speaker identification system discussed below is searching web videos for a given speaker. Web-based videos are an example of the challenges of fast retrieval from a large data set. Each day, several years' worth of video are being uploaded to the web. Even if only a small fraction of this video is human speech, the amount of data to be processed for a single query is still very large.
- The LSH-based retrieval approach discussed below can be faster than a linear search. In some instances, LSH-based search is several times faster, or even one or more orders of magnitude faster. At the same time, the identification accuracy may be close to or roughly equivalent to the more expensive algorithm. When LSH is used to approximate the cosine-distance of i-vectors, the techniques can be implemented with provable performance guarantees. Implementations of LSH-based similarity search may be used with large data sets, such as data sets of hundreds of thousands of items, millions of items, tens of millions of items, hundreds of millions of items, or a billion items or more. Thus, some implementations can have excellent scalability for large-scale data.
- In some implementations, i-vector-based speaker identification techniques are used to identify a speaker. Robustly recognizing a speaker in spite of large inter-session variability such as background noise or different communication channels is one of the main limitations for speaker identification systems. Most techniques can be framed into the Factor Analysis (FA) paradigm, which aims to express the main “factors” contributing to the observed variability in a compact way. Another technique is the Joint Factor Analysis (JFA) formulation, where the acoustic space is divided into different subspaces. These subspaces independently model factors associated with the session variability and factors contributing to the interspeaker variability, e.g., a speaker corresponds to a vector in a low-dimensional subspace.
- Another technique is the Total Variability Model (TVM), where all sources of variability (both speaker and session) are modeled together in a single low-dimensional space. In the TVM approach, the low-dimensional vector of latent factors for a given utterance is called an i-vector, and i-vectors are considered sufficient to represent the differences between various utterances. Now, speaker information and undesirable session effects are separated entirely in the i-vector domain. This separation step is typically carried out via classical Linear Discriminant Analysis (LDA) and/or Within Class Covariance Normalization (WCCN). The cosine distance is typically used for the final comparison of a speaker reference i-vector with an utterance i-vector. Hereafter, the Total Variability system followed by the classical LDA and WCCN is referred to simply as Total Variability or TVM.
- Probabilistic Linear Discriminant Analysis (PLDA) may be used to independently model the speaker and session factors in the i-vector space with a probabilistic framework. This method uses a hypothesis test for i-vector matching.
- In some implementations, locality sensitive hashing may be used to facilitate data retrieval. The nearest neighbor problem is a core element in many search tasks: given a set of a points {x1, . . . , xn}⊂X, a query point q∈X and a distance function d:X×X→
- In order to use LSH with a given distance function d, the algorithm relies on a family of locality sensitive hash functions. Intuitively, a hash function is locality sensitive if two elements that are close under d are more likely to collide. Locality sensitive hash functions can include any of various distance metrics, including, for example, the Euclidean distance, the Jaccard index, and the cosine similarity.
- Given a family of locality sensitive hash functions, the LSH algorithm builds a set of hash tables and hashes all points xi into each hash table. For each hash table, several locality sensitive hash functions may be concatenated to avoid unnecessary collisions, which can increase precision. Several hash tables can be maintained to increase the probability of finding a close neighbor, which may improve recall. Given a query point q, the system can look through all hash tables to find the xi colliding with q and then return the best match.
- In some implementations, LSH techniques may be used for speaker identification. For example, LSH may be used for storage and retrieval of i-vectors and data associated with speakers. In some implementations, LSH indexing techniques may be used to select one or more speaker
- In some implementations, the speaker identification system can generate i-vectors and can retrieve similar i-vectors. In some implementations, given an utterance for which an i-vector should be generated, the utterance is first represented in terms of a large Gaussian mixture model (GMM), the so-called Universal Background Model (UBM), which can be parameterized with λ. Formally, let Θ=(o1, . . . , oO) with oi∈
-
- In
Equation 1, m is the mean vector of mixture component m, m=1, . . . , C ranges over the mixture components of the UBM and P(m|o, λ) is the Gaussian occupation probability for mixture m and observation o. Hereafter, F∈ -
-
N −1 F=Tx, -
- The constraints imposed on the distributions of P(x) and P(F|x) lead to a closed-form solution for P(x|F). The i-vector is the mean of this distribution and is given as shown below in Equation 3:
-
x=(l+T TΣ−1 NT)−1 T TΣ−1 F, -
- If the true speaker labels for each training i-vector are known, the final speaker i-vector is normally obtained by averaging all i-vectors belonging to the same speaker. In an unsupervised setting, such as using web videos where speaker labels are not available for most of the utterances, the i-vector averaging step can be omitted, and instead the i-vectors of all utterances are kept.
- In some implementations, locality-sensitive hashing may be used with i-vectors to identify speakers. One application of the system is enabling fast retrieval of speaker information. In the context of i-vector-based speaker identification, this may include, for example, for a given query i-vector, it may be desirable to find a similar vector in a previously computed set of i-vectors. In some instances, it may be desirable to find the best match, or a set of the closest matches. Since this task is an instance of the nearest neighbor problem introduced above, LSH may be used to enable fast retrieval.
- One aspect of using LSH is the choice of distance function d. For i-vectors, the cosine distance may be expressed as shown below in Equation 4:
-
- Cosine distance measurements, as shown in Equation 4, gives competitive performance for speaker identification. Since the cosine distance can also be approximated well with locality sensitive hash functions, the cosine distance may be used in the LSH algorithm. In particular, hash functions of the form shown below in Equation 5:
-
- In Equation 5, r can be chosen as a random Gaussian vector. Geometrically, this hash function can be seen as hashing with a random hyperplane: r is perpendicular to the hyperplane and the result of the hash function indicates on which side of the hyperplane x lies. Since r has an isotropic distribution, the result is P[hr(x)=hr(y)]=1−Θ(x, y)/π, where (x, y) is the angle between vectors x and y.
- The data structure has two main parameters: l, the number of hash tables, and k, the number of hyperplanes per hash table. Let H1, . . . , Hl be the hash tables in the data structure. To reduce the number of hash function evaluations, the system can maintain m≈√{square root over (l)} hash functions of length k/2 and use the
-
- combinations as hash functions for the l hash tables. Formally, let ui(x)=(h1 i(x), h2 i(x), . . . , hk/2 i(x)) for i∈{1, . . . , m} and hj i(x) sampled as described above. Then the hash functions for the hash tables are hi(x)=(ua(x), ub(x)) with 1≦a<b≦m, i.e., each hi hashes an i-vector x to a string of k bits. Note that it is not necessary to store a full array with 2,000 entries for each hash table. Instead, the system can use standard hashing for large values of k.
- For a given database of i-vectors {x1, . . . , xn}⊂
-
Process 1, shown below, describes an example of a retrieval procedure. -
-
- The running time of the retrieval procedure is 0(dk√{square root over (l)}+l+M), where M is the total number of matches found.
- In some instances, speaker vectors are well clustered under well-matched recording conditions and so a small number of candidates in the hash tables may be sufficient to find a correct match. In other instances, the search for matches across data sets having widely varying recording conditions is more challenging and may require iterating over a larger set of candidates.
- The techniques discussed herein can be used to allow fast retrieval method for speaker identification in large data sets. The system combines aspects of two approaches that interact via the cosine distance: locality sensitive hashing, which enables fast nearest-neighbor search, and i-vectors, which provide good identification accuracy. Moreover, LSH could also be very useful for other large-scale applications of i-vectors, such as clustering.
-
FIGS. 1A and 1B are diagrams illustrating examples of asystem 100 for speaker identification. Thesystem 100 includes acomputing system 110, anetwork 112,data storage 114, and aclient device 116. InFIG. 1A , thecomputing system 110 processes audio information and uses LSH to store information about various different speakers. InFIG. 1 B, thecomputing system 110 uses the stored information to identify a speaker of an utterance. - In the
system 100, the functions performed by thecomputing system 110 can be performed by individual computer systems or can be distributed across multiple computer systems. Thenetwork 112 can be wired or wireless or a combination of both and can include the Internet. Theclient device 114 can be, for example, a desktop computer, laptop computer, a tablet computer, a wearable computer, a cellular phone, a smart phone, a music player, an e-book reader, a navigation system, or any other appropriate device. - Referring to
FIG. 1A , during stage (A), thespeaker identification system 110 accessesaudio data 120 that includes utterances of multiple speakers. For example, theaudio data 120 may include various audio recordings or videos. In some implementations, theaudio data 120 may include data from public data sources, such as videos available on the Internet. Other collections ofaudio data 120 may additionally or alternatively be used. In the illustrated example, theaudio data 120 includes threedifferent audio segments 120 a-120 c, which each include an utterance of a different speaker. In some implementations, the speaker identification system can useaudio data 120 including utterances of hundreds, thousands, or millions of different speakers. - During stage (B), the
speaker identification system 110 obtainsspeaker vectors 130 for the various speakers whose utterances are included in theaudio data 112. Aspeaker vector 130 may be data that indicates characteristics of a speaker's voice. In some implementations, the speaker vectors are i-vectors. In other implementations, the speaker vectors are deep vectors (“d-vectors”) determined using a deep neural network. Other data that indicates characteristics of a speaker's voice may be additionally or alternatively be used as a speaker vector. - As discussed above, an i-vector can be a set of parameters extracted or determined using factor analysis of one or more utterances. The i-vector may be data indicative of latent variables of multivariate factor analysis. For example, the i-vector may represent a projection into a low-dimensional, total variability subspace that was trained using factor analysis. The i-vector may indicate audio characteristics that are independent of the words spoken by the speaker. As a result, the i-vector may represent any of various factors indicative of the identity of the speaker, including, for example, characteristics of the speaker's speaking style, the speaker's gender, the speaker's age, the speaker's language, and/or the speaker's accent. The i-vector may be derived from only a portion of an utterance, an entire utterance, or multiple utterances of a speaker.
- A d-vector can be as set of speaker-specific features extracted from a layer of a neural network. Various types of neural networks may be sued, including deep neural networks and recurrent neural networks. For example, the d-vector can be a set of activations at an output layer of a neural network, or a set of activations at a hidden layer of a neural network. In some implementations, individual d-vectors for an utterance or for different portions of an utterance may be used as speaker vectors. In some implementations, multiple vectors, e.g., for different portions of an utterance, or for multiple utterances of the same speaker, may be averaged together to form a d-vector.
- To generate a d-vector, features extracted from an utterance can be provided as input to a trained neural network. In some implementations, the neural network has been trained to classify inputs of a defined set of speakers, but the speaker that spoke the utterance for which the d-vector is being generated is not required to be in the defined set of speakers. Speech features may be determined for individual speech frames, for example, segments of 10 ms to 50 ms of the utterance. The set of speech features for each frame are input to the neural network, sequentially, with each set of speech features producing a corresponding set of activations at predetermined layer of the neural network. For each input speech frame, a vector may be determined based on the activations at the predetermined output layer. These vectors may each be used as different d-vectors corresponding to the same speaker. In addition or as an alternative, the vectors for multiple speech frames may be averaged together. The averaged vector, like the d-vectors for individual frames, may be saved as a d-vector that indicates qualities characteristic of the speaker's voice.
- A
speaker vector 130 a-130 c may be generated from eachaudio segment 120 a-120 c. For example, when theaudio data 120 includes various audio files or video files, a different speaker vector may be generated for each file, to indicate the characteristics of the utterances in that file. As a result, thespeaker vector 130 a indicates characteristics of the voice of the speaker of the utterances in theaudio segment 120 a, the speaker vector 130 b indicates characteristics of the voice of the speaker of the utterances in theaudio segment 120 b, and so on. If a particular audio segment includes speech of multiple speakers, a separate speaker vector may be generated for each speaker. For example, a recording with speech of multiple speakers may be split into separate segments each including utterances of a single speaker. As a result, processing a particular recording may result in multiple speaker vectors that each correspond to a different speaker. - In some implementations, a speaker vector may be determined using multiple utterances or multiple recordings for a single speaker. For example, multiple recordings of a particular speaker may be identified, for example, based on labels assigned to the recordings. A different i-vector may be generated from each recording, and the i-vectors may be averaged or otherwise combined to form an average or composite speaker vector that represents characteristics of the particular speaker's voice.
- In some implementations, a speaker whose utterances are recorded in an
audio segment 120 a-120 c may be unknown. When a name or other identifying information of the speaker is not known, the speaker vector may be associated with information indicating the source of the audio segment, such as a URL or other identifier for the audio recording or video that included the utterances from which the speaker vector was derived. - During stage (C), the
speaker identification system 110 determines keys or index values for eachspeaker vector 130 a-130 c. The keys or indexes can be hash values, for example, hash values determined using one or more LSH algorithms. For eachspeaker vector 130 a-130 c, a hash value may be determined for each of multiple hash functions 140. In the illustrated example, a set of n hash functions 140 a-140 n are used. As a result, for eachspeaker vector 130 a-130 c, n different hash values may be determined. - In some implementations, hash values for a speaker may be determined based on a position of a speaker vector with respect to different hyperplanes, such as random or pseudo-random hyperplanes. For example, a set of k-dimensional hyperplanes may be defined. A hash value may be determined by projecting the speaker vector onto the k-dimensional space and making a binary determination, for each hyperplane, which side of the hyperplane the projection falls. The comparison of the projection with each hyperplane may produce one bit of the hash value.
- Hash values may also be determined by combining or concatenating hash values or other values derived from speaker vectors. Calculating shorter hash values may require less computation, but longer hash values may be desirable to allow for greater precision. In addition, longer hash values often lead to fewer hash collisions in a hash table. If three hash values A, B, and C are determined for a particular speaker vector, a set of longer hash values may be determined by concatenating different combinations of the hash values, for example, generating hash values AB, AC, and BC. In this example, the length of the hash values doubles and the only computation required is the concatenation operation.
- During stage (D), the
speaker identification system 100 stores associations between the keys or index values andcorresponding speaker vectors 130 a-130 c. Data identifying the speaker corresponding to a speaker vector, or a source of the audio data was used to determine the speaker vector, may be associated with the keys or index values. The associations may be stored in thedata storage 114, for example, in an associative array such as a hash table, for later use in identifying speakers. - In the illustrated example,
speaker vectors 130 a-130 c are stored in a plurality of hash tables 150. A set of n hash tables 150 a-150 n are used, with one hash table 150 a-150 n corresponding to eachhash function 140 a-140 n. An entry for eachspeaker vector 130 a-130 c is included in each hash table 150 a-150. For example, in hash table 150 a, thespeaker vector 130 a is associated with the hash value determined by applying thehash function 140 a to thespeaker vector 130 a. In hash table 150 b, thesame speaker vector 130 a is associated with the hash value determined by applying thehash function 140 b to thespeaker vector 130 a. The pattern continues for all of the n hash tables, so that in hash table 150 n, thespeaker vector 130 a is associated with the hash value determined by applying thehash function 140 n to thespeaker vector 130 a. The other speaker vectors 130 b, 130 c and their associated speaker information are indexed in the hash tables 150 a-150 n in the same manner. - Associating the
speaker vectors 130 a-130 c with different hash values in different hash tables can increase the likelihood of identifying appropriate speaker vectors during speaker identification. Some hash functions may indicate that certain items match or are similar, while other hash functions may not. As a result, it may be easier to identify speaker vectors as similar to a particular vector using multiple hash functions and multiple hash tables than when using a single hash function and a single hash table. - Referring to
FIG. 1 B, thespeaker identification system 110 uses the hash tables to identify a speaker of an utterance. During stage (E), thespeaker identification system 110 receives data that identifies anutterance 160 of a speaker to be identified. Theutterance 160 may be identified in or included in a request to identify the speaker of theutterance 160, or a request for other content containing utterances of the same speaker. For example, theclient device 116 may provide an audio recording that includes an utterance or a video that includes an utterance. As another example, thespeaker identification system 110 may receive an identifier, such as a Uniform Resource Locator (URL) for a resource that includes a recording of an utterance. Having found a particular video of interest in a large video collection, a user may desire to find other videos in the collection that involve the same speaker or speakers as the particular video. - During stage (F), the
speaker identification system 110 obtains an utterance vector 162 for theutterance 160. The utterance vector 162 can indicate characteristics of the voice of the speaker of theutterance 160. In particular, the utterance vector 162 may indicate characteristics of theutterance 160 independent of the specific words or sounds spoken. The utterance vector 162 can be determined in the same manner as thespeaker vectors 130 a-130 c discussed above. In some implementations, when thespeaker vectors 130 a-130 c are i-vectors, the utterance vector 162 may also be an i-vector. In other implementations, when thespeaker vectors 130 a-130 c are d-vectors, the utterance vector may also be a d-vector. Other data that indicates characteristics of a speaker's voice may be additionally or alternatively be used as an utterance vector 162. - During stage (G), the
speaker identification system 110 determines keys or index values using the utterance vector 162. For example, multiple hash values may be determined. Each of the hash functions 140 a-140 n may be applied to the utterance vector 162 to generate n hash values. As discussed above, the hash functions 140 a-140 n may use locality-sensitive algorithms so that similar inputs to the hash functions 140 a-140 n produce similar outputs. For example, the outputs may be clustered according to similarity of the inputs, or the differences between outputs may generally correspond to a cosine distance or other distance between the inputs. - During stage (H), the
speaker identification system 110 uses the keys or index values to identify a set ofspeaker vectors 170. The hash values that are generated based on the utterance vector 162 can be used to identify similar speaker vectors in the hash tables 150 a-150 n. For example, the hash value produced by applying thehash function 140 a to the utterance vector 162 is used to identify speaker vectors from the hash table 150 a. The hash value produced by applying thehash function 140 b to the utterance vector 162 is used to identify speaker vectors from the hash table 150 b, and so on. Speaker vectors may be retrieved from any or all of the hash tables 150 a-150 n, and different speaker vectors may be obtained from different hash tables 150 a-150 n. - In some implementations, the set of
candidate speaker vectors 170 may be selected using all of the hash tables 150 a-150 n. For example, a lookup may be performed for each of the hash tables 150 a-150 n, and in some instances, one or more speaker vectors may be selected from each of the hash tables 150 a-150 n. In some implementations, each speaker vector that is identified from any of the hash tables 150 a-150 n is included in the set ofcandidate speaker vectors 170. In some implementations, a speaker vector is included in the set ofcandidate speaker vectors 170 only if the same speaker vector is selected from multiple hash tables 150 a-150 n. A minimum threshold number can be set. A speaker vector may be included in the set ofcandidate speaker vectors 170 only when the same speaker vector is selected from a number of the hash tables 150 a-150 n that is equal to or greater than the minimum threshold. For example, if the threshold is set to 2, speaker vectors retrieved from only a single hash table 150 a-150 n would not be included, but speaker vectors that are retrieved from each of two or more different hash tables 150 a-150 n would be included in the set ofcandidate speaker vectors 170. - The
set 170 is a group of candidate speaker vectors that have a degree of similarity to the utterance vector 162. Since locality-sensitive hashing is used to select the speaker vectors in theset 170, theset 170 may include the vectors that are most similar to the utterance vector 162. For example, using LSH hash functions that approximate cosine distance measures, the speaker vectors may be those that have the lowest cosine distance relative to the utterance vector 162. As a result, a very large set of speaker vectors can be quickly narrowed down to a subset that is most likely to be similar to the utterance vector 162. Rather than comparing the utterance vector 162 to every speaker vector one by one, the utterance vector 162 may be compared with the speaker vectors included in theset 170 of candidate speaker vectors. - During stage (I), the
speaker identification system 110 compares the utterance vector 162 with the speaker vectors in theset 170 of candidate speaker vectors. In some implementations, thespeaker identification system 110 determines similarity scores 180 that indicate how similar each speaker vector in theset 170 is to the utterance vector 162. For example, thespeaker identification system 110 may determine a cosine distance between each speaker vector in theset 170 and the utterance vector. - During stage (J) the
speaker identification system 110 selects a speaker vector from theset 170 based on the similarity scores 180. For example, the speaker vector having the highest degree of similarity to the utterance vector 162 may be selected. In the example ofFIG. 1A , the speaker vector having the smallest cosine distance from the utterance vector 162 is selected. The speaker whose utterance was used to generate the selected speaker vector may be considered to be the most likely speaker of theutterance 160. As a result, the name or other information about the speaker associated with the selected speaker vector may be accessed and provided, for example, to theclient device 116 or another device. In some implementations, audio or video that was used to generate the selected speaker vector may be provided. As a result, data identifying media items including utterances of the same speaker that spoke theutterance 160 may be provided to theclient device 116. - In some implementations, a similarity threshold is set, and a speaker vector is selected only if the most similar speaker vector satisfies the similarity threshold. For example, a maximum cosine distance threshold may be set. Cosine distance scores that exceed the threshold may be considered too different to represent the same speaker as the utterance 162, and may not be selected as likely being the same speaker. In some instances, the most similar speaker vector in the
set 170 may not satisfy the similarity threshold, and so thespeaker identification system 110 may determine that no speaker can be identified with a high degree of confidence. In some instances, multiple speaker vectors from theset 170 may satisfy the similarity threshold, indicating that multiple good candidate speakers have been identified. When each speaker vector represents a different media item, each speaker vector having a similarity score that satisfies the threshold may be likely to include speech of the same speaker. In some implementations, thespeaker identification system 110 indicates multiple of or each of the speakers or media items corresponding to speaker vectors satisfying the similarity threshold. -
FIG. 2 is a flow diagram illustrating an example of aprocess 200 for speaker identification. The process may be performed by one or more computing systems, such as thecomputing system 110 ofFIGS. 1A and 1B . - An utterance vector for an utterance is obtained (202). In some implementations, the utterance vector is an utterance i-vector comprising parameters determined using multivariate factor analysis of the utterance. In some implementations, the utterance vector includes parameters determined based on deep neural network activations that occur in response to information about the utterance being provided to a trained deep neural network.
- Hash values are determined for the utterance vector according to multiple different hash functions (204). In some implementations, the hash values are determined using one or more locality sensitive hash functions. For example, the hash values may be determined based on a position of the utterance i-vector with respect to different hyperplanes, such as random or pseudo-random hyperplanes.
- In some implementations, hash values are determined as a combination of other hash values. For example, to determine the hash values, first hash values for the utterance vector can be determined based on a first set of hash functions. Second hash values may also be determined as different combinations of two or more of the first hash values. For example, the second hash values can each be a different permutation of the first hash values.
- A set of speaker vectors is determined using the hash values (206). For example, a candidate set of speaker vectors can be selected from a plurality of hash tables. The set of speaker vectors determined using the hash values is a proper subset of the speaker vectors in the hash tables. For example, a set of candidate speaker vectors may be selected, where the number of candidate speaker vectors is an order of magnitude smaller, or several orders of magnitude smaller, than the total number of speaker vectors referenced by the hash tables. In some instances, the set includes only a few speaker vectors, for example, one or two of the speaker vectors selected from each hash table.
- The hash values for the utterance vector may each correspond to a different one of the hash tables. The speaker vectors that correspond to the hash values of the utterance vector, if any exist, may be identified and included in the candidate set. In some implementations, one or more other speaker vectors may also be selected. For example, a system may select speaker vectors that are not associated with the exact hash values determined for the utterance vector but are nonetheless associated with similar or nearby hash values, e.g., hash values within a range or cluster about the hash values for the utterance.
- In some implementations the set of speaker vectors is a set of speaker i-vectors where each speaker i-vector includes parameters determined using multivariate factor analysis of one or more utterances of a respective speaker. In some implementations the set of speaker vectors is a set of speaker vectors in which each speaker vector includes parameters determined based on deep neural network activations that occur in response to information about one or more utterances of a respective speaker being provided to the deep neural network.
- The speaker vectors in the set are compared with the utterance vector (208). For example, similarity scores can be generated to indicate the degree of similarity of the utterance vector and each of the speaker vectors. In some implementations, a cosine distance is computed between the utterance vector and each of the speaker vectors in the candidate set.
- A speaker vector is selected from the set based on comparing the speaker vectors in the set with the utterance vector (210). For example, the speaker vector that has the smallest cosine distance with respect to the utterance vector can be selected. The speaker corresponding to the selected speaker vector can be determined to be the likely speaker of the utterance.
- In some implementations, data is accessed that indicates associations between speaker vectors and the respective speakers. Based on the data, a speaker identity corresponding to the selected speaker vector can be identified. Data indicating the speaker identity can then be output.
- In some implementations, once the speaker of the utterance is identified, one or media items that include utterances of the identified speaker are also identified. Data indicating the media items that include utterances of the identified speaker may then be provided to a user. The system may indicate that the media includes speech or other content relating to the same person, and the system may indicate the identity of the person. For example, a user watching a particular video on the internet may request other videos involving the same person or people. A system may analyze the utterances in the particular video, identify the speaker, and provide links or other information about additional videos that also include speech of the same person or people.
- In some implementations, the speaker identification techniques may be used for authentication. For example, it may be determined that the selected speaker vector corresponds to a particular user, and based on the determination, the particular user may be authenticated to, for example, a device, application, website, or service.
-
FIG. 3 shows an example of acomputing device 300 and an example of amobile computing device 350 that can be used to implement the techniques described above. Thecomputing device 300 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. - The
computing device 300 includes aprocessor 302, amemory 304, astorage device 306, a high-speed interface 308 connecting to thememory 304 and multiple high-speed expansion ports 310, and a low-speed interface 312 connecting to a low-speed expansion port 314 and thestorage device 306. Each of theprocessor 302, thememory 304, thestorage device 306, the high-speed interface 308, the high-speed expansion ports 310, and the low-speed interface 312, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. Theprocessor 302 can process instructions for execution within thecomputing device 300, including instructions stored in thememory 304 or on thestorage device 306 to display graphical information for a GUI on an external input/output device, such as adisplay 316 coupled to the high-speed interface 308. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 304 stores information within thecomputing device 300. In some implementations, thememory 304 is a volatile memory unit or units. In some implementations, thememory 304 is a non-volatile memory unit or units. Thememory 304 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 306 is capable of providing mass storage for thecomputing device 300. In some implementations, thestorage device 306 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as thememory 304, thestorage device 306, or memory on theprocessor 302. - The high-
speed interface 308 manages bandwidth-intensive operations for thecomputing device 300, while the low-speed interface 312 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In some implementations, the high-speed interface 308 is coupled to thememory 304, the display 316 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 310, which may accept various expansion cards (not shown). In the implementation, the low-speed interface 312 is coupled to thestorage device 306 and the low-speed expansion port 314. The low-speed expansion port 314, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 300 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 320, or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as alaptop computer 322. It may also be implemented as part of arack server system 324. Alternatively, components from thecomputing device 300 may be combined with other components in a mobile device (not shown), such as amobile computing device 350. Each of such devices may contain one or more of thecomputing device 300 and themobile computing device 350, and an entire system may be made up of multiple computing devices communicating with each other. - The
mobile computing device 350 includes aprocessor 352, amemory 364, an input/output device such as adisplay 354, acommunication interface 366, and atransceiver 368, among other components. Themobile computing device 350 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage. Each of theprocessor 352, thememory 364, thedisplay 354, thecommunication interface 366, and thetransceiver 368, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate. - The
processor 352 can execute instructions within themobile computing device 350, including instructions stored in thememory 364. Theprocessor 352 may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Theprocessor 352 may provide, for example, for coordination of the other components of themobile computing device 350, such as control of user interfaces, applications run by themobile computing device 350, and wireless communication by themobile computing device 350. - The
processor 352 may communicate with a user through acontrol interface 358 and adisplay interface 356 coupled to thedisplay 354. Thedisplay 354 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 356 may comprise appropriate circuitry for driving thedisplay 354 to present graphical and other information to a user. Thecontrol interface 358 may receive commands from a user and convert them for submission to theprocessor 352. In addition, anexternal interface 362 may provide communication with theprocessor 352, so as to enable near area communication of themobile computing device 350 with other devices. Theexternal interface 362 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The
memory 364 stores information within themobile computing device 350. Thememory 364 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Anexpansion memory 374 may also be provided and connected to themobile computing device 350 through anexpansion interface 372, which may include, for example, a SIMM (Single In Line Memory Module) card interface. Theexpansion memory 374 may provide extra storage space for themobile computing device 350, or may also store applications or other information for themobile computing device 350. Specifically, theexpansion memory 374 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, theexpansion memory 374 may be provide as a security module for themobile computing device 350, and may be programmed with instructions that permit secure use of themobile computing device 350. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below. In some implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The computer program product can be a computer- or machine-readable medium, such as the
memory 364, theexpansion memory 374, or memory on theprocessor 352. In some implementations, the computer program product can be received in a propagated signal, for example, over thetransceiver 368 or theexternal interface 362. - The
mobile computing device 350 may communicate wirelessly through thecommunication interface 366, which may include digital signal processing circuitry where necessary. Thecommunication interface 366 may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others. Such communication may occur, for example, through thetransceiver 368 using a radio-frequency. In addition, short-range communication may occur, such as using a Bluetooth, Wi-Fi, or other such transceiver (not shown). In addition, a GPS (Global Positioning System)receiver module 370 may provide additional navigation- and location-related wireless data to themobile computing device 350, which may be used as appropriate by applications running on themobile computing device 350. - The
mobile computing device 350 may also communicate audibly using anaudio codec 360, which may receive spoken information from a user and convert it to usable digital information. Theaudio codec 360 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of themobile computing device 350. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on themobile computing device 350. - The
mobile computing device 350 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 380. It may also be implemented as part of a smart-phone 382, personal digital assistant, tablet computer, wearable computer, or other similar mobile device. - Various implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/170,264 US10565996B2 (en) | 2013-11-04 | 2016-06-01 | Speaker identification |
US15/624,760 US10140991B2 (en) | 2013-11-04 | 2017-06-16 | Using audio characteristics to identify speakers and media items |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361899434P | 2013-11-04 | 2013-11-04 | |
US14/523,198 US9514753B2 (en) | 2013-11-04 | 2014-10-24 | Speaker identification using hash-based indexing |
US15/170,264 US10565996B2 (en) | 2013-11-04 | 2016-06-01 | Speaker identification |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/523,198 Continuation US9514753B2 (en) | 2013-11-04 | 2014-10-24 | Speaker identification using hash-based indexing |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/624,760 Continuation US10140991B2 (en) | 2013-11-04 | 2017-06-16 | Using audio characteristics to identify speakers and media items |
Publications (2)
Publication Number | Publication Date |
---|---|
US20160275953A1 true US20160275953A1 (en) | 2016-09-22 |
US10565996B2 US10565996B2 (en) | 2020-02-18 |
Family
ID=53007667
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/523,198 Active 2035-02-02 US9514753B2 (en) | 2013-11-04 | 2014-10-24 | Speaker identification using hash-based indexing |
US15/170,264 Active 2036-03-02 US10565996B2 (en) | 2013-11-04 | 2016-06-01 | Speaker identification |
US15/624,760 Active US10140991B2 (en) | 2013-11-04 | 2017-06-16 | Using audio characteristics to identify speakers and media items |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/523,198 Active 2035-02-02 US9514753B2 (en) | 2013-11-04 | 2014-10-24 | Speaker identification using hash-based indexing |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/624,760 Active US10140991B2 (en) | 2013-11-04 | 2017-06-16 | Using audio characteristics to identify speakers and media items |
Country Status (1)
Country | Link |
---|---|
US (3) | US9514753B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10325601B2 (en) | 2016-09-19 | 2019-06-18 | Pindrop Security, Inc. | Speaker recognition in the call center |
US10347256B2 (en) | 2016-09-19 | 2019-07-09 | Pindrop Security, Inc. | Channel-compensated low-level features for speaker recognition |
US10553218B2 (en) | 2016-09-19 | 2020-02-04 | Pindrop Security, Inc. | Dimensionality reduction of baum-welch statistics for speaker recognition |
US11019201B2 (en) | 2019-02-06 | 2021-05-25 | Pindrop Security, Inc. | Systems and methods of gateway detection in a telephone network |
US11355103B2 (en) | 2019-01-28 | 2022-06-07 | Pindrop Security, Inc. | Unsupervised keyword spotting and word discovery for fraud analytics |
US11468901B2 (en) | 2016-09-12 | 2022-10-11 | Pindrop Security, Inc. | End-to-end speaker recognition using deep neural network |
RU2784691C1 (en) * | 2022-09-14 | 2022-11-29 | Общество с ограниченной ответственностью "Специальный Технологический Центр" (ООО "СТЦ") | Method for identifying a speaker's personality by digital signals of low-speed speech codecs |
US11646018B2 (en) | 2019-03-25 | 2023-05-09 | Pindrop Security, Inc. | Detection of calls from voice assistants |
US11659082B2 (en) | 2017-01-17 | 2023-05-23 | Pindrop Security, Inc. | Authentication using DTMF tones |
US11842748B2 (en) | 2016-06-28 | 2023-12-12 | Pindrop Security, Inc. | System and method for cluster-based audio event detection |
Families Citing this family (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11410394B2 (en) | 2020-11-04 | 2022-08-09 | West Texas Technology Partners, Inc. | Method for interactive catalog for 3D objects within the 2D environment |
US9971853B2 (en) | 2014-05-13 | 2018-05-15 | Atheer, Inc. | Method for replacing 3D objects in 2D environment |
US9858922B2 (en) | 2014-06-23 | 2018-01-02 | Google Inc. | Caching speech recognition scores |
US9299347B1 (en) * | 2014-10-22 | 2016-03-29 | Google Inc. | Speech recognition using associative mapping |
US10580401B2 (en) | 2015-01-27 | 2020-03-03 | Google Llc | Sub-matrix input for neural network layers |
DK3257043T3 (en) * | 2015-02-11 | 2019-01-14 | Bang & Olufsen As | Speaker recognition in a multimedia system |
US9786270B2 (en) | 2015-07-09 | 2017-10-10 | Google Inc. | Generating acoustic models |
CN105513597B (en) * | 2015-12-30 | 2018-07-10 | 百度在线网络技术（北京）有限公司 | Voiceprint processing method and processing device |
US10229672B1 (en) | 2015-12-31 | 2019-03-12 | Google Llc | Training acoustic models using connectionist temporal classification |
CN105869645B (en) * | 2016-03-25 | 2019-04-12 | 腾讯科技（深圳）有限公司 | Voice data processing method and device |
US10311219B2 (en) * | 2016-06-07 | 2019-06-04 | Vocalzoom Systems Ltd. | Device, system, and method of user authentication utilizing an optical microphone |
US10326585B2 (en) * | 2016-06-17 | 2019-06-18 | Hewlett Packard Enterprise Development Lp | Hash value generation through projection vector split |
US20180018973A1 (en) | 2016-07-15 | 2018-01-18 | Google Inc. | Speaker verification |
CN107632987B (en) * | 2016-07-19 | 2018-12-07 | 腾讯科技（深圳）有限公司 | A kind of dialogue generation method and device |
CN106297807B (en) | 2016-08-05 | 2019-03-01 | 腾讯科技（深圳）有限公司 | The method and apparatus of training Voiceprint Recognition System |
US10614813B2 (en) * | 2016-11-04 | 2020-04-07 | Intellisist, Inc. | System and method for performing caller identity verification using multi-step voice analysis |
CN108288470B (en) * | 2017-01-10 | 2021-12-21 | 富士通株式会社 | Voiceprint-based identity verification method and device |
US11546379B2 (en) * | 2017-01-31 | 2023-01-03 | Hewlett Packard Enterprise Development Lp | Providing security for internet of things (IoT) devices |
US11531859B2 (en) | 2017-08-08 | 2022-12-20 | Samsung Electronics Co., Ltd. | System and method for hashed compressed weighting matrix in neural networks |
US10706840B2 (en) | 2017-08-18 | 2020-07-07 | Google Llc | Encoder-decoder models for sequence to sequence mapping |
CN107452403B (en) * | 2017-09-12 | 2020-07-07 | 清华大学 | Speaker marking method |
EP3506138A1 (en) * | 2017-12-29 | 2019-07-03 | Gemalto Sa | Authentication method, device and system |
EP3744152A4 (en) * | 2018-01-22 | 2021-07-21 | Nokia Technologies Oy | Privacy-preservign voiceprint authentication apparatus and method |
KR102585231B1 (en) | 2018-02-02 | 2023-10-05 | 삼성전자주식회사 | Speech signal processing mehtod for speaker recognition and electric apparatus thereof |
US10831752B2 (en) * | 2018-04-25 | 2020-11-10 | International Business Machines Corporation | Semantic relational database operations |
US10621991B2 (en) * | 2018-05-06 | 2020-04-14 | Microsoft Technology Licensing, Llc | Joint neural network for speaker recognition |
KR20190129580A (en) * | 2018-05-11 | 2019-11-20 | 삼성전자주식회사 | Device and method to personlize voice recognition model |
US11436311B2 (en) * | 2018-05-22 | 2022-09-06 | Arizona Board Of Regents On Behalf Of Arizona State University | Method and apparatus for secure and usable mobile two-factor authentication |
US10380997B1 (en) * | 2018-07-27 | 2019-08-13 | Deepgram, Inc. | Deep learning internal state index-based search and classification |
KR102637339B1 (en) * | 2018-08-31 | 2024-02-16 | 삼성전자주식회사 | Method and apparatus of personalizing voice recognition model |
CN109524026B (en) * | 2018-10-26 | 2022-04-26 | 北京网众共创科技有限公司 | Method and device for determining prompt tone, storage medium and electronic device |
US10957318B2 (en) * | 2018-11-02 | 2021-03-23 | Visa International Service Association | Dynamic voice authentication |
KR102275406B1 (en) * | 2018-11-14 | 2021-07-09 | 네오사피엔스 주식회사 | Method for retrieving content having voice identical to voice of target speaker and apparatus for performing the same |
US10643122B1 (en) * | 2019-05-06 | 2020-05-05 | Capital One Services, Llc | Systems using hash keys to preserve privacy across multiple tasks |
KR20220024217A (en) * | 2019-05-30 | 2022-03-03 | 인슈어런스 서비시스 오피스, 인코포레이티드 | Systems and methods for machine learning of speech properties |
CN112099725A (en) * | 2019-06-17 | 2020-12-18 | 华为技术有限公司 | Data processing method and device and computer readable storage medium |
JP7295284B2 (en) * | 2019-07-01 | 2023-06-20 | グーグル エルエルシー | Adaptive diarization model and user interface |
CN111712874B (en) * | 2019-10-31 | 2023-07-14 | 支付宝(杭州)信息技术有限公司 | Method, system, device and storage medium for determining sound characteristics |
US11468900B2 (en) | 2020-10-15 | 2022-10-11 | Google Llc | Speaker identification accuracy |
US20220148600A1 (en) * | 2020-11-11 | 2022-05-12 | Rovi Guides, Inc. | Systems and methods for detecting a mimicked voice input signal |
US11521623B2 (en) | 2021-01-11 | 2022-12-06 | Bank Of America Corporation | System and method for single-speaker identification in a multi-speaker environment on a low-frequency audio recording |
US11798562B2 (en) * | 2021-05-16 | 2023-10-24 | Google Llc | Attentive scoring function for speaker identification |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5614940A (en) * | 1994-10-21 | 1997-03-25 | Intel Corporation | Method and apparatus for providing broadcast information with indexing |
US6185527B1 (en) * | 1999-01-19 | 2001-02-06 | International Business Machines Corporation | System and method for automatic audio content analysis for word spotting, indexing, classification and retrieval |
US20020180803A1 (en) * | 2001-03-29 | 2002-12-05 | Smartdisk Corporation | Systems, methods and computer program products for managing multimedia content |
US20040021684A1 (en) * | 2002-07-23 | 2004-02-05 | Dominick B. Millner | Method and system for an interactive video system |
US20110022609A1 (en) * | 2009-07-24 | 2011-01-27 | Avaya Inc. | System and Method for Generating Search Terms |
US20120053936A1 (en) * | 2010-08-31 | 2012-03-01 | Fujitsu Limited | System and Method for Generating Videoconference Transcriptions |
US8620136B1 (en) * | 2011-04-30 | 2013-12-31 | Cisco Technology, Inc. | System and method for media intelligent recording in a network environment |
US20140108288A1 (en) * | 2012-10-15 | 2014-04-17 | Bank Of America Corporation | Providing a record of an interactive conference |
US8805683B1 (en) * | 2012-02-24 | 2014-08-12 | Google Inc. | Real-time audio recognition protocol |
US20150066920A1 (en) * | 2013-09-04 | 2015-03-05 | Google Inc. | Media clip sharing on social networks |
US9171545B2 (en) * | 1999-04-19 | 2015-10-27 | At&T Intellectual Property Ii, L.P. | Browsing and retrieval of full broadcast-quality video |
Family Cites Families (47)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2733955B2 (en) | 1988-05-18 | 1998-03-30 | 日本電気株式会社 | Adaptive speech recognition device |
JP2979711B2 (en) | 1991-04-24 | 1999-11-15 | 日本電気株式会社 | Pattern recognition method and standard pattern learning method |
DE69328275T2 (en) | 1992-06-18 | 2000-09-28 | Seiko Epson Corp | Speech recognition system |
US5621848A (en) | 1994-06-06 | 1997-04-15 | Motorola, Inc. | Method of partitioning a sequence of data frames |
US6397179B2 (en) | 1997-12-24 | 2002-05-28 | Nortel Networks Limited | Search optimization system and method for continuous speech recognition |
US6631522B1 (en) * | 1998-01-20 | 2003-10-07 | David Erdelyi | Method and system for indexing, sorting, and displaying a video database |
US20010044719A1 (en) * | 1999-07-02 | 2001-11-22 | Mitsubishi Electric Research Laboratories, Inc. | Method and system for recognizing, indexing, and searching acoustic signals |
US6941275B1 (en) * | 1999-10-07 | 2005-09-06 | Remi Swierczek | Music identification system |
US7444353B1 (en) * | 2000-01-31 | 2008-10-28 | Chen Alexander C | Apparatus for delivering music and information |
US7343553B1 (en) * | 2000-05-19 | 2008-03-11 | Evan John Kaye | Voice clip identification method |
US7853664B1 (en) * | 2000-07-31 | 2010-12-14 | Landmark Digital Services Llc | Method and system for purchasing pre-recorded music |
US6556710B2 (en) | 2000-12-15 | 2003-04-29 | America Online, Inc. | Image searching techniques |
CN1235408C (en) * | 2001-02-12 | 2006-01-04 | 皇家菲利浦电子有限公司 | Generating and matching hashes of multimedia content |
MXPA03007733A (en) * | 2001-02-28 | 2003-12-04 | Thomson Licensing Sa | System and method for simplifying different types of searches in electronic program guide. |
US6785647B2 (en) | 2001-04-20 | 2004-08-31 | William R. Hutchison | Speech recognition system with network accessible speech processing resources |
US20040031057A1 (en) * | 2001-04-23 | 2004-02-12 | Waites Christopher P | Method and system for providing media content |
US7003672B2 (en) * | 2001-09-25 | 2006-02-21 | Hewlett-Packard Development Company, L.P. | Authentication and verification for use of software |
US7103542B2 (en) * | 2001-12-14 | 2006-09-05 | Ben Franklin Patent Holding Llc | Automatically improving a voice recognition system |
US20030200157A1 (en) * | 2002-04-22 | 2003-10-23 | Krajec Russell S. | Point of sale selection system |
WO2004003887A2 (en) | 2002-06-28 | 2004-01-08 | Conceptual Speech, Llc | Multi-phoneme streamer and knowledge representation speech recognition system and method |
US20040015993A1 (en) * | 2002-07-17 | 2004-01-22 | Yacenda Michael W. | System and method for providing movies on demand |
US7565139B2 (en) | 2004-02-20 | 2009-07-21 | Google Inc. | Image-based search engine for mobile phones with camera |
US7725318B2 (en) * | 2004-07-30 | 2010-05-25 | Nice Systems Inc. | System and method for improving the accuracy of audio searching |
US8078463B2 (en) | 2004-11-23 | 2011-12-13 | Nice Systems, Ltd. | Method and apparatus for speaker spotting |
DE602006018795D1 (en) | 2006-05-16 | 2011-01-20 | Loquendo Spa | COMPENSATION OF VARIABILITY BETWEEN MEETINGS FOR THE AUTOMATIC EXTRACTION OF INFORMATION FROM LANGUAGE |
US7761466B1 (en) | 2007-07-30 | 2010-07-20 | Hewlett-Packard Development Company, L.P. | Hash-based image identification |
US8219404B2 (en) * | 2007-08-09 | 2012-07-10 | Nice Systems, Ltd. | Method and apparatus for recognizing a speaker in lawful interception systems |
US8731919B2 (en) | 2007-10-16 | 2014-05-20 | Astute, Inc. | Methods and system for capturing voice files and rendering them searchable by keyword or phrase |
US8144939B2 (en) | 2007-11-08 | 2012-03-27 | Sony Ericsson Mobile Communications Ab | Automatic identifying |
US8190479B2 (en) * | 2008-02-01 | 2012-05-29 | Microsoft Corporation | Video contextual advertisements using speech recognition |
US8190604B2 (en) | 2008-04-03 | 2012-05-29 | Microsoft Corporation | User intention modeling for interactive image retrieval |
US8180788B2 (en) | 2008-06-05 | 2012-05-15 | Enpulz, L.L.C. | Image search engine employing image correlation |
US8364660B2 (en) | 2008-07-11 | 2013-01-29 | Videosurf, Inc. | Apparatus and software system for and method of performing a visual-relevance-rank subsequent search |
JP5042194B2 (en) * | 2008-10-27 | 2012-10-03 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Apparatus and method for updating speaker template |
FR2940498B1 (en) * | 2008-12-23 | 2011-04-15 | Thales Sa | METHOD AND SYSTEM FOR AUTHENTICATING A USER AND / OR CRYPTOGRAPHIC DATA |
JP2011221688A (en) * | 2010-04-07 | 2011-11-04 | Sony Corp | Recognition device, recognition method, and program |
US9280598B2 (en) * | 2010-05-04 | 2016-03-08 | Soundhound, Inc. | Systems and methods for sound recognition |
US8744860B2 (en) * | 2010-08-02 | 2014-06-03 | At&T Intellectual Property I, L.P. | Apparatus and method for providing messages in a social network |
US8972253B2 (en) | 2010-09-15 | 2015-03-03 | Microsoft Technology Licensing, Llc | Deep belief network for large vocabulary continuous speech recognition |
US9069754B2 (en) * | 2010-09-29 | 2015-06-30 | Rhonda Enterprises, Llc | Method, system, and computer readable medium for detecting related subgroups of text in an electronic document |
US8442823B2 (en) * | 2010-10-19 | 2013-05-14 | Motorola Solutions, Inc. | Methods for creating and searching a database of speakers |
US8433577B2 (en) | 2011-09-27 | 2013-04-30 | Google Inc. | Detection of creative works on broadcast media |
US9042867B2 (en) | 2012-02-24 | 2015-05-26 | Agnitio S.L. | System and method for speaker recognition on mobile devices |
GB201212518D0 (en) | 2012-07-13 | 2012-08-29 | Deepmind Technologies Ltd | Method and apparatus for image searching |
US9396180B1 (en) * | 2013-01-29 | 2016-07-19 | Amazon Technologies, Inc. | System and method for analyzing video content and presenting information corresponding to video content to users |
US9406298B2 (en) * | 2013-02-07 | 2016-08-02 | Nuance Communications, Inc. | Method and apparatus for efficient i-vector extraction |
US9311915B2 (en) * | 2013-07-31 | 2016-04-12 | Google Inc. | Context-based speech recognition |
-
2014
- 2014-10-24 US US14/523,198 patent/US9514753B2/en active Active
-
2016
- 2016-06-01 US US15/170,264 patent/US10565996B2/en active Active
-
2017
- 2017-06-16 US US15/624,760 patent/US10140991B2/en active Active
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5614940A (en) * | 1994-10-21 | 1997-03-25 | Intel Corporation | Method and apparatus for providing broadcast information with indexing |
US6185527B1 (en) * | 1999-01-19 | 2001-02-06 | International Business Machines Corporation | System and method for automatic audio content analysis for word spotting, indexing, classification and retrieval |
US9171545B2 (en) * | 1999-04-19 | 2015-10-27 | At&T Intellectual Property Ii, L.P. | Browsing and retrieval of full broadcast-quality video |
US20020180803A1 (en) * | 2001-03-29 | 2002-12-05 | Smartdisk Corporation | Systems, methods and computer program products for managing multimedia content |
US20040021684A1 (en) * | 2002-07-23 | 2004-02-05 | Dominick B. Millner | Method and system for an interactive video system |
US20110022609A1 (en) * | 2009-07-24 | 2011-01-27 | Avaya Inc. | System and Method for Generating Search Terms |
US20120053936A1 (en) * | 2010-08-31 | 2012-03-01 | Fujitsu Limited | System and Method for Generating Videoconference Transcriptions |
US8620136B1 (en) * | 2011-04-30 | 2013-12-31 | Cisco Technology, Inc. | System and method for media intelligent recording in a network environment |
US8805683B1 (en) * | 2012-02-24 | 2014-08-12 | Google Inc. | Real-time audio recognition protocol |
US20140108288A1 (en) * | 2012-10-15 | 2014-04-17 | Bank Of America Corporation | Providing a record of an interactive conference |
US20150066920A1 (en) * | 2013-09-04 | 2015-03-05 | Google Inc. | Media clip sharing on social networks |
Cited By (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11842748B2 (en) | 2016-06-28 | 2023-12-12 | Pindrop Security, Inc. | System and method for cluster-based audio event detection |
US11468901B2 (en) | 2016-09-12 | 2022-10-11 | Pindrop Security, Inc. | End-to-end speaker recognition using deep neural network |
US10854205B2 (en) | 2016-09-19 | 2020-12-01 | Pindrop Security, Inc. | Channel-compensated low-level features for speaker recognition |
US10325601B2 (en) | 2016-09-19 | 2019-06-18 | Pindrop Security, Inc. | Speaker recognition in the call center |
US10347256B2 (en) | 2016-09-19 | 2019-07-09 | Pindrop Security, Inc. | Channel-compensated low-level features for speaker recognition |
US10679630B2 (en) | 2016-09-19 | 2020-06-09 | Pindrop Security, Inc. | Speaker recognition in the call center |
US10553218B2 (en) | 2016-09-19 | 2020-02-04 | Pindrop Security, Inc. | Dimensionality reduction of baum-welch statistics for speaker recognition |
US11670304B2 (en) | 2016-09-19 | 2023-06-06 | Pindrop Security, Inc. | Speaker recognition in the call center |
US11657823B2 (en) | 2016-09-19 | 2023-05-23 | Pindrop Security, Inc. | Channel-compensated low-level features for speaker recognition |
US11659082B2 (en) | 2017-01-17 | 2023-05-23 | Pindrop Security, Inc. | Authentication using DTMF tones |
US11355103B2 (en) | 2019-01-28 | 2022-06-07 | Pindrop Security, Inc. | Unsupervised keyword spotting and word discovery for fraud analytics |
US11810559B2 (en) | 2019-01-28 | 2023-11-07 | Pindrop Security, Inc. | Unsupervised keyword spotting and word discovery for fraud analytics |
US11290593B2 (en) | 2019-02-06 | 2022-03-29 | Pindrop Security, Inc. | Systems and methods of gateway detection in a telephone network |
US11019201B2 (en) | 2019-02-06 | 2021-05-25 | Pindrop Security, Inc. | Systems and methods of gateway detection in a telephone network |
US11870932B2 (en) | 2019-02-06 | 2024-01-09 | Pindrop Security, Inc. | Systems and methods of gateway detection in a telephone network |
US11646018B2 (en) | 2019-03-25 | 2023-05-09 | Pindrop Security, Inc. | Detection of calls from voice assistants |
RU2784691C1 (en) * | 2022-09-14 | 2022-11-29 | Общество с ограниченной ответственностью "Специальный Технологический Центр" (ООО "СТЦ") | Method for identifying a speaker's personality by digital signals of low-speed speech codecs |
Also Published As
Publication number | Publication date |
---|---|
US9514753B2 (en) | 2016-12-06 |
US10565996B2 (en) | 2020-02-18 |
US10140991B2 (en) | 2018-11-27 |
US20150127342A1 (en) | 2015-05-07 |
US20170287487A1 (en) | 2017-10-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10140991B2 (en) | Using audio characteristics to identify speakers and media items | |
WO2020073694A1 (en) | Voiceprint identification method, model training method and server | |
Schmidt et al. | Large-scale speaker identification | |
US10685008B1 (en) | Feature embeddings with relative locality for fast profiling of users on streaming data | |
EP2073147B1 (en) | Generic biometric filter | |
JP6113228B2 (en) | Content coherence measurement and similarity measurement | |
US8972410B2 (en) | Identifying related objects in a computer database | |
US20120310864A1 (en) | Adaptive Batch Mode Active Learning for Evolving a Classifier | |
WO2020238053A1 (en) | Neural grid model-based text data category recognition method and apparatus, nonvolatile readable storage medium, and computer device | |
Wang et al. | Large-scale approximate kernel canonical correlation analysis | |
US10282168B2 (en) | System and method for clustering data | |
US20150199960A1 (en) | I-Vector Based Clustering Training Data in Speech Recognition | |
US20130132311A1 (en) | Score fusion and training data recycling for video classification | |
US20130318071A1 (en) | Apparatus and Method for Recognizing Content Using Audio Signal | |
KR20160011916A (en) | Method and apparatus of identifying user using face recognition | |
US10417578B2 (en) | Method and system for predicting requirements of a user for resources over a computer network | |
US20190205475A1 (en) | Search engine for identifying analogies | |
Ellis et al. | Semantic Annotation and Retrieval of Music using a Bag of Systems Representation. | |
Dong et al. | Open-set face identification with index-of-max hashing by learning | |
US11437044B2 (en) | Information processing apparatus, control method, and program | |
US9286544B2 (en) | Methods and apparatuses for facilitating object recognition | |
JP5959446B2 (en) | Retrieval device, program, and method for high-speed retrieval by expressing contents as a set of binary feature vectors | |
US20220254036A1 (en) | Interactive Formation Analysis in Sports Utilizing Semi-Supervised Methods | |
WO2022142032A1 (en) | Handwritten signature verification method and apparatus, computer device, and storage medium | |
JP7473910B2 (en) | SPEAKER RECOGNITION DEVICE, SPEAKER RECOGNITION METHOD, AND PROGRAM |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SHARIFI, MATTHEW;MORENO, IGNACIO LOPEZ;SCHMIDT, LUDWIG;SIGNING DATES FROM 20141023 TO 20141025;REEL/FRAME:038766/0434 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STCV | Information on status: appeal procedure |
Free format text: ON APPEAL -- AWAITING DECISION BY THE BOARD OF APPEALS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |