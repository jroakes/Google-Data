US7243204B2 - Reducing bus width by data compaction - Google Patents
Reducing bus width by data compaction Download PDFInfo
- Publication number
- US7243204B2 US7243204B2 US10/721,316 US72131603A US7243204B2 US 7243204 B2 US7243204 B2 US 7243204B2 US 72131603 A US72131603 A US 72131603A US 7243204 B2 US7243204 B2 US 7243204B2
- Authority
- US
- United States
- Prior art keywords
- bus
- cache
- data
- field
- address
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
Definitions
- the present invention relates generally to computer systems, and specifically to buses used for data transfer in a processor chip.
- Data compression may be used in enhancing the performance of cache memories.
- Yang et al. describe a method for storing data in compressed form so as to reduce the power consumed by a cache memory, in “Frequent Value Compression in Data Caches,” Proceedings of the 33 rd International Symposium on Microarchitecture (December, 2000), pages 258–275, which is incorporated herein by reference.
- the authors use a data compression scheme that is based on encoding a small number of values that appear frequently during memory accesses, while preserving the ability to randomly access individual data items.
- U.S. Pat. No. 6,044,437 to Reinders, whose disclosure is incorporated herein by reference, describes a method for reducing the number of cache line data transfers among components of a computer system based on generating and transferring redundancy bits between levels of a cache memory hierarchy.
- Redundancy logic is provided to detect occurrences of redundant data strings in a given cache line, to generate and transfer redundancy bits when such strings occur, and to decode the redundancy bits at the destination. If redundant data strings occur in a cache line, the transfer of one or more portions of the cache line can thus be canceled. This method is said to reduce the amount of bus traffic and increase overall system performance.
- Embodiments of the present invention are directed to reducing the number of bits (i.e., the number of wires) in buses that are used to convey data between components of an integrated circuit (IC). These embodiments are based on the realization that successive data words that are transferred over a bus on chip generally have low entropy. In other words, at least some of the data bits, typically the higher-order (most significant) bits, repeat from one word to the next. Therefore, it is possible to compact the data efficiently by dividing each word into two or more fields with different degrees of entropy. The most entropic field, typically comprising the least significant bits of each word, is transmitted over the bus in its entirety. The remaining field or fields are compacted into a reduced number of bits. As a result, n-bit words may be transmitted in a single cycle over an m-bit bus, wherein m ⁇ n.
- data compaction is performed by a first bus expander that is associated with the IC component transmitting the data over the bus.
- the data are then de-compacted at the receiving component by a second bus expander.
- the bus expanders maintain identical tables of recent data values of the field or fields that are to be compacted.
- the first bus expander checks the value of each of these fields against the entries in its table. When the value matches a table entry (as is expected to occur most of the time), the first bus expander transmits an index corresponding to the appropriate entry over the bus to the second bus expander.
- the index consists of no more than a few bits, far fewer bits than the data field that it encodes.
- bus and bus expanders may be bi-directional, so that the second bus expander also compacts data for transmission to the first bus expander.
- bus expanders are used to reduce the width of buses that connect processing components of a microprocessor to a cache on the microprocessor chip, such as a Level 1 (L1) cache in a hierarchical cache system.
- Bus expanders may also be used to reduce the width of the buses connecting the L1 cache to the Level 2 (L2) cache.
- the operation and timing of the bus expanders are integrated with the address lookup and other operations that are normally carried out by the cache controllers, such as loading and storing of data. As a result, the compaction and de-compaction functions of the bus expanders add little or no latency to cache access functions.
- Embodiments of the present invention can thus be readily applied in IC devices to reduce the number of wires required to connect circuit components. Reduction in the number of wires simplifies the design and manufacture of the IC and lowers the risk of crosstalk between wires. It allows relatively “fat” wires, with low RC delay, to be used in buses, notwithstanding reduction in the sizes of the components that the buses interconnect due to advances in manufacturing processes. Other advantages of the present invention will be apparent to those skilled in the art.
- an integrated circuit device including:
- a cache which is arranged to store data for use by the processing component responsively to an addressing scheme based on memory addresses having an address length of m 1 bits;
- first and second buses coupled between the processing component and the cache, the buses having bus widths of n 1 and n 2 bits, respectively, such that n 1 ⁇ m 1 ,
- the processing component and the cache each including a respective address bus expander coupled to the first bus in order to compact at least some of the memory addresses for transmission over the first bus so that each of the at least some memory addresses is transmitted over the first bus in one cycle of the first bus.
- the data include data words having a word length of m 2 bits stored at each address, such that n 2 ⁇ m 2
- each of the processing component and the cache further includes a respective second bus expander coupled to the second bus in order to compact at least some of the data words for transmission over the second bus so that each of the at least some of the data words is transmitted over the second bus in one cycle of the second bus.
- the data words include data values for processing by the device, and the processing component is arranged to load the compacted data words via the second bus from the cache for processing and to store the compacted data words via the second bus to the cache.
- the data words include instructions for execution by the device, wherein the compacted words include compacted instructions, and wherein the processing component is arranged to fetch the compacted instructions via the second bus.
- the address bus expander and the second bus expander are arranged to compact the memory addresses and the data words simultaneously, so as to transmit a compacted memory address and a compacted data word for storage at the memory address together in one cycle of the first and second buses.
- the address bus expander and the second bus expander are arranged to compact the memory addresses and the data words by transmitting indices to values in respective tables held by the bus expanders, and the cache is arranged to store at least some of the indices together with the data.
- the address bus expander is arranged to compact each of the at least some of the memory addresses by dividing each of the memory addresses into at least first and second fields, storing values of the second field in a respective table such that the values in respective tables held by the address bus expander in the processing component and the address bus expander in the cache are identical, and if the second field of a memory address matches a value in the table, transmitting an index corresponding to the value over the first bus along with the first field in the one cycle of the bus.
- the first field includes a set of least significant bits (LSB) of the memory address
- MSB most significant bits
- the at least first and second fields include a third field
- the address bus expander is arranged to compact each of the at least some of the memory addresses by transmitting first and second indices corresponding to the values of the first and third fields, respectively, over the first bus along with the first field.
- the address bus expander in the processing component is arranged, when the second field of the memory address does not match any of the values in the table, to transmit both of the first and second fields over multiple cycles of the bus, and to cause the respective table of the bus expander to be updated in both the processing component and the cache.
- the cache includes lines of the data that are indexed according to the first field, each line containing a corresponding value of the second field, and the address bus expander in the cache is arranged, upon receiving the index over the first bus, to retrieve the value of the second field from the table responsively to the index, and the cache is arranged to determine whether a cache hit has occurred by checking the retrieved value against the corresponding value of the second field in the line that is indexed by the first field.
- the address bus expander is arranged to retrieve the value of the second field from the table simultaneously with retrieval of the data from the line in the cache that is indexed by the first field for transmission of the data over the second bus to the processing component.
- the cache that is coupled to the processing component by the first and second buses is a Level 1 (L1) cache
- the device further includes a Level 2 (L2) cache
- third and fourth buses coupling the L2 cache to the L1 cache, the L1 cache and the L2 cache including further bus expanders coupled to at least one of the third and fourth buses.
- a method for coupling a processing component to a cache in an integrated circuit device including:
- the cache configuring the cache to store data for use by the processing component responsively to an addressing scheme based on memory addresses having an address length of m 1 bits;
- FIG. 1 is a block diagram that schematically illustrates components of an integrated circuit (IC) that are connected by reduced-width bus, in accordance with an embodiment of the present invention
- FIG. 2 is a block diagram that schematically illustrates a reduced-width bus, in accordance with another embodiment of the present invention.
- FIG. 3 is a block diagram that schematically illustrates components of a microprocessor that are connected by reduced-width buses, in accordance with an embodiment of the present invention
- FIG. 4 is a flow chart that schematically illustrates a method for accessing data in a cache, in accordance with an embodiment of the present invention.
- FIG. 5 is a block diagram that schematically shows data structures used in the method of FIG. 4 .
- FIG. 1 is a block diagram that schematically illustrates elements of an integrated circuit (IC) 20 , in accordance with an embodiment of the present invention.
- IC 20 is shown, in this simplified view, to comprise two components 22 and 24 , labeled “NODE A” and “NODE B” for convenience. These components are connected by a bus 26 and may be taken to represent substantially any pair of IC components that are generally connected by a bus, such as a processing component, I/O component, cache or other memory.
- the bus may be used to convey substantially any sort of data, including addresses or instruction codes, numerical values (both integer and floating point) and data values of other types.
- data should be understood to include all types of data that may be conveyed over a bus in an IC or other computing device, unless specified otherwise.
- Components 22 and 24 are coupled to bus 26 via respective bus expanders (BE) 28 and 30 .
- BE 28 compacts words of data from component 22 for transmission over the bus
- BE 30 receives and de-compacts the words for use by component 24 .
- bus 26 may be bi-directional, with compacted data transmitted from bus expander 30 to bus expander 28 , as well.
- the principles of the present invention are applicable to buses serving three or more components simultaneously.
- BE 28 divides each data word that it is to transmit into two fields: a high-entropy field comprising the least significant bits (LSB) of the data word, and a low-entropy field comprising the most significant bits (MSB).
- the data may comprise 32-bit words, which are divided into a 14-bit LSB field and an 18-bit MSB field.
- BE 28 looks up the MSB field of each word in a table 32 that it maintains. Each entry in the table has a corresponding index. For example, if the table contains four entries, a two-bit index is sufficient to represent it.
- BE 28 selects the corresponding index for transmission and sets a hit/miss (H/M) bit to indicate that the current word has been successfully compacted.
- the MSB field will generally match an entry in table 32 for a large majority of the data words as long as the choice of the number of bits to include in the MSB field is made judiciously.
- BE 28 transmits the LSB field over bus 26 without compaction, on a set of LSB lines 34 , and meanwhile transmits the hit/miss bit on a H/M line 36 , and transmits the table index on a set of index lines 38 .
- each 32-bit word is transmitted over bus 26 using only 16 bits (14 LSB data plus two index lines), with the addition of a single hit/miss line.
- table 32 of BE 30 The contents of table 32 of BE 30 are identical to those of table 32 of BE 28 .
- BE 30 upon receiving a compacted data word, and noting that the hit/miss bit on line 36 is set, BE 30 looks up the index received on index lines 38 in its own table 32 .
- BE 30 reads out the MSB entry from the table and concatenates it with the LSB data bits on lines 34 to de-compact the data word.
- BE 28 finds that the MSB field of a given data word does not match any of the entries in table 32 , it clears the hit/miss bit, and transmits the entire data word over lines 34 and 38 of bus 26 in two successive cycles.
- BE 30 notes the value of the hit/miss bit, and therefore does not look up the bits on lines 38 in table 32 , but rather concatenates the data values transmitted during the two successive cycles in order to recover the complete 32-bit word.
- Both BE 28 and BE 30 replace the same entry in their respective tables 32 with the MSB of the current data word, so that the two tables remain mutually synchronized. For example, BE 28 and BE 30 may both replace the least recently used entry in their respective tables.
- FIG. 2 is a block diagram that schematically illustrates a bus 40 connecting components 42 and 44 (NODES C and D) in an IC, in accordance with another embodiment of the present invention.
- Components 42 and 44 comprise bus expanders, which are not shown explicitly in this figure for simplicity of illustration.
- each data word for transmission from component 42 to component 44 is divided into four fields.
- 64-bit data words may be divided into a first field comprising the 16 LSB of each word, a second field comprising the next 8 bits, a third field comprising the next 12 bits, and a fourth field comprising the 28 MSB.
- Other bit allocations, into two, three, four or more fields, will be apparent to those skilled in the art and are considered to be within the scope of the present invention.
- each of the other fields is compacted using a respective table 46 , 48 , 50 .
- table 46 comprises 16 entries, and is used in compacting the second, 8-bit field to a 4-bit index.
- Table 48 comprises eight entries, and is used to compact the third field to a 3-bit index.
- Table 50 comprises only two entries, and thus compacts the fourth (MSB) field to a single-bit index.
- the indices that are read from tables 46 , 48 and 50 are transmitted over bus 40 on respective sets of index lines 54 , 58 and 62 .
- a respective hit/miss bit for each table is transmitted over H/M lines 56 , 60 and 64 .
- the 64-bit data words are thus compacted into 24 bits for transmission over bus 40 , with the addition of three hit/miss bits.
- FIG. 3 is a block diagram that schematically illustrates elements of a microprocessor 70 , in accordance with an embodiment of the present invention.
- the microprocessor communicates with an off-chip memory 72 over a system bus 74 .
- the microprocessor comprises a computation core, such as an arithmetic logic unit (ALU) 76 , with a register file 78 for holding current data values.
- ALU arithmetic logic unit
- IFU instruction fetch unit
- a load/store unit (LSU) 82 loads data required by the ALU from memory 72 into register file 78 , and stores data from the register file in the memory.
- ALU 76 , IFU 80 and LSU 82 are examples of processing components that are commonly used in microprocessors known in the art.
- microprocessor 70 comprises a hierarchical cache memory arrangement.
- IFU 80 is served by a Level 1 (L1) instruction cache 84
- LSU 82 is served by a L1 data cache 86 .
- the L1 caches hold copies of the instruction code and data values that are most frequently requested by the microprocessor. They typically have small capacity and are located in close proximity to the IFU and LSU in order to facilitate memory access with the lowest possible latency.
- the L2 cache is generally larger than the L1 caches, and holds copies of all the data (code and data values) in the L1 caches plus additional frequently-requested data.
- L1 and L2 caches for instructions and data values may be unified or configured as separate units. Although one particular configuration is shown in FIG. 3 , the principles of this embodiment may be implemented in other cache configurations, as well.
- IFU 80 receives addresses and instructions from L1 instruction cache 84 over an address bus 90 and an instruction bus 92 , respectively.
- LSU 82 receives addresses and data values from L1 data cache 86 over an address bus 94 and a data bus 96 .
- the data (addresses, instructions and data values, as applicable) that are conveyed over these buses are compacted and de-compacted by bus expanders (BE) 98 and 100 .
- BE bus expanders
- Bus expanders 98 connecting L1 data cache 86 to address bus 94 and data bus 96 are respectively labeled 98 A and 98 D, for clarity in a description given below of a process involving these bus expanders.
- Comparable buses connect L2 cache 88 with L1 caches 84 and 86 , and the data on these buses may likewise be compacted and de-compacted by bus expanders 102 and 104 .
- the bus expanders in microprocessor 70 use look-up tables to encode and decode low-entropy bits on the respective buses, based on appropriate division of data words into high- and low-entropy fields, as described above.
- bus expanders used in microprocessor 70 are integrated with the components of the microprocessor with which they are associated, in such a way that table look-ups by the bus expanders are avoided when possible or are carried out in parallel with other cache access functions, and thus add little or no latency.
- bus expanders 98 and 104 that serve address bus 94 and data bus 96 may be configured to use the same respective tables for compaction of the appropriate address and data fields.
- the table entries of the bus expanders may be synchronized as data are passed from LSU 82 through the L1 data cache to L2 cache 88 for storage, and/or as data are loaded from the L2 cache through the L1 data cache to the LSU.
- Each cache line 106 in cache 86 includes, in addition to actual cached data 108 , a hit/miss (H) bit 110 and an index (I) 112 . In the example shown in FIG.
- bus expander 104 has received data 108 from L2 cache 88 and has written the data to cache line 106 .
- bus expander 98 accesses this cache line in order to load the data to LSU 82 , it checks to verify that bit 110 is set. If so, the bus expander can simply read index 112 from the cache line and can transfer the index, along with the non-compacted part of the data, over bus 96 to the LSU.
- the table look-up step was effectively performed in advance by bus expander 104 and need not be repeated by bus expander 98 .
- bus expander 98 and 104 When one of bus expanders 98 and 104 overwrites an entry in its compaction table, it clears bit 110 in cache lines whose index 112 refers to this entry. Subsequently, when bus expander 98 accesses any of these cache lines and detects that bit 110 is cleared, the bus expander will regard index 112 of the cache line as invalid. In this case, the bus expander will perform the necessary steps in order to transmit the data (in compacted or non-compacted form) over bus 96 , in the manner described above with reference to FIGS. 1 and 2 .
- bus expander 98 transmits index 112 over bus 96 in any case, while in parallel verifying that the low-latency field in data 106 does, in fact, match the entry indicated by index 112 in the compaction table. If the entry turns out to be valid (as is expected in the large majority of cases), no further action is required, and the data transfer has taken place with no added delay for table look-up. If the data values fail to match, bus expander clears the hit/miss bit on bus 96 in the next bus cycle, and sends the correct data word at the same time.
- index 112 and hit/miss bit 110 in cache line 106 is described hereinabove with particular reference to data transfers made by bus expander 98 in L1 data cache 86 , cached index values may similarly be used by the other bus expanders that are shown in caches 84 , 86 and 88 in FIG. 3 .
- FIGS. 4 and 5 schematically illustrate a method for loading data from L1 data cache 86 to LSU 82 , in accordance with an embodiment of the present invention.
- FIG. 4 is a flow chart showing the steps in the method
- FIG. 5 shows data structures that are used for this purpose. This method may be carried out independently of the index caching technique described above in order to reduce the time required for data compaction in accessing the cache. The reduction in access time is achieved by carrying out data access and compaction steps in parallel, as is shown graphically by the figure.
- the description that follows relates to bus expanders 98 A and 98 D and to the cache logic in cache 86 as separate functional elements.
- the load operation begins when LSU 82 asks cache 86 to load data from a given memory address, at a load initiation step 120 .
- BE 100 in LSU 82 generates a compacted address 150 ( FIG. 5 ), comprising LSB 154 of the original address together with a table index 152 referring to the MSB of the address.
- BE 100 passes address 150 over address bus 94 to BE 98 A in L1 data cache 86 .
- BE 98 A is also referred to as the address BE (ADDR BE).
- Cache 86 comprises a local memory that holds a table 160 of cache lines, each corresponding to a particular address in memory 72 .
- the lines are indexed by LSB 154 of the corresponding memory addresses.
- Each line contains MSB 166 of the corresponding address, which serves as an access tag, along with data, comprising MSB 168 and LSB 170 , which are stored at the corresponding address.
- each cache line may also comprise hit/miss bit 110 and index 112 , as shown in FIG.
- BE 98 A After receiving compacted address 150 at step 120 , BE 98 A passes LSB 154 of the address to the cache logic, which uses the LSB to access the appropriate cache line in table 160 , at a LSB access step 122 .
- cache 86 is direct-mapped, and therefore LSB 154 points to a single cache line 162 . In a multi-way cache, there will be multiple cache lines with the same LSB 154 .
- BE 98 A checks the hit/miss bit on address bus 94 , at an address BE hit checking step 124 . If this bit is set, BE 98 A uses index 152 to retrieve the MSB of the address from a compaction table 164 (like table 32 shown in FIG. 1 ), at a table look-up step 126 . Steps 124 and 126 may take place substantially simultaneously with step 122 . If the hit/miss bit is clear, however, BE 98 A must wait at least one more bus cycle to receive the complete MSB of the address, at an address reception step 128 .
- the cache logic checks the MSB retrieved from table 164 against MSB 166 of cache line 162 , at a tag checking step 130 . If the MSB values match, a cache hit has occurred, meaning that the data in line 162 are valid, at a cache hit step 132 . If the MSB values differ, however, the data cached in line 162 must be updated, at a cache update step 134 . In this case, the cache controller (not shown) retrieves the required data from L2 cache 88 (which reads the data from memory 72 if necessary).
- BE 98 D the data BE—reads the data in cache line 162 , at a data reading step 136 .
- BE 98 D compares MSB 168 of the data to the values in its own compaction table 174 , at a data BE hit checking step 138 .
- BE 98 A signals BE 98 D that a cache hit has occurred at step 132
- BE 98 D immediately transmits a compacted data word 172 over bus 96 to LSU 82 , at a compacted data transmission step 140 .
- Word 172 comprises LSB 170 of the data, along with an index 176 referring to the matching entry in table 174 .
- BE 98 D sends the complete data word—MSB 168 and LSB 170 —over bus 96 , typically over two or more bus cycles. If the cache logic signals a cache miss at step 132 , BE 98 D waits to complete steps 138 – 142 until the cache update at step 134 is completed.
- LSU 82 When LSU 82 performs a store operation, transferring data from register file 78 to L1 data cache 86 , address and data bus expanders 98 A and 98 D are accessed in parallel.
- the data bus expander retrieves the MSB of the data while the address bus expander checks the MSB of the address against the line in cache table 160 that is indicated by the LSB of the address.
- the compaction table indices 112 (as shown in line 106 in FIG. 3 ) may be stored with the cache lines for subsequent reference, as noted earlier.
Abstract
Description
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/721,316 US7243204B2 (en) | 2003-11-25 | 2003-11-25 | Reducing bus width by data compaction |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/721,316 US7243204B2 (en) | 2003-11-25 | 2003-11-25 | Reducing bus width by data compaction |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050114600A1 US20050114600A1 (en) | 2005-05-26 |
US7243204B2 true US7243204B2 (en) | 2007-07-10 |
Family
ID=34591777
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/721,316 Active 2025-04-05 US7243204B2 (en) | 2003-11-25 | 2003-11-25 | Reducing bus width by data compaction |
Country Status (1)
Country | Link |
---|---|
US (1) | US7243204B2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7631207B1 (en) * | 2006-04-21 | 2009-12-08 | Sun Microsystems, Inc. | Reducing power consumption for processing of common values in microprocessor registers and execution units |
US8595407B2 (en) | 2011-06-14 | 2013-11-26 | Lsi Corporation | Representation of data relative to varying thresholds |
US20150169452A1 (en) * | 2013-12-16 | 2015-06-18 | Arm Limited | Invalidation of index items for a temporary data store |
US20220294711A1 (en) * | 2021-03-09 | 2022-09-15 | Arista Networks, Inc. | Network telemetry |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040186960A1 (en) * | 2003-03-20 | 2004-09-23 | Sun Microsystems, Inc. | Computer processor data prefetch unit |
US7162583B2 (en) * | 2003-12-29 | 2007-01-09 | Intel Corporation | Mechanism to store reordered data with compression |
US20060230198A1 (en) * | 2005-03-30 | 2006-10-12 | Kabushiki Kaisha Toshiba | Data processing circuit, data processing method and image forming apparatus |
US7496771B2 (en) * | 2005-11-15 | 2009-02-24 | Mips Technologies, Inc. | Processor accessing a scratch pad on-demand to reduce power consumption |
US20090248986A1 (en) * | 2008-03-26 | 2009-10-01 | Daniel Citron | Apparatus for and Method of Implementing Multiple Content Based Data Caches |
JP2014211673A (en) * | 2013-04-17 | 2014-11-13 | カシオ計算機株式会社 | Microcomputer and storage device |
US10817178B2 (en) | 2013-10-31 | 2020-10-27 | Hewlett Packard Enterprise Development Lp | Compressing and compacting memory on a memory device wherein compressed memory pages are organized by size |
US11436144B2 (en) | 2020-04-10 | 2022-09-06 | Micron Technology, Inc. | Cache memory addressing |
-
2003
- 2003-11-25 US US10/721,316 patent/US7243204B2/en active Active
Non-Patent Citations (2)
Title |
---|
Citron, Daniel et al., "Creating a Wider Bus Using Caching Techniques", Proceedings of the First IEEE Symposium on High-Performance Computer Architecture, Jan. 1995, pp. 90-99. |
Yang, Jun et al., "Frequent Value Compression in Data Caches", Proceedings of the 33rd International Symposium on Microarchitecture, Dec. 2000, pp. 258-275. |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7631207B1 (en) * | 2006-04-21 | 2009-12-08 | Sun Microsystems, Inc. | Reducing power consumption for processing of common values in microprocessor registers and execution units |
US8595407B2 (en) | 2011-06-14 | 2013-11-26 | Lsi Corporation | Representation of data relative to varying thresholds |
US20150169452A1 (en) * | 2013-12-16 | 2015-06-18 | Arm Limited | Invalidation of index items for a temporary data store |
US9471493B2 (en) * | 2013-12-16 | 2016-10-18 | Arm Limited | Invalidation of index items for a temporary data store |
US20220294711A1 (en) * | 2021-03-09 | 2022-09-15 | Arista Networks, Inc. | Network telemetry |
US11792092B2 (en) * | 2021-03-09 | 2023-10-17 | Arista Networks, Inc. | Network telemetry |
Also Published As
Publication number | Publication date |
---|---|
US20050114600A1 (en) | 2005-05-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP4008826B2 (en) | Device for cache compression engine to increase effective cache size by on-chip cache data compression | |
JP3799050B2 (en) | Cache memory device and method for storing hierarchical storage items and cache tags in a single cache array structure | |
US7899993B2 (en) | Microprocessor having a power-saving instruction cache way predictor and instruction replacement scheme | |
US5091851A (en) | Fast multiple-word accesses from a multi-way set-associative cache memory | |
JP4006436B2 (en) | Multi-level cache with overlapping sets of associative sets at different cache levels | |
JP3197866B2 (en) | Method and computer system for improving cache operation | |
US7243191B2 (en) | Compressing data in a cache memory | |
CN109308192A (en) | System and method for executing memory compression | |
US7243204B2 (en) | Reducing bus width by data compaction | |
JP4920378B2 (en) | Information processing apparatus and data search method | |
US20060090034A1 (en) | System and method for providing a way memoization in a processing environment | |
KR101509628B1 (en) | Second chance replacement mechanism for a highly associative cache memory of a processor | |
CN100538664C (en) | System, the method and apparatus of the data that reorder of file compression | |
JP2003533822A (en) | Cache system including direct mapped cache and full associative buffer and control method thereof | |
EP1849082B1 (en) | Data processing system and method of cache replacement | |
KR100395768B1 (en) | Multi-level cache system | |
JP2001523857A (en) | Method and system for achieving zero cycle penalty for accesses crossing cache lines | |
US7159078B2 (en) | Computer system embedding sequential buffers therein for performing a digital signal processing data access operation and a method thereof | |
US7865666B2 (en) | Cache memory systems and methods thereof | |
US20090249048A1 (en) | Branch target buffer addressing in a data processor | |
JP2003510685A (en) | Cache replacement method and apparatus | |
US10749545B1 (en) | Compressing tags in software and hardware semi-sorted caches | |
US11500638B1 (en) | Hardware compression and decompression engine | |
JPS63201850A (en) | On chip cash memory | |
Kesavan et al. | Comparative Study on Data Compression Techniques in Cache to Promote Performance |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CITRON, DANIEL;REEL/FRAME:014672/0212Effective date: 20031125 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |