US20230343332A1 - Joint Segmenting and Automatic Speech Recognition - Google Patents
Joint Segmenting and Automatic Speech Recognition Download PDFInfo
- Publication number
- US20230343332A1 US20230343332A1 US18/304,064 US202318304064A US2023343332A1 US 20230343332 A1 US20230343332 A1 US 20230343332A1 US 202318304064 A US202318304064 A US 202318304064A US 2023343332 A1 US2023343332 A1 US 2023343332A1
- Authority
- US
- United States
- Prior art keywords
- joint
- speech segment
- segmenting
- network
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012549 training Methods 0.000 claims abstract description 72
- 238000013518 transcription Methods 0.000 claims abstract description 55
- 230000035897 transcription Effects 0.000 claims abstract description 51
- 238000000034 method Methods 0.000 claims description 34
- 238000012545 processing Methods 0.000 claims description 14
- 230000008569 process Effects 0.000 claims description 9
- 239000000945 filler Substances 0.000 claims description 7
- 230000001364 causal effect Effects 0.000 claims description 5
- 238000012935 Averaging Methods 0.000 claims description 4
- 230000015654 memory Effects 0.000 description 34
- 239000013598 vector Substances 0.000 description 27
- 230000007246 mechanism Effects 0.000 description 10
- 238000004590 computer program Methods 0.000 description 8
- 239000011159 matrix material Substances 0.000 description 7
- 238000004891 communication Methods 0.000 description 6
- 230000003287 optical effect Effects 0.000 description 6
- 230000004044 response Effects 0.000 description 6
- 230000006870 function Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 4
- 230000036961 partial effect Effects 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 238000003058 natural language processing Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 238000010606 normalization Methods 0.000 description 2
- 230000011218 segmentation Effects 0.000 description 2
- 206010000060 Abdominal distension Diseases 0.000 description 1
- 101100437784 Drosophila melanogaster bocks gene Proteins 0.000 description 1
- 230000009118 appropriate response Effects 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 208000024330 bloating Diseases 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000001143 conditioned effect Effects 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 238000012217 deletion Methods 0.000 description 1
- 230000037430 deletion Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000000670 limiting effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000001537 neural effect Effects 0.000 description 1
- 238000013138 pruning Methods 0.000 description 1
- 230000002829 reductive effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
- G06N3/0455—Auto-encoder networks; Encoder-decoder networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/09—Supervised learning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/02—Feature extraction for speech recognition; Selection of recognition unit
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/04—Segmentation; Word boundary detection
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/93—Discriminating between voiced and unvoiced parts of speech signals
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/02—Feature extraction for speech recognition; Selection of recognition unit
- G10L2015/025—Phonemes, fenemes or fenones being the recognition units
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/93—Discriminating between voiced and unvoiced parts of speech signals
- G10L2025/932—Decision in previous or following frames
Definitions
- This disclosure relates to speech segmenting and automatic speech recognition.
- Modern automatic speech recognition (ASR) systems focus on providing not only high quality (e.g., a low word error rate), but also low latency (e.g., a short delay between the user speaking and a transcription appearing). For example, when using a device that implements an ASR system today, there is often an expectation that the ASR system decodes utterances in a streaming fashion that corresponds to real-time or even faster than real-time.
- high quality e.g., a low word error rate
- low latency e.g., a short delay between the user speaking and a transcription appearing
- ASR joint segmenting and automatic speech recognition
- the encoder configured to receive, as input, a sequence of acoustic frames characterizing one or more utterances, and generate, at each of a plurality of output steps, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames.
- the decoder configured to receive, as input, the higher order feature representation generated by the encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps: a probability distribution over possible speech recognition hypotheses; and an indication of whether the corresponding output step corresponds to an end of speech segment.
- each training sample in the set of training samples includes: audio data characterizing a spoken utterance; and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
- the decoder includes a prediction network, a first joint network, and a second joint network.
- the prediction network configured to, at each of the plurality of output steps receive, as input, a sequence of non-blank symbols output by a final softmax layer, and generate a hidden representation.
- the first joint network configured to: receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generate, at each of the plurality of output steps, the indication of whether the corresponding output step corresponds to an end of speech segment.
- the second joint network configured to: receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generate, at each of the plurality of output steps, the probability distribution over possible speech recognition hypotheses.
- the sequence of previous non-blank symbols received as input at the prediction network includes a sequence of N previous non-blank symbols output by the final softmax layer.
- the prediction network is configured to generate the hidden representation by, for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding, and generating an average embedding by averaging the respective embeddings, the average embedding including the hidden representation.
- the prediction network includes a V2 embedding look-up table.
- a training process trains the joint segmenting and ASR model on the set of training samples by training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and, after training the second joint network, during a second stage initializing, the first joint network with the same parameters as the trained second joint network, and using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
- the encoder includes a causal encoder including a stack of conformer layers or transformer layers.
- the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation.
- the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples includes inserting the ground truth end of speech segment token at the end of the corresponding transcription, and inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word.
- the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold.
- the decoder is configured to emit the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration.
- the joint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
- Another aspect of the disclosure provides a computer-implemented method executed on data processing hardware that causes the data processing hardware to perform operations including receiving a sequence of acoustic frames characterizing one or more utterances and, at each of a plurality of output steps: generating, by an encoder of a joint segmenting and automated speech recognition (ASR) model, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; and generating, by a decoder of the joint segmenting and ASR model a probability distribution over possible speech recognition hypotheses, and an indication of whether the corresponding output step corresponds to an end of speech segment.
- ASR joint segmenting and automated speech recognition
- each training sample in the set of training samples including audio data characterizing a spoken utterance, and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
- Implementations of the disclosure may include one or more of the following optional features.
- the operations also include, at each of the plurality of output steps, generating, using a prediction network of the decoder, a hidden representation based on a sequence of non-blank symbols output by a final softmax layer; generating the indication of whether the corresponding output step corresponds to the end of speech segment includes generating, using a first joint network of the decoder, the indication of whether the corresponding output step corresponds to the end of speech segment based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generating the probability distribution over possible speech recognition hypotheses includes generating, using a second joint network of the decoder, the probability distribution over possible speech recognition hypothesis based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps.
- the sequence of previous non-blank symbols received as input at the prediction network includes a sequence of N previous non-blank symbols output by the final softmax layer; and generating the hidden representation using the prediction network includes generating the hidden representation by, for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding, and generating an average embedding by averaging the respective embeddings, the average embedding includes the hidden representation.
- the prediction network includes a V2 embedding look-up table.
- a training process trains the joint segmenting and ASR model on the set of training samples by: training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and, after training the second joint network, during a second stage: initializing, the first joint network with the same parameters as the trained second joint network; and using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
- the encoder includes a causal encoder including a stack of conformer layers or transformer layers.
- the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation.
- the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples includes: inserting the ground truth end of speech segment token at the end of the corresponding transcription; and inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word, or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word.
- the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold.
- the operations after training the joint segmenting and ASR model, the operations also include emitting, by the decoder, the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration.
- the joint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
- FIG. 1 is a schematic view of an example speech environment using an automatic speech recognition (ASR) system that includes an end of speech segment joint network for transcribing spoken utterances.
- ASR automatic speech recognition
- FIG. 2 is schematic views of example ASR system integrating an end of speech segment joint network.
- FIG. 3 is a schematic view of an example tied and reduced prediction network of the ASR system of FIG. 2 .
- FIG. 4 is a flowchart of an example arrangement of operations for a computer-implemented method of executing an ASR system including an end of speech segment model.
- FIG. 5 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
- E2E ASR models Improving the performance of end-to-end (E2E) ASR models on long utterances ranging from minutes to hours in length is an ongoing challenge in speech recognition.
- Streaming E2E ASR models have achieved low word error rates (WERs) for short to medium length utterances of up to a few minutes long.
- WERs word error rates
- conventional E2E ASR models may have high WERs and suffer from deletion errors on long-form utterances of tens of minutes to hours long. Such utterances are found, for example, in tasks like transcribing meetings and lectures, and video captioning.
- VAD voice activity detector
- Implementations herein are directed toward integrating an ASR system (e.g., including a recurrent neural network-transducer (RNN-T) model) with an end of speech segment model (e.g., an additional join network) that is configured and trained to predict, based on acoustic and semantic features, whether a corresponding output step of the ASR system corresponds to an end of speech segment event.
- ASR systems are jointly optimized on both end of speech segment detection and ASR tasks.
- existing long utterance training data for ASR systems typically does not include ground truth labels corresponding to end of speech segments, making supervised training of the end of speech segment joint network difficult.
- Implementations herein are directed toward executing an end of speech segment annotation routine for automatically inserting end of speech segment ground truth labels into ground truth training transcripts based on modeling hesitations and word timings.
- An example end of speech segment scheme applies a heuristic-based, weak supervision approach where end of speech segment ground truth labels are automatically inserted into the ground truth training transcripts by applying one or more rules
- FIG. 1 is a schematic diagram of an example system 100 and speech environment 102 .
- a user may be through voice input.
- the user device 10 (also referred to generally as a device 10 ) is configured to capture sounds (e.g., streaming audio data) from one or more users 104 within the speech environment 102 .
- the streaming audio data may refer to a spoken utterance 106 by the user 104 that functions as an audible query, a command for the device 10 , or an audible communication captured by the device 10 .
- Speech-enabled systems of the device 10 may field the query or the command by answering the query and/or causing the command to be performed/fulfilled by one or more downstream applications.
- the speech-enabled systems of the device 10 may also generate a transcription of an audible communication captured by the device 10 .
- the user device 10 may correspond to any computing device associated with a user 104 and capable of receiving audio data.
- Some examples of user devices 10 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, vehicle infotainment systems, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc.
- the user device 10 includes data processing hardware 12 and memory hardware 14 in communication with the data processing hardware 12 .
- the memory hardware 14 stores instructions that, when executed by the data processing hardware 12 , cause the data processing hardware 12 to perform one or more operations.
- the user device 10 further includes an audio system 16 with an audio capture device (e.g., microphone) 16 , 16 a for capturing and converting spoken utterances 106 within the speech environment 102 into electrical signals, and a speech output device (e.g., a speaker) 16 , 16 b for communicating an audible audio signal (e.g., as output audio data from the device 10 ). While the user device 10 implements a single audio capture device 16 a in the example shown, the user device 10 may implement an array of audio capture devices 16 a without departing from the scope of the present disclosure, whereby one or more capture devices 16 a in the array may not physically reside on the user device 10 , but be in communication with the audio system 16 .
- an audio capture device e.g., microphone
- a speech output device e.g., a speaker
- an automated speech recognition (ASR) system 118 includes an RNN-T model 200 implementing an end of speech segment model 205 and residing on the user device 10 of the user 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud-computing environment) in communication with the user device 10 via a network 40 .
- the user device 10 and/or the remote computing device 60 also includes an audio subsystem 108 configured to receive the utterance 106 spoken by the user 104 and captured by the audio capture device 16 a , and convert the utterance 106 into a corresponding digital format associated with input acoustic frames 110 capable of being processed by the ASR system 118 .
- the user speaks a respective utterance 106 and the audio subsystem 108 converts the utterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to the ASR system 118 .
- the RNN-T model 200 receives, as input, the acoustic frames 110 corresponding to the utterance 106 , generates indications of whether a corresponding output step corresponds to an end of speech segment that may be used to segment the utterance 106 into speech segments, and generates/predicts, as output, a corresponding transcription 120 for each speech segment of the utterance 106 .
- the RNN-T model 200 may perform streaming speech recognition to produce partial transcriptions (e.g., streaming speech recognition results) 120 a , 120 b as the user speaks.
- the user device 10 and/or the remote computing device 60 also executes a user interface generator 107 configured to present representations of the transcriptions 120 , 120a-n of the utterance 106 to the user 104 of the user device 10 , and to present one or more responses 121 , 121a-n to queries and/or commands of the utterance 106 .
- the user interface generator 107 may display the speech recognition results 120 , 120a-n and the responses 121 , 121a-n during or at different times.
- the user interface generator 107 may present the speech recognition results 120 , 120a-n (e.g., transcriptions) and the responses 121 , 121a-n to represent an interaction/conversation between the user 104 and an interactive program or application (e.g., a digital assistant application 50 ).
- speech recognition results 120 , 120a-n e.g., transcriptions
- responses 121 , 121a-n e.g., responses to represent an interaction/conversation between the user 104 and an interactive program or application (e.g., a digital assistant application 50 ).
- the transcription 120 output from the ASR system 118 for each identified speech segment are processed, e.g., by a natural language processing/understanding (NLP/NLU) module executing on the user device 10 or the remote computing device 60 , to execute a user command/query specified by the utterance 106 .
- the digital assistant application 50 may provide an appropriate response 121 subsequent to executing the user command/query specified by the utterance 106 .
- a text-to-speech system (not shown) (e.g., executing on any combination of the user device 10 or the remote computing device 60 ) may convert the transcription 120 and/or the response 121 into synthesized speech for audible output by the user device 10 and/or another device.
- the user 104 interacts with a program or application (e.g., the digital assistant application 50 ) of the user device 10 that uses the ASR system 118 .
- a program or application e.g., the digital assistant application 50
- FIG. 1 depicts the user 104 communicating with the digital assistant application 50 , and the digital assistant application 50 displaying an interactive digital assistant interface 18 on a screen 19 of the user device 10 to depict a natural conversational interaction between the user 104 and the digital assistant application 50 .
- the user 104 speaks a first speech segment 106 a (“Dictate the following message:”) of the utterance 106 , and then speaks a second speech segment 106 b (“Where can I order Italian food?) of the utterance 106 .
- the end of speech segment model 205 As the ASR system 118 receives the acoustic frames 110 corresponding to the utterance 106 as the user 104 speaks, the end of speech segment model 205 generates at each output step, an indication of whether the output step corresponds to an end of a speech segment.
- the end of speech segment indications generated by the end of speech segment model 205 may be used to delineate the speech segments 106 of the utterance 106 such that the RNN-T model 200 may perform speech recognition separately for each speech segment 106 .
- the end of speech segment model 205 detects or determines an end of speech segment between the first and second speech segments 106 , and outputs an end of speech segment indication indicating the end of the first speech segment 106 a .
- the RNN-T model 200 For each speech segment 106 of the utterance 106 indicated or identified by the end of speech segment model 205 , the RNN-T model 200 performs speech recognition on the acoustic frames 110 corresponding to the speech segment 106 to produce speech recognition results 120 corresponding to the speech segment 106 .
- the user interface generator 107 Based on the end of speech segment model 205 detecting the end of speech segment between the first and second speech segments 106 , during time 1, the user interface generator 107 presents, via the digital assistant interface 18 , a representation of first speech recognition results 120 a for the first speech segment 106 a to the user 104 of the user device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on the screen 19 of the user device 10 as soon as they are spoken.
- the user interface generator 107 presents, via the digital assistant interface 18 , a representation of second speech recognition results 120 b for the second speech segment 106 b to the user 104 of the user device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on the screen 19 of the user device 10 as soon as they are spoken.
- the user interface generator 107 presents, via the digital assistant interface 18 , a response 121 b (i.e., “Would you like to send the message?”) generated by the assistant application 50 based on speech recognition results 120 a , 120 b generated for the speech segments 106 a , 106 b .
- a response 121 b i.e., “Would you like to send the message?”
- FIG. 2 is a schematic view of an example RNN-T model 200 integrating the end of speech segment model 205 as a first joint network 210 for detecting boundaries between spoken speech segments.
- the RNN-T model 200 includes an encoder network 220 , a prediction network 300 , a second joint network 240 (i.e., a word piece joint network 240 ), and a final softmax output layer 250 .
- h t e n c h 1 e n c , ... , h t e n c .
- the prediction network 300 includes an LSTM-based prediction network that, like a language model (LM), processes a sequence of non-blank symbols y 0 , ..., y u-1 252 output so far by the softmax layer 250 into a hidden representation
- LM language model
- y 0 represents a special start of sequence symbol
- FIG. 3 shows the prediction network 300 for the RNN-T model 200 that receives, as input, a sequence of non-blank symbols Yu-n , ..., y u-1 that is limited to the N previous non-blank symbols 252 a - n output by the final softmax layer 250 .
- N is equal to two. In other examples, N is equal to five, however, the disclosure is non-limiting and N may equal any integer.
- the sequence of non-blank symbols 252 a - n may indicate a partial speech recognition result 120 a , 120 b ( FIG. 1 ).
- the prediction network 300 includes a multi-headed attention mechanism 302 that shares a shared embedding matrix 304 across each head 302 A- 302 H of the multi-headed attention mechanism.
- the multi-headed attention mechanism 302 includes four heads. However, any number of heads may be employed by the multi-headed attention mechanism 302 .
- the multi-headed attention mechanism 302 improves performance significantly with minimal increase to model size.
- each head 302 A-H includes its own row of position vectors 308 , and rather than incurring an increase in model size by concatenating outputs 318 A-H from all the heads, the outputs 318 A-H are instead averaged by a head average module 322 .
- the head 302 A generates, using the shared embedding matrix 304 , a corresponding embedding 306 , 306a-n (e.g., X ⁇ R N x d e for each non-blank symbol 301 among the sequence of non-blank symbols y ui-n , ..., y ui-1 received as input at the corresponding output step from the plurality of output steps.
- a corresponding embedding 306 , 306a-n e.g., X ⁇ R N x d e for each non-blank symbol 301 among the sequence of non-blank symbols y ui-n , ..., y ui-1 received as input at the corresponding output step from the plurality of output steps.
- the shared embedding matrix 304 is shared across all heads of the multi-headed attention mechanism 302 , the other heads 302 B-H all generate the same corresponding embeddings 306 for each non-blank symbol.
- the head 302 A also assigns a respective position vector PV Aa-An 308, 308Aa-An (e.g., P ⁇ R H x N x d e to each corresponding non-blank symbol in the sequence of non-blank symbols y u-n , ..., y u-1 .
- the respective position vector PV 308 assigned to each non-blank symbol indicates a position in the history of the sequence of non-blank symbols (e.g., the N previous non-blank symbols output by the final softmax layer 250 ).
- each of the embeddings 306 may include a same dimensionality (i.e., dimension size) as each of the position vectors PV 308 .
- each head 302 A-H defines a different set/row of position vectors 308 .
- the first head 302 A defines the row of position vectors PV Aa - An 308 A a -A n
- the second head 302 B defines a different row of position vectors PV Ba-Bn 308 Ba-Bn
- the H th head 302 H defines another different row of position vectors PV Ha-Hn 308 Ha-Hn .
- the first head 302 A For each non-blank symbol in the sequence of non-blank symbols 252 a - n received, the first head 302 A also weights, via a weight layer 310 , the corresponding embedding 306 proportional to a similarity between the corresponding embedding and the respective position vector PV 308 assigned thereto.
- the similarity may include a cosine similarity (e.g., cosine distance).
- the weight layer 310 outputs a sequence of weighted embeddings 312 , 312 A a -A n each associated the corresponding embedding 306 weighted proportional to the respective position vector PV 308 assigned thereto.
- the weighted embeddings 312 output by the weight layer 310 for each embedding 306 may correspond to a dot product between the embedding 306 and the respective position vector PV 308 .
- the weighted embeddings 312 may be interpreted as attending over the embeddings in proportion to how similar they are to the positioned associated with their respective position vectors PV 308 .
- the prediction network 300 includes non-recurrent layers, and therefore, the sequence of weighted embeddings 312 A a -A n are not concatenated, but instead, averaged by a weighted average module 316 to generate, as output from the first head 302 A, a weighted average 318 A of the weighted embeddings 312 A a -A n represented by:
- Equation (1) h represents the index of the heads 302 , n represents position in context, and e represents the embedding dimension. Additionally, in Equation (1), H, N, and d e include the sizes of the corresponding dimensions.
- the position vector PV 308 does not have to be trainable and may include random values. Notably, even though the weighted embeddings 312 are averaged, the position vectors PV 308 can potentially save position history information, alleviating the need to provide recurrent connections at each layer of the prediction network 300 .
- each other head 302 B-H of the multi-headed attention mechanism 302 Due to the different set of positioned vectors PV 308 defined by each head 302 , the weight layer 310 outputs a sequence of weighted embeddings 312 B a -B n , 312 H a -H n at each other head 302 B-H that is different than the sequence of weighted embeddings 312 A a -A a at the first head 302 A.
- the weighted average module 316 generates, as output from each other corresponding head 302 B-H, a respective weighted average 318B-H of the corresponding weighted embeddings 312 of the sequence of non-blank symbols.
- the prediction network 300 includes a head average module 322 that averages the weighted averages 318 A-H output from the corresponding heads 302 A-H.
- a projection layer 326 with SWISH may receive, as input, an output 324 from the head average module 322 that corresponds to the average of the weighted averages 318 A-H, and generate, as output, a projected output 328 .
- a final layer normalization 330 may normalize the projected output 328 to provide the single embedding vector P u 350 (i.e., hidden representation) at the corresponding output step from the plurality of output steps.
- the prediction network 300 generates only a single embedding vector P u 350 at each of the plurality of output steps subsequent to an initial output step.
- the prediction network 300 does not implement the multi-headed attention mechanism 302 and only performs the operations described above with respect to the first head 302 A.
- the weighted average 318 A of the weighted embeddings 312 A a -A n is simply passed through the projection layer 326 and layer normalization 330 to provide the single embedding vector P u 350 .
- the end of speech segment joint network 210 receives the single embedding vector P u 350 from the prediction network 300 , and the higher-order feature representation
- the end of speech segment joint network 210 generates, as output, an end of speech segment indication (e.g., an ⁇ eos> token) 212 based the conditional probability that an end of speech segment occurred.
- the conditional probability can be determined using the following mathematical expression:
- the end of speech segment joint network 210 emits an end of speech segment indication (e.g., an ⁇ eos> token) 212 when, for example, the conditional probability
- a training system 130 trains the encoder network 220 , the prediction network 300 , the word piece joint network 240 , and softmax 250 during a first stage on a speech recognition task (e.g., using paired audio-transcription training data) to perform speech recognition.
- Paired audio-transcription training data includes audio data characterizing one or more spoken utterances and corresponding transcriptions for the spoken utterance(s).
- the training system 130 initializes the end of speech segment joint network 210 with the trained weights of the word piece joint network 240 from the first stage, and fine tunes the end of speech segment joint network 210 using the ground truth end of speech segment indications (e.g., ⁇ eos> tokens) inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample to maximize a probability of emitting the ground truth end of speech segment indicators.
- the ground truth end of speech segment indications e.g., ⁇ eos> tokens
- the training system 130 trains the end of speech segment joint network 210 using a FastEmit regularization term to encourage the end of speech segment j oint network 210 to emit ⁇ eos> tokens 212 as soon as sufficient context is available, which may be sooner identifying a number of consecutive non-speech acoustic frames 110 in the sequence of acoustic frames 110 that satisfy a threshold duration.
- a training data generator 140 automatically inserts ground truth ⁇ eos> tokens into paired audio-transcription training data (e.g., without any human annotation) using a heuristic-based, weak supervision approach where ground truth ⁇ eos> tokens are automatically inserted based on one or more rules.
- Example rules include, but are not limited to, inserting the ground truth end of speech segment ⁇ eos> token at the end of the corresponding transcription and inserting the ground truth end of speech segment ⁇ eos> token into the corresponding transcription at a location aligned with a non-speech segment of the audio data (e.g., silence) having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word (e.g., “heyyy”) or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word (e.g., “um”).
- a non-speech segment of the audio data e.g., silence
- Such exceptions reflect circumstances where the speaker is likely not finished speaking a speech segment.
- Lengthened words may be detected when, for example, a phoneme duration satisfies a standard deviation threshold (e.g., the phoneme duration exceeds five times the phoneme duration standard deviation).
- Filler words may be detected using a filler word detection model.
- the training data generator 140 applies the rules and exceptions by obtaining silence, word, and phoneme timings using a forced alignment model applied to all audio-transcription pairs in a training data set.
- the word piece joint network 240 receives the single embedding vector P u 350 from the prediction network 300 , and the higher-order feature representation
- the word piece joint network 240 generates a probability distribution
- the set of output labels may include twenty-seven ( 27 ) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space.
- the word piece joint network 240 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels.
- This set of values can be a vector and can indicate a probability distribution over the set of output labels.
- the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited.
- the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes.
- the output distribution of the word piece joint network 240 can include a posterior probability value for each of the different output labels.
- the joint network 230 determines the probability distribution for speech recognition results 120 using the single embedding vector 350 that is based on the sequence of non-blank symbols 252 .
- the word piece joint network 240 generates, at each output step (e.g., output step), a probability distribution 242 over possible speech recognition hypotheses.
- candidate orthographic elements e.g., graphemes, wordpieces, and/or words
- a beam search process e.g., by the softmax layer 240 for determining the transcriptions 120 .
- the softmax layer 250 may employ any technique to select the output label/symbol with the highest probability in the distribution
- the RNN-T model 200 does not make a conditional independence assumption. Instead, the RNN-T model 200 predicts each symbol conditioned not only on the acoustics but also on the sequence of labels output so far. The RNN-T model 200 does assume an output symbol is independent of future acoustic frames 110 , which allows the RNN-T model 200 to be employed in a streaming fashion.
- the softmax layer 250 is composed of a unified word piece or grapheme set that is generated using all unique word pieces or graphemes in a plurality of training data sets.
- the feature vectors x 222 input to the encoder network 220 may include 80-dimensional log-Mel filter bank features formed by stacking three 25 millisecond (ms) acoustic frames with a 10 ms shift, and downsampling to a 30 ms frame rate.
- the encoder network 220 includes twelve 512-dimensional conformer layers.
- the conformer layers include causal convolution with a kernel size of 15 , and a stack of left-context attention layers with 8-head self-attention. While the encoder network 220 described has a stack of multi-head attention layers/blocks with self-attention that include conformer layers/blocks (e.g., twelve conformer blocks), the present disclosure is not so limited.
- the encoder network 220 may include a stack of transformer layers/ or a stack of any other type of multi-head attention layers/bocks.
- the encoder network 220 may include a series of multi-headed self-attention, depth-wise convolutional and feed-forward layers.
- the encoder network 220 may include a plurality of long-short term memory (LSTM) layers in lieu of multi-head attention layers/blocks.
- LSTM long-short term memory
- the prediction network 300 may include an LTSM-based network having an embedding dimension of 320 .
- the word piece joint network 240 includes hidden units. Additionally or alternatively, the word piece joint network 240 does not include a fully connected (FC) layer.
- the prediction network 300 may include a stack of transformer or conformer blocks (or other type of multi-head attention blocks).
- the prediction network 300 may also be an embedding look-up table (e.g., a V2 embedding look-up table) to improve latency by outputting looked-up sparse embeddings in lieu of generating hidden representations.
- the prediction network 300 is a stateless prediction network.
- the end of speech segment j oint network 210 , the word piece j oint network 240 , and the prediction network 300 may collectively form an RNN-T decoder 260 of the RNN-T model 200 .
- parameter tying between the prediction network 300 and the word piece joint network 240 is applied.
- the shared embedding matrix 304 at the prediction network is E ⁇ R
- a last hidden layer includes a dimension size d h at the joint network 240
- feed-forward projection weights from the hidden layer to the output logits will be W ⁇ R d h x
- the feed-forward layer corresponding to the last layer of the word piece joint network 240 includes a weight matrix [d h ,
- the feed-forward projection weights of the word piece joint network 240 and the shared embedding matrix 304 of the prediction network 300 can share their weights for all non-blank symbols via a simple transpose transformation. Since the two matrices share all their values, the RNN-T decoder 260 only needs to store the values once in memory, instead of storing two individual matrices.
- the RNN-T decoder 260 reduces a number of parameters equal to the product of the embedding dimension d, and the vocabulary size
- the RNN-T model 200 performs a frame-synchronous beam search with a beam size of 8 and a pruning threshold of five (i.e., partial hypotheses with negative log posterior exceeding that of the top hypothesis by 5 are removed). At each frame, the RNN-T model 200 performs a breadth-first search for possible expansions, ignoring any expansion with a negative log posterior of five or greater, and limits the search depth to ten expansions. In some examples, the RNN-T model 200 forces the end of a speech segment that exceeds a duration of sixty-five seconds.
- FIG. 4 is a flowchart of an exemplary arrangement of operations for a computer-implemented method 400 for performing joint segmenting and automated speech recognition.
- the method 400 performs operations 404 , 406 , and 408 .
- the method 400 includes generating, for each of a plurality of output steps, by an encoder network 220 of a joint segmenting and automatic speech recognition (ASR) model (e.g., the RNN-T 200 ), a higher order feature representation
- ASR joint segmenting and automatic speech recognition
- the method 400 includes generating, by a decoder 260 of the joint segmenting and ASR model, a probability distribution
- the method 400 includes generating, by the decoder 260 of the joint segmenting and ASR model, an indication of whether the corresponding output step corresponds to an end of speech segment.
- the joint segmenting and ASR model 200 is trained on a set of training samples each including: audio data characterizing a spoken utterance, and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
- FIG. 5 is schematic view of an example computing device 500 that can be used to implement the systems and methods described in this document.
- the computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computer devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- the computing device 500 includes a processor 510 (i.e., data processing hardware) that can be used to implement the data processing hardware 12 and/or 62 , memory 520 (i.e., memory hardware) that can be used to implement the memory hardware 14 and/or 64 , a storage device 530 (i.e., memory hardware) that can be used to implement the memory hardware 14 and/or 64 , a high-speed interface/controller 540 connecting to the memory 520 and high-speed expansion ports 550 , and a low speed interface/controller 570 connecting to a low speed bus 560 and a storage device 530 .
- processor 510 i.e., data processing hardware
- memory 520 i.e., memory hardware
- storage device 530 i.e., memory hardware
- Each of the components 510 , 520 , 530 , 540 , 550 , and 560 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 510 can process instructions for execution within the computing device 500 , including instructions stored in the memory 520 or on the storage device 530 to display graphical information for a graphical user interface (GUI) on an external input/output device, such as display 580 coupled to high speed interface 540 .
- GUI graphical user interface
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 520 stores information non-transitorily within the computing device 500 .
- the memory 520 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s).
- the non-transitory memory 520 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 500 .
- non-volatile memory examples include, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs).
- volatile memory examples include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- the storage device 530 is capable of providing mass storage for the computing device 500 .
- the storage device 530 is a computer-readable medium.
- the storage device 530 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 520 , the storage device 530 , or memory on processor 510 .
- the high speed controller 540 manages bandwidth-intensive operations for the computing device 500 , while the low speed controller 570 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 540 is coupled to the memory 520 , the display 580 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 550 , which may accept various expansion cards (not shown).
- the low-speed controller 570 is coupled to the storage device 530 and a low-speed expansion port 590 .
- the low-speed expansion port 590 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 500 a or multiple times in a group of such servers 500 a , as a laptop computer 500 b , or as part of a rack server system 500 c .
- implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a software application may refer to computer software that causes a computing device to perform a task.
- a software application may be referred to as an “application,” an “app,” or a “program.”
- Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- the processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array), a graphics processing unit (GPU), a tensor processing unit (TPU), or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- the phrase “at least one of A, B, or C” is intended to refer to any combination or subset of A, B, C such as: (1) at least one A alone; (2) at least one B alone; (3) at least one C alone; (4) at least one A with at least one B; (5) at least one A with at least one C; (6) at least one B with at least C; and (7) at least one A with at least one B and at least one C.
- the phrase “at least one of A, B, and C” is intended to refer to any combination or subset of A, B, C such as: (1) at least one A alone; (2) at least one B alone; (3) at least one C alone; (4) at least one A with at least one B; (5) at least one A with at least one C; (6) at least one B with at least one C; and (7) at least one A with at least one B and at least one C.
- a or B is intended to refer to any combination of A and B, such as: (1) A alone; (2) B alone; and (3) A and B.
- one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input
Abstract
A joint segmenting and ASR model includes an encoder and decoder. The encoder configured to: receive a sequence of acoustic frames characterizing one or more utterances; and generate, at each output step, a higher order feature representation for a corresponding acoustic frame. The decoder configured to: receive the higher order feature representation and generate, at each output step: a probability distribution over possible speech recognition hypotheses, and an indication of whether the corresponding output step corresponds to an end of speech segment. The j oint segmenting and ASR model trained on a set of training samples, each training sample including: audio data characterizing a spoken utterance; and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
Description
- This U.S. Pat. Application claims priority under 35 U.S.C. §119(e) to U.S. Provisional Application 63/363,383, filed on Apr. 21, 2022. The disclosure of this prior application is considered part of the disclosure of this application and is hereby incorporated herein by reference in its entirety.
- This disclosure relates to speech segmenting and automatic speech recognition.
- Modern automatic speech recognition (ASR) systems focus on providing not only high quality (e.g., a low word error rate), but also low latency (e.g., a short delay between the user speaking and a transcription appearing). For example, when using a device that implements an ASR system today, there is often an expectation that the ASR system decodes utterances in a streaming fashion that corresponds to real-time or even faster than real-time.
- One aspect of the disclosure provides a joint segmenting and automatic speech recognition (ASR) model including an encoder and a decoder. The encoder configured to receive, as input, a sequence of acoustic frames characterizing one or more utterances, and generate, at each of a plurality of output steps, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames. The decoder configured to receive, as input, the higher order feature representation generated by the encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps: a probability distribution over possible speech recognition hypotheses; and an indication of whether the corresponding output step corresponds to an end of speech segment. The joint segmenting and ASR model trained on a set of training samples, each training sample in the set of training samples includes: audio data characterizing a spoken utterance; and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, the decoder includes a prediction network, a first joint network, and a second joint network. The prediction network configured to, at each of the plurality of output steps receive, as input, a sequence of non-blank symbols output by a final softmax layer, and generate a hidden representation. The first joint network configured to: receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generate, at each of the plurality of output steps, the indication of whether the corresponding output step corresponds to an end of speech segment. The second joint network configured to: receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generate, at each of the plurality of output steps, the probability distribution over possible speech recognition hypotheses.
- In some examples, at each of the plurality of output steps, the sequence of previous non-blank symbols received as input at the prediction network includes a sequence of N previous non-blank symbols output by the final softmax layer. Here, the prediction network is configured to generate the hidden representation by, for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding, and generating an average embedding by averaging the respective embeddings, the average embedding including the hidden representation. In some examples, the prediction network includes a V2 embedding look-up table. In some implementations, a training process trains the joint segmenting and ASR model on the set of training samples by training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and, after training the second joint network, during a second stage initializing, the first joint network with the same parameters as the trained second joint network, and using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
- In some implementations, the encoder includes a causal encoder including a stack of conformer layers or transformer layers. In some examples, the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation.
- In some examples, the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples includes inserting the ground truth end of speech segment token at the end of the corresponding transcription, and inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word. In some implementations, the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold. In some examples, after training the joint segmenting and ASR model, the decoder is configured to emit the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration. In some implementations, the joint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
- Another aspect of the disclosure provides a computer-implemented method executed on data processing hardware that causes the data processing hardware to perform operations including receiving a sequence of acoustic frames characterizing one or more utterances and, at each of a plurality of output steps: generating, by an encoder of a joint segmenting and automated speech recognition (ASR) model, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; and generating, by a decoder of the joint segmenting and ASR model a probability distribution over possible speech recognition hypotheses, and an indication of whether the corresponding output step corresponds to an end of speech segment. The joint segmenting and ASR model trained on a set of training samples, each training sample in the set of training samples including audio data characterizing a spoken utterance, and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, the operations also include, at each of the plurality of output steps, generating, using a prediction network of the decoder, a hidden representation based on a sequence of non-blank symbols output by a final softmax layer; generating the indication of whether the corresponding output step corresponds to the end of speech segment includes generating, using a first joint network of the decoder, the indication of whether the corresponding output step corresponds to the end of speech segment based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and generating the probability distribution over possible speech recognition hypotheses includes generating, using a second joint network of the decoder, the probability distribution over possible speech recognition hypothesis based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps.
- In some examples, the sequence of previous non-blank symbols received as input at the prediction network includes a sequence of N previous non-blank symbols output by the final softmax layer; and generating the hidden representation using the prediction network includes generating the hidden representation by, for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding, and generating an average embedding by averaging the respective embeddings, the average embedding includes the hidden representation. In some implementations, the prediction network includes a V2 embedding look-up table. In some examples, a training process trains the joint segmenting and ASR model on the set of training samples by: training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and, after training the second joint network, during a second stage: initializing, the first joint network with the same parameters as the trained second joint network; and using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
- In some implementations, the encoder includes a causal encoder including a stack of conformer layers or transformer layers. In some examples, the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation. In some implementations, the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples includes: inserting the ground truth end of speech segment token at the end of the corresponding transcription; and inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word, or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word. In some examples, the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold. In some implementations, after training the joint segmenting and ASR model, the operations also include emitting, by the decoder, the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration.
- In some examples, the joint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
- The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a schematic view of an example speech environment using an automatic speech recognition (ASR) system that includes an end of speech segment joint network for transcribing spoken utterances. -
FIG. 2 is schematic views of example ASR system integrating an end of speech segment joint network. -
FIG. 3 is a schematic view of an example tied and reduced prediction network of the ASR system ofFIG. 2 . -
FIG. 4 is a flowchart of an example arrangement of operations for a computer-implemented method of executing an ASR system including an end of speech segment model. -
FIG. 5 is a schematic view of an example computing device that may be used to implement the systems and methods described herein. - Like reference symbols in the various drawings indicate like elements.
- Improving the performance of end-to-end (E2E) ASR models on long utterances ranging from minutes to hours in length is an ongoing challenge in speech recognition. Streaming E2E ASR models have achieved low word error rates (WERs) for short to medium length utterances of up to a few minutes long. However, conventional E2E ASR models may have high WERs and suffer from deletion errors on long-form utterances of tens of minutes to hours long. Such utterances are found, for example, in tasks like transcribing meetings and lectures, and video captioning.
- Conventionally, long-form utterances are first segmented using a separate voice activity detector (VAD). Whenever the VAD detects a long silence, it splits the audio at that location into two segments that are then processed separately or independently by an E2E ASR model. At each segment boundary, a beam search finalizes the top hypothesis by discarding all other hypotheses. This introduces more diversity into the beam search by occasionally clearing away stale hypotheses and making room for new ones, ultimately improving WER by seeing more potentially correct hypotheses. Maintaining beam diversity is particularly important for E2E ASR models, which are typically decoded with small beams. However, VAD-based segmenters suffer from high latency because a VAD, by design, must wait through long silences before deciding to segment. This delays subsequent ASR functions like rescoring or prefetching that must wait for the top hypothesis to be finalized. Improving latency is important because it can improve user experience by making smart assistants more responsive via faster prefetching, or by helping dictation or captioning apps reduce the amount of “flickering” due to switching between top hypotheses. Current VAD-based segmenters also suffer from high segmentation error because the VAD bases its decision purely on the audio and not the decoded text, which can contain semantic clues as to when to segment. Improving segmentation correctness is important because it can improve WER. On the other hand, not segmenting at all would lead to bloating the beam search with no diversity in the hypotheses, which could also induce word errors.
- Implementations herein are directed toward integrating an ASR system (e.g., including a recurrent neural network-transducer (RNN-T) model) with an end of speech segment model (e.g., an additional join network) that is configured and trained to predict, based on acoustic and semantic features, whether a corresponding output step of the ASR system corresponds to an end of speech segment event. Disclosed ASR systems are jointly optimized on both end of speech segment detection and ASR tasks. However, existing long utterance training data for ASR systems typically does not include ground truth labels corresponding to end of speech segments, making supervised training of the end of speech segment joint network difficult. Implementations herein are directed toward executing an end of speech segment annotation routine for automatically inserting end of speech segment ground truth labels into ground truth training transcripts based on modeling hesitations and word timings. An example end of speech segment scheme applies a heuristic-based, weak supervision approach where end of speech segment ground truth labels are automatically inserted into the ground truth training transcripts by applying one or more rules
-
FIG. 1 is a schematic diagram of anexample system 100 and speech environment 102. In the speech environment 102, a user’s 104 manner of interacting with a computing device, such as auser device 10, may be through voice input. The user device 10 (also referred to generally as a device 10) is configured to capture sounds (e.g., streaming audio data) from one ormore users 104 within the speech environment 102. Here, the streaming audio data may refer to a spokenutterance 106 by theuser 104 that functions as an audible query, a command for thedevice 10, or an audible communication captured by thedevice 10. Speech-enabled systems of thedevice 10 may field the query or the command by answering the query and/or causing the command to be performed/fulfilled by one or more downstream applications. The speech-enabled systems of thedevice 10 may also generate a transcription of an audible communication captured by thedevice 10. - The
user device 10 may correspond to any computing device associated with auser 104 and capable of receiving audio data. Some examples ofuser devices 10 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, vehicle infotainment systems, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc. Theuser device 10 includesdata processing hardware 12 andmemory hardware 14 in communication with thedata processing hardware 12. Thememory hardware 14 stores instructions that, when executed by thedata processing hardware 12, cause thedata processing hardware 12 to perform one or more operations. Theuser device 10 further includes anaudio system 16 with an audio capture device (e.g., microphone) 16, 16 a for capturing and converting spokenutterances 106 within the speech environment 102 into electrical signals, and a speech output device (e.g., a speaker) 16, 16 b for communicating an audible audio signal (e.g., as output audio data from the device 10). While theuser device 10 implements a single audio capture device 16 a in the example shown, theuser device 10 may implement an array of audio capture devices 16 a without departing from the scope of the present disclosure, whereby one or more capture devices 16 a in the array may not physically reside on theuser device 10, but be in communication with theaudio system 16. - In the
system 100, an automated speech recognition (ASR)system 118 includes an RNN-T model 200 implementing an end ofspeech segment model 205 and residing on theuser device 10 of theuser 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud-computing environment) in communication with theuser device 10 via anetwork 40. Theuser device 10 and/or theremote computing device 60 also includes anaudio subsystem 108 configured to receive theutterance 106 spoken by theuser 104 and captured by the audio capture device 16 a, and convert theutterance 106 into a corresponding digital format associated with inputacoustic frames 110 capable of being processed by theASR system 118. In the example shown, the user speaks arespective utterance 106 and theaudio subsystem 108 converts theutterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to theASR system 118. Thereafter, the RNN-T model 200 receives, as input, theacoustic frames 110 corresponding to theutterance 106, generates indications of whether a corresponding output step corresponds to an end of speech segment that may be used to segment theutterance 106 into speech segments, and generates/predicts, as output, a correspondingtranscription 120 for each speech segment of theutterance 106. In the example shown, the RNN-T model 200 may perform streaming speech recognition to produce partial transcriptions (e.g., streaming speech recognition results) 120 a, 120 b as the user speaks. - The
user device 10 and/or theremote computing device 60 also executes a user interface generator 107 configured to present representations of thetranscriptions utterance 106 to theuser 104 of theuser device 10, and to present one ormore responses 121, 121a-n to queries and/or commands of theutterance 106. As described in greater detail below, the user interface generator 107 may display the speech recognition results 120, 120a-n and theresponses 121, 121a-n during or at different times. As shown, the user interface generator 107 may present the speech recognition results 120, 120a-n (e.g., transcriptions) and theresponses 121, 121a-n to represent an interaction/conversation between theuser 104 and an interactive program or application (e.g., a digital assistant application 50). - In some configurations, the
transcription 120 output from theASR system 118 for each identified speech segment are processed, e.g., by a natural language processing/understanding (NLP/NLU) module executing on theuser device 10 or theremote computing device 60, to execute a user command/query specified by theutterance 106. Thedigital assistant application 50 may provide anappropriate response 121 subsequent to executing the user command/query specified by theutterance 106. Additionally or alternatively, a text-to-speech system (not shown) (e.g., executing on any combination of theuser device 10 or the remote computing device 60) may convert thetranscription 120 and/or theresponse 121 into synthesized speech for audible output by theuser device 10 and/or another device. - In the example shown, the
user 104 interacts with a program or application (e.g., the digital assistant application 50) of theuser device 10 that uses theASR system 118. For instance,FIG. 1 depicts theuser 104 communicating with thedigital assistant application 50, and thedigital assistant application 50 displaying an interactivedigital assistant interface 18 on ascreen 19 of theuser device 10 to depict a natural conversational interaction between theuser 104 and thedigital assistant application 50. In this example, theuser 104 speaks afirst speech segment 106 a (“Dictate the following message:”) of theutterance 106, and then speaks asecond speech segment 106 b (“Where can I order Italian food?) of theutterance 106. - As the
ASR system 118 receives theacoustic frames 110 corresponding to theutterance 106 as theuser 104 speaks, the end ofspeech segment model 205 generates at each output step, an indication of whether the output step corresponds to an end of a speech segment. The end of speech segment indications generated by the end ofspeech segment model 205 may be used to delineate thespeech segments 106 of theutterance 106 such that the RNN-T model 200 may perform speech recognition separately for eachspeech segment 106. In the example shown, the end ofspeech segment model 205 detects or determines an end of speech segment between the first andsecond speech segments 106, and outputs an end of speech segment indication indicating the end of thefirst speech segment 106 a. - For each
speech segment 106 of theutterance 106 indicated or identified by the end ofspeech segment model 205, the RNN-T model 200 performs speech recognition on theacoustic frames 110 corresponding to thespeech segment 106 to produce speech recognition results 120 corresponding to thespeech segment 106. Continuing with this example, based on the end ofspeech segment model 205 detecting the end of speech segment between the first andsecond speech segments 106, duringtime 1, the user interface generator 107 presents, via thedigital assistant interface 18, a representation of first speech recognition results 120 a for thefirst speech segment 106 a to theuser 104 of theuser device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on thescreen 19 of theuser device 10 as soon as they are spoken. - Continuing with this example, based on the end of
speech segment model 205 detecting an end of speech segment for thesecond speech segments 106, duringtime 2, the user interface generator 107 presents, via thedigital assistant interface 18, a representation of second speech recognition results 120 b for thesecond speech segment 106 b to theuser 104 of theuser device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on thescreen 19 of theuser device 10 as soon as they are spoken. Then, duringtime 3, the user interface generator 107 presents, via thedigital assistant interface 18, aresponse 121 b (i.e., “Would you like to send the message?”) generated by theassistant application 50 based on speech recognition results 120 a, 120 b generated for thespeech segments -
FIG. 2 is a schematic view of an example RNN-T model 200 integrating the end ofspeech segment model 205 as a first joint network 210 for detecting boundaries between spoken speech segments. As shown, the RNN-T model 200 includes anencoder network 220, aprediction network 300, a second joint network 240 (i.e., a word piece joint network 240), and a finalsoftmax output layer 250. The encoder network 220 (e.g., an audio encoder), which is roughly analogous to an acoustic model (AM) in a traditional ASR system, receives a sequence of feature vectors x = (x1, x2,· · ·,xt) 222, where xi ∈ ℝd, (e.g., theacoustic frames 110 ofFIG. 1 ), and produces at each output step a higher-order feature representation 224 (also generally referred to as an acoustic representation) denoted as -
- In the example shown, the
prediction network 300 includes an LSTM-based prediction network that, like a language model (LM), processes a sequence of non-blank symbols y0, ...,y u-1 252 output so far by thesoftmax layer 250 into a hidden representation -
- (also generally referred to as a dense or linguistic representation) representing a probability distribution of whether a current output step corresponds to a pause and an end of speech segment, where y0 represents a special start of sequence symbol.
-
FIG. 3 shows theprediction network 300 for the RNN-T model 200 that receives, as input, a sequence of non-blank symbols Yu-n, ..., yu-1 that is limited to the N previousnon-blank symbols 252 a-n output by thefinal softmax layer 250. In some examples, N is equal to two. In other examples, N is equal to five, however, the disclosure is non-limiting and N may equal any integer. The sequence ofnon-blank symbols 252 a-n may indicate a partial speech recognition result 120 a, 120 b (FIG. 1 ). In some implementations, theprediction network 300 includes amulti-headed attention mechanism 302 that shares a shared embeddingmatrix 304 across eachhead 302A-302H of the multi-headed attention mechanism. In one example, themulti-headed attention mechanism 302 includes four heads. However, any number of heads may be employed by themulti-headed attention mechanism 302. Notably, themulti-headed attention mechanism 302 improves performance significantly with minimal increase to model size. As described in greater detail below, eachhead 302A-H includes its own row ofposition vectors 308, and rather than incurring an increase in model size by concatenatingoutputs 318A-H from all the heads, theoutputs 318A-H are instead averaged by a headaverage module 322. - Referring to the
first head 302A of themulti-headed attention mechanism 302, thehead 302A generates, using the shared embeddingmatrix 304, a corresponding embedding 306, 306a-n (e.g., X ∈ ℝN x de for each non-blank symbol 301 among the sequence of non-blank symbols yui-n, ..., yui-1 received as input at the corresponding output step from the plurality of output steps. Notably, since the shared embeddingmatrix 304 is shared across all heads of themulti-headed attention mechanism 302, theother heads 302B-H all generate the same correspondingembeddings 306 for each non-blank symbol. Thehead 302A also assigns a respectiveposition vector PV Aa-An308, 308Aa-An (e.g., P ∈ ℝH x N x de to each corresponding non-blank symbol in the sequence of non-blank symbols yu-n, ..., yu-1. The respectiveposition vector PV 308 assigned to each non-blank symbol indicates a position in the history of the sequence of non-blank symbols (e.g., the N previous non-blank symbols output by the final softmax layer 250). For instance, the first position vector PVAa is assigned to a most recent position in the history, while the last position vector PVAn is assigned to a last position in the history of the N previous non-blank symbols output by thefinal softmax layer 250. Notably, each of theembeddings 306 may include a same dimensionality (i.e., dimension size) as each of theposition vectors PV 308. - While the corresponding embedding generated by shared embedding
matrix 304 for each for each non-blank symbol 301 among the sequence ofnon-blank symbols 252 a-n, yu-n, ..., yu-1, is the same at all of theheads 302A-H of themulti-headed attention mechanism 302, eachhead 302A-H defines a different set/row ofposition vectors 308. For instance, thefirst head 302A defines the row of position vectors PVAa-An 308Aa-An, thesecond head 302B defines a different row ofposition vectors PV Ba-Bn 308Ba-Bn, ..., and the Hth head 302 H defines another different row ofposition vectors PV Ha-Hn308Ha-Hn. - For each non-blank symbol in the sequence of
non-blank symbols 252 a-n received, thefirst head 302A also weights, via aweight layer 310, the corresponding embedding 306 proportional to a similarity between the corresponding embedding and the respectiveposition vector PV 308 assigned thereto. In some examples, the similarity may include a cosine similarity (e.g., cosine distance). In the example shown, theweight layer 310 outputs a sequence of weighted embeddings 312, 312Aa-An each associated the corresponding embedding 306 weighted proportional to the respectiveposition vector PV 308 assigned thereto. Stated differently, the weighted embeddings 312 output by theweight layer 310 for each embedding 306 may correspond to a dot product between the embedding 306 and the respectiveposition vector PV 308. The weighted embeddings 312 may be interpreted as attending over the embeddings in proportion to how similar they are to the positioned associated with their respectiveposition vectors PV 308. To increase computational speed, theprediction network 300 includes non-recurrent layers, and therefore, the sequence of weighted embeddings 312Aa-An are not concatenated, but instead, averaged by a weightedaverage module 316 to generate, as output from thefirst head 302A, a weighted average 318A of the weighted embeddings 312Aa-An represented by: -
- In Equation (1), h represents the index of the
heads 302, n represents position in context, and e represents the embedding dimension. Additionally, in Equation (1), H, N, and de include the sizes of the corresponding dimensions. Theposition vector PV 308 does not have to be trainable and may include random values. Notably, even though the weighted embeddings 312 are averaged, theposition vectors PV 308 can potentially save position history information, alleviating the need to provide recurrent connections at each layer of theprediction network 300. - The operations described above with respect to the
first head 302A, are similarly performed by eachother head 302B-H of themulti-headed attention mechanism 302. Due to the different set of positionedvectors PV 308 defined by eachhead 302, theweight layer 310 outputs a sequence of weighted embeddings 312Ba-Bn, 312Ha-Hn at eachother head 302B-H that is different than the sequence of weighted embeddings 312Aa-Aa at thefirst head 302A. Thereafter, the weightedaverage module 316 generates, as output from each other correspondinghead 302B-H, a respective weighted average 318B-H of the corresponding weighted embeddings 312 of the sequence of non-blank symbols. - In the example shown, the
prediction network 300 includes a headaverage module 322 that averages theweighted averages 318A-H output from the correspondingheads 302A-H.A projection layer 326 with SWISH may receive, as input, anoutput 324 from the headaverage module 322 that corresponds to the average of theweighted averages 318A-H, and generate, as output, a projected output 328. Afinal layer normalization 330 may normalize the projected output 328 to provide the single embedding vector Pu 350 (i.e., hidden representation) at the corresponding output step from the plurality of output steps. Theprediction network 300 generates only a single embeddingvector P u 350 at each of the plurality of output steps subsequent to an initial output step. - In some configurations, the
prediction network 300 does not implement themulti-headed attention mechanism 302 and only performs the operations described above with respect to thefirst head 302A. In these configurations, the weighted average 318A of the weighted embeddings 312Aa-An is simply passed through theprojection layer 326 andlayer normalization 330 to provide the single embeddingvector P u 350. - Referring back to
FIG. 2A , the end of speech segment joint network 210 (i.e., the first joint network 210) receives the single embeddingvector P u 350 from theprediction network 300, and the higher-order feature representation -
- from the
encoder 220. The end of speech segment joint network 210 generates, as output, an end of speech segment indication (e.g., an <eos> token) 212 based the conditional probability that an end of speech segment occurred. The conditional probability can be determined using the following mathematical expression: -
- where xi is the ith audio frame, and yi is the ith decoded token in the beam. The end of speech segment joint network 210 emits an end of speech segment indication (e.g., an <eos> token) 212 when, for example, the conditional probability
-
- satisfies (e.g., exceeds) a predefined threshold. In some implementations, the end of speech segmentjoint network 210 is identical in structure to the word piece
joint network 240 and contains all the same word pieces as logits. In some examples, a training system 130 (seeFIG. 1 ) trains theencoder network 220, theprediction network 300, the word piecejoint network 240, andsoftmax 250 during a first stage on a speech recognition task (e.g., using paired audio-transcription training data) to perform speech recognition. Paired audio-transcription training data includes audio data characterizing one or more spoken utterances and corresponding transcriptions for the spoken utterance(s). Then, during a second stage, thetraining system 130 initializes the end of speech segment joint network 210 with the trained weights of the word piecejoint network 240 from the first stage, and fine tunes the end of speech segment joint network 210 using the ground truth end of speech segment indications (e.g., <eos> tokens) inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample to maximize a probability of emitting the ground truth end of speech segment indicators. In some implementations, thetraining system 130 trains the end of speech segment joint network 210 using a FastEmit regularization term to encourage the end of speech segment j oint network 210 to emit <eos>tokens 212 as soon as sufficient context is available, which may be sooner identifying a number of consecutive non-speechacoustic frames 110 in the sequence ofacoustic frames 110 that satisfy a threshold duration. - In some implementations, a training data generator 140 (see
FIG. 1 ) automatically inserts ground truth <eos> tokens into paired audio-transcription training data (e.g., without any human annotation) using a heuristic-based, weak supervision approach where ground truth <eos> tokens are automatically inserted based on one or more rules. Example rules include, but are not limited to, inserting the ground truth end of speech segment <eos> token at the end of the corresponding transcription and inserting the ground truth end of speech segment <eos> token into the corresponding transcription at a location aligned with a non-speech segment of the audio data (e.g., silence) having a duration that satisfies a threshold duration unless the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word (e.g., “heyyy”) or the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word (e.g., “um”). Such exceptions reflect circumstances where the speaker is likely not finished speaking a speech segment. Lengthened words may be detected when, for example, a phoneme duration satisfies a standard deviation threshold (e.g., the phoneme duration exceeds five times the phoneme duration standard deviation). Filler words may be detected using a filler word detection model. In some implementations, thetraining data generator 140 applies the rules and exceptions by obtaining silence, word, and phoneme timings using a forced alignment model applied to all audio-transcription pairs in a training data set. - The word piece joint network 240 (i.e., the second joint network 240) receives the single embedding
vector P u 350 from theprediction network 300, and the higher-order feature representation -
- from the
encoder 220. The word piecejoint network 240 generates a probability distribution -
- 242 over possible speech recognition hypotheses at the corresponding output step. For example, when the natural language is English, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space. Accordingly, the word piece
joint network 240 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels. This set of values can be a vector and can indicate a probability distribution over the set of output labels. In some cases, the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited. For example, the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes. The output distribution of the word piecejoint network 240 can include a posterior probability value for each of the different output labels. Thus, when there are 100 different output labels representing different graphemes or other symbols, the output -
- 242 of the word piece
joint network 240 can include 100 different probability values, one for each output label. The probability distribution -
- over the possible speech recognition hypotheses indicates a probability for a speech recognition result 120 (
FIG. 1 ). That is, thejoint network 230 determines the probability distribution for speech recognition results 120 using the single embeddingvector 350 that is based on the sequence ofnon-blank symbols 252. Stated differently, the word piecejoint network 240 generates, at each output step (e.g., output step), aprobability distribution 242 over possible speech recognition hypotheses. The probability distribution -
- 242 can then be used to select and assign scores to candidate orthographic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by the softmax layer 240) for determining the
transcriptions 120. - When the end of speech segment j oint network 210 provides an indication of an end of a speech segment (e.g., an <eos> token) 212, the
softmax layer 250 may employ any technique to select the output label/symbol with the highest probability in the distribution -
- 242 as the next
output symbol y u 252 predicted by the RNN-T model 200 at the corresponding output step. In this way, the RNN-T model 200 does not make a conditional independence assumption. Instead, the RNN-T model 200 predicts each symbol conditioned not only on the acoustics but also on the sequence of labels output so far. The RNN-T model 200 does assume an output symbol is independent of futureacoustic frames 110, which allows the RNN-T model 200 to be employed in a streaming fashion. In some examples, thesoftmax layer 250 is composed of a unified word piece or grapheme set that is generated using all unique word pieces or graphemes in a plurality of training data sets. - In some implementations, the feature vectors x 222 input to the
encoder network 220 may include 80-dimensional log-Mel filter bank features formed by stacking three 25 millisecond (ms) acoustic frames with a 10 ms shift, and downsampling to a 30 ms frame rate. In some examples, theencoder network 220 includes twelve 512-dimensional conformer layers. The conformer layers include causal convolution with a kernel size of 15, and a stack of left-context attention layers with 8-head self-attention. While theencoder network 220 described has a stack of multi-head attention layers/blocks with self-attention that include conformer layers/blocks (e.g., twelve conformer blocks), the present disclosure is not so limited. For instance, theencoder network 220 may include a stack of transformer layers/ or a stack of any other type of multi-head attention layers/bocks. Theencoder network 220 may include a series of multi-headed self-attention, depth-wise convolutional and feed-forward layers. Alternatively, theencoder network 220 may include a plurality of long-short term memory (LSTM) layers in lieu of multi-head attention layers/blocks. - The
prediction network 300 may include an LTSM-based network having an embedding dimension of 320. The dimension Djoint of the fused representation -
- 232 may be set to 640. In some examples, the word piece
joint network 240 includes hidden units. Additionally or alternatively, the word piecejoint network 240 does not include a fully connected (FC) layer. Alternatively, theprediction network 300 may include a stack of transformer or conformer blocks (or other type of multi-head attention blocks). Theprediction network 300 may also be an embedding look-up table (e.g., a V2 embedding look-up table) to improve latency by outputting looked-up sparse embeddings in lieu of generating hidden representations. In some implementations, theprediction network 300 is a stateless prediction network. - The end of speech segment j oint network 210, the word piece
j oint network 240, and theprediction network 300 may collectively form an RNN-T decoder 260 of the RNN-T model 200. In some implementations, to further reduce the size of the RNN-T decoder 260, i.e., theprediction network 300 and the word piecejoint network 240, parameter tying between theprediction network 300 and the word piecejoint network 240 is applied. Specifically, for a vocabulary size |V|and an embedding dimension de, the shared embeddingmatrix 304 at the prediction network is E ∈ ℝ|V| x de . Meanwhile, a last hidden layer includes a dimension size dh at thejoint network 240, feed-forward projection weights from the hidden layer to the output logits will be W ∈ ℝdh x |V+1|, with an extra blank token in the vocabulary. Accordingly, the feed-forward layer corresponding to the last layer of the word piecejoint network 240 includes a weight matrix [dh, |V]|. By having theprediction network 300 to tie the size of the embedding dimension de to the dimensionality dh of the last hidden layer of the word piecejoint network 240, the feed-forward projection weights of the word piecejoint network 240 and the shared embeddingmatrix 304 of theprediction network 300 can share their weights for all non-blank symbols via a simple transpose transformation. Since the two matrices share all their values, the RNN-T decoder 260 only needs to store the values once in memory, instead of storing two individual matrices. By setting the size of the embedding dimension de equal to the size of the hidden layer dimension dh, the RNN-T decoder 260 reduces a number of parameters equal to the product of the embedding dimension d, and the vocabulary size |V|.This weight tying corresponds to a regularization technique. - In some implementations, the RNN-
T model 200 performs a frame-synchronous beam search with a beam size of 8 and a pruning threshold of five (i.e., partial hypotheses with negative log posterior exceeding that of the top hypothesis by 5 are removed). At each frame, the RNN-T model 200 performs a breadth-first search for possible expansions, ignoring any expansion with a negative log posterior of five or greater, and limits the search depth to ten expansions. In some examples, the RNN-T model 200 forces the end of a speech segment that exceeds a duration of sixty-five seconds. -
FIG. 4 is a flowchart of an exemplary arrangement of operations for a computer-implementedmethod 400 for performing joint segmenting and automated speech recognition. Atoperation 402, themethod 400 includes receiving a sequence of acoustic frames (e.g., the feature vectors x = (x1, x2,· . .,xt) 110, 222) characterizing one or more utterances (e.g., the utterance 106). - At each of a plurality of output steps, the
method 400 performsoperations method 400 includes generating, for each of a plurality of output steps, by anencoder network 220 of a joint segmenting and automatic speech recognition (ASR) model (e.g., the RNN-T 200), a higher order feature representation -
- 224 for a corresponding acoustic frame in the sequence of acoustic frames.
- At
operation 406, themethod 400 includes generating, by adecoder 260 of the joint segmenting and ASR model, a probability distribution -
- 242 over possible speech recognition hypotheses. At
operation 408, themethod 400 includes generating, by thedecoder 260 of the joint segmenting and ASR model, an indication of whether the corresponding output step corresponds to an end of speech segment. Here, the joint segmenting andASR model 200 is trained on a set of training samples each including: audio data characterizing a spoken utterance, and a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample. -
FIG. 5 is schematic view of anexample computing device 500 that can be used to implement the systems and methods described in this document. Thecomputing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computer devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. - The
computing device 500 includes a processor 510 (i.e., data processing hardware) that can be used to implement thedata processing hardware 12 and/or 62, memory 520 (i.e., memory hardware) that can be used to implement thememory hardware 14 and/or 64, a storage device 530 (i.e., memory hardware) that can be used to implement thememory hardware 14 and/or 64, a high-speed interface/controller 540 connecting to thememory 520 and high-speed expansion ports 550, and a low speed interface/controller 570 connecting to alow speed bus 560 and astorage device 530. Each of thecomponents processor 510 can process instructions for execution within thecomputing device 500, including instructions stored in thememory 520 or on thestorage device 530 to display graphical information for a graphical user interface (GUI) on an external input/output device, such asdisplay 580 coupled tohigh speed interface 540. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 520 stores information non-transitorily within thecomputing device 500. Thememory 520 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). Thenon-transitory memory 520 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by thecomputing device 500. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes. - The
storage device 530 is capable of providing mass storage for thecomputing device 500. In some implementations, thestorage device 530 is a computer-readable medium. In various different implementations, thestorage device 530 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 520, thestorage device 530, or memory onprocessor 510. - The
high speed controller 540 manages bandwidth-intensive operations for thecomputing device 500, while the low speed controller 570 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 540 is coupled to thememory 520, the display 580 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 550, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 570 is coupled to thestorage device 530 and a low-speed expansion port 590. The low-speed expansion port 590, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 500 a or multiple times in a group ofsuch servers 500 a, as alaptop computer 500 b, or as part of arack server system 500 c. - Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an “application,” an “app,” or a “program.” Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array), a graphics processing unit (GPU), a tensor processing unit (TPU), or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- Unless expressly stated to the contrary, the phrase “at least one of A, B, or C” is intended to refer to any combination or subset of A, B, C such as: (1) at least one A alone; (2) at least one B alone; (3) at least one C alone; (4) at least one A with at least one B; (5) at least one A with at least one C; (6) at least one B with at least C; and (7) at least one A with at least one B and at least one C. Moreover, unless expressly stated to the contrary, the phrase “at least one of A, B, and C” is intended to refer to any combination or subset of A, B, C such as: (1) at least one A alone; (2) at least one B alone; (3) at least one C alone; (4) at least one A with at least one B; (5) at least one A with at least one C; (6) at least one B with at least one C; and (7) at least one A with at least one B and at least one C. Furthermore, unless expressly stated to the contrary, “A or B” is intended to refer to any combination of A and B, such as: (1) A alone; (2) B alone; and (3) A and B.
- To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user’s client device in response to requests received from the web browser.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (22)
1. A joint segmenting and automated speech recognition (ASR) model comprising:
an encoder configured to:
receive, as input, a sequence of acoustic frames characterizing one or more utterances; and
generate, at each of a plurality of output steps, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; and
a decoder configured to:
receive, as input, the higher order feature representation generated by the encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps:
a probability distribution over possible speech recognition hypotheses; and
an indication of whether the corresponding output step corresponds to an end of speech segment,
wherein the joint segmenting and ASR model is trained on a set of training samples, each training sample in the set of training samples comprising:
audio data characterizing a spoken utterance; and
a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
2. The joint segmenting and ASR model of claim 1 , wherein the decoder comprises:
a prediction network configured to, at each of the plurality of output steps:
receive, as input, a sequence of non-blank symbols output by a final softmax layer; and
generate a hidden representation;
a first joint network configured to:
receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, the indication of whether the corresponding output step corresponds to an end of speech segment; and
a second joint network configured to:
receive, as input, the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, the probability distribution over possible speech recognition hypotheses.
3. The joint segmenting and ASR model of claim 2 , wherein, at each of the plurality of output steps:
the sequence of previous non-blank symbols received as input at the prediction network comprises a sequence of N previous non-blank symbols output by the final softmax layer; and
the prediction network is configured to generate the hidden representation by:
for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding; and
generating an average embedding by averaging the respective embeddings, the average embedding comprising the hidden representation.
4. The joint segmenting and ASR model of claim 2 , wherein the prediction network comprises a V2 embedding look-up table.
5. The joint segmenting and ASR model of claim 2 , wherein a training process trains the joint segmenting and ASR model on the set of training samples by:
training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and
after training the second joint network, during a second stage:
initializing, the first joint network with the same parameters as the trained second joint network; and
using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
6. The joint segmenting and ASR model of claim 1 , wherein the encoder comprises a causal encoder comprising a stack of conformer layers or transformer layers.
7. The joint segmenting and ASR model of claim 1 , wherein the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation.
8. The joint segmenting and ASR model of claim 1 , wherein the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples comprises:
inserting the ground truth end of speech segment token at the end of the corresponding transcription; and
inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless:
the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word; or
the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word.
9. The joint segmenting and ASR model of claim 8 , wherein the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold.
10. The j oint segmenting and ASR model of claim 8 , wherein, after training the joint segmenting and ASR model, the decoder is configured to emit the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration.
11. The j oint segmenting and ASR model of claim 1 , wherein the j oint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
12. A computer-implemented method executed on data processing hardware that causes the data processing hardware to perform operations comprising:
receiving a sequence of acoustic frames characterizing one or more utterances; and
at each of a plurality of output steps:
generating, by an encoder of a joint segmenting and automated speech recognition (ASR) model, a higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; and
generating, by a decoder of the joint segmenting and ASR model:
a probability distribution over possible speech recognition hypotheses; and
an indication of whether the corresponding output step corresponds to an end of speech segment,
wherein the joint segmenting and ASR model is trained on a set of training samples, each training sample in the set of training samples comprising:
audio data characterizing a spoken utterance; and
a corresponding transcription of the spoken utterance, the corresponding transcription having an end of speech segment ground truth token inserted into the corresponding transcription automatically based on a set of heuristic-based rules and exceptions applied to the training sample.
13. The computer-implemented method of claim 12 , wherein:
the operations further comprise, at each of the plurality of output steps, generating, using a prediction network of the decoder, a hidden representation based on a sequence of non-blank symbols output by a final softmax layer;
generating the indication of whether the corresponding output step corresponds to the end of speech segment comprises generating, using a first joint network of the decoder, the indication of whether the corresponding output step corresponds to the end of speech segment based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps; and
generating the probability distribution over possible speech recognition hypotheses comprises generating, using a second joint network of the decoder, the probability distribution over possible speech recognition hypothesis based on the hidden representation generated by the prediction network at each of the plurality of output steps and the higher order feature representation generated by the encoder at each of the plurality of output steps.
14. The computer-implemented method of claim 13 , wherein:
the sequence of previous non-blank symbols received as input at the prediction network comprises a sequence of N previous non-blank symbols output by the final softmax layer; and
generating the hidden representation using the prediction network comprises generating the hidden representation by:
for each non-blank symbol of the sequence of N previous non-blank symbols, generating a respective embedding; and
generating an average embedding by averaging the respective embeddings, the average embedding comprising the hidden representation.
15. The computer-implemented method of claim 13 , wherein the prediction network comprises a V2 embedding look-up table.
16. The computer-implemented method of claim 13 , wherein a training process trains the joint segmenting and ASR model on the set of training samples by:
training, during a first stage, the second joint network to learn how to predict the corresponding transcription of the spoken utterance characterized by the audio data of each training sample; and
after training the second joint network, during a second stage:
initializing, the first joint network with the same parameters as the trained second joint network; and
using the end of speech segment ground truth token inserted into the corresponding transcription of the spoken utterance characterized by the audio data of each training sample.
17. The computer-implemented method of claim 12 , wherein the encoder comprises a causal encoder comprising a stack of conformer layers or transformer layers.
18. The computer-implemented method of claim 12 , wherein the end of speech segment ground truth token is inserted into the corresponding transcription automatically without any human annotation.
19. The computer-implemented method of claim 12 , wherein the set of heuristic-based rules and exceptions applied to each training sample in the set of training samples comprises:
inserting the ground truth end of speech segment token at the end of the corresponding transcription; and
inserting the ground truth end of speech segment token into the corresponding transcription at a location aligned with a non-speech segment of the audio data having a duration that satisfies a threshold duration unless:
the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a lengthened word; or
the non-speech segment of the audio data follows a word in the spoken utterance that is identified as a filler word.
20. The computer-implemented method of claim 19 , wherein the word in the spoken utterance is identified as the lengthened word when a phoneme duration of the word satisfy a standard deviation threshold.
21. The computer-implemented method of claim 19 , wherein, after training the joint segmenting and ASR model, the operations further comprise emitting, by the decoder, the indication that the corresponding output step corresponds to the end of speech segment sooner than identifying a number of consecutive non-speech acoustic frames in the sequence of acoustic frames that satisfy the threshold duration.
22. The computer-implemented method of claim 12 , wherein the joint segmenting and ASR model is trained to maximize a probability of emitting the end of speech segment ground truth label.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/304,064 US20230343332A1 (en) | 2022-04-21 | 2023-04-20 | Joint Segmenting and Automatic Speech Recognition |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263363386P | 2022-04-21 | 2022-04-21 | |
US18/304,064 US20230343332A1 (en) | 2022-04-21 | 2023-04-20 | Joint Segmenting and Automatic Speech Recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230343332A1 true US20230343332A1 (en) | 2023-10-26 |
Family
ID=88415706
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/304,064 Pending US20230343332A1 (en) | 2022-04-21 | 2023-04-20 | Joint Segmenting and Automatic Speech Recognition |
Country Status (2)
Country | Link |
---|---|
US (1) | US20230343332A1 (en) |
WO (1) | WO2023205409A1 (en) |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
SG11202112279WA (en) * | 2019-05-11 | 2021-12-30 | Beijing Bytedance Network Technology Co Ltd | Selective use of coding tools in video processing |
CN114097222A (en) * | 2019-06-23 | 2022-02-25 | 夏普株式会社 | System and method for performing adaptive resolution change in video coding |
US11356707B2 (en) * | 2019-09-23 | 2022-06-07 | Qualcomm Incorporated | Signaling filters for video processing |
-
2023
- 2023-04-20 US US18/304,064 patent/US20230343332A1/en active Pending
- 2023-04-21 WO PCT/US2023/019386 patent/WO2023205409A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
WO2023205409A1 (en) | 2023-10-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20220122622A1 (en) | Cascaded Encoders for Simplified Streaming and Non-Streaming ASR | |
JP2023545988A (en) | Transformer transducer: One model that combines streaming and non-streaming speech recognition | |
JP7351018B2 (en) | Proper noun recognition in end-to-end speech recognition | |
US20230343328A1 (en) | Efficient streaming non-recurrent on-device end-to-end model | |
KR20230158608A (en) | Multi-task learning for end-to-end automatic speech recognition confidence and erasure estimation. | |
US20230352006A1 (en) | Tied and reduced rnn-t | |
US20230107450A1 (en) | Disfluency Detection Models for Natural Conversational Voice Systems | |
US20230096821A1 (en) | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition | |
US20220310097A1 (en) | Reducing Streaming ASR Model Delay With Self Alignment | |
US20220122586A1 (en) | Fast Emit Low-latency Streaming ASR with Sequence-level Emission Regularization | |
US20230343332A1 (en) | Joint Segmenting and Automatic Speech Recognition | |
WO2023205367A1 (en) | Joint segmenting and automatic speech recognition | |
US20230107493A1 (en) | Predicting Word Boundaries for On-Device Batching of End-To-End Speech Recognition Models | |
US20230103382A1 (en) | Training for long-form speech recognition | |
US20230335117A1 (en) | Intended Query Detection using E2E Modeling for continued Conversation | |
US20230298570A1 (en) | Rare Word Recognition with LM-aware MWER Training | |
US20240029720A1 (en) | Context-aware Neural Confidence Estimation for Rare Word Speech Recognition | |
US20220310061A1 (en) | Regularizing Word Segmentation | |
KR20240065125A (en) | Large-scale language model data selection for rare word speech recognition. |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HUNG, RONNY;CHANG, SHUO-YIIN;RYBACH, DAVID;AND OTHERS;SIGNING DATES FROM 20230420 TO 20230425;REEL/FRAME:064887/0081 |