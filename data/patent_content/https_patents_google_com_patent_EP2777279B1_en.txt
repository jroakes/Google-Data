EP2777279B1 - Method of determining binary codewords for transform coefficients - Google Patents
Method of determining binary codewords for transform coefficients Download PDFInfo
- Publication number
- EP2777279B1 EP2777279B1 EP12791630.2A EP12791630A EP2777279B1 EP 2777279 B1 EP2777279 B1 EP 2777279B1 EP 12791630 A EP12791630 A EP 12791630A EP 2777279 B1 EP2777279 B1 EP 2777279B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- value
- symbol
- parameter variable
- prefix
- determining
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 title claims description 40
- 241000209094 Oryza Species 0.000 claims description 69
- 235000007164 Oryza sativa Nutrition 0.000 claims description 69
- 235000009566 rice Nutrition 0.000 claims description 69
- 230000008569 process Effects 0.000 claims description 24
- 230000006835 compression Effects 0.000 description 12
- 238000007906 compression Methods 0.000 description 12
- 238000004891 communication Methods 0.000 description 10
- 230000002123 temporal effect Effects 0.000 description 7
- 238000003860 storage Methods 0.000 description 5
- 239000013598 vector Substances 0.000 description 5
- 230000003044 adaptive effect Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 4
- 241000023320 Luma <angiosperm> Species 0.000 description 3
- 238000013500 data storage Methods 0.000 description 3
- 238000009826 distribution Methods 0.000 description 3
- OSWPMRLSEDHDFF-UHFFFAOYSA-N methyl salicylate Chemical compound COC(=O)C1=CC=CC=C1O OSWPMRLSEDHDFF-UHFFFAOYSA-N 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000002441 reversible effect Effects 0.000 description 3
- 230000003247 decreasing effect Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000005192 partition Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- XMQFTWRPUQYINF-UHFFFAOYSA-N bensulfuron-methyl Chemical compound COC(=O)C1=CC=CC=C1CS(=O)(=O)NC(=O)NC1=NC(OC)=CC(OC)=N1 XMQFTWRPUQYINF-UHFFFAOYSA-N 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000013139 quantization Methods 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/70—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by syntax aspects related to video coding, e.g. related to compression standards
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/20—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using video object coding
- H04N19/21—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using video object coding with binary alpha-plane coding for video objects, e.g. context-based arithmetic encoding [CAE]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
Definitions
- the present disclosure relates to the field of video compression, particularly video compression using High Efficiency Video Coding (HEVC) that employ block processing.
- HEVC High Efficiency Video Coding
- Fig. 1 depicts a content distribution system 100 comprising a coding system 110 and a decoding system 140 that can be used to transmit and receive HEVC data.
- the coding system 110 can comprise an input interface 130, a controller 111, a counter 112, a frame memory 113, an encoding unit 114, a transmitter buffer 115 and an output interface 135.
- the decoding system 140 can comprise a receiver buffer 150, a decoding unit 151, a frame memory 152 and a controller 153.
- the coding system 110 and the decoding system 140 can be coupled with each other via a transmission path which can carry a compressed bitstream 105.
- the controller 111 of the coding system 110 can control the amount of data to be transmitted on the basis of the capacity of the receiver buffer 150 and can include other parameters such as the amount of data per a unit of time.
- the controller 111 can control the encoding unit 114 to prevent the occurrence of a failure of a received signal decoding operation of the decoding system 140.
- the controller 111 can be a processor or include, by way of a non-limiting example, a microcomputer having a processor, a random access memory and a read only memory.
- Source pictures 120 supplied from, by way of a non-limiting example, a content provider can include a video sequence of frames including source pictures in a video sequence.
- the source pictures 120 can be uncompressed or compressed. If the source pictures 120 are uncompressed, the coding system 110 can have an encoding function. If the source pictures 120 are compressed, the coding system 110 can have a transcoding function. Coding units can be derived from the source pictures utilizing the controller 111.
- the frame memory 113 can have a first area that can be used for storing the incoming frames from the source pictures 120 and a second area that can be used for reading out the frames and outputting them to the encoding unit 114.
- the controller 111 can output an area switching control signal 123 to the frame memory 113.
- the area switching control signal 123 can indicate whether the first area or the second area is to be utilized.
- the controller 111 can output an encoding control signal 124 to the encoding unit 114.
- the encoding control signal 124 can cause the encoding unit 114 to start an encoding operation, such as preparing the Coding Units based on a source picture.
- the encoding unit 114 can begin to read out the prepared Coding Units to a high-efficiency encoding process, such as a prediction coding process or a transform coding process which process the prepared Coding Units generating video compression data based on the source pictures associated with the Coding Units.
- the encoding unit 114 can package the generated video compression data in a packetized elementary stream (PES) including video packets.
- PES packetized elementary stream
- the encoding unit 114 can map the video packets into an encoded video signal 122 using control information and a program time stamp (PTS) and the encoded video signal 122 can be transmitted to the transmitter buffer 115.
- PTS program time stamp
- the encoded video signal 122 can be stored in the transmitter buffer 115.
- the information amount counter 112 can be incremented to indicate the total amount of data in the transmitter buffer 115. As data is retrieved and removed from the buffer, the counter 112 can be decremented to reflect the amount of data in the transmitter buffer 115.
- the occupied area information signal 126 can be transmitted to the counter 112 to indicate whether data from the encoding unit 114 has been added or removed from the transmitter buffer 115 so the counter 112 can be incremented or decremented.
- the controller 111 can control the production of video packets produced by the encoding unit 114 on the basis of the occupied area information 126 which can be communicated in order to anticipate, avoid, prevent, and/or detect an overflow or underflow from taking place in the transmitter buffer 115.
- the information amount counter 112 can be reset in response to a preset signal 128 generated and output by the controller 111. After the information counter 112 is reset, it can count data output by the encoding unit 114 and obtain the amount of video compression data and/or video packets which have been generated. The information amount counter 112 can supply the controller 111 with an information amount signal 129 representative of the obtained amount of information. The controller 111 can control the encoding unit 114 so that there is no overflow at the transmitter buffer 115.
- the decoding system 140 can comprise an input interface 170, a receiver buffer 150, a controller 153, a frame memory 152, a decoding unit 151 and an output interface 175.
- the receiver buffer 150 of the decoding system 140 can temporarily store the compressed bitstream 105, including the received video compression data and video packets based on the source pictures from the source pictures 120.
- the decoding system 140 can read the control information and presentation time stamp information associated with video packets in the received data and output a frame number signal 163 which can be applied to the controller 153.
- the controller 153 can supervise the counted number of frames at a predetermined interval. By way of a non-limiting example, the controller 153 can supervise the counted number of frames each time the decoding unit 151 completes a decoding operation.
- the controller 153 can output a decoding start signal 164 to the decoding unit 151.
- the controller 153 can wait for the occurrence of a situation in which the counted number of frames becomes equal to the predetermined amount.
- the controller 153 can output the decoding start signal 164 when the situation occurs.
- the controller 153 can output the decoding start signal 164 when the frame number signal 163 indicates the receiver buffer 150 is at the predetermined capacity.
- the encoded video packets and video compression data can be decoded in a monotonic order (i.e., increasing or decreasing) based on presentation time stamps associated with the encoded video packets.
- the decoding unit 151 can decode data amounting to one picture associated with a frame and compressed video data associated with the picture associated with video packets from the receiver buffer 150.
- the decoding unit 151 can write a decoded video signal 162 into the frame memory 152.
- the frame memory 152 can have a first area into which the decoded video signal is written, and a second area used for reading out decoded pictures 160 to the output interface 175.
- the coding system 110 can be incorporated or otherwise associated with a transcoder or an encoding apparatus at a headend and the decoding system 140 can be incorporated or otherwise associated with a downstream device, such as a mobile device, a set top box or a transcoder.
- the coding system 110 and decoding system 140 can be utilized separately or together to encode and decode video data according to various coding formats, including High Efficiency Video Coding (HEVC).
- HEVC is a block based hybrid spatial and temporal predictive coding scheme.
- input images such as video frames, can be divided into square blocks called Largest Coding Units (LCUs) 200, as shown in Fig. 2 .
- LCUs 200 can each be as large as 128x128 pixels, unlike other coding schemes that break input images into macroblocks of 16x16 pixels.
- each LCU 200 can be partitioned by splitting the LCU 200 into four Coding Units (CUs) 202.
- CUs Coding Units
- CUs 202 can be square blocks each a quarter size of the LCU 200. Each CU 202 can be further split into four smaller CUs 202 each a quarter size of the larger CU 202. By way of a non-limiting example, the CU 202 in the upper right corner of the LCU 200 depicted in Fig. 3 can be divided into four smaller CUs 202. In some embodiments, these smaller CUs 202 can be further split into even smaller sized quarters, and this process of splitting CUs 202 into smaller CUs 202 can be completed multiple times.
- the present invention provides an improved system for HEVC.
- a method of determining binary codewords for transform coefficients in an efficient mariner is provided.
- Codewords for the transform coefficients within transform units (TUs) that are subdivisions of the CUs 202 are used in encoding input images and/or macroblocks.
- a method that creates a truncated rice bin string used in the codeword for a transform coefficient.
- the method in the embodiment comprises providing a symbol, providing a parameter variable for the symbol, providing a maximum symbol value associated with the parameter variable, determining the truncated rice prefix for the symbol, the truncated rice prefix comprising one or more bins, determining a truncated rice suffix for the symbol when the parameter variable is greater than zero, the truncated rice suffix comprising one or more bins, determining a main prefix for the symbol by setting the main prefix to the truncated rice prefix when the parameter variable is equal to zero, or concatenating the end of the truncated rice prefix with the truncated rice suffix when the parameter variable is greater than zero, determining a main suffix for the symbol when the main prefix is the same as a comparison string, the main suffix comprising one or more bins, and determining a binary codeword for the
- the invention includes a video encoder that uses a truncated rice prefix to create a codeword for identifying a transform coefficient.
- the video encoder includes a memory configured to store a symbol, a parameter variable, and a maximum symbol, and a processor coupled with the memory, wherein the processor is configured to determine a binary codeword for the symbol by determining the truncated rice prefix for the symbol, the truncated rice prefix comprising one or more bins, determining a truncated rice suffix for the symbol when the parameter variable is greater than zero, the truncated rice suffix comprising one or more bins, determining a main prefix for the symbol by setting the main prefix to the truncated rice prefix when the parameter variable is equal to zero, or concatenating the end of the truncated rice prefix with the truncated rice suffix when the parameter variable is greater than zero, determining a main suffix for the symbol when the main prefix is the same as a
- an input image such as a video frame
- CUs that are then identified in code.
- the CUs are then further broken into sub-units that are coded as will be described subsequently.
- a quadtree data representation can be used to describe the partition of a LCU 200.
- the quadtree representation can have nodes corresponding to the LCU 200 and CUs 202.
- a flag "1" can be assigned if the LCU 200 or CU 202 is split into four CUs 202. If the node is not split into CUs 202, a flag "0" can be assigned.
- the quadtree representation shown in Fig. 4 can describe the LCU partition shown in Fig. 3 , in which the LCU 200 is split into four CUs 202, and the second CU 202 is split into four smaller CUs 202.
- the binary data representation of the quadtree can be a CU split flag that can be coded and transmitted as overhead, along with other data such as a skip mode flag, merge mode flag, and the PU coding mode described subsequently.
- the CU split flag quadtree representation shown in Fig. 4 can be coded as the binary data representation "10100.”
- the final CUs 202 can be broken up into one or more blocks called prediction units (PUs) 204.
- PUs 204 can be square or rectangular.
- a CU 202 with dimensions of 2Nx2N can have one of the four exemplary arrangements of PUs 204 shown in Fig. 5 , with PUs 204 having dimensions of 2Nx2N, 2NxN, Nx2N, or NxN.
- a PU can be obtained through spatial or temporal prediction. Temporal prediction is related to inter mode pictures. Spatial prediction relates to intra mode pictures. The PUs 204 of each CU 202 can, thus, be coded in either intra mode or inter mode. Features of coding relating to intra mode and inter mode pictures is described in the paragraphs to follow.
- Intra mode coding can use data from the current input image, without referring to other images, to code an I picture.
- the PUs 204 can be spatially predictive coded.
- Each PU 204 of a CU 202 can have its own spatial prediction direction.
- Spatial prediction directions can be horizontal, vertical, 45-degree diagonal, 135 degree diagonal, DC, planar, or any other direction.
- the spatial prediction direction for the PU 204 can be coded as a syntax element.
- brightness information (Luma) and color information (Chroma) for the PU 204 can be predicted separately.
- the number of Luma intra prediction modes for 4x4, 8x8, 16x16, 32x32, and 64x64 blocks can be 18, 35, 35, 35, and 4 respectively.
- the number of Luma intra prediction modes for blocks of any size can be 35.
- An additional mode can be used for the Chroma intra prediction mode.
- the Chroma prediction mode can be called "IntraFromLuma.”
- Inter mode coding can use data from the current input image and one or more reference images to code "P" pictures and/or "B" pictures. In some situations and/or embodiments, inter mode coding can result in higher compression than intra mode coding.
- inter mode PUs 204 can be temporally predictive coded, such that each PU 204 of the CU 202 can have one or more motion vectors and one or more associated reference images. Temporal prediction can be performed through a motion estimation operation that searches for a best match prediction for the PU 204 over the associated reference images. The best match prediction can be described by the motion vectors and associated reference images.
- P pictures use data from the current input image and one or more previous reference images.
- B pictures use data from the current input image and both previous and subsequent reference images, and can have up to two motion vectors.
- the motion vectors and reference pictures can be coded in the HEVC bitstream.
- the motion vectors can be coded as syntax elements "MV”
- the reference pictures can be coded as syntax elements "refldx.”
- inter mode coding can allow both spatial and temporal predictive coding.
- Fig. 6 depicts a block diagram of how a PU 204, x, can be encoded and/or decoded.
- a predicted PU 206, x' that is predicted by intra mode at 602 or inter mode at 604, as described above, can be subtracted from the current PU 204, x, to obtain a residual PU 208, e.
- the residual PU 208, e can be transformed with a block transform into one or more transform units (TUs) 210, E.
- Each TU 210 can comprise one or more transform coefficients 212.
- the block transform can be square. In alternate embodiments, the block transform can be non-square.
- a set of block transforms of different sizes can be performed on a CU 202, such that some PUs 204 can be divided into smaller TUs 210 and other PUs 204 can have TUs 210 the same size as the PU 204.
- Division of CUs 202 and PUs 204 into TUs 210 can be shown by a quadtree representation.
- the quadtree representation shown in Fig. 8 depicts the arrangement of TUs 210 within the CU 202 shown in Fig. 7 .
- the transform coefficients 212 of the TU 210, E can be quantized into one of a finite number of possible values. In some embodiments, this is a lossy operation in which data lost by quantization may not be recoverable.
- the quantized transform coefficients 212 can be entropy coded, as discussed below, to obtain the final compression bits 214.
- the quantized transform coefficients 212 can be dequantized into dequantized transform coefficients 216 E'.
- the dequantized transform coefficients 216 E' can then be inverse transformed to reconstruct the residual PU 218, e'.
- the reconstructed residual PU 218, e' can then be added to a corresponding prediction PU 206, x', obtained through either spatial prediction at 602 or temporal prediction at 604, to obtain a reconstructed PU 220, x".
- a deblocking filter can be used on reconstructed PUs 220, x", to reduce blocking artifacts.
- a sample adaptive offset process is also provided that can be conditionally performed to compensate the pixel value offset between reconstructed pixels and original pixels. Further, at 620, an adaptive loop filter can be conditionally used on the reconstructed PUs 220, x", to reduce or minimize coding distortion between input and output images.
- the reconstructed image is a reference image that will be used for future temporal prediction in inter mode coding
- the reconstructed images can be stored in a reference buffer 622.
- Intra mode coded images can be a possible point where decoding can begin without needing additional reconstructed images.
- HEVC can use entropy coding schemes during step 612 such as context-based adaptive binary arithmetic coding (CABAC).
- CABAC context-based adaptive binary arithmetic coding
- the coding process for CABAC is shown in Fig. 9 .
- the position of the last significant transform coefficient of the transform units 210 can be coded.
- the quantized transform coefficients are created by quantizing the TUs 210.
- Transform coefficients 212 can be significant or insignificant.
- Fig. 10 shows a significance map 1002 of the transform coefficients 212. Insignificant transform coefficients 212 can have a quantized value of zero, while significant transform coefficients 212 can have a quantized value of one or more.
- significant transform coefficients 212 can also be known as non-zero quantized transform coefficients 212. If a TU 210 comprises one or more significant transform coefficients 212, the coordinates of the last significant transform coefficient 212 along a forward zig-zag coding scan from the top left corner of the TU 210 to the lower right corner of the TU 210, as shown in Fig. 10 , can be coded. In alternate embodiments, the significant transform coefficients 212 can be scanned along an inverse wavefront scan, inverse horizontal scan, inverse vertical scan, or any other scan order.
- Fig. 10 depicts the position of the last significant transform 212b within a TU 210 which is being coded in block 902 of Fig. 9 .
- the significance map 1002 can be coded to indicate the positions of each of the significant transform coefficients 212 in the TU 210.
- a significance map 1002 can comprise a binary element for each position in the TU 210. The binary element can be coded as "0" to indicate that the transform coefficient 212 at that position is not significant. The binary element can be coded as "1" to indicate that the transform coefficient 212 at that position is significant.
- Fig. 11 illustrates how the quantized transform coefficients 212 of the TUs 210 can be divided into groups.
- the groups can be sub-blocks.
- Sub-blocks can be square blocks of 16 quantized transform coefficients 212.
- the groups can be subsets 1102.
- Subsets 1102 can comprise 16 quantized transform coefficients 212 that are consecutive along the scan order of a backwards zig-zag scan, as shown in Fig. 11 .
- the first subset can be the subset 1102 that includes the last significant transform coefficient 212b, regardless of where the last significant transform coefficient 212b is within the subset.
- the last significant transform coefficient 212b can be the 14th transform coefficient 212 in the subset, followed by two insignificant transform coefficients.
- the first subset can be the subset 1102 containing the last significant transform coefficient 212b, and any groups before the first subset 1102 are not considered part of a subset 1102.
- the first subset 1102 "Subset 0" is the second grouping of 16 transform coefficients 212 along the reverse zig-zap scan order, while the group of 16 transform coefficients 212 at the lower right comer of the TU 210 are not part of a subset 1102 because none of those transform coefficients 212 are significant.
- the first subset 1102 can be denoted as "subset 0,” and additional subsets 1102 can be denoted as "subset 1,” “subset 2,” up to “subset N.”
- the last subset 1102 can be the subset 1102 with the DC transform coefficient 212 at position 0, 0 at the upper left corner of the TU 210.
- each quantized transform coefficient 212 can be coded into binary values to obtain final compression bits 214 shown in Fig. 6 , including coding for significant coefficient levels.
- the absolute value of each quantized transform coefficient 212 can be coded separately from the sign of the quantized transform coefficient 212.
- Fig. 12 illustrates coding steps that deal with taking an absolute value of the quantized transform coefficients. As shown in Fig. 12 , at 1202 the absolute value of each quantized transform coefficient 212 can be taken to enable obtaining the coefficient level 222 for that quantized transform coefficient 212 at block 1204.
- the coefficient levels 222 obtained at block 1204 that are expected to occur with a higher frequency can be coded before coefficient levels 222 that are expected to occur with lower frequencies.
- coefficient levels 222 of 0, 1, or 2 can be expected to occur most frequently. Coding the coefficient levels 222 in three parts can identify the most frequently occurring coefficient levels 222, leaving more complex calculations for the coefficient levels 222 that can be expected to occur less frequently. In some embodiments, this can be done by coding the coefficient levels 222 in three parts.
- the coefficient level 222 of a quantized transform coefficient 212 can be checked to determine whether it is greater than one. If the coefficient level 222 is greater than one, the coefficient level 222 can be checked to determine whether it is greater than two.
- the coefficient level 222 can be subtracted by a threshold value 224 of three to obtain a symbol.
- the coefficient level 222 can be coded as three variables: "coeff_abs_level_greater1_flag,” “coeff_abs_level_greater2_flag,” and “coeff_abs_level_minus3.”
- "coeff_abs_level_greater1_flag” can be set to "1.” If “coeff_abs_level_greater1_flag” is set to "1” and the quantized transform coefficient 212 also has a coefficient level 222 of three or more, “coeff_abs_level_greater2_flag” can be set to "1.” If “coeff_abs_leve1_greater2_flag”
- Fig. 14 depicts an exemplary table of binary codewords 228 generated based on symbols 226 and parameter variables 230.
- the quantized transform coefficients 212 that occur less frequently and have coefficient levels 222 of three or more, as determined in the blocks of Fig. 12
- the quantized transform coefficient's symbol 226 can be converted to a binary codeword 228 that can be part of the final compression bits 214 generated as shown in Fig. 6 .
- the binary codeword 228 shown in Fig. 14 can be a bin string comprising one or more bins. Each bin can be a one bit binary element.
- Each symbol 226 can be coded by scanning through each subset 1102 or sub-block and converting each symbol 226 of the subset 1102 or sub-block in order according to the value of a parameter variable 230, and then moving to the symbols 226 of the next subset 1102 or sub-block.
- a diagram showing this coding progression is shown in Fig. 13 for the subsets 0 and 1 along the zig-zag lines of Fig. 11 .
- the current scanning position can be denoted by "n.”
- the parameter variable 230 can be a global variable that can be updated as each symbol 226 is coded.
- the parameter variable 230 can control the flatness of the codeword distribution.
- the parameter variable 230 can be any integer between 0 and N.
- N can be 3, such that the parameter variable 230 can be 0, 1, 2, or 3.
- the parameter variable 230 can be denoted as "cRiceParam" as illustrated in Fig. 14 .
- Fig. 15 provides a table illustrating how in some embodiments the parameter values 230 can be updated over time for each symbol 226.
- the parameter variable can be reset to zero at the beginning of each subset 1102 or sub-block, and can then be updated after each symbol 226 is converted to a binary codeword 228.
- the parameter variables 230 can be updated based on the last value of the parameter variable 230 and the value of the last converted symbol 226.
- the parameter variable 230 can be initially set to zero, and then be updated after each symbol 226 is converted to a binary codeword 228 based on the last value of the parameter variable 230 and the value of the last converted symbol 226, including symbols 226 in previous subsets.
- the parameter variable 230 can be updated based on a table of prediction values, such as the table 1504 shown in Fig. 15 .
- converting the symbol 226 with a lower parameter variable 230 can result in a binary codeword 228 having fewer bits than converting the same symbol 226 with a higher parameter variable 230.
- using a parameter variable 230 of 0 to convert a symbol 226 of 0 can result in the binary codeword 228 of "0" having 1 bit
- using the parameter variable 230 of 1 to convert the symbol 226 of 0 can result in the binary codeword 228 of "00" having 2 bits.
- converting the symbol 226 with a higher parameter variable 230 can result in a binary codeword 228 having fewer bits than converting the same symbol 226 with a lower parameter variable 230.
- using a parameter variable 230 of 0 to convert a symbol 226 of 6 can result in the binary codeword 228 of "1111110" having 7 bits, while using the parameter variable 230 of 2 to convert the symbol 226 of 6 can result in the binary codeword 228 of "1010" having 4 bits.
- Fig. 16 depicts an embodiment of the elements contained in a binary codeword 228.
- the binary codeword 228 can have a main prefix 1602 comprising one or more bins.
- the binary codeword 228 can also have a main suffix 1604 comprising one or more bins.
- the main suffix 1604 can be concatenated with the end of the main prefix 1602 to obtain the binary codeword 228 for the symbol 226.
- the main suffix 1604 can be absent, and the binary codeword 228 can be the main prefix 1602.
- the main prefix 1602 for the symbol 226 can be determined by a Truncated Rice binarization process that takes the symbol 226, the parameter variable 230, and a maximum symbol value 232, illustrated in Figs. 17A and 17B , as inputs, and outputs a Truncated Rice bin string 1606 as the main prefix 1602.
- Fig. 18 depicts a portion of the table depicted in Fig. 14 for symbols 226 ranging from 40 to 43 using the parameter variable 230 cRiceParam set to 2.
- Each possible value of the parameter variable 230 can have an associated maximum symbol value 232.
- the maximum symbol value 232 for a particular parameter variable 230 can be denoted as "cTRMax.”
- Figs. 17A and 17B depicts exemplary tables of maximum symbol values 232 "cTRMax" for parameter variables 230 "cRiceParam.”
- the Truncated Rice bin string 1606 can have a Truncated Rice prefix 1608 comprising one or more bins. In some situations and/or embodiments, the Truncated Rice bin string 1606 can also have a Truncated Rice suffix 1610 comprising one or more bins. The Truncated Rice suffix 1610 can be concatenated with the end of the Truncated Rice prefix 1608 to obtain the Truncated Rice bin string 1606 for the symbol 226, which can be used as the main prefix 1602. In other situations and/or embodiments, the Truncated Rice suffix 1610 can be absent, and the Truncated Rice bin string 1606 can be the Truncated Rice prefix 1608.
- Fig. 19 depicts a flow chart of a method for determining the binary codeword 228 for each symbol 226.
- the symbol 226 can be accepted as an input.
- a binarization element and a unary maximum value can be determined based on the value of the symbol 226.
- the value of the symbol 226 and the maximum symbol value 232 can be compared to determine which is smaller, and the smaller of the two values can be right arithmetic shifted by a number of binary digits equal to the value of the parameter variable 230.
- the value of the symbol 226 and the maximum symbol value 232 can be right arithmetic shifted by a number of binary digits equal to the value of the parameter variable 230 to obtain the binarization element.
- the value of the symbol 226 can be expressed as "synElVal”
- the right arithmetic shift to determine the binarization element can be expressed as "min(synEIVal, cTRMax) >> cRiceParam.”
- Performing a right arithmetic shift of a first value by a number of binary digits equal to the value of a second value can be the equivalent of dividing the first value by 2 ⁇ second value, and rounding the result toward negative infinity to obtain an integer.
- the unary maximum value can be the maximum possible value of the binarization element.
- the unary maximum value can be determined by performing a right arithmetic shift of the maximum symbol value 232 by a number of binary digits equal to the value of the parameter variable 230.
- the right arithmetic shift to determine the unary maximum value can be expressed as "cTRMax >> cRiceParam.”
- the unary maximum value can be denoted as "cMax.”
- the binarization element can be compared to the unary maximum value. If the binarization element is less than the unary maximum value, the binarization element can be converted to a Truncated Rice prefix 1608 ( Fig. 16 ) and provided to box 1912 using a Unary Binarization Process at 1908. If the binarization element is equal to the unary maximum value, the binarization element can be converted to Truncated Rice prefix 1608 and provided to box 1912 using a Truncated Unary Binarization Process at 1910.
- the Truncated Rice prefix 1608 can be a bin string comprising a number of bins equal to the value of the binarization element plus one. Bins in the bin string can be at positions 0 to N. For positions less than the value of the binarization element, the bins can be set to "1.” For the last position, the position equal to the value of the binarization element, the bin can be set to "0.”
- Fig. 20 depicts a table 2000 of bin strings for binarization elements with values ranging from zero to five, indexed by the bin position (binIdx).
- the Truncated Rice prefix 1608 for a binarization element of 4 can be a bin string of 11110
- the Truncated Rice prefix 1608 for a binarization element of 2 can be a bin string of 110.
- the Truncated Rice prefix 1608 can be a bin string having a number of bins equal to the unary maximum value, with all bins set to "1.”
- the Truncated Rice prefix 1608 for a binarization element of 8 can have a length of eight bins with all eight bins set to "1,” such as 11111111. It should be noted that in some conventional systems the maximum symbol values 232 shown in Fig. 17A are used, with the maximum symbol value of "7" for the parameter variable "0".
- the value of the Truncated Rice prefix 1608 can be output by the Unary Binarization Process at 1908 or the Truncated Unary Binarization Process at 1910.
- the parameter variable 230 can be checked to determine if the parameter variable 230 is greater than zero. If the value of the parameter variable 230 is zero, the Truncated Rice prefix 1608 ( Fig. 16 ) can be used as the entire main prefix 1602 at 1920. If the value of the parameter variable 230 is greater than zero, the Truncated Rice suffix 1610 ( Fig. 16 ) can be determined at 1916.
- the Truncated Rice suffix 1610 can be a bin string having a length equal to the value of the parameter variable 230.
- the symbol 226 can be right arithmetic shifted by a number of binary digits equal to the parameter variable 230.
- the result can be left arithmetic shifted by a number of binary digits equal to the parameter variable 230.
- Performing a left arithmetic shift of a first value by a number of binary digits equal to the value of a second value can be the equivalent of multiplying the first value by 2 ⁇ second value.
- the result of the left arithmetic shift can be subtracted from the value of the symbol 226, and the binary representation of this result having the same number of bins as the value of the parameter variable 230 can be the Truncated Rice suffix 1610.
- the operation at 1916 can be expressed as "synElVal - ((synElVal >> cRiceParam) « cRiceParam).”
- the Truncated Rice suffix 1610 can be concatenated to the end of the Truncated Rice prefix 1608 to determine the full Truncated Rice bin string 1606, which can be used as the main prefix 1602.
- a comparison string can be a string of one or more bins all set to "1," with the number of bins in the comparison string being determined by right arithmetic shifting the maximum symbol value 232 by a number of binary digits equal to the parameter variable 230, and then adding the value of the parameter variable 230.
- the determination of the length of the comparison string can be expressed as "(cTRMax >> cRiceParam) + cRiceParam.” If the main prefix 1602 is the same as the comparison string, the main suffix 1604 can be determined at 1924 and concatenated to the end of the main prefix 1602 at 1926 to determine the final binary codeword 228 bin string for the symbol 226 at 1928.
- the main suffix 1604 can be the 0th order Exponential-Golomb (Exp-Golomb) code for the value of the symbol 226 minus the maximum symbol value 232 minus one.
- the operation at 1824 can be expressed as the 0th order Exp-Golomb code for "coeff abs_level_minus3[n] - cTRMax - 1.” If the main prefix 1602 is different from the comparison string, the main suffix 1604 can be absent and the main prefix 1602 can be used as the final binary codeword 228 bin string for the symbol 226. The final binary codeword can then be output at 1928.
- execution of the sequences of instructions required to practice the embodiments may be performed by a computer system 2100 as shown in Fig. 21 .
- execution of the sequences of instructions is performed by a single computer system 2100.
- two or more computer systems 2100 coupled by a communication link 2115 may perform the sequence of instructions in coordination with one another.
- a description of only one computer system 2100 may be presented herein, it should be understood that any number of computer systems 2100 may be employed.
- FIG. 20 is a block diagram of the functional components of a computer system 2100.
- the term computer system 2100 is broadly used to describe any computing device that can store and independently run one or more programs.
- the computer system 2100 may include a communication interface 2114 coupled to the bus 2106.
- the communication interface 2114 provides two-way communication between computer systems 2100.
- the communication interface 2114 of a respective computer system 2100 transmits and receives electrical, electromagnetic or optical signals that include data streams representing various types of signal information, e.g., instructions, messages and data.
- a communication link 2115 links one computer system 2100 with another computer system 2100.
- the communication link 2115 may be a LAN, an integrated services digital network (ISDN) card, a modem, or the Internet.
- ISDN integrated services digital network
- a computer system 2100 may transmit and receive messages, data, and instructions, including programs, i.e., application, code, through its respective communication link 2115 and communication interface 2114.
- Received program code may be executed by the respective processor(s) 2107 as it is received, and/or stored in the storage device 2110, or other associated non-volatile media, for later execution.
- the computer system 2100 operates in conjunction with a data storage system 2131, e.g., a data storage system 2131 that contains a database 2132 that is readily accessible by the computer system 2100.
- the computer system 2100 communicates with the data storage system 2131 through a data interface 2133.
- Computer system 2100 can include a bus 2106 or other communication mechanism for communicating the instructions, messages and data, collectively, information, and one or more processors 2107 coupled with the bus 2106 for processing information.
- Computer system 2100 also includes a main memory 2108, such as a random access memory (RAM) or other dynamic storage device, coupled to the bus 2106 for storing dynamic data and instructions to be executed by the processor(s) 2107.
- the computer system 2100 may further include a read only memory (ROM) 2109 or other static storage device coupled to the bus 2106 for storing static data and instructions for the processor(s) 2107.
- a storage device 2110 such as a magnetic disk or optical disk, may also be provided and coupled to the bus 2106 for storing data and instructions for the processor(s) 2107.
- a computer system 2100 may be coupled via the bus 2106 to a display device 2111, such as an LCD screen.
- a display device 2111 such as an LCD screen.
- An input device 2112 e.g., alphanumeric and other keys, is coupled to the bus 2106 for communicating information and command selections to the processor(s) 2107.
- an individual computer system 2100 performs specific operations by their respective processor(s) 2107 executing one or more sequences of one or more instructions contained in the main memory 2108. Such instructions may be read into the main memory 2108 from another computer-usable medium, such as the ROM 2109 or the storage device 2110. Execution of the sequences of instructions contained in the main memory 2108 causes the processor(s) 2107 to perform the processes described herein.
- hard-wired circuitry may be used in place of or in combination with software instructions. Thus, embodiments are not limited to any specific combination of hardware circuitry and/or software.
Description
- This Application claims priority under 35 U.S.C. §119(e) from earlier filed United States Provisional Application Serial No.
61/557,403, filed November 8, 2011 - The present disclosure relates to the field of video compression, particularly video compression using High Efficiency Video Coding (HEVC) that employ block processing.
-
Fig. 1 depicts acontent distribution system 100 comprising acoding system 110 and adecoding system 140 that can be used to transmit and receive HEVC data. In some embodiments, thecoding system 110 can comprise aninput interface 130, acontroller 111, acounter 112, aframe memory 113, anencoding unit 114, atransmitter buffer 115 and anoutput interface 135. Thedecoding system 140 can comprise areceiver buffer 150, adecoding unit 151, aframe memory 152 and acontroller 153. Thecoding system 110 and thedecoding system 140 can be coupled with each other via a transmission path which can carry acompressed bitstream 105. Thecontroller 111 of thecoding system 110 can control the amount of data to be transmitted on the basis of the capacity of thereceiver buffer 150 and can include other parameters such as the amount of data per a unit of time. Thecontroller 111 can control theencoding unit 114 to prevent the occurrence of a failure of a received signal decoding operation of thedecoding system 140. Thecontroller 111 can be a processor or include, by way of a non-limiting example, a microcomputer having a processor, a random access memory and a read only memory. -
Source pictures 120 supplied from, by way of a non-limiting example, a content provider can include a video sequence of frames including source pictures in a video sequence. Thesource pictures 120 can be uncompressed or compressed. If thesource pictures 120 are uncompressed, thecoding system 110 can have an encoding function. If thesource pictures 120 are compressed, thecoding system 110 can have a transcoding function. Coding units can be derived from the source pictures utilizing thecontroller 111. Theframe memory 113 can have a first area that can be used for storing the incoming frames from thesource pictures 120 and a second area that can be used for reading out the frames and outputting them to theencoding unit 114. Thecontroller 111 can output an areaswitching control signal 123 to theframe memory 113. The areaswitching control signal 123 can indicate whether the first area or the second area is to be utilized. - The
controller 111 can output an encoding control signal 124 to theencoding unit 114. The encoding control signal 124 can cause theencoding unit 114 to start an encoding operation, such as preparing the Coding Units based on a source picture. In response to the encoding control signal 124 from thecontroller 111, theencoding unit 114 can begin to read out the prepared Coding Units to a high-efficiency encoding process, such as a prediction coding process or a transform coding process which process the prepared Coding Units generating video compression data based on the source pictures associated with the Coding Units. - The
encoding unit 114 can package the generated video compression data in a packetized elementary stream (PES) including video packets. Theencoding unit 114 can map the video packets into an encodedvideo signal 122 using control information and a program time stamp (PTS) and the encodedvideo signal 122 can be transmitted to thetransmitter buffer 115. - The encoded
video signal 122, including the generated video compression data, can be stored in thetransmitter buffer 115. Theinformation amount counter 112 can be incremented to indicate the total amount of data in thetransmitter buffer 115. As data is retrieved and removed from the buffer, thecounter 112 can be decremented to reflect the amount of data in thetransmitter buffer 115. The occupiedarea information signal 126 can be transmitted to thecounter 112 to indicate whether data from theencoding unit 114 has been added or removed from thetransmitter buffer 115 so thecounter 112 can be incremented or decremented. Thecontroller 111 can control the production of video packets produced by theencoding unit 114 on the basis of the occupiedarea information 126 which can be communicated in order to anticipate, avoid, prevent, and/or detect an overflow or underflow from taking place in thetransmitter buffer 115. - The
information amount counter 112 can be reset in response to a preset signal 128 generated and output by thecontroller 111. After theinformation counter 112 is reset, it can count data output by theencoding unit 114 and obtain the amount of video compression data and/or video packets which have been generated. Theinformation amount counter 112 can supply thecontroller 111 with an information amount signal 129 representative of the obtained amount of information. Thecontroller 111 can control theencoding unit 114 so that there is no overflow at thetransmitter buffer 115. - In some embodiments, the
decoding system 140 can comprise aninput interface 170, areceiver buffer 150, acontroller 153, aframe memory 152, adecoding unit 151 and anoutput interface 175. Thereceiver buffer 150 of thedecoding system 140 can temporarily store thecompressed bitstream 105, including the received video compression data and video packets based on the source pictures from thesource pictures 120. Thedecoding system 140 can read the control information and presentation time stamp information associated with video packets in the received data and output aframe number signal 163 which can be applied to thecontroller 153. Thecontroller 153 can supervise the counted number of frames at a predetermined interval. By way of a non-limiting example, thecontroller 153 can supervise the counted number of frames each time thedecoding unit 151 completes a decoding operation. - In some embodiments, when the
frame number signal 163 indicates thereceiver buffer 150 is at a predetermined capacity, thecontroller 153 can output adecoding start signal 164 to thedecoding unit 151. When theframe number signal 163 indicates thereceiver buffer 150 is at less than a predetermined capacity, thecontroller 153 can wait for the occurrence of a situation in which the counted number of frames becomes equal to the predetermined amount. Thecontroller 153 can output thedecoding start signal 164 when the situation occurs. By way of a non-limiting example, thecontroller 153 can output thedecoding start signal 164 when theframe number signal 163 indicates thereceiver buffer 150 is at the predetermined capacity. The encoded video packets and video compression data can be decoded in a monotonic order (i.e., increasing or decreasing) based on presentation time stamps associated with the encoded video packets. - In response to the
decoding start signal 164, thedecoding unit 151 can decode data amounting to one picture associated with a frame and compressed video data associated with the picture associated with video packets from thereceiver buffer 150. Thedecoding unit 151 can write a decodedvideo signal 162 into theframe memory 152. Theframe memory 152 can have a first area into which the decoded video signal is written, and a second area used for reading out decodedpictures 160 to theoutput interface 175. - In various embodiments, the
coding system 110 can be incorporated or otherwise associated with a transcoder or an encoding apparatus at a headend and thedecoding system 140 can be incorporated or otherwise associated with a downstream device, such as a mobile device, a set top box or a transcoder. - The
coding system 110 anddecoding system 140 can be utilized separately or together to encode and decode video data according to various coding formats, including High Efficiency Video Coding (HEVC). HEVC is a block based hybrid spatial and temporal predictive coding scheme. In HEVC, input images, such as video frames, can be divided into square blocks called Largest Coding Units (LCUs) 200, as shown inFig. 2 . LCUs 200 can each be as large as 128x128 pixels, unlike other coding schemes that break input images into macroblocks of 16x16 pixels. As shown inFig. 3 , eachLCU 200 can be partitioned by splitting theLCU 200 into four Coding Units (CUs) 202. CUs 202 can be square blocks each a quarter size of the LCU 200. EachCU 202 can be further split into foursmaller CUs 202 each a quarter size of thelarger CU 202. By way of a non-limiting example, theCU 202 in the upper right corner of the LCU 200 depicted inFig. 3 can be divided into foursmaller CUs 202. In some embodiments, thesesmaller CUs 202 can be further split into even smaller sized quarters, and this process of splittingCUs 202 intosmaller CUs 202 can be completed multiple times. - With higher and higher video data density, what is needed are further improved ways to code the CUs so that large input images and/or macroblocks can be rapidly, efficiently and accurately encoded and decoded.
- The present invention provides an improved system for HEVC. In embodiments for the system, a method of determining binary codewords for transform coefficients in an efficient mariner is provided. Codewords for the transform coefficients within transform units (TUs) that are subdivisions of the
CUs 202 are used in encoding input images and/or macroblocks. - In one embodiment, a method is provided that creates a truncated rice bin string used in the codeword for a transform coefficient. The method in the embodiment comprises providing a symbol, providing a parameter variable for the symbol, providing a maximum symbol value associated with the parameter variable, determining the truncated rice prefix for the symbol, the truncated rice prefix comprising one or more bins, determining a truncated rice suffix for the symbol when the parameter variable is greater than zero, the truncated rice suffix comprising one or more bins, determining a main prefix for the symbol by setting the main prefix to the truncated rice prefix when the parameter variable is equal to zero, or concatenating the end of the truncated rice prefix with the truncated rice suffix when the parameter variable is greater than zero, determining a main suffix for the symbol when the main prefix is the same as a comparison string, the main suffix comprising one or more bins, and determining a binary codeword for the symbol by setting the binary codeword to the main prefix when the main prefix is not the same as the comparison string, or concatenating the end of the main prefix with the main suffix when the main prefix is the same as the comparison string, wherein said maximum symbol value is eight when said parameter variable is zero;
said maximum symbol value is twenty when said parameter variable is one;
said maximum symbol value is fourty when said parameter variable is two;
said maximum symbol value is seventy when said parameter variable is three. - In another embodiment, the invention includes a video encoder that uses a truncated rice prefix to create a codeword for identifying a transform coefficient. The video encoder includes a memory configured to store a symbol, a parameter variable, and a maximum symbol, and a processor coupled with the memory, wherein the processor is configured to determine a binary codeword for the symbol by determining the truncated rice prefix for the symbol, the truncated rice prefix comprising one or more bins, determining a truncated rice suffix for the symbol when the parameter variable is greater than zero, the truncated rice suffix comprising one or more bins, determining a main prefix for the symbol by setting the main prefix to the truncated rice prefix when the parameter variable is equal to zero, or concatenating the end of the truncated rice prefix with the truncated rice suffix when the parameter variable is greater than zero, determining a main suffix for the symbol when the main prefix is the same as a comparison string, the main suffix comprising one or more bins, and determining the binary codeword by setting the binary codeword to the main prefix when the main prefix is not the same as the comparison string, or concatenating the end of the main prefix with the main suffix when the main prefix is the same as the comparison string, wherein said maximum symbol value is eight when said parameter variable is zero;
said maximum symbol value is twenty when said parameter variable is one;
said maximum symbol value is fourty when said parameter variable is two;
said maximum symbol value is seventy when said parameter variable is three. - Further details of the present invention are explained with the help of the attached drawings in which:
-
Fig. 1 depicts an embodiment of a content distribution system; -
Fig. 2 depicts an embodiment of an input image divided into Large Coding Units; -
Fig. 3 depicts an embodiment of a Large Coding Unit divided into Coding Units; -
Fig. 4 depicts a quadtree representation of a Large Coding Unit divided into Coding Units; -
Fig. 5 depicts possible exemplary arrangements of Prediction Units within a Coding Unit; -
Fig. 6 depicts a block diagram of an embodiment of a method for encoding and/or decoding a Prediction Unit; -
Fig. 7 depicts an exemplary embodiment of a Coding Unit divided into Prediction Units and Transform Units; -
Fig. 8 depicts an exemplary embodiment of a quadtree representation of a Coding Unit divided into Transform Units; -
Fig. 9 depicts an embodiment of a method of performing context-based adaptive binary arithmetic coding; -
Fig. 10 depicts an exemplary embodiment of a significance map; -
Fig. 11 depicts an embodiment of a reverse zig-zag scan of transform coefficients within a Transform Unit and subsets of transform coefficients; -
Fig. 12 depicts an embodiment of a method of obtaining coefficient levels and symbols for transform coefficients; -
Fig. 13 depicts an embodiment of the scanning order of transform coefficients within subsets; -
Fig. 14 depicts an exemplary embodiment of a table of binary codewords generated based on symbols and parameter variables; -
Fig. 15 depicts an exemplary embodiment of an update table for updating the parameter variable; -
Fig. 16 depicts an embodiment of a binary codeword; -
Fig. 17A depicts a table of exemplary maximum symbol values associated with values of the parameter variable; -
Fig. 17B depicts a table of exemplary maximum symbol values associated with values of the parameter variable; -
Fig. 18 depicts a portion ofFig. 14 generated using different maximum lengths. -
Fig. 19 depicts an embodiment of a flow chart of a method for determining a binary codeword for a symbol; -
Fig. 20 depicts a table of bin strings determined by a Unary Binarization Process; and -
Fig. 21 depicts an exemplary embodiment of computer hardware. - In HEVC, an input image, such as a video frame, is broken up into CUs that are then identified in code. The CUs are then further broken into sub-units that are coded as will be described subsequently.
- Initially for the coding a quadtree data representation can be used to describe the partition of a
LCU 200. The quadtree representation can have nodes corresponding to theLCU 200 andCUs 202. At each node of the quadtree representation, a flag "1" can be assigned if theLCU 200 orCU 202 is split into fourCUs 202. If the node is not split intoCUs 202, a flag "0" can be assigned. By way of a non-limiting example, the quadtree representation shown inFig. 4 can describe the LCU partition shown inFig. 3 , in which theLCU 200 is split into fourCUs 202, and thesecond CU 202 is split into foursmaller CUs 202. The binary data representation of the quadtree can be a CU split flag that can be coded and transmitted as overhead, along with other data such as a skip mode flag, merge mode flag, and the PU coding mode described subsequently. By way of a non-limiting example, the CU split flag quadtree representation shown inFig. 4 can be coded as the binary data representation "10100." - At each leaf of the quadtree, the
final CUs 202 can be broken up into one or more blocks called prediction units (PUs) 204.PUs 204 can be square or rectangular. ACU 202 with dimensions of 2Nx2N can have one of the four exemplary arrangements ofPUs 204 shown inFig. 5 , withPUs 204 having dimensions of 2Nx2N, 2NxN, Nx2N, or NxN. - A PU can be obtained through spatial or temporal prediction. Temporal prediction is related to inter mode pictures. Spatial prediction relates to intra mode pictures. The
PUs 204 of eachCU 202 can, thus, be coded in either intra mode or inter mode. Features of coding relating to intra mode and inter mode pictures is described in the paragraphs to follow. - Intra mode coding can use data from the current input image, without referring to other images, to code an I picture. In intra mode the
PUs 204 can be spatially predictive coded. EachPU 204 of aCU 202 can have its own spatial prediction direction. Spatial prediction directions can be horizontal, vertical, 45-degree diagonal, 135 degree diagonal, DC, planar, or any other direction. The spatial prediction direction for thePU 204 can be coded as a syntax element. In some embodiments, brightness information (Luma) and color information (Chroma) for thePU 204 can be predicted separately. In some embodiments, the number of Luma intra prediction modes for 4x4, 8x8, 16x16, 32x32, and 64x64 blocks can be 18, 35, 35, 35, and 4 respectively. In alternate embodiments, the number of Luma intra prediction modes for blocks of any size can be 35. An additional mode can be used for the Chroma intra prediction mode. In some embodiments, the Chroma prediction mode can be called "IntraFromLuma." - Inter mode coding can use data from the current input image and one or more reference images to code "P" pictures and/or "B" pictures. In some situations and/or embodiments, inter mode coding can result in higher compression than intra mode coding. In
inter mode PUs 204 can be temporally predictive coded, such that eachPU 204 of theCU 202 can have one or more motion vectors and one or more associated reference images. Temporal prediction can be performed through a motion estimation operation that searches for a best match prediction for thePU 204 over the associated reference images. The best match prediction can be described by the motion vectors and associated reference images. P pictures use data from the current input image and one or more previous reference images. B pictures use data from the current input image and both previous and subsequent reference images, and can have up to two motion vectors. The motion vectors and reference pictures can be coded in the HEVC bitstream. In some embodiments, the motion vectors can be coded as syntax elements "MV," and the reference pictures can be coded as syntax elements "refldx." In some embodiments, inter mode coding can allow both spatial and temporal predictive coding. -
Fig. 6 depicts a block diagram of how aPU 204, x, can be encoded and/or decoded. At 606 a predictedPU 206, x', that is predicted by intra mode at 602 or inter mode at 604, as described above, can be subtracted from thecurrent PU 204, x, to obtain aresidual PU 208, e. At 608 theresidual PU 208, e, can be transformed with a block transform into one or more transform units (TUs) 210, E. EachTU 210 can comprise one ormore transform coefficients 212. In some embodiments, the block transform can be square. In alternate embodiments, the block transform can be non-square. - As shown in
Fig. 7 , in HEVC, a set of block transforms of different sizes can be performed on aCU 202, such that somePUs 204 can be divided intosmaller TUs 210 andother PUs 204 can haveTUs 210 the same size as thePU 204. Division ofCUs 202 andPUs 204 intoTUs 210 can be shown by a quadtree representation. By way of a non-limiting example, the quadtree representation shown inFig. 8 depicts the arrangement ofTUs 210 within theCU 202 shown inFig. 7 . - Referring back to
Fig. 6 , at 610 thetransform coefficients 212 of theTU 210, E, can be quantized into one of a finite number of possible values. In some embodiments, this is a lossy operation in which data lost by quantization may not be recoverable. After thetransform coefficients 212 have been quantized, at 612 the quantizedtransform coefficients 212 can be entropy coded, as discussed below, to obtain thefinal compression bits 214. - At 614 the quantized
transform coefficients 212 can be dequantized into dequantized transform coefficients 216 E'. At 616 the dequantized transform coefficients 216 E' can then be inverse transformed to reconstruct theresidual PU 218, e'. At 618 the reconstructedresidual PU 218, e', can then be added to acorresponding prediction PU 206, x', obtained through either spatial prediction at 602 or temporal prediction at 604, to obtain a reconstructed PU 220, x". At 620 a deblocking filter can be used on reconstructed PUs 220, x", to reduce blocking artifacts. At 620 a sample adaptive offset process is also provided that can be conditionally performed to compensate the pixel value offset between reconstructed pixels and original pixels. Further, at 620, an adaptive loop filter can be conditionally used on the reconstructed PUs 220, x", to reduce or minimize coding distortion between input and output images. - If the reconstructed image is a reference image that will be used for future temporal prediction in inter mode coding, the reconstructed images can be stored in a
reference buffer 622. Intra mode coded images can be a possible point where decoding can begin without needing additional reconstructed images. - HEVC can use entropy coding schemes during
step 612 such as context-based adaptive binary arithmetic coding (CABAC). The coding process for CABAC is shown inFig. 9 . At 902, the position of the last significant transform coefficient of thetransform units 210 can be coded. Referring back toFig. 6 , the quantized transform coefficients are created by quantizing theTUs 210. Transformcoefficients 212 can be significant or insignificant.Fig. 10 shows asignificance map 1002 of thetransform coefficients 212.Insignificant transform coefficients 212 can have a quantized value of zero, whilesignificant transform coefficients 212 can have a quantized value of one or more. In some embodiments,significant transform coefficients 212 can also be known as non-zeroquantized transform coefficients 212. If aTU 210 comprises one or moresignificant transform coefficients 212, the coordinates of the lastsignificant transform coefficient 212 along a forward zig-zag coding scan from the top left corner of theTU 210 to the lower right corner of theTU 210, as shown inFig. 10 , can be coded. In alternate embodiments, thesignificant transform coefficients 212 can be scanned along an inverse wavefront scan, inverse horizontal scan, inverse vertical scan, or any other scan order. In some embodiments, these coordinates can be coded as the syntax elements "last_significant_coeff_y" and "Iast_significant_coeff_x." By way of a non-limiting example,Fig. 10 depicts the position of the lastsignificant transform 212b within aTU 210 which is being coded inblock 902 ofFig. 9 . - At
block 904 inFig. 9 , thesignificance map 1002 can be coded to indicate the positions of each of thesignificant transform coefficients 212 in theTU 210. Asignificance map 1002 can comprise a binary element for each position in theTU 210. The binary element can be coded as "0" to indicate that thetransform coefficient 212 at that position is not significant. The binary element can be coded as "1" to indicate that thetransform coefficient 212 at that position is significant. -
Fig. 11 illustrates how the quantizedtransform coefficients 212 of theTUs 210 can be divided into groups. In some embodiments, the groups can be sub-blocks. Sub-blocks can be square blocks of 16 quantizedtransform coefficients 212. In other embodiments, the groups can besubsets 1102. Subsets 1102 can comprise 16 quantizedtransform coefficients 212 that are consecutive along the scan order of a backwards zig-zag scan, as shown inFig. 11 . The first subset can be thesubset 1102 that includes the lastsignificant transform coefficient 212b, regardless of where the lastsignificant transform coefficient 212b is within the subset. By way of a non-limiting example, the lastsignificant transform coefficient 212b can be the14th transform coefficient 212 in the subset, followed by two insignificant transform coefficients. - In some situations and/or embodiments, there can be one or more groups of 16 quantized
transform coefficients 212 that do not contain a significant transform coefficient along the reverse scan order prior to the group containing the lastsignificant transform coefficient 212b. In these situations and/or embodiments, the first subset can be thesubset 1102 containing the lastsignificant transform coefficient 212b, and any groups before thefirst subset 1102 are not considered part of asubset 1102. By way of a non-limiting example, inFig. 11 , thefirst subset 1102 "Subset 0" is the second grouping of 16transform coefficients 212 along the reverse zig-zap scan order, while the group of 16transform coefficients 212 at the lower right comer of theTU 210 are not part of asubset 1102 because none of those transformcoefficients 212 are significant. In some embodiments, thefirst subset 1102 can be denoted as "subset 0," andadditional subsets 1102 can be denoted as "subset 1," "subset 2," up to "subset N." Thelast subset 1102 can be thesubset 1102 with the DC transformcoefficient 212 atposition TU 210. - Referring back to
Fig. 9 in thelast block 906, eachquantized transform coefficient 212 can be coded into binary values to obtainfinal compression bits 214 shown inFig. 6 , including coding for significant coefficient levels. During coding the absolute value of eachquantized transform coefficient 212 can be coded separately from the sign of the quantizedtransform coefficient 212.Fig. 12 illustrates coding steps that deal with taking an absolute value of the quantized transform coefficients. As shown inFig. 12 , at 1202 the absolute value of eachquantized transform coefficient 212 can be taken to enable obtaining thecoefficient level 222 for that quantizedtransform coefficient 212 atblock 1204. - The
coefficient levels 222 obtained atblock 1204 that are expected to occur with a higher frequency can be coded beforecoefficient levels 222 that are expected to occur with lower frequencies. By way of a non-limiting example, in some embodiments coefficientlevels 222 of 0, 1, or 2 can be expected to occur most frequently. Coding thecoefficient levels 222 in three parts can identify the most frequently occurringcoefficient levels 222, leaving more complex calculations for thecoefficient levels 222 that can be expected to occur less frequently. In some embodiments, this can be done by coding thecoefficient levels 222 in three parts. First, thecoefficient level 222 of aquantized transform coefficient 212 can be checked to determine whether it is greater than one. If thecoefficient level 222 is greater than one, thecoefficient level 222 can be checked to determine whether it is greater than two. - At 1206 in
Fig. 12 , if thecoefficient level 222 is greater than two, thecoefficient level 222 can be subtracted by athreshold value 224 of three to obtain a symbol. By way of a non-limiting example, in some embodiments, thecoefficient level 222 can be coded as three variables: "coeff_abs_level_greater1_flag," "coeff_abs_level_greater2_flag," and "coeff_abs_level_minus3." Forquantized transform coefficients 212 with acoefficient level 222 of two or more, "coeff_abs_level_greater1_flag" can be set to "1." If "coeff_abs_level_greater1_flag" is set to "1" and thequantized transform coefficient 212 also has acoefficient level 222 of three or more, "coeff_abs_level_greater2_flag" can be set to "1." If "coeff_abs_leve1_greater2_flag" is set to "1," thethreshold value 224 of three can be subtracted from thecoefficient level 222 to get the quantized transform coefficient'ssymbol 226, coded as "coeff_abs_level_minus3." In alternate embodiments, thecoefficient level 222 can be coded in a different number of parts, and/or thethreshold value 224 can be an integer other than three. -
Fig. 14 depicts an exemplary table ofbinary codewords 228 generated based onsymbols 226 andparameter variables 230. For the quantizedtransform coefficients 212 that occur less frequently and have coefficientlevels 222 of three or more, as determined in the blocks ofFig. 12 , the quantized transform coefficient'ssymbol 226 can be converted to abinary codeword 228 that can be part of thefinal compression bits 214 generated as shown inFig. 6 . Thebinary codeword 228 shown inFig. 14 can be a bin string comprising one or more bins. Each bin can be a one bit binary element. Eachsymbol 226 can be coded by scanning through eachsubset 1102 or sub-block and converting eachsymbol 226 of thesubset 1102 or sub-block in order according to the value of aparameter variable 230, and then moving to thesymbols 226 of thenext subset 1102 or sub-block. A diagram showing this coding progression is shown inFig. 13 for thesubsets Fig. 11 . In some embodiments, the current scanning position can be denoted by "n." - Referring back to
Fig. 14 , theparameter variable 230 can be a global variable that can be updated as eachsymbol 226 is coded. Theparameter variable 230 can control the flatness of the codeword distribution. In some embodiments, theparameter variable 230 can be any integer between 0 and N. By way of a non-limiting example, in some embodiments N can be 3, such that theparameter variable 230 can be 0, 1, 2, or 3. In some embodiments, theparameter variable 230 can be denoted as "cRiceParam" as illustrated inFig. 14 . -
Fig. 15 provides a table illustrating how in some embodiments the parameter values 230 can be updated over time for eachsymbol 226. To determine updates, in some embodiments, the parameter variable can be reset to zero at the beginning of eachsubset 1102 or sub-block, and can then be updated after eachsymbol 226 is converted to abinary codeword 228. Theparameter variables 230 can be updated based on the last value of theparameter variable 230 and the value of the last convertedsymbol 226. In alternate embodiments, theparameter variable 230 can be initially set to zero, and then be updated after eachsymbol 226 is converted to abinary codeword 228 based on the last value of theparameter variable 230 and the value of the last convertedsymbol 226, includingsymbols 226 in previous subsets. In some embodiments, theparameter variable 230 can be updated based on a table of prediction values, such as the table 1504 shown inFig. 15 . - In some situations and/or embodiments, converting the
symbol 226 with alower parameter variable 230 can result in abinary codeword 228 having fewer bits than converting thesame symbol 226 with ahigher parameter variable 230. By way of a non-limiting example, as shown by the table depicted inFig. 14 , using aparameter variable 230 of 0 to convert asymbol 226 of 0 can result in thebinary codeword 228 of "0" having 1 bit, while using theparameter variable 230 of 1 to convert thesymbol 226 of 0 can result in thebinary codeword 228 of "00" having 2 bits. - In other situations and/or embodiments, converting the
symbol 226 with ahigher parameter variable 230 can result in abinary codeword 228 having fewer bits than converting thesame symbol 226 with alower parameter variable 230. By way of a non-limiting example, as shown in the table depicted inFig. 14 , using aparameter variable 230 of 0 to convert asymbol 226 of 6 can result in thebinary codeword 228 of "1111110" having 7 bits, while using theparameter variable 230 of 2 to convert thesymbol 226 of 6 can result in thebinary codeword 228 of "1010" having 4 bits. -
Fig. 16 depicts an embodiment of the elements contained in abinary codeword 228. Thebinary codeword 228 can have amain prefix 1602 comprising one or more bins. In some situations and/or embodiments, thebinary codeword 228 can also have amain suffix 1604 comprising one or more bins. Themain suffix 1604 can be concatenated with the end of themain prefix 1602 to obtain thebinary codeword 228 for thesymbol 226. In other situations and/or embodiments, themain suffix 1604 can be absent, and thebinary codeword 228 can be themain prefix 1602. - The
main prefix 1602 for thesymbol 226 can be determined by a Truncated Rice binarization process that takes thesymbol 226, theparameter variable 230, and amaximum symbol value 232, illustrated inFigs. 17A and 17B , as inputs, and outputs a TruncatedRice bin string 1606 as themain prefix 1602. In some conventional systems, such as the reference software HM4.0, the maximum length of themain prefix 1602 is controlled by the constant UInt g_auiGoRicePrefixLen[4] = { 8, 10, 11, 8}. However, thecodewords 228 generated by these values can introduce redundancies that can be decreased in part by using the constant UInt g_auiGoRicePrefixLen[4] = {8, 10, 10, 8}. By way of a non-limiting example,Fig. 18 depicts a portion of the table depicted inFig. 14 forsymbols 226 ranging from 40 to 43 using theparameter variable 230 cRiceParam set to 2. The left side of the table uses HM4.0 with UInt g_auiGoRicePrefixLen[4] = {8, 10, 11, 8} and generatescodewords 228 having more bits than thecodewords 228 on the right side of the table generated using UInt g_auiGoRicePrefixLen[4] = { 8, 10, 10, 8}. The table shown inFig. 14 usescodewords 228 generated with UInt g_auiGoRicePrefixLen[4] ={8, 10, 10, 8}. - Each possible value of the
parameter variable 230 can have an associatedmaximum symbol value 232. In some embodiments, themaximum symbol value 232 for a particular parameter variable 230 can be denoted as "cTRMax." By way of a non-limiting example,Figs. 17A and 17B depicts exemplary tables of maximum symbol values 232 "cTRMax" forparameter variables 230 "cRiceParam." - The Truncated
Rice bin string 1606 can have a TruncatedRice prefix 1608 comprising one or more bins. In some situations and/or embodiments, the TruncatedRice bin string 1606 can also have a TruncatedRice suffix 1610 comprising one or more bins. TheTruncated Rice suffix 1610 can be concatenated with the end of theTruncated Rice prefix 1608 to obtain the TruncatedRice bin string 1606 for thesymbol 226, which can be used as themain prefix 1602. In other situations and/or embodiments, theTruncated Rice suffix 1610 can be absent, and the TruncatedRice bin string 1606 can be theTruncated Rice prefix 1608. -
Fig. 19 depicts a flow chart of a method for determining thebinary codeword 228 for eachsymbol 226. At 1902, thesymbol 226 can be accepted as an input. At 1904, a binarization element and a unary maximum value can be determined based on the value of thesymbol 226. To determine the binarization element, the value of thesymbol 226 and themaximum symbol value 232 can be compared to determine which is smaller, and the smaller of the two values can be right arithmetic shifted by a number of binary digits equal to the value of theparameter variable 230. If the value of thesymbol 226 and themaximum symbol value 232 are equal, the value they share can be right arithmetic shifted by a number of binary digits equal to the value of theparameter variable 230 to obtain the binarization element. In some embodiments, the value of thesymbol 226 can be expressed as "synElVal," and the right arithmetic shift to determine the binarization element can be expressed as "min(synEIVal, cTRMax) >> cRiceParam." Performing a right arithmetic shift of a first value by a number of binary digits equal to the value of a second value can be the equivalent of dividing the first value by 2^second value, and rounding the result toward negative infinity to obtain an integer. - The unary maximum value can be the maximum possible value of the binarization element. The unary maximum value can be determined by performing a right arithmetic shift of the
maximum symbol value 232 by a number of binary digits equal to the value of theparameter variable 230. In some embodiments, the right arithmetic shift to determine the unary maximum value can be expressed as "cTRMax >> cRiceParam." In some embodiments, the unary maximum value can be denoted as "cMax." - At 1906 in
Fig. 19 , the binarization element can be compared to the unary maximum value. If the binarization element is less than the unary maximum value, the binarization element can be converted to a Truncated Rice prefix 1608 (Fig. 16 ) and provided tobox 1912 using a Unary Binarization Process at 1908. If the binarization element is equal to the unary maximum value, the binarization element can be converted to TruncatedRice prefix 1608 and provided tobox 1912 using a Truncated Unary Binarization Process at 1910. - In the Unary Binarization Process at 1908, the
Truncated Rice prefix 1608 can be a bin string comprising a number of bins equal to the value of the binarization element plus one. Bins in the bin string can be atpositions 0 to N. For positions less than the value of the binarization element, the bins can be set to "1." For the last position, the position equal to the value of the binarization element, the bin can be set to "0." -
Fig. 20 depicts a table 2000 of bin strings for binarization elements with values ranging from zero to five, indexed by the bin position (binIdx). By way of non-limiting examples as shown inFig. 20 , theTruncated Rice prefix 1608 for a binarization element of 4 can be a bin string of 11110, and theTruncated Rice prefix 1608 for a binarization element of 2 can be a bin string of 110. - Referring back to
Fig. 19 , in the Truncated Binarization Process at 1910, theTruncated Rice prefix 1608 can be a bin string having a number of bins equal to the unary maximum value, with all bins set to "1." By way of a non-limiting example, for a unary maximum value of 8, theTruncated Rice prefix 1608 for a binarization element of 8 can have a length of eight bins with all eight bins set to "1," such as 11111111. It should be noted that in some conventional systems the maximum symbol values 232 shown inFig. 17A are used, with the maximum symbol value of "7" for the parameter variable "0". However, this can introduce errors in some existing systems, as no process is specified in these existing systems when the symbol is greater than the unary maximum value. For example, in some conventional systems, when the maximum symbol value is 7, the symbol is 8, and the parameter variable is 0, the codeword generation can fail. In contrast, by using the maximum symbol values 232 shown inFig. 17B , with the maximum symbol value of "8" for the parameter variable "0", when the symbol is 8 the process can move to step 1910 and determine the Truncated Rice prefix of 11111111 as described above. - At 1912, the value of the
Truncated Rice prefix 1608 can be output by the Unary Binarization Process at 1908 or the Truncated Unary Binarization Process at 1910. - At 1914, the
parameter variable 230 can be checked to determine if theparameter variable 230 is greater than zero. If the value of theparameter variable 230 is zero, the Truncated Rice prefix 1608 (Fig. 16 ) can be used as the entiremain prefix 1602 at 1920. If the value of theparameter variable 230 is greater than zero, the Truncated Rice suffix 1610 (Fig. 16 ) can be determined at 1916. TheTruncated Rice suffix 1610 can be a bin string having a length equal to the value of theparameter variable 230. Thesymbol 226 can be right arithmetic shifted by a number of binary digits equal to theparameter variable 230. The result can be left arithmetic shifted by a number of binary digits equal to theparameter variable 230. Performing a left arithmetic shift of a first value by a number of binary digits equal to the value of a second value can be the equivalent of multiplying the first value by 2^second value. The result of the left arithmetic shift can be subtracted from the value of thesymbol 226, and the binary representation of this result having the same number of bins as the value of theparameter variable 230 can be theTruncated Rice suffix 1610. In some embodiments in which the value of thesymbol 226 is expressed as "synElVal," the operation at 1916 can be expressed as "synElVal - ((synElVal >> cRiceParam) « cRiceParam)." At 1918, theTruncated Rice suffix 1610 can be concatenated to the end of theTruncated Rice prefix 1608 to determine the full TruncatedRice bin string 1606, which can be used as themain prefix 1602. - At 1922, the
main prefix 1602 can be compared to a comparison string. A comparison string can be a string of one or more bins all set to "1," with the number of bins in the comparison string being determined by right arithmetic shifting themaximum symbol value 232 by a number of binary digits equal to theparameter variable 230, and then adding the value of theparameter variable 230. In some embodiments, the determination of the length of the comparison string can be expressed as "(cTRMax >> cRiceParam) + cRiceParam." If themain prefix 1602 is the same as the comparison string, themain suffix 1604 can be determined at 1924 and concatenated to the end of themain prefix 1602 at 1926 to determine the finalbinary codeword 228 bin string for thesymbol 226 at 1928. Themain suffix 1604 can be the 0th order Exponential-Golomb (Exp-Golomb) code for the value of thesymbol 226 minus themaximum symbol value 232 minus one. In some embodiments in which the value of thesymbol 226 is expressed as "coeff_abs_level_minus3[n]," the operation at 1824 can be expressed as the 0th order Exp-Golomb code for "coeff abs_level_minus3[n] - cTRMax - 1." If themain prefix 1602 is different from the comparison string, themain suffix 1604 can be absent and themain prefix 1602 can be used as the finalbinary codeword 228 bin string for thesymbol 226. The final binary codeword can then be output at 1928. - The execution of the sequences of instructions required to practice the embodiments may be performed by a
computer system 2100 as shown inFig. 21 . In an embodiment, execution of the sequences of instructions is performed by asingle computer system 2100. According to other embodiments, two ormore computer systems 2100 coupled by acommunication link 2115 may perform the sequence of instructions in coordination with one another. Although a description of only onecomputer system 2100 may be presented herein, it should be understood that any number ofcomputer systems 2100 may be employed. - A
computer system 2100 according to an embodiment will now be described with reference toFig. 20 , which is a block diagram of the functional components of acomputer system 2100. As used herein, theterm computer system 2100 is broadly used to describe any computing device that can store and independently run one or more programs. - The
computer system 2100 may include acommunication interface 2114 coupled to thebus 2106. Thecommunication interface 2114 provides two-way communication betweencomputer systems 2100. Thecommunication interface 2114 of arespective computer system 2100 transmits and receives electrical, electromagnetic or optical signals that include data streams representing various types of signal information, e.g., instructions, messages and data. Acommunication link 2115 links onecomputer system 2100 with anothercomputer system 2100. For example, thecommunication link 2115 may be a LAN, an integrated services digital network (ISDN) card, a modem, or the Internet. - A
computer system 2100 may transmit and receive messages, data, and instructions, including programs, i.e., application, code, through itsrespective communication link 2115 andcommunication interface 2114. Received program code may be executed by the respective processor(s) 2107 as it is received, and/or stored in thestorage device 2110, or other associated non-volatile media, for later execution. - In an embodiment, the
computer system 2100 operates in conjunction with adata storage system 2131, e.g., adata storage system 2131 that contains adatabase 2132 that is readily accessible by thecomputer system 2100. Thecomputer system 2100 communicates with thedata storage system 2131 through adata interface 2133. -
Computer system 2100 can include abus 2106 or other communication mechanism for communicating the instructions, messages and data, collectively, information, and one ormore processors 2107 coupled with thebus 2106 for processing information.Computer system 2100 also includes amain memory 2108, such as a random access memory (RAM) or other dynamic storage device, coupled to thebus 2106 for storing dynamic data and instructions to be executed by the processor(s) 2107. Thecomputer system 2100 may further include a read only memory (ROM) 2109 or other static storage device coupled to thebus 2106 for storing static data and instructions for the processor(s) 2107. Astorage device 2110, such as a magnetic disk or optical disk, may also be provided and coupled to thebus 2106 for storing data and instructions for the processor(s) 2107. - A
computer system 2100 may be coupled via thebus 2106 to adisplay device 2111, such as an LCD screen.. Aninput device 2112, e.g., alphanumeric and other keys, is coupled to thebus 2106 for communicating information and command selections to the processor(s) 2107. - According to one embodiment, an
individual computer system 2100 performs specific operations by their respective processor(s) 2107 executing one or more sequences of one or more instructions contained in themain memory 2108. Such instructions may be read into themain memory 2108 from another computer-usable medium, such as theROM 2109 or thestorage device 2110. Execution of the sequences of instructions contained in themain memory 2108 causes the processor(s) 2107 to perform the processes described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions. Thus, embodiments are not limited to any specific combination of hardware circuitry and/or software. - Although the present invention has been described above with particularity, this was merely to teach one of ordinary skill in the art how to make and use the invention. Many additional modifications will fall within the scope of the invention, as that scope is defined by the following claims.
Claims (15)
- A method of determining a binary codeword for a symbol, comprising:determining a truncated rice prefix for a symbol with an encoder, said symbol having a parameter variable;when said parameter variable is greater than zero, determining a truncated rice suffix for said symbol with said encoder and concatenating the end of said truncated rice prefix with said truncated rice suffix to determine a main prefix;when said main prefix is the same as a comparison string, determining a main suffix for said symbol by employing said encoder and concatenating the end of said main prefix with said main suffix to determining said binary codeword for said symbol;wherein said main suffix is determined by the 0th order exponential Golomb code for the value of said symbol minus a maximum symbol value minus one; andwherein said maximum symbol value is twenty when said parameter variable is one; said maximum symbol value is forty two when said parameter variable is two; and said maximum symbol value is seventy when said parameter variable is three;characterized in that said maximum symbol value is eight when said parameter variable is zero.
- The method of claim 1, further comprising:when said parameter variable is equal to zero, determining a main prefix for said symbol by setting said main prefix to said truncated rice prefix.
- The method of claim 1, further comprising:when said main prefix is not the same as said comparison string, determining said binary codeword for said symbol by setting said binary codeword to said main prefix.
- The method of claim 1, wherein determining said truncated rice prefix comprises:determining a binarization element with said encoder by right arithmetic shifting the smaller of the value of said symbol and said maximum symbol value by a number of binary digits equal to the value of said parameter variable;determining a unary maximum value with said encoder by right arithmetic shifting said maximum symbol value by a number of binary digits equal to the value of said parameter variable; andwhen said binarization element is less than said unary maximum value, determining said truncated rice prefix with said encoder by a unary binarization process; and when said Binarization element is equal to said unary maximum value, determining said truncated rice prefix by a truncated unary binarization process.
- The method of claim 1, wherein said truncated rice suffix is determined by:right arithmetic shifting said symbol with said encoder by a number of binary digits equal to the value of said parameter variable to obtain a first result;left arithmetic shifting said first result with said encoder by a number of binary digits equal to the value of said parameter variable to obtain a second result; andsubtracting said second result from said symbol with said encoder to obtain a third result; andbinarizing said third result with said encoder to obtain said truncated rice suffix.
- The method of claim 1, wherein said comparison string is a bin string with each of its bins set to "1" and having a length determined by right arithmetic shifting said maximum symbol value by a number of binary digits equal to said parameter variable, and then adding the value of said parameter variable.
- The method of claim 1, wherein the binary codeword is a representation of a transform coefficient provided within a transform unit (TU), said transform unit being a subdivision of a coding unit (CU) in a High Efficiency Video Coding (HEVC) signal.
- A video encoder comprising:a memory configured to store a symbol, a parameter variable, and a maximum symbol value; anda processor coupled with said memory, wherein said processor is configured to determine a binary codeword for said symbol by:determining a truncated rice prefix for said symbol;when said parameter variable is greater than zero, determining a truncated rice suffix for said symbol and determining a main prefix by concatenating the end of said truncated rice prefix with said truncated rice suffix; andwhen said main prefix is the same as a comparison string, determining a main suffix for said symbol and determining said binary codeword by concatenating the end of said main prefix with said main suffix;wherein said main suffix is determined by the 0th order exponential Golomb code for the value of said symbol minus a maximum symbol value minus one; andwherein said maximum symbol value is twenty when said parameter variable is one; said maximum symbol value is forty two when said parameter variable is two; and said maximum symbol value is seventy when said parameter variable is three;characterized in that said maximum symbol value is eight when said parameter variable is zero.
- The video encoder of claim 8, wherein said processor is further configured to:determine a binarization element by right arithmetic shifting the smaller of the value of said symbol and said maximum symbol value by a number of binary digits equal to the value of said parameter variable;determine a unary maximum value by right arithmetic shifting said maximum symbol value by a number of binary digits equal to the value of said parameter variable;determine said truncated rice prefix by a unary binarization process when said binarization element is less than said unary maximum value; anddetermine said truncated rice prefix by a truncated unary binarization process when said binarization element is equal to said unary maximum value.
- The video encoder of claim 8, wherein said processor is further configured to:right arithmetic shift said symbol by a number of binary digits equal to the value of said parameter variable to obtain a first result;left arithmetic shift said first result by a number of binary digits equal to the value of said parameter variable to obtain a second result; andsubtract said second result from said symbol to obtain a third result; and binarize said third result to obtain said truncated rice suffix.
- The video encoder of claim 10, wherein the length of said truncated rice suffix is equal to the value of said parameter variable.
- The video encoder of claim 8, wherein said comparison string is a bin string with each of its bins set to "1" and having a length determined by said processor right arithmetic shifting said maximum symbol value by a number of binary digits equal to said parameter variable, and then adding the value of said parameter variable.
- A computer readable medium containing program instructions for determining a binary codeword for a symbol, wherein execution of the program instructions by one or more processors of a computer system causes the one or more processors to carry out the steps of:receiving a symbol, a parameter variable, and a maximum symbol value associated with said parameter variable;determining a truncated rice prefix for said symbol;when said parameter variable is greater than zero, determining a truncated rice suffix for said symbol and determining a main prefix by concatenating the end of said truncated rice prefix with said truncated rice suffix; andwhen said main prefix is the same as a comparison string, determining a main suffix for said symbol and determining said binary codeword for said symbol by concatenating the end of said main prefix with said main suffix;wherein said main suffix is determined by the 0th order exponential Golomb code for the value of said symbol minus a maximum symbol value minus one; andwherein said maximum symbol value is twenty when said parameter variable is one; said maximum symbol value is forty two when said parameter variable is two; and said maximum symbol value is seventy when said parameter variable is three;characterized in that said maximum symbol value is eight when said parameter variable is zero.
- The computer readable medium of claim 13, wherein execution of the program instructions by one or more processors of a computer system causes the one or more processors to further carry out the steps of:determining a binarization element by right arithmetic shifting the smaller of the value of said symbol and said maximum symbol value by a number of binary digits equal to the value of said parameter variable;determining a unary maximum value by right arithmetic shifting said maximum symbol value by a number of binary digits equal to the value of said parameter variable;when said binarization element is less than said unary maximum value, determining said truncated rice prefix by a unary binarization process; andwhen said binarization element is equal to said unary maximum value, determining said truncated rice prefix by a truncated unary binarization process.
- The computer readable medium of claim 13, wherein execution of the program instructions by one or more processors of a computer system causes the one or more processors to further carry out the steps of:right arithmetic shifting said symbol by a number of binary digits equal to the value of said parameter variable to obtain a first result;left arithmetic shifting said first result by a number of binary digits equal to the value of said parameter variable to obtain a second result; andsubtracting said second result from said symbol to obtain a third result; and binarizing said third result to obtain said truncated rice suffix.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161557403P | 2011-11-08 | 2011-11-08 | |
PCT/US2012/064236 WO2013070974A2 (en) | 2011-11-08 | 2012-11-08 | Method of determining binary codewords for transform coefficients |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2777279A2 EP2777279A2 (en) | 2014-09-17 |
EP2777279B1 true EP2777279B1 (en) | 2016-06-01 |
Family
ID=51301503
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP12791630.2A Active EP2777279B1 (en) | 2011-11-08 | 2012-11-08 | Method of determining binary codewords for transform coefficients |
Country Status (2)
Country | Link |
---|---|
EP (1) | EP2777279B1 (en) |
CN (1) | CN107995496B (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR20210010631A (en) * | 2018-07-13 | 2021-01-27 | 엘지전자 주식회사 | Video decoding method and apparatus for using intra prediction information in video coding system |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1230000C (en) * | 2003-11-04 | 2005-11-30 | 浙江大学 | Scanning method of changing coefficient block in video frequency coding and decoding and its device |
KR100556340B1 (en) * | 2004-01-13 | 2006-03-03 | (주)씨앤에스 테크놀로지 | Image Coding System |
-
2012
- 2012-11-08 CN CN201710962926.2A patent/CN107995496B/en active Active
- 2012-11-08 EP EP12791630.2A patent/EP2777279B1/en active Active
Also Published As
Publication number | Publication date |
---|---|
CN107995496B (en) | 2020-07-17 |
CN107995496A (en) | 2018-05-04 |
EP2777279A2 (en) | 2014-09-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9866850B2 (en) | Method of determining binary codewords for transform coefficients | |
US10623742B2 (en) | Method of determining binary codewords for transform coefficients | |
US9167245B2 (en) | Method of determining binary codewords for transform coefficients | |
US9270988B2 (en) | Method of determining binary codewords for transform coefficients | |
US9635358B2 (en) | Method of determining binary codewords for transform coefficients | |
EP2839645B1 (en) | Coefficient groups and coefficient coding for coefficient scans | |
US20190253714A1 (en) | Data encoding and decoding | |
US20130188729A1 (en) | Method of determining binary codewords for transform coefficients | |
CN112352429B (en) | Method, apparatus and storage medium for encoding and decoding video data | |
WO2013109990A2 (en) | Devices and methods for context reduction in last significant coefficient position coding | |
EP3808084A1 (en) | Trellis coded quantization coefficient coding | |
CN112335251B (en) | Coefficient coding with grouped bypass bits | |
EP2777279B1 (en) | Method of determining binary codewords for transform coefficients | |
US20240129512A1 (en) | Encoding and decoding method, encoder, decoder, and storage medium | |
GB2523993A (en) | Data encoding and decoding | |
JP2022548685A (en) | Encoding and decoding image data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20140527 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
DAX | Request for extension of the european patent (deleted) | ||
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: WANG, LIMINInventor name: LOU, JIAN |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602012019231Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: H04N0007300000Ipc: H04N0019700000 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: H04N 19/91 20140101ALI20151102BHEPIpc: H04N 19/70 20140101AFI20151102BHEPIpc: H04N 19/21 20140101ALI20151102BHEPIpc: H04N 19/60 20140101ALI20151102BHEP |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
INTG | Intention to grant announced |
Effective date: 20151221 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EPRef country code: ATRef legal event code: REFRef document number: 804492Country of ref document: ATKind code of ref document: TEffective date: 20160615 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602012019231Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20160601 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160901Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 804492Country of ref document: ATKind code of ref document: TEffective date: 20160601 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 5 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160902Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161001Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161003Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602012019231Country of ref document: DE |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
26N | No opposition filed |
Effective date: 20170302 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161130Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161130 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161130 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 6 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161108 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20121108 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MTFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161108 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160601 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230515 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602012019231Country of ref document: DERepresentative=s name: KASTEL PATENTANWAELTE PARTG MBB, DE |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20231127Year of fee payment: 12 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20231127Year of fee payment: 12Ref country code: DEPayment date: 20231129Year of fee payment: 12 |