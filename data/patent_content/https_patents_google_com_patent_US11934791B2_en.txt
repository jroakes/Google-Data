US11934791B2 - On-device projection neural networks for natural language understanding - Google Patents
On-device projection neural networks for natural language understanding Download PDFInfo
- Publication number
- US11934791B2 US11934791B2 US17/878,631 US202217878631A US11934791B2 US 11934791 B2 US11934791 B2 US 11934791B2 US 202217878631 A US202217878631 A US 202217878631A US 11934791 B2 US11934791 B2 US 11934791B2
- Authority
- US
- United States
- Prior art keywords
- projection
- layer
- input
- network
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 177
- 230000006870 function Effects 0.000 claims abstract description 152
- 239000013598 vector Substances 0.000 claims description 84
- 239000011159 matrix material Substances 0.000 claims description 26
- 238000003860 storage Methods 0.000 claims description 23
- 238000004891 communication Methods 0.000 claims description 18
- 230000004044 response Effects 0.000 claims description 13
- 238000004458 analytical method Methods 0.000 claims description 6
- 238000003058 natural language processing Methods 0.000 claims description 6
- 230000003068 static effect Effects 0.000 claims 1
- 230000009286 beneficial effect Effects 0.000 abstract description 2
- 238000012549 training Methods 0.000 description 59
- 238000000034 method Methods 0.000 description 55
- 230000000306 recurrent effect Effects 0.000 description 34
- 230000015654 memory Effects 0.000 description 30
- 238000012545 processing Methods 0.000 description 25
- 230000008569 process Effects 0.000 description 23
- 210000004027 cell Anatomy 0.000 description 14
- 238000013527 convolutional neural network Methods 0.000 description 14
- 238000004590 computer program Methods 0.000 description 13
- 238000005516 engineering process Methods 0.000 description 12
- 238000000605 extraction Methods 0.000 description 10
- 238000010801 machine learning Methods 0.000 description 10
- 238000010586 diagram Methods 0.000 description 9
- 230000004913 activation Effects 0.000 description 8
- 238000001994 activation Methods 0.000 description 8
- 230000008901 benefit Effects 0.000 description 8
- 238000002372 labelling Methods 0.000 description 7
- 230000001537 neural effect Effects 0.000 description 7
- 230000009471 action Effects 0.000 description 6
- 238000013507 mapping Methods 0.000 description 6
- 238000013459 approach Methods 0.000 description 5
- 238000013135 deep learning Methods 0.000 description 5
- 238000003062 neural network model Methods 0.000 description 5
- 238000013500 data storage Methods 0.000 description 4
- 230000003993 interaction Effects 0.000 description 4
- 238000004088 simulation Methods 0.000 description 4
- 230000009466 transformation Effects 0.000 description 4
- 230000006835 compression Effects 0.000 description 3
- 238000007906 compression Methods 0.000 description 3
- 238000013136 deep learning model Methods 0.000 description 3
- 238000001514 detection method Methods 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 238000011156 evaluation Methods 0.000 description 3
- 238000002474 experimental method Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000007781 pre-processing Methods 0.000 description 3
- 238000012360 testing method Methods 0.000 description 3
- 241000282326 Felis catus Species 0.000 description 2
- 230000004075 alteration Effects 0.000 description 2
- 238000011161 development Methods 0.000 description 2
- 230000008909 emotion recognition Effects 0.000 description 2
- 239000004744 fabric Substances 0.000 description 2
- 235000013305 food Nutrition 0.000 description 2
- 230000005055 memory storage Effects 0.000 description 2
- 238000013138 pruning Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000000844 transformation Methods 0.000 description 2
- 238000013519 translation Methods 0.000 description 2
- 238000010200 validation analysis Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- ORILYTVJVMAKLC-UHFFFAOYSA-N Adamantane Natural products C1C(C2)CC3CC1CC2C3 ORILYTVJVMAKLC-UHFFFAOYSA-N 0.000 description 1
- 241000283070 Equus zebra Species 0.000 description 1
- 241000009334 Singa Species 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 238000000137 annealing Methods 0.000 description 1
- 230000009118 appropriate response Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000013145 classification model Methods 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000003745 diagnosis Methods 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 238000007667 floating Methods 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000012886 linear function Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 210000002569 neuron Anatomy 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 235000019699 ravioli Nutrition 0.000 description 1
- 238000011160 research Methods 0.000 description 1
- 238000012827 research and development Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 239000004753 textile Substances 0.000 description 1
- 229920002803 thermoplastic polyurethane Polymers 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/253—Grammatical analysis; Style critique
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/02—Knowledge representation; Symbolic representation
- G06N5/022—Knowledge engineering; Knowledge acquisition
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
Definitions
- the present disclosure relates generally to artificial neural networks. More particularly, the present disclosure relates to novel projection neural network architectures such as, for example, Self-Governing Neural Networks and Projection Sequence Networks.
- Neural networks are machine-learned models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- a recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence.
- a recurrent neural network can use some or all of the internal state of the network from a previous time step in computing an output at a current time step.
- An example of a recurrent neural network is a long short term (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells that each include an input gate, a forget gate, and an output gate that allow the cell to store previous states for the cell, e.g., for use in generating a current activation or to be provided to other components of the LSTM neural network.
- LSTM long short term
- Deep neural networks are one of the most successful machine learning methods, outperforming many state-of-the-art machine learning methods in natural language processing, speech, and visual recognition tasks.
- the availability of high performance computing has enabled research in deep learning to focus largely on the development of deeper and more complex network architectures for improved accuracy.
- the increased complexity of the deep neural networks has become one of the biggest obstacles to deployment of deep neural networks on-device in certain devices such as mobile phones, smart watches, and/or other resource-constrained devices such as Internet of Things devices.
- the main challenges associated with developing and deploying deep neural network models on-device include: a relatively small memory footprint; inference latency; and significantly lower computational capacity compared to high performance computing systems such as CPUs, GPUs, and TPUs available via cloud computing systems.
- One example application of neural networks is text classification.
- text classification There are multiple strategies to build lightweight text classification models for on-device. For example, a small dictionary of common input ⁇ category mapping can be stored on the device and a naive look-up can be performed at inference time.
- a small dictionary of common input ⁇ category mapping can be stored on the device and a naive look-up can be performed at inference time.
- such an approach does not scale to complex natural language tasks involving rich vocabularies and wide language variability.
- One example aspect of the present disclosure is directed to a system that includes one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to implement a projection neural network configured to receive a projection network input and to generate a projection network output from the projection network input.
- the projection neural network includes a sequence of one or more projection layers.
- Each projection layer has a plurality of projection layer parameters.
- Each projection layer is configured to: receive a layer input; apply a plurality of projection layer functions to the layer input, each projection layer function generating a respective projection function output that projects the layer input to a different space, and generate a layer output by applying the projection layer parameters for the projection layer to the projection function outputs.
- the projection neural network includes a sequence of one or more additional hidden layers positioned structurally after the sequence of one or more projection layers.
- the sequence of one or more additional hidden layers is configured to receive a layer output generated by a highest projection layer in the sequence of one or more projection layers and to generate one or more additional hidden layer outputs.
- Execution of the instructions causes the one or more computers to perform operations comprising: obtaining the projection network input; inputting the projection network input into the projection neural network; and receiving the projection network output generated by the projection neural network.
- the projection sequence network includes a sequence of one or more projection layers.
- Each projection layer has a plurality of projection layer parameters,
- Each projection layer is configured to: receive a layer input; apply a plurality of projection layer functions to the layer input, each projection layer function generating a respective projection function output that projects the layer input to a different space, and generate a layer output by applying the projection layer parameters for the projection layer to the projection function outputs.
- the projection sequence network includes one or more projection sequence layers positioned structurally after the sequence of one or more projection layers.
- Each of the one or more projection sequence layers is configured to provide first internal state data to a subsequent iteration of such projection sequence layer in a subsequent iteration of the projection sequence network and to receive second internal state data from the subsequent iteration of such projection sequence layer in the subsequent iteration of the projection sequence network.
- Execution of the instructions causes the one or more computers to perform operations comprising: obtaining the input; inputting the input into the projection sequence network; and receiving the output generated by the projection sequence network.
- FIG. 1 shows an example projection neural network system according to example embodiments of the present disclosure.
- FIG. 2 depicts a block diagram of an example data flow for processing a projection layer input to determine a projection layer output according to example embodiments of the present disclosure.
- FIG. 3 depicts an example Self-Governing Neural Network according to example embodiments of the present disclosure.
- FIG. 4 depicts an example Projection Sequence Network according to example embodiments of the present disclosure.
- FIGS. 5 A and 5 B depict block diagrams of example data flows for training a projection neural network according to example embodiments of the present disclosure
- FIGS. 6 A-C depict block diagrams of example computing systems and devices according to example embodiments of the present disclosure.
- FIG. 7 depicts an example recurrent cell according to example embodiments of the present disclosure.
- the present disclosure is directed to projection neural networks and example applications thereof.
- the present disclosure provides a number of different architectures for projection neural networks, including two example architectures which can be referred to as: Self-Governing Neural Networks (SGNNs) and Projection Sequence Networks (ProSeqoNets).
- SGNNs Self-Governing Neural Networks
- ProSeqoNets Projection Sequence Networks
- Each projection neural network can include one or more projection layers that project an input into a different space.
- each projection layer can use a set of projection functions to project the input into a bit-space, thereby greatly reducing the dimensionality of the input and enabling computation with lower resource usage.
- the projection neural networks provided herein are highly useful for on-device inference in resource-constrained devices.
- the provided SGNN and ProSeqoNet architectures are particularly beneficial for on-device inference such as, for example, solving natural language understanding tasks on-device.
- both of these network architectures can handle multilingual texts and can solve a wide range of text classification and sequence labeling tasks.
- neural networks are a class of non-linear models that learn a mapping from inputs ⁇ right arrow over (x) ⁇ i to outputs y i , where ⁇ right arrow over (x) ⁇ i represents an input feature vector or sequence (e.g., in the case of recursive neural networks) and y i is an output (e.g., an output category for classification tasks or a predicted sequence).
- these networks consist of multiple layers of hidden units or neurons with connections between a pair of layers. For example, in a fully-connected feed-forward neural network, the number of weighted connections or network parameters that are trained is O(n 2 ), where n is the number of hidden units per layer.
- aspects of the present disclosure are directed to neural networks that include one or more projection layers and which, therefore, can be referred to as projection neural networks.
- a projection layer can reduce the dimensionality of a projection layer input by processing the input using projection layer functions.
- a projection layer can leverage random projections to transform inputs or intermediate representations into bits.
- projection networks can encode lightweight and efficient-to-compute operations in bit space with a low memory footprint.
- a projection layer can define a set of efficient projection functions ( ⁇ ) that project an input (e.g., an input instance ⁇ right arrow over (x) ⁇ i or some other intermediate representation received as a layer input) to a different space ⁇ .
- the projection layer can then perform learning in this space to map the projected information to corresponding layer outputs.
- the set of projection functions for a projection layer can include a series of T projection functions 1 , . . . , T , which can then be followed by a layer of activations or other form of layer parameters that map from the projection space to a layer output.
- the projection transformations can take the form of pre-computed parameterized functions. Thus, in some implementations, they are not trained during the learning process.
- the outputs of the projection functions can be concatenated to form the hidden units for subsequent operations.
- the projection network can learn, within each projection layer, to choose and apply specific projection operations j (e.g., via activations) that are more predictive for a given task.
- a projection layer reduces the dimensionality of a projection layer input by processing the projection layer input by projection layer functions.
- the projection layer functions generate projection function outputs that have a dimensionality that may be several orders of magnitude smaller than the dimensionality of the projection layer input.
- the projection layer can then generate a projection layer output by applying projection layer parameters (e.g., a weight matrix and a bias vector) to the low-dimensional projection function outputs.
- projection layer parameters e.g., a weight matrix and a bias vector
- a conventional neural network layer may directly process a (high-dimensional) conventional layer input without first reducing the dimensionality of the conventional layer input. Since projection layers reduce the dimensionality of layer inputs by projection functions, projection layers may require far fewer layer parameters and may perform far fewer arithmetic operations in generating layer outputs than some conventional neural network layers.
- projection layers can reduce computational resource consumption (e.g., relative to conventional neural network layers) by performing fewer arithmetic operations and therefore consuming less computing power. Moreover, projection layers can reduce computational resource consumption since they can be stored (e.g., in a logical data storage area or physical data storage device) using less memory (e.g., as measured in bytes).
- projection networks may be suitable for deployment in resource-constrained systems, such as mobile device environments (e.g., smartphones and smartwatches), where some conventional neural networks are less easily deployed (e.g., because their computational resource demands exceed the computational resources available).
- resource constrained systems enables these systems to increase data privacy by performing tasks locally instead of remotely.
- Performing a task locally refers to performing the task using computational resources located within the system
- performing a task remotely refers to transmitting data characterizing the task to a remote environment (e.g., a cloud environment) over a communications network (e.g., the Internet), and receiving the results of the completed task back over the communications network.
- Performing tasks locally can increase data privacy since it does not require transmitting data over communications networks.
- some projection neural network architectures can include a stack of one or more additional layers connected to a sequence of one or more projection layers.
- a projection neural network can include a sequence of one or more projection layers, a sequence of one or more hidden layers positioned structurally after the one or more projection layers, and an output layer positioned structurally after the sequence of one or more hidden layers.
- the one or more hidden layers can include different types of layers including fully connected layers (e.g., featuring non-linear activations), convolutional layers, recurrent layers, additional projection layers, projection sequence layers (described in further detail below), and/or other forms of additional layers.
- the projection neural networks described herein can include Self-Governing Neural Networks (SGNNs), which can include one or more projection layers followed, for example, by one or more fully connected hidden layers.
- SGNNs can be on-device deep learning models learned via embedding-free projection operations.
- the SGNNs can learn compact projection vectors with locality sensitive hashing (LSH).
- LSH locality sensitive hashing
- a modified version of LSH can be employed to reduce an input dimension (e.g., from millions of unique words/features to a short, fixed-length sequence of bits). This enables computation of a projection for an input (e.g., an incoming text) very fast, on-the-fly, and with a small memory footprint on the device.
- computation of the projection can be performed very quickly as the incoming text and word embeddings are not required to be stored.
- the SGNNs can be used to perform on-device text classification.
- a SGNN can take as input the text and can consider the whole context to produce a single class or multiple classes.
- the input to an SGNN can include a single input vector that has been generated on the basis of a text string and additional features derived from or otherwise associated with the text string. Such multiple types of information can be concatenated to form the single input vector.
- the SGNN can process the single input vector to produce a classification output that classifies the text string as a whole.
- SGNNs surmount the need for pre-trained word embeddings and complex networks with huge parameters.
- the present disclosure provides the results of extensive evaluation on dialog act classification which show significant improvement over state-of-the-art results.
- the results show that SGNNs are effective at capturing low-dimensional semantic text representations, while maintaining high accuracy.
- the performance of SGNNs was analyzed on Dialogue Act classification because it is an important step towards dialog interpretation and conversational analysis aiming to understand the intent of the speaker at every utterance of the conversation and also because deep learning methods reached state-of-the-art.
- the projection neural networks described herein include Projection Sequence Networks (ProSeqoNets), which can include one or more projection layers followed by, for example, one or more projection sequence layers.
- ProSeqoNets Projection Sequence Networks
- Each projection sequence layer can pass information forward and/or backward to subsequent and/or previous iterations of such layer as a sequential input is input into the network over a series of time steps.
- each projection sequence layer can include a first set of nodes that pass information forward to subsequent iterations and/or receive information from previous iterations and also a second set of nodes that receive information passed back from subsequent iterations and/or pass information backward to previous iterations.
- one or more (e.g., all) of the nodes included in the first set of nodes and/or the second set of nodes can be or include recurrent cells that have been modified for inclusion in the projection sequence layer.
- Example recurrent cells include LSTM cells and gated recurrent units (GRUs).
- the projection state can be used to modify the internal state or dependencies of the cell rather than the base input features.
- ProSeqoNets can be used, for example, to perform on-device sequence labeling.
- a ProSeqoNet can take as input the text, and can identify segments (e.g., sequences of words/phrases) and classify the segments into categories.
- ProSeqoNets can also be used for various other natural language processing tasks, particularly those which are serial or sequential in nature.
- ProSeqoNets can also be used for generating new output that goes beyond characterizing (e.g., segmenting and/or classifying) the input.
- ProSeqoNets can be used for translating an input text into a different language (e.g., generating an output that is a translated version of the input text) and/or completing an input text string (e.g., generating an output that adds to or otherwise completes the input text).
- the input to ProSeqoNets can be sequential in nature and the ProSeqoNets can operate iteratively (e.g., at each of a plurality of time steps) to process the sequential input.
- the ProSeqoNets can operate iteratively (e.g., at each of a plurality of time steps) to process the sequential input.
- one character, syllable, word, n-gram, chunk, or other portion of the text string can be input at each of a plurality of iterations.
- information from past time steps e.g., the raw text and/or intermediate feature data
- additional features can be provided as initial or intermediate input to the ProSeqoNets in addition to the base input (e.g., in addition to the raw text). In some implementations, these additional features can be included in one or more additional feature vectors.
- the input to the ProSeqoNet can include multiple feature vectors which may have different dimensional spaces associated therewith. These feature vectors may or may not include type information that describes the type of features.
- the input to ProSeqoNets includes multiple feature vectors
- input of such vectors into the network can be handled in a number of different ways.
- the multiple feature vectors can be concatenated and flattened to form a single input vector.
- each feature vector can be separately input into the network and separately projected by the projection layer(s). After separate projection, the outputs of the projection layer(s) can be concatenated in the projected space (e.g., the bit space).
- some projection functions and/or bit space positions can be reserved and used for encoding the type information respectively associated with the feature vectors, such that the networks can learn, in the projected space, to choose or ignore various information based on its feature type as it relates to the input or other feature types.
- ProSeqoNets are not limited to use in for sequence-based tasks.
- ProSeqoNets can also be used for text classification such as, for example, classifying an entire input text into one or multiple classes.
- SGNNs nor the ProSeqoNets require pre-trained word embeddings or vocabulary pruning. Instead, they can compute the sentence/word-level representations on the fly using projections. As such, aspects of the present disclosure can be viewed as compression techniques that effectively capture low-dimensional semantic text representation and produce compact models that save on storage and computational cost.
- a projection network as described in this specification can perform tasks faster and with a performance level (e.g., a prediction accuracy) that is similar to that of much larger and more complex conventional neural networks (i.e., neural networks that do not contain projection layers, as described in this specification), while consuming fewer computational resources (e.g., memory and computing power).
- a projection network can perform tasks (e.g., text classification) with a performance level comparable to that of a larger neural network, despite the projection network having several orders of magnitude fewer parameters than the larger neural network.
- Projection networks can perform tasks faster and consume fewer computational resources than conventional neural networks because they include projection layers.
- the present disclosure provides Self-Governing Neural Nets (e.g., for on-device short text classification) and Projection Sequence Networks (e.g., for sequence labeling).
- Experimental data on multiple dialog act datasets shows that the SGNNs outperform state-of-the-art deep leaning methods.
- the present disclosure introduces a compression technique that effectively captures low-dimensional semantic representation and produces compact models that significantly save on storage and computational cost.
- the proposed approaches do not rely on pre-trained embeddings and efficiently compute the projection vectors on the fly.
- FIG. 1 shows an example projection neural network system 100 .
- the projection neural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
- the projection neural network system 100 includes a projection neural network 102 .
- the projection neural network 102 can be a feed-forward neural network, a recurrent neural network, or any other appropriate type of neural network.
- the projection neural network 102 is configured to receive a projection neural network input 104 and to generate a projection network output 106 from the projection network input 104 .
- the projection neural network input 104 can be any kind of digital data input
- the projection network output 106 can be any kind of score, classification, or regression output based on the input.
- the system 100 described herein is widely applicable and is not limited to one specific implementation. However, for illustrative purposes, a small number of example implementations are described below.
- the output generated by the projection neural network 102 for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- the output generated by the projection neural network 102 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the output generated by the projection neural network 102 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance.
- the output generated by the projection neural network 102 may be a score for each of a set of possible diagnoses for the condition of a user, with the score representing an estimated likelihood that the diagnosis is accurate.
- the output generated by the projection neural network 102 may be a score for each of a set of possible responses to the received communication, with the score representing an estimated likelihood that the response matches a user's intent.
- the projection neural network 102 includes a sequence of one or more projection layers (e.g., the projection layer 108 ). Although only a single projection layer 108 is illustrated, the projection neural network 102 can include any number of projection layers (e.g., stacked one after the other).
- the projection layer 108 is configured to receive a projection layer input 110 , and to process the projection layer input 110 in accordance with current values of projection layer parameters to generate a projection layer output 112 .
- the projection layer input 110 may be the projection network input 104 (i.e., if the projection layer 108 is the first layer in the projection network 102 ) or the output of another layer of the projection network 102 (e.g., a conventional layer or another projection layer).
- the projection layer input 110 and the projection layer output 112 may be represented in any appropriate numerical format, for example, as vectors or as matrices.
- FIG. 2 is a block diagram of an example data flow 200 by which a projection layer (e.g., the projection layer 108 ) can process a projection layer input 110 to determine a projection layer output 112 .
- a projection layer e.g., the projection layer 108
- FIG. 2 is a block diagram of an example data flow 200 by which a projection layer (e.g., the projection layer 108 ) can process a projection layer input 110 to determine a projection layer output 112 .
- the projection layer input may be the projection network input or the output of another layer of the projection network, and may be represented in any appropriate numerical format (e.g., as a vector or as a matrix).
- the projection layer provides the projection layer input 110 to each of one or more projection layer functions (e.g., 202 , 204 , 206 ). Each of the projection layer functions processes the projection layer input 110 to generate a respective projection function output (e.g., 208 , 210 , 212 ).
- each projection function can generate the corresponding projection function output by mapping the projection layer input to a different space.
- the dimensionality of the projection function outputs are much less (e.g., by several orders of magnitude) than the dimensionality of the projection layer input 110 .
- each of the projection function outputs (e.g., 208 , 210 , 212 ) is a bit vector.
- each projection function may be defined by a matrix.
- the rows (or columns) of a matrix defining a projection function can be referred to as projection vectors associated with the projection function.
- a projection function may process the projection layer input by determining dot products (i.e., inner products) between the projection layer input and each of the projection vectors associated with the projection function.
- ⁇ , ⁇ > denotes the dot product operation between vectors
- a projection function may process the projection layer input by determining whether the dot product between the projection layer input and each of the projection vectors results in positive or negative values.
- a dot product between the projection layer input and a projection vector results in a positive value
- a first value may be assigned to a corresponding position in the projection function output.
- a second value may be assigned to a corresponding position in the projection function output.
- the projection function output is a binary representation (i.e., a vector with components consisting of 0s and 1s) of the projection layer input.
- the projection functions may be locality sensitive hashing functions.
- the projection function defined by (2) may be an example of a locality sensitive hashing function.
- locality sensitive hashing functions allows projection of similar inputs or intermediate network layers into hidden unit vectors that are nearby in metric space. This allows transformation of the inputs and learning of an efficient and compact network representation that is only dependent on the inherent dimensionality (i.e., observed features) of the data rather than the number of instances or the dimensionality of the actual data vector (i.e., overall feature or vocabulary size). For example, this can be achieved with binary hash functions for the projection functions.
- Projection functions may be selected so that: (i) processing a projection layer input by a projection function to generate a projection function output is computationally efficient (e.g., requires few arithmetic operations), (ii) data defining a projection function can be efficiently stored (e.g., in a logical data storage area or physical data storage device), or both.
- one or more of the projection functions may be defined by sparse matrices (i.e., matrices with only a few non-zero entries). If a projection function is defined by a sparse matrix, then processing the projection layer input by the projection function to generate the projection function output is computationally efficient. Specifically, since the results of many of the arithmetic operations involved in computing the projection function output have value zero (due to the sparsity of the matrix defining the projection function), these arithmetic operations do not actually need to be performed.
- a sparse matrix may be stored as a list of tuples, where each tuple includes an index of a location in the sparse matrix and a corresponding value of the sparse matrix at the index. Since sparse matrices have only a few non-zero entries, such a representation occupies less memory than, for example, a representation of a dense matrix that must include the index of every location in the dense matrix and the corresponding value of the dense matrix at the index.
- the system may determine the values of the components of the matrices defining one or more of the projection functions based on the values of a set of seed parameters.
- the seed parameters are represented as numerical values and the number of seed parameters is typically much smaller than the dimensionality of the matrices defining the projection functions.
- the system may, for example, determine the values of the components of the matrices defining the projection functions based on the outputs of random (or pseudo-random) number generators that are initialized using the seed parameters.
- the random (or pseudo-random) number generators are configured to generate Normally-distributed random numbers (i.e., random numbers drawn from a Normal distribution)
- Normally-distributed random numbers i.e., random numbers drawn from a Normal distribution
- the system can reduce the computational requirements of projection layers compared to conventional layers. For example, the system can reduce the amount of memory storage required for projection layers compared to conventional layers, since only the values of the seed parameters must be stored, as compared to some conventional layers that require storing entire dense matrices of conventional layer parameter values. As another example, the system can reduce the latency in generating layer outputs compared to conventional layers, since the system can dynamically compute the values of the components of the matrices defining the projection functions. In contrast, for some conventional layers, the system reads the conventional layer parameter values from memory, which may be a substantially slower process than dynamically computing these values (i.e., as in an example projection layer).
- the values of the parameters defining the projection layer functions may be predetermined, that is, may be fixed before the projection network is trained, and are not adjusted during training.
- the projection layer can concatenate the projection function outputs and apply the projection layer parameters 214 (e.g., a parameter matrix and a bias vector) to the concatenated projection function outputs.
- the projection layer parameters 214 e.g., a parameter matrix and a bias vector
- the projection layer can generate the projection layer output by applying projection layer parameters to the projection function outputs.
- the projection layer parameters may include a parameter matrix and a bias vector
- the dimensionality of the projection function outputs is generally much lower than the dimensionality of the projection layer input. Therefore, the number of projection layer parameters that are applied to the projection function outputs to generate the projection layer outputs is generally much lower than the number of parameters that are applied to layer inputs by conventional neural network layers (e.g., fully-connected layers) that do not include projection functions.
- the dimensionality of the projection layer parameters defined by the parameter matrix W and the bias vector b in the projection layer may be much smaller than the dimensionality of the corresponding layer parameters of a conventional neural network layer.
- the projection neural network 102 can include a stack of one or more additional hidden layers (e.g., hidden layer 114 ) connected to the sequence of one or more projection layers (e.g., projection layer 108 ).
- additional hidden layers e.g., hidden layer 114
- the one or more hidden layers can include different types of layers including fully connected layers (e.g., featuring non-linear activations), recurrent layers, convolutional layers, additional projection layers, projection sequence layers (described in further detail below), other forms of additional layers, and/or various combinations thereof.
- the sequence of the one or more additional hidden layers can be configured to receive a layer output generated by a highest projection layer in the sequence of one or more projection layers and to generate one or more additional hidden layer outputs. That is, each hidden layer (e.g., hidden layer 114 ) can receive a hidden layer input (e.g., hidden layer input 116 ) and process the layer input to provide a hidden layer output (e.g., hidden layer output 118 ).
- each hidden layer e.g., hidden layer 114
- a hidden layer input e.g., hidden layer input 116
- a hidden layer output e.g., hidden layer output 118
- the projection neural network 102 can include an output layer 120 .
- the output layer 120 can be configured to receive the additional hidden layer output generated by a highest additional hidden layer in the sequence of one or more additional hidden layers and to generate the projection network output 106 .
- a layer of the projection network 102 can serve as the output layer 120 if the output of such layer is included in the projection network output 106 .
- An output layer may be a softmax layer, a projection layer, or any other appropriate neural network layer.
- the output layer 120 may be configured to receive as input an output generated by a projection layer or a conventional layer.
- the system 100 can be implemented in a resource-constrained environment (e.g., a smartwatch or smartphone) more readily than conventional neural network systems.
- a resource-constrained environment e.g., a smartwatch or smartphone
- data defining the parameters of the system 100 can occupy much less storage capacity than data defining the parameters of a conventional neural network system.
- a graph is a data structure that may be represented by a set of nodes (where each node may be associated with a numerical feature vector), a set of edges (where each edge may be associated with a numerical edge strength value), and in some cases, a set of labels.
- the nodes represent entities (e.g., people, objects, locations, or concepts), the edges represent relationships between the entities represented by the nodes (e.g., a “friend” relationship between two people in a social network), and in some cases, the labels may represent characteristics of the nodes (e.g., whether a product represented by a node is a “best-selling” product).
- entities e.g., people, objects, locations, or concepts
- the edges represent relationships between the entities represented by the nodes (e.g., a “friend” relationship between two people in a social network)
- the labels may represent characteristics of the nodes (e.g., whether a product represented by a node is a “best-selling” product).
- Graph-based systems can be trained by machine learning techniques (e.g., supervised or semi-supervised machine learning techniques) to make predictions. For example, a graph-based system may generate a prediction for a value of a label associated with a previously unlabeled node in a graph. In this example, the graph-based system may generate a prediction for a value of a label associated with a given node based on the labels of the neighboring nodes (i.e., nodes that are connected to the given node by an edge) and the edge strengths of the edges connecting the given node to the neighboring nodes.
- machine learning techniques e.g., supervised or semi-supervised machine learning techniques
- a graph-based system can incorporate the operations performed by a projection layer by, for example, generating a projection graph that is a compact representation of a trainer graph.
- Each node of the projection graph may correspond to a different node of the trainer graph, and the feature vectors associated with the nodes of the projection graph may be determined by performing projection layer operations. More specifically, the feature vector associated with a particular node of the projection graph may be determined by applying multiple projection functions followed by a transformation (e.g., defined by a parameter matrix and a bias vector) to the feature vector associated with the corresponding node in the trainer graph. In this manner, the feature vectors associated with the nodes of the projection graph may have a much smaller dimensionality than the feature vectors associated with the nodes of the trainer graph. Therefore, similar to a projection neural network, the projection graph may be suitable for deployment to resource constrained environments (e.g., mobile devices) where the trainer graph could not be deployed.
- resource constrained environments e.g., mobile devices
- system 100 described herein is widely applicable and is not limited to one specific implementation. However, other examples of specific implementations (in addition to those described above) may be as described below.
- the output generated by the projection neural network 102 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output generated by the projection neural network 102 may be a score that represents an estimated likelihood that the particular advertisement will be clicked on.
- the output generated by the projection neural network 102 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- Example implementations of the network structure shown in FIG. 1 include the Self-Governing network described herein.
- a Self-Governing neural network can include multi-layered locality-sensitive projection model.
- the self-governing property of this network stems from its ability to learn a model (e.g., a classifier) without having to initialize, load, or store any feature or vocabulary weight matrices.
- the SGNN represents a truly embedding-free approach, which is in contrast with the majority of the widely-used state-of-the-art deep learning techniques in natural language processing whose performance depends on embeddings pre-trained on large corpora.
- the SGNN uses the projection functions to dynamically transform each input to a low-dimensional representation. Furthermore, these projection layer(s) can be stacked with additional layers and non-linear activations to achieve deep, non-linear combinations of projections that permit the network to learn complex mappings from inputs x i to outputs y i .
- i p [ 1 ( x i ), . . .
- i p refers to the output of projection operation applied to input x i
- h p is applied to projection output
- h t is applied at intermediate layers of the network with depth k followed by a final softmax activation layer at the top.
- W p , W t , W o and b p , b t , b o represent trainable weights and biases respectively.
- the projection transformations can use pre-computed parameterized functions, i.e., they are not trained during the learning process, and their outputs can be concatenated to form the hidden units for subsequent operations.
- each input text x i can be converted to an intermediate feature vector (e.g., via raw text features such as skip-grams) followed by projections.
- x i ⁇ right arrow over (x) ⁇ i [ 1 ( x i ), . . . , T ( x i )] (8)
- the intermediate feature vector can include one or more of the following intermediate features generated from or associated with the input text: skip-grams; n-grams; part of speech tags; dependency relationships; knowledge graph information; and/or contextual information.
- the SGNN network can be trained from scratch on the task data using a supervised loss defined with respect to ground truth ⁇ i .
- a loss function that can be used is as follows:
- FIG. 5 A An example training structure according to the above-described scheme is provided in FIG. 5 A .
- FIG. 5 B shows an alternative training structure.
- the network learns to choose and apply specific projection operations j (via activations) that are more predictive for a given task.
- the choice of the type of projection matrix as well as representation of the projected space ⁇ has a direct effect on computation cost and model size.
- an efficient randomized projection method can be leveraged and a binary representation ⁇ 0,1 ⁇ d can be used for ⁇ . This yields a drastically lower memory footprint both in terms of number and size of parameters.
- an efficient randomized projection method can be employed for the projection step.
- LSH locality sensitive hashing
- LSH enables the network to project similar inputs ⁇ right arrow over (x) ⁇ i or intermediate network layers into hidden unit vectors that are nearby in metric space.
- k ⁇ right arrow over (x) ⁇ i
- k ⁇ right arrow over (x) ⁇ i )
- the random projection vector k never needs to be explicitly stored since they can be computed on the fly using hash functions over feature indices with a fixed row seed rather than invoking a random number generator. This also permit performance of projection operations that are linear in the observed feature size rather than the overall feature or vocabulary size which can be prohibitively large for high-dimensional data, thereby saving both memory and computation cost.
- SGNN can efficiently model high-dimensional sparse inputs and large vocabulary sizes common for text applications instead of relying on feature pruning or other pre-processing heuristics employed to restrict input sizes in standard neural networks for feasible training.
- the binary representation is significant since this results in a significantly compact representation for the projection network parameters that in turn considerably reduces the model size.
- T and d can be varied depending on the projection network parameter configuration specified for and can be tuned to trade-off between prediction quality and model size. Note that the choice of whether to use a single projection matrix of size T ⁇ d or T separate matrices of d columns depends on the type of projection employed (dense or sparse).
- FIG. 3 depicts an example SGNN 250 according to example embodiments of the present disclosure.
- the SGNN 250 receives an input, which, in some implementations, can be sequential in nature (e.g., words in a sequence).
- the SGNN 250 can first include a feature extractor 252 .
- the feature extractor 252 can be viewed as part of the network 250 while in other instances the feature extractor 252 is viewed as a pre-processing step for the network 250 .
- the feature extractor 252 can extract an intermediate feature vector from the input.
- the feature extractor 252 can provide the intermediate feature vector to a projection layer 254 .
- the input to the projection layer 254 can include a single input vector that has been generated on the basis of the entire input x i , . . . , x n and additional features derived from or otherwise associated with the input. Such multiple types of information can be concatenated to form the single input vector.
- the SGNN 250 can process the single input vector to produce a classification output that classifies the input as a whole.
- the projection layer 254 can project the received vector into a lower-dimensional space, for example as described with reference to FIG. 2 .
- the example SGNN includes one additional hidden layer, shown here as a fully connected layer 256 .
- a softmax output layer 258 is a prediction (e.g., text classification) for the input over K classes.
- the compact bit units can be used to represent the projection in SGNN.
- the network can learn to move the gradients for points that are nearby to each other in the projected bit space ⁇ in the same direction.
- the SGNN network can be trained end-to-end using backpropagation. Training can progress efficiently, for example, with stochastic gradient descent with distributed computing on high-performance CPUs or GPUs.
- the overall complexity for SGNN inference, governed by the projection layer, is O(n ⁇ T ⁇ d), where n is the observed feature size (not the overall vocabulary size) which is linear in input size, d is the number of LSH bits specified for each projection vector k , and T is the number of projection functions used in .
- the model size (in terms of number of parameters) and memory storage required for the projection inference step is O(T ⁇ d ⁇ C), where C is the number of hidden units in h p in the multi-layer projection network.
- One example task that can be performed by SGNNs is text classification.
- the neural network is given text and/or intermediate features derived from text and considers all terms and/or features to make a single classification (e.g., binary or multi-class classification).
- the input is a text and the output is a class label.
- Example applications of the classification task in natural language processing include: dialog act classification; humor & sarcasm detection; sentiment analysis; question classification; news headline classification; emotion recognition; health notifications; intent classification (dialog); and automated essay scoring.
- Example experimental evaluations were conducted on two dialog act benchmark datasets: SWDA and MRDA.
- Switchboard Dialog Act Corpus is a popular open domain dialogs corpus between two speakers with 42 dialogs acts.
- ICSI Meeting Recorder Dialog Act Corpus is a dialog corpus of multiparty meetings with 5 tags of dialog acts.
- MRDA ICSI Meeting Recorder Dialog Act Corpus
- Table 1 summarizes dataset statistics. The train, validation and test splits were used as defined in Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and convolutional neural networks. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies , pages 515-520; and Ortega and Vu. 2017. Neural-based context representation learning for dialog act classification. In Proceedings of the 18 th Annual SIGdial Meeting on Discourse and Dialogue , pages 247-252.
- the experimental evaluations were set up as follows: given a classification task and a dataset, generate an on-device model.
- the size of the model can be configured (by adjusting the projection matrix ) to fit in the memory footprint of the device, e.g., a phone has more memory compared to a smart watch.
- the Accuracy is reported on the test set.
- Tables 2 and 3 show example experimental results on the SwDA and MRDA dialog act datasets. Overall, the example implementation of the SGNN model architecture consistently outperforms the baselines and prior state-of-the-art deep learning models.
- the SGNN model implementation was compared against a majority class baseline and Naive Bayes classifier (Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and convolutional neural networks. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies , pages 515-520). The SGNN implementation significantly outperforms both baselines by 12 to 35% absolute.
- the SGNN's performance was also compared against prior work using HMMs (Stolcke et al., 2000. Dialogue act modeling for automatic tagging and recognition of conversational speech. Comput. Linguist., 26(3):339-373) and recent deep learning methods like CNN (Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and convolutional neural networks. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies , pages 515-520), RNN (Khanpour et al., 2016. Dialogue act classification in domain-independent conversations using a deep recurrent neural network.
- the SGNN obtains the best result of 83.1 and 86.7 accuracy outperforming prior state-of-the-art work. This is very impressive given that the SGNN works with very small memory footprint and also does not rely on pre-trained word embeddings. The results also show that the proposed method is very effective for such natural language tasks compared to more complex neural network architectures such as deep CNN (Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and convolutional neural networks. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies , pages 515-520) and RNN variants (Khanpour et al., 2016.
- Dialogue act classification in domain-independent conversations using a deep recurrent neural network In Proceedings of COLING 2016, the 26 th International Conference on Computational Linguistics: Technical Papers , pages 2012-2021; Ortega and Vu. 2017. Neural-based context representation learning for dialog act classification. In Proceedings of the 18 th Annual SIGdial Meeting on Discourse and Dialogue , pages 247-252).
- the compression techniques like locality sensitive projections jointly coupled with non-linear functions are effective at capturing low-dimensional semantic text representations that are useful for text classification applications.
- LSTMs have millions of parameters, while the example implementation of the SGNN architecture has just 300K parameters (order of magnitude lower).
- Most deep learning methods also use large vocabulary size of 10K or higher.
- Each word embedding is represented as 100-dimensional vector leading to a storage requirement of 10,000 ⁇ 100 parameter weights just in the first layer of the deep network.
- SGNNs in all the example experiments use a fixed 1120-dimensional vector regardless of the vocabulary or feature size, dynamic computation results in further speed up for high-dimensional feature spaces. This amounts to a huge savings in storage and computation cost wrt FLOPS (floating point operations per second).
- DRLM-conditional training 77.0 Ji and Bilmes. 2006. Backoff model training using partially observed data: Application to dialog act tagging. In Proceedings of the Main Conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics , HLT-NAACL '06, pages 280-287) DRLM-joint training 74.0 (Ji and Bilmes. 2006. Backoff model training using partially observed data: Application to dialog act tagging. In Proceedings of the Main Conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics , HLT-NAACL '06, pages 280-287) LSTM 69.9 (Lee and Dernoncourt. 2016.
- ProSeqoNets can include one or more projection layers followed by, for example, one or more projection sequence layers.
- Each projection sequence layer can pass information forward and/or backward to subsequent and/or previous iterations of such layer as a sequential input is input into the network over a series of time steps.
- each projection sequence layer can include a first set of nodes that pass information forward to subsequent iterations and/or receive information from previous iterations and also a second set of nodes that receive information passed back from subsequent iterations and/or pass information backward to previous iterations.
- FIG. 4 depicts an example projection sequence network 270 according to example embodiments of the present disclosure.
- FIG. 4 depicts n iterations of the projection sequence network 270 implemented over n times steps relative to n inputs from a sequential input source.
- the input to projection sequence network 270 can be sequential in nature and the projection sequence network 270 can operate iteratively (e.g., at each of a plurality of time steps) to process the sequential input.
- the projection sequence network 270 can operate iteratively (e.g., at each of a plurality of time steps) to process the sequential input.
- one input portion x i of the input can be input at each of a plurality of iterations.
- input portion x i can be input.
- information from past time steps e.g., the raw text and/or intermediate feature data
- the projection sequence network 270 can include a feature extractor 272 .
- the feature extractor 272 can extract an intermediate feature vector from the input.
- the feature extractor 272 can provide the intermediate feature vector to a projection layer 274 .
- the feature extractor 272 can be viewed as part of the network 270 while in other instances the feature extractor 272 is viewed as a pre-processing step for the network 270 .
- additional features can be provided as initial or intermediate input to the projection layer 274 in addition to the base input.
- these additional features can be included in one or more additional feature vectors.
- the input to the projection layer 274 can include multiple feature vectors which may expressed according to different dimensions. These feature vectors may or may not include type information that describes the type of features.
- the input to projection layer 274 includes multiple feature vectors
- input of such vectors into the network can be handled in a number of different ways.
- the multiple feature vectors can be concatenated and flattened to form a single input vector.
- each feature vector can be separately input into the projection layer 274 and separately projected by the projection layer 274 .
- the outputs of the projection layer 274 can be concatenated in the projected space (e.g., the bit space).
- some projection functions and/or bit space positions can be reserved and used for encoding the type information respectively associated with the feature vectors, such that the network 270 (e.g., the lowest projection sequence layer 276 ) can learn, in the projected space, to choose or ignore various information based on its feature type as it relates to the input or other feature types.
- the projection layer 274 can project the received vector into a lower-dimensional space, for example as described with reference to FIG. 2 .
- the example projection sequence network 270 includes two projection sequence layers, shown here as projection sequence layers 276 and 278 . Although two projection sequence layers are shown, the network can include any number of projection sequence layer(s).
- a final layer 280 is a final layer 280 .
- the output of the final layer 280 (e.g., over the time steps) is an output sequence (and scores).
- Each projection sequence layer (e.g., 276 , 278 ) can pass information forward and/or backward to subsequent and/or previous iterations of such layer as a sequential input is input into the network over a series of time steps.
- each projection sequence layer can include a first set of nodes that pass information forward to subsequent iterations and/or receive information from previous iterations and also a second set of nodes that receive information passed back from subsequent iterations and/or pass information backward to previous iterations.
- projection sequence layer 276 includes a first set of nodes 282 that pass internal state information from time step 1 to themselves in the subsequent iteration of the layer 276 at time step 2.
- Projection sequence layer 276 includes a second set of nodes 284 that receive internal state information from time step 2 from the same nodes but in the subsequent iteration of the layer 276 at time step 2.
- a second set of nodes 284 receives internal state information from time step 2 from the same nodes but in the subsequent iteration of the layer 276 at time step 2.
- one or more (e.g., all) of the nodes included in the first set of nodes 282 and/or the second set of nodes 284 can be or include recurrent cells that have been modified for inclusion in the projection sequence layer.
- Example recurrent cells include LSTM cells and gated recurrent units (GRUs).
- the projection state can be used to modify the internal state or dependencies of the cell rather than the base input features.
- sequence labeling One example task that can be performed by ProSeqoNets is sequence labeling.
- the neural network is given text and/or intermediate features derived from text and identifies segments (e.g., sequences of words/phrases) and classifies those segments into multiple classes.
- segments e.g., sequences of words/phrases
- the input is a text and the output is labeled sequences.
- Example applications of the sequence labeling task in natural language processing include: named entity recognition; keyphrase extraction; noun phrase extraction; chunking; relation extraction; semantic parsing; slot extraction in dialog systems; product (shopping) & attribute extraction; and aspect based sentiment analysis.
- Additional example applications of the ProSeqoNets include translating text between languages; text completion (e.g., sentence completion and/or automatic reply); or other generative tasks. Some example tasks and applications are as follows.
- the task is to identify every entity E and attribute A pair towards which an opinion is expressed in the given text.
- FIG. 5 A is a block diagram of an example data flow by which a projection neural network system (e.g., the projection neural network system 100 ) can train a projection neural network (e.g., the projection neural network 102 ).
- the system provides a training input 302 from a set of training data 304 to the projection network 102 .
- the projection network 102 processes the training input 302 in accordance with current values of projection network parameters to generate a projection network output 106 .
- the system updates the current values of the projection network parameters by computing a gradient (e.g., by a backpropagation procedure) of a loss functions that depends on the projection network output 106 and a target output 310 .
- a gradient e.g., by a backpropagation procedure
- the system can update the current values of the projection network parameters by a gradient of a loss function (referred to as a projection prediction loss function) that depends on an error between the projection network output 106 and the target output 310 .
- a projection prediction loss function a loss function that depends on an error between the projection network output 106 and the target output 310 .
- Updating the current values of the projection network parameters by the gradient of the projection prediction loss function can cause the projection network 102 to generate an output that is more similar to the target output 310 (i.e., in response to processing the training input 302 ).
- the projection neural network 302 can be trained based solely on its own performance relative to the training data 304 as compared with the target output.
- FIG. 5 B is a block diagram of an alternative example data flow by which a projection neural network system (e.g., the projection neural network system 100 ) can train a projection neural network (e.g., the projection neural network 102 ).
- a projection neural network system e.g., the projection neural network system 100
- a projection neural network e.g., the projection neural network 102
- the system provides a training input 302 from a set of training data 304 to the projection network 102 .
- the projection network 102 processes the training input 302 in accordance with current values of projection network parameters to generate a projection network output 106 .
- the system provides the same training input 302 to a trainer network 306 .
- the trainer network 306 processes the training input 302 in accordance with current values of trainer network parameters to generate a trainer network output 308 .
- the trainer network 306 can be a feed-forward neural network, a recurrent neural network, or any other appropriate type of neural network that is configured to generate the same kinds of outputs as the projection network 102 given the same training input. In general, the trainer network 306 has more parameters (in some cases, by several orders of magnitude) than the projection network 102 .
- the system jointly updates the current values of the projection network parameters and the trainer network parameters by computing gradients (e.g., by a backpropagation procedure) of a combination of several different loss functions.
- the loss functions can depend on the projection network output 106 , the trainer network output 308 , or both.
- the system can update the current values of the trainer network parameters by a gradient of a loss function ⁇ (referred to as a trainer prediction loss function) that depends on an error between the trainer network output 308 and the target output 310 associated with the training input 302 in the training data 304 .
- the target output 310 is an output that should be generated by the trainer neural network 306 and the projection network 102 in response to processing the training input 302 .
- Updating the current values of the trainer network parameters by the gradient of the trainer prediction loss function ⁇ can cause the trainer network 306 to generate an output that is more similar to target output 310 (i.e., in response to processing the training input 302 ).
- the system can update the current values of the projection network parameters by a gradient of a loss function (referred to as a projection prediction loss function) that depends on an error between the projection network output 106 and the target output 310 . Updating the current values of the projection network parameters by the gradient of the projection prediction loss function can cause the projection network 102 to generate an output that is more similar to the target output 310 (i.e., in response to processing the training input 302 ).
- a projection prediction loss function a gradient of a loss function that depends on an error between the projection network output 106 and the target output 310 . Updating the current values of the projection network parameters by the gradient of the projection prediction loss function can cause the projection network 102 to generate an output that is more similar to the target output 310 (i.e., in response to processing the training input 302 ).
- the system can also update the current values of the projection network parameters (and, optionally, the trainer network parameters) by a gradient of a loss function p (referred to as a projection simulation loss function) that depends on an error between the trainer network output 308 and the projection network output 106 . Updating the current values of the projection network parameters by the gradient of the projection simulation loss function p can cause the projection network 102 to generate an output that is more similar to the trainer network output 308 .
- a gradient of a loss function p referred to as a projection simulation loss function
- the system can (in some cases) enable the projection network 102 to generate predictions that are similar in accuracy to the predictions generated by the trainer network 306 , despite the projection network 102 having far fewer parameters (e.g., in some cases, by several orders of magnitude) than the trainer network 306 .
- the trainer prediction loss function ⁇ , the projection prediction loss function , and the projection simulation loss function p can be any appropriate loss functions.
- the loss functions may be cross-entropy loss functions.
- the loss functions may be squared-error loss functions.
- the system may adjust the parameters of the projection network 102 and the trainer network 306 by a weighted combination of gradients of each of the described loss functions.
- a graph-based system that generates a projection graph as a compact representation of a trainer graph, can jointly train the projection graph, the trainer graph, and the parameters of the projection layer operations used to determine the projection graph from the trainer graph.
- the parameters of the projection layer operations can be trained (e.g., by a backpropagation procedure) to cause the predictions generated by the graph-based system based on the projection graph to become more similar to the predictions generated by the graph-based system based on the trainer graph.
- the similarity between predictions may be measured by a loss function, such as a cross-entropy loss function.
- the predictions generated by the graph-based system based on the projection graph and the trainer graph may be predicted labels for labeled or unlabeled nodes in the projection graph and trainer graph respectively.
- FIG. 6 A depicts a block diagram of an example computing system 600 according to example embodiments of the present disclosure.
- the system 600 includes a user computing device 602 , a server computing system 630 , and a training computing system 650 that are communicatively coupled over a network 680 .
- the user computing device 602 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 602 includes one or more processors 612 and a memory 614 .
- the one or more processors 612 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 614 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 614 can store data 616 and instructions 618 which are executed by the processor 612 to cause the user computing device 602 to perform operations.
- the user computing device 602 can store or include one or more projection neural networks 620 .
- the projection neural networks 620 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example projection neural networks 620 are discussed with reference to FIGS. 1 - 4 .
- the one or more projection neural networks 620 can be received from the server computing system 630 over network 680 , stored in the user computing device memory 614 , and then used or otherwise implemented by the one or more processors 612 .
- the user computing device 602 can implement multiple parallel instances of a single projection neural network 620 .
- one or more projection neural networks 640 can be included in or otherwise stored and implemented by the server computing system 630 that communicates with the user computing device 602 according to a client-server relationship.
- the projection neural networks 640 can be implemented by the server computing system 640 as a portion of a web service.
- one or more projection neural networks 620 can be stored and implemented at the user computing device 602 and/or one or more projection neural networks 640 can be stored and implemented at the server computing system 630 .
- the user computing device 602 can also include one or more user input component 622 that receives user input.
- the user input component 622 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 630 includes one or more processors 632 and a memory 634 .
- the one or more processors 632 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 634 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 634 can store data 636 and instructions 638 which are executed by the processor 632 to cause the server computing system 630 to perform operations.
- the server computing system 630 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 630 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 630 can store or otherwise include one or more machine-learned projection neural networks 640 .
- the projection neural networks 640 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example projection neural networks 640 are discussed with reference to FIGS. 1 - 4 .
- the user computing device 602 and/or the server computing system 630 can train the projection neural networks 620 and/or 640 via interaction with the training computing system 650 that is communicatively coupled over the network 680 .
- the training computing system 650 can be separate from the server computing system 630 or can be a portion of the server computing system 630 .
- the training computing system 650 includes one or more processors 652 and a memory 654 .
- the one or more processors 652 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 654 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 654 can store data 656 and instructions 658 which are executed by the processor 652 to cause the training computing system 650 to perform operations.
- the training computing system 650 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 650 can include a model trainer 660 that trains the machine-learned projection neural networks 620 and/or 640 stored at the user computing device 602 and/or the server computing system 630 using various training or learning techniques, such as, for example, backwards propagation of errors.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 660 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 660 can train the projection neural networks 620 and/or 640 based on a set of training data 662 .
- the training data 662 can include, for example, textual input that has been labeled with target outputs or otherwise has target outputs associated therewith.
- the target outputs can be text classifications and/or segment classifications.
- the training examples can be provided by the user computing device 602 .
- the projection neural network 620 provided to the user computing device 602 can be trained by the training computing system 650 on user-specific data received from the user computing device 602 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 660 includes computer logic utilized to provide desired functionality.
- the model trainer 660 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 660 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 660 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 680 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 680 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 6 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 602 can include the model trainer 660 and the training dataset 662 .
- the projection neural networks 620 can be both trained and used locally at the user computing device 602 .
- the user computing device 602 can implement the model trainer 660 to personalize the projection neural networks 620 based on user-specific data.
- FIG. 6 B depicts a block diagram of an example computing device 60 according to example embodiments of the present disclosure.
- the computing device 60 can be a user computing device or a server computing device.
- the computing device 60 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 6 C depicts a block diagram of an example computing device 690 according to example embodiments of the present disclosure.
- the computing device 690 can be a user computing device or a server computing device.
- the computing device 690 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 6 C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 690 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 690 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 690 . As illustrated in FIG. 6 C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
- This specification describes a projection neural network implemented as computer programs on one or more computers in one or more locations.
- a system including one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to implement a projection neural network.
- the projection neural network is configured to receive a projection network input and to generate a projection network output from the projection network input.
- the projection neural network includes a sequence of one or more projection layers, wherein each projection layer has multiple projection layer parameters.
- Each projection layer is configured to receive a layer input and apply multiple projection layer functions to the layer input.
- Each projection layer function generates a respective projection function output that projects the layer input to a different space.
- Each projection layer generates a layer output by applying the projection layer parameters for the projection layer to the projection function outputs.
- the projection neural network further includes an output layer configured to receive a layer output generated by a highest projection layer in the sequence and to generate the projection network output.
- the output layer is a softmax output layer.
- the projection neural network includes only the sequence of projection layers and the output layer.
- a layer output of the highest projection layer in the sequence is the projection network output.
- the projection neural network includes only the sequence of projection layers.
- the layer input of a lowest projection layer in the sequence is a network input to the projection neural network.
- the layer input of any projection layer other than the lowest projection layer is a layer output generated by the projection layer immediately below the projection layer in the sequence.
- each projection function is associated with a respective set of projection vectors. Applying each projection function to the layer input includes, for each projection vector: (i) determining a dot product between the layer input and the projection vector, (ii) when the dot product is negative, assigning a first value to a corresponding position in the projection function output, and (iii) when the dot product is positive, assigning a second value to the corresponding position in the projection function output.
- the projection functions are each encoded as sparse matrices and are used to generate a binary representation from the layer input.
- the projection layer parameters include a parameter matrix and a bias vector.
- Generating the layer output by applying the projection layer parameters for the projection layer to the projection function outputs includes applying the parameter matrix to the projection function outputs and then adding the bias vector to the result.
- a method of training the projection neural network includes receiving a training input and a target output for the training input.
- the training input is processed using the projection neural network in accordance with current values of the projection layer parameters to generate a projection network output for the training input.
- the training input is processed using a trainer neural network having multiple trainer neural network parameters.
- the trainer neural network is configured to process the training input in accordance with current values of the trainer neural network parameters to generate a trainer network output that is specific to the particular machine learning task.
- a gradient is determined with respect to the trainer neural network parameters of a loss function that depends on an error between the target output and the trainer network output.
- the output generated by the trainer neural network is a soft target output.
- the method further includes determining a gradient with respect to the trainer network parameters of the loss function that depends on the error between the trainer network output and the projection network output.
- the update to the current values of the trainer network parameters is also based on the gradient with respect to the trainer network parameters of the loss function that depends on the error between the trainer network output and the projection network output.
- the method further includes determining a gradient with respect to the projection layer parameters of a loss function that depends on an error between the target output and the projection network output.
- the update to the current values of the projection layer parameters is also based on the gradient with respect to the projection layer parameters of the loss function that depends on the error between the target output and the projection network output.
- a system including one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform the operations of the previously described method.
- one or more computer storage media storing instructions that when executed by one or more computers cause the one or more computers to perform the operations of the previously described method.
- one or more computer storage media storing instructions that when executed by one or more computers cause the one or more computers to implement the previously described projection neural network.
Abstract
Description
where <·,·> denotes the dot product operation between vectors, and {Pi}i=1 n are the projection vectors associated with the projection function
where sgn(·) is the sign function, which outputs
y=W·x+b (3)
where W is the parameter matrix (i.e., so that W·x represents a matrix-vector multiplication), b is the bias vector, and x is the concatenation of the projection function outputs.
i p=[
h p=σ(W p ·i p +b p) (5)
h t=σ(W t ·h t-1 +b t) (6)
y i=softmax(W o·hk +b o) (7)
where ip refers to the output of projection operation applied to input xi, hp is applied to projection output, ht is applied at intermediate layers of the network with depth k followed by a final softmax activation layer at the top. Wp, Wt, Wo and bp, bt, bo represent trainable weights and biases respectively.
x i
Person Talking | Input | Output | ||
A | You're a, so you're a senior | DECLARATIVE- | ||
now | QUESTION | |||
B | Yeah | YES-ANSWER | ||
B | I'm working on my projects | STATEMENT | ||
trying to graduate | ||||
A | Oh, good for you | APPRECIATION | ||
B | Yeah | BACKCHANNEL | ||
-
- Input: I love being ignored
- Output: SARCASM
-
- Input: The ravioli just keeps getting better every time I visit.
- Output: POSITIVE
-
- Input: How did serfdom develop in and then leave Russia?
- Output: DESC:MANNER
- Input: How much would it cost to purchase a 2 footsquare party tent, with sides, ?
- Output: NUM:MONEY
-
- Input: TeleCorp confirms it is buying ad platform AppCorp, reportedly for between $1.6B$ 2B
- Output: BUSINESS
-
- Input: Wow I never saw that coming!
- Output: SURPRISE
-
- Input: Play levels on YouTube
- Output: INTENT_PLAY_SONG_ON_DEVICE_NAME
TABLE 1 |
Dialog Act Datasets Statistics |
Datasets | Class | Vocab. | Train | Validation | Test | ||
SwDA | 42 | 20K | 193K | 23K | 5K | ||
MRDA | 5 | 12K | 78K | 16K | 15K | ||
TABLE 2 |
SwDA Dataset Results |
Method | Accuracy |
Majority Class (baseline) | 33.7 |
(Ortega and Vu. 2017. Neural-based context representation learning for dialog act | |
classification. In Proceedings of the 18th Annual SIGdial Meeting on Discourse and | |
Dialogue, pages 247-252) | |
Naive Bayes (baseline) | 47.3 |
(Khanpour et al., 2016. Dialogue act classification in domain-independent | |
conversations using a deep recurrent neural network. In Proceedings of COLING 2016, | |
the 26th International Conference on Computational Linguistics: Technical Papers, | |
pages 2012-2021) | |
HMM | 71.0 |
(Stolcke et al., 2000. Dialogue act modeling for automatic tagging and recognition of | |
conversational speech. Comput. Linguist., 26(3):339-373) | |
DRLM-conditional training | 77.0 |
(Ji and Bilmes. 2006. Backoff model training using partially observed data: | |
Application to dialog act tagging. In Proceedings of the Main Conference on Human | |
Language Technology Conference of the North American Chapter of the Association of | |
Computational Linguistics, HLT-NAACL '06, pages 280-287) | |
DRLM-joint training | 74.0 |
(Ji and Bilmes. 2006. Backoff model training using partially observed data: | |
Application to dialog act tagging. In Proceedings of the Main Conference on Human | |
Language Technology Conference of the North American Chapter of the Association of | |
Computational Linguistics, HLT-NAACL '06, pages 280-287) | |
LSTM | 69.9 |
(Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and | |
convolutional neural networks. In Proceedings of the 2016 Conference of the North | |
American Chapter of the Association for Computational Linguistics: Human Language | |
Technologies, pages 515-520) | |
CNN | 73.1 |
(Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and | |
convolutional neural networks. In Proceedings of the 2016 Conference of the North | |
American Chapter of the Association for Computational Linguistics: Human Language | |
Technologies, pages 515-520) | |
Gated-Attention&HMM | 74.2 |
(Tran et al., 2017. A generative attentional neural network model for dialogue act | |
classification. In Proceedings of the 55th Annual Meeting of the Association for | |
Computational Linguistics (Volume 2: Short Papers), pages 524-529) | |
RNN + Attention | 73.8 |
(Ortega and Vu. 2017. Neural-based context representation learning for dialog act | |
classification. In Proceedings of the 18th Annual SIGdial Meeting on Discourse and | |
Dialogue, pages 247-252) | |
RNN | 80.1 |
(Khanpour et al., 2016. Dialogue act classification in domain-independent | |
conversations using a deep recurrent neural network. In Proceedings of COLING 2016, | |
the 26th International Conference on Computational Linguistics: Technical Papers, | |
pages 2012-2021) | |
Self-Governing Neural Nets | 83.1 |
TABLE 3 |
MRDA Dataset Results |
Method | Accuracy |
Majority Class (baseline) | 59.1 |
(Ortega and Vu. 2017. Neural-based context representation learning for dialog act | |
classification. In Proceedings of the 18th Annual SIGdial Meeting on Discourse and | |
Dialogue, pages 247-252) | |
Naive Bayes (baseline) | 74.6 |
(Khanpour et al. 2016. Dialogue act classification in domain-independent | |
conversations using a deep recurrent neural network. In Proceedings of COLING 2016, | |
the 26th International Conference on Computational Linguistics: Technical Papers, | |
pages 2012-2021) | |
Graphical Model | 81.3 |
(Ji and Bilmes. 2006. Backoff model training using partially observed data: | |
Application to dialog act tagging. In Proceedings of the Main Conference on Human Language Technology | |
Conference of the North American Chapter of the Association of Computational Linguistics, | |
HLT-NAACL '06, pages 280-287) | |
CNN | 84.6 |
(Lee and Dernoncourt. 2016. Sequential short-text classification with recurrent and | |
convolutional neural networks. In Proceedings of the 2016 Conference of the North | |
American Chapter of the Association for Computational Linguistics: Human Language | |
Technologies, pages 515-520) | |
RNN + Attention | 84.3 |
(Ortega and Thang Vu. 2017. Neural-based context representation learning for dialog | |
act classification. In Proceedings of the 18th Annual SIGdial Meeting on Discourse | |
and Dialogue, pages 247-252) | |
RNN | 86.8 |
(Khanpour et al. 2016. Dialogue act classification in domain-independent | |
conversations using a deep recurrent neural network. In Proceedings of COLING 2016, | |
the 26th International Conference on Computational Linguistics: Technical Papers, | |
pages 2012-2021) | |
Self-Governing Neural Nets | 86.7 |
-
- Input: The University of Southern California is located in Los Angeles.
- Output: The [University of Southern California]_Organization is located in [Los Angeles]_Location
-
- Input: We offer a wide variety of items including healthy dry cat food for $5.
- Output: We offer a wide variety of items including [healthy dry cat food]_KeyPhrase for $5.
-
- Input: Huge hurricanes struck the coast of Japan.
- Output: [Huge hurricanes] Noun_Phrase struck [the coast] Noun_Phrase of [Japan] Noun_Phrase
-
- Input: Huge hurricanes struck the coast of Japan.
- Output: [Huge hurricanes]_Noun_Phrase [struck]_Verb_Phrase [[the coast]_Noun_Phrase [of]_Prep [Japan]_Noun_Phrase]]_Prep_Noun_Phrase
-
- Input: CorporationA was acquired by CorporationB to create synergies.
- Output: [[CorporationA]_e1 was acquired by [CorporationB]_e2]_purchase(e2,e1) to create synergies.
-
- Input: Remind me to set the timer to 5.
- Output: [Remind]_Evoking [me]_Creator to [set]_Intentionally_Create [the timer]_Created_Entity to 5.
-
- Input: Reserve a flight from San Francisco to LAX for two people after 3 pm.
- Output: [Reserve a flight]_Book_Flight_Intent from [San Francisco]_FromDestination:Location/Airport to [LAX]_ToDestination:Location/Airport for [two people]_Number_of_People after [3 pm]_Date_and_Time.
-
- Input: This expensive shirt ripped all the way to my shoulder, the fabric is too soft.
- Output: This [expensive]_price [shirt]_product ripped all the way to my shoulder, the [fabric]_textile was too soft and runs [small]_size.
-
- Input: The flank steak was great, but the service was horrible.
- Output: The [flank steak]_Sentiment:Positive was great, but the [service]_Sentiment:Negative and [ambience]_Sentiment:Negative were horrible.
-
- Input: I like to dance the tango.
- Output: Me gusta bailar el tango.
-
- Input: A zebra has black and white
- Output: stripes
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/878,631 US11934791B2 (en) | 2018-08-02 | 2022-08-01 | On-device projection neural networks for natural language understanding |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862714028P | 2018-08-02 | 2018-08-02 | |
US16/135,545 US10885277B2 (en) | 2018-08-02 | 2018-09-19 | On-device neural networks for natural language understanding |
US17/141,473 US11423233B2 (en) | 2018-08-02 | 2021-01-05 | On-device projection neural networks for natural language understanding |
US17/878,631 US11934791B2 (en) | 2018-08-02 | 2022-08-01 | On-device projection neural networks for natural language understanding |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/141,473 Continuation US11423233B2 (en) | 2018-08-02 | 2021-01-05 | On-device projection neural networks for natural language understanding |
Publications (2)
Publication Number | Publication Date |
---|---|
US20230048218A1 US20230048218A1 (en) | 2023-02-16 |
US11934791B2 true US11934791B2 (en) | 2024-03-19 |
Family
ID=69228678
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/135,545 Active US10885277B2 (en) | 2018-08-02 | 2018-09-19 | On-device neural networks for natural language understanding |
US17/141,473 Active 2038-10-30 US11423233B2 (en) | 2018-08-02 | 2021-01-05 | On-device projection neural networks for natural language understanding |
US17/878,631 Active US11934791B2 (en) | 2018-08-02 | 2022-08-01 | On-device projection neural networks for natural language understanding |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/135,545 Active US10885277B2 (en) | 2018-08-02 | 2018-09-19 | On-device neural networks for natural language understanding |
US17/141,473 Active 2038-10-30 US11423233B2 (en) | 2018-08-02 | 2021-01-05 | On-device projection neural networks for natural language understanding |
Country Status (1)
Country | Link |
---|---|
US (3) | US10885277B2 (en) |
Families Citing this family (62)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8977255B2 (en) | 2007-04-03 | 2015-03-10 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US8676904B2 (en) | 2008-10-02 | 2014-03-18 | Apple Inc. | Electronic devices with voice command and contextual data processing capabilities |
US10417037B2 (en) | 2012-05-15 | 2019-09-17 | Apple Inc. | Systems and methods for integrating third party services with a digital assistant |
CN104969289B (en) | 2013-02-07 | 2021-05-28 | 苹果公司 | Voice trigger of digital assistant |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US20160378747A1 (en) | 2015-06-29 | 2016-12-29 | Apple Inc. | Virtual assistant for media playback |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US10331312B2 (en) | 2015-09-08 | 2019-06-25 | Apple Inc. | Intelligent automated assistant in a media environment |
US10740384B2 (en) | 2015-09-08 | 2020-08-11 | Apple Inc. | Intelligent automated assistant for media search and playback |
US9946437B2 (en) * | 2015-11-05 | 2018-04-17 | International Business Machines Corporation | Modifying an appearance of a GUI to improve GUI usability |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10586535B2 (en) | 2016-06-10 | 2020-03-10 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
DK179415B1 (en) | 2016-06-11 | 2018-06-14 | Apple Inc | Intelligent device arbitration and control |
DK201670540A1 (en) | 2016-06-11 | 2018-01-08 | Apple Inc | Application integration with a digital assistant |
DK180048B1 (en) | 2017-05-11 | 2020-02-04 | Apple Inc. | MAINTAINING THE DATA PROTECTION OF PERSONAL INFORMATION |
DK179496B1 (en) | 2017-05-12 | 2019-01-15 | Apple Inc. | USER-SPECIFIC Acoustic Models |
DK201770427A1 (en) | 2017-05-12 | 2018-12-20 | Apple Inc. | Low-latency intelligent automated assistant |
CN107908635B (en) * | 2017-09-26 | 2021-04-16 | 百度在线网络技术（北京）有限公司 | Method and device for establishing text classification model and text classification |
US11080485B2 (en) | 2018-02-24 | 2021-08-03 | Twenty Lane Media, LLC | Systems and methods for generating and recognizing jokes |
US10878817B2 (en) * | 2018-02-24 | 2020-12-29 | Twenty Lane Media, LLC | Systems and methods for generating comedy |
US10928918B2 (en) | 2018-05-07 | 2021-02-23 | Apple Inc. | Raise to speak |
US11145294B2 (en) | 2018-05-07 | 2021-10-12 | Apple Inc. | Intelligent automated assistant for delivering content from user experiences |
DK180639B1 (en) | 2018-06-01 | 2021-11-04 | Apple Inc | DISABILITY OF ATTENTION-ATTENTIVE VIRTUAL ASSISTANT |
US10885277B2 (en) | 2018-08-02 | 2021-01-05 | Google Llc | On-device neural networks for natural language understanding |
US10872601B1 (en) * | 2018-09-27 | 2020-12-22 | Amazon Technologies, Inc. | Natural language processing |
US11462215B2 (en) | 2018-09-28 | 2022-10-04 | Apple Inc. | Multi-modal inputs for voice commands |
US11868440B1 (en) * | 2018-10-04 | 2024-01-09 | A9.Com, Inc. | Statistical model training systems |
US11741356B2 (en) * | 2019-02-08 | 2023-08-29 | Korea Advanced Institute Of Science & Technology | Data processing apparatus by learning of neural network, data processing method by learning of neural network, and recording medium recording the data processing method |
CN111368996B (en) * | 2019-02-14 | 2024-03-12 | 谷歌有限责任公司 | Retraining projection network capable of transmitting natural language representation |
US11444845B1 (en) * | 2019-03-05 | 2022-09-13 | Amazon Technologies, Inc. | Processing requests using compressed and complete machine learning models |
US11348573B2 (en) | 2019-03-18 | 2022-05-31 | Apple Inc. | Multimodality in digital assistant systems |
US11704573B2 (en) * | 2019-03-25 | 2023-07-18 | Here Global B.V. | Method, apparatus, and computer program product for identifying and compensating content contributors |
US11494615B2 (en) * | 2019-03-28 | 2022-11-08 | Baidu Usa Llc | Systems and methods for deep skip-gram network based text classification |
DK201970509A1 (en) | 2019-05-06 | 2021-01-15 | Apple Inc | Spoken notifications |
US11307752B2 (en) | 2019-05-06 | 2022-04-19 | Apple Inc. | User configurable task triggers |
US11140099B2 (en) | 2019-05-21 | 2021-10-05 | Apple Inc. | Providing message response suggestions |
US11227599B2 (en) | 2019-06-01 | 2022-01-18 | Apple Inc. | Methods and user interfaces for voice-based control of electronic devices |
US11354501B2 (en) * | 2019-08-02 | 2022-06-07 | Spectacles LLC | Definition retrieval and display |
US11231703B2 (en) * | 2019-08-14 | 2022-01-25 | Hitachi, Ltd. | Multi task learning with incomplete labels for predictive maintenance |
US20210081799A1 (en) * | 2019-09-12 | 2021-03-18 | Oracle International Corporation | Compressing neural networks for natural language understanding |
US11620435B2 (en) * | 2019-10-10 | 2023-04-04 | International Business Machines Corporation | Domain specific model compression |
US11338199B2 (en) * | 2020-02-18 | 2022-05-24 | At&T Intellectual Property I, L.P. | Interactive latency measurement |
CN113554145B (en) * | 2020-04-26 | 2024-03-29 | 伊姆西Ip控股有限责任公司 | Method, electronic device and computer program product for determining output of neural network |
US11783812B2 (en) * | 2020-04-28 | 2023-10-10 | Bloomberg Finance L.P. | Dialogue act classification in group chats with DAG-LSTMs |
US11043220B1 (en) | 2020-05-11 | 2021-06-22 | Apple Inc. | Digital assistant hardware abstraction |
US11061543B1 (en) | 2020-05-11 | 2021-07-13 | Apple Inc. | Providing relevant data items based on context |
US11610065B2 (en) | 2020-06-12 | 2023-03-21 | Apple Inc. | Providing personalized responses based on semantic context |
CN111832316A (en) * | 2020-06-30 | 2020-10-27 | 北京小米松果电子有限公司 | Semantic recognition method and device, electronic equipment and storage medium |
US11490204B2 (en) | 2020-07-20 | 2022-11-01 | Apple Inc. | Multi-device audio adjustment coordination |
US11438683B2 (en) | 2020-07-21 | 2022-09-06 | Apple Inc. | User identification using headphones |
CN112001482A (en) * | 2020-08-14 | 2020-11-27 | 佳都新太科技股份有限公司 | Vibration prediction and model training method and device, computer equipment and storage medium |
CN112163064B (en) * | 2020-10-14 | 2024-04-16 | 上海应用技术大学 | Text classification method based on deep learning |
CN112906662B (en) * | 2021-04-02 | 2022-07-19 | 海南长光卫星信息技术有限公司 | Method, device and equipment for detecting change of remote sensing image and storage medium |
US11669331B2 (en) | 2021-06-17 | 2023-06-06 | International Business Machines Corporation | Neural network processing assist instruction |
US11797270B2 (en) | 2021-06-17 | 2023-10-24 | International Business Machines Corporation | Single function to perform multiple operations with distinct operation parameter validation |
US11269632B1 (en) | 2021-06-17 | 2022-03-08 | International Business Machines Corporation | Data conversion to/from selected data type with implied rounding mode |
US11693692B2 (en) | 2021-06-17 | 2023-07-04 | International Business Machines Corporation | Program event recording storage alteration processing for a neural network accelerator instruction |
US11734013B2 (en) | 2021-06-17 | 2023-08-22 | International Business Machines Corporation | Exception summary for invalid values detected during instruction execution |
US11675592B2 (en) | 2021-06-17 | 2023-06-13 | International Business Machines Corporation | Instruction to query for model-dependent information |
Citations (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1993013487A1 (en) | 1991-12-27 | 1993-07-08 | R & D Associates | Rapidly converging projective neural network |
US20140067735A1 (en) | 2012-08-29 | 2014-03-06 | Microsoft Corporation | Computer-implemented deep tensor neural network |
US20140156575A1 (en) | 2012-11-30 | 2014-06-05 | Nuance Communications, Inc. | Method and Apparatus of Processing Data Using Deep Belief Networks Employing Low-Rank Matrix Factorization |
US20150074027A1 (en) | 2013-09-06 | 2015-03-12 | Microsoft Corporation | Deep Structured Semantic Model Produced Using Click-Through Data |
CN104538028A (en) | 2014-12-25 | 2015-04-22 | 清华大学 | Continuous voice recognition method based on deep long and short term memory recurrent neural network |
US20160078339A1 (en) | 2014-09-12 | 2016-03-17 | Microsoft Technology Licensing, Llc | Learning Student DNN Via Output Distribution |
US20160307564A1 (en) | 2015-04-17 | 2016-10-20 | Nuance Communications, Inc. | Systems and methods for providing unnormalized language models |
US20160307566A1 (en) | 2015-04-16 | 2016-10-20 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
EP3144859A2 (en) | 2015-09-18 | 2017-03-22 | Samsung Electronics Co., Ltd. | Model training method and apparatus, and data recognizing method |
US20170132528A1 (en) | 2015-11-06 | 2017-05-11 | Microsoft Technology Licensing, Llc | Joint model training |
US20170139913A1 (en) * | 2015-11-12 | 2017-05-18 | Yahoo! Inc. | Method and system for data assignment in a distributed system |
US9842106B2 (en) | 2015-12-04 | 2017-12-12 | Mitsubishi Electric Research Laboratories, Inc | Method and system for role dependent context sensitive spoken and textual language understanding with neural networks |
US20180121799A1 (en) * | 2016-11-03 | 2018-05-03 | Salesforce.Com, Inc. | Training a Joint Many-Task Neural Network Model using Successive Regularization |
US20180150744A1 (en) | 2016-11-29 | 2018-05-31 | Microsoft Technology Licensing, Llc | Neural network data entry system |
US9990687B1 (en) | 2017-01-19 | 2018-06-05 | Deep Learning Analytics, LLC | Systems and methods for fast and repeatable embedding of high-dimensional data objects using deep learning with power efficient GPU and FPGA-based processing platforms |
US20180260381A1 (en) | 2017-03-09 | 2018-09-13 | Xerox Corporation | Prepositional phrase attachment over word embedding products |
US20180336472A1 (en) | 2017-05-20 | 2018-11-22 | Google Llc | Projection neural networks |
US20180341702A1 (en) | 2017-05-25 | 2018-11-29 | J.W. Pepper & Son, Inc. | Sheet Music Search and Discovery System |
US20180356771A1 (en) | 2015-09-17 | 2018-12-13 | Nanyang Technologyical University | Computer system incorporating an adaptive model and methods for training the adaptive model |
US20190147371A1 (en) | 2017-11-13 | 2019-05-16 | Accenture Global Solutions Limited | Training, validating, and monitoring artificial intelligence and machine learning models |
US20190206095A1 (en) | 2017-12-29 | 2019-07-04 | Tsinghua University | Image processing method, image processing device and storage medium |
US20190294695A1 (en) | 2018-03-22 | 2019-09-26 | International Business Machines Corporation | Implicit relation induction via purposeful overfitting of a word embedding model on a subset of a document corpus |
US20190318725A1 (en) | 2018-04-13 | 2019-10-17 | Mitsubishi Electric Research Laboratories, Inc. | Methods and Systems for Recognizing Simultaneous Speech by Multiple Speakers |
US20190370273A1 (en) | 2018-06-05 | 2019-12-05 | Sap Se | System, computer-implemented method and computer program product for information retrieval |
US20190393903A1 (en) | 2018-06-20 | 2019-12-26 | Disney Enterprises, Inc. | Efficient encoding and decoding sequences using variational autoencoders |
US20200042596A1 (en) | 2018-08-02 | 2020-02-06 | Google Llc | On-Device Neural Networks for Natural Language Understanding |
US20200104102A1 (en) | 2018-09-27 | 2020-04-02 | Microsoft Technology Licensing, Llc | Automated content editor |
US20200265196A1 (en) | 2019-02-14 | 2020-08-20 | Google Llc | Pre-Trained Projection Networks for Transferable Natural Language Representations |
US10812449B1 (en) | 2018-09-19 | 2020-10-20 | Verisign | Method for generating a domain name using a learned information-rich latent space |
US11017778B1 (en) | 2018-12-04 | 2021-05-25 | Sorenson Ip Holdings, Llc | Switching between speech recognition systems |
US20210185066A1 (en) | 2017-09-15 | 2021-06-17 | Spherical Defence Labs Limited | Detecting anomalous application messages in telecommunication networks |
US11068722B2 (en) | 2016-10-27 | 2021-07-20 | Nokia Technologies Oy | Method for analysing media content to generate reconstructed media content |
US11106868B2 (en) | 2018-03-06 | 2021-08-31 | Samsung Electronics Co., Ltd. | System and method for language model personalization |
-
2018
- 2018-09-19 US US16/135,545 patent/US10885277B2/en active Active
-
2021
- 2021-01-05 US US17/141,473 patent/US11423233B2/en active Active
-
2022
- 2022-08-01 US US17/878,631 patent/US11934791B2/en active Active
Patent Citations (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1993013487A1 (en) | 1991-12-27 | 1993-07-08 | R & D Associates | Rapidly converging projective neural network |
US5276771A (en) * | 1991-12-27 | 1994-01-04 | R & D Associates | Rapidly converging projective neural network |
US20140067735A1 (en) | 2012-08-29 | 2014-03-06 | Microsoft Corporation | Computer-implemented deep tensor neural network |
US20140156575A1 (en) | 2012-11-30 | 2014-06-05 | Nuance Communications, Inc. | Method and Apparatus of Processing Data Using Deep Belief Networks Employing Low-Rank Matrix Factorization |
US20150074027A1 (en) | 2013-09-06 | 2015-03-12 | Microsoft Corporation | Deep Structured Semantic Model Produced Using Click-Through Data |
US20160078339A1 (en) | 2014-09-12 | 2016-03-17 | Microsoft Technology Licensing, Llc | Learning Student DNN Via Output Distribution |
CN104538028A (en) | 2014-12-25 | 2015-04-22 | 清华大学 | Continuous voice recognition method based on deep long and short term memory recurrent neural network |
US20160307566A1 (en) | 2015-04-16 | 2016-10-20 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
US20160307564A1 (en) | 2015-04-17 | 2016-10-20 | Nuance Communications, Inc. | Systems and methods for providing unnormalized language models |
US20180356771A1 (en) | 2015-09-17 | 2018-12-13 | Nanyang Technologyical University | Computer system incorporating an adaptive model and methods for training the adaptive model |
EP3144859A2 (en) | 2015-09-18 | 2017-03-22 | Samsung Electronics Co., Ltd. | Model training method and apparatus, and data recognizing method |
US20170132528A1 (en) | 2015-11-06 | 2017-05-11 | Microsoft Technology Licensing, Llc | Joint model training |
US20170139913A1 (en) * | 2015-11-12 | 2017-05-18 | Yahoo! Inc. | Method and system for data assignment in a distributed system |
US9842106B2 (en) | 2015-12-04 | 2017-12-12 | Mitsubishi Electric Research Laboratories, Inc | Method and system for role dependent context sensitive spoken and textual language understanding with neural networks |
US11068722B2 (en) | 2016-10-27 | 2021-07-20 | Nokia Technologies Oy | Method for analysing media content to generate reconstructed media content |
US20180121799A1 (en) * | 2016-11-03 | 2018-05-03 | Salesforce.Com, Inc. | Training a Joint Many-Task Neural Network Model using Successive Regularization |
US20180150744A1 (en) | 2016-11-29 | 2018-05-31 | Microsoft Technology Licensing, Llc | Neural network data entry system |
US9990687B1 (en) | 2017-01-19 | 2018-06-05 | Deep Learning Analytics, LLC | Systems and methods for fast and repeatable embedding of high-dimensional data objects using deep learning with power efficient GPU and FPGA-based processing platforms |
US20180260381A1 (en) | 2017-03-09 | 2018-09-13 | Xerox Corporation | Prepositional phrase attachment over word embedding products |
US20180336472A1 (en) | 2017-05-20 | 2018-11-22 | Google Llc | Projection neural networks |
US10748066B2 (en) | 2017-05-20 | 2020-08-18 | Google Llc | Projection neural networks |
US20200349450A1 (en) | 2017-05-20 | 2020-11-05 | Google Llc | Projection neural networks |
US20180341702A1 (en) | 2017-05-25 | 2018-11-29 | J.W. Pepper & Son, Inc. | Sheet Music Search and Discovery System |
US20210185066A1 (en) | 2017-09-15 | 2021-06-17 | Spherical Defence Labs Limited | Detecting anomalous application messages in telecommunication networks |
US20190147371A1 (en) | 2017-11-13 | 2019-05-16 | Accenture Global Solutions Limited | Training, validating, and monitoring artificial intelligence and machine learning models |
US20190206095A1 (en) | 2017-12-29 | 2019-07-04 | Tsinghua University | Image processing method, image processing device and storage medium |
US10984565B2 (en) | 2017-12-29 | 2021-04-20 | Tsinghua University | Image processing method using convolutional neural network, image processing device and storage medium |
US11106868B2 (en) | 2018-03-06 | 2021-08-31 | Samsung Electronics Co., Ltd. | System and method for language model personalization |
US20190294695A1 (en) | 2018-03-22 | 2019-09-26 | International Business Machines Corporation | Implicit relation induction via purposeful overfitting of a word embedding model on a subset of a document corpus |
US10885082B2 (en) | 2018-03-22 | 2021-01-05 | International Business Machines Corporation | Implicit relation induction via purposeful overfitting of a word embedding model on a subset of a document corpus |
US20190318725A1 (en) | 2018-04-13 | 2019-10-17 | Mitsubishi Electric Research Laboratories, Inc. | Methods and Systems for Recognizing Simultaneous Speech by Multiple Speakers |
US10811000B2 (en) | 2018-04-13 | 2020-10-20 | Mitsubishi Electric Research Laboratories, Inc. | Methods and systems for recognizing simultaneous speech by multiple speakers |
US20190370273A1 (en) | 2018-06-05 | 2019-12-05 | Sap Se | System, computer-implemented method and computer program product for information retrieval |
US20190393903A1 (en) | 2018-06-20 | 2019-12-26 | Disney Enterprises, Inc. | Efficient encoding and decoding sequences using variational autoencoders |
US20190392302A1 (en) | 2018-06-20 | 2019-12-26 | Disney Enterprises, Inc. | Efficient encoding and decoding sequences using variational autoencoders |
US10885277B2 (en) | 2018-08-02 | 2021-01-05 | Google Llc | On-device neural networks for natural language understanding |
US20210124878A1 (en) | 2018-08-02 | 2021-04-29 | Google Llc | On-Device Projection Neural Networks for Natural Language Understanding |
US20200042596A1 (en) | 2018-08-02 | 2020-02-06 | Google Llc | On-Device Neural Networks for Natural Language Understanding |
US10812449B1 (en) | 2018-09-19 | 2020-10-20 | Verisign | Method for generating a domain name using a learned information-rich latent space |
US20200104102A1 (en) | 2018-09-27 | 2020-04-02 | Microsoft Technology Licensing, Llc | Automated content editor |
US11017778B1 (en) | 2018-12-04 | 2021-05-25 | Sorenson Ip Holdings, Llc | Switching between speech recognition systems |
US20200265196A1 (en) | 2019-02-14 | 2020-08-20 | Google Llc | Pre-Trained Projection Networks for Transferable Natural Language Representations |
Non-Patent Citations (85)
Title |
---|
Abadi et al, "TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems", arXiv:1603v2, Mar. 16, 2016, 19 pages. |
Adam et al, "The ICSI Meeting Corpus", Acoustics, Speech, and Signal Processing, May 2003, 4 pages. |
Agtrre et al., "A Study on Similarity and Relatedness Using Distributional and WordNet-based Approaches", 2009 Annual Conference of the North American Chapter of the Association for Computational Linguistics (HLT-NAACL-2009), May 31-Jun. 5, 2009, Boulder, Colorado, 9 pages. |
Ahmed et al, "FastEx: Hash Clustering with Exponential Families", Advances in Neural Information Processing System, 9 pages. |
Bahdanau et al, "Neural Machine Translation by Jointly Learning to Align and Translate", arXiv:1409v7, May 19, 2016, 15 pages. |
Bui et al, "Neural Graph Learning: Training Neural Networks Using Graphs", Conference on Web Search and Data Mining, 8 pages. |
Bui et al, "Neural Graph Machines: Learning Neural Networks using Graphs", arXiv:1703v1, Mar. 14, 2017, 9 pages. |
Byrne, "Encoding Reality: Prediction-Assisted Cortical Learning Algorithm in Hierarchical Temporal Memory", arXiv:1509v2, Oct. 8, 2015, 28 pages. |
Charikar, "Similarity Estimation Techniques from Round Algorithms", Symposium on Theory of Computing, May 2002, 9 pages. |
Chen et al, "Compressing Neural Networks with the Hashing Trick", arXiv:1504v1, Apr. 19, 2015, 10 pages. |
Cheng et al, "Solving Convex Optimization Problems using Recurrent Neural Networks in Finite Time", International Joint Conference on Neural Networks, Atlanta, Georgia, 2009, pp. 538-543. |
Cheng et al., "Neural Summarization by Extracting Sentences and Words", 54th Annual Meeting of the Association for Computational Linguistics (vol. 1: Long Papers), Aug. 7-12, 2016, Berlin, Germany, pp. 484-494. |
Chun et al, "Augmented Smartphone Applications through Clone Cloud Execution", Internal Research Berkeley, 5 pages. |
Communication received in European Application No. 18729286.7, dated Feb. 4, 2020, 13 pages. |
Courbariaux et al, "Binarized Neural Networks: Training Neural Networks with Weights and Activations Constrained to +1 or −1", arXiv:1602v3, Mar. 17, 2016, 11 pages. |
Courbariaux et al, "Low Precision Arithmetic for Deep Learning", arXiv:1412v2, Dec. 25, 2014, 9 pages. |
Dahl et al, "Large-Scale Malware Classification using Random Projection Networks", Conference on Acoustics, Speech and Signal Processing, 2013, 5 pages. |
Denil et al, "Predicting Parameters in Deep Learning", arXiv:1306v2, Oct. 27, 2014, 9 pages. |
Finkelstein et al., "Placing Search in Context: The Concept Revisited", Tenth International World Wide Web Conference, WWW10, May 1-5, 2001, Hong Kong, China, pp. 406-414. |
G. Zhong, H. Xu, P. Yang, S. Wang and J. Dong, "Deep hashing learning networks," 2016 International Joint Conference on Neural Networks (IJCNN), Vancouver, BC, 2016, pp. 2236-2243, doi: 10.1109/IJCNN.2016.7727476. (Year: 2016) (Year: 2016) (Year: 2016). * |
G. Zhong, H. Xu, P. Yang, S. Wang and J. Dong, "Deep hashing learning networks," 2016 International Joint Conference on Neural Networks (IJCNN), Vancouver, BC, 2016, pp. 2236-2243, doi: 10.1109/IJCNN.2016.7727476. (Year: 2016) (Year: 2016). * |
Ganchev et al, "Small Statistical Models by Random Feature Mixing", Workshop on Mobile Language Processing, pp. 19-20. |
Godfrey et al, "SWITCHBOARD: Telephone Speech Corpus for Research And Development", Conference of the International Speech Communication Association, Mar. 23-26, 1992, San Francisco, California, pp. 517-520. |
Gong et al, "Compressing Deep Convolutional Networks using Vector Quantization", arXiv:1412v1, Dec. 18, 2014, 10 pages. |
Goodfellow et al, "Generative Adversarial Networks", arXiv:1406v1, Jun. 10, 2014, 9 pages. |
He et al., "Streaming Small-Footprint Keyword Spotting Using Sequence-To-Sequence Models", arXiv: 1710.096 17vl, Oct. 26, 2017, 8 pages. |
Hinton et al, "Deep Neural Networks for Acoustic Modeling in Speech Recognition: The Shared Views of Four Research Groups", Signal Processing Magazine, vol. 2, Nov. 2012, 16 pages. |
Hinton et al, "Distilling the Knowledge in a Neural Network", arXiv:1503v1, Mar. 9, 2015, 9 pages. |
Iandola et al, "Squeezenet: Alexnet-Level Accuracy with 50x Fewer Parameters and <1mb model size", arXiv:1602v4, Nov. 4, 2016, 13 pages. |
International Preliminary Report on Patentability for PCT/US2018/033378, dated Nov. 26, 2019, 13 pages. |
International Search Report and Written Opinion for PCT/US2018/033378, dated Jul. 24, 2018, 20 pages. |
Ji et al, "Backoff Model Training Using Partially Observed Data: Application to Dialog ACT Tagging", Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics, 8 pages. |
Jurafsky et al, "Automatic Detection of Discourse Structure for Speech Recognition and Understanding", Automatic Detection of Discourse Structure for Speech Recognition and Understanding, 8 pages. |
Kaban, "Improved Bounds on the Dot Product Under Random Projection and Random Sign Projection", Conference on Knowledge Discovery and Data Mining, 2015, 10 pages. |
Kannan et al, "Smart Reply: Automated Response Suggestion for Emails", arXiv:1606v1, Jun. 15, 2016, 10 pages. |
Khanpour et al, "Dialogue Act Classification in Domain-Independent Conversations Using a Deep Recurrent Neural Networks", Conference on Computational Linguistics, Dec. 11-17, 2016, Osaka, Japan, 10 pages. |
Konecny et al, "Federated Optimization: Distributed Machine Learning for On-Device Intelligence", arXiv:1601v1, Oct. 8, 2016, 38 pages. |
Krizhevsky et al, "Imagenet Classification with Deep Convolutional Neural Networks", Advances in Neural Information Processing Systems, Dec. 2012, 9 pages. |
Krizhevsky, "The CIFAR-10 Dataset", 4 pages. |
LeCun et al, "The MNIST Database", 7 pages. |
Lee et al, "A Low-Power Processor with Configurable Embedded Machine-Learning Accelerators for High-Order and Adaptive Analysis of Medical-Sensor Signals", Journal of Solid-State Circuits, vol. 48, No. 7, Jul. 2013, pp. 1625-1637. |
Lee et al, "Sequential Short-Text Classification with Recurrent and Convolutional Neural Networks", Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, San Diego, California, Jun. 12-17, 2016, pp. 515-520. |
Liu et al, "IJCNLP-2017 Task 4: Customer Feedback Analysis", Joint Conference on Natural Language Processing, Taipei, Taiwan, Nov. 27-Dec. 1, 2017, 8 pages. |
Liu et al., "Stochastic Answer Networks for Machine Reading Comprehension", 56th Annual Meeting of the Association for Computational Linguistics (vol. 1: Long Papers), Jul. 15-20, 2018, Melbourne, Australia, pp. 1694-1704. |
Loshchilov et al, "SGDR: Stochastic Gradient Descent with Restarts", 16 pages. |
Lu et al, "Hierarchical Recurrent Neural Hashing for Image Retrieval with Hierarchical Convolutional Features", Transactions on Image Processing, vol. 27, No. 1, pp. 106-120. |
Lu et al., "Hierarchical Recurrent Neural Hashing for Image Retrieval With Hierarchical Convolutional Features," IEEE Transactions on Image Processing, 2018, vol. 27, No. 1, pp. 106-120. |
Manning et al, "An Introduction to Information Retrieval", Online Edition 2009 Cambridge University Press, 569 pages. |
Mikolov et al, "Efficient Estimation of Word Representations in Vector Space", arXiv:1301v3, Sep. 7, 2013, 12 pages. |
Nair et al, "Rectified Linear Units Improve Restricted Boltzmann Machines", Conference on Machine Learning, Jun. 2010, 8 pages. |
Neumann, "Regularization by Intrinsic Plasticity and Its Synergies with Recurrent for Random Projection Methods", Journal of Intelligent Learning Systems and Applications, 2012, pp. 230-246. |
Ortega et al, "Neural-Based Context Representation Learning for Dialog Act Classification", SIGdial Meeting on Discourse and Dialogue, pp. 247-252. |
Pang et al, "Revisiting the Predictability of Language: Response Completion in Social Media", Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, Jeju Island, Korea, Jul. 12-14, 2012, pp. 1489-1499. |
Plank, "All-in-1 at IJCNLP-2017 Task 4: Short Text classification with One Model for All Languages", Joint Conference on Natural Language Processing, Shared Tasks, Taipei, Taiwan, Nov. 27- Dec. 1, 2017, pp. 143-148. |
Quora, "What Does Dr. Hinton Mean by Hard vs. Soft Targets", retrieved on Jun. 24, 2020, http://quora.com/what-does-Dr-Hinton-mean-by-hard-vs-soft-targets, 2 pages. |
Quora, "What is Signum Function, What is its Uses in Machine Learning Neural Networks", retrieved on Jun. 24, 2020, http://www.quora.com/What-is-signum-function-what-is-its-uses-in-machine-learning-neural-networks, 3 pages. |
R. Wu, S. Yang, D. Leng, Z. Luo and Y. Wang, "Random Projected Convolutional Feature for Scene Text Recognition," 2016 15th International Conference on Frontiers in Handwriting Recognition (ICFHR), Shenzhen, China, 2016, pp. 132-137, doi: 10.1109/ICFHR.2016.0036. (Year: 2016). * |
Ravi et al., "Large Scale Distributed Semi-Supervised Learning using Streaming Approximation", arXiv:1512v1, Dec. 6, 2015, 10 pages. |
Ravi, "ProjectionNet: Learning Efficient On-Device Deep Networks Using Neural Projections", arXiv:1708v2, Aug. 9, 2017, 12 pages. |
Ravi, "Scalable Decipherment for Machine Translation via Hash Sampling", Meeting of the Association for Computational Linguistics, Sofia, Bulgaria, Aug. 4-9, 2013, pp. 362-371. |
Schuster, "Speech Recognition for Mobile Devices at Google", Pacific Rim International Conference on Trends in Artificial Intelligence, Aug. 30, 2010, 3 pages. |
Search Report and Written Opinion in Singapore Application No. 10201804213U, dated Dec. 31, 2019, 8 pages. |
Search Report in Irish Application No. 2018/0149, dated Jul. 31, 2018, 10 pages. |
Shi et al, "Hash Kernels for Structured Data", Journal of Machine Learning Research, vol. 10, 2009, pp. 2615-2637. |
Shriberg et al, "The ICSI Meeting Recorder Dialog Act (MRDA) Corpus", SIGdial Workshop on Discourse and Dialogue, Campbridge, Massachusetts, 4 pages. |
Singleton, "Android Wear 2.0: Making the Most of Every Minute", 6 pages. |
Srivastava et al, "Dropout: A Simple Way to Prevent Neural Networks from Overfitting", Journal of Machine Learning Research, vol. 15, 2014, 30 pages. |
Stolcke et al, "Dialogue Act Modeling for Automatic Tagging and Recognition of Conversational Speech", Speech, Technology and Research Laboratory, 36 pages. |
Stolcke, "Entropy-Based Pruning of Backoff Language Models", arXiv:cs/0006025v1, Jun. 11, 2000, 5 pages. |
Sutskever et al, "On the Importance of Initialization and Momentum in Deep Learning". |
Sutskever et al, "Sequence to Sequence Learning with Neural Networks", Advances in Neural Information Processing System, Dec. 2014, 9 pages. |
Theiler et al, "Sparse Matrix Transform for Fast Projection to Reduce Dimension", Geoscience and Remote Sensing, Honolulu, Hawaii, Jul. 30, 2010, 5 pages. |
Tran et al, "A Generative Attentional Neural Network Model for Dialogue Act Classification", Meeting of the Association for Computational Linguistics, 6 pages. |
Tur et al., "What Is Left To Be Understood In ATIS?", 2010 IEEE Spoken Language Technology Workshop, Dec. 12-15, 2010, Berkeley, CA, pp. 19-24. |
Wang et al, "Learning to Hash for Indexing Big Data—A Survey", arXiv:1509v1, Sep. 17, 2015, 22 pages. |
Weinberger et al, "Feature Hashing for Large Scale Multitask Learning", arXiv:0902v5, Feb. 27, 2010, 10 pages. |
Wilensky et al, "The Projection Neural Network", 10 pages. |
Wojcik et al, "Training Neural Networks on High-Dimensional Data Using Random Projection", Pattern Analysis and Applications, 11 pages. |
X. Lu, ¥¥. Chen and X. Li, "Hierarchical Recurrent Neural Hashing for Image Retrieval With Hierarchical Convolutional Features," in IEEE Transactions on Image Processing, vol. 27, No. 1, pp. 106-120, Jan. 2018, doi: 10.1109/TIP.2017.2755766 (Year: 2018) (Year: 2018) (Year: 2018) (Year: 2018) (Year: 2018). * |
X. Lu, ¥¥. Chen and X. Li, "Hierarchical Recurrent Neural Hashing for Image Retrieval With Hierarchical Convolutional Features," in IEEE Transactions on Image Processing, vol. 27, No. 1, pp. 106-120, Jan. 2018, doi: 10.1109/TIP.2017.2755766 (Year: 2018) (Year: 2018) (Year: 2018) (Year: 2018). * |
Yang et al, "Revisiting Semi-Supervised Learning with Graph Embeddings", arXiv:1603v2, May 26, 2016, 9 pages. |
Yu et al., "Refining Word Embeddings for Sentiment Analysis", 2017 Conference on Empirical Methods in Natural Language Processing, Sep. 7-11, 2017, Denmark, Copenhagen, pp. 534-539. |
Zhong et al, "Deep Hashing Learning Networks", Joint Conference on Neural Networks, Vancouver, British Columbia, 2016, pp. 2236-2243. |
Zhong et al., "Deep hashing learning networks," 2016 International Joint Conference on Neural Networks (IJCNN), Vancouver, BC, 2016, pp. 2236-2243. |
Zhu et al, "A Deep Neural Network Based Hashing for Efficient Image Retrieval", Conference on Systems, Man, and Cybernetics, Oct. 9-12, 2016, Budapest, Hungary, 6 pages. |
Also Published As
Publication number | Publication date |
---|---|
US11423233B2 (en) | 2022-08-23 |
US20210124878A1 (en) | 2021-04-29 |
US10885277B2 (en) | 2021-01-05 |
US20230048218A1 (en) | 2023-02-16 |
US20200042596A1 (en) | 2020-02-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11934791B2 (en) | On-device projection neural networks for natural language understanding | |
CN111368996B (en) | Retraining projection network capable of transmitting natural language representation | |
Pouyanfar et al. | A survey on deep learning: Algorithms, techniques, and applications | |
Kamath et al. | Deep learning for NLP and speech recognition | |
Hapke et al. | Natural Language Processing in Action: Understanding, analyzing, and generating text with Python | |
Tan et al. | Neural machine translation: A review of methods, resources, and tools | |
US11741109B2 (en) | Dialogue system, a method of obtaining a response from a dialogue system, and a method of training a dialogue system | |
US11210306B2 (en) | Dialogue system, a method of obtaining a response from a dialogue system, and a method of training a dialogue system | |
CN111291181B (en) | Representation learning for input classification via topic sparse self-encoder and entity embedding | |
Yao et al. | An improved LSTM structure for natural language processing | |
US10592607B2 (en) | Iterative alternating neural attention for machine reading | |
US10606946B2 (en) | Learning word embedding using morphological knowledge | |
US11550871B1 (en) | Processing structured documents using convolutional neural networks | |
JP2020520505A (en) | Natural language processing using context-specific word vectors | |
Beysolow | Applied natural language processing with python | |
CN111930942B (en) | Text classification method, language model training method, device and equipment | |
US11580975B2 (en) | Systems and methods for response selection in multi-party conversations with dynamic topic tracking | |
US11481646B2 (en) | Selecting answer spans from electronic documents using neural networks | |
JP7229345B2 (en) | Sentence processing method, sentence decoding method, device, program and device | |
Bokka et al. | Deep Learning for Natural Language Processing: Solve your natural language processing problems with smart deep neural networks | |
Huang et al. | C-Rnn: a fine-grained language model for image captioning | |
Chen et al. | Deep neural networks for multi-class sentiment classification | |
Boukabous et al. | A comparative study of deep learning based language representation learning models | |
WO2022228127A1 (en) | Element text processing method and apparatus, electronic device, and storage medium | |
Mai et al. | A unimodal representation learning and recurrent decomposition fusion structure for utterance-level multimodal embedding learning |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RAVI, SUJITH;KOZAREVA, ZORNITSA;REEL/FRAME:060758/0603Effective date: 20180823 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE APPLICATION NUMBER INCORRECTLY LISTED AS 17/878,361 PREVIOUSLY RECORDED ON REEL 060758 FRAME 0603. ASSIGNOR(S) HEREBY CONFIRMS THE ASSIGNMENT;ASSIGNORS:RAVI, SUJITH;KOZAREVA, ZORNITSA;REEL/FRAME:064237/0710Effective date: 20180823 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |