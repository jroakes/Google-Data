CN112955893A - Automatic hyperlink of document - Google Patents
Automatic hyperlink of document Download PDFInfo
- Publication number
- CN112955893A CN112955893A CN201980071944.9A CN201980071944A CN112955893A CN 112955893 A CN112955893 A CN 112955893A CN 201980071944 A CN201980071944 A CN 201980071944A CN 112955893 A CN112955893 A CN 112955893A
- Authority
- CN
- China
- Prior art keywords
- document
- machine learning
- documents
- learning model
- candidate
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
Abstract
A system may determine whether to classify a sequence of one or more words within a first document as a candidate hyperlink based at least in part on a context associated with the first document being edited using a machine-learned model. In response to classifying the sequence of one or more words as candidate hyperlinks, the system may use a machine learning model and determine one or more candidate documents to hyperlink from the sequence of one or more words based at least in part on the sequence of one or more words and the context. In response to receiving an indication to select a second document from the one or more candidate documents, the system may modify the first document to associate the sequence of one or more words with a hyperlink to the second document.
Description
Background
Computing devices may enable users of the devices to edit documents, such as word processing documents, spreadsheets, and presentation slides, as well as electronic messages that may be sent to other users. The user may embed hyperlinks to other documents in the document. A user viewing a document containing a hyperlink to another document may select the hyperlink to access the linked document.
Disclosure of Invention
In general, techniques of this disclosure are directed to predicting documents to be linked from a document when the document is being composed. An example computing system (e.g., an electronic messaging system) is described that is configured to provide a suggested document to be linked from a first document to a user who is composing the first document. For example, a user may enter text in a first document to edit the first document. For each of the one or more sequences of one or more words within text entered by the user in the first document, the computing system may determine whether the sequence of one or more words is a candidate for linking to the second document. If the computing system determines that the sequence of one or more words input by the user is a candidate for linking to the second document, the computing system may determine one or more candidate documents to link from the sequence of one or more words. The user may select a second document from the one or more candidate documents to confirm that the second document will be linked from the sequence of one or more words. In response to receiving a selection of the second document, the first document may be modified to link the second document from the sequence of the one or more words.
The computing system may use one or more machine learning models trained on various training data to determine whether a sequence of one or more words input by a user to edit a first document is a candidate for linking to a second document. For example, the computing system may use a machine-learned classifier that may classify each sequence of one or more words entered by the user in a first document as being a candidate for linking to a second document, or as not being a candidate for linking to a second document. Similarly, the computing system may also determine, using one or more machine learning models trained on various training data, one or more candidate documents to link from the sequence of one or more words within the first document to determine a document associated with the sequence of one or more words. The one or more machine learning models may determine a document related to the sequence of one or more words using a context of text surrounding the sequence of one or more words and a context associated with the first document. In this way, the computing system may increase the speed of linking documents from the document being edited.
The computing system may perform the techniques disclosed herein to determine whether a sequence of one or more words in a first document is a candidate for linking to a second document, and to determine one or more candidate documents to link from the sequence of one or more words on the fly as the user edits the first document. In other words, when a user edits a first document, the computing system may analyze text that has been entered in the first document to determine whether any sequence of one or more words entered in the first document is classified as a candidate for linking to a second document, and if so, may determine one or more candidate documents to link from the sequence of one or more words classified as candidates for linking to the second document.
Techniques disclosed herein may reduce the amount of interaction that needs to be performed in order to add links within a document being edited to link to an external document. Instead of a process that may require a user to highlight a sequence of one or more words within a first document to select the sequence of one or more words as anchor text that links to a second document, select a function to add a link, navigate or browse the Web in a file system to find the second document to link from the highlighted word, and select the second document to link from the sequence of one or more words, the techniques disclosed herein enable the user to select the second document directly from one or more candidate documents to link the selected second document from the sequence of one or more words of the first document.
In one aspect, the present disclosure is directed to a method. The method includes determining, by at least one processor, using a machine learning model, whether to classify a sequence of one or more words within a first document being edited as a candidate hyperlink based at least in part on the sequence of one or more words and a context related to the first document, the method further comprising determining, by the at least one processor, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words, using the machine learning model and based at least in part on the sequence of one or more words and the context, in response to classifying the sequence of one or more words as a candidate hyperlink. The method also includes modifying, by the at least one processor, the first document being edited to associate the sequence of one or more words with a hyperlink linking to the second document in response to receiving an indication to select the second document from the one or more candidate documents.
In another aspect, the present disclosure is directed to a computing system. The system includes a memory configured to store a machine learning model. The system also includes one or more processors configured to: the method may include determining, using a machine learning model, whether to classify a sequence of one or more words within a first document being edited as a candidate hyperlink based at least in part on the sequence of one or more words and a context related to the first document, determining, using the machine learning model, one or more candidate documents from the plurality of documents to be hyperlinked from the sequence of one or more words in response to classifying the sequence of one or more words as a candidate hyperlink and based at least in part on the sequence of one or more words and the context, and modifying the first document to associate the sequence of one or more words with the hyperlink linked to the second document in response to receiving an indication to select the second document from the one or more candidate documents.
In another aspect, the present disclosure is directed to a computer-readable storage medium comprising instructions that, when executed by at least one processor, cause the at least one processor to: using a machine learning model, determining whether to classify a sequence of one or more words within a first document being edited as a candidate hyperlink based at least in part on the sequence of one or more words and a context related to the first document, using the machine learning model in response to classifying the sequence of one or more words as a candidate hyperlink, determining from the plurality of documents one or more candidate documents to hyperlink from the sequence of one or more words based at least in part on the sequence of one or more words and the context, and in response to receiving an indication to select a second document from the one or more candidate documents, modifying the first document to associate the sequence of one or more words with the hyperlink linked to the second document.
The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a conceptual diagram illustrating an example communication system configured to suggest candidate documents to link from a document in accordance with one or more techniques of this disclosure.
FIG. 2 is a block diagram illustrating details of one example of a computing system that may be configured to provide candidate documents to be linked from a document in accordance with one or more techniques of the present disclosure.
Fig. 3A-3E are conceptual diagrams illustrating aspects of an example machine learning model according to example embodiments of the present disclosure.
FIG. 4 is a conceptual diagram of an example machine learning model that may be used to determine one or more candidate documents to link from a document being edited in accordance with an example embodiment of the present disclosure.
FIG. 5 is a flow diagram illustrating example operations of a computing system for selectively providing predicted document suggestions to a user editing a document according to one or more aspects of the present disclosure.
Fig. 6A and 6B are diagrams illustrating an example application of query vector classifiers and pattern recognition in accordance with various aspects of the automated document hyperlink techniques described in this disclosure.
FIG. 7 is a diagram illustrating an example application of a sequence-to-sequence model in accordance with aspects of the automated document hyperlinking techniques described in this disclosure.
Detailed Description
FIG. 1 is a conceptual diagram illustrating an example communication system configured to suggest candidate documents to link from a document in accordance with one or more techniques of this disclosure. As shown in FIG. 1, system 100 includes computing device 102, document system 130, and remote systems 140A-140N (hereinafter "remote system 140"). The computing device 102 may communicate with the document system 130 via the network 120 to compose and edit documents. Document system 130 may communicate with computing device 102 and remote system 140 via network 120 to suggest candidate documents to link from the document immediately when editing the document.
Examples of computing device 102 may include, but are not limited to, portable, mobile, or other devices, such as mobile phones (including smart phones), laptop computers, desktop computers, tablet computers, smart television platforms, Personal Digital Assistants (PDAs), server computers, mainframes, and so forth. For example, in the example of fig. 1, computing device 102 may be a wearable computing device, such as a smart watch.
As shown in the example of fig. 1, computing device 102 includes a User Interface (UI) device 104. The UI device 104 of the computing device 102 may be configured to function as an input device and/or an output device for the computing device 102. The UI device 104 may be implemented using various technologies. For example, the UI device 104 may be configured to receive input from a user through tactile, audio, and/or video feedback. Examples of input devices include a presence-sensitive display, a presence-sensitive or touch-sensitive input device, a mouse, a keyboard, a voice response system, a camera, a microphone, or any other type of device for detecting commands from a user. In some examples, the presence-sensitive display includes a touch-sensitive or presence-sensitive input screen, such as a resistive touch screen, a surface acoustic wave touch screen, a capacitive touch screen, a projected capacitive touch screen, a pressure-sensitive screen, an acoustic pulse recognition touch screen, or other presence-sensitive technology. That is, UI device 104 of computing device 102 may include a presence-sensitive device that may receive tactile input from a user of computing device 102. The UI device 104 may receive an indication of a tactile input by detecting one or more gestures from a user (e.g., when the user touches or points to one or more locations of the UI device 104 with a finger or stylus).
UI device 104 may additionally or alternatively be configured to function as an output device by providing output to a user using tactile, audio, or video stimuli. Examples of output devices include a sound card, a video graphics adapter card, or any one or more display devices, such as a Liquid Crystal Display (LCD), a dot matrix display, a Light Emitting Diode (LED) display, an Organic Light Emitting Diode (OLED) display, electronic ink, or similar monochrome or color display capable of outputting visible information to a user of computing device 102. Other examples of output devices include speakers, Cathode Ray Tube (CRT) monitors, Liquid Crystal Displays (LCDs), or other devices that may generate an understandable output to a user. For example, UI device 104 may present the output to a user of computing device 102 as a graphical user interface, which may be associated with functionality provided by computing device 102. In this way, UI device 104 may present various user interfaces of applications (e.g., electronic messaging applications, internet browser applications, etc.) executing at computing device 102 or accessible by computing device 102. A user of the computing device 102 may interact with a corresponding user interface of an application to cause the computing device 102 to perform operations related to the function.
In some examples, the UI device 104 of the computing device 102 may detect two-dimensional and/or three-dimensional gestures as input from a user of the computing device 102. For example, a sensor of the UI device 104 may detect movement of the user (e.g., moving a hand, arm, pen, stylus) within a threshold distance of the sensor of the UI device 104. The UI device 104 may determine a two-dimensional or three-dimensional vector representation of the movement and associate the vector representation with a gesture input having multiple dimensions (e.g., a wave, a pinch, a clap, a brush). In other words, in some examples, the UI device 104 may detect multi-dimensional gestures without requiring the user to gesture at or near a screen or surface on which the UI device 104 outputs information for display. Rather, the UI device 104 may detect multi-dimensional gestures performed at or near a sensor that may or may not be located near a screen or surface on which the UI device 104 outputs information for display.
In the example of fig. 1, computing device 102 includes a User Interface (UI) module 106 and a document client module 108. UI module 106 and document client module 108 may perform one or more operations described herein using hardware, software, firmware, or a mixture thereof residing within computing device 102 and/or executing at computing device 102. Computing device 102 may execute UI module 106 and document client module 108 using a processor or processors. In some examples, computing device 102 may execute UI module 106 and document client module 108 as virtual machines executing on the underlying hardware. UI module 106 and document client module 108 may execute as one or more services of an operating system or computing platform, or may execute as one or more executable programs at an application layer of the computing platform.
As shown in the example of fig. 1, UI module 106 may be operable by computing device 102 to perform one or more functions, such as receiving input and sending an indication of such input to other components associated with computing device 102, such as modules 10 and/or 12. UI module 106 may also receive data from components associated with computing device 102 (e.g., document client module 108). Using the received data, UI module 106 can cause other components associated with computing device 102 (e.g., UI device 104) to provide output based on the received data. For example, UI module 106 may receive data from document client module 108 to display a GUI.
Remote system 140 represents any suitable remote computing system configured to host documents 142A-142N (hereinafter "documents 142"), such as one or more desktop computers, laptop computers, mainframes, servers, cloud computing systems, and the like. For example, the remote system 140 may include a web server, document management system, or the like that stores documents 142 that are accessible via the network 120. Documents 142 may include any suitable document accessible via network 120, such as web pages, word processing documents, spreadsheet documents, presentation documents, electronic messages, and any other network accessible document or resource.
Each document of documents 142 may be referenced using the location of the document within network 120. For example, each document of documents 142 may be associated with a unique Uniform Resource Identifier (URI) or Uniform Resource Locator (URL) that specifies the location of the document within network 120, and the documents of documents 142 may be accessed via their URI or URL. Thus, a particular document of documents 142 may be referenced using a URI or URL associated with the document.
The document system 130 may include a document service module 132 and a document prediction module 134. As shown in the example of fig. 1, the document client module 108 (as a "document client 108") may include functionality to perform any of a variety of operations on the computing device 102 to create or edit a document, or to perform any other suitable operation on a document. In some examples, to process electronic messages, document client module 108 may send and receive messages to and from a remote computing device via document system 130.
The document client module 108 may be any suitable application that includes functionality for creating and editing documents, such as a word processing application, spreadsheet application, presentation creation application, web browser, and the like. The document client module 108 may provide front-end user-facing features of the document service, while the document service module 132 supports back-end operations required to implement the document service over the network 120. Document client module 108 may serve as a portal from which computing device 102 accesses documents stored at document system 130, remote system 140, and/or computing device 102. The document client module 108 may provide an editing interface via which a user may compose and edit a document and reply to or forward the document, for example, in the case where the document is an electronic message. Composing a new document, editing a document, replying to an electronic message, and forwarding an electronic message may be collectively referred to as editing a document. Document client module 108 can be an email application, Web application, chat application, or other module executing at computing device 102 that communicates with document system 130 to provide users of computing device 102 access to documents maintained at document system 130, remote system 140, and/or computing device 102.
As described above, the document client module 108 may provide an editing interface via which a user may compose and edit a document. As shown in FIG. 1, document 112 may be an email message that is being edited. Although document 112 is illustrated in FIG. 1 as an email message, the techniques described herein with respect to document 112 may be equally applied to any other suitable type of document, such as a word processing document, a spreadsheet, a presentation document, and so forth. To enable editing of the document 112, the document client module 108 may send data to cause the UI device 104 to output the user interface 110A via the UI device 104. The document client module 108 may interact with one or more other components of the system 100 to assist a user in composing or editing the document 112. As shown in user interface 110A, the user has entered the following text into the body of document 112: "you are good, Bob, thanks to your advice. For product X, please refer to the design documentation herein. "
In accordance with one or more techniques of this disclosure, the document prediction module 134 may determine whether to classify the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of the one or more words within the document 112 being edited by the user and the context associated with the document 112 using a machine learning model. The candidate hyperlinks may be sequences of one or more words, and the document prediction module 134 may determine one or more candidate documents to link from the sequences of one or more words. In this way, the document prediction module 134 may determine one or more candidate documents to be linked from the sequence of one or more words only when the document prediction module 134 classifies the sequence of one or more words as a candidate hyperlink, and may refrain from determining one or more candidate documents to be linked from the sequence of one or more words when the document prediction module 134 does not classify the sequence of one or more words as a candidate hyperlink. The document prediction module 134 may include one or more machine learning models. For example, the document prediction module 134 may include a link detection module that is a machine learning model for classifying sequences of one or more words as candidate hyperlinks, and may also include a document retrieval module that is a machine learning model for determining one or more candidate documents to be linked from each candidate hyperlink.
In the example of FIG. 1, document prediction module 134 may process each sequence of one or more words input into the body of document 112 to classify the sequence of one or more words as a candidate hyperlink or not a candidate hyperlink. Document prediction module 134 may perform classification on the sequence of one or more words based at least in part on the sequence of one or more words and a context associated with document 112. The context associated with the message may include the textual content of the document 112, the sender, recipient, and/or subject matter of the document 112, previous messages in a message thread that includes the document 112, activities associated with the document 112 (e.g., previous user interactions with the document 112 and associated timestamps of such user interactions), the most recent edit time of the document 112, or any other characteristic of the document 112. The context associated with document 112 may also include a text context associated with a sequence of one or more words. The text context associated with the sequence of one or more words may be one or more words within the document 112 that provide a semantic context for the particular sequence of one or more words, and may include one or more words surrounding the particular sequence of one or more words within the document 112, one or more words adjacent to the particular sequence of one or more words within the document 112, and/or any other words within the body of the document 112 that provide a context for the sequence of one or more words.
In the example of fig. 1, document prediction module 134 may determine whether to classify the sequence of the one or more words "design document" in document 112 as candidate hyperlinks based at least in part on the sequence of the one or more words "design document" and a context associated with document 112, such as a text context associated with the sequence of the one or more words "design document". The textual context associated with the sequence of one or more words "design document" may be the remaining words in the body of document 112, which may include the sentence "about product X, see design document herein. "or" a sequence of one or more words. As can be seen, the textual context associated with the sequence of one or more words "design document" related to "product X" may provide an indication of the document (e.g., the design document for product X) to be linked from "design document".
In response to classifying the sequence of one or more words as candidate hyperlinks, document prediction module 134 may determine, using a machine learning model, one or more candidate documents from among the plurality of documents 142 to hyperlink from among the sequence of one or more words in document 112 based at least in part on the sequence of one or more words and a context associated with document 112. The document prediction module 134 may make such a determination when the user is editing or otherwise generating the document 112 via the document client module 108 of the computing device 102. In the example of FIG. 1, in response to classifying the sequence of the one or more words "design documents" as candidate hyperlinks, document prediction module 134 may determine, from among the plurality of documents 142, one or more candidate documents to be linked from the sequence of the one or more words "design documents".
In response to document prediction module 134 determining one or more candidate documents to be classified as links in a sequence of one or more words of a candidate hyperlink within document 112, document services module 132 may send an indication of the sequence of one or more words classified as a candidate hyperlink within document 112, and an indication of the one or more candidate documents, to document client module 108. In response to receiving the indication of the sequence of one or more words classified as candidate hyperlinks and the indication of the one or more candidate documents, document client module 108 may cause UI device 104 to output an indication that the sequence of one or more words in document 112 is classified as candidate hyperlinks.
As shown in FIG. 1, document client module 108 may send data to UI module 106 to cause UI device 104 to output user interface 110B, which user interface 110B includes a visual indication that a sequence of one or more words "design document" is classified as a candidate hyperlink. For example, document client module 108 may cause the UI device to visually emphasize the sequence of the one or more words "design document," e.g., by including a dotted underline below the sequence of the one or more words "design document" in user interface 110B.
The sequence of one or more words "design document" in the user interface 110B may be a selectable UI element 114 that a user may select to view an indication of one or more candidate documents that may be linked from the sequence of one or more words "design file". For example, a user of the computing device 102 editing the document 112 may select a UI element 114 in the user interface 110B by providing input (e.g., touch or tactile input, voice input or other audio input, or any other form of input) at the UI device 104. UI device 104 may detect the input and send an indication of the input to UI module 106. UI module 106 may provide data to document client module 108 based on the received indication of the input, and document client module 108 may determine that the input corresponds to a selection of UI element 114.
As shown in FIG. 1, in response to receiving input corresponding to selection of UI element 114, document client module 108 may send data to UI module 106, which UI module 106 causes UI device 104 to output user interface 110C, which user interface 110C may include an indication of one or more candidate documents to be linked from a sequence of one or more words "design document". For example, user interface 110C includes menu 116, menu 116 including menu items 118A and 118B associated with the candidate document "product X design document" and the candidate document "product X slide", respectively. The "product X design document" may be a word processor document, and the "product X slide" may be a presentation document (e.g., slide). The menu 116 may also include a menu item 120, which menu item 120 may be selected to reject the suggested candidate document. In some examples, menu 116 may provide an option to receive input of a URL of a document to be linked from a sequence of one or more words rather than a determined candidate document.
A user of the computing device 102 editing the document 112 may provide an input at the UI device 104 to select one of the menu items 118A, 118B, or 120. UI device 104 may detect the input and may send an indication of the input to UI module 106. UI module 106 may provide data to document client module 108 based on the received indication of the input, and document client module 108 may determine whether the input corresponds to a selection of menu item 118A, menu item 118B, or menu item 120 based on the data received from UI module 106.
If the input received by UI device 104 corresponds to a selection of menu item 118A associated with the candidate document "product X design document" or menu item 118B associated with the candidate document "product X slide", document client module 108 may send an indication to document service module 132 that the sequence of one or more words of the "design document" is to be associated with a hyperlink to the selected candidate document (e.g., one of the candidate document "product X design document" or candidate document "product X slide"). If the input received by UI device 104 corresponds to a selection of menu item 120, document client module 108 may send an indication to document service module 132 that the sequence of one or more words "design document" is not a hyperlink and is not linked to any candidate documents determined by document prediction module 134.
In response to receiving an indication to select a document from among one or more candidate documents that are to be classified as word links of a candidate hyperlink, the document service module 132 may modify the document 112 to associate a sequence of one or more words that have been classified as candidate hyperlinks with hyperlinks to the selected document. For example, the document service module 132 may receive from the document client module 108 an indication of a document to be selected from the candidate documents linked in the sequence of one or more words "design document" (i.e., one of the candidate document "product X design document" or candidate document "product X slide") and an indication of the sequence of one or more words "design document" that have been classified as candidate hyperlinks. In response, the document service module 132 may modify the document 112 such that a sequence of one or more words "design document" in the document 112 is associated with a hyperlink to the selected document.
Techniques disclosed herein may facilitate more efficient user interaction with an example system. In contrast to other computing systems that do not determine whether a sequence of one or more words in a document is classified as a candidate hyperlink, and do not determine one or more candidate documents for each sequence of one or more words in a document classified as a candidate hyperlink, the techniques disclosed herein may reduce an amount of user interaction required to add a link to a document by determining whether a sequence of one or more words in a document is classified as a candidate hyperlink, and by determining one or more candidate documents for each sequence of one or more words in a document classified as a candidate hyperlink. By reducing the amount of user interaction required to add links to documents within an electronic message, system resources of the example computing system may be conserved, and the example computing system may provide less frustration and a more pleasing user experience.
Throughout this disclosure, examples are described in which a computing device and/or computing system may analyze information (e.g., emails, other communications, etc.) associated with a user of the computing device only if the computing device and/or computing system receives explicit permission from the user of the computing device to analyze the information. For example, where the computing devices and/or computing systems discussed below may collect or may use communication information associated with the user and the computing device, the user may have an opportunity to provide input to control whether programs or features of the computing device and/or computing system may collect and use user information (e.g., information about the user's email, the user's social network, social actions or activities, profession, the user's preferences, or the user's past and current location), or to decide whether and/or how the computing device and/or computing system receives content that may be relevant to the user. Additionally, certain data may be processed in one or more ways before being stored or used by the computing device and/or computing system, thereby removing personally identifiable information. For example, the identity of the user may be processed such that personally identifiable information about the user cannot be determined, or the geographic location of the user may be generalized where location information (e.g., city, zip code, or state level) is obtained, such that the particular location of the user cannot be determined. Thus, the user may control how information about the user is collected and used by the computing device and/or computing system.
FIG. 2 is a block diagram illustrating an example computing system configured to selectively provide suggestions of predicted documents to a user editing a document in accordance with one or more aspects of the present disclosure. The document system 230 of FIG. 2 is described below as an example of the document system 130 of FIG. 1. Fig. 2 shows only one particular example of document system 230, and many other examples of document system 230 may be used in other situations and may include a subset of the components included in document system 230 or may include additional components not shown in fig. 2.
As shown in the example of FIG. 2, the document system 230 includes one or more processors 240, one or more communication units 246, and one or more storage components 248. The storage component 248 of the document system 230 includes a document service module 232, a document prediction module 234, and a document data store 254. The document prediction module 234 includes a machine learning model 238.
The one or more communication units 246 communicate with external devices via one or more wired and/or wireless networks by transmitting and/or receiving network signals over one or more networks. Examples of communication unit 246 include a network interface card (e.g., an ethernet card), an optical transceiver, a radio frequency transceiver, a GPS receiver, or any other type of device that can send and/or receive information. Other examples of the communication unit 246 may include short wave radios, cellular data radios, wireless network radios, and Universal Serial Bus (USB) controllers.
The one or more storage components 248 store information for processing during operation of the document system 230. In some examples, storage component 248 is a temporary memory, meaning that the primary purpose of storage component 248 is not long-term storage. The storage component 248 on the document system 230 may be configured for short-term storage of information as volatile memory and, therefore, does not retain stored content if power is removed. Examples of volatile memory include Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), and other forms of volatile memory known in the art.
In some examples, storage component 248 also includes one or more computer-readable storage media. In some examples, storage component 248 includes one or more non-transitory computer-readable storage media. Storage component 248 may be configured to store a greater amount of information than is typically stored by volatile memory. Storage component 248 may be further configured to be non-volatile memory space for long term storage of information and retain information after power on/off cycles. Examples of non-volatile memory include magnetic hard disks, optical disks, floppy disks, flash memory, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable memories (EEPROM). Storage component 248 may store program instructions and/or information (e.g., data) associated with document service module 232, document prediction module 234, machine learning model 238, and document data store 254.
The one or more processors 240 may perform functions and/or execute instructions associated with the document system 230. Examples of processor 240 include an application processor, a display controller, an auxiliary processor, one or more sensor hubs, and any other hardware configured to function as a processor, processing unit, or processing device. The document services module 232, the document prediction module 234, and the machine learning model 238 may include instructions operable by the processor 240 to perform various actions, operations, or functions of the document system 230. For example, the processor 240 may retrieve and execute instructions stored by the storage component 248 that cause the processor 240 to perform the operations described herein attributed to the document service module 232, the document prediction module 234, and the machine learning model 238. When executed by processor 240, the instructions may cause document system 230 to store information within storage component 248, e.g., at document data store 254.
Although shown as part of a single device in the example of fig. 2, in some examples, components of the document system 230 may be located within and/or be part of different devices. For example, in some examples, some or all of the functionality of the document service module 232, the document prediction module 234, and the machine learning model 238 may be located at the same or different computing systems. That is, in some examples, the techniques of this disclosure may be performed and used by a single computing device, while in other examples, the techniques may be performed and/or used in multiple computing systems, such as distributed or "cloud" computing systems.
The document services module 232 may include all of the functionality of the document services module 132 of FIG. 1 and may perform similar operations as the document services module 132 in order to configure the document system 230 to provide network-based document services. Document service module 232 may process documents received via a network, such as network 120. The document service module 232 may also maintain a document account associated with the user of the computing device 102. Document service module 232 may store data associated with the document account in document data store 254.
Where the documents include electronic messages, the document data store 254 may maintain an inbox for document accounts to store messages received by the document service module 262 that are sent to document accounts associated with the user. Document data store 254 may also maintain an outbox of document accounts to store messages sent from document accounts associated with users. In some examples, data associated with the document account may be copied and stored locally at other computing devices, e.g., computing device 102. That is, for any action performed on a document account by the document service module 232, the document service module 232 may cause a client (e.g., the document client module 108) to perform a similar action on a copy of the document account stored elsewhere and remote from the file system 230.
The document prediction module 234 may include all of the functionality of the document prediction module 134 of FIG. 1 and may perform similar operations as the document prediction module 134. As described above, and in accordance with one or more techniques of this disclosure, document prediction module 234 may automatically determine whether a sequence of one or more words in the document body is classified as a candidate hyperlink, and one or more candidate documents to be linked from each sequence of one or more words in the document body that have been classified as a candidate hyperlink. Although shown and described as part of the document system 230 of a remote system, some or all of the portions of the document prediction module 234 may reside locally at a computing device (e.g., the computing device 102 of fig. 1) and may be executed from that computing device, or may reside at and be executed from another computing system (e.g., another remote system, such as one of the remote systems 140 of fig. 1).
The document prediction module 234 may use a Machine Learning (ML) model 238 to determine one or more candidate hyperlinks within the body of the document, and to determine one or more candidate documents to link from the candidate hyperlinks within the portion of text of the document. The ML model 238 may be any suitable machine learning model, such as a neural network, a long-short term memory model, or the like, and may develop rules or otherwise learn relationships between the partial text in the document and other documents to determine one or more candidate documents linked from candidate hyperlinks within the partial text of the document body.
To determine that one or more sequences of one or more words within the text of a document are candidate hyperlinks, document prediction module 234 may perform one or more of the following techniques: pre-trigger and post-trigger. The pre-trigger may include a document prediction module 234 that performs link detection by identifying words and phrases within the body of the document that are potential document references. For example, phrases that refer to or reference a document, such as "the document," "the lecture", "the post-processing," etc., are likely document mentions. Document prediction module 234 may analyze a corpus of documents that may include document references to determine words and phrases that may be potential document references. Document prediction module 234 may store a set of potential document-referenced phrases, for example, in document data store 254. In determining whether a sequence of one or more words in a document is a candidate hyperlink by determining whether the sequence of one or more words or a text context associated with the sequence of one or more words includes one of the sequences or phrases of one or more words identified as being referenced by the potential document, document prediction module 234 may apply link detection.
The document prediction module 234 may use the ML model 238 to perform a pre-trigger to determine whether to classify a sequence of one or more words in the document body as candidate hyperlinks. The ML model 238 may act as a classifier to classify sequences of one or more words within the text of a document as candidate hyperlinks or as not candidate hyperlinks. For example, the ML model 238 may classify a sequence of one or more words "post analysis errors" as candidate hyperlinks in the phrase "design document is a post analysis error of last week outage", but is unlikely to be the phrase "can you write a post analysis error of last week outage? "is selected.
To determine one or more candidate documents linked from a sequence of one or more words as a candidate hyperlink, the ML model 238 may receive as input an indication of the sequence of one or more words and an indication of a text context of the sequence of one or more words, and in response, may determine a query vector based at least in part on the sequence of one or more words and the text context. A query vector may be generated based at least in part on adding one or more layers over word embedding of a word and a text context, the query vector capturing semantic meanings of a sequence of one or more words and semantic meanings of a context associated with a document comprising the sequence of one or more words. Similarly, when determining one or more candidate documents to link from a sequence of one or more words, ML model 238 may also receive as input an indication of a plurality of documents considered by document prediction module 234, and may determine a document vector for each of the plurality of documents. Each document vector may also be generated based at least in part on word embedding that adds one or more layers to an associated document, such that the document vector captures at least semantic meaning of content of the associated document and other features associated with the document. Word embedding may be a multi-dimensional real-valued vector that captures the semantic meaning of an associated word or associated document.
To determine the likelihood of each of the plurality of documents to be linked from the sequence of one or more words as candidate hyperlinks, the ML model 238 may perform a dot product operation on the query vector and each of the plurality of document vectors. ML model 238 may determine a plurality of dot-product scores resulting from performing a dot-product of the query vector with each vector of the plurality of document vectors. Each of the plurality of dot-product scores may be generated by dot-product a query vector with one of the document vectors, and may be a semantic matching score that represents a quality of match between a sequence of one or more words represented by the query vector and their context and the document represented by the document vector. Throughout this disclosure, a dot-product score associated with a document may refer to a dot-product score resulting from performing a dot-product of a query vector and a document vector determined from the document by ML model 238. The dot-product score may be a semantic matching score for the semantic similarity between the sequence of one or more words represented by the query vector and their text context and the document represented by the document vector. In contrast to other techniques for determining candidate documents for candidate hyperlinks, the techniques disclosed herein improve the performance of determining candidate documents for candidate hyperlinks by representing text and documents as respective query and document vectors, and by performing a dot product of the query and document vectors.
The document prediction module 234 may determine one or more candidate documents to be linked from the candidate hyperlink based at least in part on a plurality of dot-product scores resulting from performing a dot-product of the query vector with each of the plurality of document vectors. The dot-product score resulting from performing a dot-product of the query vector and the document vector associated with the document may correspond to a relative likelihood that the document associated with the document vector is one of the one or more candidate documents to be linked from the sequence of one or more words. Thus, a document associated with a relatively high dot-product score is more likely to be one of the one or more candidate documents to be linked from the sequence of one or more words than another document associated with a relatively low score.
In another example, document prediction module 234 may limit the number of documents included in the one or more candidate documents to a maximum of N documents, where N may be any suitable number, e.g., 3, 4, 5, etc. For example, the document prediction module 234 may select documents associated with the top N dot product scores as one or more candidate documents, or may select documents associated with top N dot product scores greater than a threshold dot product score as one or more candidate documents.
The document prediction module 234 may also limit the number of documents from which one or more candidate documents are determined. The document prediction module 234 may only consider documents that are accessible to the intended recipient or viewer of the document, and may refrain from considering documents that are not accessible to the intended recipient or viewer. Further, in some examples, the document prediction module 234 may limit the document under consideration to documents that have been created, edited, viewed, or otherwise accessed by the user who is editing the document.
The document prediction module 234 may also limit the documents to be considered in determining one or more candidate documents to be linked from the candidate hyperlinks within the documents based on the time the user last accessed or edited the document. For example, the document prediction module 234 may determine one or more candidate documents from the N most recently accessed or edited documents, where N may be any suitable integer, such as 10, 50, 100, etc. In another example, the document prediction module 234 may determine one or more candidate documents from among the documents that the user has accessed or edited over a specified period of time (e.g., the last day, the last week, etc.), or may determine one or more candidate documents based on the time the document was last accessed or edited. In some examples, ML model 238 may take these factors as input to compute a document vector for the document based on these factors and the semantic content of the document.
In response to classifying a sequence of one or more words within a body of a document being edited as a candidate hyperlink, and in response to determining one or more candidate documents to link from the sequence of one or more words classified as a candidate hyperlink, the document prediction module 234 may communicate with the document service module 232 to send an indication of the sequence of one or more words classified as a candidate hyperlink and an indication of the one or more candidate documents to a document client (e.g., the document client module 108 shown in fig. 1) with which a user interacts to edit the document. In response, the document service module 232 may receive an indication that 1) the user has ignored the selection or 2) a document that has been selected from the one or more candidate documents.
If document services module 232 receives an indication that the user is ignoring the selection, document services module 232 may refrain from modifying the document to link the sequence of one or more words classified as candidate hyperlinks to one of the one or more candidate documents. Alternatively, if the document service module 232 receives an indication that a document has been selected from the one or more candidate documents, the document service module 232 may modify the document being edited such that the sequence of one or more words classified as candidate hyperlinks are hyperlinked to the selected document of the one or more candidate documents. For example, the document service module 232 may insert computer code, such as HTML code, in the message that specifies a sequence of one or more words as anchor text that hyperlinks to document locations within a network (e.g., the network 120 of FIG. 1).
The document prediction module 134 may continue to determine whether any additional sequences of one or more words within the edited document are classified as candidate hyperlinks and determine candidate documents for any additional sequences of one or more words classified as candidate hyperlinks. In response to receiving a command to send a document, the document service module 132 may be operative to send the document to a recipient designated by the document, the document including one or more hyperlinks to a corresponding one or more documents.
Fig. 3A through 3E are conceptual diagrams illustrating various aspects of an example machine learning model according to example embodiments of the present disclosure. Fig. 3A through 3E are described below in the context of the machine learning model 238 of fig. 2. For example, in some cases, the machine learning model 300 described below is an example of the machine learning model 238 of fig. 2.
FIG. 3A depicts a conceptual diagram of an example machine learning model, according to an example embodiment of the present disclosure. As shown in FIG. 3A, in some embodiments, the machine learning model 300 is trained to receive one or more types of input data and, in response, to provide one or more types of output data. Thus, fig. 3A illustrates a machine learning model 300 that performs inference.
The input data may include one or more characteristics associated with the instance or example. In some implementations, one or more features associated with an instance or example may be organized into a feature vector. In some embodiments, the output data may include one or more predictions. Prediction may also be referred to as inference. Thus, given a feature associated with a particular instance, the machine learning model 300 may output a prediction for that instance based on the feature.
The machine learning model 300 may be or include one or more of a variety of different types of machine learning models. In particular, in some embodiments, the machine learning model 300 may perform classification, regression, clustering, anomaly detection, recommendation generation, and/or other tasks.
In some implementations, the machine learning model 300 can perform various types of classification based on input data. For example, the machine learning model 300 may perform binary classification or multi-classification. In binary classification, outputting data may include classifying input data into one of two different classes. In multi-classification, outputting data may include classifying input data into one (or more) of more than two classes. The classification may be single-label or multi-label. The machine learning model 300 may perform discrete classification, where the input data is simply classified into one or more classes or categories.
In some embodiments, the machine learning model 300 may perform classification, wherein the machine learning model 300 provides a numerical value for each of one or more classes that describes the extent to which it believes that the input data should be classified into the respective class. In some cases, the numerical values provided by the machine learning model 300 may be referred to as "confidence scores," which represent respective confidences associated with classifying the input into respective classes. In some implementations, the confidence score may be compared to one or more thresholds to give a discrete classification prediction. In some embodiments, only a certain number (e.g., one) of classes with relatively largest confidence scores may be selected to give a discrete classification prediction.
The machine learning model 300 may output a probabilistic classification. For example, the machine learning model 300 may predict a probability distribution over a set of classes given sample input. Thus, the machine learning model 300 may output not only the most likely class to which the sample input should belong, but also, for each class, the probability that the sample input belongs to that class. In some embodiments, the probability distribution over all possible classes may be normalized. In some implementations, a Softmax function or other type of function or layer may be used to compress the set of real values respectively associated with the possible classes into a set of real values in the range of (0, 1) that sum to one.
In some examples, the probabilities provided by the probability distributions may be compared to one or more thresholds for discrete classification prediction. In some embodiments, only a certain number (e.g., one) of classes with relatively maximum prediction probabilities may be selected to give discrete class predictions.
Where the machine learning model 300 performs classification, supervised learning techniques may be used to train the machine learning model 300. For example, the machine learning model 300 may be trained on a training data set that includes training examples labeled as belonging to (or not belonging to) one or more classes. Further details regarding supervised training techniques are provided below in the description of fig. 3B-3E.
In some embodiments, the machine learning model 300 may perform a regression to provide output data in the form of continuous values. Successive numerical values may correspond to any of a variety of metrics or numerically represented numbers, including, for example, monetary values, scores, or other numerical representations. As an example, the machine learning model 300 may perform linear regression, polynomial regression, or nonlinear regression. As an example, the machine learning model 300 may perform a simple regression or a multiple regression. As described above, in some embodiments, a Softmax function or other function or layer may be used to compress a set of real values associated with two or more possible classes, respectively, into a set of real values in the range of (0, 1) that sum to one.
The machine learning model 300 may perform various types of clustering. For example, the machine learning model 300 may identify one or more previously defined clusters to which the input data most likely corresponds. The machine learning model 300 may identify one or more clusters within the input data. That is, where the input data includes multiple objects, documents, or other entities, the machine learning model 300 may classify the multiple entities included in the input data into multiple clusters. In some embodiments where the machine learning model 300 performs clustering, unsupervised learning techniques may be used to train the machine learning model 300.
The machine learning model 300 may perform anomaly detection or outlier detection. For example, the machine learning model 300 may identify input data that does not conform to expected patterns or other features (e.g., as previously observed from prior input data). As an example, anomaly detection may be used for fraud detection or system failure detection.
In some implementations, the machine learning model 300 can provide the output data in the form of one or more recommendations. For example, the machine learning model 300 may be included in a recommendation system or engine. As an example, given input data describing previous results of certain entities (e.g., scores, rankings, or ratings indicative of an amount of success or enjoyment), the machine learning model 300 may output suggestions or recommendations of one or more additional entities that are expected to have a desired result (e.g., elicit scores, rankings, or ratings indicative of success or enjoyment) based on the previous results. As an example, given input data describing a context of a computing device (e.g., computing device 102 of fig. 1), a recommendation system (e.g., document system 130 of fig. 1 and document system 230 of fig. 2) may output a suggestion or recommendation of one or more candidate documents to link from a word in a document.
In some cases, the machine learning model 300 may act as a proxy in the environment. For example, the machine learning model 300 may be trained using reinforcement learning, which will be discussed in further detail below.
In some embodiments, the machine learning model 300 may be a parametric model, while in other embodiments, the machine learning model 300 may be a non-parametric model. In some embodiments, the machine learning model 300 may be a linear model, while in other embodiments, the machine learning model 300 may be a non-linear model.
As described above, the machine learning model 300 may be or include one or more of a variety of different types of machine learning models. Examples of such different types of machine learning models are provided below for illustration. One or more example models described below may be used (e.g., combined) to provide output data in response to input data. Other models may be used in addition to the example models provided below.
In some implementations, the machine learning model 300 can be or include one or more classifier models, e.g., a linear classification model, a quadratic classification model, etc. The machine learning model 300 may be or include one or more regression models, such as a simple linear regression model, a multiple linear regression model, a logistic regression model, a stepwise regression model, a multiple adaptive regression spline, a local scatter-smoothing estimation model, and the like.
In some examples, the machine learning model 300 may be or include one or more decision tree based models, such as classification and/or regression trees, iterative dichotomy 3 decision trees, C4.5 decision trees, chi-square automatic interaction detection decision trees, decision stumps, conditional decision trees, and so forth.
The machine learning model 300 may be or include one or more kernel machines. In some implementations, the machine learning model 300 can be or include one or more support vector machines. The machine learning model 300 may be or include one or more instance-based learning models, such as a learning vector quantization model, a self-organizing map model, a local weighted learning model, and so forth. In some embodiments, machine learning model 300 may be or include one or more nearest neighbor models, e.g., a k-nearest neighbor classification model, a k-nearest neighbor regression model, or the like. The machine learning model 300 may be or include one or more bayesian models, such as a naive bayes model, a gaussian naive bayes model, a polynomial naive bayes model, an average single dependency estimation, a bayesian network, a bayesian belief network, a hidden markov model, or the like.
In some embodiments, the machine learning model 300 may be or include one or more artificial neural networks (also referred to simply as neural networks). A neural network may include a set of connected nodes, which may also be referred to as neurons or perceptrons. The neural network may be organized into one or more layers. Neural networks comprising multiple layers may be referred to as "deep" networks. The deep network may include an input layer, an output layer, and one or more hidden layers between the input layer and the output layer. The nodes of the neural network may or may not be fully connected.
The machine learning model 300 may be or include one or more feed-forward neural networks. In a feed forward network, the connections between nodes do not form loops. For example, each connection may connect a node of an earlier layer to a node of a later layer.
In some cases, the machine learning model 300 may be or include one or more recurrent neural networks. In some cases, at least some nodes of the recurrent neural network may form a cycle. Recurrent neural networks are particularly useful for processing input data that is sequential in nature. In particular, in some cases, the recurrent neural network may pass or retain information from a previous portion of the input data sequence to a subsequent portion of the input data sequence by using a recurrent or directed cyclic node connection.
In some examples, the sequential input data may include time series data (e.g., sensor data versus time or images captured at different times). For example, the recurrent neural network may analyze sensor data with respect to time to detect or predict slip directions, perform handwriting recognition, and the like. The sequential input data may include words in a sentence
(e.g., for natural language processing, speech detection or processing, etc.), notes in a musical composition, sequential actions taken by a user (e.g., detecting or predicting sequential application usage), sequential object states, and so forth.
Exemplary recurrent neural networks include Long Short Term (LSTM) recurrent neural networks, gated recurrent units, bidirectional recurrent neural networks, continuous-time recurrent neural networks, neural history compressors, echo state networks, elman networks, jordan networks, recurrent neural networks, hopfield networks, fully-circular networks, sequence-to-sequence configurations, and the like.
In some examples, the machine learning model 300 may be or include a self-attention based one or more acyclic sequence-to-sequence model, such as a transformer network. Details of an exemplary transformer network can be found on http:// papers. nips.cc/paper/7181-authentication-is-all-you-need.pdf.
In some embodiments, the machine learning model 300 may be or include one or more convolutional neural networks. In some cases, a convolutional neural network may include one or more convolutional layers that perform convolution on input data using a learned filter.
The filter may also be referred to as a kernel. Convolutional neural networks are particularly useful for visual problems, such as when the input data comprises an image (e.g., a still image or video). However, convolutional neural networks may also be applied to natural language processing.
In some examples, the machine learning model 300 may be or include one or more generating networks, e.g., generating a countering network. The generation network may be used to generate new data, e.g., new images or other content.
The machine learning model 300 may be or include an auto-encoder. In some cases, the purpose of an auto-encoder is to learn a representation for a set of data (e.g., low-dimensional encoding), typically for dimensionality reduction purposes. For example, in some cases, an auto-encoder may attempt to encode input data and provide output data that reconstructs the input data from the encoding. Recently, the concept of an auto-encoder has been more widely used for learning a generative model of data. In some cases, the auto-encoder may contain other losses than reconstructing the input data.
The machine learning model 300 may be or include one or more other forms of artificial neural networks, such as a deep boltzmann machine, a deep belief network, a stacked autoencoder, and so forth. Any of the neural networks described herein may be combined (e.g., stacked) to form a more complex network.
One or more neural networks may be used to provide the embedding based on the input data. For example, embedding may be a representation of knowledge abstracted from input data into one or more learning dimensions. In some cases, embedding may be a useful source to identify related entities. In some cases, the embedding may be extracted from the output of the network, while in other cases, the embedding may be extracted from any hidden node or layer of the network (e.g., near but not at the final layer of the network). Embedding is useful for performing auto-suggest next video, product suggestions, entity or object recognition, and the like. In some cases, embedding is a useful input to downstream models. For example, embedding input data (e.g., search queries) that can be used to generalize downstream models or processing systems.
The machine learning model 300 may include one or more clustering models, such as a k-means clustering model, an expectation-maximization model, a hierarchical clustering model, and so forth.
In some embodiments, the machine learning model 300 may perform one or more dimension reduction techniques, such as principal component analysis, kernel principal component analysis, graph-based kernel principal component analysis, principal component regression, partial least squares regression, Sammon mapping, multidimensional scaling, projection pursuit, linear discriminant analysis, hybrid discriminant analysis, quadratic discriminant analysis, generalized discriminant analysis, flexible discriminant analysis, auto-coding, and the like.
In some embodiments, the machine learning model 300 may perform or be subject to one or more reinforcement learning techniques, such as markov decision processes, dynamic programming Q-functions or Q-learning, value function methods, deep Q-networks, micro-neural computers, asynchronous dominator-critics, deterministic policy gradients, and the like.
In some implementations, the machine learning model 300 can be an autoregressive model. In some cases, the autoregressive model may specify that the output data is linearly dependent on its own prior values and on a random term. In some cases, the autoregressive model may take the form of a random difference equation. An example of an autoregressive model is WaveNet, which is a generative model of the original audio.
In some implementations, the machine learning model 300 may include or form part of a multi-model integration. As one example, bootstrap aggregation, which may also be referred to as "bagging," may be performed. In bootstrap aggregation, a training data set is divided into a plurality of subsets (e.g., by replacing random sampling), and a plurality of models are trained on the plurality of subsets, respectively. At inference time, the individual outputs of the multiple models can be combined (e.g., by averaging, voting, or other techniques) and used as an integrated output.
One example integration is a random forest, which may also be referred to as a random decision forest. Random forests are an integrated learning method for classification, regression, and other tasks. A random forest is generated by generating a plurality of decision trees when training. In some cases, a class that is a class (classification) or a mean prediction (regression) pattern of individual trees may be used as the output of the forest at the time of inference. The random decision forest can correct the trend that the decision tree adapts to its training set excessively.
Another example integration technique is stacking, which in some cases may be referred to as stacking generalization. Stacking includes training the combiner model to fuse or combine predictions of multiple other machine learning models. Accordingly, multiple machine learning models (e.g., of the same or different types) may be trained based on training data. In addition, the combiner model can be trained to take predictions from other machine learning models as input and, in response, produce final inferences or predictions. In some cases, a single-layer logistic regression model may be used as the combiner model.
Another example of an integration technique is enhancement. Enhancement may include building the integration step by iteratively training the weak model and then adding to the final strong model. For example, in some cases, each new model may be trained to emphasize training examples where previous models were misinterpreted (e.g., misclassified). For example, the weight associated with each such misinterpretation example may be increased. One common implementation of enhancement is AdaBoost, which may also be referred to as adaptive enhancement. Other example enhancement techniques include LPBoost, TotalBoost, BrownBoost, xgboost, MadaBoost, LogitBoost, gradient enhancement, and the like. Further, any of the models described above (e.g., regression models and artificial neural networks) may be combined to form an integration. As an example, the integration may include a top-level machine learning model or heuristic function to combine and/or weight the outputs that form the integrated model.
In some implementations, multiple machine learning models (e.g., models forming an ensemble may be linked and jointly trained (e.g., sequentially integrated through back propagation of errors) however, in some implementations, only a subset (e.g., one) of the jointly trained models is used for reasoning.
In some embodiments, the machine learning model 300 may be used to pre-process input data for subsequent input into another model. For example, the machine learning model 300 may perform dimension reduction techniques and embedding (e.g., matrix decomposition, principal component analysis, singular value decomposition, word2vec/GLOVE, and/or correlation methods), clustering, and even classification and regression of downstream consumption. Many of these techniques have been discussed above and are further discussed below.
As described above, the machine learning model 300 may be trained or otherwise configured to receive input data and, in response, provide output data. The input data may include different types, forms or variations of input data. As an example, in various embodiments, the input data may include features that describe content (or portions of content) that the user initially selected, e.g., content of a document or image that the user selected, a link to the user selection that is related to other files available on the device or cloud, metadata of the user selection, and so forth. Further, where user permission is obtained, the input data includes context of use of the user obtained from the application itself or other sources. Examples of usage scenarios include the breadth of sharing (public sharing, sharing with large groups, or sharing with private or sharing with specific people), the context of sharing, and the like. Other input data may include the state of the device, e.g., the location of the device, applications running on the device, etc., as permitted by the user.
In some implementations, the machine learning model 300 can receive and use the input data in its raw form. In some embodiments, the raw input data may be preprocessed. Thus, the machine learning model 300 may receive and use the pre-processed input data in addition to or instead of the raw input data.
In some implementations, preprocessing the input data may include extracting one or more additional features from the raw input data. For example, feature extraction techniques may be applied to the input data to generate one or more new additional features. Example feature extraction techniques include edge detection, corner detection, blob detection, ridge detection, scale-invariant feature transforms, motion detection, optical flow, hough transforms, and the like.
In some implementations, the extracted features may include or be derived from transformations of the input data into other domains and/or dimensions. As an example, the extracted features may comprise or be derived from a transformation of the input data into the frequency domain. For example, a wavelet transform and/or a fast fourier transform may be performed on the input data to generate additional features.
In some implementations, the extracted features can include statistics calculated from the input data or certain portions or dimensions of the input data. Example statistics include patterns, means, maxima, minima, or other measures of the input data or portions thereof.
In some embodiments, the input data may be sequential, as described above. In some cases, the sequential input data may be generated by sampling or dividing the input data stream. As one example, frames may be extracted from a video. In some embodiments, the sequential data may be made non-sequential data by aggregation.
As another example preprocessing technique, portions of the input data may be evaluated. For example, additional synthesized input data may be generated by interpolation and/or extrapolation.
As another example pre-processing technique, some or all of the input data may be scaled, normalized, generalized, and/or regularized. Examples of regularization techniques include ridge regression, Least Absolute Shrinkage and Selection Operator (LASSO), elastic networks, least angle regression, cross validation, L1 regularization, L2 regularization, and the like. As one example, some or all of the input data may be normalized by subtracting the mean of the feature values for a given dimension from each individual feature value, and then dividing by the standard deviation or other metric.
As another example pre-processing technique, some or all of the input data may be quantized or discretized. In some cases, qualitative features or variables contained in the input data may be converted into quantitative features or variables. For example, a thermal encoding may be performed.
In some examples, dimension reduction techniques may be applied to the input data prior to input to the machine learning model 300. Several examples of dimension reduction techniques are provided above, including, for example, principal component analysis, kernel principal component analysis, graph-based kernel principal component analysis, principal component regression, partial least squares regression, Sammon mapping, multidimensional scaling, projection pursuit, linear discriminant analysis, hybrid discriminant analysis, quadratic discriminant analysis, generalized discriminant analysis, flexible discriminant analysis, auto-coding, and the like.
In some embodiments, during training, the input data may be intentionally deformed in any number of ways to increase the robustness, generalization, or other quality of the model. Example techniques for distorting the input data include adding noise, altering color or shading or hue, magnification, segmentation, magnification, and the like.
In response to receiving the input data, the machine learning model 300 may provide output data. The output data may include different types, forms, or variations of output data. As an example, in various embodiments, the output data may include content sharable in association with the initial content selection, the content being stored locally on the user device or in the cloud.
As described above, in some embodiments, the output data may include various types of classification data (e.g., binary classification, multi-classification, single-label, multi-label, discrete classification, regression classification, probabilistic classification, etc.), or may include various types of regression data (e.g., linear regression, polynomial regression, non-linear regression, simple regression, multiple regression, etc.). In other cases, the output data may include clustered data, anomaly detection data, recommendation data, or any other form of output data discussed above.
In some embodiments, the output data may affect downstream processes or decisions. As one example, in some embodiments, the output data may be interpreted and/or acted upon by a rule-based regulator.
The present disclosure provides systems and methods that include or otherwise utilize one or more machine learning models described herein to classify words in a document as being candidate hyperlinks or not, and suggest one or more candidate documents linked from a sequence of one or more words classified as candidate hyperlinks based on characteristics of the one or more candidate documents and a textual context of the sequence of one or more words classified as candidate hyperlinks. Any of the different types or forms of input data described above may be combined with any of the different types or forms of machine learning models described above to provide any of the different types or forms of output data described above.
The systems and methods of the present disclosure may be implemented by or otherwise executed on one or more computing devices. Example computing devices include user computing devices (e.g., laptop computers, desktop computers, and mobile computing devices such as tablets, smart phones, wearable computing devices, and the like), embedded computing devices (e.g., devices embedded in vehicles, cameras, image sensors, industrial machines, satellites, gaming machines, or controllers, or embedded in home appliances such as refrigerators, thermostats, electric meters, home energy managers, smart home assistants, and the like), server computing devices (e.g., database servers, parameter servers, file servers, mail servers, print servers, Web servers, game servers, application servers, and the like), dedicated professional model processing or training devices, virtual computing devices, other computing devices, or computing infrastructures, or combinations thereof.
FIG. 3B illustrates a conceptual diagram of a computing system 310, the computing system 310 being an example of the document system 130 of FIG. 1 and the document system 230 of FIG. 2. The computing system 310 includes a processing component 302, a memory component 304, and a machine learning model 300. The computing system 310 may store and implement the machine learning model 300 locally (i.e., on the device). The output data obtained by locally implementing the machine learning model 300 at the computing system 310 may be used to improve the performance of the computing system 310.
Fig. 3C illustrates a conceptual diagram of an example computing system that may communicate over a network with an example server computing system that includes a machine learning model. Fig. 3C includes client device 310A in communication with server device 360 over network 330. The client device system is an example of the document system 130 of FIG. 1 and the document system 230 of FIG. 2, the server device 360 is an example of the remote system 140 of FIG. 1, and the network 330 is an example of the network 120 of FIG. 1. The server device 360 stores and implements the machine learning model 300. In some instances, the output data obtained by the machine learning model 300 at the server device 360 may be used to improve other server tasks, or may be used by other non-user devices to improve services performed by or for such other non-user devices. For example, the output data may improve other downstream processing performed by the server device 360 for the user's computing device or embedded computing device. In other instances, output data obtained by implementing the machine learning model 300 at the server device 360 may be sent to and used by a user computing device, such as the client device 310A, an embedded computing device, or other client device. For example, server device 360 may say that machine learning is performed as a service.
In other implementations, different respective portions of the machine learning model 300 may be stored at and/or implemented by some combination of user computing devices, embedded computing devices, server computing devices, and the like. In other words, portions of machine learning model 300 may be distributed in whole or in part between client device 310A and server device 360.
Devices 310A and 360 may perform graphics processing techniques or other machine learning techniques using one or more machine learning platforms, frameworks, and/or libraries (e.g., TensorFlow, Caffe/Caffe2, thano, Torch/PyTorch, Mxnet, CNTK). Devices 310A and 360 may be distributed in different physical locations and connected via one or more networks, including network 330. If configured as a distributed computing device, the devices 310A and 360 may operate according to a sequential computing architecture, a parallel computing architecture, or a combination thereof. In an example, a distributed computing device may be controlled or booted through the use of a parameter server.
In some embodiments, multiple instances of the machine learning model 300 may be parallelized to provide increased processing throughput. For example, multiple instances of machine learning model 300 may be parallelized on a single processing device or computing device, or between multiple processing devices or computing devices.
Each computing device implementing machine learning model 300 or other aspects of the present disclosure may include a number of hardware components that enable the techniques described herein to be performed. For example, each computing device may include one or more storage devices that store some or all of the machine learning model 300. For example, the machine learning model 300 may be a structured numerical representation stored in memory. The one or more storage devices may also include instructions for implementing the machine learning model 300 or for performing other operations. Example storage devices include RAM, ROM, EEPROM, EPROM, flash memory devices, disks, etc., and combinations thereof.
Each computing device may also include one or more processing devices that implement some or all of machine learning model 300 and/or perform other related operations. Example processing devices include one or more of the following: a Central Processing Unit (CPU), a Visual Processing Unit (VPU), a Graphics Processing Unit (GPU), a Tensor Processing Unit (TPU), a Neural Processing Unit (NPU), a neural processing engine, a core of a CPU, VPU, GPU, TPU, NPU or other processing device, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a coprocessor, a controller, or a combination of the above processing devices. The processing device may be embedded in other hardware components, e.g., embedded in an image sensor, an accelerometer, etc.
The hardware components (e.g., storage devices and/or processing devices) may be distributed across multiple physically distributed computing devices and/or virtually distributed computing systems.
FIG. 3D illustrates a conceptual diagram of an example computing system in communication with an example training computing system that includes a model trainer. FIG. 3D includes client system 310B in communication with training device 370 via network 330. Client system 310B is an example of document system 130 in FIG. 1 and document system 230 in FIG. 2, and network 330 is an example of network 120 in FIG. 1. Machine learning model 300 described herein may be trained at a training computing system, such as training device 370, and then provided for storage and/or implementation at one or more computing systems (e.g., client system 310B). For example, model trainer 372 executes locally at training device 370. However, in some examples, training device 370 including model trainer 372 may be included in or separate from client system 310B or any other computing device implementing machine learning model 300.
In some embodiments, the machine learning model 300 may be trained in an offline manner or an online manner. In offline training (also referred to as batch learning), the machine learning model 300 is trained on the entire static training data set. In online learning, the machine learning model 300 is continuously trained (or retrained) as new training data becomes available (e.g., when the model is used to perform reasoning).
The machine learning model 300 described herein may be trained according to one or more of a variety of different training types or techniques. For example, in some implementations, the machine learning model 300 can be trained by the model trainer 372 using supervised learning, where the machine learning model 300 is trained on a training data set that includes instances or examples with labels. The tags may be applied manually by experts, generated by crowd sourcing, or provided by other techniques (e.g., physical or complex mathematical based models). In some implementations, the training examples may be provided by the user computing device if the user has provided permission. In some embodiments, this process may be referred to as personalizing the model.
Fig. 3E shows a conceptual diagram of a training process 390 as an example training process in which the machine learning model 300 is trained on training data 391 that includes sample input data 392 having labels 393. Training process 390 is an example training process; other training processes may also be used.
In some implementations, the machine learning model 300 can be trained by optimizing an objective function, such as the objective function 395. For example, in some embodiments, the objective function 395 may be or include a loss function that compares (e.g., determines a difference between) output data generated by the model from the training data to a label (e.g., ground truth label) associated with the training data. For example, the loss function may evaluate the mean or sum of the squares of the differences between the output data and the tags. In some examples, objective function 395 may be or include a cost function that describes the cost of a particular result or output data. Other examples of the objective function 395 may include margin-based techniques such as triple loss or maximum margin training.
One or more of a variety of optimization techniques may be performed to optimize the objective function 395. For example, the optimization technique may minimize or maximize the objective function 395. Exemplary optimization techniques include Hessian-based techniques and gradient-based techniques such as coordinate descent, gradient descent (e.g., random gradient descent), sub-gradient methods, and the like. Other optimization techniques include black box optimization techniques and heuristics.
In some implementations, the back propagation of errors can be used in conjunction with optimization techniques (e.g., gradient-based techniques) to train the machine learning model 300 (e.g., when the machine learning model is a multi-layer model such as an artificial neural network). For example, an iterative loop of propagation and model parameter (e.g., weight) updates may be performed to train the machine learning model 300. Exemplary backpropagation techniques include time-truncated backpropagation, Levenberg-Marquardt backpropagation, and the like.
In some implementations, the machine learning model 300 described herein can be trained using unsupervised learning techniques. Unsupervised learning may include inferring functions that describe hidden structures from unlabeled data. For example, the classification or categorization may not be included in the data. Unsupervised learning techniques may be used to generate machine learning models that can perform clustering, anomaly detection, learning latent variable models, or other tasks.
The machine learning model 300 may be trained using semi-supervised techniques that combine aspects of supervised and unsupervised learning. The machine learning model 300 may be trained or generated by evolutionary techniques or genetic algorithms. In some implementations, the machine learning model 300 described herein can be trained using reinforcement learning. In reinforcement learning, an agent (e.g., a model) may take action in an environment and learn to maximize rewards resulting from such action and/or minimize penalties resulting from such action. Reinforcement learning differs from the supervised learning problem in that the correct input/output pair is not provided, nor is suboptimal action explicitly corrected.
In some implementations, one or more generalization techniques may be performed during training to improve the generalization of the machine learning model 300. Generalization techniques can help reduce overfitting of the machine learning model 300 to the training data. Example generalization techniques include dropout techniques, weight decay techniques, batch normalization, early stop methods, subset selection, step-by-step selection, and the like.
In some implementations, the machine learning model 300 described herein may include or be affected by a number of hyper-parameters, such as, for example, a learning rate, a number of layers, a number of nodes in each layer, a number of leaves in a tree, a number of clusters, and so forth. The hyper-parameters may affect the model performance. The hyperparameters may be selected manually or automatically by applying techniques such as grid search, black box optimization techniques (e.g., bayesian optimization, random search, etc.), gradient-based optimization, etc. Example techniques and/or tools for performing automated hyper-parameter optimization include Hyperopt, Auto-WEKA, Spearmint, Metric Optimization Engine (MOE), and the like.
In some embodiments, various techniques may be used to optimize and/or adjust the learning rate when training the model. Example techniques and/or tools for performing learning rate optimization or adjustment include Adagrad, adaptive moment estimation (ADAM), Adadelta, RMSprop, and the like.
In some embodiments, a transfer learning technique may be used to provide an initial model from which to train the machine learning model 300 described herein.
In some implementations, the machine learning model 300 described herein can be included in different portions of computer readable code on a computing device. In one example, the machine learning model 300 may be included in and used (e.g., exclusively used) by a particular application or program. Thus, in one example, a computing device may include multiple applications, and one or more of the applications may contain its own respective machine learning library and machine learning model.
In another example, machine learning model 300 described herein may be included in an operating system of a computing device (e.g., in a central smart tier of the operating system) and may be invoked or otherwise used by one or more applications interacting with the operating system. In some implementations, each application can communicate with the central smart tier (and the models stored therein) using an Application Programming Interface (API) (e.g., a common public API that is common across all applications).
In some embodiments, the central smart inlay may communicate with the central device data plane. The central device data layer may be a centralized repository of data for the computing devices. The central device data layer may communicate with many other components of the computing device, for example, with one or more sensors, context managers, device state components, and/or other components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
The techniques discussed herein make reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and task divisions, as well as functional divisions, between components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components operating in combination.
The database and applications may be implemented on a single system or may be distributed across multiple systems. The distributed components may run sequentially or in parallel.
In addition, the machine learning techniques described herein are easily interchangeable and combinable. While certain example techniques have been described, many others exist and may be used in conjunction with aspects of the present disclosure.
The present disclosure has provided a brief overview of example machine learning models and related techniques. For additional details, the reader should read the following references: machine Learning A basic Peractive (Murphy); rules of Machine Learning Best Practices for ML Engineering (Zinkevich); deep Learning (Goodfellow); reinforcement Learning: An Introduction (Sutton); and Artificial Intelligence: AModern Approach (Norvig).
In addition to the above, the user may be provided with controls that allow the user to make selections as to whether and when the systems, programs, or features described herein may enable gathering user information (e.g., information about the user's social network, social behavior or activity, profession, the user's preferences, or the user's current location), and whether to send content to or communicate with the user from a server. In addition, certain data may be processed in one or more ways prior to storage or use, thereby removing personally identifiable information. For example, the identity of the user may be processed such that personally identifiable information about the user cannot be determined, or the geographic location of the user may be generalized where location information (e.g., city, zip code, or state level) is obtained, such that the particular location of the user cannot be determined. Thus, the user may control which information about the user is collected, how the information is used, and which information is provided to the user.
FIG. 4 is a conceptual diagram of an example machine learning model that may be used to determine one or more candidate documents to link from a document being edited in accordance with an example embodiment of the present disclosure. As shown in fig. 4, text encoder model 402, document encoder model 404, and dot product model 406 may each be an example of a machine learning model included in machine learning model 238 of fig. 2 and machine learning model 300 of fig. 3, and thus text encoder model 402, document encoder model 404, and dot product model 406 may implement any of the techniques described above in connection with machine learning model 238 of fig. 2 and machine learning model 300 of fig. 3.
The text encoder model 402 may be trained as a classifier that may perform one of the classification techniques described above with respect to the machine learning models of fig. 3A-3E to determine whether to classify a word or sequence of one or more words as a candidate hyperlink. In particular, for words in the body of a document, text encoder model 402 may be trained to classify a sequence of one or more words based on the sequence of one or more words and a context associated with the document containing the sequence of one or more words. As described above, text coder model 402 can be trained to perform one or more of the following techniques: link detection, pre-trigger, and post-trigger, as discussed above with respect to the machine learning model 238 of fig. 2. In some examples, text encoder model 402 may contain separate machine training models for performing each of link detection, pre-trigger, and post-trigger. The text coder model 402 may be trained using training data that includes documents linked to documents to classify a sequence of one or more words as being a candidate hyperlink or not a candidate hyperlink.
The dot product model 406 may also be trained to determine one or more candidate documents for a word classified as a candidate hyperlink that are likely to be linked from a sequence of one or more words classified as a candidate hyperlink. Text encoder model 402 may be trained to receive an indication of a sequence of one or more words classified as a candidate hyperlink and an indication of a context associated with a document containing the candidate hyperlink, and in response, generate a query vector associated with the sequence of one or more words based at least in part on the sequence of one or more words and the context. Document encoder model 404 may also be trained to receive indications of a plurality of documents and, in response, generate a document vector for each document of the plurality of documents. The dot-product model 406 may be trained to determine a dot-product score for each document of the plurality of documents by performing, for each document of the plurality of documents, a dot-product of the query vector and the document vector associated with the respective document. The dot product model 406 may be trained to determine one or more candidate documents from the plurality of documents to link from the portion of text based on the dot product scores of the plurality of documents. The quality of semantic matches between documents and words is calculated as the dot product between a query vector respectively associated with a sequence of one or more words and a document vector associated with a document, where a higher dot product score indicates a higher quality of semantic matches. This approach may be advantageous because the model may be trained end-to-end, and may even be fine-tuned based on customer-specific data. The document vector or vectors in the vector space closest to the query vector may be determined by retrieving the best matching document (i.e., the document vector with which it has an association that yields the highest dot product score with the query vector associated with the sequence of one or more words) through a fast nearest neighbor search.
Because text inputs that elicit the same response are likely to have the same or similar semantics, text encoder model 402 is trained to predict a response to the text inputs, and text encoder model 402 is also trained to determine that different text inputs have the same semantics if the same response is predicted for each different piece of text. In this way, text encoder model 402 may be trained to generate similar query vectors (i.e., vectors that are immediately adjacent to each other in vector space) from different text inputs having similar semantic meanings. It should be appreciated that text encoder model 402 may also be trained by any other suitable machine learning technique to generate similar vectors from text inputs having similar semantics.
The subject matter of the document 414 and the title of the document 414 may include the file name of the document 414 and/or the document heading or document title in the content of the document 414. Examples of document types may include word processing documents, spreadsheet documents, presentation documents, video files, pictures, etc., and the type of document 414 may be indicated by the media type (e.g., multipurpose internet mail extension) associated with document 414. The time the document 414 was created, the time the document 414 was last opened, the time the document 414 was last edited, the age of the document 414, the opening frequency of the document 414, the editing frequency of the document 414, the sharing settings of the document 414, the author of the document 414, and/or the collaborators with the document 414 may be features that indicate how the user composing the document 414 interacted with the document 414. The metadata provided by the user for the document 414 may include an indication that the user has added the document 414 to the user's bookmark or favorites list (e.g., by the user staring at the document 414).
Similar to text encoder model 402, document encoder model 404 may implicitly learn semantic similarities between texts based at least in part on machine learning from conversational data. For example, document encoder model 404 may be trained by unsupervised learning to predict responses to text input (i.e., next message predictions) for general language understanding using a dataset of comments and responses from an online discussion website. Document encoder model 404 may also be trained to predict responses to text input using a dataset of messages and a dataset of responses from an organization-specific (e.g., company-specific) message system (e.g., a company email system), an organization-specific collaboration tool, etc., for organizing specific language understanding, which may be useful if machine learning model 300 is used for internal communication within an organization.
Because text inputs that cause the same response are likely to have the same or similar semantics, document encoder model 404 is trained to predict a response to the text inputs, and document encoder model 404 is also trained to determine that different text inputs and messages have similar semantics if the same response is predicted for each of the different text and messages. In this way, document encoder model 404 may be trained to encode document vectors based at least in part on the semantics of the content of the document.
The document encoder model 404 may also be trained to infer whether one document is similar to another document. If document encoder model 404 infers that a document is likely to be linked from a particular text or message, document encoder model 404 may also infer that other documents that are similar to the document are also likely to be linked from a similar particular text or message. When document encoder model 404 generates vectors for similar documents, the generated vectors may be in close proximity to each other in vector space (e.g., have a high cosine similarity). In other words, document encoder model 404 may generate similar vectors from similar documents.
By training via machine learning to perform next paragraph prediction, document beginning prediction, and/or random paragraph prediction, document encoder model 404 may determine a document vector for a document based on features of the document, which may include a title or subject of the document and a structure of the document. The next paragraph prediction is a prediction of a next paragraph of the document based on one or more previous paragraphs of the document. The beginning prediction of a document is a prediction of the beginning of the document (e.g., the title or subject matter of the document) based on one or more subsequent portions of the document. Random paragraph prediction is to take a random paragraph of a document as an input, predict a title of the document based on the input, and predict another random paragraph of the document. By training document encoder model 404 on a document for next paragraph prediction, document beginning prediction, and/or random paragraph prediction, document encoder model 404 may infer the structure of the document, the way the document is written, and the way the document header is constructed. By training to infer such information about a document, document encoder model 404 is able to determine whether the title or topic of a document is similar to the title or topic of another document, or whether the structure of a document is similar to the structure of another document, with the goal of generating a document vector based on features of the document (e.g., title and/or topic).
In this manner, text encoder model 402 may be trained to convert words and their text contexts to multi-dimensional real-valued vectors that represent the semantics of a sequence of one or more words and their text contexts. Similarly, the document encoder model 404 may be trained to convert documents into multidimensional real-valued vectors that represent semantic meaning of their textual context. Thus, dot product scores are determined for the query vector and the document vector, thereby determining semantic matches between the sequence of one or more words and text context represented by the query vector and the documents represented by the document vector, wherein the dot product scores between the query vector and the document vector represent the semantic match quality between the query vector and the document vector.
In some examples, text encoder model 402 and document encoder model 404 may be customized for a particular organization, company, and so forth. Text encoder model 402 and document encoder model 404 may be trained based on a general corpus of information, e.g., generated using input from a dataset of comments and responses from a general online discussion website, a general corpus of email messages, etc. Text encoder model 402 and document encoder model 404 may then be trained on the organization-specific training data to customize text encoder model 402 and document encoder model 404 for the particular organization.
FIG. 5 is a flow diagram illustrating example operations of a computing system for selectively providing predicted document suggestions to a document being edited in accordance with one or more aspects of the present disclosure. For illustrative purposes only, the exemplary operation of FIG. 5 is described below within the scope of FIGS. 1-4.
In the example of fig. 5, the document system 230 may determine, using the machine learning model 238, whether to classify a sequence of one or more words within a first document being edited (e.g., document 112) as a candidate hyperlink based at least in part on the sequence of the one or more words and a context associated with the first document (502). Document system 230 may determine, using machine learning model 238 and based at least in part on the sequence of one or more words and the context, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words in response to classifying the sequence of one or more words as candidate hyperlinks (504). Document system 230 may, in response to receiving an indication to select a second document from the one or more candidate documents, modify the first document to associate a sequence of one or more words with a hyperlink to the second document (506).
In some examples, the first document may include an electronic message (e.g., an email message), wherein the context associated with the first document may include a text context associated with a sequence of one or more words, and wherein determining one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words may further include: using the machine learning model 238, and based at least in part on the sequence of the one or more words and the text context associated with the sequence of the one or more words, one or more candidate documents to hyperlink from the sequence of the one or more words are determined from the plurality of documents and an electronic message including a hyperlink to a second document is sent to the recipient.
In some examples, determining one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words may further include: the document system 230 uses the machine-learned model 238 to generate a query vector associated with the sequence of one or more words based at least in part on the sequence of one or more words and the context associated with the first document. The document system 230 may also use the machine learning model 238 to generate a plurality of document vectors associated with a plurality of documents. The document system 230 may also determine a plurality of dot product scores associated with the plurality of documents using the machine learning model 238 by using the dot product of the query vector and each of the plurality of document vectors. Document system 230 may also determine, using machine learning model 238, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words based at least in part on one or more dot product scores associated with the one or more candidate documents.
In some examples, the query vector and the plurality of document vectors are each multi-dimensional real-valued embedded vectors. In some examples, machine learning is used to train machine learning model 238 such that a dot product score of the query vector and the document vector associated with the second document represents a likelihood that a sequence of one or more words associated with the query vector links to the second document associated with the document vector.
In some examples, document system 230 may also generate a document vector associated with the second document based at least in part on one or more of the following using machine learning model 238: a subject matter of the second document, a title of the second document, a content of the second document, a type of the second document, a time the second document was created, a time the second document was last opened, a time the second document was last edited, a frequency the second document was opened, a frequency the second document was edited, a frequency the second document was shared, one or more authors of the second document, one or more collaborators of the second document, sharing settings of the second document, or user-provided metadata associated with the second document.
In some examples, the machine learning model is further trained by next message prediction. In some examples, the machine learning model is further trained by one or more of: next paragraph prediction, document beginning prediction, or random paragraph prediction to determine a document vector associated with the second document. In some examples, the machine learning model is further trained using training data that includes pairs of a first document and a second document linked or appended to the first document. In some examples, the context associated with the first document includes one or more of: a text context associated with the sequence of one or more words, an author of the first document, a recipient of the first document, a title of the first document, content of the first document, an activity associated with the first document, a time of last editing of the first document, or a previous message in a message thread containing the first document.
In some examples, the machine learning model 238 may include a machine-trained classifier that classifies the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of one or more words and a context associated with the first document.
Fig. 6A and 6B are diagrams illustrating an example application of query vector classifiers and pattern recognition in accordance with various aspects of the automated document hyperlink techniques described in this disclosure. Machine learning model 238 may include a dot product model 406, a text encoder model 402 (which may also be referred to as "input encoder 402"), and a document encoder model 404 (which may be referred to as "response encoder 404"), where input encoder 402 and response encoder 406 may be subjected to training as described above during so-called "step I". In some cases, the term "dot product model" may refer to a collection of dot product models 406, input encoder 402, and response encoder 404.
As further shown in the example of fig. 6A, the machine learning model 238 may copy the input encoder 402 and add the shallow classifier 600 during a second step (shown as "step II") resulting in an input encoder 602. As a result of the training, the input encoder 402 may be configured to represent semantic information about the input text that may be utilized when training the shallow classifier 600 (as the trained input encoder 402 may enable less training and data to be required when training the shallow classifier 600).
As such, the input encoder 602 may include a shallow classifier 600 that processes the results of the input encoder 402. The shallow classifier 600 may predict whether the input text is referencing a link anchor. The input (which in some examples is the only input) to the shallow classifier 600 is the query vector obtained when encoding the input. Because the query vector already represents learned semantic information, the shallow classifier 600 can utilize the learned semantic information. The shallow classifier 600 trains examples of ("sentence," "linked") tokens, where the "sentence" value refers to the sample input text and "linked" refers to whether the corresponding sample input text has hyperlinks or no hyperlinks. The shallow classifier 600, once trained, may be configured to predict whether a sentence should contain links.
In the example of fig. 6B, the machine learning model 238 detects link anchors (e.g., possible candidates for one or more words of the input text associated with the hyperlink) within the input text 650 in two stages. In a first stage, the machine learning model 238 is configured to apply the input encoder 402 to obtain the query vector 652, and, in turn, the machine learning model 238 is configured to apply the classifier 600. The classifier 600 predicts whether the query vector 652 should include a link (654).
When the classifier 600 predicts that the query vector 652 should not include links ("no" 654), the machine learning model 238 may refrain from adding links (656). However, when the classifier 600 predicts that the query vector 652 should include links ("yes" 654), the machine learning model 238 is configured to reference the database of frequent link anchors to determine the most likely link anchor (in terms of being used for the link anchor) within the input text 650.
To identify the most likely anchor of the link, classifier 600 may provide one or more likelihood scores to identify the likelihood that one or more words of the sequence (e.g., input text 650) will be the anchor of a hyperlink to the second document. For purposes of illustration, assume that classifier 600 generates a likelihood score (which is another way of referring to confidence scores), such as input text 650- "see the design documents herein. "
Mode(s) | Link likelihood degree |
"here" | 0.3 |
Design document " | 0.8 |
Slide show " | 0.7 |
"document" | 0.6 |
In this example, the machine learning model 238 may select the pattern "design document" because the "design document" pattern has a highest likelihood score of 0.8. The machine learning model 238 may combine the likelihood score with one or more frequent link anchor patterns to determine the most likely of the anchors for the hyperlink. In other words, the machine learning model 238 may identify the highest scoring pattern (in the possible scores example, 658) and represent the highest scoring pattern (e.g., "design document") as a suggested link anchor (660).
The machine learning model 238 may apply the two-stage approach described above because the classifier cannot predict the exact anchor text, so the machine learning model 238 should be trained to detect the anchor text after classification. Furthermore, using only a pattern (no classification) trained machine learning model may result in poor performance (e.g., predicting all occurrences of the word "here" as link candidates), frustration of the end user due to false positives, resulting in a poor user experience, and a waste of computing resources (e.g., processing cycles, power consumption, bandwidth-which may occupy both memory and network bandwidth, etc.). Thus, the above-described techniques may improve operation of the computing system itself by reducing false positives, facilitating a better user experience, and avoiding unnecessary operations of processing cycles, power, and bandwidth that may consume computing power.
FIG. 7 is a diagram illustrating an example application of a sequence-to-sequence model in accordance with aspects of the automated document hyperlinking techniques described in this disclosure. As an alternative or in combination to vector classifiers and pattern recognition, the machine learning model 238 may include a sequence-to-sequence model 700 (which may include the transformer described above, as one example). Sequence-to-sequence model 700 may represent variable-length sequences (e.g., e-sequences) configured to receive word, character, and/or byte embeddings1-e6Shown) and outputs another predicted sequence (e.g., p)1-p6Shown) of the model.
Training sequences to sequence model 700 to receive input text 650 and output anchor predictions p directly1-p6. Although described in terms of six inlays (which may also be more generally referred to as "tokens"), the techniques may be implemented for any number of tokens (e.g., "N" tokens). The sequence-to-sequence model 700 may output a similar number of predictions as vectors, a machine learning modelThe pattern 700 may be aggregated into a matrix (P)nxl) Where l represents the maximum size span of the embedding. For each position 0,1, …, n, the matrix P represents the likelihood of a span of size 0,1, …, l. Matrix Pi,jThe term in (1) represents the likelihood of a link anchor starting with a size j and a position i. As an example, for P15,10For example, entering text 650, sequence-to-sequence model 700 may predict that the span "design document" has a likelihood score of 0.8 (or 80% probability of being a link anchor). In this regard, the machine learning model 238 is configured to combine the likelihood score with one or more frequent link anchor patterns (using the sequence-to-sequence model 700) to determine the most likely of the anchors of the hyperlinks.
The following numbered examples may illustrate one or more aspects of the present disclosure.
Example 1, a method, comprising: determining, by at least one processor, using a machine learning model, based at least in part on a sequence of one or more words within a first document being edited and a context related to the first document, whether to classify the sequence of one or more words as a candidate hyperlink, in response to classifying the sequence of one or more words as a candidate hyperlink, determining, by the at least one processor, from the plurality of documents, one or more candidate documents to hyperlink from the sequence of one or more words, using the machine learning model, and based at least in part on the sequence of one or more words and the context, and in response to receiving an indication to select a second document from the one or more candidate documents, modifying, by the at least one processor, the first document to associate the sequence of one or more words with the hyperlink to the second document.
Example 2, the method of example 1, wherein the first document comprises an electronic message, wherein the context associated with the first document comprises a text context associated with a sequence of one or more words, and wherein determining, from the plurality of documents, one or more candidate documents to hyperlink from the sequence of one or more words further comprises: determining, by the at least one processor, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words using the machine learning model and based at least in part on the sequence of one or more words and a text context associated with the sequence of one or more words, and sending, by the at least one processor, an electronic message including the hyperlink to the second document to the recipient.
The method of any one of examples 3, 1, and 2, wherein determining one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words further comprises: generating, by the at least one processor and using a machine learning model, a query vector associated with the sequence of one or more words based at least in part on the sequence of one or more words and a context associated with the first document; generating, by at least one processor and using a machine learning model, a plurality of document vectors associated with a plurality of documents; determining, by the at least one processor and using a machine learning model, a plurality of dot product scores associated with the plurality of documents by using a dot product of the query vector and each document vector of the plurality of document vectors; determining, by the at least one processor and using a machine learning model, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words based at least in part on one or more dot product scores associated with the one or more candidate documents.
The method of example 4, example 3, wherein the query vector and the plurality of document vectors are multi-dimensional real-valued embedded vectors, respectively.
The method of any of examples 5, 3, and 4, wherein the machine learning model is trained using machine learning such that a dot product score of the query vector and a document vector associated with the second document represents a likelihood that a sequence of one or more words associated with the query vector links to the second document associated with the document vector.
The method of any one of examples 6 and 3 to 5, further comprising: generating, by the at least one processor and using the machine learning model, a document vector associated with the second document based at least in part on one or more of: a subject matter of the second document, a title of the second document, a content of the second document, a type of the second document, a time the second document was created, a time the second document was last opened, a time the second document was last edited, a frequency the second document was opened, a frequency the second document was edited, a frequency the second document was shared, one or more authors of the second document, one or more collaborators of the second document, sharing settings of the second document, or user-provided metadata associated with the second document.
The method of any of examples 7, 3 to 6, wherein the machine learning model is further trained by one or more of: next paragraph prediction, document beginning prediction, or random paragraph prediction to determine a document vector associated with the second document.
The method of any of examples 8, 3 to 7, wherein the machine learning model is further trained by next message prediction.
The method of any of examples 9, 3 to 8, wherein the machine learning model is further trained using training data comprising pairs of a first document and a second document linked or appended to the first document.
The method of example 10, any of examples 3 to 9, wherein the machine learning model comprises a classifier configured to provide one or more likelihood scores identifying a likelihood that one or more words of the sequence will become anchors of the hyperlink to the second document, and wherein the machine learning model is configured to combine the likelihood scores with one or more frequent link anchor patterns to determine a most likely anchor of the anchors of the hyperlink.
The method of example 11, any of examples 3 to 9, wherein the machine learning model comprises a sequence-to-sequence model, the classifier is configured to predict one or more likelihood scores to identify a likelihood that one or more words of the sequence will become anchors of the hyperlink to the second document, and wherein the machine learning model is configured to combine the likelihood scores with one or more frequent link anchor patterns to determine a most likely anchor of the anchors for the hyperlink.
Example 12, the method of any of examples 1 to 11, wherein the machine learning model comprises a machine-trained classifier that classifies the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of one or more words and a context associated with the first document.
The method of example 13, any of examples 1 to 12, wherein the context associated with the first document includes one or more of: a text context associated with the sequence of one or more words, an author of the first document, a recipient of the first document, a title of the first document, content of the first document, an activity associated with the first document, a time of last editing of the first document, or a previous message in a message thread containing the first document.
Example 14, a computing system, comprising: a memory configured to store a machine learning model; and one or more processors configured to: determining, using a machine learning model, whether to classify the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of one or more words within the first document being edited and a context related to the first document, determining, using the machine learning model, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words in response to classifying the sequence of one or more words as candidate hyperlinks, and based at least in part on the sequence of one or more words and the context; and in response to receiving an indication to select a second document from the one or more candidate documents, modifying the first document to associate the sequence of one or more words with a hyperlink to the second document.
The computing system of example 15, example 14, wherein the one or more processors are further configured to: generating, using a machine learning model, a query vector associated with the sequence of one or more words based at least in part on the sequence of one or more words and a context associated with the first document; generating a plurality of document vectors associated with a plurality of documents using a machine learning model; determining, using a machine learning model, a plurality of dot product scores associated with a plurality of documents by using a dot product of a query vector and each document vector of a plurality of document vectors; one or more candidate documents to be hyperlinked from the sequence of one or more words are determined from the plurality of documents based at least in part on one or more dot-product scores associated with the one or more candidate documents using a machine learning model.
The computing system of example 16, example 15, wherein the query vector and the plurality of document vectors are each multi-dimensional real-valued embedded vectors.
The computing system of any of examples 17, 15, and 16, wherein the machine learning model is trained using machine learning such that a dot product score of the query vector and a document vector associated with the document represents a likelihood that a sequence of one or more words associated with the query vector links to a second document associated with the document vector.
The computing system of example 18, any of examples 15 to 17, wherein the machine learning model includes a classifier configured to provide one or more likelihood scores that identify a likelihood that one or more words of the sequence will become anchors of the hyperlink to the second document, and wherein the machine learning model is configured to combine the likelihood scores with one or more frequent link anchor patterns to determine a most likely anchor of the anchors of the hyperlink.
The computing system of example 19, any of examples 15 to 17, wherein the machine learning model comprises a sequence-to-sequence model, the classifier configured to predict one or more likelihood scores to identify a likelihood that one or more words of the sequence will become anchors of a hyperlink to the second document, and wherein the machine learning model is configured to combine the likelihood scores with one or more frequent link anchor patterns to determine a most likely anchor for an anchor of the hyperlink.
The computing system of example 20, any of examples 12 to 19, wherein the machine learning model includes a machine-trained classifier that classifies the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of one or more words and a context associated with the first document.
Example 21, a computer-readable storage medium comprising instructions that, when executed by at least one processor, cause the at least one processor to: the method includes determining, using a machine learning model, whether to classify a sequence of one or more words as a candidate hyperlink based at least in part on the sequence of the one or more words within a first document being edited and a context related to the first document, determining, using the machine learning model, one or more candidate documents from the plurality of documents to hyperlink from the sequence of one or more words in response to classifying the sequence of one or more words as a candidate hyperlink and based at least in part on the sequence of one or more words and the context, and modifying the first document to associate the sequence of one or more words with the hyperlink to the second document in response to receiving an indication to select the second document from the one or more candidate documents.
Example 22, the computer-readable storage medium of example 21, wherein the instructions, when executed by the at least one processor, further cause the at least one processor to: generating, using a machine learning model, a query vector associated with the sequence of one or more words based at least in part on the sequence of one or more words and the context; generating, using a machine learning model, a plurality of document vectors associated with a plurality of documents based at least in part on the plurality of document vectors; determining, using a machine learning model, a plurality of dot product scores associated with a plurality of documents by performing a dot product of a query vector and each document vector of a plurality of document vectors; one or more candidate documents to be hyperlinked from the sequence of one or more words are determined from the plurality of documents based at least in part on one or more dot-product scores associated with the one or more candidate documents using a machine learning model.
Example 23, the computer-readable storage medium of example 22, wherein the query vector and the plurality of document vectors are multidimensional real-valued embedded vectors, respectively.
Example 24, the computer-readable storage medium of any of examples 22 and 23, wherein the machine learning model is trained using machine learning such that a dot product score of the query vector and a document vector associated with the second document represents a likelihood that a sequence of one or more words associated with the query vector links to the second document associated with the document vector.
Example 25, the computer-readable storage medium of any of examples 21-24, wherein the machine learning model includes a machine-trained classifier that classifies the sequence of one or more words as candidate hyperlinks based at least in part on the sequence of one or more words and a context associated with the first document.
Example 25, a computing system, comprising: at least one processor configured to perform the method of any of examples 1-13.
Example 26, an apparatus comprising means for performing the method of any of examples 1-13.
In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium and may be executed by a hardware-based processing unit. Computer-readable media may include computer-readable storage media, which corresponds to tangible media such as data storage media, or communication media, including any medium that facilitates transfer of a computer program from one place to another (e.g., according to a communication protocol). In this manner, the computer-readable medium may generally correspond to (1) a non-transitory tangible computer-readable storage medium or (2) a communication medium such as a signal or carrier wave. A data storage medium may be any available medium that can be accessed by one or more computers or one or more processors to retrieve instructions, code and/or data structures to implement the techniques described in this disclosure. The computer program product may include a computer-readable storage medium.
By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if the instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, Digital Subscriber Line (DSL), or wireless technologies such as infrared, radio, and microwave, then the definition of medium includes coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave. However, it should be understood that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transitory media, but are instead directed to non-transitory, tangible storage media. Disk and disc, as used herein, includes Compact Disc (CD), laser disc, optical disc, Digital Versatile Disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data laser-optically. Combinations of the above should also be included within the scope of computer-readable media.
The instructions may be executed by one or more processors, such as one or more Digital Signal Processors (DSPs), general purpose microprocessors, an Application Specific Integrated Circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Thus, as used herein, the term "processor" may refer to any of the foregoing structure or any other structure suitable for implementing the techniques described herein. In addition, in some aspects, the functions described herein may be provided within dedicated hardware and/or software modules. Also, the techniques may be fully implemented in one or more circuits or logic elements.
The techniques of this disclosure may be implemented in a variety of devices or apparatuses including a wireless handset, an Integrated Circuit (IC), or a set of ICs (e.g., a chipset). Various components, modules, or units are described in this disclosure to emphasize functional aspects of apparatuses configured to perform the disclosed techniques, but do not necessarily need to be implemented by different hardware units. Rather, as noted above, the various units may be combined in one hardware unit, or provided by a collection of interoperative hardware units, including one or more processors as noted above, in combination with suitable software and/or firmware.
Various examples have been described. These and other examples are within the scope of the following claims.
Claims (15)
1. A method, comprising:
determining, by at least one processor, using a machine learning model, whether to classify a word within an electronic message being edited as a candidate hyperlink based at least in part on the word and a text context associated with the word;
in response to classifying the word as the candidate hyperlink, determining, by the at least one processor, using the machine learning model and based at least in part on the word and the text context associated with the word, one or more candidate documents from a plurality of documents to hyperlink from the word;
modifying, by the at least one processor, the electronic message to associate the word with a hyperlink to the document in response to receiving an indication to select a document from the one or more candidate documents; and
sending, by the at least one processor, the electronic message including the hyperlink to the document to a recipient.
2. The method of claim 1, wherein determining the one or more candidate documents from the plurality of documents to hyperlink from the word further comprises:
generating, by the at least one processor and using the machine learning model, a query vector associated with the word based at least in part on the word and the text context;
generating, by the at least one processor and using the machine learning model, a plurality of document vectors associated with the plurality of documents based at least in part on the plurality of document vectors;
determining, by the at least one processor and using the machine learning model, a plurality of dot product scores associated with the plurality of documents by performing a dot product of the query vector and each document vector of the plurality of document vectors; and
determining, by the at least one processor and using the machine learning model, the one or more candidate documents from the plurality of documents to hyperlink from the word based at least in part on one or more dot product scores associated with the one or more candidate documents.
3. The method of claim 2, wherein the query vector and the plurality of document vectors are each embedded vectors.
4. The method of any of claims 2 and 3, wherein the machine learning model is trained using machine learning such that the dot product score of a dot product of the query vector and a document vector associated with the document corresponds to a likelihood of the document being hyperlinked from the word associated with the query vector.
5. The method of claim 4, wherein the one or more dot-product scores associated with the one or more candidate documents are each higher than remaining dot-product scores associated with remaining documents of the plurality of documents.
6. The method according to any one of claims 4 and 5, further comprising:
generating, by at least one processor, the document vector associated with the document based at least in part on one or more of: a subject of the document, a title of the document, a type of the document, a time of last opening of the document, a frequency of opening the document, a frequency of editing the document, or a frequency of sharing the document.
7. The method of any of claims 1-6, wherein the machine learning model comprises a machine trained classifier that classifies the word as the candidate hyperlink based at least in part on the word within the electronic message and a text context associated with the word.
8. A system, comprising:
a memory configured to store a machine learning model; and
one or more processors configured to:
determining, using the machine learning model, whether to classify a word in an electronic message being edited as a candidate hyperlink based at least in part on the word and a text context associated with the word;
in response to classifying the word as the candidate hyperlink, determining, using the machine learning model and based at least in part on the word and the text context associated with the word, one or more candidate documents from a plurality of documents to hyperlink from the word;
in response to receiving an indication to select a document from the one or more candidate documents, modifying the electronic message to associate the word with a hyperlink to the document; and
sending the electronic message including the hyperlink linked to the document to a recipient.
9. The computing system of claim 8, wherein the one or more processors are further configured to:
generating, using the machine learning model, a query vector associated with the word based at least in part on the word and the text context;
generating, using the machine learning model, a plurality of document vectors associated with the plurality of documents based at least in part on a plurality of document vectors;
determining, using the machine learning model, a plurality of dot product scores associated with the plurality of documents by performing a dot product of the query vector and each document vector of the plurality of document vectors; and
determining, using the machine learning model, the one or more candidate documents from the plurality of documents to hyperlink from the word based at least in part on one or more dot-product scores associated with the one or more candidate documents.
10. The computing system of claim 9, wherein the query vector and the plurality of document vectors are each embedded vectors.
11. The computing system of any of claims 9 and 10, wherein the machine learning model is trained using machine learning such that the dot product score for a dot product of the query vector and a document vector associated with the document corresponds to a likelihood that the document is hyperlinked from the word associated with the query vector.
12. The system of claim 11, wherein the one or more dot-product scores associated with the one or more candidate documents are each higher than remaining dot-product scores associated with remaining documents of the plurality of documents.
13. The computing system of any of claims 11 and 12, wherein the one or more processors are further configured to:
generating, using a machine learning model, the document vector associated with the document based at least in part on one or more of: a subject of the document, a title of the document, a type of the document, a time of last opening of the document, a frequency of opening the document, a frequency of editing the document, or a frequency of sharing the document.
14. The computing system of any of claims 8 to 13, wherein the machine learning model comprises a machine trained classifier that classifies the word as the candidate hyperlink based at least in part on the word within the electronic message and a text context associated with the word.
15. A computer-readable storage medium comprising instructions that, when executed by at least one processor, cause the at least one processor to perform the method of any combination of claims 1-7.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862752621P | 2018-10-30 | 2018-10-30 | |
US62/752,621 | 2018-10-30 | ||
PCT/US2019/022327 WO2020091829A1 (en) | 2018-10-30 | 2019-03-14 | Automatic hyperlinking of documents |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112955893A true CN112955893A (en) | 2021-06-11 |
Family
ID=65952161
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980071944.9A Pending CN112955893A (en) | 2018-10-30 | 2019-03-14 | Automatic hyperlink of document |
Country Status (4)
Country | Link |
---|---|
US (1) | US11238211B2 (en) |
EP (1) | EP3857431A1 (en) |
CN (1) | CN112955893A (en) |
WO (1) | WO2020091829A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116541705A (en) * | 2023-05-06 | 2023-08-04 | 石家庄铁道大学 | Training method of text classification model and text classification method |
Families Citing this family (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10021051B2 (en) * | 2016-01-01 | 2018-07-10 | Google Llc | Methods and apparatus for determining non-textual reply content for inclusion in a reply to an electronic communication |
US11948159B2 (en) * | 2019-04-08 | 2024-04-02 | Google Llc | Scalable matrix factorization in a database |
WO2020220369A1 (en) | 2019-05-01 | 2020-11-05 | Microsoft Technology Licensing, Llc | Method and system of utilizing unsupervised learning to improve text to content suggestions |
WO2020220370A1 (en) * | 2019-05-01 | 2020-11-05 | Microsoft Technology Licensing, Llc | Method and system of utilizing unsupervised learning to improve text to content suggestions |
US11222286B2 (en) * | 2019-06-14 | 2022-01-11 | The Toronto-Dominion Bank | Target document template generation |
US11544333B2 (en) * | 2019-08-26 | 2023-01-03 | Adobe Inc. | Analytics system onboarding of web content |
US11604966B1 (en) * | 2019-09-19 | 2023-03-14 | Cognizant Technology Solutions U.S. Corporation | Generative adversarial network optimization |
US11495210B2 (en) * | 2019-10-18 | 2022-11-08 | Microsoft Technology Licensing, Llc | Acoustic based speech analysis using deep learning models |
US11379671B2 (en) * | 2019-11-18 | 2022-07-05 | Salesforce, Inc. | Identification of response list |
US11921697B2 (en) * | 2019-11-22 | 2024-03-05 | Fraud.net, Inc. | Methods and systems for detecting spurious data patterns |
JP7456137B2 (en) * | 2019-12-05 | 2024-03-27 | 富士フイルムビジネスイノベーション株式会社 | Information processing device and program |
US20210224264A1 (en) * | 2020-01-17 | 2021-07-22 | nference, inc. | Systems and methods for mapping a term to a vector representation in a semantic space |
US11567981B2 (en) * | 2020-04-15 | 2023-01-31 | Adobe Inc. | Model-based semantic text searching |
US11734374B2 (en) * | 2021-01-31 | 2023-08-22 | Walmart Apollo, Llc | Systems and methods for inserting links |
CN113255780B (en) * | 2021-05-28 | 2024-05-03 | 润联智能科技股份有限公司 | Reduction gearbox fault prediction method and device, computer equipment and storage medium |
US11443114B1 (en) * | 2021-06-21 | 2022-09-13 | Microsoft Technology Licensing, Llc | Computing system for entity disambiguation and not-in-list entity detection in a knowledge graph |
CN114925660B (en) * | 2022-05-23 | 2023-07-28 | 马上消费金融股份有限公司 | Text processing model training method and device, text processing method and device |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101031915A (en) * | 2004-06-30 | 2007-09-05 | Google公司 | Enhanced document browsing with automatically generated links based on user information and context |
CN101388021A (en) * | 2008-05-30 | 2009-03-18 | 索意互动（北京）信息技术有限公司 | Method and system for adding extra message based on correlation degree of content and key words |
EP2246793A1 (en) * | 2009-04-29 | 2010-11-03 | Research In Motion Limited | System and method for linking an address |
CN102193964A (en) * | 2010-02-24 | 2011-09-21 | 微软公司 | Explicit and non-explicit links in document |
CN102612689A (en) * | 2009-10-28 | 2012-07-25 | 雅虎公司 | Mechanism for adding content from a search to a document or message |
CN102682389A (en) * | 2007-10-15 | 2012-09-19 | 谷歌公司 | Method and system for providing information from external sources to web-based documents |
US20130158981A1 (en) * | 2011-12-20 | 2013-06-20 | Yahoo! Inc. | Linking newsworthy events to published content |
US20140026048A1 (en) * | 2012-07-16 | 2014-01-23 | Questionmine, LLC | Apparatus, method, and computer program product for synchronizing interactive content with multimedia |
CN105637507A (en) * | 2013-10-07 | 2016-06-01 | 微软技术许可有限责任公司 | Smart selection of text spans |
US20170102845A1 (en) * | 2015-10-07 | 2017-04-13 | Google Inc. | Integration of content in non-browser applications |
US20180159804A1 (en) * | 2015-05-29 | 2018-06-07 | Microsoft Technology Licensing, Llc | Systems and methods for providing a comment-centered news reader |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7117432B1 (en) * | 2001-08-13 | 2006-10-03 | Xerox Corporation | Meta-document management system with transit triggered enrichment |
US8341095B2 (en) * | 2009-01-12 | 2012-12-25 | Nec Laboratories America, Inc. | Supervised semantic indexing and its extensions |
US20100251086A1 (en) | 2009-03-27 | 2010-09-30 | Serge Rene Haumont | Method and apparatus for providing hyperlinking in text editing |
US8775467B2 (en) * | 2009-04-29 | 2014-07-08 | Blackberry Limited | System and method for linking an address |
KR101038087B1 (en) | 2009-11-30 | 2011-06-01 | 전남대학교산학협력단 | Method for providing hypertext in mobile phohe |
US8315849B1 (en) | 2010-04-09 | 2012-11-20 | Wal-Mart Stores, Inc. | Selecting terms in a document |
US8255786B1 (en) * | 2010-04-09 | 2012-08-28 | Wal-Mart Stores, Inc. | Including hyperlinks in a document |
US9141715B2 (en) * | 2012-01-03 | 2015-09-22 | International Business Machines Corporation | Automated hyperlinking in electronic communication |
US20170185596A1 (en) * | 2012-07-16 | 2017-06-29 | Gary Spirer | Trigger-based content presentation |
US10701014B2 (en) * | 2013-03-15 | 2020-06-30 | Companyons, Inc. | Contextual messaging systems and methods |
US10169453B2 (en) * | 2016-03-28 | 2019-01-01 | Microsoft Technology Licensing, Llc | Automatic document summarization using search engine intelligence |
US10255269B2 (en) * | 2016-12-30 | 2019-04-09 | Microsoft Technology Licensing, Llc | Graph long short term memory for syntactic relationship discovery |
US11210508B2 (en) * | 2020-01-07 | 2021-12-28 | International Business Machines Corporation | Aligning unlabeled images to surrounding text |
-
2019
- 2019-03-14 US US16/978,658 patent/US11238211B2/en active Active
- 2019-03-14 CN CN201980071944.9A patent/CN112955893A/en active Pending
- 2019-03-14 WO PCT/US2019/022327 patent/WO2020091829A1/en unknown
- 2019-03-14 EP EP19714011.4A patent/EP3857431A1/en active Pending
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101031915A (en) * | 2004-06-30 | 2007-09-05 | Google公司 | Enhanced document browsing with automatically generated links based on user information and context |
CN102682389A (en) * | 2007-10-15 | 2012-09-19 | 谷歌公司 | Method and system for providing information from external sources to web-based documents |
CN101388021A (en) * | 2008-05-30 | 2009-03-18 | 索意互动（北京）信息技术有限公司 | Method and system for adding extra message based on correlation degree of content and key words |
EP2246793A1 (en) * | 2009-04-29 | 2010-11-03 | Research In Motion Limited | System and method for linking an address |
CN102612689A (en) * | 2009-10-28 | 2012-07-25 | 雅虎公司 | Mechanism for adding content from a search to a document or message |
CN102193964A (en) * | 2010-02-24 | 2011-09-21 | 微软公司 | Explicit and non-explicit links in document |
US20130158981A1 (en) * | 2011-12-20 | 2013-06-20 | Yahoo! Inc. | Linking newsworthy events to published content |
US20140026048A1 (en) * | 2012-07-16 | 2014-01-23 | Questionmine, LLC | Apparatus, method, and computer program product for synchronizing interactive content with multimedia |
CN105637507A (en) * | 2013-10-07 | 2016-06-01 | 微软技术许可有限责任公司 | Smart selection of text spans |
US20180159804A1 (en) * | 2015-05-29 | 2018-06-07 | Microsoft Technology Licensing, Llc | Systems and methods for providing a comment-centered news reader |
US20170102845A1 (en) * | 2015-10-07 | 2017-04-13 | Google Inc. | Integration of content in non-browser applications |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116541705A (en) * | 2023-05-06 | 2023-08-04 | 石家庄铁道大学 | Training method of text classification model and text classification method |
Also Published As
Publication number | Publication date |
---|---|
US20200410157A1 (en) | 2020-12-31 |
EP3857431A1 (en) | 2021-08-04 |
WO2020091829A1 (en) | 2020-05-07 |
US11238211B2 (en) | 2022-02-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11238211B2 (en) | Automatic hyperlinking of documents | |
Rehman et al. | A hybrid CNN-LSTM model for improving accuracy of movie reviews sentiment analysis | |
Thangaraj et al. | Text classification techniques: A literature review | |
AU2016256753B2 (en) | Image captioning using weak supervision and semantic natural language vector space | |
GB2547068B (en) | Semantic natural language vector space | |
US9792534B2 (en) | Semantic natural language vector space | |
US20210004682A1 (en) | Adapting a sequence model for use in predicting future device interactions with a computing system | |
US20210174020A1 (en) | Recipient based text prediction for electronic messaging | |
US10937417B2 (en) | Systems and methods for automatically categorizing unstructured data and improving a machine learning-based dialogue system | |
US20220300735A1 (en) | Document distinguishing based on page sequence learning | |
US11183175B2 (en) | Systems and methods implementing data query language and utterance corpus implements for handling slot-filling and dialogue intent classification data in a machine learning task-oriented dialogue system | |
Qin et al. | Machine learning basics | |
Trisal et al. | K-RCC: A novel approach to reduce the computational complexity of KNN algorithm for detecting human behavior on social networks | |
Youpeng et al. | Amvae: Asymmetric multimodal variational autoencoder for multi-view representation | |
CA3066337A1 (en) | Method of and server for training a machine learning algorithm for estimating uncertainty of a sequence of models | |
US11442963B1 (en) | Method of and system for ranking subgraphs as potential explanations for graph classification | |
US11983228B1 (en) | Apparatus and a method for the generation of electronic media | |
Venkatesh | Accelerating Information Retrieval using Natural Language Processing | |
US20230036737A1 (en) | Determining available memory on a mobile platform | |
Jai Arul Jose et al. | Aspect based hotel recommendation system using dilated multichannel CNN and BiGRU with hyperbolic linear unit | |
Feuz et al. | Ranking and automatic selection of machine learning models Abstract | |
Cărbune et al. | Incremental sharing using machine learning | |
WO2023224672A1 (en) | Deep learning system for navigating feedback | |
Price et al. | Machine Learning to Select Input Language on a Software Keyboard | |
WO2021137100A1 (en) | Method of and server for training a machine learning algorithm for estimating uncertainty of a sequence of models |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |