US7394769B2 - Method, system and article for rapid detection and avoidance of high data corrupting routes within a network - Google Patents
Method, system and article for rapid detection and avoidance of high data corrupting routes within a network Download PDFInfo
- Publication number
- US7394769B2 US7394769B2 US10/640,819 US64081903A US7394769B2 US 7394769 B2 US7394769 B2 US 7394769B2 US 64081903 A US64081903 A US 64081903A US 7394769 B2 US7394769 B2 US 7394769B2
- Authority
- US
- United States
- Prior art keywords
- data
- network
- router
- packet
- data packet
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/004—Arrangements for detecting or preventing errors in the information received by using forward error control
- H04L1/0056—Systems characterized by the type of code used
- H04L1/0061—Error detection codes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/004—Arrangements for detecting or preventing errors in the information received by using forward error control
- H04L1/0072—Error control for data other than payload data, e.g. control data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/08—Arrangements for detecting or preventing errors in the information received by repeating transmission, e.g. Verdan system
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/12—Arrangements for detecting or preventing errors in the information received by using return channel
- H04L1/16—Arrangements for detecting or preventing errors in the information received by using return channel in which the return channel carries supervisory signals, e.g. repetition request signals
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/22—Alternate routing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/28—Routing or path finding of packets in data switching networks using route fault recovery
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/16—Implementation or adaptation of Internet protocol [IP], of transmission control protocol [TCP] or of user datagram protocol [UDP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/16—Implementation or adaptation of Internet protocol [IP], of transmission control protocol [TCP] or of user datagram protocol [UDP]
- H04L69/161—Implementation details of TCP/IP or UDP/IP stack architecture; Specification of modified or new header fields
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/16—Implementation or adaptation of Internet protocol [IP], of transmission control protocol [TCP] or of user datagram protocol [UDP]
- H04L69/163—In-band adaptation of TCP data exchange; In-band control procedures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/22—Parsing or analysis of headers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L1/00—Arrangements for detecting or preventing errors in the information received
- H04L1/12—Arrangements for detecting or preventing errors in the information received by using return channel
- H04L1/16—Arrangements for detecting or preventing errors in the information received by using return channel in which the return channel carries supervisory signals, e.g. repetition request signals
- H04L1/18—Automatic repetition systems, e.g. Van Duuren systems
- H04L1/1809—Selective-repeat protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/40—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass for recovering from a failure of a protocol instance or entity, e.g. service redundancy protocols, protocol state redundancy or protocol service redirection
Definitions
- the present invention is related in general to data transfers in data processing system networks and in particular to transfer of data blocks over the Internet or similar networks. Still more particularly, the present invention relates to quickly detecting routes within the Internet causing high data corruption and efficiently re-routing data around such high data corrupting routes.
- Networks provide for transmission of information from a source to a destination over a particular route.
- the information is transmitted along the route through routers.
- each router has knowledge of various routes available in the network and this knowledge is stored in a route database or route table.
- the information is transmitted throughout the network in accordance with a particular protocol and routers in the network may support any of a number of protocols.
- the router may store multiple routes, which are available using multiple protocols.
- the Internet has become a particularly important network for transmission and distribution of data (text, code, image, video, audio, or mixed) and software. Users connect to the backbone of the Internet with broadly divergent levels of performance, ranging from 14.4 Kb/s to more than 45 Mb/s.
- Transmission Control Protocol/Internet Protocol (TCP/IP) has become a widely implemented standard communication protocol in Internet and Intranet technology, enabling broad heterogeneity between clients, servers, and the communications systems coupling them.
- IP Internet Protocol
- TCP Transmission Control Protocol
- IP provides a “datagram” delivery service.
- TCP builds a transport level service over the datagram service to provide guaranteed, sequential delivery of a byte stream between two IP hosts.
- each router along the route will perform a checksum on the header of each data packet received to detect data corruption of the packet, some data corruption caused along the route may only be detectable by performing a checksum on the entire payload of the received packet. Therefore, routers within the network are not aware that they are forwarding corrupted packets to the destination. This data corruption is only detected upon the packet's arrival at the receiving host, which performs a checksum on the entire payload. The receiving host will then send an acknowledgment to the sending host requesting retransmission of the corrupted data packets.
- sender host and receiver host hosts have no way of knowing which route caused the data corruption, they are unable to avoid that route in the retransmission of the data packets. Further, the sender host and receiver host hosts have no way of informing the routers within the network of the data corruption so that the routers can correct or avoid the corrupting route. Consequently, it can be seen that there is a need for a communications routing protocol and system that provides the rapid detection of bad links within the network so that the routers can route data packets around data corrupting links.
- One preferred method of the present invention comprises the steps of: receiving a data packet over a data link at a router within an IP network, wherein the data packet is sourced by a sender and destined for a receiver and contains an indication to perform a checksum on the entire data packet; performing a checksum on the entire data packet, in response to receiving the data packet containing the indication to perform the checksum on the entire data packet; modifying a value indicating the number of data packets received over the data link that failed the checksum, in response to a failure of the checksum of the entire data packet; and performing a routing update to avoid transmission of data packets over the data link, if the value exceeds a corruption threshold for the router.
- FIG. 1 a data processing system network in which a preferred embodiment of the present invention may be implemented is depicted.
- FIG. 2 is a depiction of a typical software architecture for a server-client system, as may be utilized in a preferred embodiment of the present invention.
- FIG. 3 shows an example of a 4-layer communications architecture utilizing TCP/IP.
- FIG. 4 shows an example of an internet comprising an Ethernet network connected to a token ring network by a router.
- FIG. 5 shows the format of data as it traverses the TCP/IP protocol stack.
- FIG. 6A shows the format for a TCP header
- FIG. 6B shows the format for an IP header, in accordance with a preferred embodiment.
- FIG. 6C the data structure of a TCP acknowledge frame, in accordance with a preferred embodiment of the present invention.
- FIG. 7 shows a representation of a network such as the Internet.
- FIG. 8 shows the hardware of a router used to accept and forward an IP datagram.
- FIG. 9A shows a routing table and a forwarding table, in accordance with a preferred embodiment.
- FIG. 9B shows registers in router memory, in accordance with a preferred embodiment.
- FIG. 10 shows a flow diagram of a process performed in client-server systems for indicating data corruption within a network, in accordance with a preferred embodiment of the present invention.
- FIG. 11 shows a flow diagram of a process performed in client-server systems for indicating data corruption within a network, in accordance with a preferred embodiment of the present invention.
- FIG. 12 shows a flow diagram of a process performed in network routers for providing rapid detection and avoidance of data routes within the network causing high data corruption, in accordance with a preferred embodiment of the present invention.
- Data processing system network 102 includes at least one server system 104 coupled to at least one client system 106 via at least one network such as the Internet 108 .
- Data transfers between the server system 104 and client system 106 conform to the TCP/IP specification, as well as File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), or some similar communications protocol.
- FTP File Transfer Protocol
- HTTP HyperText Transfer Protocol
- data processing system network 102 may include any number of server and client systems (not shown) interconnected by one or more connections and networks, including Internet 108 .
- TCP/IP Transmission Control Protocol/Internet Protocol
- the TCP/IP protocol suite allows a variety of different types of computers, running different operating systems, to communicate with each other. TCP/IP forms the basis for the worldwide Internet, a wide area network of more than one million computers that literally spans the globe.
- IPX/SPX Internet Packet Exchange/Sequenced Packet Exchange
- NetBios NetBios
- IPX/SPX Internet Packet Exchange/Sequenced Packet Exchange
- NetBios NetBios
- IPX/SPX Internet Packet Exchange/Sequenced Packet Exchange
- NetBios NetBios
- IPX/SPX Internet Packet Exchange/Sequenced Packet Exchange
- NetBios Internet Packet Exchange/Sequenced Packet Exchange
- IP protocol is RFC 791.
- the RFC papers are readily available on the Internet or at a various libraries.
- each of these network protocol suites are similar in structure, comprising a set of layers, with each layer responsible for a different facet of the communication task.
- the discussion below will primarily pertain to the use of the invention when using the TCP/IP protocol.
- the principles of the invention are described in reference to the TCP/IP protocol, the invention can also be applied to various other network protocols as well.
- TCP flow control mechanisms operate exclusively at the end stations to limit the rate at which TCP endpoints emit data. However, TCP lacks explicit data rate control.
- the basic flow control mechanism is a “sliding window”, superimposed on a range of bytes beyond the last explicitly acknowledged byte. The sliding window limits the maximum number of sequential bytes between the byte most recently sent from the server to the earliest byte for which a receipt acknowledgment has not yet been received from the client. This sliding operation limits the amount of unacknowledged transmissible data that a TCP endpoint can emit.
- FIG. 2 is a depiction of a typical software architecture for a server-client system, as may be utilized in a preferred embodiment of the present invention.
- Server 104 and client 106 are each architected with software architecture 200 .
- an operating system 205 is utilized to provide high-level functionality to the user and to other software.
- Such an operating system typically includes a BIOS (Basic Input Output System).
- Communication software 210 provides communications through an external port to a network such as the Internet via a physical communication link by either directly invoking operating system functionality or indirectly, bypassing the operating system to access the hardware for communications over the network.
- the application programming interface 215 allows the user of the system, be it an individual or a software routine, to invoke system capabilities using a standard consistent interface without concern for how the particular functionality is implemented.
- the Internet software 220 represents any one of several standard commercial packages available for equipping a computer with Internet functionality.
- the application software 225 represents any number of software applications designed to react to data through the communications port to provide the desired functionality the user seeks. Applications at this level may include those necessary to handle data, video, graphics, photos or text, which can be accessed by users of the Internet.
- TCP/IP and similar protocols are utilized by a 4-layer communications architecture 300 for the network comprising an application layer 310 , a transport layer 312 a network layer 314 , and a link layer 316 .
- Each layer is responsible for handling various communications tasks, as follows.
- the link layer 316 (also referred to as the data-link layer or the network interface layer) normally includes the device driver in the operating system and the corresponding network interface card in the computer. Together they handle all the hardware details of physically interfacing with the network media being used, e.g. Ethernet cable, etc.
- the network layer 314 (also referred to as the internet layer) handles the movement of packets of data around the network. For example, the network layer handles the routing of the various packets of data that are transferred over the network.
- the network layer in the TCP/IP suite is comprised of several protocols, including IP (Internet Protocol), ICMP (Internet Control Message Protocol), and IGMP (Internet Group Management Protocol).
- the transport layer 312 provides an interface between the network layer 314 and the application layer 310 that facilitates the transfer of data between two host computers.
- the transport layer is concerned with things such as dividing the data passed to it from the application into appropriately sized chunks for the network layer below, acknowledging received packets, setting timeouts to make certain the other end acknowledges packets that are sent, etc.
- TCP Transmission Control Protocol
- UDP User Datagram Protocol
- TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services.
- UDP provides a much simpler service to the application layer by merely sends packets of data called datagrams from one host to the other, without providing any mechanism for guaranteeing that the data is properly transferred.
- the application layer must perform the reliability functionality.
- the application layer 310 handles the details of the particular application. There are many common TCP/IP applications that almost every implementation provides, including (1) Telnet for remote login; (2) FTP, the File Transfer Protocol; (3) SMTP, the Simple Mail Transfer protocol, for electronic mail, and (4) SNMP, the Simple Network Management Protocol.
- FIG. 4 shows an internet 400 comprising an Ethernet network 432 connected to a token ring network 434 by a router 436 .
- FIG. 4 only shows two hosts in communication, any host on the Ethernet network can communicate with any host thereon, or with any host on the token ring network, and vice versa.
- the router 436 comprises a network layer module 438 (an IP module in this case), and appropriate network drivers for connecting to the host networks, namely an Ethernet driver 440 and a token ring driver 442 .
- the network comprises an FTP client 420 and an FTP server 422 .
- Most network applications are designed so that one end is the client and the other side is the server.
- the server provides some type of services to various clients, in this case, access to files on the server host.
- Each layer has one or more protocols for communicating with its peer at the same layer.
- These communication protocols include the FTP protocol 444 at the application layer, the TCP protocol 446 at the transport layer, the IP protocol 448 at the network layer, and the Ethernet protocol 450 and token ring protocol 454 at the link layer.
- the application layer It is common for the application layer to handle user processes, while the lower three layers (transport, network and link) are implemented in the kernel of the operating system, such as UNIX or Windows operating system.
- the purpose of the network interface layer is to handle the details of the communication media (Ethernet, token ring, etc.), while the purpose of the application layer is to handle one specific user application (FTP, Telnet, etc.).
- the application layer and the transport layer use end-to-end protocols (FTP protocol 444 , TCP protocol 446 ).
- the network layer provides a hop-to-hop protocol that is used on the two end systems and every intermediate system in between (for clarity only one intermediate system is shown here).
- the IP module 438 of the router 436 is connected to the two hosts by IP protocols 448 .
- an Ethernet protocol 450 is used to handle communications between the Ethernet driver 440 in the router 436 and the Ethernet driver 452 of the hosts on the Ethernet network 432
- a token ring protocol 454 is used to handle communications between the token ring driver 442 of the router 436 and the token ring driver 456 of the hosts on the token ring network 434 .
- IP In the TCP/IP protocol suite the network layer, IP, provides an unreliable service. It moves a packet of data from a source to a destination, but it provides no mechanism for guaranteeing delivery, or even being able to determine if a proper transfer has occurred. TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services.
- a router has two or more network interface layers (since it connects two or more networks). Any system with multiple interfaces is called multi-homed. A host can also be multi-homed, but unless it specifically forwards packets from one interface to another, it is not called a router. Also, routers need not be special hardware boxes that only move packets around an internet. Most TCP/IP implementations allow a multi-homed host to act as a router, but the host needs to be specifically configured to support this use. In such instances, the system is either a host (when an application such as FTP or Telnet is being used) or a router (when it's forwarding packets from one network to another). Another way to connect networks is with a bridge. Bridges connect networks at the link layer, while routers connect networks at the network layer. Bridges make multiple LANs appear to the upper layers as a single LAN.
- each layer adds information to the data by prepending headers (and sometimes adding trailer information) to the data that it receives. For instance, at the application layer an application header 580 is prepended to user data 582 to form application data 584 . At the transport layer a transport protocol header is prepended to the application data. In the case of FIG. 5 the transport layer is TCP, and therefore a TCP header 586 is prepended to the application data 584 , thereby forming a TCP packet 588 that is sent to the network layer IP.
- the TCP header 586 comprises twenty bytes.
- a network layer header is prepended to the transport layer data.
- an IP header 590 is prepended to the TCP packet 588 to form an IP datagram 592 .
- the IP header 590 also comprises twenty bytes.
- a media header such as Ethernet header 594 is added to the data received from the network layer to form a packet of data.
- a media trailer is also appended to the end of the data.
- an Ethernet trailer 96 is appended to the Ethernet Header 594 and the IP datagram 592 to form an Ethernet packet 598 .
- the Ethernet packet comprises the stream of bits that flow across the network that correspond to the original application message data.
- the numbers (14, 20, 20, 4) at the bottom of the headers are typical sizes of the headers in bytes, e.g., the Ethernet header 94 comprises 14 bytes, etc.
- the size of the packet will be limited by the maximum transmission unit (MTU) of the type of network being used to transfer the data packet.
- MTU maximum transmission unit
- the MTU of an Ethernet network is 1500 bytes.
- the network layer automatically performs fragmentation (breaking the datagram up into smaller pieces), so that each fragment is smaller than the MTU of the network.
- a TCP packet 600 is constructed from 32-bit words and includes a 20 byte (5-word) header.
- the basic layout of the TCP header 605 includes:
- source port number The source (and destination) port numbers are used for demultiplexing the data stream to applications. It is entirely possible for there to be multiple simultaneous TCP data streams between two hosts. A TCP data stream is uniquely identified by a group of four numbers. These are the two hosts addresses and the two port numbers. The source port number is the one to be used as destination in any reply to the packet.
- destination port number This is the “target” port number on the remote system.
- sequence number This 32 bit number identifies the first byte of the data in the packet.
- acknowledgeledgment number This 32 bit number is the byte number of the next byte that the sender host expects to receive from the remote host. The remote host can infer that all bytes up to this number minus one have been safely received and the remote host's local copies can be discarded.
- header length This 4-bit field specifies the header length in 32 bit words. Clearly the maximum value is 15 words (60 bytes) allowing for 10 (40 bytes) of options.
- flag bits This group of 6 bits identify various special states in the protocol. Several of the bits may be set simultaneously.
- window size This is translates from the amount of space that the receiver host has available for the storage of unacknowledged data. The units are bytes unless the window scale factor option is used. The maximum value is 65535.
- checksum This covers both the header and the data. It is calculated by prepending a pseudo-header to the TCP packet, this consists of three 32-bit words, which contain the source, and destination IP addresses, a byte set to 0, a byte set to 6 (the protocol number for TCP in an IP datagram header) and the packet length (in “words”).
- the checksum field of the TCP packet is set to zero and the following algorithm applied to the prepended packet treated as a sequence of 16-bit (unsigned) words. Note that the inclusion of the IP addresses in the checksum calculation means that TCP cannot easily be carried on lower level protocols other than IP.
- Urgent pointer This is part of TCP's mechanism for sending urgent data that will overtake the normal data stream. If the URG flag bit is set this field indicates the position within the data of the last byte of the urgent data. There is no way of indicating where the urgent data starts.
- MSS Maximum Packet Size
- the format for an IP header 610 in accordance with the preferred embodiment is shown in FIG. 6B , and starts with a Version Number (Ver), currently assigned a value of “4”.
- the next four bits represent the length of the header field (Hdr Length) in long words (32-bits). For almost all data packets on the Internet, this value is “5”, which makes the header twenty bytes long. This number increases, however, if the datagrams are of special type, called Options packets.
- the next eight bits are called “ToS” bits, representing the Type of Service that is assigned to this datagram. Different applications have different service requirements for delivery from the network, which are encoded, in the ToS field.
- the next sixteen bit field is the Total Length of the datagram in bytes, limiting the length of the IP datagram to 2 16 ; i.e. 65535 bytes.
- the next sixteen bits called the “Identification” field, uniquely identifies each datagram sent by a host.
- the next two fields are flag (FLG) and Fragmentation Offset fields, which are used to packet datagrams and reassemble them as they travel through networks that have limitations on the maximum size of datagrams.
- the next field shown in the IP header 610 of FIG. 6B is called the Time To Live or TTL field, which is responsible for limiting the number of hops a datagram may make through a network. This field decrements at each networking node in the network. If this field reduces to zero before reaching the desired destination, the datagram is dropped. This mechanism prevents infinite looping between two networking nodes because of some routing error.
- the next field is the Protocol field, used by the hosts to distinguish the higher layer application for which this datagram is intended. This allows for simultaneous multiple applications to exist between the same two hosts. Header Checksum is the next field, which normally provides the checksum generating function and guaranties the validity of the header. The Checksum is calculated over the entire header and stored in the header.
- CK_TCP_CKSUM check-TCP-checksum
- CK_TCP_CKSUM check-TCP-checksum
- a Router in the network receives a packet with the CK_TCP_CKSUM bit set in the IP header, it will compute a checksum on the entire TCP payload 600 , in addition to the checksum of the header that is performed utilizing the header Checksum in IP header 610 .
- the Checksum value stored in the TCP header 605 of the packet is utilized to perform this checksum of the entire packet at the networking node. If the CK_TCP_CKSUM bit is not set, only the checksum of the header, utilizing the header Checksum in IP header 610 , is performed.
- Each host is assigned a unique address, which allows a network to forward the stream of datagrams from one node to the other.
- the format of a TCP acknowledge frame 622 comprises a media header 624 , a protocol header 626 , a received sequence number field 628 , and a send sequence number field 630 .
- the media header 624 will be particular to the type of network, e.g., an Ethernet header for an Ethernet network, etc.
- the protocol header 626 will depend on the transport and network layer protocol used, such as TCP/IP, IPX/SPX, Netbios, etc.
- the received sequence number field 628 provides an identifier to the last sequence number reliably received by the computer.
- the send sequence number 630 corresponds to the relative sequential number of the message.
- the checksum failed (CKSUM_FAIL) flag 632 provides a special flag that may be set by the receiving host when a TCP checksum fails on a received packet, in accordance with a preferred embodiment of the present invention. Upon determining that a received packet contains corrupted data, the receiver host would set the checksum-failed flag 632 in the acknowledgment packet 622 returned to the sender host.
- IP Routing Protocols are forwarded from a source to a destination in an automatic manner. From the sender host's point of view, it only knows the destination address and does not know the route by which the datagram reaches the final destination.
- IP Routing Protocols are intelligent mechanisms on each internetworking node that share information about networking addresses with other internetworking nodes via Routing datagrams called IP Routing PDU's.
- IP Routing Protocols on each internetworking node create and maintain databases that allow it to forward ingress datagrams to the next internetworking node on the way to its final destination.
- FIG. 7 A representation of a network such as the Internet is presented in FIG. 7 .
- eleven Hosts are shown connected to a network of thirteen Routers, which are geographically independently located.
- Each networking node called a Router, has connections to a subset of the total number of networking nodes. There may not be a fully meshed interconnection; i.e. each Router may not be connected directly to every other Router in the network.
- Host 1 would like to send a datagram to Host 9 .
- Host 1 could achieve this in a few ways, by sending the datagram to Router 1 .
- Router 1 may then forward the datagram to Router 2 , and then Router 2 forwards the datagram to the ultimate destination Router 9 , which then forwards it to Host 9 .
- Host 1 could also have sent the datagram to Router 1 , with Router 1 then forwarding the datagram to Router 11 , which then forwards to Router 10 , which then forwards to Router 8 , and then finally Router 8 may forward the datagram to Router 9 , that in turn sends it to Host 9 .
- the many coexisting IP Routing Protocols collectively provide the information for Router 1 to determine which Router it is forward a datagram to (Router 2 or Router 11 in the above example, and with the same question raised at every internetworking node of the Internet) to create a network in a non-fully meshed connected Internet.
- Each Router creates a database of hierarchical topology of destination network addresses that it learns from other Routers via the Internet Routing Protocols, called a Routing Table.
- each Router creates another database, called a Forwarding Table, which maps a destination network address to one of its interfaces; meaning, that if a Router gets a datagram from a Host or other Router from a directly connected interface, then by examining the destination network address in the header and applying it to the Routing Table, the Router can determine which one of the local interfaces or ports should be used to forward the datagram.
- the Routing Table and the Forwarding Table a datagram that enters the network can thus be forwarded to the eventual destination by examining the datagram IP header and looking up the Forwarding Table to find the next interface to which to send the datagram.
- IPv6 is a proposal to solve some of the address space limitations.
- MPLS is a proposal to streamline the Forwarding Process of IP Datagrams.
- One of the common themes of the two proposals is to discard any Checksum field at the IP header layer. Underlying the present invention, however, is the discovery of significant advantages that can be obtained by enhancing the checksum functionality as is described below.
- FIG. 8 describes the hardware in a Router required to accept and forward an IP datagram in an IP networking node.
- the Router must first process the IP header of the incoming packet.
- the egress interface of the datagram is determined based on the incoming Destination Address in the incoming IP datagram. Once a header is verified, the data is either sent to another port in the networking node or to a Routing Engine within the networking node.
- a typical architecture of a Router networking node is implemented with a Routing Engine 800 connected to multiple interfaces of the networking node. All IP Routing Protocol data destined for the Routing Engine 800 are forwarded to the Routing Engine 800 by all ingress ports.
- the Routing Engine 800 examines the Routing Protocol PDUs and learns destination network addresses of the various networks, and then calculates the egress interface number for the network addresses.
- the destination network address and egress interface number form an entry into the Forwarding Table (as shown by the example of Forwarding Table 904 in FIG. 9A ).
- the Routing Engine 800 then sends the Forwarding Table or updates thereof to each ingress interface, thereby instructing each ingress header processing unit (Units 801 - 804 in FIG. 8 ) how to determine the exit interface of each incoming datagram.
- Each ingress header processing unit will then verify every datagram, examine the destination field, and then index the destination in the Forwarding Table to determine the egress port number of the datagram.
- Routers attached respectively on the other side of Units 801 , 802 , 803 and 804 are respectively advertising reachability to network addresses a, b and c, to network addresses c, d and e, to network addresses a, f and g, and finally, to network addresses h, i, and j.
- the Routing Engine 800 sees multiple exit or output ports, labeled as Output Ports 810 - 840 .
- the Routing Engine 800 will decide, based on one of many options, such as cost, hop count, etc., the best exit port to reach destination network address ‘a’ and destination network address ‘c’, for example. Assuming for this example that the Routing Engine 800 chooses the interface to port 810 for the forwarding of all datagrams destined for network address ‘a’, and it chooses port 820 for the forwarding of all datagrams destined for network address ‘c’, the Routing Engine 800 will thereupon create the Forwarding Table 904 shown in FIG. 9 . In practice, the Forwarding Tables on a backbone Router can extend to tens of thousands of entries. Each network address in FIG. 9A is listed within parenthesis as four numbers, which represents the real network address as four bytes.
- the Forwarding Table is then forwarded to each input or ingress data port by the Routing Engine 800 to permit the Header Processing Units 801 - 804 to examine all incoming datagrams and match the destination address in the Forwarding Table and thereby determine the corresponding appropriate output or egress interface port 810 , 820 , 830 , 840 .
- the datagram is then sent to that output port via the switch 805 .
- Link 2 within Network 700 is picking up noise that is causing data corruption to packets traversing over the Link.
- the data stream is likely to pick up noise in Link 2 via the route Link 1 -Link 4 . If the corrupted data packets were permitted to traverse through Network 700 from Host 5 to Host 8 , Host 8 would perform a checksum on the received packets and determine that some data packets had corrupted data.
- Host 5 and Host 8 have insufficient information to determine the route the corrupted data packets took through Network 700 , they cannot explicitly discern the Link causing the corruption and instruct the Network 700 to avoid the corrupt Link. However, in accordance with the preferred embodiment, Host 8 sends an acknowledgment packet 622 with the checksum failed bit 632 set, indicating that the received sequence number packet had data corruption and requesting the Network implement the rapid detection and corrupt link avoidance routine of the preferred embodiment.
- Host 5 When Host 5 receives an acknowledgment frame 622 with a checksum fail bit 632 (CKSUM_FAIL) that is set, Host 5 will begin transmitting all packets within the current communication session it is conducting with Host 8 with the check-TCP-checksum (CK_TCP_CKSUM) bit in the IP header set, thereby requesting that all receiving routers perform a packet checksum on the received packet, in accordance with the preferred embodiment. Upon receiving a packet with the check-TCP-checksum bit set, router 5 will perform a complete checksum on the entire packet, and not just on the IP header.
- CKSUM_FAIL checksum fail bit 632
- the packet checksum is performed by conducting both an IP header checksum and a TCP payload checksum as were described in conjunction with IP header 610 and TCP header 605 .
- the CK_TCP_CKSUM bit is expanded to a field providing a checksum value for the entire packet, including the TCP/IP payload, and the checksum is performed against this combined value.
- the packet checksum performed by Router 5 will confirm the packet is good and will permit Router 5 to continue routing the packet based on the destination port. The routing and forwarding tables in Router 5 will then direct the data packet over Link 2 en route to Host 8 .
- Router 13 Upon receiving the data packet, Router 13 will detect that the check-TCP-checksum bit has been set and will perform a packet checksum on the entire packet. Because Link 2 has been introducing noise, the packet checksum performed by Router 13 will fail, indicating that the link between Router 5 and Router 13 is bad. Router 13 will then drop the corrupted packet and update a register maintaining a count of the number of packets detected as corrupt over a set period.
- registers 920 within router memory 900 keep track of the total number of packets received by its router and registers 910 keep track of the number of packets received that are corrupt, in accordance with a preferred embodiment.
- Registers 910 include Register 912 containing a value for the number of corrupt packets detected on Port 1 (CP_PORT A), Register 914 containing a value for the number of corrupt packets detected on Port 2 (CP_PORT B), Register 916 containing a value for the number of corrupt packets detected on Port 3 (CP_PORT C), and Register 918 containing a value for the number of corrupt packets detected on Port 4 (CP_PORT D).
- Registers 920 include Register 922 containing a value for the total number of data packets received on Port 1 (TP_PORT 1 ), Register 924 containing a value for the total number of data packets received on Port 2 (TP_PORT 2 ), Register 916 containing a value for the total number of data packets received on Port 3 (TP_PORT 3 ), and Register 918 containing a value for the total number of data packets received on Port 4 (TP_PORT 4 ). Registers 910 and 920 are reset to “0” on a periodic basis, for example every five minutes.
- the corresponding value in Register 920 is incremented and the corresponding value in Registers 910 for the port is incremented by “1” if the packet is detected as bad.
- the variable stored in Register 926 would be incremented by “1” each time a data packet was received on Port 3
- the variable stored in Register 916 would be incremented by “1” each time a corrupt packet was received on Port 3 .
- the router continuously monitors the ratio of corrupt packets on a particular port to the total number of packets received on the port (i.e. CP_PORT_/TP_PORT_). If the ratio for a particular port exceeds a “corruption threshold” preset by an administrative policy of the router, then the link is indicated as bad. In a preferred embodiment, the link would be deemed bad if the ratio of corrupt-to-received packets in a given five minute interval exceeded a twenty percent (20%) threshold. If the ratio of corrupt-to-received packets for a particular port does not exceed the preset threshold, then the router will continue to operate as normal and continue to use the link connected to the port.
- a “corruption threshold” preset by an administrative policy of the router
- the router assumes that the associated link is causing data corruption and will update its Routing Table to eliminate routing from that link. As required by the routing protocol, the router would also issue a routing update to other routers in the network indicating that the link is bad and should be avoided.
- a link-state advertisement provided by the OSPF (Open Shortest Path First) protocol is utilized to provide a routing update to the other routers coupled to Ports 1 - 4 and communicate the identified corrupted link to be avoided.
- OSPF is an interior gateway routing protocol developed for IP networks based on the shortest path first or link-state algorithm.
- Routers use link-state algorithms to send routing information to all nodes in an internetwork by calculating the shortest path to each node based on the topography of the Internet constructed by each node. Each router sends that portion of the routing table that describes the state of its own links, and it also sends the complete routing structure (topography).
- Host 5 will see the retransmission rate of lost or corrupted data packets begin to significantly drop for the connection session between Host 5 and Host 8 . Accordingly, when the retransmission rate drops below a predetermined level set by an administration policy, Host 5 can then assume that the bad link has been detected and avoided within Network 700 through the process of the preferred embodiment, and will therefore stop setting the CK_TCP_CKSUM option in the IP Header of data packets transmitted to Host 8 .
- the preferred embodiment presents significant advantages over current routing algorithms and networks.
- the process 1000 begins at step 1005 , when the client receives a data packet over a network connection.
- the client determines whether the received data packet is corrupt by performing a checksum on the entire data packet. If not, the process passes to step 1015 , which shows that the client responds to receipt of the data packet by sending a packet acknowledgment frame with the CKSUM_FAIL flag reset, indicating that the received data packet had passed the checksum test at the client. From step 1015 , the process ends at step 1022 .
- step 1020 the client sends an acknowledgment frame for the received packet with the CKSUM_FAIL flag set, indicating that the received packet had failed the checksum test and that the data packet was corrupt. From step 1020 , the process ends at step 1022 .
- the process 1100 begins at step 1105 , when the client receives a packet acknowledgment frame with the CKSUM_FAIL flag set.
- the process passes to step 1130 , where the server responds by sending all subsequent data packets to the client with the CK_TCP_CKSUM flag set in the IP Header of each such data packet, thereby requesting that each router in the network receiving the data packet perform a packet checksum on the entire packet upon receipt.
- step 1135 the server stores the rate at which the sender host is being required to resend data packets to the client host (the “current retransmission rate”) as a result of the Fast Retransmit algorithm of TCP for delivering lost or corrupt data packets to the client.
- the process then passes to decision block 1140 where the server determines if the current retransmission rate to the client has dropped below a predetermined threshold retransmission rate stored in the server. If not, the process returns to step 1130 , where the latest current retransmission rate is stored in the server.
- step 1140 If the decision at step 1140 indicates that the current retransmission rate has dropped below the threshold retransmission rate, the drop in current retransmission rate is assumed to be the result of the bad link within the route between server host and client host being detected and avoided by the routers within the network, in accordance with the present invention, and the process passes to step 1045 , where the server sends subsequent packets to the client with the CK_TCP_CKSUM reset, thereby not requesting that routers receiving the data packet in the network perform a packet checksum on the entire data packet.
- the process 1200 starts at step 1205 , and passes to step 1210 , where a router within the network receives a data packet over a network connection on a given port, and increments the stored value of the total packets received over that port (TP_PORT_(stored in the registers 920 ).
- the process then passes to decision block 1215 , where it is determined if the CK_TCP_CKSUM flag in the IP header of the received data packet is set.
- step 1220 the router performs a checksum on the IP header of the packet.
- the process then passes to decision block 1225 , where it is determined if the checksum test has passed. If not, the process passes to step 1230 , where the router drops the packet, and the process thereafter ends at step 1235 . If the decision at step 1225 is that the checksum passed, the process passes to step 1240 , where the data packet is forwarded on to the next router in the route (next hop) through the network to the client. Thereafter, the process ends at step 1235 .
- step 1245 the router performs a packet checksum on the entire data packet received.
- decision block 1250 it is determined if the packet checksum of the entire data packet has passed. If so, the process passes back to step 1240 , where the data packet is forwarded to the next hop in the route through the network to the client. If the decision at step 1250 is that the packet checksum has failed, the process passes to step 1255 , where the router drops the received packet.
- the process then passes to step 1260 , where the router increments the sorted value of the number of detected corrupt packets received over the port (C_PORT_) (stored in the registers 910 ). Thereafter, the process passes to decision block 1265 , where it is determined if the value of C_PORT_is exceed the corruption threshold of the system.
- the corruption threshold is a percentage and the determination at step 1265 is whether the percent ratio of received corrupt packets to received total packets (C_PORT_/TP_PORT) is greater than the corruption threshold percent. If the decision at step 1270 is negative, the process ends at step 1235 .
- step 1265 If the determination at step 1265 is affirmative, the process passes to step 1270 , where the router updates its Forwarding Table to avoid the link on the port and transmits a routing update to the network indicating that the link is bad, thereby updating all of the routers in the network on the bad link. Thereafter, the process ends at step 1235 .
- the present invention may be implemented using any combination of computer programming software, firmware or hardware.
- the computer programming code (whether software or firmware) according to the invention will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, optical disks, magnetic tape, semiconductor memories such as ROMs, PROMs, etc., thereby making an article of manufacture in accordance with the invention.
- the article of manufacture containing the computer programming code is used by either executing the code directly from the storage device, by copying the code from the storage device into another storage device such as a hard disk, RAM, etc. or by transmitting the code for remote execution.
- a method for practicing the invention may result from combining one or more machine-readable storage devices containing the code with appropriate standard computer hardware to execute the code.
- An apparatus for practicing the invention could be one or more computers and storage systems containing or having network access to computer program(s) coded in accordance with the invention.
Abstract
Description
Claims (8)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/640,819 US7394769B2 (en) | 2003-08-14 | 2003-08-14 | Method, system and article for rapid detection and avoidance of high data corrupting routes within a network |
CNB2004100566222A CN1281020C (en) | 2003-08-14 | 2004-08-13 | Method for detecting and avoiding high data error route in network, system and product thereof |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/640,819 US7394769B2 (en) | 2003-08-14 | 2003-08-14 | Method, system and article for rapid detection and avoidance of high data corrupting routes within a network |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050036452A1 US20050036452A1 (en) | 2005-02-17 |
US7394769B2 true US7394769B2 (en) | 2008-07-01 |
Family
ID=34136176
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/640,819 Active 2026-05-10 US7394769B2 (en) | 2003-08-14 | 2003-08-14 | Method, system and article for rapid detection and avoidance of high data corrupting routes within a network |
Country Status (2)
Country | Link |
---|---|
US (1) | US7394769B2 (en) |
CN (1) | CN1281020C (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090135840A1 (en) * | 2007-11-27 | 2009-05-28 | Elizabeth Jean Murray | Method for adjusting mss or packets sent to a bridge device positioned between virtual and physical lans |
US7991750B1 (en) * | 2008-06-10 | 2011-08-02 | Network Appliance, Inc. | Application recovery from network-induced data corruption |
US9749877B2 (en) | 2007-10-29 | 2017-08-29 | Interdigital Patent Holdings, Inc. | Method for detecting radio link failure for transmission over enhanced dedicated channel in a CELL—FACH state |
US10361837B2 (en) | 2017-06-16 | 2019-07-23 | Cisco Technology, Inc. | Selective proxy to alleviate adjacent channel interference in full duplex cable network environments |
Families Citing this family (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7570581B2 (en) * | 2004-09-23 | 2009-08-04 | Motorola, Inc. | Dynamic reduction of route reconvergence time |
EP1696637B1 (en) * | 2005-02-28 | 2008-01-02 | Siemens AG | Procedure for reducing packet loss during update of address table |
CN100571202C (en) * | 2006-01-27 | 2009-12-16 | 华为技术有限公司 | A kind of transfer approach and transfer system that carries the data of routing iinformation |
US20080101382A1 (en) * | 2006-10-26 | 2008-05-01 | Bannerjee Dwip N | Efficient method for discovering path mtu for tcp connections |
US8223628B2 (en) * | 2007-01-10 | 2012-07-17 | Lantiq Deutschland Gmbh | Data transmission method, transmitter, receiver, transceiver and transmission system |
US9686045B2 (en) * | 2007-04-04 | 2017-06-20 | Lantiq Beteiligungs-GmbH & Co. KG | Data transmission and retransmission |
CN102106105B (en) * | 2008-03-07 | 2015-04-01 | 诺基亚通信公司 | Method and device for data transmission |
GB2462492B (en) * | 2008-08-14 | 2012-08-15 | Gnodal Ltd | A multi-path network |
CN101420341B (en) * | 2008-12-08 | 2011-01-05 | 福建星网锐捷网络有限公司 | Processor performance test method and device for embedded system |
US9154413B2 (en) * | 2012-06-21 | 2015-10-06 | Breakingpoint Systems, Inc. | High-speed CLD-based pipeline architecture |
US9660836B2 (en) | 2014-05-06 | 2017-05-23 | Lattice Semiconductor Corporation | Network topology discovery |
US9590825B2 (en) | 2014-05-09 | 2017-03-07 | Lattice Semiconductor Corporation | Stream creation with limited topology information |
FR3022094B1 (en) * | 2014-06-06 | 2017-12-08 | Bull Sas | METHOD AND SYSTEM FOR CONTROLLING FLOW |
US10078356B2 (en) * | 2015-08-20 | 2018-09-18 | Intel Corporation | Apparatus and method for saving and restoring data for power saving in a processor |
US10320954B2 (en) | 2017-02-03 | 2019-06-11 | Microsoft Technology Licensing, Llc | Diffusing packets to identify faulty network apparatuses in multipath inter-data center networks |
US10651974B2 (en) * | 2017-02-28 | 2020-05-12 | Marvell Asia Pte, Ltd. | Method and apparatus for updating error detection information in packets |
US11303504B2 (en) | 2020-06-09 | 2022-04-12 | T-Mobile Usa, Inc. | Data link error feedback signaling |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6097697A (en) * | 1998-07-17 | 2000-08-01 | Sitara Networks, Inc. | Congestion control |
US6330614B1 (en) | 1998-03-20 | 2001-12-11 | Nexabit Networks Llc | Internet and related networks, a method of and system for substitute use of checksum field space in information processing datagram headers for obviating processing speed and addressing space limitations and providing other features |
US6501754B1 (en) * | 1997-08-08 | 2002-12-31 | Kabushiki Kaisha Toshiba | Scheme for label switched path loop detection at node device |
US20030039245A1 (en) * | 2001-08-17 | 2003-02-27 | Intel Corporation | System and method of IP packet forwarding across directly connected forwarding elements |
US6912196B1 (en) * | 2000-05-15 | 2005-06-28 | Dunti, Llc | Communication network and protocol which can efficiently maintain transmission across a disrupted network |
-
2003
- 2003-08-14 US US10/640,819 patent/US7394769B2/en active Active
-
2004
- 2004-08-13 CN CNB2004100566222A patent/CN1281020C/en not_active Expired - Fee Related
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6501754B1 (en) * | 1997-08-08 | 2002-12-31 | Kabushiki Kaisha Toshiba | Scheme for label switched path loop detection at node device |
US6330614B1 (en) | 1998-03-20 | 2001-12-11 | Nexabit Networks Llc | Internet and related networks, a method of and system for substitute use of checksum field space in information processing datagram headers for obviating processing speed and addressing space limitations and providing other features |
US6097697A (en) * | 1998-07-17 | 2000-08-01 | Sitara Networks, Inc. | Congestion control |
US6912196B1 (en) * | 2000-05-15 | 2005-06-28 | Dunti, Llc | Communication network and protocol which can efficiently maintain transmission across a disrupted network |
US20030039245A1 (en) * | 2001-08-17 | 2003-02-27 | Intel Corporation | System and method of IP packet forwarding across directly connected forwarding elements |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9749877B2 (en) | 2007-10-29 | 2017-08-29 | Interdigital Patent Holdings, Inc. | Method for detecting radio link failure for transmission over enhanced dedicated channel in a CELL—FACH state |
US20090135840A1 (en) * | 2007-11-27 | 2009-05-28 | Elizabeth Jean Murray | Method for adjusting mss or packets sent to a bridge device positioned between virtual and physical lans |
US8693483B2 (en) | 2007-11-27 | 2014-04-08 | International Business Machines Corporation | Adjusting MSS of packets sent to a bridge device positioned between virtual and physical LANS |
US7991750B1 (en) * | 2008-06-10 | 2011-08-02 | Network Appliance, Inc. | Application recovery from network-induced data corruption |
US10361837B2 (en) | 2017-06-16 | 2019-07-23 | Cisco Technology, Inc. | Selective proxy to alleviate adjacent channel interference in full duplex cable network environments |
Also Published As
Publication number | Publication date |
---|---|
US20050036452A1 (en) | 2005-02-17 |
CN1281020C (en) | 2006-10-18 |
CN1581764A (en) | 2005-02-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7394769B2 (en) | Method, system and article for rapid detection and avoidance of high data corrupting routes within a network | |
US7742454B2 (en) | Network performance by dynamically setting a reassembly timer based on network interface | |
US5519704A (en) | Reliable transport protocol for internetwork routing | |
US7385923B2 (en) | Method, system and article for improved TCP performance during packet reordering | |
US7826449B2 (en) | Article for improved network performance by avoiding IP-ID wrap-arounds causing data corruption on fast networks | |
US7590755B2 (en) | Method to offload a network stack | |
US7738495B2 (en) | Method of determining a maximum transmission unit value of a network path using transport layer feedback | |
US7171489B2 (en) | Method to synchronize and upload an offloaded network stack connection with a network stack | |
US8306039B2 (en) | Methods and systems for automatic transport path selection for multi-homed entities in stream control transmission protocol | |
US7443845B2 (en) | Apparatus and method for a lightweight, reliable, packet-based transport protocol | |
US8493839B2 (en) | Method and system of teamed network adapters with offloaded connections | |
US7864772B2 (en) | Protecting data integrity in an enhanced network connection | |
US7480301B2 (en) | Method, system and article for improved TCP performance during retransmission in response to selective acknowledgement | |
US8259717B2 (en) | Transparent network service enhancement | |
US7876757B2 (en) | Router-assisted fast processing of packet termination in host | |
US7978598B1 (en) | Connection replication | |
Ramasamy et al. | Internet Routing—The State of the Art |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BANERJEE, DWIP N.;JAIN, VINIT;VALLABHANENI, VASU;AND OTHERS;REEL/FRAME:014406/0759;SIGNING DATES FROM 20030807 TO 20030808 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |