CN110741645B - Blockiness reduction - Google Patents
Blockiness reduction Download PDFInfo
- Publication number
- CN110741645B CN110741645B CN201880036914.XA CN201880036914A CN110741645B CN 110741645 B CN110741645 B CN 110741645B CN 201880036914 A CN201880036914 A CN 201880036914A CN 110741645 B CN110741645 B CN 110741645B
- Authority
- CN
- China
- Prior art keywords
- dimensional transform
- block
- current
- transform coefficients
- transform coefficient
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/597—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding specially adapted for multi-view video sequence encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/117—Filters, e.g. for pre-processing or post-processing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/124—Quantisation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/13—Adaptive entropy coding, e.g. adaptive variable length coding [AVLC] or context adaptive binary arithmetic coding [CABAC]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/136—Incoming video signal characteristics or properties
- H04N19/14—Coding unit complexity, e.g. amount of activity or edge presence estimation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/167—Position within a video image, e.g. region of interest [ROI]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/18—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a set of transform coefficients
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/44—Decoders specially adapted therefor, e.g. video decoders which are asymmetric with respect to the encoder
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
- H04N19/61—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding in combination with predictive coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/80—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation
- H04N19/82—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation involving filtering within a prediction loop
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/85—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using pre-processing or post-processing specially adapted for video compression
- H04N19/86—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using pre-processing or post-processing specially adapted for video compression involving reduction of coding artifacts, e.g. of blockiness
Abstract
Video decoding may include transform coefficient continuity smoothing, which may include coefficient continuity smoothing, defined correlation coefficient smoothing, pixel range projection, and luma-related chroma resampling. Coefficient continuity smoothing may include: obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame; and generating reconstructed block data of the current block using transform coefficient continuity smoothing based on the encoded block data. The transform coefficient continuity smoothing may include: for a block boundary of a current block, in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, transform coefficient continuity smoothing is performed based on the current block, the neighboring block, and the block boundary, and reconstructed block data is included in a reconstructed frame and the reconstructed frame is output.
Description
Technical Field
The present invention relates to encoding and decoding image data, video stream data, or both for transmission or storage.
Background
Digital images and videos may be used, for example, on the internet for remote business conferencing via video conferencing, high definition video entertainment, video advertising, or sharing of user-generated content. High performance compression may be advantageous for transmission and storage due to the large amount of data involved in transferring and processing image and video data. Accordingly, it would be advantageous to provide high resolution images and video, such as image and video coding using blockiness reduction, transmitted over communication channels having limited bandwidth.
Disclosure of Invention
The present application relates to encoding and decoding image data, video stream data, or both, for transmission or storage. Aspects of systems, methods, and devices for encoding and decoding using blockiness reduction are disclosed herein.
One aspect is a method for video decoding, the method comprising: generating, by a processor executing instructions stored on a non-transitory computer-readable medium, a reconstructed frame by decoding an encoded bitstream by obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame; generating reconstructed block data of the current block using transform coefficient continuity smoothing based on the encoded block data; and outputting the reconstructed frame. The transform coefficient continuity smoothing includes: for a block boundary of a current block, in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, transform coefficient continuity smoothing is performed based on the current block, the neighboring block, and the block boundary, and reconstructed block data is included in a reconstructed frame.
Another aspect is an apparatus comprising a decoder, the decoder comprising: a non-transitory computer-readable memory comprising instructions for generating a reconstructed frame by decoding an encoded bitstream; and a processor operably coupled to the non-transitory computer readable memory for receiving instructions from the non-transitory computer readable memory and executing the instructions to: obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame; generating reconstructed block data of the current block using transform coefficient continuity smoothing based on the encoded block data; including reconstructed block data in a reconstructed frame; and outputting the reconstructed frame. The processor is configured to perform transform coefficient continuity smoothing by: for a block boundary of a current block, in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, transform coefficient continuity smoothing is performed based on the current block, the neighboring block, and the block boundary.
Another aspect is a method for video decoding, the method comprising: generating, by a processor executing instructions stored on a non-transitory computer-readable medium, a reconstructed frame by decoding an encoded bitstream by obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame and including two-dimensional transform coefficients of the current block; generating reconstructed block data of the current block using transform coefficient continuity smoothing based on the encoded block data; including reconstructed block data in a reconstructed frame; and outputting the reconstructed frame. The transform coefficient continuity smoothing includes, for a block boundary of the current block, performing transform coefficient continuity smoothing based on the current block, a neighboring block, and the block boundary in response to determining that neighboring block data corresponding to the neighboring block that is spatially adjacent to the current block along the block boundary is available. Performing transform coefficient continuity smoothing based on the current block and the neighboring block includes: a one-dimensional transform coefficient of the current block is determined based on the block boundary and the two-dimensional transform coefficient of the current block, and a middle two-dimensional transform coefficient of the current block is determined based on the two-dimensional transform coefficient of the current block and a difference between the one-dimensional transform coefficient of the current block and the one-dimensional transform coefficient of the neighboring block.
Variations of these and other aspects will be described in more detail below.
Drawings
The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views.
Fig. 1 is a diagram of a computing device according to an embodiment of the present disclosure.
Fig. 2 is a diagram of a computing and communication system according to an embodiment of the present disclosure.
Fig. 3 is a diagram of a video stream for encoding and decoding according to an embodiment of the present disclosure.
Fig. 4 is a block diagram of an encoder according to an embodiment of the present disclosure.
Fig. 5 is a block diagram of a decoder according to an embodiment of the present disclosure.
Fig. 6 is a block diagram of a representation of a portion of a frame according to an embodiment of the present disclosure.
Fig. 7 is a block diagram of representations of two-dimensional transform coefficients and corresponding left one-dimensional transform coefficients generated for decoding a block of a frame according to an embodiment of the present disclosure.
Fig. 8 is a block diagram of representations of two-dimensional transform coefficients and corresponding right one-dimensional transform coefficients generated for decoding a block of a frame according to an embodiment of the present disclosure.
Fig. 9 is a block diagram of representations of two-dimensional transform coefficients and corresponding upper one-dimensional transform coefficients generated for decoding a block of a frame according to an embodiment of the present disclosure.
Fig. 10 is a block diagram of representations of two-dimensional transform coefficients and corresponding next-dimensional transform coefficients generated for decoding a block of a frame according to an embodiment of the present disclosure.
Fig. 11 is a flowchart of an example of decoding using blockiness reduction according to an embodiment of the present disclosure.
Fig. 12 is a flowchart of an example of transform coefficient continuity smoothing according to an embodiment of the present disclosure.
Detailed Description
Image and video compression schemes may include decomposing an image or frame into smaller portions such as blocks and generating an output bitstream using techniques that limit the information included in each block in the output. The information included in each block in the output may be limited by reducing spatial redundancy, reducing temporal redundancy, or a combination thereof. For example, temporal or spatial redundancy may be reduced by predicting a frame based on information available to both the encoder and decoder and including information representing the difference or residual between the predicted frame and the original frame. The residual information may be further compressed by transforming the residual information into transform coefficients, quantizing the transform coefficients, and entropy-encoding the quantized transform coefficients.
The encoded bitstream can be decoded to recreate the block and source images based on limited information. Decoding a frame may include effects such as blocking across block boundaries caused by quantization.
Video coding with blockiness reduction may use transform coefficient continuity smoothing, defined correlation coefficient smoothing, pixel range projection, luma-related chroma resampling, or a combination thereof to improve accuracy and decoding quality. The transform coefficient continuity smoothing may include: generating a one-dimensional transform coefficient based on the two-dimensional transform coefficient; determining a difference between spatially adjacent one-dimensional transform coefficients corresponding to the block boundary; and adjusting the two-dimensional transform coefficients based on the difference. The defined correlation coefficient smoothing may comprise adapting the two-dimensional transform coefficients based on a defined correlation between the low frequency coefficients and the respective corresponding next harmonic coefficients (overtone coefficients). The pixel range projection may include: inverse transforming the transform coefficients to generate pixel data; adjusting the pixel data based on the defined range of values; transforming the adjusted pixel values to generate limited range transform coefficients; based on the compressed value range and adjusting the limited range transform coefficients within the smoothness constraint to generate pixel range projection adjusted transform coefficients, the pixel range projection adjusted transform coefficients may be inverse transformed to generate reconstructed pixel values. Luma-related chroma resampling may include downsampling luma channel data, identifying correlations between neighboring downsampled luma values, and upsampling corresponding chroma data using the correlations.
Fig. 1 is a diagram of a computing device 100 according to an embodiment of the present disclosure. The illustrated computing device 100 includes a memory 110, a processor 120, a User Interface (UI) 130, an electronic communication unit 140, a sensor 150, a power supply 160, and a bus 170. As used herein, the term "computing device" includes any unit or combination of units capable of performing any of the methods disclosed herein, or any one or more portions thereof.
Although a single unit is shown, memory 110 may include multiple physical units, such as one or more main memory units, such as random access memory units; one or more secondary data storage units, such as a magnetic disk; or a combination thereof. For example, the data 112 or a portion thereof, the instructions 114 or a portion thereof, or both, may be stored in a secondary storage unit and may be loaded or otherwise passed to a primary storage unit in connection with processing the corresponding data 112, executing the corresponding instructions 114, or both. The memory 110, or a portion thereof, may be removable memory.
As described herein, although illustrated as being included in memory 110, the instructions 114, or portions thereof, may be implemented as a special purpose processor or circuitry, which may include specialized hardware for carrying out any one of the methods, algorithms, aspects, or combinations thereof. Portions of the instructions 114 may be distributed across multiple processors on the same machine or on different machines, or distributed across a network, such as a local area network, a wide area network, the internet, or a combination thereof.
The user interface 130 may include any unit capable of interfacing with a user, such as a virtual or physical keyboard, a touchpad, a display, a touch display, a speaker, a microphone, a video camera, a sensor, or any combination thereof. For example, user interface 130 may be an audio-visual display device, and computing device 100 may use user interface 130 audio-visual display device to present audio, such as decoded video, such as along with displaying video. Although shown as a single unit, the user interface 130 may comprise one or more physical units. For example, the user interface 130 may include an audio interface for performing audio communication with a user and a touch display for performing visual and touch-based communication with the user.
Although electronic communication interface 142 is shown in fig. 1 as a wireless antenna, electronic communication interface 142 may be a wireless antenna as shown, a wired communication port such as an ethernet port, an infrared port, a serial port, or any other wired or wireless unit capable of interfacing with a wired or wireless electronic communication medium 180. Although fig. 1 shows a single electronic communication unit 140 and a single electronic communication interface 142, any number of electronic communication units and any number of electronic communication interfaces may be used.
The sensor 150 may include, for example, an audio sensing device, a visible light sensing device, a motion sensing device, or a combination thereof. For example, the sensor 150 may include a sound sensing device such as a microphone or any other sound sensing device now existing or later developed that may sense sound near the computing device 100 such as voice or other speech uttered by a user operating the computing device 100. In another example, the sensor 150 may include a camera or any other image sensing device now existing or later developed that may sense an image, such as an image of a user operating the computing device. Although a single sensor 150 is shown, the computing device 100 may include multiple sensors 150. For example, computing device 100 may include a first camera oriented in a field of view toward a user of computing device 100 and a second camera oriented in a field of view away from the user of computing device 100.
The power supply 160 may be any suitable device for powering the computing device 100. For example, the power supply 160 may include a wired external power interface; one or more dry cell batteries such as nickel cadmium (NiCd), nickel zinc (NiZn), nickel metal hydride (NiMH), lithium ion (Li-ion); a solar cell; a fuel cell; or any other device capable of powering the computing device 100. Although a single power supply 160 is shown in fig. 1, the computing device 100 may include multiple power supplies 160, such as batteries and a wired external power interface.
Although shown as separate units, electronic communication unit 140, electronic communication interface 142, user interface 130, power supply 160, or portions thereof may be configured as a combined unit. For example, electronic communication unit 140, electronic communication interface 142, user interface 130, and power supply 160 may be implemented as communication ports capable of interfacing with an external display device, providing communication, power, or both.
One or more of the following may be operatively coupled via bus 170: memory 110, processor 120, user interface 130, electronic communication unit 140, sensor 150, or power supply 160. Although a single bus 170 is shown in FIG. 1, computing device 100 may include multiple buses. For example, memory 110, processor 120, user interface 130, electronic communication unit 140, sensor 150, and bus 170 may receive power from power supply 160 via bus 170. In another example, memory 110, processor 120, user interface 130, electronic communication unit 140, sensors 150, power supply 160, or a combination thereof may communicate data by sending and receiving electronic signals, such as via bus 170.
Although not separately shown in fig. 1, one or more of the following may include internal memory such as internal buffers or registers: a processor 120, a user interface 130, an electronic communication unit 140, a sensor 150, or a power supply 160. For example, the processor 120 may include an internal memory (not shown) and may read the data 112 from the memory 110 into the internal memory (not shown) for processing.
Although shown as separate elements, memory 110, processor 120, user interface 130, electronic communications unit 140, sensor 150, power supply 160, and bus 170, or any combination thereof, may be integrated in one or more electronic units, circuits, or chips.
Fig. 2 is a diagram of a computing and communication system 200 according to an embodiment of the present disclosure. The illustrated computing and communication system 200 includes computing and communication devices 100A, 100B, 100C, access points 210A, 210B, and a network 220. For example, the computing and communication system 200 may be a multiple access system that provides communication, such as voice, audio, data, video, messaging, broadcast, or combinations thereof, with one or more wired or wireless communication devices, such as the computing and communication devices 100A, 100B, 100C. Although fig. 2 shows three computing and communication devices 100A, 100B, 100C, two access points 210A, 210B, and one network 220 for simplicity, any number of computing and communication devices, access points, and networks may be used.
The computing and communication devices 100A, 100B, 100C may be, for example, computing devices such as the computing device 100 shown in FIG. 1. For example, the computing and communication devices 100A, 100B may be user devices such as mobile computing devices, laptop computers, thin clients, or smart phones, and the computing and communication device 100C may be a server such as a mainframe or cluster. Although computing and communication device 100A and computing and communication device 100B are described as user devices and computing and communication device 100C is described as a server, any computing and communication device may perform some or all of the functions of a server, some or all of the functions of a user device, or some or all of the functions of a server and a user device. For example, the server computing and communication device 100C may receive, encode, process, store, transmit, or a combination thereof, and one or both of the computing and communication device 100A and the computing and communication device 100B may receive, decode, process, store, render, or a combination thereof, the audio data.
Each computing and communication device 100A, 100B, 100C may be configured to perform wired or wireless communication, such as via the network 220, and each computing and communication device 100A, 100B, 100C may include a User Equipment (UE), a mobile station, a fixed or mobile subscriber unit, a cellular phone, a personal computer, a tablet computer, a server, consumer electronics, or any similar device. For example, the computing and communication devices 100A, 100B, 100C may be configured to transmit or receive wired or wireless communication signals. Although each computing and communication device 100A, 100B, 100C is shown as a single unit, the computing and communication device may include any number of interconnected elements.
Each access point 210A, 210B may be any type of device configured to communicate with the computing and communication devices 100A, 100B, 100C, the network 220, or both, via a wired or wireless communication link 180A, 180B, 180C. For example, the access points 210A, 210B may include base stations, base Transceiver Stations (BTSs), node bs, enhanced node bs (eNode-bs), home node bs (HNode-bs), wireless routers, wired routers, hubs, repeaters, switches, or any similar wired or wireless devices. Although each access point 210A, 210B is shown as a single unit, the access points may include any number of interconnected elements.
The network 220 may be any type of network configured to provide services such as voice, data, applications, voice over internet protocol (VoIP), or any other communication protocol or combination of communication protocols over wired or wireless communication links. For example, the network 220 may be a Local Area Network (LAN), a Wide Area Network (WAN), a Virtual Private Network (VPN), a mobile or cellular telephone network, the Internet, or any other means of electronic communication. The network may use communication protocols such as Transmission Control Protocol (TCP), user Datagram Protocol (UDP), internet Protocol (IP), real-time transport protocol (RTP), hypertext transport protocol (HTTP), or a combination thereof.
The computing and communication devices 100A, 100B, 100C may communicate with each other via the network 220 using one or more wired or wireless communication links, or via a combination of wired and wireless communication links. For example, as shown, computing and communication devices 100A, 100B may communicate via wireless communication links 180A, 180B, and computing and communication device 100C may communicate via wired communication link 180C. Any of the computing and communication devices 100A, 100B, 100C may communicate using any one or more wired or wireless communication links. For example, a first computing and communication device 100A may communicate via a first access point 210A using a first type of communication link, a second computing and communication device 100B may communicate via a second access point 210B using a second type of communication link, and a third computing and communication device 100C may communicate via a third access point (not shown) using a third type of communication link. Similarly, the access points 210A, 210B may communicate with the network 220 via one or more types of wired or wireless communication links 230A, 230B. Although fig. 2 shows the computing and communication devices 100A, 100B, 100C communicating via the network 220, the computing and communication devices 100A, 100B, 100C may communicate with each other via any number of communication links, such as direct wired or wireless communication links.
Communication between one or more of the computing and communication devices 100A, 100B, 100C may omit communication via the network 220 and may include transferring data via another medium (not shown), such as a data storage device. For example, the server computing and communication device 100C may store audio data, such as encoded audio data, in a data storage device, such as a portable data storage unit, and one or both of the computing and communication device 100A or the computing and communication device 100B may access, read, or retrieve the stored audio data from the data storage unit, such as by physically disconnecting the data storage device from the server computing and communication device 100C and physically connecting the data storage device to the computing and communication device 100A or the computing and communication device 100B.
Other implementations of the computing and communication system 200 are possible. For example, in an embodiment, the network 220 may be an ad-hoc (ad-hoc) network, and one or more of the access points 210A, 210B may be omitted. The computing and communication system 200 may include devices, units or elements not shown in fig. 2. For example, the computing and communication system 200 may include many more communication devices, networks, and access points.
Fig. 3 is a diagram of a video stream 300 for encoding and decoding according to an embodiment of the present disclosure. A video stream 300, such as a video stream captured by a camera or a video stream generated by a computing device, may include a video sequence 310. Video sequence 310 may include a series of adjacent frames 320. Although three adjacent frames 320 are shown, the video sequence 310 may include any number of adjacent frames 320.
Each frame 330 from adjacent frames 320 may represent a single image from the video stream. Although not shown in fig. 3, frame 330 may include one or more segments, tiles, or planes that may be encoded or otherwise processed independently, such as in parallel. Frame 330 may include blocks 340. Although not shown in fig. 3, a block may include pixels. For example, a block may include 16 × 16 pixel groups, 8 × 8 pixel groups, 8 × 16 pixel groups, or any other pixel groups. Unless otherwise indicated herein, the term "block" may include a super-block, a macroblock, a segment, a slice (slice), or any other portion of a frame. A frame, block, pixel, or combination thereof may include display information, such as luminance information, chrominance information, or any other information that may be used to store, modify, convey, or display a video stream, or a portion thereof.
Fig. 4 is a block diagram of an encoder 400 according to an embodiment of the present disclosure. The encoder 400 may be implemented in an apparatus, such as the computing apparatus 100 shown in fig. 1 or the computing and communication apparatuses 100A, 100B, 100C shown in fig. 2, for example as a computer software program stored in a data storage unit, such as the memory 110 shown in fig. 1. The computer software program may include machine instructions executable by a processor, such as processor 120 shown in fig. 1, and may cause an apparatus to encode video data as described herein. The encoder 400 may be implemented as dedicated hardware included in the computing device 100, for example.
The encoder 400 may encode an input video stream 402, such as the video stream 300 shown in fig. 3, to generate an encoded (compressed) bitstream 404. The encoder 400 includes a forward path for generating a compressed bitstream 404. The forward path may include an intra/inter prediction unit 410, a transform unit 420, a quantization unit 430, an entropy coding unit 440, or any combination thereof. The encoder 400 may include a reconstruction path (indicated by the dashed connecting lines) to reconstruct the frame for encoding future blocks. The reconstruction path may include a dequantization unit 450, an inverse transform unit 460, a reconstruction unit 470, a filtering unit 480, or any combination thereof. Other structural variations of the encoder 400 may be used to encode the video stream 402.
To encode the video stream 402, each frame within the video stream 402 may be processed in units of blocks. Thus, the current block may be identified from the blocks in the frame and may be encoded.
At the intra/inter prediction unit 410, the current block may be encoded using intra prediction, which may be within a single frame, or inter prediction, which may be from frame to frame. Intra-prediction may include generating a prediction block from samples in the current frame that have been previously encoded and reconstructed. Inter-prediction may include generating a prediction block from samples in one or more previously constructed reference frames. Generating a prediction block for a current block in a current frame may include performing motion estimation to generate a motion vector indicating an appropriate reference portion of a reference frame.
The intra/inter prediction unit 410 may subtract the prediction block from the current block (original block) to generate a residual block. Transform unit 420 may perform a block-based transform, which may include transforming the residual block into transform coefficients, e.g., in the frequency domain. Examples of block-based transforms include Karhunen-loeve transform (KLT), discrete Cosine Transform (DCT), singular value decomposition transform (SVD), and Asymmetric Discrete Sine Transform (ADST). In an example, DCT may include transforming the blocks into the frequency domain. DCT may include using spatial frequency based transform coefficient values, where the lowest frequency (DC) coefficient is at the top left of the matrix and the highest frequency coefficient is at the bottom right of the matrix.
The quantization unit 430 may convert the transform coefficients into discrete magnitudes, which may be referred to as quantized transform coefficients or quantization levels. The quantized transform coefficients may be entropy encoded by entropy encoding unit 440 to produce entropy encoded coefficients. Entropy encoding may include using a probability distribution metric. The entropy encoded coefficients and information for the decoded block, which may include the type of prediction used, the motion vector, and the quantizer value, may be output to the compressed bitstream 404. The compressed bitstream 404 may be formatted using various techniques such as Run Length Encoding (RLE) and zero run length encoding.
The reconstruction path may be used to maintain reference frame synchronization between the encoder 400 and a corresponding decoder, such as the decoder 500 shown in fig. 5. The reconstruction path, which may include decoding the encoded block, may be similar to the decoding process discussed below and may include decoding the encoded frame or portions thereof, may include dequantizing the quantized transform coefficients at a dequantization unit 450 and inverse transforming the dequantized transform coefficients at an inverse transform unit 460 to produce a block of derivative residues. The reconstruction unit 470 may add the prediction block generated by the intra/inter prediction unit 410 to the derivative residual block to create a decoded block. A filtering unit 480 may be applied to the decoded block to generate a reconstructed block, and the filtering unit 480 may reduce distortion, such as blocking artifacts. Although one filtering unit 480 is shown in fig. 4, filtering the decoded block may include loop filtering, deblocking filtering, or other types of filtering or combinations of filtering types. As indicated by the dashed line at 482, the reconstructed block may be stored or otherwise made accessible as a reconstructed block that is part of a reference frame for use in encoding the current frame, another part of another frame, or both. As indicated by the dashed line at 484, encoding information for the frame, such as the deblocking threshold index value, may be encoded, included in the compressed bitstream 404, or both.
Other variations of the encoder 400 may be used to encode the compressed bitstream 404. For example, the non-transform based encoder 400 may quantize the residual block directly without the transform unit 420. In some embodiments, the quantization unit 430 and the dequantization unit 450 may be combined into a single unit.
Fig. 5 is a block diagram of a decoder 500 according to an embodiment of the present disclosure. The decoder 500 may be implemented in an apparatus, such as the computing apparatus 100 shown in fig. 1 or the computing and communication apparatuses 100A, 100B, 100C shown in fig. 2, for example as a computer software program stored in a data storage unit, such as the memory 110 shown in fig. 1. The computer software program may include machine instructions that may be executed by a processor, such as processor 120 shown in fig. 1, and may cause an apparatus to decode video data as described herein. The decoder 500 may be implemented as dedicated hardware included in the computing device 100, for example.
The decoder 500 may receive a compressed bitstream 502, such as the compressed bitstream 404 shown in fig. 4, and may decode the compressed bitstream 502 to generate an output video stream 504. The decoder 500 may include an entropy decoding unit 510, a dequantization unit 520, an inverse transform unit 530, an intra/inter prediction unit 540, a reconstruction unit 550, a filtering unit 560, or any combination thereof. Other structural variations of the decoder 500 may be used to decode the compressed bitstream 502.
The entropy decoding unit 510 may decode data elements within the compressed bitstream 502 using, for example, context-adaptive binary arithmetic decoding to produce a set of quantized transform coefficients. The dequantization unit 520 may dequantize the quantized transform coefficients, and the inverse transform unit 530 may inverse transform the dequantized transform coefficients to produce a derivative residual block, which may correspond to the derivative residual block generated by the inverse transform unit 460 shown in fig. 4. The intra/inter prediction unit 540 may generate a prediction block corresponding to the prediction block created in the encoder 400 using header information decoded from the compressed bitstream 502. At the reconstruction unit 550, the prediction block may be added to the derivative residual block to create a decoded block. A filtering unit 560 may be applied to the decoded blocks to reduce effects (such as blockiness), the filtering unit 560 may include loop filtering, deblocking filtering, or other types of filtering or combinations of filtering types, and the filtering unit 560 may include generating reconstructed blocks that may be output as the output video stream 504.
Other variations of the decoder 500 may be used to decode the compressed bitstream 502. For example, decoder 500 may generate output video stream 504 without deblocking filtering unit 570.
Fig. 6 is a block diagram of a representation of a portion 600 of a frame, such as frame 330 shown in fig. 3, according to an embodiment of the present disclosure. As shown, the portion 600 of the frame includes four 64 x 64 blocks 610 in two rows and two columns in a matrix or cartesian plane. In some embodiments, the 64 × 64 block may be a largest coding unit, N =64. Each 64 x 64 block may include four 32 x 32 blocks 620. Each 32 x 32 block may include four 16x16 blocks 630. Each 16x16 block may include four 8 x 8 blocks 640. Each 8 x 8 block 640 may include four 4 x 4 blocks 650. Each 4 x 4 block 650 may include 16 pixels that may be represented in four rows and four columns in each respective block in a cartesian plane or matrix. The pixels may include information representing an image captured in a frame, such as luminance information, color information, and position information. A block, such as the illustrated 16x16 pixel block, may include a luma block 660, which luma block 660 may include luma pixels 662; and two chroma blocks 670, 680, such as a U or Cb chroma block 670 and a V or Cr chroma block 680. The chroma blocks 670, 680 may include chroma pixels 690. For example, as shown, luma block 660 may include 16 × 16 luma pixels 662 and each chroma block 670, 680 may include 8 × 8 chroma pixels 690. Although one arrangement of blocks is shown, any arrangement may be used. Although fig. 6 shows an N × N block, an N × M block may be used. For example, 32 × 64 blocks, 64 × 32 blocks, 16 × 32 blocks, 32 × 16 blocks, or any other size of blocks may be used. In some embodiments, an N × 2N block, a 2N × N block, or a combination thereof may be used.
Video encoding may include ordered block-level encoding. Sequential block-level encoding may include encoding blocks of a frame in an order, such as a raster scan order, where blocks may be identified and processed starting with a block in the upper left corner of a frame or portion of a frame and proceeding from left to right along rows and from the upper row to the lower row, identifying each block for subsequent processing. For example, a 64 x 64 block in the upper row and left column of the frame may be the first encoded block, and a 64 x 64 block immediately to the right of the first block may be the second encoded block. The second row from the top may be a second encoding row, so that a 64 × 64 block in the left column of the second row may be encoded after a 64 × 64 block in the rightmost column of the first row.
In some embodiments, encoding the block includes using quadtree encoding, which may include encoding smaller block units within the block in raster scan order. For example, the 64 × 64 block shown in the lower left corner of the portion of the frame shown in fig. 6 may be encoded using quad-tree coding, where the upper left 32 × 32 block may be encoded, then the upper right 32 × 32 block may be encoded, then the lower left 32 × 32 block may be encoded, and then the lower right 32 × 32 block may be encoded. Each 32 x 32 block may be encoded using quad-tree coding, where the top left 16x16 block may be encoded, then the top right 16x16 block may be encoded, then the bottom left 16x16 block may be encoded, and then the bottom right 16x16 block may be encoded. Each 16x16 block may be encoded using quad-tree coding, where the top left 8 x 8 block may be encoded, then the top right 8 x 8 block may be encoded, then the bottom left 8 x 8 block may be encoded, and then the bottom right 8 x 8 block may be encoded. Each 8 x 8 block may be encoded using quad-tree coding, where the top left 4 x 4 block may be encoded, then the top right 4 x 4 block may be encoded, then the bottom left 4 x 4 block may be encoded, and then the bottom right 4 x 4 block may be encoded. It is possible to omit 8 × 8 blocks for 16 × 16 blocks and 16 × 16 blocks may be encoded using quad-tree coding, where the upper left 4 × 4 block may be encoded and then the other 4 × 4 blocks in the 16 × 16 block may be encoded in raster scan order.
Video encoding may include compressing information included in the original or input frames, for example, by omitting some information in the original frames from the corresponding encoded frames. For example, the encoding may include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
Reducing spectral redundancy may include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which may be referred to as a YUV or YCbCr color model or color space. Using the YUV color model may include representing a luminance component of a portion of a frame using a relatively large amount of information and representing each corresponding chrominance component of the portion of the frame using a relatively small amount of information. For example, a portion of a frame may be represented by a high-resolution luma component, which may include a 16 × 16 block of pixels, and by two lower-resolution chroma components, each of which represents the portion of the frame as an 8 × 8 block of pixels. A pixel may indicate a value, e.g., a value in the range from 0 to 255, and may be stored or transmitted using, e.g., eight bits. Although the present disclosure is described with reference to the YUV color model, any color model may be used.
Reducing spatial redundancy may include transforming the blocks into the frequency domain using, for example, a Discrete Cosine Transform (DCT). For example, a unit of an encoder, such as transform unit 420 shown in fig. 4, may perform DCT using spatial frequency-based transform coefficient values.
Reducing temporal redundancy may include using similarities between frames to encode frames using a relatively small amount of data based on one or more reference frames, which may be previously encoded, decoded, and reconstructed frames of a video stream. For example, a block or pixel of the current frame may be similar to a spatially corresponding block or pixel of the reference frame. The block or pixel of the current frame may be similar to a block or pixel of the reference frame at a different spatial location, and reducing temporal redundancy may include generating motion information indicative of a spatial difference or translation between the location of the block or pixel in the current frame and a corresponding location of the block or pixel in the reference frame.
Reducing temporal redundancy may include identifying a portion of a reference frame corresponding to a current block or pixel of a current frame. For example, a reference frame or a portion of a reference frame that may be stored in memory may be searched to identify a portion for generating a predictor for maximum efficiency encoding a current block or pixel of a current frame. For example, the search may identify a portion of a reference frame for which a difference in pixel values between a current block and a prediction block generated based on the portion of the reference frame is minimized, and may be referred to as a motion search. The portion of the searched reference frame may be limited. For example, the portion of the reference frame that may be referred to as a search area of the search may include a limited number of lines of the reference frame. In an example, identifying the portion of the reference frame used to generate the predictor may include calculating a cost function, such as a Sum of Absolute Differences (SAD), between pixels of the portion of the search region and pixels of the current block.
The spatial difference between the position of the portion of the reference frame in the reference frame used to generate the predictor and the current block in the current frame may be represented as a motion vector. The difference in pixel values between the predictor block and the current block may be referred to as difference data, residual data, prediction error, or as a residual block. Generating the motion vector may be referred to as motion estimation, and the pixels of the current block may be indicated as f based on location using cartesian coordinates x,y . Similarly, pixels of the search area of the reference frame may be indicated as r based on location using Cartesian coordinates x,y . The Motion Vector (MV) of the current block may be determined based on, for example, the SAD between a pixel of the current frame and a corresponding pixel of the reference frame.
Although described herein with reference to a matrix or cartesian representation of a frame for clarity, frames may be stored, transmitted, processed, or any combination thereof in any data structure such that pixel values may be efficiently represented for a frame or image. For example, the frames may be stored, transmitted, processed, or any combination thereof in a two-dimensional data structure, such as a matrix as shown, or a one-dimensional data structure, such as a vector array. In one embodiment, a representation of a frame, such as a two-dimensional representation as shown, may correspond to a physical location when the frame is rendered as an image. For example, a position in the upper left corner of a block in the upper left corner of a frame may correspond to a physical position in the upper left corner when the frame is rendered as an image.
Block-based coding efficiency may be improved by partitioning an input block into one or more prediction partitions, which may be rectangular partitions including squares for prediction coding. Video encoding using predictive partitioning may include selecting a predictive partitioning scheme from a plurality of candidate predictive partitioning schemes. For example, a candidate prediction partition scheme for a 64 × 64 coding unit may include rectangular-sized prediction partitions ranging from 4 × 4 to 64 × 64, such as 4 × 4, 4 × 8, 8 × 4, 8 × 8, 8 × 16, 16 × 8, 16 × 16, 16 × 32, 32 × 16, 32 × 32, 32 × 64, 64 × 32, or 64 × 64. Video coding using prediction partitioning may include a full prediction partition search, which may include selecting a prediction partitioning scheme by encoding a coding unit using each available candidate prediction partitioning scheme and selecting an optimal scheme, such as the scheme that yields the smallest rate-distortion error.
Encoding a video frame may include identifying a predictive partitioning scheme for encoding a current block, such as block 610. Identifying the prediction partitioning scheme may include determining whether to encode the block as a single prediction partition having a maximum coding unit size, which may be 64 x 64 as shown, or to partition the block into multiple prediction partitions corresponding to sub-blocks, such as a 32 x 32 block 620, a 16x16 block 630, or an 8 x 8 block 640 as shown, and may include determining whether to partition into one or more smaller prediction partitions. For example, a 64 × 64 block may be partitioned into four 32 × 32 prediction partitions. Three of the four 32 x 32 prediction partitions may be encoded as 32 x 32 prediction partitions and the fourth 32 x 32 prediction partition may be further partitioned into four 16x16 prediction partitions. Three of the four 16x16 prediction partitions may be encoded as 16x16 prediction partitions and the fourth 16x16 prediction partition may be further partitioned into four 8 x 8 prediction partitions, each of which may be encoded as an 8 x 8 prediction partition. Identifying a predictive partitioning scheme may include using a predictive partitioning decision tree.
Video encoding of a current block may include identifying an optimal predictive encoding mode from a plurality of candidate predictive encoding modes, which may provide flexibility in handling video signals having various statistical characteristics and may improve compression efficiency. For example, the video encoder may evaluate each candidate predictive encoding mode to identify an optimal predictive encoding mode, which may be, for example, a predictive encoding mode that minimizes an error metric, such as a rate-distortion cost, for the current block. The complexity of searching for candidate predictive coding modes may be reduced by limiting the set of available candidate predictive coding modes based on the similarity between the current block and the corresponding prediction block. The complexity of searching each candidate predictive coding mode may be reduced by performing a directed refinement mode search. For example, metrics may be generated for a limited set of candidate block sizes, such as 16 × 16, 8 × 8, and 4 × 4, the error metrics associated with each block size may be arranged in descending order, and additional candidate block sizes, such as 4 × 8 and 8 × 4 block sizes, may be evaluated.
Block-based coding efficiency may be improved by partitioning the current residual block into one or more transform partitions, which may be rectangular partitions including squares for transform coding. Video encoding using transform partitions may include selecting a unified transform partition scheme. For example, a current residual block, such as block 610, may be a 64 × 64 block and may be transformed without partitioning using a 64 × 64 transform.
Although not explicitly shown in fig. 6, the residual block may be transform partitioned using a unified transform partitioning scheme. For example, a 64 × 64 residual block may be transform partitioned using a unified transform partitioning scheme including four 32 × 32 transform blocks, using a unified transform partitioning scheme including sixteen 16 × 16 transform blocks, using a unified transform partitioning scheme including sixty-four 8 × 8 transform blocks, or using a unified transform partitioning scheme including 256 4 × 4 transform blocks.
Video encoding using transform partitions may include identifying multiple transform block sizes of a residual block using multi-form transform partition encoding. The multi-form transform partition coding may include: it is recursively determined whether to transform the current block using a current block size transform or partition-encode by partitioning the current block and performing a multi-form transform on each partition. For example, the lower left block 610 shown in fig. 6 may be a 64 × 64 residual block, and the multi-form transform partition encoding may include determining whether to encode the current 64 × 64 residual block using a 64 × 64 transform or by partitioning the 64 × 64 residual block into partitions such as four 32 × 32 blocks 620 and multi-form transform partition encoding each partition. Determining whether to transform the current block may be based on comparing a sum of a cost of encoding the current block using the current block size transform and a cost of encoding each partition using the partition size transform.
Fig. 7 is a block diagram of representations of two-dimensional transform coefficients 700 and corresponding left-dimensional transform coefficients 710 generated for decoding a block of a frame, such as the frame 330 shown in fig. 3, according to an embodiment of the disclosure.
As shown, the two-dimensional transform coefficients 700 of a block of a frame are represented as an 8 x 8 block, including 64 two-dimensional transform coefficients in eight rows and eight columns in a matrix or cartesian plane. Each respective two-dimensional transform coefficient from two-dimensional transform coefficients 700 based on position using cartesian coordinates is indicated as a (i，j) . Although 8 x 8 blocks are shown in fig. 7, any size block may be used, such as an N x M block.
The left one-dimensional transform coefficients 710 include a left one-dimensional transform coefficient corresponding to each respective row of the two-dimensional transform coefficients 700. The left one-dimensional transform coefficient may be determined as the sum of the corresponding two-dimensional transform coefficients from the corresponding row of two-dimensional transform coefficients 700.
Determining the left one-dimensional transform coefficient 710 (L) of the two-dimensional transform coefficient 700 may be expressed as follows:
for example, the left one-dimensional transform coefficient 712 (L) corresponding to the upper row (i = 0) may be added 0 ) Determined as a function of the corresponding two-dimensional transform coefficient [ a ] from the corresponding row of two-dimensional transform coefficients 700 (0，0) ，a (0，1) ，a (0，2) ，a (0，3) ，a (0，4) ，a (0，5) ，a (0，6) ，a (0，7) ]And (3) is (a).
Fig. 8 is a block diagram of a representation of a two-dimensional transform coefficient 700 as shown in fig. 7 and a corresponding right one-dimensional transform coefficient 720 generated for decoding a block of a frame, such as frame 330 shown in fig. 3, in accordance with an embodiment of the present disclosure.
The right one-dimensional transform coefficient 720 includes a right one-dimensional transform coefficient corresponding to each respective row of the two-dimensional transform coefficients 700. The right one-dimensional transform coefficient may be determined as the sum of corresponding two-dimensional transform coefficients from a corresponding row of two-dimensional transform coefficients 700, where the sum is determined using alternating sign summing. Alternating sign summing may include alternating between adding respective values such as two-dimensional transform coefficients from even columns or even rows and subtracting respective values such as two-dimensional transform coefficients from odd columns or odd rows.
The right one-dimensional transform coefficient 720 (R) determining the two-dimensional transform coefficient 700 may be expressed as follows:
for example, the right one-dimensional transform coefficient 722 (R) corresponding to the upper row (i = 0) may be added 0 ) Determined as a function of the two-dimensional transform coefficient [ a ] from the corresponding row of two-dimensional transform coefficients 700 (0，0) ，a (0，1) ，a (0，2) ，a (0，3) ，a (0，4) ，a (0，5) ，a (0，6)， a (0，7) ]May be expressed as R 0 ＝a (0，0) -a (0，1) +a (0，2) -a (0，3) +a (0，4) -a (0，5) +a (0，6) -a (0，7) 。
Fig. 9 is a block diagram of representations of two-dimensional transform coefficients 700 as shown in fig. 7 and corresponding up-one-dimensional transform coefficients 730 generated for decoding a block of a frame, such as frame 330 shown in fig. 3, according to an embodiment of the disclosure.
The up-one-dimensional transform coefficients 730 include an up-one-dimensional transform coefficient corresponding to each respective column of the two-dimensional transform coefficients 700. The upper one-dimensional transform coefficient may be determined as the sum of the corresponding two-dimensional transform coefficients from the corresponding column of two-dimensional transform coefficients 700.
The upper one-dimensional transform coefficient 730 (T) determining the two-dimensional transform coefficient 700 may be expressed as follows:
for example, it may be opposite to the left column (j = 0)Corresponding left one-dimensional transform coefficient 732 (T) 0 ) Determined as a function of the corresponding two-dimensional transform coefficient [ a ] obtained from the corresponding column of two-dimensional transform coefficients 700 (0，0 )，a (1，0) ，a (2，0) ，a （3，0） ，a (4，0) ，a (5，0) ，a (6，0) ，a (7，0) ]And (3) is (a).
Fig. 10 is a block diagram of a representation of a two-dimensional transform coefficient 700 as shown in fig. 7 and a corresponding bottom one-dimensional transform coefficient 740 generated for decoding a block of a frame, such as frame 330 shown in fig. 3, in accordance with an embodiment of the present disclosure.
The lower one-dimensional transform coefficients 740 include a lower one-dimensional transform coefficient corresponding to each respective column of the two-dimensional transform coefficients 700. The next-dimensional transform coefficient may be determined as the sum of the corresponding two-dimensional transform coefficients from the corresponding column of two-dimensional transform coefficients 700, where the sum is determined using alternating sign summation.
The next one-dimensional transform coefficient 740 (B) determining the two-dimensional transform coefficient 700 may be expressed as follows:
for example, the next-dimensional transform coefficient 742 (B) corresponding to the left column (j = 0) may be set to be lower than the first-dimensional transform coefficient 0 ) Is determined as two-dimensional transform coefficients [ a ] from respective columns of two-dimensional transform coefficients 700 (0，0) ，a (1，0) ，a (2，0) ，a (3，0) ，a (4，0) ，a (5，0) ，a (6，0) ，a (7，0) ]May be expressed as R 0 ＝a (0，0) -a (1，0) +a (2，0) -a (3，0) +a (4，0) -a (5，0) +a (6，0) -a (7，0) 。
Fig. 11 is a flow diagram of an example of decoding 1100 using blockiness reduction in accordance with an embodiment of the present disclosure. Decoding 1100 using blockiness reduction may be implemented in a decoder such as decoder 500 shown in fig. 5. For example, the inverse transform unit 530 of the decoder 500 shown in fig. 5 may implement the decoding 1100 using the blockiness reduction. Decoding 1100 using blockiness reduction may be implemented in a decoding path of an encoder, such as encoder 400 shown in fig. 4.
As shown in fig. 11, decoding 1100 using blockiness reduction includes: encoded frames are identified at 1110, reconstructed frame data is generated at 1120, and the reconstructed frame data is output at 1130.
The encoded frame may be identified at 1110. Identifying the encoded frame may include decoding or partially decoding encoded frame data from the encoded bitstream. For example, the decoder may receive a compressed bitstream, such as compressed bitstream 404 shown in fig. 4, that includes encoded data and may decode or partially decode the compressed bitstream to identify encoded frame data, such as by entropy decoding and dequantizing the frame data.
Reconstructed frame data may be generated at 1120. Generating the reconstructed frame includes generating the reconstructed frame, which includes obtaining the encoded block data at 1140 and generating the reconstructed block data at 1150.
Encoded block data can be obtained at 1140. Obtaining encoded block data may include identifying encoded block data from an encoded bitstream, such as from the frame data identified at 1110. For example, the encoded block data may include two-dimensional transform coefficients from a current block of a reconstructed frame, such as shown at 700 in fig. 7-10.
Reconstructed block data may be generated at 1150. Generating the reconstructed block data includes transform coefficient continuity smoothing at 1152, defined correlation coefficient smoothing at 1154, pixel range projection at 1156, and luma-related chroma resampling at 1158.
Transform coefficient continuity smoothing may be performed at 1152. For example, transform coefficient continuity smoothing may be performed based on the current block, the neighboring block, and the block boundary. An example of transform coefficient continuity smoothing is shown in fig. 12.
Defined correlation coefficient smoothing may be performed at 1154. Applying defined correlation coefficient smoothing may include adjusting one or more two-dimensional transform coefficients, such as decoded two-dimensional transform coefficients or reconstructed two-dimensional transform coefficients, based on a defined correlation between defined coefficients, such as using linear or pseudo-linear slopes or using a step function that may remove or reduce effects such as aliasing of decoded interpolated pixel data. Integral transform coefficient correlation may be used such that the expansion described by the cosine indicates a linear expansion that can be expressed in the quantization range. At a defined maximum quantization, linear slopes, such as corresponding to images of the sky, may not be decomposed (collapse) into segmented cosine wave reconstructions, and may be represented as piecewise linear patches, such as when the upper 2x2 corners contain non-zero DCT coefficients.
For example, low frequency coefficients, such as the lowest frequencies [ (0, 1), (1, 0) ] may be adjusted based on a defined correlation (linear slope) with the corresponding next harmonic coefficients [ (0, 3), (3, 0) ]. Other coefficients, such as fifth, seventh, and ninth coefficients, may be similarly adjusted. The values of transform coefficients smoothly adjusted using linear correlation coefficients may be limited based on a quantization range described in an encoded image. The quantization range may be derived from the quantization value and the quantization matrix.
For object boundaries where the object blocks background contact, a step function based correlation may be used. For gradient or other spatially slowly varying illumination conditions, a linear progression may be used.
For example, the quantization threshold of a coefficient may indicate a range of values for the respective coefficient, such as from 50 to 149. The values of the transform coefficients smoothly adjusted using the linear correlation coefficients may have values 160, the corresponding quantization thresholds may indicate a range of values of the respective coefficients from 50 to 149, and the transform coefficients adjusted using the linear correlation coefficient smoothing values 160 may be limited to the maximum value 149 indicated by the corresponding quantization thresholds.
A pixel range projection may be performed at 1156. The pixel range projection may include inverse transforming the transform coefficients to generate pixel values. The pixel values (x), which may be RGB format pixel values, may be limited to a defined range, such as from zero to two hundred and fifty-five (0 < = x < = 255). Finite or clipped (clipped) pixel values may be transformed, such as using a Discrete Cosine Transform (DCT), to generate a finite range of transform coefficients. A limited range of transform coefficients may be adjusted based on the compressed value range and within the smoothing constraint to generate pixel range projection adjusted transform coefficients, which may be inverse transformed to generate reconstructed pixel values.
Generating reconstructed image data may include luma-related chroma resampling at 1158, which may include resampling some image data, such as chroma data. For example, the image data may be formatted using YUV4: 2. Luma-related chroma resampling obtains local correlation coefficients between intensities, such as by viewing spatially windowed portions of an image through a gaussian window or by computing correlation coefficients within squares of the image. For missing high frequency data in the chroma plane, data from the intensity plane may be projected into the chroma plane multiplied by a local correlation coefficient.
The reconstructed luminance data, Y-channel data, may be down-sampled to the resolution of the chrominance data. The correlation between the downsampled luminance data may be applied to the corresponding coefficients of the respective chrominance channels. For example, a filter such as a high pass filter, such as a laplacian filter, may be used to identify correlations between neighboring down-sampled luminance coefficients. The chrominance data may be upsampled to the resolution of the reconstructed luminance data using the corresponding correlation.
The decoded (reconstructed) data may be output at 1130. For example, the decoded frame may be stored in a memory, such as memory 110 shown in fig. 1, of a device, such as computing device 100 shown in fig. 1 or computing and communication devices 100A, 100B, 100C shown in fig. 2, or may be presented to a user.
In some embodiments, one or more elements of decoding 1100 with reduced blockiness may be omitted or used in combination. For example, one or more of the following may be omitted: transform coefficient continuity smoothing at 1152, defined correlation coefficient smoothing at 1154, pixel range projection at 1156, or luma-related chroma resampling at 1158.
Fig. 12 is a flow diagram of an example of transform coefficient continuity smoothing 1200 according to an embodiment of the present disclosure. The transform coefficient continuity smoothing 1200 may be implemented in a decoder, such as the decoder 500 shown in fig. 5. For example, the inverse transform unit 530 of the decoder 500 shown in fig. 5 may implement transform coefficient continuity smoothing 1200. The transform coefficient continuity smoothing 1200 may be implemented in a decoding path of an encoder, such as the encoder 400 shown in fig. 4.
In general, transform coefficient continuity smoothing 1200 reduces blockiness by smoothing the transform coefficient continuity with respect to block boundaries. Transform coefficient continuity smoothing 1200 may be performed for each boundary of the current block. Thus, for the current boundary, transform coefficient continuity smoothing 1200 includes: obtaining data of an adjacent block adjacent to the current boundary; determining one-dimensional transform coefficients for the block based on the corresponding two-dimensional transform coefficients and relative to block boundaries; and adjusting the two-dimensional transform coefficients within a quantization threshold relative to a block boundary based on respective differences between the corresponding one-dimensional transform coefficients.
Although transform coefficient continuity smoothing 1200 may be performed for each edge of the current block, less than all edges may be considered. For example, transform coefficient continuity smoothing 1200 may be performed for the edge of the current block only if neighboring blocks are available. In this example, transform coefficient continuity smoothing 1200 for corner blocks is performed for only one or two of the edges, and transform coefficient continuity smoothing 1200 for non-corner edges is performed for only up to three edges. Intermediate blocks may be processed along some or all of their four edges.
The details of the transform coefficient continuity smoothing 1200 may depend on the relative orientation of the neighboring blocks with respect to the current block. For example, for a neighboring block on the right side of the current block (on the left side), the right edge may be considered first to obtain the right 1D coefficient of the current block and the left 1D coefficient of the neighboring block. The left 1D coefficient of the neighboring block is a combination (e.g., sum) of each row of 2D coefficients of the block. The right 1D coefficient of the current block is a combination of the 2D coefficients of the block. The combination may be a sum of each row of the 2D coefficients of the block by alternately adding and subtracting. Then, the difference between the 1D coefficients of each row can be obtained. The 2D coefficients of the current block may be adjusted based on the portion of the difference. The adjustment may be made by alternating between adding and subtracting partial values to the 2D coefficients in the row. The partial values may be used to adjust the 2D coefficients of the neighboring blocks. The adjustment may be made by adding (but not subtracting) a partial value to the 2D coefficient. Adding and subtracting may push the values of the 2D coefficients outside the valid range defined by the quantization, so these values may be clamped back into the quantization range.
Since this process can be done for each edge of the current block, it can be done iteratively, one after the other; or each edge may be processed based on the starting 2D coefficients and combining the results (e.g., by summing the results).
As shown in fig. 12, the transform coefficient continuity smoothing 1200 includes: identifying a block boundary at 1210; obtaining adjacent block data at 1220; determining one-dimensional transform coefficients at 1230; determining intermediate two-dimensional transform coefficients at 1240; and determining reconstructed two-dimensional transform coefficients at 1250. As indicated by the dashed lines at 1260, the following may be performed for each boundary of the current block: identifying block boundaries at 1210; obtaining adjacent block data at 1220; determining one-dimensional transform coefficients at 1230; determining intermediate two-dimensional transform coefficients at 1240; and reconstructed two-dimensional transform coefficients are determined at 1250.
Block boundaries may be identified at 1210. For example, the block boundary may be identified along a left edge of the current block as shown in FIG. 7, along a right edge of the current block as shown in FIG. 8, along an upper edge of the current block as shown in FIG. 9, or along a lower edge of the current block as shown in FIG. 10.
Neighbor block data may be obtained 1220. Obtaining the neighboring block data may include determining that neighboring block data is available. For example, for a block at the upper left corner of a frame, adjacent block data to the right of the block and below the block may be available, and adjacent block data to the left of the block and above the block may not be available. Obtaining neighboring block data may include decoding or partially decoding neighboring block data from an encoded bitstream, or obtaining previously decoded or partially decoded neighboring block data. The neighboring block data may include two-dimensional transform coefficients of the neighboring block.
One-dimensional transform coefficients may be determined at 1230. Determining the one-dimensional transform coefficient may include determining the one-dimensional transform coefficient of the current block based on the two-dimensional transform coefficient of the current block and a block boundary. Determining the one-dimensional transform coefficient may include determining the one-dimensional transform coefficient of the neighboring block based on two-dimensional transform coefficients of the neighboring block and a block boundary. Determining the one-dimensional transform coefficients may include determining a relative orientation of a block boundary with respect to the current block, the neighboring block, or both.
For example, the current block may be to the right of the neighboring block, such as in response to determining that the block boundary corresponds to the left edge of the current block and the right edge of the neighboring block, determining the one-dimensional transform coefficients of the current block may include generating corresponding left one-dimensional transform coefficients as shown in fig. 7, and determining the one-dimensional transform coefficients of the neighboring block may include generating corresponding right one-dimensional transform coefficients as shown in fig. 8.
In another example, the current block may be to the left of the neighboring block, such as in response to determining that the block boundary corresponds to the right edge of the current block and the left edge of the neighboring block, determining the one-dimensional transform coefficients of the current block may include generating corresponding right one-dimensional transform coefficients as shown in fig. 8, and determining the one-dimensional transform coefficients of the neighboring block may include generating corresponding left one-dimensional transform coefficients as shown in fig. 7.
In another example, the current block may be below the neighboring block, such as in response to determining that the block boundary corresponds to an upper edge of the current block and a lower edge of the neighboring block, determining the one-dimensional transform coefficients of the current block may include generating corresponding upper one-dimensional transform coefficients as shown in fig. 9, and determining the one-dimensional transform coefficients of the neighboring block may include generating corresponding lower one-dimensional transform coefficients as shown in fig. 10.
In another example, the current block may be above the neighboring block, such as in response to determining that the block boundary corresponds to a lower edge of the current block and an upper edge of the neighboring block, determining the one-dimensional transform coefficients of the current block may include generating corresponding lower one-dimensional transform coefficients as shown in fig. 10, and determining the one-dimensional transform coefficients of the neighboring block may include generating corresponding upper one-dimensional transform coefficients as shown in fig. 9.
Intermediate two-dimensional transform coefficients may be determined at 1240. Determining the intermediate two-dimensional transform coefficient may include determining the intermediate two-dimensional transform coefficient of the current block based on the block boundary, the one-dimensional transform coefficient of the current block, and the two-dimensional transform coefficient of the current block. Determining the intermediate two-dimensional transform coefficient may include determining the intermediate two-dimensional transform coefficient of the neighboring block based on the block boundary, the one-dimensional transform coefficient of the neighboring block, and the two-dimensional transform coefficient of the neighboring block.
For example, the current block may be to the right of the neighboring block, and the middle two-dimensional transform coefficient (a ') of the current block is determined, such as in response to determining that the block boundary corresponds to the left edge of the current block and the right edge of the neighboring block' (i,j) ) May comprise determining, for each line (i) of the current block, which may be referred to as current line, a difference (D) between a left one-dimensional transform coefficient (Li) of the current line (i) of left one-dimensional transform coefficients from the current block and a corresponding right one-dimensional transform coefficient (Ri) of the current line (i) of right one-dimensional transform coefficients from the neighboring block i ) The difference can be expressed as D i ＝L i –R i (ii) a And for each coefficient from the current line (i), to a corresponding two-dimensional transform coefficient (a) from the two-dimensional transform coefficients of the current block (i,j) ) Plus a difference (D) i ) Part (c) of (a).
The portion may be based on a size of the current block. For example, the current block may be an N × M block, and a portion for determining middle two-dimensional transform coefficients of the current block in which the current block is to the right of the neighboring block may be 1/(2M). For an 8 x 8 block, the portion may be 1/16.
Determining the middle two-dimensional transform coefficient of the current block where the current block is to the right of the neighboring block may be expressed as follows:
e.g. adjusted left one-dimensional transform coefficients (L) i ') and adjusted right one-dimensional transform coefficient (R) i ') can be expressed as L i ′＝R i ′＝(L i +R i ) /2, and adjusted up-one-dimensional transform coefficient (T) j ') and the adjusted next-dimensional transform coefficient (B) j ') can be expressed as T j ′＝B j ′＝(T j +B j )/2。
Determining intermediate two-dimensional transform coefficients (a ') of a neighboring block, such as in response to determining that a block boundary corresponds to a left edge of the current block and a right edge of the neighboring block' (i，j) ) May include, for each row (i) of the neighboring block, which may be referred to as a current row, and for each coefficient from the current row (i), adjusting a corresponding two-dimensional transform coefficient (a) of two-dimensional transform coefficients from the neighboring block based on a portion of the difference (Di) using alternating sign adjustments (i，j) ). Alternating sign adjustment may include alternating between a portion that adds a difference to a corresponding value of a two-dimensional transform coefficient, such as from an even column or an even row, and a portion that subtracts a difference from a corresponding value of a two-dimensional transform coefficient, such as from an odd column or an odd row.
The portion may be based on a size of the current block. For example, the current block may be an N × M block, and a portion for determining middle two-dimensional transform coefficients of a neighboring block in which the current block is to the right of the neighboring block may be 1/(2M). For an 8 x 8 block, the portion may be 1/16.
Determining the middle two-dimensional transform coefficient of the neighboring block in which the current block is to the right of the neighboring block may be expressed as follows:
in another example, the current block may be to the left of the neighboring block and the middle two-dimensional transform coefficient (a ') of the current block is determined, such as in response to determining that the block boundary corresponds to the right edge of the current block and the left edge of the neighboring block' (i，j) ) May include determining, for each line (i) of the current block, a right one-dimensional transform coefficient (Ri) of the current line (i) from the right one-dimensional transform coefficients of the current block and a left one-dimensional transform coefficient (Ri) from the neighboring blockDifference (D) between corresponding left one-dimensional transform coefficients (Li) of a current row (i) of transform coefficients i ) The difference can be expressed as D i ＝R i -L i (ii) a And for each coefficient from the current row (i), using an alternating sign adjustment to base the difference (D) on i ) Adjusts corresponding two-dimensional transform coefficients (a) of the two-dimensional transform coefficients from the current block (i，j ))。
The portion may be based on a size of the current block. For example, the current block may be an N × M block, and a portion for determining middle two-dimensional transform coefficients of the current block in which the current block is to the left of a neighboring block may be 1/(2M). For an 8 x 8 block, the portion may be 1/16.
Determining the middle two-dimensional transform coefficient of the current block in which the current block is left of the neighboring block may be expressed as follows:
determining intermediate two-dimensional transform coefficients (a ') of a neighboring block, such as in response to determining that a block boundary corresponds to a right edge of a current block and a left edge of the neighboring block' (i，j ) May comprise for each row (i) of the neighboring block, which may be referred to as current row, and for each coefficient from the current row (i), a corresponding two-dimensional transform coefficient (a) to the two-dimensional transform coefficients from the neighboring block (i，j ) Plus the difference (Di).
The portion may be based on a size of the current block. For example, the current block may be an N × M block, and the part of the middle two-dimensional transform coefficients used to determine the current block in which the current block is at the left of the neighboring block may be 1/(2M). For an 8 x 8 block, the partition may be 1/16.
Determining the middle two-dimensional transform coefficient of the neighboring block in which the current block is left of the neighboring block may be expressed as follows:
in anotherIn an example, the current block may be below the neighboring block and the middle two-dimensional transform coefficient (a ') of the current block is determined, such as in response to determining that the block boundary corresponds to an upper edge of the current block and a lower edge of the neighboring block' (i，j) ) May comprise determining, for each column (j), which may be called current column, of current blocks, an up-one-dimensional transform coefficient (T) of a current column (j) of up-one-dimensional transform coefficients from the current block j ) A next-dimensional transform coefficient (B) corresponding to a current column (j) of next-dimensional transform coefficients from neighboring blocks j ) Difference (D) between j ) The difference can be expressed as D j ＝T j -B j (ii) a And for each coefficient from the current column (j), to a corresponding two-dimensional transform coefficient (a) from the two-dimensional transform coefficients of the current block (i，j) ) Plus a difference (D) j ) Part (c) of (a).
The portion may be based on a size of the current block. For example, the current block may be an N × M block, and a portion for determining middle two-dimensional transform coefficients of the current block in which the current block is below a neighboring block may be 1/(2N). For an 8 x 8 block, the partition may be 1/16.
Determining the middle two-dimensional transform coefficient of the current block in which the current block is below the neighboring block may be expressed as follows:
determining intermediate two-dimensional transform coefficients (a ') of a neighboring block, such as in response to determining that a block boundary corresponds to an upper edge and a neighboring lower edge of a current block' (i，j) ) May include, for each column (j) of the neighboring block, which may be referred to as a current column, and for each coefficient from the current column (j), adjusting a corresponding two-dimensional transform coefficient (a) of two-dimensional transform coefficients from the neighboring block based on a portion of the difference (Dj) using alternating sign adjustment (i，j) ). Alternating sign adjustment may include alternating between a portion of adding a difference to a corresponding value of a two-dimensional transform coefficient, such as from an even column or an even row, and a portion of subtracting a difference from a corresponding value of a two-dimensional transform coefficient, such as from an odd column or an odd row.
Determining the middle two-dimensional transform coefficient of the neighboring block in which the current block is below the neighboring block may be expressed as follows:
in another example, the current block may be above the neighboring block and the middle two-dimensional transform coefficient (a ') of the current block is determined, such as in response to determining that the block boundary corresponds to a lower edge of the current block and an upper edge of the neighboring block' (i，j) ) May comprise determining, for each column (j) of the current block, a next-dimensional transform coefficient (B) from a current column (j) of next-dimensional transform coefficients of the current block j ) Corresponding one-dimensional transform coefficient (T) of a current column (j) of one-dimensional transform coefficients from neighboring blocks j ) Difference (D) between j ) The difference can be expressed as D j ＝B j -T j (ii) a And for each coefficient from the current column (j), using an alternating sign adjustment to base the difference (D) j ) Adjusts corresponding two-dimensional transform coefficients (a) of the two-dimensional transform coefficients from the current block (i，j) )。
Determining the middle two-dimensional transform coefficient of the current block in which the current block is above the neighboring block may be expressed as follows:
determining intermediate two-dimensional transform coefficients (a ') of a neighboring block, such as in response to determining that a block boundary corresponds to a lower edge of a current block and an upper edge of the neighboring block' (i，j) ) May include for each column (j) of the neighboring block, which may be referred to as the current column, and for each coefficient from the current column (j), a corresponding two-dimensional transform coefficient (a) to a two-dimensional transform coefficient from the neighboring block (i，j ) Add a difference (D) j ) Part (c) of (a).
Determining the middle two-dimensional transform coefficient of the neighboring block in which the current block is above the neighboring block may be expressed as follows:
reconstructed two-dimensional transform coefficients may be determined at 1250. Determining the reconstructed two-dimensional transform coefficient or a portion of the reconstructed two-dimensional transform coefficient at 1250 may include identifying a quantization threshold corresponding to the respective transform coefficient. For example, the quantization threshold of a coefficient may indicate a range of values for the respective coefficient, such as from 50 to 149. Determining the reconstructed two-dimensional transform coefficients may include limiting corresponding intermediate two-dimensional transform coefficients based on quantization thresholds corresponding to the respective transform coefficients. For example, if an intermediate two-dimensional transform coefficient corresponding to a reconstructed two-dimensional transform coefficient has a value below a threshold range, the intermediate two-dimensional transform coefficient may be limited to a lower bound of the threshold range. Similarly, if an intermediate two-dimensional transform coefficient corresponding to a reconstructed two-dimensional transform coefficient has a value above a threshold range, the intermediate two-dimensional transform coefficient may be limited to an upper bound of the threshold range.
For example, the intermediate two-dimensional transform coefficient corresponding to the reconstructed two-dimensional transform coefficient may have a value of 160, the corresponding quantization threshold may indicate a range of values for the respective coefficient from 50 to 149, and the intermediate two-dimensional transform coefficient value 160 may be limited to a maximum value 149 indicated by the corresponding quantization threshold that may be identified as the reconstructed two-dimensional transform coefficient. The reconstructed two-dimensional transform coefficients may be output. For example, the reconstructed two-dimensional transform coefficients may be inverse transformed to form spatial or pixel data, such as reconstructed blocks, and the spatial data may be included in reconstructed frames that may be stored or output for presentation to a user.
As indicated by the dashed lines at 1260, the following may be performed for each boundary of the block: identifying block boundaries at 1210; obtaining adjacent block data at 1220; determining one-dimensional transform coefficients at 1230; determining intermediate two-dimensional transform coefficients at 1240; and determining reconstructed two-dimensional transform coefficients at 1250.
The reconstruction coefficient generated based on the first edge of the current block may be generated based on the decoded transform coefficient, the reconstruction coefficient generated based on the second edge of the current block may be generated based on the reconstruction coefficient generated based on the first edge of the current block, the reconstruction coefficient generated based on the third edge of the current block may be generated based on the reconstruction coefficient generated based on the second edge of the current block, and the reconstruction coefficient generated based on the fourth edge of the current block may be generated based on the reconstruction coefficient generated based on the third edge of the current block.
The reconstruction coefficients generated based on each edge of the current block may be generated based on the decoded transform coefficients, the reconstruction coefficients may be combined, and the transform coefficient continuity smoothing 1200 may be repeated two or more times.
The word "example" or "exemplary" is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as "exemplary" or "exemplary" is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word "example" or "exemplary" is intended to present concepts in a concrete fashion. As used in this application, the term "or" is intended to mean an inclusive "or" rather than an exclusive "or". That is, unless specified otherwise, or clear from context, "X comprises a or B" is intended to mean any of the natural inclusive permutations. That is, if X comprises A; x comprises B; or X includes A and B, then "X includes A or B" is satisfied under any of the foregoing instances. In addition, the articles "a" and "an" as used in this application and the appended claims should be construed generally to mean "one or more" unless specified otherwise or clear from context to be directed to a singular form. Furthermore, the terms "an embodiment" or "one embodiment" or "an implementation" or "one implementation" are not intended to indicate the same embodiment or implementation throughout unless so described. As used herein, the terms "determine" and "identify," or any variation thereof, include selecting, ascertaining, calculating, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any way, regardless of how one or more of the devices shown in fig. 1 are used.
Moreover, for simplicity of explanation, while the figures and descriptions herein may include a sequence or series of steps or stages, the elements of the methods disclosed herein may occur in various orders and/or concurrently. Additionally, elements of the methods disclosed herein may appear with other elements not explicitly shown or described herein. Furthermore, one or more elements of methods described herein may be omitted from embodiments of methods according to the disclosed subject matter.
Embodiments of the transmitting computing and communication device 100A and/or the receiving computing and communication device 100B (as well as algorithms, methods, instructions, etc. stored thereon and/or executed thereby) may be implemented in hardware, software, or any combination thereof. The hardware may include, for example, a computer, an Intellectual Property (IP) core, an Application Specific Integrated Circuit (ASIC), a programmable logic array, an optical processor, a programmable logic controller, microcode, a microcontroller, a server, a microprocessor, a digital signal processor, or any other suitable circuit. In the claims, the term "processor" should be understood to encompass any of the foregoing hardware, alone or in combination. The terms "signal" and "data" are used interchangeably. Further, portions of the transmitting computing and communication device 100A and the receiving computing and communication device 100B do not necessarily have to be implemented in the same manner.
Further, in one embodiment, for example, the transmitting computing and communication device 100A or the receiving computing and communication device 100B may be implemented using a computer program that, when executed, performs the respective methods, algorithms, and/or instructions described herein. Additionally or alternatively, for example, a special purpose computer/processor may be utilized which may contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein.
The transmitting computing and communication device 100A and the receiving computing and communication device 100B may be implemented on a computer in a real-time video system, for example. Alternatively, the transmitting computing and communication device 100A may be implemented on a server and the receiving computing and communication device 100B may be implemented on a device separate from the server, such as a handheld communication device. In this example, transmitting computing and communication device 100A may encode content into an encoded video signal using encoder 400 and transmit the encoded video signal to the communication device. The communication device may then decode the encoded video signal using the decoder 500. Alternatively, the communication device may decode content stored locally on the communication device, such as content that was not transmitted by the transmitting computing and communication device 100A. Other suitable transmit computing and communication device 100A and receive computing and communication device 100B embodiments are available. For example, the receiving computing and communication device 100B may be a generally stationary personal computer rather than a portable communication device, and/or the device including the encoder 400 may also include the decoder 500.
Further, all or a portion of the embodiments may take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium may be, for example, any apparatus that can tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium may be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable media are also available.
The above embodiments have been described in order to allow easy understanding of the present application without limitation. On the contrary, this application is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures as is permitted under the law.
Claims (18)
1. A method, comprising:
generating, by a processor, a reconstructed frame by decoding the encoded bitstream, wherein decoding comprises:
obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame, wherein obtaining the encoded block data from the encoded bitstream comprises obtaining two-dimensional transform coefficients for the current block from the encoded bitstream;
generating reconstructed block data for the current block using transform coefficient continuity smoothing based on the encoded block data, wherein transform coefficient continuity smoothing comprises:
for a block boundary of the current block:
in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, performing transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary, wherein performing transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary comprises:
determining one-dimensional transform coefficients for the current block based on the block boundary and the two-dimensional transform coefficients for the current block; and
determining a middle two-dimensional transform coefficient of the current block based on the two-dimensional transform coefficient of the current block and a difference between the one-dimensional transform coefficient of the current block and a one-dimensional transform coefficient of the neighboring block; and
including the reconstructed block data in the reconstructed frame; and
and outputting the reconstructed frame.
2. The method of claim 1, wherein determining the one-dimensional transform coefficients for the current block comprises at least one of:
in response to determining that the block boundary corresponds to a left edge of the current block, for a current row of the two-dimensional transform coefficients from the current block, determining a sum of the two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the current block as the left one-dimensional transform coefficient of a corresponding row of left one-dimensional transform coefficients from the current block;
in response to determining that the block boundary corresponds to a right edge of the current block, for the current row of the two-dimensional transform coefficients from the current block, determining the sum of the two-dimensional transform coefficients from the current row of the two-dimensional transform coefficients from the current block as the right one-dimensional transform coefficient from the corresponding row of right one-dimensional transform coefficients for the current block using alternating sign summation;
in response to determining that the block boundary corresponds to an upper edge of the current block, for a current column of the two-dimensional transform coefficients from the current block, determining a sum of two-dimensional transform coefficients from the current column of the two-dimensional transform coefficients of the current block as the upper one-dimensional transform coefficients from a corresponding column of upper one-dimensional transform coefficients of the current block; or
In response to determining that the block boundary corresponds to a lower edge of the current block, for the current column of the two-dimensional transform coefficients from the current block, determining the sum of the two-dimensional transform coefficients from the current column of the two-dimensional transform coefficients of the current block as the lower one-dimensional transform coefficient from the corresponding column of lower one-dimensional transform coefficients of the current block using alternating sign summation.
3. The method of claim 2, wherein performing transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary comprises:
obtaining two-dimensional transform coefficients of the neighboring blocks; and
determining the one-dimensional transform coefficients of the neighboring block based on the block boundary and the two-dimensional transform coefficients of the neighboring block, wherein determining the one-dimensional transform coefficients of the neighboring block comprises at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine, for a current row of the two-dimensional transform coefficients from the neighboring block, a sum of two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the neighboring block as the right one-dimensional transform coefficient of a corresponding row of right one-dimensional transform coefficients from the neighboring block using alternating sign summation;
in response to determining that the block boundary corresponds to the right edge of the current block, determine, for the current row of the two-dimensional transform coefficients from the neighboring block, the sum of the two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the neighboring block as the left one-dimensional transform coefficient of a corresponding row of left one-dimensional transform coefficients from the neighboring block;
in response to determining that the block boundary corresponds to the upper edge of the current block, determine, for a current column of the two-dimensional transform coefficients from the neighboring block, a sum of the two-dimensional transform coefficients of the current column of the two-dimensional transform coefficients from the neighboring block as a next-dimensional transform coefficient of a corresponding column of next-dimensional transform coefficients from the neighboring block using alternating sign summation; or
In response to determining that the block boundary corresponds to the lower edge of the current block, for the current column of two-dimensional transform coefficients from the neighboring block, determining the sum of the two-dimensional transform coefficients of the current column of two-dimensional transform coefficients from the neighboring block as the upper one-dimensional transform coefficients of a corresponding column of upper one-dimensional transform coefficients from the neighboring block.
4. The method of claim 3, wherein determining the intermediate two-dimensional transform coefficient for the current block comprises: for a current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficient from the current block, the current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficient from the current block spatially corresponding to the current row of the two-dimensional transform coefficient from the current block and a current column of the two-dimensional transform coefficient from the current block, at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine the current intermediate two-dimensional transform coefficient from the intermediate two-dimensional transform coefficient of the current block by multiplying a corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by a portion of a difference between the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the current block and the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the neighboring block;
in response to determining that the block boundary corresponds to the right edge of the current block, determine the current middle two-dimensional transform coefficient of the middle two-dimensional transform coefficient from the current block by multiplying the corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by the portion of the difference between the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the current block and the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the neighboring block using alternating symbol multiplication;
in response to determining that the block boundary corresponds to the top edge of the current block, determine the current intermediate two-dimensional transform coefficient from the intermediate two-dimensional transform coefficient of the current block by multiplying the corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by the portion of the difference between the top one-dimensional transform coefficient from a corresponding column of top one-dimensional transform coefficients of the current block and the bottom one-dimensional transform coefficient from a corresponding column of bottom one-dimensional transform coefficients of the neighboring block; or
In response to determining that the block boundary corresponds to the lower edge of the current block, determine the current middle two-dimensional transform coefficient of the middle two-dimensional transform coefficient from the current block by multiplying the corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by the portion of the difference between the lower one-dimensional transform coefficient from the corresponding column of lower one-dimensional transform coefficients of the current block and the upper one-dimensional transform coefficient from the corresponding column of upper one-dimensional transform coefficients of the neighboring block using alternating symbol multiplication.
5. The method of claim 3, wherein generating reconstructed block data for the current block comprises generating partial reconstructed block data for the neighboring blocks by:
determining a middle two-dimensional transform coefficient of the neighboring block based on the two-dimensional transform coefficient of the neighboring block and the difference between the one-dimensional transform coefficient of the current block and the one-dimensional transform coefficient of the neighboring block.
6. The method of claim 5, wherein determining the intermediate two-dimensional transform coefficients of the neighboring block comprises: for a current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the neighboring block, the current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the neighboring block spatially corresponds to the current row of the two-dimensional transform coefficients from the neighboring block and a current column of the two-dimensional transform coefficients from the neighboring block, at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine the current middle two-dimensional transform coefficient for the middle two-dimensional transform coefficient from the neighboring block by multiplying a corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the neighboring block and the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the current block using alternating sign multiplication;
in response to determining that the block boundary corresponds to the right edge of the current block, determine the current intermediate two-dimensional transform coefficient from the intermediate two-dimensional transform coefficient of the neighboring block by multiplying the corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the neighboring block and the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the current block;
in response to determining that the block boundary corresponds to the upper edge of the current block, determine the current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the neighboring block by multiplying a corresponding two-dimensional transform coefficient of the two-dimensional transform coefficients from the neighboring block by the portion of the difference between the lower one-dimensional transform coefficient from a corresponding column of lower one-dimensional transform coefficients of the neighboring block and the upper one-dimensional transform coefficient from a corresponding column of upper one-dimensional transform coefficients of the current block using alternating symbol multiplication; or
In response to determining that the block boundary corresponds to the lower edge of the current block, determine the current intermediate two-dimensional transform coefficient from the neighboring block by multiplying the corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the upper one-dimensional transform coefficient from a corresponding column of upper one-dimensional transform coefficients of the neighboring block and the lower one-dimensional transform coefficient from a corresponding column of lower one-dimensional transform coefficients of the current block.
7. The method of claim 5, wherein generating the partial reconstruction block data of the neighboring blocks comprises:
generating partially reconstructed two-dimensional transform coefficients of the neighboring blocks based on the intermediate two-dimensional transform coefficients of the neighboring blocks and corresponding quantization thresholds; and
including the partially reconstructed two-dimensional transform coefficients of the neighboring block in the partial reconstruction block data of the neighboring block.
8. The method of any of claims 1 to 7, wherein transform coefficient continuity smoothing based on the two-dimensional transform coefficients from the current block of the encoded bitstream comprises:
generating partially reconstructed two-dimensional transform coefficients for the current block based on the intermediate two-dimensional transform coefficients for the current block and a corresponding quantization threshold; and
including the partially reconstructed two-dimensional transform coefficients in the reconstructed block data for the current block.
9. A decoder, comprising:
a processor configured to:
obtaining encoded block data from an encoded bitstream, the encoded block data corresponding to a current block from a reconstructed frame, wherein the processor is configured to obtain the encoded block data from the encoded bitstream by obtaining two-dimensional transform coefficients for the current block from the encoded bitstream;
generating reconstructed block data of the current block using transform coefficient continuity smoothing based on the encoded block data, wherein transform coefficient continuity smoothing comprises:
for a block boundary of the current block:
in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, performing transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary, wherein to perform transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary, the processor is configured to:
determining one-dimensional transform coefficients for the current block based on the block boundary and the two-dimensional transform coefficients for the current block; and
determining a middle two-dimensional transform coefficient of the current block based on the two-dimensional transform coefficient of the current block and a difference between the one-dimensional transform coefficient of the current block and a one-dimensional transform coefficient of the neighboring block; and
including the reconstructed block data in the reconstructed frame; and
and outputting the reconstructed frame.
10. The decoder of claim 9, wherein the processor is configured to determine the one-dimensional transform coefficients for the current block by at least one of:
in response to determining that the block boundary corresponds to a left edge of the current block, for a current row of the two-dimensional transform coefficients from the current block, determining a sum of the two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the current block as the left one-dimensional transform coefficient of a corresponding row of left one-dimensional transform coefficients from the current block;
in response to determining that the block boundary corresponds to a right edge of the current block, for the current row of the two-dimensional transform coefficients from the current block, determining the sum of the two-dimensional transform coefficients from the current row of the two-dimensional transform coefficients from the current block as the right one-dimensional transform coefficient from the corresponding row of right one-dimensional transform coefficients for the current block using alternating sign summation;
in response to determining that the block boundary corresponds to an upper edge of the current block, for a current column of the two-dimensional transform coefficients from the current block, determining a sum of two-dimensional transform coefficients of the current column of the two-dimensional transform coefficients from the current block as the upper one-dimensional transform coefficients of a corresponding column of upper one-dimensional transform coefficients from the current block; or
In response to determining that the block boundary corresponds to a lower edge of the current block, for the current column of the two-dimensional transform coefficients from the current block, determining the sum of the two-dimensional transform coefficients of the current column of the two-dimensional transform coefficients from the current block as the next-dimensional transform coefficient from the corresponding column of next-dimensional transform coefficients of the current block using alternating sign summation.
11. The decoder of claim 10, wherein the processor is configured to perform transform coefficient continuity smoothing based on the current block and the neighboring block by:
obtaining two-dimensional transform coefficients of the neighboring blocks; and
determining the one-dimensional transform coefficients of the neighboring block based on the block boundary and the two-dimensional transform coefficients of the neighboring block, wherein determining the one-dimensional transform coefficients of the neighboring block comprises at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine, for a current row of the two-dimensional transform coefficients from the neighboring block, a sum of two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the neighboring block as the right one-dimensional transform coefficient of a corresponding row of right one-dimensional transform coefficients from the neighboring block using alternating sign summation;
in response to determining that the block boundary corresponds to the right edge of the current block, determine, for the current row of the two-dimensional transform coefficients from the neighboring block, the sum of the two-dimensional transform coefficients of the current row of the two-dimensional transform coefficients from the neighboring block as the left one-dimensional transform coefficient of a corresponding row of left one-dimensional transform coefficients from the neighboring block;
in response to determining that the block boundary corresponds to the upper edge of the current block, determine, for a current column of the two-dimensional transform coefficients from the neighboring block, a sum of the two-dimensional transform coefficients of the current column of the two-dimensional transform coefficients from the neighboring block as a next-dimensional transform coefficient of a corresponding column of next-dimensional transform coefficients from the neighboring block using alternating sign summation; or
In response to determining that the block boundary corresponds to the lower edge of the current block, for the current column of two-dimensional transform coefficients from the neighboring block, determining the sum of the two-dimensional transform coefficients of the current column of two-dimensional transform coefficients from the neighboring block as the upper one-dimensional transform coefficients of a corresponding column of upper one-dimensional transform coefficients from the neighboring block.
12. The decoder of claim 11, wherein the processor is configured to, for a current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the current block, the current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the current block spatially corresponding to the current row of the two-dimensional transform coefficients from the current block and a current column of the two-dimensional transform coefficients from the current block, determine the intermediate two-dimensional transform coefficient of the current block by at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine the current middle two-dimensional transform coefficient from the middle two-dimensional transform coefficient of the current block by multiplying a corresponding two-dimensional transform coefficient from the current block by a portion of a difference between the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the current block and the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the neighboring block;
in response to determining that the block boundary corresponds to the right edge of the current block, determine the current middle two-dimensional transform coefficient for the middle two-dimensional transform coefficient from the current block by multiplying the corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by the portion of the difference between the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the current block and the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the neighboring block using alternating symbol multiplication;
in response to determining that the block boundary corresponds to the top edge of the current block, determine the current intermediate two-dimensional transform coefficient from the intermediate two-dimensional transform coefficient of the current block by multiplying the corresponding two-dimensional transform coefficient from the two-dimensional transform coefficient of the current block by the portion of the difference between the top one-dimensional transform coefficient from a corresponding column of top one-dimensional transform coefficients of the current block and the bottom one-dimensional transform coefficient from a corresponding column of bottom one-dimensional transform coefficients of the neighboring block; or
In response to determining that the block boundary corresponds to the lower edge of the current block, determine the current middle two-dimensional transform coefficient from the middle two-dimensional transform coefficient of the current block by multiplying the corresponding two-dimensional transform coefficient from the current block by the portion of the difference between the lower one-dimensional transform coefficient from a corresponding column of lower one-dimensional transform coefficients of the current block and the upper one-dimensional transform coefficient from a corresponding column of upper one-dimensional transform coefficients of the neighboring block using alternating symbol multiplication.
13. The decoder of claim 11, wherein the processor is configured to generate reconstructed block data for the current block, comprising generating partial reconstructed block data for the neighboring blocks by:
determining a middle two-dimensional transform coefficient of the neighboring block based on the two-dimensional transform coefficient of the neighboring block and the difference between the one-dimensional transform coefficient of the current block and the one-dimensional transform coefficient of the neighboring block.
14. The decoder of claim 13, wherein the processor is configured to determine, for a current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the neighboring block, the current intermediate two-dimensional transform coefficient of the intermediate two-dimensional transform coefficients from the neighboring block spatially corresponding to the current row of the two-dimensional transform coefficients from the neighboring block and a current column of the two-dimensional transform coefficients from the neighboring block, the intermediate two-dimensional transform coefficient of the neighboring block by at least one of:
in response to determining that the block boundary corresponds to the left edge of the current block, determine the current middle two-dimensional transform coefficient for the middle two-dimensional transform coefficient from the neighboring block by multiplying a corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the neighboring block and the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the current block using alternating sign multiplication;
in response to determining that the block boundary corresponds to the right edge of the current block, determine the current intermediate two-dimensional transform coefficient from the intermediate two-dimensional transform coefficient of the neighboring block by multiplying the corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the left one-dimensional transform coefficient from a corresponding row of left one-dimensional transform coefficients of the neighboring block and the right one-dimensional transform coefficient from a corresponding row of right one-dimensional transform coefficients of the current block;
in response to determining that the block boundary corresponds to the upper edge of the current block, determine the current middle two-dimensional transform coefficient from the middle two-dimensional transform coefficient of the neighboring block by multiplying a corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the lower one-dimensional transform coefficient from a corresponding column of lower one-dimensional transform coefficients of the neighboring block and the upper one-dimensional transform coefficient from a corresponding column of upper one-dimensional transform coefficients of the current block using alternating symbol multiplication; or
In response to determining that the block boundary corresponds to the lower edge of the current block, determine the current intermediate two-dimensional transform coefficient from the neighboring block by multiplying the corresponding two-dimensional transform coefficient from the neighboring block by the portion of the difference between the upper one-dimensional transform coefficient from a corresponding column of upper one-dimensional transform coefficients of the neighboring block and the lower one-dimensional transform coefficient from a corresponding column of lower one-dimensional transform coefficients of the current block.
15. The decoder of claim 13, wherein the processor is configured to generate the partial reconstruction block data of the neighboring block by:
generating partially reconstructed two-dimensional transform coefficients of the neighboring blocks based on the intermediate two-dimensional transform coefficients of the neighboring blocks and corresponding quantization thresholds; and
including the partially reconstructed two-dimensional transform coefficients of the neighboring block in the partial reconstruction block data of the neighboring block.
16. The decoder of any of claims 9 to 15, wherein the processor is configured to perform transform coefficient continuity smoothing based on the two-dimensional transform coefficients from the current block of the encoded bitstream by:
generating partially reconstructed two-dimensional transform coefficients for the current block based on the intermediate two-dimensional transform coefficients for the current block and a corresponding quantization threshold; and
including the partially reconstructed two-dimensional transform coefficients in the reconstructed block data for the current block.
17. A non-transitory computer-readable storage medium comprising executable instructions executed by a processor to perform:
generating, by a processor, a reconstructed frame by decoding the encoded bitstream, wherein decoding comprises:
obtaining encoded block data from the encoded bitstream, the encoded block data corresponding to a current block from the reconstructed frame and including two-dimensional transform coefficients of the current block;
generating reconstructed block data for the current block using transform coefficient continuity smoothing based on the encoded block data, wherein transform coefficient continuity smoothing comprises:
for a block boundary of the current block:
in response to determining that neighboring block data corresponding to a neighboring block that is spatially adjacent to the current block along the block boundary is available, performing transform coefficient continuity smoothing based on the current block, the neighboring block, and the block boundary, wherein performing transform coefficient continuity smoothing based on the current block and the neighboring block comprises:
determining one-dimensional transform coefficients for the current block based on the block boundary and the two-dimensional transform coefficients for the current block; and
determining a middle two-dimensional transform coefficient of the current block based on the two-dimensional transform coefficient of the current block and a difference between the one-dimensional transform coefficient of the current block and a one-dimensional transform coefficient of the neighboring block; and
including the reconstructed block data in the reconstructed frame; and
and outputting the reconstructed frame.
18. The non-transitory computer-readable storage medium of claim 17, wherein transform coefficient continuity smoothing based on the two-dimensional transform coefficient from the current block of the encoded bitstream comprises:
generating partially reconstructed two-dimensional transform coefficients for the current block based on the intermediate two-dimensional transform coefficients for the current block and a corresponding quantization threshold; and
including the partially reconstructed two-dimensional transform coefficients in the reconstructed block data for the current block.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/807,622 US11457239B2 (en) | 2017-11-09 | 2017-11-09 | Block artefact reduction |
US15/807,622 | 2017-11-09 | ||
PCT/US2018/046449 WO2019094080A1 (en) | 2017-11-09 | 2018-08-13 | Block artefact reduction |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110741645A CN110741645A (en) | 2020-01-31 |
CN110741645B true CN110741645B (en) | 2022-10-04 |
Family
ID=63405473
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880036914.XA Active CN110741645B (en) | 2017-11-09 | 2018-08-13 | Blockiness reduction |
Country Status (4)
Country | Link |
---|---|
US (1) | US11457239B2 (en) |
EP (1) | EP3707905A1 (en) |
CN (1) | CN110741645B (en) |
WO (1) | WO2019094080A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11336954B1 (en) | 2018-12-12 | 2022-05-17 | Amazon Technologies, Inc. | Method to determine the FPS on a client without instrumenting rendering layer |
US10971161B1 (en) | 2018-12-12 | 2021-04-06 | Amazon Technologies, Inc. | Techniques for loss mitigation of audio streams |
US11252097B2 (en) | 2018-12-13 | 2022-02-15 | Amazon Technologies, Inc. | Continuous calibration of network metrics |
US11356326B2 (en) | 2018-12-13 | 2022-06-07 | Amazon Technologies, Inc. | Continuously calibrated network system |
US11368400B2 (en) | 2018-12-13 | 2022-06-21 | Amazon Technologies, Inc. | Continuously calibrated network system |
US11016792B1 (en) | 2019-03-07 | 2021-05-25 | Amazon Technologies, Inc. | Remote seamless windows |
US11245772B1 (en) | 2019-03-29 | 2022-02-08 | Amazon Technologies, Inc. | Dynamic representation of remote computing environment |
US11461168B1 (en) * | 2019-03-29 | 2022-10-04 | Amazon Technologies, Inc. | Data loss protection with continuity |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2005311512A (en) * | 2004-04-19 | 2005-11-04 | Toshiba Corp | Error concealment method and decoder |
EP2192786A1 (en) * | 2008-11-27 | 2010-06-02 | Panasonic Corporation | Frequency domain filters for video coding |
CN103813176A (en) * | 2012-11-14 | 2014-05-21 | 北京三星通信技术研究有限公司 | Deblocking filter method and adaptive loop filter method in video encoding and decoding |
CN106303550A (en) * | 2015-06-11 | 2017-01-04 | 华为技术有限公司 | Block-eliminating effect filtering method and block elimination effect filter |
CN107211154A (en) * | 2015-02-11 | 2017-09-26 | 高通股份有限公司 | Decoding tree cell level auto-adaptive loop filter |
Family Cites Families (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5684544A (en) | 1995-05-12 | 1997-11-04 | Intel Corporation | Apparatus and method for upsampling chroma pixels |
US20030222998A1 (en) | 2000-12-20 | 2003-12-04 | Satoru Yamauchi | Digital still camera system and method |
EP2899977A1 (en) | 2002-01-31 | 2015-07-29 | Samsung Electronics Co., Ltd | Filtering method and apparatus for reducing block artifacts or ringing noise |
KR100846774B1 (en) | 2002-05-03 | 2008-07-16 | 삼성전자주식회사 | Filtering method for removing block artifacts and/or ringing noise and apparatus therefor |
JP5076755B2 (en) | 2007-09-07 | 2012-11-21 | ソニー株式会社 | Image processing apparatus, image processing method, and computer program |
US7965900B2 (en) | 2007-09-26 | 2011-06-21 | Hewlett-Packard Development Company, L.P. | Processing an input image to reduce compression-related artifacts |
KR101432775B1 (en) * | 2008-09-08 | 2014-08-22 | 에스케이텔레콤 주식회사 | Video Encoding/Decoding Method and Apparatus Using Arbitrary Pixel in Subblock |
KR101647376B1 (en) | 2009-03-30 | 2016-08-10 | 엘지전자 주식회사 | A method and an apparatus for processing a video signal |
JP5302769B2 (en) * | 2009-05-14 | 2013-10-02 | キヤノン株式会社 | Scan conversion apparatus, image encoding apparatus, and control method thereof |
KR101675116B1 (en) * | 2009-08-06 | 2016-11-10 | 삼성전자 주식회사 | Method and apparatus for encoding video, and method and apparatus for decoding video |
CA2873487A1 (en) | 2012-05-14 | 2013-11-21 | Luca Rossato | Decomposition of residual data during signal encoding, decoding and reconstruction in a tiered hierarchy |
US9596461B2 (en) | 2012-11-26 | 2017-03-14 | Qualcomm Incorporated | Loop filtering across constrained intra block boundaries in video coding |
EP2962449A1 (en) | 2013-02-26 | 2016-01-06 | Nintendo European Research And Development | Block color conversion |
EP3195597A4 (en) | 2014-09-19 | 2018-02-21 | Telefonaktiebolaget LM Ericsson (publ) | Methods, encoders and decoders for coding of video sequences |
CN107211146A (en) * | 2014-11-21 | 2017-09-26 | Vid拓展公司 | One-dimensional transform pattern and coefficient scanning order |
CN105306959B (en) | 2015-10-24 | 2018-08-21 | 广东医群科技有限公司 | A kind of low delay network self-adapting live broadcast system |
CN105306956B (en) * | 2015-11-13 | 2018-03-27 | 浙江工商大学 | A kind of method of raising HEVC encoder discrete cosine transform processing speeds |
-
2017
- 2017-11-09 US US15/807,622 patent/US11457239B2/en active Active
-
2018
- 2018-08-13 EP EP18760211.5A patent/EP3707905A1/en not_active Withdrawn
- 2018-08-13 WO PCT/US2018/046449 patent/WO2019094080A1/en unknown
- 2018-08-13 CN CN201880036914.XA patent/CN110741645B/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2005311512A (en) * | 2004-04-19 | 2005-11-04 | Toshiba Corp | Error concealment method and decoder |
EP2192786A1 (en) * | 2008-11-27 | 2010-06-02 | Panasonic Corporation | Frequency domain filters for video coding |
CN103813176A (en) * | 2012-11-14 | 2014-05-21 | 北京三星通信技术研究有限公司 | Deblocking filter method and adaptive loop filter method in video encoding and decoding |
CN107211154A (en) * | 2015-02-11 | 2017-09-26 | 高通股份有限公司 | Decoding tree cell level auto-adaptive loop filter |
CN106303550A (en) * | 2015-06-11 | 2017-01-04 | 华为技术有限公司 | Block-eliminating effect filtering method and block elimination effect filter |
Also Published As
Publication number | Publication date |
---|---|
US11457239B2 (en) | 2022-09-27 |
CN110741645A (en) | 2020-01-31 |
WO2019094080A1 (en) | 2019-05-16 |
EP3707905A1 (en) | 2020-09-16 |
US20190141351A1 (en) | 2019-05-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110741645B (en) | Blockiness reduction | |
US10694180B2 (en) | Entropy coding transform partitioning information | |
CN107027033B (en) | Video coding and decoding method for copying by using patch | |
US9769499B2 (en) | Super-transform video coding | |
CN115134602A (en) | Low latency two-pass video coding | |
US11765377B2 (en) | Alpha channel prediction | |
US20170237939A1 (en) | Loop filtering for multiform transform partitioning | |
CN107302701B (en) | Decoding interpolation filter types | |
US20230308679A1 (en) | Motion prediction coding with coframe motion vectors | |
US11153588B2 (en) | Dual deblocking filter thresholds | |
US10652552B1 (en) | Efficient noise reduction coding | |
US20220046242A1 (en) | Quantization constrained neural image coding | |
CN107079156B (en) | Method for alternate block constrained decision mode coding | |
US10951921B2 (en) | Adjustable per-symbol entropy coding probability updating for image and video coding | |
US20230291925A1 (en) | Inter-Intra Prediction With Implicit Models | |
WO2024005777A1 (en) | Circular-shift transformation for image and video coding | |
CN116783890A (en) | Chroma transform type determination |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |