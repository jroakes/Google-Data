CN117332096A - Semantic annotations and frameworks in a storage API - Google Patents
Semantic annotations and frameworks in a storage API Download PDFInfo
- Publication number
- CN117332096A CN117332096A CN202311326497.1A CN202311326497A CN117332096A CN 117332096 A CN117332096 A CN 117332096A CN 202311326497 A CN202311326497 A CN 202311326497A CN 117332096 A CN117332096 A CN 117332096A
- Authority
- CN
- China
- Prior art keywords
- semantic
- data
- presentation data
- search
- presentation
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012545 processing Methods 0.000 claims description 69
- 238000000034 method Methods 0.000 claims description 47
- 230000015654 memory Effects 0.000 claims description 26
- 230000006870 function Effects 0.000 claims description 20
- 238000010801 machine learning Methods 0.000 claims description 8
- 238000013507 mapping Methods 0.000 claims description 6
- 239000000284 extract Substances 0.000 claims description 4
- 230000026676 system process Effects 0.000 abstract 1
- 238000005516 engineering process Methods 0.000 description 30
- 238000004891 communication Methods 0.000 description 13
- 238000006243 chemical reaction Methods 0.000 description 5
- 229920002334 Spandex Polymers 0.000 description 4
- 238000013515 script Methods 0.000 description 4
- 239000004759 spandex Substances 0.000 description 4
- 238000010586 diagram Methods 0.000 description 2
- 238000001914 filtration Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- 241000282326 Felis catus Species 0.000 description 1
- 230000004931 aggregating effect Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 230000014509 gene expression Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 238000012549 training Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/36—Creation of semantic tools, e.g. ontology or thesauri
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/40—Information retrieval; Database structures therefor; File system structures therefor of multimedia data, e.g. slideshows comprising image and additional audio data
- G06F16/48—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
Abstract
The present disclosure relates to semantic annotations and frameworks in a storage API. A system and mechanism for performing semantic searches of unstructured data, such as audio, images, and video. The system processes raw input data (e.g., presentation data) to determine data patterns and organizes semantic space around those data patterns. The query is then processed to determine data patterns in the semantic space, which may be associated with the semantic space and used in searching the semantic space.
Description
Technical Field
The present disclosure relates to semantic annotations and frameworks in a storage API.
Background
The generation, sharing, processing and/or storage of audio, video and/or image content has experienced an unprecedented growth, largely due to the widespread availability and use of smartphones. An important function accompanying this growth is the ability to search and retrieve relevant audio, video or images in response to search queries. Potential applications span the full range of objects from, for example, looking for cat video (fun), medical images (diagnostics), specific vehicles (crimes), or more generally looking for video or image streams.
Searching databases that house audio, video, and image content (e.g., searching media warehouses) presents certain challenges. For example, ambiguity may exist in the data (i.e., presentation data) that is to be indexed or used to construct the search query. The data may come from user input to the database (e.g., user Generated Annotations (UGA), search queries or requests (e.g., search criteria, search operators, original text queries, etc.), or may come from processing of user input data to the database (e.g., machine Learning (ML) annotations, etc.), data (particularly data entered directly by the user) may include ambiguities that introduce misalignments between the index and the search data space.
Disclosure of Invention
Aspects of the disclosed technology may include a system, process or method, or a non-transitory computer-readable medium. For example, the disclosed techniques may take the form of a system including memory elements storing instructions; and a processing element coupled to the memory element and configured to use the instructions: converting annotations associated with unstructured data into semantic data; indexing the semantic data in semantic space to produce indexed semantic data; receiving a search request; and constructing a semantic query based on the search request by converting the search request into semantic data based on the indexed semantic data.
According to this aspect of the disclosed technology, the unstructured data includes video data, image data, or audio data. Further, in accordance with this aspect of the disclosed technology, the annotations include user-generated annotations or machine-learning-generated annotations.
In accordance with this aspect of the disclosed technology, annotating includes presenting data. Further, the processing element is configured to implement a library function using the instructions, the library function taking the presentation data as input and identifying a presentation data pattern from among the entered presentation data. Still further, the library function may extract the identified presentation data patterns mapped to one or more semantic spaces. Still further, the library function may use one or more semantic spaces to construct semantic queries. Furthermore, the indexed data is associated with one or more semantic spaces. In addition, the semantic space is organized using the identified presentation data patterns as keys. Further, the processing element is associated with a semantic space inference hub that integrates two or more inference policies. Still further, the semantic inference hub generates a mapping between the identified presentation data patterns and one or more semantic spaces.
As another example, the disclosed technology may take the form of a system for semantically processing queries that includes a memory element storing instructions; and one or more processing devices coupled to the memory element and configured to use the instructions: receiving presentation data; converting the presentation data into one or more presentation mode data; indexing one or more presentation mode data for a key-value semantic space using one or more presentation data modes as keys associated with data values to produce key-value semantic data; receiving a search query; processing the search query into a semantic search query by comparing the semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data; searching records indicating matches between the semantic search presentation data patterns and at least one of the one or more presentation data patterns associated with the key-value semantic data to produce search results; and providing the search results to the user.
In accordance with this aspect of the disclosed technology, one or more processing devices are configured to implement a semantic search policy engine that implements one or more inference policies that determine how presentation data and search presentation data should be interpreted and output one or more presentation data patterns and semantic search presentation data patterns. Further, in accordance with this aspect of the disclosed technology, a semantic search policy engine includes a semantic service library having presentation data as input, an inference policy based on these data patterns identifying configured data patterns in the input presentation data, and extracting the identified data patterns. Still further, the semantic service library constructs key-value semantic data into presentation data patterns and semantic space tuples.
Further, in accordance with this aspect of the disclosed technology, a semantic search policy engine may be coupled to a semantic space inference interface that processes one or more presentation data patterns and semantic search presentation data patterns to identify semantics associated with the one or more presentation data patterns and semantic search presentation data patterns, respectively. Still further, the semantic space inference interface may be coupled to a semantic space inference hub that validates one or more presentation data patterns and provides validated ones of the one or more presentation data patterns as key-value semantic data for storage in the database.
Further, in accordance with this aspect of the disclosed technology, the presentation data includes User Generated Annotations (UGAs) or Machine Learning Annotations (MLAs). Still further, UGA and MLA are associated with audio, image or video content.
In another example, the disclosed technology may take the form of a method for semantically processing a query, the method comprising: receiving presentation data at one or more processing devices; converting, using one or more processing devices, the presentation data into one or more presentation mode data; indexing, using the one or more processing devices, one or more presentation data patterns for the key-value semantic space using the one or more presentation data patterns as keys associated with the data values to produce key-value semantic data; receiving a search query; processing, using the one or more processing devices, the search query into a semantic search query by comparing the semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data; searching, using one or more processing devices, for a record indicating a match between a semantic search presentation data pattern and at least one of the one or more presentation data patterns associated with key-value semantic data to produce a search result; and providing the search results to the user using the one or more processing devices.
Drawings
FIG. 1 illustrates an example process in accordance with an aspect of the disclosed technology.
FIG. 2 illustrates a functional block diagram of an example system in accordance with an aspect of the disclosed technology.
Fig. 3 illustratively depicts an example of a semantic space infrastructure in accordance with an aspect of the disclosed technology.
FIG. 4 illustratively depicts an example of a semantic service infrastructure in an index pipeline in accordance with an aspect of the disclosed technology.
FIG. 5 illustratively depicts an example of a semantic service infrastructure in a search pipeline in accordance with an aspect of the disclosed technology.
FIG. 6 illustratively depicts an example of a semantic service library according to one aspect of the disclosed technology.
FIG. 7 illustratively depicts an example computing device in accordance with an aspect of the disclosed technology.
FIG. 8 illustratively depicts an example computing system in accordance with an aspect of the disclosed technology.
Detailed Description
The disclosed technology may take the form of systems (e.g., infrastructure architecture) and processes (e.g., data flows, methods) that provide semantic-based indexing and querying of media-centric databases, such as media repositories. The disclosed techniques may resolve meaning ambiguities caused by user input (e.g., UGA, search query) to a media store and index/search space misalignment based on semantic differences.
In one example, the technology relates to an infrastructure for a semantic space inference subsystem and a semantic service subsystem. The semantic space inference subsystem implements a semantic inference policy to construct a mapping between patterns within presentation data (e.g., presentation data patterns) and semantic space. Such policies typically answer questions of what semantic space should be applied to a given type of presentation data. For example, each semantic space inference policy answers the following questions: when presentation data with a particular pattern should be provided, how the presentation data should be interpreted (semantic conversion method), how the data should be indexed (indexing method), and how the data should be used to construct a search query (search method). Semantic conversion methods include direct mapping conversion from user input to semantics and Machine Learning (ML) model inference. The indexing technique builds search documents from the semantic data and sends them to the index backend.
In another example, the techniques relate to a search method. Search methods typically include query understanding/query rewriting, followed by ranking/retrieval, followed by rotation/post-filtering; rotation is typically a process for filtering/aggregating search results. In more detail, the search method will typically include multimodal search request verification, which may include examining input filters, query text, and image bytes. It may also include semantic inference, which can include converting user-provided query data into semantic representations (in the process we can generate embeddings, rewrite queries with synonyms, or generate some ranking expressions). In addition, a search back-end selection feature may also be implemented. Depending on the query semantics, this feature may result in a request to one or several different search back-ends. Furthermore, the search method may also be such that information is retrieved from all necessary back ends. The semantic service subsystem infrastructure includes a semantic service infrastructure in the index pipeline and a semantic service infrastructure in the search pipeline.
Fig. 1 illustrates a process 100 in accordance with an aspect of the disclosed technology. In process 100, a search request is processed such that it is mapped to semantic space, and a search is performed such that semantically related information is returned as part of the search results. The processing may be performed using a semantic space inference infrastructure and a semantic space services infrastructure. As part of the process, the initial search request is converted into a semantic search query, which is then run against a database indexed according to the semantics used in formulating the semantic search query. The index takes presentation data (e.g., UGA, MLA) and maps them to semantic space. The semantic space is then accessed in response to the search request.
Specifically, at step 110, a search request is received from a user or searcher. The search request may include parameters such as search criteria, search type, and identify one or more audio, image, or video streams relevant to the search. The search criteria may include presentation data and be used to construct a search query. In accordance with aspects of the disclosed technology, the presentation data includes media warehouse data to be indexed or used to construct a search query. As described above, the data may include ambiguity that introduces misalignment between the index and the search results. The presentation data mode includes a mode within presentation data. Examples of presentation data patterns may include UGAs of different value types (e.g., strings, integers, or custom types). UGA can be identified as a different mode by its UGA key. If a particular item appears in the UGA value, a schema can be defined. A schema can also be defined if interpreting a particular UGA requires a value of another UGA.
The data patterns in the repository also include search policies. Search policies can be used to specify the type of search that is performed for a given field, including no search, exact search, or intelligent search. If the fields are of a complex type (e.g., custom structure), the user may further specify which field(s) of the complex type should be used for searching. In the case where fields are used for unstructured data (e.g., images or video), the unstructured data may be annotated by identifying which objects should be extracted from the image/video. However, the user or searcher does not need to annotate what objects are in their image/video. According to one aspect of the disclosed technology, objects are extracted based on field annotations, and a user may search for the extracted objects. Furthermore, users do not need to write code to customize their search capabilities. Another parameter of the search criteria is data identifying the search object, such as an audio, image, or video stream.
At step 120, the search criteria are converted to semantic data. Semantics include information inferred and interpreted from presentation data. Semantics include semantic data and semantic space. Typically, the semantic data includes canonical data that represents presentation data (e.g., presentation data with a clear meaning). To understand the presentation data, a meaning or interpretation "space" associated with the presentation data is identified such that both the index pipeline and the search pipeline can be aligned. Such space is referred to herein as semantic space. The semantic space specifies a method or instruction for: interpreting the presentation data and converting it into canonical semantic data; indexing the semantic data; and constructing the search query using the semantic data. Converting presentation data into semantic data resolves ambiguities embedded within the presentation data and aligns the index and search space. Semantic data typically takes the form of canonical values in the semantic space used to render the data. More specifically, given a presentation data item, once its semantic space is identified, presentation data corresponding to the semantic data can be extracted by applying a semantic data conversion method in the semantic space to the presentation data.
At step 130, the semantic data generated at step 120 is used to construct a semantic query. Semantic space is then searched using the semantic query. In this way, the intent of the searcher and the query context based on the original search criteria are used to perform the search. At step 140, the results of the semantic search are returned to the searcher.
Turning to fig. 2, a functional block diagram of a system 200 in accordance with an aspect of the disclosed technology is illustrated. The system 200 depicts a semantic framework or semantic infrastructure 208 that includes a data input block 214, a corpus configuration block 218, a data schema block 222, a hypernym configuration block 226, and a query presentation block 230. Semantic infrastructure 208 includes semantic space inference engine 240, semantic inference hub 244, annotation block 248, query request block 252, and search backend or database 260.
As shown in FIG. 2, semantic space inference engine 240 includes UGA key-based semantic space inference component 264, semantic space ordering component 268, UGA key-based semantic space 272, and annotation space retrieval component 276. The UGA key based semantic space inference component 264 uses the presentation data schema for the UGA key based policies. For example, the UGA key includes a presentation data mode. The UGA key-based semantic space inference component 264 infers UGA keys based on data patterns in the presentation data. Thus, each UGA key as a presentation data pattern maps to semantic space.
The UGA key based semantic space inference component 264 is coupled to a UGA key based semantic space 272. The UGA key based semantic space 272 includes the semantic space defined by the UGA key. When the UGA key-based semantic space inference component 264 infers one or more UGA keys, those UGA keys are fed into the UGA key-based semantic space 272. The UGA key based semantic space may include five types of information:
metadata: information about semantic space
DataConfig: configuration for converting presentation data into semantic data and constructing and parsing the semantic data
IndexingConfig: configuration for indexing generated semantics
SearchConfig: configuration employing given semantics in building a search query
Reference_confidence_score: confidence score for a given spatial inference
As an example, the semantic data associated with the semantic space 272 may include or take the form of:
the semantic space ordering component 268 and the annotation retrieval semantic space component 276 include two semantic inference policies applied in two scenarios. These policies are installed in the semantic framework 208. The order by semantic space component 268 can be used to understand how the user wants to order the search results. The annotation retrieval semantic space component 276 can be used to understand how users desire to perform a retrieval based on their input annotation data.
As also shown in fig. 2, corpus configuration block 218 is coupled to semantic space inference engine 240. Corpus configuration may include or take the form of, for example:
the data schema block 222 includes a presentation space data schema that can be used to interpret UGA value structures. For example, the data schema may include or take the form of:
hypernym configuration block 226 associates semantic relationships between items belonging to a set defined by one or more other items. For example, a hypernym may include or take the form:
hypernym{
term:“Touchdown”
hyponyms:“Score”
hyponyms:“Pick Six”
}
the data input block 214 includes User Generated Annotations (UGA) that are provided as presentation data that is then indexed before being stored in a semantic space. The input data will typically include annotations 280 and asset content data 282 from the user. As an example, the user annotation 280 may take the form of:
asset content data 282 may include the type of content being indexed, such as video, audio, or images.
Annotation or UGA 280 includes presentation data and is entered or received at semantic inference hub 244. Semantic inference hub 244 may operate on UGA 280 by evaluating whether a given presentation data pattern matches any pre-configured presentation data patterns (e.g., presentationDataPatterns). If there is a match, UGA 280 is mapped to the semantic space, as indicated by comment box 248, and then provided to back end 260. The process may include an indexing process.
User queries or search requests 230 are provided as presentation data to a semantic inference hub 244. The semantic inference hub operates on the request 230 by converting the request 230 into a semantic query request 252, which semantic query request 252 is then used to search a backend or database 260. For example, assume that a searcher or user issues the following original query: NY Giants Touchdown. Such a query would be considered presentation data that can be converted into the following semantic queries:
[1]((NY OR New York)AND Giants)AND
(Touchdown OR TD or Score or Pick Six)
OR
[2](/m/123<NY Giants entity id>AND
/m/456<Touchdown entity id>)
OR
[3]{x,y,z}
the semantic search query [1] includes a synonym/hypernym extension. Semantic search query [2] comprises an entity-generated type query, while semantic search query [3] comprises a text-to-embedded query.
According to system 200, UGA is mapped to a semantic space, which is then used to execute a semantic query derived from an original query request. Because the UGA is indexed to the semantic space for searching, and the original search query is also converted to a semantic request that is aligned to the semantic space, the risk of misalignment is mitigated. In accordance with one aspect of the disclosed technology, the system is applied to unstructured data, such as video, images, or audio, and generally improves the performance of semantic searches performed on such unstructured data.
As previously described, the infrastructure of the disclosed technology may include a semantic space inference infrastructure and a semantic service infrastructure. With respect to FIG. 2, the semantic space inference infrastructure may include portions of semantic space inference engine 240 and semantic inference hub 244. The semantic service infrastructure may include portions of a semantic inference hub 244, an annotation block 248, a query request block 252, and a search back-end 260.
In this regard, fig. 3 illustratively depicts an example of a semantic space inference infrastructure 300 in accordance with an aspect of the disclosed technology. In this example, infrastructure 300 includes an Application Programming Interface (API) server 310 for receiving user input via a user interface 313. The API 310 facilitates user/searcher input of presentation data for indexing and as part of a query request. The API 310 provides its output to the manually specified user interface 316. The user interface 316 is also configured to receive input from the system operator interface 319. As shown, the user interface 316 employs an inference policy engine 322 (e.g., policy 1 through policy N), which inference policy engine 322 is used to determine how presentation data received via the API 310 or system operator interface 319 should be interpreted, indexed, and used to construct a search query.
The output of the policy engine 322 is provided to a semantic space inference interface 325. Semantic interface 325 processes the data it receives and outputs it as data 331 to semantic space inference hub 328. As shown, the output 331 includes data patterns determined from the original presentation data and semantic spaces applied to the presentation data. In some instances, presentation data may be interpreted as being associated with more than one data pattern, and such data patterns may be associated with more than one semantic space. The semantic inference backbone 328 integrates all inference policies and installs each configured inference policy. When configured to work offline, the semantic inference backbone 328 operates as a binary that triggers all installed inference policies to generate a < PresentationDataPattern, semanticSpace > map, validates the results from each installed policy, aggregates the validated results, and stores them in the spandex database. The semantic space inference hub 328 validates the output 331 and outputs the validated data to a back-end database 332, such as, for example, spandex. Upon verifying the output 331, the semantic space inference backbone 328 examines the data patterns and semantic spaces identified in the output 331 to ensure that the corresponding data patterns and semantic spaces exist in the database 332.
The semantic service infrastructure converts presentation data into semantics by applying pre-inferred presentation data patterns to semantic space mappings. The semantic service infrastructure can be configured to have two parts: semantic service infrastructure in the index pipeline and semantic service infrastructure in the search pipeline.
Fig. 4 illustrates an example of a semantic service infrastructure in an index pipeline 400. The infrastructure in this example includes an index asset module executor 410 in communication with a semantic service library 420. The executor 410 includes a FetchMIAnnostionProducer component 431, a FetchUseSpecificDataSchemaProducer component 434, a FetchUseSpecificAnnostionProducer component 437, and a GetAssetProducer component 440, all of which are coupled to or form a SemanticProducer component 443.SemanticProducer component 443 uses components 431, 434, 437 and 440 to obtain the presentation data it sends to semantic library 420. The semantic library 420 determines semantics associated with the presentation data and returns the semantics to the SemanticProducer component 443.
The executor 410 also includes an AssetSearchDocumentProducer component 450 and a Partification SearchDocumentProducer component 453. These components (450, 453) provide output to the backend database 460.
FIG. 4 shows how semantic inference occurs in the index pipeline. The SemanticProducer component 443 is used to generate semantics and/or convert data that has been semantically distinct into a semantic form in the system that can be processed in a unified manner. The getassetProducer 440, fetchmLAnnotection Producer 431, fetchUseSpecificdDataSchemaProducer 434 and FetchUseSpecificdAnnogationProducer 437 are used to extract data for semantic conversion. AssetSearchDocumentProducer 450 and Partification SearchDocumentProducer 453 are used to build semantic data into search documents for retrieval in a query pipeline. SemanticServert 420 converts the semantic data.
Turning now to FIG. 5, an example of a semantic service infrastructure in a search pipeline 500 is shown. The infrastructure in this example includes a search asset handler 510 in communication with a semantic service library 420 and a query transformer 520. The search asset handler 510 includes a prepare query pipeline input component 512, a runquery pipeline component 515, and a search component 517. FIG. 5 illustrates processing associated with how semantic inference occurs in a query pipeline. In this regard, component 510 includes an internal library to accept client search requests and generate results. Component 512 includes pre-retrieval functionality, such as verification, plus semantic inference, to generate an executable back-end search request clause (component 420). Component 515 includes a wrapper component that is responsible for combining semantic data into one search request. The assembly 520 includes smaller modules to assist in the different regions of 515. Component 517 includes the module responsible for issuing search back-end requests and processing results.
The foregoing modules may take the form of object code, software, subroutines, or more generally instructions that cause a processing element to operate in accordance with a given set of instructions to implement the functionality of each component. The foregoing modules may take the form of separate modules or may be combined as desired. In addition, each of the foregoing components may be implemented as one or more modules. Fig. 6 illustratively depicts an example of a system 600 including a semantic service library 610 in accordance with an aspect of the disclosed technology. As shown, the system 600 also includes a back-end database 620, such as spandex. The semantic service library 610 takes presentation data as input, identifies configured data patterns in the input presentation data (based on inference policies for these data patterns), extracts the identified data patterns and maps them to semantic space, and constructs semantics from the presentation data using methods/configurations specified in the semantic space. Since there may be multiple semantic space inference policies to construct the < data pattern, semantic space > map, the manner in which the presence of data patterns in the presentation data is identified and the semantic space of the map is extracted in the semantic service pipeline is also different in the different semantic space inference policies. In other words, each semantic space inference policy has its corresponding semantic inference policy serviced in a semantic service infrastructure to identify that a presentation data schema exists and construct semantics from the presentation data using the mapped semantic space. As shown in fig. 4 and 5, the semantic service library 420 (or 610) is used in both the index and search pipelines to infer semantics from the presentation data. The design allows for plug-in methods and can be used wherever it is desired to extract semantics from presentation data.
As shown in fig. 6, the semantic service library 610 takes as input presentation data 650, which presentation data 650 may include presentation data associated with a search request or annotation input (e.g., UGA or Machine Language Annotation (MLA)). Using one or more of the semantic inference policies (e.g., 640, 642, 644), a presentation data pattern is identified based on the presentation data. This is shown as being performed at functional block or module 652. The function block or module 652 uses the identified patterns to retrieve the configured presentation data patterns 654 from the back-end database 620.
The find semantic space function or module 656 then maps the retrieved presentation patterns to one or more semantic spaces by accessing the back-end database 620. Build semantics function or module 660 constructs semantics associated with presentation data using methods/configurations associated with one or more semantic spaces acquired from accessing backend database 620. As shown, semantic function or module 660 outputs semantics 668.
FIG. 7 depicts an example of a computing device 700 that may be used to perform aspects of the disclosed technology. For example, computing device 700 may be used to implement the processes discussed above, including the processes depicted in fig. 1, as well as the various processes associated with the components and modules discussed in fig. 2-6.
The computing device 700 can take on various configurations, such as, for example, a controller or microcontroller, a processor, or an ASIC. In some examples, computing device 700 may take the form of a server or host that performs the operations described above. In other cases, such operations may be performed by one or more computing devices in a data center. The computing device may include memory 704 including data 708 and instructions 712, as well as processing elements 716, as well as other components typically found in computing devices (e.g., input/output interfaces for keyboards, displays, etc., communication ports for connection to different types of networks).
Memory 704 is capable of storing information accessible by processing element 716, including instructions 712 capable of being executed by processing element 716. The memory 704 can also include data 708 that can be retrieved, manipulated, or stored by the processing element 716. Memory 704 may be one type of non-transitory computer-readable medium capable of storing information accessible by processing element 716, such as a hard disk drive, solid state drive, tape drive, optical storage, memory card, ROM, RAM, DVD, CD-ROM, writeable, and read-only memory. The processing element 716 can be a well-known processor or other less-known type of processor. Alternatively, the processing element 716 can be a dedicated controller, such as an ASIC.
The instructions 712 can be a set of instructions, such as machine code, that are executed directly by the processor 716, or a set of instructions, such as scripts, that are executed indirectly. In this regard, the terms "instruction," "step," and "program" are used interchangeably herein. The instructions 712 can be stored in an object code format for direct processing by the processor 716, or can be stored in other types of computer languages, including as-needed interpreted or pre-compiled scripts or collections of independent source code modules. For example, instructions 712 may include instructions to perform the methods and functions discussed above with respect to generating data quality annotations, metrics, and the like.
The data 708 can be retrieved, stored, or modified by the processor 716 according to instructions 712. For example, although the system and method are not limited by a particular data structure, the data 708 can be stored in a computer register, in a relational database as a table with a plurality of different fields and records, or in an XML document. The data 708 can also be formatted in a computer-readable format such as, but not limited to, binary values, ASCII, or Unicode. In addition, the data 708 can include information sufficient to identify relevant information, such as numbers, descriptive text, proprietary codes, pointers, references to data stored in other memory (including other network locations), or information used by a function to calculate relevant data.
Fig. 7 functionally illustrates the processing element 716 and the memory 704 as being within the same block, but the processing element 716 and the memory 704 may alternatively include multiple processors and memories that may or may not be stored within the same physical housing. For example, some of the instructions 712 and data 708 may be stored on a removable CD-ROM, while others may be within a read-only computer chip. Some or all of the instructions and data can be stored in a location that is physically remote from the processing element 716 but still accessible to the processing element 716. Similarly, processing element 716 can include a collection of processors that may or may not operate in parallel.
Computing device 700 may also include one or more modules 720. Module 720 may take the form of a software module that includes a set of instructions, data, and other components (e.g., libraries) for operating computing device 700 such that it performs certain tasks. For example, a module may take the form of script, program, or instructions to perform one or more functions associated with the modules or components discussed in fig. 2-6. Module 720 may take the form of script, program or instructions to implement the process flow of fig. 1.
In some examples, the disclosed techniques may be implemented as a system 800 in a distributed computing environment as shown in fig. 8. The system 800 includes one or more computing devices 810, which can include the computing device 810 1 To 810 k Storage 836, network 840, and one or more cloud computing systems 850, which may include cloud computing system 850 1 To 850 p . Computing device 810 may include a computing device located at a customer locationIt utilizes cloud computing services such as infrastructure as a service (IaaS), platform as a service (PaaS), and/or software as a service (SaaS). For example, if computing device 810 is located at a business enterprise, computing device 810 may use cloud system 850 as a service to provide software applications (e.g., accounting, word processing, inventory tracking, etc. applications) to computing device 810 for use in operating the enterprise system. Additionally, computing device 810 may access cloud computing system 850 as part of its operation to perform semantic queries of video, audio, or image data to support its business enterprise.
Computing device 810 may include a computing device as discussed with respect to fig. 7. For example, each of the computing devices 810 may include one or more processors 812, memory 816 storing data 834 and instructions 832, a display 820, a communication interface 824, and an input system 828. The processor 812 and the memory 816 may be communicatively coupled as shown in fig. 8. Computing device 810 may also be coupled or connected to storage 836, storage 836 may include local or remote storage, such as on a Storage Area Network (SAN), that stores data accumulated as part of customer operations. Computing device 810 may take the form of a stand-alone computer (e.g., a desktop or laptop computer) or a server associated with a client. A given client may also implement multiple computing devices as servers as part of its business. Memory 816 stores information accessible by one or more processors 812, including instructions 832 and data 834 that may be executed or otherwise used by the processor 812. Memory 816 may be of any type capable of storing information accessible by a processor, including a computing device readable medium, or other medium storing data that can be read by means of an electronic device, such as a hard disk drive, memory card, ROM, RAM, DVD or other optical disk, as well as other writable and read-only memory. The systems and methods may include different combinations of the foregoing whereby different portions of the instructions and data are stored on different types of media.
Computing device 810 may also include a display 820 (e.g., a monitor with a screen, touch screen, projector, television, or other device operable to display information) that provides a user interface that allows control of computing device 810. Such control may include, for example, using a computing device to cause data to be uploaded to the cloud system 850 for processing through the input system 828, to accumulate data on the storage 836, or more generally, to manage different aspects of the customer's computing system. Although the input system 828 may be used to upload data, such as a USB port, the computing system 800 may also include a mouse, keyboard, touch screen, or microphone that can be used to receive commands and/or data.
The network 840 may include various configurations and protocols including near field communication protocols, such as bluetooth TM Bluetooth LE, internet, world wide web, intranet, virtual private network, wide area network, local area network, private network using one or more corporate proprietary communication protocols, ethernet, wiFi, HTTP, etc., as well as various combinations of the foregoing. Such communication may be facilitated by any device capable of transmitting data to and from other computing devices, such as modems and wireless interfaces. Computing device 810 interfaces with network 840 through communication interface 824, which communication interface 824 may include hardware, drivers, and software necessary to support a given communication protocol.
Cloud computing system 850 may include one or more data centers that may be linked via a high-speed communication or computing network. A given data center within system 850 may include a dedicated space within a building that houses computing systems and their associated components, such as storage systems and communication systems. Typically, a data center will include racks of communication equipment, servers/hosts and disks. The servers/hosts and disks include physical computing resources for providing virtual computing resources, such as VMs. Where a given cloud computing system includes more than one data center, these data centers may be in different geographic locations in relatively close proximity to each other, selected to deliver services in a timely and cost-effective manner, as well as provide redundancy and maintain high availability. Similarly, different cloud computing systems are typically provided at different geographic locations.
As shown in fig. 8, computing system 850 may be illustrated as including an infrastructure 852, a storage 854, and a computer system 858. Infrastructure 852, storage 854, and computer system 858 can comprise a data center within cloud computing system 850. Infrastructure 852 can include servers, switches, physical links (e.g., fiber optics), and other devices for interconnecting servers within a data center to storage 854 and computer system 858. The storage 854 may include disks or other storage devices that may be partitioned to provide physical or virtual storage to virtual machines running on processing devices within a data center. For example, the store 854 can include elements of a search backend or spandex as described above. The storage 854 may be provided as a SAN within a data center hosting virtual machines supported by the storage 854, or in a different data center that does not share physical locations with virtual machines supported by it. The computer system 858 acts as a supervisor or management agent for jobs processed by a given data center. Typically, the computer system 858 will contain instructions necessary to manage the operations requested as part of the synchronous training operations on the customer data, for example. The computer system 858 may receive jobs, for example, as a result of input (e.g., search requests) received from a user, searcher, or client via an Application Programming Interface (API).
Aspects of the disclosed technology may be embodied in methods, processes, apparatuses, or systems. These aspects may include one or more combinations of the following features (e.g., F1 to F20):
F1. a system for processing semantic queries, comprising:
a memory element storing instructions; and
a processing element coupled to the memory element and configured to use the instructions:
converting annotations associated with unstructured data into semantic data;
indexing the semantic data in semantic space to produce indexed semantic data;
receiving a search request; and
a semantic query is constructed based on the search request by converting the search request to semantic data based on the indexed semantic data.
F2. The system of F1, wherein the unstructured data comprises video data, image data, or audio data.
F3. The system of any of F1-F2, wherein the annotations comprise user-generated annotations or machine-learning-generated annotations.
F4. The system of any of F1-F3, wherein the annotation comprises presentation data.
F5. The system of any of F1-F4, wherein the processing element is configured to implement a library function using the instructions, the library function taking the presentation data as input and identifying a presentation data pattern from among the presentation data that is input.
F6. The system of any of F1-F5, wherein the library function extracts the identified presentation data patterns mapped to one or more semantic spaces.
F7. The system of any of F1-F6, wherein the library function uses the one or more semantic spaces to construct the semantic query.
F8. The system of any of F1-F7, wherein the index data is associated with the one or more semantic spaces.
F9. The system of any of F1-F8, wherein the semantic space is organized using the identified presentation data patterns as keys.
F10. The system of any one of F1 to F9, wherein the processing element is associated with a semantic space inference hub that integrates two or more inference policies.
F11. The system of any of F1 to F10, wherein the semantic inference hub generates a mapping between the identified presentation data patterns and the one or more semantic spaces.
F12. A system for semantically processing a query, comprising:
a memory element storing instructions; and
one or more processing devices coupled to the memory element and configured to use the instructions:
Receiving presentation data;
converting the presentation data into one or more presentation mode data;
indexing the one or more presentation data patterns for a key-value semantic space using the one or more presentation data patterns as keys associated with data values to produce key-value semantic data;
receiving a search query;
processing the search query into a semantic search query by comparing a semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data;
searching records indicating matches between the semantic search presentation data patterns and the at least one of the one or more presentation data patterns associated with the key-value semantic data to produce search results; and
and providing the search results to a user.
F13. The system of F12, wherein the one or more processing devices are configured to implement a semantic search policy engine that implements one or more inference policies that determine how the presentation data and the search presentation data should be interpreted and output the one or more presentation data patterns and the semantic search presentation data patterns.
F14. The system of any of F12 to F13, wherein the semantic search policy engine comprises a semantic service library having presentation data as input, an inference policy based on these data patterns identifying configured data patterns in the input presentation data, and extracting the identified data patterns.
F15. The system of any of F12 to F14, wherein the semantic service library constructs the key-value semantic data as a presentation data schema, semantic space tuple.
F16. The system of any of F12-F15, wherein the semantic search policy engine is coupled to a semantic space inference interface that processes the one or more presentation data patterns and the semantic search presentation data patterns to identify semantics associated with the one or more presentation data patterns and the semantic search presentation data patterns, respectively.
F17. The system of any of F12-F16, wherein the semantic space inference interface is coupled to a semantic space inference hub that validates the one or more presentation data patterns and provides the validated presentation data patterns of the one or more presentation data patterns as key-value semantic data for storage in a database.
F18. The system of any of F12 to F17, wherein the presentation data comprises User Generated Annotations (UGAs) or Machine Learning Annotations (MLAs).
F19. The system of any one of F12 to F18, wherein the UGA and MLA are associated with audio, image or video content.
F20. A method for semantically processing a query, comprising:
receiving presentation data at one or more processing devices;
converting, using the one or more processing devices, the presentation data into one or more presentation mode data;
indexing, using the one or more processing devices, the one or more presentation mode data for a key-value semantic space using the one or more presentation data modes as keys associated with data values to produce key-value semantic data;
receiving a search query;
processing, using the one or more processing devices, the search query into a semantic search query by comparing a semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data;
using the one or more processing devices, searching for records indicating matches between the semantic search presentation data patterns and the at least one of the one or more presentation data patterns associated with the key-value semantic data to produce search results; and
The search results are provided to a user using the one or more processing devices.
Although the invention herein has been described with reference to particular embodiments, it is to be understood that these embodiments are merely illustrative of the principles and applications of the present invention. It is therefore to be understood that numerous modifications may be made to the illustrative embodiments and that other arrangements may be devised without departing from the spirit and scope of the present invention as defined by the appended claims.
Claims (20)
1. A system for processing semantic queries, comprising:
a memory element storing instructions; and
a processing element coupled to the memory element and configured to use the instructions to:
converting annotations associated with unstructured data into semantic data;
indexing the semantic data in semantic space to produce indexed semantic data;
receiving a search request; and
a semantic query is constructed based on the search request by converting the search request to semantic data based on the indexed semantic data.
2. The system of claim 1, wherein the unstructured data comprises video data, image data, or audio data.
3. The system of claim 1, wherein the annotation comprises a user-generated annotation or a machine-learning generated annotation.
4. The system of claim 1, wherein the annotation comprises presentation data.
5. The system of claim 4, wherein the processing element is configured to implement a library function using the instructions, the library function taking the presentation data as input and identifying a presentation data pattern from among the presentation data that is input.
6. The system of claim 5, wherein the library function extracts the identified presentation data patterns mapped to one or more semantic spaces.
7. The system of claim 6, wherein the library function uses the one or more semantic spaces to construct the semantic query.
8. The system of claim 7, wherein the indexed semantic data is associated with the one or more semantic spaces.
9. The system of claim 7, wherein the one or more semantic spaces are organized using the identified presentation data patterns as keys.
10. The system of claim 6, wherein the processing element is associated with a semantic space inference hub that integrates two or more inference policies.
11. The system of claim 10, wherein the semantic space inference hub generates a mapping between the identified presentation data patterns and the one or more semantic spaces.
12. A system for semantically processing a query, comprising:
a memory element storing instructions; and
one or more processing devices coupled to the memory element and configured to use the instructions:
receiving presentation data;
converting the presentation data into one or more presentation mode data;
indexing the one or more presentation data patterns for a key-value semantic space using the one or more presentation data patterns as keys associated with data values to produce key-value semantic data;
receiving a search query;
processing the search query into a semantic search query by comparing a semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data;
searching records indicating matches between the semantic search presentation data patterns and the at least one of the one or more presentation data patterns associated with the key-value semantic data to produce search results; and
And providing the search results to a user.
13. The system of claim 12, wherein the one or more processing devices are configured to implement a semantic search policy engine that implements one or more inference policies that determine how the presentation data and the search presentation data should be interpreted and output the one or more presentation data patterns and the semantic search presentation data patterns.
14. The system of claim 13, wherein the semantic search policy engine comprises a semantic service library having presentation data as input, identifying configured data patterns in the input presentation data based on inference policies for the data patterns, and extracting the identified data patterns.
15. The system of claim 14, wherein the semantic service library constructs the key-value semantic data as a presentation data schema-semantic space tuple.
16. The system of claim 13, wherein the semantic search policy engine is coupled to a semantic space inference interface that processes the one or more presentation data patterns and the semantic search presentation data pattern to identify semantics associated with the one or more presentation data patterns and the semantic search presentation data pattern, respectively.
17. The system of claim 16, wherein the semantic space inference interface is coupled to a semantic space inference hub that validates the one or more presentation data patterns and provides validated ones of the one or more presentation data patterns as key-value semantic data for storage in a database.
18. The system of claim 12, wherein the presentation data comprises User Generated Annotations (UGAs) or Machine Learning Annotations (MLAs).
19. The system of claim 18, wherein the UGA and MLA are associated with audio, image or video content.
20. A method for semantically processing a query, comprising:
receiving presentation data at one or more processing devices;
converting, using the one or more processing devices, the presentation data into one or more presentation mode data;
indexing, using the one or more processing devices, the one or more presentation mode data for a key-value semantic space using the one or more presentation data modes as keys associated with data values to produce key-value semantic data;
Receiving a search query;
processing, using the one or more processing devices, the search query into a semantic search query by comparing a semantic search presentation data pattern to at least one of the one or more presentation data patterns associated with the key-value semantic data;
using the one or more processing devices, searching for records indicating matches between the semantic search presentation data patterns and the at least one of the one or more presentation data patterns associated with the key-value semantic data to produce search results; and
the search results are provided to a user using the one or more processing devices.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202318208578A | 2023-06-12 | 2023-06-12 | |
US18/208,578 | 2023-06-12 |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117332096A true CN117332096A (en) | 2024-01-02 |
Family
ID=88373780
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202311326497.1A Pending CN117332096A (en) | 2023-06-12 | 2023-10-13 | Semantic annotations and frameworks in a storage API |
Country Status (1)
Country | Link |
---|---|
CN (1) | CN117332096A (en) |
-
2023
- 2023-10-13 CN CN202311326497.1A patent/CN117332096A/en active Pending
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10599719B2 (en) | System and method for providing prediction-model-based generation of a graph data model | |
US11138220B2 (en) | Generating data transformation workflows | |
US11727000B2 (en) | System and method for reducing resource usage in a data retrieval process | |
US10223417B1 (en) | System and method for reducing query-related resource usage in a data retrieval process | |
CN110032604B (en) | Data storage device, translation device and database access method | |
US10740304B2 (en) | Data virtualization across heterogeneous formats | |
Zhao et al. | Mining Taverna's semantic web of provenance | |
US20240012810A1 (en) | Clause-wise text-to-sql generation | |
US20130124545A1 (en) | System and method implementing a text analysis repository | |
US8732178B2 (en) | Using views of subsets of nodes of a schema to generate data transformation jobs to transform input files in first data formats to output files in second data formats | |
US11030242B1 (en) | Indexing and querying semi-structured documents using a key-value store | |
KR20060048418A (en) | System and method for delayed fetching of designated members of a user defined type | |
Euzenat et al. | Ontology alignments: an ontology management perspective | |
US11726997B2 (en) | Multiple stage filtering for natural language query processing pipelines | |
KR20200103542A (en) | Knowledge-driven federated big data query and analytics platform | |
JP2022031625A (en) | Method and device for pushing information, electronic device, storage medium, and computer program | |
Bellare et al. | Woo: A scalable and multi-tenant platform for continuous knowledge base synthesis | |
EP4150484A1 (en) | Efficient indexing for querying arrays in databases | |
WO2000065486A2 (en) | A method of mapping semantic context to enable interoperability among disparate sources | |
US20230325384A1 (en) | Interactive assistance for executing natural language queries to data sets | |
WO2019241293A1 (en) | Multi-source-type interoperability and/or information retrieval optimization | |
US11726994B1 (en) | Providing query restatements for explaining natural language query results | |
CN117332096A (en) | Semantic annotations and frameworks in a storage API | |
JP2001092844A (en) | Method and device for transforming inquiry to different kinds of information sources and storing medium storing program for transforming inquiry to different kinds of information sources | |
US20230409550A1 (en) | Generic Index for Protobuf Data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |