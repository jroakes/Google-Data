US20200077122A1 - Lossy image compression using palettization of locally mixed colors - Google Patents
Lossy image compression using palettization of locally mixed colors Download PDFInfo
- Publication number
- US20200077122A1 US20200077122A1 US16/114,471 US201816114471A US2020077122A1 US 20200077122 A1 US20200077122 A1 US 20200077122A1 US 201816114471 A US201816114471 A US 201816114471A US 2020077122 A1 US2020077122 A1 US 2020077122A1
- Authority
- US
- United States
- Prior art keywords
- pixel
- palette
- pixels
- mixed
- image block
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/593—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving spatial prediction techniques
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/103—Selection of coding mode or of prediction mode
- H04N19/105—Selection of the reference unit for prediction within a chosen coding or prediction mode, e.g. adaptive choice of position and number of pixels used for prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/186—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a colour or a chrominance component
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/189—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding
- H04N19/192—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding the adaptation method, adaptation tool or adaptation type being iterative or recursive
- H04N19/194—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding the adaptation method, adaptation tool or adaptation type being iterative or recursive involving only two passes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/44—Decoders specially adapted therefor, e.g. video decoders which are asymmetric with respect to the encoder
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/94—Vector quantisation
Definitions
- Image content (e.g., still images or frames of video) represents a significant amount of online content.
- a web page may include multiple images, and a large portion of the time and resources spent rendering the web page are dedicated to rendering those images for display.
- the amount of time and resources required to receive and render an image for display depends in part on the manner in which the image is compressed. As such, an image can be rendered faster by reducing the total data size of the image using lossy compression and decompression techniques.
- Lossy compression techniques seek to represent image content using fewer bits than the number of bits in the original image. Lossy compression techniques can introduce visual artifacts, such as ringing artifacts, into the decompressed image. Higher compression levels can result in more observable ringing artifacts. It is desirable to minimize the ringing artifacts while maintaining high levels of compression.
- One aspect of this disclosure is a method for encoding an image block using palletization.
- the method includes selecting a fixed palette for the image block, the fixed palette including fixed palette entries; selecting a mixed palette for the image block, the mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a pixel neighborhood, a mixing of the pixel neighborhood, and a manipulation of the mixing of the pixel neighborhood; determining a pixel map, the pixel map comprising, for a pixel of at least some pixels of the image block, a respective mapping to one of a fixed palette entry or a mixed palette entry; and encoding, in an encoded bitstream, the pixel map.
- the apparatus includes a memory and a processor.
- the processor is configured to execute instructions stored in the memory to select a fixed palette including fixed palette entries; select a mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a pixel neighborhood, a mixing of the pixel neighborhood, and a manipulation of the mixing of the pixel neighborhood; receive, in an encoded bitstream, a pixel map; decode, in a first pass, first pixels of the image block, using the fixed palette; and decode, in a second pass, second pixels of the image block, using the mixed palette and the first pixels.
- Another aspect is a method of decoding an image block.
- the method includes selecting a fixed palette including fixed palette entries; selecting a mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a manipulation of a mixing of color values of pixels of a pixel neighborhood; receiving, in an encoded bitstream, a pixel map; decoding, in a first pass, first pixels of the image block, using the fixed palette; and decoding, in a second pass, second pixels of the image block, using the mixed palette and the first pixels.
- FIG. 1 is a diagram of a computing device in accordance with implementations of this disclosure.
- FIG. 2 is a diagram of a computing and communications system in accordance with implementations of this disclosure.
- FIG. 3 is a diagram of a video stream for use in encoding and decoding in accordance with implementations of this disclosure.
- FIG. 4 is a block diagram of an encoder in accordance with implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder in accordance with implementations of this disclosure.
- FIG. 6 is a block diagram of a representation of a portion of a frame according to implementations of this disclosure.
- FIG. 7 is a flowchart of a process for encoding an image block using palletization according to implementations of this disclosure.
- FIG. 8 is an example of palettes according to implementations of this disclosure.
- FIG. 9 is an example of a mixed palette according to implementations of this disclosure.
- FIG. 10 is an example of an illustration of mixing according to implementations of this disclosure.
- FIG. 11 is an example of an illustration of a pixel map according to implementations of this disclosure.
- FIG. 12 is an illustration of a diagram of an encoded bitstream according to implementations of this disclosure.
- FIG. 13 is a flowchart of a process for decoding an image block using palletization according to implementations of this disclosure.
- FIG. 14 is a flowchart of a process of a first pass for decoding an image block using a pixel map according to implementations of this disclosure.
- FIG. 15 is a flowchart of a process of a second pass for decoding an image block using a pixel map according to implementations of this disclosure.
- FIG. 16 is an illustration of an example of staircasing in palette-based coding.
- FIG. 17 illustrates an example of anti-aliasing.
- Compression schemes related to coding video streams and/or images may include breaking the images into blocks and generating a digital output bitstream (i.e., an encoded bitstream) using one or more techniques to limit the information included in the output bitstream.
- a received bitstream e.g., a sequence of images that constitute a video stream or individual images
- Encoding a stream, or a portion thereof, such as a frame or a block can include using temporal (in the case of video streams) or spatial similarities in the video stream to improve coding efficiency.
- a current block of a video stream may be encoded based on identifying a difference (residual) between the previously coded pixel values, or between a combination of previously coded pixel values, and those in the current block.
- an image block refers to a block of a single image (e.g., an image that is not part of a video stream) or a block of a frame of a video stream.
- Intra prediction attempts to predict the pixel values of an image block using pixels peripheral to the block; that is, using pixels that are in the same frame as the block but that are outside the image block.
- Inter prediction attempts to predict the pixel values of a block of a current frame using a possibly displaced block or blocks from one or more reference frame.
- a reference frame is a frame (i.e., a picture) that appears earlier or later in time in the video stream than the current frame.
- a reference frame that appears later in time than the current frame may be received by a decoder before the current frame.
- inter prediction may be used for image blocks that are part of a video stream.
- palette-based encoding Another encoding technique, referred to herein as palette-based encoding, can also be used.
- the encoder determines whether an image block of an image is encoded using inter-prediction, intra-prediction, or palette-based encoding. While references may be made to palette-based encoding that can be performed by an encoder, it is to be understood that a parallel palette-based decoding that can be performed by a decoder to decode an image block, an image, or the like that is encoded using palette-based encoding.
- a set of colors (known as a palette) is used for encoding an image block.
- the palette can be thought of as a table of colors where each entry in the table corresponds to a color. Each color in the palette can have an index, which corresponds to the order of the color in the list of colors of the table (i.e., the palette).
- a “color” is typically includes several color components (also referred to as color channels). As such, and unless the context implies otherwise, references to “color” are understood to mean “the color components of the color.”
- the encoder may map each of the pixels of the image block to a closest color by, for example, assigning the corresponding color index to the pixel.
- the assignment of pixels to color indexes may be referred to as a pixel mapping, which results in a pixel map.
- the pixel map can be a matrix of the same size as the image block.
- Each entry of the pixel map corresponds to a co-located pixel in the image block.
- Each entry in the pixel map can correspond to (e.g., can be) a color index of the palette.
- the palette and the pixel map can be included in a bitstream.
- a decoder can decode the palette and the pixel map to reconstitute (e.g., reconstruct) the image block.
- Some techniques have been used to improve palette-based coding. For example, in some techniques, rather than mapping a pixel to a closest color in the palette, where the closest color may not be sufficiently close to the source color of the pixel, an escape can be used so that the source color of the pixel is included in the pixel map and/or the encoded bitstream.
- Palette-based coding can be an efficient way of compressing images. Having a small number of colors can result in a compact representation of an image block. For example, when the relation of the colors in an image is non-linear, palette-based coding may be the most efficient way to describe the correlations of colors in the image. Examples of non-linear relations of colors can be found in comic book images, computer graphics images, screen capture image, and/or images of irregular specular reflections in a colorful environment. Because of the efficiency of palette-based coding in encoding such images, some video codecs (such as the AV1, to name one) include a local palette mode for palette-based encoding.
- some video codecs such as the AV1, to name one
- palette-based coding can result in decoded images that include artefacts, such as staircasing artefacts.
- source images may include local gradients that result from the point-spread-function of a capturing device, from anti-aliasing effects of the imaged structures, or from naturally and slowly developing image structures.
- palette-based coding may result in image artefacts, such as artificial staircasing, in the decoded (i.e., reconstructed) images. Artefacts, such as staircasing effects, are undesirable. Staircasing artefacts may also be referred to as banding artefacts.
- FIG. 16 is an illustration of an example 1600 of staircasing in palette-based coding.
- the example 1600 includes a source image portion 1602 .
- the source image portion 1602 can include several colors; however, the source image portion 1602 is shown here in monochrome colors for reproduction reasons.
- the source image portion 1602 illustrate smooth and gradual transitions between different shades of grey.
- a palette-based decoded representation 1604 and a palette-based decoded representation 1606 of the source image portion 1602 illustrate staircasing effects.
- the staircasing effects can be more prominent, as shown in the palette-based decoded representation 1606 , when fewer colors are used in the palette used to encode and decode the source image portion 1602 .
- the source image portion 1602 includes smooth color transitions, color bands (such as color bands 1608 - 1612 ) are formed in the palette-based decoded representation 1606 .
- palette-based coding artefacts are now presented. Assume that an image is that of a glossy whiteboard upon which light sources are shined at different locations. As such, the image of the whiteboard may include small gradients and transition areas from white to light grey. Palette-based encoding the image may create banding effects, as described above. That is, for example, instead of gradual color changes, some bands (e.g., 16 bands) of grey may show in the decoded image where hard, artificial borders may form in the decoded image.
- some bands e.g., 16 bands
- Implementations according to this disclosure can result in smoother decoded images when palette-based coding is used.
- a decoder can produce images that are smoother (e.g., do not include staircasing artefacts).
- Implementations according to this disclosure can be likened to how an artist uses a palette.
- An artist's palette typically includes a finite set of colors. The artist can, using a brush, mix several colors on a canvas.
- a decoder can create smoother transitions from one color to a next color in a decoded image. As such, the number of colors in the palette can be limited and artefacts, such as banding artefacts, can be eliminated, or at least, limited.
- Implementations according to this disclosure can replicate anti-aliasing effects in palettized images (i.e., images that are coded using palette-based coding) and increase the natural appearance of palettized images without increasing (i.e., while limiting) the number of colors in the palette.
- anti-aliasing is a technique of smoothing edges of objects (e.g., lines, curves, etc.) that result from displaying such objects on pixelated displays.
- FIG. 17 illustrates an example 1700 of anti-aliasing.
- the example 1700 illustrates a portion of an image that is a straight line. However, when the straight line is displayed on a computer display, the straight line appears as a jagged line 1702 , due to aliasing.
- Anti-aliasing can produce smoother curves (e.g., smoother lines), such as shown in an anti-aliased line 1704 .
- Implementations of palette-based coding according to this disclosure use a fixed palette and a mixed palette.
- the fixed palette includes fixed palette entries of colors.
- each entry can include values of the color components of a color.
- the mixed palette includes mixed palette entries.
- each mixed palette entry describes how a color is to be manipulated (e.g., modified, changed, etc.).
- Implementations according to this disclosure can result in a 4% gain in the compression of images such as comic book images, computer graphics images, screen capture images, and photographic/video scenery where colors are difficult to decorrelate using linear methods.
- a mixing palette i.e., a combination of a fixed palette and a mixed palette
- a mixed palette entry includes deltas for each of the color components of a color.
- a mixed palette entry can be ( ⁇ 15, 15, ⁇ 140). That is, the mixed palette entry corresponds to, given a color, subtracting 15 from the RED color value of the color, adding 15 to the GREEN color value of the color, and subtracting 140 from the BLUE component of the color.
- the color GOLD which corresponds to the RGB values (255, 215, 0)
- manipulating the GOLD color using the mixed palette entry ( ⁇ 15, 15, 140) results in the KHAKI color, which can be described by the RGB values (240, 230, 140).
- RGB color system any other color system, such as YUV, CMYK, or other color system can be used.
- decimal values to describe the manipulation deltas, the disclosure wherein is not so limited. For example, percentages can be used.
- FIG. 1 is a diagram of a computing device 100 in accordance with implementations of this disclosure.
- the computing device 100 shown includes a memory 110 , a processor 120 , a user interface (UI) 130 , an electronic communication unit 140 , a sensor 150 , a power source 160 , and a bus 170 .
- UI user interface
- the term “computing device” includes any unit, or combination of units, capable of performing any method, or any portion or portions thereof, disclosed herein.
- the computing device 100 may be a stationary computing device, such as a personal computer (PC), a server, a workstation, a minicomputer, or a mainframe computer; or a mobile computing device, such as a mobile telephone, a personal digital assistant (PDA), a laptop, or a tablet PC.
- PC personal computer
- PDA personal digital assistant
- the user interface 130 and processor 120 can be integrated in a first physical unit
- the memory 110 can be integrated in a second physical unit.
- the memory 110 can include any non-transitory computer-usable or computer-readable medium, such as any tangible device that can, for example, contain, store, communicate, or transport data 112 , instructions 114 , an operating system 116 , or any information associated therewith, for use by or in connection with other components of the computing device 100 .
- the non-transitory computer-usable or computer-readable medium can be, for example, a solid state drive, a memory card, removable media, a read-only memory (ROM), a random-access memory (RAM), any type of disk including a hard disk, a floppy disk, an optical disk, a magnetic or optical card, an application-specific integrated circuit (ASIC), or any type of non-transitory media suitable for storing electronic information, or any combination thereof.
- ROM read-only memory
- RAM random-access memory
- ASIC application-specific integrated circuit
- the memory 110 may include multiple physical units, such as one or more primary memory units, such as random-access memory units, one or more secondary data storage units, such as disks, or a combination thereof.
- the data 112 , or a portion thereof, the instructions 114 , or a portion thereof, or both may be stored in a secondary storage unit and may be loaded or otherwise transferred to a primary storage unit in conjunction with processing the respective data 112 , executing the respective instructions 114 , or both.
- the memory 110 or a portion thereof, may be removable memory.
- the data 112 can include information, such as input audio and/or visual data, encoded audio and/or visual data, decoded audio and/or visual data, or the like.
- the visual data can include still images, frames of video sequences, and/or video sequences.
- the instructions 114 can include directions, such as code, for performing any method, or any portion or portions thereof, disclosed herein.
- the instructions 114 can be realized in hardware, software, or any combination thereof.
- the instructions 114 may be implemented as information stored in the memory 110 , such as a computer program, that may be executed by the processor 120 to perform any of the respective methods, algorithms, aspects, or combinations thereof, as described herein.
- the instructions 114 may be implemented as a special-purpose processor, or circuitry, that can include specialized hardware for carrying out any of the methods, algorithms, aspects, or combinations thereof, as described herein. Portions of the instructions 114 can be distributed across multiple processors on the same machine or different machines or across a network, such as a local area network, a wide area network, the Internet, or a combination thereof.
- the processor 120 can include any device or system, now-existing or hereafter developed, capable of manipulating or processing a digital signal or other electronic information, including optical processors, quantum processors, molecular processors, or a combination thereof.
- the processor 120 can include a special-purpose processor, a central processing unit (CPU), a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessors in association with a DSP core, a controller, a microcontroller, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a programmable logic array, a programmable logic controller, microcode, firmware, any type of integrated circuit (IC), a state machine, or any combination thereof.
- the term “processor” includes a single processor or multiple processors.
- the user interface 130 can include any unit capable of interfacing with a user, such as a virtual or physical keypad, a touchpad, a display, a touch display, a speaker, a microphone, a video camera, a sensor, or any combination thereof.
- the user interface 130 may be an audio-visual display device, and the computing device 100 may present audio, such as decoded audio, using the user interface 130 audio-visual display device, such as in conjunction with displaying video, such as decoded video.
- the user interface 130 may include one or more physical units.
- the user interface 130 may include an audio interface for performing audio communication with a user, and a touch display for performing visual and touch-based communication with the user.
- the electronic communication unit 140 can transmit, receive, or transmit and receive signals via a wired or wireless electronic communication medium 180 , such as a radio frequency (RF) communication medium, an ultraviolet (UV) communication medium, a visible light communication medium, a fiber-optic communication medium, a wireline communication medium, or a combination thereof.
- a wired or wireless electronic communication medium 180 such as a radio frequency (RF) communication medium, an ultraviolet (UV) communication medium, a visible light communication medium, a fiber-optic communication medium, a wireline communication medium, or a combination thereof.
- RF radio frequency
- UV ultraviolet
- the electronic communication interface 142 is shown as a wireless antenna in FIG. 1
- the electronic communication interface 142 can be a wireless antenna, as shown, a wired communication port, such as an Ethernet port, an infrared port, a serial port, or any other wired or wireless unit capable of interfacing with a wired or wireless electronic communication medium 180 .
- FIG. 1 shows a single electronic communication unit 140 and a single electronic communication interface 142 , any number of electronic communication units and any number of electronic communication interfaces can be used.
- the sensor 150 may include, for example, an audio-sensing device, a visible light-sensing device, a motion-sensing device, or a combination thereof.
- the sensor 150 may include a sound-sensing device, such as a microphone, or any other sound-sensing device, now existing or hereafter developed, that can sense sounds in the proximity of the computing device 100 , such as speech or other utterances, made by a user operating the computing device 100 .
- the sensor 150 may include a camera, or any other image-sensing device, now existing or hereafter developed, that can sense an image, such as the image of a user operating the computing device.
- the computing device 100 may include a number of sensors 150 .
- the computing device 100 may include a first camera oriented with a field of view directed toward a user of the computing device 100 and a second camera oriented with a field of view directed away from the user of the computing device 100 .
- the power source 160 can be any suitable device for powering the computing device 100 .
- the power source 160 can include a wired external power source interface; one or more dry cell batteries, such as nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion); solar cells; fuel cells; or any other device capable of powering the computing device 100 .
- dry cell batteries such as nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion); solar cells; fuel cells; or any other device capable of powering the computing device 100 .
- a single power source 160 is shown in FIG. 1
- the computing device 100 may include multiple power sources 160 , such as a battery and a wired external power source interface.
- the electronic communication unit 140 , the electronic communication interface 142 , the user interface 130 , the power source 160 , or portions thereof, may be configured as a combined unit.
- the electronic communication unit 140 , the electronic communication interface 142 , the user interface 130 , and the power source 160 may be implemented as a communications port capable of interfacing with an external display device, providing communications, power, or both.
- One or more of the memory 110 , the processor 120 , the user interface 130 , the electronic communication unit 140 , the sensor 150 , or the power source 160 may be operatively coupled via a bus 170 .
- a bus 170 a single bus (i.e., the bus 170 ) is shown in FIG. 1 , a computing device 100 may include multiple buses.
- the memory 110 , the processor 120 , the user interface 130 , the electronic communication unit 140 , the sensor 150 , and the bus 170 may receive power from the power source 160 via the bus 170 .
- the memory 110 , the processor 120 , the user interface 130 , the electronic communication unit 140 , the sensor 150 , the power source 160 , or a combination thereof may communicate data, such as by sending and receiving electronic signals, via the bus 170 .
- one or more of the processor 120 , the user interface 130 , the electronic communication unit 140 , the sensor 150 , or the power source 160 may include internal memory, such as an internal buffer or register.
- the processor 120 may include internal memory (not shown) and may read data 112 from the memory 110 into the internal memory (not shown) for processing.
- the memory 110 can be integrated in one or more electronic units, circuits, or chips.
- FIG. 2 is a diagram of a computing and communications system 200 in accordance with implementations of this disclosure.
- the computing and communications system 200 shown includes computing and communication devices 100 A, 100 B, 100 C, access points 210 A, 210 B, and a network 220 .
- the computing and communications system 200 can be a multiple access system that provides communication, such as voice, audio, data, video, messaging, broadcast, or a combination thereof, to one or more wired or wireless communicating devices, such as the computing and communication devices 100 A, 100 B, 100 C.
- FIG. 2 shows three computing and communication devices 100 A, 100 B, 100 C, two access points 210 A, 210 B, and one network 220 , any number of computing and communication devices, access points, and networks can be used.
- a computing and communication device 100 A, 100 B, or 100 C can be, for example, a computing device, such as the computing device 100 shown in FIG. 1 .
- the computing and communication devices 100 A, 100 B may be user devices, such as a mobile computing device, a laptop, a thin client, or a smartphone, and the computing and communication device 100 C may be a server, such as a mainframe or a cluster.
- the computing and communication device 100 A and the computing and communication device 100 B are described as user devices, and the computing and communication device 100 C is described as a server, any computing and communication device may perform some or all of the functions of a server, some or all of the functions of a user device, or some or all of the functions of a server and a user device.
- the server computing and communication device 100 C may receive, encode, process, store, transmit, or a combination thereof, audio data; and one, or both, of the computing and communication device 100 A and the computing and communication device 100 B may receive, decode, process, store, present, or a combination thereof, the audio data.
- Each computing and communication device 100 A, 100 B, 100 C which may include a user equipment (UE), a mobile station, a fixed or mobile subscriber unit, a cellular telephone, a personal computer, a tablet computer, a server, consumer electronics, or any similar device, can be configured to perform wired or wireless communication, such as via the network 220 .
- the computing and communication devices 100 A, 100 B, 100 C can be configured to transmit or receive wired or wireless communication signals.
- each computing and communication device 100 A, 100 B, 100 C is shown as a single unit, a computing and communication device can include any number of interconnected elements.
- Each access point 210 A, 210 B can be any type of device configured to communicate with a computing and communication devices 100 A, 100 B, 100 C, a network 220 , or both via wired or wireless communication links 180 A, 180 B, 180 C.
- an access point 210 A, 210 B can include a base station, a base transceiver station (BTS), a Node-B, an enhanced Node-B (eNode-B), a Home Node-B (HNode-B), a wireless router, a wired router, a hub, a relay, a switch, or any similar wired or wireless device.
- BTS base transceiver station
- eNode-B enhanced Node-B
- HNode-B Home Node-B
- a wireless router a wired router, a hub, a relay, a switch, or any similar wired or wireless device.
- each access point 210 A, 210 B is shown as a single unit, an access point can include any number of inter
- the network 220 can be any type of network configured to provide services, such as voice, data, applications, voice over internet protocol (VoIP), or any other communications protocol or combination of communications protocols, over a wired or wireless communication link.
- the network 220 can be a local area network (LAN), wide area network (WAN), virtual private network (VPN), a mobile or cellular telephone network, the Internet, or any other means of electronic communication.
- the network can use a communication protocol, such as the Transmission Control Protocol (TCP), the User Datagram Protocol (UDP), the Internet Protocol (IP), the Real-time Transport Protocol (RTP), the HyperText Transport Protocol (HTTP), or a combination thereof.
- TCP Transmission Control Protocol
- UDP User Datagram Protocol
- IP Internet Protocol
- RTP Real-time Transport Protocol
- HTTP HyperText Transport Protocol
- the computing and communication devices 100 A, 100 B, 100 C can communicate with each other via the network 220 using one or more wired or wireless communication links, or via a combination of wired and wireless communication links.
- the computing and communication devices 100 A, 100 B can communicate via wireless communication links 180 A, 180 B
- computing and communication device 100 C can communicate via a wired communication link 180 C.
- Any of the computing and communication devices 100 A, 100 B, 100 C may communicate using any wired or wireless communication link or links.
- a first computing and communication device 100 A can communicate via a first access point 210 A using a first type of communication link
- a second computing and communication device 100 B can communicate via a second access point 210 B using a second type of communication link
- a third computing and communication device 100 C can communicate via a third access point (not shown) using a third type of communication link.
- the access points 210 A, 210 B can communicate with the network 220 via one or more types of wired or wireless communication links 230 A, 230 B.
- FIG. 2 shows the computing and communication devices 100 A, 100 B, 100 C in communication via the network 220
- the computing and communication devices 100 A, 100 B, 100 C can communicate with each other via any number of communication links, such as a direct wired or wireless communication link.
- communications between one or more of the computing and communication devices 100 A, 100 B, 100 C may omit communicating via the network 220 and may include transferring data via another medium (not shown), such as a data storage device.
- the server computing and communication device 100 C may store audio data, such as encoded audio data, in a data storage device, such as a portable data storage unit, and one or both of the computing and communication device 100 A or the computing and communication device 100 B may access, read, or retrieve the stored audio data from the data storage unit, such as by physically disconnecting the data storage device from the server computing and communication device 100 C and physically connecting the data storage device to the computing and communication device 100 A or the computing and communication device 100 B.
- the network 220 can be an ad-hoc network and can omit one or more of the access points 210 A, 210 B.
- the computing and communications system 200 may include devices, units, or elements not shown in FIG. 2 .
- the computing and communications system 200 may include many more communicating devices, networks, and access points.
- FIG. 3 is a diagram of a video stream 300 for use in encoding and decoding in accordance with implementations of this disclosure.
- a video stream 300 such as a video stream captured by a video camera or a video stream generated by a computing device, may include a video sequence 310 .
- the video sequence 310 may include a sequence of adjacent frames 320 . Although three adjacent frames 320 are shown, the video sequence 310 can include any number of adjacent frames 320 .
- Each frame 330 from the adjacent frames 320 may represent a single image from the video stream.
- a frame 330 may include one or more segments, tiles, or planes, which may be coded, or otherwise processed, independently, such as in parallel.
- a frame 330 may include blocks 340 .
- a block can include pixels.
- a block can include a 16 ⁇ 16 group of pixels, an 8 ⁇ 8 group of pixels, an 8 ⁇ 16 group of pixels, or any other group of pixels.
- the term “block” can include a superblock, a macroblock, a segment, a slice, or any other portion of a frame.
- a frame, a block, a pixel, or a combination thereof can include display information, such as luminance information, chrominance information, or any other information that can be used to store, modify, communicate, or display the video stream or a portion thereof.
- a frame that is not part of a video stream is encoded and decoded in accordance with implementations of this disclosure.
- FIG. 4 is a block diagram of an encoder 400 in accordance with implementations of this disclosure.
- Encoder 400 can be implemented in a device, such as the computing device 100 shown in FIG. 1 or the computing and communication devices 100 A, 100 B, 100 C shown in FIG. 2 , as, for example, a computer software program stored in a data storage unit, such as the memory 110 shown in FIG. 1 .
- the computer software program can include machine-readable instructions that may be executed by a processor, such as the processor 120 shown in FIG. 1 , and may cause the device to encode video data as described herein.
- the encoder 400 can be implemented as specialized hardware included, for example, in the computing device 100 .
- the encoder 400 can encode a video stream 402 , such as the video stream 300 shown in FIG. 3 , to generate an encoded (compressed) bitstream 404 .
- the encoder 400 may include a forward path for generating the compressed bitstream 404 .
- the video stream 402 can be a single image or a collection of images.
- the forward path may include an intra/inter prediction unit 410 , a transform unit 420 , a quantization unit 430 , an entropy encoding unit 440 , or any combination thereof.
- the encoder 400 may include a reconstruction path (indicated by the broken connection lines) to reconstruct a frame for encoding of further blocks.
- the reconstruction path may include a dequantization unit 450 , an inverse transform unit 460 , a reconstruction unit 470 , a filtering unit 480 , or any combination thereof.
- Other structural variations of the encoder 400 can be used to encode the video stream 402 .
- each frame within the video stream 402 can be processed in units of blocks.
- a current block may be identified from the blocks in a frame, and the current block may be encoded.
- the current block can be encoded using either intra-frame prediction, which may be within a single frame, or inter-frame prediction, which may be from frame to frame.
- Intra-prediction may include generating a prediction block from samples in the current frame that have been previously encoded and reconstructed.
- Inter-prediction may include generating a prediction block from samples in one or more previously constructed reference frames.
- Generating a prediction block for a current block in a current frame may include performing motion estimation to generate a motion vector indicating an appropriate reference portion of the reference frame.
- the intra/inter prediction unit 410 can encode the image using intra-frame prediction.
- the intra/inter prediction unit 410 may subtract the prediction block from the current block (raw block) to produce a residual block.
- the transform unit 420 may perform a block-based transform, which may include transforming the residual block into transform coefficients in, for example, the frequency domain.
- block-based transforms include the Karhunen-Loève Transform (KLT), the Discrete Cosine Transform (DCT), the Singular Value Decomposition Transform (SVD), the Fourier transform (FT), the Discrete Sine Transform (DST), and the Asymmetric Discrete Sine Transform (ADST).
- the DCT may include transforming a block into the frequency domain.
- the DCT may include using transform coefficient values based on spatial frequency, with the lowest frequency (i.e., DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix.
- the quantization unit 430 may convert the transform coefficients into discrete quantum values, which may be referred to as quantized transform coefficients or quantization levels.
- the quantized transform coefficients can be entropy encoded by the entropy encoding unit 440 to produce entropy-encoded coefficients.
- Entropy encoding can include using a probability distribution metric.
- the entropy-encoded coefficients and information used to decode the block, which may include the type of prediction used, motion vectors, and quantizer values, can be output to the compressed bitstream 404 .
- the compressed bitstream 404 can be formatted using various techniques, such as run-length encoding (RLE) and zero-run coding.
- the reconstruction path can be used to maintain reference frame synchronization between the encoder 400 and a corresponding decoder, such as the decoder 500 shown in FIG. 5 .
- the reconstruction path may be similar to the decoding process discussed below and may include decoding the encoded frame, or a portion thereof, which may include decoding an encoded block, which may include dequantizing the quantized transform coefficients at the dequantization unit 450 and inverse transforming the dequantized transform coefficients at the inverse transform unit 460 to produce a derivative residual block.
- the reconstruction unit 470 may add the prediction block generated by the intra/inter prediction unit 410 to the derivative residual block to create a decoded block.
- the filtering unit 480 can be applied to the decoded block to generate a reconstructed block, which may reduce distortion, such as blocking artifacts.
- filtering the decoded block may include loop filtering, deblocking filtering, or other types of filtering or combinations of types of filtering.
- the reconstructed block may be stored or otherwise made accessible as a reconstructed block, which may be a portion of a reference frame, for encoding another portion of the current frame, another frame, or both, as indicated by the broken line at 482 .
- Coding information, such as deblocking threshold index values, for the frame may be encoded, included in the compressed bitstream 404 , or both, as indicated by the broken line at 484 .
- encoder 400 can be used to encode the compressed bitstream 404 .
- a non-transform-based encoder 400 can quantize the residual block directly without the transform unit 420 .
- the quantization unit 430 and the dequantization unit 450 may be combined into a single unit.
- FIG. 5 is a block diagram of a decoder 500 in accordance with implementations of this disclosure.
- the decoder 500 can be implemented in a device, such as the computing device 100 shown in FIG. 1 or the computing and communication devices 100 A, 100 B, 100 C shown in FIG. 2 , as, for example, a computer software program stored in a data storage unit, such as the memory 110 shown in FIG. 1 .
- the computer software program can include machine-readable instructions that may be executed by a processor, such as the processor 120 shown in FIG. 1 , and may cause the device to decode video data as described herein.
- the decoder 500 can be implemented as specialized hardware included, for example, in the computing device 100 .
- the decoder 500 may receive a compressed bitstream 502 , such as the compressed bitstream 404 shown in FIG. 4 , and may decode the compressed bitstream 502 to generate an output video stream 504 .
- the decoder 500 may include an entropy decoding unit 510 , a dequantization unit 520 , an inverse transform unit 530 , an intra/inter prediction unit 540 , a reconstruction unit 550 , a filtering unit 560 , or any combination thereof. Other structural variations of the decoder 500 can be used to decode the compressed bitstream 502 .
- the entropy decoding unit 510 may decode data elements within the compressed bitstream 502 using, for example, Context Adaptive Binary Arithmetic Decoding, to produce a set of quantized transform coefficients.
- the dequantization unit 520 can dequantize the quantized transform coefficients, and the inverse transform unit 530 can inverse transform the dequantized transform coefficients to produce a derivative residual block, which may correspond to the derivative residual block generated by the inverse transform unit 460 shown in FIG. 4 .
- the intra/inter prediction unit 540 may generate a prediction block corresponding to the prediction block created in the encoder 400 .
- the prediction block can be added to the derivative residual block to create a decoded block.
- the filtering unit 560 can be applied to the decoded block to reduce artifacts, such as blocking artifacts, which may include loop filtering, deblocking filtering, or other types of filtering or combinations of types of filtering, and which may include generating a reconstructed block, which may be output as the output video stream 504 .
- decoder 500 can be used to decode the compressed bitstream 502 .
- the decoder 500 can produce the output video stream 504 without the deblocking filtering unit 570 .
- FIG. 6 is a block diagram of a representation of a portion 600 of a frame, such as the frame 306 of FIG. 3 , or an image, according to implementations of this disclosure.
- the portion 600 of the frame includes four 64 ⁇ 64 blocks 610 , which may be referred to as superblocks, in two rows and two columns in a matrix or Cartesian plane.
- a superblock can have a larger or a smaller size. While FIG. 6 is explained with respect to a superblock of size 64 ⁇ 64, the description is easily extendable to larger (e.g., 128 ⁇ 128) or smaller superblock sizes.
- a superblock can be a basic or maximum coding unit (CU).
- Each superblock can include four 32 ⁇ 32 blocks 620 .
- Each 32 ⁇ 32 block 620 can include four 16 ⁇ 16 blocks 630 .
- Each 16 ⁇ 16 block 630 can include four 8 ⁇ 8 blocks 640 .
- Each 8 ⁇ 8 block 640 can include four 4 ⁇ 4 blocks 650 .
- Each 4 ⁇ 4 block 650 can include 16 pixels, which can be represented in four rows and four columns in each respective block in the Cartesian plane or matrix. The pixels can include information representing an image captured in the frame, such as luminance information, color information, and location information.
- a block such as a 16 ⁇ 16-pixel block as shown, can include a luminance block 660 , which can include luminance pixels 662 ; and two chrominance blocks 670 / 680 , such as a U or Cb chrominance block 670 , and a V or Cr chrominance block 680 .
- the chrominance blocks 670 / 680 can include chrominance pixels 690 .
- the luminance block 660 can include 16 ⁇ 16 luminance pixels 662
- each chrominance block 670 / 680 can include 8 ⁇ 8 chrominance pixels 690 , as shown. Although one arrangement of blocks is shown, any arrangement can be used.
- N ⁇ N blocks in some implementations, N ⁇ M, where N ⁇ M, blocks can be used.
- N ⁇ M 32 ⁇ 64 blocks, 64 ⁇ 32 blocks, 16 ⁇ 32 blocks, 32 ⁇ 16 blocks, or any other size blocks can be used.
- N ⁇ 2N blocks, 2N ⁇ N blocks, or a combination thereof can be used.
- video coding can include ordered block-level coding.
- Ordered block-level coding can include coding blocks of a frame in an order, such as raster-scan order, wherein blocks can be identified and processed starting with a block in the upper left corner of the frame, or a portion of the frame, and proceeding along rows from left to right and from the top row to the bottom row, identifying each block in turn for processing.
- the superblock in the top row and left column of a frame can be the first block coded
- the superblock immediately to the right of the first block can be the second block coded.
- the second row from the top can be the second row coded, such that the superblock in the left column of the second row can be coded after the superblock in the rightmost column of the first row.
- coding a block can include using quad-tree coding, which can include coding smaller block units with a block in raster-scan order.
- quad-tree coding can include coding smaller block units with a block in raster-scan order.
- the 64 ⁇ 64 superblock shown in the bottom-left corner of the portion of the frame shown in FIG. 6 can be coded using quad-tree coding in which the top-left 32 ⁇ 32 block can be coded, then the top-right 32 ⁇ 32 block can be coded, then the bottom-left 32 ⁇ 32 block can be coded, and then the bottom-right 32 ⁇ 32 block can be coded.
- Each 32 ⁇ 32 block can be coded using quad-tree coding in which the top-left 16 ⁇ 16 block can be coded, then the top-right 16 ⁇ 16 block can be coded, then the bottom-left 16 ⁇ 16 block can be coded, and then the bottom-right 16 ⁇ 16 block can be coded.
- Each 16 ⁇ 16 block can be coded using quad-tree coding in which the top-left 8 ⁇ 8 block can be coded, then the top-right 8 ⁇ 8 block can be coded, then the bottom-left 8 ⁇ 8 block can be coded, and then the bottom-right 8 ⁇ 8 block can be coded.
- Each 8 ⁇ 8 block can be coded using quad-tree coding in which the top-left 4 ⁇ 4 block can be coded, then the top-right 4 ⁇ 4 block can be coded, then the bottom-left 4 ⁇ 4 block can be coded, and then the bottom-right 4 ⁇ 4 block can be coded.
- 8 ⁇ 8 blocks can be omitted for a 16 ⁇ 16 block, and the 16 ⁇ 16 block can be coded using quad-tree coding in which the top-left 4 ⁇ 4 block can be coded, and then the other 4 ⁇ 4 blocks in the 16 ⁇ 16 block can be coded in raster-scan order.
- video coding can include compressing the information included in an original, or input, frame by omitting some of the information in the original frame from a corresponding encoded frame.
- coding can include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
- reducing spectral redundancy can include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which can be referred to as the YUV or YCbCr color model or color space.
- YUV color model can include using a relatively large amount of information to represent the luminance component of a portion of a frame and using a relatively small amount of information to represent each corresponding chrominance component for the portion of the frame.
- a portion of a frame can be represented by a high-resolution luminance component, which can include a 16 ⁇ 16 block of pixels, and by two lower resolution chrominance components, each of which representing the portion of the frame as an 8 ⁇ 8 block of pixels.
- a pixel can indicate a value (e.g., a value in the range from 0 to 255) and can be stored or transmitted using, for example, eight bits.
- Reducing spatial redundancy can include transforming a block into the frequency domain as described above.
- a unit of an encoder such as the entropy encoding stage 408 of FIG. 4 , can perform a DCT using transform coefficient values based on spatial frequency.
- Reducing temporal redundancy can include using similarities between frames to encode a frame using a relatively small amount of data based on one or more reference frames, which can be previously encoded, decoded, and reconstructed frames of the video stream.
- a block or a pixel of a current frame can be similar to a spatially corresponding block or pixel of a reference frame.
- a block or a pixel of a current frame can be similar to a block or a pixel of a reference frame at a different spatial location.
- reducing temporal redundancy can include generating motion information indicating the spatial difference (e.g., a translation between the location of the block or the pixel in the current frame and the corresponding location of the block or the pixel in the reference frame).
- Reducing temporal redundancy can include identifying a block or a pixel in a reference frame, or a portion of the reference frame, that corresponds with a current block or pixel of a current frame.
- a reference frame, or a portion of a reference frame, which can be stored in memory can be searched for the best block or pixel to use for encoding a current block or pixel of the current frame.
- the search may identify the block of the reference frame for which the difference in pixel values between the reference block and the current block is minimized, and can be referred to as motion searching.
- the portion of the reference frame searched can be limited.
- the portion of the reference frame searched which can be referred to as the search area, can include a limited number of rows of the reference frame.
- identifying the reference block can include calculating a cost function, such as a sum of absolute differences (SAD), between the pixels of the blocks in the search area and the pixels of the current block.
- SAD sum of absolute differences
- the spatial difference between the location of the reference block in the reference frame and the current block in the current frame can be represented as a motion vector.
- the difference in pixel values between the reference block and the current block can be referred to as differential data, residual data, or as a residual block.
- generating motion vectors can be referred to as motion estimation, and a pixel of a current block can be indicated based on location using Cartesian coordinates such as ⁇ x,y .
- a pixel of the search area of the reference frame can be indicated based on a location using Cartesian coordinates such as r x,y .
- a motion vector (MV) for the current block can be determined based on, for example, a SAD between the pixels of the current frame and the corresponding pixels of the reference frame.
- FIG. 7 is a flowchart of a process 700 for encoding an image block using palettization according to implementations of this disclosure.
- the process 700 can be implemented, for example, as a software program that may be executed by computing devices such as the computing and communication devices 100 A, 100 B, 100 C.
- the software program can include machine-readable instructions that may be stored in a memory such as the memory 110 , and that, when executed by a processor, such as CPU 120 , may cause the computing device to perform the process 700 .
- the process 700 can be implemented (e.g., executed, performed, etc.), in whole or in part, by an encoder, such as the encoder 400 of FIG. 4 .
- the process 700 can be implemented by a prediction unit of the encoder.
- the process 700 can be implemented by the intra/inter prediction unit 410 of FIG. 4 .
- the intra/inter prediction unit 410 is described above with respect to inter prediction and intra prediction, the intra/inter prediction unit 410 can additionally perform palette-based prediction as described herein.
- the palette-based encoding can be implemented by a prediction unit of the encoder 400 that is separate from the intra/inter prediction unit 410 .
- the process 700 can be used to encode the image block using palette-based encoding.
- the image block can be a block of an image.
- the image block can be block of a frame of a video stream.
- the image block can be a block 340 as described with respect to FIG. 3 .
- the image block can be a coding unit (CU) as described with respect to FIG. 6 .
- the image block can be of size 64 ⁇ 64, 128 ⁇ 128, or any other square or rectangular size.
- the process 700 selects a fixed palette for the image block.
- select means to create, form, produce, determine, use, construct, identify, specify, generate, or other select in any manner whatsoever.
- the fixed palette can include fixed palette entries.
- FIG. 8 is an example 800 of palettes according to implementations of this disclosure.
- the example 800 includes a fixed palette 810 .
- the fixed palette 810 includes fixed palette entries 812 and 814 . While only two entries are shown for illustration purposes, a fixed palette can have multiple entries (e.g., 100, 256, or any other number of fixed palette entries). Each fixed palette entry is shown to include an “entry” index and a pixel value (i.e., a color value).
- the fixed palette entry 812 which has an index or 0, corresponds to a color value “VALUE 1;” and the fixed palette entry 814 , which has an index of 1, corresponds to a color value “VALUE 2.” While the fixed palette entries 812 and 814 are shown as including respective entry indices, the indices can be inferred (such as based on the position of the fixed palette entry in the fixed palette).
- the color values VALUE 1 and VALUE 2 of the fixed palette 810 are shown as bine one value each.
- the pixel value i.e., the color value
- the pixel value can be several values, depending on the color system used.
- “pixel value” i.e., “color value” means the values, collectively, of each of the color components of the color model (i.e., the color system) used for the palette.
- the pixel value can be a one greyscale value (e.g., a greyscale pixel value).
- each of the fixed palette entries can include a Y value, a U value, and a V value.
- a fixed palette 820 illustrates a case where the RGB color system is used.
- the pixel value can include several values, each corresponding to a color channel (i.e., the red channel, the green channel, and the blue channel).
- a fixed palette 822 entry (corresponding, for example, to the fixed palette entry 812 ) includes a respective value for each of the R, G, and B color channels, namely the values (121, 4, 250); and, similarly, a fixed palette entry 824 (corresponding, for example, to the fixed palette entry 814 ) includes a respective value for each of the R, G, and B color channels, namely the values (45, 145, 35).
- the range of the values of the fixed palette entries depends on the number of bits used to represent the value. For example, in a case where 8 bits are used, the values can range from 0 to 255.
- selecting the fixed palette can be performed by analyzing the image block and/or the image containing the image block.
- a histogram of pixel values of the image block can be generated, and a predetermined number of the top pixel values can be used in the fixed palette.
- Other known techniques such as k-means clustering, vector quantization, and the like can be used to select the fixed palette.
- the predetermined number can be 100, 256, or some other value.
- the selected fixed palette can be pruned to include a maximum number of entries (i.e., “maximum fixed palette size”).
- the fixed palette can be a pre-generated palette.
- generating the fixed palette can be performed in a stand-alone process (e.g., one or more stand-alone processes) that is separate from encoding the image block and/or encoding the image that includes the image block.
- the stand-alone process can analyze many different types of images and determine for the different types of images respective fixed palettes.
- the stand-alone process can determine respective fixed palettes for photographic images, graphical images, mixed images (e.g., images containing photographic and graphical content), other types of images, or combinations thereof.
- k-means clustering can be performed on the colors of a large corpus of images that are of a certain type in order to identify one or more palettes that are suitable for images of that type.
- the process 700 selects a mixed palette for the image block.
- the mixed palette includes mixed palette entries. Each mixed palette entry can be thought of as a recipe for manipulating a given color value.
- a mixed palette 830 of FIG. 8 includes mixed palette entries 832 and 834 . As described above, the numbers in each of the mixed palette entries describe deltas (e.g., offsets, percentages, etc.) to be applied to a given color.
- the mixed palette entries can include a luminance delta only. That is, the mixed palette entries can include intensity offsets only.
- the mixed palette entries can include luminance and chrominance color entries.
- NTSC National Television Standards Committee
- FIG. 9 is an example of a mixed palette 900 according to implementations of this disclosure.
- the mixed palette 900 is shown as including mixed entries having indices 101 to 325.
- the mixed palette can include succeeding entries starting at the index of the last fixed entry (e.g., 100) plus 1.
- a mixed palette entry can be indicative of a mixing of (e.g., a method of combining the values of) pixels in a neighborhood of a pixel.
- the pixels in a neighborhood of a pixel that are to be combined can be referred to as neighboring pixels.
- the deltas of a mixed palette entry constitute the manipulation of the mixing of the pixel neighborhood.
- FIG. 10 is an example 1000 of an illustration of mixing according to implementations of this disclosure.
- the example 1000 includes a portion 1001 of an image block.
- the portion 1001 is shown as being 6 ⁇ 6 pixels for illustration purposes.
- the portion 1001 includes a pixel 1002 .
- the example 1000 illustrates using mixing to determine (e.g., calculate, derive, etc.) a value for the pixel 1002 .
- the neighborhood of the pixel 1002 is composed of pixels 1004 - 1010 . That is, for mixing purposes, the neighboring pixels of the pixel 1002 are the pixels 1004 - 1010 .
- a table 1011 shows illustrative pixel values of the pixels 1004 - 1010 in the RGB color space. Rows 1012 - 1018 show, respectively, the RGB values of the pixels 1004 - 1010 .
- the portion 1001 is shown in a checkerboard pattern in which light-colored pixels, such as the pixels 1004 - 1010 , correspond to pixel values that are not determined using mixing. That is, the values of the pixels 1004 - 1010 can be determined using, for example, fixed palette entries.
- the method of combining the values of the neighboring pixels can be fixed.
- the method of combining can be to average the neighboring pixels.
- a row 1020 shows the rounded averages of each of the color components of the pixels 1004 - 1010 .
- the method of combining the neighboring pixels can be a weighted average such that the distance (e.g., the Euclidian distance) of a neighboring pixel from the pixel 1002 can be used in determining the weighted average.
- a row 1022 shows the result of manipulating the row 1020 using the palette entry 832 of FIG. 8 .
- the index (i.e., the position) of the mixing palette entry in the mixing palette can be indicative of the neighboring pixels to be used.
- some mixing palette entries can correspond to combining a top neighbor with a left neighbor of a pixel, when a raster scan order is used to process the pixels of the image block.
- a top pixel 1026 i.e., an adjacent and above pixel
- a left pixel 1028 i.e., an adjacent and to the left pixel
- the combined value of the top and the left pixels can then be manipulated using the deltas of the mixing palette entry.
- the neighboring pixels can indicate only the left pixel. If the sum of errors is smaller than encoding using the fixed palette entry, then the fixed palette entry is removed. Additionally, for each location of the pixel map that uses the fixed palette entry, the fixed palette index is replaced with the mixed palette entry index corresponding to the smallest error for that pixel map location.
- the neighboring pixels can indicate only the top pixel.
- some mixing palette entries can correspond to using a sort-search to determine the neighboring pixels to be used.
- An image portion 1030 is used to illustrate a sort-search for determining the neighboring pixels.
- quadrants of pixels can be used to determine the neighboring pixels. For example, a north-west, a north-east, a south-west, and a south-east quadrant can be used. In each of the quadrants, a closest pixel to the pixel 1032 is determined. The closest pixel is a pixel in the quadrant that does not use mixing.
- the closest pixel can be a pixel that corresponds to a fixed palette entry, as described below with respect to the pixel map. Closeness can be determined based on Euclidian distance.
- a pixel 1034 illustrates a closest pixel in the north-west quadrant
- a pixel 1036 illustrates a closest pixel in the north-east quadrant
- a pixel 1038 illustrates a closest pixel in the south-west quadrant
- a pixel 1040 illustrates a closest pixel in the south-east quadrant.
- the pixels 1034 - 1040 can be used as the neighboring pixels as described above. In an example, if a quadrant includes more than one closest pixels, one of closest pixels can be selected as the closest pixel. Alternatively, an average of the one or more than one closest pixels can be used as the closes pixel in that quadrant. Other ways of combining or selecting from the one or more than one closest pixels can be available.
- the mixing palette that is used for encoding (and decoding as later described) can include 170 entries.
- the mixing entries corresponding to indices 100-119 can correspond to using four neighboring pixels.
- the four neighboring pixels can be as described with respect to the pixel 1002 or the pixel 1032 .
- Other ways of determining the four neighboring pixels can be available.
- the mixing entries corresponding to indices 120-169 can use the top and left neighboring pixels, such as described with respect to the pixel 1024 .
- Palette entries corresponding to indices 0-99 can be fixed palette entries.
- mixed palette entries are described as being included in one mixed palette and that the position of a mixed palette entry can be indicative of a pixel neighborhood, a mixing method, manipulation deltas, or a combination thereof.
- the mixed palette can be multiple mixed palettes.
- a first mixed palette can be for averaging a top neighbor and a left neighbor and manipulating the mixed value using the deltas of the mixed palette entries first mixed palette;
- a second mixed palette can be for averaging the neighboring pixels, based on a checker-board pattern, and manipulating the mixed value using the deltas of the mixed palette entries second mixed palette; and so on.
- the process 700 determines a pixel map.
- “determine” means to create, form, produce, select, use, construct, identify, calculate, specify, generate, or other determine in any manner whatsoever.
- the pixel map includes, for a pixel of at least some pixels of the image block, a respective mapping to one of a fixed palette entry or a mixed palette entry.
- the pixel map includes, for each pixel of the image block, a corresponding value such that the corresponding value is an index of a fixed palette entry or a mixing palette entry.
- the values of the pixel map are used as indices into either a fixed palette or a mixed palette.
- at least some of the values of the pixel map can be symbols that can be indicative of the respective palette entries.
- FIG. 11 is an example 1100 of an illustration of a pixel map according to implementations of this disclosure.
- the example 1100 can be a pixel map for a portion of an image that is 6 ⁇ 6 pixels.
- the fixed palette includes 100 fixed palette entries (e.g., fixed palette entries with indices 0-99) and 170 mixed palette entries (e.g., mixed palette entries with indices 100-169)
- the example 1100 illustrates that each of the entries is a number between 0 and 169, inclusive.
- the pixel map 1100 indicates, for each pixel, which color (i.e., a fixed color from the fixed palette or a mixed color from the mixed palette) is used to encode (by the encoder) and decode (by a decoder) a color value for that pixel.
- color i.e., a fixed color from the fixed palette or a mixed color from the mixed palette
- An index 1102 of the pixel map 1100 indicates that the color value corresponding to the fixed palette entry at index 39 of the fixed palette is used for coding the co-located pixel of the image block.
- the indices 1104 , 1106 , 1108 , and 1110 correspond, respectively, to a mixing palette entry at index 130, a mixing palette entry at index 103, a mixing palette entry at index 166, and a mixing palette entry at index 156.
- determining the pixel map can include processing, in a scan order, each pixel of the image block and determining a palette index to use for encoding the pixel.
- the palette index can be, as indicated above, an index of a fixed palette entry or an index of a mixing palette entry.
- determining the pixel map can include mapping the pixel to a mixed palette entry corresponding to (i.e., being indicative of) at least one of the pixel neighborhood being neighboring pixels of a pixel, the mixing of the pixel neighborhood being an average of neighboring pixels, the manipulation of the mixing of the pixel neighborhood corresponding to adding a color delta to a color component of the mixing of the pixel neighborhood, or a combination thereof.
- the neighboring pixels can be (e.g., can include) a top neighboring pixel and a left neighboring pixel of the pixel of the image block.
- neighboring pixels are pixels of the image block that are determined based a checker-board pattern.
- the process 700 can, in determining the pixel at 706 , enforce a constraint such that at least every other pixel location must be mapped to a fixed palette entry. As such, while two consecutive (or adjacent) pixel locations can be mapped to fixed palette entries in the pixel map, no two adjacent pixel locations can be mapped to mixed palette entries.
- each pixel location that is mapped to a fixed palette entry has four neighboring pixel locations (i.e., a top, left, bottom, and right neighboring pixels), each mapped to a mixed palette entry; and each pixel location that is mapped to a mixed palette entry has four neighboring pixel locations, each mapped to a fixed palette entry.
- the process 700 can include determining the neighboring pixels using a sort-search, as described above.
- neighboring pixels can include pixels peripheral to (i.e., from outside) the image block. That is, the neighboring pixels can include pixels from neighboring (i.e., adjacent) image blocks. For example, assume that a pixel is on the left edge of the image block. As such, the left neighbor can be a pixel on the right edge of the adjacent image block. Using pixels from adjacent blocks as neighboring pixels may reduce blocking artefacts effects. In other implementations, neighboring pixels can only be pixels in the image block itself.
- determining the pixel map at 706 can be a multi-step process that can also include palette pruning, which is mentioned above.
- an initial fixed palette of a first size e.g., 256
- each of the pixel values of the image block is mapped to a color (e.g., an entry) of the initial fixed palette.
- the fixed palette having a second size that is smaller than the first size, is determined by removing some of the entries (i.e., colors) from the initial palette and re-assigning pixels assigned to those colors to one of the mixed palette entries.
- the process 700 can compare the error that results from keeping the color and the error that results from removing the color.
- An error can be calculated for every pixel that uses the color and a total sum of errors is calculated as the sum of all the errors.
- the error associated with a pixel can be calculated as follows. For each of the mixed palette entries, a respective color (i.e., a respective manipulated value) is calculated according to the mixed palette entry (i.e., determining neighboring colors, mixing the values of the neighboring pixels, and manipulating the mixed value according to the mixed palette entry deltas). The smallest of the respective errors can be selected as the error associated with the pixel.
- the error can be calculated as the Euclidean distance of the color components of the manipulated color and the original color value of the image block.
- the fixed palette color is removed from the fixed palette, and the fixed palette index in the pixel map is replaced, for each pixel described above, with the index of the mixed palette entry corresponding to the smallest error for that pixel; otherwise, the fixed palette entry is not removed from the fixed palette and the pixel map is not changed.
- Other techniques can be available for pruning the fixed palette.
- the process 700 encodes, in an encoded bitstream, the pixel map.
- the encoded bitstream can be the compressed bitstream 404 of FIG. 4 .
- Any suitable encoding technique can be used to encode the pixel map in the encoded bitstream.
- run-length encoding can be used to encode the values of the pixel map in the encoded bitstream.
- entropy coding can be used to encode the entries of the pixel map. For example, the values of previously (i.e., in a scan order) encoded pixel map entries can be used as a context for determining a probability distribution for encoding a current entry.
- encoding, in the encoded bitstream, the pixel map can include encoding, in the encoded bitstream, the mixed palette. That is, the delta values of each of the entries of the mixed palette can be encoded in the encoded bitstream. Any suitable encoding technique can be used. As mentioned above, the indices of the entries need not be encoded in the bitstream since the indices can be inferred based on the order of the entries in the encoded bitstream.
- the mixed palette is not encoded in the bitstream.
- the encoder and the decoder use the same mixing palette entries, the encoder need not encode the mixing palette entries in the bitstream.
- FIG. 12 is an illustration of a diagram of an encoded bitstream 1200 according to implementations of this disclosure.
- the encoded bitstream 1200 can be a portion of a compressed bitstream, such as the compressed bitstream 404 of FIG. 4 .
- the encoded bitstream 1200 includes a portion 1202 that includes (e.g., encodes) the fixed palette entries of a fixed palette, a portion 1204 that includes (e.g., encodes) the mixed palette entries of a mixed palette, and a portion 1206 that includes (e.g., encodes) the values (i.e., the indices) of the pixel map.
- the portion 1204 can be omitted.
- the portion 1202 may be omitted from the encoded bitstream 1200 .
- the encoder and the decoder use the same pre-determined palette, the fixed palette need not be communicated to the decoder in a the encoded bitstream.
- the encoder can indicate, in the encoded bitstream which of the pre-determined palettes the decoder is to use. For example, the encoder can communicate, via a syntax element, an index and/or a label indicative of the pre-determined palette that the encoder is to use.
- three pre-determined palettes may be available, and an image of size 256 ⁇ 256 pixels may be partitioned into 16 image blocks each of size 64 ⁇ 64 pixels.
- the encoder may indicate that the first palette is to be used for a first image block; that the second palette is to be used for five of the 16 image blocks; that the third palette is to be used for three of the 16 image blocks; and that the remaining seven image blocks are not palette-encoded (i.e., the seven remaining image blocks are either intra predicted, inter predicted, or a combination thereof).
- the decoder may be able to infer the pre-determined palette to use. As such, the syntax element can be omitted.
- FIG. 13 is a flowchart of a process 1300 for decoding an image block using palettization according to implementations of this disclosure.
- the process 1300 can be implemented, for example, as a software program that may be executed by computing devices such as the computing and communication devices 100 A, 100 B, 100 C.
- the software program can include machine-readable instructions that may be stored in a memory such as the memory 110 , and that, when executed by a processor, such as CPU 120 , may cause the computing device to perform the process 1300 .
- the process 1300 can be implemented (e.g., executed, performed, etc.), in whole or in part, by a decoder, such as the decoder 500 of FIG. 5 .
- the process 1300 can be implemented by a prediction unit of the decoder.
- the process 1300 can be implemented by the intra/inter prediction unit 540 of FIG. 5 .
- the intra/inter prediction unit 510 is described above with respect to inter prediction and intra prediction, the intra/inter prediction unit 510 can additionally perform palette-based prediction as described herein.
- the palette-based decoding can be implemented by a prediction unit of the decoder 500 that is separate from the intra/inter prediction unit 540 .
- the process 1300 can be performed in reconstruction path of an encoder, such as described by the reconstruction path of FIG. 4 .
- the process 1300 can be used to decode the image block using palette-based decoding.
- the image block can be a block of an image.
- the image block can be block of a frame of a video stream.
- the image block can be a block 340 as described with respect to FIG. 3 .
- the image block can be a coding unit (CU) as described with respect to FIG. 6 .
- CU coding unit
- the process 1300 selects a fixed palette.
- the fixed palette includes fixed palette entries.
- the fixed palette can be as described with respect to the fixed palette 810 of FIG. 8 .
- the process 1300 selects the fixed palette by decoding the fixed palette from a compressed bitstream.
- the bitstream can be as described with respect to encoded bitstream 1200 of FIG. 12 and the fixed palette can be decoded from the portion 1202 of FIG. 12 .
- the process 1300 selects the fixed palette based on the type of image that includes the image block.
- the fixed palette can be a pre-generated palette, such as described with respect to FIG. 7 .
- the process 1300 selects a mixed palette.
- the mixed palette includes mixed palette entries.
- the mixed palette can be as described with respect to the mixed palette 830 of FIG. 8 .
- the process 1300 selects the mixed palette by decoding the mixed palette from the compressed bitstream.
- the mixed palette can be decoded from the portion 1204 of FIG. 12 .
- selecting the mixed palette can include receiving the mixed palette in the compressed bitstream.
- the mixed palette may not be included in the encoded bitstream and the process 1300 can select a pre-determined mixing palette.
- the process 1300 decodes an indicator of the pre-determined mixing palette.
- the process 1300 can have available more than one pre-determined mixing palettes.
- the process 1300 can receive, in the encoded bitstream, an indication of the one of the more than one pre-determined mixing palettes to select.
- a mixed palette entry can correspond to a pixel neighborhood, a mixing of the pixel neighborhood, a manipulation of the mixing of the pixel neighborhood, or a combination thereof. Selecting a mixed palette can include selecting multiple mixed palettes as described above.
- the process 1300 receives a pixel map.
- the pixel map can be received in the encoded bitstream.
- the process 1300 or another module of a decoder, can decode the pixel map from the encoded bitstream.
- the decoded pixel map can then be received by the process 1300 .
- the pixel map can be as described with respect to pixel map described with respect to FIG. 11 .
- the pixel map can include, implicitly or explicitly, for each pixel of the image block a corresponding palette index.
- the corresponding palette index can be an index of a fixed palette entry or can be an index of a mixed palette entry.
- the process 1300 uses the pixel map to reconstruct (e.g., decode, reconstitute, etc.) the image block. That is, the process 1300 can process, for example in a raster scan order, each value in the pixel map to determine a color value to use for a pixel at a corresponding location in the image block. Said another way, the process 1300 assigns a color value to a pixel location of the image block based on the corresponding (i.e., co-located) index in the pixel map.
- an index that corresponds to a fixed palette entry corresponds directly to a color value.
- an index that corresponds to a mixed palette entry may require that neighboring pixels that are after a current pixel in the scan order be decoded first.
- decoding e.g., assigning a value to
- the pixel 1002 first requires that the values of pixels 1008 and 1010 , which are after the pixel 1002 in the raster scan order, be known. As such, the value of the pixel 1002 cannot be determined when the pixel 1002 is visited in the raster scan order.
- a color value cannot be assigned to (e.g., determined for, calculated for, etc.) the pixel 1032 before the color values of the pixels 1038 and 1040 are known.
- the process 1300 can use two passes to assign a respective color value to each pixel of the image block.
- the process 1300 decodes, in a first pass, first pixels of the image block, using the fixed palette.
- the first pixels are those pixels of the image block that are encoded using entries of the fixed palette. That is, in the first pass, the process 1300 assigns color values to those pixels of the image block that use indices of the fixed palette.
- An example of an implementation of the first pass is described with respect to FIG. 14 .
- FIG. 14 is a flowchart of a process 1400 of a first pass for decoding an image block using a pixel map according to implementations of this disclosure.
- the process 1400 can be used by the process 1300 at 1308 .
- the process 1400 traverses, in a raster scan order, each value of the pixel map and, if the value at a current location is an index into the fixed palette, then the process 1400 assigns the color value indicated by the index from fixed palette to the corresponding pixel in the image block.
- the fixed palette includes MAX_FIXED entries; the fixed palette entries are indexed from 0 to MAX_FIXED-1; the pixel map is denoted PIXEL_MAP; and the image block is denoted IMAGE_BLOCK.
- the pixel map and the image block are usually denoted as being two-dimensional arrays, for simplicity of explanation, they are denoted here as being one-dimensional arrays.
- a person skilled in the art can appreciate that a scan location can be converted to a two-dimensional Cartesian coordinate, and vice versa.
- the description below refers to a pixel (color) value, it is to be understood that the pixel (color) value is to be interpreted as including the values of each color component of the color system used in the palette entries.
- the process 1400 assigns a loop variable LOC to zero.
- the loop variable LOC corresponds to a scan location in the raster scan order. If the image block is of size M ⁇ N, then the maximum scan location (i.e., MAX_SCAN_LOC) is M*N-1.
- the process 1400 tests whether the pixel at scan location LOC is encoded using a color value from the fixed palette. That is, at 1404 , the process 1400 tests whether the index in the pixel map at the current scan location LOC (i.e., PIXEL_MAP[LOC]) is between 0 and MAX_FIXED (i.e., PIXEL_MAP[LOC] ⁇ MAX_FIXED). If so, the process 1400 proceeds to 1406 ; otherwise the process 1400 proceeds to 1408 , thereby skipping assigning a color value to the pixel at scan location LOC because the pixel is not encoded using a fixed palette entry.
- the process 1400 assigns, to the pixel at scan location LOC in the image block (i.e., IMAGE_BLOCK[LOC]), the color value of the fixed palette that is at the index specified by pixel map at location LOC. That is, the process 1400 sets IMAGE_BLOCK[LOC] to FIXED_PALETTE[PIXEL_MAP[LOC]].
- the process 1400 updates the loop variable in preparation for processing the next scan location.
- the process 1400 tests whether all scan locations of the image block have been processed. If so, the process 1400 ends at 1412 ; otherwise the process 1400 proceeds back to 1404 .
- the process 1300 decodes, in a second pass, second pixels of the image block, using the mixed palette and the first pixels.
- the second pixels are those pixels of the image block that are encoded using entries of the mixed palette. That is, in the second pass, the process 1300 assigns color values to those pixels of the image block that use indices of the mixed palette.
- An example of an implementation of the second pass is described with respect to FIG. 15 .
- decoding, in the second pass, the second pixels of the image block, using the mixed palette and the first pixels can include determining, for a second pixel of the second pixels, a mixed palette entry; determining, based on the mixed palette entry, the pixel neighborhood of the second pixel, the pixel neighborhood being a group of pixels from the first pixels; mixing the group of pixels by combining the values of the group of pixels to generate a mixed pixel value (i.e., a mixed value); and applying, based on the mixed palette entry, a delta offset to a color component of the mixing pixel value to generate the second pixel.
- the group of pixels can include a top neighboring pixel and a left neighboring pixel of the second pixel.
- the group of pixels can be determined using a checkerboard pattern of the image block.
- the group of pixels can be determined using sort-search.
- FIG. 15 is a flowchart of a process 1500 of a second pass for decoding an image block using a pixel map according to implementations of this disclosure.
- the process 1500 can be used by the process 1300 at 1310 .
- the process 1500 traverses, in a raster scan order, each value of the pixel map and, if the value at a current location is an index into the mixed palette, then the process 1500 determines, based on the index of the mixed palette entry, neighboring pixels of the current pixel; mixes the values of the neighboring pixels based on the index of the mixed palette entry, resulting in a mixed value; manipulates the mixed value according to the deltas of the mixed palette entry, resulting in a manipulated value; and assigns the manipulated value to the image pixel.
- pixel value, color value, LOC, MAX_FIXED, PIXEL_MAP, IMAGE_BLOCK, and MAX_SCAN_LOC are as described with respect to the process 1400 .
- MIXED_PALETTE denotes the mixed palette.
- the process 1500 assigns the loop variable LOC to zero.
- the process 1400 tests whether the pixel at scan location LOC is encoded using a mixed palette entry by testing whether the palette index at PIXEL_MAP[LOC] is greater than the number of palette entries (i.e., MAX_FIXED) in the fixed palette. If so, the process 1500 proceeds to 1506 ; if not (indicating that the image pixel at the current scan location LOC was assigned a color in the first pass), the process 1500 proceeds to 1516 .
- the process 1500 gets (e.g., reads, accesses, etc.) the mixed palette entry corresponding to the palette entry value at location LOC in the pixel map.
- the location (e.g., the index) of the mixed palette entry in the mixed palette can be indicative of at least one of the neighboring pixels, a mixing (e.g., combination) method, and manipulation deltas of the mixed value.
- the process 1500 determines the neighboring pixels, for example, as described above. It is noted that, in an implementation, the neighboring pixels are pixels whose values were determined using the first pass.
- the process 1500 mixes (e.g., combines, such as by averaging) the values (e.g., the respective color components) of the neighboring pixels, resulting in a mixed value.
- the mixed value can be multiple mixed values, each corresponding to a color component, as described with respect to row 1020 of FIG. 10 .
- the process 1500 calculates a manipulated value (i.e., MAN) according to the deltas of the mixed palette entry of 1506 . Calculating the manipulated value (MAN) can be as described with respect to the row 1022 of FIG. 10 .
- the process 1500 assigns the manipulated value (MAN) to the pixel at scan location LOC of the image block.
- the loop variable LOC is incremented.
- the process 1500 ends at 1520 ; otherwise the process 1500 proceeds back to 1504 , which is described above.
- the second pass (e.g., such as described with respect to the process 1500 ) can be used when a pixel that is required for mixing for a current pixel at a scan location is at a subsequent scan location.
- all pixels required for the mixing may be at scan locations that are before the scan location of the current pixel.
- the test at 1404 can be whether all neighboring pixels are available; and, correspondingly, the at 1504 the test can be whether the pixel map at the current location was processed in the first pass.
- the test at 1404 of whether all neighboring pixels are available can be based on the palette entry index.
- the test at 1404 can be whether (PIXEL_MAP[LOC] ⁇ MAX_FIXED OR PIXELP_MAP[LOC] ⁇ 120). Any other similar, equivalent, or suitable technique can be used so that some of the mixing palette entries can be processed in the first pass by the process 1400 .
- the resulting entropy in an encoded image can be smaller than what is achievable with a large palette.
- the entropy that results from using a fixed palette of size 100 with a mixing palette can be smaller than using a palette that includes, for example, 256 colors.
- a small supplemental palette e.g., the mixing palette
- the mixing palette can be thought of as allowing color definitions such as “take 100% of a certain local color and make it 10% higher in luminosity” and “take 70% of a local color and mix into it 30% of Chartreuse Yellow.”
- example or “exemplary” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations thereof.
- the terms “determine” and “identify,” or any variations thereof, include selecting, ascertaining, computing, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any manner whatsoever using one or more of the devices shown in FIG. 1 .
- the implementations of the transmitting computing and communication device 100 A and/or the receiving computing and communication device 100 B can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers microcode, microcontrollers
- servers microprocessors, digital signal processors, or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of the transmitting computing and communication device 100 A and the receiving computing and communication device 100 B do not necessarily have to be implemented in the same manner.
- the transmitting computing and communication device 100 A or the receiving computing and communication device 100 B can be implemented using a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein.
- a special-purpose computer/processor which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein, can be utilized.
- the transmitting computing and communication device 100 A and the receiving computing and communication device 100 B can, for example, be implemented on computers in a real-time video system.
- the transmitting computing and communication device 100 A can be implemented on a server, and the receiving computing and communication device 100 B can be implemented on a device separate from the server, such as a hand-held communications device.
- the transmitting computing and communication device 100 A can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting computing and communication device 100 A.
- the receiving computing and communication device 100 B can be a generally stationary personal computer rather than a portable communications device, and/or a device including an encoder 400 may also include a decoder 500 .
- implementations can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
Abstract
Description
- Image content (e.g., still images or frames of video) represents a significant amount of online content. For example, a web page may include multiple images, and a large portion of the time and resources spent rendering the web page are dedicated to rendering those images for display. The amount of time and resources required to receive and render an image for display depends in part on the manner in which the image is compressed. As such, an image can be rendered faster by reducing the total data size of the image using lossy compression and decompression techniques.
- Lossy compression techniques seek to represent image content using fewer bits than the number of bits in the original image. Lossy compression techniques can introduce visual artifacts, such as ringing artifacts, into the decompressed image. Higher compression levels can result in more observable ringing artifacts. It is desirable to minimize the ringing artifacts while maintaining high levels of compression.
- One aspect of this disclosure is a method for encoding an image block using palletization. The method includes selecting a fixed palette for the image block, the fixed palette including fixed palette entries; selecting a mixed palette for the image block, the mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a pixel neighborhood, a mixing of the pixel neighborhood, and a manipulation of the mixing of the pixel neighborhood; determining a pixel map, the pixel map comprising, for a pixel of at least some pixels of the image block, a respective mapping to one of a fixed palette entry or a mixed palette entry; and encoding, in an encoded bitstream, the pixel map.
- Another aspect is an apparatus for decoding an image block. The apparatus includes a memory and a processor. The processor is configured to execute instructions stored in the memory to select a fixed palette including fixed palette entries; select a mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a pixel neighborhood, a mixing of the pixel neighborhood, and a manipulation of the mixing of the pixel neighborhood; receive, in an encoded bitstream, a pixel map; decode, in a first pass, first pixels of the image block, using the fixed palette; and decode, in a second pass, second pixels of the image block, using the mixed palette and the first pixels.
- Another aspect is a method of decoding an image block. The method includes selecting a fixed palette including fixed palette entries; selecting a mixed palette including mixed palette entries, each mixed palette entry corresponding, respectively, to a manipulation of a mixing of color values of pixels of a pixel neighborhood; receiving, in an encoded bitstream, a pixel map; decoding, in a first pass, first pixels of the image block, using the fixed palette; and decoding, in a second pass, second pixels of the image block, using the mixed palette and the first pixels.
- These and other aspects of the present disclosure are disclosed in the following detailed description of the embodiments, the appended claims, and the accompanying figures.
-
FIG. 1 is a diagram of a computing device in accordance with implementations of this disclosure. -
FIG. 2 is a diagram of a computing and communications system in accordance with implementations of this disclosure. -
FIG. 3 is a diagram of a video stream for use in encoding and decoding in accordance with implementations of this disclosure. -
FIG. 4 is a block diagram of an encoder in accordance with implementations of this disclosure. -
FIG. 5 is a block diagram of a decoder in accordance with implementations of this disclosure. -
FIG. 6 is a block diagram of a representation of a portion of a frame according to implementations of this disclosure. -
FIG. 7 is a flowchart of a process for encoding an image block using palletization according to implementations of this disclosure. -
FIG. 8 is an example of palettes according to implementations of this disclosure. -
FIG. 9 is an example of a mixed palette according to implementations of this disclosure. -
FIG. 10 is an example of an illustration of mixing according to implementations of this disclosure. -
FIG. 11 is an example of an illustration of a pixel map according to implementations of this disclosure. -
FIG. 12 is an illustration of a diagram of an encoded bitstream according to implementations of this disclosure. -
FIG. 13 is a flowchart of a process for decoding an image block using palletization according to implementations of this disclosure. -
FIG. 14 is a flowchart of a process of a first pass for decoding an image block using a pixel map according to implementations of this disclosure. -
FIG. 15 is a flowchart of a process of a second pass for decoding an image block using a pixel map according to implementations of this disclosure. -
FIG. 16 is an illustration of an example of staircasing in palette-based coding. -
FIG. 17 illustrates an example of anti-aliasing. - Compression schemes related to coding video streams and/or images, which may be frames of video streams, may include breaking the images into blocks and generating a digital output bitstream (i.e., an encoded bitstream) using one or more techniques to limit the information included in the output bitstream. A received bitstream (e.g., a sequence of images that constitute a video stream or individual images) can be decoded to re-create the blocks and the source images from the limited information. Encoding a stream, or a portion thereof, such as a frame or a block, can include using temporal (in the case of video streams) or spatial similarities in the video stream to improve coding efficiency. For example, a current block of a video stream may be encoded based on identifying a difference (residual) between the previously coded pixel values, or between a combination of previously coded pixel values, and those in the current block. In this disclosure, an image block refers to a block of a single image (e.g., an image that is not part of a video stream) or a block of a frame of a video stream.
- Encoding using spatial similarities can be known as intra prediction. Intra prediction attempts to predict the pixel values of an image block using pixels peripheral to the block; that is, using pixels that are in the same frame as the block but that are outside the image block.
- Encoding using temporal similarities can be known as inter prediction. Inter prediction attempts to predict the pixel values of a block of a current frame using a possibly displaced block or blocks from one or more reference frame. A reference frame is a frame (i.e., a picture) that appears earlier or later in time in the video stream than the current frame A reference frame that appears later in time than the current frame may be received by a decoder before the current frame. As such, inter prediction may be used for image blocks that are part of a video stream.
- Another encoding technique, referred to herein as palette-based encoding, can also be used. The encoder determines whether an image block of an image is encoded using inter-prediction, intra-prediction, or palette-based encoding. While references may be made to palette-based encoding that can be performed by an encoder, it is to be understood that a parallel palette-based decoding that can be performed by a decoder to decode an image block, an image, or the like that is encoded using palette-based encoding.
- In palette-based coding, a set of colors (known as a palette) is used for encoding an image block. The palette typically includes a limited number of colors as compared to the number of pixels in the image block. For example, given an image block of
size 64×64, which includes 64*64=4096 pixels, a palette that includes only 256 colors may be used for encoding the image block. The palette can be thought of as a table of colors where each entry in the table corresponds to a color. Each color in the palette can have an index, which corresponds to the order of the color in the list of colors of the table (i.e., the palette). As a person skilled in the art recognizes, a “color” is typically includes several color components (also referred to as color channels). As such, and unless the context implies otherwise, references to “color” are understood to mean “the color components of the color.” - In the encoding process, the encoder may map each of the pixels of the image block to a closest color by, for example, assigning the corresponding color index to the pixel. The assignment of pixels to color indexes may be referred to as a pixel mapping, which results in a pixel map. The pixel map can be a matrix of the same size as the image block. Each entry of the pixel map corresponds to a co-located pixel in the image block. Each entry in the pixel map can correspond to (e.g., can be) a color index of the palette. The palette and the pixel map can be included in a bitstream. A decoder can decode the palette and the pixel map to reconstitute (e.g., reconstruct) the image block.
- Some techniques have been used to improve palette-based coding. For example, in some techniques, rather than mapping a pixel to a closest color in the palette, where the closest color may not be sufficiently close to the source color of the pixel, an escape can be used so that the source color of the pixel is included in the pixel map and/or the encoded bitstream.
- Palette-based coding can be an efficient way of compressing images. Having a small number of colors can result in a compact representation of an image block. For example, when the relation of the colors in an image is non-linear, palette-based coding may be the most efficient way to describe the correlations of colors in the image. Examples of non-linear relations of colors can be found in comic book images, computer graphics images, screen capture image, and/or images of irregular specular reflections in a colorful environment. Because of the efficiency of palette-based coding in encoding such images, some video codecs (such as the AV1, to name one) include a local palette mode for palette-based encoding.
- However, palette-based coding can result in decoded images that include artefacts, such as staircasing artefacts. For example, source images may include local gradients that result from the point-spread-function of a capturing device, from anti-aliasing effects of the imaged structures, or from naturally and slowly developing image structures. For such images, palette-based coding may result in image artefacts, such as artificial staircasing, in the decoded (i.e., reconstructed) images. Artefacts, such as staircasing effects, are undesirable. Staircasing artefacts may also be referred to as banding artefacts.
-
FIG. 16 is an illustration of an example 1600 of staircasing in palette-based coding. The example 1600 includes asource image portion 1602. Thesource image portion 1602 can include several colors; however, thesource image portion 1602 is shown here in monochrome colors for reproduction reasons. Thesource image portion 1602 illustrate smooth and gradual transitions between different shades of grey. A palette-based decodedrepresentation 1604 and a palette-based decodedrepresentation 1606 of thesource image portion 1602 illustrate staircasing effects. The staircasing effects can be more prominent, as shown in the palette-based decodedrepresentation 1606, when fewer colors are used in the palette used to encode and decode thesource image portion 1602. Whereas thesource image portion 1602 includes smooth color transitions, color bands (such as color bands 1608-1612) are formed in the palette-based decodedrepresentation 1606. - Another example of palette-based coding artefacts is now presented. Assume that an image is that of a glossy whiteboard upon which light sources are shined at different locations. As such, the image of the whiteboard may include small gradients and transition areas from white to light grey. Palette-based encoding the image may create banding effects, as described above. That is, for example, instead of gradual color changes, some bands (e.g., 16 bands) of grey may show in the decoded image where hard, artificial borders may form in the decoded image.
- To counter the banding effects, techniques such as dithering and/or blurring (for example, by adding noise to the decoded image) can be used. However, such techniques can change the quality of the image. That is, such techniques may change the quality of the surfaces and textures of the source image. For example, instead of the glossy whiteboard, the whiteboard may appear grainy in the decode image. Texture loss may be undesirable, at least in certain applications and/or contexts. For example, in the context of on-line shopping, it is critical to preserve textures and material properties in the images that on-line shoppers see, such as in a web-browser, while browsing an on-line store.
- Implementations according to this disclosure can result in smoother decoded images when palette-based coding is used. By mixing colors that are included in a palette, a decoder can produce images that are smoother (e.g., do not include staircasing artefacts). Implementations according to this disclosure can be likened to how an artist uses a palette. An artist's palette typically includes a finite set of colors. The artist can, using a brush, mix several colors on a canvas. By mixing colors that are included in a palette, a decoder can create smoother transitions from one color to a next color in a decoded image. As such, the number of colors in the palette can be limited and artefacts, such as banding artefacts, can be eliminated, or at least, limited.
- Implementations according to this disclosure can replicate anti-aliasing effects in palettized images (i.e., images that are coded using palette-based coding) and increase the natural appearance of palettized images without increasing (i.e., while limiting) the number of colors in the palette. As is known, anti-aliasing is a technique of smoothing edges of objects (e.g., lines, curves, etc.) that result from displaying such objects on pixelated displays.
FIG. 17 illustrates an example 1700 of anti-aliasing. The example 1700 illustrates a portion of an image that is a straight line. However, when the straight line is displayed on a computer display, the straight line appears as ajagged line 1702, due to aliasing. Anti-aliasing can produce smoother curves (e.g., smoother lines), such as shown in ananti-aliased line 1704. - Implementations of palette-based coding according to this disclosure use a fixed palette and a mixed palette. The fixed palette includes fixed palette entries of colors. For example, and as further described below, each entry can include values of the color components of a color. The mixed palette includes mixed palette entries. As further described below, each mixed palette entry describes how a color is to be manipulated (e.g., modified, changed, etc.).
- Implementations according to this disclosure can result in a 4% gain in the compression of images such as comic book images, computer graphics images, screen capture images, and photographic/video scenery where colors are difficult to decorrelate using linear methods. Using a mixing palette (i.e., a combination of a fixed palette and a mixed palette) can render palette-based encoding far more expressive with respect to dealing with (e.g., encoding) subtle and incremental local changes and/or gradients, which are not typically adequately handled with the use of fixed palettes only.
- A mixed palette entry includes deltas for each of the color components of a color. For example, in the RGB color space, a mixed palette entry can be (−15, 15, −140). That is, the mixed palette entry corresponds to, given a color, subtracting 15 from the RED color value of the color, adding 15 to the GREEN color value of the color, and subtracting 140 from the BLUE component of the color. As such, given the color GOLD, which corresponds to the RGB values (255, 215, 0), manipulating the GOLD color using the mixed palette entry (−15, 15, 140) results in the KHAKI color, which can be described by the RGB values (240, 230, 140).
- While the example above uses the RGB color system, the disclosure herein is not so limited. For example, any other color system, such as YUV, CMYK, or other color system can be used. While the example above uses decimal values to describe the manipulation deltas, the disclosure wherein is not so limited. For example, percentages can be used.
- Details of lossy image compression using palettization of locally mixed colors are described herein with initial reference to a system in which the teachings herein can be implemented.
-
FIG. 1 is a diagram of acomputing device 100 in accordance with implementations of this disclosure. Thecomputing device 100 shown includes amemory 110, aprocessor 120, a user interface (UI) 130, anelectronic communication unit 140, asensor 150, apower source 160, and abus 170. As used herein, the term “computing device” includes any unit, or combination of units, capable of performing any method, or any portion or portions thereof, disclosed herein. - The
computing device 100 may be a stationary computing device, such as a personal computer (PC), a server, a workstation, a minicomputer, or a mainframe computer; or a mobile computing device, such as a mobile telephone, a personal digital assistant (PDA), a laptop, or a tablet PC. Although shown as a single unit, any one element or elements of thecomputing device 100 can be integrated in any number of separate physical units. For example, theuser interface 130 andprocessor 120 can be integrated in a first physical unit, and thememory 110 can be integrated in a second physical unit. - The
memory 110 can include any non-transitory computer-usable or computer-readable medium, such as any tangible device that can, for example, contain, store, communicate, ortransport data 112,instructions 114, anoperating system 116, or any information associated therewith, for use by or in connection with other components of thecomputing device 100. The non-transitory computer-usable or computer-readable medium can be, for example, a solid state drive, a memory card, removable media, a read-only memory (ROM), a random-access memory (RAM), any type of disk including a hard disk, a floppy disk, an optical disk, a magnetic or optical card, an application-specific integrated circuit (ASIC), or any type of non-transitory media suitable for storing electronic information, or any combination thereof. - Although shown as a single unit, the
memory 110 may include multiple physical units, such as one or more primary memory units, such as random-access memory units, one or more secondary data storage units, such as disks, or a combination thereof. For example, thedata 112, or a portion thereof, theinstructions 114, or a portion thereof, or both, may be stored in a secondary storage unit and may be loaded or otherwise transferred to a primary storage unit in conjunction with processing therespective data 112, executing therespective instructions 114, or both. In some implementations, thememory 110, or a portion thereof, may be removable memory. - The
data 112 can include information, such as input audio and/or visual data, encoded audio and/or visual data, decoded audio and/or visual data, or the like. The visual data can include still images, frames of video sequences, and/or video sequences. Theinstructions 114 can include directions, such as code, for performing any method, or any portion or portions thereof, disclosed herein. Theinstructions 114 can be realized in hardware, software, or any combination thereof. For example, theinstructions 114 may be implemented as information stored in thememory 110, such as a computer program, that may be executed by theprocessor 120 to perform any of the respective methods, algorithms, aspects, or combinations thereof, as described herein. - Although shown as included in the
memory 110, in some implementations, theinstructions 114, or a portion thereof, may be implemented as a special-purpose processor, or circuitry, that can include specialized hardware for carrying out any of the methods, algorithms, aspects, or combinations thereof, as described herein. Portions of theinstructions 114 can be distributed across multiple processors on the same machine or different machines or across a network, such as a local area network, a wide area network, the Internet, or a combination thereof. - The
processor 120 can include any device or system, now-existing or hereafter developed, capable of manipulating or processing a digital signal or other electronic information, including optical processors, quantum processors, molecular processors, or a combination thereof. For example, theprocessor 120 can include a special-purpose processor, a central processing unit (CPU), a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessors in association with a DSP core, a controller, a microcontroller, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a programmable logic array, a programmable logic controller, microcode, firmware, any type of integrated circuit (IC), a state machine, or any combination thereof. As used herein, the term “processor” includes a single processor or multiple processors. - The
user interface 130 can include any unit capable of interfacing with a user, such as a virtual or physical keypad, a touchpad, a display, a touch display, a speaker, a microphone, a video camera, a sensor, or any combination thereof. For example, theuser interface 130 may be an audio-visual display device, and thecomputing device 100 may present audio, such as decoded audio, using theuser interface 130 audio-visual display device, such as in conjunction with displaying video, such as decoded video. Although shown as a single unit, theuser interface 130 may include one or more physical units. For example, theuser interface 130 may include an audio interface for performing audio communication with a user, and a touch display for performing visual and touch-based communication with the user. - The
electronic communication unit 140 can transmit, receive, or transmit and receive signals via a wired or wirelesselectronic communication medium 180, such as a radio frequency (RF) communication medium, an ultraviolet (UV) communication medium, a visible light communication medium, a fiber-optic communication medium, a wireline communication medium, or a combination thereof. For example, as shown, theelectronic communication unit 140 is operatively connected to anelectronic communication interface 142, such as an antenna, configured to communicate via wireless signals. - Although the
electronic communication interface 142 is shown as a wireless antenna inFIG. 1 , theelectronic communication interface 142 can be a wireless antenna, as shown, a wired communication port, such as an Ethernet port, an infrared port, a serial port, or any other wired or wireless unit capable of interfacing with a wired or wirelesselectronic communication medium 180. AlthoughFIG. 1 shows a singleelectronic communication unit 140 and a singleelectronic communication interface 142, any number of electronic communication units and any number of electronic communication interfaces can be used. - The
sensor 150 may include, for example, an audio-sensing device, a visible light-sensing device, a motion-sensing device, or a combination thereof. For example, thesensor 150 may include a sound-sensing device, such as a microphone, or any other sound-sensing device, now existing or hereafter developed, that can sense sounds in the proximity of thecomputing device 100, such as speech or other utterances, made by a user operating thecomputing device 100. In another example, thesensor 150 may include a camera, or any other image-sensing device, now existing or hereafter developed, that can sense an image, such as the image of a user operating the computing device. Although a single sensor (i.e., the processor 150) is shown, thecomputing device 100 may include a number ofsensors 150. For example, thecomputing device 100 may include a first camera oriented with a field of view directed toward a user of thecomputing device 100 and a second camera oriented with a field of view directed away from the user of thecomputing device 100. - The
power source 160 can be any suitable device for powering thecomputing device 100. For example, thepower source 160 can include a wired external power source interface; one or more dry cell batteries, such as nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion); solar cells; fuel cells; or any other device capable of powering thecomputing device 100. Although asingle power source 160 is shown inFIG. 1 , thecomputing device 100 may includemultiple power sources 160, such as a battery and a wired external power source interface. - Although shown as separate units, the
electronic communication unit 140, theelectronic communication interface 142, theuser interface 130, thepower source 160, or portions thereof, may be configured as a combined unit. For example, theelectronic communication unit 140, theelectronic communication interface 142, theuser interface 130, and thepower source 160 may be implemented as a communications port capable of interfacing with an external display device, providing communications, power, or both. - One or more of the
memory 110, theprocessor 120, theuser interface 130, theelectronic communication unit 140, thesensor 150, or thepower source 160 may be operatively coupled via abus 170. Although a single bus (i.e., the bus 170) is shown inFIG. 1 , acomputing device 100 may include multiple buses. For example, thememory 110, theprocessor 120, theuser interface 130, theelectronic communication unit 140, thesensor 150, and thebus 170 may receive power from thepower source 160 via thebus 170. In another example, thememory 110, theprocessor 120, theuser interface 130, theelectronic communication unit 140, thesensor 150, thepower source 160, or a combination thereof, may communicate data, such as by sending and receiving electronic signals, via thebus 170. - Although not shown separately in
FIG. 1 , one or more of theprocessor 120, theuser interface 130, theelectronic communication unit 140, thesensor 150, or thepower source 160 may include internal memory, such as an internal buffer or register. For example, theprocessor 120 may include internal memory (not shown) and may readdata 112 from thememory 110 into the internal memory (not shown) for processing. - Although shown as separate elements, the
memory 110, theprocessor 120, theuser interface 130, theelectronic communication unit 140, thesensor 150, thepower source 160, and thebus 170, or any combination thereof, can be integrated in one or more electronic units, circuits, or chips. -
FIG. 2 is a diagram of a computing andcommunications system 200 in accordance with implementations of this disclosure. The computing andcommunications system 200 shown includes computing andcommunication devices access points network 220. For example, the computing andcommunications system 200 can be a multiple access system that provides communication, such as voice, audio, data, video, messaging, broadcast, or a combination thereof, to one or more wired or wireless communicating devices, such as the computing andcommunication devices FIG. 2 shows three computing andcommunication devices access points network 220, any number of computing and communication devices, access points, and networks can be used. - A computing and
communication device computing device 100 shown inFIG. 1 . For example, the computing andcommunication devices communication device 100C may be a server, such as a mainframe or a cluster. Although the computing andcommunication device 100A and the computing andcommunication device 100B are described as user devices, and the computing andcommunication device 100C is described as a server, any computing and communication device may perform some or all of the functions of a server, some or all of the functions of a user device, or some or all of the functions of a server and a user device. For example, the server computing andcommunication device 100C may receive, encode, process, store, transmit, or a combination thereof, audio data; and one, or both, of the computing andcommunication device 100A and the computing andcommunication device 100B may receive, decode, process, store, present, or a combination thereof, the audio data. - Each computing and
communication device network 220. For example, the computing andcommunication devices communication device - Each
access point communication devices network 220, or both via wired orwireless communication links access point access point - The
network 220 can be any type of network configured to provide services, such as voice, data, applications, voice over internet protocol (VoIP), or any other communications protocol or combination of communications protocols, over a wired or wireless communication link. For example, thenetwork 220 can be a local area network (LAN), wide area network (WAN), virtual private network (VPN), a mobile or cellular telephone network, the Internet, or any other means of electronic communication. The network can use a communication protocol, such as the Transmission Control Protocol (TCP), the User Datagram Protocol (UDP), the Internet Protocol (IP), the Real-time Transport Protocol (RTP), the HyperText Transport Protocol (HTTP), or a combination thereof. - The computing and
communication devices network 220 using one or more wired or wireless communication links, or via a combination of wired and wireless communication links. For example, as shown, the computing andcommunication devices wireless communication links communication device 100C can communicate via a wiredcommunication link 180C. Any of the computing andcommunication devices communication device 100A can communicate via afirst access point 210A using a first type of communication link, a second computing andcommunication device 100B can communicate via asecond access point 210B using a second type of communication link, and a third computing andcommunication device 100C can communicate via a third access point (not shown) using a third type of communication link. Similarly, theaccess points network 220 via one or more types of wired orwireless communication links FIG. 2 shows the computing andcommunication devices network 220, the computing andcommunication devices - In some implementations, communications between one or more of the computing and
communication devices network 220 and may include transferring data via another medium (not shown), such as a data storage device. For example, the server computing andcommunication device 100C may store audio data, such as encoded audio data, in a data storage device, such as a portable data storage unit, and one or both of the computing andcommunication device 100A or the computing andcommunication device 100B may access, read, or retrieve the stored audio data from the data storage unit, such as by physically disconnecting the data storage device from the server computing andcommunication device 100C and physically connecting the data storage device to the computing andcommunication device 100A or the computing andcommunication device 100B. - Other implementations of the computing and
communications system 200 are possible. For example, in an implementation, thenetwork 220 can be an ad-hoc network and can omit one or more of theaccess points communications system 200 may include devices, units, or elements not shown inFIG. 2 . For example, the computing andcommunications system 200 may include many more communicating devices, networks, and access points. -
FIG. 3 is a diagram of avideo stream 300 for use in encoding and decoding in accordance with implementations of this disclosure. Avideo stream 300, such as a video stream captured by a video camera or a video stream generated by a computing device, may include avideo sequence 310. Thevideo sequence 310 may include a sequence ofadjacent frames 320. Although threeadjacent frames 320 are shown, thevideo sequence 310 can include any number ofadjacent frames 320. - Each
frame 330 from theadjacent frames 320 may represent a single image from the video stream. Although not shown inFIG. 3 , aframe 330 may include one or more segments, tiles, or planes, which may be coded, or otherwise processed, independently, such as in parallel. Aframe 330 may includeblocks 340. Although not shown inFIG. 3 , a block can include pixels. For example, a block can include a 16×16 group of pixels, an 8×8 group of pixels, an 8×16 group of pixels, or any other group of pixels. Unless otherwise indicated herein, the term “block” can include a superblock, a macroblock, a segment, a slice, or any other portion of a frame. A frame, a block, a pixel, or a combination thereof, can include display information, such as luminance information, chrominance information, or any other information that can be used to store, modify, communicate, or display the video stream or a portion thereof. - In some implementations, a frame that is not part of a video stream is encoded and decoded in accordance with implementations of this disclosure.
-
FIG. 4 is a block diagram of anencoder 400 in accordance with implementations of this disclosure.Encoder 400 can be implemented in a device, such as thecomputing device 100 shown inFIG. 1 or the computing andcommunication devices FIG. 2 , as, for example, a computer software program stored in a data storage unit, such as thememory 110 shown inFIG. 1 . The computer software program can include machine-readable instructions that may be executed by a processor, such as theprocessor 120 shown inFIG. 1 , and may cause the device to encode video data as described herein. Theencoder 400 can be implemented as specialized hardware included, for example, in thecomputing device 100. - The
encoder 400 can encode avideo stream 402, such as thevideo stream 300 shown inFIG. 3 , to generate an encoded (compressed)bitstream 404. In some implementations, theencoder 400 may include a forward path for generating thecompressed bitstream 404. Thevideo stream 402 can be a single image or a collection of images. The forward path may include an intra/inter prediction unit 410, atransform unit 420, aquantization unit 430, anentropy encoding unit 440, or any combination thereof. In some implementations, theencoder 400 may include a reconstruction path (indicated by the broken connection lines) to reconstruct a frame for encoding of further blocks. The reconstruction path may include adequantization unit 450, aninverse transform unit 460, areconstruction unit 470, afiltering unit 480, or any combination thereof. Other structural variations of theencoder 400 can be used to encode thevideo stream 402. - For encoding the
video stream 402, each frame within thevideo stream 402 can be processed in units of blocks. Thus, a current block may be identified from the blocks in a frame, and the current block may be encoded. - At the intra/
inter prediction unit 410, the current block can be encoded using either intra-frame prediction, which may be within a single frame, or inter-frame prediction, which may be from frame to frame. Intra-prediction may include generating a prediction block from samples in the current frame that have been previously encoded and reconstructed. Inter-prediction may include generating a prediction block from samples in one or more previously constructed reference frames. Generating a prediction block for a current block in a current frame may include performing motion estimation to generate a motion vector indicating an appropriate reference portion of the reference frame. In the case of encoding a single image (e.g., an image that is not part of a video sequence and/or a sequence of images), the intra/inter prediction unit 410 can encode the image using intra-frame prediction. - The intra/
inter prediction unit 410 may subtract the prediction block from the current block (raw block) to produce a residual block. Thetransform unit 420 may perform a block-based transform, which may include transforming the residual block into transform coefficients in, for example, the frequency domain. Examples of block-based transforms include the Karhunen-Loève Transform (KLT), the Discrete Cosine Transform (DCT), the Singular Value Decomposition Transform (SVD), the Fourier transform (FT), the Discrete Sine Transform (DST), and the Asymmetric Discrete Sine Transform (ADST). In an example, the DCT may include transforming a block into the frequency domain. The DCT may include using transform coefficient values based on spatial frequency, with the lowest frequency (i.e., DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix. - The
quantization unit 430 may convert the transform coefficients into discrete quantum values, which may be referred to as quantized transform coefficients or quantization levels. The quantized transform coefficients can be entropy encoded by theentropy encoding unit 440 to produce entropy-encoded coefficients. Entropy encoding can include using a probability distribution metric. The entropy-encoded coefficients and information used to decode the block, which may include the type of prediction used, motion vectors, and quantizer values, can be output to thecompressed bitstream 404. Thecompressed bitstream 404 can be formatted using various techniques, such as run-length encoding (RLE) and zero-run coding. - The reconstruction path can be used to maintain reference frame synchronization between the
encoder 400 and a corresponding decoder, such as thedecoder 500 shown inFIG. 5 . The reconstruction path may be similar to the decoding process discussed below and may include decoding the encoded frame, or a portion thereof, which may include decoding an encoded block, which may include dequantizing the quantized transform coefficients at thedequantization unit 450 and inverse transforming the dequantized transform coefficients at theinverse transform unit 460 to produce a derivative residual block. Thereconstruction unit 470 may add the prediction block generated by the intra/inter prediction unit 410 to the derivative residual block to create a decoded block. Thefiltering unit 480 can be applied to the decoded block to generate a reconstructed block, which may reduce distortion, such as blocking artifacts. Although onefiltering unit 480 is shown inFIG. 4 , filtering the decoded block may include loop filtering, deblocking filtering, or other types of filtering or combinations of types of filtering. The reconstructed block may be stored or otherwise made accessible as a reconstructed block, which may be a portion of a reference frame, for encoding another portion of the current frame, another frame, or both, as indicated by the broken line at 482. Coding information, such as deblocking threshold index values, for the frame may be encoded, included in thecompressed bitstream 404, or both, as indicated by the broken line at 484. - Other variations of the
encoder 400 can be used to encode thecompressed bitstream 404. For example, a non-transform-basedencoder 400 can quantize the residual block directly without thetransform unit 420. In some implementations, thequantization unit 430 and thedequantization unit 450 may be combined into a single unit. -
FIG. 5 is a block diagram of adecoder 500 in accordance with implementations of this disclosure. Thedecoder 500 can be implemented in a device, such as thecomputing device 100 shown inFIG. 1 or the computing andcommunication devices FIG. 2 , as, for example, a computer software program stored in a data storage unit, such as thememory 110 shown inFIG. 1 . The computer software program can include machine-readable instructions that may be executed by a processor, such as theprocessor 120 shown inFIG. 1 , and may cause the device to decode video data as described herein. Thedecoder 500 can be implemented as specialized hardware included, for example, in thecomputing device 100. - The
decoder 500 may receive acompressed bitstream 502, such as thecompressed bitstream 404 shown inFIG. 4 , and may decode thecompressed bitstream 502 to generate anoutput video stream 504. Thedecoder 500 may include anentropy decoding unit 510, adequantization unit 520, aninverse transform unit 530, an intra/inter prediction unit 540, areconstruction unit 550, afiltering unit 560, or any combination thereof. Other structural variations of thedecoder 500 can be used to decode thecompressed bitstream 502. - The
entropy decoding unit 510 may decode data elements within thecompressed bitstream 502 using, for example, Context Adaptive Binary Arithmetic Decoding, to produce a set of quantized transform coefficients. Thedequantization unit 520 can dequantize the quantized transform coefficients, and theinverse transform unit 530 can inverse transform the dequantized transform coefficients to produce a derivative residual block, which may correspond to the derivative residual block generated by theinverse transform unit 460 shown inFIG. 4 . Using header information decoded from thecompressed bitstream 502, the intra/inter prediction unit 540 may generate a prediction block corresponding to the prediction block created in theencoder 400. At thereconstruction unit 550, the prediction block can be added to the derivative residual block to create a decoded block. Thefiltering unit 560 can be applied to the decoded block to reduce artifacts, such as blocking artifacts, which may include loop filtering, deblocking filtering, or other types of filtering or combinations of types of filtering, and which may include generating a reconstructed block, which may be output as theoutput video stream 504. - Other variations of the
decoder 500 can be used to decode thecompressed bitstream 502. For example, thedecoder 500 can produce theoutput video stream 504 without the deblocking filtering unit 570. -
FIG. 6 is a block diagram of a representation of aportion 600 of a frame, such as theframe 306 ofFIG. 3 , or an image, according to implementations of this disclosure. As shown, theportion 600 of the frame includes four 64×64blocks 610, which may be referred to as superblocks, in two rows and two columns in a matrix or Cartesian plane. A superblock can have a larger or a smaller size. WhileFIG. 6 is explained with respect to a superblock ofsize 64×64, the description is easily extendable to larger (e.g., 128×128) or smaller superblock sizes. - In an example, a superblock can be a basic or maximum coding unit (CU). Each superblock can include four 32×32
blocks 620. Each 32×32block 620 can include four 16×16blocks 630. Each 16×16block 630 can include four 8×8blocks 640. Each 8×8block 640 can include four 4×4blocks 650. Each 4×4block 650 can include 16 pixels, which can be represented in four rows and four columns in each respective block in the Cartesian plane or matrix. The pixels can include information representing an image captured in the frame, such as luminance information, color information, and location information. In an example, a block, such as a 16×16-pixel block as shown, can include aluminance block 660, which can includeluminance pixels 662; and twochrominance blocks 670/680, such as a U orCb chrominance block 670, and a V orCr chrominance block 680. The chrominance blocks 670/680 can includechrominance pixels 690. For example, theluminance block 660 can include 16×16luminance pixels 662, and eachchrominance block 670/680 can include 8×8chrominance pixels 690, as shown. Although one arrangement of blocks is shown, any arrangement can be used. AlthoughFIG. 6 shows N×N blocks, in some implementations, N×M, where N≠M, blocks can be used. For example, 32×64 blocks, 64×32 blocks, 16×32 blocks, 32×16 blocks, or any other size blocks can be used. In some implementations, N×2N blocks, 2N×N blocks, or a combination thereof can be used. - In some implementations, video coding can include ordered block-level coding. Ordered block-level coding can include coding blocks of a frame in an order, such as raster-scan order, wherein blocks can be identified and processed starting with a block in the upper left corner of the frame, or a portion of the frame, and proceeding along rows from left to right and from the top row to the bottom row, identifying each block in turn for processing. For example, the superblock in the top row and left column of a frame can be the first block coded, and the superblock immediately to the right of the first block can be the second block coded. The second row from the top can be the second row coded, such that the superblock in the left column of the second row can be coded after the superblock in the rightmost column of the first row.
- In an example, coding a block can include using quad-tree coding, which can include coding smaller block units with a block in raster-scan order. The 64×64 superblock shown in the bottom-left corner of the portion of the frame shown in
FIG. 6 , for example, can be coded using quad-tree coding in which the top-left 32×32 block can be coded, then the top-right 32×32 block can be coded, then the bottom-left 32×32 block can be coded, and then the bottom-right 32×32 block can be coded. Each 32×32 block can be coded using quad-tree coding in which the top-left 16×16 block can be coded, then the top-right 16×16 block can be coded, then the bottom-left 16×16 block can be coded, and then the bottom-right 16×16 block can be coded. Each 16×16 block can be coded using quad-tree coding in which the top-left 8×8 block can be coded, then the top-right 8×8 block can be coded, then the bottom-left 8×8 block can be coded, and then the bottom-right 8×8 block can be coded. Each 8×8 block can be coded using quad-tree coding in which the top-left 4×4 block can be coded, then the top-right 4×4 block can be coded, then the bottom-left 4×4 block can be coded, and then the bottom-right 4×4 block can be coded. In some implementations, 8×8 blocks can be omitted for a 16×16 block, and the 16×16 block can be coded using quad-tree coding in which the top-left 4×4 block can be coded, and then the other 4×4 blocks in the 16×16 block can be coded in raster-scan order. - In an example, video coding can include compressing the information included in an original, or input, frame by omitting some of the information in the original frame from a corresponding encoded frame. For example, coding can include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
- In an example, reducing spectral redundancy can include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which can be referred to as the YUV or YCbCr color model or color space. Using the YUV color model can include using a relatively large amount of information to represent the luminance component of a portion of a frame and using a relatively small amount of information to represent each corresponding chrominance component for the portion of the frame. For example, a portion of a frame can be represented by a high-resolution luminance component, which can include a 16×16 block of pixels, and by two lower resolution chrominance components, each of which representing the portion of the frame as an 8×8 block of pixels. A pixel can indicate a value (e.g., a value in the range from 0 to 255) and can be stored or transmitted using, for example, eight bits. Although this disclosure is described with reference to the YUV color model, any color model can be used.
- Reducing spatial redundancy can include transforming a block into the frequency domain as described above. For example, a unit of an encoder, such as the entropy encoding stage 408 of
FIG. 4 , can perform a DCT using transform coefficient values based on spatial frequency. - Reducing temporal redundancy can include using similarities between frames to encode a frame using a relatively small amount of data based on one or more reference frames, which can be previously encoded, decoded, and reconstructed frames of the video stream. For example, a block or a pixel of a current frame can be similar to a spatially corresponding block or pixel of a reference frame. A block or a pixel of a current frame can be similar to a block or a pixel of a reference frame at a different spatial location. As such, reducing temporal redundancy can include generating motion information indicating the spatial difference (e.g., a translation between the location of the block or the pixel in the current frame and the corresponding location of the block or the pixel in the reference frame).
- Reducing temporal redundancy can include identifying a block or a pixel in a reference frame, or a portion of the reference frame, that corresponds with a current block or pixel of a current frame. For example, a reference frame, or a portion of a reference frame, which can be stored in memory, can be searched for the best block or pixel to use for encoding a current block or pixel of the current frame. For example, the search may identify the block of the reference frame for which the difference in pixel values between the reference block and the current block is minimized, and can be referred to as motion searching. The portion of the reference frame searched can be limited. For example, the portion of the reference frame searched, which can be referred to as the search area, can include a limited number of rows of the reference frame. In an example, identifying the reference block can include calculating a cost function, such as a sum of absolute differences (SAD), between the pixels of the blocks in the search area and the pixels of the current block.
- The spatial difference between the location of the reference block in the reference frame and the current block in the current frame can be represented as a motion vector. The difference in pixel values between the reference block and the current block can be referred to as differential data, residual data, or as a residual block. In some implementations, generating motion vectors can be referred to as motion estimation, and a pixel of a current block can be indicated based on location using Cartesian coordinates such as ƒx,y. Similarly, a pixel of the search area of the reference frame can be indicated based on a location using Cartesian coordinates such as rx,y. A motion vector (MV) for the current block can be determined based on, for example, a SAD between the pixels of the current frame and the corresponding pixels of the reference frame.
-
FIG. 7 is a flowchart of aprocess 700 for encoding an image block using palettization according to implementations of this disclosure. Theprocess 700 can be implemented, for example, as a software program that may be executed by computing devices such as the computing andcommunication devices memory 110, and that, when executed by a processor, such asCPU 120, may cause the computing device to perform theprocess 700. Theprocess 700 can be implemented (e.g., executed, performed, etc.), in whole or in part, by an encoder, such as theencoder 400 ofFIG. 4 . Theprocess 700 can be implemented by a prediction unit of the encoder. For example, theprocess 700 can be implemented by the intra/inter prediction unit 410 ofFIG. 4 . While the intra/inter prediction unit 410 is described above with respect to inter prediction and intra prediction, the intra/inter prediction unit 410 can additionally perform palette-based prediction as described herein. In another implementation, the palette-based encoding can be implemented by a prediction unit of theencoder 400 that is separate from the intra/inter prediction unit 410. - The
process 700 can be used to encode the image block using palette-based encoding. The image block can be a block of an image. The image block can be block of a frame of a video stream. The image block can be ablock 340 as described with respect toFIG. 3 . The image block can be a coding unit (CU) as described with respect toFIG. 6 . The image block can be ofsize 64×64, 128×128, or any other square or rectangular size. - At 702, the
process 700 selects a fixed palette for the image block. As used in this disclosure, “select” means to create, form, produce, determine, use, construct, identify, specify, generate, or other select in any manner whatsoever. The fixed palette can include fixed palette entries. -
FIG. 8 is an example 800 of palettes according to implementations of this disclosure. The example 800 includes a fixedpalette 810. The fixedpalette 810 includes fixedpalette entries palette entry 812, which has an index or 0, corresponds to a color value “VALUE 1;” and the fixedpalette entry 814, which has an index of 1, corresponds to a color value “VALUE 2.” While the fixedpalette entries - The color values
VALUE 1 andVALUE 2 of the fixedpalette 810 are shown as bine one value each. However, the pixel value (i.e., the color value) can be several values, depending on the color system used. As such, “pixel value” (i.e., “color value”) means the values, collectively, of each of the color components of the color model (i.e., the color system) used for the palette. For example, in the case of a monochrome image, the pixel value can be a one greyscale value (e.g., a greyscale pixel value). For example, if the color model used is based on a luminance component (Y) and two chrominance components (U and V, or Cb and Cr), which may be referred to as the YUV or YCbCr color model, or color space, then each of the fixed palette entries can include a Y value, a U value, and a V value. Other color systems can be used. For example, a fixedpalette 820 illustrates a case where the RGB color system is used. As such, the pixel value can include several values, each corresponding to a color channel (i.e., the red channel, the green channel, and the blue channel). A fixedpalette 822 entry (corresponding, for example, to the fixed palette entry 812) includes a respective value for each of the R, G, and B color channels, namely the values (121, 4, 250); and, similarly, a fixed palette entry 824 (corresponding, for example, to the fixed palette entry 814) includes a respective value for each of the R, G, and B color channels, namely the values (45, 145, 35). The range of the values of the fixed palette entries depends on the number of bits used to represent the value. For example, in a case where 8 bits are used, the values can range from 0 to 255. - In an example, selecting the fixed palette can be performed by analyzing the image block and/or the image containing the image block. In a simple example, a histogram of pixel values of the image block can be generated, and a predetermined number of the top pixel values can be used in the fixed palette. Other known techniques (such as k-means clustering, vector quantization, and the like) can be used to select the fixed palette. In an example, the predetermined number can be 100, 256, or some other value.
- In an example, and as further described below, the selected fixed palette can be pruned to include a maximum number of entries (i.e., “maximum fixed palette size”). For example, the fixed palette can initially include 256 colors (i.e., entries) that are later pruned (i.e., reduced) to 100 values (i.e., maximum fixed palette size=100).
- In another example, the fixed palette can be a pre-generated palette. For example, generating the fixed palette can be performed in a stand-alone process (e.g., one or more stand-alone processes) that is separate from encoding the image block and/or encoding the image that includes the image block. For example, the stand-alone process can analyze many different types of images and determine for the different types of images respective fixed palettes. For example, the stand-alone process can determine respective fixed palettes for photographic images, graphical images, mixed images (e.g., images containing photographic and graphical content), other types of images, or combinations thereof. In an example of such stand-alone process, k-means clustering can be performed on the colors of a large corpus of images that are of a certain type in order to identify one or more palettes that are suitable for images of that type.
- At 704 of
FIG. 7 , theprocess 700 selects a mixed palette for the image block. The mixed palette includes mixed palette entries. Each mixed palette entry can be thought of as a recipe for manipulating a given color value. Amixed palette 830 ofFIG. 8 includesmixed palette entries - For example, given a color value of (RED=34, GREEN=24, BLUE=125), manipulating the color value using the
mixed palette entry 832 results in a new color value (RED=34+250, GREEN=24−32, BLUE=125+32). When applying the deltas, a value that exceeds a maximum possible value can be set to the maximum possible value. For example, if 8 bits are used to represent a color value, then the maximum possible value is 255. As such, as 34+250 exceeds the maximum possible value, the RED component is set to 255. Similarly, if applying the delta to a color component results in a negative value, the value can be set to 0. As such, the GREEN component is set to zero. Accordingly, the resulting color is (RED=255, GREEN=0, BLUE=157). - As mentioned, the deltas can also be percentages. As such, given the color value of (RED=34, GREEN=24, BLUE=125), and the mixed palette entry (RED=50, GREEN=120, BLUE=200), the resulting mixed value is (RED=34*50%, GREEN=24*120%, BLUE=125*200%)=(RED=17, GREEN=29, BLUE=250).
- In the case that the mixed palette uses the YUV color system, the mixed palette entries can include a luminance delta only. That is, the mixed palette entries can include intensity offsets only. In another example, the mixed palette entries can include luminance and chrominance color entries. In another example, the mixed palette entries can include luminance and/or chrominance deltas, which can be converted to red, green, and blue deltas. Conversion between color systems is well known. For example, the National Television Standards Committee (NTSC) defines the equations Y=0.299R+0.5876G+0.114B, U=Y−B, and V=Y−R for converting from the RGB system to the YUV color system.
-
FIG. 9 is an example of amixed palette 900 according to implementations of this disclosure. Themixed palette 900 is shown as including mixedentries having indices 101 to 325. For example, in a case where a fixed palette includes fixed entries 1-100, the mixed palette can include succeeding entries starting at the index of the last fixed entry (e.g., 100) plus 1. - As further described below, a mixed palette entry can be indicative of a mixing of (e.g., a method of combining the values of) pixels in a neighborhood of a pixel. The pixels in a neighborhood of a pixel that are to be combined can be referred to as neighboring pixels. The deltas of a mixed palette entry constitute the manipulation of the mixing of the pixel neighborhood.
-
FIG. 10 is an example 1000 of an illustration of mixing according to implementations of this disclosure. The example 1000 includes aportion 1001 of an image block. Theportion 1001 is shown as being 6×6 pixels for illustration purposes. Theportion 1001 includes apixel 1002. The example 1000 illustrates using mixing to determine (e.g., calculate, derive, etc.) a value for thepixel 1002. - In the example 1000, for mixing purposes, the neighborhood of the
pixel 1002 is composed of pixels 1004-1010. That is, for mixing purposes, the neighboring pixels of thepixel 1002 are the pixels 1004-1010. A table 1011 shows illustrative pixel values of the pixels 1004-1010 in the RGB color space. Rows 1012-1018 show, respectively, the RGB values of the pixels 1004-1010. Theportion 1001 is shown in a checkerboard pattern in which light-colored pixels, such as the pixels 1004-1010, correspond to pixel values that are not determined using mixing. That is, the values of the pixels 1004-1010 can be determined using, for example, fixed palette entries. - In an implementation, the method of combining the values of the neighboring pixels can be fixed. For example, the method of combining can be to average the neighboring pixels. A
row 1020 shows the rounded averages of each of the color components of the pixels 1004-1010. In another example, the method of combining the neighboring pixels can be a weighted average such that the distance (e.g., the Euclidian distance) of a neighboring pixel from thepixel 1002 can be used in determining the weighted average. Arow 1022 shows the result of manipulating therow 1020 using thepalette entry 832 ofFIG. 8 . As such, the color value (RED=max(102+250, 255), GREEN=209−32, BLUE=60+32)=(255, 177, 92) can be assigned to thepixel 1002. - In an example, the index (i.e., the position) of the mixing palette entry in the mixing palette can be indicative of the neighboring pixels to be used. For example, some mixing palette entries can correspond to combining a top neighbor with a left neighbor of a pixel, when a raster scan order is used to process the pixels of the image block. For example, to determine a color value of a
pixel 1024, a top pixel 1026 (i.e., an adjacent and above pixel) and a left pixel 1028 (i.e., an adjacent and to the left pixel) can be combined using a combining method. The combined value of the top and the left pixels can then be manipulated using the deltas of the mixing palette entry. In another example, the neighboring pixels can indicate only the left pixel. If the sum of errors is smaller than encoding using the fixed palette entry, then the fixed palette entry is removed. Additionally, for each location of the pixel map that uses the fixed palette entry, the fixed palette index is replaced with the mixed palette entry index corresponding to the smallest error for that pixel map location. - In another example, the neighboring pixels can indicate only the top pixel. In another example, some mixing palette entries can correspond to using a sort-search to determine the neighboring pixels to be used. An
image portion 1030 is used to illustrate a sort-search for determining the neighboring pixels. Given apixel 1032, a value of which is to be determined using mixing, quadrants of pixels can be used to determine the neighboring pixels. For example, a north-west, a north-east, a south-west, and a south-east quadrant can be used. In each of the quadrants, a closest pixel to thepixel 1032 is determined. The closest pixel is a pixel in the quadrant that does not use mixing. That is, the closest pixel can be a pixel that corresponds to a fixed palette entry, as described below with respect to the pixel map. Closeness can be determined based on Euclidian distance. As such, apixel 1034 illustrates a closest pixel in the north-west quadrant; apixel 1036 illustrates a closest pixel in the north-east quadrant; apixel 1038 illustrates a closest pixel in the south-west quadrant; and apixel 1040 illustrates a closest pixel in the south-east quadrant. The pixels 1034-1040 can be used as the neighboring pixels as described above. In an example, if a quadrant includes more than one closest pixels, one of closest pixels can be selected as the closest pixel. Alternatively, an average of the one or more than one closest pixels can be used as the closes pixel in that quadrant. Other ways of combining or selecting from the one or more than one closest pixels can be available. - In an example, the mixing palette that is used for encoding (and decoding as later described) can include 170 entries. The mixing entries corresponding to indices 100-119 can correspond to using four neighboring pixels. The four neighboring pixels can be as described with respect to the
pixel 1002 or thepixel 1032. Other ways of determining the four neighboring pixels can be available. The mixing entries corresponding to indices 120-169 can use the top and left neighboring pixels, such as described with respect to thepixel 1024. Palette entries corresponding to indices 0-99 can be fixed palette entries. - In the examples herein, for ease of explanation, all mixed palette entries are described as being included in one mixed palette and that the position of a mixed palette entry can be indicative of a pixel neighborhood, a mixing method, manipulation deltas, or a combination thereof. However, it is to be understood that the mixed palette can be multiple mixed palettes. For example, a first mixed palette can be for averaging a top neighbor and a left neighbor and manipulating the mixed value using the deltas of the mixed palette entries first mixed palette; a second mixed palette can be for averaging the neighboring pixels, based on a checker-board pattern, and manipulating the mixed value using the deltas of the mixed palette entries second mixed palette; and so on.
- Referring to
FIG. 7 again, at 706, theprocess 700 determines a pixel map. As used in this disclosure, “determine” means to create, form, produce, select, use, construct, identify, calculate, specify, generate, or other determine in any manner whatsoever. The pixel map includes, for a pixel of at least some pixels of the image block, a respective mapping to one of a fixed palette entry or a mixed palette entry. For example, the pixel map includes, for each pixel of the image block, a corresponding value such that the corresponding value is an index of a fixed palette entry or a mixing palette entry. For simplicity of explanation, the values of the pixel map are used as indices into either a fixed palette or a mixed palette. In an example, at least some of the values of the pixel map can be symbols that can be indicative of the respective palette entries. -
FIG. 11 is an example 1100 of an illustration of a pixel map according to implementations of this disclosure. The example 1100 can be a pixel map for a portion of an image that is 6×6 pixels. Using the example described above where the fixed palette includes 100 fixed palette entries (e.g., fixed palette entries with indices 0-99) and 170 mixed palette entries (e.g., mixed palette entries with indices 100-169), the example 1100 illustrates that each of the entries is a number between 0 and 169, inclusive. Thepixel map 1100 indicates, for each pixel, which color (i.e., a fixed color from the fixed palette or a mixed color from the mixed palette) is used to encode (by the encoder) and decode (by a decoder) a color value for that pixel. - An
index 1102 of thepixel map 1100 indicates that the color value corresponding to the fixed palette entry atindex 39 of the fixed palette is used for coding the co-located pixel of the image block. Similarly, theindices index 130, a mixing palette entry atindex 103, a mixing palette entry atindex 166, and a mixing palette entry atindex 156. - Referring again to
FIG. 7 , determining the pixel map can include processing, in a scan order, each pixel of the image block and determining a palette index to use for encoding the pixel. The palette index can be, as indicated above, an index of a fixed palette entry or an index of a mixing palette entry. - As indicated above, determining the pixel map can include mapping the pixel to a mixed palette entry corresponding to (i.e., being indicative of) at least one of the pixel neighborhood being neighboring pixels of a pixel, the mixing of the pixel neighborhood being an average of neighboring pixels, the manipulation of the mixing of the pixel neighborhood corresponding to adding a color delta to a color component of the mixing of the pixel neighborhood, or a combination thereof.
- In an example, and as described above, the neighboring pixels can be (e.g., can include) a top neighboring pixel and a left neighboring pixel of the pixel of the image block. In another example, and as also described above, neighboring pixels are pixels of the image block that are determined based a checker-board pattern. As such, the
process 700 can, in determining the pixel at 706, enforce a constraint such that at least every other pixel location must be mapped to a fixed palette entry. As such, while two consecutive (or adjacent) pixel locations can be mapped to fixed palette entries in the pixel map, no two adjacent pixel locations can be mapped to mixed palette entries. As such, in a case where no two adjacent pixel locations can be mapped to fixed palette entries, a checker-board pattern, such as shown in theportion 1001, results. In the checker-board pattern, each pixel location that is mapped to a fixed palette entry has four neighboring pixel locations (i.e., a top, left, bottom, and right neighboring pixels), each mapped to a mixed palette entry; and each pixel location that is mapped to a mixed palette entry has four neighboring pixel locations, each mapped to a fixed palette entry. In an example, theprocess 700 can include determining the neighboring pixels using a sort-search, as described above. - In an implementation, neighboring pixels can include pixels peripheral to (i.e., from outside) the image block. That is, the neighboring pixels can include pixels from neighboring (i.e., adjacent) image blocks. For example, assume that a pixel is on the left edge of the image block. As such, the left neighbor can be a pixel on the right edge of the adjacent image block. Using pixels from adjacent blocks as neighboring pixels may reduce blocking artefacts effects. In other implementations, neighboring pixels can only be pixels in the image block itself.
- In an example, determining the pixel map at 706 can be a multi-step process that can also include palette pruning, which is mentioned above. For example, an initial fixed palette of a first size (e.g., 256) can be selected based, for example, on one of the above-mentioned techniques, such as using a histogram, k-means clustering, or the like.
- In the first step, each of the pixel values of the image block is mapped to a color (e.g., an entry) of the initial fixed palette. In the second step, the fixed palette, having a second size that is smaller than the first size, is determined by removing some of the entries (i.e., colors) from the initial palette and re-assigning pixels assigned to those colors to one of the mixed palette entries.
- For example, to determine whether the color of the initial fixed palette is to be removed, the
process 700 can compare the error that results from keeping the color and the error that results from removing the color. An error can be calculated for every pixel that uses the color and a total sum of errors is calculated as the sum of all the errors. The error associated with a pixel can be calculated as follows. For each of the mixed palette entries, a respective color (i.e., a respective manipulated value) is calculated according to the mixed palette entry (i.e., determining neighboring colors, mixing the values of the neighboring pixels, and manipulating the mixed value according to the mixed palette entry deltas). The smallest of the respective errors can be selected as the error associated with the pixel. In an example, the error can be calculated as the Euclidean distance of the color components of the manipulated color and the original color value of the image block. - If the sum of all the smallest of the respective errors (i.e., the sum of the smallest errors of the pixels that use the fixed palette color) is smaller than the error of using the fixed palette entry, then the fixed palette color is removed from the fixed palette, and the fixed palette index in the pixel map is replaced, for each pixel described above, with the index of the mixed palette entry corresponding to the smallest error for that pixel; otherwise, the fixed palette entry is not removed from the fixed palette and the pixel map is not changed. Other techniques can be available for pruning the fixed palette.
- At 708, the
process 700 encodes, in an encoded bitstream, the pixel map. The encoded bitstream can be thecompressed bitstream 404 ofFIG. 4 . Any suitable encoding technique can be used to encode the pixel map in the encoded bitstream. In an example, run-length encoding can be used to encode the values of the pixel map in the encoded bitstream. In an example, entropy coding can be used to encode the entries of the pixel map. For example, the values of previously (i.e., in a scan order) encoded pixel map entries can be used as a context for determining a probability distribution for encoding a current entry. - In an example, encoding, in the encoded bitstream, the pixel map can include encoding, in the encoded bitstream, the mixed palette. That is, the delta values of each of the entries of the mixed palette can be encoded in the encoded bitstream. Any suitable encoding technique can be used. As mentioned above, the indices of the entries need not be encoded in the bitstream since the indices can be inferred based on the order of the entries in the encoded bitstream.
- In an example, the mixed palette is not encoded in the bitstream. For example, in a case where the encoder and the decoder use the same mixing palette entries, the encoder need not encode the mixing palette entries in the bitstream.
-
FIG. 12 is an illustration of a diagram of an encodedbitstream 1200 according to implementations of this disclosure. The encodedbitstream 1200 can be a portion of a compressed bitstream, such as thecompressed bitstream 404 ofFIG. 4 . The encodedbitstream 1200 includes aportion 1202 that includes (e.g., encodes) the fixed palette entries of a fixed palette, aportion 1204 that includes (e.g., encodes) the mixed palette entries of a mixed palette, and aportion 1206 that includes (e.g., encodes) the values (i.e., the indices) of the pixel map. - As indicated above, in some implementations, the
portion 1204 can be omitted. Similarly, in some examples, theportion 1202 may be omitted from the encodedbitstream 1200. In a situation where the encoder and the decoder use the same pre-determined palette, the fixed palette need not be communicated to the decoder in a the encoded bitstream. In situations where the encoder and the decoder may use one of several pre-determined palettes, the encoder can indicate, in the encoded bitstream which of the pre-determined palettes the decoder is to use. For example, the encoder can communicate, via a syntax element, an index and/or a label indicative of the pre-determined palette that the encoder is to use. As an illustrative example, three pre-determined palettes may be available, and an image ofsize 256×256 pixels may be partitioned into 16 image blocks each ofsize 64×64 pixels. The encoder may indicate that the first palette is to be used for a first image block; that the second palette is to be used for five of the 16 image blocks; that the third palette is to be used for three of the 16 image blocks; and that the remaining seven image blocks are not palette-encoded (i.e., the seven remaining image blocks are either intra predicted, inter predicted, or a combination thereof). In another example, the decoder may be able to infer the pre-determined palette to use. As such, the syntax element can be omitted. -
FIG. 13 is a flowchart of a process 1300 for decoding an image block using palettization according to implementations of this disclosure. The process 1300 can be implemented, for example, as a software program that may be executed by computing devices such as the computing andcommunication devices memory 110, and that, when executed by a processor, such asCPU 120, may cause the computing device to perform the process 1300. - The process 1300 can be implemented (e.g., executed, performed, etc.), in whole or in part, by a decoder, such as the
decoder 500 ofFIG. 5 . The process 1300 can be implemented by a prediction unit of the decoder. For example, the process 1300 can be implemented by the intra/inter prediction unit 540 ofFIG. 5 . While the intra/inter prediction unit 510 is described above with respect to inter prediction and intra prediction, the intra/inter prediction unit 510 can additionally perform palette-based prediction as described herein. In another implementation, the palette-based decoding can be implemented by a prediction unit of thedecoder 500 that is separate from the intra/inter prediction unit 540. The process 1300 can be performed in reconstruction path of an encoder, such as described by the reconstruction path ofFIG. 4 . - The process 1300 can be used to decode the image block using palette-based decoding. The image block can be a block of an image. The image block can be block of a frame of a video stream. The image block can be a
block 340 as described with respect toFIG. 3 . The image block can be a coding unit (CU) as described with respect toFIG. 6 . - At 1302, the process 1300 selects a fixed palette. The fixed palette includes fixed palette entries. The fixed palette can be as described with respect to the fixed
palette 810 ofFIG. 8 . In an example, the process 1300 selects the fixed palette by decoding the fixed palette from a compressed bitstream. For example, the bitstream can be as described with respect to encodedbitstream 1200 ofFIG. 12 and the fixed palette can be decoded from theportion 1202 ofFIG. 12 . In another example, the process 1300 selects the fixed palette based on the type of image that includes the image block. As such, the fixed palette can be a pre-generated palette, such as described with respect toFIG. 7 . - At 1304, the process 1300 selects a mixed palette. The mixed palette includes mixed palette entries. The mixed palette can be as described with respect to the
mixed palette 830 ofFIG. 8 . In an example, the process 1300 selects the mixed palette by decoding the mixed palette from the compressed bitstream. For example, the mixed palette can be decoded from theportion 1204 ofFIG. 12 . As such, selecting the mixed palette can include receiving the mixed palette in the compressed bitstream. In another example, such as in a case where the encoder and the decoder use the same mixing palette entries, the mixed palette may not be included in the encoded bitstream and the process 1300 can select a pre-determined mixing palette. In another example, the process 1300 decodes an indicator of the pre-determined mixing palette. For example, the process 1300 can have available more than one pre-determined mixing palettes. As such, the process 1300 can receive, in the encoded bitstream, an indication of the one of the more than one pre-determined mixing palettes to select. As indicated above, a mixed palette entry can correspond to a pixel neighborhood, a mixing of the pixel neighborhood, a manipulation of the mixing of the pixel neighborhood, or a combination thereof. Selecting a mixed palette can include selecting multiple mixed palettes as described above. - At 1306, the process 1300 receives a pixel map. The pixel map can be received in the encoded bitstream. As such, the process 1300, or another module of a decoder, can decode the pixel map from the encoded bitstream. The decoded pixel map can then be received by the process 1300. The pixel map can be as described with respect to pixel map described with respect to
FIG. 11 . As such, the pixel map can include, implicitly or explicitly, for each pixel of the image block a corresponding palette index. The corresponding palette index can be an index of a fixed palette entry or can be an index of a mixed palette entry. - The process 1300 uses the pixel map to reconstruct (e.g., decode, reconstitute, etc.) the image block. That is, the process 1300 can process, for example in a raster scan order, each value in the pixel map to determine a color value to use for a pixel at a corresponding location in the image block. Said another way, the process 1300 assigns a color value to a pixel location of the image block based on the corresponding (i.e., co-located) index in the pixel map.
- As described above, an index that corresponds to a fixed palette entry corresponds directly to a color value. However, an index that corresponds to a mixed palette entry may require that neighboring pixels that are after a current pixel in the scan order be decoded first. For example, and as described with respect to
FIG. 10 , decoding (e.g., assigning a value to) thepixel 1002, first requires that the values ofpixels pixel 1002 in the raster scan order, be known. As such, the value of thepixel 1002 cannot be determined when thepixel 1002 is visited in the raster scan order. Similarly, a color value cannot be assigned to (e.g., determined for, calculated for, etc.) thepixel 1032 before the color values of thepixels - At 1308, the process 1300 decodes, in a first pass, first pixels of the image block, using the fixed palette. The first pixels are those pixels of the image block that are encoded using entries of the fixed palette. That is, in the first pass, the process 1300 assigns color values to those pixels of the image block that use indices of the fixed palette. An example of an implementation of the first pass is described with respect to
FIG. 14 . -
FIG. 14 is a flowchart of aprocess 1400 of a first pass for decoding an image block using a pixel map according to implementations of this disclosure. Theprocess 1400 can be used by the process 1300 at 1308. Theprocess 1400 traverses, in a raster scan order, each value of the pixel map and, if the value at a current location is an index into the fixed palette, then theprocess 1400 assigns the color value indicated by the index from fixed palette to the corresponding pixel in the image block. In the description of theprocess 1400, the fixed palette includes MAX_FIXED entries; the fixed palette entries are indexed from 0 to MAX_FIXED-1; the pixel map is denoted PIXEL_MAP; and the image block is denoted IMAGE_BLOCK. - While, the pixel map and the image block are usually denoted as being two-dimensional arrays, for simplicity of explanation, they are denoted here as being one-dimensional arrays. A person skilled in the art can appreciate that a scan location can be converted to a two-dimensional Cartesian coordinate, and vice versa. Additionally, while the description below refers to a pixel (color) value, it is to be understood that the pixel (color) value is to be interpreted as including the values of each color component of the color system used in the palette entries.
- At 1402, the
process 1400 assigns a loop variable LOC to zero. The loop variable LOC corresponds to a scan location in the raster scan order. If the image block is of size M×N, then the maximum scan location (i.e., MAX_SCAN_LOC) is M*N-1. At 1404, theprocess 1400 tests whether the pixel at scan location LOC is encoded using a color value from the fixed palette. That is, at 1404, theprocess 1400 tests whether the index in the pixel map at the current scan location LOC (i.e., PIXEL_MAP[LOC]) is between 0 and MAX_FIXED (i.e., PIXEL_MAP[LOC] <MAX_FIXED). If so, theprocess 1400 proceeds to 1406; otherwise theprocess 1400 proceeds to 1408, thereby skipping assigning a color value to the pixel at scan location LOC because the pixel is not encoded using a fixed palette entry. - At 1406, the
process 1400 assigns, to the pixel at scan location LOC in the image block (i.e., IMAGE_BLOCK[LOC]), the color value of the fixed palette that is at the index specified by pixel map at location LOC. That is, theprocess 1400 sets IMAGE_BLOCK[LOC] to FIXED_PALETTE[PIXEL_MAP[LOC]]. At 1408, theprocess 1400 updates the loop variable in preparation for processing the next scan location. At 1410, theprocess 1400 tests whether all scan locations of the image block have been processed. If so, theprocess 1400 ends at 1412; otherwise theprocess 1400 proceeds back to 1404. - Returning to
FIG. 13 , at 1310, the process 1300 decodes, in a second pass, second pixels of the image block, using the mixed palette and the first pixels. The second pixels are those pixels of the image block that are encoded using entries of the mixed palette. That is, in the second pass, the process 1300 assigns color values to those pixels of the image block that use indices of the mixed palette. An example of an implementation of the second pass is described with respect toFIG. 15 . - In an example, decoding, in the second pass, the second pixels of the image block, using the mixed palette and the first pixels can include determining, for a second pixel of the second pixels, a mixed palette entry; determining, based on the mixed palette entry, the pixel neighborhood of the second pixel, the pixel neighborhood being a group of pixels from the first pixels; mixing the group of pixels by combining the values of the group of pixels to generate a mixed pixel value (i.e., a mixed value); and applying, based on the mixed palette entry, a delta offset to a color component of the mixing pixel value to generate the second pixel. In an example, and as described above, the group of pixels can include a top neighboring pixel and a left neighboring pixel of the second pixel. In another example, and as also described above, the group of pixels can be determined using a checkerboard pattern of the image block. In yet another example, the group of pixels can be determined using sort-search.
-
FIG. 15 is a flowchart of aprocess 1500 of a second pass for decoding an image block using a pixel map according to implementations of this disclosure. Theprocess 1500 can be used by the process 1300 at 1310. Theprocess 1500 traverses, in a raster scan order, each value of the pixel map and, if the value at a current location is an index into the mixed palette, then theprocess 1500 determines, based on the index of the mixed palette entry, neighboring pixels of the current pixel; mixes the values of the neighboring pixels based on the index of the mixed palette entry, resulting in a mixed value; manipulates the mixed value according to the deltas of the mixed palette entry, resulting in a manipulated value; and assigns the manipulated value to the image pixel. - In the following description of the
process 1500, pixel value, color value, LOC, MAX_FIXED, PIXEL_MAP, IMAGE_BLOCK, and MAX_SCAN_LOC are as described with respect to theprocess 1400. MIXED_PALETTE denotes the mixed palette. - At 1502, the
process 1500 assigns the loop variable LOC to zero. At 1504, theprocess 1400 tests whether the pixel at scan location LOC is encoded using a mixed palette entry by testing whether the palette index at PIXEL_MAP[LOC] is greater than the number of palette entries (i.e., MAX_FIXED) in the fixed palette. If so, theprocess 1500 proceeds to 1506; if not (indicating that the image pixel at the current scan location LOC was assigned a color in the first pass), theprocess 1500 proceeds to 1516. - At 1506, the
process 1500 gets (e.g., reads, accesses, etc.) the mixed palette entry corresponding to the palette entry value at location LOC in the pixel map. At described above, the location (e.g., the index) of the mixed palette entry in the mixed palette can be indicative of at least one of the neighboring pixels, a mixing (e.g., combination) method, and manipulation deltas of the mixed value. As such, at 1508, theprocess 1500 determines the neighboring pixels, for example, as described above. It is noted that, in an implementation, the neighboring pixels are pixels whose values were determined using the first pass. At 1510, theprocess 1500 mixes (e.g., combines, such as by averaging) the values (e.g., the respective color components) of the neighboring pixels, resulting in a mixed value. Again, the mixed value can be multiple mixed values, each corresponding to a color component, as described with respect torow 1020 ofFIG. 10 . At 1512, theprocess 1500 calculates a manipulated value (i.e., MAN) according to the deltas of the mixed palette entry of 1506. Calculating the manipulated value (MAN) can be as described with respect to therow 1022 ofFIG. 10 . - At 1514, the
process 1500 assigns the manipulated value (MAN) to the pixel at scan location LOC of the image block. At 1516, the loop variable LOC is incremented. At 1518, if all the scan locations have been processed, theprocess 1500 ends at 1520; otherwise theprocess 1500 proceeds back to 1504, which is described above. - As mentioned above, the second pass (e.g., such as described with respect to the process 1500) can be used when a pixel that is required for mixing for a current pixel at a scan location is at a subsequent scan location. However, that is not the case for all mixed palette entries. That is, for some mixed palette entries, all pixels required for the mixing may be at scan locations that are before the scan location of the current pixel. For example, when the group of pixels includes the top neighboring pixel, the left neighboring pixel, or a combination thereof, then all pixels required for mixing are available. As such, in some examples, the test at 1404 can be whether all neighboring pixels are available; and, correspondingly, the at 1504 the test can be whether the pixel map at the current location was processed in the first pass. In an example, the test at 1404 of whether all neighboring pixels are available can be based on the palette entry index. For example, and using the above example, the test at 1404 can be whether (PIXEL_MAP[LOC]<MAX_FIXED OR PIXELP_MAP[LOC]≥120). Any other similar, equivalent, or suitable technique can be used so that some of the mixing palette entries can be processed in the first pass by the
process 1400. - Local mixing of colors using mixing palette entries is described in this disclosure. As local mixing palette entries can appear more often in an image than fixed (e.g., specialized) color values for the same purpose, the resulting entropy in an encoded image can be smaller than what is achievable with a large palette. For example, the entropy that results from using a fixed palette of
size 100 with a mixing palette, can be smaller than using a palette that includes, for example, 256 colors. A small supplemental palette (e.g., the mixing palette) of colors that are added into the local mix of colors can be used. The mixing palette can be thought of as allowing color definitions such as “take 100% of a certain local color and make it 10% higher in luminosity” and “take 70% of a local color and mix into it 30% of Chartreuse Yellow.” - For simplicity of explanation, the
processes - The words “example” or “exemplary” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations thereof. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an embodiment” or “one embodiment” or “an implementation” or “one implementation” throughout is not intended to mean the same embodiment or implementation unless described as such. As used herein, the terms “determine” and “identify,” or any variations thereof, include selecting, ascertaining, computing, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any manner whatsoever using one or more of the devices shown in
FIG. 1 . - Further, for simplicity of explanation, although the figures and descriptions herein may include sequences or series of operations or stages, elements of the methods disclosed herein can occur in various orders and/or concurrently. Additionally, elements of the methods disclosed herein may occur with other elements not explicitly presented and described herein. Furthermore, one or more elements of the methods described herein may be omitted from implementations of methods in accordance with the disclosed subject matter.
- The implementations of the transmitting computing and
communication device 100A and/or the receiving computing andcommunication device 100B (and the algorithms, methods, instructions, etc., stored thereon and/or executed thereby) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmitting computing andcommunication device 100A and the receiving computing andcommunication device 100B do not necessarily have to be implemented in the same manner. - Further, in one implementation, for example, the transmitting computing and
communication device 100A or the receiving computing andcommunication device 100B can be implemented using a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein. In addition, or alternatively, for example, a special-purpose computer/processor, which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein, can be utilized. - The transmitting computing and
communication device 100A and the receiving computing andcommunication device 100B can, for example, be implemented on computers in a real-time video system. Alternatively, the transmitting computing andcommunication device 100A can be implemented on a server, and the receiving computing andcommunication device 100B can be implemented on a device separate from the server, such as a hand-held communications device. In this instance, the transmitting computing andcommunication device 100A can encode content using anencoder 400 into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using adecoder 500. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting computing andcommunication device 100A. Other suitable transmitting computing andcommunication device 100A and receiving computing andcommunication device 100B implementation schemes are available. For example, the receiving computing andcommunication device 100B can be a generally stationary personal computer rather than a portable communications device, and/or a device including anencoder 400 may also include adecoder 500. - Further, all or a portion of implementations can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available. The above-described implementations have been described in order to allow easy understanding of the application and are not limiting. On the contrary, the application covers various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation as is permitted under the law so as to encompass all such modifications and equivalent arrangements.
Claims (20)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/114,471 US10848787B2 (en) | 2018-08-28 | 2018-08-28 | Lossy image compression using palettization of locally mixed colors |
PCT/US2019/034108 WO2020046434A1 (en) | 2018-08-28 | 2019-05-28 | Lossy image compression using palettization of locally mixed colors |
US17/093,926 US11695919B2 (en) | 2018-08-28 | 2020-11-10 | Lossy image compression using palettization of locally mixed colors |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/114,471 US10848787B2 (en) | 2018-08-28 | 2018-08-28 | Lossy image compression using palettization of locally mixed colors |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/093,926 Continuation-In-Part US11695919B2 (en) | 2018-08-28 | 2020-11-10 | Lossy image compression using palettization of locally mixed colors |
Publications (2)
Publication Number | Publication Date |
---|---|
US20200077122A1 true US20200077122A1 (en) | 2020-03-05 |
US10848787B2 US10848787B2 (en) | 2020-11-24 |
Family
ID=66858038
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/114,471 Active 2039-01-01 US10848787B2 (en) | 2018-08-28 | 2018-08-28 | Lossy image compression using palettization of locally mixed colors |
Country Status (2)
Country | Link |
---|---|
US (1) | US10848787B2 (en) |
WO (1) | WO2020046434A1 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10924750B2 (en) * | 2019-03-01 | 2021-02-16 | Alibaba Group Holding Limited | Palette size constraint in palette mode for video compression system |
US20210099699A1 (en) * | 2019-09-30 | 2021-04-01 | Ati Technologies Ulc | Hierarchical histogram calculation with application to palette table derivation |
US11087505B2 (en) * | 2019-11-15 | 2021-08-10 | Adobe Inc. | Weighted color palette generation |
US20220272344A1 (en) * | 2021-02-19 | 2022-08-25 | Samsung Display Co., Ltd. | Systems and methods for joint color channel entropy encoding with positive reconstruction error |
US11477351B2 (en) * | 2020-04-10 | 2022-10-18 | Ssimwave, Inc. | Image and video banding assessment |
US20220394282A1 (en) * | 2020-02-05 | 2022-12-08 | Beijing Bytedance Network Technology Co., Ltd. | Palette mode for local dual tree |
US11800155B2 (en) | 2020-02-05 | 2023-10-24 | Beijing Bytedance Network Technology Co., Ltd. | Deblocking parameters for chroma component |
Family Cites Families (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7072512B2 (en) | 2002-07-23 | 2006-07-04 | Microsoft Corporation | Segmentation of digital video and images into continuous tone and palettized regions |
GB2457646B (en) | 2007-10-30 | 2010-03-03 | Imagination Tech Ltd | Method and apparatus for compressing and decompressing data |
GB0823701D0 (en) * | 2008-12-31 | 2009-02-04 | Symbian Software Ltd | Fast data entry |
US8599214B1 (en) | 2009-03-20 | 2013-12-03 | Teradici Corporation | Image compression method using dynamic color index |
US8780996B2 (en) | 2011-04-07 | 2014-07-15 | Google, Inc. | System and method for encoding and decoding video data |
US8571311B2 (en) * | 2011-12-15 | 2013-10-29 | Microsoft Corporation | Raster graphics image transcoding for file size reduction |
US9363517B2 (en) | 2013-02-28 | 2016-06-07 | Broadcom Corporation | Indexed color history in image coding |
US11259020B2 (en) | 2013-04-05 | 2022-02-22 | Qualcomm Incorporated | Determining palettes in palette-based video coding |
US9558567B2 (en) | 2013-07-12 | 2017-01-31 | Qualcomm Incorporated | Palette prediction in palette-based video coding |
JP2015023506A (en) * | 2013-07-22 | 2015-02-02 | 株式会社東芝 | Image encoding apparatus and image decoding apparatus |
US10291827B2 (en) * | 2013-11-22 | 2019-05-14 | Futurewei Technologies, Inc. | Advanced screen content coding solution |
US10972742B2 (en) | 2013-12-19 | 2021-04-06 | Canon Kabushiki Kaisha | Encoding process using a palette mode |
WO2015096647A1 (en) * | 2013-12-27 | 2015-07-02 | Mediatek Inc. | Method and apparatus for major color index map coding |
EP3090559A2 (en) | 2014-01-02 | 2016-11-09 | VID SCALE, Inc. | Two-dimensional palette coding for screen content coding |
US10091512B2 (en) | 2014-05-23 | 2018-10-02 | Futurewei Technologies, Inc. | Advanced screen content coding with improved palette table and index map coding methods |
US11223832B2 (en) * | 2014-07-24 | 2022-01-11 | Qualcomm Incorporated | Methods and apparatus for encoding video data using block palettes and sub-block and pixel scanning orders |
CN110677656A (en) * | 2014-10-06 | 2020-01-10 | Vid拓展公司 | Method for performing palette decoding and decoding apparatus |
EP3007423A1 (en) | 2014-10-06 | 2016-04-13 | Industrial Technology Research Institute | Method of color palette coding applicable to electronic device and electronic device using the same |
US9877029B2 (en) * | 2014-10-07 | 2018-01-23 | Qualcomm Incorporated | Palette index binarization for palette-based video coding |
JP6545570B2 (en) * | 2015-08-18 | 2019-07-17 | 株式会社東芝 | Encoding device, decoding device and image processing device |
-
2018
- 2018-08-28 US US16/114,471 patent/US10848787B2/en active Active
-
2019
- 2019-05-28 WO PCT/US2019/034108 patent/WO2020046434A1/en active Application Filing
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10924750B2 (en) * | 2019-03-01 | 2021-02-16 | Alibaba Group Holding Limited | Palette size constraint in palette mode for video compression system |
US20210099699A1 (en) * | 2019-09-30 | 2021-04-01 | Ati Technologies Ulc | Hierarchical histogram calculation with application to palette table derivation |
US11076151B2 (en) * | 2019-09-30 | 2021-07-27 | Ati Technologies Ulc | Hierarchical histogram calculation with application to palette table derivation |
US11087505B2 (en) * | 2019-11-15 | 2021-08-10 | Adobe Inc. | Weighted color palette generation |
US20220394282A1 (en) * | 2020-02-05 | 2022-12-08 | Beijing Bytedance Network Technology Co., Ltd. | Palette mode for local dual tree |
US11800155B2 (en) | 2020-02-05 | 2023-10-24 | Beijing Bytedance Network Technology Co., Ltd. | Deblocking parameters for chroma component |
US11917169B2 (en) * | 2020-02-05 | 2024-02-27 | Beijing Bytedance Newtork Technology Co., Ltd. | Palette mode for local dual tree |
US11477351B2 (en) * | 2020-04-10 | 2022-10-18 | Ssimwave, Inc. | Image and video banding assessment |
US20220272344A1 (en) * | 2021-02-19 | 2022-08-25 | Samsung Display Co., Ltd. | Systems and methods for joint color channel entropy encoding with positive reconstruction error |
US11770535B2 (en) * | 2021-02-19 | 2023-09-26 | Samsung Display Co., Ltd. | Systems and methods for joint color channel entropy encoding with positive reconstruction error |
Also Published As
Publication number | Publication date |
---|---|
WO2020046434A1 (en) | 2020-03-05 |
US10848787B2 (en) | 2020-11-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10848787B2 (en) | Lossy image compression using palettization of locally mixed colors | |
US10009625B2 (en) | Low-latency two-pass video coding | |
US10104398B2 (en) | Super-transform video coding | |
US11496740B2 (en) | Efficient context handling in arithmetic coding | |
US10694180B2 (en) | Entropy coding transform partitioning information | |
US11457239B2 (en) | Block artefact reduction | |
US9247251B1 (en) | Right-edge extension for quad-tree intra-prediction | |
US11765377B2 (en) | Alpha channel prediction | |
US11153588B2 (en) | Dual deblocking filter thresholds | |
US9998753B1 (en) | Prediction dependent transform coding | |
US10652552B1 (en) | Efficient noise reduction coding | |
US10142647B2 (en) | Alternating block constrained decision mode coding | |
US11695919B2 (en) | Lossy image compression using palettization of locally mixed colors | |
US11122297B2 (en) | Using border-aligned block functions for image compression | |
US9756331B1 (en) | Advance coded reference prediction | |
US10645418B2 (en) | Morphological anti-ringing filter for lossy image compression | |
US20220014792A1 (en) | Alpha channel post processing in image coding |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ALAKUIJALA, JYRKI;RHATUSHNYAK, ALEXANDER;REEL/FRAME:046723/0722Effective date: 20180828 |
|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |