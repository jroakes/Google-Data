US20240153495A1 - Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks - Google Patents
Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks Download PDFInfo
- Publication number
- US20240153495A1 US20240153495A1 US18/494,984 US202318494984A US2024153495A1 US 20240153495 A1 US20240153495 A1 US 20240153495A1 US 202318494984 A US202318494984 A US 202318494984A US 2024153495 A1 US2024153495 A1 US 2024153495A1
- Authority
- US
- United States
- Prior art keywords
- token
- speech recognition
- auxiliary
- tokens
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012549 training Methods 0.000 claims abstract description 137
- 238000000034 method Methods 0.000 claims abstract description 64
- 238000013518 transcription Methods 0.000 claims abstract description 62
- 230000035897 transcription Effects 0.000 claims abstract description 62
- 230000001364 causal effect Effects 0.000 claims description 50
- 230000015654 memory Effects 0.000 claims description 33
- 238000012545 processing Methods 0.000 claims description 21
- 238000004891 communication Methods 0.000 claims description 8
- 230000008569 process Effects 0.000 description 34
- 239000013598 vector Substances 0.000 description 27
- 238000009826 distribution Methods 0.000 description 19
- 230000007246 mechanism Effects 0.000 description 11
- 238000004590 computer program Methods 0.000 description 8
- 230000003287 optical effect Effects 0.000 description 6
- 238000003058 natural language processing Methods 0.000 description 5
- 230000000306 recurrent effect Effects 0.000 description 5
- 230000004913 activation Effects 0.000 description 4
- 238000001994 activation Methods 0.000 description 4
- 238000013528 artificial neural network Methods 0.000 description 4
- 239000011159 matrix material Substances 0.000 description 4
- 238000010606 normalization Methods 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000001143 conditioned effect Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000001537 neural effect Effects 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000037361 pathway Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004043 responsiveness Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000000926 separation method Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/284—Lexical analysis, e.g. tokenisation or collocates
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
Abstract
A method includes receiving a training dataset that includes one or more spoken training utterances for training an automatic speech recognition (ASR) model. Each spoken training utterance in the training dataset paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens. For each spoken training utterance, the method includes generating a speech recognition hypothesis for a corresponding spoken training utterance, determining a speech recognition loss based on the speech recognition hypothesis and the corresponding transcription, generating a predicted auxiliary token for the corresponding spoken training utterance, and determining an auxiliary task loss based on the predicted auxiliary token and the corresponding target sequence of auxiliary tokens. The method also includes the ASR model jointly on the speech recognition loss and the auxiliary task loss determined for each spoken training utterance.
Description
- This U.S. Patent Application claims priority under 35 U.S.C. § 119(e) to U.S. Provisional Application 63/381,119, filed on Oct. 26, 2022. The disclosure of this prior application is considered part of the disclosure of this application and is hereby incorporated by reference in its entirety.
- This disclosure relates to multi-output RNN-T joint networks for multi-task learning of ASR and auxiliary tasks.
- Automatic speech recognition (ASR), the process of taking an audio input and transcribing it into text, has greatly been an important technology that is used in mobile devices and other devices. In general, automatic speech recognition attempts to provide accurate transcriptions of what a person has said by taking an audio input (e.g., speech utterance) and transcribing the audio input into text. Modern ASR models continue to improve in both accuracy (e.g., a low word error rate (WER)) and latency (e.g., delay between the client speaking and the transcription) based on the ongoing development of deep neural networks. Some ASR models perform other speech-related tasks in addition to transcribing speech into text. As a result, however, the accuracy and latency of transcribing speech into text degrades because of the integration of the other speech-related tasks. Accordingly, the performance degradation makes these multi-task ASR models unsuitable for many applications.
- One aspect of the disclosure provides a computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations of training a multi-output joint network for multi-task learning. The operations include receiving a training dataset that includes one or more spoken training utterances for training an automatic speech recognition (ASR) model. Each spoken training utterance in the training dataset is paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens. For each spoken training utterance of the one or more spoken training utterances, the operations include: generating, by a joint network of the ASR model, a speech recognition hypothesis for a corresponding spoken training utterance of the one or more spoken training utterances; determining a speech recognition loss based on the speech recognition hypothesis generated by the joint network for the corresponding spoken training utterance and the corresponding transcription; generating, by the joint network of the ASR model, a predicted auxiliary token for the corresponding spoken training utterance of the one or more spoken training utterances; and determining an auxiliary task loss based on the predicted auxiliary token generated by the joint network for the corresponding spoken training utterance and the corresponding target sequence of auxiliary tokens. The operations also include training the ASR model jointly on the speech recognition loss and the auxiliary task loss determined for each spoken training utterance.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, the ASR model includes: a causal encoder configured to receive, as input, a sequence of acoustic frames characterizing each of the one or more spoken training utterances and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; a first prediction network configured to receive, as input, a first sequence of non-blank symbols output by a final softmax layer and generate, at each of the plurality of output steps, a first dense representation; and a first joint network configured to receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and the first dense representation generated by the first prediction network at each of the plurality of output steps and generate, at each of the plurality of output steps, an initial speech recognition hypothesis and an initial predicted auxiliary token. In these implementations, the ASR model may include: a non-causal causal encoder configured to receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and generate, at each of a plurality of output steps, a second higher order feature representation for a corresponding first higher order feature representation; a second prediction network configured to receive, as input, a second sequence of non-blank symbols output by the final softmax layer and generate, at each of the plurality of output steps, a second dense representation; and a second joint network configured to receive, as input, the second higher order feature representation generated by the non-causal encoder at each of the plurality of output steps and the second dense representation generated by the second prediction network at each of the plurality of output steps and generate a final speech recognition hypothesis and a final predicted auxiliary token.
- In some examples, the joint network generates the speech recognition hypothesis and the predicted auxiliary token synchronously. In other examples, the joint network generates the speech recognition hypothesis and the predicted auxiliary token asynchronously. For each corresponding transcription, the operations may further include converting each uppercase letter of the corresponding transcription into a corresponding lowercase letter, inserting capitalization tokens before each converted uppercase letter, tokenizing the converted transcription into a sequence of tokens that includes wordpiece tokens and the capitalization tokens, and generating the corresponding target sequence of auxiliary tokens by aligning each capitalization token with a corresponding one of the wordpiece tokens.
- In some implementations, the predicted auxiliary token includes a capitalization token or a non-capitalization token. In these implementations, the auxiliary task loss may include an uppercase error rate loss. In some examples, the predicted auxiliary token includes at least one of a non-pause token, a stop token, or a continuation token. In these examples, the auxiliary task loss may include a pause prediction loss.
- Another aspect of the disclosure provides a system that includes data processing hardware and memory hardware storing instructions that when executed on the data processing hardware causes the data processing hardware to perform operations. The operations include receiving a training dataset that includes one or more spoken training utterances for training an automatic speech recognition (ASR) model. Each spoken training utterance in the training dataset is paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens. For each spoken training utterance of the one or more spoken training utterances, the operations include: generating, by a joint network of the ASR model, a speech recognition hypothesis for a corresponding spoken training utterance of the one or more spoken training utterances; determining a speech recognition loss based on the speech recognition hypothesis generated by the joint network for the corresponding spoken training utterance and the corresponding transcription; generating, by the joint network of the ASR model, a predicted auxiliary token for the corresponding spoken training utterance of the one or more spoken training utterances; and determining an auxiliary task loss based on the predicted auxiliary token generated by the joint network for the corresponding spoken training utterance and the corresponding target sequence of auxiliary tokens. The operations also include training the ASR model jointly on the speech recognition loss and the auxiliary task loss determined for each spoken training utterance.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, the ASR model includes: a causal encoder configured to receive, as input, a sequence of acoustic frames characterizing each of the one or more spoken training utterances and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames; a first prediction network configured to receive, as input, a first sequence of non-blank symbols output by a final softmax layer and generate, at each of the plurality of output steps, a first dense representation; and a first joint network configured to receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and the first dense representation generated by the first prediction network at each of the plurality of output steps and generate, at each of the plurality of output steps, an initial speech recognition hypothesis and an initial predicted auxiliary token. In these implementations, the ASR model may include: a non-causal causal encoder configured to receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and generate, at each of a plurality of output steps, a second higher order feature representation for a corresponding first higher order feature representation; a second prediction network configured to receive, as input, a second sequence of non-blank symbols output by the final softmax layer and generate, at each of the plurality of output steps, a second dense representation; and a second joint network configured to receive, as input, the second higher order feature representation generated by the non-causal encoder at each of the plurality of output steps and the second dense representation generated by the second prediction network at each of the plurality of output steps and generate a final speech recognition hypothesis and a final predicted auxiliary token.
- In some examples, the joint network generates the speech recognition hypothesis and the predicted auxiliary token synchronously. In other examples, the joint network generates the speech recognition hypothesis and the predicted auxiliary token asynchronously. For each corresponding transcription, the operations may further include converting each uppercase letter of the corresponding transcription into a corresponding lowercase letter, inserting capitalization tokens before each converted uppercase letter, tokenizing the converted transcription into a sequence of tokens that includes wordpiece tokens and the capitalization tokens, and generating the corresponding target sequence of auxiliary tokens by aligning each capitalization token with a corresponding one of the wordpiece tokens.
- In some implementations, the predicted auxiliary token includes a capitalization token or a non-capitalization token. In these implementations, the auxiliary task loss may include an uppercase error rate loss. In some examples, the predicted auxiliary token includes at least one of a non-pause token, a stop token, or a continuation token. In these examples, the auxiliary task loss may include a pause prediction loss.
- The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a schematic view of an example speech recognition system. -
FIG. 2 is a schematic view of an example speech recognition model. -
FIG. 3 is a schematic view of an example prediction network. -
FIG. 4A is a schematic view of an example training process for training the speech recognition model for an auxiliary task of capitalization. -
FIG. 4B is a schematic view of an example training process for training the speech recognition model for an auxiliary task of pause prediction. -
FIGS. 5A and 5B are schematic views of example generation process for generating a target sequence of auxiliary tokens. -
FIG. 6 is a flowchart of an example arrangement of operations for a computer-implemented method of training a multi-output joint network for multi-task learning. -
FIG. 7 is a schematic view of an example computing device that may be used to implement the systems and methods described herein. - Like reference symbols in the various drawings indicate like elements.
- Training end-to-end (E2E) automatic speech recognition (ASR) models aims to jointly optimize different components of the ASR model using a single neural network. Typically, the single neural network of the ASR model combines acoustic, pronunciation, and language models such that the single neural network performs an ASR task of transcribing text from input audio data. Recently, some E2E ASR models have integrated other auxiliary tasks in addition to the ASR task. There are numerous benefits of integrating auxiliary tasks into the E2E ASR model including the auxiliary tasks having access to both acoustic and language model features of the ASR model and introducing only a relatively small amount of additional parameters to the ASR model since the auxiliary tasks share most parameters with the ASR task.
- Performing auxiliary tasks requires the ASR model to predict auxiliary tokens in addition to predicting wordpiece tokens used for the ASR task. As a result, however, the auxiliary tokens degrade performance of the ASR task (e.g., accuracy and latency) because the auxiliary tokens provide information not relevant to the ASR task. In particular, since decoders of E2E ASR models operate autoregressively given a previous N tokens, injecting auxiliary tokens into a history of the previous N tokens complicates the ASR task because the auxiliary tokens do not provide useful information for ASR. Accordingly, some approaches use two separate joint networks whereby a first joint network predicts wordpiece tokens and a second joint network predicts auxiliary tokens in addition to the wordpiece tokens. In this approach, the first joint network performs the ASR task during inference because the first joint network does not generate any auxiliary tokens and the second joint network performs the auxiliary task using the auxiliary tokens. Yet, while the second joint network is trained on wordpiece tokens and auxiliary tokens, only the auxiliary tokens are used from the second joint network during inference. Consequently, the lack of a cleaner separation between target spaces for ASR tasks and auxiliary tasks (e.g., while allowing both tasks to share useful features) make it difficult to scale this approach to more auxiliary tasks. Moreover, training the second joint network using wordpiece tokens and auxiliary tokens while only using the auxiliary tokens during inference causes redundant parameters that increase a size of the ASR model without any benefit.
- Accordingly, implementations herein are directed towards methods and systems of a multi-output joint network for multi-task learning of speech recognition and auxiliary tasks. In particular, a training process receives a training dataset that includes training utterances for training an automatic speech recognition (ASR) model. Each spoken training utterance is paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens. For each spoken training utterance, the training process generates a speech recognition hypothesis for a corresponding spoken training utterance using a joint network of the ASR model and determines a speech recognition loss based on the speech recognition hypothesis and the corresponding transcription. Moreover, for each spoken training utterance, the training process also generates a predicted auxiliary token for the corresponding spoken training utterance and determines an auxiliary task loss based on the predicted auxiliary token and the corresponding target sequence of auxiliary tokens. Thereafter, the training process trains the ASR model jointly on the speech recognition loss and auxiliary task loss determined for each spoken training utterance.
- Training the ASR model jointly on the speech recognition losses and the auxiliary task losses teaches the ASR model to perform speech recognition and an auxiliary task. The auxiliary task may include capitalization of text and/or pause predictions. As will become apparent, the ASR model includes a single joint network that generates outputs for both speech recognition and the auxiliary tasks. In some examples, the ASR model includes two joint networks, one for operating in a streaming manner and another for operating in a non-streaming manner. In these examples, however, it is understood that each joint network generates wordpiece tokens for speech recognition and auxiliary tokens for the auxiliary task. In other examples, the ASR model includes a single joint network that operates in either the streaming or non-streaming manner.
-
FIG. 1 is anexample system 100 that includes one ormore users 104 interacting with auser device 10 through voice input. The user device 10 (also referred to generally as a device 10) is configured to capture sounds (e.g., streaming audio data) from the one ormore users 104 within thesystem 100. Here, the streaming audio data may refer to anutterance 106 spoken by theuser 104 that functions as an audible query, a command for theuser device 10, or an audible communication captured by thedevice 10. Speech-enabled systems of theuser device 10 may field the query or the command by answering the query and/or causing the command to be performed/fulfilled by one or more downstream applications. - The
user device 10 may correspond to any computing device associated with theuser 104 and capable of receiving audio data. Some examples ofuser devices 10 include, but are not limited to, mobile devices (e.g., smart watches), smart appliances, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc. Theuser device 10 includesdata processing hardware 12 andmemory hardware 14 in communication with thedata processing hardware 12 and stores instructions that, when executed by thedata processing hardware 12, cause thedata processing hardware 12 to perform one or more operations. Theuser device 10 further includes an audio system 16 with an audio capture device (e.g., microphone) 16, 16 a for capturing and converting theutterances 106 into electrical signals and a speech output device (e.g., a speaker) 16, 16 b for communicating with an audible audio signal (e.g., as output data from the user device 10). Theuser device 10 may implement an array of audio capture devices 16 a without departing from the scope of the present disclosure, whereby one or more capture devices 16 a in the array may not physically reside on theuser device 10, but be in communication with the audio system 16. - The
system 100 includes an automated speech recognition (ASR)system 118 that implements anASR model 200 and resides on theuser device 10 of theuser 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud-computing environment) in communication with theuser device 10 via anetwork 40. In some examples, theASR model 200 may be a Recurrent Neural Network-Transducer (RNN-T) model. Theuser device 10 and/or theremote computing device 60 also includes anaudio subsystem 108 configured to receive theutterance 106 spoken by theuser 104 and captured by the audio capture device 16 a, and convert theutterance 106 into a corresponding digital format associated with inputacoustic frames 110 capable of being processed by theASR system 118. In the example shown, the user speaks arespective utterance 106 and theaudio subsystem 108 converts theutterance 106 into corresponding audio data (e.g., sequence of acoustic frames) 110 for input to theASR system 118. Thereafter, theASR model 200 receives, as input, the sequence ofacoustic frames 110 corresponding to theutterance 106, and generates/predicts, at each output step, a corresponding transcription 120 (e.g., speech recognition result/hypothesis) of theutterance 106 as the ASR model receives (e.g., processes) eachacoustic frame 110 in the sequence ofacoustic frames 110. - In the example shown, the
ASR model 200 may perform streaming speech recognition to produce an initialspeech recognition result speech recognition result speech recognition result 120 may either correspond to a portion of anutterance 106 or anentire utterance 106. For example, the partial speech recognition result may correspond to a portion of a spoken utterance or even a portion of a spoken term. However, as will become apparent, theASR model 200 performs additional processing on the finalspeech recognition result 120 b whereby the finalspeech recognition result 120 b may be delayed from the initial speech recognition result 120 a. - The
user device 10 and/or theremote computing device 60 also executes a user interface generator 107 configured to present a representation of thetranscription 120 of theutterance 106 to theuser 104 of theuser device 10. As described in greater detail below, the user interface generator 107 may display the initial speech recognition results 120 a in a streaming fashion duringtime 1 and subsequently display the final speech recognition results 120 b in a streaming fashion duringtime 2. In some configurations, thetranscription 120 output from theASR system 118 is processed, e.g., by a natural language understanding (NLU) module executing on theuser device 10 or theremote computing device 60, to execute a user command/query specified by theutterance 106. Additionally or alternatively, a text-to-speech system (not shown) (e.g., executing on any combination of theuser device 10 or the remote computing device 60) may convert thetranscription 120 into synthesized speech for audible output by theuser device 10 and/or another device. - In the example shown, the
user 104 interacts with a program or application 50 (e.g., the digital assistant application 50) of theuser device 10 that uses theASR system 118. For instance,FIG. 1 depicts theuser 104 communicating with thedigital assistant application 50 and thedigital assistant application 50 displaying adigital assistant interface 18 on a screen of theuser device 10 to depict a conversation between theuser 104 and thedigital assistant application 50. In this example, theuser 104 asks thedigital assistant application 50, “What time is the concert tonight?” This question from theuser 104 is a spokenutterance 106 captured by the audio capture device 16 a and processed by audio systems 16 of theuser device 10. In this example, the audio system 16 receives the spokenutterance 106 and converts it into a sequence ofacoustic frames 110 for input to theASR system 118. - Continuing with the example, the
ASR model 200, while receiving the sequence ofacoustic frames 110 corresponding to theutterance 106 as theuser 104 speaks, encodes the sequence ofacoustic frames 110 and then decodes the encoded sequence ofacoustic frames 110 into the initial speech recognition results 120 a. Duringtime 1, the user interface generator 107 presents, via thedigital assistant interface 18, a representation of the initial speech recognition results 120 a of theutterance 106 to theuser 104 of theuser device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on the screen as soon as they are spoken. In some examples, the first look ahead audio context is equal to zero. - During
time 2, the user interface generator 107 presents, via thedigital assistant interface 18, a representation of the final speech recognition results 120 b of theutterance 106 to theuser 104 of the user device 10 a streaming fashion such that words, word pieces, and/or individual characters appear on the screen as soon as they are generated by theASR model 200. In some implementations, the user interface generator 107 replaces the representation of the initial speech recognition results 120 a presented attime 1 with the representation of the final speech recognition results 120 b presented attime 2. Here,time 1 andtime 2 may include timestamps corresponding to when the user interface generator 107 presents the respectivespeech recognition result 120. In this example, the timestamp oftime 1 indicates that the user interface generator 107 presents the initial speech recognition results 120 a at an earlier time than the final speech recognition results 120 b. For instance, as the finalspeech recognition result 120 b is presumed to be more accurate than the initial speech recognition result 120 a, the finalspeech recognition result 120 b ultimately displayed as thetranscription 120 may fix any terms that may have been misrecognized in the initial speech recognition results 120 a. In this example, the streaming initial speech recognition results 120 a output by theASR model 200 are displayed on the screen of theuser device 10 attime 1 are associated with low latency and provide responsiveness to theuser 104 that his/her query is being processed, while the finalspeech recognition result 120 b output by theASR model 200 and displayed on the screen attime 2 leverages an additional speech recognition model and/or a language model to improve the speech recognition quality in terms of accuracy, but at increased latency. However, since the initial speech recognition results 120 a are displayed as the user speaks theutterance 106, the higher latency associated with producing, and ultimately displaying the final speech recognition results 120 b is not noticeable to theuser 104. - In the example shown in
FIG. 1 , thedigital assistant application 50 may respond to the question posed by theuser 104 using natural language processing. Natural language processing generally refers to a process of interpreting written language (e.g., the initial speech recognition result 120 a and/or the finalspeech recognition result 120 b) and determining whether the written language prompts any action. In this example, thedigital assistant application 50 uses natural language processing to recognize that the question from theuser 104 regards the user's schedule and more particularly a concert on the user's schedule. By recognizing these details with natural language processing, the automated assistant returns aresponse 19 to the user's query where theresponse 19 states, “Venue doors open at 6:30 PM and concert starts at 8 pm.” In some configurations, natural language processing occurs on theremote computing device 60 in communication with thedata processing hardware 12 of theuser device 10. - Referring to
FIG. 2 , anexample ASR model 200 may include a Recurrent Neural Network-Transducer (RNN-T) model architecture which adheres to latency constraints associated with interactive applications. The use of the RNN-T model architecture is exemplary only, and theASR model 200 may include other architectures such as transformer-transducer and conformer-transducer model architectures among others. The RNN-T model architecture provides a small computational footprint and utilizes less memory requirements than conventional ASR architectures, making the RNN-T model architecture suitable for performing speech recognition entirely on the user device 102 (e.g., no communication with a remote server is required). The RNN-T model architecture of theASR model 200 includes anencoder network 204, aprediction network 300, and ajoint network 250. Theencoder network 204, which is roughly analogous to an acoustic model (AM) in a traditional ASR system, includes a recurrent network of stacked Long Short-Term Memory (LSTM) layers. For instance, the encoder network (e.g., encoder) 204 reads a sequence of d-dimensional feature vectors (e.g., sequence of acoustic frames 110 (FIG. 1 )) x=(x1, x2, . . . , xT), where xt∈ - Similarly, the
prediction network 300 is also an LSTM network, which, like a language model (LM), processes the sequence of non-blank symbols output by afinal Softmax layer 260 so far, y0, . . . , yui−1, into a dense representation pui . Finally, with the RNN-T model architecture, the representations produced by the encoder and prediction/decoder networks joint network 250. Theprediction network 300 may be replaced by an embedding look-up table to improve latency by outputting looked-up sparse embeddings in lieu of processing dense representations. Thejoint network 250 then predicts P(yi|xti , y0, . . . , yui−1 ), which is a distribution over the next output symbol. Stated differently, thejoint network 250 generates, at each output step (e.g., time step), a probability distribution over possible speech recognition hypotheses. Here, the “possible speech recognition hypotheses” correspond to a set of output labels each representing a symbol/character in a specified natural language. For example, when the natural language is English, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space. Accordingly, thejoint network 230 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels. This set of values can be a vector and can indicate a probability distribution over the set of output labels. In some cases, the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited. For example, the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes. The output distribution of thejoint network 250 can include a posterior probability value for each of the different output labels. Thus, if there are 100 different output labels representing different graphemes or other symbols, the output yi of thejoint network 250 can include 100 different probability values, one for each output label. The probability distribution can then be used to select and assign scores to candidate orthographic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by the Softmax layer 240) for determining thetranscription 120. - The
Softmax layer 260 may employ any technique to select the output label/symbol with the highest probability in the distribution as the next output symbol predicted by theASR model 200 at the corresponding output step. In this manner, the RNN-T model architecture of theASR model 200 does not make any conditional independent assumptions, rather the prediction of each symbol is conditioned not only on the acoustic frames but also on the sequence of labels output so far. As such, theSoftmax layer 260 may select the speech recognition hypothesis having a highest corresponding probability from the probability distribution as thetranscription 120. TheASR model 200 does assume an output symbol is independent of futureacoustic frames 110, which allows theASR model 200 to be employed in a streaming fashion. - In some examples, the
encoder 204 of theASR model 200 includes a plurality of multi-head (e.g., 8 heads) self-attention layers. For example, the plurality of multi-head self-attention layers may include Conformer layers (e.g., Conformer-encoder), transformer layers, performer layers, convolution layers (including lightweight convolution layers), or any other type of multi-head self-attention layers. The plurality of multi-head self-attention layers may include any number of layers, for instance 16 layers. Moreover, theencoder 204 may operate in a streaming fashion (e.g., theencoder 204 outputs the higher-order feature representations as soon as they are generated) or in a non-streaming fashion whereby theencoder 204 processes additional right-context to improve upon the speech recognition results. -
FIG. 3 shows theprediction network 300 for the RNN-T model 200 that receives, as input, a sequence of non-blank symbols yu−n, . . . yu−1 that is limited to the N previous non-blank symbols output by thefinal softmax layer 260. In some examples, N is equal to two. In other examples, N is equal to five, however, the disclosure is non-limiting and N may equal any integer. The sequence of non-blank symbols may indicate a partial speech recognition result 120 a, 120 b (FIG. 1 ). In some implementations, theprediction network 300 includes amulti-headed attention mechanism 302 that shares a shared embeddingmatrix 304 across eachhead 302A-302H of the multi-headed attention mechanism. In one example, themulti-headed attention mechanism 302 includes four heads. However, any number of heads may be employed by themulti-headed attention mechanism 302. Notably, themulti-headed attention mechanism 302 improves performance significantly with minimal increase to model size. As described in greater detail below, eachhead 302A-H includes its own row ofposition vectors 308, and rather than incurring an increase in model size by concatenatingoutputs 318A-H from all the heads, theoutputs 318A-H are instead averaged by a headaverage module 322. - Referring to the
first head 302A of themulti-headed attention mechanism 302, thehead 302A generates, using the shared embeddingmatrix 304, a corresponding embedding 306, 306 a-n (e.g., X∈e ) for each non-blank symbol among the sequence of non-blank symbols yui−n, . . . , yui−1 received as input at the corresponding output step from the plurality of output steps. Notably, since the shared embeddingmatrix 304 is shared across all heads of themulti-headed attention mechanism 302, theother heads 302B-H all generate the same correspondingembeddings 306 for each non-blank symbol. Thehead 302A also assigns a respectiveposition vector PV Aa-An 308, 308Aa-An (e.g., P∈e ) to each corresponding non-blank symbol in the sequence of non-blank symbols yu−n, . . . , yu−1. The respectiveposition vector PV 308 assigned to each non-blank symbol indicates a position in the history of the sequence of non-blank symbols (e.g., the N previous non-blank symbols output by the final softmax layer 240). For instance, the first position vector PVAa is assigned to a most recent position in the history, while the last position vector PVAn is assigned to a last position in the history of the N previous non-blank symbols output by thefinal softmax layer 240. Notably, each of theembeddings 306 may include a same dimensionality (i.e., dimension size) as each of theposition vectors PV 308. - While the corresponding embedding generated by shared embedding
matrix 304 for each for each non-blank symbol among the sequence of non-blank symbols, yu−n, . . . , yu−1, is the same at all of theheads 302A-H of themulti-headed attention mechanism 302, eachhead 302A-H defines a different set/row ofposition vectors 308. For instance, thefirst head 302A defines the row of position vectors PVAa-An 308Aa-An, thesecond head 302B defines a different row ofposition vectors PV Ba-Bn 308 Ba-Bn, . . . , and the Hth head 302 H defines another different row ofposition vectors PV Ha-Hn 308 Ha-Hn. - For each non-blank symbol in the sequence of non-blank symbols received, the
first head 302A also weights, via aweight layer 310, the corresponding embedding 306 proportional to a similarity between the corresponding embedding and the respectiveposition vector PV 308 assigned thereto. In some examples, the similarity may include a cosine similarity (e.g., cosine distance). In the example shown, theweight layer 310 outputs a sequence ofweighted embeddings 312, 312Aa-An each associated the corresponding embedding 306 weighted proportional to the respectiveposition vector PV 308 assigned thereto. Stated differently, theweighted embeddings 312 output by theweight layer 310 for each embedding 306 may correspond to a dot product between the embedding 306 and the respectiveposition vector PV 308. Theweighted embeddings 312 may be interpreted as attending over the embeddings in proportion to how similar they are to the positioned associated with their respectiveposition vectors PV 308. To increase computational speed, theprediction network 300 includes non-recurrent layers, and therefore, the sequence of weighted embeddings 312Aa-An are not concatenated, but instead, averaged by a weightedaverage module 316 to generate, as output from thefirst head 302A, a weighted average 318A of the weighted embeddings 312Aa-An represented by: -
- In
Equation 1, h represents the index of theheads 302, n represents position in context, and e represents the embedding dimension. Additionally, in Equation (1), H, N, and de include the sizes of the corresponding dimensions. Theposition vector PV 308 does not have to be trainable and may include random values. Notably, even though theweighted embeddings 312 are averaged, theposition vectors PV 308 can potentially save position history information, alleviating the need to provide recurrent connections at each layer of theprediction network 300. - The operations described above with respect to the
first head 302A, are similarly performed by eachother head 302B-H of themulti-headed attention mechanism 302. Due to the different set of positionedvectors PV 308 defined by eachhead 302, theweight layer 310 outputs a sequence of weighted embeddings 312Ba-Bn, 312Ha-Hn at eachother head 302B-H that is different than the sequence of weighted embeddings 312Aa-Aa at thefirst head 302A. Thereafter, the weightedaverage module 316 generates, as output from each other correspondinghead 302B-H, a respective weighted average 318B-H of the correspondingweighted embeddings 312 of the sequence of non-blank symbols. - In the example shown, the
prediction network 300 includes a headaverage module 322 that averages theweighted averages 318A-H output from the correspondingheads 302A-H.A projection layer 326 with SWISH may receive, as input, anoutput 324 from the headaverage module 322 that corresponds to the average of theweighted averages 318A-H, and generate, as output, a projected output 328. Afinal layer normalization 330 may normalize the projected output 328 to provide the single embedding vector Pu 352 (i.e., hidden representation) at the corresponding output step from the plurality of output steps. Theprediction network 300 generates only a single embeddingvector P u 352 at each of the plurality of output steps subsequent to an initial output step. - In some configurations, the
prediction network 300 does not implement themulti-headed attention mechanism 302 and only performs the operations described above with respect to thefirst head 302A. In these configurations, the weighted average 318A of the weighted embeddings 312Aa-An is simply passed through theprojection layer 326 andlayer normalization 330 to provide the single embeddingvector P u 352. - Referring now to
FIGS. 4A and 4B , in some implementations, atraining process 400 jointly trains theASR model 200 to perform speech recognition and one or more auxiliary tasks. The auxiliary tasks described herein include a capitalization task and a pause prediction task, however, the auxiliary tasks may also be included. Thus, thetraining process 400 trains theASR model 200 jointly onspeech recognition losses 422, 432 and auxiliary task losses 424, 434. Training theASR model 200 may include updating parameters of any components of theASR model 200 including, but not limited to, a cascadingencoder 204 ordecoders ASR model 200. As will become apparent, thetraining process 400 includes a first auxiliarytask loss part FIG. 4A ) and a second auxiliarytask loss part 400, 400 b (FIG. 4B ). Thetraining process 400 may train theASR model 200 using the first auxiliarytask loss part 400 a and/or the second auxiliary task loss part 400 b. Thetraining process 400 receives a training dataset 401 that includes one or morespoken training utterances 404 for training theASR model 200. Each spokentraining utterance 404 in the training dataset 401 includes a speech representation (e.g., synthetic or non-synthetic speech) and is paired with acorresponding transcription 402 and a corresponding target sequence of auxiliary tokens 522. That is, each respective spoken trainingutterances 404 may be characterized by a corresponding sequence ofacoustic frames 110. - Referring now to
FIGS. 5A and 5B , in some implementations, a target sequence generation process (i.e., generation process) 500 generates the target sequence of auxiliary tokens 522 used by the training process 400 (FIGS. 4A and 4B ). In particular, afirst generation process 500, 500 a (FIG. 5A ) generates a first target sequence ofauxiliary tokens 522, 522 a used by the first auxiliarytask loss part 400 a (FIG. 4A ), and asecond generation process 500, 500 b (FIG. 5B ) generates a second target sequence ofauxiliary tokens 522, 522 b used by the second auxiliary task loss part 400 b (FIG. 4B ). Thegeneration process 500 employs atokenizer 510 and analignment module 520. Thetokenizer 510 is configured to receive, as input, eachrespective transcription 402 and generate a corresponding sequence of tokens 512 for eachrespective transcription 402. The sequence of tokens 512 includeswordpiece tokens 514 and auxiliary tokens 516. Thealignment module 520 is configured to receive, as input, each respective sequence of tokens 512 generated by thetokenizer 510 and generate a corresponding target sequence of auxiliary tokens 522. As will become apparent, thealignment module 520, generates the corresponding target sequence of auxiliary tokens by aligning thewordpiece tokens 514 with the auxiliary tokens 516. - Referring to
FIG. 5A , during the first generation process 500 a, thetokenizer 510 converts each respective uppercase letter of thetranscription 402 into a corresponding lowercase letter and inserts a first auxiliary token (i.e., capitalization token) 516, 516 a before each converted uppercase letter. Thereafter, thetokenizer 510 generates a first sequence of tokens 512, 512 a by tokenizing the converted transcription (i.e., de-capitalized transcription) into a sequence of lower-case wordpieces whereby thetokenizer 510 tokenizes each inserted capitalization token 516 a by itself. In the example shown, thetokenizer 510 converts thetranscription 402 of “Ian McGregor” into lowercase letters of (i.e., “ian mcgregor”) and insertscapitalization tokens 516 a (i.e., “<cap>”) before each converted uppercase letter. Finally, thetokenizer 510 generates the first sequence of tokens 512 a of “<cap>ian<cap>_mc<cap>gregor” by tokenizing the converted transcription. Here, “<cap>” indicates the capitalization token 516 a, “_” indicates a word boundary, and “ian,” “mc,” and “gregor” are allwordpiece tokens 514. Thereafter, thealignment module 520 generates a corresponding first target sequence ofauxiliary tokens 522, 522 a by aligning each capitalization token 516 a with acorresponding wordpiece token 514. Moreover, thealignment module 520 may assign eachwordpiece token 514 not aligned with any capitalization token 516 a a non-capitalization token 515 (<NC>). Continuing with the example shown, the alignment module generates the corresponding first target sequence ofauxiliary tokens 522 a by the threecapitalization tokens 516 a withcorresponding wordpiece tokens 514 of “i,” “mc,” and “gregor,” and assigns thewordpiece tokens 514 of “an” and “or” thenon-capitalization token 515. Thus, in the example shown, the first target sequence ofauxiliary tokens 522 a indicates thatwordpiece tokens 514 of “i,” “mc,” and “gregor” should all begin with a capital letter andwordpieces 514 of “an” and “or” should not include capital letters. - Referring to
FIG. 5B , during the first generation process 500 b, thetokenizer 510 converts eachtranscription 402 into a sequence ofwordpiece tokens 514 and inserts second auxiliary tokens (i.e., pause prediction tokens) 516, 516 b into the sequence ofwordpiece tokens 514. Each secondauxiliary token 516 b may include a continuation token (“<cont>”) indicating thatadjacent wordpiece tokens 514 are continuous (i.e., no pause is present between the adjacent wordpiece tokens) or a stop token (“<stop>”) indicating there is a pause present betweenadjacent wordpiece tokens 514. In some examples, thetokenizer 510 determines thepause prediction tokens 516 b based on thetranscription 402. In other examples, thetranscription 402 includes thepause prediction tokens 516 b. For instance, eachtranscription 402 may be annotated by a human to indicate thepause prediction tokens 516 b within eachtranscription 402. Finally, thetokenizer 510 generates a second sequence of tokens 512, 512 b by tokenizing eachwordpiece token 514 and each insertedpause prediction token 516 b. In the example shown, the tokenizer generates the second sequence of tokens 512 b of “_broadcast <cont>_to_the_study<stop>_it's_dinner_time” from thetranscription 402 “broadcast to the study it's dinner time.” Here, “_” indicates a word boundary. Thereafter, thealignment module 520 generates a corresponding second target sequence ofauxiliary tokens 522, 522 b by aligning eachpause prediction token 516 b with acorresponding wordpiece token 514. Notably, thealignment module 520 aligns each respectivepause prediction token 516 b to awordpiece 514 that immediately precedes the respectivepause prediction token 516 b. Moreover, thealignment module 520 may assign eachwordpiece token 514 not aligned with anypause prediction token 516 b a non-pause token 517 (<NP>). Continuing with the example shown, thealignment module 520 generates the corresponding second target sequence ofauxiliary tokens 522 b by aligningpause prediction tokens 516 b withwordpiece tokens 514 of “to” and “it's” and assigning thewordpieces 514 of “broadcast,” “the,” “study,” “dinner,” and “time” with thenon-pause token 517. - Referring back to
FIGS. 4A and 4B , in some implementations, theASR model 200 includes a cascadingencoder 204, afirst decoder 230, and asecond decoder 240. Here, thesecond decoder 240 is configured to improve upon initial speech recognition results 120 a output by thefirst decoder 230. Thefirst decoder 230 may operate in a streaming fashion such that thefirst decoder 230 is configured to generate partial speech recognition results corresponding to the initial speech recognition results 120 a. On the other hand, thesecond decoder 240 improves upon the partial speech recognition results by receiving additional right-context and generating the final speech recognition results 120 b. Notably, the use of twodecoder decoders first decoder 230 and thesecond decoder 240 each include acorresponding prediction network 300 followed by a correspondingjoint network 250. More specifically, thefirst decoder 230 includes afirst prediction network joint network 250, 250 a, and thesecond decoder 240 includes asecond prediction network joint network 250, 250 b. The prediction networks 300 a, 300 b have a same structure that includes one of a long short-term memory (LSTM)-based prediction network or a V2 embedding look-up table. Similarly, the joint networks 250 a, 250 b of the first andsecond decoders first decoder 230 and thesecond decoder 240, the respective components of each of the first andsecond decoders second decoders - The cascading
encoder 204 refers to a model structure where the encoding pathway includes twoencoders first encoder 210 feeds the input of asecond encoder 220 prior to decoding. Here, thefirst encoder 210 and thesecond encoder 220 may be cascaded irrespective of the underlying architecture of each encoder. Theencoders first encoder 210 includes a causal encoder having one of a plurality of unidirectional (LSTM) layers, a plurality of conformer layers, or a plurality of transformer layers. For example, thefirst encoder 210 may include nine (9) conformer layers each having a multi-headed (e.g., eight (8) heads) self-attention mechanism and a convolutional kernel size of fifteen (15). Moreover, thefirst encoder 210 may perform a concatenation operation after a third conformer layer to achieve a time reduction rate of two whereby the resulting 1024-dimensional vectors are transformed by a fourth conformer layer and then projected back to a 512-dimensional vector using another linear transformation. Thereafter, another eight (5) conformer layers are followed by a final normalization layer. Thus, thefirst encoder 210 may include 57 million parameters. Each layer of thefirst encoder 210 receives zero right-context (e.g., receives zero future acoustic frames). - The
second encoder 220 includes a non-causal encoder having one of one or more bi-directional LSTM layers, a plurality of conformer layers, or a plurality of transformer layers. For instance, thesecond encoder 220 may include six (6) conformer layers of 640-dimensions and a final linear normalization layer thereby resulting in 117 million parameters. Thesecond encoder 220 may receive additional right-context, for example a total of 15-right context frames across all layers to provide 900 milliseconds of additional right context. - With continued reference to
FIGS. 4A and 4B , thefirst encoder 210 receives a sequence of d-dimensional feature vectors (e.g., sequence of acoustic frames 110) x=(x1, x2, . . . , xT), where xt∈acoustic frames 110 characterizes one or more of the spoken trainingutterances 404 such that thefirst encoder 210 receives a respective sequence ofacoustic frames 110 for each spokentraining utterance 404. Thus, thefirst encoder 210 generates, at each output step of a plurality of output steps, a first higherorder feature representation 212 for a correspondingacoustic frame 110 in the sequence ofacoustic frames 110. Similarly, thesecond encoder 220 is connected in cascade to thefirst encoder 210 and receives, as input, the first higherorder feature representation 212 and generates, at each output step, a second higherorder feature representation 222 for a corresponding first higherorder feature representation 212. In some instances, thesecond encoder 220 generates the second higherorder feature representation 222 without receiving any of theacoustic frames 110 as input. In these instances, thesecond encoder 220 generates the second higherorder feature representations 222 using only the first higherorder feature representation 212 as input. That is, the first higherorder feature representations 212 received from thefirst encoder 210 serve as the additional right-context. Thefirst encoder 210 outputs the first higherorder feature representations 212 to thesecond encoder 220 and thefirst decoder 230 while thesecond encoder 220 outputs the second higherorder feature representations 212 to thesecond decoder 240. Thus, the cascadingencoder 204 output may be represented by: -
f(X)=[f 0 , . . . , f T−1] (2) - With continued reference to
FIGS. 4A and 4B , thefirst decoder 230 includes the first joint network 250 a and thefirst prediction network 300 a. The first joint network 250 a is configured to receive, as input, a firstdense representation 352 a generated by thefirst prediction network 300 a and the first higherorder feature representation 212 generated by thefirst encoder 210 and generate, at each output step, an initialspeech recognition hypothesis 120 a for a correspondingacoustic frame 110. Thus, the first joint network 250 a generates the initialspeech recognition hypothesis 120 a based on the first higherorder feature representation 212 and the firstdense representation 352 a. Each wordpiece from the initialspeech recognition hypothesis 120 a may include a word, wordpiece, phoneme, and/or grapheme. Notably, the first joint network 250 a generates the initialspeech recognition hypothesis 120 a using lowercase wordpieces (i.e., lowercase letters or wordpieces having lowercase letters). Thus, each letter from the initial speech recognition result 120 a includes only lower case letters. Advantageously, by generationspeech recognition hypotheses 120 with only lowercase letters, thejoint network 250 may generate N-best speech recognition hypotheses corresponding to different words or terms. That is, because the N-best hypotheses do not include the same words with different capitalization, the N-best hypotheses include more possible hypotheses for the spoken utterance. Thefirst decoder 230 operates in the streaming fashion such that thefirst decoder 230 generates the initial speech recognition results 120 a that may correspond to partial speech recognition results. - The
first prediction network 300 a receives, as input, a first sequence of non-blank symbols output by thefirst decoder 230 and generates, at each output step, the firstdense representation 352 a. In particular, thefirst prediction network 300 a may receive the sequence of non-blank symbols from a final softmax layer of thefirst decoder 230. Here, the sequence of non-blank symbols corresponds to thespeech recognition hypothesis 120 with blank tokens removed. - The
second decoder 240 includes the second joint network 250 b and thesecond prediction network 300 b. In some configurations, the second joint network is configured to receive, as input, a seconddense representation 352 b generated by thesecond prediction network 300 b and the second higherorder feature representation 222 generated by thesecond encoder 220 and generate, at each output step, a finalspeech recognition result 120 b for a correspondingacoustic frame 110. Thus, the second joint network 250 b generates the finalspeech recognition result 120 b based on the second higherorder feature representation 222 and the seconddense representation 352 b. Notably, the second joint network 250 b generates the finalspeech recognition result 120 b using lowercase wordpieces (i.e., lowercase letters or wordpieces having lowercase letters). Thus, each letter from the finalspeech recognition result 120 b includes only lower case letters. Thesecond decoder 240 operates in the streaming fashion such that thesecond decoder 240 generates the final speech recognition results 120 b that may correspond to partial speech recognition results. - The
second prediction network 300 b receives, as input, a second sequence of non-blank symbols output by thesecond decoder 240 and generates, at each output step, the seconddense representation 352 b. In particular, thesecond prediction network 300 b may receive the sequence of non-blank symbols from a final softmax layer of thefirst decoder 240. Here, the sequence of non-blank symbols corresponds to thespeech recognition hypothesis 120 with blank tokens removed. Thus, the first and seconddense representations 352 b may be represented by: -
g(Y)=[g 0 , . . . , g U−1] (3) - In some implementations,
speech recognition hypothesis 120 output by thejoint network 250 includes a probability distribution over possible speech recognition hypotheses. More specifically, the initialspeech recognition hypothesis 120 a may include an initial probability distribution over possible speech recognition hypotheses and the finalspeech recognition hypothesis 120 b may include a final probability distribution over possible speech recognition hypotheses. Thus, the initialspeech recognition hypothesis 120 a may be used interchangeably with the initial probability distribution over possible speech recognition hypotheses and the final speech recognition hypothesis may be used interchangeably with the final probability distribution over possible speech recognition hypotheses. Here, the “possible speech recognition hypotheses” of theinitial probability distribution 120 a and thefinal probability distribution 120 b correspond to a set of output labels/symbols (also referred to as “speech units”) each representing a grapheme (symbol/character) or a word piece in a specified natural language. For example, when the natural language is English, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space. Accordingly, thejoint network 250 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels. The set of values can be a vector (e.g., a one-hot vector) and can indicate a probability distribution over the set of output labels. In some scenarios, the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited. For example, the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes. The output labels could also be other types of speech units, such as phonemes or sub-phonemes. The probability distributions output by thejoint network 250 can include a posterior probability value for each of the different output labels. Thus, if there are 100 different output labels representing different graphemes or other symbols, the output of thejoint network 250 can include 100 different probability values, one for each output label. The probability distributions can then be used to select and assign scores to candidate orthographic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by a final Softmax layer) for determining thespeech recognition hypothesis 120. For example, thejoint network 250 may select the N-best possible speech recognition hypotheses having the highest probabilities as output. - Thus, the first and second joint networks 250 a, 250 b fuse audio features extracted by the cascading
encoder 204 with language model features extracted by the first andsecond prediction networks utterance ASR model 200 receives an input utterance (X) with and generates a label sequence (Y) to an ASR output space ( -
h t,u =P·f t +Q·g u +b n (4) - Followed by a non-linear activation represented by:
-
s t,u =A·tanh(h t,u)+b s (5) - In Equation 5, st,u represents logits for determining probabilities over the output vocabulary. In some examples, the
joint network 250 uses factorized distribution over <blank> versus non-blank symbols to determine the probability of non-emission according to: -
b t,u :=P t,u(<blank>|f 0:t ,g 0:u)=σ(s t,u[0]) (6) - In Equation 6, σ(x)=1/(1+exp(−x)) represents the sigmoid activation. Thus, applying softmax activation to the remaining dimensions to determine the distribution over wordpiece tokens conditioned on the emission event is represented by:
-
- Referring now specifically to
FIG. 4A , during the first auxiliarytask loss part 400 a of thetraining process 400 the first joint network 250 a is further configured to generate, at each output step, an initial predicted auxiliary token (i.e., initial predicted capitalization token) 252, 252 a for the correspondingacoustic frame 110 based on the first higherorder feature representation 212 and the firstdense representation 352 a. That is, at each output step that the first joint network 250 a outputs a respective initialspeech recognition hypothesis 120 a, the firstjoint network 250 also generates a corresponding initial predicted capitalization token 252 a for the respective initialspeech recognition hypothesis 120 a. Simply put, the first joint network 250 a generates the initialspeech recognition hypotheses 120 a and the initial predictedcapitalization tokens 252 a synchronously. The initial predicted capitalization token 252 a may include at least one of a blank token, a non-capitalization (NC) token, or a capitalization (cap) token. The blank token indicates that the first joint network 250 a did not output any initialspeech recognition hypothesis 120 a at the corresponding output step (e.g., output a blank token), the non-capitalization token indicates that the respective initial speech recognition hypothesis is not capitalized, and the capitalization token indicates that the respective initialspeech recognition hypothesis 120 a is capitalized. As such, each corresponding initial predicted capitalization token 252 a output by the first joint network 250 a indicates whether the respective initialspeech recognition hypothesis 120 a output at a the same corresponding output step should be capitalized or not. In some examples, the first joint network 250 a shares blank tokens between the initialspeech recognition hypothesis 120 a and the initial predictedcapitalization tokens 252 a. - A causal loss module 420 is configured to receive, as input, the initial
speech recognition hypothesis 120 a generated by the first joint network 250 a for the corresponding spokentraining utterance 404 and thecorresponding transcription 402 and determine a causal speech recognition loss 422 based on the initialspeech recognition hypothesis 120 a and thecorresponding transcription 402. Notably, the causal loss module 420 does not consider capitalization of letters in thetranscription 402 or the initialspeech recognition hypothesis 120 a when determining the causal speech recognition loss 422 and only considers whether the letters and/or wordpieces match regardless of capitalization. Moreover, the causal loss module 420 is configured to receive, as input, the initial predicted capitalization token 252 a and determine a first causal auxiliary task loss 424, 424 a based on the initial predicted capitalization token 252 a and the corresponding first sequence of targetauxiliary tokens 522 a. That is, the causal loss module 420 may compare initial predicted capitalization token 252 a to corresponding first sequence of targetauxiliary tokens 522 a to determine whether the first joint network 250 a correctly generated the initial predicted capitalization token 252 a for the respective initial speech recognition hypothesis generated at the same output step. - With continued reference to
FIG. 4A , similar to the first joint network 250 a, the second joint network 250 b is further configured to generate, at each output step, an final predicted auxiliary token (i.e., final predicted capitalization token) 252, 252 b for the correspondingacoustic frame 110 based on the second higherorder feature representation 222 and the seconddense representation 352 b. That is, at each output step that the second joint network 250 b outputs a respective finalspeech recognition hypothesis 120 a, the second joint network 250 b also generates a corresponding final predictedcapitalization token 252 b for the respective finalspeech recognition hypothesis 120 b. Simply put, the second joint network 250 b generates the finalspeech recognition hypotheses 120 b and the final predictedcapitalization tokens 252 b synchronously. The final predictedcapitalization token 252 b may also include at least one of a blank token, a non-capitalization (NC) token, or a capitalization (cap) token. As such, each corresponding final predictedcapitalization token 252 b output by the second joint network 250 b indicates whether the respective finalspeech recognition hypothesis 120 b output at the same corresponding output step should be capitalized or not. In some examples, the second joint network 250 b shares blank tokens between the finalspeech recognition hypothesis 120 b and the final predictedcapitalization tokens 252 b. - A
non-causal loss module 430 is configured to receive, as input, the finalspeech recognition hypothesis 120 b generated by the second joint network 250 b for the corresponding spokentraining utterance 404 and thecorresponding transcription 402 and determine a non-causalspeech recognition loss 432 based on the finalspeech recognition hypothesis 120 b and thecorresponding transcription 402. Notably, thenon-causal loss module 430 does not consider capitalization of letters in thetranscription 402 or the finalspeech recognition hypothesis 120 b when determining the non-causal speech recognition loss 422 and only considers whether the letters and/or wordpieces match regardless of capitalization. Moreover, thenon-causal loss module 430 is configured to receive, as input, the final predictedcapitalization token 252 b and determine a first non-causalauxiliary task loss 434, 434 a based on the final predictedcapitalization token 252 b and the corresponding first sequence of targetauxiliary tokens 522 a. That is, thenon-causal loss module 430 may compare final predictedcapitalization token 252 b to corresponding first sequence of targetauxiliary tokens 522 a to determine whether the second joint network 250 b correctly generated the final predictedcapitalization token 252 b for the respective finalspeech recognition hypothesis 120 b generated at the same output step. - The first
auxiliary loss part 400 a of thetraining process 400 trains theASR model 200 jointly on thespeech recognition losses 422, 432 and the firstauxiliary task losses 424 a, 434 a determined for each spokentraining utterance 404 in the training dataset 401. In some examples, thespeech recognition losses 422, 432 may include a minimum word error rate (MWER) loss by comparing N-bestspeech recognition hypotheses 120 to thetranscription 402. The firstauxiliary task losses 424 a, 434 a may include an uppercase error rate (UER) loss. After the firstauxiliary loss part 400 a trains theASR model 200, theASR model 200, during inference, may use the predicted capitalization tokens 252 to capitalize letters of thespeech recognition hypothesis 120 to accurately generate transcriptions for audio input that accurately transcribe speech with correct capitalization. - Referring now specifically to
FIG. 4B , during the second auxiliary task loss part 400 b of thetraining process 400 the first joint network 250 a is further configured to generate, at each output step, an initial predicted auxiliary token (i.e., initial pause prediction token) 254, 254 a for the correspondingacoustic frame 110 based on the second higherorder feature representation 222 and the seconddense representation 352 b. That is, at each output step that the first joint network 250 a outputs a respective finalspeech recognition hypothesis 120 a, the first joint network 250 a also generates a corresponding initial pause predicting token 254 a. In contrast, to the firstauxiliary loss part 400 a (FIG. 4A ), the first joint network 250 a may generate the initialpause prediction tokens 254 a synchronously or asynchronously with the initialspeech recognition hypotheses 120 a. That is, the first joint network 250 a may generate the initialpause prediction tokens 254 a after initialspeech recognition hypotheses 120 a. The initial pause prediction token 254 a may include at least one of a blank token, a non-pause (NP) token, a pause/stop token, or a continuation (cont) token. The blank token indicates that the first joint network 250 a did not output any initialspeech recognition hypothesis 120 a at the corresponding output step (e.g., output a blank token), the non-pause token indicates that no pause is present at the corresponding output step, the stop token indicates that a pause is present at the corresponding output step, and the continuation token indicates that the speech is continuing at the corresponding output step. As such, each corresponding initial pause prediction token 254 a output by the first joint network 250 a indicates whether a pause is present (or not present) at a correspondingacoustic frame 110 in the sequence ofacoustic frames 110 that characterizes the spoken rainingutterance 404. - The causal loss module 420 is configured to receive, as input, the initial
speech recognition hypothesis 120 a generated by the first joint network 250 a for the corresponding spokentraining utterance 404 and thecorresponding transcription 402 and determine the causal speech recognition loss 422 based on the initialspeech recognition hypothesis 120 a and thecorresponding transcription 402. Moreover, the causal loss module 420 is configured to receive, as input, the initial pause prediction token 254 a and determine a second causal auxiliary task loss 424, 424 b based on the initial pause prediction token 254 a and the corresponding second sequence of targetauxiliary tokens 522 b. That is, the causal loss module 420 may compare initial pause prediction token 254 a to corresponding the second sequence of targetauxiliary tokens 522 b to determine whether the first joint network 250 a correctly generated the initial pause prediction token 254 a at the corresponding output step. - With continued reference to
FIG. 4B , similar to the first joint network 250 a, the second joint network 250 b is further configured to generate, at each output step, a final predicted auxiliary token (i.e., final pause prediction token) 254, 254 b for the correspondingacoustic frame 110 based on the second higherorder feature representation 222 and the seconddense representation 352 b. That is, at each output step that the second joint network 250 b outputs a respective finalspeech recognition hypothesis 120 b, the second joint network 250 b also generates a corresponding final pause prediction token 254 b. In contrast, to the firstauxiliary loss part 400 a (FIG. 4A ), the second joint network 250 b may generate the final pause prediction tokens 254 b synchronously or asynchronously with the finalspeech recognition hypotheses 120 b. That is, the second joint network 250 b may generate the final pause prediction tokens 254 b after the finalspeech recognition hypotheses 120 b. The final pause prediction token 254 b may also include at least one of a blank token, a non-pause (NP) token, a pause/stop token, or a continuation (cont) token. As such, each corresponding final pause prediction token 254 b output by the second joint network 250 b indicates whether a pause is present (or not present) at a correspondingacoustic frame 110 in the sequence ofacoustic frames 110 that characterizes the spoken rainingutterance 404. - The
non-causal loss module 430 is configured to receive, as input, the finalspeech recognition hypothesis 120 b generated by the second joint network 250 b for the corresponding spokentraining utterance 404 and thecorresponding transcription 402 and determine the non-causalspeech recognition loss 432 based on the finalspeech recognition hypothesis 120 b and thecorresponding transcription 402. Moreover, thenon-causal loss module 430 is configured to receive, as input, the final pause prediction token 254 b and determine a second non-causalauxiliary task loss 434, 434 b based on the final pause prediction token 254 b and the corresponding second sequence of targetauxiliary tokens 522 b. That is, thenon-causal loss module 430 may compare final pause prediction token 254 b to corresponding the second sequence of targetauxiliary tokens 522 b to determine whether the second joint network 250 b correctly generated the final pause prediction token 254 b at the corresponding output step. - The second auxiliary loss part 400 b of the
training process 400 trains theASR model 200 jointly on thespeech recognition losses 422, 432 and the secondauxiliary task losses 424 b, 434 b determined for each spokentraining utterance 404 in the training dataset 401. In some examples, thespeech recognition losses 422, 432 may include a minimum word error rate (MWER) loss by comparing N-bestspeech recognition hypotheses 120 to thetranscription 402. The secondauxiliary task losses 424 a, 434 a may include a pause prediction loss. After the second auxiliary loss part 400 b trains theASR model 200, theASR model 200, during inference, may use the predicted pause prediction tokens 254 to predict pauses within the speech recognition hypothesis. - As described above, the
ASR model 200 employsjoint networks 250 that generate multiple outputs, namely,speech recognition hypothesis 120 and auxiliary tokens 252, 254. In some examples, thejoint networks 250 use a respective last linear layer for each auxiliary task. That is, for the capitalization task thejoint networks 250 use a first last linear layer and for the pause prediction task thejoint networks 250 use a second last linear layer. Advantageously, by using multiple outputs from thejoint networks 250, theASR model 200 may jointly train to learn speech recognition tasks in addition to auxiliary tasks. Moreover, because thespeech recognition hypotheses 120 and the auxiliary tokens 252, 254 are output separately such that the auxiliary tokens 252, 254 are not fed to theprediction network 300, generating the auxiliary tokens 252, 254 does not degrade performance of the speech recognition task for theASR model 200. -
FIG. 6 is a flowchart of an example arrangement of operations for a computer-implementedmethod 600 of multi-task learning for speech recognition and auxiliary tasks. Themethod 600 may execute on data processing hardware 710 (FIG. 7 ) using instructions stored on memory hardware 720 (FIG. 7 ). The data processing hardware and thememory hardware 720 may reside on theuser device 10 and/or theremote computing device 60 ofFIG. 1 each corresponding to a computing device 700 (FIG. 7 ). - At
operation 602, themethod 600 includes receiving a training dataset 301 that includes one or morespoken training utterances 404 for training an automatic speech recognition (ASR)model 200. Each spokentraining utterance 404 in the training dataset 401 is paired with acorresponding transcription 402 and a corresponding target sequence of auxiliary tokens 522. For each spokentraining utterance 404 of the one or morespoken training utterances 404, themethod 600 performs operations 604-610. Atoperation 604, themethod 600 includes generating, by ajoint network 250 of theASR model 200, aspeech recognition hypothesis 120 for a corresponding spokentraining utterance 404 of the one or morespoken training utterances 404. Atoperation 606, themethod 600 includes determining aspeech recognition loss 422, 432 based on thespeech recognition hypothesis 120 generated by thejoint network 250 for the corresponding spokentraining utterance 404 and thecorresponding transcription 402. Atoperation 608, themethod 600 includes generating, by thejoint network 250 of theASR model 200, a predicted auxiliary token 252, 254 for the corresponding spokentraining utterance 404 of the one or morespoken training utterances 404. Atoperation 610, themethod 600 includes determining an auxiliary task loss 424, 434 based on the predicted auxiliary token 252, 254 generated by thejoint network 250 for the corresponding spokentraining utterance 404 and the corresponding target sequence of auxiliary tokens 522. Atoperation 612, themethod 600 includes training theASR model 200 jointly on thespeech recognition loss 422, 432 and the auxiliary task loss 424, 434 determined for each spokentraining utterance 404. -
FIG. 7 is a schematic view of anexample computing device 700 that may be used to implement the systems and methods described in this document. Thecomputing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. - The
computing device 700 includes aprocessor 710,memory 720, astorage device 730, a high-speed interface/controller 740 connecting to thememory 720 and high-speed expansion ports 750, and a low speed interface/controller 760 connecting to a low speed bus 770 and astorage device 730. Each of thecomponents processor 710 can process instructions for execution within thecomputing device 700, including instructions stored in thememory 720 or on thestorage device 730 to display graphical information for a graphical user interface (GUI) on an external input/output device, such asdisplay 780 coupled tohigh speed interface 740. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 720 stores information non-transitorily within thecomputing device 700. Thememory 720 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). Thenon-transitory memory 720 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by thecomputing device 700. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes. - The
storage device 730 is capable of providing mass storage for thecomputing device 700. In some implementations, thestorage device 730 is a computer-readable medium. In various different implementations, thestorage device 730 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 720, thestorage device 730, or memory onprocessor 710. - The
high speed controller 740 manages bandwidth-intensive operations for thecomputing device 700, while thelow speed controller 760 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 740 is coupled to thememory 720, the display 780 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 750, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 760 is coupled to thestorage device 730 and a low-speed expansion port 790. The low-speed expansion port 790, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 700 a or multiple times in a group ofsuch servers 700 a, as alaptop computer 700 b, or as part of arack server system 700 c. - Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations comprising:
receiving a training dataset comprising one or more spoken training utterances for training an automatic speech recognition (ASR) model, each spoken training utterance in the training dataset paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens;
for each spoken training utterance of the one or more spoken training utterances:
generating, by a joint network of the ASR model, a speech recognition hypothesis for a corresponding spoken training utterance of the one or more spoken training utterances;
determining a speech recognition loss based on the speech recognition hypothesis generated by the joint network for the corresponding spoken training utterance and the corresponding transcription;
generating, by the joint network of the ASR model, a predicted auxiliary token for the corresponding spoken training utterance of the one or more spoken training utterances; and
determining an auxiliary task loss based on the predicted auxiliary token generated by the joint network for the corresponding spoken training utterance and the corresponding target sequence of auxiliary tokens; and
training the ASR model jointly on the speech recognition loss and the auxiliary task loss determined for each spoken training utterance.
2. The computer-implemented method of claim 1 , wherein the ASR model comprises:
a causal encoder configured to:
receive, as input, a sequence of acoustic frames characterizing each of the one or more spoken training utterances; and
generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames;
a first prediction network configured to:
receive, as input, a first sequence of non-blank symbols output by a final softmax layer; and
generate, at each of the plurality of output steps, a first dense representation; and
a first joint network configured to:
receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and the first dense representation generated by the first prediction network at each of the plurality of output steps; and
generate, at each of the plurality of output steps, an initial speech recognition hypothesis and an initial predicted auxiliary token.
3. The computer-implemented method of claim 2 , wherein the ASR model comprises:
a non-causal causal encoder configured to:
receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps; and
generate, at each of a plurality of output steps, a second higher order feature representation for a corresponding first higher order feature representation;
a second prediction network configured to:
receive, as input, a second sequence of non-blank symbols output by the final softmax layer; and
generate, at each of the plurality of output steps, a second dense representation; and
a second joint network configured to:
receive, as input, the second higher order feature representation generated by the non-causal encoder at each of the plurality of output steps and the second dense representation generated by the second prediction network at each of the plurality of output steps; and
generate, at each of the plurality of output steps, a final speech recognition hypothesis and a final predicted auxiliary token.
4. The computer-implemented method of claim 1 , wherein the joint network generates the speech recognition hypothesis and the predicted auxiliary token synchronously.
5. The computer-implemented method of claim 1 , wherein the joint network generates the speech recognition hypothesis and the predicted auxiliary token asynchronously.
6. The computer-implemented method of claim 1 , wherein the operations further comprise, for each corresponding transcription:
converting each uppercase letter of the corresponding transcription into a corresponding lowercase letter;
inserting capitalization tokens before each converted uppercase letter;
tokenizing the converted transcription into a sequence of tokens comprising wordpiece tokens and the capitalization tokens; and
generating the corresponding target sequence of auxiliary tokens by aligning each capitalization token with a corresponding one of the wordpiece tokens.
7. The computer-implemented method of claim 1 , wherein the predicted auxiliary token comprises a capitalization token or a non-capitalization token.
8. The computer-implemented method of claim 7 , wherein the auxiliary task loss comprises an uppercase error rate loss.
9. The computer-implemented method of claim 1 , wherein the predicted auxiliary token comprises at least one of:
a non-pause token;
a stop token; or
a continuation token.
10. The computer-implemented method of claim 9 , wherein the auxiliary task loss comprises a pause prediction loss.
11. A system comprising:
data processing hardware; and
memory hardware in communication with the data processing hardware, the memory hardware storing instructions that when executed on the data processing hardware cause the data processing hardware to perform operations comprising:
receiving a training dataset comprising one or more spoken training utterances for training an automatic speech recognition (ASR) model, each spoken training utterance in the training dataset paired with a corresponding transcription and a corresponding target sequence of auxiliary tokens;
for each spoken training utterance of the one or more spoken training utterances:
generating, by a joint network of the ASR model, a speech recognition hypothesis for a corresponding spoken training utterance of the one or more spoken training utterances;
determining a speech recognition loss based on the speech recognition hypothesis generated by the joint network for the corresponding spoken training utterance and the corresponding transcription;
generating, by the joint network of the ASR model, a predicted auxiliary token for the corresponding spoken training utterance of the one or more spoken training utterances; and
determining an auxiliary task loss based on the predicted auxiliary token generated by the joint network for the corresponding spoken training utterance and the corresponding target sequence of auxiliary tokens; and
training the ASR model jointly on the speech recognition loss and the auxiliary task loss determined for each spoken training utterance.
12. The system of claim 11 , wherein the ASR model comprises:
a causal encoder configured to:
receive, as input, a sequence of acoustic frames characterizing each of the one or more spoken training utterances; and
generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames;
a first prediction network configured to:
receive, as input, a first sequence of non-blank symbols output by a final softmax layer; and
generate, at each of the plurality of output steps, a first dense representation; and
a first joint network configured to:
receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps and the first dense representation generated by the first prediction network at each of the plurality of output steps; and
generate, at each of the plurality of output steps, an initial speech recognition hypothesis and an initial predicted auxiliary token.
13. The system of claim 12 , wherein the ASR model comprises:
a non-causal causal encoder configured to:
receive, as input, the first higher order feature representation generated by the causal encoder at each of the plurality of output steps; and
generate, at each of a plurality of output steps, a second higher order feature representation for a corresponding first higher order feature representation;
a second prediction network configured to:
receive, as input, a second sequence of non-blank symbols output by the final softmax layer; and
generate, at each of the plurality of output steps, a second dense representation; and
a second joint network configured to:
receive, as input, the second higher order feature representation generated by the non-causal encoder at each of the plurality of output steps and the second dense representation generated by the second prediction network at each of the plurality of output steps; and
generate, at each of the plurality of output steps, a final speech recognition hypothesis and a final predicted auxiliary token.
14. The system of claim 11 , wherein the joint network generates the speech recognition hypothesis and the predicted auxiliary token synchronously.
15. The system of claim 11 , wherein the joint network generates the speech recognition hypothesis and the predicted auxiliary token asynchronously.
16. The system of claim 11 , wherein the operations further comprise, for each corresponding transcription:
converting each uppercase letter of the corresponding transcription into a corresponding lowercase letter;
inserting capitalization tokens before each converted uppercase letter;
tokenizing the converted transcription into a sequence of tokens comprising wordpiece tokens and the capitalization tokens; and
generating the corresponding target sequence of auxiliary tokens by aligning each capitalization token with a corresponding one of the wordpiece tokens.
17. The system of claim 11 , wherein the predicted auxiliary token comprises a capitalization token or a non-capitalization token.
18. The system of claim 17 , wherein the auxiliary task loss comprises an uppercase error rate loss.
19. The system of claim 11 , wherein the predicted auxiliary token comprises at least one of:
a non-pause token;
a stop token; or
a continuation token.
20. The system of claim 19 , wherein the auxiliary task loss comprises a pause prediction loss.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/494,984 US20240153495A1 (en) | 2022-10-26 | 2023-10-26 | Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263381119P | 2022-10-26 | 2022-10-26 | |
US18/494,984 US20240153495A1 (en) | 2022-10-26 | 2023-10-26 | Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240153495A1 true US20240153495A1 (en) | 2024-05-09 |
Family
ID=88874828
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/494,984 Pending US20240153495A1 (en) | 2022-10-26 | 2023-10-26 | Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks |
Country Status (2)
Country | Link |
---|---|
US (1) | US20240153495A1 (en) |
WO (1) | WO2024091597A1 (en) |
-
2023
- 2023-10-26 US US18/494,984 patent/US20240153495A1/en active Pending
- 2023-10-26 WO PCT/US2023/035992 patent/WO2024091597A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
WO2024091597A1 (en) | 2024-05-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11610586B2 (en) | Learning word-level confidence for subword end-to-end automatic speech recognition | |
US11929060B2 (en) | Consistency prediction on streaming sequence models | |
CN116250038A (en) | Transducer of converter: unified streaming and non-streaming speech recognition model | |
US20230096805A1 (en) | Contrastive Siamese Network for Semi-supervised Speech Recognition | |
US20230343328A1 (en) | Efficient streaming non-recurrent on-device end-to-end model | |
US20220310080A1 (en) | Multi-Task Learning for End-To-End Automated Speech Recognition Confidence and Deletion Estimation | |
US20230352006A1 (en) | Tied and reduced rnn-t | |
US20230317059A1 (en) | Alignment Prediction to Inject Text into Automatic Speech Recognition Training | |
US20230130634A1 (en) | Optimizing Inference Performance for Conformer | |
US20220310097A1 (en) | Reducing Streaming ASR Model Delay With Self Alignment | |
US20230096821A1 (en) | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition | |
US20240153495A1 (en) | Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks | |
US20230306958A1 (en) | Streaming End-to-end Multilingual Speech Recognition with Joint Language Identification | |
US20240135923A1 (en) | Universal Monolingual Output Layer for Multilingual Speech Recognition | |
US20230109407A1 (en) | Transducer-Based Streaming Deliberation for Cascaded Encoders | |
US20230107248A1 (en) | Deliberation of Streaming RNN-Transducer by Non-Autoregressive Decoding | |
US20230298570A1 (en) | Rare Word Recognition with LM-aware MWER Training | |
US20230107493A1 (en) | Predicting Word Boundaries for On-Device Batching of End-To-End Speech Recognition Models | |
US20220310081A1 (en) | Multilingual Re-Scoring Models for Automatic Speech Recognition | |
US20230107695A1 (en) | Fusion of Acoustic and Text Representations in RNN-T | |
US20240028829A1 (en) | Joint Speech and Text Streaming Model for ASR | |
US20240029720A1 (en) | Context-aware Neural Confidence Estimation for Rare Word Speech Recognition | |
US20240029715A1 (en) | Using Aligned Text and Speech Representations to Train Automatic Speech Recognition Models without Transcribed Speech Data | |
US20240153498A1 (en) | Contextual Biasing With Text Injection | |
US20230326461A1 (en) | Unified Cascaded Encoder ASR model for Dynamic Model Sizes |