US8533305B1 - System and method for adapting a system configuration of a first computer system for hosting on a second computer system - Google Patents
System and method for adapting a system configuration of a first computer system for hosting on a second computer system Download PDFInfo
- Publication number
- US8533305B1 US8533305B1 US13/481,762 US201213481762A US8533305B1 US 8533305 B1 US8533305 B1 US 8533305B1 US 201213481762 A US201213481762 A US 201213481762A US 8533305 B1 US8533305 B1 US 8533305B1
- Authority
- US
- United States
- Prior art keywords
- configuration
- kernel
- system configuration
- operating system
- source
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
- G06F8/63—Image based installation; Cloning; Build to order
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45537—Provision of facilities of other operating environments, e.g. WINE
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/4555—Para-virtualisation, i.e. guest operating system has to be modified
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/45562—Creating, deleting, cloning virtual machine instances
Definitions
- the present invention relates to adapting a configuration that is operable on a first platform of a first computer system to be operable on a second platform of a second computer system.
- a computer system included a hardware layer and a system configuration for interfacing with the hardware layer.
- a system configuration includes an operating system with a kernel layer on top of the hardware layer and interface application programs that facilitate operations of the operating system.
- the system configuration defines individualized user settings that customize each of these software components per user specifications.
- the system configuration includes firewall settings for a firewall application of the operating system and display presentation settings for the graphical interface of the operating system.
- a virtualization engine (also referred to as a “hypervisor”) emulates the hardware layer as distributable sets of “virtual” hardware. The hypervisor can then allocate each set of virtual hardware to different system configurations, thus allowing multiple distinct system configurations to reside on a single computer system.
- virtualization allows a single computing device 110 the ability to function as two or more different computing devices, with each device having a distinct set of virtual hardware and a distinct system configuration.
- system configuration 120 may be allocated 40% of the memory and 80% of the processor cycles of the device 110 and system configuration 130 may be allocated the remaining 60% of the memory and 20% of the processor cycles of the device 110 .
- the system configuration 120 may operate using a first operating system with a first set of configuration parameters and the system configuration 130 may operate using a second operating system with a second set of configuration parameters.
- An added benefit of virtualization is that a failure in one set of virtual hardware or system configuration does not disrupt the operation of the other set of virtual hardware or system configurations, even though the virtual hardware and the system configurations operate over physical resources of a single device.
- the system configuration 130 will continue operating unhindered as the resources used by each system configuration 120 or system configuration 130 operate independent of one another.
- the hypervisor manages a logical partitioning of a physical set of hardware resources of a physical device, or “platform,” between different virtualized “guests” (e.g., configurations). Each virtualized guest implements one or more virtual machines over a logical partition.
- the hypervisor partitions underlying hardware resources such that each virtual machine is provided what logically appears as a distinct and unshared set of hardware resources. However, the hypervisor maps the virtual machine hardware calls to a corresponding subset of physical hardware resources that are actually shared by all virtual machines operating on a particular hardware platform.
- the hypervisor is thus responsible for mapping the hardware resources of a platform to a set of virtual resources that can then be distributed independently to one or more system configurations that together form the one or more virtual machines.
- each virtual machine effectively is provided its own resources (e.g., a processor, memory, block device/disk storage, networking, etc.), and the operating system of each virtual machine operates with little to no change over the provided set of resources.
- hypervisors Different vendors implement hypervisors differently (e.g., Xen®, Parallels®, VMware®, Kernel Virtual Machine® (“KVM”), etc.). Specifically, two prominent hypervisor types are defined as “type 1” hypervisors and “type 2” hypervisors, which are further described with reference to FIG. 2 .
- FIG. 2 illustrates several different platforms (both virtual and physical) on which a system configuration can operate.
- FIG. 2 shows a computer system 200 having a system configuration 205 and a platform 210 .
- the system configuration 205 includes a kernel layer 235 and operating system and application layers 240 .
- the system configuration 205 may include a set of device drivers that allow hardware devices of the platform 210 to communicate with the kernel 235 , the operating system, and/or the applications of the system configuration 205 .
- FIG. 2 also illustrates three different types of platforms 210 in three exploded views 250 a - c .
- the first exploded view 250 a illustrates a platform 210 a of a “traditional” computer system (i.e., a computer system with no hypervisors).
- This platform 210 a includes only the physical hardware 215 of the computer system.
- the configuration 205 directly interfaces with the physical hardware 215 of the computer system 200 .
- the second exploded view 250 b illustrates a platform 210 b of a computer system in which a type 1 hypervisor 255 is present.
- the type 1 hypervisor 255 interfaces with the physical hardware of the computer, and provides a set of virtual hardware to the system configuration 205 .
- the system configuration 205 interfaces with the virtual hardware provided by the type 1 hypervisor 255 , which itself directly accesses the physical hardware 215 of the computer system 200 .
- the third exploded view 250 c illustrates a platform 210 c of a computer system in which a type 2 hypervisor 230 is present.
- the platform 210 includes a “host” kernel layer 220 on top of the physical hardware 215 and a “host” operating system 225 on top of the host kernel layer 220 .
- This platform 210 also includes an application layer (not shown) on top of the operating system layer.
- the platform 210 includes a type 2 hypervisor 230 , which interfaces with the host operating system 225 .
- This type 2 hypervisor 230 may be one of the applications in the application layer (not shown) on top of the host operating system 225 .
- the type 2 hypervisor 230 is allocated a set of the physical resources 215 by the host operating system 225 . Accordingly, the system configuration 205 interfaces with virtual hardware provided by the type 2 hypervisor 230 , which itself receives a set of hardware resources from the host operating system 225 .
- the computer system shown in the exploded view 250 c may be considered a “traditional” computer system (e.g., a traditional computer system as shown in the exploded view 250 a ) with the type 2 hypervisor 230 as one of the applications in the application layer.
- the computer system of this exploded view 250 c may be considered a traditional computer system with system configurations “stacked” on one another.
- Hosting services allow users to implement their system configurations (e.g., system configuration 205 ) on remote computer systems without the pitfalls associated with owning and maintaining the hardware platforms on which the system configurations run. These pitfalls include overhead costs associated with purchasing, upgrading, and/or maintaining equipment and software needed to implement the system configuration. Instead of a user burdening him or herself with these headaches, a hosting service provider maintains and provisions a grid of hardware nodes that are shared amongst multiple users. More specifically, resources of a single node can be partitioned and each of these partitions can be allocated to a virtual server configuration of a different user.
- some hosting systems allow a user to set up the system configuration “from scratch.” In other words, the user selects one operating system from multiple different operating systems. The user can then custom configure the operating system by changing configuration parameters or by installing other interface applications to run in conjunction with the operating system.
- This methodology is problematic, however, when the user already has set up his or her system configuration on another computer (e.g., his or her own home computer, or another hosting service) and wants to host it at the hosting system.
- FIG. 1 illustrates a computer system that runs two different system configurations simultaneously.
- FIG. 2 illustrates different examples of platforms that may be present on a computer system.
- FIG. 3 illustrates a process that extracts a source system configuration and generates a destination system configuration based on the source system configuration.
- FIG. 4 conceptually illustrates a system architecture of some embodiments of the invention.
- FIGS. 5 and 6 illustrate graphical user interfaces of some embodiments through which a user may specify images to run on a node.
- FIG. 7 conceptually illustrates a system architecture of some embodiments of the invention.
- FIGS. 8A-8D illustrate a particular node before and after system configurations are adapted to be operable on the node.
- FIG. 9 illustrates data flow of a local system configuration extraction engine.
- FIG. 10 illustrates a process that performs local extraction of a system configuration.
- FIG. 11 illustrates data flow of a remote system configuration extraction engine.
- FIG. 12 illustrates a process of some embodiments that performs remote extraction of a system configuration.
- FIG. 13 illustrates a software block diagram of an adaptation engine of some embodiments of the invention.
- FIG. 14 illustrates a flowchart of a process that determines whether to import drivers into a system configuration or replace a kernel of the system configuration based on the operating system of the system configuration.
- FIG. 15 illustrates a process that determines whether to import drivers into a system configuration or replace a kernel of the system configuration based on whether system configuration information is available in a library.
- FIG. 16 illustrates a process that replaces a kernel of a system configuration with a compatible kernel found in a library that stores kernels.
- FIGS. 17A-17D conceptually illustrate a process that replaces a kernel of a system configuration with a compatible kernel found in a library that stores kernels.
- FIG. 18 illustrates a flowchart of a process that modifies an operating system of a system configuration and replaces a kernel of the operating system with a different kernel.
- FIGS. 19A-19D conceptually illustrate a process that modifies an operating system of a system configuration and replaces a kernel of the operating system with a different kernel.
- FIG. 20 illustrates a process that imports a set of device drivers into a system configuration.
- FIG. 21 illustrates a flowchart of a process that imports a set of device drivers into a system configuration using a development environment of an operating system of the system configuration.
- FIG. 22 illustrates a process that generates a set of device drivers using an application programming interface (“API”) of a source kernel.
- API application programming interface
- FIGS. 23A-23D conceptually illustrate a process that imports a set of device drivers into a system configuration.
- FIG. 24 illustrates a process that emulates a set of hardware requested by a system configuration.
- FIG. 25 conceptually illustrates that some embodiments adapt a system configuration that is hosted at a first hosting system to a second hosting system.
- FIG. 26 conceptually illustrates that some embodiments adapt a system configuration that runs on a single computer to a hosting system.
- FIG. 27 conceptually illustrates that some embodiments adapt a system configuration that runs on a first single computer to a second single computer.
- FIG. 28 conceptually illustrates a computer system with which some embodiments of the invention are implemented.
- Some embodiments provide an adaptation engine for adapting a system configuration that is operating as a virtual machine on a first computer system hosting one or more virtual machines to operate as a virtual machine on a second computer system hosting one or more virtual machines.
- the system configuration of some embodiments includes an operating system, a kernel, a set of drivers, and user specified configuration settings for these software components of the system configuration.
- a virtualization engine e.g., a “hypervisor” interfaces with a set of physical hardware components (e.g., memory, processor, hard drive, network card, etc.) of a computer system and provides a set of virtual hardware that the system configuration interfaces with in order to implement the user virtual machine.
- Some embodiments provide a method for adapting a system configuration that is operating directly on a first computer system to allow the system configuration to operate as a virtual machine on a second computer system hosting one or more virtual machines.
- the system configuration directly accesses one or more physical hardware components of the first computer system.
- the system configuration includes an operating system and/or kernel that directly accesses (e.g., using a set of device drivers that correspond to the one or more hardware components) the one or more physical hardware components of the first computer system.
- the system configuration does not access the one or more physical hardware components of the first computer system as a set of virtualized hardware where the set of virtualized hardware is managed by a virtualization engine.
- Some embodiments provide a method for adapting a system configuration operating in a first hosting environment to operate in a second hosting environment.
- the second hosting environment which hosts the adapted system configuration, is separate from the first hosting environment (e.g., operated by a different hosting system).
- some embodiments replace an original (or “source”) kernel of the system configuration with a new (“destination”) kernel. In some embodiments, this replacement is performed automatically by the adaptation engine (e.g., a software module running on the second machine) without human intervention.
- Each of these kernels provides an interface between an operating system of the system configuration and a set of hardware components (either virtual or physical) of a machine on which the system configuration operates.
- the new kernel includes the same interface to the operating system of the system configuration as the original kernel, but a different interface to hardware. In other words, the new kernel includes an interface to a set of hardware components of the second machine, while the original kernel includes an interface to a set of hardware components of the first machine.
- replacing a kernel of a source kernel includes retrieving a destination kernel from a library that stores multiple kernels. Additionally, in some embodiments, replacing a source kernel includes modifying one or more components (e.g., one or more core libraries, such as a C library or a device manager) of the source kernel.
- one or more components e.g., one or more core libraries, such as a C library or a device manager
- some embodiments import one or more device drivers into the system configuration. In some embodiments, this importing of device drivers is performed automatically by the adaptation engine without human intervention.
- the imported device drivers each correspond to one or more hardware components (either virtual or physical) of the second machine.
- one or more of the device drivers are previously generated (e.g., by a manufacturer of the device to which the device driver corresponds). Some other embodiments automatically generate one or more of the device drivers through a development environment of an operating system and kernel of the system configuration. Still other embodiments generate the device driver(s) through a driver application programming interface (“API”) based on (1) an operating system of the system configuration and (2) the hardware components of the second machine. The generated device drivers replace corresponding drivers (e.g., drivers of the same device type) in the source system configuration.
- API driver application programming interface
- Some embodiments provide a method for determining whether to replace a kernel or to import a set of device drivers, as mentioned above, in order to adapt a system configuration that is operable on a first machine to be operable on a second machine.
- the method analyzes a set of attributes of the system configuration (e.g., operating system and/or kernel of the system configuration) in order to make the determination. Based on one or more of these attributes, the method determines that the system configuration can be imported in order to adapt the system configuration to be operable on the second machine by (1) replacing the kernel of the system configuration and/or (2) importing one or more device drivers into the system configuration.
- Some embodiments provide an extraction engine that extracts attributes of a system configuration that operates on a first machine (either on a virtual machine or directly on a computer system) in order to allow the system configuration to be adapted to operate on a second machine.
- the extraction engine of some embodiments analyzes the system configuration in order to determine relevant attributes (e.g., operating system, kernel version, device drivers, number of hard drives, number of processors, IP address, hostname, etc.). Additionally, the extraction engine of some embodiments provides these attributes to the adaptation engine, which adapts the system configuration to be operable on the second machine.
- the extraction engine provides an entire file system of the system configuration (e.g., some or all contents of storage devices used by the configuration) to the adaptation engine.
- the first machine locally runs an extraction engine that analyzes and extracts the system configuration of the first machine.
- a remote extraction engine analyzes and extracts the system configuration of the first machine where the remote extraction engine is an engine that runs on a different machine that is separate from the first machine.
- the remote extraction engine remotely accesses the first machine through a network (e.g., the Internet).
- Some embodiments utilize a library that stores information as to customized settings of operating systems, kernels, drivers, development environments, and/or kernel driver APIs in order to adapt a system configuration operating on a first machine (either on a virtual machine or directly on a computer system) to be operable on a second machine.
- the configuration information stored in the library is used by one or more of the processes described above (e.g., replacing a kernel of the system configuration, importing a set of device drivers into the system configuration, etc.).
- the library of some embodiments is adaptive. In other words, information that is generated when adapting a system configuration that is operable on a first machine to be operable on a second machine can be stored in the library. This stored information can then be retrieved and reused at a later time, instead of necessitating that the same information be generated again if it is needed again.
- Some embodiments provide a method for adapting a system configuration that is operable on a first platform (also referred to as a “source” platform) to operate on a second platform (also referred to as a “destination” platform).
- the system configuration includes an operating system with a kernel, device drivers, and interface applications of the operating system that facilitate operations of the operating system. Additionally, the system configuration includes user settings that customize the look, behavior, and operations of the operating system, kernel, device drivers, or interface applications. Accordingly, the adaptation performed by some embodiments occurs relative to a user's actual machine configuration.
- FIG. 3 illustrates a process 300 by which some embodiments adapt a system configuration that is operable on a source platform with a first set of hardware resources (physical and/or virtual hardware resources) to allow the system configuration to operate on a destination platform with a different second set of hardware resources (physical and/or virtual hardware resources).
- the process 300 begins by extracting (at 305 ) the source system configuration from the source platform.
- the source platform locally runs an extraction engine that extracts the system configuration from the first platform, while in other embodiments, a remote extraction engine (i.e., an engine that runs on a platform that is separate from the source platform) extracts the system configuration from the source platform.
- the remote extraction engine accesses the source platform through a network (e.g., the Internet).
- the remote extraction engine optionally performs an authentication procedure (e.g., provides a log-in name and/or password) that indicates to the source platform that the remote extraction engine is authorized to access the source platform.
- the extraction engine extracts an entire file system of the system configuration (e.g., entire contents of a set of storage devices used by the system configuration) to a data store for later analysis. In some other embodiments, the extraction engine extracts only necessary elements for a system configuration.
- the process 300 analyzes (at 310 ) the extracted source system configuration. This analysis (at 310 ) determines whether any additional data is required from a library (e.g., the library 790 of FIG. 7 , which is further described below) that stores information (e.g., operating systems, kernels, drivers, etc.) used for adapting system configurations to be operable on the destination platform. In some embodiments, this analysis (at 310 ) also determines what modifications (if any) are necessary to the source system configuration in order to adapt the source system configuration to be operable on the destination platform. For example, adapting the source system configuration may require modifying the operating system layer, the kernel layer, or the device driver layer of the source system configuration. Upon determining (at 310 ) that required data is present in the library, the process 300 retrieves (at 315 ) the necessary data.
- the library of some embodiments and its contents are further described in more detail below.
- the process 300 modifies (at 320 ) the source system configuration and/or the data retrieved from the library.
- modifying the source system configuration and/or data includes modifying a kernel and/or operating system of the source system configuration.
- some embodiments replace an original kernel of the system configuration with a new kernel.
- the new kernel includes the same interface to the operating system of the system configuration as the original kernel, but a different interface to hardware.
- the new kernel includes an interface to a set of hardware components of the destination platform, while the original kernel includes an interface to a set of hardware components of the source platform.
- the new kernel is a kernel that was modified (at 320 ), while in some embodiments, the new kernel is a kernel that was retrieved (at 315 ) from the library.
- Some embodiments modify the source system configuration by importing one or more device drivers into the system configuration.
- the imported device drivers each correspond to one or more hardware components (either virtual or physical) of the destination platform.
- one or more of the device drivers are previously generated (e.g., by a manufacturer of the device to which the device driver corresponds). Such drivers may have been previously retrieved (at 315 ) from the library.
- Other embodiments generate one or more of the device drivers (e.g., through a development environment of a kernel and operating system of the system configuration, or through a driver application programming interface (“API”), both of which may be retrieved (at 315 ) from the library) based on (1) an operating system of the system configuration and (2) the hardware components of the destination platform.
- API driver application programming interface
- Some embodiments provide a method for determining whether to replace a kernel and/or to import a set of device drivers, as mentioned above, in order to adapt the system configuration be operable on the destination platform.
- the method of some embodiments analyzes a set of attributes of the system configuration (e.g., operating system and/or kernel of the system configuration) in order to make the determination.
- this set of attributes is provided by an extraction engine, as discussed above. Based on one or more of these attributes, the method of some embodiments determines that the system configuration can be imported in order to adapt the system configuration to be operable on the second platform by (1) replacing the kernel of the system configuration and/or (2) importing one or more device drivers into the system configuration.
- the process 300 uses the modifications and/or information from the library to generate (at 325 ) a destination system configuration that is operable on the destination platform.
- the library from which data is retrieved (at 320 ) is an adaptive library.
- the process 300 stores (at 330 ) any modifications that were made (at 315 ) into the adaptive library. This stored information can then be retrieved at a later time, instead of necessitating that the same information be generated again if it is needed again.
- the adaptive library is constantly growing as it “learns” new information about adaptation processes. Future adaptation processes thus occur more quickly, as information that was generated through a previous adaptation process is retrieved from the adaptive library.
- the adaptive library of some embodiments is further described below in Section V.
- the process 300 then outputs (at 335 ) the destination system configuration to the destination platform for installation on the destination platform. Finally, the process 300 ends.
- a system configuration includes (1) an operating system, (2) a kernel, (3) a set of device drivers, and/or (4) a set of interface application programs that operate in conjunction with the operating system.
- a system configuration does not include one or more of these software elements.
- the system configuration includes other software elements not specifically enumerated above.
- a “platform,” or a “machine,” includes (1) physical hardware of a computer system and/or (2) a virtualization engine that provides a set of virtual hardware components to the system configuration.
- a virtualization engine of some embodiments includes a type 1 hypervisor that accesses (or “resides on”) physical hardware of a computer system, and/or a type 2 hypervisor that resides on a host operating system and kernel of a computer system (which itself accesses physical hardware of the computer system).
- a system configuration that operates on physical hardware of a computer system directly accesses one or more hardware components (e.g., memory, central processing unit “(CPU”), hard drive, etc.) of the computer system.
- a system configuration of some embodiments that operates on a hypervisor does not directly access one or more hardware components of the computer system. Rather, the system configuration accesses a set of virtual hardware components that are managed by the hypervisor.
- a platform (e.g., the source platform and/or the destination platform) is a node in a grid of nodes (e.g., a node in a server hosting environment). In other embodiments, a platform is a single desktop computer system that is not a node in the grid of nodes.
- Some embodiments adapt a source system configuration operable on any type of platform (e.g., any of the three types of platforms 250 a - c described above with reference to FIG. 2 ) such that it is made operable on any type of platform (e.g., any of the three types of platforms mentioned above with reference to FIG. 2 ), including the same type of platform.
- some embodiments adapt a system configuration that is operable on physical hardware of a source computer system to be operable on a type 1 hypervisor that operates on physical hardware of a destination computer system.
- some embodiments adapt a system configuration that is operable on a type 1 hypervisor that operates on physical hardware of a source computer system to be operable on a type 1 hypervisor that operates on physical hardware of a destination computer system.
- a type 1 hypervisor that operates on physical hardware of a source computer system
- a type 1 hypervisor that operates on physical hardware of a destination computer system.
- Section II discusses local and remote extraction of a source system configuration.
- Section IV discusses a process by which an adaptation engine adapts a system configuration that is operable on a source platform to be operable on a destination platform.
- Section V discusses an adaptive library of some embodiments.
- Section VI describes advantages of some embodiments of the invention.
- Section VII describes a computer system of some embodiments.
- FIG. 4 illustrates a hosting system 400 that implements some embodiments of the invention.
- This system receives new or modified system configurations in an automated fashion through front-end user interface (“UI”) logic and then deploys the system configuration onto a grid of hardware nodes through automated back-end placement logic.
- UI user interface
- the hosting system 400 provides hosting services for multiple unrelated users over the shared grid of hardware nodes. As shown in FIG.
- the hosting system 400 includes: (1) a service request server 410 , (2) front-end provisioning manager 420 , (3) a resource management system module 430 , (4) a hypervisor management module 440 , (5) a data storage 450 , (6) a statistics storage 455 , (7) an image store 460 , (8) an extraction engine 490 , (9) an extracted configuration store 495 , and (10) a grid 465 of hardware nodes.
- the service request server 410 (1) receives communications (i.e., service requests) from external users through a network 415 and (2) routes the communications to the front-end provisioning manager 420 .
- the service request server 410 is a web server, which communicates to a user through a network 415 such as the Internet.
- a user accesses the hosting system 400 through the user's web browser or through a downloadable client application 405 , which may reside on the user's computer.
- the user's computer of some embodiments is a particular machine, such as a general purpose desktop computer, portable notebook computer, personal digital assistant (“PDA”), digital cellular telephone, or other electronic device that is capable of communicating through the network 415 .
- PDA personal digital assistant
- the network 415 is a local area network (“LAN”), an intranet, and/or a network of networks, such as the Internet.
- the network 415 of some embodiments also includes wireless data services (e.g., general packet radio service (“GPRS”), or other variations of 2G or 3G packet data services) or other electronic communication interfaces. In this manner, users can access the hosting system 400 while being located anywhere throughout the world.
- GPRS general packet radio service
- the service request server 410 routes user communications to the front-end provisioning manager 420 .
- the front-end provisioning manager 420 passes the user communication to a registration module (not shown) for user verification and authentication (e.g., username and password verification).
- the registration module is a fully automated component of the hosting system 400 that performs the verification and authentication operations without human intervention.
- the registration module of some embodiments presents a graphical interface with editable fields through which the user enters additional identification information for creating a user account.
- the user-specified information is then stored within data storage 450 for subsequent authentication and authorization of the user.
- the user's prior system configuration(s) also referred to as “virtual machine configurations”
- usage information is/are retrieved from the data storage (i.e., database) 450 .
- the retrieved information is passed to the front-end provisioning manager 420 .
- the front-end provisioning manager 420 is responsible for generating a graphical user interface (“GUI”) through which a user may specify graphical representations for various virtual machine configurations.
- GUI graphical user interface
- the graphical representations contain sets of selected graphical items (e.g., icons), where each item represents a component of the system configuration. For instance, a user desiring to create a system configuration having a load balancer, multiple web servers, and a database server simply selects the three graphical elements within the GUI that represent such components.
- each graphical representation includes one or more configurable parameters associated with configuring resources or characteristics of a physical device in the grid of nodes represented by the graphical representation.
- the specified system configuration is scalable to increase or decrease allocated resources in response to demand through simple modification of the graphical representation.
- the front-end provisioning manager 420 acts as a user interface manager that provides a tiered hierarchical representation of the system configuration.
- Some embodiments of the front-end manager 420 further permit users the ability to specify custom settings for each component of the system configuration or for the system configuration as a whole.
- the front-end manager 420 of some embodiments allows users the ability to specify a desired set of software (e.g., operating systems, anti-virus protection, anti-spam protection, applications, etc.) to operate in conjunction with the specified hardware configuration.
- a desired set of software e.g., operating systems, anti-virus protection, anti-spam protection, applications, etc.
- some embodiments permit users the ability to further specify settings within the selected operating system and applications. For instance, a user can enter network addresses for load balancers and firewalls or specify hostnames.
- some embodiments of the front-end manager 420 automatically provide the system configuration to the hosting system's back-end logic, which is formed by the resource management system module 430 and the hypervisor management module 440 .
- a user uploads his or her own system configuration for hosting.
- the extraction engine 490 of some embodiments allows users the ability to identify a system configuration of a user's platform in order to migrate the system configuration into the hosting system 400 .
- identifying includes uploading a system configuration package that includes an image (i.e., the entire file system) and/or attributes of the configuration's file system in some embodiments.
- the identifying of some embodiments includes identifying the user's platform (e.g., an IP address of the platform) and providing authentication credentials (e.g., log in name and password) in order to allow the platform to be accessed and the system configuration (i.e., entire file system image and/or relevant attributes of the system configuration) to be extracted by the extraction engine 490 .
- the user's platform e.g., an IP address of the platform
- authentication credentials e.g., log in name and password
- the extraction engine 490 supplies the extracted image and/or attributes to the extracted configuration store 495 and/or image store database 460 for later retrieval.
- the extraction engine 490 also supplies the extracted image and/or the attributes to the resource management system module 430 , which identifies resources required by the system configuration (e.g., by determining attributes of the system configuration such as number of processors, amount of storage space needed, etc.).
- the resource management system module 430 of some embodiments of the back-end logic receives the specified system configuration from the front-end manager 420 or the extraction engine 490 . Alternatively, the resource management system module 430 of some embodiments receives the specified system configuration from the extracted image store 495 .
- the resource management system module 430 of some embodiments performs a logical assignment (i.e., identifies a mapping) of the components within the system configuration to the grid of hardware nodes 465 . This logical assignment identifies a set of resources (e.g., RAM, hard drive space, etc.) required by the system configuration.
- the logical assignment is stored within the data storage 450 where it can be later accessed by other components of the hosting system 400 .
- the data storage 450 of some embodiments includes one or more databases that reside on one or more particular machines (e.g., data storage devices of a computer system).
- the hypervisor management module 440 of some embodiments receives the logical assignment from the resource management system module 430 or from the data storage 450 after the resource management system module 430 stores the logical assignment in the data storage 450 .
- the hypervisor management module 440 acts as a virtualization manager to emulate a single virtual machine as if it existed on a single hardware node, even though the hypervisor management module 440 may physically leverage the resources of multiple nodes to host the single system configuration. Additionally, a single functional component of the system configuration may be virtualized by distributing its functionality across multiple nodes 465 . For instance, when a database server of a system configuration requires a large allocation of disk space, the hypervisor management module 440 may deploy this database server over two nodes such that the disk space of any one node is not proportionally used by the database server.
- the hypervisor management module 440 automatically allocates the logical assignment across one or more of the physical hardware nodes 465 by interfacing with a hypervisor 470 operating on each node.
- the hypervisor 470 manages the allocation of resources at the individual node level whereas the hypervisor management module 440 of some embodiments manages the allocation of resources at the grid level for all nodes within the grid 465 . Accordingly, the hypervisor 470 of each node allows for a non-conflicting provisioning of a node's resources to two or more virtual machines and the hypervisor management module 440 allows several such nodes with multiple virtual machines to operate seamlessly together.
- UVM utility management module
- the UVM 480 is a utility manager that customizes the resources allocated by the hypervisor management module 440 .
- the UVM custom configures the resources based on a user virtual machine system configuration specified/modified through the front-end manager 420 or received from the extraction engine 490 .
- the UVM 480 of some embodiments also includes an adaptation engine 485 , which receives extracted system configurations from the extracted configuration store 495 and adapts them to be operable on the hypervisor 470 of the node.
- the hypervisor management module 440 instructs the UVM 480 to retrieve the extracted system configurations from the extracted configuration store 495 and/or the image store database 460 .
- the UVM 480 optimizes and customizes the system configurations by receiving adapted system configurations or retrieving system configuration images from an image store database 460 and modifying the retrieved image according to user specifications.
- the UVM 480 of some embodiments also performs other operations (e.g., making an adapted system configuration bootable on the hypervisor 470 ). In this manner, the UVM 480 permits each virtual machine system configuration operating on a node of the grid 465 to be unique based on (1) a user's extracted system configuration and/or (2) user parameters specified through the graphical user interface of the front-end logic.
- the image store database 460 is a database storing several operating system software images and/or software images for applications to run in conjunction with the operating system of a virtual machine configuration. Additionally, in some embodiments, image store database 460 physically represents a single database that stores single server appliances and multi-server appliances.
- a single server appliance is a stand-alone image. Such a single server appliance includes a single operating system image or a single software application image. In other words, a single server appliance represents a single element of a virtual machine.
- a multi-server appliance is an image composed of a combination of one or more operating system images and application program images.
- a multi-server appliance represents all or some of the elements of a virtual machine deployed within the hosting system's grid of nodes.
- a multi-server appliance specifies a tiered organization for the elements of a virtual machine.
- the multi-server appliance may include two web servers at a first tier that interact with an application server at a second tier.
- the images in the image store database 460 are provided by the hosting system provider or by users of the hosting system. For instance, some users specify virtual machine configurations that include an operating system and various commonly used applications that are configured to optimally operate with the operating system. Also, as further discussed below, the images in the image store database 460 may be adapted system configurations supplied by an adaptation module 485 of a node. By storing these system configurations within the image store database 460 , the system configurations, and more specifically the optimizations made to the system configurations, can be reused when instantiating virtual machines for other users.
- FIG. 5 illustrates a graphical interface in accordance with some embodiments by which users of the hosting system submit images that may be used by other users of the hosting system.
- the front-end logic of some embodiments described above generates the graphical interface 510 .
- the interface 510 includes an image selection tool 520 and a set of tags 530 .
- the image selection tool 520 selects the image that the user desires to submit to the image database of the hosting system provider. When selected, the image selection tool 520 opens a browser window from which the user navigates to select an image that can then be shared with other users of the hosting system. In some embodiments, the image selection tool 520 may be used to select a user's virtual machine that has already been adapted, configured, and deployed to a specific node within the grid of nodes of the hosting system. Once the virtual machine is selected, the corresponding image for the virtual machine is stored within the image store database 460 such that the image is directly accessible by other subsequent users that define virtual machine configurations through the front-end logic of some embodiments.
- the image selection tool 520 is a drag and drop field within the graphical interface 510 .
- users drag an icon or other representation of a desired image and drop the representation within the area of the image selection tool 520 .
- the image store database 460 stores unmodified images and sets of parameters or configuration files that are used to modify parameters of the unmodified images. Users submit the parameters or configuration files using an interface similar to interface 510 of FIG. 5 .
- Some embodiments then allow subsequent users the ability to select between previously submitted images or previously submitted configuration files for unmodified images that are stored in the image store database 460 .
- a user specifies a virtual machine system configuration through the front-end logic of the hosting system, the user is presented a graphical interface from which to select between the various user submitted images or user submitted configuration files. The user then selects an image or configuration file that best suits the user's needs.
- some embodiments provide various performance metrics for each of the submitted images.
- other users who have integrated the various images or configuration files into their virtual machines and have monitored the performance and effectiveness of the images provide some of the performance metrics.
- FIG. 6 illustrates an image selection interface in accordance with some embodiments.
- the image selection interface 610 provides a list of available images 620 that may be selected as part of a subsequent user's virtual machine configuration. For each image, the image selection interface 610 provides a set of performance metrics 630 - 660 .
- performance metrics include: (1) metric 630 that specifies the number of times that users have added a particular image to their virtual machine configurations, (2) metric 640 that specifies the number of unique users that have added a particular image to their virtual machine configurations, (3) metric 650 that provides a average performance rating, on a scale of one to five stars, that other users have provided as to the performance or effectiveness of a particular image, and (4) metric 660 that specifies a set of comments regarding the performance of a particular image from other users that have deployed the image. It should be apparent to one of ordinary skill in the art that performance metrics 630 - 660 are an exemplary set of performance metrics. However, additional performance metrics may be specified in addition to or in place of some of the performance metrics 630 - 660 .
- the performance metrics allow users to select between images that are known to be effective or that are known to provide a specified level of performance based on previous users' experiences. It should be apparent to one of ordinary skill in the art that even though the interface of FIG. 6 is described for selecting between images, the same interface is adaptable for selecting between different configuration files for unmodified images that are stored within the image store database 460 .
- FIG. 7 illustrates some components illustrated in FIG. 4 in more detail, as well as other components with which some of the components of FIG. 4 interact.
- FIG. 7 illustrates an extraction engine 775 (e.g., the extraction engine 490 of FIG. 4 ), an extracted image store 785 (e.g., the extracted image store 495 of FIG. 4 ), a library 790 , a kernel application programming interface (“API”) store 770 , a workstation 780 , and a grid 735 of nodes (e.g., nodes 731 a - n ).
- FIG. 7 also illustrates several computer systems 740 a - n , some or all of which are computer systems of different users.
- API application programming interface
- the extraction engine 775 is communicatively coupled to one or more user computer systems (e.g., physical computer systems or virtual machines) 740 a - n . While a single extraction engine 775 is shown in this figure, some embodiments provide an extraction engine locally at one or more of the computer systems 740 a - n .
- the extraction engine 775 interfaces with these computer systems in order to generate system configuration packages 720 a - n , which include images of file systems of the system configurations and/or attributes of the system configurations of the computer systems 740 a - n .
- the extraction engine 775 provides these system configuration packages 720 a - n to the adaptation engines 705 a - n of nodes 731 a - n for which the system configuration packages are intended.
- a hypervisor management module e.g., hypervisor management module 440 of some embodiments makes this determination in conjunction with a resource management server (e.g., resource management server 430 ).
- a particular node 731 a includes a platform 730 a .
- the platform 730 a may be any type of platform (e.g., one of the platforms enumerated in FIG. 2 , such as a virtualized platform which runs one or more system configurations on a hypervisor).
- the node 731 a runs several virtual machine system configurations 745 a - n .
- the node 731 a includes a UVM, which includes an adaptation engine 705 a (e.g., the adaptation engine 485 of FIG. 4 ).
- the adaptation engine 705 a receives a system configuration package 720 a from an extraction engine 775 and/or an extracted image store 785 and generates an adapted system configuration 725 a which is operable on the platform 730 a .
- This adapted system configuration 725 a is then run by the node 731 a as the virtual machine system configuration 745 a .
- the adaptation engine of some embodiments retrieves information from the library 790 .
- the library 790 of some embodiments is made up of sub-libraries. These sub-libraries include: (1) a library that stores multiple computer system core kernels (also referred to as a “core kernel library” that stores kernels separately from third party drivers) 750 , (2) a device driver library 755 , (3) an operating system library 760 , and/or (4) a development environment library 765 that stores development environments, also known as “clean versions” of kernels and operating systems (e.g., versions that are unchanged compared to versions released by vendors and/or original developers of the operating systems and kernels).
- the adaptation engine 705 of some embodiments uses information from some or all of these sub-libraries when performing an adaptation of a source system configuration to be operable on a destination platform.
- the library 790 is implemented as part of a file store array that is made up of many data storage devices (e.g., hard drives) used by a server hosting system.
- the library 790 is coupled to the workstation 780 , through which the library 790 may be managed.
- Data e.g., kernels, device drivers, etc.
- the library 790 of some embodiments is an adaptive library, and data may be automatically added to the library. For examples, when a device driver is updated by the manufacturer of the device, the driver may be automatically downloaded from the device manufacturer's website and added to the driver library 755 .
- the adaptive library of some embodiments receives new information to store from the adaptation engine 705 when the adaptation engine 705 generates new information.
- one or more of the interfaces between the various components shown in FIG. 7 is a network interface.
- the network interface is through a LAN, a network of networks such as the Internet, a wireless cellular telecommunication network such as GPRS, or any other type of network.
- one or more of the components described above, such as the extraction engine 775 have a programmatic interface on a single computer system with each other in some embodiments.
- the grid of hardware nodes 735 includes several distinct physical servers or clusters of servers located in a single server farm or distributed across multiple server farms in multiple disparate locations. Accordingly, the grid of hardware nodes 735 of some embodiments represents a cloud of computing resources shareable by multiple users.
- servers in other embodiments encompass any standalone computational element that can process requests it receives.
- the grid of hardware nodes 735 is uniformly used to implement all components of a system configuration. However, some embodiments segregate various functionalities across groups of nodes. For instance, in some embodiments, a first grouping or cluster of nodes is used to implement the load-balancing servers of a system configuration and a second grouping or cluster of nodes are used to implement other server components (e.g., web servers, database servers, etc.) of the system configuration. In some such embodiments, the load-balancing servers are dedicated F5 load balancing server appliances that can be configured to work in conjunction with the other nodes of the grid.
- the grid of nodes contains an inter-communication pathway by which each node shares data with other nodes of the array and the hypervisor management module. Through, the inter-communication pathway, physically separated nodes together operate as a single functional unit.
- each node 705 in the grid of hardware nodes 735 includes at least one processing unit, where through the various partitioning, allocation, and deployment performed by the hypervisor management module, hypervisor, and/or utility management module, each physical processing unit conceptually operates as multiple separate processing units for two or more virtual machines of the node.
- Other resources of a node e.g., memory, disk space, network bandwidth, etc.
- FIGS. 8A-BD further illustrate a node before and after receiving an extracted system configuration for adaptation.
- FIG. 8A illustrates a node 805 (e.g., the node 731 a of FIG. 7 ) of a hosting system of some embodiments.
- the node includes a UVM 845 , which includes an adaptation engine 810 .
- the UVM 845 is associated with three logical storage devices (e.g., mounted hard drives): (1) a UVM operating system storage 815 , (2) an extracted configuration storage 820 , and (3) an adapted configuration storage 825 .
- the node 805 also has other storage 870 , which represents other storage devices of the node 805 .
- these storage devices 815 , 820 , 825 , and 870 each correspond to one or more physical storage devices. In some other embodiments, each of these storage devices 815 , 820 , 825 , and 870 is a partition of one or more physical storage devices of the node 805 .
- the UVM operating system storage 815 stores the operating system of the UVM, including executable instructions that the UVM 845 executes to carry out its various functions.
- the executable instructions that carry out the functions of the UVM 845 or adaptation engine 810 are defined by a set of scripts remotely stored in a file system of the hypervisor management module.
- the UVM 845 mounts the file system in order to access the set of scripts.
- the executable instructions that carry out the functions of the UVM 845 or adaptation engine 810 are stored as scripts in the UVM operating system store 815 .
- the configuration store 820 stores an extracted system configuration (“configuration 1 ”) received from a configuration store 855 or an extraction engine in some embodiments (e.g., the extraction engine 775 of FIG. 7 ).
- the adaptation engine 810 accesses the configuration store 820 in order to adapt the stored system configuration to be operable on the node 805 .
- the adapted configuration store 825 stores a system configuration adapted by the adaptation engine 810 (“adapted configuration 1 ”) once the adaptation engine has adapted an extracted system configuration. As shown by the figure, this adapted system configuration will later be used by a virtual machine 830 that runs on the node 805 .
- the UVM 845 allocates the space required by the adapted system configuration (e.g., mounts the drive 825 ) in response to a message from a hypervisor management module 865 of a server hosting system (e.g., hypervisor management module 440 of FIG. 4 ), which indicates the resources required by the system configuration.
- the other storage 870 stores other data stored on the node, including virtual machine configurations not mentioned with reference to FIGS. 8A-8D , as well as unallocated space in some embodiments.
- FIG. 8B illustrates the node 805 of FIG. 8A after the system configuration has been adapted by the adaptation engine 810 .
- the UVM 845 has erased the data stored in the configuration store 820 and the adapted configuration store 825 .
- the UVM 845 has also allocated storage space 875 (e.g., mounted a file system) for the virtual machine 830 .
- the UVM 845 has copied the adapted system configuration that was previously stored in the adapted configuration store 825 .
- the amount of storage space 875 allocated for the virtual machine 830 is determined by a request from the hypervisor management module 865 .
- the capacity of storage space 875 is greater than or equal to the size of the adapted system configuration (e.g., the storage space 875 has a capacity of 500 GB, while the adapted system configuration occupies 4 GB of the storage space 875 ).
- Some embodiments provide a method for extracting a source system configuration that operates on a source platform in order to allow the system configuration to be adapted to be operable on a destination platform.
- extraction includes analyzing the source system configuration in order to determine attributes that are relevant to adapting the source system configuration to be operable on the destination platform. These attributes include operating system name, kernel name, kernel version, and/or other attributes.
- Sub-section A below describes some embodiments that extract the system configuration locally at the source platform, while sub-section B below describes some other embodiments that remotely access the source platform in order to extract the system configuration.
- the source platform 905 stores other software modules (e.g., application programs that are not shown in FIG. 9 ). While the extraction engine 920 is illustrated in the figure as being separate from the system configuration 955 , the extraction engine 920 is a software module that may be installed as part of the system configuration 955 in some embodiments. In some embodiments, a user of the source platform 905 downloads the extraction engine 920 software application from the hosting system that is to host the source system configuration.
- the extraction engine 920 of some embodiments analyzes the source system configuration 955 in order to determine attributes that are relevant to adapting the source system configuration 955 to be operable on a different platform.
- these attributes include operating system attributes 925 (e.g., operating system name, operating system version, etc.) and/or kernel attributes 930 (e.g., kernel name, kernel version, etc.). Determining these attributes includes identifying devices and/or drivers of the system configuration in some embodiments.
- the extraction engine bundles some or all of the identified attributes and generates a system configuration package 940 that stores the bundled attributes.
- the source platform 905 of some embodiments is communicatively coupled to an adaptation engine 935 through a network 960 (e.g., a LAN, the Internet, or any other type of network). Through the network 960 , the source platform 905 provides the system configuration package 940 to the adaptation engine 935 of some embodiments. As mentioned above, the adaptation engine 935 may be present on a separate physical device than the source platform 905 . The adaptation engine 935 uses the system configuration package 940 in order to generate a destination system configuration package 942 . The processes of some embodiments by which the adaptation engine 935 generates the destination system configuration package 942 are described below in Section IV.
- the destination system configuration package 942 of some embodiments includes the source system configuration 955 , adapted to be operable on a destination platform.
- the adaptation engine 935 is communicatively coupled to a destination platform (e.g., through a network such as a LAN or the Internet, not shown).
- the destination platform is a node 965 in a grid of nodes 950
- the destination platform is a virtual machine on a node 965 in the grid of nodes 950 .
- the grid of nodes 950 includes the node 965 , as well as one or more other nodes, such as nodes 956 and 957 .
- the adaptation engine 935 provides the destination configuration 942 to the destination node 965 in some embodiments so that the destination configuration 942 can be installed on the destination node 965 (e.g., by a UVM of the destination node 965 ).
- FIG. 10 illustrates a process 1000 by which a local extraction engine of some embodiments (e.g., the local extraction engine 920 of FIG. 9 ) performs an extraction of a system configuration a source platform.
- the process 1000 begins by aggregating (at 1005 ) a set of attributes of the source system configuration of the source platform. As mentioned above, these attributes include operating system name, operating system version, kernel name, kernel version, device drivers, and/or other attributes.
- the local extraction engine of some embodiments analyzes the system configuration by executing one or more commands that scan the file system of the source platform.
- the local extraction engine of some embodiments executes a uname-a command that provides information about the kernel such as name, version number. It should be apparent to one of ordinary skill in the art that the local extraction engine also performs other commands that provide other attributes of the system configuration. For example, the local extraction engine issues commands to identify the kernel release date, CPU type, operating system name, number of processors, number of hard drives, number of network devices, etc.
- the local extraction engine of some embodiments also analyzes the source system configuration in order to determine a set of device drivers of the source system configuration. Moreover, some embodiments programmatically check a device manager of an operating system of the source system configuration in order to determine device drivers of the source system configuration. In some embodiments, these attributes are recorded and stored in a file or set of files (e.g., text file(s), XML file(s), etc.).
- the local extraction engine After aggregating (at 1005 ) the attributes of the local configuration, the local extraction engine generates (at 1010 ) a system configuration package (e.g., the system configuration package 940 of FIG. 9 ) that includes some or all of the attributes that were previously aggregated (at 1005 ).
- this system configuration package is a single file.
- the system configuration package may include an image file, such as an .iso file.
- the system configuration package may be organized as multiple files.
- the system configuration package of some embodiments also includes a file system of the source system configuration (i.e., some or all of the data stored on the source platform, such as the operating system, the kernel, a set of device drivers, and/or a set of application programs).
- the attributes of the computer system may be listed in a separate file or set of files (e.g., text file(s), XML file(s), etc.) in the system configuration package.
- the system configuration package includes (1) attributes of the system configuration, (2) a file system of the system configuration, or (3) both.
- the local extraction engine of some embodiments After preparing (at 1010 ) the system configuration package, the local extraction engine of some embodiments outputs (at 1015 ) the system configuration package from the source platform.
- the system configuration package is received by an adaptation engine (e.g., the adaptation engine 935 of FIG. 9 ) through a network (e.g., the network 960 of FIG. 9 , which is a LAN, the Internet, or any other network).
- the adaptation engine of some embodiments then uses this system configuration package in order to adapt the system configuration to be operable on a different platform.
- FIG. 11 conceptually illustrates a system that performs remote extraction of a source system configuration.
- FIG. 11 shows a source platform 1105 (e.g., a single computer system, a node in a grid of nodes, etc.) that includes a source system configuration 1155 .
- the source system configuration 1155 includes an operating system 1110 and a kernel 1115 .
- the source system configuration 1155 also includes other software modules, such as application programs (not shown).
- the source platform 1105 is communicatively coupled through a network 1160 (e.g., a LAN, the Internet, or any other network) to a remote extraction engine 1120 .
- a network 1160 e.g., a LAN, the Internet, or any other network
- the remote extraction engine 1120 is present on a particular machine which is a different physical device (e.g., a different computer system) than the source platform 1105 .
- the device of the remote extraction engine 1120 may be part of the hosting system of some embodiments where the system configuration of the source platform 1105 is to be hosted.
- the remote extraction engine 1120 requests attributes (e.g., kernel name, kernel version, device drivers, as discussed above) of the source system configuration 1155 . These requests include a request 1111 for attributes of the operating system 1110 and/or a request 1116 for attributes of the kernel 1115 .
- the source platform 1105 provides the requested attributes (e.g., operating system attributes 1125 , kernel attributes 1130 , and device drivers (not shown)) to the remote extraction engine 1120 .
- the remote extraction engine 1120 then generates a system configuration package 1140 that identifies some or all of the requested attributes.
- the remote extraction engine 1120 is communicatively coupled to an adaptation engine 1135 .
- the remote extraction engine 1120 and the adaptation engine 1135 are present on the same device (e.g., the same computer system) and communicate through a programmatic software interface.
- the remote extraction engine 1120 and the adaptation engine 1135 are present on different physical devices (e.g., different computer systems) and communicate through a network interface (e.g., through a LAN, the Internet, or any other network).
- the remote extraction engine 1120 provides the system configuration package 1140 to the adaptation engine 1135 , which uses the system configuration package 1140 in order to generate a destination system configuration 1142 .
- the processes of some embodiments by which the adaptation engine 1135 generates the destination system configuration 1142 are described below in Section IV.
- the destination system configuration 1142 includes the source system configuration 1155 , adapted to be operable on a destination platform.
- FIG. 12 illustrates a process 1200 by which a remote extraction engine of some embodiments (e.g., the remote extraction engine 1120 of FIG. 11 ) performs an extraction of a system configuration of a source platform.
- the process 1200 begins by remotely accessing (at 1205 ) a source platform (e.g., the source platform 1105 of FIG. 11 ).
- this accessing includes providing a set of authentication information, such as a log-in name and/or a password.
- This accessing is performed through any methodology that allows remote access to the source platform. Examples of such methodology include the remote desktop protocol (“RDP”), secure shell (“SSH”), virtual network computing (“VNC”) application, etc.
- RDP remote desktop protocol
- SSH secure shell
- VNC virtual network computing
- the process 1200 accesses the source platform through a web application (e.g., a Java “applet”) running in a web browser on the source platform.
- the remote extraction engine of some of these embodiments runs an application server (e.g., a Java “servlet”) that performs some or all of the process 1200 .
- a user uploads an image of the system configuration to the remote extraction engine 1120 .
- the process then requests (at 1210 ) and receives a set of attributes of the system configuration of the source platform.
- these attributes includes operating system name, operating system version, kernel name, kernel version, and/or any other attribute.
- These requests invoke commands that are executed at the source platform.
- the operating system of the source system configuration is a Linux operating system
- one of these commands is a uname-a command that provides information about the kernel (e.g., name, version number), as well as other attributes of the system configuration (e.g., kernel release date, machine hardware name, CPU type, operating system name, etc.).
- the remote extraction engine of some embodiments also requests other attributes, including a set of device drivers of the source system configuration.
- remote extraction engine causes the source machine to execute a uname command
- other embodiments utilize other well-known methodologies for determining the attributes of the source system configuration in lieu of, or in addition to, executing a uname command (e.g., checking a device manager of an operating system of the source system configuration, as mentioned above).
- the remote extraction engine of some embodiments issues a command that causes the source machine to record and store these attributes in a file or set of files (e.g., text file(s), XML file(s), etc.). In some of these embodiments, the remote extraction engine issues a command that causes the source machine to transmit the file or set of files to the remote extraction engine in addition to, or in lieu of storing these attributes at the source machine. Additionally, in some embodiments, the remote extractor issues a command that causes the source machine to transmit some or all of the data contents (e.g., operating system, kernel, drivers, document files, etc.) of the source system configuration (e.g., data stored on a hard drive of the source machine) to the remote extraction engine. In other words, the remote extraction engine of some embodiments creates a copy of the data contents of the hard drive(s) of the source system configuration and receives some or all of the data contents of the hard drive(s).
- a file or set of files e.g., text file(s), XML file(
- the remote extraction engine After receiving (at 1210 ) the attributes of the source system configuration, the remote extraction engine generates (at 1215 ) a system configuration package (e.g., the system configuration package 1140 of FIG. 11 ) that includes some or all of the attributes that were previously received (at 1110 ).
- this system configuration package is a single file.
- the system configuration package is an image file, such as an .iso file.
- the system configuration package may be organized as multiple files.
- the system configuration package of some embodiments also includes some or all of the data stored by the source machine, such as the operating system, the kernel, a set of device drivers, and/or a set of application programs.
- the attributes of the computer system may be listed in a separate file or set of files (e.g., text file(s), XML file(s), etc.) in the system configuration package.
- the remote extraction engine of some embodiments transmits (at 1220 ) the system configuration package.
- the system configuration package is received by an adaptation engine (e.g., the adaptation engine 1135 of FIG. 11 ) through a network (e.g., a LAN, the Internet, or any other network).
- the adaptation engine of some embodiments then uses this system configuration package in order to adapt the system configuration to be operable on a different platform.
- a system configuration package generated by an extraction engine includes attributes of the system configuration.
- a system configuration package includes an image of the entire file system of the system configuration, but does not include attributes of the system configuration.
- the system configuration package includes all of the contents of some or all storage devices (e.g., hard drive(s)) of the source system configuration.
- the analysis operations described above are performed by an adaptation engine (e.g., the adaptation engine 705 a of FIG. 7 ). Section IV, below, describes several exemplary methodologies of some embodiments that adapt a system configuration to be operable on a destination platform.
- an adaptation engine of some embodiments adapts a system configuration that is operable on a source platform to be operable on a destination platform.
- the adaptation engine uses one or more processes to perform this adaptation. Examples of these processes, which are further described below with reference to FIGS. 15-21 , include importing a kernel into the system configuration, porting device drivers into the system configuration, and emulating hardware required by the system configuration.
- Sub-section A describes a software module diagram for the adaptation engine of some embodiments.
- Sub-section B describes a process that the adaptation engine uses in determining whether to import a kernel and/or port a set of drivers.
- sub-sections C and D describe exemplary methodologies that perform the abovementioned importing of a kernel and porting of a set of device drivers.
- Sub-section E describes a process that emulates a set of hardware requested by a source system configuration in order to adapt the system configuration to be operable on a destination node.
- the adaptation engine of some embodiments includes a set of software modules that run on one or more particular machines (e.g., computer systems used for adapting system configurations). These machines include each of the nodes of the hosting system described with reference to FIG. 4 . Alternatively, these machines include a machine at a central location within the hosting system such as the hypervisor management module of some embodiments.
- FIG. 13 illustrates a software module block diagram of an adaptation engine 1390 of some embodiments that runs on a computer system 1300 in order to adapt a source system configuration of a source platform into a destination system configuration 1360 that runs on a destination platform.
- the adaptation engine 1390 includes a kernel comparator/retriever module 1310 , a source operating system identifier/retriever module 1315 , a driver comparator/retriever module 1320 , an operating system modifier module 1380 , a destination development environment module 1330 , a driver API module 1335 , and a destination system configuration aggregator module 1340 .
- the adaptation engine 1390 includes interfaces to several libraries, including a kernel library 1365 , an operating system library 1370 , a driver library 1375 , and a development environment library 1385 . In some embodiments, one or more of these libraries correspond to the libraries illustrated in FIG. 7 .
- the functionality of these various modules and libraries is further elaborated below in Sub-sections B-E. However, the following is a brief discussion of the functionalities of these modules and libraries.
- the adaptation engine 1390 receives a system configuration package 1305 (e.g., a system configuration package that is provided by an extraction engine) of a source system configuration.
- the system configuration package 1305 includes a source kernel, a set of drivers 1345 , and source operating system 1355 .
- the kernel comparator/retriever module 1310 analyzes the source kernel 1345 and determines whether a compatible kernel is available in the kernel library 1365 . Upon determining that a compatible kernel is available, the kernel comparator/retriever module 1310 retrieves the compatible kernel from the kernel library 1365 . This determination is further described with reference to FIG. 16 , below.
- the kernel is then passed to the destination system configuration aggregator module 1340 .
- the destination system configuration aggregator module 1340 aggregates data passed from the other modules of the adaptation module 1390 in order to output the destination system configuration 1360 , which is a file or set of files in some embodiments.
- the source operating system identifier/retriever module 1355 analyzes the source operating system 1355 and determines whether a compatible operating system is available in the operating system library 1370 . Upon determining that a compatible operating system is available, the operating system comparator/retriever module 1315 retrieves the compatible operating system from the operating system library 1370 .
- the operating system comparator/retriever module 1315 also determines whether the operating system (either the retrieved operating system or the original source operating system) needs to be modified in the adaptation process. Upon determining that the operating system needs to be modified, the operating system comparator/retriever module 1315 provides the operating system (either the retrieved operating system or the original source operating system) to the operating system modifier module 1380 . In some embodiments, the operating system comparator/retriever module 1315 also passes a message to the operating system modifier module 1380 that indicates what changes need to be made. The operating system modifier module 1380 then performs the indicated one or more modifications to the operating system. Some embodiments of a process that modifies the operating system are further described below with reference to FIGS. 18-19D .
- the operating system modifier module 1380 of some embodiments provides the modified operating system back to the operating system library 1370 for retrieval in later adaptation processes, thereby eliminating the need for modifying the operating system in the same way again.
- the retrieved, modified, and/or original source operating system is then provided to the destination system configuration aggregator module 1340 .
- the driver comparator/retriever module 1320 determines whether one or more of the source drivers 1345 of the source platform need to be replaced by importing a set of device drivers into the source system configuration in order to generate the destination system configuration 1360 .
- the driver comparator/retriever module 1320 also determines whether the drivers that need to be imported are available in the driver library 1375 . Upon determining that compatible device drivers are available, the driver comparator/retriever module 1320 retrieves the compatible drivers from the driver library 1375 .
- the driver comparator/retriever module 1320 determines that these drivers need to be generated, either automatically through a destination development environment building process, or by using a device driver API of the source kernel and/or operating system.
- the driver comparator/retriever module 1320 supplies the source drivers to the driver API module 1335 or to the destination development environment module 1330 .
- These modules 1330 and 1335 generate the required drivers and supply them to the destination system configuration aggregator 1340 .
- these modules 1330 and 1335 also supply the generated drivers to the driver library 1375 for retrieval in later adaptation processes, thereby eliminating the need for generating the same driver(s) again.
- the destination development environment module 1330 retrieves a development environment of the kernel and operating system, also known as “clean versions” of the kernel and operating system (e.g., a version that is unchanged compared to a version released by a vendor or original developer of the operating system and kernel) from the development environment library 1385 .
- the destination development environment module 1330 generates drivers using the retrieved development environment.
- the destination development environment module 1330 provides these generated drivers to the destination system configuration aggregator module 1340 .
- FIG. 14 illustrates a process 1400 by which some embodiments determine whether to import a kernel or port a set of drivers when adapting a source system configuration of a source platform to be operable on a destination platform.
- the process 1400 begins by identifying (at 1405 ) an operating system and kernel of the source system configuration.
- the identification information is included in the system configuration package, as described above.
- the identification information includes an entry in a file of the system configuration package that indicates the operating system name, vendor, and/or version number.
- the system configuration package does not include the identification information, some embodiments execute processes to identify the identification information before commencing the adaptation process.
- the process 1400 determines (at 1410 ) whether the operating system is a proprietary operating system.
- a proprietary operating system is an operating system for which an associated kernel cannot be separately manipulated.
- a proprietary operating system is not an open source operating system.
- a proprietary operating system is an operating system for which a licensing fee must be paid in order to install and/or use the operating system. Examples of such proprietary operating systems include Microsoft Windows XP® and Sun Microsystems Solaris®.
- the process 1400 checks a database that lists proprietary operating systems. When the operating system is a proprietary operating system, the process ports drivers (at 1420 ) into the system configuration in order to adapt the system configuration to be operable on a destination platform. A process of some embodiments of porting drivers is described below with reference to FIGS. 20-21 .
- a non-proprietary operating system is an open-source operating system.
- a non-proprietary operating system is available under the GNU General Public License. Examples of non-proprietary operating systems include some distributions of the Linux operating system, such as Fedora®, Debian®, Ubuntu®, etc.
- the process 1400 Upon determining that the operating system is not a proprietary operating system, the process 1400 performs (at 1415 ) a further investigation to determine whether to import a kernel or to port drivers. This further investigation is described with reference to FIG. 15 , below, which also describes a process of some embodiments for importing a kernel. After making the determination of whether to import a kernel or to port a set of device drivers, the process 1400 ends.
- FIG. 15 illustrates a process 1500 of some embodiments that imports a kernel in order to adapt a source system configuration to be operable on a destination platform.
- the adaptation engine of some embodiments performs the process 1500 after determining that the operating system of a source system configuration is not a proprietary operating system.
- the process 1500 begins by receiving (at 1505 ) the operating system and kernel of the source system configuration. The process 1500 then determines (at 1515 ) whether a compatible kernel is present in a library that stores multiple kernels. This determination is described below in further detail with reference to FIG. 16 .
- a compatible kernel includes the same interface to the same source operating system as the interface of the source kernel. However, the compatible kernel includes a different hardware interface than the source kernel.
- the source kernel includes a hardware interface that interfaces with hardware (either physical hardware or virtual hardware) of the source platform, while the compatible kernel includes a hardware interface that interfaces with hardware (either physical hardware or virtual hardware) of the destination platform.
- the process 1500 receives the compatible kernel and installs (at 1545 ) the source operating system onto the received compatible kernel.
- installing (at 1545 ) the source operating system onto the received compatible kernel entails storing the source operating system and the received compatible kernel in a single location (e.g., a storage device of a computer system).
- installing (at 1545 ) the source operating system entails overwriting one or more files of the source operating system.
- the source operating system and the received compatible kernel are referred to as the adapted source system configuration or the destination system configuration.
- the process 1500 determines (at 1515 ) that a compatible kernel is not present in the kernel library, the process determines (at 1550 ) whether a similar kernel is in the library. This may occur in the case where the source system configuration is modified and a compatible kernel with the same modification (also referred to as an “unsupported” modification) is not present in the kernel library.
- unsupported modifications include proprietary file systems (e.g., file systems developed by a developer that does not release the source code), proprietary networking protocols (e.g., networking protocols used in the banking industry), and/or other modifications of which the nature cannot be determined.
- “supported” modifications include an open-source file system (e.g., global file system (“GFS”) or internet small computer system interface (“iSCSI”)) or other common modifications of which the nature can be determined.
- GFS global file system
- iSCSI internet small computer system interface
- the process 1500 Upon determining (at 1550 ) that a similar kernel is present in the library, the process 1500 receives a modified version of the source operating system and installs (at 1555 ) the modified source operating system onto the similar kernel. The process 1500 then ends.
- the process 1500 determines (at 1550 ) that a similar kernel is not present in the kernel library, the process 1500 ports (at 1560 ) a set of device drivers into the source system configuration. As mentioned above, this porting (at 1560 ) of drivers is described below with reference to FIG. 20 . The process 1500 then ends.
- FIG. 16 illustrates a process 1600 that determines whether a compatible kernel is in a kernel library.
- a “compatible” kernel of some embodiments includes the same interface to the source operating system, but a different hardware interface (i.e., the source kernel includes an interface to hardware of the source platform, while the compatible kernel includes an interface to hardware of the destination platform).
- the process 1600 may be performed at decision operation 1515 of the process 1500 , as shown in FIG. 15 .
- the process 1600 begins by receiving (at 1605 ) the source operating system and kernel.
- the process 1600 determines (at 1610 ) whether the source kernel is modified.
- a modified kernel is a kernel that includes modifications as compared to an unmodified (also referred to as “clean” or “standard”) version of the kernel that was distributed by an entity that originally created the kernel. These modifications include modifying a file system of the source kernel, modifying a set of networking protocols, and modifying one or more drivers as some examples.
- the process 1600 makes this determination by examining the version number of the source kernel and comparing this version number to a list of version numbers of unmodified kernels.
- some embodiments compare other parameters of the kernels in order to determine compatibility.
- these other parameters are attributes listed in a system configuration package generated by an extraction engine. Examples of other parameters include a number of processors, number of network devices, input device (such as keyboard and/or mouse) drivers, display drivers, IP address, hostname, etc.
- the process 1600 determines (at 1610 ) that the source kernel is a modified kernel, then the process 1620 checks (at 1620 ) the library for a kernel with the same modification (or modifications) as the source kernel.
- the process 1600 determines (at 1620 ) whether a compatible kernel is present in the kernel library.
- the process 1600 makes this determination by identifying version numbers of the kernels stored in the library and comparing them to the version number of the source kernel.
- a matching version number indicates that a kernel in the kernel library includes the same modifications as the source kernel, and is thus a compatible kernel.
- unique identifiers may be appended to the version numbers in order to insure that a matching version number indicates an actual match.
- the process 1600 determines (at 1625 ) that a kernel with the same modifications as the source kernel (i.e., a compatible kernel) is present in the kernel library, then the process 1600 retrieves (at 1615 ) the compatible kernel from the kernel library. However, when the process 1600 determines (at 1625 ) that a compatible kernel is not present in the kernel library, then the process 1600 returns (at 1630 ) “no compatible kernel.” The process 1600 then ends.
- FIGS. 17A-17D conceptually illustrate hardware and software layers of the source and destination system configurations, and the relationships between these layers, during different stages of importing a compatible kernel that is found in a library during adaptation of a source system configuration to be operable on a destination platform.
- the various layers of these figures indicate compatibility with one another through conceptual notches and pegs that can be inserted into the notches.
- the conceptual notches and pegs represent interfaces between layers.
- a layer with a rectangular notch in the top-center of the layer e.g., source kernel 1715
- a layer with a rectangular peg in the bottom-center of the layer e.g., source OS 1710 .
- these notches and pegs conceptually represent hardware and software interdependencies, and do not represent actual physical notches and pegs.
- Each of these figures shows three different types of layers: hardware layers, kernel layers, and operating system layers.
- Each hardware layer is illustrated with one or more conceptual notches and/or pegs at the top of the layer to indicate that that the hardware layer interfaces with a kernel layer.
- Each kernel layer is illustrated with one or more conceptual notches and/or pegs at both the bottom and the top of the layer to indicate that the kernel layer interfaces with both a hardware layer and an operating system layer, respectively.
- each operating system layer is illustrated with one or more conceptual notches and/or pegs at the bottom of the layer to indicate that the operating system layer interfaces with a kernel layer.
- one or more of the layers shown in the figures is illustrated with one or more of its interfaces omitted.
- a source operating system might include an interface to a set of application programs (not shown).
- FIG. 17A illustrates a source system configuration 1705 that operates on a hardware layer 1720 of a source platform.
- the hardware layer 1720 includes a set of hardware components (either physical or virtual).
- the source kernel 1715 of the source system configuration 1705 is compatible with the hardware layer of the source platform 1720 as the conceptual pegs and notches of the two layers “fit” together.
- the source kernel 1715 interfaces with the hardware layer 1720 of the source platform.
- the source operating system 1710 is compatible with the source kernel 1705 .
- the source kernel 1715 interfaces with the source operating system 1710 .
- the source kernel 1715 includes an interface to (1) the source hardware layer 1720 and (2) the source operating system 1710 .
- This figure also illustrates a compatible kernel 1725 that has been retrieved from a kernel library.
- this compatible kernel 1725 is retrieved at operation 1615 of the process 1600 described above with reference to FIG. 16 .
- this kernel 1725 is considered to be “compatible” with the source kernel 1715 because both kernels 1715 and 1725 have the same interface to the source operating system 1710 .
- This same interface is emphasized in the figure by a dotted double-sided arrow labeled “match.”
- the compatible kernel 1725 includes a hardware interface that is different from the hardware interface of the source kernel 1715 . While the source kernel 1715 includes an interface to the source hardware layer 1720 , the compatible kernel 1725 includes an interface to a hardware layer 1730 of a destination platform, as indicated by the matching conceptual notches and pegs.
- FIG. 17B conceptually illustrates an installation of the source operating system 1710 of the source system configuration 1705 onto the compatible kernel 1725 that is retrieved from the library. In some embodiments, this installation is performed at operation 1545 of the process 1500 , as shown by FIG. 15 .
- FIG. 17B shows that the source operating system 1710 is compatible with the kernel 1725 , as the operating system interface of the kernel 1725 matches the kernel interface of the source operating system 1710 .
- FIG. 17C illustrates an adapted source system configuration, also referred to as a “destination system configuration” 1735 .
- the destination system configuration 1735 includes the source operating system 1710 and the kernel 1725 that was retrieved from the kernel library.
- the destination system configuration 1735 is compatible with the hardware layer 1730 of the destination platform.
- the source system configuration 1705 has been adapted to be operable on the destination platform.
- FIG. 17D illustrates the result of the adaptation, a destination platform with the destination system configuration 1735 installed on the hardware layer 1730 of the destination platform.
- the adaptation described above is a transformation of a physical article.
- the transformation of some embodiments is a transformation of a computer system that does not run the adapted system configuration into a computer system that runs the adapted system configuration.
- a computer readable medium e.g., a storage device, such as a hard drive
- a computer readable medium that does not store (e.g., is not physically encoded with) the adapted system configuration
- Transforming a computer readable medium includes physically altering the computer readable medium (e.g., physically encoding different data onto a platter of a hard drive).
- Some embodiments transform a computer system configuration, which is stored on a computer readable medium, into a different computer system configuration, which is stored on the same computer readable medium.
- Section VII a system configuration of some embodiments is stored on a computer readable medium as a set of instructions that are executable by a processor of a computer system.
- Section VII also provides a non-exhaustive list of tangible articles which are considered as examples of computer readable media.
- FIG. 18 illustrates a process 1800 of importing a “similar” kernel from a library that stores multiple kernels.
- a “similar” kernel of some embodiments is a kernel that would interface with the source operating system if one or more changes were made to the source operating system.
- the changes that are needed in order to make the source operating system compatible with a similar kernel are previously determined and are stored in a database. Examples of some of these changes to the source operating system include modifying a device manager (e.g., udev in a Linux operating system), modifying a C library, and modifying a RAM disk (e.g., initrd in a Linux operating system).
- the process 1800 is performed at the decision operation 1550 of FIG. 15 .
- the process 1800 begins by receiving (at 1805 ) an operating system.
- the process 1800 determines (at 1810 ) whether a kernel that is compatible with the received operating system is in the library. In some embodiments, this determination includes checking a database that maps operating systems to kernels in order to indicate which operating system is compatible with kernels stored in the library. The mapping in this database may be based on objective or subjective observations that were previously made about compatibility between various operating systems and kernels.
- this database is the same as the database that stores the changes needed in order to make the source operating system compatible with the similar kernel. In some embodiments, this database is physically stored within the library that stores kernels (e.g., the core kernel library 750 of FIG. 7 ).
- the process 1800 When a similar kernel is not found in the library, the process 1800 returns (at 1830 ) “no similar kernel,” and then ends. On the other hand, when a similar kernel is found in the library, the process 1800 retrieves (at 1815 ) the similar kernel from the library. The process 1800 then modifies (at 1820 ) the source operating system in order to make the source operating system compatible with the kernel from the library.
- modifying the source operating system include modifying udev (in a Linux operating system), modifying a C library, and modifying a RAM disk (or initrd in a Linux operating system).
- the process 1800 of some embodiments checks an operating system library (e.g., operating system library 760 of FIG. 7 ) for a modified version of the source operating system. When the modified source operating system is already present, then the process 1800 does not need to modify (at 1820 ) the operating system again.
- an operating system library e.g., operating system library 760 of FIG. 7
- the process 1800 of some embodiments then supplies (at 1825 ) the modified source operating system to the operating system library for storage and later retrieval.
- the process 1800 then ends.
- FIGS. 19A-19D conceptually illustrate hardware and software layers of the source and destination system configurations, and the relationships between these layers during different stages of the process 1800 described above with reference to FIG. 18 .
- FIGS. 19A-19D illustrate three different types of layers: hardware layers, kernel layers, and operating system layers that are illustrated with conceptual notches and/or pegs in order to indicate interfaces with other layers.
- FIG. 19A illustrates a source system configuration 1905 that operates on a source platform 1920 .
- the source system configuration 1905 includes a source operating system 1910 and a source kernel 1915 .
- the source system configuration 1905 also includes other components and/or layers that are not shown in the figure (e.g., a set of software applications that run on the source operating system 1910 , etc.).
- This figure also illustrates a kernel 1925 that is similar to the source kernel 1915 .
- This similarity is illustrated by the conceptual notches on the tops of the kernels 1915 and 1925 , which are similar, but not the same.
- the similar kernel 1925 is retrieved from a core kernel library (e.g., the core kernel library 750 of FIG. 7 ).
- This figure further illustrates a destination platform 1930 .
- the destination platform 1930 has a different hardware interface (e.g., different physical or virtual hardware devices) than the source platform 1920 .
- FIG. 19B illustrates the source operating system 1910 before and after a modification (or set of modifications) 1935 is made to the source operating system 1910 .
- this modification is made at operation 1820 of the process 1800 of FIG. 18 .
- the source operating system 1910 becomes the modified source operating system 1940 .
- FIG. 19C illustrates that the modified source operating system 1940 is now able to interface with the similar kernel 1925 , which is able to interface with the destination platform 1930 .
- FIG. 19D illustrates a destination system configuration 1945 (i.e., the modified source operating system 1940 and the similar kernel 1925 ) installed on the destination platform 1930 .
- the adaptation described above is a transformation of a physical article.
- the physical transformation of some embodiments is a transformation of a computer system that does not run the adapted system configuration into a computer system that runs the adapted system configuration.
- a computer readable medium e.g., a storage device, such as a hard drive
- a computer readable medium that does not store (e.g., is not physically encoded with) the adapted system configuration
- Transforming a computer readable medium includes physically altering the computer readable medium (e.g., physically encoding different data onto a platter of a hard drive).
- Some embodiments transform a computer system configuration, which is stored on a computer readable medium, into a different computer system configuration, which is stored on the same computer readable medium.
- Section VII a system configuration of some embodiments is stored on a computer readable medium as a set of instructions that are executable by a processor of a computer system.
- Section VII also provides a non-exhaustive list of tangible articles which are considered as examples of computer readable media.
- FIG. 20 illustrates a process 2000 that the adaptation engine of some embodiments performs in order to port a set of device drivers into a source system configuration in order to make the source system configuration operable on a destination platform.
- the source system configuration includes a set of device drivers that allow the source system configuration to interface with hardware components (either physical or virtual) of the source platform.
- the source system configuration might not include device drivers that allow the source system configuration to interface with hardware components (either physical or virtual) of the destination platform.
- the process 2000 of some embodiments imports a set of device drivers into the source system configuration in order to allow the source system configuration to interface with the hardware components of the destination platform.
- the process 2000 begins by identifying (at 2005 ) a hardware device (either physical or virtual) of the destination platform.
- the adaptation engine of some embodiments has access to a database that stores identifying information regarding the hardware devices of the destination platform. In some embodiments, this identification is received by the adaptation engine from the destination platform (e.g., from the UVM of a destination node).
- the identification indicates the name, type (e.g., a storage (“block”) device driver, a network device driver, a PCI device driver, etc.), manufacturer, and/or any other attribute of the device.
- the process 2000 determines (at 2010 ) whether a device driver that allows the identified device to communicate with the source system configuration is present in a library that stores multiple device drivers (e.g., the driver library 755 of FIG. 7 ). In some embodiments, this determination (at 2010 ) includes determining whether a driver in the library corresponds to (1) the same type of device and (2) an operating system and/or kernel of the source system configuration. In some embodiments, a corresponding device driver is similar, but is not an exact match. For instance, the corresponding device driver may be of the same type of device from a different manufacturer, or may be a generic device driver. In some embodiments, the process 2000 looks for such a similar device driver when an exact match is not found in the driver library.
- the process 2000 examines a database that correlates devices to acceptable “similar” device drivers.
- This database is stored within the driver library in some embodiments. This database may be previously generated based on objective or subjective observations that were made about compatibility between various devices and device drivers (e.g., during testing on the destination platform).
- the process 2000 retrieves (at 2030 ) the corresponding driver from the library.
- the process places (at 2040 ) the retrieved driver into the source system configuration.
- placing the retrieved driver into the source system configuration includes copying a device driver file or set of device driver files of the retrieved driver into a storage (e.g., a folder of a hard drive) that also stores the source system configuration.
- the process 2000 deletes the source driver from the source system configuration, while in other embodiments, the process 2000 does not delete the source device driver from the source system configuration.
- the process 2000 renames the source device driver so that it can be easily located and reinstalled at a later time. The process then ends.
- the process 2000 determines (at 2010 ) whether a corresponding device driver is not located in the driver library.
- the process determines (at 2015 ) whether a development environment for the source operating system and kernel is available in a library that stores development environments (e.g., the development environment library 765 of FIG. 7 ).
- the process 2000 determines (at 2015 ) that a development environment is available in the development environment library
- the process 2000 of some embodiments retrieves the development environment from the library and installs (at 2020 ) the development environment onto the destination platform in order to automatically generate the required device driver. This operation 2020 is further described below with reference to FIG. 21 .
- the process 2000 then receives (at 2025 ) a device driver generated using the development environment.
- the process 2000 supplies (at 2035 ) the generated driver to an adaptive library that stores drivers (e.g., the driver library 755 of FIG. 7 ) in order to allow the generated driver to be retrieved later (e.g., at a later iteration of the process 700 —specifically at determination operation 2010 in some embodiments).
- the adaptive driver library of some embodiments is further discussed below.
- the process 2000 of some other embodiments does not perform this supplying operation to a driver library and instead transitions directly to the next operation 2040 .
- the process 2000 replaces, in the source system configuration, a device driver of the device that was identified (at 2005 ) with the generated driver. In other embodiments, the process 2000 does not replace (at 2040 ) this device driver with the generated driver. Rather, the process 2000 simply inserts the generated driver into the source system configuration while not modifying the source device driver in any way. Alternatively, the process 2000 of some embodiments inserts the generated driver into the source system configuration and alters the name and/or location of the source device driver (e.g., appends characters to the end of the name of the source device driver and/or moves the source device driver to a different directory, etc.). The process 2000 then ends.
- the process 2000 determines (at 2015 ) that a development environment for the source operating system and kernel is not available in the development environment library, then the process 2000 receives (at 2045 ) a driver that is generated through an application programming interface (or “API”) of the kernel.
- API application programming interface
- the generating of this driver is further described below with reference to FIG. 22 .
- the process 2000 of some embodiments transitions to operations 2035 and 2040 , which are described above. Finally, the process 2000 ends.
- FIG. 21 illustrates a process 2100 of some embodiments that automatically generates a driver using a development environment of a source operating system and kernel.
- the process 2100 occurs at operation 2020 of FIG. 20 (i.e., after the process 2000 determines that a required device driver is not in the driver library).
- the process 2100 is performed at a destination platform (e.g., by a UVM of a destination node) in some embodiments, while the process 2100 is performed at an adaptation engine (e.g., the adaptation engine 705 a of FIG. 7 ) in some other embodiments.
- a destination platform e.g., by a UVM of a destination node
- an adaptation engine e.g., the adaptation engine 705 a of FIG. 7
- the process 2100 of FIG. 21 begins by retrieving (at 2110 ) a development environment of a kernel and operating system from a development environment library (e.g., the development environment library 765 of FIG. 7 ).
- a development environment library e.g., the development environment library 765 of FIG. 7
- the development environment includes “clean” versions of the operating system and kernel (e.g., unmodified as compared to the kernel and operating system as they are distributed by developers and/or vendors of the kernel and operating system).
- the process 2100 installs (at 2115 ) the retrieved development environment onto the destination platform.
- the process 2100 installs the development environment onto a platform that is identical to the destination platform.
- the process 2100 installs the development environment onto a platform that includes hardware that is identical to the destination platform.
- the process 2100 installs the development environment onto a platform that includes the same virtual hardware (e.g., the same virtualization engine) as the destination platform.
- this platform onto which the development environment is installed includes different physical hardware than the destination platform.
- the process 2100 builds (at 2120 ) the development environment on the platform on which the development environment is installed. Building (at 2120 ) the development environment may be initiated automatically (e.g., through a script) and causes a set of device drivers to automatically be generated. These device drivers allow the source system configuration to interface with the hardware devices of the destination platform. The process 2100 then identifies (at 2125 ) one or more of these drivers that are automatically generated. In some embodiments, identifying (at 2125 ) a driver includes comparing a device to which the source driver corresponds to a device to which a generated driver corresponds.
- this identified driver may be used in generating a destination system configuration that is an adapted source system configuration.
- FIG. 22 illustrates a process 2200 that generates a driver using an API of a source kernel so that a hardware device of the destination platform can be used with the source kernel.
- this generating of a new driver includes modifying a driver of the source system configuration.
- the process 2200 is performed at operation 2045 of the process 2000 of FIG. 20 .
- the process 2200 of FIG. 22 begins by retrieving (at 2205 ) the API of the source kernel from a library that stores APIs of kernels (e.g., the API library 770 of FIG. 7 ). Next, the process 2200 installs (at 2210 ) the API onto a development platform (e.g., the destination platform, or a computer system that is neither the source platform nor the destination platform, such as the workstation 780 of FIG. 7 ). In some embodiments, the API is already installed on the development platform. In some of these embodiments, the process 2200 does not perform the retrieval (at 2205 ) and installation (at 2210 ) operations. The process 2200 merely performs a check on the development platform to determine that the API is already installed.
- a development platform e.g., the destination platform, or a computer system that is neither the source platform nor the destination platform, such as the workstation 780 of FIG. 7 .
- the API is already installed on the development platform. In some of these embodiments, the process 2200 does not
- the process 2200 receives (at 2215 ) device information at the development platform.
- this device information includes information relevant to developing a device driver that allows the source kernel to interface with the device (e.g., system calls that the device makes and commands to which the device responds).
- the process 2200 also receives (at 2220 ) a source device driver for which a matching driver is to be generated (e.g., a matching device driver was not found in the driver library).
- the process 2200 generates (at 2225 ) a device driver that allows the device to communicate with the kernel by using the device information received at operation 2215 and the API installed at operation 2210 .
- this generating (at 2220 ) includes manipulating computer code of the source device driver at the development platform. The process 2200 then ends once the device driver is generated.
- FIGS. 23A-23D conceptually illustrate hardware and software layers of the source and destination system configurations, and the relationships between these layers during different stages of a driver porting process (e.g., the processes 2000 , 2200 , and/or 2500 , as described above with reference to FIGS. 20-25 ).
- FIGS. 23A-23D illustrate three different types of layers: hardware layers, kernel layers, and operating system layers that are illustrated with conceptual notches and/or pegs in order to indicate interfaces with other layers.
- FIG. 23A illustrates a source system configuration 2305 that operates on a source platform 2320 .
- the source system configuration 2305 includes a source operating system 2310 and a source kernel 2315 .
- the source system configuration 2305 also includes other components and/or layers that are not shown in the figure (e.g., a set of software applications that run on the source operating system 2310 , etc.).
- the source platform 2320 includes a set of hardware devices 2325 b , 2326 b , and 2327 b .
- the hardware devices include a storage (or “block”) device (e.g., one or more hard drives), a network device (e.g., an Ethernet card), a graphics device (e.g., a graphics card), a peripheral component interconnect (“PCI”) device, and/or any other type of device. As mentioned above, these devices can be virtual devices or actual physical devices.
- the source kernel 2315 of some embodiments includes a device driver (e.g., device drivers 2325 a , 2325 b , and 2325 c ) that corresponds to each hardware device of the source platform 2320 .
- FIG. 23A also illustrates a destination platform 2330 .
- the destination platform includes a set of hardware devices 2325 c , 2326 c , and 2327 c .
- the hardware devices 2325 c , 2326 c , and 2327 c of the destination platform 2330 are different from the hardware devices 2325 b , 2326 b , and 2327 b of the source platform 2320 .
- the illustrated hardware devices 2325 c , 2326 c , and 2327 c of the destination platform 2330 may be of the same type as the analogous hardware devices 2325 b , 2326 b , and 2327 b of the source platform 2320 .
- source device 2325 b may be a first block device
- destination device 2325 c is a different second block device.
- FIG. 23B illustrates the source kernel 2315 before and after device drivers for the hardware devices of the destination platform are ported into the source kernel 2315 .
- an adaptation engine 2335 e.g., the adaptation engine 705 a of FIG. 7 receives the source kernel 2315 , which includes the source drivers 2325 a , 2326 a , and 2327 a .
- the adaptation engine 2335 then performs an adaptation process (e.g., the process 2000 described in FIG. 20 ) in order to replace the source drivers with device drivers 2325 d , 2326 d , and 2327 d , which correspond to the hardware devices 2325 c , 2326 c , and 2327 d of the destination platform 2330 .
- the adaptation engine 2335 then outputs the source kernel with these drivers (also referred to as the “destination kernel”).
- FIG. 23C illustrates that the source operating system 2315 and the destination kernel 2340 may now be referred to together as the destination system configuration 2345 . As shown by the figure, the destination system configuration 2345 can now be installed onto the destination platform 2330 .
- FIG. 23D illustrates the destination system configuration 2345 (i.e., the adapted source system configuration 2305 ) installed on the destination platform 2330 .
- the adaptation described above is a transformation of a physical article.
- the physical transformation of some embodiments is a transformation of a computer system that does not run the adapted system configuration into a computer system that runs the adapted system configuration.
- a computer readable medium e.g., a storage device, such as a hard drive
- a computer readable medium that does not store (e.g., is not physically encoded with) the adapted system configuration
- Transforming a computer readable medium includes physically altering the computer readable medium (e.g., physically encoding different data onto a platter of a hard drive).
- Some embodiments transform a computer system configuration, which is stored on a computer readable medium, into a different computer system configuration, which is stored on the same computer readable medium. The different computer system configuration is then executed by a processor of a computer system.
- FIG. 24 illustrates a process 2400 that the adaptation engine of some embodiments (e.g., the adaptation engine 705 a of FIG. 7 ) performs to emulate hardware requested by a source system configuration in order to adapt the source system configuration to be operable on a destination platform.
- this process 2400 is performed in lieu of the processes 1500 of FIG. 15 and/or 2000 of FIG. 20 .
- this process 2400 is performed in conjunction with one or both of the processes 1500 or 2000 .
- the process 2400 may be performed after making a negative determination at one or both of the decision operations 1515 or 1550 .
- the process 2400 begins by receiving (at 2405 ) the source system configuration. This receiving (at 2405 ) may include receiving an operating system, a kernel of the source system configuration, and/or associated attributes of the source system configuration. In some embodiments, the process 2400 receives (at 2405 ) the source system configuration at the adaptation engine as a system configuration package from an extraction engine (e.g., the extraction engine 775 of FIG. 7 ).
- an extraction engine e.g., the extraction engine 775 of FIG. 7 .
- the process 2400 then identifies (at 2410 ) a set of hardware devices that the source system configuration “expects.” Examples of these devices include one or more central processing units (“CPUs”), storage devices (e.g., hard drives), display devices (e.g., graphics cards), networking devices (e.g., Ethernet cards), and/or any other type of hardware device.
- this identifying (at 2410 ) includes identifying hardware devices for which the system configuration includes device drivers. This identifying (at 2410 ) includes examining a set of device drivers of the system configuration in order to identify devices of the system configuration.
- process 2400 receives the operating system and/or the kernel of the source system configuration, some other embodiments of the process 2400 instead receive an identification (e.g., a list of devices or device drivers in a system configuration package received from an extraction engine, such as the extraction engine 775 of FIG. 7 ).
- an identification e.g., a list of devices or device drivers in a system configuration package received from an extraction engine, such as the extraction engine 775 of FIG. 7 ).
- the process 2400 configures (at 2415 ) a virtualization engine (e.g., a hypervisor) of the destination platform to emulate the identified hardware required by the source system configuration.
- a virtualization engine e.g., a hypervisor
- QEMU which is available on the Internet at http://bellard.org/qemu/ under the GNU General Public License.
- this system configuration is performed through an API of the hypervisor by a software programmer who has knowledge of the identified hardware (e.g., specific system calls that the identified hardware makes).
- Other embodiments search a library that stores hypervisor configurations (not shown) in order to determine whether the library already stores the desired hypervisor configuration. When the library does include the desired hypervisor configuration, the process 2400 of these embodiments retrieves the hypervisor configuration.
- configuring (at 2415 ) the hypervisor to emulate the required hardware includes configuring a hypervisor of the destination platform. Once the hypervisor of the destination platform is configured to emulate the required hardware, the original unmodified source system configuration is installed, and subsequently operated, on the destination platform.
- the emulated hardware correlates to hardware (either physical or virtual) of the destination platform.
- the emulated hardware is “dummy” hardware that does not correlate to hardware of the destination platform. In such a case, the hardware is emulated in order to satisfy the source system configuration, but performs no actual function.
- the processes of some embodiments described above make reference to one or more libraries (e.g., core kernel library 750 , driver library 755 , operating system library 760 , development environment library 765 , and API library 770 of FIG. 7 ), from which information can be retrieved.
- This information can be used (e.g., by an adaptation engine 705 a of FIG. 7 ) in the adapting of a source system configuration that is operable on a source platform to be operable on a different destination platform.
- the source platform of some embodiments is a node in a grid of nodes of a server hosting system.
- the destination platform of some embodiments is a node in another grid of nodes in a different server hosting system.
- the two server hosting systems are operated by two different service providers.
- any one or more of these libraries is an adaptive library.
- An adaptive library of some embodiments is a library which grows over time in terms of the information it stores. In other words, an adaptive library “learns” information that is used when adapting a source system configuration to be operable on a destination platform.
- the adaptive library When information is present in the adaptive library from which the information is requested, the adaptive library is able to provide the requested information. However, cases may arise where the requested information is not present in the adaptive library (e.g., when the process 2000 of FIG. 20 determines (at 2010 ) that a requested driver is not in a driver library). As shown in FIG. 20 , other operations may need to be performed in order to generate the requested driver (e.g., installing and building (at 2020 ) a development environment). Performing these operations to generate the requested driver is generally not as efficient as simply retrieving the driver from a driver library.
- the adaptive library of some embodiments stores the new configuration information for later retrieval.
- the adaptive library allows the adaptation of source system configurations to be operable on destination platforms to be more efficient and less time-consuming.
- this adaptive library concept applies not only to aiding in the adapting of system configurations, but also in allowing users to select system configurations that have already been adapted to run on the destination platform.
- the adaptation module supplies adapted system configurations to an image store database (e.g., image store database 460 of FIG. 4 ). These adapted system configurations may then be selected by a user for installation on a destination platform through a user interface (e.g., the user interface described above with reference to FIG. 6 ).
- a system configuration e.g., a kernel, an operating system, and/or a set of application programs
- a system configuration that is operable on a source platform may be adapted to be operable on a different destination platform that bears no relation to the source platform.
- FIG. 25 illustrates that a system configuration that is hosted in a first hosting environment may be adapted to be operable by a second hosting environment in order to allow the system configuration to be hosted in the second hosting environment.
- the first hosting environment includes the source platform and the second hosting environment includes the destination platform.
- the first and second hosting environments are operated by different, unrelated service providers (e.g., competing hosting service providers).
- FIG. 25 illustrates a first hosting system of some embodiments, which is implemented as a grid 2500 of hardware nodes (e.g., hardware nodes shown in exploded view 2535 ), each of which may run one or more system configurations.
- a source system configuration “configuration a”
- configuration b runs on a particular node of the grid 2500 of nodes.
- configuration n runs on a number of other nodes (not shown), run on one or more nodes of the grid 2500 of nodes.
- the source system configuration runs directly on hardware of the source node. In other words, the source system configuration has direct access to hardware of the source node. In other embodiments, the source system configuration runs on a virtualization engine. In some of these embodiments, the virtualization engine is a type 1 hypervisor that directly accesses the physical hardware of the source node and provides a set of virtual hardware to the source system configuration. The virtualization engine of some other embodiments is a type 2 hypervisor that (1) receives access to physical hardware of the source node through an operating system and kernel that have direct access to the physical hardware of the source node and (2) provides a set of virtual hardware to the source system configuration.
- Attributes of the source system configuration are provided to the extraction engine 2515 (either remotely or locally in some embodiments, as described above).
- the extraction engine 2515 provides a system configuration package with extracted attributes of the source system configuration to the adaptation engine 2520 , which uses the system configuration package to adapt the source system configuration to be operable on a destination platform.
- the adaptation engine 2520 performs this adaptation in conjunction with a library 2530 that stores information such as operating systems, kernels, drivers, etc.
- the destination platform is located on a node of a second hosting system that is separate from the first hosting system.
- the second hosting system is a grid 2510 of nodes (e.g., hardware nodes shown in exploded view 2540 ).
- FIG. 26 illustrates that a system configuration that is operable on a single computer system may be adapted to be operable on a node of a hosting system (e.g., a grid of nodes).
- FIG. 27 illustrates that a system configuration that is operable on a single computer system may be adapted to be operable on another single computer system.
- FIGS. 25-27 illustrate only some examples of possible types of hardware on which the source and destination system configurations could run, and that other types of hardware not specifically enumerated could be used as well for the source and/or destination platforms.
- the adapted source system configuration (also referred to as the “destination configuration”) runs directly on hardware of the destination platform.
- the destination system configuration has direct access to hardware of the destination platform.
- the destination system configuration runs on a virtualization engine.
- the virtualization engine is a type 1 hypervisor that directly accesses the physical hardware of the destination platform and provides a set of virtual hardware to the destination system configuration.
- the virtualization engine of yet other embodiments is a type 2 hypervisor that (1) receives access to physical hardware of the destination platform through an operating system and kernel that have direct access to the physical hardware of the destination platform and (2) provides a set of virtual hardware to the destination system configuration.
- the source system configuration runs directly on physical hardware of the source platform and the destination system configuration runs on a virtualization engine (e.g., a type 1 or type 2 hypervisor), while in other embodiments, the source system configuration runs on a virtualization engine and the destination system configuration runs on physical hardware of the destination platform.
- the source system configuration runs on a type 1 hypervisor and the destination system configuration runs on a different type 1 hypervisor, while in other embodiments, the destination system configuration runs on the same type 1 hypervisor as the source system configuration.
- the source system configuration runs on a type 2 hypervisor and the destination system configuration runs on a different type 2 hypervisor, while in other embodiments, the destination system configuration runs on the same type 2 hypervisor as the source system configuration.
- some of the embodiments of the invention allow any system configuration that operates on any type of source platform to be adapted to be operable on any type of destination platform. Because of this capability, a user is able to migrate his or her system configuration from his or her computer system onto a hosting system. Moreover, a user may migrate his or her system configuration from one service provider's hosting system into a competing service provider's hosting system. In some embodiments, this migration occurs automatically, and without any human intervention once the migration is initiated. Thus, the migration can occur within a short amount of time (e.g., within five hours of initiation, or less).
- Some or all of the above-described processes are machine-implemented processes.
- the processes of some embodiments are tied to one or more particular machines.
- a particular machine of some embodiments includes a computer system, as further described below.
- Some embodiments of the above-described processes are implemented as software processes that transform data.
- Some of the transformed data includes representations of real world items (e.g., a computer system configuration that includes photographs of real world objects, recorded video footage, recorded audio sounds, etc.) in some embodiments.
- Computer readable storage medium also referred to as computer readable medium.
- the computer readable storage medium of some embodiments is a tangible, physical article of manufacture.
- the instructions recorded on the computer readable storage medium are executed by one or more computational element(s) (e.g., processors or other computational elements including application-specific integrated circuits (“ASICs”) and/or field programmable gate arrays (“FPGAs”)), the instructions cause the computational element(s) to perform the actions indicated by the instructions.
- ASICs application-specific integrated circuits
- FPGAs field programmable gate arrays
- the term “computer” is meant in its broadest sense, and can include any electronic device with one or more processors. Examples of computer readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc.
- software is also meant in its broadest sense.
- Software can include firmware residing in read-only memory or applications stored in magnetic storage which can be read into memory for processing by a processor.
- multiple software inventions can be implemented as sub-parts of a larger program while remaining distinct software inventions.
- multiple software inventions can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software invention described here is within the scope of the invention.
- FIG. 28 illustrates a particular machine (e.g., a computer system) with which some embodiments of the invention are implemented.
- the particular machine is a computer system that implements one or more specific functions of some embodiments of the above described processes (e.g., extraction, adaptation, etc.).
- Such a computer system includes various types of computer readable media and interfaces for reading various other types of computer readable media.
- Computer system 2800 includes a bus 2805 , a processor 2810 , a system memory 2815 , a read-only memory 2820 , a permanent storage device 2825 , one or more input devices 2830 , and one or more output devices 2835 .
- the bus 2805 collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the computer system 2800 .
- the bus 2805 communicatively connects the processor 2810 with the read-only memory 2820 , the system memory 2815 , and the permanent storage device 2825 . From these various memory units, the processor 2810 retrieves instructions to execute and data to process in order to execute the processes of the invention.
- the read-only-memory (“ROM”) 2820 stores static data and instructions that are needed by the processor 2810 and other modules of the computer system.
- the permanent storage device 2825 of some embodiments, on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the computer system 2800 is off. Some embodiments of the invention use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the permanent storage device 2825 .
- the system memory 2815 is a read-and-write memory device. However, unlike the permanent storage device 2825 , the system memory 2815 of some embodiments is a volatile read-and-write memory, such a random access memory (“RAM”).
- RAM random access memory
- the system memory 2815 stores some of the instructions and data that the processor needs at runtime. In some embodiments, the invention's processes are stored in the system memory 2815 , the permanent storage device 2825 , and/or the read-only memory 2820 .
- the bus 2805 also connects to the input and output devices 2830 and 2835 .
- the input devices 2830 enable the user to communicate information and select commands to the computer system.
- the input devices 2830 include alphanumeric keyboards and/or pointing devices (also called “cursor control devices”).
- the input devices 2830 of some embodiments also include audio input devices (e.g., microphones, MIDI musical instruments, etc.).
- the output devices 2835 display images generated by the computer system. For instance, these output devices 2835 of some embodiments display a GUI.
- the output devices include printers and display devices, such as cathode ray tubes (“CRTs”) or liquid crystal displays (“LCDs”).
- CTRs cathode ray tubes
- LCDs liquid crystal displays
- the bus 2805 of some embodiments also couples computer 2800 to a network (not shown) through a network adapter 2865 .
- the computer can be a part of a network of computers (such as a local area network (“LAN”), a wide area network (“WAN”), an intranet, or a network of networks, such as the Internet.
- the computer 2800 may be coupled to a web server (through the network adapter 2865 ) so that a web browser executing on the computer 2800 can interact with the web server as a user interacts with a GUI that operates in the web browser. Any or all components of the computer system 2800 may be used in conjunction with the invention.
- the computer system 2800 of some embodiments includes one or more of a variety of different computer-readable media.
- Some examples of such computer-readable media include, but are not limited to, tangible media such as RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and/or solid state hard drives, ZIP® disks, read-only and recordable Blu-ray® discs, floppy disks, and any other optical or magnetic media.
- tangible media such as RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/481,762 US8533305B1 (en) | 2008-09-23 | 2012-05-25 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
Applications Claiming Priority (10)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US9925408P | 2008-09-23 | 2008-09-23 | |
US14083808P | 2008-12-24 | 2008-12-24 | |
US14083508P | 2008-12-24 | 2008-12-24 | |
US14596509P | 2009-01-20 | 2009-01-20 | |
US14596209P | 2009-01-20 | 2009-01-20 | |
US15943709P | 2009-03-11 | 2009-03-11 | |
US15943809P | 2009-03-11 | 2009-03-11 | |
US16590009P | 2009-04-01 | 2009-04-01 | |
US12/421,611 US8219653B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
US13/481,762 US8533305B1 (en) | 2008-09-23 | 2012-05-25 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/421,611 Continuation US8219653B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
Publications (1)
Publication Number | Publication Date |
---|---|
US8533305B1 true US8533305B1 (en) | 2013-09-10 |
Family
ID=46396020
Family Applications (15)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/421,599 Active 2032-03-02 US8458717B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated criteria based deployment of virtual machines across a grid of hosting resources |
US12/421,602 Active 2030-09-24 US8352608B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated configuration of hosting resources |
US12/421,597 Active 2029-10-29 US8656018B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated allocation of hosting resources controlled by different hypervisors |
US12/421,613 Expired - Fee Related US8453144B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration using an adaptive library |
US12/421,605 Active 2032-01-30 US8468535B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method to provision and allocate hosting resources |
US12/421,598 Expired - Fee Related US8364802B1 (en) | 2008-09-23 | 2009-04-09 | System and method for monitoring a grid of hosting resources in order to facilitate management of the hosting resources |
US12/421,610 Expired - Fee Related US8418176B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting virtual machine configurations for hosting across different hosting systems |
US12/421,612 Active 2030-12-21 US9798560B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method for extracting and adapting system configurations |
US12/421,604 Active 2030-04-16 US10365935B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method to customize and install virtual machine configurations for hosting in a hosting environment |
US12/421,611 Active 2029-09-24 US8219653B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
US13/481,762 Active US8533305B1 (en) | 2008-09-23 | 2012-05-25 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
US15/791,274 Active US10289436B1 (en) | 2008-09-23 | 2017-10-23 | Automated system and method for extracting and adapting system configurations |
US16/412,359 Active US10684874B1 (en) | 2008-09-23 | 2019-05-14 | Automated system and method for extracting and adapting system configurations |
US16/903,281 Active 2029-12-26 US11442759B1 (en) | 2008-09-23 | 2020-06-16 | Automated system and method for extracting and adapting system configurations |
US17/870,387 Pending US20220357967A1 (en) | 2008-09-23 | 2022-07-21 | Automated System And Method For Extracting And Adapting System Configurationss |
Family Applications Before (10)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/421,599 Active 2032-03-02 US8458717B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated criteria based deployment of virtual machines across a grid of hosting resources |
US12/421,602 Active 2030-09-24 US8352608B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated configuration of hosting resources |
US12/421,597 Active 2029-10-29 US8656018B1 (en) | 2008-09-23 | 2009-04-09 | System and method for automated allocation of hosting resources controlled by different hypervisors |
US12/421,613 Expired - Fee Related US8453144B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration using an adaptive library |
US12/421,605 Active 2032-01-30 US8468535B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method to provision and allocate hosting resources |
US12/421,598 Expired - Fee Related US8364802B1 (en) | 2008-09-23 | 2009-04-09 | System and method for monitoring a grid of hosting resources in order to facilitate management of the hosting resources |
US12/421,610 Expired - Fee Related US8418176B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting virtual machine configurations for hosting across different hosting systems |
US12/421,612 Active 2030-12-21 US9798560B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method for extracting and adapting system configurations |
US12/421,604 Active 2030-04-16 US10365935B1 (en) | 2008-09-23 | 2009-04-09 | Automated system and method to customize and install virtual machine configurations for hosting in a hosting environment |
US12/421,611 Active 2029-09-24 US8219653B1 (en) | 2008-09-23 | 2009-04-09 | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
Family Applications After (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/791,274 Active US10289436B1 (en) | 2008-09-23 | 2017-10-23 | Automated system and method for extracting and adapting system configurations |
US16/412,359 Active US10684874B1 (en) | 2008-09-23 | 2019-05-14 | Automated system and method for extracting and adapting system configurations |
US16/903,281 Active 2029-12-26 US11442759B1 (en) | 2008-09-23 | 2020-06-16 | Automated system and method for extracting and adapting system configurations |
US17/870,387 Pending US20220357967A1 (en) | 2008-09-23 | 2022-07-21 | Automated System And Method For Extracting And Adapting System Configurationss |
Country Status (1)
Country | Link |
---|---|
US (15) | US8458717B1 (en) |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130173540A1 (en) * | 2011-08-03 | 2013-07-04 | Amazon Technologies, Inc. | Gathering transaction data associated with locally stored data files |
US20140020105A1 (en) * | 2012-07-10 | 2014-01-16 | William Nix | Distributing Software Images with Mixed Licensing |
US20140047442A1 (en) * | 2010-06-30 | 2014-02-13 | International Business Machines Corporation | Hypervisor selection for hosting a virtual machine image |
US9288117B1 (en) | 2011-02-08 | 2016-03-15 | Gogrid, LLC | System and method for managing virtual and dedicated servers |
US9647854B1 (en) | 2011-06-28 | 2017-05-09 | Gogrid, LLC | System and method for configuring and managing virtual grids |
US9798560B1 (en) | 2008-09-23 | 2017-10-24 | Gogrid, LLC | Automated system and method for extracting and adapting system configurations |
US9851995B2 (en) | 2015-02-26 | 2017-12-26 | Red Hat Israel, Ltd. | Hypervisor adjustment for host transfer between clusters |
US9870271B1 (en) | 2010-05-20 | 2018-01-16 | Gogrid, LLC | System and method for deploying virtual servers in a hosting system |
US10432650B2 (en) | 2016-03-31 | 2019-10-01 | Stuart Staniford | System and method to protect a webserver against application exploits and attacks |
TWI706365B (en) * | 2019-01-14 | 2020-10-01 | 和碩聯合科技股份有限公司 | Simulation management system and calculation method thereof |
US11055115B1 (en) * | 2018-08-09 | 2021-07-06 | Parallels International Gmbh | Virtual machine conversion in distributed system of remote desktops |
US11095735B2 (en) | 2019-08-06 | 2021-08-17 | Tealium Inc. | Configuration of event data communication in computer networks |
US11146656B2 (en) | 2019-12-20 | 2021-10-12 | Tealium Inc. | Feature activation control and data prefetching with network-connected mobile devices |
US11340940B2 (en) | 2020-07-02 | 2022-05-24 | Bank Of America Corporation | Workload assessment and configuration simulator |
US11409619B2 (en) | 2020-04-29 | 2022-08-09 | The Research Foundation For The State University Of New York | Recovering a virtual machine after failure of post-copy live migration |
US11983079B2 (en) | 2022-08-08 | 2024-05-14 | The Research Foundation For The State University Of New York | Recovering a virtual machine after failure of post-copy live migration |
Families Citing this family (483)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8171238B1 (en) | 2007-07-05 | 2012-05-01 | Silver Peak Systems, Inc. | Identification of data stored in memory |
US8095774B1 (en) | 2007-07-05 | 2012-01-10 | Silver Peak Systems, Inc. | Pre-fetching data into a memory |
US8392684B2 (en) | 2005-08-12 | 2013-03-05 | Silver Peak Systems, Inc. | Data encryption in a network memory architecture for providing data based on local accessibility |
US8811431B2 (en) | 2008-11-20 | 2014-08-19 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data |
US8929402B1 (en) | 2005-09-29 | 2015-01-06 | Silver Peak Systems, Inc. | Systems and methods for compressing packet data by predicting subsequent data |
US8489562B1 (en) * | 2007-11-30 | 2013-07-16 | Silver Peak Systems, Inc. | Deferred data storage |
US8892706B1 (en) | 2010-06-21 | 2014-11-18 | Vmware, Inc. | Private ethernet overlay networks over a shared ethernet in a virtual environment |
US8924524B2 (en) | 2009-07-27 | 2014-12-30 | Vmware, Inc. | Automated network configuration of virtual machines in a virtual lab data environment |
US8755381B2 (en) | 2006-08-02 | 2014-06-17 | Silver Peak Systems, Inc. | Data matching using flow based packet data storage |
US8885632B2 (en) | 2006-08-02 | 2014-11-11 | Silver Peak Systems, Inc. | Communications scheduler |
CN103123702B (en) * | 2007-08-28 | 2017-11-28 | Commvault系统公司 | Such as the managing power consumption of the data processing resources of the adaptive managing power consumption of data storage operations |
US8307115B1 (en) | 2007-11-30 | 2012-11-06 | Silver Peak Systems, Inc. | Network memory mirroring |
US20090319740A1 (en) * | 2008-06-18 | 2009-12-24 | Fujitsu Limited | Virtual computer system, information processing device providing virtual computer system, and program thereof |
US10805840B2 (en) | 2008-07-03 | 2020-10-13 | Silver Peak Systems, Inc. | Data transmission via a virtual wide area network overlay |
US9717021B2 (en) | 2008-07-03 | 2017-07-25 | Silver Peak Systems, Inc. | Virtual network overlay |
US10164861B2 (en) | 2015-12-28 | 2018-12-25 | Silver Peak Systems, Inc. | Dynamic monitoring and visualization for network health characteristics |
US8743683B1 (en) | 2008-07-03 | 2014-06-03 | Silver Peak Systems, Inc. | Quality of service using multiple flows |
US8307177B2 (en) | 2008-09-05 | 2012-11-06 | Commvault Systems, Inc. | Systems and methods for management of virtualization data |
US8977750B2 (en) * | 2009-02-24 | 2015-03-10 | Red Hat, Inc. | Extending security platforms to cloud-based networks |
US9207984B2 (en) | 2009-03-31 | 2015-12-08 | Amazon Technologies, Inc. | Monitoring and automatic scaling of data volumes |
US8713060B2 (en) | 2009-03-31 | 2014-04-29 | Amazon Technologies, Inc. | Control service for relational data management |
US8332365B2 (en) | 2009-03-31 | 2012-12-11 | Amazon Technologies, Inc. | Cloning and recovery of data volumes |
US9705888B2 (en) * | 2009-03-31 | 2017-07-11 | Amazon Technologies, Inc. | Managing security groups for data instances |
US9600332B2 (en) * | 2009-04-28 | 2017-03-21 | Cisco Technology, Inc. | Server load balancing based on virtual utilization, physical utilization, and feedback |
US9501329B2 (en) * | 2009-05-08 | 2016-11-22 | Rackspace Us, Inc. | Methods and systems for cloud computing management |
US9003411B2 (en) * | 2009-05-13 | 2015-04-07 | Verizon Patent And Licensing Inc. | Automated provisioning and configuration of virtual and physical servers |
WO2010133507A1 (en) * | 2009-05-22 | 2010-11-25 | International Business Machines Corporation | Apparatus and method for monitoring a computer system |
US9450783B2 (en) * | 2009-05-28 | 2016-09-20 | Red Hat, Inc. | Abstracting cloud management |
US8856294B2 (en) * | 2009-06-01 | 2014-10-07 | Oracle International Corporation | System and method for converting a Java application into a virtual server image for cloud deployment |
US8639787B2 (en) * | 2009-06-01 | 2014-01-28 | Oracle International Corporation | System and method for creating or reconfiguring a virtual server image for cloud deployment |
US8776053B2 (en) * | 2009-09-25 | 2014-07-08 | Oracle International Corporation | System and method to reconfigure a virtual machine image suitable for cloud deployment |
US9852011B1 (en) * | 2009-06-26 | 2017-12-26 | Turbonomic, Inc. | Managing resources in virtualization systems |
US20100332401A1 (en) | 2009-06-30 | 2010-12-30 | Anand Prahlad | Performing data storage operations with a cloud storage environment, including automatically selecting among multiple cloud storage sites |
US8943203B1 (en) * | 2009-07-10 | 2015-01-27 | Netapp, Inc. | System and method for storage and deployment of virtual machines in a virtual server environment |
US8873375B2 (en) | 2009-07-22 | 2014-10-28 | Broadcom Corporation | Method and system for fault tolerance and resilience for virtualized machines in a network |
US8566822B2 (en) * | 2009-07-22 | 2013-10-22 | Broadcom Corporation | Method and system for distributing hypervisor functionality over multiple physical devices in a network and configuring sub-hypervisor to control the virtual machines |
US9959131B2 (en) * | 2009-08-03 | 2018-05-01 | Quantum Corporation | Systems and methods for providing a file system viewing of a storeage environment |
US20110041126A1 (en) * | 2009-08-13 | 2011-02-17 | Levy Roger P | Managing workloads in a virtual computing environment |
US8473531B2 (en) | 2009-09-03 | 2013-06-25 | Quantum Corporation | Presenting a file system for a file containing items |
US8619779B2 (en) * | 2009-09-30 | 2013-12-31 | Alcatel Lucent | Scalable architecture for enterprise extension in a cloud topology |
US8532108B2 (en) * | 2009-09-30 | 2013-09-10 | Alcatel Lucent | Layer 2 seamless site extension of enterprises in cloud computing |
US9135283B2 (en) | 2009-10-07 | 2015-09-15 | Amazon Technologies, Inc. | Self-service configuration for data environment |
US20120198063A1 (en) * | 2009-10-09 | 2012-08-02 | Nec Corporation | Virtual server system, autonomous control server thereof, and data processing method and computer program thereof |
KR20110040604A (en) * | 2009-10-14 | 2011-04-20 | 삼성전자주식회사 | Cloud server, client terminal, device, method for operating cloud server and method for operating client terminal |
US9158567B2 (en) * | 2009-10-20 | 2015-10-13 | Dell Products, Lp | System and method for reconfigurable network services using modified network configuration with modified bandwith capacity in dynamic virtualization environments |
US8074107B2 (en) | 2009-10-26 | 2011-12-06 | Amazon Technologies, Inc. | Failover and recovery for replicated data instances |
US8335765B2 (en) | 2009-10-26 | 2012-12-18 | Amazon Technologies, Inc. | Provisioning and managing replicated data instances |
US8676753B2 (en) | 2009-10-26 | 2014-03-18 | Amazon Technologies, Inc. | Monitoring of replicated data instances |
US20110119454A1 (en) * | 2009-11-17 | 2011-05-19 | Hsiang-Tsung Kung | Display system for simultaneous displaying of windows generated by multiple window systems belonging to the same computer platform |
US8627413B2 (en) * | 2009-11-23 | 2014-01-07 | Symantec Corporation | System and method for authorization and management of connections and attachment of resources |
US8832683B2 (en) * | 2009-11-30 | 2014-09-09 | Red Hat Israel, Ltd. | Using memory-related metrics of host machine for triggering load balancing that migrate virtual machine |
WO2011075484A2 (en) * | 2009-12-14 | 2011-06-23 | Citrix Systems, Inc. | A secure virtualization environment bootable from an external media device |
EP3002703B1 (en) | 2009-12-14 | 2017-08-30 | Citrix Systems Inc. | Methods and systems for communicating between trusted and non-trusted virtual machines |
US9098456B2 (en) * | 2010-01-13 | 2015-08-04 | International Business Machines Corporation | System and method for reducing latency time with cloud services |
JP5533005B2 (en) * | 2010-02-17 | 2014-06-25 | 富士通株式会社 | Information processing apparatus, computer system, and program |
US8831993B2 (en) | 2010-03-19 | 2014-09-09 | Novell, Inc. | Techniques for sharing virtual machine (VM) resources |
US8413142B2 (en) | 2010-03-30 | 2013-04-02 | Citrix Systems, Inc. | Storage optimization selection within a virtualization environment |
US8505003B2 (en) * | 2010-04-28 | 2013-08-06 | Novell, Inc. | System and method for upgrading kernels in cloud computing environments |
FR2960668A1 (en) * | 2010-05-27 | 2011-12-02 | Airbus Operations Sas | METHOD AND DEVICE FOR INCREMENTAL CONFIGURATION OF IMA TYPE MODULES |
US11449394B2 (en) | 2010-06-04 | 2022-09-20 | Commvault Systems, Inc. | Failover systems and methods for performing backup operations, including heterogeneous indexing and load balancing of backup and indexing resources |
US8352415B2 (en) * | 2010-06-15 | 2013-01-08 | International Business Machines Corporation | Converting images in virtual environments |
US8631406B2 (en) * | 2010-06-30 | 2014-01-14 | Sap Ag | Distributed cloud computing architecture |
EP4006728A1 (en) * | 2010-07-09 | 2022-06-01 | State Street Corporation | Systems and methods for private cloud computing |
US10671628B2 (en) * | 2010-07-09 | 2020-06-02 | State Street Bank And Trust Company | Systems and methods for data warehousing |
US10235439B2 (en) | 2010-07-09 | 2019-03-19 | State Street Corporation | Systems and methods for data warehousing in private cloud environment |
US8918499B2 (en) * | 2010-08-09 | 2014-12-23 | International Business Machines Corporation | Method and system for end-to-end quality of service in virtualized desktop systems |
US8677004B2 (en) * | 2010-09-10 | 2014-03-18 | International Business Machines Corporation | Migration of logical partitions between two devices |
US11106479B2 (en) * | 2010-09-30 | 2021-08-31 | Amazon Technologies, Inc. | Virtual provisioning with implementation resource boundary awareness |
US9483313B2 (en) * | 2010-10-19 | 2016-11-01 | Microsoft Technology Licensing, Llc | Availability management for reference data services |
KR101430729B1 (en) * | 2010-10-27 | 2014-08-14 | 한국전자통신연구원 | Server and method for supporting software |
US9032053B2 (en) * | 2010-10-29 | 2015-05-12 | Nokia Corporation | Method and apparatus for upgrading components of a cluster |
US8775575B2 (en) * | 2010-11-03 | 2014-07-08 | International Business Machines Corporation | Differentiating image files in a networked computing environment |
US9208029B2 (en) * | 2010-11-12 | 2015-12-08 | Hitachi, Ltd. | Computer system to switch logical group of virtual computers |
KR20120052769A (en) * | 2010-11-16 | 2012-05-24 | 한국전자통신연구원 | Apparatus and method for synchronizing virtual machine |
US9606831B2 (en) * | 2010-11-30 | 2017-03-28 | Red Hat, Inc. | Migrating virtual machine operations |
US8490003B2 (en) * | 2010-12-03 | 2013-07-16 | International Business Machines Corporation | Dynamic proximity based text exchange within a group session |
US9329886B2 (en) | 2010-12-10 | 2016-05-03 | Amazon Technologies, Inc. | Virtual machine morphing for heterogeneous migration environments |
US8954978B1 (en) | 2010-12-29 | 2015-02-10 | Amazon Technologies, Inc. | Reputation-based mediation of virtual control planes |
US8667399B1 (en) | 2010-12-29 | 2014-03-04 | Amazon Technologies, Inc. | Cost tracking for virtual control planes |
US8667495B1 (en) | 2010-12-29 | 2014-03-04 | Amazon Technologies, Inc. | Virtual resource provider with virtual control planes |
US20120174096A1 (en) * | 2010-12-30 | 2012-07-05 | Matthew Conover | Systems and methods to load applications and application data into a virtual machine using hypervisor-attached volumes |
US8572623B2 (en) | 2011-01-11 | 2013-10-29 | International Business Machines Corporation | Determining an optimal computing environment for running an image based on performance of similar images |
US8874888B1 (en) * | 2011-01-13 | 2014-10-28 | Google Inc. | Managed boot in a cloud system |
US8514417B2 (en) * | 2011-01-26 | 2013-08-20 | Ricoh Company, Ltd. | Accessing functions of a multi-function device |
US9542215B2 (en) * | 2011-09-30 | 2017-01-10 | V3 Systems, Inc. | Migrating virtual machines from a source physical support environment to a target physical support environment using master image and user delta collections |
JP2012181580A (en) * | 2011-02-28 | 2012-09-20 | Fujitsu Ltd | Resource control device, resource control method, and resource control program |
US9841985B2 (en) * | 2011-04-12 | 2017-12-12 | Red Hat Israel, Ltd. | Storage block deallocation in virtual environments |
KR101812145B1 (en) * | 2011-04-14 | 2018-01-26 | 삼성전자주식회사 | Apparatus and method for controlling virtual machine that connects the device |
US9612803B2 (en) | 2011-04-15 | 2017-04-04 | Oracle International Corporation | System and method for use of a virtual assembly builder |
US9047313B2 (en) * | 2011-04-21 | 2015-06-02 | Red Hat Israel, Ltd. | Storing virtual machines on a file system in a distributed environment |
US9237127B2 (en) * | 2011-05-12 | 2016-01-12 | Airmagnet, Inc. | Method and apparatus for dynamic host operating system firewall configuration |
US9176744B2 (en) * | 2011-05-20 | 2015-11-03 | Citrix Systems, Inc. | Quickly provisioning a virtual machine by identifying a path to a differential file during pre-boot |
US9251481B2 (en) * | 2011-06-13 | 2016-02-02 | Accenture Global Services Limited | Distributed metering and monitoring system |
US8832690B1 (en) * | 2011-06-21 | 2014-09-09 | Google Inc. | Multi-threaded virtual machine processing on a web page |
US10592262B1 (en) * | 2011-06-27 | 2020-03-17 | Amazon Technologies, Inc. | Managing shared computing environments |
US10108517B1 (en) * | 2011-06-27 | 2018-10-23 | EMC IP Holding Company LLC | Techniques for data storage systems using virtualized environments |
US8949929B2 (en) * | 2011-08-10 | 2015-02-03 | Qualcomm Incorporated | Method and apparatus for providing a secure virtual environment on a mobile device |
US9075979B1 (en) | 2011-08-11 | 2015-07-07 | Google Inc. | Authentication based on proximity to mobile device |
US9032413B2 (en) | 2011-09-01 | 2015-05-12 | Microsoft Technology Licensing, Llc | Decoupling background work and foreground work |
US8966198B1 (en) | 2011-09-01 | 2015-02-24 | Google Inc. | Providing snapshots of virtual storage devices |
US20130061293A1 (en) * | 2011-09-02 | 2013-03-07 | Wenbo Mao | Method and apparatus for securing the full lifecycle of a virtual machine |
CN103034453B (en) * | 2011-09-30 | 2015-11-25 | 国际商业机器公司 | The method and apparatus of the persistant data of pre-installation application in managing virtual machines example |
US9461881B2 (en) * | 2011-09-30 | 2016-10-04 | Commvault Systems, Inc. | Migration of existing computing systems to cloud computing sites or virtual machines |
US9459898B2 (en) * | 2011-10-06 | 2016-10-04 | Hitachi, Ltd. | Virtual server processing control method, system, and virtual server processing control management server |
DE102012217202B4 (en) | 2011-10-12 | 2020-06-18 | International Business Machines Corporation | Method and system for optimizing the placement of virtual machines in cloud computing environments |
US9921934B1 (en) * | 2011-10-14 | 2018-03-20 | Amazon Techologies, Inc. | Storage process metrics |
US9130991B2 (en) | 2011-10-14 | 2015-09-08 | Silver Peak Systems, Inc. | Processing data packets in performance enhancing proxy (PEP) environment |
US9626224B2 (en) | 2011-11-03 | 2017-04-18 | Silver Peak Systems, Inc. | Optimizing available computing resources within a virtual environment |
TWI533146B (en) * | 2011-11-10 | 2016-05-11 | 財團法人資訊工業策進會 | Virtual resource adjusting method, device and computer readable storage medium for storing thereof |
US8756453B2 (en) | 2011-11-15 | 2014-06-17 | International Business Machines Corporation | Communication system with diagnostic capabilities |
US8874974B2 (en) | 2011-11-15 | 2014-10-28 | International Business Machines Corporation | Synchronizing a distributed communication system using diagnostic heartbeating |
US8769089B2 (en) * | 2011-11-15 | 2014-07-01 | International Business Machines Corporation | Distributed application using diagnostic heartbeating |
US8620820B2 (en) * | 2011-11-15 | 2013-12-31 | International Business Machines Corporation | Management of dynamic assembly and licensing of appliances |
US9244796B2 (en) | 2011-11-15 | 2016-01-26 | International Business Machines Corporation | Diagnostic heartbeat throttling |
US8903893B2 (en) * | 2011-11-15 | 2014-12-02 | International Business Machines Corporation | Diagnostic heartbeating in a distributed data processing environment |
US8958293B1 (en) | 2011-12-06 | 2015-02-17 | Google Inc. | Transparent load-balancing for cloud computing services |
US8800009B1 (en) | 2011-12-30 | 2014-08-05 | Google Inc. | Virtual machine service access |
CN103197952B (en) * | 2012-01-09 | 2017-08-25 | 华为技术有限公司 | The management system and method disposed for application system maintenance based on cloud infrastructure |
US9164803B2 (en) * | 2012-01-20 | 2015-10-20 | Microsoft Technology Licensing, Llc | Background task resource control |
US9465632B2 (en) * | 2012-02-04 | 2016-10-11 | Global Supercomputing Corporation | Parallel hardware hypervisor for virtualizing application-specific supercomputers |
US20130212237A1 (en) * | 2012-02-10 | 2013-08-15 | Suhas SHIVANNA | Proxy infrastructure to access firmware-based features |
US8930955B2 (en) * | 2012-02-10 | 2015-01-06 | International Business Machines Corporation | Controlling growth in virtual disks via utilization of previously used and free disk block space |
US9052940B2 (en) * | 2012-03-01 | 2015-06-09 | International Business Machines Corporation | System for customized virtual machine for a target hypervisor by copying image file from a library, and increase file and partition size prior to booting |
US20130232254A1 (en) * | 2012-03-02 | 2013-09-05 | Computenext Inc. | Cloud resource utilization management |
US20130238785A1 (en) * | 2012-03-06 | 2013-09-12 | Rackspace Us, Inc. | System and Method for Metadata Discovery and Metadata-Aware Scheduling |
US20130238773A1 (en) * | 2012-03-08 | 2013-09-12 | Raghu Kondapalli | Synchronized and time aware l2 and l3 address learning |
TW201337766A (en) * | 2012-03-15 | 2013-09-16 | Hon Hai Prec Ind Co Ltd | System and method for integrating resources of virtual machines |
US8656345B2 (en) * | 2012-03-19 | 2014-02-18 | National Instruments Corporation | Managing hardware implementation and deployment of a graphical program |
US8539440B1 (en) * | 2012-03-19 | 2013-09-17 | National Instruments Corporation | Interactively designing a hardware implementation of a graphical program |
US8950009B2 (en) | 2012-03-30 | 2015-02-03 | Commvault Systems, Inc. | Information management of data associated with multiple cloud services |
US9262496B2 (en) | 2012-03-30 | 2016-02-16 | Commvault Systems, Inc. | Unified access to personal data |
US9641431B1 (en) * | 2012-04-18 | 2017-05-02 | Google Inc. | System and methods for utilization-based balancing of traffic to an information retrieval system |
US20130304768A1 (en) * | 2012-05-09 | 2013-11-14 | Michael Basnight | Advancements in Systems and Methods for Quickly and Transparently Provisioning, Horizontal Sealing, and Managing of Databases in a Cloud Environment |
US9027024B2 (en) | 2012-05-09 | 2015-05-05 | Rackspace Us, Inc. | Market-based virtual machine allocation |
US9152640B2 (en) * | 2012-05-10 | 2015-10-06 | Hewlett-Packard Development Company, L.P. | Determining file allocation based on file operations |
US8776048B2 (en) * | 2012-05-22 | 2014-07-08 | International Business Machines Corporation | Early configuration in deploying an enterprise application |
US9077665B1 (en) * | 2012-05-24 | 2015-07-07 | Scale Computing, Inc. | Transferring virtual machines and resource localization in a distributed fault-tolerant system |
TWI610166B (en) | 2012-06-04 | 2018-01-01 | 飛康國際網路科技股份有限公司 | Automated disaster recovery and data migration system and method |
US9197653B2 (en) * | 2012-06-05 | 2015-11-24 | Empire Technology Development Llc | Cross-user correlation for detecting server-side multi-target intrusion |
US9146840B2 (en) | 2012-06-15 | 2015-09-29 | Cycle Computing, Llc | Method and system for automatically detecting and resolving infrastructure faults in cloud infrastructure |
US9438466B1 (en) * | 2012-06-15 | 2016-09-06 | Juniper Networks, Inc. | Migrating virtual machines between oversubscribed and undersubscribed compute devices |
US9251181B2 (en) * | 2012-06-18 | 2016-02-02 | International Business Machines Corporation | Dynamic map template discovery and map creation |
US8805921B2 (en) * | 2012-08-20 | 2014-08-12 | International Business Machines Corporation | System and method supporting application solution composition on cloud |
US10430216B1 (en) * | 2012-08-23 | 2019-10-01 | Scale Computing Inc | Virtual machine automated selection |
US11055124B1 (en) * | 2012-09-30 | 2021-07-06 | EMC IP Holding Company LLC | Centralized storage provisioning and management across multiple service providers |
US9311070B2 (en) | 2012-10-05 | 2016-04-12 | International Business Machines Corporation | Dynamically recommending configuration changes to an operating system image |
US9208041B2 (en) * | 2012-10-05 | 2015-12-08 | International Business Machines Corporation | Dynamic protection of a master operating system image |
US9286051B2 (en) | 2012-10-05 | 2016-03-15 | International Business Machines Corporation | Dynamic protection of one or more deployed copies of a master operating system image |
US8990772B2 (en) | 2012-10-16 | 2015-03-24 | International Business Machines Corporation | Dynamically recommending changes to an association between an operating system image and an update group |
US9239727B1 (en) * | 2012-10-17 | 2016-01-19 | Amazon Technologies, Inc. | Configurable virtual machines |
US9104463B2 (en) * | 2012-11-07 | 2015-08-11 | International Business Machines Corporation | Automated and optimal deactivation of service to enable effective resource reusability |
US9747296B2 (en) * | 2012-11-12 | 2017-08-29 | Samsung Electronics Co., Ltd. | Method and apparatus for managing storage space on storage device in an electronic apparatus by using context data and user profile data |
US9015714B2 (en) | 2012-11-27 | 2015-04-21 | Citrix Systems, Inc. | Diagnostic virtual machine created to monitor cluster of hypervisors based on user requesting assistance from cluster administrator |
US9052932B2 (en) * | 2012-12-17 | 2015-06-09 | International Business Machines Corporation | Hybrid virtual machine configuration management |
US9740702B2 (en) | 2012-12-21 | 2017-08-22 | Commvault Systems, Inc. | Systems and methods to identify unprotected virtual machines |
US9223597B2 (en) | 2012-12-21 | 2015-12-29 | Commvault Systems, Inc. | Archiving virtual machines in a data storage system |
US9378035B2 (en) | 2012-12-28 | 2016-06-28 | Commvault Systems, Inc. | Systems and methods for repurposing virtual machines |
US10346259B2 (en) | 2012-12-28 | 2019-07-09 | Commvault Systems, Inc. | Data recovery using a cloud-based remote data recovery center |
US20140196039A1 (en) | 2013-01-08 | 2014-07-10 | Commvault Systems, Inc. | Virtual machine categorization system and method |
US9639502B1 (en) * | 2013-01-16 | 2017-05-02 | Veritas Technologies Llc | Techniques for managing computing resources |
US9608933B2 (en) * | 2013-01-24 | 2017-03-28 | Hitachi, Ltd. | Method and system for managing cloud computing environment |
US20140223108A1 (en) * | 2013-02-07 | 2014-08-07 | International Business Machines Corporation | Hardware prefetch management for partitioned environments |
US9465630B1 (en) * | 2013-02-20 | 2016-10-11 | Ca, Inc. | Assigning dynamic weighted variables to cluster resources for virtual machine provisioning |
US9813423B2 (en) | 2013-02-26 | 2017-11-07 | International Business Machines Corporation | Trust-based computing resource authorization in a networked computing environment |
US20140244813A1 (en) * | 2013-02-28 | 2014-08-28 | Joseph McDonald | Server cluster initiation |
US9251115B2 (en) | 2013-03-07 | 2016-02-02 | Citrix Systems, Inc. | Dynamic configuration in cloud computing environments |
US9152450B2 (en) * | 2013-03-12 | 2015-10-06 | International Business Machines Corporation | Offloading service requests to a second guest hypervisor in a logical partition shared by a plurality of guest hypervisors |
US9582219B2 (en) | 2013-03-12 | 2017-02-28 | Netapp, Inc. | Technique for rapidly converting between storage representations in a virtualized computing environment |
US9628399B2 (en) * | 2013-03-14 | 2017-04-18 | International Business Machines Corporation | Software product instance placement |
US9459807B2 (en) * | 2013-03-14 | 2016-10-04 | Qualcomm Incorporated | Methods and systems for providing resources for cloud storage |
US10073690B2 (en) | 2014-09-26 | 2018-09-11 | Oracle International Corporation | Populating content for a base version of an image |
US9665366B2 (en) * | 2014-09-26 | 2017-05-30 | Oracle International Corporation | Creation of a software configuration signature for software |
US9477500B2 (en) | 2013-03-15 | 2016-10-25 | Avi Networks | Managing and controlling a distributed network service platform |
US20150234671A1 (en) * | 2013-03-27 | 2015-08-20 | Hitachi, Ltd. | Management system and management program |
US9720852B2 (en) | 2013-03-29 | 2017-08-01 | International Business Machines Corporation | Universal serial bus (USB) key functioning as multiple USB keys so as to efficiently configure different types of hardware |
US9245130B2 (en) | 2013-03-29 | 2016-01-26 | International Business Machines Corporation | Multi-user universal serial bus (USB) key with customizable file sharing permissions |
US9009359B2 (en) * | 2013-03-29 | 2015-04-14 | International Business Machines Corporation | Emulating multiple universal serial bus (USB) keys so as to efficiently configure different types of hardware |
US9692706B2 (en) | 2013-04-15 | 2017-06-27 | International Business Machines Corporation | Virtual enhanced transmission selection (VETS) for lossless ethernet |
US9973375B2 (en) * | 2013-04-22 | 2018-05-15 | Cisco Technology, Inc. | App store portal providing point-and-click deployment of third-party virtualized network functions |
US9350681B1 (en) * | 2013-05-31 | 2016-05-24 | Gogrid, LLC | System and method for distributed management of cloud resources in a hosting environment |
US9183097B2 (en) * | 2013-06-05 | 2015-11-10 | Sungard Availability Services, Lp | Virtual infrastructure recovery configurator |
WO2014204801A1 (en) * | 2013-06-21 | 2014-12-24 | President And Fellows Of Harvard College | Systems and methods for quantifiable signaling in multi-user environments |
US9218207B1 (en) * | 2013-07-09 | 2015-12-22 | Ca, Inc. | Configuring virtualization environments |
US9686171B1 (en) * | 2013-07-22 | 2017-06-20 | Veritas Technologies | Systems and methods for attributing input/output statistics networks to region-mapped entities |
CN103399783A (en) * | 2013-08-07 | 2013-11-20 | 曙光信息产业(北京)有限公司 | Storage method and device of mirror image documents of virtual machines |
US20150074536A1 (en) | 2013-09-12 | 2015-03-12 | Commvault Systems, Inc. | File manager integration with virtualization in an information management system, including user control and storage management of virtual machines |
US9110699B2 (en) * | 2013-09-19 | 2015-08-18 | International Business Machines Corporation | Determining optimal methods for creating virtual machines |
US20150100826A1 (en) * | 2013-10-03 | 2015-04-09 | Microsoft Corporation | Fault domains on modern hardware |
US10193963B2 (en) * | 2013-10-24 | 2019-01-29 | Vmware, Inc. | Container virtual machines for hadoop |
US9628335B2 (en) * | 2013-11-01 | 2017-04-18 | Sap Se | Building and transporting centrally modified software systems |
US9405645B2 (en) | 2013-11-14 | 2016-08-02 | Microsoft Technology Licensing, Llc | User support experience with automatically generated virtual environment |
US9262220B2 (en) | 2013-11-15 | 2016-02-16 | International Business Machines Corporation | Scheduling workloads and making provision decisions of computer resources in a computing environment |
US9641385B1 (en) * | 2013-12-16 | 2017-05-02 | Amazon Technologies, Inc. | Dynamic system configuration in a virtual environment |
US9565072B2 (en) | 2013-12-19 | 2017-02-07 | Sap Se | Moving median usage frequency based maintenance of server instances |
WO2015112614A1 (en) | 2014-01-21 | 2015-07-30 | Oracle International Corporation | System and method for supporting multi-tenancy in an application server, cloud, or other environment |
US9396009B2 (en) | 2014-01-30 | 2016-07-19 | International Business Machines Corporation | Optimized global capacity management in a virtualized computing environment |
US9413682B2 (en) | 2014-02-07 | 2016-08-09 | International Business Machines Corporation | Provisioning legacy systems network architecture resource communications through a group of servers in a data center |
US10462210B2 (en) | 2014-02-13 | 2019-10-29 | Oracle International Corporation | Techniques for automated installation, packing, and configuration of cloud storage services |
US9800650B2 (en) * | 2014-03-10 | 2017-10-24 | Vmware, Inc. | Resource management for multiple desktop configurations for supporting virtual desktops of different user classes |
US9348526B2 (en) * | 2014-03-28 | 2016-05-24 | Scale Computing, Inc. | Placement engine for a block device |
US10146634B1 (en) * | 2014-03-31 | 2018-12-04 | EMC IP Holding Company LLC | Image restore from incremental backup |
US9563518B2 (en) | 2014-04-02 | 2017-02-07 | Commvault Systems, Inc. | Information management by a media agent in the absence of communications with a storage manager |
US9766943B2 (en) * | 2014-04-15 | 2017-09-19 | Nicira, Inc. | Method and system for managing interconnection of virtual network functions |
AU2015247375B2 (en) * | 2014-04-17 | 2020-03-26 | Ab Initio Technology Llc | Integrated monitoring and control of processing environment |
JP5945637B2 (en) * | 2014-04-22 | 2016-07-05 | オリンパス株式会社 | Data processing system and data processing method |
US9639742B2 (en) | 2014-04-28 | 2017-05-02 | Microsoft Technology Licensing, Llc | Creation of representative content based on facial analysis |
US9773156B2 (en) | 2014-04-29 | 2017-09-26 | Microsoft Technology Licensing, Llc | Grouping and ranking images based on facial recognition data |
EP3137989A4 (en) * | 2014-04-30 | 2018-01-03 | Pivotal Software, Inc. | Fast deployment across cloud platforms |
EP3140734B1 (en) | 2014-05-09 | 2020-04-08 | Nutanix, Inc. | Mechanism for providing external access to a secured networked virtualization environment |
US10216531B2 (en) * | 2014-05-12 | 2019-02-26 | Netapp, Inc. | Techniques for virtual machine shifting |
US9841991B2 (en) * | 2014-05-12 | 2017-12-12 | Netapp, Inc. | Techniques for virtual machine migration |
US20150324216A1 (en) * | 2014-05-12 | 2015-11-12 | Netapp, Inc. | Self-repairing configuration service for virtual machine migration |
US9417896B2 (en) | 2014-05-19 | 2016-08-16 | International Business Machines Corporation | Allocating hypervisor resources |
US10084652B2 (en) * | 2014-05-22 | 2018-09-25 | Vmware, Inc. | Customizing network configuration of virtual machines using subnet mapping rules |
US10037202B2 (en) * | 2014-06-03 | 2018-07-31 | Microsoft Technology Licensing, Llc | Techniques to isolating a portion of an online computing service |
US11093279B2 (en) | 2014-06-09 | 2021-08-17 | International Business Machines Corporation | Resources provisioning based on a set of discrete configurations |
US9928111B2 (en) | 2014-06-23 | 2018-03-27 | Oracle International Corporation | System and method for configuration tagging in a multitenant application server environment |
US9262200B2 (en) * | 2014-06-25 | 2016-02-16 | Independenceit, Inc. | Methods and systems for provisioning a virtual resource in a mixed-use server |
US9778952B1 (en) * | 2014-06-27 | 2017-10-03 | Amazon Technologies, Inc. | Migration of computer system images through a customer interface |
US11210120B2 (en) * | 2014-06-30 | 2021-12-28 | Vmware, Inc. | Location management in a volume action service |
JP2016018298A (en) * | 2014-07-07 | 2016-02-01 | 富士通株式会社 | Notification conversion program and notification conversion method |
US9405578B2 (en) | 2014-07-11 | 2016-08-02 | Accenture Global Services Limited | Intelligent application back stack management |
US20160019317A1 (en) | 2014-07-16 | 2016-01-21 | Commvault Systems, Inc. | Volume or virtual machine level backup and generating placeholders for virtual machine files |
US9948496B1 (en) | 2014-07-30 | 2018-04-17 | Silver Peak Systems, Inc. | Determining a transit appliance for data traffic to a software service |
US9092376B1 (en) | 2014-08-29 | 2015-07-28 | Nimble Storage, Inc. | Methods and systems for ordering virtual machine snapshots |
US9875344B1 (en) | 2014-09-05 | 2018-01-23 | Silver Peak Systems, Inc. | Dynamic monitoring and authorization of an optimization device |
US9405581B2 (en) | 2014-09-08 | 2016-08-02 | International Business Machines Corporation | Resource allocation/de-allocation and activation/deactivation |
US9680920B2 (en) | 2014-09-08 | 2017-06-13 | International Business Machines Corporation | Anticipatory resource allocation/activation and lazy de-allocation/deactivation |
US9721117B2 (en) | 2014-09-19 | 2017-08-01 | Oracle International Corporation | Shared identity management (IDM) integration in a multi-tenant computing environment |
US9471362B2 (en) * | 2014-09-23 | 2016-10-18 | Splunk Inc. | Correlating hypervisor data for a virtual machine with associated operating system data |
US10318280B2 (en) | 2014-09-24 | 2019-06-11 | Oracle International Corporation | System and method for supporting patching in a multitenant application server environment |
CN106716360B (en) | 2014-09-24 | 2020-03-03 | 甲骨文国际公司 | System and method for supporting patch patching in a multi-tenant application server environment |
US10523709B2 (en) | 2014-09-26 | 2019-12-31 | Oracle International Corporation | System and method for dynamic security configuration in a multitenant application server environment |
US9715402B2 (en) | 2014-09-30 | 2017-07-25 | Amazon Technologies, Inc. | Dynamic code deployment and versioning |
US10048974B1 (en) | 2014-09-30 | 2018-08-14 | Amazon Technologies, Inc. | Message-based computation request scheduling |
US9323556B2 (en) | 2014-09-30 | 2016-04-26 | Amazon Technologies, Inc. | Programmatic event detection and message generation for requests to execute program code |
US9563475B2 (en) * | 2014-09-30 | 2017-02-07 | International Business Machines Corporation | Merging connection pools to form a logical pool of connections during a preset period of time thereby more efficiently utilizing connections in connection pools |
US9146764B1 (en) | 2014-09-30 | 2015-09-29 | Amazon Technologies, Inc. | Processing event messages for user requests to execute program code |
US9830193B1 (en) | 2014-09-30 | 2017-11-28 | Amazon Technologies, Inc. | Automatic management of low latency computational capacity |
US9678773B1 (en) | 2014-09-30 | 2017-06-13 | Amazon Technologies, Inc. | Low latency computational capacity provisioning |
US9600312B2 (en) | 2014-09-30 | 2017-03-21 | Amazon Technologies, Inc. | Threading as a service |
US9280392B1 (en) | 2014-10-02 | 2016-03-08 | International Business Machines Corporation | Resource substitution and reallocation in a virtual computing environment |
US9778990B2 (en) * | 2014-10-08 | 2017-10-03 | Hewlett Packard Enterprise Development Lp | Methods and systems for concurrently taking snapshots of a plurality of virtual machines |
US9513935B2 (en) * | 2014-10-28 | 2016-12-06 | International Business Machines Corporation | Auto-scaling thresholds in elastic computing environments |
US10776209B2 (en) | 2014-11-10 | 2020-09-15 | Commvault Systems, Inc. | Cross-platform virtual machine backup and replication |
US9727252B2 (en) | 2014-11-13 | 2017-08-08 | Hewlett Packard Enterprise Development Lp | Methods and systems for optimal snapshot distribution within a protection schedule |
CN104391735B (en) * | 2014-11-14 | 2018-11-06 | 深信服网络科技（深圳）有限公司 | Virtualize dispatching method of virtual machine and system in all-in-one machine cluster |
US9983936B2 (en) | 2014-11-20 | 2018-05-29 | Commvault Systems, Inc. | Virtual machine change block tracking |
US10146567B2 (en) | 2014-11-20 | 2018-12-04 | Red Hat Israel, Ltd. | Optimizing virtual machine allocation to cluster hosts |
FR3029311B1 (en) * | 2014-11-27 | 2017-01-06 | Thales Sa | METHOD FOR MANAGING AN ARCHITECTURE AND ASSOCIATED ARCHITECTURE |
US9959157B1 (en) * | 2014-12-02 | 2018-05-01 | Amazon Technologies, Inc. | Computing instance migration |
US20160162209A1 (en) * | 2014-12-05 | 2016-06-09 | Hybrid Logic Ltd | Data storage controller |
US9537788B2 (en) | 2014-12-05 | 2017-01-03 | Amazon Technologies, Inc. | Automatic determination of resource sizing |
US9495193B2 (en) * | 2014-12-05 | 2016-11-15 | International Business Machines Corporation | Monitoring hypervisor and provisioned instances of hosted virtual machines using monitoring templates |
US10387179B1 (en) * | 2014-12-16 | 2019-08-20 | Amazon Technologies, Inc. | Environment aware scheduling |
US9594592B2 (en) * | 2015-01-12 | 2017-03-14 | International Business Machines Corporation | Dynamic sharing of unused bandwidth capacity of virtualized input/output adapters |
US10250512B2 (en) | 2015-01-21 | 2019-04-02 | Oracle International Corporation | System and method for traffic director support in a multitenant application server environment |
US9588790B1 (en) | 2015-02-04 | 2017-03-07 | Amazon Technologies, Inc. | Stateful virtual compute system |
US9733967B2 (en) | 2015-02-04 | 2017-08-15 | Amazon Technologies, Inc. | Security protocols for low latency execution of program code |
US10678558B2 (en) * | 2015-02-17 | 2020-06-09 | Red Hat Israel, Ltd. | Initializing a bare-metal host to an operational hypervisor |
US9710304B2 (en) | 2015-03-05 | 2017-07-18 | Vmware, Inc. | Methods and apparatus to select virtualization environments for migration |
US9766919B2 (en) | 2015-03-05 | 2017-09-19 | Vmware, Inc. | Methods and apparatus to select virtualization environments during deployment |
WO2016141309A1 (en) * | 2015-03-05 | 2016-09-09 | Vmware, Inc. | Methods and apparatus to select virtualization environments during deployment |
US9740510B2 (en) * | 2015-03-31 | 2017-08-22 | Alcatel Lucent | Minimizing overhead over-provisioning costs in machine configurations |
US9930103B2 (en) | 2015-04-08 | 2018-03-27 | Amazon Technologies, Inc. | Endpoint management system providing an application programming interface proxy service |
US9785476B2 (en) | 2015-04-08 | 2017-10-10 | Amazon Technologies, Inc. | Endpoint management system and virtual compute system |
US9853981B2 (en) | 2015-04-11 | 2017-12-26 | International Business Machines Corporation | Handling potential service load interruptions by presenting action items for service requester to complete to increase time to address potential service load interruption |
US10169061B2 (en) * | 2015-05-06 | 2019-01-01 | Ford Global Technologies, Llc | Scalable and flexible operating system platform |
US9946573B2 (en) * | 2015-05-20 | 2018-04-17 | Oracle International Corporation | Optimizing virtual machine memory sizing for cloud-scale application deployments |
US9645847B1 (en) * | 2015-06-08 | 2017-05-09 | Amazon Technologies, Inc. | Efficient suspend and resume of instances |
US9524389B1 (en) | 2015-06-08 | 2016-12-20 | Amazon Technologies, Inc. | Forensic instance snapshotting |
US9678681B2 (en) | 2015-06-17 | 2017-06-13 | International Business Machines Corporation | Secured multi-tenancy data in cloud-based storage environments |
US10613886B2 (en) * | 2015-06-30 | 2020-04-07 | Vmware, Inc. | Protecting virtual computing instances |
US9866521B2 (en) | 2015-07-30 | 2018-01-09 | At&T Intellectual Property L.L.P. | Methods, systems, and computer readable storage devices for determining whether to forward requests from a physical telephone number mapping service server to a virtual telephone number mapping service server |
US9851999B2 (en) | 2015-07-30 | 2017-12-26 | At&T Intellectual Property I, L.P. | Methods, systems, and computer readable storage devices for handling virtualization of a physical telephone number mapping service |
US10277736B2 (en) | 2015-07-30 | 2019-04-30 | At&T Intellectual Property I, L.P. | Methods, systems, and computer readable storage devices for determining whether to handle a request for communication services by a physical telephone number mapping service or a virtual telephone number mapping service |
US9888127B2 (en) | 2015-07-30 | 2018-02-06 | At&T Intellectual Property I, L.P. | Methods, systems, and computer readable storage devices for adjusting the use of virtual resources providing communication services based on load |
US20170041386A1 (en) * | 2015-08-05 | 2017-02-09 | International Business Machines Corporation | Provisioning a target hosting environment |
US11381566B2 (en) * | 2015-08-12 | 2022-07-05 | Red Hat, Inc. | Isolating network resources in a virtualized environment |
US20170063723A1 (en) * | 2015-08-26 | 2017-03-02 | International Business Machines Corporation | Asset arrangement management for a shared pool of configurable computing resources associated with a streaming application |
US10061611B2 (en) | 2015-08-28 | 2018-08-28 | Vmware, Inc. | Virtual machine migration within a hybrid cloud system |
US10210027B1 (en) | 2015-09-17 | 2019-02-19 | EMC IP Holding Company LLC | Cluster management |
US9860311B1 (en) * | 2015-09-17 | 2018-01-02 | EMC IP Holding Company LLC | Cluster management of distributed applications |
US10389746B2 (en) | 2015-09-28 | 2019-08-20 | Microsoft Technology Licensing, Llc | Multi-tenant environment using pre-readied trust boundary components |
US9928112B2 (en) | 2015-11-24 | 2018-03-27 | International Business Machines Corporation | Configuration of floating node boundaries |
US9894051B2 (en) * | 2015-12-14 | 2018-02-13 | International Business Machines Corporation | Extending shrouding capability of hosting system |
US9910713B2 (en) | 2015-12-21 | 2018-03-06 | Amazon Technologies, Inc. | Code execution request routing |
US10067801B1 (en) | 2015-12-21 | 2018-09-04 | Amazon Technologies, Inc. | Acquisition and maintenance of compute capacity |
US10324771B1 (en) * | 2015-12-21 | 2019-06-18 | EMC IP Holding Company LLC | Methods and apparatus for a storage system having storage automation with integrated drivers |
US10142208B1 (en) * | 2015-12-23 | 2018-11-27 | EMC IP Holding Company LLC | Auto selection of applications based on resource capacity |
US10896440B2 (en) | 2015-12-23 | 2021-01-19 | EMC IP Holding Company LLC | Offsite data analysis for appliances |
US11265362B1 (en) * | 2015-12-28 | 2022-03-01 | Ted Tabacco | Mobile application streaming platform |
US10210010B1 (en) | 2015-12-30 | 2019-02-19 | Nutanix, Inc. | Network reconfiguration in hypervisor-agnostic disaster recovery scenarios |
US10540165B2 (en) | 2016-02-12 | 2020-01-21 | Nutanix, Inc. | Virtualized file server rolling upgrade |
JP6661409B2 (en) * | 2016-03-01 | 2020-03-11 | キヤノン株式会社 | Automatic installation system, information processing apparatus, information processing apparatus control method, and program |
US10013451B2 (en) | 2016-03-16 | 2018-07-03 | International Business Machines Corporation | Optimizing standby database memory for post failover operation |
US10891145B2 (en) | 2016-03-30 | 2021-01-12 | Amazon Technologies, Inc. | Processing pre-existing data sets at an on demand code execution environment |
US11132213B1 (en) | 2016-03-30 | 2021-09-28 | Amazon Technologies, Inc. | Dependency-based process of pre-existing data sets at an on demand code execution environment |
US9817592B1 (en) | 2016-04-27 | 2017-11-14 | Netapp, Inc. | Using an intermediate virtual disk format for virtual disk conversion |
JP6788178B2 (en) * | 2016-05-06 | 2020-11-25 | 富士通株式会社 | Setting support program, setting support method and setting support device |
US10353590B2 (en) | 2016-05-19 | 2019-07-16 | Hewlett Packard Enterprise Development Lp | Methods and systems for pre-processing sensor measurements |
US10176008B2 (en) * | 2016-05-19 | 2019-01-08 | Airwatch, Llc | Loading and running virtual working environments in a mobile device management system |
US11218418B2 (en) | 2016-05-20 | 2022-01-04 | Nutanix, Inc. | Scalable leadership election in a multi-processing computing environment |
US9947069B2 (en) | 2016-06-10 | 2018-04-17 | Apple Inc. | Providing variants of digital assets based on device-specific capabilities |
US10432484B2 (en) | 2016-06-13 | 2019-10-01 | Silver Peak Systems, Inc. | Aggregating select network traffic statistics |
US10102040B2 (en) | 2016-06-29 | 2018-10-16 | Amazon Technologies, Inc | Adjusting variable limit on concurrent code executions |
US10152386B1 (en) | 2016-07-29 | 2018-12-11 | Nutanix, Inc. | Efficient disaster rollback across heterogeneous storage systems |
US9967056B1 (en) | 2016-08-19 | 2018-05-08 | Silver Peak Systems, Inc. | Forward packet recovery with constrained overhead |
US11435998B2 (en) * | 2016-08-28 | 2022-09-06 | Todd Sampson | Management system and methodology for disturbance monitoring equipment known as USI m9kadmin |
US10884787B1 (en) | 2016-09-23 | 2021-01-05 | Amazon Technologies, Inc. | Execution guarantees in an on-demand network code execution system |
US11119813B1 (en) | 2016-09-30 | 2021-09-14 | Amazon Technologies, Inc. | Mapreduce implementation using an on-demand network code execution system |
US10417102B2 (en) | 2016-09-30 | 2019-09-17 | Commvault Systems, Inc. | Heartbeat monitoring of virtual machines for initiating failover operations in a data storage management system, including virtual machine distribution logic |
JP6957855B2 (en) * | 2016-10-06 | 2021-11-02 | 富士フイルムビジネスイノベーション株式会社 | Information processing equipment, information processing systems and programs |
US10326834B2 (en) | 2016-10-17 | 2019-06-18 | At&T Intellectual Property I, L.P. | Efficient un-allocation of cloud resources |
US10162528B2 (en) | 2016-10-25 | 2018-12-25 | Commvault Systems, Inc. | Targeted snapshot based on virtual machine location |
US11403086B2 (en) * | 2016-10-28 | 2022-08-02 | Virtuozzo International Gmbh | System and method for upgrading operating system of a container using an auxiliary host |
US10782992B2 (en) * | 2016-11-01 | 2020-09-22 | Nutanix, Inc. | Hypervisor conversion |
US20180131633A1 (en) * | 2016-11-08 | 2018-05-10 | Alibaba Group Holding Limited | Capacity management of cabinet-scale resource pools |
US10574559B2 (en) | 2016-11-10 | 2020-02-25 | Bank Of America Corporation | System for defining and implementing performance monitoring requirements for applications and hosted computing environment infrastructure |
US10678758B2 (en) | 2016-11-21 | 2020-06-09 | Commvault Systems, Inc. | Cross-platform virtual machine data and memory backup and replication |
US10783046B2 (en) | 2016-11-22 | 2020-09-22 | Nutanix, Inc. | Executing resource management operations in distributed computing systems |
US11562034B2 (en) | 2016-12-02 | 2023-01-24 | Nutanix, Inc. | Transparent referrals for distributed file servers |
US10824455B2 (en) | 2016-12-02 | 2020-11-03 | Nutanix, Inc. | Virtualized server systems and methods including load balancing for virtualized file servers |
US10346191B2 (en) * | 2016-12-02 | 2019-07-09 | Wmware, Inc. | System and method for managing size of clusters in a computing environment |
US11568073B2 (en) | 2016-12-02 | 2023-01-31 | Nutanix, Inc. | Handling permissions for virtualized file servers |
US10728090B2 (en) | 2016-12-02 | 2020-07-28 | Nutanix, Inc. | Configuring network segmentation for a virtualization environment |
US11294777B2 (en) | 2016-12-05 | 2022-04-05 | Nutanix, Inc. | Disaster recovery for distributed file servers, including metadata fixers |
US11288239B2 (en) | 2016-12-06 | 2022-03-29 | Nutanix, Inc. | Cloning virtualized file servers |
US11281484B2 (en) | 2016-12-06 | 2022-03-22 | Nutanix, Inc. | Virtualized server systems and methods including scaling of file system virtual machines |
US10873501B2 (en) * | 2016-12-09 | 2020-12-22 | Vmware, Inc. | Methods, systems and apparatus to propagate node configuration changes to services in a distributed environment |
CN106789587B (en) * | 2016-12-28 | 2021-05-18 | 国家计算机网络与信息安全管理中心 | Communication device and method for reliable message in cloud computing environment |
US9990228B1 (en) * | 2017-01-25 | 2018-06-05 | Hewlett Packard Enterprise Development Lp | Validating network parameters of a containerized application |
US10892978B2 (en) | 2017-02-06 | 2021-01-12 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows from first packet data |
US10257082B2 (en) | 2017-02-06 | 2019-04-09 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows |
US10771394B2 (en) | 2017-02-06 | 2020-09-08 | Silver Peak Systems, Inc. | Multi-level learning for classifying traffic flows on a first packet from DNS data |
US11044202B2 (en) | 2017-02-06 | 2021-06-22 | Silver Peak Systems, Inc. | Multi-level learning for predicting and classifying traffic flows from first packet data |
US20180227201A1 (en) * | 2017-02-08 | 2018-08-09 | International Business Machines Corporation | System, method and computer program product for test-driven node selection for a distributed system |
US10747581B2 (en) | 2017-02-15 | 2020-08-18 | International Business Machines Corporation | Virtual machine migration between software defined storage systems |
US20180239628A1 (en) * | 2017-02-22 | 2018-08-23 | Nutanix, Inc. | Hypervisor agnostic customization of virtual machines |
US10949308B2 (en) | 2017-03-15 | 2021-03-16 | Commvault Systems, Inc. | Application aware backup of virtual machines |
US20180276022A1 (en) | 2017-03-24 | 2018-09-27 | Commvault Systems, Inc. | Consistent virtual machine replication |
US11108858B2 (en) | 2017-03-28 | 2021-08-31 | Commvault Systems, Inc. | Archiving mail servers via a simple mail transfer protocol (SMTP) server |
US11074138B2 (en) | 2017-03-29 | 2021-07-27 | Commvault Systems, Inc. | Multi-streaming backup operations for mailboxes |
US10387073B2 (en) | 2017-03-29 | 2019-08-20 | Commvault Systems, Inc. | External dynamic virtual machine synchronization |
US10853195B2 (en) | 2017-03-31 | 2020-12-01 | Commvault Systems, Inc. | Granular restoration of virtual machine application data |
US10552294B2 (en) | 2017-03-31 | 2020-02-04 | Commvault Systems, Inc. | Management of internet of things devices |
US11294786B2 (en) | 2017-03-31 | 2022-04-05 | Commvault Systems, Inc. | Management of internet of things devices |
US11221939B2 (en) | 2017-03-31 | 2022-01-11 | Commvault Systems, Inc. | Managing data from internet of things devices in a vehicle |
US10671417B2 (en) * | 2017-04-26 | 2020-06-02 | International Business Machines Corporation | Server optimization control |
US10474501B2 (en) * | 2017-04-28 | 2019-11-12 | Databricks Inc. | Serverless execution of code using cluster resources |
US10382262B1 (en) | 2017-05-10 | 2019-08-13 | Appian Corporation | Dynamic application configuration techniques |
US10747568B2 (en) | 2017-05-30 | 2020-08-18 | Magalix Corporation | Systems and methods for managing a cloud computing environment |
US11188390B2 (en) * | 2017-06-05 | 2021-11-30 | Umajin Inc. | Method for configuring a server kit by a server management system |
US11726822B2 (en) | 2017-06-05 | 2023-08-15 | Umajin Inc. | Systems and methods for providing digital twin-enabled applications |
US11922564B2 (en) | 2017-06-05 | 2024-03-05 | Umajin Inc. | Generative content system that supports location-based services and methods therefor |
US11954486B2 (en) | 2017-06-05 | 2024-04-09 | Umajin Inc. | Location tracking system and methods |
US11068824B1 (en) * | 2017-06-09 | 2021-07-20 | Accenture Global Solutions Limited | Automatic analysis of process and/or operations data for channel optimization |
US10681000B2 (en) | 2017-06-30 | 2020-06-09 | Nicira, Inc. | Assignment of unique physical network addresses for logical network addresses |
US10637800B2 (en) | 2017-06-30 | 2020-04-28 | Nicira, Inc | Replacement of logical network addresses with physical network addresses |
US10873512B2 (en) * | 2017-07-07 | 2020-12-22 | Vmware, Inc. | Methods for managing self-healing cloud infrastructure and applications |
US10394603B2 (en) * | 2017-07-28 | 2019-08-27 | Genband Us Llc | Virtual container processing on high performance computing processors |
CN107643939A (en) * | 2017-09-14 | 2018-01-30 | 郑州云海信息技术有限公司 | A kind of method and system for distributing virtual machine |
US10628199B2 (en) * | 2017-09-20 | 2020-04-21 | Rackware, Inc | Restoring and powering-off workloads during workflow execution based on policy triggers |
US11212210B2 (en) | 2017-09-21 | 2021-12-28 | Silver Peak Systems, Inc. | Selective route exporting using source type |
US20190095218A1 (en) * | 2017-09-26 | 2019-03-28 | Hewlett Packard Enterprise Develepment Lp | Creating or modifying artifacts on mounted operating system volumes |
US10437647B2 (en) * | 2017-09-26 | 2019-10-08 | Verizon Patent And Licensing Inc. | Cluster configuration with zero touch provisioning |
US10542072B1 (en) * | 2017-10-04 | 2020-01-21 | Parallels International Gmbh | Utilities toolbox for remote session and client architecture |
US10827025B2 (en) * | 2017-10-18 | 2020-11-03 | Hewlett Packard Enterprise Development Lp | Allocations of arbitrary workloads among hyperconverged nodes |
US10684894B2 (en) * | 2017-11-10 | 2020-06-16 | Amazon Technologies, Inc. | Capacity management in provider networks using dynamic host device instance model reconfigurations |
JP2019101553A (en) * | 2017-11-29 | 2019-06-24 | 株式会社Ｐｒｅｆｅｒｒｅｄ Ｎｅｔｗｏｒｋｓ | Information processing system, server device, information processing method and program |
US10564946B1 (en) | 2017-12-13 | 2020-02-18 | Amazon Technologies, Inc. | Dependency handling in an on-demand network code execution system |
WO2019135773A1 (en) * | 2018-01-08 | 2019-07-11 | Hewlett-Packard Development Company, L.P. | Brokering servers based on remote access performance |
US10430227B2 (en) * | 2018-01-09 | 2019-10-01 | Microsoft Technology Licensing, Llc | Fast instantiation of virtual machines in distributed computing systems |
US10613893B2 (en) | 2018-02-02 | 2020-04-07 | Nutanix, Inc. | System and method for reducing downtime during hypervisor conversion |
US10606630B2 (en) | 2018-02-02 | 2020-03-31 | Nutanix, Inc. | System and method for preserving entity identifiers |
US10733085B1 (en) | 2018-02-05 | 2020-08-04 | Amazon Technologies, Inc. | Detecting impedance mismatches due to cross-service calls |
US10831898B1 (en) | 2018-02-05 | 2020-11-10 | Amazon Technologies, Inc. | Detecting privilege escalations in code including cross-service calls |
US20190243674A1 (en) * | 2018-02-08 | 2019-08-08 | Nutanix, Inc. | System and method for entity management |
US10725752B1 (en) | 2018-02-13 | 2020-07-28 | Amazon Technologies, Inc. | Dependency handling in an on-demand network code execution system |
US10776091B1 (en) | 2018-02-26 | 2020-09-15 | Amazon Technologies, Inc. | Logging endpoint in an on-demand code execution system |
US10664323B2 (en) | 2018-03-07 | 2020-05-26 | Microsoft Technology Licensing, Llc | Live migration of virtual machines in distributed computing systems |
US10877928B2 (en) | 2018-03-07 | 2020-12-29 | Commvault Systems, Inc. | Using utilities injected into cloud-based virtual machines for speeding up virtual machine backup operations |
US10637721B2 (en) | 2018-03-12 | 2020-04-28 | Silver Peak Systems, Inc. | Detecting path break conditions while minimizing network overhead |
CN110351156B (en) * | 2018-04-03 | 2021-10-01 | 大唐移动通信设备有限公司 | Test method and device |
US10846184B2 (en) | 2018-04-23 | 2020-11-24 | Dell Products, L.P. | System and method to predict and prevent power supply failures based on data center environmental behavior |
US10877539B2 (en) | 2018-04-23 | 2020-12-29 | Dell Products, L.P. | System and method to prevent power supply failures based on data center environmental behavior |
US10778518B2 (en) | 2018-04-24 | 2020-09-15 | Dell Products, L.P. | System and method to manage a server configuration profile based upon applications running on an information handling system |
US10761858B2 (en) | 2018-04-24 | 2020-09-01 | Dell Products, L.P. | System and method to manage a server configuration profile of an information handling system in a data center |
US10764133B2 (en) | 2018-04-24 | 2020-09-01 | Dell Products, L.P. | System and method to manage server configuration profiles in a data center |
US11086826B2 (en) | 2018-04-30 | 2021-08-10 | Nutanix, Inc. | Virtualized server systems and methods including domain joining techniques |
US11159367B2 (en) | 2018-05-15 | 2021-10-26 | Nutanix, Inc. | Apparatuses and methods for zero touch computing node initialization |
US11258760B1 (en) | 2018-06-22 | 2022-02-22 | Vmware, Inc. | Stateful distributed web application firewall |
US10853115B2 (en) | 2018-06-25 | 2020-12-01 | Amazon Technologies, Inc. | Execution of auxiliary functions in an on-demand network code execution system |
US10649749B1 (en) | 2018-06-26 | 2020-05-12 | Amazon Technologies, Inc. | Cross-environment application of tracing information for improved code execution |
US11146569B1 (en) | 2018-06-28 | 2021-10-12 | Amazon Technologies, Inc. | Escalation-resistant secure network services using request-scoped authentication information |
US10949237B2 (en) | 2018-06-29 | 2021-03-16 | Amazon Technologies, Inc. | Operating system customization in an on-demand network code execution system |
US11194680B2 (en) | 2018-07-20 | 2021-12-07 | Nutanix, Inc. | Two node clusters recovery on a failure |
US11099870B1 (en) | 2018-07-25 | 2021-08-24 | Amazon Technologies, Inc. | Reducing execution times in an on-demand network code execution system using saved machine states |
US10891198B2 (en) | 2018-07-30 | 2021-01-12 | Commvault Systems, Inc. | Storing data to cloud libraries in cloud native formats |
JP7113698B2 (en) * | 2018-08-10 | 2022-08-05 | 株式会社日立製作所 | Information system |
US11755419B2 (en) * | 2018-09-06 | 2023-09-12 | International Business Machines Corporation | Utilizing spare network nodes for deduplication fingerprints database |
US10868709B2 (en) | 2018-09-10 | 2020-12-15 | Oracle International Corporation | Determining the health of other nodes in a same cluster based on physical link information |
US11099917B2 (en) | 2018-09-27 | 2021-08-24 | Amazon Technologies, Inc. | Efficient state maintenance for execution environments in an on-demand code execution system |
US11243953B2 (en) | 2018-09-27 | 2022-02-08 | Amazon Technologies, Inc. | Mapreduce implementation in an on-demand network code execution system and stream data processing system |
US10901893B2 (en) * | 2018-09-28 | 2021-01-26 | International Business Machines Corporation | Memory bandwidth management for performance-sensitive IaaS |
US10771318B1 (en) | 2018-10-24 | 2020-09-08 | Vmware, Inc | High availability on a distributed networking platform |
US11675611B2 (en) | 2018-10-29 | 2023-06-13 | Nutanix, Inc. | Software service intervention in a computing system |
US11770447B2 (en) | 2018-10-31 | 2023-09-26 | Nutanix, Inc. | Managing high-availability file servers |
US10944581B2 (en) * | 2018-11-08 | 2021-03-09 | International Business Machines Corporation | Increasing processing capacity of processor cores during initial program load processing |
US10884818B2 (en) | 2018-11-08 | 2021-01-05 | International Business Machines Corporation | Increasing processing capacity of virtual machines |
US10884845B2 (en) | 2018-11-08 | 2021-01-05 | International Business Machines Corporation | Increasing processing capacity of processor cores during initial program load processing |
US11379254B1 (en) * | 2018-11-18 | 2022-07-05 | Pure Storage, Inc. | Dynamic configuration of a cloud-based storage system |
US11943093B1 (en) | 2018-11-20 | 2024-03-26 | Amazon Technologies, Inc. | Network connection recovery after virtual machine transition in an on-demand network code execution system |
US10877771B2 (en) | 2018-11-26 | 2020-12-29 | Red Hat, Inc. | Virtual machine booting using disk metadata |
US11169885B2 (en) * | 2018-11-30 | 2021-11-09 | Nutanix, Inc. | System and method for reconfiguring configuration parameters of virtual objects during recovery |
US11200124B2 (en) | 2018-12-06 | 2021-12-14 | Commvault Systems, Inc. | Assigning backup resources based on failover of partnered data storage servers in a data storage management system |
US10884812B2 (en) | 2018-12-13 | 2021-01-05 | Amazon Technologies, Inc. | Performance-based hardware emulation in an on-demand network code execution system |
US10826789B2 (en) * | 2018-12-27 | 2020-11-03 | At&T Intellectual Property I, L.P. | Adjusting triggers for automatic scaling of virtual network functions |
US10768971B2 (en) | 2019-01-30 | 2020-09-08 | Commvault Systems, Inc. | Cross-hypervisor live mount of backed up virtual machine data |
US11347541B2 (en) * | 2019-01-31 | 2022-05-31 | Walmart Apollo, Llc | Methods and apparatus for virtual machine rebalancing |
US11010188B1 (en) | 2019-02-05 | 2021-05-18 | Amazon Technologies, Inc. | Simulated data object storage using on-demand computation of data objects |
US10990434B2 (en) | 2019-02-05 | 2021-04-27 | International Business Machines Corporation | Increasing processing capacity of virtual machines for an abnormal event |
US10892971B2 (en) | 2019-03-12 | 2021-01-12 | Arch Systems Inc. | System and method for network communication monitoring |
US10967274B1 (en) * | 2019-03-13 | 2021-04-06 | Amazon Technologies, Inc. | Dynamic management of processes executing on computing instances |
US11861386B1 (en) | 2019-03-22 | 2024-01-02 | Amazon Technologies, Inc. | Application gateways in an on-demand network code execution system |
US11327767B2 (en) | 2019-04-05 | 2022-05-10 | International Business Machines Corporation | Increasing resources for partition to compensate for input/output (I/O) recovery event |
US10739983B1 (en) | 2019-04-10 | 2020-08-11 | Servicenow, Inc. | Configuration and management of swimlanes in a graphical user interface |
CN111865629B (en) * | 2019-04-26 | 2023-08-29 | 伊姆西Ip控股有限责任公司 | Method, apparatus and computer program product for configuring service instances |
US11494273B2 (en) | 2019-04-30 | 2022-11-08 | Commvault Systems, Inc. | Holistically protecting serverless applications across one or more cloud computing environments |
US11269734B2 (en) | 2019-06-17 | 2022-03-08 | Commvault Systems, Inc. | Data storage management system for multi-cloud protection, recovery, and migration of databases-as-a-service and/or serverless database management systems |
US11119809B1 (en) | 2019-06-20 | 2021-09-14 | Amazon Technologies, Inc. | Virtualization-based transaction handling in an on-demand network code execution system |
US10992542B2 (en) | 2019-06-25 | 2021-04-27 | Sciencelogic, Inc. | System and method for the collection, generation, and distribution of synthetic metrics for computer system management |
US11159528B2 (en) | 2019-06-28 | 2021-10-26 | Amazon Technologies, Inc. | Authentication to network-services using hosted authentication information |
US11190609B2 (en) | 2019-06-28 | 2021-11-30 | Amazon Technologies, Inc. | Connection pooling for scalable network services |
US11115404B2 (en) | 2019-06-28 | 2021-09-07 | Amazon Technologies, Inc. | Facilitating service connections in serverless code executions |
US11561866B2 (en) | 2019-07-10 | 2023-01-24 | Commvault Systems, Inc. | Preparing containerized applications for backup using a backup services container and a backup services container-orchestration pod |
US11556458B2 (en) * | 2019-07-26 | 2023-01-17 | Vmware, Inc. | Efficient fuzz testing of low-level virtual devices |
US10979289B2 (en) | 2019-08-12 | 2021-04-13 | Nutanix, Inc. | Apparatuses and methods for remote computing node registration and authentication |
US11656892B1 (en) | 2019-09-27 | 2023-05-23 | Amazon Technologies, Inc. | Sequential execution of user-submitted code and native functions |
US10908927B1 (en) | 2019-09-27 | 2021-02-02 | Amazon Technologies, Inc. | On-demand execution of object filter code in output path of object storage service |
US11550944B2 (en) | 2019-09-27 | 2023-01-10 | Amazon Technologies, Inc. | Code execution environment customization system for object storage service |
US11416628B2 (en) | 2019-09-27 | 2022-08-16 | Amazon Technologies, Inc. | User-specific data manipulation system for object storage service based on user-submitted code |
US11106477B2 (en) | 2019-09-27 | 2021-08-31 | Amazon Technologies, Inc. | Execution of owner-specified code during input/output path to object storage service |
US10996961B2 (en) | 2019-09-27 | 2021-05-04 | Amazon Technologies, Inc. | On-demand indexing of data in input path of object storage service |
US11250007B1 (en) | 2019-09-27 | 2022-02-15 | Amazon Technologies, Inc. | On-demand execution of object combination code in output path of object storage service |
US11394761B1 (en) | 2019-09-27 | 2022-07-19 | Amazon Technologies, Inc. | Execution of user-submitted code on a stream of data |
US11263220B2 (en) | 2019-09-27 | 2022-03-01 | Amazon Technologies, Inc. | On-demand execution of object transformation code in output path of object storage service |
US11055112B2 (en) | 2019-09-27 | 2021-07-06 | Amazon Technologies, Inc. | Inserting executions of owner-specified code into input/output path of object storage service |
US11360948B2 (en) | 2019-09-27 | 2022-06-14 | Amazon Technologies, Inc. | Inserting owner-specified data processing pipelines into input/output path of object storage service |
US11023311B2 (en) | 2019-09-27 | 2021-06-01 | Amazon Technologies, Inc. | On-demand code execution in input path of data uploaded to storage service in multiple data portions |
US11023416B2 (en) | 2019-09-27 | 2021-06-01 | Amazon Technologies, Inc. | Data access control system for object storage service based on owner-defined code |
US11386230B2 (en) | 2019-09-27 | 2022-07-12 | Amazon Technologies, Inc. | On-demand code obfuscation of data in input path of object storage service |
US10997101B1 (en) * | 2019-11-01 | 2021-05-04 | EMC IP Holding Company LLC | Accessing secondary storage |
US11212168B2 (en) * | 2019-11-20 | 2021-12-28 | Nutanix, Inc. | Apparatuses and methods for remote computing node initialization using a configuration template and resource pools |
US11119826B2 (en) | 2019-11-27 | 2021-09-14 | Amazon Technologies, Inc. | Serverless call distribution to implement spillover while avoiding cold starts |
CN110888741A (en) * | 2019-11-27 | 2020-03-17 | 新华三大数据技术有限公司 | Resource scheduling method and device for application container, server and storage medium |
US10942795B1 (en) | 2019-11-27 | 2021-03-09 | Amazon Technologies, Inc. | Serverless call distribution to utilize reserved capacity without inhibiting scaling |
US11467753B2 (en) | 2020-02-14 | 2022-10-11 | Commvault Systems, Inc. | On-demand restore of virtual machine data |
US11321188B2 (en) | 2020-03-02 | 2022-05-03 | Commvault Systems, Inc. | Platform-agnostic containerized application data protection |
US11422900B2 (en) | 2020-03-02 | 2022-08-23 | Commvault Systems, Inc. | Platform-agnostic containerized application data protection |
US11714682B1 (en) | 2020-03-03 | 2023-08-01 | Amazon Technologies, Inc. | Reclaiming computing resources in an on-demand code execution system |
US11188391B1 (en) | 2020-03-11 | 2021-11-30 | Amazon Technologies, Inc. | Allocating resources to on-demand code executions under scarcity conditions |
US11442768B2 (en) | 2020-03-12 | 2022-09-13 | Commvault Systems, Inc. | Cross-hypervisor live recovery of virtual machines |
US11099956B1 (en) | 2020-03-26 | 2021-08-24 | Commvault Systems, Inc. | Snapshot-based disaster recovery orchestration of virtual machine failover and failback operations |
US11775640B1 (en) | 2020-03-30 | 2023-10-03 | Amazon Technologies, Inc. | Resource utilization-based malicious task detection in an on-demand code execution system |
US11768809B2 (en) | 2020-05-08 | 2023-09-26 | Nutanix, Inc. | Managing incremental snapshots for fast leader node bring-up |
US11500669B2 (en) | 2020-05-15 | 2022-11-15 | Commvault Systems, Inc. | Live recovery of virtual machines in a public cloud computing environment |
US11314687B2 (en) | 2020-09-24 | 2022-04-26 | Commvault Systems, Inc. | Container data mover for migrating data between distributed data storage systems integrated with application orchestrators |
US11249742B1 (en) * | 2020-09-25 | 2022-02-15 | Jpmorgan Chase Bank, N.A. | Systems and methods for zero-touch infrastructure build automation |
US11656951B2 (en) | 2020-10-28 | 2023-05-23 | Commvault Systems, Inc. | Data loss vulnerability detection |
US11593270B1 (en) | 2020-11-25 | 2023-02-28 | Amazon Technologies, Inc. | Fast distributed caching using erasure coded object parts |
US11550713B1 (en) | 2020-11-25 | 2023-01-10 | Amazon Technologies, Inc. | Garbage collection in distributed systems using life cycled storage roots |
CN112698918A (en) * | 2021-01-06 | 2021-04-23 | 上海幻电信息科技有限公司 | Virtual machine file generation method and device based on construction environment |
US11604706B2 (en) | 2021-02-02 | 2023-03-14 | Commvault Systems, Inc. | Back up and restore related data on different cloud storage tiers |
US20220330013A1 (en) * | 2021-04-13 | 2022-10-13 | Bank Of Montreal | Managing configurations of mobile devices across mobility configuration environments |
CN113242288B (en) * | 2021-05-06 | 2022-03-08 | 国家计算机网络与信息安全管理中心 | Internet of things equipment firmware upgrading method, system and device and storage medium |
CN113238835B (en) * | 2021-06-02 | 2023-10-31 | 中国联合网络通信集团有限公司 | Virtual machine configuration method, device, server and system |
US11388210B1 (en) | 2021-06-30 | 2022-07-12 | Amazon Technologies, Inc. | Streaming analytics using a serverless compute system |
US11789783B2 (en) | 2021-07-06 | 2023-10-17 | Bank Of America Corporation | Hosted virtual desktop slicing using federated edge intelligence |
US11385925B1 (en) | 2021-07-06 | 2022-07-12 | Bank Of America Corporation | System and method for provisioning hosted virtual desktop resources to remote users |
DE102021129282A1 (en) | 2021-11-10 | 2023-05-11 | EPLAN GmbH & Co. KG | Flexible management of resources for multiple users |
CN115080027B (en) * | 2022-08-24 | 2023-01-06 | 深圳市信润富联数字科技有限公司 | Web page automatic adaptation method, device, equipment and storage medium |
CN117938656A (en) * | 2022-10-17 | 2024-04-26 | 戴尔产品有限公司 | Cloud native zero configuration features to manage in-house deployment resources |
Citations (95)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030159028A1 (en) * | 1999-04-28 | 2003-08-21 | Tranxition Corporation | Method and system for automatically transitioning of configuration settings among computer systems |
US20040143664A1 (en) | 2002-12-20 | 2004-07-22 | Haruhiko Usa | Method for allocating computer resource |
US20040145605A1 (en) | 2003-01-28 | 2004-07-29 | Sujoy Basu | Access method and system for remote desktops |
US20050120160A1 (en) | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US20050216920A1 (en) | 2004-03-24 | 2005-09-29 | Vijay Tewari | Use of a virtual machine to emulate a hardware device |
US6985937B1 (en) | 2000-05-11 | 2006-01-10 | Ensim Corporation | Dynamically modifying the resources of a virtual server |
US20060089995A1 (en) | 2004-10-26 | 2006-04-27 | Platespin Ltd | System for conversion between physical machines, virtual machines and machine images |
US20060136761A1 (en) | 2004-12-16 | 2006-06-22 | International Business Machines Corporation | System, method and program to automatically adjust allocation of computer resources |
US20060168224A1 (en) | 2002-09-07 | 2006-07-27 | Midgley Nicholas J | Remote dynamic configuration of a web server to facilitate capacity on demand |
US20060174087A1 (en) | 2005-01-28 | 2006-08-03 | Hitachi, Ltd. | Computer system, computer, storage system, and control terminal |
US20060184653A1 (en) | 2005-02-16 | 2006-08-17 | Red Hat, Inc. | System and method for creating and managing virtual services |
US20060195715A1 (en) | 2005-02-28 | 2006-08-31 | Herington Daniel E | System and method for migrating virtual machines on cluster systems |
US7158972B2 (en) | 2001-12-11 | 2007-01-02 | Sun Microsystems, Inc. | Methods and apparatus for managing multiple user systems |
US20070028239A1 (en) | 2005-07-29 | 2007-02-01 | Bill Dyck | Dynamic performance management for virtual servers |
US20070043860A1 (en) | 2005-08-15 | 2007-02-22 | Vipul Pabari | Virtual systems management |
US20070050763A1 (en) | 2005-08-23 | 2007-03-01 | Mellanox Technologies Ltd. | System and method for accelerating input/output access operation on a virtual machine |
US20070074208A1 (en) | 2005-09-29 | 2007-03-29 | Xiaofeng Ling | Apparatus and method for expedited virtual machine (VM) launch in VM cluster environment |
US20070136402A1 (en) | 2005-11-30 | 2007-06-14 | International Business Machines Corporation | Automatic prediction of future out of memory exceptions in a garbage collected virtual machine |
US20070174429A1 (en) | 2006-01-24 | 2007-07-26 | Citrix Systems, Inc. | Methods and servers for establishing a connection between a client system and a virtual machine hosting a requested computing environment |
US7257811B2 (en) | 2004-05-11 | 2007-08-14 | International Business Machines Corporation | System, method and program to migrate a virtual machine |
US20070233838A1 (en) | 2006-03-30 | 2007-10-04 | Hitachi, Ltd. | Method for workload management of plural servers |
US20070234302A1 (en) | 2006-03-31 | 2007-10-04 | Prowess Consulting Llc | System and method for deploying a virtual machine |
US20070250608A1 (en) | 2001-11-08 | 2007-10-25 | Watt Charles T | System and method for dynamic server allocation and provisioning |
US20070260721A1 (en) | 2006-05-02 | 2007-11-08 | Patrick Glen Bose | Physical server discovery and correlation |
US20070266433A1 (en) | 2006-03-03 | 2007-11-15 | Hezi Moore | System and Method for Securing Information in a Virtual Computing Environment |
US20070271560A1 (en) | 2006-05-18 | 2007-11-22 | Microsoft Corporation | Deploying virtual machine to host based on workload characterizations |
US20070283348A1 (en) | 2006-05-15 | 2007-12-06 | White Anthony R P | Method and system for virtual machine migration |
US20070297428A1 (en) | 2006-06-26 | 2007-12-27 | Patrick Glen Bose | Port pooling |
US7321893B1 (en) | 2004-07-29 | 2008-01-22 | Emc Corporation | System and method for the configuration of resources in resource groups |
US20080028410A1 (en) | 2006-07-26 | 2008-01-31 | Ludmila Cherkasova | Systems and methods for flexibly controlling resource usage by a driver domain on behalf of a virtual machine |
US20080033902A1 (en) | 2006-08-04 | 2008-02-07 | Platespin Ltd | A Method for Providing Live File Transfer Between Machines |
US20080049786A1 (en) * | 2006-08-22 | 2008-02-28 | Maruthi Ram | Systems and Methods for Providing Dynamic Spillover of Virtual Servers Based on Bandwidth |
US20080059556A1 (en) | 2006-08-31 | 2008-03-06 | Egenera, Inc. | Providing virtual machine technology as an embedded layer within a processing platform |
US20080065854A1 (en) | 2006-09-07 | 2008-03-13 | Sebastina Schoenberg | Method and apparatus for accessing physical memory belonging to virtual machines from a user level monitor |
US20080086726A1 (en) | 2006-10-10 | 2008-04-10 | International Business Machines Corporation | System, method and program for managing communication with multiple configurations for virtual machine |
US20080104608A1 (en) | 2006-10-27 | 2008-05-01 | Hyser Chris D | Starting up at least one virtual machine in a physical machine by a load balancer |
US7383327B1 (en) | 2007-10-11 | 2008-06-03 | Swsoft Holdings, Ltd. | Management of virtual and physical servers using graphic control panels |
US20080148300A1 (en) | 2006-10-26 | 2008-06-19 | Archer Charles J | Providing Policy-Based Operating System Services in a Hypervisor on a Computing System |
US7392403B1 (en) | 2007-12-19 | 2008-06-24 | International Business Machines Corporation | Systems, methods and computer program products for high availability enhancements of virtual security module servers |
US20080163210A1 (en) | 2006-12-29 | 2008-07-03 | Mic Bowman | Dynamic virtual machine generation |
US7398471B1 (en) | 2004-07-29 | 2008-07-08 | Emc Corporation | System and method for the administration of resource groups |
US20080201414A1 (en) | 2007-02-15 | 2008-08-21 | Amir Husain Syed M | Transferring a Virtual Machine from a Remote Server Computer for Local Execution by a Client Computer |
US7421533B2 (en) | 2004-04-19 | 2008-09-02 | Intel Corporation | Method to manage memory in a platform with virtual machines |
US20080244600A1 (en) | 2007-03-30 | 2008-10-02 | Platform Computing Corporation | Method and system for modeling and analyzing computing resource requirements of software applications in a shared and distributed computing environment |
US20080301674A1 (en) | 2007-05-29 | 2008-12-04 | Red Hat, Inc. | Systems and methods for virtual deployment |
US20080320561A1 (en) | 2007-06-22 | 2008-12-25 | Suit John M | Method and System for Collaboration Involving Enterprise Nodes |
US20080320583A1 (en) | 2007-06-22 | 2008-12-25 | Vipul Sharma | Method for Managing a Virtual Machine |
US20090016220A1 (en) | 2007-07-11 | 2009-01-15 | Mustafa Uysal | Dynamic feedback control of resources in computing environments |
US20090024994A1 (en) | 2007-07-20 | 2009-01-22 | Eg Innovations Pte. Ltd. | Monitoring System for Virtual Application Environments |
US20090049453A1 (en) | 2007-08-15 | 2009-02-19 | International Business Machines Corporation | In-band communication with virtual machines via a hypervisor message bus |
US20090063750A1 (en) | 2007-08-27 | 2009-03-05 | International Business Machines Corporation | Migrating contents of a memory on a virtual machine |
US7519696B2 (en) | 1999-04-21 | 2009-04-14 | Emc Corporation | Method and apparatus for dynamically modifying a computer system configuration |
US7536541B2 (en) | 2006-03-07 | 2009-05-19 | Novell Inc. | Parallelizing multiple boot images with virtual machines |
US20090172662A1 (en) | 2007-12-28 | 2009-07-02 | Huan Liu | Virtual machine configuration system |
US7577722B1 (en) | 2002-04-05 | 2009-08-18 | Vmware, Inc. | Provisioning of computer systems using virtual machines |
US20090228883A1 (en) | 2008-03-07 | 2009-09-10 | Alexander Gebhart | Dynamic cluster expansion through virtualization-based live cloning |
US20090235067A1 (en) | 2008-03-12 | 2009-09-17 | Joseph Miller | Method and system for configuring a server and dynamically loading ssl information |
US20090265707A1 (en) | 2008-04-21 | 2009-10-22 | Microsoft Corporation | Optimizing application performance on virtual machines automatically with end-user preferences |
US20090300210A1 (en) | 2008-05-28 | 2009-12-03 | James Michael Ferris | Methods and systems for load balancing in cloud-based networks |
US20090328030A1 (en) | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Installing a management agent with a virtual machine |
US20100058106A1 (en) | 2008-08-27 | 2010-03-04 | Novell, Inc. | Virtual machine file system and incremental snapshot using image deltas |
US20100070970A1 (en) | 2008-09-15 | 2010-03-18 | Vmware, Inc. | Policy-Based Hypervisor Configuration Management |
US20100082799A1 (en) * | 2008-09-26 | 2010-04-01 | Dehaan Michael Paul | Methods and systems for managing network connections in a software provisioning environment |
US7702843B1 (en) | 2006-04-27 | 2010-04-20 | Vmware, Inc. | Determining memory conditions in a virtual machine |
US20100138828A1 (en) * | 2008-12-01 | 2010-06-03 | Vincent Hanquez | Systems and Methods for Facilitating Virtualization of a Heterogeneous Processor Pool |
US7743107B2 (en) | 2007-12-07 | 2010-06-22 | International Business Machines Corporation | System and method for using remote module on VIOS to manage backups to remote backup servers |
US7757231B2 (en) | 2004-12-10 | 2010-07-13 | Intel Corporation | System and method to deprivilege components of a virtual machine monitor |
US20100235831A1 (en) | 2009-03-12 | 2010-09-16 | Arend Erich Dittmer | Method for dynamic configuration of virtual machine |
US7802251B2 (en) * | 2005-11-09 | 2010-09-21 | Hitachi, Ltd. | System for resource allocation to an active virtual machine using switch and controller to associate resource groups |
US7814495B1 (en) | 2006-03-31 | 2010-10-12 | V Mware, Inc. | On-line replacement and changing of virtualization software |
US7827294B2 (en) * | 2004-05-06 | 2010-11-02 | American Express Travel Related Services Company, Inc. | System and method for dynamic security provisioning of computing resources |
US7840964B2 (en) | 2005-12-30 | 2010-11-23 | Intel Corporation | Mechanism to transition control between components in a virtual machine environment |
US7843821B2 (en) | 2006-12-21 | 2010-11-30 | Oracle America, Inc. | Method, apparatus and program product to use factory-defined multiple MAC addresses for virtual NICS |
US7856549B2 (en) | 2007-01-24 | 2010-12-21 | Hewlett-Packard Development Company, L.P. | Regulating power consumption |
US7865893B1 (en) | 2005-02-07 | 2011-01-04 | Parallels Holdings, Ltd. | System and method for starting virtual machine monitor in common with already installed operating system |
US7912955B1 (en) * | 2007-04-24 | 2011-03-22 | Hewlett-Packard Development Company, L.P. | Model-based provisioning of resources |
US7917811B2 (en) | 2007-04-19 | 2011-03-29 | Hitachi, Ltd. | Virtual computer system |
US7925850B1 (en) | 2007-02-16 | 2011-04-12 | Vmware, Inc. | Page signature disambiguation for increasing the efficiency of virtual machine migration in shared-page virtualized computer systems |
US7941470B2 (en) | 2007-03-29 | 2011-05-10 | Vmware, Inc. | Synchronization and customization of a clone computer |
US7962496B2 (en) * | 2004-07-26 | 2011-06-14 | International Business Machines Corporation | Migrating personality of computing environment from source platform to target platform |
US20110153697A1 (en) * | 2005-09-15 | 2011-06-23 | Computer Assoicates Think, Inc. | Automated Filer Technique for Use in Virtualized Appliances and Applications |
US7970917B2 (en) * | 2003-01-21 | 2011-06-28 | Hitachi, Ltd. | Virtual file servers with storage device |
US7979863B2 (en) | 2004-05-21 | 2011-07-12 | Computer Associates Think, Inc. | Method and apparatus for dynamic CPU resource management |
US7987289B2 (en) | 2008-06-24 | 2011-07-26 | Microsoft Corporation | Participating in cloud as totally stubby edge |
US8006079B2 (en) | 2008-02-22 | 2011-08-23 | Netapp, Inc. | System and method for fast restart of a guest operating system in a virtual machine environment |
US8037280B2 (en) | 2008-06-11 | 2011-10-11 | Vmware, Inc. | System and method for improving memory locality of virtual machines |
US8046694B1 (en) | 2007-08-06 | 2011-10-25 | Gogrid, LLC | Multi-server control panel |
US8117495B2 (en) | 2007-11-26 | 2012-02-14 | Stratus Technologies Bermuda Ltd | Systems and methods of high availability cluster environment failover protection |
US8127290B2 (en) | 2007-06-22 | 2012-02-28 | Red Hat, Inc. | Method and system for direct insertion of a virtual machine driver |
US8146079B2 (en) | 2006-07-26 | 2012-03-27 | Hewlett-Packard Development Company, L.P. | Systems and methods for controlling resource usage by a driver domain on behalf of a virtual machine |
US8161479B2 (en) | 2008-06-13 | 2012-04-17 | Microsoft Corporation | Synchronizing virtual machine and application life cycles |
US8171485B2 (en) | 2007-03-26 | 2012-05-01 | Credit Suisse Securities (Europe) Limited | Method and system for managing virtual and real machines |
US8184631B2 (en) | 2007-01-22 | 2012-05-22 | Oracle America, Inc. | Method for specifying a MAC identifier for a network-interface-device |
US8219653B1 (en) | 2008-09-23 | 2012-07-10 | Gogrid, LLC | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
US8275885B2 (en) | 2007-02-06 | 2012-09-25 | International Business Machines Corporation | Method, apparatus and system for processing a series of service messages |
Family Cites Families (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6888836B1 (en) | 1999-05-26 | 2005-05-03 | Hewlett-Packard Development Company, L.P. | Method for allocating web sites on a web hosting cluster |
US6829772B2 (en) | 1999-11-30 | 2004-12-07 | Sun Microsystems, Inc. | Apparatus and methods for communicating between resource domains |
US6763327B1 (en) * | 2000-02-17 | 2004-07-13 | Tensilica, Inc. | Abstraction of configurable processor functionality for operating systems portability |
US6529784B1 (en) | 2000-02-29 | 2003-03-04 | Caldera Systems, Inc. | Method and apparatus for monitoring computer systems and alerting users of actual or potential system errors |
US6868444B1 (en) | 2000-05-05 | 2005-03-15 | Interland, Inc. | Server configuration management and tracking |
US7080378B1 (en) | 2002-05-17 | 2006-07-18 | Storage Technology Corporation | Workload balancing using dynamically allocated virtual servers |
AU2003276685A1 (en) | 2002-06-13 | 2003-12-31 | Netscout Systems, Inc. | Real-time network performance monitoring system |
WO2004049661A1 (en) | 2002-11-22 | 2004-06-10 | Telefonaktiebolaget Lm Ericsson (Publ) | Calculation of soft decision values using reliability information of the amplitude |
US20040267897A1 (en) | 2003-06-24 | 2004-12-30 | Sychron Inc. | Distributed System Providing Scalable Methodology for Real-Time Control of Server Pools and Data Centers |
US7516221B2 (en) | 2003-08-14 | 2009-04-07 | Oracle International Corporation | Hierarchical management of the dynamic allocation of resources in a multi-node system |
WO2005036367A2 (en) * | 2003-10-08 | 2005-04-21 | Unisys Corporation | Virtual data center that allocates and manages system resources across multiple nodes |
US7146482B2 (en) | 2003-11-25 | 2006-12-05 | International Business Machines Corporation | Memory mapped input/output emulation |
US7234037B2 (en) | 2003-11-25 | 2007-06-19 | International Business Machines Corporation | Memory mapped Input/Output operations |
US7334157B1 (en) | 2004-02-26 | 2008-02-19 | Symantec Operating Corporation | Restore of data to a computer system having different hardware |
US9606821B2 (en) * | 2004-12-17 | 2017-03-28 | Intel Corporation | Virtual environment manager for creating and managing virtual machine environments |
US7849462B2 (en) | 2005-01-07 | 2010-12-07 | Microsoft Corporation | Image server |
US20060184937A1 (en) * | 2005-02-11 | 2006-08-17 | Timothy Abels | System and method for centralized software management in virtual machines |
US8370819B2 (en) | 2005-03-25 | 2013-02-05 | Microsoft Corporation | Mechanism to store information describing a virtual machine in a virtual disk image |
US8166473B2 (en) | 2005-04-21 | 2012-04-24 | Microsoft Corporation | Method and system for a resource negotiation between virtual machines |
US7640292B1 (en) | 2005-04-29 | 2009-12-29 | Netapp, Inc. | Physical server to virtual server migration |
US8074214B2 (en) | 2005-05-19 | 2011-12-06 | Oracle International Corporation | System for creating a customized software installation on demand |
US8327353B2 (en) | 2005-08-30 | 2012-12-04 | Microsoft Corporation | Hierarchical virtualization with a multi-level virtualization mechanism |
US8528107B1 (en) * | 2005-09-19 | 2013-09-03 | Vmware, Inc. | Enforcing restrictions related to a virtualized computer environment |
US7500090B2 (en) * | 2005-09-29 | 2009-03-03 | Hewlett-Packard Development Company, L.P. | Operating environment configuration system and method |
US8327370B2 (en) | 2005-10-27 | 2012-12-04 | International Business Machines Corporation | Dynamic policy manager method, system, and computer program product for optimizing fractional resource allocation |
JP2007135109A (en) | 2005-11-11 | 2007-05-31 | Hitachi Ltd | Virtual network management method, virtual network management program, virtual network management system, and virtual network management means |
US20090106754A1 (en) * | 2005-12-10 | 2009-04-23 | Benjamin Liu | Handling a device related operation in a virtualization enviroment |
KR100753820B1 (en) | 2005-12-10 | 2007-08-31 | 한국전자통신연구원 | Network system and communication method for secure bootstrapping of Mobile IPv6 mobile node based on PSKPre-Shared Key |
US8166475B1 (en) | 2005-12-30 | 2012-04-24 | Vmware, Inc. | Storage area network access for virtual machines |
EP1977571A2 (en) * | 2006-01-12 | 2008-10-08 | Broadcom Israel R&D | Method and system for protocol offload and direct i/o with i/o sharing in a virtualized network environment |
US8190682B2 (en) | 2006-03-31 | 2012-05-29 | Amazon Technologies, Inc. | Managing execution of programs by multiple computing systems |
US8677034B2 (en) | 2006-04-28 | 2014-03-18 | Hewlett-Packard Development Company, L.P. | System for controlling I/O devices in a multi-partition computer system |
US20080059553A1 (en) | 2006-08-29 | 2008-03-06 | Dawson Christopher J | Application structure for supporting partial functionality in a distributed computing infrastructure |
US7797453B2 (en) * | 2006-09-29 | 2010-09-14 | Microsoft Corporation | Resource standardization in an off-premise environment |
US20080082976A1 (en) * | 2006-09-29 | 2008-04-03 | Matthias Steinwagner | Usage of virtualization software for shipment of software products |
US8125986B2 (en) * | 2007-01-19 | 2012-02-28 | International Business Machines Corporation | Method for enabling secure usage of computers using a mechanism lockdown |
US7769990B1 (en) * | 2007-03-23 | 2010-08-03 | Symantec Corporation | Using a monitoring process to update system configuration settings during restore operations |
US20080263183A1 (en) * | 2007-04-20 | 2008-10-23 | Lisa Midori Nishiyama | Management of Kernel configurations for nodes in a clustered system |
US8195866B2 (en) | 2007-04-26 | 2012-06-05 | Vmware, Inc. | Adjusting available persistent storage during execution in a virtual computer system |
US8091086B1 (en) | 2007-07-20 | 2012-01-03 | Parallels Holdings, Ltd. | System and method for virtualization using an open bus hypervisor |
US8239646B2 (en) | 2007-07-31 | 2012-08-07 | Vmware, Inc. | Online virtual machine disk migration |
US8326991B2 (en) | 2007-08-21 | 2012-12-04 | International Business Machines Corporation | Maintaining RFID information for virtual machines |
US8146076B1 (en) | 2007-09-17 | 2012-03-27 | Symantec Corporation | Systems and methods for customizing boot disk images using prioritization |
US8132173B2 (en) | 2007-09-28 | 2012-03-06 | Oracle America, Inc. | Method and system for coordinating hypervisor scheduling |
US8191063B2 (en) | 2007-09-30 | 2012-05-29 | Symantex Corporation | Method for migrating a plurality of virtual machines by associating files and state information with a single logical container |
US7801994B2 (en) | 2007-11-29 | 2010-09-21 | Hitachi, Ltd. | Method and apparatus for locating candidate data centers for application migration |
US8151265B2 (en) | 2007-12-19 | 2012-04-03 | International Business Machines Corporation | Apparatus for and method for real-time optimization of virtual machine input/output performance |
US8560694B2 (en) | 2008-02-01 | 2013-10-15 | Microsoft Corporation | Virtual application server with version control |
WO2009098909A1 (en) | 2008-02-04 | 2009-08-13 | Nec Corporation | Virtual appliance assignment system |
US8495609B2 (en) * | 2008-02-25 | 2013-07-23 | Sas Institute, Inc. | Methods, systems, and computer program products for taking a snapshot of installed software on a data processing system as part of a software update process |
US8171115B2 (en) | 2008-03-18 | 2012-05-01 | Microsoft Corporation | Resource equalization for inter- and intra- data center operations |
US8341625B2 (en) | 2008-05-29 | 2012-12-25 | Red Hat, Inc. | Systems and methods for identification and management of cloud-based virtual machines |
US8332849B2 (en) | 2008-05-30 | 2012-12-11 | Lsi Corporation | Paravirtualization acceleration through single root I/O virtualization |
US20100128432A1 (en) | 2008-06-16 | 2010-05-27 | Miller Matthew P | System and method for virtual computing environment management, network interface manipulation and information indication |
US8037016B2 (en) | 2008-07-09 | 2011-10-11 | Dell Products L.P. | Adaptive storage system transcoder |
US8046550B2 (en) | 2008-07-14 | 2011-10-25 | Quest Software, Inc. | Systems and methods for performing backup operations of virtual machine files |
US8307187B2 (en) | 2008-09-12 | 2012-11-06 | Vmware, Inc. | VDI Storage overcommit and rebalancing |
US9141381B2 (en) | 2008-10-27 | 2015-09-22 | Vmware, Inc. | Version control environment for virtual machines |
US8201167B2 (en) | 2008-11-12 | 2012-06-12 | International Business Machines Corporation | On-demand allocation of virtual asynchronous services interfaces |
US8001247B2 (en) * | 2009-02-27 | 2011-08-16 | Red Hat, Inc. | System for trigger-based “gated” dynamic virtual and physical system provisioning |
-
2009
- 2009-04-09 US US12/421,599 patent/US8458717B1/en active Active
- 2009-04-09 US US12/421,602 patent/US8352608B1/en active Active
- 2009-04-09 US US12/421,597 patent/US8656018B1/en active Active
- 2009-04-09 US US12/421,613 patent/US8453144B1/en not_active Expired - Fee Related
- 2009-04-09 US US12/421,605 patent/US8468535B1/en active Active
- 2009-04-09 US US12/421,598 patent/US8364802B1/en not_active Expired - Fee Related
- 2009-04-09 US US12/421,610 patent/US8418176B1/en not_active Expired - Fee Related
- 2009-04-09 US US12/421,612 patent/US9798560B1/en active Active
- 2009-04-09 US US12/421,604 patent/US10365935B1/en active Active
- 2009-04-09 US US12/421,611 patent/US8219653B1/en active Active
-
2012
- 2012-05-25 US US13/481,762 patent/US8533305B1/en active Active
-
2017
- 2017-10-23 US US15/791,274 patent/US10289436B1/en active Active
-
2019
- 2019-05-14 US US16/412,359 patent/US10684874B1/en active Active
-
2020
- 2020-06-16 US US16/903,281 patent/US11442759B1/en active Active
-
2022
- 2022-07-21 US US17/870,387 patent/US20220357967A1/en active Pending
Patent Citations (109)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7519696B2 (en) | 1999-04-21 | 2009-04-14 | Emc Corporation | Method and apparatus for dynamically modifying a computer system configuration |
US20030159028A1 (en) * | 1999-04-28 | 2003-08-21 | Tranxition Corporation | Method and system for automatically transitioning of configuration settings among computer systems |
US6985937B1 (en) | 2000-05-11 | 2006-01-10 | Ensim Corporation | Dynamically modifying the resources of a virtual server |
US20070250608A1 (en) | 2001-11-08 | 2007-10-25 | Watt Charles T | System and method for dynamic server allocation and provisioning |
US7158972B2 (en) | 2001-12-11 | 2007-01-02 | Sun Microsystems, Inc. | Methods and apparatus for managing multiple user systems |
US7577722B1 (en) | 2002-04-05 | 2009-08-18 | Vmware, Inc. | Provisioning of computer systems using virtual machines |
US20060168224A1 (en) | 2002-09-07 | 2006-07-27 | Midgley Nicholas J | Remote dynamic configuration of a web server to facilitate capacity on demand |
US20040143664A1 (en) | 2002-12-20 | 2004-07-22 | Haruhiko Usa | Method for allocating computer resource |
US7970917B2 (en) * | 2003-01-21 | 2011-06-28 | Hitachi, Ltd. | Virtual file servers with storage device |
US20040145605A1 (en) | 2003-01-28 | 2004-07-29 | Sujoy Basu | Access method and system for remote desktops |
US20050120160A1 (en) | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US20050216920A1 (en) | 2004-03-24 | 2005-09-29 | Vijay Tewari | Use of a virtual machine to emulate a hardware device |
US7421533B2 (en) | 2004-04-19 | 2008-09-02 | Intel Corporation | Method to manage memory in a platform with virtual machines |
US7827294B2 (en) * | 2004-05-06 | 2010-11-02 | American Express Travel Related Services Company, Inc. | System and method for dynamic security provisioning of computing resources |
US7257811B2 (en) | 2004-05-11 | 2007-08-14 | International Business Machines Corporation | System, method and program to migrate a virtual machine |
US7979863B2 (en) | 2004-05-21 | 2011-07-12 | Computer Associates Think, Inc. | Method and apparatus for dynamic CPU resource management |
US7962496B2 (en) * | 2004-07-26 | 2011-06-14 | International Business Machines Corporation | Migrating personality of computing environment from source platform to target platform |
US7398471B1 (en) | 2004-07-29 | 2008-07-08 | Emc Corporation | System and method for the administration of resource groups |
US7321893B1 (en) | 2004-07-29 | 2008-01-22 | Emc Corporation | System and method for the configuration of resources in resource groups |
US20060089995A1 (en) | 2004-10-26 | 2006-04-27 | Platespin Ltd | System for conversion between physical machines, virtual machines and machine images |
US7757231B2 (en) | 2004-12-10 | 2010-07-13 | Intel Corporation | System and method to deprivilege components of a virtual machine monitor |
US20060136761A1 (en) | 2004-12-16 | 2006-06-22 | International Business Machines Corporation | System, method and program to automatically adjust allocation of computer resources |
US7783856B2 (en) * | 2005-01-28 | 2010-08-24 | Hitachi, Ltd. | Method and apparatus for management between virtualized machines and virtualized storage systems |
US20060174087A1 (en) | 2005-01-28 | 2006-08-03 | Hitachi, Ltd. | Computer system, computer, storage system, and control terminal |
US7865893B1 (en) | 2005-02-07 | 2011-01-04 | Parallels Holdings, Ltd. | System and method for starting virtual machine monitor in common with already installed operating system |
US20060184653A1 (en) | 2005-02-16 | 2006-08-17 | Red Hat, Inc. | System and method for creating and managing virtual services |
US20060195715A1 (en) | 2005-02-28 | 2006-08-31 | Herington Daniel E | System and method for migrating virtual machines on cluster systems |
US7730486B2 (en) | 2005-02-28 | 2010-06-01 | Hewlett-Packard Development Company, L.P. | System and method for migrating virtual machines on cluster systems |
US20070028239A1 (en) | 2005-07-29 | 2007-02-01 | Bill Dyck | Dynamic performance management for virtual servers |
US7587492B2 (en) | 2005-07-29 | 2009-09-08 | Hewlett-Packard Development Company, L.P. | Dynamic performance management for virtual servers |
US20070043860A1 (en) | 2005-08-15 | 2007-02-22 | Vipul Pabari | Virtual systems management |
US20070050763A1 (en) | 2005-08-23 | 2007-03-01 | Mellanox Technologies Ltd. | System and method for accelerating input/output access operation on a virtual machine |
US20110153697A1 (en) * | 2005-09-15 | 2011-06-23 | Computer Assoicates Think, Inc. | Automated Filer Technique for Use in Virtualized Appliances and Applications |
US20070074208A1 (en) | 2005-09-29 | 2007-03-29 | Xiaofeng Ling | Apparatus and method for expedited virtual machine (VM) launch in VM cluster environment |
US7802251B2 (en) * | 2005-11-09 | 2010-09-21 | Hitachi, Ltd. | System for resource allocation to an active virtual machine using switch and controller to associate resource groups |
US20070136402A1 (en) | 2005-11-30 | 2007-06-14 | International Business Machines Corporation | Automatic prediction of future out of memory exceptions in a garbage collected virtual machine |
US7840964B2 (en) | 2005-12-30 | 2010-11-23 | Intel Corporation | Mechanism to transition control between components in a virtual machine environment |
US20070174429A1 (en) | 2006-01-24 | 2007-07-26 | Citrix Systems, Inc. | Methods and servers for establishing a connection between a client system and a virtual machine hosting a requested computing environment |
US20070266433A1 (en) | 2006-03-03 | 2007-11-15 | Hezi Moore | System and Method for Securing Information in a Virtual Computing Environment |
US7536541B2 (en) | 2006-03-07 | 2009-05-19 | Novell Inc. | Parallelizing multiple boot images with virtual machines |
US20070233838A1 (en) | 2006-03-30 | 2007-10-04 | Hitachi, Ltd. | Method for workload management of plural servers |
US7814495B1 (en) | 2006-03-31 | 2010-10-12 | V Mware, Inc. | On-line replacement and changing of virtualization software |
US20070234302A1 (en) | 2006-03-31 | 2007-10-04 | Prowess Consulting Llc | System and method for deploying a virtual machine |
US8095931B1 (en) | 2006-04-27 | 2012-01-10 | Vmware, Inc. | Controlling memory conditions in a virtual machine |
US7716446B1 (en) | 2006-04-27 | 2010-05-11 | Vmware, Inc. | System and method for cooperative virtual machine memory scheduling |
US7702843B1 (en) | 2006-04-27 | 2010-04-20 | Vmware, Inc. | Determining memory conditions in a virtual machine |
US20070260721A1 (en) | 2006-05-02 | 2007-11-08 | Patrick Glen Bose | Physical server discovery and correlation |
US20070283348A1 (en) | 2006-05-15 | 2007-12-06 | White Anthony R P | Method and system for virtual machine migration |
US20070271560A1 (en) | 2006-05-18 | 2007-11-22 | Microsoft Corporation | Deploying virtual machine to host based on workload characterizations |
US20070297428A1 (en) | 2006-06-26 | 2007-12-27 | Patrick Glen Bose | Port pooling |
US20080028410A1 (en) | 2006-07-26 | 2008-01-31 | Ludmila Cherkasova | Systems and methods for flexibly controlling resource usage by a driver domain on behalf of a virtual machine |
US8146079B2 (en) | 2006-07-26 | 2012-03-27 | Hewlett-Packard Development Company, L.P. | Systems and methods for controlling resource usage by a driver domain on behalf of a virtual machine |
US20080033902A1 (en) | 2006-08-04 | 2008-02-07 | Platespin Ltd | A Method for Providing Live File Transfer Between Machines |
US20080049786A1 (en) * | 2006-08-22 | 2008-02-28 | Maruthi Ram | Systems and Methods for Providing Dynamic Spillover of Virtual Servers Based on Bandwidth |
US20080059556A1 (en) | 2006-08-31 | 2008-03-06 | Egenera, Inc. | Providing virtual machine technology as an embedded layer within a processing platform |
US20080065854A1 (en) | 2006-09-07 | 2008-03-13 | Sebastina Schoenberg | Method and apparatus for accessing physical memory belonging to virtual machines from a user level monitor |
US7996835B2 (en) | 2006-10-10 | 2011-08-09 | International Business Machines Corporation | System, method and program for managing communication with multiple configurations for virtual machine |
US20080086726A1 (en) | 2006-10-10 | 2008-04-10 | International Business Machines Corporation | System, method and program for managing communication with multiple configurations for virtual machine |
US8032899B2 (en) | 2006-10-26 | 2011-10-04 | International Business Machines Corporation | Providing policy-based operating system services in a hypervisor on a computing system |
US20080148300A1 (en) | 2006-10-26 | 2008-06-19 | Archer Charles J | Providing Policy-Based Operating System Services in a Hypervisor on a Computing System |
US20080104608A1 (en) | 2006-10-27 | 2008-05-01 | Hyser Chris D | Starting up at least one virtual machine in a physical machine by a load balancer |
US7843821B2 (en) | 2006-12-21 | 2010-11-30 | Oracle America, Inc. | Method, apparatus and program product to use factory-defined multiple MAC addresses for virtual NICS |
US20080163210A1 (en) | 2006-12-29 | 2008-07-03 | Mic Bowman | Dynamic virtual machine generation |
US8184631B2 (en) | 2007-01-22 | 2012-05-22 | Oracle America, Inc. | Method for specifying a MAC identifier for a network-interface-device |
US7856549B2 (en) | 2007-01-24 | 2010-12-21 | Hewlett-Packard Development Company, L.P. | Regulating power consumption |
US8275885B2 (en) | 2007-02-06 | 2012-09-25 | International Business Machines Corporation | Method, apparatus and system for processing a series of service messages |
US20080201414A1 (en) | 2007-02-15 | 2008-08-21 | Amir Husain Syed M | Transferring a Virtual Machine from a Remote Server Computer for Local Execution by a Client Computer |
US7925850B1 (en) | 2007-02-16 | 2011-04-12 | Vmware, Inc. | Page signature disambiguation for increasing the efficiency of virtual machine migration in shared-page virtualized computer systems |
US8171485B2 (en) | 2007-03-26 | 2012-05-01 | Credit Suisse Securities (Europe) Limited | Method and system for managing virtual and real machines |
US7941470B2 (en) | 2007-03-29 | 2011-05-10 | Vmware, Inc. | Synchronization and customization of a clone computer |
US20080244600A1 (en) | 2007-03-30 | 2008-10-02 | Platform Computing Corporation | Method and system for modeling and analyzing computing resource requirements of software applications in a shared and distributed computing environment |
US7917811B2 (en) | 2007-04-19 | 2011-03-29 | Hitachi, Ltd. | Virtual computer system |
US7912955B1 (en) * | 2007-04-24 | 2011-03-22 | Hewlett-Packard Development Company, L.P. | Model-based provisioning of resources |
US20080301674A1 (en) | 2007-05-29 | 2008-12-04 | Red Hat, Inc. | Systems and methods for virtual deployment |
US8127290B2 (en) | 2007-06-22 | 2012-02-28 | Red Hat, Inc. | Method and system for direct insertion of a virtual machine driver |
US20080320561A1 (en) | 2007-06-22 | 2008-12-25 | Suit John M | Method and System for Collaboration Involving Enterprise Nodes |
US20080320583A1 (en) | 2007-06-22 | 2008-12-25 | Vipul Sharma | Method for Managing a Virtual Machine |
US20090016220A1 (en) | 2007-07-11 | 2009-01-15 | Mustafa Uysal | Dynamic feedback control of resources in computing environments |
US20090024994A1 (en) | 2007-07-20 | 2009-01-22 | Eg Innovations Pte. Ltd. | Monitoring System for Virtual Application Environments |
US8209684B2 (en) | 2007-07-20 | 2012-06-26 | Eg Innovations Pte. Ltd. | Monitoring system for virtual application environments |
US8046694B1 (en) | 2007-08-06 | 2011-10-25 | Gogrid, LLC | Multi-server control panel |
US8095662B1 (en) | 2007-08-06 | 2012-01-10 | Paul Lappas | Automated scheduling of virtual machines across hosting servers |
US8374929B1 (en) | 2007-08-06 | 2013-02-12 | Gogrid, LLC | System and method for billing for hosted services |
US8280790B2 (en) | 2007-08-06 | 2012-10-02 | Gogrid, LLC | System and method for billing for hosted services |
US20090049453A1 (en) | 2007-08-15 | 2009-02-19 | International Business Machines Corporation | In-band communication with virtual machines via a hypervisor message bus |
US20090063750A1 (en) | 2007-08-27 | 2009-03-05 | International Business Machines Corporation | Migrating contents of a memory on a virtual machine |
US7383327B1 (en) | 2007-10-11 | 2008-06-03 | Swsoft Holdings, Ltd. | Management of virtual and physical servers using graphic control panels |
US8117495B2 (en) | 2007-11-26 | 2012-02-14 | Stratus Technologies Bermuda Ltd | Systems and methods of high availability cluster environment failover protection |
US7743107B2 (en) | 2007-12-07 | 2010-06-22 | International Business Machines Corporation | System and method for using remote module on VIOS to manage backups to remote backup servers |
US7512815B1 (en) | 2007-12-19 | 2009-03-31 | International Business Machines Corporation | Systems, methods and computer program products for high availability enhancements of virtual security module servers |
US7392403B1 (en) | 2007-12-19 | 2008-06-24 | International Business Machines Corporation | Systems, methods and computer program products for high availability enhancements of virtual security module servers |
US20090172662A1 (en) | 2007-12-28 | 2009-07-02 | Huan Liu | Virtual machine configuration system |
US8006079B2 (en) | 2008-02-22 | 2011-08-23 | Netapp, Inc. | System and method for fast restart of a guest operating system in a virtual machine environment |
US20090228883A1 (en) | 2008-03-07 | 2009-09-10 | Alexander Gebhart | Dynamic cluster expansion through virtualization-based live cloning |
US20090235067A1 (en) | 2008-03-12 | 2009-09-17 | Joseph Miller | Method and system for configuring a server and dynamically loading ssl information |
US20090265707A1 (en) | 2008-04-21 | 2009-10-22 | Microsoft Corporation | Optimizing application performance on virtual machines automatically with end-user preferences |
US20090300210A1 (en) | 2008-05-28 | 2009-12-03 | James Michael Ferris | Methods and systems for load balancing in cloud-based networks |
US8037280B2 (en) | 2008-06-11 | 2011-10-11 | Vmware, Inc. | System and method for improving memory locality of virtual machines |
US8161479B2 (en) | 2008-06-13 | 2012-04-17 | Microsoft Corporation | Synchronizing virtual machine and application life cycles |
US7987289B2 (en) | 2008-06-24 | 2011-07-26 | Microsoft Corporation | Participating in cloud as totally stubby edge |
US20090328030A1 (en) | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Installing a management agent with a virtual machine |
US20100058106A1 (en) | 2008-08-27 | 2010-03-04 | Novell, Inc. | Virtual machine file system and incremental snapshot using image deltas |
US20100070970A1 (en) | 2008-09-15 | 2010-03-18 | Vmware, Inc. | Policy-Based Hypervisor Configuration Management |
US8219653B1 (en) | 2008-09-23 | 2012-07-10 | Gogrid, LLC | System and method for adapting a system configuration of a first computer system for hosting on a second computer system |
US8352608B1 (en) | 2008-09-23 | 2013-01-08 | Gogrid, LLC | System and method for automated configuration of hosting resources |
US8364802B1 (en) | 2008-09-23 | 2013-01-29 | Gogrid, LLC | System and method for monitoring a grid of hosting resources in order to facilitate management of the hosting resources |
US20100082799A1 (en) * | 2008-09-26 | 2010-04-01 | Dehaan Michael Paul | Methods and systems for managing network connections in a software provisioning environment |
US20100138828A1 (en) * | 2008-12-01 | 2010-06-03 | Vincent Hanquez | Systems and Methods for Facilitating Virtualization of a Heterogeneous Processor Pool |
US20100235831A1 (en) | 2009-03-12 | 2010-09-16 | Arend Erich Dittmer | Method for dynamic configuration of virtual machine |
Non-Patent Citations (28)
Title |
---|
Author Unknown, "Introduction to VMware Infrastructure: ESX Server 3.5, ESX Server 3i version 3.5, VirtualCenter 2.5," Dec. 2007, Revision: 20071213, pp. 1-46, VMware, Inc., Palo Alto, CA, USA. |
Author Unknown, "Parallels Server Transporter Guide," Month Unknown, 2008, pp. 1- 101, Parallels Software International Inc. |
Author Unknown, "Virtual Machine Backup Guide: Esx Server 3.5, Esx Server 3i version 3.5, VirtualCenter 2.5," Nov. 2007, Revision 20071129, 78 pp., VMware, Inc., Palo Alto, Ca, Usa. |
Author Unknown, "Virtual Machine Mobility Planning Guide," Oct. 2007, Revision 20071018, 33 pages, VMware, Inc., Palo Alto, CA, USA. |
Author Unknown, "VMware Infrastructure 3 Primer: ESX Server 3.5, ESX Server 3i version 3.5, VirtualCenter 2.5," Nov. 2007, Revision: 20071129, 22 pages, VMware, Inc., Palo Alto, CA, USA. |
Author Unknown, iSCSI SAN Configuration Guide: ESX Server 3.5, ESX Server 3i version 3.5, VirtualCenter 2.5, Nov. 2007, Revision: 20071129, 134 pages, VMware, Inc., Palo Alto, CA, USA. |
Portions of Prosecution history of U.S. Appl. No. 12/421,610, filed Jul. 3, 2013, Keagy, John Martin, et al. |
Portions of prosecution history of U.S. Appl. No. 12/421,611, filed Jun. 7, 2012 Keagy, John Martin, et al. |
Portions of prosecution history of U.S. Appl. No. 12/421,612, filed Feb. 7, 2012 Keagy, John Martin, et al. |
Portions of prosecution history of U.S. Appl. No. 12/421,613, filed Jan. 17, 2013 Keagy, John Martin, et al. |
Portions of prosecution history of U.S. Appl. No. 12/421,614, filed Jan. 3, 2013 Keagy, John Martin, et al. |
U.S. Appl. No. 11/834,722, filed Aug. 7, 2007, Lappas, Paul, et al. |
U.S. Appl. No. 11/834,732, filed Aug. 7, 2007, Lappas, Paul, et al. |
U.S. Appl. No. 11/834,768, filed Aug. 7, 2007, Lappas, Paul, et al. |
U.S. Appl. No. 12/421,597, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,599, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,604, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,605, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,608, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,610, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,612, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,613, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/421,614, filed Apr. 9, 2009, Keagy, John Martin, et al. |
U.S. Appl. No. 12/652,730, filed Jan. 5, 2010, Lappas, Paul, et al. |
U.S. Appl. No. 12/982,487, filed Dec. 30, 2010, Lappas, Paul, et al. |
U.S. Appl. No. 13/225,372, filed Sep. 2, 2011, Lappas, Paul, et al. |
U.S. Appl. No. 13/316,431, filed Dec. 9, 2011, Lappas, Paul, et al. |
U.S. Appl. No. 13/607,642, filed Sep. 9, 2012, Lappas, Paul et al. |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9798560B1 (en) | 2008-09-23 | 2017-10-24 | Gogrid, LLC | Automated system and method for extracting and adapting system configurations |
US11442759B1 (en) | 2008-09-23 | 2022-09-13 | Google Llc | Automated system and method for extracting and adapting system configurations |
US10684874B1 (en) | 2008-09-23 | 2020-06-16 | Open Invention Network Llc | Automated system and method for extracting and adapting system configurations |
US10365935B1 (en) | 2008-09-23 | 2019-07-30 | Open Invention Network Llc | Automated system and method to customize and install virtual machine configurations for hosting in a hosting environment |
US9870271B1 (en) | 2010-05-20 | 2018-01-16 | Gogrid, LLC | System and method for deploying virtual servers in a hosting system |
US8799477B2 (en) * | 2010-06-30 | 2014-08-05 | International Business Machines Corporation | Hypervisor selection for hosting a virtual machine image |
US20140047442A1 (en) * | 2010-06-30 | 2014-02-13 | International Business Machines Corporation | Hypervisor selection for hosting a virtual machine image |
US9288117B1 (en) | 2011-02-08 | 2016-03-15 | Gogrid, LLC | System and method for managing virtual and dedicated servers |
US10305743B1 (en) | 2011-02-08 | 2019-05-28 | Open Invention Network Llc | System and method for managing virtual and dedicated servers |
US11368374B1 (en) | 2011-02-08 | 2022-06-21 | International Business Machines Corporation | System and method for managing virtual and dedicated servers |
US9647854B1 (en) | 2011-06-28 | 2017-05-09 | Gogrid, LLC | System and method for configuring and managing virtual grids |
US9087071B2 (en) * | 2011-08-03 | 2015-07-21 | Amazon Technologies, Inc. | Gathering transaction data associated with locally stored data files |
US20130173540A1 (en) * | 2011-08-03 | 2013-07-04 | Amazon Technologies, Inc. | Gathering transaction data associated with locally stored data files |
US20140020105A1 (en) * | 2012-07-10 | 2014-01-16 | William Nix | Distributing Software Images with Mixed Licensing |
US9851995B2 (en) | 2015-02-26 | 2017-12-26 | Red Hat Israel, Ltd. | Hypervisor adjustment for host transfer between clusters |
US10432650B2 (en) | 2016-03-31 | 2019-10-01 | Stuart Staniford | System and method to protect a webserver against application exploits and attacks |
US11055115B1 (en) * | 2018-08-09 | 2021-07-06 | Parallels International Gmbh | Virtual machine conversion in distributed system of remote desktops |
TWI706365B (en) * | 2019-01-14 | 2020-10-01 | 和碩聯合科技股份有限公司 | Simulation management system and calculation method thereof |
US11095735B2 (en) | 2019-08-06 | 2021-08-17 | Tealium Inc. | Configuration of event data communication in computer networks |
US11671510B2 (en) | 2019-08-06 | 2023-06-06 | Tealium Inc. | Configuration of event data communication in computer networks |
US11146656B2 (en) | 2019-12-20 | 2021-10-12 | Tealium Inc. | Feature activation control and data prefetching with network-connected mobile devices |
US11622026B2 (en) | 2019-12-20 | 2023-04-04 | Tealium Inc. | Feature activation control and data prefetching with network-connected mobile devices |
US11409619B2 (en) | 2020-04-29 | 2022-08-09 | The Research Foundation For The State University Of New York | Recovering a virtual machine after failure of post-copy live migration |
US11340940B2 (en) | 2020-07-02 | 2022-05-24 | Bank Of America Corporation | Workload assessment and configuration simulator |
US11983079B2 (en) | 2022-08-08 | 2024-05-14 | The Research Foundation For The State University Of New York | Recovering a virtual machine after failure of post-copy live migration |
Also Published As
Publication number | Publication date |
---|---|
US8364802B1 (en) | 2013-01-29 |
US8219653B1 (en) | 2012-07-10 |
US8468535B1 (en) | 2013-06-18 |
US20220357967A1 (en) | 2022-11-10 |
US8352608B1 (en) | 2013-01-08 |
US8418176B1 (en) | 2013-04-09 |
US8656018B1 (en) | 2014-02-18 |
US11442759B1 (en) | 2022-09-13 |
US9798560B1 (en) | 2017-10-24 |
US10289436B1 (en) | 2019-05-14 |
US8458717B1 (en) | 2013-06-04 |
US8453144B1 (en) | 2013-05-28 |
US10684874B1 (en) | 2020-06-16 |
US10365935B1 (en) | 2019-07-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11442759B1 (en) | Automated system and method for extracting and adapting system configurations | |
US20230325237A1 (en) | Methods and apparatus to automate deployments of software defined data centers | |
US10445147B1 (en) | System and method for deploying virtual servers in a hosting system | |
US10467035B2 (en) | Performing configuration and operating system identification for virtual machine images | |
US9052940B2 (en) | System for customized virtual machine for a target hypervisor by copying image file from a library, and increase file and partition size prior to booting | |
US10020991B2 (en) | System, method, and computer program product for automatically capturing configuration information for a plurality of computer components, such as a converged infrastructure | |
US9471352B1 (en) | Capability based placement | |
US20190068458A1 (en) | Methods and apparatus to generate user interface virtual resource provisioning request forms | |
US9652263B2 (en) | Migrating servers into a secured environment | |
US11709692B2 (en) | Hot growing a cloud hosted block device | |
US9959136B2 (en) | Optimizations and enhancements of application virtualization layers | |
US10133749B2 (en) | Content library-based de-duplication for transferring VMs to a cloud computing system | |
US9992072B1 (en) | System, method, apparatus, and computer program product for enabling management of a plurality of computer components using a software framework | |
US11561787B2 (en) | Application invocation on specified operating system version | |
Copeland et al. | Getting started with Azure virtual machines | |
Penberthy et al. | Containers | |
Malik | Building Clouds with Windows Azure Pack | |
Sanduja et al. | Cloud computing for pharmacometrics: using AWS, NONMEM, PsN, Grid Engine, and Sonic | |
Montgomery et al. | CCNA Cloud Complete Study Guide: Exam 210-451 and Exam 210-455 | |
Dandu | Data Center Server Virtualization Solution Using Microsoft Hyper-V | |
Guchu | Implementation of cloud infrastructure using open source software | |
Ohri | Setting Up R on the Cloud | |
Barrett et al. | Deploying Virtualized Mainframe Environments | |
Barrett et al. | Constructing the z/VM Environment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: PARTNERS FOR GROWTH III, L.P., CALIFORNIAFree format text: SECURITY AGREEMENT;ASSIGNOR:GOGRID, LLC;REEL/FRAME:030602/0657Effective date: 20130611 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOGRID INVESTORS LLC, NEW YORKFree format text: SECURITY INTEREST;ASSIGNOR:GOGRID, LLC;REEL/FRAME:032970/0909Effective date: 20140418 |
|
AS | Assignment |
Owner name: TORONTO DOMINION (TEXAS) LLC, SUCCESSOR BY ASSIGNMFree format text: PATENT SECURITY AGREEMENT (FIRST LIEN);ASSIGNOR:GOGRID, LLC;REEL/FRAME:034793/0448Effective date: 20150116Owner name: TORONTO DOMINION (TEXAS) LLC, SUCCESSOR BY ASSIGNMFree format text: PATENT SECURITY AGREEMENT (SECOND LIEN);ASSIGNOR:GOGRID, LLC;REEL/FRAME:034793/0483Effective date: 20150116Owner name: GOGRID, LLC, CALIFORNIAFree format text: RELEASE OF PATENT SECURITY INTEREST RECORDED AT REEL 032970/FRAME 0944;ASSIGNOR:GOGRID INVESTORS LLC;REEL/FRAME:034793/0438Effective date: 20150116Owner name: GOGRID, LLC, CALIFORNIAFree format text: RELEASE OF PATENT SECURITY INTEREST RECORDED AT REEL 030602/FRAME 0657;ASSIGNOR:PARTNERS FOR GROWTH III, L.P.;REEL/FRAME:034793/0396Effective date: 20150116 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOGRID, LLC, AS GRANTOR, NEW JERSEYFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:TORONTO DOMINION (TEXAS) LLC (SUCCESSOR BY ASSIGNMENT TO MORGAN STANLEY SENIOR FUNDING, INC.);REEL/FRAME:044150/0497Effective date: 20171115Owner name: GOGRID, LLC, AS GRANTOR, NEW JERSEYFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:TORONTO DOMINION (TEXAS) LLC (SUCCESSOR BY ASSIGNMENT TO MORGAN STANLEY SENIOR FUNDING, INC.);REEL/FRAME:044150/0514Effective date: 20171115 |
|
AS | Assignment |
Owner name: CITIBANK, N.A., AS COLLATERAL AGENT, NEW YORKFree format text: SECURITY AGREEMENT;ASSIGNOR:GOGRID, LLC;REEL/FRAME:044895/0784Effective date: 20171214 |
|
AS | Assignment |
Owner name: SERVEPATH, LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KEAGY, JOHN MARTIN;CARR, JEFFERY;LAPPAS, PAUL;SIGNING DATES FROM 20090730 TO 20090817;REEL/FRAME:047123/0457Owner name: GOGRID, LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:SERVEPATH, LLC;REEL/FRAME:047775/0403Effective date: 20100723 |
|
AS | Assignment |
Owner name: OPEN INVENTION NETWORK LLC, NORTH CAROLINAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOGRID, LLC;REEL/FRAME:047895/0811Effective date: 20181214 |
|
AS | Assignment |
Owner name: GOGRID, LLC, NEW JERSEYFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:050224/0321Effective date: 20181214Owner name: DATAPIPE, INC., NEW JERSEYFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:050224/0321Effective date: 20181214 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:OPEN INVENTION NETWORK LLC;REEL/FRAME:061766/0545Effective date: 20220803 |