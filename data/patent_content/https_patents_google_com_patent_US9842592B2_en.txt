FIELD
This disclosure relates to language models.
BACKGROUND
The use of speech recognition is becoming more and more common. As technology has advanced, users of computing devices have gained increased access to speech recognition functionality. Many users rely on speech recognition in their professions and in other aspects of daily life.
SUMMARY
In some implementations, language models may use information about non-linguistic context to increase the accuracy of automatic speech recognition. Information about the environment or situation that a user is in, as well as information about the user, can be used to determine which words it is likely for a user to have spoken. In general, users may be more likely to speak certain words in some environments than in other environments. For example, when a user is located in New York City, it may be more likely for the user to say the name of a restaurant located in New York City than to say the name of a restaurant located in a different city. As another example, users may commonly use a first set of words or phrases when using an application for composing a short message service (SMS) text message, but users may use a different set of words and phrases when using a map application.
A language model may use information about linguistic context, e.g., previously spoken words, as well as non-linguistic context, e.g., an application being used, a geographical location, an attribute of the user, and so on. The language model may be trained using information about words that users have spoken in various different situations or environments. When provided non-linguistic context information about the situation of a particular user, the language model may be able to estimate which words were spoken, with greater accuracy than language models that do not take into account non-linguistic context. In some implementations, the language model may be a log-linear model. In some implementations, the language model may be a maximum entropy model. In some implementations, the language model may be a support vector machine, a neural network, a set of classifiers, or other type of model. In general, the language model may be implemented as any appropriate model that provide output that indicates a probability of a word or other lexical item given a set of contextual feature values.
In a general aspect, a method includes: receiving context data indicating non-linguistic context for an utterance; generating, based on the context data, feature scores for one or more non-linguistic features; providing the feature scores for the non-linguistic features to a language model trained to process feature scores for non-linguistic features; receiving output from the language model; and determining a transcription for the utterance using the output of the language model.
Other implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
Implementations may include one or more of the following features. For example, providing the feature scores for the non-linguistic features to the language model comprises providing the feature scores for the non-linguistic features to a log-linear language model trained to process scores for non-linguistic features; receiving output from the language model comprises receiving output from the log-linear language model; and determining the transcription for the utterance using the output of the language model comprises determining a transcription for the utterance using the output of the log-linear language model. Receiving the context data indicating the non-linguistic context of the utterance comprises receiving context data indicating an application through which the utterance is entered; and generating the feature scores for the one or more non-linguistic features comprises generating one or more feature scores indicating whether the utterance is entered using a particular application or an application in a particular class of applications. Generating the one or more feature scores indicating whether the utterance is entered using a particular application or an application in a particular class of applications comprises determining a binary value for each of a plurality of different applications, each binary value indicating whether the utterance was entered using the corresponding application. Receiving the context data indicating the non-linguistic context of the utterance comprises receiving context data indicating a gender of a speaker of the utterance; and generating the feature scores for the one or more non-linguistic features comprises generating one or more feature scores indicating the gender of a speaker of the utterance. Receiving the context data indicating the non-linguistic context of the utterance comprises receiving context data indicating a geographical location where the utterance was spoken; and generating the feature scores for the one or more non-linguistic features comprises generating one or more feature scores indicating the geographical location where the utterance was spoken.
Implementations may include one or more of the following features. For example, a method may include receiving a set of candidate transcriptions for the utterance. Determining the transcription for the utterance using the output of the language model comprises: generating one or more scores for each of the candidate transcriptions in the set of candidate transcriptions based on the output of the language model; and selecting one of the candidate transcriptions based on the scores for the candidate transcriptions. A method may include receiving a word lattice. Determining the transcription for the utterance using the output of the language model comprises: determining, based on the output of the language model, one or more scores corresponding to elements of the word lattice; and determining a transcription for the utterance based on the one or more scores corresponding to elements of the word lattice. A method may include receiving data indicating a linguistic context for the utterance; determining feature scores for one or more linguistic features based on the data indicating the linguistic context; and providing the scores for the one or more linguistic features to the language model. Receiving the output from the language model comprises receiving output from the language model that is based on (i) the scores for the non-linguistic features and (ii) the scores for the linguistic features. Determining the feature scores for the one or more linguistic features comprises determining n-gram scores based on one or more words spoken prior to the utterance.
Advantageous implementations can include one or more of the following features. The accuracy of speech recognition may be increased by taking into account the situation of the user that is speaking. A single language model may be trained to provide probability scores for multiple different environments and situations. A language model may provide estimates using linguistic and non-linguistic contextual information.
The details of one or more implementations are set forth in the accompanying drawings and the description, below. Other potential features and advantages of the disclosure will be apparent from the description and drawings, and from the claims.
BRIEF DESCRIPTION OF THE DRAWINGS
FIG. 1 is a diagram that illustrates an example of a system for speech recognition with a language model using non-linguistic context.
FIG. 2 is a diagram that illustrates examples of feature scores.
FIGS. 3A and 3B are diagrams that illustrate examples of word lattices.
FIG. 4 is a flow diagram that illustrates an example of a process for using a language model that uses non-linguistic context.
FIG. 5 is a flow diagram illustrating an example of a process for training a language model.
FIG. 6 is a diagram illustrating examples of scores used for training a language model.
Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION
FIG. 1 is a diagram that illustrates an example of a system 100 for speech recognition with a language model using non-linguistic context. The system 100 includes a client device 110, a computing system 120, and a network 118. In the example, the computing system 120 receives audio data 112 and non-linguistic context data 116 from the client device 110. The computing system 120 provides scores determined from the non-linguistic context data 116 to a language model 150, which provides output that the computing system 120 uses to determine a transcription for the audio data 112. The figure shows stages (A) to (H) which illustrate a flow of data.
The client device 110 can be, for example, a desktop computer, a laptop computer, a cellular phone, a smart phone, a tablet computer, a music player, an e-book reader, a wearable computer, a navigation system, or other device. The functions performed by the computing system 120 can be performed by individual computer systems or can be distributed across multiple computer systems, e.g., one or more server systems. The network 118 can be wired or wireless or a combination of both, and may include private networks and/or public networks, such as the Internet.
In some implementations, a system receives audio data indicating characteristics of an utterance and context data indicating non-linguistic context of the utterance. Scores for one or more non-linguistic features can be generated based on the context data. The scores can be provided to a language model trained to estimate likelihoods based at least in part on scores for non-linguistic features. Output of the language model can be received and used to determine a transcription for the utterance. In some implementations, the language model is a log-linear model. In some implementations, the language model is a maximum entropy model, a support vector machine model, a neural network, a set of classifiers, or another type of model.
In the example of FIG. 1, during stage (A), a user 102 speaks and the client device 110 detects the utterance 104 of the user 102. For example, the client device 110 may record the utterance 104 using a microphone. The user 102 may provide the utterance 104 as voice input to any of a variety of applications, including, for example, an e-mail application, a calendar application, a mapping or navigation application, and so on. Thus, the utterance 104 may represent any of a variety of types of input, for example, a query, a message recipient, the body of a message, a voice command, an address, a phone number, and so on.
In the illustrated example, the user 102 is dictating the contents of an e-mail message while a “Mail” application is running on the client device 110. The user 102 previously entered the text “Let's meet at” as part of the message, and the utterance 104 includes the words “Hermosa beach” as further input to add to the message.
During stage (B), the client device 110 collects information and sends information to the computing system 120 over the network 118. The information may be sent with, for example, a request for a transcription of the utterance. For example, the client device 102 sends audio data 112 for the utterance 104 to the computing system 120. The audio data 112 may be, for example, a recording of the utterance 104, or information derived from the detected utterance 104, such as filterbank energy values, mel-frequency cepstral coefficients (MFCCs), or scores for other acoustic features.
The client device 110 may also send linguistic context data 114 that indicates a linguistic context for the utterance 104. For example, the client device 110 may provide data that indicates the words that the utterance 104 follows. In the illustrated example, the linguistic context data 114 indicates the words “Let's meet at” that immediately precede the utterance 104. In some implementations, the linguistic context data 114 provides a specific amount of text, for example, the previous one, two, three, five, or ten words, or the text recognized within a predetermined amount of time. The linguistic context may include words that were previously spoken by the user and are recognized, and/or text that was entered or accessed in another manner. For example, a user could open a text file, place a cursor at a particular position in the text, and begin speaking to insert additional text. Some amount of text before the cursor may be provided as linguistic context, regardless of how the text in the file was entered.
The client device 110 may also determine and send non-linguistic context data 116 to indicate a non-linguistic context for the utterance 104. The non-linguistic context data may indicate, for example, characteristics of the environment in which the utterance 104 is spoken. The non-linguistic context data 104 can indicate factors related to the physical environment of the user 102 or client device 110, such as geographical location, time, temperature, weather, or ambient noise. The non-linguistic context data 104 can provide information about the physical state of the client device 110, for example, whether the device 110 is moving or stationary, the speed of movement of the device 110, whether the device 110 is being held or not, a pose or orientation of the device 110, whether or not the device 110 is connected to a docking station, and/or the type of docking station to which the client device 110 is connected. The non-linguistic context data 104 can provide information about the operating state of the client device 110, for example, an identifier for an application running on the client device 110, or a category or classification for the application to which that the utterance 104 was provided as input. The non-linguistic context data 104 can also indicate information about the user 102 that spoke the utterance, for example, a user identifier, whether the user is male or female, or other information from a user profile for the user.
In the illustrated example, the client device 110 determines its location, for example, using a global positioning system (GPS) module or other techniques, and determines that the client device 110 is located in the city of Los Angeles. The client device 110 also determines that the utterance 104 was recorded as input to a mail application running on the client device 110. The client device 110 provides data indicating the location, e.g., “Los Angeles,” and the active application, e.g., the “Mail” application, to the computing system 120 as non-linguistic context data 116. The client device also provides the audio data 112 and the linguistic context data 114 to the computing system.
During stage (C), the computing system 120 uses a speech recognizer module 130 to determine candidate transcriptions 135 for the utterance 104. The candidate transcriptions 135 may be provided as, for example, a list, a word lattice, or in other forms. The candidate transcriptions 135 may be scored or ranked to indicate which candidate transcriptions 135 the speech recognizer module 130 estimates to be most likely to be correct transcriptions. In the illustrated example, the candidate transcriptions 135 represent a set of highest ranking or most likely transcriptions, as estimated by the speech recognizer 130. This set can be an n-best list, including, for example, the top 3, 5, 10, 25, or other integer number of candidate transcriptions.
In some implementations, the speech recognizer module 130 uses an acoustic model and a language model to identify the candidate transcriptions 135. The models used by the speech recognizer module 130 may or may not use non-linguistic context data to determine candidate transcriptions. Accordingly, in some instances, the candidate transcriptions 135 may be determined based on the audio data 112 and the linguistic context data 114, without being influenced by the non-linguistic context data 116. Another language model may use information about the non-linguistic context to re-score or re-rank the candidate transcriptions 135 to improve accuracy. In some implementations, the speech recognizer module 130 may use the non-linguistic context data 116 to identify and/or score the candidate transcriptions 135.
During stage (D), the computing system 120 uses a feature extraction module 140 to determine scores 145 for various different features. For example, the feature extraction module 140 can determine which of various linguistic features and/or non-linguistic features should be set as being active for a particular utterance. An example of determining the scores 145 determined by the feature extraction module 140 is shown in FIG. 2.
FIG. 2 is a diagram that illustrates examples of feature scores 145. The linguistic context data 114 can be used to determine scores for linguistic features 210. The non-linguistic context data 116 can be used to determine scores for non-linguistic features 220. In the example, each of the feature scores 145 is a binary value that indicates whether the corresponding feature describes the environment in which the utterance 104 is spoken. The feature scores can be organized as one or more feature vectors. In the example, scores for linguistic features 210 and scores for non-linguistic features 220 are included together in a context vector. The feature scores 145 may be determined based on information received from the client device 110, or from other information, such as information from other devices and information stored at or accessible to the computing system 120. The feature scores 145 may be values that correspond to a predetermined set of features used to train the language model 150. For example, each value in the vector can represent a score for a particular predetermined contextual feature, with the scores being arranged in the vector in the same order or arrangement that was used during training.
In the example, each of the feature scores 145 is a binary value, where a value of “1” indicates that the data from the client device 110 indicates that the feature corresponding to the feature score is likely part of the context for the utterance 104. A value of “0” may indicate that the corresponding feature is likely not part of the context in which the utterance 104 is spoken, or that sufficient information is not available to confirm whether the feature reflects the current context. Although the illustrated example uses binary values as feature scores 145, other values may be used. For example, different values may indicate different estimates or likelihoods that different features describe the current context.
The feature scores 145 include a score for each of a set of linguistic features 210, which can represent, for example, characteristics of text that the utterance 104 occurs after. For example, the scores for linguistic features 210 may indicate one or more words that occur in sequence prior to the words of the utterance 104. The linguistic features 210 may include n-gram features. For example, a unigram feature may indicate a whether a particular word occurs immediately before the words in the utterance 104. A bigram feature may indicate whether a particular sequence of two words occurs before the utterance 104. A trigram feature may indicate whether a particular sequence of three words occurs before the utterance 104. Scores may be determined for n-gram features for any appropriate value of n, and may include scores for multiple values of n, such as a combination of unigram, bigram, and trigram features. In some implementations, linguistic features may indicate other information regarding the lexical characteristics of prior words, such as the part of speech of one or more prior words, or whether a prior word includes a particular prefix, suffix, or other component.
In the illustrated example, each of the linguistic features 210 is a unigram feature, and the corresponding score indicates whether the indicated word is the word preceding the utterance 104. The feature score for the unigram “at” is set to a value of “1” to indicate that the word “at” occurs immediately before the position where the transcription of the utterance 104 will be entered. The scores for all other unigram features are set to “0,” since none of these other words is the word that precedes the utterance 104. In some implementations, every word in a dictionary may correspond to a different unigram feature. In some implementations, unigram features for only a subset of recognized words may be used.
For n-gram features for values of n greater than one, each n-gram feature may represent a different combination of words. A different n-gram feature may be used for each word combination that occurs in a set of example text, or for each word combination that occurs with at least a minimum frequency in the example text. Given the linguistic context data 114, a bigram feature for the word sequence “meet at” would be set to a value of “1,” and all other bigram features would be set to “0.” Similarly, a trigram feature corresponding to the word sequence “let's meet at” would be set to “1,” and all other trigrams would be set to zero.
The feature scores 145 can also include a set of scores for non-linguistic features 220, which can represent, for example, the physical environment in which the utterance 104 is spoken, or the operating state of the client device 110, or characteristics of the user 102, or other features other than words or phrases that the utterance 104 follows. The scores for the non-linguistic features 220 can be separate and independent from the text or spoken words that precede the utterance. Examples of non-linguistic features 220 include application features 222, location features 224, and user features 226.
The application features 222 may indicate characteristics of an application that is active on the client device 110, for example, the application to which the utterance 104 is provided as input. In the example, each of the application features 222 corresponds to a specific application, and the score indicates whether the application is active. The non-linguistic context data 116 can include an application identifier 230 for the active application. A predetermined set of applications can each have a different corresponding application identifier. In the example, the application identifier 230 indicates that a “Mail” application is active, so the score for the “Mail” application feature is set to “1.” The scores for the other application features 222, which represent applications that are not indicated to be active, are set to “0.” In some implementations, some application features 222 may indicate categories or classes of applications in addition to or instead of specific applications. For example, one application feature 222 may indicate whether the active application is a web browser, without indicating which particular web browser is used. Another application feature 222 may indicate whether the active application is classified as an e-mail application, without indicating which specific e-mail application is used.
The location features 224 may indicate a geographical location of the user and/or the client device 110. For example, different location features 224 may each indicate whether the client device 110 is located in a particular country, state, county, city, or other geographical region. In the example, each of the location features 224 indicates whether the utterance 104 is entered at a particular city. The non-linguistic context data 116 includes a location identifier 232 that indicates that the client device 110 is located in the city of “Los Angeles,” so the score for the “Los Angeles” location feature is set to “1.” Since the user 102 is not in any of the other cities, the remainder of the location features 224 are set to “0.”
The user features 226 indicate characteristics of the user 102 that is believed to have spoken the utterance 104, e.g., a user that is logged in at the client device 110, or the owner of the client device 110. In the example, the user features 226 indicate whether the user 102 is male or female. The non-linguistic context data 116 indicates that the user 102 is male, and so the score for the “male” feature is set to “1.” Other user features 226 may indicate other user attributes. In some implementations, the non-linguistic context data 116 includes a user identifier 236 that corresponds to the user 102. The user identifier 236 may be used to access a user profile, a search query history, or a browsing history for the user 102 to determine other scores. For example, in some implementations, user scores may indicate whether the user 102 has previously submitted a search query with certain words or phrases, or whether the user 102 has searched for or browsed web pages related to various topics. Various features may correspond to different categories or topics of searches, such as “sports,” “shopping,” “food,” etc.
In some implementations, non-linguistic features 220 may indicate personalized information for a user 102, such as the names in a phone contact list or address book, names or numbers in a list of frequently called list, addresses stored as favorite locations, and so on. A client device 110 may provide, or the computer system 120 may store, information indicating names in the frequently called list or other data.
Other non-linguistic features 220 may additionally or alternatively be used. For example, some non-linguistic features could each correspond to a domain name, e.g., “example.com,” and the scores may indicate whether the user is currently visiting a web page in the indicated domain. As another example, non-linguistic features may indicate an operating system running on the client device 110, or a device type of the client device 110, e.g., tablet computer, phone, laptop computer, etc. As another example, non-linguistic features may indicate a type of input field that the transcription of the utterance 104 will be entered into, e.g., whether the input field accepts an address, a name, a phone number, an e-mail address, a URL, a search query, etc. As another example, some non-linguistic features may indicate a task that a user is performing, such as dictating, composing a message, or shopping. In some implementations, non-linguistic context may include any information about the user 102, the client device 110, or the environment in which the utterance 104 is made, other than information that describes or is derived from the words that precede the utterance 104.
Referring again to FIG. 1, during stage (E), the feature scores 145 are provided as input to a language model 150. Based on the feature scores 145, the language model 150 provides a set of output values 155, which may indicate likelihoods that one or more words will occur in the current context. The language model 150 can be a model that has been trained to estimate the likelihood of a word or phrase occurring based on scores for linguistic and/or non-linguistic features. For example, the language model 150 can determine a posterior probability of a current word, e.g., the first word of the utterance 104, given information about the context for the utterance 104, which may include linguistic context, e.g., the prior words “Let's meet at,” and/or non-linguistic context, e.g., location, device state, application, user characteristics, etc. The features used to train the language model 150 can be the same linguistic features 210 and non-linguistic features 220 corresponding to the feature scores 145. In other words, the feature scores 145 are determined in stage (D) for the features that the language model 150 was trained to be able to process and use to determine word likelihoods.
The language model 150 may include a set of internal weights that represent the training state of the language model 150. These weights may indicate how various aspects of context make words more or less likely to occur. Typically, the weights in the language model 150 are set during training of the language model 150 and do not change during use of the language model. However, the weights are trained using examples of input from a variety of different users and different environments, so the language model 150 is able to estimate likelihoods of words occurring given may different types of linguistic and non-linguistic contexts.
In some implementations, the language model 150 is a log-linear model. Log-linear models may effectively take into account scores from large numbers of features and scores for features of multiple different types. For example, a log-linear model may be used to combine word n-gram feature scores with feature scores indicating physical environment, user characteristics, and other factors. In some implementations, log-linear models may provide greater efficiency or smaller storage requirements than, for example, hidden Markov models (HMMs) or other statistical models.
In some implementations, the language model 150 may be a maximum entropy model. Other types of models and other training techniques may additionally or alternatively be used. For example, support vector machines, neural networks, classifiers, and other types of models may be used to process various contextual features, including linguistic feature scores, non-linguistic feature scores, and/or other types of information. As an example, an integrated circuit or other device could implement a neural network to serve as a language model. As another example, a set of multiple classifiers could each be trained to process one or more feature scores, and a system could combine the outputs of the classifiers to indicate a probability of occurrence of a word or other lexical item. In general, any appropriate model may be used, where the model receives values for contextual features and provides output indicative of a likelihood of occurrence of a word based on the received values.
During training of the language model 150, as discussed further below, various weights or other parameters within the language model 150 can be set to indicate the impact that various feature scores have on the likelihood of a word occurring. For example, the language model 150 may be trained with data indicating that users have frequently entered names of locations, e.g., “gas station,” “theater,” and “school,” in a navigation application. The trained language model 150 may include weights so that when the feature scores 145 indicate that the user is using the navigation application, the language model 150 indicates an increased likelihood that the location names previously used in the navigation application may occur in the speech of the user 102. That is, when the navigation application is used, the likelihood that the language model 150 indicates for a word such as “theater” may be higher than the likelihood indicated if the user is not using the navigation application. As another example, training data may indicate which words are spoken most frequently at different locations, and the weights within the language model 150 can adjust for differences in likelihoods between different locations. When the location of the user 102 is indicated in the features scores 145, weights within the language model 150 can increase the likelihood for words frequently spoken at the user's location, and can decrease the likelihood for words infrequently spoken or not spoken at the user's location. As another example, since men and women may use certain words with different frequencies, the language model 150 may include weights that take into account the gender of the user 104 in estimating which word occurs in a sequence.
The output values 155 provided by the language model 150 may be, for example, scores indicating likelihoods of occurrence of different words given the context indicated by the feature scores 145. For example, the language model 150 may indicate a posterior probability P(y|X), or values from which the probability may be determined, where y represents a lexical item, such as a word, number, URL, or other lexical item, and X is a vector including the feature scores 145. The training of the language model allows the language model 150 to use the various feature scores to adjust probabilities according to the situation of the user 102. For example, the probability that a word is the name “Mike” may be greater if the feature scores 145 indicate that the name “Mike” is in the user's frequently called list than if the name is not in the list. As another example, the name of an athlete may be indicated to be more likely if the feature scores 145 indicate that one or more of the user's prior searches relate to the topic of sports than if prior searches are not related to the topic of sports. As another example, business names and addresses that are near the user 102 or were spoken by others near the location of the user 102 may have a higher probability than if the business names and addresses that are far from the location of the user 102 or are not frequently used by other users at the location of the user 102.
In some implementations, the language model 150 outputs a score for each of multiple words, for example, each of the different words at the beginning of the candidate transcriptions 135, e.g., “hair,” “her,” and “Hermosa.” The computing system 120 may then use the language model 150 to determine scores for the next words that occur in the candidate transcriptions, e.g., a score for “mousse” occurring after “hair,” a score for “mouse” occurring after “her,” a score for “mouse” occurring after “her,” and so on. For these additional words, the linguistic context has changed, e.g., “Let's meet at hair” rather than “Let's meet at.” To reflect the updated linguistic context, the computing system 120 may use the feature extraction module 140 to determine a new set of feature scores that are appropriate for the new context. In this manner, the computing system 120 may use the language model 150 to determine a score for each of the words in each of the candidate transcriptions 135, based on the particular words that each word follows and the non-linguistic context.
Typically, the environment in which the user 102 speaks does not change mid utterance, and so scores for non-linguistic features may remain the same for each word in the candidate transcriptions 135 in some instances. However, if factors such as location, the application in which a user is speaking, the field in which input is entered, or other contextual aspects change during dictation, the scores for non-linguistic features may be updated to reflect the different environment in which different words were entered. The client device 110 may provide updated non-linguistic context data when the non-linguistic context changes, and the computing system 120 may associate different non-linguistic contexts with different utterances or different portions of an utterance.
During stage (F), the computing system 120 uses a re-scoring module 160 to determine scores 165 for the different candidate transcriptions 135. For example, based on outputs from the language model 155 for each of the different words of the candidate transcriptions 135, the re-scoring module 160 determines a score 165 indicating a likelihood of occurrence of each candidate transcription 135 as a whole. For example, for the first candidate transcription, the re-scoring module may combine scores 155 from the language model 150 for the individual words “hair,” “mousse,” and “beach” to determine an overall score for the phrase “hair mousse beach.”
During stage (G), the computing system 120 selects a transcription for the utterance 104 based on the scores 165. For example, the computing system 120 may select the candidate transcription 135 having the score 165 that indicates the highest likelihood of occurrence.
In the illustrated example, the output of the language model 150 indicates that the phrase “Hermosa beach” is the candidate transcription 135 that is most likely to be correct. Although the initial ranking of the candidate transcriptions 135 did not indicate it to be the most likely transcription, the use of non-linguistic context data 116 allows the language model 150 to more accurately estimate the likelihood that it is the correct transcription. “Hermosa beach” is the name of a place near Los Angeles, and training data for the language model 150 indicated that users in Los Angeles are more likely than users at other places to say the phrase. Accordingly, the training for the language model 150 was trained “Hermosa beach” and other words spoken in Los Angeles a higher likelihood when a user is located in Los Angeles. Because the non-linguistic context data 116 indicated that the user 102 is located in Los Angeles, the language model 150 provided output indicating “Hermosa beach” has a high likelihood of being correct.
During stage (H), the computing system 120 provides the selected transcription to the client device 102. The client device 102 may insert the transcription in the application that is running, to complete the user's intended phrase, “Let's meet at Hermosa beach.”
In the example shown in FIG. 1, non-linguistic context data is used to re-score candidate transcriptions 135 that were determined without taking into account non-linguistic context data. In some implementations, the speech recognizer 130 may use a language model, such as the language model 150, that uses non-linguistic context data to select and rank the candidate transcriptions. In these implementations, a separate re-scoring process may not be needed.
In some implementations, the input to the language model 150 may include only feature scores for non-linguistic features. In other implementations, as shown in FIGS. 1 and 2, feature scores may be provided for both linguistic and non-linguistic features. In some implementations, a language model that determines likelihoods using both linguistic and non-linguistic features may have better accuracy than a language model that provides scores based on only linguistic features or only non-linguistic features.
FIG. 3A is an example of a word lattice 300 that may be provided by a speech recognizer system, such as the speech recognizer module 130 of FIG. 1. The word lattice 300 represents multiple possible combinations of words that may form different candidate transcriptions for an utterance.
The word lattice 300 includes one or more nodes 302 a-302 g that correspond to the possible boundaries between words. The word lattice 300 includes multiple edges 304 a-304 l for the possible words in the transcription hypotheses that result from the word lattice 300. In addition, each of the edges 304 a-304 l can have one or more weights or probabilities of that edge being the correct edge from the corresponding node. The weights are determined by the speech recognizer module system and can be based on, for example, a confidence in the match between the speech data and the word for that edge and how well the word fits grammatically and/or lexically with other words in the word lattice 300.
For example, initially, the most probable path through the word lattice 300 may include the edges 304 c, 304 e, 304 i, and 304 k, which have the text “we're coming about 11:30.” A second best path may include the edges 304 d, 304 h, 304 j, and 304 l, which have the text “deer hunting scouts 7:30.”
Each pair of nodes may have one or more paths corresponding to the alternate words in the various candidate transcriptions. For example, the initial most probable path between the node pair beginning at the node 302 a and ending at the node 302 c is the edge 304 c “we're”. This path has alternate paths that include the edges 304 a-304 b “we are” and the edge 304 d “deer”.
Weights for the edges 304 a-304 l may be determined using a language model that takes into account non-linguistic context. For example, a language model such as the language model 150 of FIG. 1 may be used to determine weights for each edge using information about, for example, a location an utterance was spoken, an application used, the user that spoke the utterance, or other non-linguistic context. The new or revised weights may be replace or be combined with, e.g., averaged or otherwise interpolated, with the initial weights for the edges 304 a-304 l. The re-scored lattice may then be used to select a transcription. Alternatively, a language model that uses non-linguistic context data may be used to determine the initial weights for the edges 304 a-304 l.
FIG. 3B is an example of a hierarchical word lattice 350 that may be provided by a speech recognizer system. The word lattice 350 includes nodes 352 a-352 l that represent the words that make up the various candidate transcriptions for an utterance. The edges between the nodes 352 a-352 l show that the possible candidate transcriptions include: (1) the nodes 352 c, 352 e, 352 i, and 352 k “we're coming about 11:30”; (2) the nodes 352 a, 352 b, 352 e, 352 i, and 352 k “we are coming about 11:30”; (3) the nodes 352 a, 352 b, 352 f, 352 g, 352 i, and 352 k “we are come at about 11:30”; (4) the nodes 352 d, 352 f, 352 g, 352 i, and 352 k “deer come at about 11:30”; (5) the nodes 352 d, 352 h, 352 j, and 352 k “deer hunting scouts 11:30”; and (6) the nodes 352 d, 352 h, 352 j, and 352 l “deer hunting scouts 7:30”.
Again, the edges between the nodes 352 a-352 l may have associated weights or probabilities based on the confidence in the speech recognition and the grammatical/lexical analysis of the resulting text. The weights for the edges between the nodes 352 a-352 l may be determined using information about non-linguistic context. In some implementations, a second set of weights may be determined to update initial weights with weights based on non-linguistic context.
In this example, “we're coming about 11:30” may currently be the best hypothesis and “deer hunting scouts 7:30” may be the next best hypothesis. One or more divisions 354 a-354 d can be made in the word lattice 350 that group a word and its alternates together. For example, the division 354 a includes the word “we're” and the alternates “we are” and “deer”. The division 354 b includes the word “coming” and the alternates “come at” and “hunting”. The division 354 c includes the word “about” and the alternate “scouts” and the division 354 d includes the word “11:30” and the alternate “7:30”.
FIG. 4 is a flow diagram that illustrates an example of a process 400 for using a language model that uses non-linguistic context. The process 400 may be performed by the computing system 120 of FIG. 1 or another system or device.
Audio data indicating characteristics of an utterance is received (402). For example, the audio data may include recorded audio including the utterance. As another example, the audio data may include scores for acoustic features that represent acoustic characteristics of the utterance.
Context data indicating non-linguistic context of the utterance is received (404). The context data may indicate, for example, a location the utterance was received, an application that is active on a device that detected the utterance, information about a user of the device that detected the utterance, personalized information stored on the device, such as calendar entries or a list of people called, or other information.
Scores for one or more non-linguistic features are generated based on the context data (406). As an example, the context data indicates an application through which the utterance is entered, or that the application belongs to a particular class or category. For example, to determine an application feature, an application identifier for an active application may be accessed, a feature corresponding to the application may be identified, and a feature score may be determined to indicate that the application is active. Feature scores may indicate whether the utterance is entered using a particular application or an application in a particular class of applications. As another example, the context data may indicate a gender of a speaker of the utterance, and the feature scores indicate the gender of the speaker. As another example, the context data may indicate a geographical location where the utterance was spoken, and the feature scores may indicate the geographical location. The context data may indicate names in a contact list or list of calls made or received, and the feature scores may indicate the names in the list. The context data may indicate a task that the user is performing, such as dictating, entering a URL, composing a message, entering an address, entering a query, etc., and the feature scores can indicate the task. The context data may indicate a type of input field that is active, and the features scores may indicate which type of input field is active. The context data may indicate one or more topics of prior searches or web browsing of the user, and the feature scores may indicate the one or more topics. Alternatively, the context data may provide a user identifier, such as a user account name or a value from a cookie, and a topic of prior searches or web browsing may be accessed from query or browsing logs using the user identifier. The context data may indicate a physical state of a device that detects the utterance, such as whether the device is moving, is held in a particular orientation, etc., and the context data may indicate the physical state of the device.
In some implementations, the feature scores are binary values that indicate whether a particular aspect of non-linguistic context describes the context in which the utterance is entered. For example, a different feature score may be determined for each of a set of applications. For each application, a binary value may be determined to indicate whether the utterance was entered using that particular application. Similarly, a different feature score may be determined for each of a predetermined set of locations, to indicate whether the utterance was spoken at the corresponding location.
The scores for the non-linguistic features are provided to a log-linear language model (408). The language model may be trained to process scores for non-linguistic features. For example, the language model may be trained to estimate likelihoods that a word occurs in a sequence of words based at least in part on scores for non-linguistic features. The language model may be trained based on text entered by multiple different users in various different contexts, e.g., users using different applications, users in different locations, users having different characteristics, and/or users performing different tasks.
Output from the log-linear language model is received (410). For example, the output may include a score for a word, where the score indicates an estimated likelihood that the word occurs given the non-linguistic features provided as input to the language model. The output may be based on input to the language model that indicates linguistic context for the utterance, for example, one or more words that precede the utterance
A transcription for the utterance is determined using the output of the log-linear language model (412). The output of the log-linear language model may be used to score one or more transcriptions, and a transcription may be selected based on the scores.
In some implementations, a set of candidate transcriptions, e.g., an n-best list, for the utterance is received, and scores for each of the candidate transcriptions in the set are determined based on the output of the log-linear language model. One of the candidate transcriptions may be selected based on the scores for the candidate transcriptions.
In some implementations, a word lattice indicating candidate transcriptions for the utterance is received. Scores corresponding to elements of the word lattice may be determined based on the output of the log-linear language model, and a transcription for the utterance may be selected based on the scores corresponding to elements of the word lattice.
In some implementations, data can be received that indicates a linguistic context for the utterance, e.g., one or more words occurring before the utterance. Feature scores may be determined for one or more linguistic features based on the data indicating the linguistic context. For example, word n-gram scores may be determined based on one or more words spoken or otherwise entered prior to the utterance. The scores for the one or more linguistic features may be provided to the log-linear language model. In some implementations, scores for linguistic features and non-linguistic features are provided together, for example, as part of the same vector of feature scores. The output received from the log-linear language model can be based on (i) the scores for the non-linguistic features and (ii) the scores for the linguistic features. For example, for a given word, the output may include a score that indicates likelihood of occurrence of the word given both the scores for the linguistic features and non-linguistic features.
FIG. 5 is a flow diagram illustrating an example of a process 500 for training a language model. The process 500 may be performed by one or more computing systems.
Training data for training a language model is obtained (502). In some implementations, unsupervised user input is collected from different users. To train a language model for use in speech recognition, spoken inputs may be collected from various users and used as training data. For example, the training data may include utterances entered by different users over the normal course of using various applications or performing various tasks. In some implementations, the training data may include data entered through multiple input modalities, including, for example, spoken input, typed input, or other forms of input.
Non-linguistic context data for the training data is obtained (504). For example, the non-linguistic context data can be metadata or other information that indicates characteristics of the environment in which the utterances or text samples in the training data were entered. The non-linguistic context data may indicate, for example, which applications users used to enter their utterances. As another example, the non-linguistic context data may indicate a location of a user or a device when utterances were spoken. Different contextual information may be available for different portions of the training data. For example, the application used may be known for some training data and not for other training data.
In some implementations, it may be advantageous to use at least some training data where some non-linguistic context is not indicated, which may improve robustness and accuracy when the model is used with inputs that do not provide non-linguistic context data. For example, some training data may not have any corresponding application identified, and so examples for training may have no application identified. Those examples may help the training process create model weights that can accurately provide estimates for input sets that do not indicate an application.
Transcriptions are generated for the training data (506). In some implementations, an automatic speech recognizer may be used to determine likely transcriptions for utterances in the training data. In some implementations, transcriptions may be determined from logs of previously transcribed inputs.
A set of features are selected (508). The features may include linguistic features and non-linguistic features. The linguistic features may include, for example, word n-gram features. In some implementations, a different unigram feature may be used for each word in a vocabulary used to train the language model. Bigram features, trigram features, or other n-gram features may also be selected. For example, an n-gram feature may be selected for each n-gram that occurs in the training data at least a predetermined number of times.
The non-linguistic features may indicate, for example, different applications, locations, user attributes, or any other appropriate aspects of non-linguistic context. For example, the training data may be evaluated to determine the most frequently used applications. A different feature may be selected to represent each of a predetermined number of the most frequently used applications, e.g., the 25, 50, or 100 most commonly used applications. As another example, the most frequent locations indicated by the non-linguistic context data may be identified. A different feature may correspond to each city within the set of most frequent locations. In a similar manner, sets of features, which may be binary features, may be selected for all appropriate contextual factors that the model will be trained to use.
In some implementations, the features used to train a language model and to provide as input to a trained model may indicate the presence of two or more contextual factors. For example, a feature could indicate the presence of two different non-linguistic factors, e.g., a value of “1” for a single feature could indicate (i) that an application identifier corresponds to a mail application and (ii) that the user is in New York City. A feature could represent a combination of a particular linguistic factor together with a non-linguistic contextual factor. For example, a single feature could correspond to the prior word spoken being “park” and the current application being a map application. Other combinations of contextual information in features, including features representing three or more aspects of linguistic and/or non-linguistic context may be used.
Referring again to FIG. 5, language model weights or other parameter values are determined (510). From the training data, feature vectors are determined. For example, from an utterance transcribed as “the cat is black,” one feature vector may indicate the occurrence of the word “the” at the beginning of a phrase, another feature vector may indicate the occurrence of “cat” after the word “the,” another feature vector may indicate the occurrence of the word “is” after the word “cat,” and so on. Each feature vector includes feature scores for all of the selected features to indicate the context in which the word occurred. A different example feature vector may be determined for each transcribed word in each utterance instance in the set of training data.
Using the feature vectors extracted from the training data, the model is trained to model the probability distribution of the word occurrences in the training data. For example, a log-linear model may be trained using a stochastic gradient descent technique using characteristics of the training data. The posterior probability distribution of the training data may be modeled directly, using unsupervised spoken data, such as output of a speech recognition system, and/or data typed by users.
In some implementations, a different weight is included in the language model for each word in the vocabulary of the language model with respect to each one of the selected features. For example, if a language model has a vocabulary of 10,000 words and 15,000 contextual features were selected, the total number of weights in the language model would be 10,000*15,000=150,000,000 weights. As a result, the effect of any of the selected features with respect to any of the words in the vocabulary may be determined. In some implementations, the language model may include fewer weights, for example, to reduce space or computation requirements, or to remove weights for unlikely words or unlikely combinations of words and contexts. An example of weights of a language model is shown in FIG. 6.
In some implementations, a plurality of different models may each be trained in parallel using different subsets of the training data. The parameters of the various models may be adjusted in various iterations. In some implementations, the models may be adjusted using various examples from the training data until the parameters converge, reach a threshold level of similarity, or meet other desired criteria. The weights of different models may be combined, e.g., averaged, at one or more iterations until a final set of weights for the model is determined.
In some implementations, a log-linear model is trained to provide a probability of occurrence any particular word, y, in a vocabulary given a vector of input feature scores, x, and using the language model weights, w, determined during training of the language model. The probability may satisfy Equation (1), below:
In Equation (1), Y is a finite set of lexical items such as the set of words or other lexical items in the vocabulary, y is a particular item from the set Y, x is a feature score vector indicating the feature scores for a particular context, w is a parameter vector indicating weights of the trained language model, and f(x, y) is a function that maps a combination of a lexical item and context to a vector.
In some implementations, the output of the function f(x, y) represents the set of input feature scores, x, concatenated or otherwise combined with one or more scores that indicate which lexical item, y, is being predicted. For example, a second vector can be determined so that it includes a score of “1” for the lexical item for which the probability estimate is desired, and a score of “0” is included for every other lexical item in the vocabulary of the language model. The second vector may be combined with the feature score vector, x, to form the output vector of function f(x, y). Other techniques for the function f(x, y) may additionally or alternatively be used. In some implementations, the output of the function f(x, y) may include a value corresponding to each weight in the language model. For example, the output vector may include a score for the particular word to be predicted with respect to each linguistic and non-linguistic feature, and a score of zero for every other word in the vocabulary with respect to every linguistic and non-linguistic feature.
As discussed above, other types of models besides log-linear models may additionally or alternatively be used. For example, the process 500 may be used to train a support vector machine, a neural network, one or more classifiers, or another type of model, using appropriate training algorithms.
FIG. 6 is a diagram illustrating aspects of training a language model. In the example, a set of training data 610 includes voice query application user input 612, map application user input 614, and SMS application user input 616. The training data 610 is transcribed, and feature score vectors 620 are generated to represent examples of word usage in the training data 610. For example, each feature score vector 620 may represent a particular instance of a word occurring in a particular utterance. Each feature score vector 620 may include a score to indicate the particular word that the feature score vector 620 represents, as well as contextual feature scores for linguistic features, e.g., indicating one or more preceding words, and scores for non-linguistic features, e.g., indicating a location, application, user attribute, or other context.
During training of the language model, the various examples of language usage indicated by the feature score vectors 620 are used to determine weights 630 for the language model. The weights are set through one or more training algorithms, which may optimize the weights to reflect the frequency that combinations of words and contexts occur in the training data 610.
In the example, the language model is trained to recognize lexical items in a vocabulary 640. The items in the vocabulary 640 may be numbers, individual words, phrases of multiple words, components or sub-parts of words, or other items. A weight may be determined for each item in the vocabulary 640 with respect to each contextual feature that the language model uses to estimate likelihoods.
For example, for each particular word in the vocabulary 640, there may be a different weight corresponding to the occurrence of the particular word after each word in the vocabulary 640. For example, for the word “local,” one unigram weight may indicate if “cat” occurred immediately after the word “a”; another unigram weight may indicate if “cat” occurred immediately after the word “at”; and so on, so that there is a different weight to indicate likelihoods that “cat” occurs after each of the lexical items in the vocabulary 640. The weights may be determined based on occurrences of words in in any portion of the training data, regardless of the different environments or applications that were used. Weights may similarly be determined for bigram features, trigram features, or other linguistic features.
Similarly, there may also be a different weight 630 for each lexical item in the vocabulary 640 with respect to each non-linguistic contextual feature, such as each different location, or each different application, etc. For example, weights for a voice query application feature 632 indicate how likely each of the respective words in the vocabulary 640 is to occur in a voice query application. Weights for a map application feature 634 indicate how likely each of the respective words in the vocabulary 640 is to occur in a map application. Weights for a SMS application feature 634 indicate how likely each of the respective words in the vocabulary 640 is to occur in a SMS application. Weights may be determined for each of the other applications or classes of applications that the model is trained to use in predicting likelihoods. Weights may be determined for each of the other features selected for the model
In some implementations, weights may be assigned for phrases of more than one word and various contextual factors. For example, the column 620 may include vocabulary entries that are phrases including two or more words. As a result, a weight value could represent a weight for “good boston restaurants” occurring where the location is “Massachusetts.”
A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. For example, various forms of the flows shown above may be used, with steps re-ordered, added, or removed.
All of the functional operations described in this specification may be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The techniques disclosed may be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable-medium may be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter affecting a machine-readable propagated signal, or a combination of one or more of them. The computer-readable medium may be a non-transitory computer-readable medium. The term “data processing apparatus” encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus may include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.
A computer program (also known as a program, software, software application, script, or code) may be written in any form of programming language, including compiled or interpreted languages, and it may be deployed in any form, including as a standalone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program may be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program may be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows may also be performed by, and apparatus may also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a tablet computer, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, the techniques disclosed may be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.
Implementations may include a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the techniques disclosed, or any combination of one or more such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
While this specification contains many specifics, these should not be construed as limitations, but rather as descriptions of features specific to particular implementations. Certain features that are described in this specification in the context of separate implementations may also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation may also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination may in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems may generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular implementations have been described. Other implementations are within the scope of the following claims. For example, the actions recited in the claims may be performed in a different order and still achieve desirable results.