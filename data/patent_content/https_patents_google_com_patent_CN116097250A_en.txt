CN116097250A - Layout aware multimodal pre-training for multimodal document understanding - Google Patents
Layout aware multimodal pre-training for multimodal document understanding Download PDFInfo
- Publication number
- CN116097250A CN116097250A CN202080102669.5A CN202080102669A CN116097250A CN 116097250 A CN116097250 A CN 116097250A CN 202080102669 A CN202080102669 A CN 202080102669A CN 116097250 A CN116097250 A CN 116097250A
- Authority
- CN
- China
- Prior art keywords
- block
- document
- level
- blocks
- computing system
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/40—Information retrieval; Database structures therefor; File system structures therefor of multimedia data, e.g. slideshows comprising image and additional audio data
- G06F16/48—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/483—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/93—Document management systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/103—Formatting, i.e. changing of presentation of documents
- G06F40/109—Font handling; Temporal or kinetic typography
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/284—Lexical analysis, e.g. tokenisation or collocates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/40—Document-oriented image-based pattern recognition
- G06V30/41—Analysis of document content
- G06V30/413—Classification of content, e.g. text, photographs or tables
Abstract
Systems and methods for document processing that can process and understand the layout, text size, text style, and multimedia of a document can generate a more accurate and more informed representation of the document. The layout of a document fitted with text size and style may indicate what portion of the document may be more important, and an understanding of this importance may help understand the document. Systems and methods that utilize a hierarchical framework that handles block levels and document levels of documents can utilize these metrics to generate better document representations.
Description
Technical Field
The present disclosure relates generally to document processing. More particularly, the present disclosure relates to training and utilization of a multi-modal, layout-aware machine-learning document coding model.
Background
The document representation may include encoded information (e.g., semantic information) about the document. The document representation may be used for various downstream tasks such as natural language processing, question answering, document summarization, or information retrieval (e.g., document retrieval). In some existing models, the document processing that generates these document representations focuses on the text content. The distribution and number of certain words or phrases is the focus of some existing models. The layout and images are not considered in these existing models.
The document layout may include structural and visual (e.g., font size) information that may be critical but sometimes ignored by the machine learning model. Existing models using layout information typically consider only text content, while ignoring the presence of other patterns of content such as images. Furthermore, spatial interactions of the presented content in the layout have not been fully utilized.
Furthermore, language models are typically limited to considering text content, and further assume that all text is equally important. Thus, the location of the text in the document, the size of the text, and other characteristics of the text are not considered. For example, a sub-header bolded with a larger font is given the same importance as smaller text in the paragraph body. The location and size of the text may indicate the importance of the text and not taking these features into account may result in the text of the document not being considered in context.
Furthermore, language modeling systems tend to ignore the importance of images in documents. The image may provide additional nuances in processing the document, but is often ignored. Text content being only considered part of a document may result in only part of the document being considered. The pictures may emphasize topics or describe something that the text cannot describe succinctly.
Disclosure of Invention
Aspects and advantages of embodiments of the disclosure will be set forth in part in the description which follows, or may be learned from the description, or may be learned by practice of the embodiments.
One example aspect of the present disclosure relates to a computer-implemented method for generating a layout-aware document representation. The method may include: the document is obtained by the computing system. In some implementations, a document may include text and one or more images. Layout data may be associated with the document. The method may include: the document is divided into a plurality of blocks by the computing system based at least in part on the layout data. In some implementations, the method may include: each of the plurality of blocks is processed by the computing system with a machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively. For each of the plurality of blocks, layout data associated with the block may be provided as input to a machine-learned block-level encoder model. The method may include: the plurality of block level representations are processed by the computing system with a machine-learned document level encoder model to generate a document level representation of the document. In some implementations, the method may include: a document level representation is provided as an output by the computing system.
In some implementations, the layout data can include at least one of style data, font data, or color data describing one or more of the plurality of blocks in the document. The layout data may include spatial layout data describing spatial locations of the plurality of blocks within the document. In some implementations, partitioning the document may include: the document is partitioned by the computing system based at least in part on one or more HTML tags associated with the document. The method may include at least one of a plurality of blocks having both text content and image content. In some implementations, processing, by the computing system, each of the plurality of blocks including the one or more images with the machine-learned block-level encoder model may include: one or more images included in the block are processed with a convolutional neural network and an embedding model to generate one or more image embeddings of the one or more images. In some implementations, one or both of the machine learning block level encoder model and the machine learning document level encoder model may include a multi-headed self-attention model. Dividing, by the computing system, the document into a plurality of blocks may include: the document is processed with a marker. The method may include: the document level representation is processed by the computing system to determine a classification of the document. In some implementations, the method may include: the document-level representation is processed by the computing system with the search engine to generate a results list, wherein the results list includes a plurality of additional documents having data related to the data of the documents. The method may include: a document summary is generated by the computing system based at least in part on the document level representation. In some implementations, the document is a web page. Layout data may be encoded in the attention profile. In some implementations, the layout data may include position data, wherein the plurality of blocks may include a first block and a second block, and wherein the position data may include data describing a relative position of the first block with respect to the second block. The machine-learning block-level encoder model may include a converter model that encodes text blocks and a convolutional neural network that encodes image blocks. In some implementations, the machine-learning block-level encoder model may be trained with block-level pre-training targets, where the block-level pre-training targets may include masking language modeling and image-text matching, and the machine-learning document-level encoder model may be trained with document-level pre-training targets, where the document-level pre-training targets may include block ordering predictions, masking block predictions, and image fitting. In some implementations, the method may include: the document level representation is stored in a database by the computing system.
Another example aspect of the present disclosure relates to a computing system. The computing system may include: one or more processors; and one or more non-transitory computer-readable media collectively storing instructions that, when executed by the one or more processors, cause the computing system to perform operations. The operations may include: a document is obtained by a computing system, where the document may include text and one or more images, and layout data may be associated with the document. The operations may include: the document is divided into a plurality of blocks by the computing system based at least in part on the layout data. In some implementations, the operations may include: each of the plurality of blocks is processed by the computing system with a machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively, wherein, for each of the plurality of blocks, layout data associated with the block may be provided as input to the machine-learned block-level encoder model. The operations may include: the plurality of block level representations are processed by the computing system with a machine-learned document level encoder model to generate a document level representation of the document. The operations may include: the loss function is evaluated by the computing system based at least in part on a prediction, which may be based on the document-level representation. In some implementations, the operations may include: one or more parameters of at least one of the machine learning block level encoder model or the machine learning document level encoder model are modified by the computing system based at least in part on the loss function.
The prediction may comprise a block ordering prediction. In some implementations, the block ordering prediction may be generated by: switching, by the computing system, at least a first block and a second block from the plurality of blocks, wherein switching the first block and the second block from the plurality of blocks occurs before processing, by the computing system, each of the plurality of blocks with the machine-learned block-level encoder model; and generating, by the computing system, a binary prediction indicating whether the plurality of blocks are in a correct order based at least in part on the document level representation, wherein the binary prediction may be a block ordering prediction. In some implementations, the prediction may include predicting a text block. The predictive text blocks may be generated prior to processing the plurality of block level representations with the machine-learned document level encoder model by the computing system. The prediction may be generated by: masking, by the computing system, a block-level representation generated for one or more text blocks in the plurality of blocks; and selecting, by the computing system, a predicted text block from the plurality of candidate text blocks based at least in part on the document level representation. In some implementations, the prediction may include predicting the image. The predicted image may be generated prior to processing each of the plurality of blocks with the machine-learned block-level encoder model by the computing system. The predicted image may be generated by: masking, by the computing system, one or more images included in one or more blocks of the plurality of blocks; and selecting, by the computing system, a predicted image from the plurality of candidate images based at least in part on the document-level representation. In some implementations, the operations may include: the block level loss function is evaluated by the computing system based at least in part on an image matching prediction, which may be based on one or more block level representations. The operations may include: one or more parameters of the machine-learned block-level encoder model are modified by the computing system based at least in part on the block-level loss function. In some implementations, the image-text matching prediction may be generated by: sampling, by the computing device, one or more training images from the training document; replacing, by the computing device, the one or more images from the document with the one or more training images; and determining, by the computing device, a binary match prediction based at least in part on the one or more block level representations, wherein the binary match prediction may be an image-text match prediction and predict whether an image replacement is performed.
Another example aspect of the disclosure relates to one or more non-transitory computer-readable media collectively storing instructions that, when executed by one or more processors, cause a computing system to perform operations. The operations may include: a document is obtained, and wherein layout data may be associated with the document. The operations may include: the document is divided into a plurality of blocks based at least in part on the layout data. In some implementations, the operations may include: each of the plurality of blocks is processed with a machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively, wherein, for each of the plurality of blocks, layout data associated with the block may be provided as input to the machine-learned block-level encoder model. The operations may include: the plurality of block level representations are processed with a machine-learned document level encoder model to generate a document level representation of the document. The operations may include: a document level representation is provided as an output.
In some implementations, the operations may include: a block type for each of the plurality of blocks is determined based at least in part on the layout data. In some implementations, the block type of the first block may be at least one of a header, a paragraph, an image, a list, or a table.
Another example aspect of the present disclosure relates to a computer-implemented method for pre-training. The method may include: a plurality of media training blocks is obtained by a computing system from one or more training documents. In some implementations, each of the plurality of media training blocks may include one or more images from one or more training documents. The method may include: one or more images of a media training block of a plurality of media training blocks are masked by a computing system to obtain a masked training block. The method may include: the plurality of media training blocks are processed by the computing system with a machine learning block level coding model to generate a corresponding plurality of media block level representations. In some implementations, the media block level representation of the masking training block may include a prediction output that selects a replacement image from a candidate image pool generated from the masking training block and each of a plurality of additional masking training blocks from a training batch (batch). The method may include: a pre-training penalty function is evaluated by the computing system that evaluates differences between the prediction output and the truth data associated with the masking training block and the plurality of additional masking training blocks. The method may include: one or more parameters of the machine learning block level coding model are adjusted by the computing system based at least in part on the pre-training loss function.
Other aspects of the disclosure relate to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the principles of the disclosure.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification with reference to the accompanying drawings, in which:
FIG. 1A illustrates a block diagram of an example computing system performing document processing, according to an example embodiment of the present disclosure.
FIG. 1B illustrates a block diagram of an example computing device performing document processing according to an example embodiment of the disclosure.
FIG. 1C illustrates a block diagram of an example computing device performing document processing according to an example embodiment of the disclosure.
FIG. 2 illustrates a block diagram of an example document processing model, according to an example embodiment of the present disclosure.
FIG. 3 illustrates a block diagram of an example block level processing model, according to an example embodiment of the present disclosure.
FIG. 4A illustrates a block diagram of an example document processing model, according to an example embodiment of the present disclosure.
FIG. 4B illustrates a block diagram of an example document processing model, according to an example embodiment of the present disclosure.
FIG. 4C illustrates a block diagram of an example document processing model, according to an example embodiment of the disclosure.
FIG. 4D illustrates a block diagram of an example document processing model, according to an example embodiment of the present disclosure.
FIG. 5 illustrates a block diagram of an example document processing model, according to an example embodiment of the present disclosure.
FIG. 6 illustrates a flowchart of an example method of performing document processing, according to an example embodiment of the present disclosure.
FIG. 7 illustrates a flowchart of an example method of training a document processing model in accordance with an example embodiment of the present disclosure.
FIG. 8 illustrates a flowchart of an example method of performing document level image pre-training in accordance with an example embodiment of the present disclosure.
Fig. 9A illustrates a block diagram of an example block ordering and serialization model in accordance with an example embodiment of the present disclosure.
Fig. 9B illustrates a block diagram of an example block correlation model, according to an example embodiment of the present disclosure.
FIG. 10 illustrates a block diagram of an example block-level attention masking model, according to an example embodiment of the present disclosure.
FIG. 11 illustrates a block diagram of an example document-level attention masking model, according to an example embodiment of the present disclosure.
FIG. 12 illustrates a block diagram of an example document processing model, according to an example embodiment of the disclosure.
Detailed Description
SUMMARY
In general, the present disclosure relates to systems and methods for layout and metadata-based document understanding. In particular, example aspects of the present disclosure provide a hierarchical encoder model that generates document-level representations for documents that include both text and images. In some implementations, the systems and methods may include incorporating (intake) documents (e.g., web pages, files, etc.) and processing the layout and metadata of the documents. For example, the layout information may include text style, font, color of text/images in the document, relative position between different text and image components, and/or various other information. The hierarchical encoder model may use layout information to generate an improved document level representation of the document.
More specifically, the system and method may be used to generate a layout-aware document representation. The system and method may include obtaining a document. The document may include text and images and layout data describing the layout in the document. The layout data may include style data, font data, or color data describing one or more blocks in the document. The system and method may include dividing the document into blocks based at least in part on the layout data. In some implementations, the systems and methods may include processing each block with a block-level encoder model to generate a block-level representation of each respective block. In some implementations, a block level encoder may process layout data describing a document. The system and method may include processing the block level representation with a document level encoder to generate a document level representation. The document level representation may be an output of the system and method. In some implementations, the document-level representation may include data describing an order of the plurality of blocks.
For example, the system or method may first parse the document into chunks, the content of which may be text, forms, or multimedia (e.g., images), using proprietary tools. The system may include a hierarchical (hierarchical) framework that encodes blocks. The encoder model may encode each block at a low level with a multi-mode converter and aggregate block level representations and connections at a high level with a specially designed converter. The system may be trained with hierarchical pre-training targets, where low-level models or block-level models may be trained with standard Masking Language Modeling (MLM) penalty and multi-mode alignment penalty (i.e., image-text matching), while high-level models or document-level models may be trained with three layout-aware targets: (1) block order prediction, (2) masking block prediction (i.e., block MLM), and (3) image fit prediction.
In some implementations, the system can parse the HTML formatted page into content blocks using an internal document tagger, where each block can have the following characteristics: (1) spatial location as 2D coordinates within the document, (2) semantic type of content presented (e.g., header, table, paragraph, image, etc.), and (3) attributes specific to text content such as font size, bold and italics. In some implementations, documents may be partitioned based at least in part on HTML tags associated with the documents.
In some implementations, the block level converter may take input as parsed multimodal content blocks serialized according to their ordered spatial locations, and then the document level converter may accept the block level representation. The block level model may be trained with Masking Language Modeling (MLM) targets and/or image-text alignment predictions or image-text matching to provide a basis for different input modes. To train the document level model, three block level pre-training goals may be used to develop the structure of the document: the model may use (1) block order prediction to predict whether the input block is properly ordered, (2) masking block prediction or block MLM may work at the text block level, and/or (3) image fit prediction may be used to select the most appropriate image for the lost image block.
In some implementations, the systems and methods may divide a document into blocks. These blocks may include text, photographs, video, or any other form of content. For example, the system and method may define blocks using HTML hints, spatial layout, and/or other features. Further, in some implementations, the system or method may use spatial layout to group certain blocks.
In some implementations, the systems and methods may use a hierarchical model. The hierarchical model may include a low level of hierarchy (e.g., block level) and a high level of hierarchy (e.g., document level). The block level may encode their respective subsets with style, font, and color information for the text block and image, respectively. The document level may take into account the locations of the different text blocks and images and the relative locations between them to generate a document level representation of the document.
Document level representations are available for many downstream tasks. For example, personalized content, document retrieval, document classification, web page understanding, question answering, and document summarization may all be implemented with the systems and methods disclosed herein. For example, in the case of document classification, the document level representation may be processed to determine the classification of the document. For example, documents may be classified as a particular document type.
Additional aspects of the present disclosure provide training techniques (e.g., pre-training techniques) for training encoder models. As one example, a novel pre-training task may be used to train high levels of hierarchy to predict the relative position between text blocks/images, predict whether text blocks/images match well with the rest of the document data, and/or other tasks.
The system and method may consider both layout and multimodal for self-supervision in documents. Layout and multimodal can be seen as a strong bias in induction of transferability. The system and method may physically and virtually utilize aspects of the layout in the model. The model may include a hierarchical framework based on document or file layout.
The system or method may use a marker for data processing. In some implementations, the system may use a block marker. The block marker may process block location, block type (e.g., header, image and text, paragraph, etc.), block attributes (e.g., bold, italic, font size, etc.), and image. For example, the system and method may utilize a go/block-token (go/block-token) for block and layout processing. The marker can characterize the data as sub-packets (e.g., header, list, paragraph, image, table, etc.) based on the block type.
In some implementations, the system can process text blocks and image blocks together based on the layout of the document. The system may process text blocks and image blocks with a Visual Language (VL) converter. The system may use one or more VL converters to process documents. The VL converter may feed into a high level visual language (HVL) converter. The low-level or block-level training objectives may include intra-block processing, while the high-level or document-level training objectives may include inter-block processing. In some implementations, the block-level visual speech coder may include a convolutional neural network and an embedded model to process the image.
The VL and HVL converters may be trained for specific training objectives. Training goals may allow the model to accomplish trained downstream tasks such as document retrieval, document classification, web page understanding, question answering, personalized advertising, and document summarization. Training may be performed using the truth training data. For example, a model may be trained for document classification with truth data, which may include documents and predetermined classifications of the documents.
The block level may relate to block classification and block information processing. Block ordering may include local join construction and block serialization. In addition, the block level may include standard Masking Language Modeling (MLM) and/or multi-Mode Alignment Prediction (MAP).
The document level may relate to a content completion step and a content locating step. The content completion step may include block level mask learning and/or image suggestion prediction. The content locating step may include block ordering prediction.
The block level and document level may be enhanced by learning and reasoning.
The system or method may include a block ordering step that determines the coordinates of each block relative to all other blocks. For example, the block in the upper left corner may be (1, 1), the block in the upper right corner may be (2, 1), (1, 1) the block below the block may be (1, 2), (2, 1) the block below the block may be (2, 2), and the block symbol may continue throughout the document.
The VL converter may process various inputs. For example, the VL translator may process the combined text from (1, 1) with CLS tag, block information, and block partition ID. Another example may include the VL converter processing output embedding from an embedding model that processes the output of the convolutional neural network that receives the image and the block partition ID as inputs.
The system or method may use one transducer for each block, or may use one transducer for multiple blocks. One transducer per block may introduce padding and may result in fast processing of the header block. One converter for multiple blocks may be implemented by simulating multiple converters using attention masking. For example, the system or method may utilize block-level attention masking to process blocks. Block-level attention masking may be used to process both text blocks and media blocks. Block-level attention masking may include a hierarchical approach in which the system generates multiple layers of masking. The mask may be a real-valued mask. Furthermore, training of the attention model may increase the accuracy of the system's ability to approximate text and images. Although the example encoder is discussed with specific reference to a transducer model, other encoder models may be used in addition to or instead of the transducer model, including other forms of models that utilize self-attention.
The system or method may use a multi-mode alignment prediction Model (MAP) for the block level model. The MAP model may have a set of candidate images sampled from a small batch. The MAP model may sample the candidate images and exchange with images in the document. The sampled and swapped images may then be processed to determine whether the processed CLS output is aligned or misaligned.
The block level representations at each CLS location can be aggregated (pool) for processing with a document level model. The document level model may include an encoding model having a converter and a convolutional neural network.
The output and collection of the VL converters may be processed by the HVL converters. The HVL converter may focus on block local connections. In particular, adjacent relationships between adjacent blocks may be identified and embedded. In addition, the document-level model may further utilize document-level attention masking. With regard to CLS tokenization, neighboring blocks may be processed together in different combinations by the attention masking model during document processing. In some implementations, the attention mask may be smoothed by an increase of 0.01.
The pre-training of the document processing model may include block ordering prediction. The block ordering prediction may be trained using the truth data. The document level model may use an HVL converter to predict block ordering. The predicted block ordering may then be compared to the truth data of how the blocks were originally ordered.
The document processing model may also be trained with block mask learning or block MLM. The HVL converter of the document level model may output block predictions that can be compared to candidate blocks. The truth data and other prediction data may be used to evaluate HVL converter predictions. Training may be run iteratively to allow the model to make accurate predictions. The block MLM may include masking the block level representation prior to document level processing. The document level encoder model may generate a text prediction based on the provided set of candidate blocks. The most suitable block may be determined from the set of blocks. The text predictions may be evaluated with an loss function, and the resulting evaluation may be used to perform adjustments to parameters of the document level encoder model and/or the block level encoder model.
The pre-training of the document processing model may also include image suggestion prediction. The CLS may be processed with a VL converter and an HVL converter, and the resulting output may be compared to a set of candidate images. The trained system may use the CLS and the set of candidate images to suggest a predicted image. The system or method may utilize layout-aware content suggestions and multilingual migration learning. The layout aware content suggestion may be further used for image suggestion and as an editing assistant. Multilingual transfer learning can be used for wiki class classification. The image suggestion prediction may include masking one or more images in the media block prior to block level processing. The document level encoder model may generate image predictions based on the provided set of candidate blocks. The most suitable block may be determined from the set of blocks. The image prediction may be evaluated with an loss function, and the resulting evaluation may be used to perform adjustments to parameters of the document-level encoder model and/or the block-level encoder model.
The system and method may utilize various model variants and benchmarks. The system or method may be single mode or multi-mode. In some implementations, the system or method may use a single layer, while in other implementations, the system or method may be multi-layered. The block information being processed may vary in different implementations. The system or method may be converter-based, convolutional neural network-based, or based on another model architecture.
The system or method may use optical character recognition for preprocessing. The system or method may use convolutional neural networks for image coding. In some implementations, the processed text data and the processed image data may be concatenated before being processed by the HVL converter.
Implementations using convolutional neural network references may use an adapted BERT grid to generate inputs to a document level model. The document level model in this implementation may include a convolutional neural network capable of inverse serialization (serialisation back).
The systems and methods disclosed herein may use meta information (e.g., HTML tags) to collect the organic text components and the image components. In some implementations, the systems and methods may include processing of meta information without processing the document using an OCR engine.
The system and method may process image data during document processing. The system and method may process images with text blocks, which may allow for consideration of relationships between different text blocks and images in a document.
The system and method may be used to learn general document representations. Further, the system and method may be used for a variety of downstream tasks. The document representations may be used as search queries to find other related documents. In some implementations, the document representations may be stored in a searchable database. In some implementations, the document representation can include a document summary. In this way, a compressed representation of the document may be stored, reducing memory footprint and increasing computational efficiency.
The system and method may use a variety of training techniques for pre-training at both the block level and the document level. One example method for pre-training may involve masking blocks. For example, a method for pre-training may include obtaining a set of media training blocks from a set of training documents. In some implementations, the set of media training blocks may include images from a training document. The method may include masking one or more images of a media training block to obtain a masking training block. The method may include processing a plurality of media training blocks with a machine learning block level coding model to generate a corresponding plurality of media block representations. In some implementations, the media block representation of the masking training block may include a prediction output that may include a prediction similarity between the masking training block and each of a plurality of additional masking training blocks from the training batch. In some implementations, the method can include evaluating a pre-training loss function that evaluates differences between the prediction output and truth data associated with the masking training block and the plurality of additional masking training blocks. The method may include adjusting one or more parameters of a machine-learned semantic document encoding model based at least in part on the pre-training loss function.
The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the system and method may utilize an encoder model to process documents to output a representation that takes into account layout, style, and multimedia. The system and method may generate a document summary, a document classification, or a document search query. In addition, the system and method may process both images and text to provide a multimodal model that may take into account multimedia importance. Because the systems and methods may generate document summaries, document classifications, and document search queries, the systems and methods may be used to generate smaller searchable datasets, which may reduce the computational power required to search documents while providing improved (e.g., more accurate or relevant) search results.
Another technical benefit of the systems and methods of the present disclosure is the ability to consider spatial layout, style, font, and color. Technical properties of the document may be determined and ultimately used to determine a document representation of the document. The system and method may consider these features to determine the relative importance of certain content in a document to better understand the document. Better understanding may result in better document representation, which may result in better document summary and better document classification being generated.
Example embodiments of the present disclosure will now be discussed in more detail with reference to the accompanying drawings.
Example devices and systems
FIG. 1A illustrates a block diagram of an example computing system 100 that performs document processing according to an example embodiment of the disclosure. The system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 communicatively coupled by a network 180.
The user computing device 102 may be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smart phone or tablet), a game console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
The user computing device 102 includes one or more processors 112 and memory 114. The one or more processors 112 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. The memory 114 may store data 116 and instructions 118 that are executed by the processor 112 to cause the user computing device 102 to perform operations.
In some implementations, the user computing device 102 may store or include one or more document processing models 120. For example, the document processing model 120 may be or may otherwise include various machine learning models, such as a neural network (e.g., deep neural network) or other types of machine learning models, including non-linear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. An example document processing model 120 is discussed with reference to fig. 2, 4A-4D, and 5.
In some implementations, one or more document processing models 120 may be received from the server computing system 130 over the network 180, stored in the user computing device memory 114, and then used or otherwise implemented by the one or more processors 112. In some implementations, the user computing device 102 may implement multiple parallel instances of a single document processing model 120 (e.g., perform parallel document processing across multiple instances of an index document).
More specifically, the model may be trained by truth data, manually generated document representations, or other data sets. For example, the block-level model may be trained on the truth data using a word masking training. In addition, block order prediction of the document level model may be trained by obtaining truth document data, replacing blocks with zero tensor blocks, determining to which truth blocks to replace zero tensor blocks belong, and evaluating the block order with a loss function. One or more parameters of the block-level model and/or the document-level model may be modified based on these training methods using a loss function for evaluation.
Additionally or alternatively, one or more document processing models 140 may be included in the server computing system 130 in communication with the user computing device 102 according to a client-server relationship, or otherwise stored and implemented by the server computing system 130. For example, the document processing model 140 may be implemented by the server computing system 140 as part of a web service (e.g., a document summary or document presentation service). Accordingly, one or more models 120 may be stored and implemented at the user computing device 102 and/or one or more models 140 may be stored and implemented at the server computing system 130.
The user computing device 102 may also include one or more user input components 122 that receive user input. For example, the user input component 122 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touchpad) that is sensitive to touch by a user input object (e.g., a finger or stylus). The touch sensitive component may be used to implement a virtual keyboard. Other example user input components include a microphone, a conventional keyboard, or other devices that a user may use to provide user input.
The server computing system 130 includes one or more processors 132 and memory 134. The one or more processors 132 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 134 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 134 may store data 136 and instructions 138 that are executed by processor 132 to cause server computing system 130 to perform operations.
In some implementations, the server computing system 130 includes or is otherwise implemented by one or more server computing devices. Where the server computing system 130 includes multiple server computing devices, such server computing devices may operate in accordance with a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 130 may store or otherwise include one or more machine learning document processing models 140. For example, model 140 may be or may otherwise include various machine learning models. Example machine learning models include neural networks or other multi-layer nonlinear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. An example model 140 is discussed with reference to fig. 2 and 4A-4D.
The user computing device 102 and/or the server computing system 130 may train the models 120 and/or 140 via interactions with a training computing system 150 communicatively coupled via a network 180. The training computing system 150 may be separate from the server computing system 130 or may be part of the server computing system 130.
The training computing system 150 includes one or more processors 152 and memory 154. The one or more processors 152 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. The memory 154 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 154 may store data 156 and instructions 158 executed by processor 152 to cause training computing system 150 to perform operations. In some implementations, the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
In some implementations, performing back propagation of the error may include performing truncated timing back propagation (truncated backpropagation through time). Model trainer 160 may perform a variety of summarization techniques (e.g., weight decay, exit (dropout), etc.) to enhance the generalization ability of the trained model.
In particular, model trainer 160 may train document processing models 120 and/or 140 based on a set of training data 162. Training data 162 may include, for example, truth data to be masked, processed, and evaluated.
In some implementations, the training examples may be provided by the user computing device 102 if the user has provided consent. Thus, in such an implementation, the model 120 provided to the user computing device 102 may be trained by the training computing system 150 on user-specific data received from the user computing device 102. In some cases, this process may be referred to as model personalization.
The network 180 may be any type of communication network, such as a local area network (e.g., an intranet), a wide area network (e.g., the internet), or some combination thereof, and may include any number of wired or wireless links. In general, communications over network 180 may be carried via any type of wired and/or wireless connection using various communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), coding or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
The machine learning model described in this specification may be used in a variety of tasks, applications, and/or use cases.
In some implementations, the input of the machine learning model of the present disclosure may be text or natural language data. The machine learning model may process text or natural language data to generate an output. For example, the machine learning model may process natural language data to generate a linguistic coded output. As another example, the machine learning model may process text or natural language data to generate a potential text-embedded output. As another example, the machine learning model may process text or natural language data to generate a translation output. As another example, the machine learning model may process text or natural language data to generate a classification output. As another example, the machine learning model may process text or natural language data to generate a text segmentation output. As another example, the machine learning model may process text or natural language data to generate semantic intent output. As another example, the machine learning model may process text or natural language data to generate an upgraded text or natural language output (e.g., text or natural language data of higher quality than the input text or natural language, etc.). As another example, the machine learning model may process text or natural language data to generate a predictive output.
In some implementations, the input of the machine learning model of the present disclosure may be potentially encoded data (e.g., a potential spatial representation of the input, etc.). The machine learning model may process the potentially encoded data to generate an output. For example, the machine learning model may process the potentially encoded data to generate the recognition output. As another example, the machine learning model may process the potentially encoded data to generate a reconstructed output. As another example, the machine learning model may process the potentially encoded data to generate a search output. As another example, the machine learning model may process the potentially encoded data to generate a reclustering output. As another example, the machine learning model may process the potentially encoded data to generate a prediction output.
In some implementations, the input to the machine learning model of the present disclosure can be statistical data. The machine learning model may process the statistical data to generate an output. For example, the machine learning model may process the statistical data to generate an identification output. As another example, the machine learning model may process the statistical data to generate a prediction output. As another example, the machine learning model may process the statistical data to generate a classification output. As another example, the machine learning model may process the statistical data to generate a segmentation output. As another example, the machine learning model may process the statistical data to generate a segmentation output. As another example, the machine learning model may process the statistical data to generate a visual output. As another example, the machine learning model may process the statistical data to generate a diagnostic output.
In some cases, the machine learning model may be configured to perform tasks that include encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). In another example, the task may include generating an embedding for input data (e.g., input visual data).
In some cases, the input includes visual data and the task is a computer visual task. In some cases, pixel data including one or more images is input, and the task is an image processing task. For example, an image processing task may be an image classification in which the output is a set of scores, each score corresponding to a different object class and representing the likelihood that one or more images depict an object belonging to that object class. The image processing task may be object detection, wherein the image processing output identifies one or more regions in the one or more images and, for each region, identifies a likelihood that the region depicts the object of interest. As another example, the image processing task may be image segmentation, wherein the image processing output defines a respective likelihood for each of a predetermined set of categories for each pixel in the one or more images. For example, the set of categories may be foreground and background. As another example, the set of categories may be object classifications.
FIG. 1A illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the user computing device 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be both trained and used locally at the user computing device 102. In some such implementations, the user computing device 102 may implement the model trainer 160 to personalize the model 120 based on user-specific data.
Fig. 1B illustrates a block diagram of an example computing device 10, performed in accordance with an example embodiment of the present disclosure. Computing device 10 may be a user computing device or a server computing device.
As shown in fig. 1B, each application may communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application may communicate with each device component using an API (e.g., public API). In some implementations, the APIs used by each application are application specific.
Fig. 1C illustrates a block diagram of an example computing device 50, performed in accordance with an example embodiment of the present disclosure. Computing device 50 may be a user computing device or a server computing device.
The central intelligence layer includes a plurality of machine learning models. For example, as shown in fig. 1C, a corresponding machine learning model (e.g., model) may be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications may share a single machine learning model. For example, in some implementations, the central intelligence layer may provide a single model (e.g., a single model) for all applications. In some implementations, the central intelligence layer is included in or otherwise implemented by the operating system of computing device 50.
The central intelligence layer may communicate with the central device data layer. The central device data layer may be a centralized data repository for computing devices 50. As shown in fig. 1C, the central device data layer may communicate with a plurality of other components of the computing device, such as, for example, one or more sensors, a context manager, a device status component, and/or an add-on component. In some implementations, the central device data layer may communicate with each device component using an API (e.g., a proprietary API).
Example model arrangement
In some implementations, the system may utilize the layout to better understand the document. The layout may be obtained by an internal document parsing tool that is primarily capable of processing web page documents in HTML format. The system may use a document tagger to tag or parse a web page document into several small pieces of content. A content block may be a small portion of a document that shows a clear spatial boundary with other content blocks. Each block may be composed of features including, but not limited to, block location, block type, block attributes, and multimedia.
The block location may comprise a 2D real-valued location of a bounding box that may enclose the block within the document, represented by a (upper left corner, lower right corner) coordinate tuple. The marker may normalize each XY coordinate to E [0,1].
The block type may include semantic types of content presented in the block, such as a header, paragraph, image, list (bulleted-item), and table. In some implementations, the document tagger may define 14 different block types (e.g., header, paragraph, list, table, image, title, and filler blocks).
Block attributes may be defined for blocks that include text content. The block attributes may be visual representations of text. Two example types of attributes that may be generated by a marker are: (1) Scalar types, such as font sizes, which may be normalized to e 0,1, where 1 represents the largest possible font size, and (2) binary types, such as whether text is bold, italic, or underlined.
In some implementations, the blocks may include multimedia content, such as images, thumbnails, and video.
A layout may be defined as a structural presentation of the marked content blocks (i.e., their relative positions and order, as well as attribute features of the text content within each block). In some implementations, the system can prepare an input representation of the model by first ordering the labeled content blocks relative to the two-dimensional coordinates of its upper left corner. The system may order the Y-axis first and then the X-axis. The system may emphasize the vertical order more than the horizontal order. The ordered blocks may be serialized in a "zig-zag" fashion for model adoption as input.
The system framework may be intended to: (1) Modeling an inherent hierarchical representation (formulation) of a document layout, and (2) learning with the structure and actual content of the document to generate a document representation.
The system may have two levels for layout hierarchical representation. In particular, a low level or block level of hierarchy may refer to the content of a block, such as text or an image, while a high level or document level may be concerned with how the block is spatially structured. The system framework may include two cascaded converters that take different levels of input for a given document. The block level model may take as input the original parsed content, where each content block may be placed at its serialized ordering location (represented by block-segment-id). Each block may contain text content, and possibly some images (more than one may be present), making the block-level model inherently multi-modal. Each block blk i CLS that can pre-indicate boundaries of block content i A dedicated mark. The system may also pre-stage a global CLS tag at the beginning of the input. The document level model may then take the block level representation blkh i As input (i.e. blk i Is not included in the CLS i Output representation of the block level model at the location).
Text input content may be tagged by a WordPiece tag. Each block may be appended with a block partition id indexed by the serialized sort location, starting with 1, where 0 may be used for the global CLS location. The system may map and round the font size of each real value to an integer scalar e 0, 10. Bold, underlined, and italics can be simply expressed as binary values e 0, 1. In some implementations, the system may supplement the binary embedding of the indication pattern. The total input for each transducer position is expressed as follows:
embd＝embd WordPiece +mebd block_seg_id +embd type +embd modality +embd attr ，
wherein, embd attr Representing an embedding from element-by-element addition of all text attributes. For each block, the system may leave a design choice to cut the content of the block with the maximum allowed mark length and the maximum allowed number of images.
The image content may be fed first to a Convolutional Neural Network (CNN), followed by converting the Fully Connected (FC) layer to align the resulting visual embedding to the same size of text-marking embedding. In some implementations, the conversion full connection layer may be a multi-layer perceptron (MLP) layer. For documents without any image content, the system may populate the inputs with zero image tensors and may adjust the attention mask (mask) in the block level model to not notice those input locations.
The block level training goal may be intended to capture finer granularity of language, visual information, and the ability to handle multimodal inputs, while the document level training goal may be intended to take advantage of structural interactions between block level content.
The block level targets of the block level model may include using Masking Language Modeling (MLM) and multi-modal alignment (ITM).
After the BERT transformer and several multi-mode BERT models, the system may apply the MLM targets to further fine-tune language capabilities on the dataset and further apply the MLM targets to fine-tune language modeling with image modes.
To further improve the model ability to process multi-mode inputs, the system may adapt image-text matching (ITM) predictions. In particular, for a given document d containing multiple images, the system may sample some candidate images from other documents { d' } within the same small batch during training and swap them with some of d with a certain probability. The model may then be prompted to predict whether the text content matches the resulting image sequence as a binary classification.
The document level targets of the document level model may include block ordering prediction (B-ORD), block MLM (B-MLM), and image fitting (IMG-FIT).
For block ordering prediction, in the input to the block level modelAt that time, the two input blocks may be randomly selected and swapped in their serialization order (preserving a particular probability). The output representation out at the global CLS location may be taken global-CLS As input, can be trained to make binary predictions as to whether the input content follows the correct order (i.e., whether the two selected blocks are swapped or remain within the original order). The block partition IDs of the two selected blocks may be replaced with padding values to prevent leakage of the original order. The block ordering prediction target may be denoted as L b-ord . An example implementation of a block ordering prediction pre-training target is illustrated in fig. 4A.
For block MLM, one or more text blocks may represent blkh at their block level by replacing them with zero tensors i The portions are masked off. The goal may prompt the model to select the most appropriate block from a given set of candidate blocks for masking positions, where the candidate set may be constructed by collecting blocks from all documents within a small batch during training (intentionally including true value (ground score) blocks). The MLP layer may then take the concatenation of the output representation of the masking position and the block level representation of the candidate block (i.e., concat (out) masked ,blkh i ,blkh j ,..) and may output the indexed classification result to the most appropriate block. Since the target may be performed as a classification task that may include a fixed number of candidates, in practice the system may truncate the candidates into a fixed number of blocks (which may be guaranteed to include true value blocks). The block MLM target may be denoted as L b-mlm . An example implementation of the block MLM pre-training goal is depicted in fig. 4B.
For image fitting, one or more images may be masked out by replacing them with masking image marks (which may be white images in some implementations). The image fitting may include: for the masked image, the model selects the most suitable image from a set of candidate images. Similar to block MLM, a candidate set may be constructed by collecting images from all documents within a small batch during training, and a classification MLP layer may be applied to predict the most suitable images. For the mask image in the i-th block, the input to the MLP layer may be: concat(out global_CLS ,out blk,i ,embd img,1 ,embd img,2 ,..), wherein embd img,j Is the visual embedding of the j-th image candidate. In some implementations, the system may be in global-CLS position The output representation is added to incorporate modeling of the general trend of how the image is located within the document as the system aggregates information from each block. In addition, batch level masking may be applied to filter out the loss of data entries (documents) that do not have any image content. The image fit may be represented as L img-fit . An example implementation of the image fitting pre-training target is depicted in fig. 4C.
The system framework may be trained jointly with low-level targets and high-level targets, thus being a linear combination of: l (L) LAMPreT ＝λ 1 L mlm +λ 2 L itm +λ 3 L b-ord +λ 4 L b-mlm +λ 5 L img-fit Wherein lambda is i Is an adjustable super-parameter and all losses L may be cross-class entropy losses. In some implementations, all λ is 1.
FIG. 2 depicts a block diagram of an example document processing model 200, according to an example embodiment of the disclosure. In some implementations, the document processing model 200 is trained to receive a set of input data 212 describing a document and, as a result of receiving the input data 212, provide output data that may include a representation of the document. Thus, in some implementations, the document processing model 200 may include a block level model 210 operable to process portions of a document and a document level model 208 operable to process relationships between portions of a document.
The document processing model 200 may process a document 202 having one or more text blocks and one or more image blocks. The plurality of blocks 212 may be processed by the block level model 210 individually or in groups. In some implementations, the block level model 210 may include one or more visual language converters. The output of the block level model 210 may include a block level representation, which may be processed by the document level model 208 to generate a document level representation. In some implementations, the document level model 208 may also be a visual language converter. The resulting document level representation may be used to generate a document summary. Further, the document-level representation may include a document classification and may be used to index documents in a search database.
Fig. 3 illustrates a block diagram of an example block level model 300, according to an example embodiment of the present disclosure. The block level model 300 is similar to the block level model 210 of fig. 2.
In this implementation, the input is a document with both text blocks 308 and image blocks 310. Text data 308 may include a block segmentation ID, block information 306, and merged text 304. The block information and the block division ID may include information on whether text is bold, italic, or larger size, or a different color. For example, 1 may be given to bold text and 0 may be given to non-bold text. Further, the text size may be encoded in binary, or in a spectrum proportional to the varying size. The merged text 304 may include CLS tags and block layout data. For example, for the upper left block in the document, an ordered pair (1, 1) may be given. In this implementation, image data 310 may be processed as blocks with convolutional neural networks and embedded models.
In this implementation, the block level model 302 may process the text data 308 and the image data 310 to generate block level representations, where each block has a respective block level representation. The block level model 302 may include a global CLS process and a visual language converter. The block level representation may be configured to be processed by a document level model.
Fig. 4A-4D illustrate block diagrams of an example document processing model 400, according to example embodiments of the disclosure. The document processing model 400 is similar to the document processing model 200 of FIG. 2.
More specifically, FIGS. 4A-4C illustrate example document level targets. For example, fig. 4A depicts an example block ordering prediction target. FIG. 4B depicts an example block mask learning objective. FIG. 4C depicts an example image suggestion prediction target.
In these implementations, FIGS. 4A-4C include text blocks 408 and image blocks 410, which are processed as inputs 406 to the document processing model 400. The document processing model 400 may include a block level model 404 and a document level model 402. The block level model 404 may include a visual language converter, while the document level model 402 may include a separate visual language converter.
As shown in FIG. 4A, the document level model 402 may output a document representation that may include a block ordering. Document level model 402 may be trained with truth training blocks to process and output the correct block order. FIG. 4A depicts an example set of outputs. The left output 412 is in the correct order and the right output 414 is incorrect. The model predictions may be evaluated using a penalty function that compares the block ordering predictions to the truth training data. Parameters of the document level model may be modified in response to predictions similar to those of the right.
As depicted in fig. 4B, the document level model 402 may be trained using block mask learning. First, the input blocks 406 may be processed by the block level model 404 to generate a block level representation of each respective input block 406. The block level representation may then be processed by the document level model 402 to generate a document level representation. The block mask learning may include masking the block level representation 416 by replacing the block level representation with a zero tensor. The task of the document level model 402 may be to select which candidate block 418 belongs to the masking position. Candidate block 418 may include a training block from a training document and a truth block from a document being processed. A cascade of the output representation of the masking position and the block-level representation of the candidate block 418 may be processed using a multi-layer perceptron to output the classification result. The classification result may be an index of the most suitable block. For example, in FIG. 4B, the document level model 402 may correctly predict that candidate block 3 is the most appropriate block. Parameters of the document level model 402 may be modified as a result of predictions evaluated with the loss function.
As depicted in fig. 4C, the document level model 402 may be trained for image suggestion prediction. The image suggested prediction may comprise replacing the image block with a masking image mark. In some implementations, the mask image mark may be a full white image. The task of the document level model 402 may be to determine the most appropriate image from a set of candidate images 422 to be placed in place of the mask image mark. Candidate image 422 may include training image blocks from a training document and truth image blocks from the document being processed. The candidate image 422 may be processed using a multi-layer perceptron to generate an image classification as an index of the most suitable image. The global CLS of the document may also be processed 420 to determine the layout of other images in the document. The image suggestion prediction target may include a batch level mask that is applied to filter out losses of documents that do not contain images.
Fig. 4D illustrates the training targets of fig. 4A-4C and block level pre-training targets. In this implementation, the document processing model 400 includes two block-level targets (i.e., mask Language Modeling (MLM) 432 and image-text matching (ITM) 430) and three document-level targets (i.e., block ordering prediction (B-ORD) 424, block mask language modeling (B-MLM) 426, and image fitting (IMG-FIT) 428). The pre-training goals may allow the document processing model 400 to correctly interpret text in a block, understand the context of an image, understand the importance of spatial layout of a block, understand the importance of certain text blocks in a document schema, and understand the fit of an image in a document.
FIG. 5 illustrates a block diagram of an example document processing model 500, according to an example embodiment of the disclosure. The document processing model 500 is similar to the document processing model 200 of FIG. 2, except that the document processing model 500 includes a BERTGrid 502 and a convolutional neural network, which together operate as a document level encoder 504 in place of the document level converter 208 of FIG. 2.
In this implementation, the input block 508 includes both an image block 512 and a text block 510. The input block 508 may be processed by the block level model 506 to generate a block level representation. In this implementation, the block level model 506 includes a visual language converter.
The block level representation may then be processed by the document level model 504 to generate a document level representation. In this implementation, the document level model 504 may include processing the block level representation with the BERTGrid 502 and then processing the output with a visual language convolutional neural network. BERTGrid coupled with a visual language convolutional neural network may allow the model to reverse sequence blocks.
9A-9B illustrate block diagrams of example documents 900 according to example embodiments of the disclosure. The document 900 may be processed by the document processing model 200 of FIG. 2 or various other example models described herein.
More specifically, FIG. 9A depicts block ordering and block serialization of documents. In this implementation, document 900 is made up of four blocks. The blocks may be assigned ordered pairs that describe their locations in the document. In this implementation, the origin or starting point of the ordered pair is in the upper left corner. Accordingly, the blocks may be serialized. For example, the upper left block 902 may be represented as (1, 1), the upper right block 904 may be represented as (2, 1), the lower left block 906 may be represented as (1, 2), the lower right block 908 may be represented as (2, 2), and so on. Serialization can further assist the model in layout awareness.
FIG. 9B illustrates a block partial connection of a document. The block local connections may help the document level model to better understand the relationships between blocks. In this implementation, the block local connection includes the adjacency of blocks. For example, an upper left block may be adjacent to the lower left block 952 and the upper right block 954, and a lower right block may be adjacent to the upper right block 956 and the lower left block 958. Block local connections may be important to better understand the meaning of each block to the document. For example, the upper right block may be a table that may be described by the upper left block, or alternatively, the upper right block may be an image block and the lower right block may be a title of the image block. Knowledge of the layout and local connections of the document may allow each individual block and document as a whole to be better understood.
Fig. 10 depicts a block diagram of an example block-level attention masking model 1000, according to an example embodiment of the present disclosure. The block-level attention mask model 1000 may be included in the block-level model 210 of fig. 2.
The block-level attention mask model 1000 may be used to process blocks individually. In some implementations, both text block 1002 and image block 1006 may be processed with block-level attention masking model 1000. Each text block 1002 may only be focused on the single text block data 1004 for processing. Each tile 1006 may be processed focusing only on the single tile data 1008.
FIG. 11 illustrates a block diagram of an example document-level attention masking model 1100, according to an example embodiment of the disclosure. The document-level attention masking model 1100 is similar to the block-level attention masking model 1000 of FIG. 10, except that the document-level attention masking model 1100 is further focused on relationships between blocks.
The document-level attention mask model 1100 may process blocks and CLS tags 1102 in pairs to process block relationships 1104. For example, the upper left block and the upper right block may be treated as a pair that accounts for the relationship between blocks. In some implementations, the model can include variants 1106. In some implementations, the document-level attention mask model may include smoothing the attention mask by adding 0.01.
FIG. 12 illustrates a block diagram of an example document processing model 1200, according to an example embodiment of the disclosure. The document processing model 1200 may include obtaining a document 1202, partitioning the document 1202, and processing the document 1202 to generate a document-level representation.
More specifically, in this embodiment, the document 1202 is partitioned and the blocks are ordered and serialized 1210 by a marker. Once the document 1202 has been partitioned and processed by the marker, the blocks and their respective data may be processed by a low-level model or block-level model 1208 and a high-level model or document-level model 1206 to generate a document-level representation. In this implementation, both the block level model 1208 and the document level model 1206 are converters. Further, in this implementation, the CLS tag, block attributes 1204, block partition ID 1212, and schema ID may be processed by block level model 1208 and document level model 1206. Block attributes 1204 may include font size, binary bold values, binary italic values, and binary underline values. The block segmentation ID 1212 may be an indicator of the assigned number for all blocks in the document 1202 for that block. Furthermore, in this implementation, image block 1216 may be further processed by convolutional neural networks and embedded models before being processed by block level model 1208.
The resulting document level representation may be used for various downstream tasks.
Example method
FIG. 6 depicts a flowchart of an example method of performing document processing, according to an example embodiment of the disclosure. Although fig. 6 illustrates steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of method 600 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 602, a computing system may obtain a document. The document may include text and images. Further, the document may include layout data describing the layout of text and images in the document. The document may be a web page, advertisement, or various other document types.
At 604, the computing system may divide the document. The document may be divided into a plurality of blocks based at least in part on the layout data. The block may be a text block, an image block, or a multi-modal block. A block may include a grouping of text or media with similar styles and positions in a document.
At 606, the computing system may process each of the plurality of blocks to generate a plurality of block level representations. The generated block level representations may correspond to each of a plurality of subsets of the plurality of blocks processed by the block level model, respectively. In some implementations, the block level model may be a visual language encoder model. In some implementations, the block-level model may process a plurality of subsets of the plurality of blocks and layout data associated with the plurality of subsets of the plurality of blocks to generate the block-level representation.
At 608, the computing system may process the plurality of block level representations to generate a document level representation. The plurality of block level representations may be processed by a document level model to generate a document level representation. In some implementations, the document level representation may be a visual language encoder model.
At 610, the computing system may provide as output a document level representation. In some implementations, the document level representation may include a document summary or a document classification. In some implementations, the document-level representation may be used to search a database for similar documents. For example, a document-level representation may be processed with a search engine to generate a results list, where the results list includes a plurality of additional documents having data related to the data of the document.
Fig. 7 depicts a flowchart of an example method of performing pre-training, according to an example embodiment of the present disclosure. Although fig. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of method 700 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 702, a computing system may obtain a plurality of media training blocks. The media training blocks may be obtained from one or more training documents. Further, the media training block may include one or more images from one or more training documents.
At 704, the computing system may mask one or more images of the media training block. One or more images of the masking media training block may generate a masking training block. The masking training block may include a masking image mark or a full white image.
At 706, the computing system can process the plurality of media training blocks to obtain a corresponding plurality of media block representations. In some implementations, processing the plurality of media training blocks to obtain a corresponding plurality of media block representations may include processing using a machine learning semantic document encoding model. The media block representation of the masking training block may include a prediction output. Further, the prediction output may include a prediction similarity between the masking training block and each of a plurality of additional masking training blocks from the training batch. The prediction output may select a replacement image from a pool of candidate images generated from the masking training block and each of a plurality of additional masking training blocks from the training batch.
At 708, the computing system may evaluate a pre-training loss function. In some implementations, a pre-training penalty function may be used to evaluate differences between the prediction output and the truth data associated with the masking training block and the plurality of additional masking training blocks.
At 710, the computing system may adjust one or more parameters based at least in part on the pre-training loss function. The one or more parameters that are adjusted may be one or more parameters of a machine-learned semantic document encoding model.
FIG. 8 depicts a flowchart of an example method of performing document processing training, according to an example embodiment of the disclosure. Although fig. 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of method 800 may be omitted, rearranged, combined, and/or modified in various ways without departing from the scope of the present disclosure.
At 802, a computing system may obtain a document. The document may include text and images. Further, the document may include layout data describing the layout of text and images in the document. The document may be a web page, advertisement, or various other document types.
At 804, the computing system may divide the document. The document may be divided into a plurality of blocks based at least in part on the layout data. The block may be a text block, an image block, or a multi-modal block. A block may include a text or media group having a similar style and position in a document.
At 806, the computing system may process each of the plurality of blocks to generate a plurality of block level representations. The generated block level representations may correspond to each of a plurality of subsets of the plurality of blocks processed by the block level model, respectively. In some implementations, the block-level model is a visual language encoder model. In some implementations, the block-level model may process a plurality of subsets of the plurality of blocks and layout data associated with the plurality of subsets of the plurality of blocks to generate the block-level representation.
At 808, the computing system may process the plurality of block level representations to generate a document level representation. The plurality of block level representations may be processed by a document level model to generate a document level representation. In some implementations, the document level representation may be a visual language encoder model.
At 810, the computing system may evaluate the loss function based at least in part on the prediction. The prediction may be based on a document level representation.
At 812, the computing system may modify one or more parameters of the at least one machine learning model. In some implementations, the machine learning block level encoder model may modify one or more parameters. In some implementations, the machine-learned document level encoder model may modify one or more parameters. One or more parameters may be modified based at least in part on the loss function.
In some implementations, the prediction may include block ordering prediction. The block ordering prediction may be generated by switching at least a first block and a second block from the plurality of blocks and generating a binary prediction indicating whether the plurality of blocks are in a correct order based at least in part on the document level representation. In some implementations, a first block and a second block from the plurality of blocks are switched before each block of the plurality of blocks is processed with the machine-learned block-level encoder model. The binary prediction may be a block ordering prediction.
In some implementations, the prediction may include predicting a text block. The predicted text block may be generated by masking a block-level representation generated for one or more text blocks of the plurality of blocks and selecting the predicted text block from the plurality of candidate text blocks based at least in part on the document-level representation. In some implementations, masking may occur before processing the plurality of block level representations with the machine-learned document level encoder model.
The prediction may include predicting an image. The predicted image may be generated by masking one or more images included in one or more of the plurality of blocks and selecting the predicted image from the plurality of candidate images based at least in part on the document level representation. In some implementations, masking may occur prior to processing each of the plurality of blocks with the machine-learned block-level encoder model.
Example experimental data
The following example experiments were aimed at answering the following questions: (1) Is the hierarchical implementation of the example document processing model effective? (2) is the proposed layout aware training goal valid? How do they complement each other? (3) When and for what tasks the multimode helps?
For experimental purposes, two documents may be designed to complete the task for evaluating the model. A first task may include text block population to access model capabilities that interpret the structure of the text content. A second task may include image suggestion, which involves layout multimodal in addition to structural aspects of text.
Text block filling may include randomly selecting a block blk after ordering and then serializing the blocks i Masking is performed. A context blk may be provided 1:i-1 As input to the model while preserving blk j:j+K ∪blk i As a candidate, where j>i，blk j Spatially located with some margin (4 lines in a typical web document) at blk i After that, the process is performed. The nearest K (k=5) blocks may comply with criteria selected to make the task challenging. Then, the task may be to predict the correct block blk from the candidate block i . Note that the mask block blk i May be any type of text block including a header, an item from a list or table, etc. Predictive capability may depend to a large extent on understanding the structure of the document.
The image suggestion may include the model taking as input all content blocks of the document with the masked image (by replacing it with a full white image). In addition, the model may be used to predict the correct image from a given set of candidate images (including the true values of the masked image). C (in this work, c=1000) candidate images may be extracted from the previously unprocessed document. Since the task is intended to simulate suggesting image content when synthesizing a new document, for a more realistic setting, the image suggestion experiment test may involve stripping text blocks that enclose the direct headlines of the images in the dataset for the task.
Further testing may involve fine tuning of downstream tasks. To allow for better fusion of low-level and high-level information, document-level representations may beRelates to the dependence on block-level and document-level data, denoted R doc ＝σ(α)·blkh global-CLS +(1-σ(α))·out global-CLS To represent a document, where α is a task-dependent, learnable scalar and σ is a Sigmoid function. MLP can be trained to embed document representations R doc Embedding { R from a set of candidates with contrast loss cand Retrieval, wherein, for text blocks, R cand，i =i, and for image suggestion, R cand，i =img, i. If R is doc And true value R gt Pairing, then, represents Y as equal to 1, otherwise 0, and m is a predefined margin, which yields the represented formula:
D w (R doc ，R cand，i )＝||MLP(R doc )-MLP(R cand，i )|| 2
some implementations of the hierarchical converter systems and methods disclosed herein may be compared to a single level layout language model and a CNN-Grid model.
A single-level, non-hierarchical variant of the document processing model framework may include only a low-level model, which is similar to the base model of the two-level model. For training, two low-level targets of the document processing model, namely Masking Language Modeling (MLM) and image-text matching (ITM), may be utilized. Comparing the hierarchical framework to the benchmark may allow for checking the validity of hierarchical expressions and high-level targets.
CNN-Grid may involve attempting to replace a high-level model based on a converter with a CNN module. Each block level represents a position where i can be inserted on the 2D map, according to the ordered 2D coordinates of the blocks. The representation insertion may result in a 3D tensor, where the original 1D i representation may become the channel dimension and thus may be the input to the CNN module. While the output representation of the CNN may serve as an overall representation of the entire document, the example system may apply averaging pooling at the output of the CNN module to obtain a document-level representation of the same size. Since CNN may be considered as a surrogate for higher level models, the CNN-Grid reference may be trained with the same set of targets as the hierarchical multi-converter model, and thus may be used as a surrogate that may include training with additional layout-aware targets.
Single mode (plain text) may also be a beneficial aspect for checking how the example framework performs, inter alia, for text block population tasks. Both single level and hierarchical frameworks can be tested on plain text input.
In some implementations, the low-level model may be initialized with BERT-base-uncapped pre-training weights. A pre-trained CNN model can be employed for all models and benchmarks. The image may be encoded using the CNN model before being converted to the same embedding size 768 with the MLP layer as the Wordpiece mark embedding. For both block MLM and image fitting pre-trained targets, the system may empirically select 20 the size for the candidate set, while the final output projection layer of both targets may be 20-way classification. For block ordering, the output projection MLP may perform binary classification.
A collection of english wikipedia pages (wiki pages) can be used to train and evaluate the model. Wiki page datasets can be uniformly sampled (grabbed) from the wikipedia, which can diversify the dataset across various topics and genres. In some implementations, the system or method may preprocess the collected wiki pages by tokenizing them into content blocks, and may perform 2D ordering. Table 1 depicts general statistics of the wikipedia dataset. Note that the wiki pages used in the downstream tasks are separate from the pre-training set. For image suggestion tasks, the system or method may only hold pages with at least one image.
Since downstream tasks can be trained with comparison targets and can be performed in a retrievable manner, two common ranking-based metrics can be used to quantify model performance: average reciprocal rank (MRR) and recall @ K.
The average reciprocal ranking (MRR) may include calculating the reciprocal (multiplicative inverse) ranking of the truth items in a given candidate list, and may include averaging them across the entire test set.
Recall @ K may include calculating a recall in the top K item by calculating the number of truth items in the top K candidate list. Recall may be a binary presence divided by K.
Table 2 summarizes the model performance for two proposed downstream tasks. Implementations of hierarchical layout-aware multi-mode pre-training for document understanding models or lamret models are tested and compared to benchmarks.
For text block filling downstream tasks, the lamret example hierarchical model is superior to benchmark in both percent accuracy and F-1 score metrics. Among the models tested, the CNN-Grid benchmark performs the worst. This may be the result of the attention mechanism in the converter capturing better the block level interactions.
For image suggestion, the lamret example hierarchical model achieves nearly perfect performance (about 99%) for both metrics, while all baseline models suffer from significant performance degradation. Hierarchical expressions and accompanying high-level objectives in the hierarchical model proved to be effective compared to single-level LayoutLM alternatives. Again, the CNN-Grid benchmark generally performs worst on both metrics.
In addition, table 3 may help analyze the contribution of high-level pretrained targets of different downstream tasks. Table 3 shows ablation analysis of a multi-modal version of the lamret example hierarchical framework. At each row, the table shows the exclusion of either (1) one of the high-level pre-training goals or (2) the layout attribute features. In general, the block ordering objective may be empirically proven to be quite effective for both downstream tasks, as judged by performance degradation when it is excluded during pre-training.
In some implementations, the system and method may be used for multilingual transfer learning. For example, the system may be used for wiki class classification. The model can be pre-trained on multiple languages and fine-tuned on the wiki class classification of English pages. Category processing may then be run on other Wiki pages to categorize the pages, even if the pages are not english.
Additional disclosure
The technology discussed herein relates to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from these systems. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and divisions of tasks and functions between components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components working in combination. The databases and applications may be implemented on a single system or distributed across multiple systems. The distributed components may operate sequentially or in parallel.
While the present subject matter has been described in detail with reference to various specific example embodiments thereof, each example is provided by way of explanation and not limitation of the present disclosure. Alterations, modifications and equivalents of these embodiments will readily occur to those skilled in the art upon understanding the foregoing. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment, can be used with another embodiment to yield a still further embodiment. Accordingly, the present disclosure is intended to cover such alternatives, modifications, and equivalents.
Claims (28)
1. A computer-implemented method for generating a layout-aware document representation, the method comprising:
obtaining, by a computing system comprising one or more computing devices, a document, wherein the document comprises text and one or more images, and wherein layout data is associated with the document;
dividing, by the computing system, the document into a plurality of blocks based at least in part on the layout data;
processing, by the computing system, each of the plurality of blocks with the machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively, wherein, for each of the plurality of blocks, layout data associated with the block is provided as input to the machine-learned block-level encoder model;
processing, by the computing system, the plurality of block level representations with a machine-learned document level encoder model to generate a document level representation of the document; and
a document level representation is provided as an output by the computing system.
2. A method according to any preceding claim, wherein the layout data comprises at least one of style data, font data or colour data describing one or more of the plurality of blocks in the document.
3. A method according to any preceding claim, wherein the layout data comprises spatial layout data describing spatial locations of a plurality of blocks within the document.
4. The method of any preceding claim, wherein partitioning the document by the computing system comprises: the document is partitioned by the computing system based at least in part on one or more HTML tags associated with the document.
5. A method according to any preceding claim, wherein at least one of the plurality of blocks comprises both text content and image content.
6. The method of any preceding claim, wherein processing, by the computing system, each of the plurality of blocks comprising one or more images with the machine learning block level encoder model comprises: one or more images included in the block are processed with a convolutional neural network and an embedding model to generate one or more image embeddings of the one or more images.
7. The method of any preceding claim, wherein one or both of the machine learning block level encoder model and the machine learning document level encoder model comprise a multi-headed self-attention model.
8. The method of any preceding claim, wherein dividing, by the computing system, the document into a plurality of blocks comprises: the document is processed with a marker.
9. The method of any preceding claim, further comprising: the document level representation is processed by the computing system to determine a classification of the document.
10. The method of any preceding claim, further comprising: the document-level representation is processed by the computing system with the search engine to generate a results list, wherein the results list includes a plurality of additional documents having data related to the data of the documents.
11. The method of any preceding claim, further comprising: a document summary is generated by the computing system based at least in part on the document level representation.
12. A method according to any preceding claim, wherein the document is a web page.
13. A method as claimed in any preceding claim, wherein the layout data is encoded in an attention profile.
14. A method according to any preceding claim, wherein the layout data comprises position data, wherein the plurality of blocks comprises a first block and a second block, and wherein the position data comprises data describing the relative position of the first block with respect to the second block.
15. The method of any preceding claim, wherein the machine learning block level encoder model comprises both a converter model encoding text blocks and a convolutional neural network encoding image blocks.
16. The method of any preceding claim, wherein:
Training a machine learning block level encoder model with a block level pre-training target, wherein the block level pre-training target comprises masking language modeling and image-text matching; and
the machine-learning document level encoder model is trained with document level pre-training targets, wherein the document level pre-training targets include block ordering predictions, masking block predictions, and image fits.
17. The method of any preceding claim, further comprising: the document level representation is stored in a database by the computing system.
18. A computer system, comprising:
one or more processors; and
one or more non-transitory computer-readable media collectively storing instructions that, when executed by one or more processors, cause a computing system to perform operations comprising:
obtaining, by the computing system, a document, wherein the document includes text and one or more images, and wherein the layout data is associated with the document;
dividing, by the computing system, the document into a plurality of blocks based at least in part on the layout data;
processing, by the computing system, each of the plurality of blocks with the machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively, wherein, for each of the plurality of blocks, layout data associated with the block is provided as input to the machine-learned block-level encoder model;
Processing, by the computing system, the plurality of block level representations with a machine-learned document level encoder model to generate a document level representation of the document;
evaluating, by the computing system, the loss function based at least in part on a prediction, the prediction based on the document-level representation; and
one or more parameters of at least one of the machine learning block level encoder model or the machine learning document level encoder model are modified by the computing system based at least in part on the loss function.
19. The computer system of any preceding claim, wherein the prediction comprises a block ordering prediction, wherein the block ordering prediction is generated by:
switching, by the computing system, at least a first block and a second block from the plurality of blocks, wherein switching the first block and the second block from the plurality of blocks occurs before processing, by the computing system, each of the plurality of blocks with the machine-learned block-level encoder model; and
a binary prediction is generated by the computing system based at least in part on the document level representation that indicates whether the plurality of blocks are in a correct order, wherein the binary prediction is a block ordering prediction.
20. The computer system of any preceding claim, wherein predicting comprises predicting a block of text, wherein the block of predicted text is generated by:
Masking, by the computing system, a block-level representation generated for one or more text blocks of the plurality of blocks prior to processing, by the computing system, the plurality of block-level representations with the machine-learned document-level encoder model; and
a predicted text block is selected, by the computing system, from the plurality of candidate text blocks based at least in part on the document level representation.
21. The computer system of any preceding claim, wherein predicting comprises predicting an image, wherein the predicted image is generated by:
masking, by the computing system, one or more images included in one or more of the plurality of blocks prior to processing, by the computing system, each of the plurality of blocks with the machine-learned block-level encoder model; and
a predicted image is selected from the plurality of candidate images based at least in part on the document-level representation by the computing system.
22. The computing system of any preceding claim, wherein operations further comprise:
evaluating, by the computing system, the block level loss function based at least in part on image matching predictions based on the one or more block level representations; and
modifying, by the computing system, one or more parameters of the machine-learned block-level encoder model based at least in part on the block-level loss function; and
Wherein the image-text matching prediction is generated by:
sampling, by the computing device, one or more training images from the training document;
replacing, by the computing device, the one or more images from the document with the one or more training images; and
a binary match prediction is determined by the computing device based at least in part on the one or more block level representations, wherein the binary match prediction is an image-text match prediction and predicts whether an image replacement is performed.
23. One or more non-transitory computer-readable media collectively storing instructions that, when executed by one or more processors, cause a computing system to perform operations comprising:
obtaining a document, and wherein the layout data is associated with the document;
dividing the document into a plurality of blocks based at least in part on the layout data;
processing each of the plurality of blocks with a machine-learned block-level encoder model to generate a plurality of block-level representations of the plurality of blocks, respectively, wherein, for each of the plurality of blocks, layout data associated with the block is provided as input to the machine-learned block-level encoder model;
processing the plurality of block level representations with a machine-learned document level encoder model to generate a document level representation of the document; and
A document level representation is provided as an output.
24. The one or more non-transitory computer-readable media of any preceding claim, wherein the operations further comprise: a block type for each of the plurality of blocks is determined based at least in part on the layout data.
25. The one or more non-transitory computer-readable media of any preceding claim, wherein the block type of the first block is at least one of a header, a paragraph, an image, a list, or a table.
26. A computer-implemented method for pre-training, the method comprising:
obtaining, by the computing system, a plurality of media training blocks from one or more training documents, wherein each of the plurality of media training blocks includes one or more images from the one or more training documents;
masking, by the computing system, one or more images of a media training block of the plurality of media training blocks to obtain a masked training block;
processing, by the computing system, the plurality of media training blocks with the machine learning block level coding model to generate a corresponding plurality of media block level representations, wherein the media block level representations of the masking training blocks include a predicted output of a replacement image selected from a pool of candidate images generated from the masking training blocks and each of a plurality of additional masking training blocks from the training batch;
Evaluating, by the computing system, a pre-training penalty function that evaluates differences between the prediction output and truth data associated with the masking training block and the plurality of additional masking training blocks; and
one or more parameters of the machine-learned semantic document encoding model are adjusted by the computing system based at least in part on the pre-training loss function.
27. A computing system, comprising:
one or more processors;
one or more non-transitory computer-readable media collectively storing instructions that, when executed by one or more processors, cause a computing system to perform operations of any one of claims 1-17 and 26.
28. One or more non-transitory computer-readable media collectively storing instructions that, when executed by one or more processors, cause a computing system to perform operations of any one of claims 1-17 and 26.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2020/066588 WO2022139807A1 (en) | 2020-12-22 | 2020-12-22 | Layout-aware multimodal pretraining for multimodal document understanding |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116097250A true CN116097250A (en) | 2023-05-09 |
Family
ID=74195161
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080102669.5A Pending CN116097250A (en) | 2020-12-22 | 2020-12-22 | Layout aware multimodal pre-training for multimodal document understanding |
Country Status (4)
Country | Link |
---|---|
US (1) | US20230222285A1 (en) |
EP (1) | EP4150487A1 (en) |
CN (1) | CN116097250A (en) |
WO (1) | WO2022139807A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11694018B2 (en) * | 2021-01-29 | 2023-07-04 | Salesforce, Inc. | Machine-learning based generation of text style variations for digital content items |
TWI825467B (en) * | 2021-08-23 | 2023-12-11 | 緯創資通股份有限公司 | Data analysis system and data analysis method |
CN115809325B (en) * | 2022-12-23 | 2023-11-21 | 北京百度网讯科技有限公司 | Document processing model training method, document processing method, device and equipment |
CN115797495B (en) * | 2023-02-07 | 2023-04-25 | 武汉理工大学 | Method for generating image by sentence-character semantic space fusion perceived text |
CN116311320B (en) * | 2023-05-22 | 2023-08-22 | 建信金融科技有限责任公司 | Training method of text image fusion layer, text image recognition method and device |
CN116822632B (en) * | 2023-08-28 | 2024-01-05 | 腾讯科技（深圳）有限公司 | Reasoning method and device of text data, storage medium and electronic equipment |
CN117421641B (en) * | 2023-12-13 | 2024-04-16 | 深圳须弥云图空间科技有限公司 | Text classification method, device, electronic equipment and readable storage medium |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7953679B2 (en) * | 2009-07-22 | 2011-05-31 | Xerox Corporation | Scalable indexing for layout based document retrieval and ranking |
CN111680490B (en) * | 2020-06-10 | 2022-10-28 | 东南大学 | Cross-modal document processing method and device and electronic equipment |
-
2020
- 2020-12-22 CN CN202080102669.5A patent/CN116097250A/en active Pending
- 2020-12-22 EP EP20845311.8A patent/EP4150487A1/en active Pending
- 2020-12-22 US US17/928,984 patent/US20230222285A1/en active Pending
- 2020-12-22 WO PCT/US2020/066588 patent/WO2022139807A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
EP4150487A1 (en) | 2023-03-22 |
US20230222285A1 (en) | 2023-07-13 |
WO2022139807A1 (en) | 2022-06-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111310438B (en) | Chinese sentence semantic intelligent matching method and device based on multi-granularity fusion model | |
CN116097250A (en) | Layout aware multimodal pre-training for multimodal document understanding | |
US11288324B2 (en) | Chart question answering | |
Tymoshenko et al. | Convolutional neural networks vs. convolution kernels: Feature engineering for answer sentence reranking | |
CN112818093B (en) | Evidence document retrieval method, system and storage medium based on semantic matching | |
CN112270196B (en) | Entity relationship identification method and device and electronic equipment | |
CN112819023B (en) | Sample set acquisition method, device, computer equipment and storage medium | |
Wu et al. | Learning of multimodal representations with random walks on the click graph | |
CN107688870B (en) | Text stream input-based hierarchical factor visualization analysis method and device for deep neural network | |
CN111291188A (en) | Intelligent information extraction method and system | |
CN112307182B (en) | Question-answering system-based pseudo-correlation feedback extended query method | |
CN117076653B (en) | Knowledge base question-answering method based on thinking chain and visual lifting context learning | |
Adi et al. | Analysis of sentence embedding models using prediction tasks in natural language processing | |
US20230014904A1 (en) | Searchable data structure for electronic documents | |
CN111400492B (en) | Hierarchical feature text classification method and system based on SFM-DCNN | |
CN114048354A (en) | Test question retrieval method, device and medium based on multi-element characterization and metric learning | |
CN112667797B (en) | Question-answer matching method, system and storage medium for self-adaptive transfer learning | |
CN112396091B (en) | Social media image popularity prediction method, system, storage medium and application | |
Ludwig et al. | Deep embedding for spatial role labeling | |
CN111581365B (en) | Predicate extraction method | |
CN111382333B (en) | Case element extraction method in news text sentence based on case correlation joint learning and graph convolution | |
CN116956228A (en) | Text mining method for technical transaction platform | |
CN116843175A (en) | Contract term risk checking method, system, equipment and storage medium | |
US20230138491A1 (en) | Continuous learning for document processing and analysis | |
CN115129863A (en) | Intention recognition method, device, equipment, storage medium and computer program product |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |