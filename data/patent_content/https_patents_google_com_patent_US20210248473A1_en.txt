US20210248473A1 - Attention neural networks with linear units - Google Patents
Attention neural networks with linear units Download PDFInfo
- Publication number
- US20210248473A1 US20210248473A1 US17/175,567 US202117175567A US2021248473A1 US 20210248473 A1 US20210248473 A1 US 20210248473A1 US 202117175567 A US202117175567 A US 202117175567A US 2021248473 A1 US2021248473 A1 US 2021248473A1
- Authority
- US
- United States
- Prior art keywords
- input
- layer
- attention
- output
- sequence
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/048—Activation functions
-
- G06N3/0481—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
Definitions
- This specification relates to performing a machine learning task on a network input using neural networks.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that performs a machine learning task on a network input using an attention neural network that includes feed-forward sub-layers that apply linear units to their inputs.
- the techniques described in this specification allow a neural network system to process input sequences, generate output sequences, or both more accurately than existing attention-based networks by using a new feed-forward sub-layer, i.e., relative to conventional attention-based neural networks.
- a feed-forward sub-layer that computes an element-wise product between vectors derived from the outputs of two different linear transformations (in place of, e.g., a single linear transformation followed by an activation function)
- the described attention neural networks can achieve improved performance on a variety of tasks, including tasks that leverage unsupervised pre-training in order to improve performance on supervised downstream tasks with limited available training data.
- FIG. 1 shows an example neural network system.
- FIG. 2 shows an example of the operations performed by the feed-forward sub-layer of an attention layer.
- FIG. 3 is a flow diagram of an example process for generating an output sequence for an attention layer from an attended input sequence.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that performs a machine learning task on a network input to generate network output for the machine learning task.
- the machine learning task can be any machine learning task that (i) operates on a network input that is an input sequence, (ii) generates a network output that is an output sequence, or (iii) both.
- the task may be a neural machine translation task.
- the input to the neural network is a sequence of text, e.g., a sequence of words, phrases, characters, or word pieces, in one language
- the output generated by the neural network may be a translation of the sequence of text into another language, i.e., a sequence of text in the other language that is a translation of the input sequence of text.
- the task may be a multi-lingual machine translation task, where a single neural network is configured to translate between multiple different source language—target language pairs.
- the source language text may be augmented with an identifier that indicates the target language into which the neural network should translate the source language text.
- the task may be an audio processing task.
- the output generated by the neural network may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance.
- the output generated by the neural network can indicate whether a particular word or phrase (“hotword”) was spoken in the utterance.
- the output generated by the neural network can identify the natural language in which the utterance was spoken.
- the task can be a natural language processing or understanding task, e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- a natural language processing or understanding task e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- the task can be a text to speech task, where the input is text in a natural language or features of text in a natural language and the network output is a spectrogram, a waveform, or other data defining audio of the text being spoken in the natural language.
- the task can be a health prediction task, where the input is a sequence derived from electronic health record data for a patient and the output is a prediction that is relevant to the future health of the patient, e.g., a predicted treatment that should be prescribed to the patient, the likelihood that an adverse health event will occur to the patient, or a predicted diagnosis for the patient.
- a prediction that is relevant to the future health of the patient, e.g., a predicted treatment that should be prescribed to the patient, the likelihood that an adverse health event will occur to the patient, or a predicted diagnosis for the patient.
- the task can be a text generation task, where the input is a sequence of text, and the output is another sequence of text, e.g., a completion of the input sequence of text, a response to a question posed in the input sequence, or a sequence of text that is about a topic specified by the first sequence of text.
- the input to the text generation task can be an input other than text, e.g., an image, and the output sequence can be text that describes the input.
- the task can be an image generation task, where the input is a conditioning input and the output is a sequence of intensity value inputs for the pixels of an image.
- the task can be an agent control task, where the input is a sequence of observations or other data characterizing states of an environment and the output defines an action to be performed by the agent in response to the most recent data in the sequence.
- the agent can be, e.g., a real-world or simulated robot, a control system for an industrial facility, or a control system that controls a different kind of agent.
- the task can be a genomics task, where the input is a sequence representing a fragment of a DNA sequence or other molecule sequence and the output is either an embedding of the fragment for use in a downstream task, e.g., by making use of an unsupervised learning technique on a data set of DNA sequence fragments, or an output for the downstream task.
- downstream tasks include promoter site prediction, methylation analysis, predicting functional effects of non-coding variants, and so on.
- the machine learning task is a combination of multiple individual machine learning tasks, i.e., the system is configured to perform multiple different individual machine learning tasks, e.g., two or more of the machine learning tasks mentioned above.
- the system can be configured to perform multiple individual natural language understanding tasks, with the network input including an identifier for the individual natural language understanding task to be performed on the network input.
- the system includes an attention neural network that includes multiple attention layers. Each layer operates on a respective input sequence that includes a respective layer input at each of one or more positions.
- each of the layers includes an attention sub-layer and a feed-forward sub-layer.
- the attention sub-layer receives the input sequence for the layer and applies an attention mechanism on the input sequence for the layer to generate an attended input sequence.
- the attention mechanism applied by the attention layer depends on the configuration of the attention neural network, as will be described in more detail below.
- the feed-forward sub-layer then operates on the attended input sequence to generate an output sequence for the layer.
- the layers within the attention neural network can be arranged in any of a variety of configurations.
- the attention neural network when the network input is an input sequence, includes an encoder neural network that includes a subset of the plurality of layers and that encodes the input sequence to generate a respective encoded representation of each input in the sequence.
- the attention mechanism applied by the layers in the encoder is a self-attention mechanism, e.g., a multi-head self-attention mechanism.
- the attention neural network includes a decoder neural network that includes a different subset of the plurality of layers and that processes either the network input or the encoded representation of the network input to generate the network output.
- the decoder neural network operates auto-regressively and the attention sub-layers within some or all of the layers of the decoder apply masked self-attention over the partially generated output sequence.
- the neural network includes both an encoder and a decoder, some of the layers in the decoder apply cross-attention into the encoded representations while others apply self-attention over the output sequence, either masked or not masked.
- the attention neural network includes a decoder neural network that operates directly on the input sequence, the attention layers within the decoder can apply a self-attention mechanism over the input sequence.
- FIG. 1 shows an example neural network system 100 .
- the neural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the neural network system 100 can receive an input 102 and perform a machine learning task on the input 102 to generate an output 152 .
- the neural network system 100 can perform any of a variety of tasks that involves (i) operating on an input 102 that is an input sequence, (ii) generating an output 152 that is an output sequence, or (iii) both.
- the neural network system 100 includes an attention neural network 150 that includes multiple attention layers 110 .
- Each attention layer 110 operates on an input sequence 104 and generates a corresponding output sequence 134 .
- the attention neural network 150 generally includes many other layers, including, for example, embedding layers, output layer, and other attention layers.
- the input sequence 104 has a respective input at each of one or more input positions in an input order and the output sequence 134 has a respective output at each of one or more output positions in an output order. That is, the input sequence 102 has one or more inputs arranged according to an input order and the output sequence 134 has one or more outputs arranged according to an output order.
- the input sequence 104 can be any intermediate sequential data generated by the attention neural network 150 when performing the machine learning task on the input 102 .
- the input sequence 104 can be embedded (i.e., numeric) representations of the system input 102 generated by an embedding layer.
- the input sequence 104 can be an output sequence generated by a preceding attention layer or other layer in the attention neural network 150 .
- the input sequence 140 can be embedded representations of the currently generated network output as of the current time step.
- each attention layer 110 includes an attention sub-layer 120 and a linear unit feed-forward sub-layer 130 .
- the attention sub-layer 120 receives the input sequence 104 for the layer 110 and applies an attention mechanism on the input sequence for the layer to generate an attended input sequence 124 .
- the sub-layer 120 uses one or more attention heads.
- Each attention head generates a set of queries, a set of keys, and a set of values, and then applies any of a variety of variants of query-key-value (QKV) attention using the queries, keys, and values to generate an output.
- QKV query-key-value
- the sub-layer 120 then combines the outputs of the multiple attention heads, e.g., by concatenating the outputs and, optionally, processing the concatenated outputs through a linear layer.
- the attended input sequence 124 is the final output of the attention mechanism.
- the sub-layer 120 applies one or more other operations, e.g., residual connections, layer normalization, or both, to the final output to generate the sequence 124 .
- the feed-forward sub-layer 130 then operates on the attended input sequence 124 to generate an output sequence 134 for the layer 110 .
- the layers within the attention neural network can be arranged in any of a variety of configurations.
- the attention mechanism applied by the attention sub-layer 120 depends on the configuration of the attention neural network 150 .
- the attention neural network 150 when the network input is an input sequence, the attention neural network 150 includes an encoder neural network that includes a subset of the plurality of layers and that encodes the input sequence to generate a respective encoded representation of each input in the sequence.
- the attention mechanism applied by the attention sub-layers 120 in the encoder is a self-attention mechanism, e.g., a multi-head self-attention mechanism, where the queries, keys, and values are all generated from the input sequence to the attention sub-layer.
- the attention neural network 150 includes a decoder neural network that includes a different subset of the plurality of layers and that processes either the network input or the encoded representation of the network input to generate the network output.
- the decoder neural network operates auto-regressively and the attention sub-layers 120 within some or all of the layers of the decoder apply masked self-attention over the partially generated output sequence, where the queries, keys, and values are all generated from the input sequence to the attention sub-layer 120 .
- the neural network 150 includes both an encoder and a decoder
- some of the layers in the decoder apply cross-attention into the encoded representations while others apply self-attention over the output sequence, either masked or not masked.
- cross-attention the queries are generated from the input sequence to the attention sub-layer 120 while the keys and values are generated from the encoded representations of the network input.
- the attention neural network 150 includes a decoder neural network that operates directly on the input sequence
- the attention sub-layers 120 within the decoder can apply a self-attention mechanism over the input sequence.
- the term “learned” means that an operation or a value has been adjusted during the training of the attention neural network 150 .
- Each feed-forward sub-layer 130 is configured to operate on each position in the attended input sequence 124 separately, i.e., in a position-wise manner.
- the feed-forward sub-layer 130 is configured receive an attended layer input at the input position and apply a set of transformations to the attended layer input at the input position to generate an output for the input position.
- the transformations applied by the sub-layer 130 will generally be the same for each input position (but different feed-forward sub-layers in the attention neural network 150 will apply different transformations).
- the sequence of transformations generally include one linear transformation applied to a given attended layer input, followed by an activation function, e.g., a non-linear elementwise activation function, e.g., a ReLU activation function, and then followed by another linear transformation.
- an activation function e.g., a non-linear elementwise activation function, e.g., a ReLU activation function
- the feed-forward sub-layers 130 apply a different set of transformations, as described below with reference to FIGS. 2 and 3 .
- FIG. 2 shows the operations performed by the feed-forward sub-layer 130 for a given attended input 210 at a given position in the attended input sequence generated by the attention sub-layer 120 .
- the feed-forward sub-layer 130 can perform these operations, e.g., in parallel, for each attended input to generate the layer output for the attention layer 110 .
- the feed-forward sub-layer 130 generates a first transformed input 222 by applying a first linear transformation 220 to the attended layer input 210 .
- the sub-layer 130 multiplies the attended layer input 210 by a first weight matrix to generate a product and, optionally, adds a first bias to the product to generate the output of the first linear transformation 220 .
- the sub-layer 130 uses the same first weight matrix and (when used) the same first bias for all of the attended layer inputs. In other words, during training, the system 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences.
- the output of the first linear transformation 220 is the first transformed input 222 .
- the sub-layer 130 applies a non-linear activation function to the output of the first linear transformation 220 to generate the first transformed input 222 .
- the activation function is a rectified linear unit (ReLU) activation function.
- ReLUs are described in more detail in Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Deep sparse rectifier neural networks. In Proceedings of the fourteenth international conference on artificial intelligence and statistics, pages 315-323, 2011, the entire contents of which are incorporated by reference herein.
- the activation function is a sigmoid activation function.
- the activation function is a Gaussian Error Linear Units activation function.
- GELUs are described in more detail in Dan Hendrycks and Kevin Gimpel. Bridging nonlinearities and stochastic regularizers with gaussian error linear units. CoRR, abs/1606.08415, 2016. arXiv preprint arXiv:1606.08415, the entire contents of which are incorporated by reference herein.
- the activation function is a Swish activation function. Swish activation functions are described in Prajit Ramachandran, Barret Zoph, and Quoc V Le. Searching for activation functions. arXiv preprint arXiv:1710.05941, 2017, the entire contents of which are incorporated by reference herein.
- the sub-layer 130 generates a second transformed input 232 by applying a second linear transformation 230 to the attended layer input at the position.
- the sub-layer 130 multiplies the attended layer input 210 by a second weight matrix to generate a product and, optionally, adds a second bias to the product to generate the second transformed input 232 .
- the sub-layer 130 uses the same second weight matrix and (when used) the same second bias for all of the attended layer inputs. In other words, during training, the system 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences.
- the sub-layer 130 applies two different learned linear transformations to the same attended layer input 210 to generate two different transformed inputs 222 and 232 .
- the sub-layer 130 then generates a third transformed input 242 by performing an element-wise multiplication 240 between the first transformed input and the second transformed input.
- An element-wise multiplication between two vectors of the same dimensionality generates an output vector that also has the same dimensionality by multiplying each element of one vector with the corresponding element from the other vector.
- the sub-layer 130 performs an element-wise product between the outputs of two different linear transformations on the same attended layer input. This results in improved performance, e.g., because the sub-layer 130 can leverage the information from two different learned transformations applied to the same attended layer input instead of applying learned transformation in sequence.
- the sub-layer 130 applies a third linear transformation 250 to the third transformed input 242 to generate a fourth transformed input 252 .
- the sub-layer 130 multiplies the third transformed input 242 by a third weight matrix to generate a product and, optionally, adds a third bias to the product to generate the fourth transformed input 252 .
- the sub-layer 130 uses the same third weight matrix and (when used) the same third bias for all of the attended layer inputs. In other words, during training, the system 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences.
- the first linear transformation 220 , the second linear transformation 230 , and the third linear transformation 250 will generally all be different from one another.
- the weight matrices for the weight matrices for all three transformation will have the same dimensionality, the system 100 learns different values for the weights in the matrices during the training of the attention neural network 110 .
- the sub-layer 130 then generates the layer output 272 at the position from the fourth transformed input 252 .
- the sub-layer 130 can be configured to generate the layer output 272 in a variety of different ways, e.g., depending on whether the attention layer 110 is a reversible layer or not.
- the attention layer 110 is not a reversible layer
- the sub-layer 130 generates the layer output 272 by first applying a residual connection 260 to the fourth transformed input 252 to generate an initial output 262 and then applying layer normalization to the initial outputs 262 at the output positions to generate the layer outputs 272 at the output positions.
- FIG. 3 is a flow diagram of an example process 300 for generating a layer output from an attended input sequence.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a neural network system e.g., neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system receives, at a feed-forward sub-layer included in an attention layer, an attended input sequence that includes a respective attended input at each of one or more positions and generates, from the attended input sequence, an output sequence for the attention layer that includes a respective layer output at each of the one or more positions.
- the attended input sequence was generated by an attention sub-layer within the attention layer that is configured to receive an input sequence for the attention layer that includes a respective layer input at each of the one or more positions and generate the attended input sequence at least in part by applying an attention mechanism to the input sequence for the layer.
- the system generates, by the feed-forward sub-layer and for each of the positions, a first transformed input (step 302 ), at least in part by applying a first linear transformation to the attended layer input at the position.
- the system generates, by the feed-forward sub-layer and for each of the positions, a second transformed input by applying a second linear transformation to the attended layer input at the position (step 304 ).
- the system generates, by the feed-forward sub-layer and for each of the positions, a third transformed input by performing an element-wise multiplication between the first transformed input and the second transformed input (step 306 ).
- the system generates, by the feed-forward sub-layer and for each of the positions, the layer output at the position from the third transformed input (step 308 ).
- the system can repeatedly (i.e., at each of one or more attention sub-layers included in the attention layer) perform the process 300 to update the input sequence to the layer.
- the system can generate a network output for a received network input.
- the process 300 can be performed as part of predicting an output for an input for which the desired output, i.e., the output that should be generated by the system for the input sequence, is not known.
- the process 300 can also be performed as part of processing inputs derived from a set of training data, i.e., inputs derived from a set of inputs for which the output that should be generated by the system is known, in order to train the attention neural network to determine trained values for the parameters of the attention neural network.
- the system can repeatedly perform the process 300 on inputs selected from a set of training data as part of a conventional machine learning training technique to train the attention layers and the output layer(s) of the neural network, e.g., a gradient descent with backpropagation training technique that uses a conventional optimizer, e.g., stochastic gradient descent, RMSprop, or Adam optimizer, to optimize an objective function that is appropriate for the task that the attention neural network is configured to perform.
- a conventional optimizer e.g., stochastic gradient descent, RMSprop, or Adam optimizer
- the system can incorporate any number of techniques to improve the speed, the effectiveness, or both of the training process.
- the system can use dropout, label smoothing, or both to reduce overfitting.
- the system can perform the training using a distributed architecture that trains multiple instances of the attention neural network in parallel.
- the system can first pre-train the neural network on a large unsupervised data set through unsupervised learning, e.g., to minimize a BERT loss or other unsupervised loss, and then fine-tune the neural network on task-specific training data to optimize the objective function for the task.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations.
- the index database can include multiple collections of data, each of which may be organized and accessed differently.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for performing a machine learning task on a network input to generate a network output. In one aspect, one of the systems includes an attention neural network configured to perform the machine learning task, the attention neural network including one or more attention layers, each attention layer comprising an attention sub-layer and a feed-forward sub-layer that applies an element-wise multiplication between two vectors generated as a result of two different linear transformations performed on the same attended layer input.
Description
- This application claims priority to U.S. Provisional Application No. 62/975,707, filed on Feb. 12, 2020. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to performing a machine learning task on a network input using neural networks.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input. Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer. Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that performs a machine learning task on a network input using an attention neural network that includes feed-forward sub-layers that apply linear units to their inputs.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages.
- The techniques described in this specification allow a neural network system to process input sequences, generate output sequences, or both more accurately than existing attention-based networks by using a new feed-forward sub-layer, i.e., relative to conventional attention-based neural networks. In more detail, by using a feed-forward sub-layer that computes an element-wise product between vectors derived from the outputs of two different linear transformations (in place of, e.g., a single linear transformation followed by an activation function), the described attention neural networks can achieve improved performance on a variety of tasks, including tasks that leverage unsupervised pre-training in order to improve performance on supervised downstream tasks with limited available training data.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 shows an example neural network system. -
FIG. 2 shows an example of the operations performed by the feed-forward sub-layer of an attention layer. -
FIG. 3 is a flow diagram of an example process for generating an output sequence for an attention layer from an attended input sequence. - Like reference numbers and designations in the various drawings indicate like elements.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that performs a machine learning task on a network input to generate network output for the machine learning task.
- The machine learning task can be any machine learning task that (i) operates on a network input that is an input sequence, (ii) generates a network output that is an output sequence, or (iii) both.
- Some examples of machine learning tasks that the system can be configured to perform follow.
- As one example, the task may be a neural machine translation task. For example, if the input to the neural network is a sequence of text, e.g., a sequence of words, phrases, characters, or word pieces, in one language, the output generated by the neural network may be a translation of the sequence of text into another language, i.e., a sequence of text in the other language that is a translation of the input sequence of text. As a particular example, the task may be a multi-lingual machine translation task, where a single neural network is configured to translate between multiple different source language—target language pairs. In this example, the source language text may be augmented with an identifier that indicates the target language into which the neural network should translate the source language text.
- As another example, the task may be an audio processing task. For example, if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance. As another example, if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network can indicate whether a particular word or phrase (“hotword”) was spoken in the utterance. As another example, if the input to the neural network is a sequence representing a spoken utterance, the output generated by the neural network can identify the natural language in which the utterance was spoken.
- As another example, the task can be a natural language processing or understanding task, e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- As another example, the task can be a text to speech task, where the input is text in a natural language or features of text in a natural language and the network output is a spectrogram, a waveform, or other data defining audio of the text being spoken in the natural language.
- As another example, the task can be a health prediction task, where the input is a sequence derived from electronic health record data for a patient and the output is a prediction that is relevant to the future health of the patient, e.g., a predicted treatment that should be prescribed to the patient, the likelihood that an adverse health event will occur to the patient, or a predicted diagnosis for the patient.
- As another example, the task can be a text generation task, where the input is a sequence of text, and the output is another sequence of text, e.g., a completion of the input sequence of text, a response to a question posed in the input sequence, or a sequence of text that is about a topic specified by the first sequence of text. As another example, the input to the text generation task can be an input other than text, e.g., an image, and the output sequence can be text that describes the input.
- As another example, the task can be an image generation task, where the input is a conditioning input and the output is a sequence of intensity value inputs for the pixels of an image.
- As another example, the task can be an agent control task, where the input is a sequence of observations or other data characterizing states of an environment and the output defines an action to be performed by the agent in response to the most recent data in the sequence. The agent can be, e.g., a real-world or simulated robot, a control system for an industrial facility, or a control system that controls a different kind of agent.
- As another example, the task can be a genomics task, where the input is a sequence representing a fragment of a DNA sequence or other molecule sequence and the output is either an embedding of the fragment for use in a downstream task, e.g., by making use of an unsupervised learning technique on a data set of DNA sequence fragments, or an output for the downstream task. Examples of downstream tasks include promoter site prediction, methylation analysis, predicting functional effects of non-coding variants, and so on.
- In some cases, the machine learning task is a combination of multiple individual machine learning tasks, i.e., the system is configured to perform multiple different individual machine learning tasks, e.g., two or more of the machine learning tasks mentioned above. For example, the system can be configured to perform multiple individual natural language understanding tasks, with the network input including an identifier for the individual natural language understanding task to be performed on the network input.
- To perform the machine learning task, the system includes an attention neural network that includes multiple attention layers. Each layer operates on a respective input sequence that includes a respective layer input at each of one or more positions.
- Moreover, each of the layers includes an attention sub-layer and a feed-forward sub-layer. The attention sub-layer receives the input sequence for the layer and applies an attention mechanism on the input sequence for the layer to generate an attended input sequence. The attention mechanism applied by the attention layer depends on the configuration of the attention neural network, as will be described in more detail below. The feed-forward sub-layer then operates on the attended input sequence to generate an output sequence for the layer.
- Generally, the layers within the attention neural network can be arranged in any of a variety of configurations.
- As one example, when the network input is an input sequence, the attention neural network includes an encoder neural network that includes a subset of the plurality of layers and that encodes the input sequence to generate a respective encoded representation of each input in the sequence. In this example, the attention mechanism applied by the layers in the encoder is a self-attention mechanism, e.g., a multi-head self-attention mechanism.
- As another example, the attention neural network includes a decoder neural network that includes a different subset of the plurality of layers and that processes either the network input or the encoded representation of the network input to generate the network output. In some of these examples, when the network output is an output sequence the decoder neural network operates auto-regressively and the attention sub-layers within some or all of the layers of the decoder apply masked self-attention over the partially generated output sequence. When the neural network includes both an encoder and a decoder, some of the layers in the decoder apply cross-attention into the encoded representations while others apply self-attention over the output sequence, either masked or not masked. When the attention neural network includes a decoder neural network that operates directly on the input sequence, the attention layers within the decoder can apply a self-attention mechanism over the input sequence.
- The specifics of the operation of the attention layers within the decoder neural network and the encoder neural network are described in more detail in Vaswani, et al, attention Is All You Need, arXiv:1706.03762, and Raffel, et al, Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer, arXiv:1910.10683, and Devlin et al, BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding, arXiv:1810.04805, the entire contents of which are hereby incorporated by reference herein in their entirety.
-
FIG. 1 shows an exampleneural network system 100. Theneural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented. - The
neural network system 100 can receive aninput 102 and perform a machine learning task on theinput 102 to generate anoutput 152. - As described above, the
neural network system 100 can perform any of a variety of tasks that involves (i) operating on aninput 102 that is an input sequence, (ii) generating anoutput 152 that is an output sequence, or (iii) both. - The
neural network system 100 includes an attentionneural network 150 that includesmultiple attention layers 110. - Each
attention layer 110 operates on aninput sequence 104 and generates acorresponding output sequence 134. - Although one attention layer is depicted in
FIG. 1 for convenience, as described above, the attentionneural network 150 generally includes many other layers, including, for example, embedding layers, output layer, and other attention layers. - Specifically, the
input sequence 104 has a respective input at each of one or more input positions in an input order and theoutput sequence 134 has a respective output at each of one or more output positions in an output order. That is, theinput sequence 102 has one or more inputs arranged according to an input order and theoutput sequence 134 has one or more outputs arranged according to an output order. - In general, the
input sequence 104 can be any intermediate sequential data generated by the attentionneural network 150 when performing the machine learning task on theinput 102. For example, theinput sequence 104 can be embedded (i.e., numeric) representations of thesystem input 102 generated by an embedding layer. As another example, theinput sequence 104 can be an output sequence generated by a preceding attention layer or other layer in the attentionneural network 150. As another example, when theneural network 150 generates the network output auto-regressively, the input sequence 140 can be embedded representations of the currently generated network output as of the current time step. - To generate the
output sequence 134 from theinput sequence 104, eachattention layer 110 includes anattention sub-layer 120 and a linear unit feed-forward sub-layer 130. - The
attention sub-layer 120 receives theinput sequence 104 for thelayer 110 and applies an attention mechanism on the input sequence for the layer to generate an attendedinput sequence 124. - Generally, to apply the attention mechanism, the sub-layer 120 uses one or more attention heads. Each attention head generates a set of queries, a set of keys, and a set of values, and then applies any of a variety of variants of query-key-value (QKV) attention using the queries, keys, and values to generate an output. When there are multiple attention heads, the sub-layer 120 then combines the outputs of the multiple attention heads, e.g., by concatenating the outputs and, optionally, processing the concatenated outputs through a linear layer. Examples of QKV attention variants are described in Vaswani, et al, Attention Is All You Need, arXiv:1706.03762, Raffel, et al, Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer, arXiv:1910.10683, Devlin et al, BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding, arXiv:1810.04805, Dai, et al, Transformer XL: Attentive Language Models Beyond a Fixed-Length Context, arXiv:1901.02860, and Kitaev, et al, Reformer: The Efficient Transformer, arXiv: 2001.04451, the entire contents of which are hereby incorporated by reference herein in their entirety.
- In some cases, the attended
input sequence 124 is the final output of the attention mechanism. In some other cases, the sub-layer 120 applies one or more other operations, e.g., residual connections, layer normalization, or both, to the final output to generate thesequence 124. - The feed-
forward sub-layer 130 then operates on the attendedinput sequence 124 to generate anoutput sequence 134 for thelayer 110. - Generally, the layers within the attention neural network can be arranged in any of a variety of configurations.
- The attention mechanism applied by the
attention sub-layer 120 depends on the configuration of the attentionneural network 150. - As one example, when the network input is an input sequence, the attention
neural network 150 includes an encoder neural network that includes a subset of the plurality of layers and that encodes the input sequence to generate a respective encoded representation of each input in the sequence. In this example, the attention mechanism applied by theattention sub-layers 120 in the encoder is a self-attention mechanism, e.g., a multi-head self-attention mechanism, where the queries, keys, and values are all generated from the input sequence to the attention sub-layer. - As another example, the attention
neural network 150 includes a decoder neural network that includes a different subset of the plurality of layers and that processes either the network input or the encoded representation of the network input to generate the network output. In some of these examples, when the network output is an output sequence, the decoder neural network operates auto-regressively and the attention sub-layers 120 within some or all of the layers of the decoder apply masked self-attention over the partially generated output sequence, where the queries, keys, and values are all generated from the input sequence to theattention sub-layer 120. - When the
neural network 150 includes both an encoder and a decoder, some of the layers in the decoder apply cross-attention into the encoded representations while others apply self-attention over the output sequence, either masked or not masked. In cross-attention, the queries are generated from the input sequence to theattention sub-layer 120 while the keys and values are generated from the encoded representations of the network input. - When the attention
neural network 150 includes a decoder neural network that operates directly on the input sequence, the attention sub-layers 120 within the decoder can apply a self-attention mechanism over the input sequence. - As used in this specification, the term “learned” means that an operation or a value has been adjusted during the training of the attention
neural network 150. - Each feed-
forward sub-layer 130 is configured to operate on each position in the attendedinput sequence 124 separately, i.e., in a position-wise manner. In particular, for each input position, the feed-forward sub-layer 130 is configured receive an attended layer input at the input position and apply a set of transformations to the attended layer input at the input position to generate an output for the input position. The transformations applied by the sub-layer 130 will generally be the same for each input position (but different feed-forward sub-layers in the attentionneural network 150 will apply different transformations). - In conventional attention neural networks, the sequence of transformations generally include one linear transformation applied to a given attended layer input, followed by an activation function, e.g., a non-linear elementwise activation function, e.g., a ReLU activation function, and then followed by another linear transformation.
- In the described attention
neural network 150, however, the feed-forward sub-layers 130 apply a different set of transformations, as described below with reference toFIGS. 2 and 3 . -
FIG. 2 shows the operations performed by the feed-forward sub-layer 130 for a given attendedinput 210 at a given position in the attended input sequence generated by theattention sub-layer 120. The feed-forward sub-layer 130 can perform these operations, e.g., in parallel, for each attended input to generate the layer output for theattention layer 110. - In particular, the feed-
forward sub-layer 130 generates a first transformedinput 222 by applying a firstlinear transformation 220 to the attendedlayer input 210. In particular, the sub-layer 130 multiplies the attendedlayer input 210 by a first weight matrix to generate a product and, optionally, adds a first bias to the product to generate the output of the firstlinear transformation 220. The sub-layer 130 uses the same first weight matrix and (when used) the same first bias for all of the attended layer inputs. In other words, during training, thesystem 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences. - In some implementations, the output of the first
linear transformation 220 is the first transformedinput 222. - In some other implementations, the sub-layer 130 applies a non-linear activation function to the output of the first
linear transformation 220 to generate the first transformedinput 222. - In some of these implementations, the activation function is a rectified linear unit (ReLU) activation function. ReLUs are described in more detail in Xavier Glorot, Antoine Bordes, and Yoshua Bengio. Deep sparse rectifier neural networks. In Proceedings of the fourteenth international conference on artificial intelligence and statistics, pages 315-323, 2011, the entire contents of which are incorporated by reference herein.
- In others of these implementations, the activation function is a sigmoid activation function.
- In yet others of these implementations, the activation function is a Gaussian Error Linear Units activation function. GELUs are described in more detail in Dan Hendrycks and Kevin Gimpel. Bridging nonlinearities and stochastic regularizers with gaussian error linear units. CoRR, abs/1606.08415, 2016. arXiv preprint arXiv:1606.08415, the entire contents of which are incorporated by reference herein.
- In yet others of these implementations, the activation function is a Swish activation function. Swish activation functions are described in Prajit Ramachandran, Barret Zoph, and Quoc V Le. Searching for activation functions. arXiv preprint arXiv:1710.05941, 2017, the entire contents of which are incorporated by reference herein.
- The sub-layer 130 generates a second transformed
input 232 by applying a secondlinear transformation 230 to the attended layer input at the position. In particular, the sub-layer 130 multiplies the attendedlayer input 210 by a second weight matrix to generate a product and, optionally, adds a second bias to the product to generate the second transformedinput 232. As with the first linear transformation, the sub-layer 130 uses the same second weight matrix and (when used) the same second bias for all of the attended layer inputs. In other words, during training, thesystem 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences. - Thus, the sub-layer 130 applies two different learned linear transformations to the same attended
layer input 210 to generate two different transformedinputs - The sub-layer 130 then generates a third transformed
input 242 by performing anelement-wise multiplication 240 between the first transformed input and the second transformed input. An element-wise multiplication between two vectors of the same dimensionality generates an output vector that also has the same dimensionality by multiplying each element of one vector with the corresponding element from the other vector. - Thus, unlike a conventional sub-layer in a conventional attention neural network, the sub-layer 130 performs an element-wise product between the outputs of two different linear transformations on the same attended layer input. This results in improved performance, e.g., because the sub-layer 130 can leverage the information from two different learned transformations applied to the same attended layer input instead of applying learned transformation in sequence.
- The sub-layer 130 applies a third
linear transformation 250 to the third transformedinput 242 to generate a fourth transformedinput 252. In particular, the sub-layer 130 multiplies the third transformedinput 242 by a third weight matrix to generate a product and, optionally, adds a third bias to the product to generate the fourth transformedinput 252. As with the first and second linear transformations, the sub-layer 130 uses the same third weight matrix and (when used) the same third bias for all of the attended layer inputs. In other words, during training, thesystem 100 constrains the weight matrices and (when used) the biases to be the same for all of the positions in the attended layer sequences. - The first
linear transformation 220, the secondlinear transformation 230, and the thirdlinear transformation 250 will generally all be different from one another. In other words, although the weight matrices for the weight matrices for all three transformation will have the same dimensionality, thesystem 100 learns different values for the weights in the matrices during the training of the attentionneural network 110. - The sub-layer 130 then generates the
layer output 272 at the position from the fourth transformedinput 252. - Depending on the configuration of the
neural network 110, the sub-layer 130 can be configured to generate thelayer output 272 in a variety of different ways, e.g., depending on whether theattention layer 110 is a reversible layer or not. - In the example of
FIG. 2 , theattention layer 110 is not a reversible layer, and the sub-layer 130 generates thelayer output 272 by first applying a residual connection 260 to the fourth transformedinput 252 to generate aninitial output 262 and then applying layer normalization to theinitial outputs 262 at the output positions to generate the layer outputs 272 at the output positions. -
FIG. 3 is a flow diagram of anexample process 300 for generating a layer output from an attended input sequence. For convenience, theprocess 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system, e.g.,neural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 300. - In general, the system receives, at a feed-forward sub-layer included in an attention layer, an attended input sequence that includes a respective attended input at each of one or more positions and generates, from the attended input sequence, an output sequence for the attention layer that includes a respective layer output at each of the one or more positions.
- The attended input sequence was generated by an attention sub-layer within the attention layer that is configured to receive an input sequence for the attention layer that includes a respective layer input at each of the one or more positions and generate the attended input sequence at least in part by applying an attention mechanism to the input sequence for the layer.
- The system generates, by the feed-forward sub-layer and for each of the positions, a first transformed input (step 302), at least in part by applying a first linear transformation to the attended layer input at the position.
- The system generates, by the feed-forward sub-layer and for each of the positions, a second transformed input by applying a second linear transformation to the attended layer input at the position (step 304).
- The system generates, by the feed-forward sub-layer and for each of the positions, a third transformed input by performing an element-wise multiplication between the first transformed input and the second transformed input (step 306).
- The system generates, by the feed-forward sub-layer and for each of the positions, the layer output at the position from the third transformed input (step 308).
- For each attention layer in the attention neural network, the system can repeatedly (i.e., at each of one or more attention sub-layers included in the attention layer) perform the
process 300 to update the input sequence to the layer. By repeatedly performing theprocess 300 for all of the attention layers in the attention neural network and then by processing at least part of the output sequence generated by the last attention layer in the attention neural network using one or more output layers, the system can generate a network output for a received network input. - That is, the
process 300 can be performed as part of predicting an output for an input for which the desired output, i.e., the output that should be generated by the system for the input sequence, is not known. - The
process 300 can also be performed as part of processing inputs derived from a set of training data, i.e., inputs derived from a set of inputs for which the output that should be generated by the system is known, in order to train the attention neural network to determine trained values for the parameters of the attention neural network. The system can repeatedly perform theprocess 300 on inputs selected from a set of training data as part of a conventional machine learning training technique to train the attention layers and the output layer(s) of the neural network, e.g., a gradient descent with backpropagation training technique that uses a conventional optimizer, e.g., stochastic gradient descent, RMSprop, or Adam optimizer, to optimize an objective function that is appropriate for the task that the attention neural network is configured to perform. During training, the system can incorporate any number of techniques to improve the speed, the effectiveness, or both of the training process. For example, the system can use dropout, label smoothing, or both to reduce overfitting. As another example, the system can perform the training using a distributed architecture that trains multiple instances of the attention neural network in parallel. Moreover, the system can first pre-train the neural network on a large unsupervised data set through unsupervised learning, e.g., to minimize a BERT loss or other unsupervised loss, and then fine-tune the neural network on task-specific training data to optimize the objective function for the task. - This specification uses the term “configured” in connection with systems and computer program components. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program, which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- In this specification, the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations. Thus, for example, the index database can include multiple collections of data, each of which may be organized and accessed differently.
- Similarly, in this specification the term “engine” is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Generally, an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser. Also, a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client. Data generated at the user device, e.g., a result of the user interaction, can be received at the server from the device.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially be claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a sub combination.
- Similarly, while operations are depicted in the drawings and recited in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
1. A system for performing a machine learning task on a network input to generate a network output, the system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to implement:
an attention neural network configured to perform the machine learning task, the attention neural network comprising a plurality of attention layers, each attention layer comprising an attention sub-layer and a feed-forward sub-layer, the attention sub-layer configured to:
receive an input sequence for the attention layer comprising a respective layer input at each of one or more positions; and
generate an attended input sequence at least in part by applying an attention mechanism to the input sequence for the attention layer, the attended input sequence comprising a respective attended layer input at each of the one or more positions, and the feed-forward sub-layer configured to:
receive the attended input sequence; and
generate an output sequence for the attention layer from the attended input sequence, the output sequence comprising a respective layer output at each of the one or more positions, and the generating comprising, for each of the positions:
generating a first transformed input, comprising applying a first linear transformation to the attended layer input at the position;
generating a second transformed input by applying a second linear transformation to the attended layer input at the position;
generating a third transformed input by performing an element-wise multiplication between the first transformed input and the second transformed input; and
generating the layer output at the position from the third transformed input.
2. The system of claim 1 , wherein generating the layer output at the position from the third transformed input comprises:
applying a third linear transformation to the third transformed input to generate a fourth transformed input; and
generating the layer output at the position from the fourth transformed input.
3. The system of claim 2 , wherein generating the layer output from the third transformed input comprises:
applying a residual connection and normalization to the third transformed inputs at the positions to generate the output sequence.
4. The system of claim 1 , wherein the first transformed input is the output of the first linear transformation.
5. The system of claim 1 , wherein generating the first transformed input further comprises applying a non-linear activation function to the output of the first linear transformation.
6. The system of claim 5 , wherein the non-linear activation function is a ReLu activation function.
7. The system of claim 5 , wherein the non-linear activation function is a sigmoid activation function.
8. The system of claim 5 , wherein the non-linear activation function is a Gaussian Error Linear Units activation function.
9. The system of claim 5 , wherein the non-linear activation function is a Swish activation function.
10. The system of claim 1 , wherein the attention neural network further comprises one or more output layers that are configured to process at least one of the layer outputs in an output sequence generated by one of the attention layers to generate the network output.
11. One or more non-transitory computer-readable storage media storing instructions that when executed by the one or more computers cause the one or more computers to implement:
an attention neural network configured to perform a machine learning task on a network input to generate a network output, the attention neural network comprising a plurality of attention layers, each attention layer comprising an attention sub-layer and a feed-forward sub-layer, the attention sub-layer configured to:
receive an input sequence for the attention layer comprising a respective layer input at each of one or more positions; and
generate an attended input sequence at least in part by applying an attention mechanism to the input sequence for the attention layer, the attended input sequence comprising a respective attended layer input at each of the one or more positions, and the feed-forward sub-layer configured to:
receive the attended input sequence; and
generate an output sequence for the attention layer from the attended input sequence, the output sequence comprising a respective layer output at each of the one or more positions, and the generating comprising, for each of the positions:
generating a first transformed input, comprising applying a first linear transformation to the attended layer input at the position;
generating a second transformed input by applying a second linear transformation to the attended layer input at the position;
generating a third transformed input by performing an element-wise multiplication between the first transformed input and the second transformed input; and
generating the layer output at the position from the third transformed input.
12. The system of claim 11 , wherein generating the layer output at the position from the third transformed input comprises:
applying a third linear transformation to the third transformed input to generate a fourth transformed input; and
generating the layer output at the position from the fourth transformed input.
13. The system of claim 12 , wherein generating the layer output from the third transformed input comprises:
applying a residual connection and normalization to the third transformed inputs at the positions to generate the output sequence.
14. The system of claim 11 , wherein the first transformed input is the output of the first linear transformation.
15. The system of claim 11 , wherein generating the first transformed input further comprises applying a non-linear activation function to the output of the first linear transformation.
16. The system of claim 15 , wherein the non-linear activation function is a ReLu activation function.
17. The system of claim 15 , wherein the non-linear activation function is a sigmoid activation function.
18. The system of claim 15 , wherein the non-linear activation function is a Gaussian Error Linear Units activation function.
19. The system of claim 15 , wherein the non-linear activation function is a Swish activation function.
20. A method performed by one or more computers, the method comprising:
receiving a network input; and
processing the network input using an attention neural network configured to perform a machine learning task on the network input to generate a network output, the attention neural network comprising a plurality of attention layers, each attention layer comprising an attention sub-layer and a feed-forward sub-layer, the attention sub-layer configured to:
receive an input sequence for the attention layer comprising a respective layer input at each of one or more positions; and
generate an attended input sequence at least in part by applying an attention mechanism to the input sequence for the attention layer, the attended input sequence comprising a respective attended layer input at each of the one or more positions, and the feed-forward sub-layer configured to:
receive the attended input sequence; and
generate an output sequence for the attention layer from the attended input sequence, the output sequence comprising a respective layer output at each of the one or more positions, and the generating comprising, for each of the positions:
generating a first transformed input, comprising applying a first linear transformation to the attended layer input at the position;
generating a second transformed input by applying a second linear transformation to the attended layer input at the position;
generating a third transformed input by performing an element-wise multiplication between the first transformed input and the second transformed input; and
generating the layer output at the position from the third transformed input.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/175,567 US20210248473A1 (en) | 2020-02-12 | 2021-02-12 | Attention neural networks with linear units |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062975707P | 2020-02-12 | 2020-02-12 | |
US17/175,567 US20210248473A1 (en) | 2020-02-12 | 2021-02-12 | Attention neural networks with linear units |
Publications (1)
Publication Number | Publication Date |
---|---|
US20210248473A1 true US20210248473A1 (en) | 2021-08-12 |
Family
ID=77177995
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/175,567 Pending US20210248473A1 (en) | 2020-02-12 | 2021-02-12 | Attention neural networks with linear units |
Country Status (1)
Country | Link |
---|---|
US (1) | US20210248473A1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023020185A1 (en) * | 2021-08-18 | 2023-02-23 | 华为技术有限公司 | Image classification method and related device |
WO2023192674A1 (en) * | 2022-04-01 | 2023-10-05 | Google Llc | Attention neural networks with parallel attention and feed-forward layers |
WO2024066618A1 (en) * | 2022-09-30 | 2024-04-04 | Huawei Technologies Co., Ltd. | Method and system for training large-scale language models |
-
2021
- 2021-02-12 US US17/175,567 patent/US20210248473A1/en active Pending
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023020185A1 (en) * | 2021-08-18 | 2023-02-23 | 华为技术有限公司 | Image classification method and related device |
WO2023192674A1 (en) * | 2022-04-01 | 2023-10-05 | Google Llc | Attention neural networks with parallel attention and feed-forward layers |
WO2024066618A1 (en) * | 2022-09-30 | 2024-04-04 | Huawei Technologies Co., Ltd. | Method and system for training large-scale language models |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20210279576A1 (en) | Attention neural networks with talking heads attention | |
US11803751B2 (en) | Training text summarization neural networks with an extracted segments prediction objective | |
US20210248473A1 (en) | Attention neural networks with linear units | |
US11238332B2 (en) | Attention neural networks with sparse attention mechanisms | |
AU2018271931A1 (en) | Attention-based sequence transduction neural networks | |
CN109918568B (en) | Personalized learning method and device, electronic equipment and storage medium | |
WO2018156373A1 (en) | Sequence processing using online attention | |
US11481646B2 (en) | Selecting answer spans from electronic documents using neural networks | |
US20230222318A1 (en) | Attention neural networks with conditional computation | |
US20210350244A1 (en) | Attention neural networks with locality-sensitive hashing | |
US20230351149A1 (en) | Contrastive captioning neural networks | |
US20220383119A1 (en) | Granular neural network architecture search over low-level primitives | |
US20230205994A1 (en) | Performing machine learning tasks using instruction-tuned neural networks | |
US20200104681A1 (en) | Neural Networks with Area Attention | |
US20230316055A1 (en) | Attention neural networks with parallel attention and feed-forward layers | |
US11481609B2 (en) | Computationally efficient expressive output layers for neural networks | |
US20230107409A1 (en) | Ensembling mixture-of-experts neural networks | |
US20230029590A1 (en) | Evaluating output sequences using an auto-regressive language model neural network | |
WO2023059831A1 (en) | Using memory to augment self-attention in neural networks | |
US20240013769A1 (en) | Vocabulary selection for text processing tasks using power indices | |
US20220108174A1 (en) | Training neural networks using auxiliary task update decomposition | |
US20240078379A1 (en) | Attention neural networks with n-grammer layers | |
US20240005131A1 (en) | Attention neural networks with tree attention mechanisms | |
US20230401451A1 (en) | Determining hyperparameters using sequence generation neural networks | |
US20220367052A1 (en) | Neural networks with feedforward spatial transformation units |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SHAZEER, NOAM M.;REEL/FRAME:055312/0783Effective date: 20210217 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |