TECHNISCHES GEBIET TECHNICAL AREA
Diese Offenbarung bezieht sich auf verteilte Speichersysteme. This disclosure relates to distributed storage systems.
HINTERGRUND BACKGROUND
Ein verteiltes System beinhaltet im Allgemeinen viele, lose miteinander gekoppelte Computer, von denen jeder typischerweise eine Rechenressource (z. B. Prozessor(en)) und Speicherressourcen (z. B. Speicher, Flash-Speicher und / oder Festflatten) beinhaltet. Ein verteiltes Speichersystem legt eine Speicherabstraktion (z. B. Schlüssel / Wert-Speicher oder das Dateisystem) über die Speicherressourcen eines verteilten Systems. In einem verteilten Speichersystem kann ein Serverprozess, der auf einem Computer ausgeführt wird, die Speicherressourcen dieses Computers nach Clientprozessen exportieren, die auf anderen Computern ausgeführt werden. Remoteprozeduraufrufe (RPC) können Daten von Serverprozessen an Clientprozesse übertragen. A distributed system generally includes many loosely coupled computers, each of which typically includes a computing resource (eg, processor (s)) and memory resources (eg, memory, flash memory, and / or hard disks). A distributed storage system places a storage abstraction (eg, key / value storage or the file system) over the storage resources of a distributed system. In a distributed storage system, a server process running on a computer can export that computer's storage resources to client processes running on other computers. Remote procedure calls (RPC) can transfer data from server processes to client processes.
Ein Remoteprozeduraufruf ist eine zweiseitige Softwareoperation, die durch Client-Software initiiert wird, welche auf einer ersten Maschine ausgeführt und von einer Serversoftware bedient wird, die auf einer zweiten Maschine ausgeführt wird. Das Bedienen von Speichersystemanforderungen (z.B. Lesedaten) der Software erfordert möglicherweise einen verfügbaren Prozessor, welcher einem verteilten Speichersystem möglicherweise eine signifikante Begrenzung auferlegt. Im Falle eines verteilten Speichersystems bedeutet dies, dass ein Clientprozess nicht auf die Speicherressourcen eines Remotecomputers zugreifen kann, es sei denn der Remotecomputer verfügt über einen Prozessor, um die Anforderung des Clients zu bedienen. Ferner stimmen die Anforderungen für Prozessor- und Speicherressourcen in einem verteilten System oft nicht überein. Insbesondere können Rechenressourcen (d.h. Prozessoren) schwere und/oder unvorhersehbare Nutzungsmuster aufweisen, während Speicherressourcen leichte und sehr vorhersagbare Nutzungsmuster aufweisen können. A remote procedure call is a two-sided software operation initiated by client software executed on a first machine and serviced by server software running on a second machine. Serving memory system requirements (e.g., read data) of the software may require an available processor that may impose a significant limitation on a distributed memory system. In the case of a distributed storage system, this means that a client process can not access the storage resources of a remote computer unless the remote computer has a processor to service the client's request. Furthermore, the requirements for processor and memory resources often do not match in a distributed system. In particular, computational resources (i.e., processors) may have heavy and / or unpredictable usage patterns while storage resources may have easy and very predictable usage patterns.
Das Isolieren der Leistung von Benutzern, die eine Verbindung zum selben Server herstellen, erfolgt üblicherweise durch Begrenzung oder Zurückweisung von Benutzeroperationen auf dem Server. Wenn nicht genügend Ressourcen vorhanden sind, um eine Anforderung zu verarbeiten, kann der Server diese ablehnen. Beispielsweise umfasst serverseitiges Ressourcenmanagement das Verfolgen der Menge an Ressourcen, die von jedem Benutzer auf einem Server verbraucht wird. Wenn Anfragen zum Server gelangen, verwendet der Server sein globales Wissen über eingehende Anforderungen, um zu entscheiden, ob eine neue Anforderung bedient werden soll oder nicht. Isolating the performance of users connecting to the same server is usually done by limiting or denying user operations on the server. If there are not enough resources to handle a request, the server can reject it. For example, server-side resource management involves tracking the amount of resources consumed by each user on a server. When requests come to the server, the server uses its global knowledge of incoming requests to decide whether to serve a new request or not.
ZUSAMMENFASSUNG SUMMARY
Handelt es sich bei Client-Anfragen an einen Server um einseitige Vorgänge (z. B. Remote-Direktspeicherzugriff (RDMA)), wie beispielsweise diejenigen in einem einseitig verteilten Speichersystem, gibt es keine serverseitige Verarbeitung der Anfrage. Die Beseitigung der serverseitigen Verarbeitung verhindert nicht nur, dass der Server Anfragen ablehnt, wenn er überlastet wird, sondern unterbindet sogar das Feststellen, dass der Server überhaupt überlastet ist. Folglich können Ressourcen, die von Benutzern / Clients gemeinsam genutzt werden und auf denselben Server zugreifen, wie etwa die Bandbreite, nicht auf herkömmliche Weise verwaltet werden. Beispielsweise funktioniert das serverseitige Ressourcenmanagement nicht für RDMA-Anforderungen, da der Serverprozess die Anfrage nicht bedient. Die Anfrage wird direkt durch spezielle Hardware bedient. Obwohl jeder Client die Rate, mit der Anfragen an den Server vorgenommen werden, strikt begrenzen kann, um die Ressourcennutzung auf dem Server zu verringern, mangelt es dem Client an globalem Wissen darüber, wie viel Ressourcen andere Clients verwenden können. Die Performance-Isolation zwischen den Clients stellt sicher, dass sich fehlverhaltende Clients nicht unnötigerweise die Leistung gesitteter Clients verringern und erlaubt die Einrichtung unterschiedlicher Qualitätsklassen unter den Clients. If client requests to a server are one-sided (such as Remote Direct Memory Access (RDMA)), such as those in a one-way storage system, there is no server-side processing of the request. Eliminating server-side processing not only prevents the server from denying requests when it is overloaded, but also stops it from finding that the server is ever overloaded. As a result, resources shared by users / clients and accessing the same server, such as bandwidth, can not be managed in a conventional manner. For example, server-side resource management does not work for RDMA requests because the server process does not serve the request. The request is handled directly by special hardware. Although each client can strictly limit the rate at which requests are made to the server to reduce resource usage on the server, the client lacks global knowledge of how much resources other clients can use. Performance isolation between clients ensures that misbehaving clients do not unnecessarily reduce the performance of well-behaved clients, and allows the creation of different quality classes among clients.
Ein Aspekt der Offenbarung stellt ein verteiltes Speichersystem bereit, das Speicherhosts beinhaltet. Jeder Speicherhost beinhaltet nicht-transitorischen Speicher und einen Netzwerk-Interface-Controller, der mit dem Speicher kommuniziert, und das Bedienen von Remote-Anfragen der Clients auf Direktspeicherzugriff. Der Speicher empfängt eine Datenübertragungsrate von jedem Client, der mit dem Speicherhost in Verbindung steht, durch entfernten Direktspeicherzugriff. Jeder Speicherhost umfasst auch einen Datenprozessor, der mit dem Speicher und dem Netzwerk-Interface-Controller in Verbindung steht. Der Datenprozessor führt einen Host-Prozess aus, der jede empfangene Client-Datenübertragungsrate liest, eine Drosseldatenübertragungsrate für jeden Client bestimmt und jede Drosseldatentransferrate in nicht-transitorischen Speicher schreibt, auf den die Clients Zugang durch den direkten Speicherzugriff haben. One aspect of the disclosure provides a distributed storage system that includes storage hosts. Each storage host includes non-transitory storage and a network interface controller that communicates with the storage and servicing clients' remote requests for direct storage access. The memory receives a data transfer rate from each client associated with the storage host through remote direct memory access. Each storage host also includes a data processor in communication with the memory and the network interface controller. The data processor executes a host process that reads each received client data transfer rate Determines throttle data transfer rate for each client and writes each throttle data transfer rate in non-transitory storage to which clients have access through direct memory access.
Diese und andere Implementierungen können optional eines oder mehrere der folgenden Merkmale beinhalten. Bei einigen Implementierungen instanziiert der Datenprozessor nach dem Aufbau einer Kommunikationsverbindung mit einem Client einen ersten Speicherbereich im nicht-transitorischen Speicher zum Empfangen der Datenübertragungsrate für diesen Client und einen zweiten Speicherbereich im nicht-transitorischen Speicher zum Schreiben der Drosseldatentransferrate für diesen Client. Der Hostprozess kann regelmäßig den ersten Speicherbereich für jeden Client lesen, bevor die Drosselungsrate für jeden Client bestimmt wird. In einigen Beispielen registriert der Hostprozess einen Satz von entfernten, direkt zugreifbaren Bereichen des Speichers mit dem Netzwerkschnittstellencontroller. Der Host-Prozess stellt eine entfernte, direkte Speicherzugriffsverbindung mit dem Client als Antwort auf das Empfangen einer Verbindungsanforderung des Clients her. Der Host-Prozess kann die Verbindung mit einem Client eigenmächtig unterbrechen, wenn der Client nicht in der Lage ist, seine entsprechende Drosseldatenübertragungsrate über einen gewissen Zeitraum einzuhalten. These and other implementations may optionally include one or more of the following features. In some implementations, after establishing a communication connection with a client, the data processor instantiates a first memory area in the non-transitory memory for receiving the data transmission rate for that client and a second memory area in the non-transitory memory for writing the throttle data transfer rate for that client. The host process may periodically read the first storage area for each client before determining the throttling rate for each client. In some examples, the host process registers a set of remote, directly accessible areas of the memory with the network interface controller. The host process establishes a remote, direct memory access connection with the client in response to receiving a connection request from the client. The host process may arbitrarily suspend connection with a client if the client is unable to maintain its corresponding throttling data transfer rate over a period of time.
In einigen Implementierungen empfängt der Speicher die Client-Datenübertragungsrate eines Clients nach jeder Übertragung einer Schwellenwertmenge von Daten zwischen dem Client und dem Speicherhost. Der Hostprozess kann die Drosseldatenübertragungsrate jedes Clients nach dem Empfang einer Client-Datenübertragungsrate von einem beliebigen Client ermitteln. In some implementations, the memory receives the client data transfer rate of a client after each transmission of a threshold amount of data between the client and the storage host. The host process may determine the throttling data transfer rate of each client upon receipt of a client data transfer rate from any client.
Der Hostprozess kann eine Isolationskonfiguration empfangen, die eine Bandbreitenkapazität für den Speicherhost und eine Liste von Bandbreitenreservierungen für Clients bereitstellt. Jede Bandbreitenreservierung reserviert eine Schwellendatenübertragungsrate für einen Client. Das Host-Verfahren bestimmt die Drosseldatenübertragungsraten der Clients basierend auf der Isolationskonfiguration. Die Bandbreitenkapazität eines Speicherhosts kann eine reservierte Bandbreite zum Bedienen von Speicherzugriffsanfragen umfassen, die mit Bandbreitenreservierungen und einer Flexbandbreite verknüpft sind, um Speicherzugriffsanforderungen zu bedienen, die mit keiner Bandbreitenreservierung verbunden sind. Bei der Ermittlung der Drosseldatentransferrate eines Clients kann der Hostprozess für beliebige zugewiesene Bandbreitenreservierungen des Clients die reservierte Bandbreite zuweisen, die gleich einem gleichmäßig verteiltem Kontingent dieser Bandbreitenreservierungen dieser Speicherhosts ist, und ein gleichmäßig verteiltes Kontingent der flexiblen Bandbreite, in Bezug auf alle Clients in Kommunikation mit dem Speicherhost, zuweisen. Zudem kann der Hostprozess bei der Ermittlung der Drosseldatenübertragungsrate eines Clients die nicht verwendete Bandbreite, die mit einer oder mehreren Bandbreitenreservierungen eines Clients verbunden ist, auf andere Clients umverteilen. The host process may receive an isolation configuration that provides bandwidth capacity for the storage host and a list of bandwidth reservations for clients. Each bandwidth reservation reserves a threshold data transfer rate for a client. The host method determines the throttle data transfer rates of the clients based on the isolation configuration. The bandwidth capacity of a memory host may include reserved bandwidth for servicing memory access requests associated with bandwidth reservations and a flex bandwidth to service memory access requests associated with no bandwidth reservation. When determining the throttling data transfer rate of a client, the host process may allocate the reserved bandwidth equal to a uniformly allocated quota of these bandwidth allocations of these storage hosts and a uniformly distributed flexible bandwidth quota, with respect to all clients in communication with to the storage host. In addition, when determining a client's throttling data transfer rate, the host process may redistribute the unused bandwidth associated with one or more client bandwidth reservations to other clients.
In einigen Implementierungen weist der Hostprozess einem Client eine Isolationsklasse zu. Die Isolationsklasse hat eine oder mehrere zugeordnete Speicherzugriffsanfragen. Der Hostprozess bestimmt eine zugewiesene Bandbreite für jeden Client, basierend auf der Bandbreitenkapazität des Speicherhosts, eine zugewiesene Bandbreite für jede Isolationsklasse jedes Clients 30, basierend auf den zugehörigen Bandbreiten jedes Clients, eine Bandbreite für jede Speicherzugriffsanforderung, die einer jeden Isolationsklasse zugeordnet ist, basierend auf der Bandbreite der entsprechenden Isolationsklasse und Drosseldatentransferrate für jeden Client auf der Grundlage mindestens einer der folgenden: die zugeordnete Bandbreite des Clients; die zugeteilte Bandbreite für jede Isolationsklasse oder die Bandbreite für jede Speicherzugriffsanfrage. In some implementations, the host process assigns an isolation class to a client. The isolation class has one or more associated memory access requests. The host process determines an allocated bandwidth for each client, based on the bandwidth capacity of the storage host, an allocated bandwidth for each isolation class of each client 30, based on the associated bandwidths of each client, a bandwidth for each memory access request associated with each isolation class, based on the bandwidth of the corresponding isolation class and throttle data transfer rate for each client based on at least one of the following: the allocated bandwidth of the client; the allocated bandwidth for each isolation class or the bandwidth for each memory access request.
Das verteilte Speichersystem kann einen Kurator in Kommunikation mit den Speicher-Hosts beinhalten. Der Kurator weist Datenblöcken einer Datei Speicher in den Speicherhosts zu. In Reaktion auf eine Speicherzugriffsanfrage eines Clients im Austausch mit den Speicherhosts und dem Kurator, gibt der dieser einen Dateideskriptor an den Client zurück, der Datenblöcke einer Datei auf den Speicher-Hosts für einen entfernten Direktspeicherzugriff der Datenblöcke auf den Speicher-Hosts kennzeichnet. Der Dateideskriptor enthält einen Client-Schlüssel für jeden Datenblock der Datei. Jeder Client-Schlüssel ermöglicht den Zugriff auf den entsprechenden Datenblock auf seinem Speicher-Host. Der Kurator verweigert den Zugriff der Clients auf die Dateideskriptoren, die nicht in der Lage sind, ihre entsprechenden Drosseldatenübertragungsraten über einen gewissen Zeitraum zu halten. The distributed storage system may include a curator in communication with the storage hosts. The curator assigns blocks of data to a file memory in the storage hosts. In response to a memory access request from a client in exchange with the storage hosts and the curator, the latter returns a file descriptor to the client identifying data blocks of a file on the memory hosts for remote direct memory access of the data blocks on the storage hosts. The file descriptor contains a client key for each data block of the file. Each client key allows access to the appropriate data block on its storage host. The curator denies clients access to the file descriptors that are unable to maintain their corresponding throttle data transfer rates over a period of time.
Ein weiterer Aspekt der Offenbarung sieht ein Verfahren zur Isolierung in einem verteilten Speichersystem vor. Das Verfahren umfasst das Empfangen einer Datenübertragungsrate in einen nicht-transitorischen Speicher eines jeden Clients in Absprache mit dem Speicher durch einen Direktspeicherzugriff und liest, während dieser Datenprozessor in Verbindung mit einem nicht-transitorischen Speicher steht, jede empfangene Client-Datenübertragungsrate. Das Verfahren umfasst auch das Ermitteln einer Drosseldatentransferrate eines jeden Clients und das Schreiben jeder Drosseldatenübertragungsrate aus dem Datenprozessor in den nicht-transitorischen Speicher, auf den die Clients Zugang durch den direkten Fernzugriff haben. Diese und andere Aspekte können als Option eins oder mehrere der folgenden Merkmale beinhalten. Another aspect of the disclosure provides a method of isolation in a distributed storage system. The method includes receiving a data transfer rate into a non-transitory storage of each client in accordance with the storage through a direct memory access, and while this data processor is in communication with a non-transitory storage, reads each received client data transfer rate. The method also includes determining a throttle data transfer rate of each client and writing each throttle data transfer rate from the data processor to the non-transitory storage to which the clients have direct remote access. These and other aspects may optionally include one or more of the following features.
In einigen Implementierungen umfasst das Verfahren, nach dem Aufbauen einer Kommunikationsverbindung mit einem Client, eine Instanziierung eines ersten Speicherbereichs in dem nicht-transitorischen Speicher zum Empfangen der Datentransferrate für diesen Client und einen zweiten Speicherbereich in dem nicht-transitorischen Speicher zum Schreiben der Drosselungsrate für diesen Client. Das Verfahren kann auch das periodisches Lesen des ersten Speicherbereichs für jeden Client beinhalten, bevor die Drosselungsrate für jeden Client bestimmt wird. Das Verfahren kann das Registrieren eines Satzes von entfernten, direkten Speicherzugriffsbereichen des Speichers mit einer Netzwerkschnittstellensteuerung und die Einrichtung einer entfernten, direkten speicherzugriffsfähigen Verbindung mit dem Client als Reaktion auf das Empfangen einer Verbindungsanfrage des Clients beinhalten. Wenn ein Client nicht in der Lage ist, seine entsprechende Drosseldatentransferrate über einen bestimmten Zeitraum zu halten, kann das Verfahren die einseitige Unterbrechung der Verbindung mit dem Client umfassen. In some implementations, after establishing a communication connection with a client, the method includes instantiating a first storage area in the non-transitory storage to receive the data transfer rate for that client and a second storage area in the non-transitory storage to write the throttling rate therefor client. The method may also include periodically reading the first memory area for each client before determining the throttling rate for each client. The method may include registering a set of remote, direct memory access areas of the memory with a network interface controller and establishing a remote, direct memory-enabled connection with the client in response to receiving a connection request from the client. If a client is unable to maintain its corresponding throttle data transfer rate over a period of time, the method may include unilaterally interrupting the connection with the client.
Das Verfahren kann das Empfangen der Client-Datentransferrate eines Clients in dem Speicher nach jeder Übertragung eines Schwellenwertes der Daten zwischen dem Client und dem Speicher beinhalten. Darüber hinaus kann das Verfahren das Ermitteln der Drosseldatentransferrate jedes Clients nach dem Empfang einer Client-Datentransferrate eines beliebigen Clients beinhalten. The method may include receiving the client data transfer rate of a client in the memory after each transmission of a threshold value of the data between the client and the memory. In addition, the method may include determining the throttle data transfer rate of each client upon receipt of a client data transfer rate of any client.
In einigen Implementierungen umfasst das Verfahren das Empfangen einer Isolationskonfiguration, die eine Bandbreitenkapazität für den Speicherhost und eine Liste von Bandbreitenreservierungen für Clients bereitstellt und die Drosseldatentransferrate von Clients basierend auf der Isolationskonfiguration ermittelt. Jede Bandbreitenreservierung reserviert eine Schwellendatenübertragungsrate für einen Client. Die Bandbreitenkapazität eines Speicherhosts kann eine reservierte Bandbreite zum Bedienen von Speicherzugriffsanfragen umfassen, die mit Bandbreitenreservierungen und einer Flexbandbreite verknüpft sind, um Speicherzugriffsanforderungen zu bedienen, die mit keiner Bandbreitenreservierung verbunden sind. In some implementations, the method includes receiving an isolation configuration that provides a bandwidth capacity for the memory host and a list of bandwidth reservations for clients and determines the throttle data transfer rate of clients based on the isolation configuration. Each bandwidth reservation reserves a threshold data transfer rate for a client. The bandwidth capacity of a memory host may include reserved bandwidth for servicing memory access requests associated with bandwidth reservations and a flex bandwidth to service memory access requests associated with no bandwidth reservation.
Der Schritt des Bestimmens der Drosseldatentransferrate eines Clients kann für alle zugehörigen Bandbreitenreservierungen des Clients die reservierte Bandbreite, die gleich einer geteilten Freigabe dieser Bandbreitenreservierungen ist, über Speicherhosts des verteilten Speichersystems zuweisen und einen gleichen Anteil der Flex-Bandbreite in Bezug auf alle Clients in Kommunikation mit dem Speicher-Host, zuweisen. Dieser Schritt kann auch die Neuverteilung von ungenutzter Bandbreite an andere Clients umfassen, die mit einer oder mehreren Bandbreitenreservierungen eines Clients assoziiert ist. The step of determining the throttle data transfer rate of a client for all the client's associated bandwidth reservations may allocate the reserved bandwidth equal to a shared release of those bandwidth reservations through storage hosts of the distributed storage system and an equal proportion of the flex bandwidth with respect to all clients in communication to the storage host. This step may also involve redistributing unused bandwidth to other clients associated with one or more bandwidth reservations of a client.
In einigen Implementierungen beinhaltet das Verfahren das Zuordnen einer Isolationsklasse, die eine oder mehrere zugeteilte Speicherzugriffsanfragen mit einem Client aufweist wie auch das Bestimmen einer zugeordneten Bandbreite für jeden Client basierend auf der Bandbreitenkapazität des Speicherhosts, einer zugeteilten Bandbreite für jede Isolationsklasse eines jeden Clients, basierend auf den zugewiesenen Bandbreiten eines jeden Clients, eine Bandbreite für jede Speicherzugriffsanfrage, die jeder Isolationsklasse zugeordnet ist, anhand der Bandbreite der entsprechenden Isolationsklasse und die Drosseltransferrate für jeden Client basierend auf mindestens einer der zugeordneten Bandbreiten des Clients, der zugeteilten Bandbreite für jede Isolationsklasse oder der Bandbreite für jede Speicherzugriffsanfrage. Das Verfahren kann das Empfangen eines Schlüssels mit einer Client-Speicherzugriffsanforderung enthalten, um Zugriff auf Daten in dem Speicher zu empfangen. In some implementations, the method includes mapping an isolation class having one or more allocated memory access requests to a client, as well as determining an allocated bandwidth for each client based on the bandwidth capacity of the memory host, an allocated bandwidth for each isolation class of each client based on the allocated bandwidths of each client, a bandwidth for each memory access request associated with each isolation class, based on the bandwidth of the corresponding isolation class, and the throttle transfer rate for each client based on at least one of the allocated bandwidths of the client, the allocated bandwidth for each isolation class, or the bandwidth for each memory access request. The method may include receiving a key with a client memory access request to receive access to data in the memory.
Die Details einer oder mehrerer Ausführungsformen sind in den begleitenden Zeichnungen und der nachfolgenden Beschreibung dargelegt. Andere Merkmale, Objekte und Vorteile sind aus der Beschreibung und den Zeichnungen sowie aus den Patentansprüchen ersichtlich. The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects and advantages will become apparent from the description and drawings, and from the claims.
BESCHREIBUNG DER ZEICHNUNGEN DESCRIPTION OF THE DRAWINGS
1A ist eine schematische Ansicht eines beispielhaften, verteilten Speichersystems. 1A FIG. 12 is a schematic view of an exemplary distributed storage system. FIG.
1B ist eine schematische Ansicht eines beispielhaften, verteilten Speichersystems mit einer Zelle von Speicherhosts, die von einem Kurator verwaltet werden. 1B Figure 4 is a schematic view of an exemplary distributed memory system having a cell of memory hosts managed by a curator.
1C ist eine schematische Ansicht einer beispielhaften Zelle eines verteilten Speichersystems. 1C FIG. 12 is a schematic view of an exemplary cell of a distributed memory system. FIG.
1D ist eine schematische Ansicht eines beispielhaften Speicher-Hosts, der mit Clients interagiert. 1D Figure 12 is a schematic view of an example storage host interacting with clients.
2A ist eine schematische Ansicht eines beispielhaften Kurators für ein verteiltes Speichersystem. 2A FIG. 12 is a schematic view of an exemplary distributed storage system curator. FIG.
2B ist eine schematische Ansicht einer beispielhaften Datei, die in replizierte Streifen aufgeteilt ist. 2 B Figure 13 is a schematic view of an exemplary file that is divided into replicated strips.
2C ist eine schematische Ansicht eines beispielhaften Dateideskriptors. 2C FIG. 12 is a schematic view of an exemplary file descriptor. FIG.
3A ist eine schematische Ansicht zum Herstellen einer Verbindung zwischen einem Client und einem Speicher-Host eines beispielhaften, verteilten Speichersystems. 3A Figure 13 is a schematic view for establishing a connection between a client and a storage host of an exemplary distributed storage system.
3B ist eine schematische Ansicht von Clients, die Speicherzugriffsanfragen an einen Speicherhost eines beispielhaften verteilten Speichersystems senden. 3B Figure 12 is a schematic view of clients sending memory access requests to a memory host of an exemplary distributed storage system.
4A ist eine schematische Ansicht einer beispielhaften Anwendungsprogrammierschnittstelle. 4A FIG. 12 is a schematic view of an exemplary application programming interface. FIG.
4B ist eine schematische Ansicht einer beispielhaften Transaktion, die Daten in eine Datei schreibt, die in einem verteilten Speichersystem gespeichert ist. 4B Figure 4 is a schematic view of an exemplary transaction that writes data to a file stored in a distributed storage system.
4C ist eine schematische Ansicht einer beispielhaften Transaktion, die Daten aus einer Datei liest, die in einem verteilten Speichersystem gespeichert ist, 4C FIG. 12 is a schematic view of an example transaction that reads data from a file stored in a distributed storage system; FIG.
4D ist eine schematische Ansicht eines Clients, der Daten in einem beispielhaften, verteilten Speichersystem liest und schreibt, 4D Fig. 10 is a schematic view of a client reading and writing data in an exemplary distributed storage system;
5 ist eine schematische Ansicht einer beispielhaften Anordnung von Operationen eines Isolierungsverfahrens in einem verteilten Speichersystem. 5 Fig. 10 is a schematic view of an exemplary arrangement of operations of an isolation method in a distributed memory system.
Gleiche Verweissymbole in den verschiedenen Zeichnungen zeigen gleiche Elemente an. Identical reference symbols in the various drawings indicate the same elements.
AUSFÜHRLICHE BESCHREIBUNG DETAILED DESCRIPTION
Unter Bezugnahme auf FIG. Bei 1A–1C umfasst ein verteiltes Speichersystem 100 in einigen Ausführungsformen die lose gekoppelten Speicherhosts 110, 110a–n (z. B. Computer oder Server), die jeweils eine Rechenressource 112 (z. B. einen oder mehrere Prozessoren oder zentrale Verarbeitungseinheiten (CPUs;)) in Verbindung mit Speicherressourcen 114 (z. B. Speicher, Flash-Speicher, dynamischer Speicher mit willkürlichem Zugriff (DRAM), Phasenänderungsspeicher (PCM) und / oder Festplatten) besitzen, die zum Zwischenspeichern von Daten verwendet werden können. Eine Speicherabstraktion (z. B. Schlüssel / Wert-Speicher oder Dateisystem), die mit den Speicherressourcen 114 überlagert ist, ermöglicht eine skalierbare Verwendung der Speicherressourcen 114 durch einen oder mehrere Clients 120, 120a–n. Die Clients 120 können mit den Speicherhosts 110 kommunizieren über ein Netzwerk 130 (z. B. über RPC). With reference to FIG. at 1A - 1C includes a distributed storage system 100 in some embodiments, the loosely coupled memory hosts 110 . 110a -N (for example, computer or server), each one a computing resource 112 (eg one or more processors or central processing units (CPUs;)) in conjunction with memory resources 114 (eg, memory, flash memory, dynamic random access memory (DRAM), phase change memory (PCM), and / or hard drives) that can be used to cache data. A storage abstraction (such as key / value storage or file system) that matches the storage resources 114 is superimposed, allowing scalable use of storage resources 114 by one or more clients 120 . 120a -n. The clients 120 can with the storage hosts 110 communicate over a network 130 (eg via RPC).
Das einseitige, verteilte Speichersystem 100 kann die Notwendigkeit für beliebige Server-Aufträge für das Antworten auf Remoteprozeduraufrufe (RPC) der Clients 120 zum Speichern oder Abrufen von Daten 312 auf ihren entsprechenden Speicher-Hosts 110 beseitigen und kann auf spezialisierte Hardware zurückgreifen, um die Remote-Anforderungen 122 zu verarbeiten. "Einseitig" bezieht sich hierbei auf das Verfahren, bei dem der Großteil der Anforderungsverarbeitung auf die Speicherhosts 110 in der Hardware statt in der Software ausgeführt werden kann, die auf den CPUs 112 der Speicherhosts 110 ausgeführt wird. Anstatt einen Prozessor 112 eines Speicherhosts 110 (z. B. einen Server) zu haben, führen Sie einen Serverprozess aus, der den Zugriff der entsprechenden Speicherressource 114 (z. B. nicht-transitorischen Speicher) auf Client-Prozesse ausführt, die auf den Clients 120 ausgeführt werden. Die Clients 120, können direkt über einen Netzwerkschnittstellencontroller (NIC) 116 des Speicherhosts 110 auf die Speicherressource 114 zugreifen. Mit anderen Worten kann ein Client-Prozess, der auf einem Client 120 ausgeführt wird, sich direkt mit einer oder mehreren Speicherressourcen 114 verbinden, ohne die Ausführung einer Routine jedweder Serverprozesse, die auf den Rechenressourcen 112 ausgeführt werden, zu erfordern. Dies bietet eine einseitige, verteilte Speicherarchitektur, die einen relativ hohen Durchsatz und eine geringe Latenz vorweist, da die Clients 120 auf die Speicherressourcen 114 zugreifen können, ohne mit den Rechenressourcen 112 der Speicherhosts 110 in Wechselwirkung zu treten. Dies hat die Wirkung, die Anforderungen an Speicher 114 und CPU-Zyklen zu entkoppeln, die typische zweiseitige verteilte Speichersysteme erfordern. Das einseitige, verteilte Speichersystem 100 kann entfernte Speicherressourcen 114 verwenden, unabhängig davon, ob es Ersatz-CPU-Zyklen auf dem Speicherhost 110 gibt. Weiterhin kann ein einseitiges System Cache-Anforderungen 122 mit sehr vorhersagbarer, geringer Latenzzeit bereitstellen, selbst wenn die Speicherhosts 110 bei einer hohen CPU-Auslastung laufen, da einseitige Operationen nicht für Server-CPU-Ressourcen 112 konkurrieren. Somit ermöglicht das einseitige, verteilte Speichersystem 100 eine höhere Ausnutzung sowohl des Cluster-Speichers 114 als auch der CPU-Ressourcen 112 als herkömmliche zweiseitige Systeme, während eine vorhersagbare, geringe Latenzzeit bereitgestellt wird. The one-sided, distributed storage system 100 This may be the need for any server jobs to respond to remote procedure calls (RPC) of clients 120 to store or retrieve data 312 on their respective storage hosts 110 eliminate and can resort to specialized hardware to meet the remote requirements 122 to process. "One-sided" refers to the process where most of the request processing is on the storage hosts 110 can be executed in the hardware rather than in the software running on the CPUs 112 the storage host 110 is performed. Instead of a processor 112 a storage host 110 (for example, having a server) run a server process that grants access to the appropriate storage resource 114 (For example, non-transitory memory) runs on client processes that are on the clients 120 be executed. The clients 120 , can directly through a network interface controller (NIC) 116 the storage host 110 to the storage resource 114 access. In other words, a client process running on a client 120 running directly with one or more memory resources 114 connect without executing a routine of any server processes that rely on the computational resources 112 to be executed. This provides a one-way, distributed memory architecture that provides relatively high throughput and low latency since the clients 120 on the storage resources 114 can access without using the computational resources 112 the storage host 110 to interact. This has the effect of the memory requirements 114 and decouple CPU cycles that require typical two-sided distributed memory systems. The one-sided, distributed storage system 100 can remove remote storage resources 114 regardless of whether it is replacement CPU cycles on the storage host 110 gives. Furthermore, a one-sided system can cache requests 122 with very predictable, low latency, even if the storage hosts 110 run at a high CPU usage because one-sided operations are not for server CPU resources 112 compete. Thus, the one-sided, distributed storage system allows 100 a higher utilization of both the cluster memory 114 as well as the CPU resources 112 as conventional two-sided systems, while providing a predictable, low latency.
In einigen Implementierungen beinhaltet das verteilte Speichersystem 100 einen Speicherlogikabschnitt 102, einen Datensteuerabschnitt 104 und einen Datenspeicherabschnitt 106. Der Speicherlogikabschnitt 102 kann eine Transaktionsanwendungsprogrammierungsschnittstelle (API) 400 (z.B. eine einseitige Transaktionssystem-Clientbibliothek) umfassen, die für den Zugriff auf die zugrundeliegenden Daten über einseitige Operationen verantwortlich ist. Der Datensteuerabschnitt 104 kann die Zuweisung und den Zugriff auf die Speicherressourcen 114 mit Aufgaben wie etwa Zuordnen der Speicherressourcen 114, Registrieren der Speicherressourcen 114 mit der entsprechenden Netzwerkschnittstellensteuerung 116 und das Herstellen von Verbindungen zwischen dem Client 120 und den Speicherhosts 110 verwalten, sowie auch Handhabungsfehler bei Maschinenausfällen, etc. Der Datenspeicherabschnitt 106 kann die lose gekoppelten Speicher-Hosts 110, 110a–n beinhalten. In some implementations, the distributed storage system includes 100 a memory logic section 102 , a data control section 104 and a data storage section 106 , The memory logic section 102 can be a transactional application programming interface (API) 400 (eg, a one-sided transactional system client library) responsible for accessing the underlying data through unilateral operations. The data control section 104 can allocate and access the storage resources 114 with tasks such as allocating memory resources 114 , Register the memory resources 114 with the appropriate network interface control 116 and establishing connections between the client 120 and the storage hosts 110 manage, as well as handling errors in machine failures, etc. The data storage section 106 can be the loosely coupled storage hosts 110 . 110a -N include.
Bei einigen Implementierungen speichert das verteilte Speichersystem 100 die Daten 312 in einem dynamischen Speicher mit willkürlichem Zugriff (DRAM) 114 und bedient die Daten 312 von den entfernten Hosts 110 über RDMA-fähige Netzwerkschnittstellen-Controller 116. Eine Netzwerkschnittstellensteuerung 116 (auch als Netzwerkschnittstellenkarte, Netzwerkadapter oder LAN-Adapter bekannt) kann eine Computerhardwarekomponente sein, die eine Computerressource 112 mit dem Netzwerk 130 verbindet. Die Netzwerkschnittstellensteuerung 116 implementiert eine Kommunikationsschaltung, die eine spezifische physikalische Schicht (OSI-Schicht I) und eine Datenverbindungsschicht (Schicht 2) wie Ethernet, Wi-Fi oder Token Ring verwendet. Dies stellt eine Basis für einen vollständigen Netzwerkprotokollstapel bereit, was die Kommunikation zwischen kleinen Gruppen von Computern auf dem gleichen LAN und ausgedehnte Netzwerkkommunikation über routbare Protokolle, wie Internet-Protokoll (IP) ermöglicht. Sowohl die Speicherhosts 110a–n als auch der Client 120 können jeweils eine Netzwerkschnittstellensteuerung 116 für Netzwerkkommunikationen besitzen. Ein Host-Prozess 118, der auf dem Rechenprozessor 112 des Speicherhosts 110 ausgeführt wird, registriert einen Satz von abgelegenen, direkten Speicherzugriffsbereichen 114a–n des Speichers 114 mit dem Netzwerkschnittstellen-Controller 116. Der Host-Prozess 118 kann die entfernten direkten Speicherzugriffsbereiche 114a–n des Speichers 114 mit einer Nur-Lese- oder einer Lese / Schreib-Erlaubnis registrieren. Die Netzwerkschnittstellensteuerung 116 des Speicherhosts 110 erzeugt einen Clientschlüssel 321 für jeden registrierten Speicherbereich 114a–n. In some implementations, the distributed storage system stores 100 the data 312 in dynamic random access memory (DRAM) 114 and serve the data 312 from the remote hosts 110 via RDMA-enabled network interface controllers 116 , A network interface controller 116 (also known as a network interface card, network adapter or LAN adapter) may be a computer hardware component that is a computer resource 112 with the network 130 combines. The network interface controller 116 implements a communication circuit that uses a specific physical layer (OSI layer I) and a data link layer (layer 2) such as Ethernet, Wi-Fi or Token Ring. This provides a basis for a complete network protocol stack, allowing communication between small groups of computers on the same LAN and extensive network communication over routable protocols, such as Internet Protocol (IP). Both the storage hosts 110a -N as well as the client 120 can each have a network interface controller 116 for network communications. A host process 118 that's on the computer processor 112 the storage host 110 is executed registers a set of remote, direct memory access areas 114a -N of the memory 114 with the network interface controller 116 , The host process 118 may be the remote direct memory access areas 114a -N of the memory 114 register with a read-only or a read-write permission. The network interface controller 116 the storage host 110 generates a client key 321 for each registered storage area 114a -n.
Die einseitigen Operationen, die von den Netzwerkschnittstellen-Steuereinheiten 116 ausgeführt werden, können auf einfache Lese-, Schreib- und Vergleichs-und-Swap-Operationen beschränkt sein, von denen keiner komplex genug ist, um als ein Drop-in-Ersatz für die implementierte Softwarelogik durch einen herkömmlichen Cache-Server-Auftrag, um Cache-Anforderungen auszuführen und Cache-Richtlinien zu verwalten. Die Transaktions-API 400 übersetzt Befehle, wie ein Nachschlagen oder Einfügen von Datenbefehlen in Sequenzen von primitiven Netzwerkschnittstellen-Controller-Operationen. Die Transaktions-API 400 ist mit den Datensteuerungs- und Datenspeicherabschnitten 104, 106 des verteilten Speichersystems 100 verbunden. The one-sided operations performed by the network interface controllers 116 may be limited to simple read, write and compare and swap operations, none of which is complex enough to be implemented as a drop-in replacement for the implemented software logic by a conventional cache server job, to execute cache requests and manage cache policies. The transaction API 400 translates commands, such as looking up or inserting data commands into sequences of primitive network interface controller operations. The transaction API 400 is with the data control and data storage sections 104 . 106 of the distributed storage system 100 connected.
Das verteilte Speichersystem 100 kann einen gemeinsam angeordneten Softwareprozess enthalten, um den Speicher 114 für einen Fernzugriff mit den Netzwerkschnittstellensteuerungen 116 zu registrieren und Verbindungen 250 (3A und 3B) mit den Clientprozessen 128 aufzubauen. Sobald die Verbindungen 250 eingerichtet sind, können die Clientprozesse 128 auf den registrierten Speicher 114 über Engines in der Hardware der Netzwerkschnittstellen-Controller 116 zugreifen, und das ohne irgendeine Beteiligung von Software auf den lokalen CPUs 112 der entsprechenden Speicher-Hosts 110. The distributed storage system 100 may contain a co-located software process to the memory 114 for remote access with the network interface controllers 116 to register and connections 250 ( 3A and 3B ) with the client processes 128 building. Once the connections 250 can be set up, the client processes 128 on the registered memory 114 about engines in the hardware of the network interface controllers 116 access, without any involvement of software on the local CPUs 112 the corresponding storage hosts 110 ,
Unter Bezugnahme auf 1B und 1C, in einigen Implementierungen beinhaltet das verteilte Speichersystem 100 mehrere Zellen 200, wobei jede Zelle 200 Speicherhosts 110 und einen Kurator 210 in Kommunikation mit den Speicherhosts 110 beinhaltet. Der Kurator 210 (z. B. der Prozess) kann auf einem mit dem Netzwerk 130 verbundenen Rechenprozessor 202 (z. B. Server), der die Datenspeicherung verwaltet (verwaltet beispielsweise ein Dateisystem, das auf den Speicherhosts 110 gespeichert ist), Datenplatzierungen steuern und /oder die Datenwiederherstellung starten. Darüber hinaus kann der Kurator 210 eine Existenz und einen Speicherort von Daten auf den Speicherhosts 110 verfolgen. Redundante Kuratoren 210 sind möglich. In einigen Implementierungen verfolgen die Kuratoren 210 das Striping der Daten 312 über mehrere Speicherhosts 110 und die Existenz und / oder die Position von mehreren Kopien eines gegebenen Streifens für Redundanz und / oder Leistung. Bei der Speicherung der Computerdaten erfolgt das Datenstriping als Technik der Segmentierung logisch sequentieller Daten 312, wie beispielsweise einer Datei 310 (2B), in einer Weise, dass Zugriffe auf sequentielle Segmente auf unterschiedliche physikalische Speichervorrichtungen (z. B. Zellen 200 und / oder Speicherhosts 110) erfolgen. Striping ist nützlich, wenn ein verarbeitendes Gerät den Zugriff auf Daten 312 schneller fordert, als eine Speichervorrichtung einen Zugriff bereitstellen kann. Durch das Ausführen von Segmentzugriffen auf mehreren Geräten kann auf mehrere Segmente gleichzeitig zugegriffen werden. Dies sorgt für einen höheren Datenzugriffsdurchsatz, wodurch vermieden wird, dass der Prozessor im Leerlauf auf Datenzugriffe wartet. With reference to 1B and 1C In some implementations, this includes the distributed storage system 100 several cells 200 , each cell 200 memory hosts 110 and a curator 210 in communication with the storage hosts 110 includes. The curator 210 (eg the process) can be on one with the network 130 connected computational processor 202 (eg, server) that manages data storage (for example, manages a file system residing on the storage host 110 stored), control data placement and / or start the data recovery. In addition, the curator 210 an existence and location of data on the storage hosts 110 follow. Redundant curators 210 are possible. In some implementations, the curators are following 210 the striping of the data 312 over multiple storage hosts 110 and the existence and / or location of multiple copies of a given stripe for redundancy and / or performance. When storing the computer data, the data striping is done as a technique of segmentation of logically sequential data 312 such as a file 310 (2B), in a manner that accesses to sequential segments to different physical storage devices (e.g., cells 200 and / or storage hosts 110 ) respectively. Striping is useful when a processing device is accessing data 312 faster than a storage device can provide access. By executing segment accesses on multiple devices, multiple segments can be accessed simultaneously. This provides higher data access throughput, thereby avoiding the processor idle for data access.
In manchen Implementierungen stellt die Transaktions-API 400 eine Schnittstelle zwischen einem Client 120 (z. B. mit dem Client-Prozess 120) und dem Kurator 210 her. In einigen Beispielen kommuniziert die Transaktions-RPC zwischen einem Client 120 und dem Kurator 210. Als Reaktion auf eine Clientanforderung 122 kann die Transaktions-API 400 den Speicherort bestimmter Daten 312 auf dem Speicherhost 110 finden und einen Schlüssel 321 erhalten, der Zugriff auf die Daten 312 ermöglicht. Die Transaktions-API 400 kommuniziert direkt mit den geeigneten Speicherhosts 110 (über die Netzwerkschnittstellen-Controller 116), um die Daten 312 zu lesen oder zu schreiben (z.B. unter Verwendung eines Direktspeicherzugriffs). In Fall, dass ein Speicherhost 110 nicht betriebsbereit ist oder die Daten 312 zu einem anderen Speicherhost 110 verschoben wurden, schlägt die Clientanfrage 122 fehl und fordert den Client 120 auf, den Kurator 210 erneut abzufragen. In some implementations, the transaction API provides 400 an interface between a client 120 (eg with the client process 120 ) and the curator 210 ago. In some examples, the transaction RPC communicates between a client 120 and the curator 210 , In response to a client request 122 can the transaction API 400 the location of certain data 312 on the storage host 110 find and a key 321 get access to the data 312 allows. The transaction API 400 communicates directly with the appropriate storage hosts 110 (via the network interface controller 116 ) to the data 312 to read or write (eg using a direct memory access). In case that is a storage host 110 is not ready or the data 312 to another storage host 110 were moved, the client request fails 122 fails and asks the client 120 up, the curator 210 to inquire again.
Unter Bezugnahme auf 2A, In einigen Implementierungen speichert und verwaltet der Kurator 210 Dateisystemmetadaten 212. Die Metadaten 212 beinhalten eine Dateikarte 214, die Dateien 310 1-n auf die Dateideskriptoren 300 1-n abbildet. Der Kurator 210 kann die Darstellung seiner persistenten Metadaten 212 untersuchen und modifizieren Der Kurator 210 kann drei verschiedene Zugriffsmuster für die Metadaten 212 verwenden: Nur-Lese-, Datei-Transaktionen und Streifentransaktionen. Der Nur-Lese-Zugriff erlaubt es dem Kurator 210, einen Zustand der Metadaten 212 mit einer minimalen Konkurrenz zu untersuchen. Eine schreibgeschützte Anfrage liefert den aktuellsten Zustand einer Datei 310, jedoch ohne Synchronisation mit gleichzeitigen Aktualisierungen. Der Nur-Lese-Zugriff kann verwendet werden, um auf Nachschlaganforderungen von den Clients 120 zu antworten (z. B. für interne Operationen, wie beispielsweise das Abfragen(Durchsuchung) von Dateien). With reference to 2A In some implementations, the curator saves and manages 210 File system metadata 212 , The metadata 212 include a file card 214 , the files 310 1-n to the file descriptors 300 1-n images. The curator 210 can be the representation of his persistent metadata 212 investigate and modify The Curator 210 can have three different access patterns for the metadata 212 Use: read-only, file transactions, and stripe transactions. The read-only access allows the curator 210 , a state of metadata 212 to investigate with a minimal competition. A read-only request returns the most recent state of a file 310 but without synchronization with concurrent updates. The read-only access can be used to look up lookup requests from the clients 120 to respond (eg for internal operations, such as querying (searching) files).
Auch unter Bezugnahme auf FIG. Wie in den 2B und 2C gezeigt, speichern die Speicherhosts 110 in einigen Implementierungen Dateidaten 312. Der Kurator 210 kann jede Datei 310 (und ihre Daten 312) in Streifen 320a–n aufteilen und die Streifen 320a–n zur Speicherung an mehreren Speicherplätzen replizieren. Eine Spurreplik 320n k wird auch als Chunk oder Datenblock bezeichnet 320n k. Veränderliche Dateien 310 können zusätzliche Metadaten 212 aufweisen, die auf dem / den Speicherhost(s) 110 gespeichert sind, wie beispielsweise Sperrwörter und Versionsnummern. Die Sperrwörter und Versionsnummern können verwendet werden, um ein verteiltes Transaktionsfestschreibungsprotokoll zu implementieren. Also with reference to FIG. As in the 2 B and 2C shown, store the memory hosts 110 in some implementations, file data 312 , The curator 210 can any file 310 (and their data 312 ) in stripes 320a -N split and the strips 320a -N to replicate in multiple locations for storage. A track replica 320n k is also called a chunk or data block 320n k . Variable files 310 can provide additional metadata 212 that reside on the storage host (s) 110 are stored, such as keywords and version numbers. The lockwords and version numbers can be used to implement a distributed transaction commit protocol.
Dateideskriptoren 300 1-n, die durch den Kurator 210 gespeichert sind, enthalten Metadaten 212, wie beispielsweise die Dateikarte 214, die die Streifen 320a–n auf Datenblöcke 320% (d.h. Stripe-Repliken) abbildet, welche auf den Speicherhosts 110 gespeichert sind. Um eine Datei 310 zu öffnen, sendet Client 120 eine Anforderung 122 an den Kurator 210, der einen Dateideskriptor 300 zurückgibt. Der Client 120 verwendet den Dateideskriptor 300, um Datei-Block-Offsets zu an Speicherplätzen 114a–n zu übersetzen. Nachdem der Client 120 den Dateideskriptor 300 geladen hat, kann der Client 120 auf die Daten 312 einer Datei 310 über RDMA oder ein anderes Datenabrufverfahren zugreifen. file descriptors 300 1-n , by the curator 210 stored contain metadata 212 , such as the file card 214 that the stripes 320a -N on data blocks 320% (ie stripe replicas) maps which are on the storage hosts 110 are stored. To a file 310 open, client sends 120 a requirement 122 to the curator 210 who has a file descriptor 300 returns. The client 120 uses the file descriptor 300 to save file block offsets to memory locations 114a -N to translate. After the client 120 the file descriptor 300 has loaded, the client can 120 on the data 312 a file 310 access via RDMA or another data retrieval method.
Unter Bezugnahme auf 3A und 3B, RDMA ist ein verbindungsbasierter Prozess-zu-Prozess-Kommunikationsmechanismus, dass RDM-A-Verbindungen typischerweise eine Authentifizierung oder Verschlüsselung selbst nicht unterstützen. Als Ergebnis kann das verteilte Speichersystem 100 die RDMA-Verbindungen 250 als sichere Ressourcen behandeln. Damit ein Clientprozess 128 über RDMA auf den Speicher 114 eines Hostprozesses 118 zugreifen kann, führt die Netzwerkschnittstellensteuerung 116 des Speicherhosts 110 einen Verbindungshandshake mit einer Netzwerkschnittstellensteuerung 116 des Clientprozesses 128 aus, um die RDMA-fähig zu etablieren Verbindung 250 zwischen dem Host-Prozess 118 und dem Client-Prozess 128. Der RDMA-Verbindungs-Handshake kann ein übergeordnetes sicheres Protokoll implementieren, das die Identitäten der Host- und Clientprozesse 118, sowie 128 auswertet, wie es zum Zeitpunkt der Erzeugung der vertrauenswürdigen RDMA-Verbindung 250 bekannt ist. Nachdem eine RDMA-fähige Verbindung 250 hergestellt ist, kann der Client-Prozess 128 oder der Host-Prozess 118 die Verbindung 250 einseitig brechen. Wenn entweder der Client-Prozess 128 oder der Host-Prozess 118 abgebrochen wird, kann der Client 120 und / oder der Speicherhost 110 (über Betriebssysteme) die entsprechende RDMA-Verbindung(en) 250 abbrechen. With reference to 3A and 3B RDMA is a connection-based process-to-process communication mechanism that RDM-A connections typically do not support authentication or encryption itself. As a result, the distributed storage system 100 the RDMA connections 250 treat as secure resources. So a client process 128 via RDMA to the store 114 a host process 118 can access, performs the network interface control 116 the storage host 110 a connection handshake with a network interface controller 116 of the client process 128 out to establish the RDMA-enabled connection 250 between the host process 118 and the client process 128 , The RDMA connection handshake can implement a high-level secure protocol that identifies the host and client processes 118 , such as 128 evaluates, as it did at the time of creation of the trusted RDMA connection 250 is known. Having an RDMA-enabled connection 250 is made, the client process can 128 or the host process 118 the connection 250 break one-sided. If either the client process 128 or the host process 118 is canceled, the client can 120 and / or the storage host 110 (via operating systems) the corresponding RDMA connection (s) 250 abort.
Zugriff auf Dateidaten 312 (z.B. Datenblöcke 320n k), die in den entfernten Speicherplätzen 114a–n gespeichert sind, können durch die Zugriffssteuerlisten 260 gesteuert werden. Jede Zugriffssteuerungsliste 260 kann einen eindeutigen Namen, eine Liste von Datenblöcken 320, nk, aufweisen und eine Liste von Clients 120a–n, die eine Lese- und Schreibberechtigung für die Datenblöcke 320 k besitzen, die dieser Zugriffssteuerungsliste 260 zugeordnet ist. In einigen Beispielen liefert die Zugriffssteuerungsliste 260 eine Zugriffsberechtigungsstufe für jeden zugehörigen Client 120 oder jedes zugeordnete Datenblock 320n k. Die Speicherhosts 110 können die Zugriffssteuerlisten 260 über einen sicheren Kommunikationskanal empfangen und können durch die Speicherhosts 110 unter Verwendung von Schutzdomänen 270 erzwungen werden. Jeder RDMA-zugängliche Speicherbereich 114a–n, der mit der Netzwerkschnittstellensteuerung 116 jedes Speicherhosts 110 registriert ist, ist einer Schutzdomäne 270 zugeordnet. In einigen Implementierungen, wenn der Kurator 210 den Speicher 114 für die Datenblöcke 320n zuteilt k, assoziiert dieser die zugeordneten Speicherbereiche 114a–n der Datenblöcke 320n k mit einer oder mehreren Schutzdomänen 270. Ein Speicherhost 110 kann viele Schutzdomänen 270 aufweisen, die verschiedenen Bereichen 114a–n seines Speichers 114 zugeordnet sind. Jede Schutzdomäne 270 kann außerdem eine oder mehrere zugeordnete Verbindungen 250 besitzen. Access to file data 312 (eg data blocks 320n k ) in the remote memory locations 114a -N are saved through the access control lists 260 to be controlled. Each access control list 260 can have a unique name, a list of data blocks 320 , n k , and a list of clients 120a -N, which is read and write to the data blocks 320 k own this access control list 260 assigned. In some examples, the access control list provides 260 An access level for each associated client 120 or each associated data block 320n k . The storage hosts 110 can access the access control lists 260 can be received through a secure communication channel and through the memory hosts 110 using protection domains 270 be enforced. Each RDMA-accessible memory area 114a -N, with the network interface control 116 every storage host 110 registered is a protection domain 270 assigned. In some implementations, if the curator 210 the memory 114 for the data blocks 320n allocates k , this associates the associated memory areas 114a -N of the data blocks 320n k with one or more protective domains 270 , A storage host 110 can have many protection domains 270 exhibit the different areas 114a -N of his store 114 assigned. Each protection domain 270 can also have one or more associated connections 250 have.
Wenn ein Client 120 eine Speicherzugriffsanfrage 122 für eine Datei 310, die auf einem oder mehreren der Speicherhosts 110 gespeichert ist, instanziiert, fordert der Client 120 einen Dateideskriptor 300 von dem Kurator 210 an, um zu ermitteln, welcher / welche Speicherhost(s) 110 die Datenblöcke 320n k der Datei 310 speichern. Zusätzlich zur Zuordnung von Datenblöcken 320n k der Datei 310 zu den Speicherbereichen 114a–n der Speicherhosts 110 kann der Dateideskriptor 300 auch eine Client-Taste 321 zum Zugreifen auf diese Datenblöcke 320n enthalten k. Der Client 120 sucht dann einen Verbindungs-Cache 252 für beliebige, offene RDMA-fähige Verbindungen 250 zu den identifizierten Speicherhosts 110. Wenn jeder Speicherhost 110 keine offene Verbindung 250 mit dem Client 120 hat, der sich in der gleichen Schutzdomäne 270 wie das angeforderte Datenblock 320n k befindet, sendet der Client 120 eine Verbindungsanforderung 254 an beliebige Speicherhosts 110, die nicht die notwendigen offenen Verbindungen 250 haben. If a client 120 a memory access request 122 for a file 310 that resides on one or more of the storage hosts 110 is saved, instantiated, the client asks 120 a file descriptor 300 from the curator 210 to determine which storage host (s) 110 the data blocks 320n k of the file 310 to save. In addition to the assignment of data blocks 320n k of the file 310 to the storage areas 114a -N the storage host 110 can the file descriptor 300 also a client button 321 to access these data blocks 320n contain k . The client 120 then look for a connection cache 252 for any open RDMA-capable connections 250 to the identified storage hosts 110 , If every storage host 110 no open connection 250 with the client 120 has, who is in the same protection domain 270 like the requested data block 320n k , the client sends 120 a connection request 254 to any storage hosts 110 who do not have the necessary open connections 250 to have.
Als Antwort auf das Empfangen einer Verbindungsanfrage 254 eines Clientprozesses 128 des Clients 120, um auf einen Datenblock 320n zuzugreifen k (z.B. auf einen Speicherbereich 114a–n zuzugreifen, der den Datenabschnittk 320n speichert), kann der Host-Prozess 128 eine entfernte direktzugriffsfähige Verbindung 250 mit dem Client-Prozess 128 herstellen, wenn sowohl der Client 120 als auch der angeforderte Datenblock 320n k der gleichen Zugriffssteuerliste 260 zugeordnet sind, die von dem Speicherhost 110 empfangen wird. Der Clientprozess 128 kann die Zugriffssteuerungsliste 260 in der Verbindungsanfrage 254 enthalten. Der Host-Prozess 118 kann die aufgebaute, offene Verbindung 250 mit einer Schutzdomäne 270 verknüpfen und der Client-Prozess 128 kann die offene Verbindung 250 in dem Verbindungs-Cache-Speicher 252 speichern. Die Verbindung 250 kann (über RDMA) auf allein die Speicherbereiche 114a–n zugreifen, die mit ihrer Schutzdomäne 270 assoziiert sind. Die Netzwerkschnittstellensteuerung 116 des Speicherhosts 110 kann die Verbindung 250 beim Empfangen einer RDMA-Anfrage mit einer Adresse für den nicht registrierten Speicher 114 abbrechen. In response to receiving a connection request 254 a client process 128 of the client 120 to move to a data block 320n access k (eg to a memory area 114a -N, which is the data section k 320n stores), the host process can 128 a remote direct access connection 250 with the client process 128 produce when both the client 120 as well as the requested data block 320n k the same access control list 260 associated with the memory host 110 Will be received. The client process 128 can control the access control list 260 in the connection request 254 contain. The host process 118 can the built, open connection 250 with a protection domain 270 link and the client process 128 can the open connection 250 in the connection cache 252 to save. The connection 250 can (via RDMA) on only the memory areas 114a -N access with their protection domain 270 are associated. The network interface controller 116 the storage host 110 can the connection 250 upon receiving an RDMA request with an address for unregistered memory 114 abort.
In dem Beispiel, das in FIG. Wie in 3B gezeigt, senden erste und zweite Clients 120a, 120b Speicherzugriffsanfragen 122 zu einem Speicherhost 110n über die jeweiligen ersten und zweiten RDMA-Verbindungen 250a, 250b. Der Speicherhost 110n weist erste und zweite Schutzdomänen 270a, 270b auf, die seinem Speicher 114 zugeordnet sind. Die erste Schutzdomäne 270a ist mit den ersten und zweiten Speicherbereichen 114a, 114b (z. B. Speicherung entsprechender erster und zweiter Datenblöcke 320n)1, 320n 2) assoziiert und die erste RDMA-Verbindung 250a, während die zweite Schutzdomäne 270b einem dritten Speicherbereichs 114c (z. B. Speicherung entsprechender dritter Datenblöcke 320n 3) und nur die zweite RDMA-Verbindung 250a zugeordnet ist. In the example shown in FIG. As in 3B shown, send first and second clients 120a . 120b Memory access requests 122 to a storage host 110n via the respective first and second RDMA connections 250a . 250b , The storage host 110n has first and second protection domains 270a . 270b on top of his store 114 assigned. The first protection domain 270a is with the first and second memory areas 114a . 114b (eg storage of corresponding first and second data blocks 320n 1 , 320n 2 ) and the first RDMA connection 250a while the second protection domain 270b a third memory area 114c (eg storage of corresponding third data blocks 320n 3 ) and only the second RDMA connection 250a assigned.
Der erste Client 120a sendet erste und zweite Speicherzugriffsanfrage 122a, 122b über die erste RMDA-Verbindung 250a an den Speicherhost 110n. Die erste Speicherzugriffsanfrage 122a dient dem Zugriff auf den zweiten Speicherbereich 114b für den zweiten Datenabschnitt 320n 2 und die zweite Speicherzugriffsanfrage 122b dient dem Zugriff auf den dritten Speicherbereich 114c für den dritten Datenblock 320n 3. Die erste Speicherzugriffsanfrage 122a ist erfolgreich, da der zweite Speicherbereich 114b der gleichen Schutzdomäne 270a wie der ersten Verbindung 250a angehört. Die zweite Speicherzugriffsanfrage 122b schlägt fehl, da der dritte Speicherbereich 114c zu einer anderen Schutzdomäne 270, der zweiten Schutzdomäne 270b anstatt der Schutzdomäne 270 der zweiten Speicherzugriffsanfrage 122b (d.h. der ersten Schutzdomäne 270a) gehört. The first client 120a sends first and second memory access request 122a . 122b over the first RMDA connection 250a to the storage host 110n , The first memory access request 122a serves to access the second memory area 114b for the second data section 320n 2 and the second memory access request 122b serves to access the third memory area 114c for the third data block 320n 3 . The first memory access request 122a is successful as the second memory area 114b the same protection domain 270a like the first connection 250a belongs. The second memory access request 122b fails because the third memory area 114c to another protection domain 270 , the second protection domain 270b instead of the protection domain 270 the second memory access request 122b (ie the first protection domain 270a ) belongs.
Der zweite Client 120b sendet dritte und vierte Speicherzugriffsanfragen 122c, 122d über die zweite RDMA-Verbindung an den Speicherhost 110n. Die dritte Speicherzugriffsanfrage 122c dient zum Zugriff auf den ersten Speicherbereich 114a für den ersten Datenblock 320n 1 und die vierte Speicherzugriffsanfrage 122d dient dem Zugriff auf den dritten Speicherbereich 114c für den dritten Datenblock 320n 3. In diesem Fall folgen beide Speicherzugriffsanfragen 122c, 122d, da die RDMA-Verbindung 250b des zweiten Clients 120b zu den Schutzdomänen 270a, 270b sowohl des ersten Speicherbereichs 114a als auch des dritten Speicherbereichs 114c gehört. The second client 120b sends third and fourth memory access requests 122c . 122d over the second RDMA connection to the storage host 110n , The third memory access request 122c serves to access the first memory area 114a for the first data block 320n 1 and the fourth memory access request 122d serves to access the third memory area 114c for the third data block 320n 3 . In this case, both memory access requests follow 122c . 122d because the RDMA connection 250b the second client 120b to the protective domains 270a . 270b both the first memory area 114a as well as the third memory area 114c belongs.
Wenn es sich bei den Clientanfragen 122 an einen Speicherhost 110 (z. B. Server) um einseitige Operationen handelt (z. B. Remote-Direktspeicherzugriff (RDMA)), gibt es keine serverseitige Verarbeitung der Anforderung. Das Eliminieren der serverseitigen Verarbeitung verhindert nicht nur, dass der Speicherhost 110 die Anfragen 122 zurückweist, wenn er überladen wird. Es verhindert, dass der Serverprozess sogar feststellt, dass der Speicherhost 110 überlastet ist. Folglich kann die Bandbreite für Rechenressourcen 112 und / oder Speicherressourcen 114, die von den Clients 120 gemeinsam genutzt werden, auf herkömmliche Weise nicht verwaltet werden. Beispielsweise arbeitet das serverseitige Ressourcenmanagement nicht für RDMA-Anforderungen 122, da der Hostprozess 118 die Anfrage 122 nicht bedient. Die Anfrage 122 wird direkt durch eine spezielle Hardware, die Netzwerkschnittstellensteuerung 116 bedient. Obwohl jeder Client 120 die Rate, mit der die Anfragen 122 an den Speicherhost 110 vorgenommen werden, streng limitieren kann, um die Ressourcennutzung an dem Speicher-Host 110 zu verringern, fehlt dem Client 120 ein globales Wissen darüber, wie viel Ressourcen 112, 114 andere Clients 120 können Verwenden. Die Leistungsisolierung zwischen den Clients 120 sorgt dafür, dass die Clients 120 nicht unnötigerweise die Leistung folgsamer Clients 120 reduzieren und es ermöglichen, dass verschiedene Servicequalitätsklassen unter den Clients 120 eingerichtet werden. When it comes to client requests 122 to a storage host 110 (for example, server) are one-sided operations (for example, Remote Direct Memory Access (RDMA)), there is no server-side processing of the request. Eliminating server-side processing not only prevents the memory host 110 the requests 122 rejects when it becomes overloaded. It prevents the server process from even detecting the memory host 110 overloaded. Consequently, the bandwidth for computational resources 112 and / or storage resources 114 by the clients 120 shared, traditionally unmanaged. For example, server-side resource management does not work for RDMA requests 122 because of the host process 118 the request 122 not served. The request 122 is directly through a special hardware, the network interface control 116 served. Although each client 120 the rate at which the requests 122 to the storage host 110 can be strictly limited to the resource use at the memory host 110 lessen the client is missing 120 a global knowledge about how much resources 112 . 114 other clients 120 can use. The performance isolation between the clients 120 ensures that the clients 120 not unnecessarily the performance of obedient clients 120 reduce and allow different quality of service classes among the clients 120 be set up.
Wiederum bezugnehmend auf FIG. IB und ID, in einigen Implementierungen, verfolgt jeder Client 120 die Datenmenge 312, die zwischen ihm und jedem Speicherhost 110 übertragen wird und schreibt eine übertragene Datenmenge 313 (die auch als übertragene Bytes bezeichnet wird) in einen RDMA zugänglichen Speicherbereich 114n auf dem Speicherhost 110. Mit anderen Worten: Jeder Client 120 hält eine laufende Summe der Gesamtzahl der Bytes, die in den Speicherhost 110 gelesen / geschrieben werden und schreibt diese Summe periodisch an den Speicherhost 110. Jeder Client 120 hat einen eigenen Speicherbereich 114n auf jedem Speicherhost 110. Der Speicherhost 110 erzeugt und initialisiert den Speicherbereich 114n zur Verbindungsaufbauzeit und sendet einen Speicherort des Speicherbereichs 114n an den Client 120 bei der ersten Herstellung der Verbindung 250. Der Client 120 schreibt den Speicherbereich 114n nach einer Schwellenänderung in der Datenmenge 312, die übertragen wird, z. B. 128 Kilobyte. Diese Richtlinie führt dazu, dass die Clients 120, die mehr Bandbreite verwenden und eher eine Drosselung benötigen, um ihre übertragenen Bytes 313 häufiger zu aktualisieren, und Clients 120 mit geringer Bandbreite, um weniger häufig mit den Speicherhosts 110 zu kommunizieren. Der Schwellenwert zum Vorantreiben einer Aktualisierung der übertragenen Bytes 312 könnte auf der Grundlage der tatsächlichen Implementierung des Netzwerks stark variieren. Clients 120, dazu zu veranlassen ihre übertragenen Bytes 313 an den Speicherhost 110 zu verschieben, vereinfacht die Serverisolationslogik und reduziert wiederum die CPU-Auslastung stark. Referring again to FIG. IB and ID, in some implementations, are tracked by each client 120 the amount of data 312 that between him and every storage host 110 is transmitted and writes a transmitted amount of data 313 (also referred to as transmitted bytes) into a RDMA accessible memory area 114n on the storage host 110 , In other words, every client 120 keeps a running total of the total number of bytes in the memory host 110 read / write and writes this sum periodically to the storage host 110 , Every client 120 has its own memory area 114n on every storage host 110 , The storage host 110 creates and initializes the memory area 114n to the connection establishment time and sends a storage location of the storage area 114n to the client 120 in the first preparation of the compound 250 , The client 120 writes the memory area 114n after a threshold change in the dataset 312 which is transmitted, e.g. B. 128 kilobytes. This policy causes the clients 120 that use more bandwidth and more of a throttling to their transmitted bytes 313 update more frequently, and clients 120 low-bandwidth, less frequently with the storage hosts 110 to communicate. The threshold to advance an update of the bytes transferred 312 could vary widely based on the actual implementation of the network. clients 120 to induce their transmitted bytes 313 to the storage host 110 to move, simplifies server isolation logic and greatly reduces CPU utilization.
In regelmäßigen Abständen tastet der Speicherhost 110 die Speicherbereiche 114n ab, die Client-Bytes enthalten, die 313 übertragen werden (z. B. alle 100 Millisekunden), berechnet die Bandbreitenbenutzung und berechnet die Clientbandbreitenanteile 317 für den Speicherhost 110, die auch als Drosselgeschwindigkeiten bezeichnet werden. Bei einigen Implementierungen liest der Speicherhost 110 periodisch die Bytesübertragungsmenge 313 (z. B. eine Summe), vergleicht sie mit der letzten gelesenen Summe und berechnet eine Datenrate 315 für den Client 120 aus der Differenz. Die Scan-Rate kann von der Implementierung abhängig sein. Kürzere Zeiten zwischen den Scans führen zu einer feineren Kernkontrolle der Clients 120, aber der Kompromiss ist eine höhere Server-CPU-Auslastung. Der Speicherhost 110 schreibt die berechnete Drosselungsrate jedes Clients 317 zu einem anderen lokalen Speicherbereich 114m. Der Client 120 liest diese Drosselungsrate 317 von dem Speicherhost 110, z. B. über RDMA, wenn der Client 120 die übertragenen Bytes 313 an den Speicherhost 110 schreibt. Der Client 120 begrenzt seine Datenrate 315 auf die zuletzt vom Speicherhost 110 gelesene Drosselungsrate 317, z. B. über RDMA. At regular intervals, the memory host scans 110 the storage areas 114n that contain client bytes that 313 (for example, every 100 milliseconds), calculates the bandwidth usage and calculates the client bandwidth proportions 317 for the storage host 110 , which are also referred to as throttle speeds. In some implementations, the storage host reads 110 periodically the byte transfer amount 313 (eg a sum), compares it to the last read sum and calculates a data rate 315 for the client 120 from the difference. The scan rate may depend on the implementation. Shorter times between scans result in a finer core control of the clients 120 but the tradeoff is higher server CPU usage. The storage host 110 writes the calculated throttling rate of each client 317 to another local storage area 114m , The client 120 reads this throttling rate 317 from the storage host 110 , z. B. via RDMA if the client 120 the transmitted bytes 313 to the storage host 110 writes. The client 120 limits its data rate 315 on the last from the memory host 110 Read throttling rate 317 , z. B. via RDMA.
Der Client 120 ist dafür verantwortlich seine aktuelle Drosselungsrate 317 aus dem Speicherhost 110 zu lesen und diese Drosselungsrate 317 selbst durchzusetzen. Der Client 120 ist auch für das Verfolgen und das periodische Schreiben seiner eigenen Bytes, die 313 zu dem Speicherhost 110 überträgt, verantwortlich. Dies gibt dem Speicherhost 110 die erforderliche globale Kenntnis der Datenraten 315 für jeden verbundenen Client 120, ohne dass der Hostprozess 118 jede RDMA-Anfrage 122, die Hardware verarbeitet. Mit dieser Information kann der Speicherhost 110 die Bandbreite 150 für jeden Client 120 aufteilen und die entsprechenden Drosselgeschwindigkeiten 317 berechnen. Die Bandbreite 150 eines Speicherhosts 110 kann einen reservierten Abschnitt 152 (reservierte Bandbreite) und einen flexiblen Abschnitt 154 (flexible Bandbreite) umfassen. In einigen Implementierungen ist die Flexbandbreite 154 jede nicht benutzte reservierte Bandbreite 152. The client 120 is responsible for its current rate of choke 317 from the storage host 110 to read and this throttling rate 317 enforce yourself. The client 120 is also for tracking and periodic writing of its own bytes 313 to the storage host 110 transfers, responsible. This gives the storage host 110 the required global knowledge of data rates 315 for each connected client 120 without the host process 118 every RDMA request 122 processing hardware. With this information, the memory host 110 the bandwidth 150 for each client 120 split and the corresponding throttle speeds 317 to calculate. The bandwidth 150 a storage host 110 can have a reserved section 152 (reserved bandwidth) and a flexible section 154 (flexible bandwidth). In some implementations, the flex bandwidth is 154 any unused reserved bandwidth 152 ,
Standardmäßig kann jeder Client 120 eine gerade Bandbreite 150 von einem Speicherhost 110 empfangen. Der Speicherhost 110 kann erhaltend sein, indem jede nicht verwendete Bandbreite 150 unter den Clients 120 verteilt wird, die verwenden werden kann. In einigen Implementierungen ist die Bandbreite 150 nicht gleichmäßig verteilt. Zuerst weist der Speicherhost 110 die reservierte Bandbreite 152 jedem Client 120 zu und jede nicht benutzte reservierte Bandbreite 152 wird in einem flexiblen Pool als Flexbandbreite 154 platziert. Der Speicherhost 110 kann den flexiblen Pool oder die flexible Bandbreite 154 gleichermaßen unter den Clients 120 teilen, mit der Ausnahme, dass ein Client 120, der die flexible Bandbreite 154 nicht benötigt, ihn nicht aus dem Pool herausnehmen wird, sondern ihn stattdessen unter den Clients 120 gleichmäßig verteilt, die von der zusätzlichen Bandbreite 150 Gebrauch machen können. Wenn die Bandbreite 150, die einem Client 120 zur Verfügung steht, unzureichend ist oder der Client 120 Bandbreitengarantien erfordert (z. B. weil die Bandbreite 150 über die Zeit variieren kann), kann der Client 120 eine Zuweisung der reservierten Bandbreite 152 zu einer Isolationsklasse 160 anfordern. By default, every client can 120 a straight bandwidth 150 from a storage host 110 receive. The storage host 110 can be conserved by any unused bandwidth 150 among the clients 120 is distributed, which can be used. In some implementations, the bandwidth is 150 not evenly distributed. First, the storage host points 110 the reserved bandwidth 152 every client 120 to and any unused reserved bandwidth 152 gets in a flexible pool as Flexbandbreite 154 placed. The storage host 110 can be the flexible pool or the flexible bandwidth 154 equally among the clients 120 share, except that a client 120 who has the flexible bandwidth 154 not needed, will not take him out of the pool, but instead him among the clients 120 evenly distributed, by the additional bandwidth 150 Can make use of. If the bandwidth 150 that a client 120 is available, is inadequate or the client 120 Bandwidth guarantees required (eg because the bandwidth 150 may vary over time), the client may 120 an allocation of the reserved bandwidth 152 to an isolation class 160 Request.
Die Isolationsklassen 160 erlauben Anfragen 122, die als der gleiche Client 120 laufen, um einen differenzierten Dienst zu empfangen. Ein Client 120 kann mehrere assoziierte Isolationsklassen 160 besitzen. Ein Speicherhost 110 kann eine Isolationsklasse 160 unter Verwendung eines Kennzeichens, wie beispielsweise einen Clientnamen plus einer beliebigen Zeichenfolge, definieren. Ein Client 120 kann eine Anwendung 124 ausführen, die eine oder mehrere Client-Anfragen 122 aufweist. Jeder Client 120 kann eine oder mehrere assoziierte Isolationsklassen 160 und jede Isolationsklasse 160 eine oder mehrere Client-Anfragen 122 enthalten. Ein Client-Flag kann bestimmen, welche Isolationsklasse 160 eine Anfrage 122 verwenden soll. Alternativ kann die Isolationsklasse 160 durch den Client 120 auf Basis einer Anfrage spezifiziert werden, sodass ein einzelner Client 120 mehrere Isolationsklassen 160 verwenden kann. Anfragen 122, die als unterschiedliche Clients 120 laufen, dürfen die gleiche Isolationsklasse 160 nicht teilen, da eine Isolationsklasse 160 ein Abkömmling des Clients 120 ist. Eine alternative Implementierung könnten Isolationsklassen 160 aufweisen, die mehrere Clients 120 umfassen. Eine Isolationsklasse 160 kann der flexiblen Bandbreite 154 plus reservierter Bandbreite 152 zugewiesen werden. The isolation classes 160 allow inquiries 122 that as the same client 120 to receive a differentiated service. A client 120 can have several associated isolation classes 160 have. A storage host 110 can be an isolation class 160 using a tag, such as a client name plus any string. A client 120 can be an application 124 execute the one or more client requests 122 having. Every client 120 can have one or more associated isolation classes 160 and every insulation class 160 one or more client requests 122 contain. A client flag can determine which isolation class 160 a request 122 should use. Alternatively, the insulation class 160 through the client 120 be specified based on a request, so that a single client 120 several isolation classes 160 can use. Requests 122 that as different clients 120 run, allowed the same isolation class 160 do not share, as an isolation class 160 a descendant of the client 120 is. An alternative implementation could be isolation classes 160 have multiple clients 120 include. An isolation class 160 can the flexible bandwidth 154 plus reserved bandwidth 152 be assigned to.
In einigen Implementierungen bilden der Client 120, die Isolationsklasse 160 und die Clientanforderungen 122 eine hierarchische Beziehung. Jeder Client 120 kann eine oder mehrere assoziierte Isolationsklassen 160 und jede Isolationsklasse 160 eine oder mehrere zugeordnete Client-Anftagen 122 besitzen. Der Speicherhost 110 kann zuerst seine Bandbreite 150 unter den Clients 120 verteilen. Dann unterteilt der Speicherhost 110 für jeden Client 120 die zugeordnete Bandbreite 155 für den jeweiligen Client 120 unter den zugehörigen Isolationsklassen 160. Dann teilt der Speicherhost 110 für jede Isolationsklasse 160 die entsprechende zugeordnete Bandbreite 155 unter zugeordneten Client-Anfragen 122. In some implementations form the client 120 , the isolation class 160 and the client requirements 122 a hierarchical relationship. Every client 120 can have one or more associated isolation classes 160 and every insulation class 160 one or more associated client notes 122 have. The storage host 110 First, its bandwidth 150 among the clients 120 to distribute. Then the storage host is subdivided 110 for each client 120 the allocated bandwidth 155 for the respective client 120 under the corresponding insulation classes 160 , Then the storage host shares 110 for every insulation class 160 the corresponding allocated bandwidth 155 under assigned client requests 122 ,
Jede Zelle 200 hat eine Nennkapazität in Bytes pro Sekunde. Im Prinzip ist die Nennkapazität einer Zelle 200 die Menge an Daten 312, die die Clients 120 aus der Zelle 200 pro Sekunde lesen und in diese schreiben können. In der Praxis kann die Nennkapazität einer Zelle 200 gleichmäßig über die Speicherhosts 110 in der Zelle 200 aufgeteilt und auf einer Speicherhost-Basis erzwungen werden. Beispielsweise muss eine Zelle 200 mit 1000 Speicherhosts 110 und einer Nennkapazität von 1 TB / s mindestens 1 GB / s Belastung an jedem Speicherhost 110 in der Zelle 200 anbieten, um 1 TB der Daten 312 zu bedienen. Die Nennbandbreitenkapazität 206 eines Speicherwirts 110 kann kleiner sein als die Netzschnittstellen-Controllerbandbreite des Speicherwirts 110, jedoch nicht größer als die Netzwerkschnittstellen-Controllerbandbreite. Every cell 200 has a nominal capacity in bytes per second. In principle, the nominal capacity of a cell 200 the amount of data 312 that the clients 120 out of the cell 200 read per second and write in it. In practice, the nominal capacity of a cell 200 evenly over the storage hosts 110 in the cell 200 split and enforced on a storage host basis. For example, a cell must be 200 with 1000 memory hosts 110 and a rated capacity of 1 TB / s at least 1 GB / s load on each storage host 110 in the cell 200 offer to 1 TB of data 312 to use. The nominal bandwidth capacity 206 a storage host 110 can be less than the memory host network interface controller bandwidth 110 but not larger than the network interface controller bandwidth.
Speicherhosts 110 greifen und berechnen gemäß einer Zellenisolationskonfiguration 204 (z.B. gespeichert als eine Datei) auf Anteile der Bandbreite 150 zu. Die Zellenisolationskonfiguration 204 umfasst eine Kapazität 206 der Nennbandbreite jedes Speicherwirts 110 in Megabyte pro Sekunde und eine Liste 208 von Bandbreitenreservierungen 208a–n. Jede Bandbreitenreservierung 208a–n umfasst einen Clientnamen, eine Isolationsklasse 160 und eine Bandbreite 150, die in Megabyte pro Sekunde spezifiziert ist. In einigen Beispielen stellt die Isolationskonfiguration 204 keine flexible Bandbreite 154 bereit, die jede nicht benutzte reservierte Bandbreite 152 sein kann. memory hosts 110 grab and calculate according to a cell isolation configuration 204 (eg stored as a file) on shares of bandwidth 150 to. The cell isolation configuration 204 includes a capacity 206 the nominal bandwidth of each memory host 110 in megabytes per second and a list 208 of bandwidth reservations 208a -n. Each bandwidth reservation 208a -N includes a client name, an isolation class 160 and a bandwidth 150 , which is specified in megabytes per second. In some examples, the isolation configuration represents 204 no flexible bandwidth 154 ready, any unused reserved bandwidth 152 can be.
In einigen Implementierungen gilt die Isolationsrichtlinie, wie sie durch eine Zellenisolationskonfiguration 204 dargelegt wird, nur für Speicherhosts 110, die in der Gefahr sind, ihre Nennbandbreitenkapazität 206 zu überschreiten. Sobald sie eingeschaltet sind, zielt die Trennungsrichtlinie darauf ab, die Bandbreite 150 des Speicherhosts 110 ordentlich unter den Clients 120 zu verteilen, die aktiv auf diesen Speicherhost 110 zugreifen. Die Isolationsrichtlinie kann versuchen, die Bandbreite 150 gleichmäßig auf die aktiven Clients 120, bis zur angebotenen Last des Clients 120, zu verteilen. Beispielsweise können ein Speicherhost 110 mit einer Bandbreite von 1 GB / s Nennbandbreitenkapazität 206 und vier aktive Clients 120, die Lasten von 0,1, 0,2, 0,4 und 0,8 GB / s bieten, eine Bandbreitenverteilung mit einer Bandbreite von 1 GB / s aber auch 0,1, 0,2, 0,35 und 0,35 / s sein. In some implementations, the isolation policy applies as it does through a cell isolation configuration 204 only for memory hosts 110 who are in danger, their nominal bandwidth capacity 206 To exceed. Once they are turned on, the segregation policy aims to narrow the bandwidth 150 the storage host 110 neat among the clients 120 to distribute that active on this storage host 110 access. The isolation policy can try the bandwidth 150 evenly on the active clients 120 , up to the offered load of the client 120 to distribute. For example, a storage host 110 with a bandwidth of 1 GB / s nominal bandwidth capacity 206 and four active clients 120 , the loads of 0.1, 0.2, 0.4 and 0.8 GB / s, bandwidth distribution with a bandwidth of 1 GB / s but also be 0.1, 0.2, 0.35 and 0.35 / s.
In einigen Beispielen kann ein Client 120 auf einen überladenen Speicherhost 110 von mehreren Prozessen innerhalb eines Datenzentrums zugreifen. In diesem Fall verteilt die Isolationsrichtlinie den fairen Anteil der Bandbreite 150 des Clients 120 gleichmäßig zwischen den Isolationsklassen 160 des Clients 120 und den Arbeitsschritten, die aktiv auf den Speicherhost 110 zugreifen. Mit anderen Worten: Jedem Client 120 wird die Bandbreite 150 des Speicherhosts 110 zugewiesen, dann teilt jede Isolationsklasse 160, die diesem Client 120 zugeordnet ist, die zugewiesene Bandbreite 150 auf, und dann teilt jede Clientanforderung 122 innerhalb einer Isolationsklasse 160 die Bandbreite der Isolationsklasse 165. In some examples, a client may 120 on an overloaded storage host 110 access multiple processes within a data center. In this case, the isolation policy distributes the fair share of bandwidth 150 of the client 120 evenly between the insulation classes 160 of the client 120 and the steps that are active on the storage host 110 access. In other words, every client 120 will be the bandwidth 150 the storage host 110 assigned, then shares each isolation class 160 that this client 120 assigned, the allocated bandwidth 150 on, and then share each client request 122 within an isolation class 160 the bandwidth of the isolation class 165 ,
Clients 120, die mehr als ihren angemessenen Anteil an Bandbreite 150 einer Zelle 200 benötigen, können eine Bandbreite 150 reservieren. Bandbreitenreservierungen 208a–n liegen in Bytes pro Sekunde für die gesamte Zelle 200 vor. Eine Bandbreitenreservierung 208n ist gleichmäßig über alle Speicherhosts 110 in der Zelle 200 verteilt. Wenn z. B. eine Zelle 200 1000 Speicherhosts 110 und ein Client 120 500 GB / s Zellenbandbreite 150 reserviert, dann wird dem Client 120 garantiert, mindestens 0,5 GB / s Bandbreite 150 von jedem Speicherhost 110 in der Zelle 200 zu empfangen. Wenn ein Client 120 seine reservierte Bandbreite 152 nicht verwendet, kann der Speicherhost 110 diese Bandbreite 152 des Clients 120 an andere Clients 120 verteilen, die die Bandbreite 150 verwenden können. clients 120 That's more than their reasonable share of bandwidth 150 a cell 200 may need a bandwidth 150 Reservations. Bandwidth reservations 208a -N are in bytes per second for the entire cell 200 in front. A bandwidth reservation 208n is even across all storage hosts 110 in the cell 200 distributed. If z. A cell 200 1000 memory hosts 110 and a client 120 500 GB / s cell bandwidth 150 reserved, then becomes the client 120 guaranteed, at least 0.5 GB / s bandwidth 150 from every storage host 110 in the cell 200 to recieve. If a client 120 its reserved bandwidth 152 not used, the memory host can 110 this bandwidth 152 of the client 120 to other clients 120 distribute the bandwidth 150 can use.
Bandbreitenreservierungen 208a–n können die Fair-Share-Bandbreite 150 anderer Clients 120 beeinflussen. Unter Verwendung des früheren Beispiels, bei dem ein Speicherhost 110 mit einer Bandbreite von 1 GB / s 206 und vier aktiven Clients 120, die Lasten von 0,1, 0,2, 0,4 und 0,8 GB / s angeboten haben, wenn der Client 120 mit den 0,8 GB / s Ladungsreserven 0,2 GB / s der Bandbreite 150 des Speicherhosts 110, dann liegt der Pool der verfügbaren Flexbandbreite 154 des Speicherhosts 110 nur 0,8 GB / s. Unter Berücksichtigung dieser Bandbreitenreservierung 208n kann die Isolationsrichtlinie .1, .2, .25 und .45 (.2 reserviert +25 Bits) GB / s der Bandbreite 150 jeweils an die Clients 120 verteilen. Bandwidth reservations 208a -N can get the fair-share bandwidth 150 other clients 120 influence. Using the previous example, where a storage host 110 with a bandwidth of 1 GB / s 206 and four active clients 120 who have offered loads of 0.1, 0.2, 0.4 and 0.8 GB / s when the client 120 with the 0.8 GB / s charge reserves 0.2 GB / s of bandwidth 150 the storage host 110 , then the pool is the available Flexbandbreite 154 the storage host 110 only 0.8 GB / s. Considering this bandwidth reservation 208n can the isolation policy .1, .2, .25 and .45 (.2 reserved +25 bits) GB / s of bandwidth 150 each to the clients 120 to distribute.
Wenn ein Speicherhost 110 feststellt, dass er über seiner Nennbandbreitenkapazität 206 liegt, drosselt der Speicherhost 110 die Clients 120, die mehr als ihren Anteil der Speicherhostbandbreite 150 verwenden. Jeder Client 120 kann ein Leaky-Bucket-Schema verwenden, um seine Zugriffe auf einen spezifischen Speicherhost 110 zu drosseln. Der Speicherhost 110 steuert die Füllrate des Leaky-Bucket des Clients durch periodisches Neuberechnen von Bandbreitenanteilen und Aktualisieren der Füllrate des Client-Leaky-Bucket. In einigen Beispielen weist jeder Client-Datenkanal einen Leaky-Bucket mit einer maximalen Kapazität von 128 KB auf, aber auch andere Kapazitäten sind möglich und können implementierungsabhängig sein. Die Kapazität des Leaky-Buckets bestimmt die maximale Burst-Rate, die ein Client 120 erreichen kann. Dies ermöglicht es, dass ihre momentane Datenrate 315 ihre Drosselungsrate 317 vorübergehend überschreitet. Bevor eine RDMA-Operation initiiert wird, fordert der Client 120 Token von dem geeigneten Leaky-Bucket an. Die Anzahl der angeforderten Token ist gleich der Nutzdatengröße der RDMA-Operation. Wenn genug Token vorhanden sind, schreitet der Vorgang fort, wenn der Datenkanal nicht anzeigt, dass ein vorübergehender Fehler aufgetreten ist und der Vorgang später wiederholt werden sollte. Der Client 120 kann eine Logik zur Handhabung von anderen temporären Datenkanalfehlern aufweisen. Die Füllrate des Leaky-Buckets wird auf die aktuelle Drosselungsrate 317 eingestellt, die durch den Speicherhost 110 zugewiesen wird. If a storage host 110 determines that it is above its rated bandwidth capacity 206 is, the storage host throttles 110 the clients 120 that is more than their share of the memory host bandwidth 150 use. Every client 120 can use a leaky bucket scheme to limit its accesses to a specific storage host 110 to throttle. The storage host 110 Controls the fill rate of the client's leaky bucket by periodically recalculating bandwidth shares and updating the fill rate of the client leaky bucket. In some examples, each client data channel has a leaky bucket with a maximum capacity of 128 KB, but other capacities are possible and may be implementation-dependent. The capacity of the leaky bucket determines the maximum burst rate that a client 120 can reach. This allows it to have its current data rate 315 their throttling rate 317 temporarily exceeded. Before an RDMA operation is initiated, the client prompts 120 Tokens from the appropriate leaky bucket. The number of requested tokens is equal to the payload size of the RDMA operation. If there are enough tokens, the process proceeds if the data channel does not indicate that a transient error has occurred and the process should be repeated later. The client 120 may have logic for handling other temporary data channel errors. The fill rate of the leaky bucket will be at the current throttling rate 317 set by the memory host 110 is assigned.
Die Speicherhosts 110 können auch bestätigen, dass die Clients 120 Drosselanfragen berücksichtigen und fehlerhafte-Clients 120 auf eine Blacklist setzen, die keine Drosselanfragen respektieren. Eine Blacklist kann erreicht werden, indem alle RDMA-Verbindungen 250 zwischen dem Speicherhost 110 und dem Blacklist-Client 120 abgebrochen werden. The storage hosts 110 can also confirm that the clients 120 Consider throttle requests and faulty clients 120 put on a blacklist that does not respect throttle requests. A blacklist can be achieved by using all RDMA connections 250 between the storage host 110 and the blacklist client 120 be canceled.
Der Speicherhost 110 weist den Clients 120 ihre reservierte Bandbreite 152 und ihren gleichmäßigen Anteil der flexiblen Bandbreite 154 des Speicherhosts 110 als zugeordnete Bandbreite 155 zu. Wenn die angebotene Last eines Clients 120 kleiner als die zugeordnete Bandbreite 155 ist, wird der nicht verwendete Teil der reservierten Bandbreite 152 an andere Clients 120 verteilt. Daher ändert sich die zugewiesene Bandbreite 155 (d. h. derjenige Clientanteil der Bandbreite 150 eines Speicherhosts) dynamisch, basierend auf der Bandbreitenverwendung anderer Clients 120. Die zugewiesene Bandbreitenfreigabe 155 kann für etwa 100 ms gültig sein und der Speicherhost 110 kann die zugeordnete Bandbreitenfreigabe 155 eines Clients 120 in weiteren 100 ms neu berechnen. The storage host 110 instructs the clients 120 their reserved bandwidth 152 and their equal share of flexible bandwidth 154 the storage host 110 as allocated bandwidth 155 to. When the offered load of a client 120 less than the allocated bandwidth 155 is the unused portion of the reserved bandwidth 152 to other clients 120 distributed. Therefore, the allocated bandwidth changes 155 (ie the client share of the bandwidth 150 a memory host) dynamically based on the bandwidth usage of other clients 120 , The allocated bandwidth share 155 can be valid for about 100 ms and the memory host 110 can be the allocated bandwidth share 155 a client 120 recalculate in another 100 ms.
In einigen Implementierungen ist ein Algorithmus zum Berechnen der zugeordneten Bandbreiten-Freigabe 155 eines Clients 120 für einen Speicher-Host 110: In some implementations, an algorithm is to calculate the allocated bandwidth share 155 a client 120 for a storage host 110 :
In einigen Implementierungen berechnet der Speicherhost 110 für die Isolationsklassen 160 und die Clientprozesse 128 die zugeordnete Bandbreite 155 für jeden Client 120, begrenzt durch die Nennbandbreite 206 des Speicherhosts 110, eine Bandbreite 165 für jede Isolationsklasse 160. Die zugeordnete Bandbreite 155, die dem Client 120 zugewiesen ist, und die Bandbreite 155 für jeden Clientprozess 128, beschränkt durch die Bandbreite 165, die der Isolationsklasse 160 zugeordnet ist, deren Mitglied es ist. In einigen Beispielen können einzelne Clientanfragen 122 eine reservierte Bandbreite 152 haben oder nicht. In some implementations, the storage host calculates 110 for the insulation classes 160 and the client processes 128 the allocated bandwidth 155 for each client 120 , limited by the nominal bandwidth 206 the storage host 110 , a bandwidth 165 for every insulation class 160 , The allocated bandwidth 155 that the client 120 is assigned, and the bandwidth 155 for every client process 128 , limited by the bandwidth 165 , the insulation class 160 is assigned, whose member it is. In some examples, individual client requests may be 122 a reserved bandwidth 152 or not.
Ein Algorithmus zum Berechnen der zugeordneten Bandbreitenfreigabe 155 eines Clients 120 für einen Speicherhost 110 kann umfassen: An algorithm for calculating the allocated bandwidth grant 155 a client 120 for a storage host 110 can include:
Nach dem Berechnen der zugewiesenen Bandbreite 155 für jede Clientanfrage 122 passen die Speicherhosts 110 eine aktuelle Drosselungsrate 317 für jede Clientanforderung 122 an, um sich der zugeteilten Bandbreitenfreigabe 155 zu nähern. Da die Anwendungsstörung die Anwendung 124 immer davon abhalten kann ihre Zielbandbreitenfreigabe 155 zu erreichen, kann der Speicherhost 110 die Drosselungsrate 317 anpassen, um dieser Störung Rechnung zu tragen und die Speicherhostbandbreite 150 effizienter zu nutzen. After calculating the allocated bandwidth 155 for every client request 122 fit the storage hosts 110 an actual throttling rate 317 for every client request 122 on to the assigned one Bandwidth grant 155 to approach. Since the application disorder the application 124 always be able to discourage their target bandwidth release 155 can reach the memory host 110 the throttling rate 317 to accommodate this disruption and the memory host bandwidth 150 to use more efficiently.
Nach dem Berechnen der Client-Bandbreiten-Freigaben 155 kann der Speicherhost 110 entweder eine additive Erhöhung der Client-Drosselungsrate 317 durchführen, wenn die gemessene Datenrate 315 des Clients 120 geringer ist als seine zugeordnete Bandbreite 155 oder die Client-Drosselungsrate 317 bis auf die zugewiesene Bandbreite 155 kappen, wenn die gemessene Datenrate 315 der Clientanfrage 122 größer als ihre Zielbandbreitenfreigabe 155 ist. After calculating the client bandwidth shares 155 can the memory host 110 either an additive increase in client throttling rate 317 perform when the measured data rate 315 of the client 120 less than its allocated bandwidth 155 or the client throttling rate 317 except for the allocated bandwidth 155 caps when the measured data rate 315 the client request 122 greater than their target bandwidth release 155 is.
Ein beispielhafter Algorithmus zum Einstellen der Drosselungsrate 317 umfasst: An exemplary algorithm for adjusting the throttling rate 317 includes:
Die Speicherhosts 110 können Drosselgeschwindigkeiten 317 an Clients 120 durch Schreiben der Drosselungsrate 317 an einen lokalen RDMA-zugänglichen Speicherbereich 114m übermitteln. Die Clients RDMA lesen ihre Drosselungsrate 317 aus dem Speicherbereich 114m, wenn z. B. ein Client 120 seine Bytes in 313 schreibt und diese an den Speicherhost 110 übertragen wurden (d.h. nach jedem 128 KB übertragenen Daten). Wiederum verursacht dies die Clients 120, die eine höhere Bandbreite 150 verwenden, und es wahrscheinlicher ist, dass sie eine Drosselung benötigen, ihre Datenrate 315 häufiger zu aktualisieren. Der Client 120 kann auch auf RDMA-Basis die Drosselungsrate 317 lesen, wenn er aufgrund einer Drosselung nicht lesen oder schreiben kann. Dieses Auslesen kann auf alle 100ms beschränkt werden. The storage hosts 110 can throttle speeds 317 to clients 120 by writing the throttling rate 317 to a local RDMA-accessible storage area 114m to transfer. The clients RDMA read their throttling rate 317 from the storage area 114m if z. A client 120 his bytes in 313 write and send this to the storage host 110 transmitted (ie every 128 KB of data transferred). Again, this causes the clients 120 that have a higher bandwidth 150 and they are more likely to require throttling their data rate 315 update more frequently. The client 120 can also on RDMA basis the throttling rate 317 read if he can not read or write due to throttling. This readout can be limited to every 100ms.
Der (die) Kurator(en) 210 kann (können) Informationen über die Speicherhostdrosselung in seine / ihre Lastausgleichsrichtlinien aufnehmen, um zum Beispiel die Drosselung eines Clients 120, aufgrund einer Platzierung t zu vieler Blöcke 320n k, dieses Clients 120 auf einem einzigen Speicher-Host 110, zu minimieren. Der Kurator 210 kann einen Status von jedem Speicherhost 110 empfangen, der Drosselinformationen enthält, z. B. ob der Speicherhost 110 über seiner Nennbandbreite 206 liegt und welche Clients 120 gedrosselt werden. Wenn ein Client 120 auf vielen Speicherhosts 110 über eine Zelle 200 gedrosselt wird, kann die Zelle 200 den Client 120 alarmieren, dass er zu viel Bandbreite 150 verwendet. Wenn ein Client 120 auf einem einzigen Speicherhost 110 (oder einer kleinen Anzahl von Speicherhosts 110) gedrosselt wird, kann der Kurator bzw. die Kuratoren 210 die Datenblöcke 320n k dieses Clients 120 auf den überladenen Speicherhost(s) 110 zu anderen Speicherhosts 110 in der Zelle 200 migrieren. Wenn die Bedingung weiterhin besteht, kann die Drosselung durch heikler Abschnitte 320n k verursacht werden. Die Drosselungsinformationen können überwacht werden, um zu erfassen, wann die Zelle 200 überlastet ist und ob mehr Speicherhosts 110 und Bandbreite 150 der Zelle 200 hinzugefügt werden müssen. The curator (s) 210 can include information about the storage host throttling in its load-balancing policy (s), for example throttling a client 120 , due to a placement t too many blocks 320n k, this client 120 on a single storage host 110 , to minimize. The curator 210 can have a status of each storage host 110 receive, the throttle information contains, z. For example, if the storage host 110 above its nominal bandwidth 206 is and which clients 120 be throttled. If a client 120 on many storage hosts 110 about a cell 200 throttled, the cell can 200 the client 120 alarm that he has too much bandwidth 150 used. If a client 120 on a single storage host 110 (or a small number of storage hosts 110 ) can be throttled, the curator or the curators 210 the data blocks 320n k this client 120 on the overloaded storage host (s) 110 to other storage hosts 110 in the cell 200 migrate. If the condition persists, throttling can be done by tricky sections 320n k are caused. The throttling information can be monitored to detect when the cell 200 is overloaded and if more memory hosts 110 and bandwidth 150 the cell 200 must be added.
Wiederum bezugnehmend auf FIG. Wie in 2A und 2C gezeigt, kann der Kurator 210 in einigen Implementierungen Dateien 310 erstellen, kopieren, eine Größenveränderung vornehmen und löschen. Auch andere Operationen sind möglich. Um eine Kopieranforderung 122cr von einem Client 120 zu bedienen, erzeugt der Kurator 210 einen neuen Dateideskriptor 300 mit einem Zustand, der anfangs auf COPY_PENDING gestellt ist. Der Kurator 210 kann eines oder mehrere der folgenden Felder einstellen / initialisieren: Größe, Besitzer, Gruppe, Berechtigungen und / oder Sicherungsdatei. Der Kurator 210 füllt ein Streifenarray 325 des Dateideskriptors 300 (3B) mit leeren Streifen 320n und verbindet dann den Dateideskriptor 300 mit seiner Dateikarte 214. Das Festlegen dieser Information an die Dateikarte 214 ermöglicht es dem Kurator 210 eine Größenänderungsoperation neu zu starten, wenn der Kurator 210 abstürzt oder eine Schrifttafel, die die Dateisystemmetadaten 212 enthält, die zu einem anderen Kurator 210 migrieren. Sobald der Kurator 210 den Dateideskriptor 300 der Dateikarte 214 verpflichtet, antwortet der Kurator 210 auf die Client-Kopieranfrage 122cr, indem er dem Client 120 mitteilt, dass der Kopiervorgang initiiert worden ist. Der Kurator 210 leitet Speicher-Host-Pull-Chunk-Operationen ein, die Speicherhosts 110 anweisen, einen neuen Datenblock 320n zuzuweisen k und um die Blöcke 320n k der Hintergrunddatei in den Speicher 114 der Speicher-Hosts 110 auszulesen. Wenn ein Pull-Chunk-Vorgang erfolgreich zurückkehrt, fügt der Kurator 210 das neue Chunk 320n k des entsprechenden Streifens 320n in dem Dateideskriptor 300 hinzu. Der Kurator 210 vertraut den Stripe 320n mit dem Datenblock 320n k der Dateikartierung 214 an. Referring again to FIG. As in 2A and 2C shown, the curator can 210 in some implementations files 310 create, copy, resize and delete. Other operations are possible. To make a copy request 122cr from a client 120 to serve, generates the curator 210 a new file descriptor 300 with a state initially set to COPY_PENDING. The curator 210 can set / initialize one or more of the following fields: size, owner, group, permissions, and / or backup file. The curator 210 fills a strip array 325 of the file descriptor 300 (3B) with empty stripes 320n and then connect the file descriptor 300 With his file card 214 , Setting this information to the file card 214 allows the curator 210 to restart a resizing operation if the curator 210 crashes or a blackboard that the file system metadata 212 contains that to another curator 210 migrate. As soon as the curator 210 the file descriptor 300 the file card 214 obliged, the curator answers 210 on the client copy request 122cr by giving the client 120 indicates that the copy has been initiated. The curator 210 initiates memory host pull chunk operations, the memory hosts 110 instruct a new data block 320n to allocate k and around the blocks 320n k the background file to memory 114 the memory hosts 110 read. When a pull-chunk operation returns successfully, the curator adds 210 the new chunk 320n k of the corresponding strip 320n in the file descriptor 300 added. The curator 210 trusts the stripe 320n with the data block 320n k of file mapping 214 at.
Im Fall eines Absturzes oder einer Migration ermöglicht ein inkrementales Aktualisieren der Dateideskriptoren 300 eine neuen Kurator 210, einen Kopiervorgang von dem Ort, an dem der vorherige Kurator 210 gestoppt wurde, neu zu starten. Dies ermöglicht es den Clients 120, den Status eines Kopiervorgangs durch Abrufen des Dateideskriptors 300 (z.B. durch ein Suchverfahren) zu überprüfen und die Anzahl von Streifen 320n in dem mit Datenblöcken besetzten Dateideskriptor 300 zu prüfen 320n k. Sobald alle Datenblöcke 320n k in die Speicherhosts 110 kopiert worden sind, stellt der Kurator 210 den Zustand des Dateideskriptors 300 auf READ und ihn der Dateikarte 214 an. In the event of a crash or migration, incremental updating of the file descriptors allows 300 a new curator 210 , a copy of the place where the previous curator 210 was stopped to restart. This allows the clients 120 , the status of a copy operation by retrieving the file descriptor 300 (eg through a search procedure) and check the number of strips 320n in the file descriptor populated with data blocks 300 to consider 320n k . Once all the data blocks 320n k in the storage hosts 110 have been copied, notes the curator 210 the state of the file descriptor 300 on READ and him the file card 214 at.
Der Kurator 210 kann Statusinformationen für alle Speicherhosts 110, die Teil der Zelle 200 sind, beibehalten. Die Statusinformationen können die Kapazität, den freien Speicherplatz, die Last auf dem Speicherhost 110 und die Latenzzeit des Speicherhosts 110 aus der Sicht eines Clients und einen aktuellen Zustand umfassen. Der Kurator 210 kann diese Information erhalten, indem er die Speicherhosts 110 in der Zelle 200 direkt und / oder durch Abfragen eines Clients 120 erfasst, um Latenzstatistiken aus der Sicht eines Clients zu sammeln. In einigen Beispielen verwendet der Kurator 210 die Speicher-Host-Statusinformation, um Rebalancing-, Drain-, Wiederherstellungsentscheidungen und Allokationsentscheidungen zu treffen. The curator 210 can provide status information for all storage hosts 110 that part of the cell 200 are maintained. The status information can be the capacity, the free space, the load on the storage host 110 and the latency of the storage host 110 from a client's point of view and include a current state. The curator 210 This information can be obtained by the storage hosts 110 in the cell 200 directly and / or by querying a client 120 collected to collect latency statistics from a client's perspective. In some examples, the curator uses 210 the memory host status information to make rebalancing, drain, recovery decisions, and allocation decisions.
Der (die) Kurator(en) 210 kann(können) Datenblöcke 320n zuteilen k, um Clientanfrageb 122 für mehr Speicherplatz in einer Datei 310 und für eine Neuausgleichung und Wiederherstellung zu steuern. Der Kurator 210 kann eine Load Map 216 von Speicher-Host-Last und Lebendigkeit beibehalten. In einigen Implementierungen weist der Kurator 210 ein Datenblock 320n k durch Erzeugen einer Liste von Anwärterspeicherhosts 110 zu und sendet eine Zuordnungs-Chunk-Anfrage an jeden der Anwärterspeicherhost 110. Wenn der Speicherhost 110 überlastet ist oder kein verfügbarer Speicherplatz vorhanden ist, kann der Speicherhost 110 die Anforderung verweigern. In diesem Fall wählt der Kurator 210 einen anderen Speicherhost 110 aus. Jeder Kurator 210 kann seinen bezeichneten Teil des Dateinamensraums kontinuierlich abtasten, wobei er alle Metadaten 212 ungefähr jede Minute untersucht. Der Kurator 210 kann den Dateiscan verwenden, um die Integrität der Metadaten 212 zu überprüfen, die zu erbringende Arbeit zu bestimmen und / oder Statistiken zu erzeugen. Der Dateiscan kann gleichzeitig mit anderen Operationen des Kurators 210 arbeiten. Der Scan selbst kann die Metadaten 212 nicht modifizieren, sondern plant, durch andere Komponenten des Systems zu arbeiten und berechnet Statistiken. The curator (s) 210 can (can) data blocks 320n allocate k to client requestb 122 for more space in a file 310 and to steer for a rebalancing and recovery. The curator 210 can be a load map 216 of memory host load and liveliness maintained. In some implementations, the curator points 210 a data block 320n k by generating a list of candidate memory hosts 110 and sends an assignment chunk request to each of the candidate memory hosts 110 , If the memory host 110 is overloaded or there is no available space, the memory host can 110 refuse the request. In this case, the curator chooses 210 another storage host 110 out. Every curator 210 can continuously sample its designated part of the file name space, taking all the metadata 212 examined about every minute. The curator 210 can use the file scan to preserve the integrity of the metadata 212 to determine the work to be performed and / or to produce statistics. The file scan can be concurrent with other operations of the curator 210 work. The scan itself can do the metadata 212 does not modify, but plans to work through other components of the system and computes statistics.
Der Dateideskriptor 300 kann den Zustand einer Datei 310 bereitstellen. Eine Datei 310 kann sich in einem der folgenden Zustände befinden: READ, READ_WRITE, DELETED, oder {CREATE, COPY, RESIZE}_PENDING. In dem READ-Zustand können die Clients 120 die Datei 310 lesen, aber nicht in die Datei 310 schreiben. Die Dateien 310 mit einer Nur-Lese-Berechtigung sind nur für die gesamte Lebensdauer der Datei 310 lesbar, d. h., Die Nur-Lese-Dateien 310 werden nie direkt geschrieben. Stattdessen können die schreibgeschützten Dateien 310 aus einem anderen Dateisystem in das Dateisystem kopiert werden. Eine Sicherungsdatei 310 kann verwendet werden, um Daten 312 wiederherzustellen, wenn ein Speicherhost 110 abstürzt. Folglich bleibt die Sicherungsdatei 310 für die gesamte Lebensdauer der Datei 310 bestehen. Im READ_WRITE-Zustand können Clients 120 mit den entsprechenden Berechtigungen den Inhalt einer veränderlichen Datei lesen und schreiben. Veränderliche Dateien 310 unterstützen gleichzeitige, feinkörnige, zufällige Schreibvorgänge. Die zufällige und sequentielle Schreibleistung kann vergleichbar sein. Schreibvorgänge sind stark konsistent, das heißt, wenn irgendein Client 120 die Wirkung eines Schreibens beobachten kann, dann können die al l Clients 120 die Wirkung eines Schreibvorgangs beobachten. Schreibvorgänge können auch in Transaktionen aufeinander erfolgen. Beispielsweise kann ein Client 120 einen Batch asynchroner Schreibvorgänge ausgeben, gefolgt von einer Synchronisationsoperation. Starke Konsistenz und transaktionale Semantik stellen sicher, dass, wenn jeder Client 120 ein Schreiben in einer Transaktion beachten kann, alle Clients 120 alle Schreibvorgänge in einer Transaktion beachten können. Im DELETED-Zustand wurde die Datei 310 gelöscht. Die zu der Datei 310 gehörenden Datenblöcke 320n k werden in einem gelöschten Datenblockfeld gespeichert und warten auf Garbage Collection. Der {CREATE, COPY, RESIZE}_PENDING-Status zeigt an, dass eine Datei 310 eine an der Datei anstehende Erstellungs-, Kopier- oder Größenoperation besitzt. The file descriptor 300 can change the state of a file 310 provide. A File 310 can be in one of the following states: READ, READ_WRITE, DELETED, or {CREATE, COPY, RESIZE} _PENDING. In the READ state, the clients can 120 the file 310 read, but not in the file 310 write. The files 310 with a read-only permission are only for the lifetime of the file 310 readable, ie, the read-only files 310 are never written directly. Instead, the read-only files 310 copied from another file system to the file system. A backup file 310 can be used to data 312 restore if a storage host 110 crashes. As a result, the backup file remains 310 for the life of the file 310 consist. In the READ_WRITE state, clients can 120 with the appropriate permissions read and write the contents of a mutable file. Variable files 310 support concurrent, fine-grained, random writes. The random and sequential write power can be comparable. Write operations are highly consistent, that is, if any client 120 can observe the effect of a letter, then the al l clients 120 observe the effect of a write. Write operations can also occur in transactions on each other. For example, a client 120 output a batch of asynchronous writes, followed by a synchronization operation. Strong consistency and transactional semantics make sure that every client 120 Note a write in a transaction, all clients 120 be aware of all writes in a transaction. The file was in the DELETED state 310 deleted. The to the file 310 belonging data blocks 320n k are stored in a deleted data block field and wait for garbage collection. The {CREATE, COPY, RESIZE} _PENDING status indicates that a file 310 has a create, copy, or size operation pending on the file.
Eine Codierung, die durch einen Datei-Codierungs-Protokollpuffer des Dateideskriptors 300 spezifiziert ist, kann für alle Streifen 320a–n innerhalb einer Datei 310 verwendet werden. In einigen Beispielen enthält die Dateizuordnung die folgenden Felder:
„Datenblöcke", die eine Anzahl von Datenblöcken 320n bereitstellen k pro Streifen 320n; "Streifenlänge", die eine Anzahl von Bytes pro Streifen 320n bereitstellt, und "Teilstreifenlänge", die eine Anzahl von Bytes pro Teilstreifen bereitstellt. Die Teilstreifenlänge kann nur für READ_WRITE-Dateien gültig sein. Die Daten 312 für eine Datei 310 können durch ein Array von Streifenprotokollpuffern 325 in dem Dateideskriptor 300 beschrieben werden. Jeder Streifen 320n stellt einen festen Bereich der Dateidaten 312 dar, der durch einen Index innerhalb des Arrays identifiziert wird. Der Inhalt eines Streifens 320n kann ein Array von Datenblock-Protokollpuffern 327 umfassen, die jeweils einen Block 320n, innerhalb des Streifens 320n k, einschließlich eines Klammerhandles, einer Identität des Speicherhosts 110, der das Stück hält 320n k, beschreiben und einen aktuellen Zustand des Blocks 320n k. Für RDMA-Zwecke können die Block-Protokollpuffer 327 auch eine virtuelle Adresse des Blocks 320n k in dem Speicherhost 110 und einen Clientschlüssel 321 (z. B. ein 32-Bit-Schlüssel) speichern. Der Clientschlüssel 321 ist eindeutig für einen Block 320n k auf einem Speicherhost 110 festgelegt und wird zum RDMA-Lesen dieses Blocks 320n k verwendet. An encoding specified by a file encoding protocol buffer of the file descriptor 300 can be specified for all strips 320a -N within a file 310 be used. In some examples, the file association contains the following fields:
"Data Blocks", which are a number of data blocks 320n deploy k per strip 320n ; "Stripe length," which is a number of bytes per stripe 320n and "substrip length" which provides a number of bytes per substrip. The substrip length can only be valid for READ_WRITE files. The data 312 for a file 310 can through an array of stripe protocol buffers 325 in the file descriptor 300 to be discribed. Every strip 320n sets a fixed range of file data 312 which is identified by an index within the array. The content of a strip 320n can be an array of data block protocol buffers 327 include, each one block 320n , inside the strip 320n k , including a parenthesis handle, an identity of the storage host 110 who holds the piece 320n k , describe and a current state of the block 320n k . For RDMA purposes, the block log buffers 327 also a virtual address of the block 320n k in the storage host 110 and a client key 321 (for example, a 32-bit key). The client key 321 is unique for a block 320n k on a storage host 110 and becomes the RDMA reading of this block 320n k used.
Die Streifen 320n können ferner in Unterstreifen 322n mit zugehörigen Substreifen-Metadaten 324 unterteilt werden. Jeder Substreifen 322n kann ein Array von Unterblöcken 326a–n enthalten, die jeweils entsprechende zugehörige Unterblock-Metadaten 328 aufweisen. The Stripes 320n can also be in substrip 322n with associated substring metadata 324 be divided. Every sub tire 322n can be an array of subblocks 326a -N, each corresponding sub-block metadata 328 exhibit.
Unter Bezugnahme auf FIG. Wie in 4A bis 4C gezeigt, kann die Transaktions-API 400 Transaktionen mit Wertigkeit, Konsistenz, Isolierung, Haltbarkeit (zu einem gewissen Grad) erleichtern, sodass die Durchführung in Bezug auf andere Transaktionen serialisierbar sein kann. ACID (Atomizität, Konsistenz, Isolation, Haltbarkeit) ist eine Reihe von Eigenschaften, die eine zuverlässige Verarbeitung von Datenbanktransaktionen gewährleisten. In einigen Implementierungen umfasst die Transaktions-API 400 eine Leserklasse 410 und eine Transaktionsklasse 420. Ein Client 120 kann einen Leser 410a instanziieren, der die Leserklasse 410 erbt, um ein Lesen oder Stapel von Lesevorgängen auf den Speicherhosts 110 in einer Zelle 200 auszuführen. Darüber hinaus kann der Client 120 eine Transaktion 420a instanziieren, die die Transaktionsklasse 420 erbt, um einen oder mehrere Lesevorgänge und / oder Schreibvorgänge auszuführen. Die Lese- und Schreibvorgänge in einer Transaktion 420a können bei verschiedenen Dateien 310 in einer Zelle 200 erfolgen, aber in einigen Implementierungen müssen alle Lese- und Schreibvorgänge in einer Transaktion den Dateien 310 in derselben Zelle 200 entsprechen. Ausgeführte Lesevorgänge können „Snapshot-Konsistenz "sein, was bedeutet, dass alle Lesevorgänge in einer Transaktion 420a einen Schnappschuss der Datei 310 zu einem logischen Zeitpunkt sehen können. Schreibvorgänge können gepuffert werden, bis der Client 120 versucht, die Transaktion 420a zu bestätigen. With reference to FIG. As in 4A to 4C shown, the transaction API 400 Facilitate transactions with weighting, consistency, isolation, durability (to a degree) so that execution can be serialized with respect to other transactions. ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties that ensures reliable processing of database transactions. In some implementations, the transaction API includes 400 a reader class 410 and a transaction class 420 , A client 120 can be a reader 410a instantiate the reader class 410 inherits to a read or stack of reads on the memory host 110 in a cell 200 perform. In addition, the client can 120 a transaction 420a instantiate the transaction class 420 inherits to perform one or more reads and / or writes. The reads and writes in a transaction 420a can with different files 310 in a cell 200 but in some implementations all read and write operations in a transaction must be done on the files 310 in the same cell 200 correspond. Performed reads can be snapshot consistency, meaning that all reads in a transaction 420a a snapshot of the file 310 at a logical moment. Write operations can be buffered until the client 120 tried the transaction 420a to confirm.
Unter Bezugnahme auf FIG. Wie in 4B dargestellt, kann eine Transaktion 420a als Reaktion auf das Empfangen einer Schreibspeicherzugriffsanfrage 122w für eine Datei 310 die Daten 312 der Datei 310 (z. B. der Blöcke 320n) schreiben oder modifizieren k und / oder der Teilblöcke 326a–n). Nach der Schreiboperation kann die Transaktion 420a eine Prüfsumme 314 der modifizierten Daten 312 berechnen und die Prüfsumme 314 mit den modifizierten Daten 312 (z. B. mit den Blöcken 320n k und / oder der Teilblöcke 326a–n) assoziieren. In einigen Beispielen speichert die Transaktion 420a die Prüfsumme 314 in den Unterblock-Metadaten 328 für das modifizierten Unterblock 326n. Die Transaktion 420a kann eine Hash-Funktion ausführen, beispielsweise eine kryptographische Hashfunktion, um die Prüfsumme 314 zu berechnen. Darüber hinaus kann die Hash-Funktion für die zufällige Anordnung konfiguriert werden. Jede Prüfsumme 314 kann ein Wort mit mindestens 64 Bits sein. Eine Netzwerkschnittstellensteuerung 116, die die Fernverwaltungszugriffsanforderungen 122 auf einem entsprechenden Speicherhost 110 bedient, kann die Prüfsumme 314 von Daten 312 bestimmen, auf die auf ihren Speicherhost 110 zugreifen wird. With reference to FIG. As in 4B can represent a transaction 420a in response to receiving a write memory access request 122w for a file 310 the data 312 the file 310 (eg the blocks 320n ) write or modify k and / or subblocks 326a -n). After the write operation, the transaction can 420a a checksum 314 the modified data 312 calculate and the checksum 314 with the modified data 312 (eg with the blocks 320n k and / or the sub-blocks 326a -N). In some examples, the transaction saves 420a the checksum 314 in the subblock metadata 328 for the modified subblock 326n , The transaction 420a can perform a hash function, such as a cryptographic hash function, around the checksum 314 to calculate. In addition, the hash function can be configured for randomization. Every checksum 314 can be a word with at least 64 bits. A network interface controller 116 who have the remote administration access requirements 122 on an appropriate storage host 110 served, the checksum can 314 of data 312 determine on their memory host 110 will access.
Wenn ein Client 120 eine Dateileseanfrage 122r dem Leser 410a (z. B. über eine Transaktion 420a) hinzufügt, übersetzt der Leser 410a die Leseanfrage 122r in eine RDMA-Lese-Netzwerkoperation und speichert einen Zustand der Netzwerkoperation in dem Speicher für den Leser 410a. Es liest, dass Kreuzstückgrenzen in mehrere RDMA-Operationen übersetzt werden. If a client 120 a file request 122r the reader 410a (eg via a transaction 420a ), the reader translates 410a the read request 122r in an RDMA read network operation and stores a state of the network operation in the memory for the reader 410a , It reads that cross-border boundaries are translated into multiple RDMA operations.
In einigen Implementierungen berechnet der Leser 410a eine Ziel-Stripe-Nummer aus einer Dateiverschiebung der Leseanfrage 122r, um eine Dateileseanfrage 122r in eine RDMA-Lese-Netzwerkoperation zu übersetzen. Der Leser 410a kann die Stripe-Nummer verwenden, um in einen Datenblock-Abwicklungs-Cache zu indizieren. Der Datenblock-Abwicklungs-Cache gibt einen Netzwerkkanal zurück, um auf den entsprechenden Block 320n k und auf eine virtuelle Adresse und eine r-Taste 321 des Blocks 320n k zuzugreifen. Der Leser 410a speichert den Netzwerkkanal und die r-Taste 321 direkt in einem Betriebszustand des gelesenen RDMA. Der Leser 410a verwendet die virtuelle Adresse des Abschnitts 320n k und die Dateiverschiebung, um die virtuelle Adresse innerhalb des Abschnitts 320n k zu berechnen, das gelesen werden soll. Der Leser 410a berechnet den Versatz in einen von dem Client 120 gelieferten Speicherblock (z. B. einen Empfangsspeicherblock für jede RDMA-Leseoperation). Der Leser 410a kann dann einen Operationsstatus initialisieren. In some implementations, the reader calculates 410a a destination stripe number from a file shift of the read request 122r to a file request 122r translate into an RDMA read network operation. The reader 410a can use the stripe number to enter a data block transaction Index cache. The data block handling cache returns a network channel to access the corresponding block 320n k and to a virtual address and a r-key 321 of the block 320n k access. The reader 410a saves the network channel and the r-key 321 directly in an operating state of the read RDMA. The reader 410a uses the virtual address of the section 320n k and the file shift to the virtual address within the section 320n k to be read. The reader 410a calculates the offset into one of the client 120 supplied memory block (eg, a receive memory block for each RDMA read). The reader 410a can then initialize an operation status.
Beim Zwischenspeichern neuer Lesevorgänge kann der Leser 410a eine laufende Summe der Metadaten berechnen und speichern, die abgerufen wird, um das Lesen abzuschließen. Dies ermöglicht, dass der Metadaten-Pufferplatz während der Ausführung in einem zusammenhängenden Block zugewiesen wird, was den Zuweisungs-Overhead minimiert. When caching new reads, the reader may 410a calculate and store a running total of the metadata that is fetched to complete the reading. This allows the metadata buffer space to be allocated during execution in a contiguous block, minimizing the allocation overhead.
In Reaktion auf das Empfangen einer Speicherzugriffsanfrage 122 des Clients 120 kann die Transaktion 420a einen Dateideskriptor 300 von dem Kurator 210 abrufen, der die angeforderten Datenblöcke 320n k einer Datei 310 auf den Speicherhosts 110 für den Direktspeicherzugriff dieser Datenabschnitte 320n k auf den Speicherhosts 110 abbildet. Der Dateideskriptor 300 kann einen Clientschlüssel 321 für jeden Datenblock 320n k der Datei 310 umfassen. Darüber hinaus ermöglicht jeder Clientschlüssel 321 den Zugriff auf den entsprechenden Datenblock 320n k auf seinem Speicherhost 110. In response to receiving a memory access request 122 of the client 120 can the transaction 420a a file descriptor 300 from the curator 210 retrieve the requested data blocks 320n k of a file 310 on the storage hosts 110 for the direct memory access of these data sections 320n k on the storage hosts 110 maps. The file descriptor 300 can be a client key 321 for each data block 320n k of the file 310 include. In addition, each client key allows 321 access to the corresponding data block 320n k on his storage host 110 ,
Unter Bezugnahme auf FIG. Wie in 4C gezeigt, führt der Leser 410a bei einigen Implementierungen eine Leseoperation in zwei Phasen aus. In der ersten Phase liest das Lesegerät 410a die Daten 312 und zugehörige Metadaten 324, 328 einer Datei 310. In der zweiten Phase bestätigt der Leser 410a, dass die in der ersten Phase gelesenen Daten 312 Datenkonsistenzbeschränkungen des Lesers 410a erfüllen. In der ersten Phase identifiziert der Leser 410a eine oder mehrere Speicherplätze, die den Daten 312 entsprechen und sendet seine RDM A Leseoperationen. Während des Durchlaufens und Übertragens von RDMA-Lesevorgängen initialisiert und überträgt der Leser 410a RDMA-Lesevorgänge, um Unterabschnitts-Metadaten 328 zu lesen und Daten 312 zu lesen, die benötigt werden, um Prüfsummen 314 der Unterabschnitte 326a–n, wie z. B. des ersten und letzten Teils der Blöcke 326a, 326n in einem nicht ausgerichteten Dateizugriff zu berechnen. Nachdem die Daten 312 und die Metadaten 328 empfangen worden sind, kann der Leser 410a Sperrwörter in den Unterblock-Metadaten 328 überprüfen, um sicherzustellen, dass die Unterblöcke 326a–n nicht gesperrt wurden, während die Daten 312 gelesen wurden. Wenn ein Unterblock 326a–n gesperrt wurde, liest der Leser 410a den Unterblock 326a–n und seine entsprechenden Metadaten 328 erneut ein. Sobald der Leser 410a alle Unterblocksperren in einem entriegelten Zustand vorfindet (liest), berechnet der Leser 410a die Unterblockprüfsummen 314 und vergleicht die berechneten Prüfsummen 314 mit den Prüfsummen 314, die von den Unterblockmetadaten 328 gelesen wurden. With reference to FIG. As in 4C shown, leads the reader 410a in some implementations, a read operation in two phases. In the first phase, the reader reads 410a the data 312 and related metadata 324 . 328 a file 310 , In the second phase, the reader confirms 410a that the data read in the first phase 312 Data consistency limitations of the reader 410a fulfill. In the first phase, the reader identifies 410a one or more memory locations that correspond to the data 312 correspond and send its RDM A read operations. While traversing and transmitting RDMA reads, the reader initializes and transmits 410a RDMA reads to subsection metadata 328 to read and data 312 to read, which are needed to checksums 314 the subsections 326a -N, such as B. the first and last part of the blocks 326a . 326n to calculate in a non-aligned file access. After the data 312 and the metadata 328 the reader can 410a Block words in the subblock metadata 328 Check to make sure the subblocks 326a -N were not locked while the data 312 were read. If a subblock 326a -N was locked, the reader reads 410a the subblock 326a -N and its corresponding metadata 328 again a. As soon as the reader 410a all subblocks in an unlocked state finds (reads) the reader calculates 410a the subblock checksums 314 and compares the calculated checksums 314 with the checksums 314 that of the subblock metadata 328 were read.
Mit anderen Worten: Zum Erfassen von Lese / Schreibkonflikten kann der Leser 410a als Reaktion auf den Empfang einer Lesespeicherzugriffsanfrage 122r für Daten 312 einer Datei 310, die in den Speicherhosts 110 einer Zelle 200 gespeichert ist, eine erste Prüfsumme 314a von berechnen Die Daten 312, die erste Prüfsumme 314a mit einer zweiten Prüfsumme 314b vergleichen, die den Daten 312 zugeordnet ist (z. B. in den Metadaten 328 des entsprechenden Teilblocks 326n gespeichert), und ermöglichen eine Leseoperation an den Daten 312, wenn diese der ersten und zweiten Prüfsumme 314a, 314b entsprechen. Der Leser 410a kann eine Hash-Funktion wie eine kryptographische Hashfunktion ausführen, um die Prüfsummen 314 zu berechnen. Der Leser 410a kann die Daten 312 und die Metadaten 328, die den Daten 312 zugeordnet sind, nach dem Empfangen der Lese- / Schreibanfrage 122 und vor dem Verarbeiten der Lese- / Schreibanfrage 122 lesen. Darüber hinaus kann der Leser 410a bestimmen, ob die Daten 312 beim Lesen der Daten 312 gesperrt wurden, beispielsweise durch Auswerten eines Sperrwortes und / oder einer Versionsnummer, die in den Metadaten 328 gespeichert ist. Der Leser 410a liest die Daten 312 und zugehörige Metadaten 328, wenn die Daten 312 gesperrt wurden, während sie zuvor die Daten 312 gelesen haben. In other words, the reader can detect read / write conflicts 410a in response to receiving a read memory access request 122r for data 312 a file 310 that are in the memory hosts 110 a cell 200 is stored, a first checksum 314a from calculate the data 312 , the first checksum 314a with a second checksum 314b compare that to the data 312 is assigned (eg in the metadata 328 of the corresponding sub-block 326n stored), and allow a read operation on the data 312 if this is the first and second checksum 314a . 314b correspond. The reader 410a can perform a hash function, such as a cryptographic hash function, around the checksums 314 to calculate. The reader 410a can the data 312 and the metadata 328 that the data 312 after receiving the read / write request 122 and before processing the read / write request 122 read. In addition, the reader can 410a determine if the data 312 while reading the data 312 have been blocked, for example, by evaluating a blocking word and / or a version number in the metadata 328 is stored. The reader 410a reads the data 312 and related metadata 328 if the data 312 were locked while they were previously the data 312 have read.
Während die Prüfsummen 314 gewöhnlich verwendet werden, um einen sich gegen Hardwarefehler oder sogar einen Softwarefehler zu schützen, stellt die Verwendung dieses Systems, um sie gegen den tatsächlichen normalen Betrieb zu schützen, gewisse zusätzliche Anforderungen. Da ein Konflikt kein seltenes Ereignis sein kann, kann die Wahrscheinlichkeit, eine übereinstimmende Prüfsumme zu erhalten, minimiert werden, indem die Prüfsummengröße groß genug ist, um eine relativ kleine Wahrscheinlichkeit einer zufälligen Übereinstimmung bereitzustellen. In einigen Beispielen ist eine 64-Bit-Prüfsumme 314 ausreichend, da das Prüfen einer zufälligen, fehlerhaften Prüfsumme 314 jede Nanosekunde ein falsches Positiv weniger als einmal alle fünf Jahrhunderte erzeugen kann, was wesentlich weniger häufig ist als die Quote anderer Typen von Systemfehlern. Zusätzlich kann eine Hash-Funktion zum Berechnen der Prüfsumme 314 unterschiedliche Zahlen für alle üblichen Modifikationen der Daten 312 erzeugen. Beispielsweise würde ein einfaches Hinzufügen aller Daten 312 nicht ausreichen, da eine Änderung, die einfach einige der Daten 312 neu anordnete, die Prüfsumme 314 nicht ändern würde. Jedoch können kryptographische Hash-Funktionen, die durch Konstruktion keine einfachen Modifikationen der Daten 312 erlauben, um eine vorhersagbare Prüfsumme 314 zu erzeugen, ausreichend sein. While the checksums 314 Usually used to protect against hardware failure or even software failure, the use of this system to protect it against actual normal operation presents certain additional requirements. Since a conflict can not be a rare event, the likelihood of obtaining a matching checksum can be minimized by having the checksum size large enough to provide a relatively small probability of random match. In some examples, a 64-bit checksum 314 sufficient because checking a random, faulty checksum 314 every nanosecond can produce a false positive less than once every five centuries, which is much less common than the rate of other types of system errors. In addition, a hash function can be used to calculate the checksum 314 different Numbers for all common modifications of the data 312 produce. For example, adding all the data would be easy 312 not enough, because a change that simply some of the data 312 rearranged, the checksum 314 would not change. However, cryptographic hash functions that can not be easily modified by constructing the data 312 allow for a predictable checksum 314 to be sufficient.
Eine Unterblockprüfsumme 314 kann einen Vergleich aufgrund einer dieser drei Gründen fehlschlagen: 1) die gelesenen Daten 312 wurden durch ein gleichzeitiges Schreiben beschädigt; 2) die Daten 312 wurden beschädigt, während sie sich auf dem Client befinden; Oder 3) die in dem Speicherhost 110 gespeicherten Daten 312 sind beschädigt. Die Fälle 1 und 2 sind vorübergehende Fehler. Vorübergehende Fehler werden behoben, indem das Lesen des Unterblocks wiederholt wird. Fall 3 ist ein permanenter Fehler, der dazu führen kann, dass der Client 120 den Kurator eines korrupten Unterstreifens 322n benachrichtigt. A subblock checksum 314 can fail a comparison due to one of these three reasons: 1) the read data 312 were damaged by a simultaneous writing; 2) the data 312 were corrupted while they are on the client; Or 3) those in the memory host 110 stored data 312 are damaged. Cases 1 and 2 are temporary errors. Transient errors are resolved by repeating the reading of the sub-block. Case 3 is a permanent error that can cause the client 120 the curator of a corrupt sub-strip 322n notified.
Um zwischen einem vorübergehenden Fehler und einem permanenten Fehler zu unterscheiden, kann der Client 120 die Unterabschnittsdaten 312 und die Unterabschnitts-Metadaten 328 erneut lesen. Der Leser 410a prüft dann ein Unterblock-Sperrwort 316 und berechnet und vergleicht die Unterblock-Prüfsumme 314. Wenn der Prüfsummenfehler noch vorhanden ist und sich eine Unterblock-Versionsnummer 318 geändert hat, da der Unterblock 326n anfänglich gelesen wurde, dann wurde der Prüfsummenvergleichsausfall wahrscheinlich durch einen gleichzeitigen Schreibvorgang verursacht, sodass der Leser 410a das Lesen des Unterblocks wiederholt. Wenn sich die Versionsnummer 318 nicht geändert hat, da das Unterteil 326n anfänglich gelesen wurde, dann ist der Fehler dauerhaft und der Leser 410a benachrichtigt den Kurator 210, wobei der Kurator 210 versucht, die Daten 312 des Blocks 320n zu rekonstruieren k. Wenn der Kurator 210 nicht in der Lage ist, die Blockdaten zu rekonstruieren, ersetzt der Kurator 210 den alten Block 320n k mit einem neuen uninitialisierten Block 320n k. To distinguish between a temporary error and a permanent error, the client can 120 the subsection data 312 and the subsection metadata 328 read again. The reader 410a then checks for a subblock inhibit word 316 and computes and compares the subblock checksum 314 , If the checksum error is still present and there is a subblock version number 318 has changed since the subblock 326n was initially read, then the checksum comparison failure was probably caused by a concurrent write, so the reader 410a the reading of the sub-block is repeated. If the version number 318 has not changed since the lower part 326n initially read, then the mistake is permanent and the reader 410a notifies the curator 210 , where the curator 210 tried the data 312 of the block 320n to reconstruct k . If the curator 210 is unable to reconstruct the block data, the curator replaces 210 the old block 320n k with a new uninitialized block 320n k .
Im Gegensatz zum Sperren ist die Prüfsummenvergleichsmethode zum Erfassen von Lese / Schreib-Konflikten nicht wirklich interessant, wenn ein widersprüchlicher Schreibvorgang existiert, solange die Daten 312 konsistent sind. Wenn zum Beispiel die Daten 312 mit identischen Daten 312 überschrieben werden oder wenn ein Schreibvorgang zum Starten vorbereitet ist, aber noch nicht begonnen hat oder gerade beendet ist, wird das Sperrverfahren den Lesevorgang unnötig ausfallen lassen, während der Prüfsummenvergleich erfolgt, und es dem Lesevorgang ermöglicht zu gelingen. Da die Zeit zwischen Verriegeln und Entriegeln viel größer sein kann als die Dauer eines tatsächlichen Schreibens, kann dies eine signifikante Verbesserung darstellen. Unlike locking, the checksum comparison method for detecting read / write conflicts is not really interesting when a conflicting write exists as long as the data remains 312 are consistent. If, for example, the data 312 with identical data 312 will be overwritten, or if a write is prepared to start but has not yet started or is just finished, the lock process will unnecessarily fail the read while the checksum comparison is done and allow the read to succeed. Since the time between locking and unlocking can be much greater than the duration of an actual write, this can be a significant improvement.
Der Leser 410a weiß nicht, welche Version 318 der Daten 312 gelesen hat, wobei dies nicht unbedingt eine Rolle spielen muss. Wenn es vorteilhaft ist, dass die Lesetransaktion eine Versionsnummer 318 erhält, kann dies ohne eine zusätzliche Rundlauflatenzstrafe erfolgen, wenn die Versionsnummer 318 selbst durch die Prüfsumme 314 abgedeckt wird. Obwohl das Berechnen der Prüfsummen 314 eine nicht-triviale Strafe in der Prozessorzeit verursachen kann, kann sowohl für den Leser 410a als auch für das Schreibgerät 420a eine Prüfsumme 314 erforderlich sein, um je nach Implementierung gegen Hardwarefehler zu schützen. The reader 410a do not know which version 318 the data 312 this does not necessarily have to matter. If it is beneficial that the read transaction has a version number 318 This can be done without an extra round latency if the version number 318 even by the checksum 314 is covered. Although calculating the checksums 314 A non-trivial penalty in processor time can cause both for the reader 410a as well as for the writing instrument 420a a checksum 314 may be required to protect against hardware failure, depending on the implementation.
Unterblocksperren können aufgrund eines Client 120, der versucht eine Transaktion 420a auszuführen, steckenbleiben, während eines Übergabeprotokolle der Transaktion 420a abstürzen. Ein Leser 410a kann eine feststeckende Verriegelung durch erneutes Lesen des Unterblock-Sperrworts 316 und der Versionsnummer 318 erfassen. Wenn sich ein Unterblock-Sperrwort 316 und die Versionsnummer 318 während einer Zeitüberschreitungsperiode nicht ändern, dann ist Unterblocksperre wahrscheinlich steckengeblieben. Wenn das Lesegerät 410a eine feststeckende Verriegelung detektiert, benachrichtigt es den Kurator 210 des festgeklemmten Schlosses, und der Kurator 210 gewinnt den Unterstreifen 322n zurück und setzt die festgeklemmte Verriegelung zurück. Subblock locks can be due to a client 120 who is trying a transaction 420a to stall, during a transfer logs of the transaction 420a crash. A reader 410a can get a stuck lock by rereading the subblock lockword 316 and the version number 318 to capture. When there is a subblock lockword 316 and the version number 318 do not change during a timeout period, then subblock would probably get stuck. If the reader 410a detects a stuck lock, it notifies the curator 210 of the clamped castle, and the curator 210 wins the substripe 322n back and reset the clamped lock.
Auch unter Bezugnahme auf FIG. Wie in den 4A und 4D gezeigt, kann in einigen Implementierungen der Leser 410a, nachdem dieser jedes Unterblock-Sperrwort 316 und / oder die Prüfsumme 314 validiert hat, zu der zweiten Phase des Ausführens der Leseoperation (d.h. der Validierungsphase) fortfahren. Um die Werte zu validieren, liest der Leser 410a Unterblock-Metadaten 328 und überprüft erneut, ob die Unterblock-Sperrwörter 316 entriegelt sind und die Unterblock-Versionsnummern 318 haben sich nicht geändert, da die Versionsnummern 318 zu Beginn in der ersten Phase der Leseoperation gelesen wurden. Mit anderen Worten: Das Lesegerät 410a kann eine anfängliche Versionsnummer 318a und einen anfänglichen Verriegelungswert 316a lesen, der jedem Datenabschnitt 320% eines Lesesatzes 402 der Transaktion 420a zugeordnet ist. Nach dem Lesen der Daten 312 liest der Leser 410a eine endgültige Versionsnummer 318b und einen endgültigen Verriegelungswert 316b, der jedem Datenabschnitt 320n k des Lesesatzes 402 zugeordnet und bestimmt die Lesedaten 312 als gültig, wenn die anfängliche Versionsnummer 318a mit der finalen Versionsnummer 318b übereinstimmt und der anfängliche Sperrwert 316a mit dem endgültigen Sperrwert 316b übereinstimmt. Also with reference to FIG. As in the 4A and 4D In some implementations, the reader may be shown 410a after this every subblock disable word 316 and / or the checksum 314 continue to the second phase of performing the read operation (ie the validation phase). To validate the values, the reader reads 410a Subblock metadata 328 and again check if the subblocks are blocking words 316 are unlocked and the subblock version numbers 318 have not changed since the version numbers 318 initially read in the first phase of the read operation. In other words: the reader 410a can be an initial version number 318a and an initial lock value 316a read each data section 320% of a reading sentence 402 the transaction 420a assigned. After reading the data 312 the reader reads 410a a final version number 318b and a final lock value 316b , the every data section 320n k of the read set 402 assigned and determines the read data 312 as valid if the initial version number 318a with the final version number 318b matches and the initial lock value 316a with the final lock value 316b matches.
Wenn der Leser 410a mit einer Transaktion 420a assoziiert ist, kann der Leser 410a die Metadaten 328, die mit allen Teilbausteinen 326n verknüpft sind und die durch die Transaktion 420a gelesen wurden, erneut einlesen. Wenn eine einzelne Unterblock-Versionsnummer 318 falsch vergleicht wird, gibt der Leser 410a einen Fehler zurück. Wenn alle Unterblock-Versionsnummern 318 identisch sind, verwirft der Leser 410a das Präfix und das Suffix des Leserspeicherblocks, um fremde Daten 312 zu trimmen, die gelesen werden, um die Prüfsumme 314 des ersten und letzten Unterblocks 326a, 326n im Lesevorgang zu berechnen. Der Leser 410a kann einen Status auf GK setzen und zu dem Client 120 zurückkehren. If the reader 410a with a transaction 420a Associated with, the reader can 410a the metadata 328 , with all sub-components 326n are linked and by the transaction 420a read again. If a single subblock version number 318 is wrongly compared, the reader admits 410a an error back. If all subblock version numbers 318 identical, the reader rejects 410a the prefix and the suffix of the reader memory block to foreign data 312 to be trimmed, which will be read to the checksum 314 of the first and last subblock 326a . 326n to be calculated in the reading process. The reader 410a can put a status on GK and to the client 120 to return.
Wenn der Leser 410a auf einen Fehler eines Netzwerkkanals trifft, während er Daten 312 oder Metadaten 212 eines Abschnitts 320n k liest, kann der Leser 410a ein anderen Block 320n k aus dem Chunk-Handle-Cache auswählen und informiert den Kurator 210 über einen schlechten Speicherhost. Wenn keine anderen guten Blöcke 320n k existieren, von dem der Leser 410a aus operieren kann, kann dieser darauf warten, eine Antwort auf die Fehlerbenachrichtigung zu empfangen, die er an den Kurator 210 gesendet hat. Die Antwort von dem Kurator 210 kann einen aktualisierten Dateideskriptor 300 enthalten, der einen neuen, guten Block enthält 320n k, von dem dieser lesen kann If the reader 410a encounters a network channel failure while listening to data 312 or metadata 212 a section 320n k reads, the reader can 410a another block 320n Select k from the chunk handle cache and inform the curator 210 about a bad memory host. If no other good blocks 320n k exist, of which the reader 410a out of service, he can wait to receive a response to the error notification that he sent to the curator 210 sent. The answer from the curator 210 can get an updated file descriptor 300 contain a new, good block 320n k , of which this can read
In einigen Implementierungen verwendet die Transaktionsklasse 420 die Validierungssätze 422, um zu verfolgen, welche Unterstreifen 322n durch die Transaktion 420a gelesen worden sind. Jedes Lesen einer Transaktion 420a addiert die Versionsnummern 318 aller Unterstreifen 322n, die zu einem Validierungssatz 422 der Transaktion 420a gelesen wurden. Die Transaktion 420a kann den Validierungssatz 422 in zwei Fällen validieren: 1) als Teil des Übergabeprotokolls und 2) die Validierungsphase von Lesevorgängen einer Transaktion 420a. Eine Transaktion 420a kann fehlschlagen, wenn das Übergabeprotokoll feststellt, dass sich jede Sub-Stripe-Versionsnummer 318 von der in dem Validierungssatz 422 aufgezeichneten Zahl unterscheidet. Die Validierung des vollständigen Validierungssatzes 422, bevor Daten 312 an den Client 120 zurückgegeben werden, ermöglicht eine frühzeitige Erkennung (z. B. vor der Festschreibungsphase) einer verfallenen Transaktion 420a. Diese Validierung verhindert auch, dass der Client 120 eine inkonsistente Ansicht der Dateidaten 312 erhält. In some implementations, the transaction class uses 420 the validation rates 422 to keep track of which sub-stripes 322n through the transaction 420a have been read. Every reading of a transaction 420a adds the version numbers 318 all sub stripes 322n that become a validation set 422 the transaction 420a were read. The transaction 420a can use the validation set 422 validate in two cases: 1) as part of the handover protocol and 2) the validation phase of read transactions 420a , A transaction 420a may fail if the submission protocol detects any sub-stripe version number 318 from the one in the validation set 422 recorded number differs. The validation of the complete validation set 422 before data 312 to the client 120 returns, allows for early detection (eg, prior to the commit phase) of a expired transaction 420a , This validation also prevents the client 120 an inconsistent view of the file data 312 receives.
Eine Transaktion 420a kann eine synchrone, serialisierbare Leseoperation (z. B. unter Verwendung eines Lesers) bereitstellen. In einigen Beispielen wird ein Leser 410a instanziiert und der Transaktion 420a zugeordnet. Lesen der Ergebnisse des Lesegeräts 410a geben die letzten verpflichteten Daten 312 zurück. Als solche werden ungebundene Schreibvorgänge der gleichen Transaktion 420a durch Lesen dieser Transaktion 420a nicht eingesehen. A transaction 420a may provide a synchronous, serializable read operation (eg, using a reader). In some examples, a reader becomes 410a instanced and the transaction 420a assigned. Reading the results of the reader 410a give the last committed data 312 back. As such, unbound writes are the same transaction 420a by reading this transaction 420a not seen.
Eine Transaktion 420a kann Daten 312 für eine spätere Transaktionsverpflichtung puffern. Die Transaktionsklasse 420 übersetzt eine Puffer-Schreibanforderung in einen oder mehrere Vorbereitungsschreibnetzwerkoperationen. Eine Netzwerkoperation wird für jeden Streifen 320n benötigt, der durch die Schreiboperation berührt wird. Das Verarbeiten einer Puffer-Schreibanforderung kann das Vorbereiten von Netzwerkoperationen mit „Substreifensperrung” beinhalten. Eine Sperroperation wird für jeden Substreifen 322n benötigt, der durch den angeforderten Schreibvorgang berührt wird. Diese Vorgänge werden für die Übertragung während der Transaktionsfestlegung zwischengespeichert. Die Transaktion 420a kann Pufferspeicheranfragen in Netzwerkoperationen übersetzen und Identifizierungs- oder Koaleszenschreibvorgänge ausführen, die denselben Bereich einer Datei 310 betreffen. Die Transaktion 420a kann Schreiboperationen in derselben Reihenfolge durch die Speicherhosts 110 für alle Chunks anwenden 320n k], um sicherzustellen, dass alle Repliken konsistent sind. A transaction 420a can data 312 buffer for a later transaction commitment. The transaction class 420 translates a buffer write request into one or more prepare-write network operations. A network operation will be for each strip 320n needed, which is touched by the write operation. Processing a buffer write request may involve preparing network operations with "substance locking". A locking operation is made for each sub tire 322n needed, which is touched by the requested write. These operations are cached for transmission during transaction determination. The transaction 420a can translate cache requests into network operations and perform identification or coalescing operations that cover the same area of a file 310 affect. The transaction 420a can write operations in the same order by the storage hosts 110 apply to all chunks 320n k ] to ensure that all replicas are consistent.
Die Transaktion 420a kann eine Festschreiboperation bereitstellen, die dazu führt, dass alle Lese- und Schreibvorgänge in der Transaktion 420a als eine einzige atomare, serialisierbare Operation planbar sind. In einigen Implementierungen setzt das Transaktionsübergabeprotokoll über eine Verriegelungsphase, eine Validierungsphase, eine Schreibphase und eine Entsperrungsphase fort. Während der Sperrphase werden die Sub-Stripe-Lock-Netzwerkoperationen gesendet, die als Antwort auf Puffer-Schreibanfragen erzeugt wurden. Jede Substripe-Sperroperation führt eine atomare Vergleichs- und Auslagerungsoperation für das Sperrwort in allen Repliken 320n k aus. Wenn der Inhalt des Sperrwortes mit den spezifizierten Vergleichsdaten 312 übereinstimmt (z.B. eine Client-Kennung), wird das Sperrwort mit den spezifizierten Swapdaten 312 geschrieben und die vorherigen Inhalte des Wortes werden zurückgegeben. Wenn es dem Client 120 gelingt, seine eindeutige Client-ID in das Metadaten-Sperrwort zu schreiben, hat er die Sperre erfolgreich übernommen. Wenn es die Transaktion 420a versäumt, die Sperre für einen beliebigen Unterstreifen 322n in dem Schreibsatz zu nehmen, schlägt die Festlegung fehl und wird abgebrochen. Das Übergabeprotokoll fährt mit der Validierungsphase fort, sobald alle Sub-Stripe-Sperren gehalten werden. The transaction 420a can provide a commit operation that causes all read and write operations in the transaction 420a as a single atomic, serializable operation are plannable. In some implementations, the transaction handover protocol continues through a lock phase, a validation phase, a write phase, and an unlock phase. During the lock phase, the sub-stripe-lock network operations that were generated in response to buffer write requests are sent. Each substrip-lock operation performs an atomic compare and remove operation on the lockword in all replicas 320n k off. If the contents of the inhibit word match the specified comparison data 312 matches (eg, a client identifier), becomes the lockword with the specified swap data 312 written and the previous contents of the word are returned. If it is the client 120 If he succeeds in writing his unique client ID in the metadata lockword, he has successfully applied the lock. If it is the transaction 420a missed the lock for any substripe 322n in the writing set too the determination fails and is aborted. The commit protocol continues the validation phase as soon as all sub-stripe locks are held.
Während der Validierungsphase kann die Transaktion 420a die Versionsnummer 318 aus den Metadaten 324 für alle Sub-Streifen 322n, auf die in dem Validierungssatz verwiesen und die Versionsnummern 318 mit den Versionsnummern 318 verglichen wird, die in dem Validierungssatz aufgezeichnet sind, lesen. Wenn eine Versionsnummer 318 nicht übereinstimmt, wurde der Unterstreifen 322n durch eine andere Transaktion 420a geschrieben, nachdem er von dieser Transaktion 420a gelesen wurde, sodass die Transaktion 420a fehlschlägt. In diesem Fall gibt der Leser 410a die von ihm gehaltenen Sperren frei und gibt einen Transaktionskonfliktfehler an den Client 120 zurück. Sobald alle Versionsnummern 318 in dem Validierungssatz validiert worden sind, schreibt der Client 120 die gepufferten Schreibdaten 312 der Transaktion 420a an jede Replikation 320n k und aktualisiert die Metadaten 324, die jedem durch die Transaktion 420a geschriebenen Unterstreifen 322n während der Schreibphase zugeordnet sind. Das Aktualisieren der Metadaten 324 eines Teilstreifens 322n kann das Berechnen und Schreiben eines neuen Prüfworts 314, 316 und das Erhöhen der Versionsnummer 318 des Teilstreifens 322n einschließen. Sobald alle Daten 312 und Metadaten 324, 328 aktualisiert worden sind, gibt die Transaktion 420a die Sperren frei, die sie während der Entsperrungsphase hält. During the validation phase, the transaction 420a the version number 318 from the metadata 324 for all sub-strips 322n , which referenced in the validation set and the version numbers 318 with the version numbers 318 read, recorded in the validation set. If a version number 318 did not match, became the substripe 322n through another transaction 420a written after being transacted by this transaction 420a was read, so the transaction 420a fails. In this case, the reader gives 410a releases the locks it holds and issues a transaction mismatch error to the client 120 back. Once all version numbers 318 validated in the validation set, the client writes 120 the buffered write data 312 the transaction 420a to every replication 320n k and updates the metadata 324 that everyone through the transaction 420a written substripe 322n are assigned during the writing phase. Updating the metadata 324 a partial strip 322n can calculate and write a new test word 314 . 316 and increasing the version number 318 of the sub-strip 322n lock in. Once all the data 312 and metadata 324 . 328 have been updated, gives the transaction 420a free the locks she keeps during the unlock phase.
Für Datenblöcke 320n k eines Lesesatzes 402 der Transaktion 420a, kann ein Verfahren, das eine Transaktion 420a ausführt das Lesen von Daten 312 der Datenblöcke 320n k des Lesesatzes 402 durch den entfernten Direktspeicherzugriff und das Bestimmen einer Gültigkeit der Lesedaten 312 durch Auswerten einer Verriegelung 316 und einer Version 318 jedes Datenbündels 320n k des Lesesatzes 402, umfassen. Für Datenblöcke 320n k eines Schreibsatzes 404 der Transaktion 420a kann das Verfahren das Einstellen von Sperren 316 auf den Datenblöcken 320n k des Schreibsatzes 404 beinhalten, was zum Schreiben von Daten 312 auf die verriegelten Datenblöcke 320n k durch einen entfernten Direktspeicherzugriff, Freigeben der Verriegelungen 316 der verriegelten Datenabschnitte 320n k und Erhöhen einer Versionsnummer 318 jedes freigegebenen Datenabschnitts 320n k führt. For data blocks 320n k of a reading sentence 402 the transaction 420a , may be a procedure that involves a transaction 420a performs reading data 312 the data blocks 320n k of the reading sentence 402 by the remote direct memory access and determining a validity of the read data 312 by evaluating a lock 316 and a version 318 each data bundle 320n k of the reading sentence 402 , include. For data blocks 320n k of a writing set 404 the transaction 420a The procedure may be setting locks 316 on the data blocks 320n k of the writing set 404 involve what to write data 312 on the locked data blocks 320n k by a remote direct memory access, releasing the latches 316 the locked data sections 320n k and increasing a version number 318 each shared data section 320n k leads.
Der Dateitransaktionszugriff kann einen exklusiven Lese- / Schreibzugriff auf den Zustand eines Dateideskriptors 300 bereitstellen. Aktualisierungen in dem Dateizustand können am Ende einer Transaktion 420a angewendet werden und sind atomar. Der Dateitransaktionszugriff kann für Vorgänge wie das Erstellen, Finalisieren und Löschen einer Datei 310 verwendet werden. Diese Operationen können erfordern, dass der Kurator 210 mit anderen Komponenten, wie z. B. den Speicherhosts 110, kommuniziert und somit ein Dateitransaktionszugriff mehrere Sekunden oder länger dauern kann. Solange dies aktiv ist, blockiert der Dateitransaktionszugriff alle anderen Operationen, die den Zustand des Dateideskriptors 300 ändern müssen. Der Lesezugriff kann nicht blockiert sein. The file transaction access may have an exclusive read / write access to the state of a file descriptor 300 provide. Updates to the file state may occur at the end of a transaction 420a are applied and are atomic. File transaction access can be used for operations such as creating, finalizing, and deleting a file 310 be used. These operations may require the curator 210 with other components, such as. For example, the storage hosts 110 , communicates, and thus a file transaction access can take several seconds or more. As long as this is active, file transaction access blocks all other operations that affect the state of the file descriptor 300 need to change. Read access can not be blocked.
Um Auseinandersetzungen zu reduzieren, kann der Stripe Transaktionszugriff eine relativ feinere Kernsynchronisation für Operationen bereitstellen, die nur den Zustand eines einzelnen Streifens 320n mit dem Dateideskriptor 300 modifizieren müssen. Dieser Modus kann für Streifenoperationen wie Öffnen, Schließen, Rebalancing und Wiederherstellen verwendet werden. Es können viele gleichzeitige Stripe-Transaktionen für verschiedene Streifen 320n innerhalb einer Datei 310 vorliegen, aber Stripe-Transaktionen und Dateitransaktionen schließen sich gegenseitig aus. Innerhalb einer Stripe-Transaktion kann der Kurator 210 den Zustand eines Streifens 320n und verschiedene Felder des Dateideskriptors 300 untersuchen, die für die Dauer der Transaktion 420a unveränderlich bleiben, wie beispielsweise die Dateicodierung und die Instanzbezeichnung. Der Stripe-Transaktionszugriff gewährt keinen Zugriff auf Felder, die sich unten ändern können, wie beispielsweise den Zustand anderer Streifen 320n. Vorgänge können jeweils nur eine aktive Transaktion 420a halten, um ein Deadlock zu vermeiden. Darüber hinaus können die Transaktionen 420a nur atomar auf einer einzigen Datei 310 ausgeübt werden. To reduce clashes, stripe transaction access can provide a relatively finer kernel synchronization for operations that only affect the state of a single stripe 320n with the file descriptor 300 need to modify. This mode can be used for strip operations such as opening, closing, rebalancing, and restoring. There can be many concurrent stripe transactions for different stripes 320n within a file 310 but stripe transactions and file transactions are mutually exclusive. Within a stripe transaction, the curator may 210 the condition of a strip 320n and various fields of the file descriptor 300 investigate that for the duration of the transaction 420a remain immutable, such as the file encoding and the instance name. Stripe transaction access does not grant access to fields that can change below, such as the state of other stripes 320n , Operations can only ever have one active transaction 420a hold to avoid a deadlock. In addition, the transactions can 420a only atomically on a single file 310 be exercised.
5 zeigt eine beispielhafte Anordnung 500 von Operationen für ein Verfahren zur Isolierung in einem verteilten Speichersystem 100. Das Verfahren beinhaltet das Empfangen 502 in den nicht-transitorischen Speicher 114, eine Datenübertragungsrate 313 eines jeden Clients 120 in Kommunikation mit dem Speicher 114 über einen entfernten Direktspeicherzugriff und ein Lesen 504 jeder empfangenen Client-Datenübertragungsrate 313. Das Verfahren beinhaltet auch das Bestimmen 506 einer Drosseldatentransferrate 317 für jeden Client 120 und das Schreiben 508 jeder Drosseldatentransferrate 317 in den nicht-transitorischen Speicher 114, auf den die Clients 120 über einen entfernten direkten Speicherzugriff Zugang haben. 5 shows an exemplary arrangement 500 operations for a method of isolation in a distributed storage system 100 , The method involves receiving 502 in the non-transitory memory 114 , a data transfer rate 313 of each client 120 in communication with the store 114 via a remote direct memory access and a read 504 each received client data transfer rate 313 , The method also includes determining 506 a throttle data transfer rate 317 for each client 120 and the writing 508 each throttle data transfer rate 317 in the non-transitory memory 114 on which the clients 120 have access via a remote direct memory access.
In einigen Implementierungen umfasst das Verfahren nach dem Aufbau einer Kommunikationsverbindung 250 mit einem Client 120 eine Instanziierung eines ersten Speicherbereichs 114n in dem nicht-transitorischen Speicher 114 zum Empfangen der Datenübertragungsrate 313 für diesen Client 120 und einen zweiten Speicherbereich 114m im nicht-transitorischen Speicher 114 zum Schreiben der Drosselungsrate 317 für diesen Client 120. Das Verfahren kann auch das periodische Lesen des ersten Speicherbereichs 114n für jeden Client 120 beinhalten, bevor die Drosselungsrate 317 für jeden Client 120 bestimmt wird. Das Verfahren kann das Registrieren eines Satzes von entfernten direkten Speicherzugriffsbereichen 114a–n des Speichers 114 mit einem Netzwerkschnittstellen-Controller 116 und die Einrichtung einer entfernten direkten Speicherzugriffs-fähigen Verbindung 250 mit dem Client 120 als Antwort auf das Empfangen einer Verbindungsanforderung 254 von dem Client 120 beinhalten. Wenn ein Client 120 nicht in der Lage ist seine entsprechende Drosseldatenübertragungsrate 317 über einen Zeitraum einzuhalten, kann das Verfahren die einseitige Unterbrechung der Verbindung 250 mit dem Client 120 umfassen. In some implementations, the method includes establishing a communication connection 250 with a client 120 an instantiation of a first memory area 114n in the non-transitory memory 114 for receiving the data transmission rate 313 for this client 120 and a second storage area 114m in non-transitory memory 114 for writing the throttling rate 317 for this client 120 , The method may also include periodically reading the first memory area 114n for each client 120 involve before the throttling rate 317 for each client 120 is determined. The method may include registering a set of remote direct memory access areas 114a -N of the memory 114 with a network interface controller 116 and the establishment of a remote direct memory-enabled connection 250 with the client 120 in response to receiving a connection request 254 from the client 120 include. If a client 120 is not capable of its corresponding throttle data transmission rate 317 Over a period of time, the procedure can interrupt the unilateral connection 250 with the client 120 include.
Das Verfahren kann das Empfangen der Client-Datenübertragungsrate 313 eines Client 120 in dem Speicher 114 nach jeder Übertragung einer Schwellenwertmenge von Daten zwischen dem Client 120 und dem Speicher 114 einschließen. Darüber hinaus kann das Verfahren das Ermitteln der Drosseldatentransferrate 317 jedes Clients 120 nach dem Empfang einer Client-Datenübertragungsrate 313 von einem beliebigen Client 120 umfassen. The method may include receiving the client data transfer rate 313 a client 120 in the store 114 after each transmission of a threshold amount of data between the client 120 and the memory 114 lock in. In addition, the method may include determining the throttle data transfer rate 317 every client 120 after receiving a client data transfer rate 313 from any client 120 include.
In einigen Implementierungen beinhaltet das Verfahren das Empfangen einer Isolationskonfiguration 204, die eine Bandbreitenkapazität 206 für den Speicherhost 110 und eine Liste 208 von Bandbreitenreservierungen 208a–n für Clients 120 bereitstellt und die Drosseldatenübertragungsraten 317 von Clients 120, basierend auf der Konfiguration 204, bereitstellt. Jede Bandbreitenreservierung 208a–n reserviert eine Schwellendatenübertragungsrate für einen Client 120. Die Bandbreitenkapazität 206 des Speicherhosts 110 kann eine reservierte Bandbreite 152 zum Bedienen von Speicherzugriffsanfragen 122, die den Bandbreitenreservierungen 208a–n und der Flexbandbreite 154 zugeordnet sind, zum Bedienen von Speicherzugriffsanforderungen 122, die mit keiner Bandbreitenreservierung 208a–n assoziiert sind, umfassen. In some implementations, the method includes receiving an isolation configuration 204 that have a bandwidth capacity 206 for the storage host 110 and a list 208 of bandwidth reservations 208a -N for clients 120 and the throttle data transfer rates 317 from clients 120 based on the configuration 204 , provides. Each bandwidth reservation 208a -N reserves a threshold data transfer rate for a client 120 , The bandwidth capacity 206 the storage host 110 can have a reserved bandwidth 152 to service memory access requests 122 that the bandwidth reservations 208a -N and the flex bandwidth 154 associated with serving memory access requests 122 that with no bandwidth reservation 208a -N are involved.
Der Schritt des Bestimmens der Drosseldatentransferrate 317 eines Clients 120 kann für alle zugehörigen Bandbreitenreservierungen 208a–n des Clients 120 die reservierte Bandbreite 152 gleich einer gleichmäßigen Verteilung dieser Bandbreitenreservierungen 208a–n über den Speicher unter den Hosts 110 und Zuweisen eines gleich geteilten Anteils der flexiblen Bandbreite 154 in Bezug auf alle Clients 120, in Verbindung mit dem Speicher-Host 110, enthalten. Der Schritt kann auch das Bestimmen der Drosseldatentransferrate 317 eines Client 120 umfassen, die nicht verwendete Bandbreite 150, die mit einer oder mehreren Bandbreitenreservierungen 208a–n eines Clients 120 assoziiert ist, an andere Clients 120 umzuverteilen. The step of determining the throttle data transfer rate 317 a client 120 can be used for all associated bandwidth reservations 208a -N of the client 120 the reserved bandwidth 152 equal to a uniform distribution of these bandwidth reservations 208a -N over the memory under the hosts 110 and assigning an equal share of the flexible bandwidth 154 in relation to all clients 120 , in connection with the memory host 110 , contain. The step may also include determining the throttle data transfer rate 317 a client 120 include the unused bandwidth 150 that with one or more bandwidth reservations 208a -N of a client 120 is associated with other clients 120 redistribute.
In einigen Implementierungen umfasst das Verfahren das Zuordnen einer Isolationsklasse 160, die eine oder mehrere zugeordnete Speicherzugriffsanforderungen 122 mit einem Client 120 aufweist und zum Bestimmen einer zugeordneten Bandbreite 155 für jedes auf dem Client 120 basierende Öl die Bandbreitenkapazität 206 des Speicherhosts 110, zugeteilt Bandbreite 150 für jede Isolationsklasse 160 jedes Clients 120 basierend auf den zugeordneten Bandbreiten 155 für jeden Client 120 eine Bandbreite 150 für jede Speicherzugriffsanforderung 122, die jeder Isolationsklasse 160 zugeordnet ist, basierend auf der Bandbreite 150 der entsprechenden Isolationsklasse 160, Und die Drosselübertragungsrate 317 für jeden Client 120 basierend auf mindestens einer der zugeordneten Bandbreite 155 des Clients 120, der zugeteilten Bandbreite 150 für jede Isolationsklasse 160 oder der Bandbreite 150 für jede Speicherzugriffsanforderung 122. In some implementations, the method includes mapping an isolation class 160 containing one or more allocated memory access requests 122 with a client 120 and determining an associated bandwidth 155 for each on the client 120 based oil the bandwidth capacity 206 the storage host 110 , allocated bandwidth 150 for every insulation class 160 every client 120 based on the allocated bandwidths 155 for each client 120 a bandwidth 150 for each memory access request 122 , each of the insulation class 160 is assigned based on the bandwidth 150 the corresponding insulation class 160 , And the throttle transmission rate 317 for each client 120 based on at least one of the allocated bandwidth 155 of the client 120 , the allocated bandwidth 150 for every insulation class 160 or the bandwidth 150 for each memory access request 122 ,
Verschiedene Implementierungen der hier beschriebenen Systeme und Techniken können in digitalen elektronischen Schaltung, integrierten Schaltungen, speziell entworfenen ASICs (anwendungsspezifische integrierte Schaltungen), Computerhardware, Firmware, Software und / oder Kombinationen davon realisiert werden. Diese verschiedenen Durchführungen können die Implementierung in einem umfassen oder mehrere Computerprogramme, die auf einem programmierbaren System ausführbar und / oder interpretierbar sind, mit mindestens einem programmierbaren Prozessor, der speziell oder allgemein verwendbar ist, um Daten und Anweisungen von einem Speichersystem zu empfangen und Daten und Befehle an ein Speichersystem, mindestens ein Eingabegerät und mindestens ein Ausgabegerät zu übertragen. Various implementations of the systems and techniques described herein may be implemented in digital electronic circuitry, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and / or combinations thereof. These various implementations may include implementation in one or more computer programs executable and / or interpretable on a programmable system having at least one programmable processor that is dedicated or generally usable to receive data and instructions from a memory system and data and Commands to a storage system to transfer at least one input device and at least one output device.
Diese Computerprogramme (auch bekannt als Programme, Software, Softwareanwendungen oder Code) beinhalten Maschinenanweisungen für einen programmierbaren Prozessor und können in einer höheren prozeduralen und/oder objektorientierter Programmiersprache und/oder in Assembler-/Maschinensprache implementiert werden. Wie hier verwendet, bezeichnen die Begriffe „maschinenlesbares Medium“, „computerlesbares Medium“ ein beliebiges Computerprogrammprodukt, eine beliebige Vorrichtung und/oder ein beliebiges Gerät (z. B. Magnetplatten, optische Platten, Speicher, programmierbare Logikbausteine (PLDs)), die verwendet werden, um einem programmierbaren Prozessor Maschinenanweisungen und/oder Daten bereitzustellen, einschließlich eines maschinenlesbaren Mediums, das Maschinenanweisungen als ein maschinenlesbares Signal empfängt. Der Begriff „maschinenlesbares Signal“ bezeichnet ein beliebiges Signal, das verwendet wird, um einem programmierbaren Prozessor Maschinenanweisungen und/oder Daten bereitzustellen. These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor and may be implemented in a higher level of procedural and / or object-oriented programming language and / or assembler / machine language. As used herein, the terms "machine-readable medium", "computer-readable medium" refer to any computer program product, device, and / or device (eg, magnetic disks, optical disks, memory, programmable logic devices (PLDs)) that uses In order to provide machine instructions and / or data to a programmable processor, including a machine-readable medium, the machine instructions are considered to be a machine-readable signal is received. The term "machine-readable signal" refers to any signal used to provide machine instructions and / or data to a programmable processor.
Ausführungsformen des Gegenstands und die in dieser Spezifikation beschriebenen Tätigkeiten können in digitalen elektronischen Schaltungen oder in Computer-Software, Firmware oder Hardware implementiert werden, einschließlich der in dieser Spezifikation offengelegten Strukturen und ihrer strukturellen Entsprechungen oder in Kombinationen von einer oder mehrerer von ihnen. Darüber hinaus kann der in dieser Spezifikation beschriebene Gegenstand als ein oder mehrere Computerprogrammprodukte implementiert werden, d. h. als ein oder mehrere Module von Computerprogrammanweisungen, die auf einem computerlesbaren Medium zur Ausführung kodiert sind, durch oder zur Kontrolle von datenverarbeitenden Apparaten. Das maschinenlesbare Speichermedium kann eine maschinenlesbare Speichervorrichtung, ein maschinenlesbares Speichersubstrat, eine Speichervorrichtung, eine Stoffzusammensetzung, die ein maschinenlesbares verbreitetes Signal bewirkt, oder eine Kombination aus einem oder mehreren davon sein. Der Begriff „datenverarbeitender Apparat“ umfasst jegliche Apparate, Vorrichtungen oder Maschinen zur Verarbeitung von Daten, einschließlich beispielsweise eines programmierbaren Prozessors, eines Computers bzw. mehrerer Prozessoren oder Computer. Der Apparat kann neben der Hardware auch einen Code einschließen, der eine Ausführungsumgebung für das betreffende Computerprogramm erstellt, z. B. einen Code, der Prozessor-Firmware, einen Protokollstapel, ein Datenbank-Managementsystem, ein Betriebssystem oder eine Kombination einer oder mehrerer der genannten darstellt. Ein propagiertes Signal ist ein künstlich erzeugtes Signal, z. B. ein maschinell erzeugtes elektrisches, optisches oder elektromagnetisches Signal, das für das Verschlüsseln von Information für die Übertragung auf einen geeigneten Empfängerapparat erzeugt wird. Embodiments of the subject matter and the activities described in this specification may be implemented in digital electronic circuits or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Moreover, the subject matter described in this specification may be implemented as one or more computer program products, i. H. as one or more modules of computer program instructions encoded on a computer readable medium for execution by or for control of data processing apparatus. The machine-readable storage medium may be a machine-readable storage device, a machine-readable storage substrate, a storage device, a fabric composition that effects a machine-readable propagated signal, or a combination of one or more thereof. The term "data processing apparatus" includes any apparatus, devices or machines for processing data including, for example, a programmable processor, a computer or multiple processors or computers. The apparatus may include hardware as well as code that creates an execution environment for the particular computer program, e.g. A code representing processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of the foregoing. A propagated signal is an artificially generated signal, e.g. A machine-generated electrical, optical or electromagnetic signal generated for encrypting information for transmission to a suitable receiver apparatus.
Ein Computerprogramm (auch bezeichnet als Programm, Software, Softwareanwendung, Script oder Code) kann in einer beliebigen Form von Programmiersprache geschrieben sein, einschließlich kompilierter oder interpretierter Sprachen, deklarativer oder verfahrensorientierter Sprachen, und das Programm kann in jeder beliebigen Form eingesetzt sein, darunter als unabhängiges Programm oder als ein Modul, eine Komponente, eine Subroutine, ein Objekt oder eine andere Einheit, die zur Benutzung in einer Rechenumgebung geeignet ist. Ein Computerprogramm entspricht nicht unbedingt einer Datei in einem Dateisystem. Ein Programm kann in einem Teil einer Datei gespeichert sein, die andere Programme oder Daten enthält (z. B. ein oder mehrere Scripts, die in einem Dokument in Markup-Sprache gespeichert sind), in einer einzelnen Datei speziell für das betreffende Programm oder in mehreren koordinierten Dateien (z. B. Dateien, die ein oder mehrere Module, Unterprogramme oder Teile von Code speichern). Ein Computerprogramm kann auf einem Computer oder mehreren Computern eingerichtet sein oder ausgeführt werden, die an einem Standort angeordnet sind oder über mehrere Standorte verteilt sind und über ein Kommunikationsnetz verbunden sind. A computer program (also referred to as program, software, software application, script or code) may be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and the program may be in any form, including as independent program or as a module, component, subroutine, object or other entity suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program may be stored in a portion of a file containing other programs or data (eg, one or more scripts stored in a document in markup language), in a single file specific to that program, or in multiple coordinated files (for example, files that store one or more modules, subprograms, or pieces of code). A computer program may be configured or executed on one or more computers located at one site or distributed over multiple sites and connected via a communications network.
Die in dieser Beschreibung dargestellten Prozesse und Logik-Abläufe können durch einen oder mehrere programmierbare Prozessoren durchgeführt werden, die ein oder mehrere Computerprogramme ausführen, um Funktionen durch das Arbeiten mit Eingabedaten und das Erzeugen von Ausgaben auszuführen. Die Prozesse und die logischen Abläufe können auch durch logische Sonderzweckschaltungen durchgeführt werden, und der Apparat kann als Sonderzweckschaltungen implementiert werden, z. B. ein FPGA (Field Programmable Gate Array) oder eine ASIC (anwendungsspezifische integrierte Schaltung). The processes and logic operations depicted in this specification may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating outputs. The processes and logical operations may also be performed by special purpose logic circuits, and the apparatus may be implemented as special purpose circuits, e.g. As an FPGA (Field Programmable Gate Array) or an ASIC (application-specific integrated circuit).
Prozessoren, die für die Durchführung eines Computerprogramms geeignet sind, schließen beispielsweise sowohl allgemeine und als auch Spezial-Mikroprozessoren sowie alle Arten eines oder mehrerer Prozessoren jeglicher Art Digitalrechner ein. Ein Prozessor nimmt im Allgemeinen Anweisungen und Daten von einem Festspeicher oder einem Arbeitsspeicher oder von beiden entgegen. Die wesentlichen Elemente eines Computers sind ein Prozessor für das Ausführen von Befehlen und ein oder mehrere Speichergeräte für das Speichern von Befehlen und Daten. Im Allgemeinen beinhaltet ein Computer eine oder mehrere Massenspeichergeräte für das Speichern von Daten, z. B. Magnet-, magnetooptische oder optische Disketten, um Daten zu empfangen und/oder zu übertragen. Jedoch muss ein Computer solche Geräte nicht haben. Außerdem kann ein Computer in ein anderes Gerät eingebettet sein, z. B. in ein Mobiltelefon, einen Organizer (PDA), einen mobilen Audioplayer, einen GPS-Empfänger (Global Positioning System), um nur einige zu nennen. Computerlesbare Medien, die für das Speichern von Computerprogrammbefehlen und -daten geeignet sind, schließen alle Formen von Permanentspeichern, Medien- und Speichergeräten ein, einschließlich beispielsweise Halbleiter-Speichergeräte, z. B. EPROM, EEPROM und Flash-Speicher; Magnetdisketten, z. B. interne Festplatten oder Wechselplatten; magnetooptische Disketten; und CD-ROMs und DVD-ROMs. Der Prozessor und der Speicher können durch logische Sonderzweckschaltungen ergänzt werden oder darin eingebaut sein. Processors suitable for running a computer program include, for example, both general and special purpose microprocessors, as well as all types of one or more processors of any type of digital computer. A processor generally receives instructions and data from a read-only memory or a memory, or both. The essential elements of a computer are a processor for executing instructions and one or more storage devices for storing instructions and data. In general, a computer includes one or more mass storage devices for storing data, e.g. As magnetic, magneto-optical or optical disks to receive and / or transmit data. However, a computer does not have to have such devices. In addition, a computer may be embedded in another device, e.g. In a mobile phone, an organizer (PDA), a mobile audio player, a GPS (Global Positioning System) receiver, to name but a few. Computer-readable media suitable for storing computer program instructions and data includes all forms of non-volatile memory, media and storage devices including, for example, semiconductor memory devices, e.g. B. EPROM, EEPROM and flash memory; Magnetic disks, z. Internal hard disks or removable disks; magneto-optical diskettes; and CD-ROMs and DVD-ROMs. The processor and memory may be supplemented or incorporated by special purpose logic circuits.
Um die Interaktion mit einem Benutzer zu ermöglichen, können in dieser Spezifikation beschriebene Ausführungsformen des Gegenstands auf einem Computer mit einem Anzeigegerät implementiert werden, z. B. einem CRT-(Kathodenstrahlröhre) oder LCD-(Flüssigkristallanzeige) Monitor, mit welchem dem Benutzer Informationen angezeigt werden, sowie einer Tastatur und einem Anzeigegerät, z. B. einer Maus oder einem Trackball, mit denen der Benutzer Eingaben in den Computer vornehmen kann. Es können auch andere Arten von Geräte verwendet werden, um für eine Interaktion mit einem Benutzer zu sorgen; beispielsweise kann eine dem Benutzer gelieferte Rückkopplung beliebiger Form von sensorischer Rückkopplung vorliegen, z. B. eine visuelle Rückkopplung, auditive Rückkopplung oder taktile Rückkopplung; und die Eingabe vom Benutzer kann in beliebiger Form empfangen werden, einschließlich akustischer, Sprach- oder taktiler Eingabe. Darüber hinaus kann ein Computer über das Senden von Dokumenten an und das Empfangen von Dokumenten von einer Einrichtung, die vom Benutzer verwendet wird, mit einem Benutzer interagieren; beispielsweise über das Senden von Webpages an einen Webbrowser auf dem Clientgerät des Benutzers als Antwort auf die vom Webbrowser empfangenen Aufforderungen. To facilitate interaction with a user, embodiments of the subject matter described in this specification may be implemented on a computer with a display device, e.g. As a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, with which the user information is displayed, and a keyboard and a display device, eg. As a mouse or a trackball, with which the user can make inputs to the computer. Other types of devices may be used to provide interaction with a user; For example, a user-supplied feedback of any form of sensory feedback may be present, e.g. A visual feedback, auditory feedback or tactile feedback; and the input from the user may be received in any form, including acoustic, voice or tactile input. In addition, a computer may interact with a user by sending documents to and receiving documents from a device used by the user; for example, by sending webpages to a web browser on the user's client device in response to prompts received from the web browser.
Verschiedene Aspekte des betreffenden in dieser Beschreibung beschriebenen Gegenstandes kann in einem Computersystem implementiert werden, das eine Back-End-Komponente beinhaltet, z. B. als Datenserver, oder das eine Middleware-Komponente beinhaltet, z. B. ein Anwendungsserver, oder das eine Front-End-Komponente beinhaltet, z. B. ein Client-Computer mit einer grafischen Benutzeroberfläche oder einem Webbrowser, über die bzw. den ein Benutzer mit einer Implementierung des betreffenden und in dieser Beschreibung beschriebenen Gegenstandes interagieren kann, oder eine Kombination einer oder mehrerer solcher Back-End-, Middleware- oder Front-End-Komponenten. Die Komponenten des Systems können durch eine beliebige Form oder ein beliebiges Medium digitaler Datenkommunikation miteinander verbunden sein, z. B. ein Kommunikationsnetz. Zu Beispielen für Kommunikationsnetze zählen ein lokales Netzwerk („LAN“), ein Fernnetzwerk („WAN“), eine netzübergreifende Verbindung (z. B. das Internet) und Peer-to-Peer Netzwerke (z. B. Ad-Hoc Peer-to-Peer Netzwerke). Various aspects of the subject matter described in this specification may be implemented in a computer system that includes a back-end component, e.g. As a data server, or that includes a middleware component, e.g. An application server, or that includes a front-end component, e.g. A client computer having a graphical user interface or web browser through which a user may interact with an implementation of the subject matter described herein and in this specification, or a combination of one or more such back-end, middleware, or front-end components. The components of the system may be interconnected by any form or medium of digital data communication, e.g. B. a communication network. Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), a cross-network connection (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer networks). to-peer networks).
Das Computersystem kann Clients und Server beinhalten. Ein Client und Server befinden sich im Allgemeinen ortsfern voneinander und interagieren typischerweise über ein Kommunikationsnetz. Die Beziehung von Client und Server entsteht aufgrund der Computerprogramme, die auf den jeweiligen Computern laufen und eine gegenseitige Client-Server-Beziehung haben. Bei einigen Implementierungen überträgt ein Server Daten (z. B. eine HTML-Seite) auf ein Client-Gerät (z. B. zum Anzeigen von Daten für einen Benutzer, der mit dem Client-Gerät interagiert, sowie zum Empfangen von Benutzereingaben von diesem Benutzer). Am Client-Gerät erzeugte Daten (z. B. infolge der Benutzerinteraktion) können vom Client-Gerät am Server empfangen werden. The computer system may include clients and servers. A client and server are generally remote from each other and typically interact over a communications network. The relationship between client and server arises because of the computer programs running on the respective computers and having a mutual client-server relationship. In some implementations, a server transmits data (eg, an HTML page) to a client device (eg, to display data for a user interacting with the client device, as well as receiving user input therefrom User). Data generated at the client device (eg, as a result of user interaction) may be received by the client device at the server.
Zwar enthält diese Spezifikation viele spezifische Implementierungsdetails, jedoch sollten diese nicht als Beschränkungen des Umfangs oder des Anspruchs ausgelegt werden, sondern vielmehr als Beschreibungen spezifischer Merkmale bestimmter Ausführungsformen bestimmter Erfindungen. Bestimmte Eigenschaften, die in dieser Spezifikation im Kontext gesonderter Implementierungen beschrieben sind, können auch in Kombination in einer einzelnen Implementierung implementiert werden. Umgekehrt können verschiedene, im Kontext einer einzelnen Implementierung beschriebene Merkmale auch in mehreren Implementierungen separat oder in einer beliebigen geeigneten Unterkombination implementiert werden. Außerdem können ein oder mehrere Merkmale einer beanspruchten Kombination in manchen Fällen aus der Kombination herausgelöst werden, auch wenn die Merkmale vorstehend als in gewissen Kombinationen funktionierend beschrieben oder gar als eine Kombination beansprucht werden, und die beanspruchte Kombination kann an eine Unterkombination oder eine Variation einer Unterkombination verwiesen werden. While this specification contains many specific implementation details, these should not be construed as limitations on the scope or on the claims, but rather as descriptions of specific features of particular embodiments of particular inventions. Certain features described in this specification in the context of separate implementations may also be implemented in combination in a single implementation. Conversely, various features described in the context of a single implementation may also be implemented in multiple implementations separately or in any suitable subcombination. In addition, one or more features of a claimed combination may in some cases be released from the combination, even if the features are described above as functioning in some combinations, or even claimed as a combination, and the claimed combination may be attached to a subcombination or variation of a subcombination to get expelled.
Ebenso werden Tätigkeiten in den Zeichnungen zwar in einer bestimmten Reihenfolge dargestellt, aber dies sollte nicht als Anfordernis verstanden werden, dass solche Tätigkeiten in der bestimmten gezeigten Reihenfolge oder in einer aufeinanderfolgenden Reihenfolge ausgeführt werden müssen oder dass alle dargestellten Tätigkeiten ausgeführt werden müssen, um erwünschte Ergebnisse zu erzielen. Unter bestimmten Umständen können Multitasking und Parallelbearbeitung vorteilhaft sein. Darüber hinaus sollte die Trennung verschiedener Systemkomponenten in den oben beschriebenen Ausführungsformen nicht in allen Ausführungsformen erforderlich aufgefasst werden, und es versteht sich, dass die beschriebenen Programmkomponenten und Systeme im Allgemeinen zusammen in ein einziges Softwareprodukt integriert oder zu mehreren Softwareprodukten verkapselt werden können. Also, although activities in the drawings are presented in a particular order, this should not be construed as requiring that such activities be performed in the particular order shown or in a sequential order, or that all activities depicted must be performed to produce desired results to achieve. Under certain circumstances, multitasking and parallel processing can be beneficial. Moreover, the separation of various system components in the embodiments described above should not be construed as required in all embodiments, and it should be understood that the described program components and systems generally can be integrated together into a single software product or encapsulated into multiple software products.
Einige Implementierungen sind beschrieben worden. Trotzdem versteht es sich, dass verschiedene Veränderungen vorgenommen werden können, ohne vom Geist und Umfang der Erfindung abzuweichen. Dementsprechend liegen andere Implementierungen im Geltungsbereich der folgenden Ansprüche. Die in den Ansprüchen ausgeführten Vorgänge können beispielsweise in einer anderen Reihenfolge ausgeführt werden und dennoch gewünschte Ergebnisse erzielen. Some implementations have been described. Nevertheless, it will be understood that various changes can be made without departing from the spirit and scope of the invention. Accordingly, other implementations are within the scope of the following claims. For example, the operations set forth in the claims may be performed in a different order and still achieve desired results.