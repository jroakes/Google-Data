US5797008A - Memory storing an integrated index of database records - Google Patents
Memory storing an integrated index of database records Download PDFInfo
- Publication number
- US5797008A US5797008A US08/694,919 US69491996A US5797008A US 5797008 A US5797008 A US 5797008A US 69491996 A US69491996 A US 69491996A US 5797008 A US5797008 A US 5797008A
- Authority
- US
- United States
- Prior art keywords
- index
- location
- entry
- word
- words
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/328—Management therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/319—Inverted lists
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99942—Manipulating data structure, e.g. compression, compaction, compilation
Definitions
- This invention relates generally to computer memories, and particularly to a computer memory storing an integrated index to a database.
- the pages are dispersed over millions of different computer systems all over the world. Users of the Internet constantly desire to locate specific pages containing information of interest.
- the pages can be expressed in any number of different character sets such as English, French, German, Spanish, Cyrillic, Kanakata, and Mandarin.
- the pages can include specialized components, such as embedded "forms,” executable programs, JAVA applets, and hypertext.
- the pages can be constructed using various formatting conventions, for example, ASCII text, Postscript files, html files, and Acrobat files.
- the pages can include links to multimedia information content other than text, such as audio, graphics, and moving pictures.
- the Web can be characterized as an unpredictable random update, insert, and delete database with a constantly changing morphology.
- indices are commonly arranged in memories as distinct data structures having different formats.
- the memory can store literal information in a first format. There usually is another format for numeric information. Attributes about the information may be stored according to a third format. Each format may require a separate application interface and access procedure.
- a data processing system including at least one central processor executing instructions of software programs.
- the data processing system also includes a memory containing a data structure common to the software programs.
- the common data structure includes a compressed index data structure, and a sampled index data structure.
- the index structure includes index entries referencing a database of records, each record stored at a unique address.
- Each index entry includes a word entry if the index entry represents a compressed encoding of a unique portion of information sequentially parsed from the database.
- the word entry is followed by one or more location entries which reference occurrences of the unique portions of information in the database.
- Each index entry includes a metaword entry if the index entry represents a unique attribute of one or more related words.
- the metaword entry is followed by one or more location entries referencing the occurrences of the unique attributes in the database.
- the index entries are sequentially stored according a collating order of the words and metawords, and the location entries are stored according to their collating order.
- the summary data structure includes a plurality of summary entries generated by periodically sampling the location entries of the compressed index data structure.
- Each summary entry includes an encoding of the word entry associated with the sampled location entry, an encoding of the sampled location entry, and a pointer to a next location entry following the sampled location entry.
- FIG. 1 is a block diagram of a distributed database storing multimedia information indexed and searched according to the invention
- FIG. 2 is a block diagram of a search engine including an index
- FIG. 3 is a block diagram of pages parsed by the search engine of FIG. 2;
- FIG. 4 is a block diagram of content attributes generated by the search engine
- FIG. 5 is a sequential representation of the content and attributes of the pages of FIG. 3;
- FIG. 6 is a block diagram of sequential words and their locations
- FIG. 7 is a block diagram of a compression of words
- FIG. 8 is a block diagram of a compression of locations
- FIG. 9 is a logical to physical mapping of the index
- FIG. 10 is a block diagram of an array of files used to arrange the index
- FIG. 11 is a block diagram of a remapping table used while deleting entries
- FIG. 12 is a tree representation of a query processed by the search engine
- FIG. 13 is a block diagram of an index stream reader object
- FIG. 14 is a flow diagram of a query search using the logical OR operator
- FIG. 15 is a linear representation of a page to be searched using the logical AND operator
- FIG. 16 is a flow diagram of basic index stream reader objects linked to each other by a compound stream reader which is subject to constraints;
- FIG. 17 is a flow diagram of a query search using the logical AND operator
- FIG. 18 is a linear representation of adjacent words
- FIG. 19 is a block diagram of range-based metaword values
- FIG. 20 is a table for storing word weights
- FIG. 21 is a block diagram of query word lists
- FIG. 22 is a block diagram of a page ranking list
- FIG. 23 is a block diagram of a query phrase log
- FIG. 24 shows a process for detecting duplicate pages
- FIG. 25 is a flow diagram of a process for deleting pages.
- FIG. 26 is a flow diagram of a process for indexing reissue pages.
- FIG. 1 shows a distributed computer system 100 including a database to be indexed.
- the distributed system 100 includes client computers 110 connected to server computers (sites) 120 via a network 130.
- the network 130 can use Internet communications protocols (IP) to allow the clients 110 to communicate with the servers 120.
- IP Internet communications protocols
- the client computers 110 can be PCs, workstations, or larger or smaller computer systems. Each client 110 typically includes one or more processors, memories, and input/output devices.
- the servers 120 can be similarly configured. However, in many instances server sites 120 include many computers, perhaps connected by a separate private network. In fact, the network 130 may include hundreds of thousands of individual networks of computers.
- client computers 110 are shown separate from the server computers 120, it should be understood that a single computer can perform the client and server roles.
- the records of information 122 can be in the form of Web pages 200.
- the pages 200 can be data records including as content plain textual information, or more complex digitally encoded multimedia content, such as software programs, graphics, audio signals, videos, and so forth.
- the clients 110 can execute Web browser programs 112, such as NAVIGATOR, EXPLORER or MOSAIC to locate the pages or records 200.
- Web browser programs 112 allow the users to enter addresses of specific Web pages 200 to be retrieved. Typically, the address of a Web page is specified as a Universal Resource Locator (URL).
- URL Universal Resource Locator
- the browser programs 112 can provide access to other pages or records by "clicking" on hyperlinks to previously retrieved Web pages. Such hyperlinks provide an automated way to enter the URL of another page, and to retrieve that page.
- the search engine 140 includes means for parsing the pages, means for indexing the parsed pages, means for searching the index, and means for presenting information about the pages 200 located.
- the search engine 140 can be configured as one or more clusters of symmetric multi-processors (P) 142, for example, Digital Equipment Corporation ALPHA processors, memories (M) 144, disk storage devices 146, and network interfaces 148 are connected to each other by high speed communications buses 143.
- the ALPHA processors 142 are 64 bit RISC processors
- the search engine 140 can be any type of processor which has sufficient processing power and memories, including 32 bit CISC processors.
- the search engine can be run on the computer storing the database.
- FIG. 2 shows the components of the search engine 140.
- the search engine 140 can include an automated Web browser 20, a parsing module 30, an indexing module 40, a query module 50, index stream readers (ISR) 60, an index 70, and a maintenance module 80.
- ISR index stream readers
- the automated browser 20 During the operation of the search engine 140, the automated browser 20, sometimes known as a "robot," periodically sends out requests 21 over the network 130.
- the requests 21 include URLs.
- the sites 120 return the records or pages 200 to the browser 20.
- the browser 20 can locate pages by following hyperlinks embedded in previously acquired pages. The browser 20 is described more completely in U.S. patent application Ser. No. 08/571,748 filed by Louis M. Monier on Dec. 13, 1995 entitled “System and Method for Locating Pages on the World Wide Web.”
- the pages 200 can be presented to the parsing module 30 as they are received or in batches which may amount to ten thousand pages or more, at one time.
- the parsing module 30 breaks down the portions of information of the pages 200 into fundamental indexable elements or atomic pairs 400. As described in greater detail below, each pair 400 comprises a word and its location. The word is a literal representation of the parsed portion of information, the location is a numeric value.
- the pages are parsed in order of the location of the words such that a location of the first word of a next page follows a location of the last word of a previous page.
- the parsing module 30 assigns increasing integer numbers to the locations, although other sequential orderings are also possible.
- the indexing module 50 sorts the pairs 400, first in word order, and second in location order.
- the sorted pairs 400 are used to generate the index 70 of the words of the pages 200.
- the index 70 is described in greater detail below.
- the index 70 can be pictured as comprising a compressed data structures 71, and summary data structures 72-73.
- the compressed data structure 71 is a compression of the word location pairs 400.
- the data structure 72 is a summary of the structure 71
- the data structure 73 is a summary of data structure 72.
- the structures 71 and 72 can be stored on disk, and the structure 73 can be stored in DRAM.
- each word representing a unique portion of information of the pages 200 is stored only once. All of the locations which are instances of the word in the pages 200 are stored following the word. The locations follow the word in order according to their locations. The locations essentially are pointers to the parsed portions of information.
- the data structures of the index 70 are optimized for query access. This means that the word-location pairs 400 are compressed to reduce storage, and uncompressing is minimized in order to preserve processor cycles during searching. Furthermore, the data structures of the index 70 also allow concurrent maintenance of the index 70 to delete old entries and to add new entries while queries are processed.
- Users interact with the index 70 via the query module 50 by providing queries 52.
- Users can be located remotely or locally with respect to the search engine 140.
- the terms of a query can include words and phrases, e.g., multiple words inclosed in quotation marks (").
- the terms can be related by Boolean operators such as OR, AND, and NOT to form expressions.
- the queries 52 as described in greater detail below, may also include terms which express ranges of values, or approximate locations of words to each other.
- the query module 50 analyzes the queries 52 to generate query requests 54.
- the query requests invoke a small number of basic types of object-oriented index stream readers (ISRs) 60, described below.
- ISRs object-oriented index stream readers
- the index stream readers 60 sequentially scan the data structures 71-73 in a manner to minimize the amount of data that need to be uncompressed.
- a presentation module 58 delivers information 59 about the qualifying pages to the users.
- the information 59 can include a summary of the pages located. Using the summary information, the users can access the identified pages with Web browsing software, or other techniques.
- the maintenance module 80 is used to add and delete information of the index 70. Modified pages can be handled as a delete and add operation. A particular problem solved is to allow substantially continuous access to the index 70 by millions of users each day as the index 70 is concurrently updated. The maintenance module 80 also effectively deals with duplicate Web pages containing substantially identical content.
- the records or pages 200 are parsed by the parsing module 30 in the order that pages are received from the browser 20.
- Each word 300 is separated from adjacent words by a word separator 210 indicated by a circle.
- In the index 70 each word is stored as a "literal" or character based value. It should be understood, that the terms page 200, word 300, and separator 210 are used to represent many different possible content modalities and data record specifications.
- a page 200 can be defined as a data record including a collection of portions of information or "words" having a common database address, e.g., a URL. This means that a page can effectively be a data record of any size, from a single word, to many words, e.g., a large document, a data file, a book, a program, or a sequence of images.
- the digitized information which is stored by the records or pages 200 can represent a number of different presentation modalities.
- the page 200 can be expressed using the ASCII, or other character sets such as iconic, scientific, mathematical, musical, Hebrew, Cyrillic, Greek, Japanese.
- the pages can include other "marks" which indicate how the "words" of the page are to be processed and presented.
- Pages can include programs, for example JAVA applets, which may require specialized parsing.
- the information of some pages can be expressed in a programming language, for example, Postscript (.ps), or Acrobat (.pdf) files.
- the pages 200 can encode multimedia items including digitized graphic, audio or video components.
- the pages or data records 200 do not necessarily need to be Web pages.
- the pages can be composed of portions of information of other databases, for example, all of the case law in the United States. Even if such pages do contain hyperlinks, they may contain other types of links.
- the links mean references in one document which can be used to find other documents. Although hyperlinks are one example, many other types of links may be processed.
- the pages 200 can be electronic mail memos stored in PCs.
- the words may be composed of encoded phonemes. In any case, no matter what the modality of the underlying information, the words are always represented in the index as literals.
- Textual words are a concatenation of numbers and characters, for example "the", and " ⁇ omb ⁇ T23.”
- characters other than numbers or letters are considered word separators 210.
- blanks and characters such as "@#. ⁇ ? ⁇ ,%" are word separators.
- Word separators 210 are not indexed.
- parsing module 30 can be provided with a first list of literal characters or marks which can form words, and a second list of marks, or other criteria, e.g., white space, which are to be considered as separators 210. Separate lists can be maintained in the search engine 140 for different types of pages.
- the parsing module 30 can detect word separation by the language instructions which are responsible for generating discrete words.
- the parsing of the pages into words and locations can be context independent or context dependent. For example, if a page 200 is known to be expressed in a script where the location of words is in another collating order, for example, from right to left, or top to bottom, the parsing can proceed accordingly.
- each page 200 is broken down into a sequence of pairs 400 according to the collating order of the locations of the words 300.
- Each pair 400 stores the word 410 and its the location 420.
- the locations of the words indicate the relative order in which the parsing module identified the words 300 in the pages 200.
- Each page has a first word and a last word.
- the first word 201 of the very first page which is parsed has an associated location "1" 211
- the next word 202 has a location "2" 212
- the last word 203 has a location "306" 213. This means the first page has three-hundred and six indexable words.
- the first word 204 of the second page has an associated location of "307.”
- the last word 205 of the second page has a location "500” 215. This means that second page includes 194 (500-306) words. From the perspective of the parsing module 30, the first word of a next page is considered to be positionally adjacent to the last word of a previous page.
- the last word 209 of the very last page that is parsed has, for example, a location "473458219876" 209.
- the word 410 determine the value of the "content" at a particular location.
- content can be represented in a variety of different modalities.
- the word “a” may be expressed as a binary encoding of the ASCII value of "a.”
- the locations 420 incrementally increase by one for each word parsed. Other sequential numbering schemes for locations can also be used.
- the parser can also implicitly produce one or more synonymous pairs for expressly identified words. For example, if the identified word 201 on the first page is "To", in addition to producing the pair 1,To!, the parsing module 30 can also produce, for the same location, the pair 1, to!. That is, the parsing module 30 produces two pairs for the same location. This step is useful to subsequently allow case insensitive searches by the query module 50.
- the parsing module 50 can also select synonyms from lists maintained in language translation dictionaries.
- parsing module 30 admits non-alphanumeric characters in words, additional pairs may be produced for single locations.
- the parsing module 30 can be directed to treat punctuation immediately adjacent to letters or numbers as part of the word. For example, if the second word 202 is a concatenation of the characters "5,234,236", “023-45-3678" or "Ph.D", the characters could very well be considered to form single words.
- the parsing module 30 can produce the pairs 2, Ph!, 2,.! 3, D!, and 2,ph!, 2,.!, 3,d! to facilitate searches where the input query is any sequence of characters substantially similar to the explicitly expressed words. This allows query phrases that are specified with both precise and imprecise punctuation marks.
- the parsing module 30 can implicitly produce additional pairs for words which include accented characters.
- the word “Ecu” can also be indexed as values “ecu,” “Ecu.” and "ecu,” all at the same location. This allows for the searching of pages expressed in characters of one alphabet using characters of another alphabet not necessarily including the accented characters. Thus for example, a user with an "American" style keyboard can search foreign language pages.
- the parsing module can also locate words which are likely to be related, such as proper names, e.g., James Joyce. If two adjacent words both begin with an upper case letter, in addition to producing a pair for the first name and the last name, a pair can also be produced which is a concatenation of the first and last names. This will speed up processing of queries which include proper names as terms.
- proper names e.g., James Joyce.
- the parsing module 30 in addition to recognizing locations and words, the parsing module 30 also detects and encodes attributes about the content of the records or pages. Attributes can be associated with entire pages, portions of pages 230, 240, 250, and 260, e.g., fields, or individual words 203.
- Metawords are also stored as literals, this means that the search engine 140 treats metawords the same as words. Therefore, a metaword is associated with a location to form a pair metaword, location!. For a record attribute, which relate to an entire record, the location of the last word of the page is associated with the attribute. For field attributes which relate to a portions of the record, the first and last word of the fields are associated with the attributes.
- Page attributes 250 can include ⁇ ADDRESS ⁇ 251, ⁇ DESCRIPTION ⁇ 252, ⁇ SIZE ⁇ 253, ⁇ DATE ⁇ 254, ⁇ FINGERPRINT ⁇ 255, ⁇ TYPE ⁇ 256, and ⁇ END -- PAGE ⁇ 257, for example.
- the symbol " ⁇ ,” represents one or more characters which cannot be confused with the characters normally found in words, for example "space,” “underscore,” and “space” (sp -- sp).
- the ADDRESS 251 encodes, for an exemplary Web page, the URL.
- the DESCRIPTION 252 may be the first two or three lines of the page. This information can help a user identify a page that would be of interest.
- the SIZE 253 can be expressed as the number of bytes of a page.
- the size information can help a user determine the amount of bandwidth needed to "download" the page, and the amount of memory needed to store the page.
- the DATE 254 can be the date that the page was generated, or last modified. In the case of multiple versions of extant pages, the most recent page may be more significant to users.
- the SIZE and DATE attributes can be searched using range-based values.
- a search can request to locate information of pages with a certain size or date range. Therefore, these attributes are stored in a specialized (power-of-two) manner as multiple attributes, described in greater detail below.
- the FINGERPRINT 255 represents the entire content of the page.
- the fingerprint 255 can be produced by applying one-way polynomial functions to the digitized content. Typically, the fingerprint is expressed as an integer value. Fingerprinting techniques ensure that duplicate pages having identical content have identical fingerprints. With very high probabilities, pages containing different content will have different fingerprints.
- the TYPE attribute 256 may distinguish pages having different multimedia content or formatting characteristics.
- Other types of page related attributes which have been determined to be useful are ⁇ BEGIN -- BIG ⁇ 261, and ⁇ END -- BIG ⁇ 262.
- BIG means that the number of words of the page exceeds some predetermined threshold value, e.g. 16K.
- the parsing module For each page, the parsing module also synthesizes an ⁇ END -- PAGE ⁇ attribute 257.
- the ⁇ END -- PAGE ⁇ attribute 257 is used extensively by the index stream readers 60 of FIG. 2 to converge on pages containing words or phrases specified in the queries 52. This is due to the fact that the ultimate selection criteria for qualifying content information is page specific. By inserting the ⁇ END -- PAGE ⁇ attribute value in the index 70 as a metaword, searching the index as described below can be more efficient.
- the locations associated with attributes may be locations of the words expressing the content to which the attributes apply. For example, if the last word 203 of the page 200 of FIG. 4 has a location 306, as shown in FIG. 3, then in addition to producing the pair 306, word!, the parsing module 30 also produces the attribute pair 306, ⁇ END -- PAGE ⁇ !. This mean locations associated with this metaword clearly define page boundaries.
- the attributes can have the first and last locations of the set of words (field) associated with the attributes.
- one or more locations could be set aside between the last location of a previous page and the first location of a next page for indicating page related attribute values.
- Attribute values or metawords can be generated for portions of a page.
- the words of the field 230 may be the "title" of the page 200.
- the "title” has a first word 231 and a last word 239.
- the titles can be expressly noted.
- the title may be deduced from the relative placement of the words on the page, for example, first line centered.
- the parsing module 30 can generate a ⁇ BEGIN -- TITLE ⁇ pair and an ⁇ END -- TITLE ⁇ pair to be respectively associated with the locations of the first and last words of the title.
- the field 240 can be identified by the parsing module 30 as a citation field expressed, for example in italic, underlined, or quoted characters.
- the parsing module can generate ⁇ BEGIN -- CITE ⁇ and ⁇ END -- CITE ⁇ metawords to directly index the title.
- the field 250 can have table attributes.
- the vertical and horizontal arrangement of the words may determine the collating order of their locations.
- the field 260 may be identified as a graphic symbol.
- the attribute values or metawords can encode, for example, ⁇ BEGIN -- GRAPHIC, and ⁇ END -- GRAPHIC ⁇ .
- Attributes can also be associated with individual words, for example, a word may have an ⁇ AUTHOR ⁇ attribute, a ⁇ LINK ⁇ , or an ⁇ AUDIO ⁇ attribute, and so forth.
- Other indexable attributes can include image tags, e.g., "comet.jpg,” host (site) names, e.g., "digital.com,” or Web newsgroup, "rec.humor,” or user specified attributes.
- FIG. 5 abstractly shows a view of the words and metawords of the pages 200 as produced by the parsing module 30.
- the parsing module 30 produces a sequence of pairs 500 in a collating order according to the locations of the words 300 of the various pages 200. Some of the words may also cause the parsing module 30 to generate synonymous words (S) 510 for the same location.
- Metawords (M) 520 are generated to describe page, field, or word related attributes.
- the indexing module 40 generates an index 70 of the content of the records or pages 200.
- the internal data structures 71-73 of the index 70 are now described first with reference to FIG. 6.
- word is used to include both words and metawords as defined above, unless expressly noted otherwise. Making words and metawords substantially indistinguishable as literals greatly improves the efficiencies of the data structures and processing steps of the search engine 140.
- the pairs 400 are sorted first in word order, and second in location order.
- a word entry 700 of a first index entry 600 e.g., the literal "abc”
- the word 700 is stored as one or more 8-bit bytes.
- the bytes which comprises the word are followed by a terminating byte 701 having a zero value.
- Each location entry 800 is expressed as one or more bytes.
- the last location entry for a particular word includes a zero byte 801 as a terminator.
- the last location of a word is immediately followed by the next index entry including the word entry 702, e.g., the literal "abcxy,” and its locations.
- the word "the” might appear at hundreds of millions of different locations. Therefore, in the index 70, the entry for the word “the” is followed by millions of location entries. Altogether, the search engine 140 may include hundreds of millions of different words entries. In addition, as the number of pages of the Web increase, so does the size of the index 70.
- the search engine 140 uses a number of different compressing techniques to decrease the amount of storage required for the index.
- summarizing techniques are used to reduce the processing requirements while searching the compressed data of the index.
- FIG. 7 shows a prefix compressing technique which can be used to map from words 710 to compressed words 720. Recall that the index maintains the words in a collating order of their values. If the first possible indexed word has a value "a,” then the compressing yields one or more bytes representing the value of the character "a", followed by a zero byte 713.
- the next indexed word 714 may have some prefix characters in common with the preceding word.
- the compressing indicates the number of common prefix characters 715, e.g., "1” followed by the different postfix characters 716, followed by the terminating zero byte 717, and so forth.
- the word “abcxy” 719 has three prefix characters in common with the previously encoded word “abc” 718 and the different characters are "xy.” If a word has no prefix characters in common with a preceding word, then the word is encoded as for the first word.
- FIG. 8 shows a delta value compressing technique which can be applied to the locations 800 of FIG. 6.
- the technique takes advantage of the fact that frequently occurring words such as "the,” “of", “in,” etc., are located close to each other. Therefore, compressing the locations minimizes the number of bytes consumed to express the numerous locations of common words which appear close to each other.
- Each location of a word is expressed by a delta value (DV).
- the delta value means that the location is expressed as a relative offset in locations from a previous location.
- the first location for a particular word can be the offset from location "0.” For example, if a first occurrence of the word “the” is at location "100", and next occurrences are at locations "130" and "135,” the delta values are respectively expressed as 100, 30, and 5.
- the DV 810 is encoded as a single byte 810 with the low order (left-most) bit 811 set to zero, see FIG. 8. The remaining seven bits express the DV. If the DV is in the range 127 ⁇ DV ⁇ 16K-1, the DV encoding consists of a first byte 820 with the low order bit 821 set to a logical one to indicate that a continuation byte 830 follows. The continuation byte 830 has the high order bit 831 set to a logical zero signalling the end of the delta value encoding.
- the first byte 841 has the low order bit set to a one
- the other bytes 842 have the high order bit set to a one
- the last byte 843 has the high order bit set to zero to indicate the end of the delta encoding for a particular location.
- the compressing technique is optimized for delta values in the range of 1 to 16K-1, since the majority of delta values are expected to fall within this range.
- delta values in this range can be uncompressed by shifting the content of two bytes by one. Because the high order bit of the second byte is zero, no further processing, like bit clearing, is required to extract the delta value.
- Delta value compressing allows the index stream readers 60 of FIG. 2 to "scan" the index at a great rate while uncompressing and trying to reach a target location.
- the most frequently occurring delta values e.g., one and two byte delta values, only require six machine executable instructions to recover and evaluate a next location.
- the index stream readers 60 which do the bulk of the work in the search engine 140, can process a next locations in three machine cycles. This may mean, for a 300+ MHz processor, that the stream readers could process a stream of delta values at a rate of approximately 100,000,000 locations per second.
- FIG. 9 shows the data structures 71-73 of the index 70 of FIG. 2 in greater detail.
- the data structure 71 maps the compressed entries (words and locations) onto a physical media of the search engine 140, e.g., the memories 144 and disk 146 of FIG. 1.
- the compressed data structure 71 sequentially stores the words (and metawords ) having unique (binary encoded) values in a collating order according to their values.
- Each word is immediately followed by the set of locations (locs) 908 where the word appears in the numerous pages.
- the locations are stored in an increasing positional order.
- the word and location entries of the compressed data structure 71 are stored in fixed size blocks 910 of disk files.
- the blocks 910 can be 2 KB, 4 KB, 8 KB, 16 KB, or any other size convenient for physical I/O and memory mapping.
- the physical media includes the disk 146 for persistent storage, and the memories 144 for volatile storage while the search engine 140 is operational.
- Word and location entries are allowed to straddle block boundaries to fully populate the compressed data structure 71. Creating the blocks 910 for an exhaustive search of the Web may take several days of continuous processing of batches of pages 200.
- a second level summary data structure 72 can also generated.
- the summary data structure 72 is generated using a sampling technique. The technique periodically "samples" the location entries 800 being placed in the compressed data structure 71. For example, a sample is taken whenever about a hundred bytes have been written to the compressed data structure 71. Since the average size of the location entries is approximately two bytes, a sample is taken about fifty entries.
- the compressed data structure 71 can be sampled at higher or lower byte rates. Sampling at a higher rate improves the granularity of the summary, but increases its size, and sampling at a lower rates decreases granularity and storage.
- Each summary entry 925 includes the word 926 associated with the sample, and the sampled location associated with the word.
- the summary entry 925 includes a pointer 928 of the next entry in the compressed data structure 71 following the sampled entry.
- the summary data structure 72 can also be mapped into fixed size blocks or disk files to fully populate the summary data structure 72.
- the summary data structure 72 can be searched in a non-sequential manner. For example, a binary search technique can be used on the summary data structure 72 to rapidly locate a starting point for a more fine grained sequential search of the compressed data structure 71. If some of the summary entries 925 are compressed, storage space can be reduced, while allowing a modified binary searches.
- the summary data structure 72 can first be searched to find a summary entry 925 having a location 927 closest to, but not greater than a target location.
- the pointer 928 of that summary entry can then be used as a starting address to begin scanning the compressed data structure 71.
- the location 927 of the summary entry can be the base for adding the delta value of the next entry of the compressed data structure 71 referenced by the address of the summary entry.
- the third level summary data structure 73 can dynamically be generated.
- the summary data structure 72 can be scanned while periodically taking samples to generate the summary entries of the data structure 73.
- the summary data structure 72 can be sampled at a rate which is the same or different than the sampling rate used to build the summary data structure 72.
- the summary entries 925 of the third level summary data structure 73 are similar in construction to the entries of the second level.
- the top level summary data structure can be sized to fit entirely in the memories 144.
- the index 70 is optimized for searching, hence the parsimonious compressing and summary entries. Keeping such a large index current presents special problems because this type of structure may be less suitable for conventional maintenance operation. For example, it may periodically be necessary to admit modified or new entries, and to expunge deleted entries.
- Deleting a single page may require the reordering of millions of location values of the data structures of the index 70 of FIG. 9 because of "holes" left by deleted words and location entries. For any page which is deleted, all of the locations of the following pages need to be adjusted, byte by byte. For example, if a deleted page includes 888 words, the locations of the following pages need to be reduced by 888.
- the index 70 is organized as a two-dimensional array 1000 of data structures 1001 to allow concurrent searching and maintaining of the index 70. By having multiple data structures 1001, the index 70 can be updated incrementally on a per data structure basis.
- the array 1000 includes a plurality of tiers 1010-1014 and a plurality of buckets 1020-1039, e.g., respectively columns and rows. The dimensionality of the array 1000 is described below.
- Each data structure 1001 includes for example, two disk files. One file 71' to store a portion of the compressed data structure, and a second file 72' for storing the corresponding summary data structures 72. The third data structure 73 is stored in the memories 144.
- the words (and their associated locations) are allocated to the buckets 1020-1029 according to a hash encoding of the (binary encoded value) of the words.
- the hashing can disperse the words (and their locations) over twenty buckets 1020-1039.
- the sequential ordering of the words within a particular bucket is maintained.
- the hashing merely serves to evenly distribute the words (and their locations) over the buckets.
- the tiers 1010-1014 are produced as follows. Recall that the parsing of the pages 200 can proceed in batches. Each batch is encoded as one of the tiers. During parsing and indexing, a first batch of pages would produce the first tier 1010, a next batch the next tier, etc., a fifth batch would produce the tier 1014. The number of tiers extant at any one time is dependent on how frequently merging takes place, see below.
- the subsequent tiers of a particular bucket essentially become extensions of previous tiers of the same bucket. That is, the locations of words in later generated tiers of a particular bucket follow the locations of words in earlier generated tiers of the same bucket.
- the search engine 140 is designed to reduce the number of tiers. This produces optimum performance, since switching from one tier to another while searching the index requires higher level and more time consuming system services.
- the maintenance module 80 periodically merges a following tier with a previously generated tier. While merging tiers, the collating order of the word and location entries is preserved. In order to maximize the efficiency during a merge/sort, subsequent tiers are merged into a previous tier only if the amount of data in a subsequent (later) tier are at least as much as the data stored in the previous tier of the same bucket.
- the time to update is N log N bound, as opposed to N 2 bound should a single data structure be used. This makes the updating of an extremely large index that is optimized for searching tractable.
- deleted entries of the index are expunged.
- the deleting of entries proceeds as follows. Remember, all words and metawords and their locations are sequentially indexed. Therefore, deleting a page can affect a large portion of the index 70.
- Deleted pages can be detected by the automated browser 20 of FIG. 1. For example, the browser 20 periodically searches the Web to determine if a previously indexed page is still active. If the page is gone, the browser 20 can inform the maintenance module 80. Deleted pages can be noted in the index by attaching a "deleted" attribute to the page.
- the deleted attribute can have a special attribute value, for example, ⁇ DELETED ⁇ .
- the location associated with the deleted attribute can be the same as the location of the last word of the page to be deleted.
- Deleted pages can be identified by modifying the queries, described below, to check if a page has an associated ⁇ DELETED ⁇ attribute.
- index entries of a subsequent one tier are merged with those of a previous trier of the same bucket.
- the union of the merged index entries are placed in a new tier having "new" locations. Deleted word or location entries are expunged.
- a location remapping table is used to map locations of the new space into equivalent locations expressed in the old space.
- the remapping table 1100 for the entire index 70 includes a first column 1110 of locations 1111-1119 which reflect the "new" or merged portion of the index, and a second column 1120 of "old" locations 1121-1129.
- the first entries 1111 and 1121 indicate that location “9” in the old space, is equivalent to location "7" in the new merged space, e.g., locations "7" and "8" in the old space are deleted.
- the query module 50 treats all words as being defined in terms of locations of the old space, until all of the buckets have been converted to the new space. Therefore, while the index stream readers 60 of FIG. 2 are scanning the index 70, locations of words found in the "new" space are mapped back to "old" space locations using the mapping table 1100, until the merge/sort operation has completed.
- the ⁇ DELETED ⁇ , ⁇ END -- PAGE ⁇ , ⁇ BEGIN -- BIG ⁇ and ⁇ END -- BIG ⁇ attributes are hashed into a bucket whose tiers are merged last, for example, bucket 1039 of FIG. 10.
- these page related attribute will not be deleted until all words of the deleted pages have been processed.
- FIG. 2 shows the query module 50 interacting with users via the network 130
- the search engine 140 can also be configured to process locally generated queries. This would be the case where the database indexed, the client programs, the search engine 140, and the index 70 all reside on a single computer system, e.g., a PC or workstation.
- Each of the queries 52 can be in the form of an expression of a query language.
- Terms of the expression can be a single word or metaword, multiple words, or phrases, or even parts of words.
- the query expression can be "fruit,” meaning find all pages which include at least the word "fruit.”
- a multiple word query could be paraphrased as:
- phrases are multiple words or characters enclosed by quotation marks, for example, "the cow jumped over the moon.” In this case, a qualifying page must contain the words or characters exactly is indicated in the quoted phrase.
- a partial stem-word can be specified with the "*" character, for example as "fruit*” to locate pages containing the words fruit, fruity, fruitful, or fruitfly, and so forth.
- the terms can be related by operators.
- the operators can be the Boolean operators AND, OR, NOT.
- Positional operators can include NEAR, BEFORE, and AFTER.
- the NEAR operator means that the a word must be within, for example, ten locations of another word.
- a query "a before b" specifies that the word “a” must appear before the word “b” in the same page, and the query "a after b” means that the word "a” must appear after the word "b.”
- Expressions can be formed with parenthesis to indicate processing precedence ordering.
- the query expression "(vegetables and fruit) and (not (cheese or apples))" locates all pages that include at least the words “vegetable” and "fruit,” but not the words “cheese” or "apple.”
- the parsing of the individual words of queries is similar to the parsing done by the parsing module 30. This includes the treatment of capitalization, punctuation, and accents.
- a search for the word "wombat” will also locate pages with the word "WoMbat,” or wOmbAT.” That is, words expressed in lower case characters will match on any other form of the character such as upper case, accent, etc, since the query parser will produce the appropriate synonyms.
- a term of the expression can be specified as an exact phrase by enclosing the characters of the phrase within quotes. For example, a query including the phrase "is the wombat lost?" must exactly match on the quoted characters.
- Query expressions can also include range-based terms, such as dates or sizes. For example, "1 Jan. 1995-31 Dec. 1995” means any date in the year 1995. The handling of range-based values in the index 70 is explained in greater detail below.
- the query module 50 can represent the query expression "(vegetables and fruit) and (not (cheese or apples))" as a query tree 1200.
- the bottom level leaf nodes 1210-1213 respectively represent the basic words “vegetables, fruit, cheese, and apple” (a,b,c,d).
- the AND node 1220 is applied on the words vegetable and fruit, and the OR node 1221 is applied to the words cheese and apple.
- the NOT node 1230 is applied on the node 1221, and the AND node 1240 joins the two main branches of the tree 1200.
- the query module 50 communicates with the index 70 via object oriented interfaces, for example, the index stream reader objects (ISRs) 60.
- ISRs index stream reader objects
- Each ISR object 60 is an encapsulation of a data structure and methods which operate on the data structure.
- the encapsulated data structure reference portions of the index 70, for example the files 71', 72', 73' of the data structures 1001 of FIG. 10. Since the query module 50 interfaces with each object via a single object "handle," the query module 50 does not need to know the internal workings of the ISRs 60.
- the objects can be polymorphic. This means similar objects can be viewed via a common interface.
- the search engine 140 can employ a very small number of basic types of stream reader objects 60. With these ISR objects 60, the query module 50 can resolve any query expression.
- an ISR object 60 includes data references 1310 and method references 1320. Some of the objects do not need to use all of the references.
- the data references 1310 can include a file/object -- pointer 1311, a word 1312, a current -- location 1313, a previous -- location 1314, and an estimated -- overshoot 1315.
- the methods 1320 referenced can be get -- word 1321, get -- location 1322, get -- next -- loc 1323, get -- loc -- limit 1325, close, and for some objects, get -- previous -- loc 1324.
- the file/object -- pointer 1311 for a simple or basic object references, the files 71', 72', and 73' of the data structures 1001. For a complex or compound object, the pointer 1311 references other objects.
- the word 1312 indicates which unique word or metaword is currently being searched by the ISR object.
- the current -- location 1313 references a current location of the word during index stream processing.
- the previous -- location 1314 can reference, for some objects, a previously processed location.
- the estimated -- overshoot 1315 is described in greater detail below with respect to a compound index stream reader which determines a conjunctions of other index stream readers (isr -- AND).
- the estimated -- overshoot is used to optimize the scanning of the index by the isr -- AND stream reader object.
- the methods of an object if successful, produce a TRUE condition, and possibly a value. If a particular method is not performed successfully, a logical FALSE condition is retumed.
- the get -- word method 1321 yields the value of the word 1312.
- the method 1321 can be referenced by the query module 50 as "get -- word isr," where "isr” is the "handle” of the index stream reader object.
- the get -- loc method 1322 yields the current -- location 1313 associated with the word of a particular index stream reader, e.g. "get -- loc isr.”
- the two methods 1321 and 1322 have no side effects on the ISRs, e.g., they return values while leaving pointers unchanged.
- the get -- next -- loc method 1323 advances the current -- location 1313 to the next immediate location where the word occurs, if there is one, otherwise the method 1323 yields a logical FALSE condition.
- the get -- loc -- limit method 1325 can have a reference in the form of "get -- loc -- limit isr, target -- location, limit.” That is, the get -- loc -- limit method 1325 takes three arguments, isr, a target location, and limit location. This method advances the current -- location pointer 1313 to a next location which is at least as great as a target location, or alternatively, if that would cause the current -- location 1313 to exceed the limit, the method may do nothing, and return a FALSE condition.
- the method close 1326 deletes the object.
- the get -- previous -- loc method 1324 produces the previous location of a word with respect to the current location, if there is one, otherwise a logical FALSE condition is returned. This method does not change the current-location 1313. It should be noted, as explained below, that in the case of an isr -- and and an isr -- not object, it is not possible to determine the previous location.
- This method is useful to determine the range of locations which are part of a specific page. For example, if the index stream reader object is reading locations for the END -- PAGE metaword, the current and previous locations define the range of locations of a page.
- a simple or basic isr object operates only on the location entries for one specific word. This means that advancing the current -- location pointer 1313 is a relatively inexpensive operation. It should be noted that the current -- location 1313 can only be advanced, and not reversed because of the delta value compression. This means, that the get -- previous method 124 can only retrieve the location immediately previous to the current location.
- Some query operations may be very time consuming to perform. For example, take the query:
- the get -- loc -- limit method 1325 may decide not to advance the current -- location 1313, and return a FALSE condition.
- the get -- loc -- limit method 1325 has some important properties when applied to the index 70. Recall, the get -- loc -- limit method advances the current location to a next location which is at least as great as a target location, unless that would cause the current -- location to exceed the limit. This means that the get -- loc -- limit method can jump over intermediate locations to reach the target location where to resume the scan.
- This jumping over locations can be accomplished by having the get -- loc -- limit method first scan the summary data structure 73, and then the summary data structure 72 to rapidly close in on the target location. By scanning the summary data structures 73 and 72 first, the uncompressing of many delta values of the compressed data structure 71 can be skipped.
- the interfaces can be highly optimized for searching, since optimization opportunities are well localized.
- the same interfaces that are used for searching the index can also be used by the merge/sort operation.
- ISR objects 60 can be generated by the query module 50 with an OPEN procedure.
- the call to the OPEN procedure can be "OPEN isr x." Where "isr" indicates that an index stream reader object is requested for a valued word (or metaword) x, the OPEN procedure returns the "handle" of the object and the methods which are included with the object.
- the isr x can return the locations of the word x using the method get -- next -- loc 1323 or the get -- loc -- limit method 1325.
- the locations can be recovered by adding a next delta value to the value of the previously determined location. It should be understood that in the case where the index includes multiple tiers 1014, the index stream readers sequentially progress through the tiers of the bucket into which the word x was hashed.
- the OPEN procedure can also generate index stream reader objects which relate a combination of previously opened readers.
- the OPEN call can be of the form "OPEN isr -- type (isr, . . . , isr), where isr -- type can be "OR,” “AND,” or “NOT.” and "isr, . . . , isr" are the handles of previously generated ISR objects.
- the query module 50 can do the calls “OPEN isr cheese” and “OPEN isr apple,” followed by OPEN isr -- or (isr -- cheese, isr -- apple), where "isr -- cheese,” and “isr -- apple” are the handles of the objects generated by the "OPEN isr x" calls.
- the methods of the isr -- OR perform a merge and sort of the locations produced by the isr -- cheese and isr -- apple index stream objects.
- the isr -- OR produces its output from the input of two other ISRs.
- ISR objects can reference any number of other ISR objects to generate an object oriented representation of, for example, the tree 1200 of FIG. 12 which logically represents an input query 52.
- index stream readers for the metaword attributes ⁇ END -- PAGE ⁇ , and ⁇ DELETED ⁇ are typically opened so that page specific determinations can be made, e.g., skip over the locations of deleted pages.
- FIG. 14 shows a process 1400 for locating pages which contain at least one occurrence of a particular word, e.g. a query states:
- the process 1400 can be adapted to locate pages containing at least one of a set of words.
- the process 1400 performs the search for the union of the words, e.g., "cheese,” or "apple”.
- step 1410 the OPEN procedure is called to open ISRs for the word "vegetable"(a), and the metaword END -- PAGE (E -- P), e.g., OPEN isr a, isr E -- P.
- step 1420 search the index 70 to determine a next location for the word a, e.g., determine loc(a) using the get -- next -- loc method of the isr -- a object. Once the next occurrence of the word a has been located, determine the location (loc(E -- P)) of an END -- PAGE metaword which is at least loc(a) using the get-loc-limit, step 1430.
- step 1450 select the page identified by loc(E -- P) as a qualified page. Advance the location for the a stream to be at least one greater than loc(E -- P), and repeat step 1420 until the end of the a stream is reached and all pages including at least one occurrence of the word a have been selected.
- FIGS. 15-17 An operation of the index stream readers 60 with respect to the logical AND operation is described with reference to FIGS. 15-17.
- a user desires to locate pages 200 including at least one occurrence 1510 of the word (or metawords) a and at least one occurrence 1530 of the word (or metaword) b. This could be expressed in a query as:
- open basic readers isr a 1610, isr b 1620, isr E -- P 1530 for the metaword ⁇ END -- PAGE ⁇ , as well as a compound isr -- AND 1540 logically linking the ISRs 1610, 1620, and 1630, step 1710 of process 1700 of FIG. 17.
- the methods of the isr -- AND reader are referenced to perform the search. This will cause the methods of the basic stream readers linked by the isr -- AND object to be referenced to find locations for the specified words.
- the isr -- AND object 1640 is different from the other ISR objects in that it operates in conjunction with one or more "constraints" 1650. As defined herein, constraints give the isr -- AND objects a powerful mechanism to rapidly scan through multiple location streams.
- each unique word of the index is associated with one set of incrementally increasing locations, e.g., a location stream.
- scanning locations of the compressed data structure 71 of FIG. 9 requires the sequential reading of each byte of every location for a particular word; for many words this can be millions of locations. This is required because of the delta value encodings. A next location can only be determined from a previous location.
- scanning the compressed data structure 71 can only proceed in one direction, without backing up. If the index 70 is searched at a lowest level, every byte must be read in sequential order. However, the sampled entries of the summary data structures 72-73 can be searched while skipping over many locations. In fact, the summary data structures can be processed by methods more efficient than sequential searching, for example, binary searching methods.
- constraints 1650 enable low-level (inexpensive) procedures to quickly traverse locations by first using the summary data structures 72-73 and then the compressed data structure 71 to reach a desired target location without having to invoke higher level (expensive) procedures, or uncompressing an excessive number of delta values.
- Constrained stream readers provide a substantial performance advantage for the search engine 140 of FIG. 1.
- C(a) means the current location of a word (or metaword) a
- C(b) means the current location of a word (or metaword) b
- K is a constant.
- the value of K can be ten.
- constraints can also be in the form:
- P means the previous location of a, or b. Recall, some ISRs keep track of the previously determined location.
- two additional indicators can be used in specifying constraints. For example:
- C E means the index stream is allowed to locate a "next" location at the "end", or a previous location at the "beginning.” This convention enables the processing of words or phrases associated with the first and last occurrence of the word, phrase, or group of words, e.g., a title.
- constraints 1650 determine how the get -- loc -- limit method determines a next location for the isr -- AND object. Logically, the constraints operate as follows.
- the value of the right side (loc(b) ⁇ K) must be greater than or equal to the value of the left side (loc(a)). This means that the current location of the right side stream, adjusted by K, must be at least equal to the location of the left side stream. If the constraint is unsatisfied, the right side stream is "behind.”
- the constraint could be satisfied by "backing-up" the left side stream.
- delta value compressing it is only possible to move the streams forward. Therefore, the only way to satisfy a constraint is to advance the right side stream.
- a simple way to do this is to use the left side location as, at least, a minimal target location for the right side stream using the get-loc-limit method. This is intended to satisfy the constraint, although it may make other constraints false. Note, if a stream is at the last location, the scanning process can be terminated.
- step 1720 determine, a next location (loc(a)) 1510 (FIG. 15) of the word a. Then, in step 1730 using the isr -- E -- P object 1630, determine a next location (loc(E -- P)) 1520 of the metaword ⁇ END -- PAGE ⁇ . In step 1740, determine the previous location (ploc(E -- P) 1519 of the metaword ⁇ END -- PAGE ⁇ using, for example, the get -- prev -- loc method 1312 of the isr -- E -- P.
- step 1750 determine a next location (loc(b)) of the word b constrained to be greater than the previous ⁇ END -- PAGE ⁇ location (ploc(E -- P)) 1519, but less than or equal to the next ⁇ END -- PAGE ⁇ location (loc(E -- P)) 1520.
- This constrained search can be performed by the get -- loc -- limit method 1325 using the locations 1519 of the previous END -- PAGE metawords as the constraint values, then a test can be performed on the next loc(E -- P) 1520.
- the search can be conducted by opening the index stream reader objects for the word c, and the metawords ⁇ BEGIN -- TITLE ⁇ (B -- T) and ⁇ END -- TITLE ⁇ (E -- T).
- FIG. 18 shows how the constraints 1650 of FIG. 16 can be used to further refine the selection of pages so that pages are only selected if the word b 1810 is immediately preceded by the word a 1820, e.g., the phrase "a b".
- Constraint 1830 e.g., C(a) ⁇ C(b)-1
- a constraint 1840 e.g., C(b) ⁇ C(a)+1
- constraints e.g., C(b) ⁇ C(a)+1
- the NEAR operator can be implemented.
- the operation is as follows. For any given set of current locations of the words of the input streams, determine if any one constraint is unsatisfied, and satisfy that constraint. Better performance can be obtained by selecting the constraint which is likely to advance the current location the farthest.
- a constraint can be satisfied by calling get -- loc -- limit using the sum of the left side value and -K as the target location. As stated before, this may dissatisfy other constraints. Therefore, this process is repeated until all constraints are satisfied, which indicates a match, or until a terminating condition is reached. Note, the get -- loc -- limit may search the summary data structures 72-73 before the compressed data structure 71.
- the isr -- NOT method produces all locations where the specified word does not occur. Because of the potentially large number of locations which may qualify, the isr -- NOT is designed to do a "lazy" evaluation of locations. Lazy means the identification of locations is deferred until a last possible moment. Typically, the isr -- NOT reader is used with compound stream readers that match for a subset of END -- PAGE locations.
- each ISR of FIG. 13 While processing queries, many constraints may need to be evaluated or satisfied in order to locate qualifying pages. In general, the time to resolve a query is proportional to how fast the index can be searched for a given number of ISRs. Therefore, each ISR of FIG. 13 also maintains the estimated -- overshoot value 1315. The overshoot is an estimate at a search rate.
- the estimated -- overshoot 1315 is determined as follows. Each time that an ISR determines a new current -- location 1313 using the get -- loc -- limit method 1325, the running average number of locations advanced beyond the initial target location is determined. The target location is specified as an argument for the get -- loc -- limit method.
- the estimated -- overshoot 1315 is a relative indication of how "fast" a particular index stream reader is advancing through the locations.
- the best constraint to satisfy first is the one which will maximize the current location of the isr advanced.
- the current location is maximized when the sum of the constraints target value (that is, the value of the left-hand side of the constraint, minus K) and the estimated -- overshoot 1315 of the stream of the right-hand side is a maximum.
- the END -- PAGE index stream needs to be advanced first e.g., get -- next E -- P, since the user is interested in "pages.”
- the a stream should be first advanced when all constraints are satisfied, otherwise matches are going to be erroneously missed.
- the b stream is first advanced if all constraints are satisfied. The stream that is being advanced first is called the distinguishing stream. If this convention is followed, qualifying pages will not be missed.
- the processing of queries can further be accelerated by taking note of the fact that a relatively small number of pages are considerably larger than most pages. Therefore, relatively large pages have the additional attributes of ⁇ BEGIN -- BIG ⁇ and ⁇ END -- BIG ⁇ . Performance can be improved by focusing on the "big” metaword streams, because the "big page” attributes occurs relatively infrequently compared to the ⁇ END -- PAGE ⁇ attribute.
- the index 70 not only can be used to search for "words" having discrete literal values as described above, but also to locate words within a range of numeric values, such as integers.
- the page attributes ⁇ SIZE ⁇ 253 can be expressed as an integer value, as can the attribute ⁇ DATE ⁇ 254, e.g., as a "Julian" date.
- the number line begins with integers 1 and 2, and as shown in FIG. 19, has a portion . . . , 56, 57, . . . ,70, 71, . . . , and so forth.
- the integers represent values on which range-based query operations are desired, e.g., dates, and page sizes.
- the ranges can be selected from an interval of a predetermined size, e.g., 16, 4K, 512K, etc.
- the predetermined interval can be used to generate a plurality of sets of subintervals. For example, a first set of subintervals L1-L4, as shown in FIG. 19.
- the first set e.g., level L1 has one subinterval for each integer value.
- the subintervals can be represented by literal metawords, e.g., 1 -- 1, 2 -- 1, . . . , 56 -- 1, 57 -- 1, . . . , 70 -- 1, 71 -- 1, etc, where the first number represents the starting value, and the second number length of the interval.
- literal metawords e.g., 1 -- 1, 2 -- 1, . . . , 56 -- 1, 57 -- 1, . . . , 70 -- 1, 71 -- 1, etc.
- the next subset of intervals for example, the intervals of the level L2 shows a groups of adjacent subintervals of the previous set, e.g., level L1.
- the size of the subintervals doubles for each next set, until the entire interval is covered in one subinterval, e.g., 1, 2, 4, 8 etc.
- the combinations of the second level L2 can be represented by the metawords 2 -- 2, 4, -- 2, . . . , 56 -- 2, 58 -- 2, . . . , 70 -- 2, 71 -- 2, and so forth.
- a next set, level L3 can then be encoded by metawords representing the adjacent groups of the previous level 2 as 4 -- 4, 8 -- 3, . . . , 56 -- 3, 60 -- 3, 64 -- 3, 68 -- 3, size "four.” Additional levels can be encoded 8 -- 4, 16 -- 4, . . . , 56 -- 4, 64 -- 4, . . . , and so forth.
- the number of levels needed to encode a range of N integers, with doubling of sizes, is a function of log 2 N, where N is the number of possible rage-based integer values to be encoded.
- a word 1962 with a range attribute encodes the value of the word ("62") as follows. First, generate a location, word! pair as one normally would for any word, for example, the pair location, 61!. Second, generate range-based metawords pairs for all possible subintervals which include the word. For example, using FIG. 19 as a reference, the vertical line 1920 passes through the word "62" and all combinations which include word of levels L1-L4.
- the additional metaword pairs which will be generated include location, 62 -- 1!, location, 62 -- 2!, location, 60 -- 3!, and location, 56 -- 4!, all for the same location as the word "62".
- the word ("71") 1971 could be encoded as loc, 71!, loc, 71 -- 1!, loc, 70 -- 2!, loc, 68 -- 3!, and loc, 64 -- 4!, and so forth.
- the succeeding values for each level can be determined by bit shift and bit clear operations using the literal values.
- a range-based query specifies:
- the range "57-70" can be converted to a Boolean search for the range-based metawords in the desired range. That is, search the word entries corresponding the subintervals whose concatenation exactly spans the range of the search tenn. If the selected metawords which exactly span the range are minimized, then the search time is also minimized since a minimum number of f index stream readers need to be used.
- the metawords which are to be used for scanning the index are selected from the "bottom” level up.
- the metawords 57 -- 1, 58 -- 2, 60 -- 3, 64 -- 3, 68 -- 2, and 70 -- 1 exactly span the range "57-70" as shown by the cross hashing.
- uniform data structures and interfaces e.g., the index 70 and stream readers 60
- range-based searches benefit from the optimization improvements implemented for discrete-valued searches.
- the ISRs 60 produce a list of identified pages 200 which are qualified by the queries 52. Since the number of pages indexed by the search engine 140 can be rather large, it is not unusual that this list may include references to tens of thousands of pages. This is frequently the case for queries composed by novice users because of the rather imprecise nature in which their queries are composed.
- a modified collection frequency weighing technique can be used to rank the pages. Then, the list can be presented to the users in a rank order where the pages having a higher rank are presented first.
- each indexed word is assigned a weight w.
- a score W for a page is the sum of the weight w for each occurrence of a word specified in the query which also appears, or in the case of the NOT operator does not appear, in a qualified page. Thus, should a page include all words, a higher score W is produced. Also, should a word with a relatively high weight appear frequently in a qualified page, that page will receive a yet higher score. Low weight words will minimally contribute to the score of a page.
- a word weighing table 2000 can be maintained.
- the table 2000 contains an entry 2001 for each unique word 2010 of the index 70.
- Associated with each word 2010 is its weight w 2020, e.g., w(a), w(aa), and so forth.
- One way to determine the weight w of a word in the index 70 can be:
- N is the number of pages which contain a particular word to be weighed. Then, should a particular word, for example "the,” appear in almost every page, its weight w will be close to zero. Hence, commonly occurring words specified in a query will contribute negligibly to the total score or weight W of a qualified page, and pages including rare words will receive a relatively higher score.
- a query may include both common and rare words.
- a query is stated as:
- Finding the pages including the word “octopus” will proceed quickly. However, finding the pages which include the word “an” will require a substantial amount of processing because words such as "an” may appear at millions of locations.
- first and second related query word lists 2110 and 2120 are maintained for each query processed.
- the first list 2110 includes entries 2111-2116 for each word specified in a query, for example:
- the list 2110 initially includes an entry for every basic index stream reader which is used to read locations where the word x appears.
- a ranking list 2200 of qualified pages is maintained.
- the ranking list 2200 includes one entry 2201 for each qualified page.
- Each entry 2201 includes an identification (page -- id) 2210 of a qualified page, and a score (W) 2220 associated with the identified page.
- the entries 2201 are maintained in a rank order according to the scores 2220.
- the number of entries 2201 in the list 2200 can be limited to some predetermined number, for example, five hundred. This means that only the pages having the "top 500" scores will be presented to the user. It should be understood, that this number can vary, depending on a specific implementation, or perhaps, user supplied parameters.
- identifications 2210 and scores 2220 of qualified pages are entered into the list 2200 in W rank order.
- the ranking list 2200 contains 500 entries 2201.
- a determination can be made to see if it is possible for any of the words 2111-2116 of the first list 2210 having a relative low weight w, e.g., "an,” “in,” and “the” could possibly promote any as yet unqualified page to the "top 500" list 2200.
- the score of the lowest ranked page is 809,048, and the weight of the low weight words is about 0.0000001, then it is impossible for any of the low weight words to promote an as yet unidentified page to the "top 500" list 2200.
- the words with a low weight w e.g., "an” 2111, "in” 2114, and "the” 2115 of the list 2110 are deleted (X) from the first list 2110 and entered as entries 2121-2123 of the second list 2120.
- the scanning of the index can proceed with a focus on the words 2112, 2113, and 2115 remaining in the first list 2110.
- a page is subsequently qualified because it includes a highly weighted word, then the weights of the words of the second list 2120 are still taken into consideration in order to determine the correct score W of the page.
- index stream readers scanning for locations of low weight words will be disabled while first locating pages including words having a relatively high weight w. Partitioning words into multiple lists 2110 and 2120 according to their weight greatly improves the performance of the search engine 140.
- a statistical projection technique can be employed to accelerate the movement of low weight words from the first list 2110 to the second list 2120.
- the statistical projection is based on the assumption that in an extremely large index the relative frequency of occurrence of the various words over the pages is constant. For example, the frequency of occurrence of the words "the" in a first small fraction of the indexed pages 200 is the same as in the remaining pages.
- the following safety margin can be built into the statistical projection.
- a determination can be made to see if the top 500 list 2200 is at least, for example, 15% filled, e.g., the list 2200 includes at least 75 entries. This will make it highly likely that by the time the end of the index is reached, the ranking list 2200 could probably have about 2475 (100/3 ⁇ 75) entries. This number is much larger than 500. Consequently, moving words from the first list 2110 to the second list 2120 based on a small sample will more than likely produce the correct result, particularly if the "small" 3% sample is based on words indexed from perhaps a million pages or more.
- a further improvement can be made for queries which contain more than one word.
- determining the score for a qualified page based on the weights of a low frequency word also determine which words of the second list 2120 have not yet been detected in the page. Then, determine if the score would qualify the page for the top 500 list 2120 even if the page would include any or all of the low frequency words. If it would not, then the page can be discarded immediately without having to search for low weight words.
- the ranking of qualified pages for presentation to the users has been based on processing with the index stream reader isr -- E -- P. That is, the score for a particular qualified page is determined from the words having locations less than or equal to the location of a next END -- PAGE attribute, having a location greater than the location of a previous END -- PAGE. It is also possible to combine ranking operations with a Boolean query, that only pages or records that match the Boolean query are ranked.
- a frequent and slow to process query may include the terms Netscape 1.2.
- the parser 30 would parse the term 1.2 as two words separated by a punctuation mark (.). Because the words "1" and "2" separately will occur relatively frequently, a large number of locations will be associated with these words.
- the query module 50 has feed-back capabilities. This means, as an advantage, that the query module 50 itself can also generate new entries for the index 70. This feature can be implemented as follows.
- the query module 50 maintains a journal or logging file 2300 while operating.
- Each entry 2301 of the log 2300 records a phrase 2310, a location 2320 of the phrase, and the cost 2330 of processing the phrase.
- the log 2300 is processed.
- a new metaword is dynamically placed in the index 70.
- the metaword is a concatenation of the words of the phrase, for example, ⁇ 1.2 ⁇ .
- the location can be the location associated with the first word of the phrase.
- the parser 30 can also recognize entries placed in the index 70 by the query module 50, in addition to indexing the words of the phrase separately as it normally would. Therefore, as an advantage, the search engine 140 is self-optimizing in response to the query load.
- the search engine 140 is particularly suited for indexing a large number of information records, such as the many millions of pages 200 of the World Wide Web. Because there are so many pages, and because it relatively easy to copy pages, the same page may frequently appear at different addresses as "duplicate" pages.
- a duplicate page is defined as a page having a different address (URL), but having an identical fingerprint as a previously indexed "master" page. It is estimated that as many as 25% of the Web pages may be duplicates of other pages. Therefore, the search engine 140 is provided with means for economically handling duplicate pages.
- step 2410 of a process 2400 first determine the fingerprint 255 of the current page.
- step 2420 compare the fingerprint 255 of the current page with the fingerprints of previously indexed pages. Note, with the index structure 70 as described above, this is can be done by performing a search in the index 70 for the metaword which expresses the value of the fingerprint.
- the current page is different, and the current page can be parsed and indexed as a master page in step 2430. Otherwise, if the current page is a duplicate, e.g., it has the same content as a previously indexed page, then, generate the pairs, location, ⁇ FINGERPRINT ⁇ !, and location, ⁇ ADDRESS ⁇ ! in step 2440.
- the ⁇ FINGERPRINT ⁇ metaword can be recognizably marked to indicate that it is a duplicate, and not a master. Because only one copy of a master page is indexed, managing duplicate pages which are deleted, or no longer available, becomes a problem.
- FIG. 25 shows a process 2500 for deleting pages.
- step 2510 determine if the page to be deleted is a master page. If true, then generate a reissue request 2521 for the automated browser 20 of FIG. 2 using the address (URL) of the next recorded duplicate page. Then, in step 2530, promote the next duplicate page to be a master page.
- step 2540 generate a "deleted" metaword pair location, ⁇ DELETED ⁇ !, where location is the location of the last word of the page to be deleted. Otherwise, if false, e.i, this is not a master page, then in step 2550, determine if the page to be deleted is the next recorded duplicate of the page to be deleted and there is no master page, proceed with step 2520 if true. Otherwise, if false, proceed with step 2540.
- the intent of the reissue request 2521 is to retrieve a copy of the page to be deleted, then the content of the retrieved copy can be reindexed. Note that there may be several reissue requests outstanding for a particular deleted page. This is because the behavior of the Web is undeterministic.
- Requests may not be honored, sites storing copies of deleted pages may become unavailable, or the requests or replies to the requests are lost. Pages previously available may move behind a firewall at a later time. That is, delivery of pages over the Web is not guaranteed. Also, a duplicate page can be deleted before a copy of the master page can be successfully retrieved.
- FIG. 26 shows a procedure 2600 for correctly processing copies of pages received in response to reissue requests 2521 generated by the procedure 2500 of FIG. 25.
- step 2610 determine if there is a master for the copy. If false, then determine if the next duplicate of the copy is not deleted in step 2630. If true, then in step 2630, delete the duplicate page, and add the copy as the master in step 2640. If a master page already exists when the copy is retrieved, discard the copy in step 2650. This can happen when several reissue requests are generated before the master page is reconstructed.
Abstract
Description
C(a)≦C(b)±K,
C(a)≦C(b)+1, and
C(b)≦C(a)-1.
P(a)≦P(b)±K,
C(a)≦P(b)±K, or
P(a)≦C(b)±K,
C(b)≦C.sup.E (b)±K, or
P.sup.B (b)≦C(b)±K
C|P(a)≦C|P(b)±K,
P(E.sub.-- P)≦C(a)-1, and
C(a)≦C(E.sub.-- P), for word a, and
P(E.sub.-- P)≦C(b)-1, and
C(b)≦C(E.sub.-- P), for word b.
P(B.sub.-- T)≦C(c),
C(c)≦C(E.sub.-- T), and
C(E.sub.-- T)≦CE(B.sub.-- T).
C(a)≦C(b)+10, and
C(b)≦C(a)+10
find all pages containing both the words a and b; 1!
find all a where b is also in the same page; and 2!
find all b where a is also in the same page. 3!
C(a)≦C(b)+16384, and
C(b)≦C(a)+16384.
w=log P-log N,
Claims (1)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/694,919 US5797008A (en) | 1996-08-09 | 1996-08-09 | Memory storing an integrated index of database records |
US08/991,179 US6078923A (en) | 1996-08-09 | 1997-12-16 | Memory storing an integrated index of database records |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/694,919 US5797008A (en) | 1996-08-09 | 1996-08-09 | Memory storing an integrated index of database records |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/991,179 Continuation US6078923A (en) | 1996-08-09 | 1997-12-16 | Memory storing an integrated index of database records |
Publications (1)
Publication Number | Publication Date |
---|---|
US5797008A true US5797008A (en) | 1998-08-18 |
Family
ID=24790800
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/694,919 Expired - Lifetime US5797008A (en) | 1996-08-09 | 1996-08-09 | Memory storing an integrated index of database records |
US08/991,179 Expired - Lifetime US6078923A (en) | 1996-08-09 | 1997-12-16 | Memory storing an integrated index of database records |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/991,179 Expired - Lifetime US6078923A (en) | 1996-08-09 | 1997-12-16 | Memory storing an integrated index of database records |
Country Status (1)
Country | Link |
---|---|
US (2) | US5797008A (en) |
Cited By (139)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5903892A (en) * | 1996-05-24 | 1999-05-11 | Magnifi, Inc. | Indexing of media content on a network |
US5933832A (en) * | 1996-09-17 | 1999-08-03 | Kabushiki Kaisha Toshiba | Retrieval system for frequently updated data distributed on network |
US6125395A (en) * | 1999-10-04 | 2000-09-26 | Piiq.Com, Inc. | Method for identifying collections of internet web sites with domain names |
US6154156A (en) * | 1998-03-05 | 2000-11-28 | Nec Corporation | Message processing device and method thereof and storage medium storing message processing control program |
US6356908B1 (en) | 1999-07-30 | 2002-03-12 | International Business Machines Corporation | Automatic web page thumbnail generation |
US6370543B2 (en) | 1996-05-24 | 2002-04-09 | Magnifi, Inc. | Display of media previews |
US6374260B1 (en) | 1996-05-24 | 2002-04-16 | Magnifi, Inc. | Method and apparatus for uploading, indexing, analyzing, and searching media content |
US20020049781A1 (en) * | 2000-05-01 | 2002-04-25 | Bengtson Michael B. | Methods and apparatus for serving a web page to a client device based on printed publications and publisher controlled links |
US6405192B1 (en) | 1999-07-30 | 2002-06-11 | International Business Machines Corporation | Navigation assistant-method and apparatus for providing user configured complementary information for data browsing in a viewer context |
US20030046275A1 (en) * | 2001-09-06 | 2003-03-06 | International Business Machines Corporation | Method and system for searching for web content |
US6591289B1 (en) | 1999-07-27 | 2003-07-08 | The Standard Register Company | Method of delivering formatted documents over a communications network |
US20030221163A1 (en) * | 2002-02-22 | 2003-11-27 | Nec Laboratories America, Inc. | Using web structure for classifying and describing web pages |
US6665838B1 (en) | 1999-07-30 | 2003-12-16 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6738780B2 (en) * | 1998-01-05 | 2004-05-18 | Nec Laboratories America, Inc. | Autonomous citation indexing and literature browsing using citation context |
US20040143644A1 (en) * | 2003-01-21 | 2004-07-22 | Nec Laboratories America, Inc. | Meta-search engine architecture |
US20040158580A1 (en) * | 2001-12-19 | 2004-08-12 | David Carmel | Lossy index compression |
US6820094B1 (en) * | 1997-10-08 | 2004-11-16 | Scansoft, Inc. | Computer-based document management system |
US6865576B1 (en) * | 1999-05-21 | 2005-03-08 | International Business Machines Corporation | Efficient schema for storing multi-value attributes in a directory service backing store |
US20050165800A1 (en) * | 2004-01-26 | 2005-07-28 | Fontoura Marcus F. | Method, system, and program for handling redirects in a search engine |
US20060074962A1 (en) * | 2004-09-24 | 2006-04-06 | Fontoura Marcus F | Method, system, and program for searching documents for ranges of numeric values |
US7293005B2 (en) | 2004-01-26 | 2007-11-06 | International Business Machines Corporation | Pipelined architecture for global analysis and index building |
US7424467B2 (en) | 2004-01-26 | 2008-09-09 | International Business Machines Corporation | Architecture for an indexer with fixed width sort and variable width sort |
US20080284572A1 (en) * | 2007-05-14 | 2008-11-20 | Mitsuhiro Kimura | Data control system, control server, data control method, and program |
US7499913B2 (en) | 2004-01-26 | 2009-03-03 | International Business Machines Corporation | Method for handling anchor text |
US20100082545A1 (en) * | 2008-09-30 | 2010-04-01 | International Business Machines Corporation | Compression of sorted value indexes using common prefixes |
US20100235780A1 (en) * | 2009-03-16 | 2010-09-16 | Westerman Wayne C | System and Method for Identifying Words Based on a Sequence of Keyboard Events |
US8417693B2 (en) | 2005-07-14 | 2013-04-09 | International Business Machines Corporation | Enforcing native access control to indexed documents |
US8892446B2 (en) | 2010-01-18 | 2014-11-18 | Apple Inc. | Service orchestration for intelligent automated assistant |
US8994660B2 (en) | 2011-08-29 | 2015-03-31 | Apple Inc. | Text correction processing |
US9086802B2 (en) | 2008-01-09 | 2015-07-21 | Apple Inc. | Method, device, and graphical user interface providing word recommendations for text input |
US9189079B2 (en) | 2007-01-05 | 2015-11-17 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US9262612B2 (en) | 2011-03-21 | 2016-02-16 | Apple Inc. | Device access using voice authentication |
US9300784B2 (en) | 2013-06-13 | 2016-03-29 | Apple Inc. | System and method for emergency calls initiated by voice command |
US9330720B2 (en) | 2008-01-03 | 2016-05-03 | Apple Inc. | Methods and apparatus for altering audio output signals |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US9368114B2 (en) | 2013-03-14 | 2016-06-14 | Apple Inc. | Context-sensitive handling of interruptions |
US9430463B2 (en) | 2014-05-30 | 2016-08-30 | Apple Inc. | Exemplar-based natural language processing |
US9483461B2 (en) | 2012-03-06 | 2016-11-01 | Apple Inc. | Handling speech synthesis of content for multiple languages |
US9495129B2 (en) | 2012-06-29 | 2016-11-15 | Apple Inc. | Device, method, and user interface for voice-activated navigation and browsing of a document |
US9502031B2 (en) | 2014-05-27 | 2016-11-22 | Apple Inc. | Method for supporting dynamic grammars in WFST-based ASR |
US9535906B2 (en) | 2008-07-31 | 2017-01-03 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US9576574B2 (en) | 2012-09-10 | 2017-02-21 | Apple Inc. | Context-sensitive handling of interruptions by intelligent digital assistant |
US9582608B2 (en) | 2013-06-07 | 2017-02-28 | Apple Inc. | Unified ranking with entropy-weighted information for phrase-based semantic auto-completion |
US9620105B2 (en) | 2014-05-15 | 2017-04-11 | Apple Inc. | Analyzing audio input for efficient speech and music recognition |
US9620104B2 (en) | 2013-06-07 | 2017-04-11 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9626955B2 (en) | 2008-04-05 | 2017-04-18 | Apple Inc. | Intelligent text-to-speech conversion |
US9633674B2 (en) | 2013-06-07 | 2017-04-25 | Apple Inc. | System and method for detecting errors in interactions with a voice-based digital assistant |
US9633660B2 (en) | 2010-02-25 | 2017-04-25 | Apple Inc. | User profiling for voice input processing |
US9633004B2 (en) | 2014-05-30 | 2017-04-25 | Apple Inc. | Better resolution when referencing to concepts |
US9646609B2 (en) | 2014-09-30 | 2017-05-09 | Apple Inc. | Caching apparatus for serving phonetic pronunciations |
US9646614B2 (en) | 2000-03-16 | 2017-05-09 | Apple Inc. | Fast, language-independent method for user authentication by voice |
US9668121B2 (en) | 2014-09-30 | 2017-05-30 | Apple Inc. | Social reminders |
US9697820B2 (en) | 2015-09-24 | 2017-07-04 | Apple Inc. | Unit-selection text-to-speech synthesis using concatenation-sensitive neural networks |
US9697822B1 (en) | 2013-03-15 | 2017-07-04 | Apple Inc. | System and method for updating an adaptive speech recognition model |
US9711141B2 (en) | 2014-12-09 | 2017-07-18 | Apple Inc. | Disambiguating heteronyms in speech synthesis |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US9721566B2 (en) | 2015-03-08 | 2017-08-01 | Apple Inc. | Competing devices responding to voice triggers |
US9734193B2 (en) | 2014-05-30 | 2017-08-15 | Apple Inc. | Determining domain salience ranking from ambiguous words in natural speech |
US9760559B2 (en) | 2014-05-30 | 2017-09-12 | Apple Inc. | Predictive text input |
US9785630B2 (en) | 2014-05-30 | 2017-10-10 | Apple Inc. | Text prediction using combined word N-gram and unigram language models |
US9818400B2 (en) | 2014-09-11 | 2017-11-14 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US9842105B2 (en) | 2015-04-16 | 2017-12-12 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
US9842101B2 (en) | 2014-05-30 | 2017-12-12 | Apple Inc. | Predictive conversion of language input |
US9858925B2 (en) | 2009-06-05 | 2018-01-02 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US9865280B2 (en) | 2015-03-06 | 2018-01-09 | Apple Inc. | Structured dictation using intelligent automated assistants |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US9886432B2 (en) | 2014-09-30 | 2018-02-06 | Apple Inc. | Parsimonious handling of word inflection via categorical stem + suffix N-gram language models |
US9899019B2 (en) | 2015-03-18 | 2018-02-20 | Apple Inc. | Systems and methods for structured stem and suffix language models |
US9922642B2 (en) | 2013-03-15 | 2018-03-20 | Apple Inc. | Training an at least partial voice command system |
US9934775B2 (en) | 2016-05-26 | 2018-04-03 | Apple Inc. | Unit-selection text-to-speech synthesis based on predicted concatenation parameters |
US9953088B2 (en) | 2012-05-14 | 2018-04-24 | Apple Inc. | Crowd sourcing information to fulfill user requests |
US9959870B2 (en) | 2008-12-11 | 2018-05-01 | Apple Inc. | Speech recognition involving a mobile device |
US9966068B2 (en) | 2013-06-08 | 2018-05-08 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US9966065B2 (en) | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US9972304B2 (en) | 2016-06-03 | 2018-05-15 | Apple Inc. | Privacy preserving distributed evaluation framework for embedded personalized systems |
US9971774B2 (en) | 2012-09-19 | 2018-05-15 | Apple Inc. | Voice-based media searching |
US10049663B2 (en) | 2016-06-08 | 2018-08-14 | Apple, Inc. | Intelligent automated assistant for media exploration |
US10049668B2 (en) | 2015-12-02 | 2018-08-14 | Apple Inc. | Applying neural network language models to weighted finite state transducers for automatic speech recognition |
US10057736B2 (en) | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US10067938B2 (en) | 2016-06-10 | 2018-09-04 | Apple Inc. | Multilingual word prediction |
US10074360B2 (en) | 2014-09-30 | 2018-09-11 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US10078631B2 (en) | 2014-05-30 | 2018-09-18 | Apple Inc. | Entropy-guided text prediction using combined word and character n-gram language models |
US10079014B2 (en) | 2012-06-08 | 2018-09-18 | Apple Inc. | Name recognition system |
US10083688B2 (en) | 2015-05-27 | 2018-09-25 | Apple Inc. | Device voice control for selecting a displayed affordance |
US10089072B2 (en) | 2016-06-11 | 2018-10-02 | Apple Inc. | Intelligent device arbitration and control |
US10101822B2 (en) | 2015-06-05 | 2018-10-16 | Apple Inc. | Language input correction |
US10127220B2 (en) | 2015-06-04 | 2018-11-13 | Apple Inc. | Language identification from short strings |
US10127911B2 (en) | 2014-09-30 | 2018-11-13 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US10134385B2 (en) | 2012-03-02 | 2018-11-20 | Apple Inc. | Systems and methods for name pronunciation |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US10176167B2 (en) | 2013-06-09 | 2019-01-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
US10185542B2 (en) | 2013-06-09 | 2019-01-22 | Apple Inc. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US10186254B2 (en) | 2015-06-07 | 2019-01-22 | Apple Inc. | Context-based endpoint detection |
US10192552B2 (en) | 2016-06-10 | 2019-01-29 | Apple Inc. | Digital assistant providing whispered speech |
US10199051B2 (en) | 2013-02-07 | 2019-02-05 | Apple Inc. | Voice trigger for a digital assistant |
US10223066B2 (en) | 2015-12-23 | 2019-03-05 | Apple Inc. | Proactive assistance based on dialog communication between devices |
US10241644B2 (en) | 2011-06-03 | 2019-03-26 | Apple Inc. | Actionable reminder entries |
US10241752B2 (en) | 2011-09-30 | 2019-03-26 | Apple Inc. | Interface for a virtual digital assistant |
US10249300B2 (en) | 2016-06-06 | 2019-04-02 | Apple Inc. | Intelligent list reading |
US10255907B2 (en) | 2015-06-07 | 2019-04-09 | Apple Inc. | Automatic accent detection using acoustic models |
US10269345B2 (en) | 2016-06-11 | 2019-04-23 | Apple Inc. | Intelligent task discovery |
US10276170B2 (en) | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US10283110B2 (en) | 2009-07-02 | 2019-05-07 | Apple Inc. | Methods and apparatuses for automatic speech recognition |
US10289433B2 (en) | 2014-05-30 | 2019-05-14 | Apple Inc. | Domain specific language for encoding assistant dialog |
US10297253B2 (en) | 2016-06-11 | 2019-05-21 | Apple Inc. | Application integration with a digital assistant |
US10318871B2 (en) | 2005-09-08 | 2019-06-11 | Apple Inc. | Method and apparatus for building an intelligent automated assistant |
US10354011B2 (en) | 2016-06-09 | 2019-07-16 | Apple Inc. | Intelligent automated assistant in a home environment |
US10366158B2 (en) | 2015-09-29 | 2019-07-30 | Apple Inc. | Efficient word encoding for recurrent neural network language models |
US10446143B2 (en) | 2016-03-14 | 2019-10-15 | Apple Inc. | Identification of voice inputs providing credentials |
US10446141B2 (en) | 2014-08-28 | 2019-10-15 | Apple Inc. | Automatic speech recognition based on user feedback |
CN110442705A (en) * | 2019-04-23 | 2019-11-12 | 北京理工大学 | A kind of abstract automatic generation method based on conceptual hands network |
US10490187B2 (en) | 2016-06-10 | 2019-11-26 | Apple Inc. | Digital assistant providing automated status report |
US10496753B2 (en) | 2010-01-18 | 2019-12-03 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10509862B2 (en) | 2016-06-10 | 2019-12-17 | Apple Inc. | Dynamic phrase expansion of language input |
US10521466B2 (en) | 2016-06-11 | 2019-12-31 | Apple Inc. | Data driven natural language event detection and classification |
US10552013B2 (en) | 2014-12-02 | 2020-02-04 | Apple Inc. | Data detection |
US10553209B2 (en) | 2010-01-18 | 2020-02-04 | Apple Inc. | Systems and methods for hands-free notification summaries |
US10568032B2 (en) | 2007-04-03 | 2020-02-18 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US10567477B2 (en) | 2015-03-08 | 2020-02-18 | Apple Inc. | Virtual assistant continuity |
US10573189B2 (en) * | 2003-10-01 | 2020-02-25 | Kenneth Nathaniel Sherman | Reading and information enhancement system and method |
US10593346B2 (en) | 2016-12-22 | 2020-03-17 | Apple Inc. | Rank-reduced token representation for automatic speech recognition |
US10592095B2 (en) | 2014-05-23 | 2020-03-17 | Apple Inc. | Instantaneous speaking of content on touch devices |
US10607140B2 (en) | 2010-01-25 | 2020-03-31 | Newvaluexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US10659851B2 (en) | 2014-06-30 | 2020-05-19 | Apple Inc. | Real-time digital assistant knowledge updates |
US10671428B2 (en) | 2015-09-08 | 2020-06-02 | Apple Inc. | Distributed personal assistant |
US10679605B2 (en) | 2010-01-18 | 2020-06-09 | Apple Inc. | Hands-free list-reading by intelligent automated assistant |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10706373B2 (en) | 2011-06-03 | 2020-07-07 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US10705794B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10733993B2 (en) | 2016-06-10 | 2020-08-04 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US10762293B2 (en) | 2010-12-22 | 2020-09-01 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US10791216B2 (en) | 2013-08-06 | 2020-09-29 | Apple Inc. | Auto-activating smart responses based on activities from remote devices |
US10791176B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US10789041B2 (en) | 2014-09-12 | 2020-09-29 | Apple Inc. | Dynamic thresholds for always listening speech trigger |
US10810274B2 (en) | 2017-05-15 | 2020-10-20 | Apple Inc. | Optimizing dialogue policy decisions for digital assistants using implicit feedback |
US11010550B2 (en) | 2015-09-29 | 2021-05-18 | Apple Inc. | Unified language modeling framework for word prediction, auto-completion and auto-correction |
US11025565B2 (en) | 2015-06-07 | 2021-06-01 | Apple Inc. | Personalized prediction of responses for instant messaging |
US11587559B2 (en) | 2015-09-30 | 2023-02-21 | Apple Inc. | Intelligent device identification |
Families Citing this family (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6216123B1 (en) * | 1998-06-24 | 2001-04-10 | Novell, Inc. | Method and system for rapid retrieval in a full text indexing system |
US6463439B1 (en) * | 1999-07-15 | 2002-10-08 | American Management Systems, Incorporated | System for accessing database tables mapped into memory for high performance data retrieval |
CA2387653C (en) * | 1999-08-13 | 2006-11-14 | Fujitsu Limited | File processing method, data processing device and storage medium |
US20040225865A1 (en) * | 1999-09-03 | 2004-11-11 | Cox Richard D. | Integrated database indexing system |
US7711738B1 (en) * | 1999-11-15 | 2010-05-04 | West Services, Inc. | Method, system and computer-readable medium for accessing and retrieving court records, items and documents |
US6961900B1 (en) * | 2000-08-28 | 2005-11-01 | Microsoft Corporation | Rendering data according to a present schema from an origin response message |
EP1211611A1 (en) * | 2000-11-29 | 2002-06-05 | Lafayette Software Inc. | Methods of encoding and combining integer lists |
US6778977B1 (en) * | 2001-04-19 | 2004-08-17 | Microsoft Corporation | Method and system for creating a database table index using multiple processors |
US20030083958A1 (en) | 2001-06-08 | 2003-05-01 | Jinshan Song | System and method for retrieving information from an electronic catalog |
US9230256B2 (en) * | 2001-06-08 | 2016-01-05 | W. W. Grainger, Inc. | System and method for electronically creating a customized catalog |
WO2002101590A2 (en) * | 2001-06-08 | 2002-12-19 | W.W. Grainger, Inc. | System and method for retrieving information from an electronic catalog |
GB2379526A (en) * | 2001-09-10 | 2003-03-12 | Simon Alan Spacey | A method and apparatus for indexing and searching data |
JP2003141158A (en) * | 2001-11-06 | 2003-05-16 | Fujitsu Ltd | Retrieval device and method using pattern under consideration of sequence |
US7454696B2 (en) * | 2004-04-09 | 2008-11-18 | International Business Machines Corporation | Method and apparatus for stream based markup language post-processing |
JP2005214779A (en) * | 2004-01-29 | 2005-08-11 | Xanavi Informatics Corp | Navigation system and method for updating map data |
US7653643B2 (en) * | 2005-03-24 | 2010-01-26 | Microsoft Corporation | Method and apparatus for compressing a data set |
US20060277170A1 (en) * | 2005-06-06 | 2006-12-07 | Paul Watry | Digital library system |
US7840774B2 (en) * | 2005-09-09 | 2010-11-23 | International Business Machines Corporation | Compressibility checking avoidance |
US7882084B1 (en) | 2005-12-30 | 2011-02-01 | F5 Networks, Inc. | Compression of data transmitted over a network |
US20090055436A1 (en) * | 2007-08-20 | 2009-02-26 | Olakunle Olaniyi Ayeni | System and Method for Integrating on Demand/Pull and Push Flow of Goods-and-Services Meta-Data, Including Coupon and Advertising, with Mobile and Wireless Applications |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5235578A (en) * | 1987-09-30 | 1993-08-10 | Deutsche Thomson-Brandt Gmbh | Method for reducing access time in a CD-player with a memory by storing compressed index data |
US5264848A (en) * | 1992-01-14 | 1993-11-23 | Honeywell Inc. | Data compression/decompression with aliasing error reduction |
US5270712A (en) * | 1992-04-02 | 1993-12-14 | International Business Machines Corporation | Sort order preserving method for data storage compression |
US5274805A (en) * | 1990-01-19 | 1993-12-28 | Amalgamated Software Of North America, Inc. | Method of sorting and compressing data |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5764974A (en) * | 1995-08-30 | 1998-06-09 | Unisys Corporation | System with user specified pattern definitions for matching input messages and associated decisions for conditionally responding to the input messages |
US5794239A (en) * | 1995-08-30 | 1998-08-11 | Unisys Corporation | Apparatus and method for message matching using pattern decisions in a message matching and automatic response system |
US5758353A (en) * | 1995-12-01 | 1998-05-26 | Sand Technology Systems International, Inc. | Storage and retrieval of ordered sets of keys in a compact 0-complete tree |
-
1996
- 1996-08-09 US US08/694,919 patent/US5797008A/en not_active Expired - Lifetime
-
1997
- 1997-12-16 US US08/991,179 patent/US6078923A/en not_active Expired - Lifetime
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5235578A (en) * | 1987-09-30 | 1993-08-10 | Deutsche Thomson-Brandt Gmbh | Method for reducing access time in a CD-player with a memory by storing compressed index data |
US5274805A (en) * | 1990-01-19 | 1993-12-28 | Amalgamated Software Of North America, Inc. | Method of sorting and compressing data |
US5264848A (en) * | 1992-01-14 | 1993-11-23 | Honeywell Inc. | Data compression/decompression with aliasing error reduction |
US5270712A (en) * | 1992-04-02 | 1993-12-14 | International Business Machines Corporation | Sort order preserving method for data storage compression |
Non-Patent Citations (6)
Title |
---|
"A Universal Data-Base for Data Compression" Murama Tsu and Kanaya IEEE/IEE Publications, 1995 Month Not Avail. |
"Exploition Clustering in Inverted File Compression " Moffat and Stuiver IEEE/IEE Publications, 1996 Month Not Avail. |
"Index Compression Methord with Compressed Mode Boolean Operators" Millett and Ivie IEEE/IEE Publications, 1991 Month Not Avail. |
A Universal Data Base for Data Compression Murama Tsu and Kanaya IEEE/IEE Publications, 1995 Month Not Avail. * |
Exploition Clustering in Inverted File Compression Moffat and Stuiver IEEE/IEE Publications, 1996 Month Not Avail. * |
Index Compression Methord with Compressed Mode Boolean Operators Millett and Ivie IEEE/IEE Publications, 1991 Month Not Avail. * |
Cited By (212)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5903892A (en) * | 1996-05-24 | 1999-05-11 | Magnifi, Inc. | Indexing of media content on a network |
US6282549B1 (en) | 1996-05-24 | 2001-08-28 | Magnifi, Inc. | Indexing of media content on a network |
US6370543B2 (en) | 1996-05-24 | 2002-04-09 | Magnifi, Inc. | Display of media previews |
US6374260B1 (en) | 1996-05-24 | 2002-04-16 | Magnifi, Inc. | Method and apparatus for uploading, indexing, analyzing, and searching media content |
US5933832A (en) * | 1996-09-17 | 1999-08-03 | Kabushiki Kaisha Toshiba | Retrieval system for frequently updated data distributed on network |
US6820094B1 (en) * | 1997-10-08 | 2004-11-16 | Scansoft, Inc. | Computer-based document management system |
US6738780B2 (en) * | 1998-01-05 | 2004-05-18 | Nec Laboratories America, Inc. | Autonomous citation indexing and literature browsing using citation context |
AU756264B2 (en) * | 1998-03-05 | 2003-01-09 | Nec Corporation | Message processing device and method thereof and storage medium storing message processing control program |
US6154156A (en) * | 1998-03-05 | 2000-11-28 | Nec Corporation | Message processing device and method thereof and storage medium storing message processing control program |
US6865576B1 (en) * | 1999-05-21 | 2005-03-08 | International Business Machines Corporation | Efficient schema for storing multi-value attributes in a directory service backing store |
US6591289B1 (en) | 1999-07-27 | 2003-07-08 | The Standard Register Company | Method of delivering formatted documents over a communications network |
US6886025B1 (en) | 1999-07-27 | 2005-04-26 | The Standard Register Company | Method of delivering formatted documents over a communications network |
US6356908B1 (en) | 1999-07-30 | 2002-03-12 | International Business Machines Corporation | Automatic web page thumbnail generation |
US7073121B2 (en) | 1999-07-30 | 2006-07-04 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6665838B1 (en) | 1999-07-30 | 2003-12-16 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US20040064471A1 (en) * | 1999-07-30 | 2004-04-01 | Brown Michael Wayne | Web page thumbnails and user configured complementary information provided from a server |
US7840894B2 (en) | 1999-07-30 | 2010-11-23 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6405192B1 (en) | 1999-07-30 | 2002-06-11 | International Business Machines Corporation | Navigation assistant-method and apparatus for providing user configured complementary information for data browsing in a viewer context |
US7167875B2 (en) | 1999-07-30 | 2007-01-23 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6125395A (en) * | 1999-10-04 | 2000-09-26 | Piiq.Com, Inc. | Method for identifying collections of internet web sites with domain names |
US9646614B2 (en) | 2000-03-16 | 2017-05-09 | Apple Inc. | Fast, language-independent method for user authentication by voice |
US20020049781A1 (en) * | 2000-05-01 | 2002-04-25 | Bengtson Michael B. | Methods and apparatus for serving a web page to a client device based on printed publications and publisher controlled links |
US6778988B2 (en) * | 2000-05-01 | 2004-08-17 | R.R. Donnelley & Sons Company | Method and apparatus for delivering a web page to a client device based on printed publications and publisher controlled links |
US20030046275A1 (en) * | 2001-09-06 | 2003-03-06 | International Business Machines Corporation | Method and system for searching for web content |
US7089233B2 (en) | 2001-09-06 | 2006-08-08 | International Business Machines Corporation | Method and system for searching for web content |
US7356527B2 (en) * | 2001-12-19 | 2008-04-08 | International Business Machines Corporation | Lossy index compression |
US20040158580A1 (en) * | 2001-12-19 | 2004-08-12 | David Carmel | Lossy index compression |
US20030221163A1 (en) * | 2002-02-22 | 2003-11-27 | Nec Laboratories America, Inc. | Using web structure for classifying and describing web pages |
US20040143644A1 (en) * | 2003-01-21 | 2004-07-22 | Nec Laboratories America, Inc. | Meta-search engine architecture |
US10573189B2 (en) * | 2003-10-01 | 2020-02-25 | Kenneth Nathaniel Sherman | Reading and information enhancement system and method |
US7743060B2 (en) | 2004-01-26 | 2010-06-22 | International Business Machines Corporation | Architecture for an indexer |
US7424467B2 (en) | 2004-01-26 | 2008-09-09 | International Business Machines Corporation | Architecture for an indexer with fixed width sort and variable width sort |
US20050165800A1 (en) * | 2004-01-26 | 2005-07-28 | Fontoura Marcus F. | Method, system, and program for handling redirects in a search engine |
US8296304B2 (en) | 2004-01-26 | 2012-10-23 | International Business Machines Corporation | Method, system, and program for handling redirects in a search engine |
US8285724B2 (en) | 2004-01-26 | 2012-10-09 | International Business Machines Corporation | System and program for handling anchor text |
US20070282829A1 (en) * | 2004-01-26 | 2007-12-06 | International Business Machines Corporation | Pipelined architecture for global analysis and index building |
US7499913B2 (en) | 2004-01-26 | 2009-03-03 | International Business Machines Corporation | Method for handling anchor text |
US20090083270A1 (en) * | 2004-01-26 | 2009-03-26 | International Business Machines Corporation | System and program for handling anchor text |
US7783626B2 (en) | 2004-01-26 | 2010-08-24 | International Business Machines Corporation | Pipelined architecture for global analysis and index building |
US7293005B2 (en) | 2004-01-26 | 2007-11-06 | International Business Machines Corporation | Pipelined architecture for global analysis and index building |
US20060074962A1 (en) * | 2004-09-24 | 2006-04-06 | Fontoura Marcus F | Method, system, and program for searching documents for ranges of numeric values |
US20080301130A1 (en) * | 2004-09-24 | 2008-12-04 | International Business Machines Corporation | Method, system and article of manufacture for searching documents for ranges of numeric values |
US8655888B2 (en) | 2004-09-24 | 2014-02-18 | International Business Machines Corporation | Searching documents for ranges of numeric values |
US8271498B2 (en) | 2004-09-24 | 2012-09-18 | International Business Machines Corporation | Searching documents for ranges of numeric values |
US7461064B2 (en) | 2004-09-24 | 2008-12-02 | International Buiness Machines Corporation | Method for searching documents for ranges of numeric values |
US20080294634A1 (en) * | 2004-09-24 | 2008-11-27 | International Business Machines Corporation | System and article of manufacture for searching documents for ranges of numeric values |
US8346759B2 (en) | 2004-09-24 | 2013-01-01 | International Business Machines Corporation | Searching documents for ranges of numeric values |
US8417693B2 (en) | 2005-07-14 | 2013-04-09 | International Business Machines Corporation | Enforcing native access control to indexed documents |
US10318871B2 (en) | 2005-09-08 | 2019-06-11 | Apple Inc. | Method and apparatus for building an intelligent automated assistant |
US8942986B2 (en) | 2006-09-08 | 2015-01-27 | Apple Inc. | Determining user intent based on ontologies of domains |
US8930191B2 (en) | 2006-09-08 | 2015-01-06 | Apple Inc. | Paraphrasing of user requests and results by automated digital assistant |
US9117447B2 (en) | 2006-09-08 | 2015-08-25 | Apple Inc. | Using event alert text as input to an automated assistant |
US10592100B2 (en) | 2007-01-05 | 2020-03-17 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US9244536B2 (en) | 2007-01-05 | 2016-01-26 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US11112968B2 (en) | 2007-01-05 | 2021-09-07 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US11416141B2 (en) | 2007-01-05 | 2022-08-16 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US9189079B2 (en) | 2007-01-05 | 2015-11-17 | Apple Inc. | Method, system, and graphical user interface for providing word recommendations |
US10568032B2 (en) | 2007-04-03 | 2020-02-18 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US20080284572A1 (en) * | 2007-05-14 | 2008-11-20 | Mitsuhiro Kimura | Data control system, control server, data control method, and program |
US9330720B2 (en) | 2008-01-03 | 2016-05-03 | Apple Inc. | Methods and apparatus for altering audio output signals |
US10381016B2 (en) | 2008-01-03 | 2019-08-13 | Apple Inc. | Methods and apparatus for altering audio output signals |
US11079933B2 (en) | 2008-01-09 | 2021-08-03 | Apple Inc. | Method, device, and graphical user interface providing word recommendations for text input |
US9086802B2 (en) | 2008-01-09 | 2015-07-21 | Apple Inc. | Method, device, and graphical user interface providing word recommendations for text input |
US11474695B2 (en) | 2008-01-09 | 2022-10-18 | Apple Inc. | Method, device, and graphical user interface providing word recommendations for text input |
US9626955B2 (en) | 2008-04-05 | 2017-04-18 | Apple Inc. | Intelligent text-to-speech conversion |
US9865248B2 (en) | 2008-04-05 | 2018-01-09 | Apple Inc. | Intelligent text-to-speech conversion |
US10108612B2 (en) | 2008-07-31 | 2018-10-23 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US9535906B2 (en) | 2008-07-31 | 2017-01-03 | Apple Inc. | Mobile device having human language translation capability with positional feedback |
US20100082545A1 (en) * | 2008-09-30 | 2010-04-01 | International Business Machines Corporation | Compression of sorted value indexes using common prefixes |
US8255398B2 (en) | 2008-09-30 | 2012-08-28 | International Business Machines Corporation | Compression of sorted value indexes using common prefixes |
US9959870B2 (en) | 2008-12-11 | 2018-05-01 | Apple Inc. | Speech recognition involving a mobile device |
US20100235780A1 (en) * | 2009-03-16 | 2010-09-16 | Westerman Wayne C | System and Method for Identifying Words Based on a Sequence of Keyboard Events |
US9858925B2 (en) | 2009-06-05 | 2018-01-02 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US10795541B2 (en) | 2009-06-05 | 2020-10-06 | Apple Inc. | Intelligent organization of tasks items |
US10475446B2 (en) | 2009-06-05 | 2019-11-12 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US11080012B2 (en) | 2009-06-05 | 2021-08-03 | Apple Inc. | Interface for a virtual digital assistant |
US10283110B2 (en) | 2009-07-02 | 2019-05-07 | Apple Inc. | Methods and apparatuses for automatic speech recognition |
US9318108B2 (en) | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
US10496753B2 (en) | 2010-01-18 | 2019-12-03 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US8892446B2 (en) | 2010-01-18 | 2014-11-18 | Apple Inc. | Service orchestration for intelligent automated assistant |
US10679605B2 (en) | 2010-01-18 | 2020-06-09 | Apple Inc. | Hands-free list-reading by intelligent automated assistant |
US10276170B2 (en) | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US10553209B2 (en) | 2010-01-18 | 2020-02-04 | Apple Inc. | Systems and methods for hands-free notification summaries |
US9548050B2 (en) | 2010-01-18 | 2017-01-17 | Apple Inc. | Intelligent automated assistant |
US8903716B2 (en) | 2010-01-18 | 2014-12-02 | Apple Inc. | Personalized vocabulary for digital assistant |
US10706841B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Task flow identification based on user intent |
US11423886B2 (en) | 2010-01-18 | 2022-08-23 | Apple Inc. | Task flow identification based on user intent |
US10705794B2 (en) | 2010-01-18 | 2020-07-07 | Apple Inc. | Automatically adapting user interfaces for hands-free interaction |
US10984326B2 (en) | 2010-01-25 | 2021-04-20 | Newvaluexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US10984327B2 (en) | 2010-01-25 | 2021-04-20 | New Valuexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US10607141B2 (en) | 2010-01-25 | 2020-03-31 | Newvaluexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US10607140B2 (en) | 2010-01-25 | 2020-03-31 | Newvaluexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US11410053B2 (en) | 2010-01-25 | 2022-08-09 | Newvaluexchange Ltd. | Apparatuses, methods and systems for a digital conversation management platform |
US9633660B2 (en) | 2010-02-25 | 2017-04-25 | Apple Inc. | User profiling for voice input processing |
US10049675B2 (en) | 2010-02-25 | 2018-08-14 | Apple Inc. | User profiling for voice input processing |
US10762293B2 (en) | 2010-12-22 | 2020-09-01 | Apple Inc. | Using parts-of-speech tagging and named entity recognition for spelling correction |
US9262612B2 (en) | 2011-03-21 | 2016-02-16 | Apple Inc. | Device access using voice authentication |
US10102359B2 (en) | 2011-03-21 | 2018-10-16 | Apple Inc. | Device access using voice authentication |
US10241644B2 (en) | 2011-06-03 | 2019-03-26 | Apple Inc. | Actionable reminder entries |
US10706373B2 (en) | 2011-06-03 | 2020-07-07 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US10057736B2 (en) | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US11120372B2 (en) | 2011-06-03 | 2021-09-14 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US9798393B2 (en) | 2011-08-29 | 2017-10-24 | Apple Inc. | Text correction processing |
US8994660B2 (en) | 2011-08-29 | 2015-03-31 | Apple Inc. | Text correction processing |
US10241752B2 (en) | 2011-09-30 | 2019-03-26 | Apple Inc. | Interface for a virtual digital assistant |
US10134385B2 (en) | 2012-03-02 | 2018-11-20 | Apple Inc. | Systems and methods for name pronunciation |
US9483461B2 (en) | 2012-03-06 | 2016-11-01 | Apple Inc. | Handling speech synthesis of content for multiple languages |
US9953088B2 (en) | 2012-05-14 | 2018-04-24 | Apple Inc. | Crowd sourcing information to fulfill user requests |
US10079014B2 (en) | 2012-06-08 | 2018-09-18 | Apple Inc. | Name recognition system |
US9495129B2 (en) | 2012-06-29 | 2016-11-15 | Apple Inc. | Device, method, and user interface for voice-activated navigation and browsing of a document |
US9576574B2 (en) | 2012-09-10 | 2017-02-21 | Apple Inc. | Context-sensitive handling of interruptions by intelligent digital assistant |
US9971774B2 (en) | 2012-09-19 | 2018-05-15 | Apple Inc. | Voice-based media searching |
US10978090B2 (en) | 2013-02-07 | 2021-04-13 | Apple Inc. | Voice trigger for a digital assistant |
US10199051B2 (en) | 2013-02-07 | 2019-02-05 | Apple Inc. | Voice trigger for a digital assistant |
US9368114B2 (en) | 2013-03-14 | 2016-06-14 | Apple Inc. | Context-sensitive handling of interruptions |
US9922642B2 (en) | 2013-03-15 | 2018-03-20 | Apple Inc. | Training an at least partial voice command system |
US9697822B1 (en) | 2013-03-15 | 2017-07-04 | Apple Inc. | System and method for updating an adaptive speech recognition model |
US9620104B2 (en) | 2013-06-07 | 2017-04-11 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9582608B2 (en) | 2013-06-07 | 2017-02-28 | Apple Inc. | Unified ranking with entropy-weighted information for phrase-based semantic auto-completion |
US9966060B2 (en) | 2013-06-07 | 2018-05-08 | Apple Inc. | System and method for user-specified pronunciation of words for speech synthesis and recognition |
US9633674B2 (en) | 2013-06-07 | 2017-04-25 | Apple Inc. | System and method for detecting errors in interactions with a voice-based digital assistant |
US9966068B2 (en) | 2013-06-08 | 2018-05-08 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US10657961B2 (en) | 2013-06-08 | 2020-05-19 | Apple Inc. | Interpreting and acting upon commands that involve sharing information with remote devices |
US10176167B2 (en) | 2013-06-09 | 2019-01-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
US10185542B2 (en) | 2013-06-09 | 2019-01-22 | Apple Inc. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US9300784B2 (en) | 2013-06-13 | 2016-03-29 | Apple Inc. | System and method for emergency calls initiated by voice command |
US10791216B2 (en) | 2013-08-06 | 2020-09-29 | Apple Inc. | Auto-activating smart responses based on activities from remote devices |
US9620105B2 (en) | 2014-05-15 | 2017-04-11 | Apple Inc. | Analyzing audio input for efficient speech and music recognition |
US10592095B2 (en) | 2014-05-23 | 2020-03-17 | Apple Inc. | Instantaneous speaking of content on touch devices |
US9502031B2 (en) | 2014-05-27 | 2016-11-22 | Apple Inc. | Method for supporting dynamic grammars in WFST-based ASR |
US10289433B2 (en) | 2014-05-30 | 2019-05-14 | Apple Inc. | Domain specific language for encoding assistant dialog |
US9633004B2 (en) | 2014-05-30 | 2017-04-25 | Apple Inc. | Better resolution when referencing to concepts |
US9430463B2 (en) | 2014-05-30 | 2016-08-30 | Apple Inc. | Exemplar-based natural language processing |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US10078631B2 (en) | 2014-05-30 | 2018-09-18 | Apple Inc. | Entropy-guided text prediction using combined word and character n-gram language models |
US11257504B2 (en) | 2014-05-30 | 2022-02-22 | Apple Inc. | Intelligent assistant for home automation |
US9842101B2 (en) | 2014-05-30 | 2017-12-12 | Apple Inc. | Predictive conversion of language input |
US11133008B2 (en) | 2014-05-30 | 2021-09-28 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US10083690B2 (en) | 2014-05-30 | 2018-09-25 | Apple Inc. | Better resolution when referencing to concepts |
US10169329B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Exemplar-based natural language processing |
US10497365B2 (en) | 2014-05-30 | 2019-12-03 | Apple Inc. | Multi-command single utterance input method |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US9785630B2 (en) | 2014-05-30 | 2017-10-10 | Apple Inc. | Text prediction using combined word N-gram and unigram language models |
US9734193B2 (en) | 2014-05-30 | 2017-08-15 | Apple Inc. | Determining domain salience ranking from ambiguous words in natural speech |
US9966065B2 (en) | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US9760559B2 (en) | 2014-05-30 | 2017-09-12 | Apple Inc. | Predictive text input |
US10904611B2 (en) | 2014-06-30 | 2021-01-26 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US9668024B2 (en) | 2014-06-30 | 2017-05-30 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US10659851B2 (en) | 2014-06-30 | 2020-05-19 | Apple Inc. | Real-time digital assistant knowledge updates |
US10446141B2 (en) | 2014-08-28 | 2019-10-15 | Apple Inc. | Automatic speech recognition based on user feedback |
US10431204B2 (en) | 2014-09-11 | 2019-10-01 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US9818400B2 (en) | 2014-09-11 | 2017-11-14 | Apple Inc. | Method and apparatus for discovering trending terms in speech requests |
US10789041B2 (en) | 2014-09-12 | 2020-09-29 | Apple Inc. | Dynamic thresholds for always listening speech trigger |
US9986419B2 (en) | 2014-09-30 | 2018-05-29 | Apple Inc. | Social reminders |
US9668121B2 (en) | 2014-09-30 | 2017-05-30 | Apple Inc. | Social reminders |
US9646609B2 (en) | 2014-09-30 | 2017-05-09 | Apple Inc. | Caching apparatus for serving phonetic pronunciations |
US10074360B2 (en) | 2014-09-30 | 2018-09-11 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US10127911B2 (en) | 2014-09-30 | 2018-11-13 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US9886432B2 (en) | 2014-09-30 | 2018-02-06 | Apple Inc. | Parsimonious handling of word inflection via categorical stem + suffix N-gram language models |
US10552013B2 (en) | 2014-12-02 | 2020-02-04 | Apple Inc. | Data detection |
US11556230B2 (en) | 2014-12-02 | 2023-01-17 | Apple Inc. | Data detection |
US9711141B2 (en) | 2014-12-09 | 2017-07-18 | Apple Inc. | Disambiguating heteronyms in speech synthesis |
US9865280B2 (en) | 2015-03-06 | 2018-01-09 | Apple Inc. | Structured dictation using intelligent automated assistants |
US9721566B2 (en) | 2015-03-08 | 2017-08-01 | Apple Inc. | Competing devices responding to voice triggers |
US10567477B2 (en) | 2015-03-08 | 2020-02-18 | Apple Inc. | Virtual assistant continuity |
US11087759B2 (en) | 2015-03-08 | 2021-08-10 | Apple Inc. | Virtual assistant activation |
US10311871B2 (en) | 2015-03-08 | 2019-06-04 | Apple Inc. | Competing devices responding to voice triggers |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US9899019B2 (en) | 2015-03-18 | 2018-02-20 | Apple Inc. | Systems and methods for structured stem and suffix language models |
US9842105B2 (en) | 2015-04-16 | 2017-12-12 | Apple Inc. | Parsimonious continuous-space phrase representations for natural language processing |
US10083688B2 (en) | 2015-05-27 | 2018-09-25 | Apple Inc. | Device voice control for selecting a displayed affordance |
US10127220B2 (en) | 2015-06-04 | 2018-11-13 | Apple Inc. | Language identification from short strings |
US10101822B2 (en) | 2015-06-05 | 2018-10-16 | Apple Inc. | Language input correction |
US10186254B2 (en) | 2015-06-07 | 2019-01-22 | Apple Inc. | Context-based endpoint detection |
US10255907B2 (en) | 2015-06-07 | 2019-04-09 | Apple Inc. | Automatic accent detection using acoustic models |
US11025565B2 (en) | 2015-06-07 | 2021-06-01 | Apple Inc. | Personalized prediction of responses for instant messaging |
US11500672B2 (en) | 2015-09-08 | 2022-11-15 | Apple Inc. | Distributed personal assistant |
US10671428B2 (en) | 2015-09-08 | 2020-06-02 | Apple Inc. | Distributed personal assistant |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US9697820B2 (en) | 2015-09-24 | 2017-07-04 | Apple Inc. | Unit-selection text-to-speech synthesis using concatenation-sensitive neural networks |
US11010550B2 (en) | 2015-09-29 | 2021-05-18 | Apple Inc. | Unified language modeling framework for word prediction, auto-completion and auto-correction |
US10366158B2 (en) | 2015-09-29 | 2019-07-30 | Apple Inc. | Efficient word encoding for recurrent neural network language models |
US11587559B2 (en) | 2015-09-30 | 2023-02-21 | Apple Inc. | Intelligent device identification |
US11526368B2 (en) | 2015-11-06 | 2022-12-13 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10049668B2 (en) | 2015-12-02 | 2018-08-14 | Apple Inc. | Applying neural network language models to weighted finite state transducers for automatic speech recognition |
US10223066B2 (en) | 2015-12-23 | 2019-03-05 | Apple Inc. | Proactive assistance based on dialog communication between devices |
US10446143B2 (en) | 2016-03-14 | 2019-10-15 | Apple Inc. | Identification of voice inputs providing credentials |
US9934775B2 (en) | 2016-05-26 | 2018-04-03 | Apple Inc. | Unit-selection text-to-speech synthesis based on predicted concatenation parameters |
US9972304B2 (en) | 2016-06-03 | 2018-05-15 | Apple Inc. | Privacy preserving distributed evaluation framework for embedded personalized systems |
US10249300B2 (en) | 2016-06-06 | 2019-04-02 | Apple Inc. | Intelligent list reading |
US10049663B2 (en) | 2016-06-08 | 2018-08-14 | Apple, Inc. | Intelligent automated assistant for media exploration |
US11069347B2 (en) | 2016-06-08 | 2021-07-20 | Apple Inc. | Intelligent automated assistant for media exploration |
US10354011B2 (en) | 2016-06-09 | 2019-07-16 | Apple Inc. | Intelligent automated assistant in a home environment |
US10490187B2 (en) | 2016-06-10 | 2019-11-26 | Apple Inc. | Digital assistant providing automated status report |
US10509862B2 (en) | 2016-06-10 | 2019-12-17 | Apple Inc. | Dynamic phrase expansion of language input |
US11037565B2 (en) | 2016-06-10 | 2021-06-15 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10733993B2 (en) | 2016-06-10 | 2020-08-04 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
US10067938B2 (en) | 2016-06-10 | 2018-09-04 | Apple Inc. | Multilingual word prediction |
US10192552B2 (en) | 2016-06-10 | 2019-01-29 | Apple Inc. | Digital assistant providing whispered speech |
US11152002B2 (en) | 2016-06-11 | 2021-10-19 | Apple Inc. | Application integration with a digital assistant |
US10297253B2 (en) | 2016-06-11 | 2019-05-21 | Apple Inc. | Application integration with a digital assistant |
US10269345B2 (en) | 2016-06-11 | 2019-04-23 | Apple Inc. | Intelligent task discovery |
US10521466B2 (en) | 2016-06-11 | 2019-12-31 | Apple Inc. | Data driven natural language event detection and classification |
US10089072B2 (en) | 2016-06-11 | 2018-10-02 | Apple Inc. | Intelligent device arbitration and control |
US10593346B2 (en) | 2016-12-22 | 2020-03-17 | Apple Inc. | Rank-reduced token representation for automatic speech recognition |
US10791176B2 (en) | 2017-05-12 | 2020-09-29 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US11405466B2 (en) | 2017-05-12 | 2022-08-02 | Apple Inc. | Synchronization and task delegation of a digital assistant |
US10810274B2 (en) | 2017-05-15 | 2020-10-20 | Apple Inc. | Optimizing dialogue policy decisions for digital assistants using implicit feedback |
CN110442705A (en) * | 2019-04-23 | 2019-11-12 | 北京理工大学 | A kind of abstract automatic generation method based on conceptual hands network |
CN110442705B (en) * | 2019-04-23 | 2021-10-12 | 北京理工大学 | Abstract automatic generation method based on concept pointer network |
Also Published As
Publication number | Publication date |
---|---|
US6078923A (en) | 2000-06-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5797008A (en) | Memory storing an integrated index of database records | |
US5745900A (en) | Method for indexing duplicate database records using a full-record fingerprint | |
US5745894A (en) | Method for generating and searching a range-based index of word-locations | |
US5787435A (en) | Method for mapping an index of a database into an array of files | |
US5966710A (en) | Method for searching an index | |
US5852820A (en) | Method for optimizing entries for searching an index | |
US5745889A (en) | Method for parsing information of databases records using word-location pairs and metaword-location pairs | |
US6016493A (en) | Method for generating a compressed index of information of records of a database | |
US5765150A (en) | Method for statistically projecting the ranking of information | |
US6105019A (en) | Constrained searching of an index | |
US5809502A (en) | Object-oriented interface for an index | |
US7406460B2 (en) | Technique for ranking records of a database | |
US5864863A (en) | Method for parsing, indexing and searching world-wide-web pages | |
US5745899A (en) | Method for indexing information of a database | |
US5765168A (en) | Method for maintaining an index | |
US5765149A (en) | Modified collection frequency ranking method | |
US5765158A (en) | Method for sampling a compressed index to create a summarized index | |
US5724033A (en) | Method for encoding delta values | |
US10210222B2 (en) | Method and system for indexing information and providing results for a search including objects having predetermined attributes | |
KR101157693B1 (en) | Multi-stage query processing system and method for use with tokenspace repository | |
US5991713A (en) | Efficient method for compressing, storing, searching and transmitting natural language text | |
US6886130B1 (en) | Compiled structure for efficient operation of distributed hypertext | |
US20040030686A1 (en) | Method and system of searching a database of records | |
US8209305B2 (en) | Incremental update scheme for hyperlink database |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: DIGITAL EQUIPMENT CORPORATION, MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BURROWS, MICHAEL;REEL/FRAME:008174/0886Effective date: 19960807 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: ALTAVISTA COMPANY, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:DIGITAL EQUIPMENT CORPORATION;REEL/FRAME:011219/0104Effective date: 20000717 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: ALTAVISTA COMPANY, CALIFORNIAFree format text: MERGER & CHANGE OF NAME;ASSIGNOR:ZOOM NEWCO INC.;REEL/FRAME:013608/0128Effective date: 19990818Owner name: ZOOM NEWCO INC., MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COMPAQ COMPUTER CORPORATION;DIGITAL EQUIPMENT CORPORATION;REEL/FRAME:013608/0090Effective date: 19990818 |
|
AS | Assignment |
Owner name: OVERTURE SERVICES, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ALTA VISTA COMPANY;REEL/FRAME:014394/0899Effective date: 20030425 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: YAHOO! INC,CALIFORNIAFree format text: MERGER;ASSIGNOR:OVERTURE SERVICES, INC;REEL/FRAME:021652/0654Effective date: 20081001Owner name: YAHOO! INC, CALIFORNIAFree format text: MERGER;ASSIGNOR:OVERTURE SERVICES, INC;REEL/FRAME:021652/0654Effective date: 20081001 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:YAHOO! INC.;REEL/FRAME:033868/0257Effective date: 20140630 |
|
AS | Assignment |
Owner name: YAHOO HOLDINGS, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:YAHOO! INC.;REEL/FRAME:042963/0211Effective date: 20170613 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
AS | Assignment |
Owner name: OATH INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:YAHOO HOLDINGS, INC.;REEL/FRAME:045240/0310Effective date: 20171231 |