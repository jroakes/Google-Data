US20230104270A1 - Dynamic Parameter Selection for Quality-Normalized Video Transcoding - Google Patents
Dynamic Parameter Selection for Quality-Normalized Video Transcoding Download PDFInfo
- Publication number
- US20230104270A1 US20230104270A1 US17/911,245 US202017911245A US2023104270A1 US 20230104270 A1 US20230104270 A1 US 20230104270A1 US 202017911245 A US202017911245 A US 202017911245A US 2023104270 A1 US2023104270 A1 US 2023104270A1
- Authority
- US
- United States
- Prior art keywords
- video
- bitrate
- transcoding
- quality
- video stream
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000009826 distribution Methods 0.000 claims abstract description 5
- 238000000034 method Methods 0.000 claims description 89
- 238000012549 training Methods 0.000 claims description 45
- 238000012545 processing Methods 0.000 claims description 35
- 230000006870 function Effects 0.000 claims description 27
- 230000015654 memory Effects 0.000 claims description 27
- 230000000007 visual effect Effects 0.000 claims description 20
- 238000005259 measurement Methods 0.000 claims description 19
- 238000003908 quality control method Methods 0.000 claims description 17
- 238000007781 pre-processing Methods 0.000 claims description 16
- 238000005457 optimization Methods 0.000 claims description 14
- 230000008569 process Effects 0.000 claims description 12
- 238000003860 storage Methods 0.000 claims description 11
- 230000002123 temporal effect Effects 0.000 claims description 9
- 238000010586 diagram Methods 0.000 description 16
- 238000004891 communication Methods 0.000 description 10
- 238000001914 filtration Methods 0.000 description 8
- 230000006835 compression Effects 0.000 description 7
- 238000007906 compression Methods 0.000 description 7
- 238000013528 artificial neural network Methods 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 4
- 230000008859 change Effects 0.000 description 4
- 238000013527 convolutional neural network Methods 0.000 description 4
- 238000013139 quantization Methods 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 239000013598 vector Substances 0.000 description 3
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000013135 deep learning Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000013442 quality metrics Methods 0.000 description 2
- 238000003491 array Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008867 communication pathway Effects 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 230000006837 decompression Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000004927 fusion Effects 0.000 description 1
- 230000002068 genetic effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000000135 prohibitive effect Effects 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000004513 sizing Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000012706 support-vector machine Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000001131 transforming effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/154—Measured or subjectively estimated visual quality after decoding, e.g. measurement of distortion
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/146—Data rate or code amount at the encoder output
- H04N19/149—Data rate or code amount at the encoder output by estimating the code amount by means of a model, e.g. mathematical model or statistical model
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/23418—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving operations for analysing video streams, e.g. detecting features or characteristics
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/2343—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements
- H04N21/234363—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements by altering the spatial resolution, e.g. for clients with a lower screen resolution
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/234—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs
- H04N21/2343—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements
- H04N21/23439—Processing of video elementary streams, e.g. splicing of video streams, manipulating MPEG-4 scene graphs involving reformatting operations of video signals for distribution or compliance with end-user requests or end-user device requirements for generating different versions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/25—Management operations performed by the server for facilitating the content distribution or administrating data related to end-users or client devices, e.g. end-user or client device authentication, learning user preferences for recommending movies
- H04N21/251—Learning process for intelligent management, e.g. learning user preferences for recommending movies
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/25—Management operations performed by the server for facilitating the content distribution or administrating data related to end-users or client devices, e.g. end-user or client device authentication, learning user preferences for recommending movies
- H04N21/258—Client or end-user data management, e.g. managing client capabilities, user preferences or demographics, processing of multiple end-users preferences to derive collaborative data
- H04N21/25866—Management of end-user data
- H04N21/25891—Management of end-user data being end-user preferences
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/25—Management operations performed by the server for facilitating the content distribution or administrating data related to end-users or client devices, e.g. end-user or client device authentication, learning user preferences for recommending movies
- H04N21/266—Channel or content management, e.g. generation and management of keys and entitlement messages in a conditional access system, merging a VOD unicast channel into a multicast channel
- H04N21/2662—Controlling the complexity of the video stream, e.g. by scaling the resolution or bitrate of the video stream based on the client capabilities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/27—Server based end-user applications
- H04N21/274—Storing end-user multimedia data in response to end-user request, e.g. network recorder
- H04N21/2743—Video hosting of uploaded data from client
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/45—Management operations performed by the client for facilitating the reception of or the interaction with the content or administrating data related to the end-user or to the client device itself, e.g. learning user preferences for recommending movies, resolving scheduling conflicts
- H04N21/466—Learning process for intelligent management, e.g. learning user preferences for recommending movies
- H04N21/4662—Learning process for intelligent management, e.g. learning user preferences for recommending movies characterized by learning algorithms
- H04N21/4666—Learning process for intelligent management, e.g. learning user preferences for recommending movies characterized by learning algorithms using neural networks, e.g. processing the feedback provided by the user
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications including, for example, video conferencing, high-definition video entertainment, video advertisements, or sharing of user-generated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including encoding or decoding techniques.
- a method for transcoding a video stream of user generated video content comprises determining bitrate and quality scores for transcoding the user generated video content of the video stream at multiple resolutions, such as by querying, a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions using information associated with the user generated video content.
- Sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions are selected according to the bitrate and quality scores, in which each of the sets of transcoding parameters corresponds to a different resolution of the multiple resolutions.
- the video stream is transcoded into multiple transcoded video streams using the selected sets of transcoding parameters.
- Each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding.
- the multiple transcoded video streams are then output for further processing or storage.
- a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
- determining the bitrate and quality scores for transcoding the user generated video content of the video stream at the multiple resolutions comprises receiving, as output of the learning model, predicted delivered quality levels of the video stream for the multiple resolutions.
- a given predicted delivered quality level represents a quality of the video stream when the video stream is transcoded at a specified bitrate for a corresponding one of the multiple resolutions.
- Sets (or listings) of bitrate and quality score pairs are then determined using the predicted delivered quality levels, in which each set of bitrate and quality score pairs corresponds to one resolution of the multiple resolutions.
- the learning model computes the predicted delivered quality levels by processing one or more video frames extracted from the video stream using one or more quality control metrics, in which the information associated with the user generated video content corresponds to the one or more video frames.
- each bitrate in a given set of bitrate and quality score pairs is less than or equal to a maximum bitrate allowed for a resolution corresponding to the given set of bitrate and quality score pairs.
- selecting the sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions comprises, for each of the sets of bitrate and quality score pairs, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using a non-linear optimization function to determine weighted values associated with a resolution corresponding to the set of bitrate and quality score pairs, and selecting, as one of the sets of transcoding parameters, a bitrate and quality score pair of the set of bitrate and quality score pairs resulting in a highest one of the weighted values.
- the non-linear optimization function processes the bitrate and quality score pairs of each set of bitrate and quality score pairs using one or more predefined thresholds.
- the one or more predefined thresholds relate to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all of the multiple resolutions, or a visual quality difference measurement threshold.
- processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises culling ones of the bitrate and quality score pairs which breach the visual quality difference measurement threshold.
- the weighted values are then determined for remaining ones of the bitrate and quality score pairs.
- the one or more predefined thresholds relate to a weight defined for the resolution corresponding to the set of bitrate and quality score pairs
- processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises determining a weighted value for a bitrate and quality score pair of the set of bitrate and quality score pairs by weighting the quality score of the bitrate and quality score pair using the weight.
- the multiple transcoded video streams are output to a video hosting platform, in which weights defined for each of the multiple resolutions are determined based on watch time distributions for the multiple resolutions across videos uploaded to the video hosting platform.
- the multiple transcoded video streams are output to a video hosting platform.
- Raw video frames are extracted from sets of user generated video content of the video hosting platform, and the learning model is trained using video content of the raw video frames.
- a further implementation of this disclosure provides a method of training a learning model to predict transcoding quality for user generated video content at multiple resolutions. Initially one or more raw frames are extracted from an input video, and each extracted raw frame is transcoded into one or more, and optionally all, video formats with a resolution up to the resolution of the input video, and for multiple transcoding configurations.
- the training method comprises providing labelled transcoded versions as input to the learning model and obtaining predicted values for the bitrate and quality score.
- the parameters of the learning model may be adjusted based on a comparison of the predicted values for the bitrate and quality score with the corresponding labelled bitrate and quality score.
- the raw video frames are pre-processed prior to training the learning model using the video content of the raw video frames.
- pre-processing the raw video frames comprises converting pixel data of the raw video frames from RGB color channels to YUV color channels, in which the learning model is trained using only the pixel data corresponding to a Y color channel of the YUV color channels.
- pre-processing the raw video frames comprises determining whether one or more of the raw video frames are in a non-standard resolution. Responsive to determining that the one or more of the raw video frames are in the non-standard resolution, the one or more of the raw video frames are rescaled to the standard resolution by padding the one or more of the raw video frames with zero value coefficients.
- training the learning model using the video content of the raw video frames comprises processing a video frame of the raw video frames using a feature map generated for predicting spatial or temporal features of the video frame.
- the feature map is a two-dimensional map of spatial features generated using a Gabor filter.
- the feature map is a two-dimensional optimal flow of temporal features generated using a reference video frame of the video frame.
- the sets of user generated video content correspond to multiple video content categories, wherein the learning model is trained to predict delivered quality levels of the raw video frames according to configurations learned for the multiple video content categories.
- An apparatus comprises a memory and a processor, in which the memory includes instructions executable by the processor to perform a method of any of the foregoing implementations.
- a transcoder according to an implementation of this disclosure is configured to perform the method of any of the foregoing implementations.
- a further implementation of this disclosure comprises a computer-readable memory storing instructions that, when implemented by a processor, cause the processor to perform a method of any of the foregoing implementations.
- FIG. 1 is a schematic of an example of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of an example of a video stream to be encoded and decoded.
- FIG. 4 is a block diagram of an example of an encoder.
- FIG. 5 is a block diagram of an example of a decoder.
- FIG. 6 is a block diagram of an example of a transcoder that uses searched parameters.
- FIG. 7 is a block diagram of an example of a video transcoder that uses a learning model for dynamic parameter prediction and selection.
- FIG. 8 is a flowchart diagram of an example of a technique for transcoding a video stream using a learning model trained to predict transcoding quality for user generated video content.
- FIG. 9 is a flowchart diagram of an example of a technique for training a learning model to predict transcoding quality for user generated video content.
- Video compression schemes may include breaking respective images, or frames, into smaller portions, such as blocks, and generating a compressed bitstream using techniques to limit the information included for respective blocks in the output.
- the compressed bitstream can be decoded to re-create the source images from the limited information.
- Typical video compression techniques include reducing the bitrate of a video stream, such as to reduce transmission costs for video hosting and serving platforms. Compression may be performed as part of or otherwise in connection with the transcoding of video content, such as to convert aspects of the video content from one format to another. For example, when user generated video content is uploaded to a video hosting platform, video stream representing the user generated content may be compressed and transcoded for later viewing on the video hosting platform.
- Video hosting platforms conventionally transcode uploaded video content into multiple target resolutions before serving the video content to platform users. For example, a video received at a resolution of 1080p may be transcoded into 360p, 480p, 720p, and possibly other resolution formats.
- the platform selects a target format to serve to the user based on input criteria such as network conditions and user device capabilities. In some cases, the platform may select the target format expected to deliver the highest quality of the video to the user based on those input criteria. For example, where a user’s network conditions and user device capabilities are able to support a 1080p resolution format of a video, the video hosting platform may serve that format version. This is because the higher resolution is associated with a higher playback quality and further because the relatively high bitrate requirements required to support playback at that resolution are attainable by the user’s network conditions and user device capabilities.
- compression bitrate is an important indicator on the effect of compression on video quality, and the influence of bitrate depends largely on the actual content of a video.
- videos with different content compressed at the same bitrate will potentially have very different video quality.
- Typical video transcoding approaches both process transcoded targets independently of one another with fixed parameters and without considering the potential variance of video content itself. As such, the quality of a video transcoded at a highest resolution may still suffer from noticeable compression artifacts or even become much worse by the transcoding, such as where the transcoding parameters used are improperly selected.
- One solution is to align the quality of videos at given resolutions by conducting an exhaustive search across the entire transcoding space to find all possible bitrates and qualities.
- Such a solution first involves generating multiple targets for each resolution across all resolutions and then computing different quality metrics (e.g., peak signal to noise ratio (PSNR) values) for each target.
- quality metrics e.g., peak signal to noise ratio (PSNR) values
- a determination can then be made as to which targets fit within an acceptable range for a predefined quality level. For example, a 480p target video should have a PSNR value of around 35, and a 720p target video should have a PSNR value above 40.
- This process is then repeated at each resolution available for transcoding. Once it is completed, an optimal target transcoding for the video can be selected.
- this solution is highly time consuming and computationally expensive. In some cases, it actually may become infeasible given the prohibitive computing expense of generating all possible targets in a full transcoding pipeline.
- Implementations of this disclosure address problems such as these by maximizing the delivered quality of videos by dynamically selecting quality-normalized transcoding parameters using a learning model trained to predict transcoding quality for sets of user generated video content at different resolutions.
- a video hosting platform receives a video stream for transcoding
- information associated with the user generated video content for example, video frames of the video stream
- the bitrate and quality score pairs represent a predicted quality level of the video stream when it is transcoded at the stated bitrate for a given resolution.
- the set (or listing) of bitrate and quality score pairs determined for each resolution is then processed to determine, for each resolution, a set of transcoding parameters to use to transcode the video stream into that resolution.
- the various bitrate and quality score pairs of a given set may be processed using one or more predefined thresholds, which may, for example, refer to a weighted distribution of resolutions according to watch times of videos of the video hosting platform.
- the video stream is then transcoded into the various resolutions using the set of transcoding parameters selected for each resolution.
- Advantages of the techniques described herein include the ability to produce, such as by training, based on a data set, a learning model to predict transcoding quality for sets of user generated video content at multiple resolutions, and the ability to use the produced model, such as for inference, to optimize dynamic parameter selection for quality-normalized video transcoding.
- the techniques described herein enable a learning model to be generated that is configured to output an estimate of bitrate requirements and video quality, which could be used, for example, to select parameters to use to optimally transcode video content in a way that maximizes the deliverable quality of that content or otherwise in connection with a process for transcoding a video stream, such as which may be uploaded to a video hosting platform.
- the techniques described herein accomplish significant computational cost and latency savings over the approaches implemented in conventional transcoding pipelines.
- the computational cost for a full range of transcoding for user generated video content in a conventional transcoding pipeline is calculated as the number of possible transcoding configurations multiplied by the number of possible output resolutions multiplied by the sum of the cost to decode and encode the given input video stream.
- the techniques described herein which instead use bitrate and quality scores predicted using a trained learning model to select optimal transcoding parameters, only needs to decode the given input video stream once.
- the target bitrate and quality score pairs for the various target transcoding resolutions are obtained by a single query to the learning model, which carries an overall cost in the same magnitude as the cost to decode the given input video stream, which in any event is much smaller than the cost to encode the given input video stream.
- the learning model may be a machine learning model.
- the machine learning model may be or include one or more of a neural network (e.g., a convolutional neural network, recurrent neural network, or other neural network), decision tree, support vector machine, Bayesian network, genetic algorithm, deep learning system separate from a neural network, or other machine learning model.
- a set of user generated video content is or refers to all or a portion of a video hosted at a video hosting platform, which video includes user generated video content.
- a set of user generated video content may refer to a video uploaded to the video hosting platform by a user of the video hosting platform.
- FIG. 1 is a schematic of an example of a video encoding and decoding system 100 .
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2 .
- the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102
- the encoded video stream can be decoded in the receiving station 106 .
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network, or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106 .
- LAN local area network
- WAN wide area network
- VPN virtual private network
- the receiving station 106 in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2 . However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104 .
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory.
- the receiving station 106 receives (e.g., via the network 104 , a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP may be used (e.g., a Hypertext Transfer Protocol-based (HTTP-based) video streaming protocol).
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102 ) to decode and view and further encodes and transmits his or her own video bitstream to the video conference server for decoding and viewing by other participants.
- the video encoding and decoding system 100 may instead be used to encode and decode data other than video data.
- the video encoding and decoding system 100 can be used to process image data.
- the image data may include a block of data from an image.
- the transmitting station 102 may be used to encode the image data and the receiving station 106 may be used to decode the image data.
- the receiving station 106 can represent a computing device that stores the encoded image data for later use, such as after receiving the encoded or pre-encoded image data from the transmitting station 102 .
- the transmitting station 102 can represent a computing device that decodes the image data, such as prior to transmitting the decoded image data to the receiving station 106 for display.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1 .
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a processor 202 in the computing device 200 can be a conventional central processing unit.
- the processor 202 can be another type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed.
- the disclosed implementations can be practiced with one processor as shown (e.g., the processor 202 ), advantages in speed and efficiency can be achieved by using more than one processor.
- a memory 204 in computing device 200 can be a read only memory (ROM) device or a random-access memory (RAM) device in an implementation. However, other suitable types of storage device can be used as the memory 204 .
- the memory 204 can include code and data 206 that is accessed by the processor 202 using a bus 212 .
- the memory 204 can further include an operating system 208 and application programs 210 , the application programs 210 including at least one program that permits the processor 202 to perform the techniques described herein.
- the application programs 210 can include applications 1 through N, which further include a learning model training application and/or a video stream transcoding application that performs the techniques described herein.
- the computing device 200 can also include a secondary storage 214 , which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- a secondary storage 214 can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218 .
- the display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the processor 202 via the bus 212 .
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218 .
- the output device is or includes a display
- the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display, or a light emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220 , for example, a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200 .
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200 .
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a sound-sensing device 222 , for example, a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200 .
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200 .
- FIG. 2 depicts the processor 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized.
- the operations of the processor 202 can be distributed across multiple machines (wherein individual machines can have one or more processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200 .
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and decoded.
- the video stream 300 includes a video sequence 302 .
- the video sequence 302 includes several adjacent frames 304 . While three frames are depicted as the adjacent frames 304 , the video sequence 302 can include any number of adjacent frames 304 .
- the adjacent frames 304 can then be further subdivided into individual frames, for example, a frame 306 .
- the frame 306 can be divided into a series of planes or segments 308 .
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- a frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310 , which can contain data corresponding to, for example, 16 ⁇ 16 pixels in the frame 306 .
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size such as 4 ⁇ 4 pixels, 8 ⁇ 8 pixels, 16 ⁇ 8 pixels, 8 ⁇ 16 pixels, 16 ⁇ 16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein.
- FIG. 4 is a block diagram of an example of an encoder 400 .
- the encoder 400 can be implemented, as described above, in the transmitting station 102 , such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the processor 202 , cause the transmitting station 102 to encode video data in the manner described in FIG. 4 .
- the encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the encoder 400 is a hardware encoder.
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402 , a transform stage 404 , a quantization stage 406 , and an entropy encoding stage 408 .
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410 , an inverse transform stage 412 , a reconstruction stage 414 , and a loop filtering stage 416 .
- Other structural variations of the encoder 400 can be used to encode the video stream 300 .
- the functions performed by the encoder 400 may occur after a filtering of the video stream 300 . That is, the video stream 300 may undergo pre-processing according to one or more implementations of this disclosure prior to the encoder 400 receiving the video stream 300 . Alternatively, the encoder 400 may itself perform such pre-processing against the video stream 300 prior to proceeding to perform the functions described with respect to FIG. 4 , such as prior to the processing of the video stream 300 at the intra/inter prediction stage 402 .
- adjacent frames 304 can be processed in units of blocks.
- respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction).
- intra-frame prediction also called intra-prediction
- inter-frame prediction also called inter-prediction
- a prediction block can be formed.
- intra-prediction a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction a prediction block may be formed from samples in one or more previously constructed reference frames.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408 .
- the entropy-encoded coefficients, together with other information used to decode the block (which may include, for example, syntax elements such as used to indicate the type of prediction used, transform type, motion vectors, a quantizer value, or the like), are then output to the compressed bitstream 420 .
- the compressed bitstream 420 can be formatted using various techniques, such as variable length coding or arithmetic coding.
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
- the reconstruction path (shown by the dotted connection lines) can be used to ensure that the encoder 400 and a decoder 500 (described below with respect to FIG. 5 ) use the same reference frames to decode the compressed bitstream 420 .
- the reconstruction path performs functions that are similar to functions that take place during the decoding process (described below with respect to FIG. 5 ), including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can apply an in-loop filter or other filter to the reconstructed block to reduce distortion such as blocking artifacts. Examples of filters which may be applied at the loop filtering stage 416 include, without limitation, a deblocking filter, a directional enhancement filter, and a loop restoration filter.
- a non-transform-based encoder can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder can have the quantization stage 406 and the dequantization stage 410 combined in a common stage.
- FIG. 5 is a block diagram of an example of a decoder 500 .
- the decoder 500 can be implemented in the receiving station 106 , for example, by providing a computer software program stored in the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the processor 202 , cause the receiving station 106 to decode video data in the manner described in FIG. 5 .
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106 . In some implementations, the decoder 500 is a hardware decoder.
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 : an entropy decoding stage 502 , a dequantization stage 504 , an inverse transform stage 506 , an intra/inter prediction stage 508 , a reconstruction stage 510 , a loop filtering stage 512 , and a post filter stage 514 .
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400 .
- the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 (e.g., at the intra/inter prediction stage 402 ).
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. Examples of filters which may be applied at the loop filtering stage 512 include, without limitation, a deblocking filter, a directional enhancement filter, and a loop restoration filter. Other filtering can be applied to the reconstructed block.
- the post filter stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 516 .
- the output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein.
- decoder 500 can be used to decode the compressed bitstream 420 .
- the decoder 500 can produce the output video stream 516 without the post filter stage 514 or otherwise omit the post filter stage 514 .
- FIG. 6 is a block diagram of an example of a transcoder 600 which uses searched parameters.
- the transcoder 600 can be implemented in the transmitting station 102 , such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the processor 202 , cause the transmitting station 102 to transcode video data in the manner described in FIG. 6 .
- the transcoder 600 can also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the transcoder 600 can be or represent functionality performed in connection with an encoder, such as the encoder 400 shown in FIG. 4 .
- the encoder 400 and the transcoder 600 can be combined into a single computer software program.
- the video stream 602 may be or otherwise represent a video uploaded to a video hosting platform and which is awaiting transcoding for delivery to a user of that video hosting platform.
- a transcoding stage 604 uses searched parameters to transcode the video stream 602 , such as to produce transcoded video streams at different target bitrates and quality levels in the same encoded format and/or to different encoded formats.
- the transcoding stage 604 produces a transcoded video stream 1 606 at a first resolution and format pair based on the video stream 602 , a transcoded video stream (not shown) at a second resolution and format pair based on the video stream 602 , through a transcoded video stream N 608 at an N th resolution and format pair based on the video stream 602 .
- the transcoding stage 604 conducts a search across the transcoding space to determine the parameters for transcoding the video stream 602 , such as based on different quality control metric tools, different resolutions, different encoding formats, and the content of the video stream 602 .
- the transcoded video stream 1 606 through the transcoded video stream N 608 represent possible transcoded versions for the video stream 602 using different parameters determined by the searching across the transcoding space.
- Each of the transcoded video stream 1 606 through the transcoded video stream N 608 may be or otherwise represent a video stream which may be decoded and output for display at a computing device, such as a client device of a user of the video hosting platform which uses the transcoder 600 .
- FIG. 7 is a block diagram of an example of a transcoder 700 that uses a learning model for dynamic parameter prediction and selection.
- the transcoder 700 is a variation of the transcoder 600 shown in FIG. 6 , such as in which the transcoder 600 has been modified to include a parameter prediction stage 702 and a parameter selection stage 704 , and in which the transcoding stage 604 shown in FIG. 6 is replaced with or modified to be a transcoding stage 706 which uses output of the parameter selection stage 704 to transcode the video stream 602 .
- the transcoder 700 may instead be another transcoder.
- the transcoder 700 receives the video stream 602 as input and transcodes the video stream 602 using dynamically selected transcoding parameters to produce transcoded content, such as a transcoded video stream 1 708 through a transcoded video stream M 710 .
- the value of M generally refers to the number of different resolutions available for transcoding the video stream 602 , such that the video stream 602 is transcoded into as many transcoded video streams as there are resolutions available for the transcoding.
- the value of M expressed with respect to the transcoded video stream M 710 may be less than or equal to the value of N expressed with respect to the transcoded video stream N 608 . That is, in some cases, fewer transcoded video streams may be output by the transcoding stage 706 using the selected parameters than are output by the transcoding stage 604 using the searched parameters.
- the parameter prediction stage 702 receives the video stream 602 and uses a learning model 712 trained to predict the transcoding quality of user generated video content to determine bitrate and quality score pairs which may be further processed for transcoding the video stream 602 .
- the parameter prediction stage 702 uses the learning model 712 to determine bitrate and quality scores computed for transcoding some video frames of the video stream 602 at different resolutions.
- the learning model 712 receives the video frames of the video stream 602 as input, such as by the parameter prediction stage 702 querying the learning model using those video frames, and computes predicted delivered quality levels of the video stream 602 for the different resolutions as output.
- the predicted delivered quality levels indicate quality scores for predicted for the video stream 602 , according to a particular quality control metric, when the video stream 602 is transcoded at various bitrates for various resolutions.
- the learning model 712 is configured to use one or more, but not all, video frames of the video stream 602 as input. In some implementations, however, the learning model 712 can use each video frame of the video stream 602 as input.
- the learning model 712 processes the video frames it receives as input using one or more quality control metrics and at one or more possible transcoding resolutions (e.g., 360p, 720p, 1080p, or the like) to compute the predicted delivered quality levels.
- the quality control metrics are metrics which may be used to measure the quality of video data resulting from transcoding that video data at a specified bitrate for a given resolution. Examples of quality control metrics which may be used by learning model 712 include, but are not limited to, PSNR, PSNR mean opinion score (PSNR MOS), and video multimethod assessment fusion (VMAF).
- a set (or listing) of bitrate and quality score pairs is determined using the predicted delivered quality levels computed as output by the learning model 712 . That is, a first set of bitrate and quality score pairs is determined for a first of the possible resolutions (such as 360p), a second set of bitrate and quality score pairs is determined for a second of the possible resolutions (such as 480p), and so on.
- Each bitrate and quality score pair of a given set of bitrate and quality score pairs indicates the quality score predicted for the video stream 602 and the bitrate used to achieve that quality score.
- a set of bitrate and quality score pairs may include a number of bitrate and quality score pairs.
- Each set of bitrate and quality score pairs may be sorted by quality score or by another means.
- the learning model 712 may output the sets of bitrate and quality score pairs.
- the learning model 712 may instead be trained to determine those sets of bitrate and quality score pairs using those predicted delivered quality levels. Implementations and examples of techniques for training the learning model 712 are described below with respect to FIG. 9 .
- the parameter selection stage 704 uses the output of the parameter prediction stage 702 to optimize configurations of the transcoder 700 for transcoding the video stream 602 , such as by selecting transcoding parameters based on the output of the parameter prediction stage 702 . Because the transcoding parameters are selected using the learning model 712 trained with user generated video content of various categories, the transcoding parameters selected at the parameter selection stage 704 are globally optimized for transcoding the video stream 602 (that is, are optimized across all content categories).
- the parameter selection stage 704 processes the sets of bitrate and quality score pairs for each resolution output of the parameter prediction stage 702 against one or more transcoding constraints to select, for one or more of the resolutions, the preferred transcoding parameters for that resolution.
- the transcoding constraints may include or otherwise refer to predefined thresholds and/or device parameters.
- the device parameters may be parameters relating to one or more of weights of some or all resolutions or weights of some or all valid transcoding versions.
- the predefined thresholds may be thresholds relating to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all resolutions, or a visual quality difference measurement threshold for the visual quality scores.
- the parameter selection stage 704 selects a set of transcoding parameters for transcoding the video stream 602 into that resolution by processing the set of bitrate and quality score pairs for that resolution against a parameter maximizing function.
- the parameter maximizing function processes each of the sets of bitrate and quality score pairs individually. That is, for each possible resolution, the parameter maximizing function takes in a corresponding set of bitrate and quality score pairs and input and determines the optimal bitrate and quality score pair of that set of score pairs as output.
- the parameter maximizing function may process each pair of a given set of bitrate and quality score pairs by weighting the corresponding resolution according to the quality score of the given pair, with the bitrate constraint that the bitrate of the weighted resolution cannot exceed the overall bitrate upper bound set for all transcoded versions of the video stream 602 .
- a non-linear optimization solution such as using sequential quadratic programming, may be used to compute weighted values as outputs of the parameter maximizing function.
- the parameter maximizing function may thus be referred to as a non-linear optimization function.
- the bitrate and quality score pair corresponding to the highest weighted value output from the parameter maximizing function is selected as the set of transcoding parameters to use for transcoding the video stream 602 at the resolution corresponding to the set of bitrate and quality score pairs.
- the parameters selected at the parameter selection stage 704 thus include or otherwise refer to, for a resolution of the possible resolutions, the optimal bitrate and quality score pair identified for the corresponding set of bitrate and quality score pairs.
- transcoding parameters which include but are not limited to including only a single bitrate and quality score pair, are output from the parameter selection stage 704 for each of the possible transcoding resolutions.
- the transcoding stage 706 transcodes the video stream 602 using the transcoding parameters selected at the parameter selection stage 704 for each resolution to produce output transcoded video streams, such as the transcoded video stream 1 708 through the transcoded video stream M 710 .
- the video stream 602 can be optimally transcoded into multiple different resolutions using the selected transcoding parameters, such as to maximize the delivered quality of the video stream 602 at each of a number of different resolutions.
- the set of bitrate and quality score pairs for each resolution can be determined at the parameter selection stage 704 instead of at the parameter prediction stage 702 .
- the parameter prediction stage 702 may output the vector of bitrate and quality scores computed by the learning model 712 to the parameter selection stage 704 .
- the parameter selection stage 704 determines the sets of bitrate and quality score pairs for each resolution using the vector received from the parameter prediction stage 702 .
- the learning model 712 may be one of a plurality of learning models used by the transcoder 700 .
- each different learning model used by the transcoder 700 may be trained to predict transcoding quality for different categories of user generated video content. For example, a first learning model may be trained based on game streaming video content, a second learning model may be trained based on news show video content, a third learning model may be trained based on lyric music video content, and so on. It has been found that the best transcoding parameters for a particular video may depend on the content category of the video. Multiple learning models may therefore be provided, each learning model trained to predict transcoding quality for user generated video content of one particular content category or of two or more particular content categories. When a video stream is received for transcoding, it may be initially categorized, and assigned to one of the multiple learning models dependent on the category determined for the video stream.
- each different learning model using by the transcoder 700 may be trained to predict transcoding quality for one of the resolutions available for transcoding the video stream 602 .
- a first learning model may be trained to predict the transcoded quality of video streams at 480p
- a second learning model may be trained to predict the transcoded quality of video streams at 1080p
- the training of each of those multiple learning models would be performed as described with respect to the learning model 712 .
- FIG. 8 is a flowchart diagram of an example of a technique 800 for transcoding a video stream using a learning model trained to predict transcoding quality for user generated video content.
- FIG. 9 is a flowchart diagram of an example of a technique 900 for training a learning model to predict transcoding quality for user generated video content.
- the technique 800 and/or the technique 900 can be implemented, for example, as a software program that may be executed by computing devices such as the transmitting station 102 or the receiving station 106 .
- the software program can include machine-readable instructions that may be stored in a memory such as the memory 204 or the secondary storage 214 , and that, when executed by a processor, such as the processor 202 , may cause the computing device to perform the technique 800 and/or the technique 900 .
- the technique 800 and/or the technique 900 can be implemented using specialized hardware or firmware.
- a hardware component configured to perform the technique 800 and/or the technique 900 .
- some computing devices may have multiple memories or processors, and the operations described in the technique 800 and/or the technique 900 can be distributed using multiple processors, memories, or both.
- the techniques 800 and 900 are both depicted and described herein as a series of steps or operations. However, the steps or operations in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, other steps or operations not presented and described herein may be used. Furthermore, not all illustrated steps or operations may be required to implement a technique in accordance with the disclosed subject matter.
- bitrate and quality scores for transcoding user generated video content of a video stream at multiple resolutions are determined, such as by querying a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions using information associated with the user generated video content.
- the information associated with the user generated video content may, for example, correspond to one or more video frames of the video stream.
- the video stream includes video frames at an unspecified quality level.
- the video stream may, for example, be the video stream 602 shown in FIG. 7 . Although the video frames may all share a common, unspecified quality level, in some implementations, some of the video frames may have different, unspecified quality levels from others of the video frames.
- Determining the bitrate and quality scores for transcoding the user generated video content of the video stream at the multiple resolutions includes receiving, as output of a learning model, predicted delivered quality levels of the video stream for the multiple resolutions and determining sets of bitrate and quality score pairs using the predicted delivered quality levels.
- a given predicted delivered quality level represents a quality of the video stream when the video stream is transcoded at a specified bitrate for a corresponding one of the multiple resolutions.
- Each set of bitrate and quality score pairs corresponds to one resolution of the multiple resolutions.
- the learning model may, for example, be the learning model 712 shown in FIG. 7 , which takes video frames of the video stream to be transcoded as input.
- the learning model computes the predicted delivered quality levels by processing one or more video frames extracted from the video stream using one or more quality control metrics.
- the quality control metrics are or refer to metrics which may be applied to measure a quality score for the one or more video frames at different bitrates for a given resolution.
- the quality control metric used may, for example, be PSNR, PSNR MOS, VMAF, or another quality control metric.
- Processing the video frames of the video stream using a quality control metric includes determining quality scores for the video frame at different bitrates and for a given target transcoding resolution.
- sets of transcoding parameters to use for transcoding the video stream at one or more of, and possibly for each of, the multiple resolutions are selected according to the bitrate and quality scores, in which each selected set of transcoding parameters corresponds to a different resolution of the multiple resolutions.
- selecting a set of transcoding parameters may include processing each bitrate and quality score pair of the set of bitrate and quality score pairs for that resolution using a non-linear optimization function to determine weighted values associated with a resolution corresponding to the set of bitrate and quality score pairs.
- a bitrate and quality score pair of the set of bitrate and quality score pairs for a resolution resulting in a highest one of the weighted values is then selected as the set of transcoding parameters for that resolution.
- the non-linear optimization function processes the bitrate and quality score pairs of each set of bitrate and quality score pairs using one or more predefined thresholds.
- the one or more predefined thresholds may relate to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all of the multiple resolutions, or a visual quality difference measurement threshold.
- processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function includes culling (eliminating) ones of the bitrate and quality score pairs which breach the visual quality difference measurement threshold. For example, each bitrate and quality score pair which breaches the visual quality difference measurement threshold may be removed from the corresponding set of bitrate and quality score pairs. In such a case, the weighted values are determined for remaining ones of the bitrate and quality score pairs in that set.
- the visual quality difference measurement threshold refers to whether a noticeable change in quality results from an increase in bitrate.
- the visual quality difference measurement threshold is breached for a given bitrate and quality score pair at position i within the set of bitrate and quality score pairs when the bitrate value of that pair, B[i], is greater than the bitrate value of the preceding pair in the set, B[i-1], but the difference in the quality score value of that pair, Q[i], and the quality score value of that preceding pair, Q[i-1], is less than the visual quality difference measurement threshold.
- the specific value of the visual quality difference measurement threshold may be predefined for the quality control metric used to determine the bitrate and quality scores. For example, where VMAF is used, the visual quality difference measurement threshold may be six.
- the one or more predefined thresholds may relate to a weight defined for the resolution corresponding to the set of bitrate and quality score pairs.
- processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function includes determining a weighted value for a bitrate and quality score pair of the set of bitrate and quality score pairs by weighting the quality score of the bitrate and quality score pair using the weight.
- the weights defined for each of the multiple resolutions are determined based on watch time distributions for the multiple resolutions across videos uploaded to the video hosting platform to which the video stream is uploaded for transcoding. Accordingly, resolutions which are more frequently served by the video hosting platform will be weighted more heavily than resolutions which are less frequently served by the video hosting platform.
- the determined set of transcoding parameters for a given resolution thus includes a bitrate at which to transcode the video stream to achieve the corresponding quality score at that given resolution.
- each set of transcoding parameters may, in some cases, include other parameters to use for transcoding the video stream.
- a given set of transcoding parameters may further include one or more of a CRF, a minimum bitrate, or a maximum bitrate.
- the set of transcoding parameters is determined using a learning model trained based on a wide variety of user generated video content of a video hosting platform, the set of transcoding parameters is quality-normalized across the collection of videos of the video hosting platform.
- the video stream is transcoded into multiple transcoded video streams using, for each resolution, the set of transcoding parameters selected for that resolution, in which each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding.
- Transcoding the video stream using the selected sets of transcoding parameters may include adjusting an initial CRF for the video stream according to the respective CRFs specified in the selected sets of transcoding parameters.
- transcoding the video stream may include compressing the video stream according to the selected sets of transcoding parameters, such as where the transcoding is performed by an encoder or in parallel with encoding operations for the video stream.
- transcoding the video stream may include processing the video stream according to the selected sets of transcoding parameters other than by compressing the video stream.
- the multiple transcoded video streams are for further processing or storage, such that a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
- a user of the client device may select a particular resolution at which to view the video content of video stream after it has been transcoded at a video hosting platform.
- the video hosting platform serves the transcoded video stream corresponding to the selected resolution to the client device responsive to that user selection.
- raw video frames are extracted from a training data set which includes sets of user generated video content of a video hosting platform.
- the training data set may, for example, include hundreds or thousands of videos of user generated video content at multiple resolutions (e.g., 360p, 480p, 720p, 1080p, 2160p, and/or another resolution).
- the videos of the training data set may be of the same length (e.g., twenty seconds). In some cases, the videos may be pre-processed, such as to shorten the lengths thereof, before they are included in the training data set. Alternatively, the videos of the training data set may be of different lengths.
- Each of the sets of user generated video content included in the training data set includes or otherwise refers to one or more videos hosted at the video hosting platform.
- the sets of user generated video content include videos of multiple content categories to enable the training of a learning model based on video content, rather than based on bitrate information agnostic to video content.
- the raw video frames extracted from the sets of user generated video content are video frames taken directly from those sets of user generated video content without pre-processing performed thereon.
- the raw video frames extracted from a given set of user generated video content may be extracted from within a defined time range of the given set of user generated video content (e.g., within three seconds of each other). Alternatively, there may no limitation as to the time of a given set of user generated video content from which the raw video frames are extracted.
- the raw video frames extracted from the training data set are pre-processed, such as to prepare the raw video frames to be used for training a learning model.
- Pre-processing the raw video frames can include one or both of converting pixel data of the raw video frames or rescaling the raw video frames.
- Converting the pixel data of the raw video frames may, for example, include converting pixel data of the raw video frames from RGB color channels to YUV color channels. For example, if the raw video frames are received in RGB color channel format, the RGB color channel information may be converted to YUV color channel information. However, if the raw video frames are received in the YUV color channel format, no such conversion may be performed.
- the learning model may be trained using only the pixel data corresponding to the Y color channel of the YUV color channels.
- a learning model such as a CNN (convolutional neural network) uses RGB color channel information as input.
- RGB color channel information uses RGB color channel information as input.
- the UV color channel information may be discarded or otherwise ignored for the purpose of training the learning model.
- Rescaling the raw video frames may include determining whether one or more of the raw video frames are in a non-standard resolution (e.g., 1922 ⁇ 1084). For example, the resolution of some or all of the raw video frames may be compared to a defined set of standard resolutions, which may include, but is not limited to, 360p, 480p, 720p, 1080p, and 2160p. A raw video frame is determined to be in a non-standard resolution if the resolution of that raw video frame is not included in the defined set of standard resolutions. Responsive to determining that one or more of the raw video frames are in a non-standard resolution, those raw video frames are rescaled to a standard resolution by padding those raw video frames with zero value coefficients. The standard resolution to which those raw video frames are rescaled is a closest standard resolution with the same aspect ratio to the non-standard resolution at which those raw video frames are extracted from the training data set.
- a non-standard resolution e.g., 1922 ⁇ 1084
- the pre-processing of the raw video frames may be omitted.
- the raw video frames may in some cases be further processed as described below without pre-processing.
- training side information to use for training the learning model is generated using the pre-processed raw video frames.
- the training side information may include or refer to one or more feature maps generated for predicting spatial and/or temporal features of the raw video frames.
- Each feature map may be generated for one of the raw video frames.
- the feature map is a two-dimensional map of spatial features generated for example using a Gabor filter.
- the feature map is generated for predicting temporal features of a raw video frame
- the feature map is for example a two-dimensional optimal flow of temporal features generated using a reference video frame of the video frame. Adding spatial and temporal features can improve the precision of the prediction by the trained learning model.
- the training side information may be generated using the raw video frames without the earlier pre-processing thereof. In some implementations, the generation of the training side information may be omitted.
- a learning model is trained to predict transcoding quality of video content.
- the learning model is trained using the pre-processed raw video frames extracted from the training data set and using the training side information generated using the spatial and/or temporal features of those pre-processed raw video frames. Training the learning model using that information includes training the learning model to statistically predict the delivered quality of video data that will result from a transcoding at given bitrates for given resolutions, subject to the quality control metrics used and the particular video content of the video data.
- the delivered quality of the video data is predicted by transcoding the pre-processed raw video frames of each set of user generated video content of the training data set using each available quality control metric, at each possible CRF, and at each possible resolution. Transcoding the pre-processed raw video frames in this way trains the learning model to determine the bitrate which is used to achieve the associated quality score for each given combination of quality control metric, CRF, and resolution.
- the learning model is trained by transcoding the raw video frames into all possible resolutions and encoding formats using multiple possible transcoding configurations. For example, video content of the training data set which is received in 720p resolution may be transcoded into a 144p resolution version, a 240p resolution version, a 360p resolution version, a 480p resolution version, and a 720p resolution version. In another example, video content of the training data set which is encoded using the H.264 codec may be transcoded at some or all constant rate factors (CRFs) in a range of 1 to 51. Accordingly, the learning model 712 may use 255 different transcoding configurations to produce 255 transcoded versions of that particular video content.
- CRFs constant rate factors
- the learning model is trained to predict the transcoding quality of user generated video content according to a category of that video content.
- the learning model is trained to predict delivered quality levels of the raw video frames of the training data set according to configurations learned for multiple video content categories.
- the learning model may include one or more of producing statistical weights at one or more deep learning or convolutional neural network layers, tuning filters applied to those statistical weights, defining one or more new layers, defining other hyper-parameters such as for input and output processing, or the like.
- the particular structure of the learning model may differ based on the particular implementation of this disclosure, the specific way in which the training of the learning model is performed may vary.
- the learning model is deployed for inference processing of user generated video content uploaded for transcoding to the video hosting platform.
- the learning model may be a new learning model, in which case training the learning model includes producing the learning model.
- the learning model may be a pre-existing learning model, in which case training the learning model includes retraining the learning model.
- the pre-processing is omitted, the learning model is trained using the raw video frames without the earlier pre-processing thereof.
- the generation of the training side information is omitted, the learning model may be trained without using such training side information.
- encoding, decoding, and transcoding illustrate some examples of encoding, decoding, and transcoding techniques. However, it is to be understood that encoding, decoding, and transcoding, as those terms are used in the claims, could mean compression, decompression, transformation, transcoding, trans-rating, trans-sizing, or another processing or change of data.
- example is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as being preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clearly indicated otherwise by the context, the statement “X includes A or B” is intended to mean any of the natural inclusive permutations thereof. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances.
- Implementations of the transmitting station 102 and/or the receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property cores, application-specific integrated circuits, programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit.
- processor should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signal and “data” are used interchangeably. Further, portions of the transmitting station 102 and the receiving station 106 do not necessarily have to be implemented in the same manner.
- the transmitting station 102 or the receiving station 106 can be implemented using a general-purpose computer or general-purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein.
- a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein.
- the transmitting station 102 and the receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- the transmitting station 102 can be implemented on a server, and the receiving station 106 can be implemented on a device separate from the server, such as a handheld communications device.
- the transmitting station 102 can encode content into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal.
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 102 .
- Other suitable transmitting and receiving implementation schemes are available.
- the receiving station 106 can be a generally stationary personal computer rather than a portable communications device.
- implementations of this disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
Abstract
Video streams uploaded to a video hosting platform are transcoded using quality-normalized transcoding parameters dynamically selected using a learning model. Video frames of a video stream are processed using the learning model to determine bitrate and quality score pairs for some or all possible transcoding resolutions. The listing of bitrate and quality score pairs determined for each resolution is processed to determine a set of transcoding parameters for transcoding the video stream into each resolution. The bitrate and quality score pairs of a given listing may be processed using one or more predefined thresholds, which may, in some cases, refer to a weighted distribution of resolutions according to watch times of videos of the video hosting platform. The video stream is then transcoded into the various resolutions using the set of transcoding parameters selected for each resolution.
Description
- Digital video streams may represent video using a sequence of frames or still images. Digital video can be used for various applications including, for example, video conferencing, high-definition video entertainment, video advertisements, or sharing of user-generated videos. A digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data. Various approaches have been proposed to reduce the amount of data in video streams, including encoding or decoding techniques.
- A method for transcoding a video stream of user generated video content according to an implementation of this disclosure comprises determining bitrate and quality scores for transcoding the user generated video content of the video stream at multiple resolutions, such as by querying, a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions using information associated with the user generated video content. Sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions are selected according to the bitrate and quality scores, in which each of the sets of transcoding parameters corresponds to a different resolution of the multiple resolutions. The video stream is transcoded into multiple transcoded video streams using the selected sets of transcoding parameters. Each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding. The multiple transcoded video streams are then output for further processing or storage. A transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
- In some implementations of the method, determining the bitrate and quality scores for transcoding the user generated video content of the video stream at the multiple resolutions comprises receiving, as output of the learning model, predicted delivered quality levels of the video stream for the multiple resolutions. A given predicted delivered quality level represents a quality of the video stream when the video stream is transcoded at a specified bitrate for a corresponding one of the multiple resolutions. Sets (or listings) of bitrate and quality score pairs are then determined using the predicted delivered quality levels, in which each set of bitrate and quality score pairs corresponds to one resolution of the multiple resolutions.
- In some implementations of the method, the learning model computes the predicted delivered quality levels by processing one or more video frames extracted from the video stream using one or more quality control metrics, in which the information associated with the user generated video content corresponds to the one or more video frames.
- In some implementations of the method, each bitrate in a given set of bitrate and quality score pairs is less than or equal to a maximum bitrate allowed for a resolution corresponding to the given set of bitrate and quality score pairs.
- In some implementations of the method, selecting the sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions comprises, for each of the sets of bitrate and quality score pairs, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using a non-linear optimization function to determine weighted values associated with a resolution corresponding to the set of bitrate and quality score pairs, and selecting, as one of the sets of transcoding parameters, a bitrate and quality score pair of the set of bitrate and quality score pairs resulting in a highest one of the weighted values.
- In some implementations of the method, the non-linear optimization function processes the bitrate and quality score pairs of each set of bitrate and quality score pairs using one or more predefined thresholds.
- In some implementations of the method, the one or more predefined thresholds relate to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all of the multiple resolutions, or a visual quality difference measurement threshold.
- In some implementations of the method, when the one or more predefined thresholds relate to the visual quality difference measurement threshold, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises culling ones of the bitrate and quality score pairs which breach the visual quality difference measurement threshold. The weighted values are then determined for remaining ones of the bitrate and quality score pairs.
- In some implementations of the method, the one or more predefined thresholds relate to a weight defined for the resolution corresponding to the set of bitrate and quality score pairs, and processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises determining a weighted value for a bitrate and quality score pair of the set of bitrate and quality score pairs by weighting the quality score of the bitrate and quality score pair using the weight.
- In some implementations of the method, the multiple transcoded video streams are output to a video hosting platform, in which weights defined for each of the multiple resolutions are determined based on watch time distributions for the multiple resolutions across videos uploaded to the video hosting platform.
- In some implementations of the method, the multiple transcoded video streams are output to a video hosting platform. Raw video frames are extracted from sets of user generated video content of the video hosting platform, and the learning model is trained using video content of the raw video frames.
- A further implementation of this disclosure provides a method of training a learning model to predict transcoding quality for user generated video content at multiple resolutions. Initially one or more raw frames are extracted from an input video, and each extracted raw frame is transcoded into one or more, and optionally all, video formats with a resolution up to the resolution of the input video, and for multiple transcoding configurations. The training method comprises providing labelled transcoded versions as input to the learning model and obtaining predicted values for the bitrate and quality score. The parameters of the learning model may be adjusted based on a comparison of the predicted values for the bitrate and quality score with the corresponding labelled bitrate and quality score.
- In some implementations of the methods, the raw video frames are pre-processed prior to training the learning model using the video content of the raw video frames.
- In some implementations of the methods, pre-processing the raw video frames comprises converting pixel data of the raw video frames from RGB color channels to YUV color channels, in which the learning model is trained using only the pixel data corresponding to a Y color channel of the YUV color channels.
- In some implementations of the methods, pre-processing the raw video frames comprises determining whether one or more of the raw video frames are in a non-standard resolution. Responsive to determining that the one or more of the raw video frames are in the non-standard resolution, the one or more of the raw video frames are rescaled to the standard resolution by padding the one or more of the raw video frames with zero value coefficients.
- In some implementations of the methods, training the learning model using the video content of the raw video frames comprises processing a video frame of the raw video frames using a feature map generated for predicting spatial or temporal features of the video frame.
- In some implementations of the methods, the feature map is a two-dimensional map of spatial features generated using a Gabor filter.
- In some implementations of the methods, the feature map is a two-dimensional optimal flow of temporal features generated using a reference video frame of the video frame.
- In some implementations of the methods, the sets of user generated video content correspond to multiple video content categories, wherein the learning model is trained to predict delivered quality levels of the raw video frames according to configurations learned for the multiple video content categories.
- An apparatus according to an implementation of this disclosure comprises a memory and a processor, in which the memory includes instructions executable by the processor to perform a method of any of the foregoing implementations.
- A transcoder according to an implementation of this disclosure is configured to perform the method of any of the foregoing implementations.
- A further implementation of this disclosure comprises a computer-readable memory storing instructions that, when implemented by a processor, cause the processor to perform a method of any of the foregoing implementations.
- These and other aspects of this disclosure are disclosed in the following detailed description of the implementations, the appended claims, and the accompanying figures.
- The description herein makes reference to the accompanying drawings described below, wherein like reference numerals refer to like parts throughout the several views.
-
FIG. 1 is a schematic of an example of a video encoding and decoding system. -
FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station. -
FIG. 3 is a diagram of an example of a video stream to be encoded and decoded. -
FIG. 4 is a block diagram of an example of an encoder. -
FIG. 5 is a block diagram of an example of a decoder. -
FIG. 6 is a block diagram of an example of a transcoder that uses searched parameters. -
FIG. 7 is a block diagram of an example of a video transcoder that uses a learning model for dynamic parameter prediction and selection. -
FIG. 8 is a flowchart diagram of an example of a technique for transcoding a video stream using a learning model trained to predict transcoding quality for user generated video content. -
FIG. 9 is a flowchart diagram of an example of a technique for training a learning model to predict transcoding quality for user generated video content. - Video compression schemes may include breaking respective images, or frames, into smaller portions, such as blocks, and generating a compressed bitstream using techniques to limit the information included for respective blocks in the output. The compressed bitstream can be decoded to re-create the source images from the limited information. Typical video compression techniques include reducing the bitrate of a video stream, such as to reduce transmission costs for video hosting and serving platforms. Compression may be performed as part of or otherwise in connection with the transcoding of video content, such as to convert aspects of the video content from one format to another. For example, when user generated video content is uploaded to a video hosting platform, video stream representing the user generated content may be compressed and transcoded for later viewing on the video hosting platform.
- Video hosting platforms conventionally transcode uploaded video content into multiple target resolutions before serving the video content to platform users. For example, a video received at a resolution of 1080p may be transcoded into 360p, 480p, 720p, and possibly other resolution formats. When a user of such a video hosting platform requests to view a hosted video, the platform selects a target format to serve to the user based on input criteria such as network conditions and user device capabilities. In some cases, the platform may select the target format expected to deliver the highest quality of the video to the user based on those input criteria. For example, where a user’s network conditions and user device capabilities are able to support a 1080p resolution format of a video, the video hosting platform may serve that format version. This is because the higher resolution is associated with a higher playback quality and further because the relatively high bitrate requirements required to support playback at that resolution are attainable by the user’s network conditions and user device capabilities.
- However, information other than network conditions and user device capabilities may be significant for maximizing a delivered quality of a video to a user of a video hosting platform. In particular, compression bitrate is an important indicator on the effect of compression on video quality, and the influence of bitrate depends largely on the actual content of a video. Thus, videos with different content compressed at the same bitrate will potentially have very different video quality. Typical video transcoding approaches both process transcoded targets independently of one another with fixed parameters and without considering the potential variance of video content itself. As such, the quality of a video transcoded at a highest resolution may still suffer from noticeable compression artifacts or even become much worse by the transcoding, such as where the transcoding parameters used are improperly selected.
- One solution is to align the quality of videos at given resolutions by conducting an exhaustive search across the entire transcoding space to find all possible bitrates and qualities. Such a solution first involves generating multiple targets for each resolution across all resolutions and then computing different quality metrics (e.g., peak signal to noise ratio (PSNR) values) for each target. A determination can then be made as to which targets fit within an acceptable range for a predefined quality level. For example, a 480p target video should have a PSNR value of around 35, and a 720p target video should have a PSNR value above 40. This process is then repeated at each resolution available for transcoding. Once it is completed, an optimal target transcoding for the video can be selected. However, given the wide variety of transcoding resolutions and quality metrics, this solution is highly time consuming and computationally expensive. In some cases, it actually may become infeasible given the prohibitive computing expense of generating all possible targets in a full transcoding pipeline.
- Implementations of this disclosure address problems such as these by maximizing the delivered quality of videos by dynamically selecting quality-normalized transcoding parameters using a learning model trained to predict transcoding quality for sets of user generated video content at different resolutions. When a video hosting platform receives a video stream for transcoding, information associated with the user generated video content (for example, video frames of the video stream) is processed using the learning model to determine bitrate and quality score pairs for some or all possible transcoding resolutions. The bitrate and quality score pairs represent a predicted quality level of the video stream when it is transcoded at the stated bitrate for a given resolution. The set (or listing) of bitrate and quality score pairs determined for each resolution is then processed to determine, for each resolution, a set of transcoding parameters to use to transcode the video stream into that resolution. In particular, the various bitrate and quality score pairs of a given set may be processed using one or more predefined thresholds, which may, for example, refer to a weighted distribution of resolutions according to watch times of videos of the video hosting platform. The video stream is then transcoded into the various resolutions using the set of transcoding parameters selected for each resolution.
- Advantages of the techniques described herein include the ability to produce, such as by training, based on a data set, a learning model to predict transcoding quality for sets of user generated video content at multiple resolutions, and the ability to use the produced model, such as for inference, to optimize dynamic parameter selection for quality-normalized video transcoding. In particular, the techniques described herein enable a learning model to be generated that is configured to output an estimate of bitrate requirements and video quality, which could be used, for example, to select parameters to use to optimally transcode video content in a way that maximizes the deliverable quality of that content or otherwise in connection with a process for transcoding a video stream, such as which may be uploaded to a video hosting platform.
- The techniques described herein accomplish significant computational cost and latency savings over the approaches implemented in conventional transcoding pipelines. In particular, as described above, the computational cost for a full range of transcoding for user generated video content in a conventional transcoding pipeline is calculated as the number of possible transcoding configurations multiplied by the number of possible output resolutions multiplied by the sum of the cost to decode and encode the given input video stream. However, the techniques described herein, which instead use bitrate and quality scores predicted using a trained learning model to select optimal transcoding parameters, only needs to decode the given input video stream once. That is, the target bitrate and quality score pairs for the various target transcoding resolutions are obtained by a single query to the learning model, which carries an overall cost in the same magnitude as the cost to decode the given input video stream, which in any event is much smaller than the cost to encode the given input video stream.
- As used herein, the learning model may be a machine learning model. For example, the machine learning model may be or include one or more of a neural network (e.g., a convolutional neural network, recurrent neural network, or other neural network), decision tree, support vector machine, Bayesian network, genetic algorithm, deep learning system separate from a neural network, or other machine learning model. As used herein, a set of user generated video content is or refers to all or a portion of a video hosted at a video hosting platform, which video includes user generated video content. For example, a set of user generated video content may refer to a video uploaded to the video hosting platform by a user of the video hosting platform.
- Further details of techniques for dynamic parameter selection for quality-normalized video transcoding are described herein with initial reference to a system in which they can be implemented.
FIG. 1 is a schematic of an example of a video encoding anddecoding system 100. A transmittingstation 102 can be, for example, a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other implementations of the transmittingstation 102 are possible. For example, the processing of the transmittingstation 102 can be distributed among multiple devices. - A
network 104 can connect the transmittingstation 102 and a receivingstation 106 for encoding and decoding of the video stream. Specifically, the video stream can be encoded in the transmittingstation 102, and the encoded video stream can be decoded in the receivingstation 106. Thenetwork 104 can be, for example, the Internet. Thenetwork 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network, or any other means of transferring the video stream from the transmittingstation 102 to, in this example, the receivingstation 106. - The receiving
station 106, in one example, can be a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other suitable implementations of the receivingstation 106 are possible. For example, the processing of the receivingstation 106 can be distributed among multiple devices. - Other implementations of the video encoding and
decoding system 100 are possible. For example, an implementation can omit thenetwork 104. In another implementation, a video stream can be encoded and then stored for transmission at a later time to the receivingstation 106 or any other device having memory. In one implementation, the receivingstation 106 receives (e.g., via thenetwork 104, a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding. In an example implementation, a real-time transport protocol (RTP) is used for transmission of the encoded video over thenetwork 104. In another implementation, a transport protocol other than RTP may be used (e.g., a Hypertext Transfer Protocol-based (HTTP-based) video streaming protocol). - When used in a video conferencing system, for example, the transmitting
station 102 and/or the receivingstation 106 may include the ability to both encode and decode a video stream as described below. For example, the receivingstation 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) to decode and view and further encodes and transmits his or her own video bitstream to the video conference server for decoding and viewing by other participants. - In some implementations, the video encoding and
decoding system 100 may instead be used to encode and decode data other than video data. For example, the video encoding anddecoding system 100 can be used to process image data. The image data may include a block of data from an image. In such an implementation, the transmittingstation 102 may be used to encode the image data and the receivingstation 106 may be used to decode the image data. - Alternatively, the receiving
station 106 can represent a computing device that stores the encoded image data for later use, such as after receiving the encoded or pre-encoded image data from the transmittingstation 102. As a further alternative, the transmittingstation 102 can represent a computing device that decodes the image data, such as prior to transmitting the decoded image data to the receivingstation 106 for display. -
FIG. 2 is a block diagram of an example of acomputing device 200 that can implement a transmitting station or a receiving station. For example, thecomputing device 200 can implement one or both of the transmittingstation 102 and the receivingstation 106 ofFIG. 1 . Thecomputing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like. - A
processor 202 in thecomputing device 200 can be a conventional central processing unit. Alternatively, theprocessor 202 can be another type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed. For example, although the disclosed implementations can be practiced with one processor as shown (e.g., the processor 202), advantages in speed and efficiency can be achieved by using more than one processor. - A
memory 204 incomputing device 200 can be a read only memory (ROM) device or a random-access memory (RAM) device in an implementation. However, other suitable types of storage device can be used as thememory 204. Thememory 204 can include code and data 206 that is accessed by theprocessor 202 using abus 212. Thememory 204 can further include an operating system 208 andapplication programs 210, theapplication programs 210 including at least one program that permits theprocessor 202 to perform the techniques described herein. For example, theapplication programs 210 can includeapplications 1 through N, which further include a learning model training application and/or a video stream transcoding application that performs the techniques described herein. - The
computing device 200 can also include asecondary storage 214, which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in thesecondary storage 214 and loaded into thememory 204 as needed for processing. - The
computing device 200 can also include one or more output devices, such as adisplay 218. Thedisplay 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs. Thedisplay 218 can be coupled to theprocessor 202 via thebus 212. Other output devices that permit a user to program or otherwise use thecomputing device 200 can be provided in addition to or as an alternative to thedisplay 218. When the output device is or includes a display, the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display, or a light emitting diode (LED) display, such as an organic LED (OLED) display. - The
computing device 200 can also include or be in communication with an image-sensingdevice 220, for example, a camera, or any other image-sensingdevice 220 now existing or hereafter developed that can sense an image such as the image of a user operating thecomputing device 200. The image-sensingdevice 220 can be positioned such that it is directed toward the user operating thecomputing device 200. In an example, the position and optical axis of the image-sensingdevice 220 can be configured such that the field of vision includes an area that is directly adjacent to thedisplay 218 and from which thedisplay 218 is visible. - The
computing device 200 can also include or be in communication with a sound-sensing device 222, for example, a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near thecomputing device 200. The sound-sensing device 222 can be positioned such that it is directed toward the user operating thecomputing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates thecomputing device 200. - Although
FIG. 2 depicts theprocessor 202 and thememory 204 of thecomputing device 200 as being integrated into a single unit, other configurations can be utilized. The operations of theprocessor 202 can be distributed across multiple machines (wherein individual machines can have one or more processors) that can be coupled directly or across a local area or other network. Thememory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of thecomputing device 200. - Although depicted here as one bus, the
bus 212 of thecomputing device 200 can be composed of multiple buses. Further, thesecondary storage 214 can be directly coupled to the other components of thecomputing device 200 or can be accessed via a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards. Thecomputing device 200 can thus be implemented in a wide variety of configurations. -
FIG. 3 is a diagram of an example of avideo stream 300 to be encoded and decoded. Thevideo stream 300 includes avideo sequence 302. At the next level, thevideo sequence 302 includes severaladjacent frames 304. While three frames are depicted as theadjacent frames 304, thevideo sequence 302 can include any number ofadjacent frames 304. Theadjacent frames 304 can then be further subdivided into individual frames, for example, aframe 306. - At the next level, the
frame 306 can be divided into a series of planes orsegments 308. Thesegments 308 can be subsets of frames that permit parallel processing, for example. Thesegments 308 can also be subsets of frames that can separate the video data into separate colors. For example, aframe 306 of color video data can include a luminance plane and two chrominance planes. Thesegments 308 may be sampled at different resolutions. - Whether or not the
frame 306 is divided intosegments 308, theframe 306 may be further subdivided intoblocks 310, which can contain data corresponding to, for example, 16×16 pixels in theframe 306. Theblocks 310 can also be arranged to include data from one ormore segments 308 of pixel data. Theblocks 310 can also be of any other suitable size such as 4×4 pixels, 8×8 pixels, 16×8 pixels, 8×16 pixels, 16×16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein. -
FIG. 4 is a block diagram of an example of anencoder 400. Theencoder 400 can be implemented, as described above, in the transmittingstation 102, such as by providing a computer software program stored in memory, for example, thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theprocessor 202, cause the transmittingstation 102 to encode video data in the manner described inFIG. 4 . Theencoder 400 can also be implemented as specialized hardware included in, for example, the transmittingstation 102. In some implementations, theencoder 400 is a hardware encoder. - The
encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded orcompressed bitstream 420 using thevideo stream 300 as input: an intra/inter prediction stage 402, atransform stage 404, aquantization stage 406, and anentropy encoding stage 408. Theencoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks. InFIG. 4 , theencoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410, aninverse transform stage 412, areconstruction stage 414, and aloop filtering stage 416. Other structural variations of theencoder 400 can be used to encode thevideo stream 300. - In some cases, the functions performed by the
encoder 400 may occur after a filtering of thevideo stream 300. That is, thevideo stream 300 may undergo pre-processing according to one or more implementations of this disclosure prior to theencoder 400 receiving thevideo stream 300. Alternatively, theencoder 400 may itself perform such pre-processing against thevideo stream 300 prior to proceeding to perform the functions described with respect toFIG. 4 , such as prior to the processing of thevideo stream 300 at the intra/inter prediction stage 402. - When the
video stream 300 is presented for encoding after the pre-processing is performed,adjacent frames 304, such as theframe 306, can be processed in units of blocks. At the intra/inter prediction stage 402, respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction). In any case, a prediction block can be formed. In the case of intra-prediction, a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter-prediction, a prediction block may be formed from samples in one or more previously constructed reference frames. - Next, the prediction block can be subtracted from the current block at the intra/
inter prediction stage 402 to produce a residual block (also called a residual). Thetransform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms. Thequantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated. - The quantized transform coefficients are then entropy encoded by the
entropy encoding stage 408. The entropy-encoded coefficients, together with other information used to decode the block (which may include, for example, syntax elements such as used to indicate the type of prediction used, transform type, motion vectors, a quantizer value, or the like), are then output to thecompressed bitstream 420. Thecompressed bitstream 420 can be formatted using various techniques, such as variable length coding or arithmetic coding. Thecompressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein. - The reconstruction path (shown by the dotted connection lines) can be used to ensure that the
encoder 400 and a decoder 500 (described below with respect toFIG. 5 ) use the same reference frames to decode thecompressed bitstream 420. The reconstruction path performs functions that are similar to functions that take place during the decoding process (described below with respect toFIG. 5 ), including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at theinverse transform stage 412 to produce a derivative residual block (also called a derivative residual). - At the
reconstruction stage 414, the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 416 can apply an in-loop filter or other filter to the reconstructed block to reduce distortion such as blocking artifacts. Examples of filters which may be applied at theloop filtering stage 416 include, without limitation, a deblocking filter, a directional enhancement filter, and a loop restoration filter. - Other variations of the
encoder 400 can be used to encode thecompressed bitstream 420. In some implementations, a non-transform-based encoder can quantize the residual signal directly without thetransform stage 404 for certain blocks or frames. In some implementations, an encoder can have thequantization stage 406 and the dequantization stage 410 combined in a common stage. -
FIG. 5 is a block diagram of an example of adecoder 500. Thedecoder 500 can be implemented in the receivingstation 106, for example, by providing a computer software program stored in thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theprocessor 202, cause the receivingstation 106 to decode video data in the manner described inFIG. 5 . Thedecoder 500 can also be implemented in hardware included in, for example, the transmittingstation 102 or the receivingstation 106. In some implementations, thedecoder 500 is a hardware decoder. - The
decoder 500, similar to the reconstruction path of theencoder 400 discussed above, includes in one example the following stages to perform various functions to produce anoutput video stream 516 from the compressed bitstream 420: anentropy decoding stage 502, adequantization stage 504, aninverse transform stage 506, an intra/inter prediction stage 508, areconstruction stage 510, aloop filtering stage 512, and a post filter stage 514. Other structural variations of thedecoder 500 can be used to decode thecompressed bitstream 420. - When the
compressed bitstream 420 is presented for decoding, the data elements within thecompressed bitstream 420 can be decoded by theentropy decoding stage 502 to produce a set of quantized transform coefficients. Thedequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and theinverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by theinverse transform stage 412 in theencoder 400. Using header information decoded from thecompressed bitstream 420, thedecoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 (e.g., at the intra/inter prediction stage 402). - At the
reconstruction stage 510, the prediction block can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. Examples of filters which may be applied at theloop filtering stage 512 include, without limitation, a deblocking filter, a directional enhancement filter, and a loop restoration filter. Other filtering can be applied to the reconstructed block. In this example, the post filter stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as theoutput video stream 516. Theoutput video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein. - Other variations of the
decoder 500 can be used to decode thecompressed bitstream 420. In some implementations, thedecoder 500 can produce theoutput video stream 516 without the post filter stage 514 or otherwise omit the post filter stage 514. -
FIG. 6 is a block diagram of an example of a transcoder 600 which uses searched parameters. The transcoder 600 can be implemented in the transmittingstation 102, such as by providing a computer software program stored in memory, for example, thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theprocessor 202, cause the transmittingstation 102 to transcode video data in the manner described inFIG. 6 . The transcoder 600 can also be implemented as specialized hardware included in, for example, the transmittingstation 102. In some implementations, the transcoder 600 can be or represent functionality performed in connection with an encoder, such as theencoder 400 shown inFIG. 4 . In some implementations, theencoder 400 and the transcoder 600 can be combined into a single computer software program. - The transcoder 600 represents a transcoding pipeline that receives a
video stream 602 and transcodes thevideo stream 602 to produce transcoded content. Thevideo stream 602 may be a compressed bitstream, such as thecompressed bitstream 420 shown inFIGS. 4 and 5 . For example, thevideo stream 602 may be received in an encoded form at the transcoder 600. Alternatively, thevideo stream 602 may be an input video stream, such as thevideo stream 300 shown inFIG. 3 . For example, thevideo stream 602 may be encoded as part of or in parallel with the transcoding performed at the transcoder 600. - The
video stream 602 may be or otherwise represent a video uploaded to a video hosting platform and which is awaiting transcoding for delivery to a user of that video hosting platform. Atranscoding stage 604 uses searched parameters to transcode thevideo stream 602, such as to produce transcoded video streams at different target bitrates and quality levels in the same encoded format and/or to different encoded formats. In the example shown, thetranscoding stage 604 produces a transcodedvideo stream 1 606 at a first resolution and format pair based on thevideo stream 602, a transcoded video stream (not shown) at a second resolution and format pair based on thevideo stream 602, through a transcodedvideo stream N 608 at an Nth resolution and format pair based on thevideo stream 602. - The
transcoding stage 604 conducts a search across the transcoding space to determine the parameters for transcoding thevideo stream 602, such as based on different quality control metric tools, different resolutions, different encoding formats, and the content of thevideo stream 602. The transcodedvideo stream 1 606 through the transcodedvideo stream N 608 represent possible transcoded versions for thevideo stream 602 using different parameters determined by the searching across the transcoding space. Each of the transcodedvideo stream 1 606 through the transcodedvideo stream N 608 may be or otherwise represent a video stream which may be decoded and output for display at a computing device, such as a client device of a user of the video hosting platform which uses the transcoder 600. -
FIG. 7 is a block diagram of an example of atranscoder 700 that uses a learning model for dynamic parameter prediction and selection. As shown, thetranscoder 700 is a variation of the transcoder 600 shown inFIG. 6 , such as in which the transcoder 600 has been modified to include aparameter prediction stage 702 and aparameter selection stage 704, and in which thetranscoding stage 604 shown inFIG. 6 is replaced with or modified to be atranscoding stage 706 which uses output of theparameter selection stage 704 to transcode thevideo stream 602. However, in some implementations, thetranscoder 700 may instead be another transcoder. - As shown, the
transcoder 700 receives thevideo stream 602 as input and transcodes thevideo stream 602 using dynamically selected transcoding parameters to produce transcoded content, such as a transcodedvideo stream 1 708 through a transcodedvideo stream M 710. The value of M generally refers to the number of different resolutions available for transcoding thevideo stream 602, such that thevideo stream 602 is transcoded into as many transcoded video streams as there are resolutions available for the transcoding. The value of M expressed with respect to the transcodedvideo stream M 710 may be less than or equal to the value of N expressed with respect to the transcodedvideo stream N 608. That is, in some cases, fewer transcoded video streams may be output by thetranscoding stage 706 using the selected parameters than are output by thetranscoding stage 604 using the searched parameters. - The
parameter prediction stage 702 receives thevideo stream 602 and uses alearning model 712 trained to predict the transcoding quality of user generated video content to determine bitrate and quality score pairs which may be further processed for transcoding thevideo stream 602. In particular, theparameter prediction stage 702 uses thelearning model 712 to determine bitrate and quality scores computed for transcoding some video frames of thevideo stream 602 at different resolutions. - The
learning model 712 receives the video frames of thevideo stream 602 as input, such as by theparameter prediction stage 702 querying the learning model using those video frames, and computes predicted delivered quality levels of thevideo stream 602 for the different resolutions as output. The predicted delivered quality levels indicate quality scores for predicted for thevideo stream 602, according to a particular quality control metric, when thevideo stream 602 is transcoded at various bitrates for various resolutions. Thelearning model 712 is configured to use one or more, but not all, video frames of thevideo stream 602 as input. In some implementations, however, thelearning model 712 can use each video frame of thevideo stream 602 as input. - The
learning model 712 processes the video frames it receives as input using one or more quality control metrics and at one or more possible transcoding resolutions (e.g., 360p, 720p, 1080p, or the like) to compute the predicted delivered quality levels. The quality control metrics are metrics which may be used to measure the quality of video data resulting from transcoding that video data at a specified bitrate for a given resolution. Examples of quality control metrics which may be used by learningmodel 712 include, but are not limited to, PSNR, PSNR mean opinion score (PSNR MOS), and video multimethod assessment fusion (VMAF). - For each possible resolution into which the
video stream 602 may be transcoded, a set (or listing) of bitrate and quality score pairs is determined using the predicted delivered quality levels computed as output by thelearning model 712. That is, a first set of bitrate and quality score pairs is determined for a first of the possible resolutions (such as 360p), a second set of bitrate and quality score pairs is determined for a second of the possible resolutions (such as 480p), and so on. Each bitrate and quality score pair of a given set of bitrate and quality score pairs indicates the quality score predicted for thevideo stream 602 and the bitrate used to achieve that quality score. In that there are many different possible quality outcomes for thevideo stream 602 after it is transcoded, a set of bitrate and quality score pairs may include a number of bitrate and quality score pairs. Each set of bitrate and quality score pairs may be sorted by quality score or by another means. - In some implementations, the
learning model 712 may output the sets of bitrate and quality score pairs. For example, rather than theparameter prediction stage 702 performing some processing against the output of the learning model 712 (e.g., the predicted delivered quality levels) to determine the sets of bitrate and quality score pairs, thelearning model 712 may instead be trained to determine those sets of bitrate and quality score pairs using those predicted delivered quality levels. Implementations and examples of techniques for training thelearning model 712 are described below with respect toFIG. 9 . - The
parameter selection stage 704 uses the output of theparameter prediction stage 702 to optimize configurations of thetranscoder 700 for transcoding thevideo stream 602, such as by selecting transcoding parameters based on the output of theparameter prediction stage 702. Because the transcoding parameters are selected using thelearning model 712 trained with user generated video content of various categories, the transcoding parameters selected at theparameter selection stage 704 are globally optimized for transcoding the video stream 602 (that is, are optimized across all content categories). - The
parameter selection stage 704 processes the sets of bitrate and quality score pairs for each resolution output of theparameter prediction stage 702 against one or more transcoding constraints to select, for one or more of the resolutions, the preferred transcoding parameters for that resolution. The transcoding constraints may include or otherwise refer to predefined thresholds and/or device parameters. For example, the device parameters may be parameters relating to one or more of weights of some or all resolutions or weights of some or all valid transcoding versions. In another example, the predefined thresholds may be thresholds relating to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all resolutions, or a visual quality difference measurement threshold for the visual quality scores. The visual quality difference measurement threshold refers to a measure of the change in bitrate required to cause a noticeable change in the delivered quality of a video at a given resolution. The visual quality difference measurement threshold is indicated in units of the quality control metric used for processing thevideo stream 602, such as VMAF. The quality score determined for thevideo stream 602, such as at theparameter prediction stage 702, may be normalized by the visual quality difference measurement threshold. - In one implementation, for each possible resolution, the
parameter selection stage 704 selects a set of transcoding parameters for transcoding thevideo stream 602 into that resolution by processing the set of bitrate and quality score pairs for that resolution against a parameter maximizing function. The parameter maximizing function processes each of the sets of bitrate and quality score pairs individually. That is, for each possible resolution, the parameter maximizing function takes in a corresponding set of bitrate and quality score pairs and input and determines the optimal bitrate and quality score pair of that set of score pairs as output. - In one example, the parameter maximizing function may process each pair of a given set of bitrate and quality score pairs by weighting the corresponding resolution according to the quality score of the given pair, with the bitrate constraint that the bitrate of the weighted resolution cannot exceed the overall bitrate upper bound set for all transcoded versions of the
video stream 602. A non-linear optimization solution, such as using sequential quadratic programming, may be used to compute weighted values as outputs of the parameter maximizing function. The parameter maximizing function may thus be referred to as a non-linear optimization function. - After weighted value outputs are determined for each of the bitrate and quality score pairs in the set of score pairs for the corresponding resolution, the bitrate and quality score pair corresponding to the highest weighted value output from the parameter maximizing function is selected as the set of transcoding parameters to use for transcoding the
video stream 602 at the resolution corresponding to the set of bitrate and quality score pairs. The parameters selected at theparameter selection stage 704 thus include or otherwise refer to, for a resolution of the possible resolutions, the optimal bitrate and quality score pair identified for the corresponding set of bitrate and quality score pairs. As such, transcoding parameters, which include but are not limited to including only a single bitrate and quality score pair, are output from theparameter selection stage 704 for each of the possible transcoding resolutions. - The
transcoding stage 706 transcodes thevideo stream 602 using the transcoding parameters selected at theparameter selection stage 704 for each resolution to produce output transcoded video streams, such as the transcodedvideo stream 1 708 through the transcodedvideo stream M 710. In this way, thevideo stream 602 can be optimally transcoded into multiple different resolutions using the selected transcoding parameters, such as to maximize the delivered quality of thevideo stream 602 at each of a number of different resolutions. - In some implementations, the set of bitrate and quality score pairs for each resolution can be determined at the
parameter selection stage 704 instead of at theparameter prediction stage 702. For example, theparameter prediction stage 702 may output the vector of bitrate and quality scores computed by thelearning model 712 to theparameter selection stage 704. In such a case, theparameter selection stage 704 determines the sets of bitrate and quality score pairs for each resolution using the vector received from theparameter prediction stage 702. - In some implementations, the
learning model 712 may be one of a plurality of learning models used by thetranscoder 700. In some such implementations, each different learning model used by thetranscoder 700 may be trained to predict transcoding quality for different categories of user generated video content. For example, a first learning model may be trained based on game streaming video content, a second learning model may be trained based on news show video content, a third learning model may be trained based on lyric music video content, and so on. It has been found that the best transcoding parameters for a particular video may depend on the content category of the video. Multiple learning models may therefore be provided, each learning model trained to predict transcoding quality for user generated video content of one particular content category or of two or more particular content categories. When a video stream is received for transcoding, it may be initially categorized, and assigned to one of the multiple learning models dependent on the category determined for the video stream. - In other such implementations, each different learning model using by the
transcoder 700 may be trained to predict transcoding quality for one of the resolutions available for transcoding thevideo stream 602. For example, a first learning model may be trained to predict the transcoded quality of video streams at 480p, a second learning model may be trained to predict the transcoded quality of video streams at 1080p, and so on. In any such implementation, the training of each of those multiple learning models would be performed as described with respect to thelearning model 712. - Further details of techniques for dynamic parameter selection for quality-normalized video transcoding are now described.
FIG. 8 is a flowchart diagram of an example of atechnique 800 for transcoding a video stream using a learning model trained to predict transcoding quality for user generated video content.FIG. 9 is a flowchart diagram of an example of atechnique 900 for training a learning model to predict transcoding quality for user generated video content. - The
technique 800 and/or thetechnique 900 can be implemented, for example, as a software program that may be executed by computing devices such as the transmittingstation 102 or the receivingstation 106. For example, the software program can include machine-readable instructions that may be stored in a memory such as thememory 204 or thesecondary storage 214, and that, when executed by a processor, such as theprocessor 202, may cause the computing device to perform thetechnique 800 and/or thetechnique 900. Thetechnique 800 and/or thetechnique 900 can be implemented using specialized hardware or firmware. For example, a hardware component configured to perform thetechnique 800 and/or thetechnique 900. As explained above, some computing devices may have multiple memories or processors, and the operations described in thetechnique 800 and/or thetechnique 900 can be distributed using multiple processors, memories, or both. - For simplicity of explanation, the
techniques - Referring first to
FIG. 8 , thetechnique 800 for transcoding a video stream using a learning model trained to predict transcoding quality for user generated video content is shown. At 802, bitrate and quality scores for transcoding user generated video content of a video stream at multiple resolutions are determined, such as by querying a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions using information associated with the user generated video content. The information associated with the user generated video content may, for example, correspond to one or more video frames of the video stream. The video stream includes video frames at an unspecified quality level. The video stream may, for example, be thevideo stream 602 shown inFIG. 7 . Although the video frames may all share a common, unspecified quality level, in some implementations, some of the video frames may have different, unspecified quality levels from others of the video frames. - Determining the bitrate and quality scores for transcoding the user generated video content of the video stream at the multiple resolutions includes receiving, as output of a learning model, predicted delivered quality levels of the video stream for the multiple resolutions and determining sets of bitrate and quality score pairs using the predicted delivered quality levels. A given predicted delivered quality level represents a quality of the video stream when the video stream is transcoded at a specified bitrate for a corresponding one of the multiple resolutions. Each set of bitrate and quality score pairs corresponds to one resolution of the multiple resolutions. The learning model may, for example, be the
learning model 712 shown inFIG. 7 , which takes video frames of the video stream to be transcoded as input. - The learning model computes the predicted delivered quality levels by processing one or more video frames extracted from the video stream using one or more quality control metrics. The quality control metrics are or refer to metrics which may be applied to measure a quality score for the one or more video frames at different bitrates for a given resolution. The quality control metric used may, for example, be PSNR, PSNR MOS, VMAF, or another quality control metric. Processing the video frames of the video stream using a quality control metric includes determining quality scores for the video frame at different bitrates and for a given target transcoding resolution.
- At 804, sets of transcoding parameters to use for transcoding the video stream at one or more of, and possibly for each of, the multiple resolutions are selected according to the bitrate and quality scores, in which each selected set of transcoding parameters corresponds to a different resolution of the multiple resolutions. For each set of bitrate and quality score pairs, and thus for each resolution of the multiple resolutions to which to transcode the video stream, selecting a set of transcoding parameters may include processing each bitrate and quality score pair of the set of bitrate and quality score pairs for that resolution using a non-linear optimization function to determine weighted values associated with a resolution corresponding to the set of bitrate and quality score pairs. A bitrate and quality score pair of the set of bitrate and quality score pairs for a resolution resulting in a highest one of the weighted values is then selected as the set of transcoding parameters for that resolution.
- The non-linear optimization function processes the bitrate and quality score pairs of each set of bitrate and quality score pairs using one or more predefined thresholds. For example, the one or more predefined thresholds may relate to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all of the multiple resolutions, or a visual quality difference measurement threshold. When the one or more predefined thresholds relate to a visual quality difference measurement threshold, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function includes culling (eliminating) ones of the bitrate and quality score pairs which breach the visual quality difference measurement threshold. For example, each bitrate and quality score pair which breaches the visual quality difference measurement threshold may be removed from the corresponding set of bitrate and quality score pairs. In such a case, the weighted values are determined for remaining ones of the bitrate and quality score pairs in that set.
- The visual quality difference measurement threshold refers to whether a noticeable change in quality results from an increase in bitrate. The visual quality difference measurement threshold is breached for a given bitrate and quality score pair at position i within the set of bitrate and quality score pairs when the bitrate value of that pair, B[i], is greater than the bitrate value of the preceding pair in the set, B[i-1], but the difference in the quality score value of that pair, Q[i], and the quality score value of that preceding pair, Q[i-1], is less than the visual quality difference measurement threshold. The specific value of the visual quality difference measurement threshold may be predefined for the quality control metric used to determine the bitrate and quality scores. For example, where VMAF is used, the visual quality difference measurement threshold may be six.
- In another example, the one or more predefined thresholds may relate to a weight defined for the resolution corresponding to the set of bitrate and quality score pairs. In such a case, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function includes determining a weighted value for a bitrate and quality score pair of the set of bitrate and quality score pairs by weighting the quality score of the bitrate and quality score pair using the weight. The weights defined for each of the multiple resolutions are determined based on watch time distributions for the multiple resolutions across videos uploaded to the video hosting platform to which the video stream is uploaded for transcoding. Accordingly, resolutions which are more frequently served by the video hosting platform will be weighted more heavily than resolutions which are less frequently served by the video hosting platform.
- The determined set of transcoding parameters for a given resolution thus includes a bitrate at which to transcode the video stream to achieve the corresponding quality score at that given resolution. However, each set of transcoding parameters may, in some cases, include other parameters to use for transcoding the video stream. For example, a given set of transcoding parameters may further include one or more of a CRF, a minimum bitrate, or a maximum bitrate. In that the set of transcoding parameters is determined using a learning model trained based on a wide variety of user generated video content of a video hosting platform, the set of transcoding parameters is quality-normalized across the collection of videos of the video hosting platform.
- At 806, the video stream is transcoded into multiple transcoded video streams using, for each resolution, the set of transcoding parameters selected for that resolution, in which each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding. Transcoding the video stream using the selected sets of transcoding parameters may include adjusting an initial CRF for the video stream according to the respective CRFs specified in the selected sets of transcoding parameters.
- In some implementations, transcoding the video stream may include compressing the video stream according to the selected sets of transcoding parameters, such as where the transcoding is performed by an encoder or in parallel with encoding operations for the video stream. In some implementations, transcoding the video stream may include processing the video stream according to the selected sets of transcoding parameters other than by compressing the video stream.
- At 808, the multiple transcoded video streams are for further processing or storage, such that a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream. For example, a user of the client device may select a particular resolution at which to view the video content of video stream after it has been transcoded at a video hosting platform. The video hosting platform serves the transcoded video stream corresponding to the selected resolution to the client device responsive to that user selection.
- Referring next to
FIG. 9 , atechnique 900 for training a learning model to predict transcoding quality for user generated video content is shown. At 902, raw video frames are extracted from a training data set which includes sets of user generated video content of a video hosting platform. The training data set may, for example, include hundreds or thousands of videos of user generated video content at multiple resolutions (e.g., 360p, 480p, 720p, 1080p, 2160p, and/or another resolution). The videos of the training data set may be of the same length (e.g., twenty seconds). In some cases, the videos may be pre-processed, such as to shorten the lengths thereof, before they are included in the training data set. Alternatively, the videos of the training data set may be of different lengths. - Each of the sets of user generated video content included in the training data set includes or otherwise refers to one or more videos hosted at the video hosting platform. The sets of user generated video content include videos of multiple content categories to enable the training of a learning model based on video content, rather than based on bitrate information agnostic to video content. The raw video frames extracted from the sets of user generated video content are video frames taken directly from those sets of user generated video content without pre-processing performed thereon. The raw video frames extracted from a given set of user generated video content may be extracted from within a defined time range of the given set of user generated video content (e.g., within three seconds of each other). Alternatively, there may no limitation as to the time of a given set of user generated video content from which the raw video frames are extracted.
- At 904, the raw video frames extracted from the training data set are pre-processed, such as to prepare the raw video frames to be used for training a learning model. Pre-processing the raw video frames can include one or both of converting pixel data of the raw video frames or rescaling the raw video frames. Converting the pixel data of the raw video frames may, for example, include converting pixel data of the raw video frames from RGB color channels to YUV color channels. For example, if the raw video frames are received in RGB color channel format, the RGB color channel information may be converted to YUV color channel information. However, if the raw video frames are received in the YUV color channel format, no such conversion may be performed. Where the pixel data is converted into the YUV color channels, the learning model may be trained using only the pixel data corresponding to the Y color channel of the YUV color channels. Traditionally a learning model such as a CNN (convolutional neural network) uses RGB color channel information as input. However, it has been found that converting RGB color channel information to YUV color channel information and using the Y color channel information alone will achieve the same precision as using full RGB color channel information while reducing the computational effort required. Thus, the UV color channel information may be discarded or otherwise ignored for the purpose of training the learning model.
- Rescaling the raw video frames may include determining whether one or more of the raw video frames are in a non-standard resolution (e.g., 1922×1084). For example, the resolution of some or all of the raw video frames may be compared to a defined set of standard resolutions, which may include, but is not limited to, 360p, 480p, 720p, 1080p, and 2160p. A raw video frame is determined to be in a non-standard resolution if the resolution of that raw video frame is not included in the defined set of standard resolutions. Responsive to determining that one or more of the raw video frames are in a non-standard resolution, those raw video frames are rescaled to a standard resolution by padding those raw video frames with zero value coefficients. The standard resolution to which those raw video frames are rescaled is a closest standard resolution with the same aspect ratio to the non-standard resolution at which those raw video frames are extracted from the training data set.
- In some implementations, the pre-processing of the raw video frames may be omitted. For example, the raw video frames may in some cases be further processed as described below without pre-processing.
- At 906, training side information to use for training the learning model is generated using the pre-processed raw video frames. The training side information may include or refer to one or more feature maps generated for predicting spatial and/or temporal features of the raw video frames. Each feature map may be generated for one of the raw video frames. Where the feature map is generated for predicting spatial features of a raw video frame, the feature map is a two-dimensional map of spatial features generated for example using a Gabor filter. Where the feature map is generated for predicting temporal features of a raw video frame, the feature map is for example a two-dimensional optimal flow of temporal features generated using a reference video frame of the video frame. Adding spatial and temporal features can improve the precision of the prediction by the trained learning model.
- In some implementations in which the pre-processing is omitted, the training side information may be generated using the raw video frames without the earlier pre-processing thereof. In some implementations, the generation of the training side information may be omitted.
- At 908, a learning model is trained to predict transcoding quality of video content. The learning model is trained using the pre-processed raw video frames extracted from the training data set and using the training side information generated using the spatial and/or temporal features of those pre-processed raw video frames. Training the learning model using that information includes training the learning model to statistically predict the delivered quality of video data that will result from a transcoding at given bitrates for given resolutions, subject to the quality control metrics used and the particular video content of the video data.
- The delivered quality of the video data is predicted by transcoding the pre-processed raw video frames of each set of user generated video content of the training data set using each available quality control metric, at each possible CRF, and at each possible resolution. Transcoding the pre-processed raw video frames in this way trains the learning model to determine the bitrate which is used to achieve the associated quality score for each given combination of quality control metric, CRF, and resolution.
- The learning model is trained by transcoding the raw video frames into all possible resolutions and encoding formats using multiple possible transcoding configurations. For example, video content of the training data set which is received in 720p resolution may be transcoded into a 144p resolution version, a 240p resolution version, a 360p resolution version, a 480p resolution version, and a 720p resolution version. In another example, video content of the training data set which is encoded using the H.264 codec may be transcoded at some or all constant rate factors (CRFs) in a range of 1 to 51. Accordingly, the
learning model 712 may use 255 different transcoding configurations to produce 255 transcoded versions of that particular video content. - Because the particular video content is taken into consideration for training the learning model, the learning model is trained to predict the transcoding quality of user generated video content according to a category of that video content. Thus, the learning model is trained to predict delivered quality levels of the raw video frames of the training data set according to configurations learned for multiple video content categories.
- Depending on the particular structure of the learning model training the learning model may include one or more of producing statistical weights at one or more deep learning or convolutional neural network layers, tuning filters applied to those statistical weights, defining one or more new layers, defining other hyper-parameters such as for input and output processing, or the like. In that the particular structure of the learning model may differ based on the particular implementation of this disclosure, the specific way in which the training of the learning model is performed may vary.
- After the learning model is trained, the learning model is deployed for inference processing of user generated video content uploaded for transcoding to the video hosting platform. In some implementations, the learning model may be a new learning model, in which case training the learning model includes producing the learning model. In some implementations, the learning model may be a pre-existing learning model, in which case training the learning model includes retraining the learning model. In some implementations in which the pre-processing is omitted, the learning model is trained using the raw video frames without the earlier pre-processing thereof. In some implementations in which the generation of the training side information is omitted, the learning model may be trained without using such training side information.
- The aspects of encoding, decoding, and transcoding described above illustrate some examples of encoding, decoding, and transcoding techniques. However, it is to be understood that encoding, decoding, and transcoding, as those terms are used in the claims, could mean compression, decompression, transformation, transcoding, trans-rating, trans-sizing, or another processing or change of data.
- The word “example” is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as being preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clearly indicated otherwise by the context, the statement “X includes A or B” is intended to mean any of the natural inclusive permutations thereof. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more,” unless specified otherwise or clearly indicated by the context to be directed to a singular form. Moreover, use of the term “an implementation” or the term “one implementation” throughout this disclosure is not intended to mean the same implementation unless described as such.
- Implementations of the transmitting
station 102 and/or the receiving station 106 (and the algorithms, methods, instructions, etc., stored thereon and/or executed thereby, including by theencoder 400, thedecoder 500, the transcoder 600, and thetranscoder 700, or another encoder, decoder, or transcoder as disclosed herein) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property cores, application-specific integrated circuits, programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmittingstation 102 and the receivingstation 106 do not necessarily have to be implemented in the same manner. - Further, in one aspect, for example, the transmitting
station 102 or the receivingstation 106 can be implemented using a general-purpose computer or general-purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein. In addition, or alternatively, for example, a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein. - The transmitting
station 102 and the receivingstation 106 can, for example, be implemented on computers in a video conferencing system. Alternatively, the transmittingstation 102 can be implemented on a server, and the receivingstation 106 can be implemented on a device separate from the server, such as a handheld communications device. In this instance, the transmittingstation 102 can encode content into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmittingstation 102. Other suitable transmitting and receiving implementation schemes are available. For example, the receivingstation 106 can be a generally stationary personal computer rather than a portable communications device. - Further, all or a portion of implementations of this disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
- The above-described implementations and other aspects have been described in order to facilitate easy understanding of this disclosure and do not limit this disclosure. On the contrary, this disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation as is permitted under the law to encompass all such modifications and equivalent arrangements.
Claims (20)
1. A method for transcoding a video stream of user generated video content, the method comprising:
determining bitrate and quality scores for transcoding the user generated video content of the video stream at multiple resolutions by querying, using information associated with the user generated video content, a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions;
selecting, according to the bitrate and quality scores, sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions, wherein each set of transcoding parameters corresponds to a different resolution of the multiple resolutions;
transcoding the video stream into multiple transcoded video streams using the selected sets of transcoding parameters, wherein each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding; and
outputting the multiple transcoded video streams for further processing or storage, wherein a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
2. The method of claim 1 , wherein determining the bitrate and quality scores for transcoding the user generated video content of the video stream at the multiple resolutions comprises:
receiving, as output of the learning model, predicted delivered quality levels of the video stream for the multiple resolutions, wherein a given predicted delivered quality level represents a quality of the video stream when the video stream is transcoded at a specified bitrate for a corresponding one of the multiple resolutions; and
determining sets of bitrate and quality score pairs using the predicted delivered quality levels, wherein each set of bitrate and quality score pairs corresponds to one resolution of the multiple resolutions.
3. The method of claim 2 , wherein the learning model computes the predicted delivered quality levels by processing one or more video frames extracted from the video stream using one or more quality control metrics, wherein the information associated with the user generated video content corresponds to the one or more video frames.
4. The method of claim 2 , wherein each bitrate in a given set of bitrate and quality score pairs is less than or equal to a maximum bitrate allowed for a resolution corresponding to the given set of bitrate and quality score pairs.
5. The method of claim 2 , wherein selecting the sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions comprises:
for each of the sets of bitrate and quality score pairs:
processing each bitrate and quality score pair of the set of bitrate and quality score pairs using a non-linear optimization function to determine weighted values associated with a resolution corresponding to the set of bitrate and quality score pairs; and
selecting, as one of the sets of transcoding parameters, a bitrate and quality score pair of the set of bitrate and quality score pairs resulting in a highest one of the weighted values.
6. The method of claim 5 , wherein the non-linear optimization function processes the bitrate and quality score pairs of each set of bitrate and quality score pairs using one or more predefined thresholds.
7. The method of claim 6 , wherein the one or more predefined thresholds relate to one or more of an overall bitrate upper bound, a maximum bitrate allowed at some or all of the multiple resolutions, or a visual quality difference measurement threshold.
8. The method of claim 7 , wherein, when the one or more predefined thresholds relate to the visual quality difference measurement threshold, processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises:
culling ones of the bitrate and quality score pairs which breach the visual quality difference measurement threshold,
wherein the weighted values are determined for remaining ones of the bitrate and quality score pairs.
9. The method of claim 6 , wherein the one or more predefined thresholds relate to a weight defined for the resolution corresponding to the set of bitrate and quality score pairs, wherein processing each bitrate and quality score pair of the set of bitrate and quality score pairs using the non-linear optimization function comprises:
determining a weighted value for a bitrate and quality score pair of the set of bitrate and quality score pairs by weighting the quality score of the bitrate and quality score pair using the weight.
10. The method of claim 9 , wherein the multiple transcoded video streams are output to a video hosting platform, wherein weights defined for each of the multiple resolutions are determined based on watch time distributions for the multiple resolutions across videos uploaded to the video hosting platform.
11. The method of claim 1 , wherein the multiple transcoded video streams are output to a video hosting platform, and wherein the learning model is trained to predict transcoding quality for user generated video content at the multiple resolutions by:
extracting raw video frames from user generated video content of the video hosting platform; and
training the learning model using video content of the raw video frames.
12. The method of claim 11 , wherein the learning model is trained further by:
pre-processing the raw video frames prior to training the learning model using the video content of the raw video frames.
13. The method of claim 12 , wherein pre-processing the raw video frames comprises:
converting pixel data of the raw video frames from RGB color channels to YUV color channels,
wherein the learning model is trained using only the pixel data corresponding to a Y color channel of the YUV color channels.
14. The method of claim 12 , wherein pre-processing the raw video frames comprises:
determining whether one or more of the raw video frames are in a non-standard resolution; and
responsive to determining that the one or more of the raw video frames are in the non-standard resolution, rescaling the one or more of the raw video frames to the standard resolution by padding the one or more of the raw video frames with zero value coefficients.
15. The method of claim 11 , wherein training the learning model using the video content of the raw video frames comprises:
processing a video frame of the raw video frames using a feature map generated for predicting spatial or temporal features of the video frame.
16. The method of claim 15 , wherein the feature map is a two-dimensional map of spatial features generated using a Gabor filter.
17. The method of claim 15 , wherein the feature map is a two-dimensional optimal flow of temporal features generated using a reference video frame of the video frame.
18. The method of claim 11 , wherein the sets of user generated video content correspond to multiple video content categories, wherein the learning model is trained to predict delivered quality levels of the raw video frames according to configurations learned for the multiple video content categories.
19. An apparatus comprising-a memory and a processor, wherein the memory includes instructions executable by the processor to:
determine bitrate and quality scores for transcoding the user generated video content of the video stream at multiple resolutions by querying, using information associated with the user generated video content, a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions;
select, according to the bitrate and quality scores, sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions, wherein each set of transcoding parameters corresponds to a different resolution of the multiple resolutions;
transcode the video stream into multiple transcoded video streams using the selected sets of transcoding parameters, wherein each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding; and
output the multiple transcoded video streams for further processing or storage, wherein a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
20. A transcoder configured to:
determine bitrate and quality scores for transcoding the user generated video content of the video stream at multiple resolutions by querying, using information associated with the user generated video content, a learning model trained to predict transcoding quality for sets of user generated video content at the multiple resolutions;
select, according to the bitrate and quality scores, sets of transcoding parameters to use for transcoding the video stream at each of the multiple resolutions, wherein each set of transcoding parameters corresponds to a different resolution of the multiple resolutions;
transcode the video stream into multiple transcoded video streams using the selected sets of transcoding parameters, wherein each of the multiple transcoded video streams is transcoded at the different resolution corresponding the set of the transcoding parameters used for the transcoding; and
output the multiple transcoded video streams for further processing or storage, wherein a transcoded video stream of the multiple transcoded video streams is configured for display at a client device responsive to a selection of a resolution corresponding to the transcoded video stream.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2020/033538 WO2021236059A1 (en) | 2020-05-19 | 2020-05-19 | Dynamic parameter selection for quality-normalized video transcoding |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230104270A1 true US20230104270A1 (en) | 2023-04-06 |
Family
ID=71069991
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/911,245 Pending US20230104270A1 (en) | 2020-05-19 | 2020-05-19 | Dynamic Parameter Selection for Quality-Normalized Video Transcoding |
Country Status (6)
Country | Link |
---|---|
US (1) | US20230104270A1 (en) |
EP (1) | EP3942836A1 (en) |
JP (1) | JP2023524000A (en) |
KR (1) | KR20220146647A (en) |
CN (1) | CN115349263A (en) |
WO (1) | WO2021236059A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230093174A1 (en) * | 2020-08-07 | 2023-03-23 | Tencent Technology (Shenzhen) Company Limited | Multimedia data processing method and apparatus, device, and readable storage medium |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023118919A1 (en) * | 2021-12-20 | 2023-06-29 | Tencent Cloud Europe (France) Sas | Automatic video quality evaluation |
CN114640851B (en) * | 2022-03-18 | 2023-06-23 | 广西昊华科技股份有限公司 | Self-adaptive omnidirectional video stream transmission method based on quality perception |
CN114866840A (en) * | 2022-03-31 | 2022-08-05 | 广州方硅信息技术有限公司 | VMAF image quality evaluation method, terminal, host, system and storage medium |
CN115002520B (en) * | 2022-04-14 | 2024-04-02 | 百果园技术(新加坡)有限公司 | Video stream data processing method, device, equipment and storage medium |
CN115225928B (en) * | 2022-05-11 | 2023-07-25 | 北京广播电视台 | Multi-type audio and video mixed broadcasting system and method |
Citations (48)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5790839A (en) * | 1996-12-20 | 1998-08-04 | International Business Machines Corporation | System integration of DRAM macros and logic cores in a single chip architecture |
US5901304A (en) * | 1997-03-13 | 1999-05-04 | International Business Machines Corporation | Emulating quasi-synchronous DRAM with asynchronous DRAM |
US6072834A (en) * | 1997-07-11 | 2000-06-06 | Samsung Electro-Mechanics Co., Ltd. | Scalable encoding apparatus and method with improved function of energy compensation/inverse compensation |
US6097756A (en) * | 1997-06-26 | 2000-08-01 | Daewoo Electronics Co., Ltd. | Scalable inter-contour coding method and apparatus |
US6580754B1 (en) * | 1999-12-22 | 2003-06-17 | General Instrument Corporation | Video compression for multicast environments using spatial scalability and simulcast coding |
US6728317B1 (en) * | 1996-01-30 | 2004-04-27 | Dolby Laboratories Licensing Corporation | Moving image compression quality enhancement using displacement filters with negative lobes |
US6765962B1 (en) * | 1999-12-02 | 2004-07-20 | Sarnoff Corporation | Adaptive selection of quantization scales for video encoding |
US6771703B1 (en) * | 2000-06-30 | 2004-08-03 | Emc Corporation | Efficient scaling of nonscalable MPEG-2 Video |
US6826232B2 (en) * | 1999-12-20 | 2004-11-30 | Koninklijke Philips Electronics N.V. | Fine granular scalable video with embedded DCT coding of the enhancement layer |
US20060034374A1 (en) * | 2004-08-13 | 2006-02-16 | Gwang-Hoon Park | Method and device for motion estimation and compensation for panorama image |
US7016412B1 (en) * | 2000-08-29 | 2006-03-21 | Koninklijke Philips Electronics N.V. | System and method for dynamic adaptive decoding of scalable video to balance CPU load |
US7095782B1 (en) * | 2000-03-01 | 2006-08-22 | Koninklijke Philips Electronics N.V. | Method and apparatus for streaming scalable video |
US20070064791A1 (en) * | 2005-09-13 | 2007-03-22 | Shigeyuki Okada | Coding method producing generating smaller amount of codes for motion vectors |
US7245662B2 (en) * | 2000-10-24 | 2007-07-17 | Piche Christopher | DCT-based scalable video compression |
US7263124B2 (en) * | 2001-09-26 | 2007-08-28 | Intel Corporation | Scalable coding scheme for low latency applications |
US7369610B2 (en) * | 2003-12-01 | 2008-05-06 | Microsoft Corporation | Enhancement layer switching for scalable video coding |
US7391807B2 (en) * | 2002-04-24 | 2008-06-24 | Mitsubishi Electric Research Laboratories, Inc. | Video transcoding of scalable multi-layer videos to single layer video |
US7477688B1 (en) * | 2000-01-26 | 2009-01-13 | Cisco Technology, Inc. | Methods for efficient bandwidth scaling of compressed video data |
US20090028245A1 (en) * | 2005-02-18 | 2009-01-29 | Jerome Vieron | Method for Deriving Coding Information for High Resolution Pictures from Low Resolution Pictures and Coding and Decoding Devices Implementing Said Method |
US7627034B2 (en) * | 2005-04-01 | 2009-12-01 | Lg Electronics Inc. | Method for scalably encoding and decoding video signal |
US7697608B2 (en) * | 2004-02-03 | 2010-04-13 | Sony Corporation | Scalable MPEG video/macro block rate control |
US7729421B2 (en) * | 2002-02-20 | 2010-06-01 | International Business Machines Corporation | Low latency video decoder with high-quality, variable scaling and minimal frame buffer memory |
US20110243231A1 (en) * | 2010-04-02 | 2011-10-06 | National Chiao Tung University | Selective motion vector prediction method, motion estimation method and device thereof applicable to scalable video coding system |
US8040952B2 (en) * | 2005-04-01 | 2011-10-18 | Samsung Electronics, Co., Ltd. | Scalable multi-view image encoding and decoding apparatuses and methods |
US20110268175A1 (en) * | 2010-04-30 | 2011-11-03 | Wai-Tian Tan | Differential protection of a live scalable media |
US8189659B2 (en) * | 2005-08-30 | 2012-05-29 | Thomson Licensing | Cross-layer optimization for scalable video multicast over IEEE 802.11 wireless local area networks |
US20130028324A1 (en) * | 2011-07-29 | 2013-01-31 | National Chiao Tung University | Method and device for decoding a scalable video signal utilizing an inter-layer prediction |
US8494042B2 (en) * | 2006-01-09 | 2013-07-23 | Lg Electronics Inc. | Inter-layer prediction method for video signal |
US20140092970A1 (en) * | 2012-09-28 | 2014-04-03 | Kiran Mukesh Misra | Motion derivation and coding for scaling video |
US20160112704A1 (en) * | 2014-10-20 | 2016-04-21 | Google Inc. | Continuous prediction domain |
US20170085917A1 (en) * | 2015-09-23 | 2017-03-23 | Nokia Technologies Oy | Method, an apparatus and a computer program product for coding a 360-degree panoramic video |
US20170214937A1 (en) * | 2016-01-22 | 2017-07-27 | Mediatek Inc. | Apparatus of Inter Prediction for Spherical Images and Cubic Images |
US20180027247A1 (en) * | 2012-01-30 | 2018-01-25 | Samsung Electronics Co., Ltd. | Method and apparatus for video encoding for each spatial sub-area, and method and apparatus for video decoding for each spatial sub-area |
US20180376126A1 (en) * | 2017-06-26 | 2018-12-27 | Nokia Technologies Oy | Apparatus, a method and a computer program for omnidirectional video |
US20190208207A1 (en) * | 2011-06-30 | 2019-07-04 | Velos Media, LLC> | Context initialization based on slice header flag and slice type |
US20200213617A1 (en) * | 2018-12-31 | 2020-07-02 | Tencent America LLC | Method for wrap-around padding for omnidirectional media coding |
US20200236377A1 (en) * | 2019-01-22 | 2020-07-23 | Tencent America LLC | Method for tile group identification |
US20200260070A1 (en) * | 2019-01-15 | 2020-08-13 | Lg Electronics Inc. | Image coding method and device using transform skip flag |
US20210168404A1 (en) * | 2018-04-09 | 2021-06-03 | Sk Telecom Co., Ltd. | Method and device for encoding/decoding image |
US20210204000A1 (en) * | 2018-09-14 | 2021-07-01 | Huawei Technologies Co., Ltd. | Slicing And Tiling In Video Coding |
US11095916B2 (en) * | 2019-07-23 | 2021-08-17 | Qualcomm Incorporated | Wraparound motion compensation in video coding |
US20210274176A1 (en) * | 2018-09-19 | 2021-09-02 | Electronics And Telecommunications Research Institute | Image encoding/decoding method and apparatus, and recording medium storing bitstream |
US20210321100A1 (en) * | 2018-12-14 | 2021-10-14 | Huawei Technologies Co., Ltd. | Arbitrary and Wrap-Around Tile Grouping |
US11290714B2 (en) * | 2018-11-15 | 2022-03-29 | Korea Electronics Technology Institute | Motion-constrained AV1 encoding method and apparatus for tiled streaming |
US11297320B2 (en) * | 2020-01-10 | 2022-04-05 | Mediatek Inc. | Signaling quantization related parameters |
US11363298B2 (en) * | 2020-08-03 | 2022-06-14 | Wiston Corporation | Video processing apparatus and processing method of video stream |
US11405649B2 (en) * | 2020-02-18 | 2022-08-02 | Mediatek Inc. | Specifying slice chunks of a slice within a tile |
US11516483B2 (en) * | 2018-12-07 | 2022-11-29 | Samsung Electronics Co., Ltd. | Video encoding method and decoding method using tiles and slices, and video encoding device and decoding device using tiles and slices |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8635357B2 (en) * | 2009-09-08 | 2014-01-21 | Google Inc. | Dynamic selection of parameter sets for transcoding media data |
US10454987B2 (en) * | 2016-10-28 | 2019-10-22 | Google Llc | Bitrate optimization for multi-representation encoding using playback statistics |
WO2019117864A1 (en) * | 2017-12-12 | 2019-06-20 | Google Llc | Transcoding media content using an aggregated quality score |
-
2020
- 2020-05-19 CN CN202080099262.1A patent/CN115349263A/en active Pending
- 2020-05-19 US US17/911,245 patent/US20230104270A1/en active Pending
- 2020-05-19 KR KR1020227034594A patent/KR20220146647A/en unknown
- 2020-05-19 JP JP2022565893A patent/JP2023524000A/en active Pending
- 2020-05-19 EP EP20731684.5A patent/EP3942836A1/en active Pending
- 2020-05-19 WO PCT/US2020/033538 patent/WO2021236059A1/en unknown
Patent Citations (50)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6728317B1 (en) * | 1996-01-30 | 2004-04-27 | Dolby Laboratories Licensing Corporation | Moving image compression quality enhancement using displacement filters with negative lobes |
US5790839A (en) * | 1996-12-20 | 1998-08-04 | International Business Machines Corporation | System integration of DRAM macros and logic cores in a single chip architecture |
US5901304A (en) * | 1997-03-13 | 1999-05-04 | International Business Machines Corporation | Emulating quasi-synchronous DRAM with asynchronous DRAM |
US6097756A (en) * | 1997-06-26 | 2000-08-01 | Daewoo Electronics Co., Ltd. | Scalable inter-contour coding method and apparatus |
US6072834A (en) * | 1997-07-11 | 2000-06-06 | Samsung Electro-Mechanics Co., Ltd. | Scalable encoding apparatus and method with improved function of energy compensation/inverse compensation |
US6765962B1 (en) * | 1999-12-02 | 2004-07-20 | Sarnoff Corporation | Adaptive selection of quantization scales for video encoding |
US6826232B2 (en) * | 1999-12-20 | 2004-11-30 | Koninklijke Philips Electronics N.V. | Fine granular scalable video with embedded DCT coding of the enhancement layer |
US6580754B1 (en) * | 1999-12-22 | 2003-06-17 | General Instrument Corporation | Video compression for multicast environments using spatial scalability and simulcast coding |
US7477688B1 (en) * | 2000-01-26 | 2009-01-13 | Cisco Technology, Inc. | Methods for efficient bandwidth scaling of compressed video data |
US7095782B1 (en) * | 2000-03-01 | 2006-08-22 | Koninklijke Philips Electronics N.V. | Method and apparatus for streaming scalable video |
US6771703B1 (en) * | 2000-06-30 | 2004-08-03 | Emc Corporation | Efficient scaling of nonscalable MPEG-2 Video |
US7016412B1 (en) * | 2000-08-29 | 2006-03-21 | Koninklijke Philips Electronics N.V. | System and method for dynamic adaptive decoding of scalable video to balance CPU load |
US7245662B2 (en) * | 2000-10-24 | 2007-07-17 | Piche Christopher | DCT-based scalable video compression |
US7263124B2 (en) * | 2001-09-26 | 2007-08-28 | Intel Corporation | Scalable coding scheme for low latency applications |
US7729421B2 (en) * | 2002-02-20 | 2010-06-01 | International Business Machines Corporation | Low latency video decoder with high-quality, variable scaling and minimal frame buffer memory |
US7391807B2 (en) * | 2002-04-24 | 2008-06-24 | Mitsubishi Electric Research Laboratories, Inc. | Video transcoding of scalable multi-layer videos to single layer video |
US7369610B2 (en) * | 2003-12-01 | 2008-05-06 | Microsoft Corporation | Enhancement layer switching for scalable video coding |
US7697608B2 (en) * | 2004-02-03 | 2010-04-13 | Sony Corporation | Scalable MPEG video/macro block rate control |
US20060034374A1 (en) * | 2004-08-13 | 2006-02-16 | Gwang-Hoon Park | Method and device for motion estimation and compensation for panorama image |
US20090028245A1 (en) * | 2005-02-18 | 2009-01-29 | Jerome Vieron | Method for Deriving Coding Information for High Resolution Pictures from Low Resolution Pictures and Coding and Decoding Devices Implementing Said Method |
US8040952B2 (en) * | 2005-04-01 | 2011-10-18 | Samsung Electronics, Co., Ltd. | Scalable multi-view image encoding and decoding apparatuses and methods |
US7627034B2 (en) * | 2005-04-01 | 2009-12-01 | Lg Electronics Inc. | Method for scalably encoding and decoding video signal |
US8189659B2 (en) * | 2005-08-30 | 2012-05-29 | Thomson Licensing | Cross-layer optimization for scalable video multicast over IEEE 802.11 wireless local area networks |
US20070064791A1 (en) * | 2005-09-13 | 2007-03-22 | Shigeyuki Okada | Coding method producing generating smaller amount of codes for motion vectors |
US8494042B2 (en) * | 2006-01-09 | 2013-07-23 | Lg Electronics Inc. | Inter-layer prediction method for video signal |
US20110243231A1 (en) * | 2010-04-02 | 2011-10-06 | National Chiao Tung University | Selective motion vector prediction method, motion estimation method and device thereof applicable to scalable video coding system |
US20110268175A1 (en) * | 2010-04-30 | 2011-11-03 | Wai-Tian Tan | Differential protection of a live scalable media |
US10931951B2 (en) * | 2011-06-30 | 2021-02-23 | Velos Media, Llc | Context initialization based on slice header flag and slice type |
US20190208207A1 (en) * | 2011-06-30 | 2019-07-04 | Velos Media, LLC> | Context initialization based on slice header flag and slice type |
US20130028324A1 (en) * | 2011-07-29 | 2013-01-31 | National Chiao Tung University | Method and device for decoding a scalable video signal utilizing an inter-layer prediction |
US10225565B2 (en) * | 2012-01-30 | 2019-03-05 | Samsung Electronics Co., Ltd. | Method and apparatus for video encoding for each spatial sub-area, and method and apparatus for video decoding for each spatial sub-area |
US20180027247A1 (en) * | 2012-01-30 | 2018-01-25 | Samsung Electronics Co., Ltd. | Method and apparatus for video encoding for each spatial sub-area, and method and apparatus for video decoding for each spatial sub-area |
US20140092970A1 (en) * | 2012-09-28 | 2014-04-03 | Kiran Mukesh Misra | Motion derivation and coding for scaling video |
US20160112704A1 (en) * | 2014-10-20 | 2016-04-21 | Google Inc. | Continuous prediction domain |
US20170085917A1 (en) * | 2015-09-23 | 2017-03-23 | Nokia Technologies Oy | Method, an apparatus and a computer program product for coding a 360-degree panoramic video |
US20170214937A1 (en) * | 2016-01-22 | 2017-07-27 | Mediatek Inc. | Apparatus of Inter Prediction for Spherical Images and Cubic Images |
US20180376126A1 (en) * | 2017-06-26 | 2018-12-27 | Nokia Technologies Oy | Apparatus, a method and a computer program for omnidirectional video |
US20210168404A1 (en) * | 2018-04-09 | 2021-06-03 | Sk Telecom Co., Ltd. | Method and device for encoding/decoding image |
US20210204000A1 (en) * | 2018-09-14 | 2021-07-01 | Huawei Technologies Co., Ltd. | Slicing And Tiling In Video Coding |
US20210274176A1 (en) * | 2018-09-19 | 2021-09-02 | Electronics And Telecommunications Research Institute | Image encoding/decoding method and apparatus, and recording medium storing bitstream |
US11290714B2 (en) * | 2018-11-15 | 2022-03-29 | Korea Electronics Technology Institute | Motion-constrained AV1 encoding method and apparatus for tiled streaming |
US11516483B2 (en) * | 2018-12-07 | 2022-11-29 | Samsung Electronics Co., Ltd. | Video encoding method and decoding method using tiles and slices, and video encoding device and decoding device using tiles and slices |
US20210321100A1 (en) * | 2018-12-14 | 2021-10-14 | Huawei Technologies Co., Ltd. | Arbitrary and Wrap-Around Tile Grouping |
US20200213617A1 (en) * | 2018-12-31 | 2020-07-02 | Tencent America LLC | Method for wrap-around padding for omnidirectional media coding |
US20200260070A1 (en) * | 2019-01-15 | 2020-08-13 | Lg Electronics Inc. | Image coding method and device using transform skip flag |
US20200236377A1 (en) * | 2019-01-22 | 2020-07-23 | Tencent America LLC | Method for tile group identification |
US11095916B2 (en) * | 2019-07-23 | 2021-08-17 | Qualcomm Incorporated | Wraparound motion compensation in video coding |
US11297320B2 (en) * | 2020-01-10 | 2022-04-05 | Mediatek Inc. | Signaling quantization related parameters |
US11405649B2 (en) * | 2020-02-18 | 2022-08-02 | Mediatek Inc. | Specifying slice chunks of a slice within a tile |
US11363298B2 (en) * | 2020-08-03 | 2022-06-14 | Wiston Corporation | Video processing apparatus and processing method of video stream |
Non-Patent Citations (1)
Title |
---|
Liu et al. "Visual quality assessment: recent developments, coding applications and future trends" SIP (2013), vol. 2, e4, page 1 of 20 © , 2013. * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230093174A1 (en) * | 2020-08-07 | 2023-03-23 | Tencent Technology (Shenzhen) Company Limited | Multimedia data processing method and apparatus, device, and readable storage medium |
Also Published As
Publication number | Publication date |
---|---|
WO2021236059A1 (en) | 2021-11-25 |
EP3942836A1 (en) | 2022-01-26 |
CN115349263A (en) | 2022-11-15 |
JP2023524000A (en) | 2023-06-08 |
KR20220146647A (en) | 2022-11-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230104270A1 (en) | Dynamic Parameter Selection for Quality-Normalized Video Transcoding | |
US20220353534A1 (en) | Transform Kernel Selection and Entropy Coding | |
AU2016388357B2 (en) | Real-time video encoder rate control using dynamic resolution switching | |
US11647223B2 (en) | Dynamic motion vector referencing for video coding | |
US20190020888A1 (en) | Compound intra prediction for video coding | |
US11102477B2 (en) | DC coefficient sign coding scheme | |
US20210021859A1 (en) | Same frame motion estimation and compensation | |
US11343528B2 (en) | Compound prediction for video coding | |
US20220415039A1 (en) | Systems and Techniques for Retraining Models for Video Quality Assessment and for Transcoding Using the Retrained Models | |
US10382767B2 (en) | Video coding using frame rotation | |
US20220217336A1 (en) | Combination of Mode-Dependent And Fixed Transform Types In Video Coding | |
US20220094950A1 (en) | Inter-Prediction Mode-Dependent Transforms For Video Coding | |
US10419777B2 (en) | Non-causal overlapped block prediction in variable block size video coding | |
US9210424B1 (en) | Adaptive prediction block size in video coding | |
US11870993B2 (en) | Transforms for large video and image blocks | |
US10820014B2 (en) | Compound motion-compensated prediction | |
US11924449B2 (en) | Multivariate rate control for transcoding video content |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WANG, YILIN;ADSUMILLI, BALINEEDU;SIGNING DATES FROM 20200512 TO 20200515;REEL/FRAME:061085/0290 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |