US6687707B1 - Unique object identification in a network of computing systems - Google Patents
Unique object identification in a network of computing systems Download PDFInfo
- Publication number
- US6687707B1 US6687707B1 US08/980,336 US98033697A US6687707B1 US 6687707 B1 US6687707 B1 US 6687707B1 US 98033697 A US98033697 A US 98033697A US 6687707 B1 US6687707 B1 US 6687707B1
- Authority
- US
- United States
- Prior art keywords
- data processing
- identifier
- processing system
- unique
- network
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/45—Network directories; Name-to-address mapping
- H04L61/4553—Object oriented directories, e.g. common object request broker architecture [CORBA] name server
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L61/00—Network arrangements, protocols or services for addressing or naming
- H04L61/30—Managing network names, e.g. use of aliases or nicknames
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2101/00—Indexing scheme associated with group H04L61/00
- H04L2101/30—Types of network names
- H04L2101/35—Types of network names containing special prefixes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2101/00—Indexing scheme associated with group H04L61/00
- H04L2101/60—Types of network addresses
- H04L2101/604—Address structures or formats
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
Definitions
- the present invention is related to the subject matter of the following commonly assigned, copending U.S. patent application Ser. No. 08/980,355 entitled “Method of Determining the Unique ID of an Object Through Analysis of Attributes Related to the Object” and filed Nov. 28, 1997; and Ser. No. 08/980,334 entitled “Method of Determining the Unique ID of an Object in a Peer to Peer Configuration of Object Indexes” and filed Nov. 28, 1997.
- the content of the above-referenced applications is incorporated herein by reference.
- the present invention relates in general to object identification and in particular to identification of objects distributed among a plurality of data processing systems and/or data processing system networks. Still more particularly, the present invention relates to unique identification of objects within a data processing system which forms a portion of a database of objects distributed among a plurality of data processing systems and/or data processing system networks without requiring the host data processing system to be connected to any other data processing system at the time the object identifier is assigned.
- Objects frequently require an identification which is unique, as in cases where the object forms a portion of a database of objects.
- a common solution is to utilize a central registry to assign a numerical identifier to a new object from a sequential set of numbers under the control management of the central registry.
- the central registry increments the last number assigned to an object and provides the result as a unique number satisfying the request.
- an object must have an identification which is unique within a plurality or network of data processing systems, as in cases where the object forms a portion of a database of objects distributed among the plurality of data processing systems.
- the object identifier must be unique when the corresponding object is added to one of the data processing systems within the network.
- the solution of a central registry requires that the data processing system to which the object is being added be connected to the central registry at the time the object is added. This requirement may be burdensome, particularly where the objects are distributed among data processing systems communicating over the Internet, where limited bandwidth may preclude connection to the central registry at the time an object must be added.
- One alternative is to assign different ranges of object identifiers to different data processing systems in a network or system of networks.
- the object identifier is selected from the range of identifiers assigned to that data processing system. This method is limited, however, due to the possibilities of exhausting the numbers within a range and exhausting the number of ranges. Sufficient ranges need to be reserved for future additions of data processing systems.
- Each network of data processing systems within a system of networks is assigned a unique network identifier when connected to the system.
- Each data processing system within a given network is assigned a unique host system identifier when the data processing system is added to the network.
- a unique object identifier is constructed with three fields, including a high order field containing the network identifier for the network in which the object is being added, a next order field containing a host system identifier for the data processing system to which the object is being added, and an object identifier unique for all objects within the host data processing system.
- the combination of the three identifiers results in a single, unique object identifier which is unique for all objects across the system of networks and data processing systems.
- the host data processing system need not be connected to any other data processing system or network at the time the object is added to guarantee that the object identifier is unique across the entire system of networks. Therefore, the object may be added to a database of objects distributed among a plurality of data processing systems and accessed by an application communicating, when bandwidth is available, with other data processing systems over the Internet.
- FIG. 1 depicts a network of data processing systems in which a preferred embodiment of the present invention may be implemented
- FIG. 2 is a block diagram of a data processing system utilizing unique object identification and methods of determining the unique identifier of objects in accordance with a preferred embodiment of the present invention
- FIG. 3 depicts an implementation diagram for unique object identification and methods of determining the unique identifier of objects in a plurality of peer data processing systems in accordance with a preferred embodiment of the present invention
- FIG. 4 is an object identifier for uniquely identifying object within a plurality of data processing system networks in accordance with a preferred embodiment of the present invention
- FIGS. 5A-5E depict an attribute specification table, an input criteria table, and high level flowcharts for a process of determining a unique object identifier through analysis of object attributes in accordance with a preferred embodiment of the present invention.
- FIGS. 6A-6D are high level flowcharts for a process of resolving an object identifier from object attributes and/or modification of an object attribute record within a plurality of peer data processing systems in accordance with a preferred embodiment of the present invention.
- the exemplary embodiment depicted includes a data processing system 102 connected via communications link 104 to the Internet 106 .
- Communications link 104 may, for example, be in the form of access provided by an Internet service provider (ISP) or via a proxy within a firewall, as is known in the art.
- Data processing system 102 may include a Java-enabled browser application, allowing data processing system 102 to retrieve and display information formatted in accordance with the HyperText Markup Language (HTML) and to run Java applets, or a Java interpreter, allowing data processing system 102 to execute Java applications.
- HTML HyperText Markup Language
- Java interpreter allowing data processing system 102 to execute Java applications.
- Data processing system 110 may be similar to data processing system 102 . As depicted, data processing system 102 may be connected to other data processing systems as part of an intranet 112 while data processing system may be connected to other data processing systems as part of an intranet 114 . Intranets 112 and 114 may be local area networks (LANs) in accordance with the known art. Data processing systems 102 and 110 may thus operate collaboratively over Internet 106 as part of a distributed object computing system. Objects, such as Java or JavaScript objects, within data processing systems 102 and 110 may also implement methods and data structures for unique object identification and determining the unique identifier of objects in accordance with a preferred embodiment of the present invention, as described in further detail below.
- LANs local area networks
- Data processing system 200 may be data processing system 102 or data processing system 110 depicted in FIG. 1 .
- Data processing system 200 in the exemplary embodiment includes a processor 202 , which may be a PowerPCTM processor available from International Business Machines Corporation of Armonk, N.Y.
- Processor 202 is connected to a level two (L2) cache 204 , which is utilized to stage data to and from processor 202 at reduced access latency.
- L2 level two
- L2 cache 204 is connected in turn to an interconnect or system bus 206 , which is also connected, in the embodiment depicted, to system memory 208 and memory-mapped graphics adapter 210 .
- Graphics adapter 210 provides a connection for a display device (not shown) on which the user interface of software executed within data-processing system 200 is displayed.
- I/O bus bridge 212 Also connected to system bus 206 in the exemplary embodiment is input/output (I/O) bus bridge 212 , which provides an interface between system bus 206 and I/O bus 214 .
- a nonvolatile memory such as hard disk drive 216 may be connected to I/O bus 214 , as may keyboard/mouse adapter 218 , which provides connection to I/O bus 214 for keyboard 220 and pointing device 222 .
- Pointing device 222 may be a mouse, trackball, or the like.
- network adapter 224 Also connected to I/O bus 214 may be network adapter 224 for connecting data processing system 200 to a local area network (LAN), the Internet, or both.
- LAN local area network
- Internet or both.
- Program information comprising instructions and/or data is stored on nonvolatile memory 216 and may be selectively copied into system memory 208 once data processing system 200 is powered on.
- Processor 202 executes the instructions within such program information and generates text or graphical information for presentation on display device connected via graphics adapter 210 , where the information may be viewed by a user.
- the user may selectively control operation of data processing system 200 through input entered on keyboard 220 or through pointing device 222 .
- the software implements the data structures and methods described below for unique object identification and methods of determining the unique identifier of objects.
- FIG. 3 an implementation diagram for unique object identification and methods of determining the unique identifier of objects in a plurality of peer data processing systems in accordance with a preferred embodiment of the present invention is depicted.
- the exemplary environment depicted includes two data processing systems 102 and 110 .
- Each data processing system includes logic for object resolution: data processing system 102 includes object resolution services 302 , while data processing system 110 includes object resolution services 304 .
- Object resolution services 302 and 304 are connected by and may communicated via a communications link 306 .
- Each data processing system also includes an object index: data processing system 102 includes object index 308 , while data processing system 110 includes object index 310 .
- Each object index 308 and 310 contains a group of object attribute records (OARs) 312 and 314 , respectively, for objects within the corresponding data processing system 102 and 110 .
- Each object attribute record includes a plurality of object attributes 316 and an object identifier 318 , which are discussed in further detail below, and a flag 328 indicating whether the object attribute record is a master object attribute record or a copy.
- Object attribute records 312 and 314 are utilized by the respective object resolution services 302 and 304 to retrieve objects from corresponding database object groups 320 and 322 where the objects are stored.
- each object attribute record and each object in a database is a corresponding object identifier 318 which is unique for each object across data processing systems 102 and 110 .
- Data processing systems 102 and 110 have a peer-to-peer relationship rather than a client-server relationship, as do object resolution service 302 and 304 .
- Object resolution services 302 and 304 are considered peers since neither has any dependency on any other data processing system or object resolution service for resolving object identifiers for objects contained within or otherwise accessible to their respective data processing systems 102 and 110 .
- Each object resolution services module 302 and 304 also has access to a corresponding administration file 324 and 326 , respectively, which contains system operation information provided by a system administrator, such as the location definitions for other object resolution services located in other data processing systems in a network of data processing systems.
- administration files 324 and 326 may be implemented within the respective data processing systems 102 and 110 although depicted in the exemplary embodiment as external to data processing systems 102 and 110 .
- FIG. 3 The structure and operation of the components depicted in FIG. 3 will be described in greater detail below. It is noteworthy that although the exemplary embodiment employs only two data processing systems with respective object resolution services and contained within two date processing system networks for the purposes of describing and illustrating the invention, the mechanism of the present invention scales for implementation with any number of data processing system networks, each containing an arbitrary number of data processing systems having respective object resolution services.
- object identifier 318 for uniquely identifying object within a plurality of data processing system networks in accordance with a preferred embodiment of the present invention is illustrated.
- Object identifier 318 in accordance with the present invention may be generated for each new object within a particular data processing system with a value which is unique across all networks including data processing systems, and across all data processing systems in such networks, containing objects accessed through a respective object resolution services.
- object identifier 318 may be generated without the host data processing system being in communications with any other data processing system at the time of generation.
- Object identifier 318 contains a value including a plurality of fields 402 , 404 , and 406 . Although a binary numeric value is shown for the purposes of illustrating the invention, the value may be any numeric or alphanumeric value in any format, including decimal hexadecimal, etc.
- Each object identifier 318 is constructed from three fields 402 , 404 , and 406 , with the combination of values for each field constituting a unique value for a specific object within a particular data processing system within an individual network within a system of networks.
- the high order field 402 within object identifier 318 contains a unique value for the network within the overall system of networks within which the identified object is contained.
- the next ordered field 404 contains a unique value for the data processing system within the network in which the identified object is contained.
- the low order field 406 contains a unique value for the object within the host data processing system in which the identified object may be found.
- Object field 406 is unique for each object contained within a particular data processing system, although different data processing systems may contain different objects having equivalent object fields.
- host system field 404 is unique for each data processing system in a given network, although two networks may each contain a data processing system having the same host system field 404 .
- Network field 402 is unique for each network with the system of networks across which objects must be uniquely identified. Therefore, the combination of values contained within the three fields 402 , 404 , and 406 for a particular object identifier 318 uniquely identifies a single object within a single host data processing system within a single network in the system of networks.
- Administrative procedures may be implemented to specify unique values for each network in the system of networks, unique values for each data processing system in a given network, and unique values for each object within a data processing system.
- the contents of these fields 402 , 404 , and 406 may be made unique by incrementing a number as each new object is created and/or instantiated within a particular data processing system, as each new data processing system is added to a specific network, and as each new network is connected to the overall system of networks.
- a central registry may be maintained within each data processing system for objects and object identifiers within that system, within each network for data processing system identifiers in that network, and within the system of networks for each network within the system.
- Each data processing system in the system of networks has access to its own unique values through specification of such values in a configuration data base.
- An important feature of the present invention is that the unique object identifier for a particular object in a specific data processing system persists even after changes to the network or system of networks in which the object is contained.
- FIGS. 5A, 5 B, 5 C, 5 D, and 5 E an attribute specification table, an input criteria table, and high level flowcharts for a process of determining a unique object identifier through analysis of object attributes in accordance with a preferred embodiment of the present invention is depicted.
- Objects stored in databases accessible to a particular data processing system are assigned a unique object identifier to distinguish them from all other objects. This object identifier may be generated from multiple fields as described above or assigned from an external source.
- the attributes of the object, or at least a subset of all of the attributes are associated with the object identifier and stored in an object index, with each corresponding object attributes/object identifier pair forming an object attribute record as described earlier.
- the object identifier is also stored in the database containing the identified object, in association with that object.
- the object identifier serves as a “key” to manifest or retrieve a desired object. In many cases, however, the object must be located even though the object identifier is not known.
- the objects of interest identify a person who is a bank customer or a health care plan subscriber.
- an object is created to store information about that person, the information is entered, the object is assigned a unique identifier, and the object is written to the database accessible to the host data processing system.
- the attributes or properties of the newly created object reflect information about the person, and certain attributes are extracted to create an object attribute record.
- the attributes extracted are those which will permit, alone or in combination, accurate identification of the object and the corresponding unique object identifier.
- an object attribute record may contain, for example, the person's last name, first name, middle initial, social security number, home address, gender, race, driver's license number and state, date of birth, etc.
- the unique object identifier for the object is contained within the object attribute record in association with these attributes. If access to the object is required but the object identifier is not known, the attributes in the object attribute record may be utilized to determine the object identifier so that the object may be retrieved from the database.
- Attribute specification table 502 depicted in FIG. 5A is employed in the process of determining an object identifier from attributes and includes attribute names 504 , various weights 506 , 508 , and 510 , and a rule 512 to be called in case of a no-match.
- the names and values are supplied by a systems administrator in the table and are used for execution of object resolution.
- Attribute name 504 is the name of an object attribute contained within the object attribute records (e.g., last name).
- Match weight 506 is a value representing the worth of an attribute if the attribute value contained in an individual object attribute record matches the attribute value supplied in the object resolution criteria. This allows different weights to be assigned for evaluation of the probability of a correct match.
- the match weight may be 90, while if the attribute is the person's first name, the match weight may be 10 or less.
- non-match weight 508 is a value representing the worth of an attribute if the attribute value was supplied as part of the object resolution input criteria but did not match the attribute value contained in an individual object attribute record being analyzed. Non-matching weight 508 may have a negative value and therefore may be utilized to diminish the affect of another attribute value in the same object attribute record matching a corresponding attribute value specified in the input criteria.
- the match weight for a person's last name attribute may be 60 but the non-match weight for the persons social security number attribute may be ⁇ 50. A match in the person's last name may therefore be offset by a discrepancy between the social security number in the object attribute record and that supplied in the input criteria.
- Post-rule weight 510 is a value representing the worth of an attribute if no exact match was found, a named rule was executed, and a subsequent match was found.
- Input criteria for the process of determining an object identifier through object attribute analysis may consists of single attributes or combinations of attributes. However, certain combinations of input criteria are, taken alone, insufficient to successfully resolve the object attributes for determination of a specific object attribute identifier. For example, input criteria such as date of birth and gender alone would not likely be sufficient to resolve the attributes to the particular person desired. Therefore, a systems administrator may specify sets of input criteria required for object attribute resolution, stopping object attribute resolution before it starts if at least one set of attributes are not supplied as input criteria.
- Input criteria table 514 depicted in FIG. 5B contains information supplied by a systems administrator.
- Each input criteria set in the depicted example includes a combination name 516 , which is a name for a given set of attributes, and an attribute name list 518 , which is a list of attribute names for which values are required as input criteria before the object attribute resolution process will proceed on the basis of the attribute set.
- a first attribute set may have a combination name 516 of RCOMBO1 and a corresponding list 518 of attribute names including LAST NAME, SOCIAL SECURITY NUMBER, and DATE OF BIRTH.
- a second attribute set may have a combination name 516 of RCOMBO2 and a corresponding attribute name list 518 of including LAST NAME, DRIVER'S LICENSE NUMBER and DRIVER'S LICENSE STATE.
- Each attribute name designation in a given attribute list 518 must also be specified in attribute specification table 502 .
- the number of attribute names in a given attribute set may be one or more than one, depending on whether the system administrator believes a single particular attribute is sufficient of object attribute resolution or whether additional attributes are believed to be required. By specifying combinations, the system administrator defines the minimum sets of input criteria necessary to perform object attribute resolution within a particular data processing system and/or network.
- the list of attribute names 518 for a given attribute set 516 are ANDed together when checking for adequacy of input criteria.
- the input criteria furnished may include more attributes than are required to satisfy a particular combination 516 , and may contain sufficient attributes to satisfy more than one set. All that is required is that at least enough attributes be specified to satisfy the list 518 corresponding to at least one combination 516 for object attribute resolution to proceed.
- the object attribute resolution services logic ORs the combinations, proceeding if the attributes specified in the list 518 for any one combination 516 are satisfied and rejecting resolution requests only if no combination 516 is satisfied.
- Combinations 516 are employed for performance reasons, to insure that sufficient primary attributes exist for matching and that the possibility of a sum of “weak” attribute weights does not result in a match in the absence of sufficient important attributes. Resolution requests containing insufficient information to reliably perform resolution matching are rejected under these input criteria combination thresholds.
- FIG. 5C depicts a high level flowchart for a general process of object attribute resolution in accordance with a preferred embodiment of the present invention.
- the process begins at step 520 , which depicts receiving an object attribute resolution request and accompanying input criteria for an attempted object attribute resolution with object attribute records within an object index in a host data processing system.
- the process then passes to step 522 , which illustrates a determination of whether sufficient input criteria exist in the request to satisfy at least one combination specified in the input criteria table for reliable object attribute resolution. If not, the process proceeds to step 524 , which depicts rejecting the request. If so, however, the process proceeds instead to step 526 , which illustrates execution of the match determination process, and then to step 528 , which depicts a determination of whether a match was found within the object index being searched.
- step 530 depicts returning the unique object identifier associated with the matching object attribute record within the object index. Otherwise, the process proceeds instead to step 532 , which illustrates returning an indication of the match failure. From any of steps 524 , 530 , or 532 , the process passes to step 534 , which illustrates the process becoming idle until another object attribute resolution request is again received.
- FIGS. 5D and 5E depicts a process for match determination utilizing an attribute specification table in accordance with a preferred embodiment of the present invention. This process may be performed for the match determination process depicted as step 526 is FIG. 5 C. The process begins at step 536 depicted in FIG. 5D, which illustrates initiation of the match determination process, and then passes to step 538 , which depicts comparison of an input criteria attribute value to a corresponding object attribute record attribute value.
- step 540 which illustrates a determination of whether the input criteria attribute value matches the equivalent object attribute record attribute value. If so, the process proceeds to step 542 , which depicts adding the match weight for the attribute under consideration in the attribute specification table to a “weight accumulator.” If not, however, the process proceeds instead to step 544 , which illustrates executing any rule which may be associated with the attribute under consideration in the attribute specification table.
- step 546 which depicts a determination of whether the input criteria attribute value now matches the corresponding object attribute record attribute value. If so, the process proceeds to step 548 , which illustrates adding the post-rule weight for the attribute under scrutiny in the attribute specification table to the weight accumulator. If not, however, the process proceeds instead to step 550 , which depicts subtracting the non-match weight from the weight accumulator.
- the above-described process for determining whether a desired object attribute record has been found calculates a match value from the sum of the weights of matched input criteria (either matched weights or post-rule weights) minus the sum of non-match weights for unmatched input criteria.
- the input criteria version is compared to the object attribute record version of the subject attribute. If no match occurs, a rule is executed if available and the result compared to the object attribute record version of the subject attribute. If no match occurs and no rule is specified, or if a rule is specified and executed but no match occurs in any case, the non-match weight is subtracted from the weight accumulator.
- step 552 depicts a determination of whether all attributes from the input criteria have been tested against the corresponding attributes in the subject object attribute record. If not, the process returns to step 538 to compare a new input criteria to a corresponding attribute in the object attribute record, and continues reiterating steps 538 through 552 until all input criteria have been tested. Once all input criteria have been tested against the object attribute record under consideration, the process proceeds to step 554 depicted in FIG. 5E, which illustrates comparing the value in the weight accumulator to a specified match value.
- the system administrator specifies a match value (e.g., OBJECT_MATCH) for determining when a match has occurred between input criteria submitted with a request and an object attribute record within the object index of a host data processing system.
- This match value would be a global parameter for determining whether resolution—an object match—has been achieved after the input criteria have been processed against the object attribute record from the object index utilizing the weights specified in the attribute specification table.
- the calculated sum value of weights (matched and post-rule minus non-matched) for the comparison of input criteria to an object attribute record is compared to this value specified by the system administrator. If the calculated value is equal to of greater than the administrator specified value, a match has occurred.
- step 554 the process passes to step 556 , which depicts a determination of whether the weight accumulator equals or exceeds the specified match value. If so, the process proceeds to step 558 , which illustrates returning a match. If not, however, the process proceeds instead to step 560 , which depicts returning a non-match for the object attribute record under consideration. From either of steps 558 or 560 , the process then passed to step 562 , which illustrates a determination of whether the input criteria have been tested against all object attribute records in the object index. If not, the process returns again to step 538 depicted in FIG. 5 D and reiterates steps 538 through 562 until all candidate object attribute records within the object index have been tested. When the entire object index has been checked, the process then proceeds to step 564 , which illustrates the process becoming idle until the match determination process is once again initiated.
- FIGS. 6A, 6 B, 6 C, and 6 D high level flowcharts for a process of resolving an object identifier from object attributes and/or modification of an object attribute record within a plurality of peer data processing systems in accordance with a preferred embodiment of the present invention are illustrated.
- FIGS. 6A and 6B illustrate a process for resolving object attributes to determine an object identifier where a request originates from a local application in a plurality of peer data processing systems each having local object resolution services.
- An application located, for example, in data processing system 102 depicted in FIGS. 1 and 3 provides attributes for an object attribute resolution by object resolution services 302 depicted in FIG. 3 .
- the application requests that object resolution services 302 return the unique object identifier associated with the supplied attributes, perhaps for the purposes of retrieving and modifying the identified object.
- An example of the attributes supplied by the requesting application may be the last name, first name, social security number, and date of birth of a person.
- step 602 shown in FIG. 6A which illustrates receiving the local resolution request, and then passes to step 604 which depicts resolving the attributes against the local object index to determine of any object attribute records in the local object index are a match for the specified attributes.
- step 604 depicts resolving the attributes against the local object index to determine of any object attribute records in the local object index are a match for the specified attributes.
- the structures and processes depicted in FIGS. 5A-5D and described above may be employed for this purpose.
- step 606 depicts extracting the associated object identifier or identifiers for each object attribute record determined to comprise a match with the application supplied attributes under the system administrator defined match value. It is possible that one match will be found, no matches will be found, or multiple matches will be found for the supplied attributes under the current specified match value.
- each object attribute record within an object index is supposed to be sufficiently unique to permit resolution based on defined combinations of attribute values, finding multiple matching object attribute records is considered an exception condition requiring, for instance, that a user be prompted to supply additional attributes via the requesting application.
- a log of such occurrences may be maintained to allow the system administrator to adjust the weights in the attribute specification table, the combinations in the input criteria table, and/or the specified match value.
- step 608 illustrates interrogation of the local administration file (administration file 324 depicted in FIG. 3 for the present example).
- the interrogation determines whether other object resolution services are specified with which the local object resolution services 302 should communicate regarding the effort to match attributes supplied by the requesting application.
- the system administrator will have previously inserted into the administration file information indicating that the local object resolution services 302 should propagate the request to other object resolution services, such as object resolutions services 304 within data processing system 110 , as depicted in FIG. 3 .
- This information may take the form, for example, of:
- ORS_B is the symbolic name for the next object resolution service 304 to which the search request is to be propagated.
- step 610 depicts a determination of whether the search request should be propagated to additional object resolution services. If so, the process proceeds to step 612 , which illustrates transmitting the request to the next specified service.
- the request will be for object resolution services 304 to determine if the attributes supplied by the requesting application match any object attribute record within object index 310 in data processing system 110 . Included in the transmission to the next object resolution service are the identities of the services which have already been processed. The purpose of such identification is to prevent a loop-back condition from occurring.
- three object resolution services, ORS_A, ORS_B, and ORS_C in which the respective administration files contain the following information:
- a search originating with an application local to ORS_A will loop-back to ORS_A after ORS_B completes its matching determination and interrogates its local administration file, administration file B.
- administration file B Upon searching administration file B to determine where to next forward the search, ORS_B could return the search back to ORS_A.
- a receiving object resolution services such as ORS_B will not propagate the request back to any object resolution services which have been previously engaged in the search.
- step 614 depicts a determination of whether responses have been received from all object resolution services identified in the local administration file.
- the process proceeds to step 616 shown in FIG. 6B, which illustrates aggregating the object identifier(s) for all matching object attribute records. This includes those identified from analysis of the local object index as well as those returned from remote object resolution services.
- step 618 depicts a determination of whether distinct object identifiers have been found. Copies of local object attribute records may be maintained in remote data processing systems, but should include the same object identifier as contained in a local object index.
- step 620 illustrates returning the object identifier to the requesting application. If no object identifier is found, a unique object identifier is generated as described above and returned. If more than one (distinct) object identifier was found, however, the process proceeds instead to step 622 , which depicts returning an exception condition. From either of step 620 or 622 , the process passes to step 624 , which illustrates the process becoming idle until an application again initiates a request.
- FIG. 6C illustrates a process employed when a resolution request originates with remote object resolution services, such as might be performed in object resolution services 304 (ORS_B) upon receiving a search request propagated from object resolution services 302 (ORS_A) as earlier described.
- object resolution services 304 ORS_B
- ORS_A object resolution services 302
- the same determination process is employed within object resolution services 304 as was employed in object resolution services 302 .
- the process thus begins at step 626 , which depicts receiving the remote resolution request, and then passes to step 628 , which illustrates resolving the supplied attributes against object attribute records within local object index 310 .
- step 630 depicts extracting the object identifier(s) for matching object attribute records
- step 632 which illustrates interrogating the local administration file to determine if other services should be forwarded the search request.
- the information specified in the local administration file is compared to the object resolution searches which the transmitted request indicates have already been queried.
- step 634 illustrates a determination of whether additional object resolution services should be contacted with the search. If so, the process proceeds to step 636 , which depicts forwarding the request to the next service, together with an identification of all object resolution services queried thus far (including ORS_B 310 ), and then to step 638 . If no object resolution services remain to be contacted, however, the process proceeds instead directly from step 634 to step 638 , which illustrates returning object identifier(s) for any matching object attribute records and condition codes to the originating object resolution services (ORS_A 304 ).
- the condition codes may indicate to the originating object resolution services that: (1) no matches were found; (2) one match was found; or (3) multiple matches were found.
- step 640 illustrates the process becoming idle until another resolution request is received from remote object resolution services.
- the originating object resolution services accepts the object identifier(s) from remote object resolution services, aggregates them, and returns an object identifier or an exception condition to the requesting application.
- FIG. 6D illustrates a process of modifying an object attribute record in accordance with a preferred embodiment of the present invention.
- copies of object attribute records may be maintained in data processing systems which are remote from the host data processing system containing the identified object.
- the object attribute record within the data processing system containing the identified object may be considered the “master” or “base” object attribute record, while equivalent object attribute records in other data processing systems may be regarded as mere copies.
- Modification of the attributes of in an object attribute record must be made in the master or base object attribute record, which may require first locating this master or base record within a network of data processing systems.
- the exemplary process begins at step 642 , which depicts receiving a MODIFY command, with a unique object identifier and the attributes to be modified, from a local application.
- the process then passes to step 644 , which illustrates a determination of whether the master object attribute record is maintained in a local object index.
- the object resolution services may check the state of a flag associated with the object attribute record associated with the specified object identifier.
- step 646 depicts forwarding the MODIFY command and its arguments to another object resolution service specified in its local administration file (SEARCH_LIST).
- step 648 depicts a determination of whether a return code is received from remote object resolution services indicating that it maintains—and will appropriately modify—the master object attribute record. If such a code is not received, the process returns to step 646 to continue propagating the MODIFY command and arguments to other specified object resolution services. Once a return code is received, however the process proceeds instead to step 650 .
- step 650 which illustrates updating the local object attribute record.
- this step may be condition on the existence of an object attribute record (copy) corresponding to the specified object identifier in the local object index.
- step 652 depicts the process becoming idle until again invoked by receiving a MODIFY command from an application.
Abstract
Description
Claims (14)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/980,336 US6687707B1 (en) | 1997-11-28 | 1997-11-28 | Unique object identification in a network of computing systems |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/980,336 US6687707B1 (en) | 1997-11-28 | 1997-11-28 | Unique object identification in a network of computing systems |
Publications (1)
Publication Number | Publication Date |
---|---|
US6687707B1 true US6687707B1 (en) | 2004-02-03 |
Family
ID=30444526
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/980,336 Expired - Lifetime US6687707B1 (en) | 1997-11-28 | 1997-11-28 | Unique object identification in a network of computing systems |
Country Status (1)
Country | Link |
---|---|
US (1) | US6687707B1 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020174162A1 (en) * | 2001-05-17 | 2002-11-21 | International Business Machines Corporation | Method and system for reducing synchronization waits when allocating sequenced identifiers in a multi-threaded server |
US20030023763A1 (en) * | 2001-07-27 | 2003-01-30 | Fraser Alexander Gibson | Electronically readable name tags |
US20040039746A1 (en) * | 2002-06-14 | 2004-02-26 | Sun Microsystems, Inc. | Protecting object identity in a language with built-in synchronization objects |
US20040156075A1 (en) * | 2000-01-24 | 2004-08-12 | International Business Machines Corporation | Method and apparatus for managing complex presentation objects using globally-unique identifiers |
US20060020578A1 (en) * | 2004-07-21 | 2006-01-26 | Rockwell Software, Inc. | Time stamp methods for unified plant model |
US7035854B2 (en) * | 2002-04-23 | 2006-04-25 | International Business Machines Corporation | Content management system and methodology employing non-transferable access tokens to control data access |
US7047522B1 (en) * | 2001-04-30 | 2006-05-16 | General Electric Capital Corporation | Method and system for verifying a computer program |
US20070171468A1 (en) * | 2006-01-25 | 2007-07-26 | Canon Kabushiki Kaisha | Image processing apparatus and method of controlling image processing apparatus |
US20070198549A1 (en) * | 2006-02-14 | 2007-08-23 | Computer Methods International Corp. | Data entry systems and methods |
US20070276833A1 (en) * | 2006-05-10 | 2007-11-29 | Sybase, Inc. | System and Method for Assignment of Unique Identifiers in a Distributed Environment |
US20080005292A1 (en) * | 2006-06-29 | 2008-01-03 | Microsoft Corporation | Systems Management Navigation and Focus Collection |
US20100281068A1 (en) * | 2009-04-30 | 2010-11-04 | International Business Machines Corporation | Apparatus, system, and method for dynamically defining inductive relationships between objects in a content management system |
US20110185014A1 (en) * | 2010-01-28 | 2011-07-28 | Hewlett-Packard Development Company, L.P. | Modeling a cloud computing system |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4718005A (en) | 1984-05-03 | 1988-01-05 | International Business Machines Corporation | Distributed control of alias name usage in networks |
US5325524A (en) * | 1989-04-06 | 1994-06-28 | Digital Equipment Corporation | Locating mobile objects in a distributed computer system |
US5388213A (en) | 1990-06-06 | 1995-02-07 | Apple Computer, Inc. | Method and apparatus for determining whether an alias is available to uniquely identify an entity in a communications system |
US5430719A (en) | 1993-06-28 | 1995-07-04 | Bellsouth Corporation | Mediation of open advanced intelligent network interface by shared execution environment |
US5434974A (en) * | 1992-03-30 | 1995-07-18 | International Business Machines Corporation | Name resolution for a multisystem network |
US5522077A (en) | 1994-05-19 | 1996-05-28 | Ontos, Inc. | Object oriented network system for allocating ranges of globally unique object identifiers from a server process to client processes which release unused identifiers |
US5550981A (en) | 1994-06-21 | 1996-08-27 | At&T Global Information Solutions Company | Dynamic binding of network identities to locally-meaningful identities in computer networks |
US5581765A (en) | 1994-08-30 | 1996-12-03 | International Business Machines Corporation | System for combining a global object identifier with a local object address in a single object pointer |
US5884322A (en) * | 1994-05-24 | 1999-03-16 | Apple Computer, Inc. | Method and apparatus for creating and assigning unique identifiers for network entities and database items in a networked computer system |
-
1997
- 1997-11-28 US US08/980,336 patent/US6687707B1/en not_active Expired - Lifetime
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4718005A (en) | 1984-05-03 | 1988-01-05 | International Business Machines Corporation | Distributed control of alias name usage in networks |
US5325524A (en) * | 1989-04-06 | 1994-06-28 | Digital Equipment Corporation | Locating mobile objects in a distributed computer system |
US5388213A (en) | 1990-06-06 | 1995-02-07 | Apple Computer, Inc. | Method and apparatus for determining whether an alias is available to uniquely identify an entity in a communications system |
US5434974A (en) * | 1992-03-30 | 1995-07-18 | International Business Machines Corporation | Name resolution for a multisystem network |
US5430719A (en) | 1993-06-28 | 1995-07-04 | Bellsouth Corporation | Mediation of open advanced intelligent network interface by shared execution environment |
US5522077A (en) | 1994-05-19 | 1996-05-28 | Ontos, Inc. | Object oriented network system for allocating ranges of globally unique object identifiers from a server process to client processes which release unused identifiers |
US5884322A (en) * | 1994-05-24 | 1999-03-16 | Apple Computer, Inc. | Method and apparatus for creating and assigning unique identifiers for network entities and database items in a networked computer system |
US5550981A (en) | 1994-06-21 | 1996-08-27 | At&T Global Information Solutions Company | Dynamic binding of network identities to locally-meaningful identities in computer networks |
US5581765A (en) | 1994-08-30 | 1996-12-03 | International Business Machines Corporation | System for combining a global object identifier with a local object address in a single object pointer |
Cited By (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040156075A1 (en) * | 2000-01-24 | 2004-08-12 | International Business Machines Corporation | Method and apparatus for managing complex presentation objects using globally-unique identifiers |
US8161067B2 (en) * | 2000-01-24 | 2012-04-17 | International Business Machines Corporation | Method and apparatus for managing complex presentation objects using globally-unique identifiers |
US7047522B1 (en) * | 2001-04-30 | 2006-05-16 | General Electric Capital Corporation | Method and system for verifying a computer program |
US7305678B2 (en) * | 2001-05-17 | 2007-12-04 | International Business Machines Corporation | Method and system for reducing synchronization waits when allocating sequenced identifiers in a multi-threaded server |
US20020174162A1 (en) * | 2001-05-17 | 2002-11-21 | International Business Machines Corporation | Method and system for reducing synchronization waits when allocating sequenced identifiers in a multi-threaded server |
US20030023763A1 (en) * | 2001-07-27 | 2003-01-30 | Fraser Alexander Gibson | Electronically readable name tags |
US7096278B2 (en) * | 2001-07-27 | 2006-08-22 | Fraser Research, Inc. | Electronically readable name tags for network communications |
US7035854B2 (en) * | 2002-04-23 | 2006-04-25 | International Business Machines Corporation | Content management system and methodology employing non-transferable access tokens to control data access |
US20040039746A1 (en) * | 2002-06-14 | 2004-02-26 | Sun Microsystems, Inc. | Protecting object identity in a language with built-in synchronization objects |
US7458061B2 (en) * | 2002-06-14 | 2008-11-25 | Sun Microsystems, Inc. | Protecting object identity in a language with built-in synchronization objects |
US7904488B2 (en) * | 2004-07-21 | 2011-03-08 | Rockwell Automation Technologies, Inc. | Time stamp methods for unified plant model |
US20060020578A1 (en) * | 2004-07-21 | 2006-01-26 | Rockwell Software, Inc. | Time stamp methods for unified plant model |
US7880914B2 (en) * | 2006-01-25 | 2011-02-01 | Canon Kabushiki Kaisha | Image processing apparatus and method of controlling network access of image processing apparatus |
US20070171468A1 (en) * | 2006-01-25 | 2007-07-26 | Canon Kabushiki Kaisha | Image processing apparatus and method of controlling image processing apparatus |
US20090265376A1 (en) * | 2006-02-14 | 2009-10-22 | Computer Methods International Corp. | Data entry systems and methods utilizing data entry messages |
US20070198549A1 (en) * | 2006-02-14 | 2007-08-23 | Computer Methods International Corp. | Data entry systems and methods |
US20070276833A1 (en) * | 2006-05-10 | 2007-11-29 | Sybase, Inc. | System and Method for Assignment of Unique Identifiers in a Distributed Environment |
US8301589B2 (en) * | 2006-05-10 | 2012-10-30 | Sybase, Inc. | System and method for assignment of unique identifiers in a distributed environment |
US7634486B2 (en) * | 2006-06-29 | 2009-12-15 | Microsoft Corporation | Systems management navigation and focus collection |
US20080005292A1 (en) * | 2006-06-29 | 2008-01-03 | Microsoft Corporation | Systems Management Navigation and Focus Collection |
US20100281068A1 (en) * | 2009-04-30 | 2010-11-04 | International Business Machines Corporation | Apparatus, system, and method for dynamically defining inductive relationships between objects in a content management system |
US8140555B2 (en) * | 2009-04-30 | 2012-03-20 | International Business Machines Corporation | Apparatus, system, and method for dynamically defining inductive relationships between objects in a content management system |
US20110185014A1 (en) * | 2010-01-28 | 2011-07-28 | Hewlett-Packard Development Company, L.P. | Modeling a cloud computing system |
US8589475B2 (en) * | 2010-01-28 | 2013-11-19 | Hewlett-Packard Development Company, L.P. | Modeling a cloud computing system |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5946681A (en) | Method of determining the unique ID of an object through analysis of attributes related to the object | |
US5946680A (en) | Method of determining the unique ID of an object in a peer to peer configuration of object indexes | |
US20230409835A1 (en) | Discovering a semantic meaning of data fields from profile data of the data fields | |
KR100856771B1 (en) | Real time data warehousing | |
US10025904B2 (en) | Systems and methods for managing a master patient index including duplicate record detection | |
EP0894302B1 (en) | Method for defining and applying rules for message distribution for transaction processing in a distributed application | |
US7657519B2 (en) | Forming intent-based clusters and employing same by search | |
US7627613B1 (en) | Duplicate document detection in a web crawler system | |
US8874556B2 (en) | Ranking search results based on the frequency of access on the search results by users of a social-networking system | |
JP5536851B2 (en) | Method and system for symbolic linking and intelligent classification of information | |
US8769673B2 (en) | Identifying potentially offending content using associations | |
US10572461B2 (en) | Systems and methods for managing a master patient index including duplicate record detection | |
US20110029952A1 (en) | Method and system for constructing a document redundancy graph | |
US6687707B1 (en) | Unique object identification in a network of computing systems | |
US20080109419A1 (en) | Computer apparatus, computer program and method, for calculating importance of electronic document on computer network, based on comments on electronic document included in another electronic document associated with former electronic document | |
US20230289376A1 (en) | Data processing systems and methods for automatically redacting unstructured data from a data subject access request | |
US20170147652A1 (en) | Search servers, end devices, and search methods for use in a distributed network | |
US6070169A (en) | Method and system for the determination of a particular data object utilizing attributes associated with the object | |
US20060265387A1 (en) | Method and apparatus for loading artifacts | |
US7890397B1 (en) | System, method, and computer-readable medium for settling accounts | |
US20050102276A1 (en) | Method and apparatus for case insensitive searching of ralational databases | |
US7283994B2 (en) | Merging of products into a database | |
JP2022153339A (en) | Record matching in database system (computer-implemented method, computer program and computer system for record matching in database system) | |
US20160019204A1 (en) | Matching large sets of words | |
US20240095219A1 (en) | Techniques for discovering and updating semantic meaning of data fields |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SHORTER, DAVID UEL;REEL/FRAME:009307/0609Effective date: 19971128 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |