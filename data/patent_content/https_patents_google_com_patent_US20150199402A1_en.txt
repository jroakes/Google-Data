US20150199402A1 - Computerized systems and methods for indexing and serving recurrent calendar events - Google Patents
Computerized systems and methods for indexing and serving recurrent calendar events Download PDFInfo
- Publication number
- US20150199402A1 US20150199402A1 US14/154,889 US201414154889A US2015199402A1 US 20150199402 A1 US20150199402 A1 US 20150199402A1 US 201414154889 A US201414154889 A US 201414154889A US 2015199402 A1 US2015199402 A1 US 2015199402A1
- Authority
- US
- United States
- Prior art keywords
- event
- instance
- document
- search
- information
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G06F17/30424—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
- G06Q10/109—Time management, e.g. calendars, reminders, meetings or time accounting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G06F17/30321—
-
- G06F17/3053—
Definitions
- the present disclosure relates to computerized systems and methods for data processing and, more generally, to search and information retrieval technologies.
- the present disclosure relates to computerized systems and methods for indexing recurrent calendar event information, and for scoring and providing search results including this information.
- Many information retrieval systems operate by identifying terms of a search string, and comparing the identified terms against an index of documents.
- a provider of search services may collect, parse, and store data from a collection of documents, such as web pages on the World Wide Web, in an index.
- the index may facilitate the fast and accurate retrieval of relevant documents based on queries from users. Without such an index, a search engine would have to scan through every document in the collection, which would require a lot of time and/or processing power for a large collection of documents.
- Some search engines use an inverted index to identify documents that include a word or phrase matching a query term.
- An example of an inverted index 100 is illustrated in FIG. 1 .
- a search engine can identify each document that contains each term of the query. For a search query including the term “pizza,” for example, a search engine using the exemplary index of FIG. 1 would identify documents 1 and 3 as including this term. Once the documents containing a term are identified, they can be ranked based on one or more of a variety of factors, such as location of the term in the document, frequency of the appearance of the term in the document, etc.
- An inverted index may be created by parsing each document in a collection to identify the terms included in the document. For example, computer systems can be programmed to identify certain sequences of characters as terms (e.g., words, phrases, or other elements, such as html code). The terms can then be associated with the document in the inverted index.
- terms e.g., words, phrases, or other elements, such as html code.
- the index may store other information regarding each term, such as a location of where the term appeared in the document, the part of speech of the term (e.g., noun, verb), etc. This additional information can be used in ranking documents, including web pages. For example, for a search query that includes two terms next to each other, such as “George Washington,” location information may be used to rank a document having the terms located next to each other with a higher ranking than a document that also contains the two terms, but in different locations in the document.
- search providers may continuously update the index. For example, search providers may continuously retrieve and index web pages to account for changes in documents, such as web pages. Such retrieval of web pages is known as “crawling” the web.
- FIG. 2 An example of a process 200 for returning web search results based on a query is illustrated in FIG. 2 .
- a query is sent from a client to a web server.
- the terms of the query are sent to one or more index servers.
- the index servers identify which web pages contain each of the query terms.
- the identified web pages may be retrieved from one or more servers. These web pages may be ranked in order of relevance based on a variety of factors, as noted above.
- a portion of the text, or “snippet,” from the document may be retrieved for each of the search results.
- a portion of the text surrounding the query term in the document may be retrieved as a snippet to provide a client with a context for a search result.
- links to the documents may be provided as search results to the client, along with the snippets.
- Web pages are not the only type of information stored on the Internet or accessible through search engines.
- generating an index can be complicated for certain types of information.
- One area in which such complications occur is when trying to index and provide search capabilities for calendar events.
- Electronic calendars such as Google Calendar
- Google Calendar allow users to store calendar events on network servers, so that they can be retrieved from anywhere and from a variety of different devices.
- Such calendars typically allow various types of calendar events to be saved, modified, or deleted.
- One type of calendar event is an event with a single occurrence at a particular date and time.
- Such an event may be stored as a data entry including attributes for information describing the event, such as a title of the event, description of the event, comments, list of participants attending the event, location of the event, date of the event, and start and end time of the event.
- attributes for information describing the event such as a title of the event, description of the event, comments, list of participants attending the event, location of the event, date of the event, and start and end time of the event.
- An exemplary illustration of such a data entry is provided in FIG. 3A .
- calendar event is a recurrent event.
- a user may wish to schedule an event that occurs repeatedly, such as a meeting that occurs on Wednesday from 2:00 p.m. to 3:00 p.m. every week.
- many calendar applications allow the user to enter the information for the event once, and to set an attribute that causes the event to recur at the desired interval.
- Such an event may be stored as a data entry including attributes for all of the information normally associated with a single event occurrence, as well as attributes indicating that the event recurs, a start and end day for the recurrence, and a pattern of its recurrence.
- Such a data entry may be called a master data entry.
- the calendar application can use the recurrence pattern to compute the individual dates of the event, as needed. An exemplary illustration of such a master data entry is provided in FIG. 3B .
- Embodiments of the present disclosure relate to computerized systems and methods for processing queries and retrieving information, such as calendar event information.
- embodiments of the present disclosure relate to solutions for storing and updating calendar event information in an indexing system, and for providing search and retrieval capabilities for such calendar event information. Examples of calendar events include recurrent calendar events.
- computerized systems and methods that identify instances of a recurring event, and that generate a document with a first section including information common to instances of the recurrent event, and a second section including information unique to instances of the recurrent event. Additional embodiments of the present disclosure provide computerized systems and methods for updating the document based on changes to an instance of the recurrent event, or to the recurring event itself. Still further embodiments of the present disclosure provide computerized systems and methods of scoring and providing calendar event search results. The embodiments presented herein also may be implemented to address one or more of the disadvantages of conventional systems and methods, such as those indicated above.
- a computer-implemented method for providing searchable calendar event information comprises operations performed by at least one processor.
- the operations include receiving first attributes for a first instance of an event, the first attributes indicating a time during which the first instance occurs and that the event recurs in time.
- the operations also include receiving second attributes for a second instance of the event, the second attributes indicating a time during which the second instance occurs.
- the operations further include identifying, from the first attributes and the second attributes, information common to both the first instance and the second instance of the event.
- the operations still further include generating a document with a first section including the common information and a second section comprising the time at which the first instance occurs and the time at which the second instance occurs.
- a computer system for providing searchable calendar event information.
- the computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions.
- the at least one processor is configured to receive first attributes for a first instance of the event, the first attributes indicating a time during which the first instance occurs and that the event recurs in time.
- the at least one processor is also configured to receive second attributes for a second instance of the event, the second attributes indicating a time during which the second instance occurs.
- the at least one processor is further configured to identify, from the first attributes and the second attributes, information common to both the first instance and the second instance of the event.
- the at least one processor is still further configured to generate a document with a first section including the common information and a second section comprising the time at which the first instance occurs and the time at which the second instance occurs.
- a computer system for providing searchable calendar event information.
- the computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions.
- the at least one processor is configured to identify recurrent event information and store the recurrent event information as a single document.
- the document comprises a first section including information that is common to multiple instances of the recurrent event.
- the document also comprises a second section comprising a sub-document for each of multiple instances of the recurrent event, each of the sub-documents storing additional information for its corresponding instance of the recurring event, the additional information being information that is different from the common information.
- a computer-implemented method for providing calendar event search results comprises operations performed by at least one processor.
- the operations include receiving a first indication of a start time of an initial instance in time of the event, and receiving a second indication of a start time of a last instance in time of the event.
- the operations also include receiving a third indication of a total number of instances of the event, and calculating a time interval at which the event recurs using the first indication, second indication, and third indication.
- the operations further include using the time interval to approximate a start time for a next instance in time of the event, and calculating a first score for the event based on the approximated start time.
- a computer system for serving calendar event search results.
- the computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions.
- the at least one processor is configured to receive a first indication of a start time of an initial instance in time of the event, and receive a second indication of a start time of a last instance in time of the event.
- the at least one processor is also configured to receive a third indication of a total number of instances of the event, and to calculate a time interval at which the event recurs using the first indication, second indication, and third indication.
- the at least one processor is further configured to use the time interval to approximate a start time for a next instance in time of the event, and to calculate a first score for the event based on the approximated start time.
- FIG. 1 illustrates an exemplary inverted index for documents.
- FIG. 2 illustrates an exemplary diagram of a process for returning web search results based on a query.
- FIG. 3A illustrates an exemplary data entry for a single occurrence of a calendar event.
- FIG. 3B illustrates an exemplary data entry for a recurrent calendar event.
- FIG. 4 illustrates an exemplary method for generating a markup document including information for a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 5A illustrates exemplary event information of a first instance of a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 5B illustrates exemplary event information of a second instance of a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 5C illustrates an exemplary table including commonalities and differences between a first instance of a recurrent event and a second instance of a recurrent event, consistent with embodiments of the present disclosure
- FIG. 6 illustrates an exemplary markup document including information for a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 7 illustrates an exemplary method for generating a search document and updating a search index based on recurrent event information, consistent with embodiments of the present disclosure.
- FIG. 8 illustrates an exemplary search document including information for a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 9 illustrates an exemplary search index including terms and document location information for a recurrent event, consistent with embodiments of he present disclosure
- FIG. 10 illustrates an exemplary method for calculating an initial score for a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 11 illustrates an exemplary method for generating a second score for a recurrent event, consistent with embodiments of the present disclosure.
- FIG. 12A illustrates an exemplary display of search results including event information, consistent with embodiments of the present disclosure.
- FIG. 12B illustrates an exemplary display of search results including additional event information, consistent with embodiments of the present disclosure.
- FIG. 12C illustrates an additional exemplary display of search results including event information, consistent with embodiments of the present disclosure.
- FIG. 13 illustrates an exemplary computing environment for implementing embodiments and features consistent with the present disclosure.
- FIG. 14 illustrates an exemplary computer system for implementing embodiments and features consistent with the present disclosure.
- Embodiments of the present disclosure relate to computerized systems and methods for processing queries and retrieving information, such as calendar event information.
- Embodiments of the present disclosure include systems and methods for indexing calendar information, including recurrent calendar events.
- Such systems and methods may generate a single markup document and a single search document, each including information for instances of the recurring event.
- the markup document may include a first section including first information that is common among instances of the event, and a second section including second information that is unique to instances of the event.
- the search document may be generated by parsing the markup document, and may include information for searching for and scoring a recurrent event.
- the search document may include a first search document section including first search information that is common among instances of the event, and a second search document section including second search information that is unique to instances of the event.
- embodiments of the present disclosure encompass computer-implemented systems and methods for updating the markup document and search document based on updates to the indexed recurring events.
- Embodiments of the present disclosure also encompass computer-implemented systems and methods for searching and scoring calendar event information.
- embodiments of the present disclosure encompass computer-implemented systems and methods for parsing a search query for calendar event information, and for serving calendar event information regarding one or more instances of a recurrent event as a search result for the query.
- recurrent events presents some challenges to indexing calendar information.
- One way in which a recurrent event could be indexed would be to create a document for each instance of the recurring event, and to index each of these documents.
- creating a copy of the information for each instance of the recurring event is inefficient, because much of the information may be identical from instance to instance.
- a recurrence pattern may be set in the recurrent event information, such that any number of instances may exist.
- Hundreds, or even thousands, of documents may need to be generated for such events. Storing all of this information unnecessarily takes up valuable storage space, and it takes longer and/or more processing power to search through all of this information. In some cases, hundreds or even millions of users may need to be supported.
- Creating an index by creating a document for each instance of a recurrent event is inefficient, particularly for providers of such heavily accessed search engines.
- An additional problem may occur when serving search results based on recurrent events indexed in this manner. For example, a user may enter a term in a search query that is common among multiple instances of the recurrent event. Each of the multiple instances of the recurrent event containing this term may match the query, and the user's search results may be flooded with information from the recurrent event.
- Embodiments of the present disclosure can address the challenges associated with searching for and serving calendar event information, including recurrent event information.
- embodiments of the present disclosure provide computerized systems and methods that index recurrent calendar event information by generating a search document that includes a first search document section including first information that is common to instances of the recurring event, and a second search document section including second information that is unique to instances of the recurring event. By generating such a document, recurrent event information can be indexed without having to store and search through many copies of identical information.
- Embodiments of the present disclosure also provide computerized systems and methods for updating such search documents in response to updates to recurrent calendar event information. Additional embodiments of the present disclosure provide solutions for efficiently scoring and serving information from search documents. By using such documents, search providers can quickly and accurately identify relevant search results. This may provide increased customer satisfaction of a search provider's services, which may stimulate additional use of the search and/or related services.
- an “event” refers to an event that may occur one time, or that may occur repeatedly.
- An “instance” of an event refers to a single occurrence of the event.
- an “event” will include at least one “instance” of the event, and may include multiple “instances” of the event.
- a search provider may provide one or more server systems including a search engine for processing user search queries received over a network, such as the Internet.
- a search query may include one or more terms or phrases submitted by a user to search an available pool of information indexed by the server(s).
- the server(s) may receive a search query as a character string including one or more terms or phrases.
- a character string may include a sequence of characters.
- the sequence of characters may include one or more alphanumeric characters, accented characters, diacritics, spaces, character returns, punctuation, and/or any other character commonly entered by a user with a keyboard and/or provided in a character-encoding scheme, such as American Standard Code for Information Interchange (ASCII) or UCS Transformation Format-8-bit (UTF-8).
- ASCII American Standard Code for Information Interchange
- UCS Transformation Format-8-bit UCS Transformation Format-8-bit
- a character string may include one or more query terms or phrases entered by a user.
- a character string may include one or more words, phrases, numbers, dates, abbreviations, and/or acronyms.
- FIG. 4 illustrates an exemplary method 400 , consistent with embodiments of the present disclosure.
- Exemplary method 400 may be implemented in a computing environment (see, e.g., FIG. 13 ) using one or more computer systems (see, e.g., FIG. 14 ).
- method 400 may be performed by one or more servers or computer systems associated with a search engine that is accessible to users over a network, such as the Internet.
- event information of a first instance of an event may be received.
- the event information may be received in the form of a data entry, such as a record or other data structure.
- the event information may include one or more attributes of the first instance of the event.
- each of the attributes may include a field describing the type of attribute and a value for the attribute.
- the attributes may indicate one or more of a title of the event, description of the event, summary of the event, comments regarding the event, list of participants invited to the event, scheduled attendees of the event (e.g., those participants who accepted an invitation to attend the event), location of the event, start and end time of the event, status of the event (e.g., an indication that the event is cancelled), universal resource locator (URL) link to a displayable version of the event information, visibility of the event (e.g., whether there are restrictions on who can view the event), creation time of the event, modification time of the event, creator of the event, organizer of the event, and an original start time of the event.
- the attributes may also include an indication that the event is recurrent in time. A data entry with attributes indicating that the event is recurrent in time may be referred to as a “master” data entry. Exemplary event information of a first instance of the event is illustrated in FIG. 5A .
- method 400 may proceed to step 420 , and event information of a second instance of the event may be received.
- one or more computer systems (see, e.g., FIG. 14 ) implementing method 400 may request one or more other computer systems in the computing environment (see, e.g., FIG. 13 ) to generate and provide event information for another instance of the event (e.g., the next instance in time).
- the one or more other computer systems may include one or more servers providing calendar applications and/or storing user calendar event information.
- the one or more computer systems implementing method 400 may provide calendar applications and/or user calendar event information, and may receive the event information of the second instance of the event from one or more of its own servers and/or databases.
- the event information received in step 410 may include an indication of a pattern (e.g., time interval or frequency) at which the event recurs in time.
- a pattern e.g., time interval or frequency
- the one or more computer systems (see, e.g., FIG. 14 ) implementing method 400 may calculate event information for another instance of the event.
- the pattern describing the recurrence of the event may indicate that the event recurs on an annual basis, monthly basis, weekly basis, daily basis, or any other pattern that repeats in time.
- One or more computer systems implementing method 400 may use this pattern to generate another instance of the event.
- a pattern indicating that an event recurs on an annual basis may indicate a time of day at which the event starts, date (e.g., day of the month) on which the event starts, month in which the event starts, and frequency with which the event repeats (e.g., every two years).
- Such a pattern may indicate, for example, that the event recurs starting at 1:00 p.m. on Mar. 4 every two years, starting with 1:00 p.m. on Mar. 4, 2014 (e.g., 1:00 p.m. on Mar. 4, 2014; 1:00 p.m. on Mar. 4, 2016; etc.).
- a pattern indicating that an event recurs on a monthly basis may indicate a time of day at which the event starts, date (e.g., day of the month) on which the event starts, and frequency with which the event repeats (e.g., every six months).
- Such a pattern may indicate, for example, that the event recurs on the 8th day every two months, starting at 2:00 p.m. on Feb. 8, 2014 (e.g., 2:00 p.m. on Feb. 8, 2014; 2:00 p.m. on Apr. 8, 2014; etc.).
- a pattern indicating that an event recurs on a monthly basis may indicate a time of day at which the event starts, day of the week (e.g., nth day of the week, where n is a number between 1 and 7), week of the month (e.g., nth week of the month), and frequency with which the event repeats (e.g., every 2 weeks, every three weeks, etc.).
- Such a pattern may indicate, for example, that the event recurs every second Friday, starting at 1:00 p.m. on the second Friday of April, 2014.
- a pattern indicating that an event recurs on a weekly basis may indicate a start time at which the event starts, day of the week (e.g., nth day of the week, where n is a number between 1 and 7), and frequency with which the event repeats (e.g., every 1 week, every three weeks, etc.).
- Such a pattern may indicate, for example, that the event recurs on Wednesday every three weeks, starting at 1:00 p.m. on Wednesday, Jan. 15, 2014.
- a pattern indicating that an event recurs on a daily basis may indicate a start time at which the event starts, and frequency with which the event repeats (e.g., every day, every 3 days, etc.). Such a pattern may indicate, for example, that the event recurs every three days, starting at 1:00 p.m. on Wednesday, Jan. 15, 2014.
- an indication of a pattern can be used by one or more computer systems (see, e.g., FIG. 14 ) implementing method 400 to calculate event information for another instance of the event.
- an event could recur at any interval, not limited to those listed above.
- the one or more computer systems implementing method 400 may not be aware of and/or capable of computing additional instances based on all the patterns utilized for recurrent events.
- other instances of an event may include exceptions to the pattern of recurrence, and/or modified and/or additional attributes that are not reflected in the event information of the first instance of the event.
- the one or more computer systems implementing method 400 may receive the event information of the second instance of the event from one or more computer systems that provide calendar applications and/or store calendar information.
- the event information for the second instance of the event received in step 420 may include a time and/or date that does not correspond to the pattern of recurrence, and/or may include additional and/or different attributes from those included in the event information of the first instance of the event.
- event information of the second instance of the event may be received.
- the event information may be received in the form of a data entry, such as a record or other data structure.
- the event information may include one or more attributes of the second instance of the event.
- each of the attributes may include a field describing the type of attribute and a value for the attribute.
- the attributes may indicate one or more of a title of the event, description of the event, summary of the event, comments regarding the event, list of participants invited to the event, scheduled attendees of the event, location of the event, start and end time of the event, status of the event, URL link to a displayable version of the event information, visibility of the event, creation time of the event, modification time of the event, creator of the event, organizer of the event, and original start time of the event.
- Exemplary event information of a second instance of an event is illustrated in FIG. 5B .
- the attributes of the event information of the first instance may be compared with the attributes of the event information of the second instance, and commonalities and differences among the attributes may be identified.
- attribute fields and values of the event information of the first instance may be compared with attribute fields and values of the event information of the second instance.
- Differences in the fields between the event information of the first instance and second instance, and differences in the values between the event information of the first instance and the second instance may be identified. Differences could include, for example, an exception to the recurrent event (e.g., a different location for a meeting in a particular week).
- FIG. 5C is an exemplary illustration of the commonalities and differences between the event information of the first instance illustrated in FIG. 5A and the event information of the second instance illustrated in FIG. 5B .
- a markup document may be generated with sections for listing the commonalities and differences between the event information of the first instance and the event information of the second instance.
- the markup document is a HyperText Markup Language (HTML) or Extensible Markup Language (XML) document.
- HTML HyperText Markup Language
- XML Extensible Markup Language
- An exemplary markup document 600 is illustrated in FIG. 6 .
- the markup document may include a first section 610 listing all of the attributes that are common to the event information of the first instance and the event information of the second instance.
- the markup document may also include a second section 620 listing the attributes that are different between the event information of the first instance and the event information of the second instance.
- Second section 620 of the markup document may be generated to include a first sub-document portion 630 that lists all of the attributes that are unique to the event information of the first instance, and a second sub-document portion 640 that lists all of the attributes that are unique to the event information of the second instance.
- steps 420 and 430 may be repeated for every other instance of the event. That is, the attributes of the event information for every other instance of the event may be received and compared with the attributes of the event information of the first instance (e.g., the “master” instance) of the event. Differences in the fields between the event information of each instance and the event information of the first instance, and differences in the values between the event information of each instance and the event information of the first instance, may be identified.
- the markup document generated in step 440 may then be generated with a first section listing the attributes common between the event information of the first instance of the event and the event information of a certain number (e.g., a majority) of the other instances of the event, and a second section listing the attributes of the event information of each instance of the event that differ from the common attributes.
- the second section may include a sub-document for each instance of the event, and each sub-document may store attributes of the event information that differ from the common attributes.
- each of the sub-documents may be separated by ⁇ div> tags, as illustrated in FIG. 6 .
- FIG. 7 illustrates an exemplary method 700 for creating a search document based on the document generated by method 400 .
- exemplary method 700 may be implemented in a computing environment (see, e.g., FIG. 13 ) using one or more computer systems (see, e.g., FIG. 14 ). Further, method 700 may be implemented on the same or different web server(s) or computer(s) associated with the other exemplary methods disclosed herein, including method 400 .
- the markup document generated by method 400 may be parsed.
- the markup document may be broken into terms by tokenizing the markup document based on predetermined character delimiters, such as a space or punctuation mark.
- predetermined character delimiters such as a space or punctuation mark.
- a search document may be created to correspond to the markup document, with sections for listing the commonalities and differences between the event information of the first instance and the event information of the second instance.
- An exemplary search document is illustrated in FIG. 8 .
- the search document may include a first search document section 810 corresponding to the first section of the markup document, and a second search document section 820 corresponding to the second section of the markup document.
- Second search document section 820 may include a first search sub-document 830 that may include attributes from the first sub-document of the markup document, such as the start time, end time, and URL link of the event information of the first instance of the event.
- the second search document section 820 may also include a second search sub-document 840 that may include attributes from the second sub-document of the markup document, such as the start time, end time, and URL link of the event information of the second instance of the event.
- the search sub-documents may be identified by, for example, parsing the ⁇ div> tags that separate the sub-documents in the markup document.
- Identifiers corresponding to other attributes included in the markup document may also be included in the first search document section and in each search sub-document of the second search document section.
- these identifiers may be token numbers, such as token numbers 850 , that identify the locations in which the attributes appear in the markup document.
- each sub-document may store a start token number and an end token number to identify the range of locations in which the attributes for the sub-document appear in the markup document.
- a search index may be updated with the terms that were identified in parsing markup document 600 .
- An exemplary search index 900 is illustrated in FIG. 9 .
- Search index 900 may be an inverted index including a listing of terms from one or more markup documents.
- search index 900 may include terms parsed from markup documents for one or more of single occurrences of events, recurrent occurrences of events, web pages, social networking information, or any other type of information that can be represented by a markup document,
- search index 900 may also include terms parsed from any other type of document.
- Any term identified from parsing any of the markup documents may be stored in search index 900 once, and may be associated with a list of markup documents in which the term was identified. Accordingly, if a term identified from parsing markup document 600 was not already included in search index 900 , search index 900 will be updated to include that term.
- Each pairing between a term and a document in the listing of documents may also identify locations in which the term appeared in the paired document, and/or a number of times in which the term appeared in the paired document. In one embodiment, the locations may be stored as token numbers that correspond to the token numbers of search document 800 .
- search index 900 may store a variety of other characteristics of one or more of the listed terms, including the term's case (e.g., upper, lower), language, encoding, part of speech, sentence number, sentence position, length, line number, etc.
- a search engine may use search index 900 to identify, for example, each document in which a term appears, each location in which the term appears in that document, and/or the number of times in which the term appears in that document.
- FIG. 10 illustrates an exemplary method 1000 , consistent with embodiments of the present disclosure. Similar to methods 400 and 700 , exemplary method 1000 may be implemented in a computing environment (see, e.g. FIG. 13 ) using one or more computer systems (see, e.g., FIG. 14 ). Further, method 1000 may be implemented on the same or different web server(s) or computer system(s) associated with the other exemplary methods disclosed herein, including methods 400 and 700 .
- step 1010 an indication of a start time of a first instance of a recurrent event may be received and an indication of a start time of a last instance of the recurrent event may be received.
- step 1020 an indication of a total number of instances of the recurring event may be received.
- One or more of the indications in steps 1010 and 1020 may be received by retrieving them from a search document generated by method 700 , such as search document 800 .
- the indications could also be retrieved from a markup document generated by method 400 , such as markup document 600 .
- one or more of the indications may have been determined and stored as part of method 400 or method 700 , and could be retrieved from storage in steps 1010 and 1020 .
- an approximation of the interval at which the event recurs may be calculated.
- the interval may be calculated, for example, by subtracting the start time of the first instance from the start time of the last instance and dividing the result by the total number of instances of the event.
- steps 1010 - 1030 of method 1000 may occur at any time after the event information of the instances is received.
- the system may identify the start time of the first instance, the start time of the last instance, and the total number of instances for the event when the event information is received in performing method 400 , and the time interval can be calculated at that time, or at any time thereafter.
- the calculated time interval may then be stored in the markup document generated in step 440 of method 400 , and/or in the search document generated in step 720 of method 700 , for later retrieval by step 1040 .
- the calculated interval may be used to estimate a start time for a next instance of the event in the future. For example, if no time is specified in a search query, the calculated interval may be used to determine the start time for a next instance of the event immediately after the current time. If a time restriction is included in a search query, the calculated interval may be used to determine whether an instance of the event would fall within the time restriction if the instances repeated at the calculated interval.
- the estimated start time for the next instance in the future of the event may be used to calculate an initial score for a search result, in accordance with method 1100 , and as further described below.
- FIG. 11 illustrates an exemplary method 1100 , consistent with embodiments of the present disclosure. Similar to methods 400 , 700 , and 1000 , exemplary method 1100 may be implemented in a computing environment (see, e.g. FIG. 13 ) using one or more computer systems (see, e.g., FIG. 14 ). Further, method 1100 may be implemented on the same or different web server(s) or computer system(s) associated with the other exemplary methods disclosed herein, including methods 400 , 700 , and 1000 .
- a search query is received,
- the search query may include a character string entered by a user to search for information, and the character string may include one or more search terms.
- the character string may be parsed to identify the terms of the query. For example, the character string may be broken into terms by tokenizing the character string based on predetermined character delimiters, such as a space.
- predetermined character delimiters such as a space.
- Terms of the search query may be compared with terms stored in a search index, such as search index 900 . If one of the terms matches a term in the search index, the documents paired with that term may be returned, along with any other information that is associated with the pairing (e.g., locations of the term in the paired document, number of times the term appears in the document, etc.).
- an initial score may be calculated for the recurrent event.
- the initial score may be calculated using method 1000 , for example.
- an initial score may be generated by method 1000 , and may be used in combination with one or more scores generated in another manner to determine the initial score of step 1130 .
- a search document corresponding to the recurrent event such as search document 800
- search document 800 may be retrieved.
- Actual start times or end times of instances of the recurrent event may be retrieved from the search document. For example, if a search query included a time restriction (e.g., meetings between Tuesday and Thursday), the search document can be analyzed to determine whether any instances of the recurrent event fall within the time restriction.
- a time restriction e.g., meetings between Tuesday and Thursday
- a score for an instance of the recurrent event can be generated based, at least in part, on the actual start and/or end times of the instance.
- the system may analyze the search sub-documents of the search document to identify the actual start and/or end times of instances of the recurrent event, and may score the event instances based on the actual start and/or end times. For example, calendar event instances that occur in the near future may be considered to be more relevant search results. Accordingly, they may be given higher scores. If a search query includes a time restriction, calendar event instances with start and/or end times that fall within the time restriction may be scored higher than those with start and/or end times that do not.
- the score generated in step 1160 may be one of many scores that are combined to determine a total score for a potential search result for the query.
- a total score may be based on a variety of factors other than time, such as the location the term appears in a document, the frequency with which the term appears in the document, whether terms appearing next to each other in the query also appear next to each other in the document, etc.
- the query may include a keyword.
- the query may be received.
- the query may be parsed to identify the keyword.
- a search index such as search index 900 , may be referenced to identify the documents that the keyword appears in and the locations the keyword appears in each document. If one of the returned documents corresponds to a recurrent event, method 1000 may be used to estimate a time interval at which the event recurs, to generate an initial score for the event. In step 1140 , this initial score may be used to rank this document as a candidate search result against other documents that matched the keyword.
- the search document corresponding to the recurrent event may be retrieved, along with the actual start times and end times of instances of the event. The actual start times and end times may be used to calculate a second score for the recurrent event. If the system determines that the event should be returned as a search result, the system may provide the event information for the instance considered to be the most relevant (e.g., the instance with a start time that is closest to the current time, or the instance whose sub-document contains the query keyword) as the search result.
- the query may include a keyword and a time restriction. For example, a user may search for “my project meeting tomorrow.”
- the system can parse the query to identify the terms “my,” “project,” “meeting,” and “tomorrow,”
- the system may intelligently determine that the terms “my” and “meeting” refer to a calendar event for that particular user, and that the term “project” is a keyword for particular calendar event.
- the system may then use a search index, such as search index 900 , to identify documents corresponding to “project” calendar events for the user.
- the system may also intelligently determine that the term “tomorrow” corresponds to events that fall within a range between a particular start time and end time.
- the system may use method 1000 to estimate a time interval at which the event recurs.
- the system may use the estimated time interval to determine whether the event is likely to recur within the identified time range, and to calculate an initial score for the event based on this determination.
- Method 1100 may then determine whether the event is a candidate event. If it is, method 1100 may retrieve the search document for the event, and determine the actual start and end times of instances of the recurrent event to determine whether instances of the event actually fall within the determined time range.
- the system may associate scores with the event based on whether instances of the event fall within the range, and based on where an instance falls within the range.
- an event instance falling earlier in time in the range may be considered to be more relevant, and may be given higher scores than a project meeting event instance falling later in the day tomorrow.
- the system may determine that the sub-documents containing the keyword “project” do not fall within the time frame corresponding to “tomorrow.” In this case, the system may determine not to include any of the instances from the recurring event document in the search results.
- the query may include a keyword that matches a term in the common portion of a markup document for a recurrent event.
- the query may be received.
- the query may be parsed to identify the keyword.
- a search index such as search index 900 , may be referenced to identify the document that the keyword appears in and the location the keyword appears within the document (in this case, within the first section of the document that includes the information common to multiple instances of the event).
- Method 1000 may be used to estimate a time interval at which the event recurs, and to generate an initial score for the event.
- the score may be used to rank this document as a candidate search result against other documents that matched the keyword.
- the search document corresponding to the recurrent event may be retrieved, along with the actual start and end times of instances of the event.
- the actual start and end times may be used to calculate a second score for the recurrent event. If, based on the second score, the system decides to return the document for the recurrent event as a search result, the instance of the recurrent event with the start time closest to the current time may be deemed most relevant, and could be provided to the user as a search result.
- a recurrent event is to be returned as a search result
- only the event information for the instance of the recurrent event receiving the highest score may be provided as a search result (e.g., the instance appearing closest to the current time, or within a time restriction of the search query).
- the instance corresponding to second search sub-document 840 receives the highest score
- the user may be provided with the start time of the instance (e.g., 12:00 p.m. on Jan. 22, 2014), the end time of the instance (e.g., 1:00 p.m. on Jan. 22, 2014), and the URL link (e.g., http://www . . . 2.com) of the instance.
- the user may be provided with a “snippet” of text as part of the search result to provide a context for the instance of the event.
- the system may identify text for the instance in a corresponding markup document, such as markup document 600 , based on the start and end token numbers 850 .
- the system may then, for example, select a text passage including a certain number of terms from either side of the term that matched the search query.
- FIGS. 12A-12C illustrate examples of a web page that displays calendar event search results, consistent with the embodiments disclosed herein.
- a user may search for “my project meetings.”
- the system may provide search results including snippets for upcoming project meetings.
- the search results may be ranked and sorted, so that the results that are determined to be most relevant are displayed at the top of the list of search results.
- the system may determine the first search result to be more relevant, because it occurs closer in time to the current time.
- the user may click any of the search results to retrieve more information for the calendar event, such as the information illustrated in FIG. 12B .
- FIG. 12B is an exemplary illustration of a display of calendar search results after the user clicks on a particular search result (in this case, the first search result in FIG. 12A ).
- more information may be displayed for the calendar event search result that was clicked on, including the title, description, date and time, and invited guests.
- the information that may be displayed is not limited to the information shown in FIG. 12B . Indeed, any relevant calendar event information may be displayed.
- the information may also include a link to view the full information of the event in a calendar application.
- the calendar application may be the calendar application in which the user initially scheduled the calendar event, though the disclosure is not so limited.
- the exemplary display illustrated in FIG. 12B also displays snippets for one or more additional search results that were not clicked on by the user.
- a user may search for “my meetings tomorrow.”
- the system may provide search results including snippets for calendar events that are on the user's calendar for tomorrow.
- the search results may be ranked and sorted, so that the results that are determined to be most relevant are displayed at the top of the list of search results.
- the search query may only include “my meetings tomorrow.” Accordingly, the system may determine that search results occurring earlier in the day are more relevant than those occurring later in the day, because they appear closer in time to the current time.
- the user may click any of the search results to retrieve more information for the calendar event, such as the information illustrated in FIG. 12B .
- information may be added, deleted, or modified for a recurring event, or for an instance of a recurrent event, in a calendar application.
- a user may change a description, add a description to, or delete a description from, a recurrent event.
- a user could also delete a single instance of an event. For example, if a typical weekly meeting falls on a holiday, the user may wish to delete that instance of the event if, for example, the office will be closed that day.
- a user could also modify information for a single instance of an event. For example, if the weekly meeting for a particular week will be held in a different location.
- a user may also delete or change all future occurrences of the recurrent event.
- many other changes not listed above could be made by a user to a recurring event, or to an instance of a recurring event.
- a computer system providing the calendar application, or storing the calendar information may notify the one or more computer systems (see, e.g., FIG. 14 ) that implement method 400 .
- the one or more computer systems that implement method 400 may recreate the markup document and search document using methods 400 and 700 , respectively. Because this information has changed in the system implementing the calendar application or storing the calendar information, the changes will be automatically accounted for in the markup document and search document by recreating these documents using methods 400 and 700 .
- the one or more computer systems that implement method 400 may not be notified of the change, but may implement methods 400 and 700 on a periodic basis, such as hourly or daily. In one embodiment, this may occur on a periodic basis for all of the calendar information stored by a computer system. The more often this occurs, the more up-to-date the markup documents, search documents, and/or search indexes will be. For example, without receiving a notification that calendar information has changed, the markup documents, search documents, and/or search indexes may not reflect a change that was made by a user thirty minutes ago if these documents are updated on an hourly basis, for example.
- FIG. 13 is a diagram illustrating an exemplary computing environment 1300 for implementing embodiments consistent with the present disclosure, including the above-described exemplary methods and features.
- a service provider or other entity may provide one or more computer system(s) 1320 that enable query and information retrieval services.
- computer system(s) 1320 may include one or more servers, such as web servers, or other computing platforms for hosting web pages, indexing documents, and/or scoring documents.
- Computer system(s) 1320 may also host software applications that generate markup documents, search documents, and/or search indexes.
- Computer system(s) 1320 may further host software applications that handle and process user queries, score search results, rank search results, and/or provide search results to client devices, such as client(s) 1310 .
- Computer system(s) 1320 may also include one or more back-end servers for carrying out one or more aspects of the present disclosure.
- computer system(s) 1320 may be implemented using computer system 1400 of FIG. 14 .
- One or more networks 1330 may connect computer system(s) 1320 with one or more client device(s) 1310 .
- Network(s) 1330 may provide for the exchange of information, such as search queries and results, between client device(s) 1310 and computer system(s) 1320 .
- Network(s) 1330 may include one or more types of networks interconnecting computer system(s) 1320 with client device(s) 1310 .
- Networks 1330 may include one or more wide area networks (WANs), metropolitan area networks (MANS), local area networks (LANs), or any combination of these networks.
- Network(s) 1330 may include a combination of a variety of different network types, including Internet, Ethernet, twisted-pair, coaxial cable, fiber optic, cellular, satellite, IEEE 802.11, terrestrial, and/or other types of network connections.
- network 1330 comprises the Internet.
- Client device(s) 1310 may include a variety of different types of computing devices capable of communicating with computer system(s) 1320 over network(s) 1330 . These computing devices may include personal computers, laptops, personal digital assistants (PDAs), personal organizers, telephones, mobile phones, smart-phones, televisions, set-top boxes, tablet computers, servers, and/or other types of computing devices. A user may use more than one type of client device to communicate with computer system(s) 1320 .
- PDAs personal digital assistants
- a user may use more than one type of client device to communicate with computer system(s) 1320 .
- FIG. 14 is a diagram illustrating an exemplary computer system(s) 1400 that may be used for implementing embodiments consistent with the present disclosure, including the exemplary systems and methods described herein.
- Computer system(s) 1400 may include one or more computers 1410 , which may be servers, personal computers, and/or other types of computing devices.
- Each computer 1410 may include one or more processors 1430 that may be any suitable type of processor.
- Processor 1430 may be coupled to a network interface 1420 for receiving and/or transmitting data and/or commands to/from other devices over a variety of networks, such as Internet, Ethernet, twisted-pair, coaxial cable, fiber optic, cellular, satellite, IEEE 802.11, terrestrial, or other wired or wireless networks.
- networks such as Internet, Ethernet, twisted-pair, coaxial cable, fiber optic, cellular, satellite, IEEE 802.11, terrestrial, or other wired or wireless networks.
- Processor 1430 may be coupled to one or more memory device(s) 1440 .
- Each memory device 1440 may be configured to store instructions that, when executed by one or more processors 1430 , carry out the methods and techniques consistent with the present disclosure, including the exemplary methods and techniques described herein.
- Memory device 1440 may also store an operating system, software applications, and/or parameters. Data stored on memory device 1440 may be stored in a single dedicated memory, or over a plurality of memory devices.
- Memory device 1440 may include any type of memory, physical, non-transient, volatile, or non-volatile, including, but not limited to, random access memory (RAM), 1450 , read-only memory (ROM) 1460 , magnetic strip storage, semiconductor storage, optical disc storage, and/or magneto-optical disc storage.
- RAM random access memory
- ROM read-only memory
- magnetic strip storage semiconductor storage
- optical disc storage optical disc storage
- magneto-optical disc storage magneto-optical disc storage
- Memory device 1440 may also include one or more databases 1470 for storing search information, such as search documents, indexes, and/or any other information or data stored as a result of performing the disclosed methods, or required to perform the disclosed methods.
- database(s) 1470 may store documents, such as markup documents, search documents, and/or search indexes, that include event information, as disclosed herein.
- database(s) 1470 could also store additional information that could be provided as search results, such as web page information, electronic mail information, social networking information, or any other type of information.
- Processor 1430 may also be coupled to a computer providing a user interface for allowing input of information and commands to processor 1430 and/or allowing output of information and commands in a human-readable form.
- a computer system 1400 implementing method 400 may receive calendar information from one or more different computer systems over a network. Any combination of methods 400 , 700 , 1000 , and 1100 may be performed on the same computer system 1400 . Alternatively, each of methods 400 , 700 , 1000 , and 1100 may be performed on a different computer system.
- recurrent event information may be received, and a single markup document may be created including a first section containing information common to instances of the recurrent event, and a second section containing information that is unique to instances of the recurrent event.
- the second section may contain a plurality of sub-documents. Each sub-document may include the unique information of an instance of the recurrent event.
- the markup document may be parsed and a search document may be created with a first search document section corresponding to the first section of the markup document, and a second search document section corresponding to the second section of the markup document, and including search sub-documents corresponding to the sub-documents of the markup document. Terms parsed from the markup document may also be used to update a search index. When changes are made to a recurrent event, or to an instance of the recurrent event, the markup document and search document may be recreated, and the search index may be updated.
- search queries may be received and parsed to identify terms of the search queries.
- Initial scores may be generated for search results corresponding to recurrent events by estimating a time corresponding to an instance of the recurrent event. If, based on the initial score, the recurrent event is determined to be a candidate search result, the search document corresponding to the recurrent event can be retrieved, and the actual start times and end times of instances of the recurrent event can be identified. The actual start and end times may be used to generate a second score for the recurrent event, and an instance of the recurrent event may be ranked and/or provided as a search result based on the second score.
- the disclosed systems and methods provide a useful way of indexing recurrent event information, so that instances of a recurrent event can be quickly and accurately searched.
- Creating markup documents and search documents using the systems and methods disclosed herein allows the indexing of recurrent event information in a manner that may be integrated with other indexed information.
- the systems and methods provided herein may be used to provide a search engine that integrates a variety of different types of searchable information. For example, a user's search query may return calendar event search results, including recurrent event information, along with search results including web pages, social networking information, electronic mail information, or any other type of indexed information.
Abstract
Description
- 1. Technical Field
- The present disclosure relates to computerized systems and methods for data processing and, more generally, to search and information retrieval technologies. By way of example, and without limitation, the present disclosure relates to computerized systems and methods for indexing recurrent calendar event information, and for scoring and providing search results including this information.
- 2. Background
- Use of information retrieval services, such as search engines, has grown significantly over the last decade. People can now submit queries and access information using a variety of devices, such as personal computers, laptops, tablets, personal digital assistants (PDAs), personal organizers, mobile phones, smart-phones, televisions, and other devices. Queries for information can be performed locally on a device, or over a network such as the Internet. With increased access to such technologies over a wide variety of devices, people have become more reliant than ever on applications and services for accessing desired information.
- Many information retrieval systems, such as Internet search engines, operate by identifying terms of a search string, and comparing the identified terms against an index of documents. For example, a provider of search services may collect, parse, and store data from a collection of documents, such as web pages on the World Wide Web, in an index. The index may facilitate the fast and accurate retrieval of relevant documents based on queries from users. Without such an index, a search engine would have to scan through every document in the collection, which would require a lot of time and/or processing power for a large collection of documents.
- Some search engines use an inverted index to identify documents that include a word or phrase matching a query term. An example of an inverted index 100 is illustrated in
FIG. 1 . By using an inverted index, a search engine can identify each document that contains each term of the query. For a search query including the term “pizza,” for example, a search engine using the exemplary index ofFIG. 1 would identifydocuments - An inverted index may be created by parsing each document in a collection to identify the terms included in the document. For example, computer systems can be programmed to identify certain sequences of characters as terms (e.g., words, phrases, or other elements, such as html code). The terms can then be associated with the document in the inverted index.
- In addition to storing identified terms, the index may store other information regarding each term, such as a location of where the term appeared in the document, the part of speech of the term (e.g., noun, verb), etc. This additional information can be used in ranking documents, including web pages. For example, for a search query that includes two terms next to each other, such as “George Washington,” location information may be used to rank a document having the terms located next to each other with a higher ranking than a document that also contains the two terms, but in different locations in the document.
- In order to provide the ability to search the most current information on the Internet, search providers may continuously update the index. For example, search providers may continuously retrieve and index web pages to account for changes in documents, such as web pages. Such retrieval of web pages is known as “crawling” the web.
- An example of a
process 200 for returning web search results based on a query is illustrated inFIG. 2 . Instep 210, a query is sent from a client to a web server. Instep 220. the terms of the query are sent to one or more index servers. The index servers identify which web pages contain each of the query terms. Instep 230, the identified web pages may be retrieved from one or more servers. These web pages may be ranked in order of relevance based on a variety of factors, as noted above. Furthermore, a portion of the text, or “snippet,” from the document may be retrieved for each of the search results. For example, a portion of the text surrounding the query term in the document may be retrieved as a snippet to provide a client with a context for a search result. Instep 240, links to the documents may be provided as search results to the client, along with the snippets. - Web pages are not the only type of information stored on the Internet or accessible through search engines. Today, people store all types of information, including calendar information, documents, photos, social networking information, and much more. It would be useful to provide an index for the quick and accurate retrieval of this information using search engines. However, generating an index can be complicated for certain types of information. One area in which such complications occur is when trying to index and provide search capabilities for calendar events.
- The use of electronic calendar programs is common today, and many people rely on electronic calendars to organize their daily commitments. Electronic calendars, such as Google Calendar, allow users to store calendar events on network servers, so that they can be retrieved from anywhere and from a variety of different devices. Such calendars typically allow various types of calendar events to be saved, modified, or deleted.
- One type of calendar event is an event with a single occurrence at a particular date and time. Such an event may be stored as a data entry including attributes for information describing the event, such as a title of the event, description of the event, comments, list of participants attending the event, location of the event, date of the event, and start and end time of the event. An exemplary illustration of such a data entry is provided in
FIG. 3A . - Another type of calendar event is a recurrent event. For example, a user may wish to schedule an event that occurs repeatedly, such as a meeting that occurs on Wednesday from 2:00 p.m. to 3:00 p.m. every week. Rather than requiring the user to create an entry for every instance of the recurring meeting, many calendar applications allow the user to enter the information for the event once, and to set an attribute that causes the event to recur at the desired interval. Such an event may be stored as a data entry including attributes for all of the information normally associated with a single event occurrence, as well as attributes indicating that the event recurs, a start and end day for the recurrence, and a pattern of its recurrence. Such a data entry may be called a master data entry. The calendar application can use the recurrence pattern to compute the individual dates of the event, as needed. An exemplary illustration of such a master data entry is provided in
FIG. 3B . - As noted above, it would be useful to index calendar events in order to provide for the quick and accurate retrieval of calendar information. However, the existence of recurring calendar events makes it difficult to create such an index. Accordingly, an efficient solution is needed for indexing and providing information regarding recurrent calendar events.
- Embodiments of the present disclosure relate to computerized systems and methods for processing queries and retrieving information, such as calendar event information. In addition, embodiments of the present disclosure relate to solutions for storing and updating calendar event information in an indexing system, and for providing search and retrieval capabilities for such calendar event information. Examples of calendar events include recurrent calendar events.
- In accordance with some embodiments of the present disclosure, computerized systems and methods are provided that identify instances of a recurring event, and that generate a document with a first section including information common to instances of the recurrent event, and a second section including information unique to instances of the recurrent event. Additional embodiments of the present disclosure provide computerized systems and methods for updating the document based on changes to an instance of the recurrent event, or to the recurring event itself. Still further embodiments of the present disclosure provide computerized systems and methods of scoring and providing calendar event search results. The embodiments presented herein also may be implemented to address one or more of the disadvantages of conventional systems and methods, such as those indicated above.
- In accordance with the present disclosure, there is provided a computer-implemented method for providing searchable calendar event information. The method comprises operations performed by at least one processor. The operations include receiving first attributes for a first instance of an event, the first attributes indicating a time during which the first instance occurs and that the event recurs in time. The operations also include receiving second attributes for a second instance of the event, the second attributes indicating a time during which the second instance occurs. The operations further include identifying, from the first attributes and the second attributes, information common to both the first instance and the second instance of the event. The operations still further include generating a document with a first section including the common information and a second section comprising the time at which the first instance occurs and the time at which the second instance occurs.
- Furthermore, in accordance with the present disclosure, there is provided a computer system for providing searchable calendar event information. The computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions. The at least one processor is configured to receive first attributes for a first instance of the event, the first attributes indicating a time during which the first instance occurs and that the event recurs in time. The at least one processor is also configured to receive second attributes for a second instance of the event, the second attributes indicating a time during which the second instance occurs. The at least one processor is further configured to identify, from the first attributes and the second attributes, information common to both the first instance and the second instance of the event. The at least one processor is still further configured to generate a document with a first section including the common information and a second section comprising the time at which the first instance occurs and the time at which the second instance occurs.
- Additionally, in accordance with the present disclosure, there is provided a computer system for providing searchable calendar event information. The computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions. The at least one processor is configured to identify recurrent event information and store the recurrent event information as a single document. The document comprises a first section including information that is common to multiple instances of the recurrent event. The document also comprises a second section comprising a sub-document for each of multiple instances of the recurrent event, each of the sub-documents storing additional information for its corresponding instance of the recurring event, the additional information being information that is different from the common information.
- Moreover, in accordance with the present disclosure, there is provided a computer-implemented method for providing calendar event search results. The method comprises operations performed by at least one processor. The operations include receiving a first indication of a start time of an initial instance in time of the event, and receiving a second indication of a start time of a last instance in time of the event. The operations also include receiving a third indication of a total number of instances of the event, and calculating a time interval at which the event recurs using the first indication, second indication, and third indication. The operations further include using the time interval to approximate a start time for a next instance in time of the event, and calculating a first score for the event based on the approximated start time.
- Still further in accordance with the present disclosure, there is provided a computer system for serving calendar event search results. The computer system comprises a memory device that stores a set of instructions, and at least one processor that executes the set of instructions. The at least one processor is configured to receive a first indication of a start time of an initial instance in time of the event, and receive a second indication of a start time of a last instance in time of the event. The at least one processor is also configured to receive a third indication of a total number of instances of the event, and to calculate a time interval at which the event recurs using the first indication, second indication, and third indication. The at least one processor is further configured to use the time interval to approximate a start time for a next instance in time of the event, and to calculate a first score for the event based on the approximated start time.
- Before explaining exemplary embodiments consistent with the present disclosure in detail, it is to be understood that the disclosure is not limited in its application to the details of constructions and to the arrangements set forth in the following description or illustrated in the drawings, The disclosure is capable of embodiments in addition to those described and is capable of being practiced and carried out in various ways. Also, it is to be understood that the phraseology and terminology employed herein, as well as in the abstract, are for the purpose of description and should not be regarded as limiting.
- The accompanying drawings, which are incorporated and constitute part of the specification, illustrate certain embodiments of the disclosure, and together with the description, serve to explain the principles of the disclosure.
- As such, those skilled in the art will appreciate that the conception upon which the disclosure is based may readily be utilized as a basis for designing other structures, methods, and/or systems for carrying out the several purposes of the present disclosure. It is important, therefore, to recognize that the claims should be regarded as including such equivalent constructions insofar as they do not depart from the spirit and scope of the present disclosure.
-
FIG. 1 illustrates an exemplary inverted index for documents. -
FIG. 2 illustrates an exemplary diagram of a process for returning web search results based on a query. -
FIG. 3A illustrates an exemplary data entry for a single occurrence of a calendar event. -
FIG. 3B illustrates an exemplary data entry for a recurrent calendar event. -
FIG. 4 illustrates an exemplary method for generating a markup document including information for a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 5A illustrates exemplary event information of a first instance of a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 5B illustrates exemplary event information of a second instance of a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 5C illustrates an exemplary table including commonalities and differences between a first instance of a recurrent event and a second instance of a recurrent event, consistent with embodiments of the present disclosure, -
FIG. 6 illustrates an exemplary markup document including information for a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 7 illustrates an exemplary method for generating a search document and updating a search index based on recurrent event information, consistent with embodiments of the present disclosure. -
FIG. 8 illustrates an exemplary search document including information for a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 9 illustrates an exemplary search index including terms and document location information for a recurrent event, consistent with embodiments of he present disclosure, -
FIG. 10 illustrates an exemplary method for calculating an initial score for a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 11 illustrates an exemplary method for generating a second score for a recurrent event, consistent with embodiments of the present disclosure. -
FIG. 12A illustrates an exemplary display of search results including event information, consistent with embodiments of the present disclosure. -
FIG. 12B illustrates an exemplary display of search results including additional event information, consistent with embodiments of the present disclosure. -
FIG. 12C illustrates an additional exemplary display of search results including event information, consistent with embodiments of the present disclosure. -
FIG. 13 illustrates an exemplary computing environment for implementing embodiments and features consistent with the present disclosure. -
FIG. 14 illustrates an exemplary computer system for implementing embodiments and features consistent with the present disclosure. - Reference will now be made in detail to the present embodiments of the disclosure, certain examples of which are illustrated in the accompanying drawings.
- Embodiments of the present disclosure relate to computerized systems and methods for processing queries and retrieving information, such as calendar event information. Embodiments of the present disclosure include systems and methods for indexing calendar information, including recurrent calendar events. Such systems and methods may generate a single markup document and a single search document, each including information for instances of the recurring event. The markup document may include a first section including first information that is common among instances of the event, and a second section including second information that is unique to instances of the event. The search document may be generated by parsing the markup document, and may include information for searching for and scoring a recurrent event. The search document may include a first search document section including first search information that is common among instances of the event, and a second search document section including second search information that is unique to instances of the event. In addition, embodiments of the present disclosure encompass computer-implemented systems and methods for updating the markup document and search document based on updates to the indexed recurring events.
- Embodiments of the present disclosure also encompass computer-implemented systems and methods for searching and scoring calendar event information. In addition, embodiments of the present disclosure encompass computer-implemented systems and methods for parsing a search query for calendar event information, and for serving calendar event information regarding one or more instances of a recurrent event as a search result for the query.
- The existence of recurrent events presents some challenges to indexing calendar information. One way in which a recurrent event could be indexed would be to create a document for each instance of the recurring event, and to index each of these documents. However, creating a copy of the information for each instance of the recurring event is inefficient, because much of the information may be identical from instance to instance. Moreover, a recurrence pattern may be set in the recurrent event information, such that any number of instances may exist. Hundreds, or even thousands, of documents may need to be generated for such events. Storing all of this information unnecessarily takes up valuable storage space, and it takes longer and/or more processing power to search through all of this information. In some cases, hundreds or even millions of users may need to be supported. Creating an index by creating a document for each instance of a recurrent event is inefficient, particularly for providers of such heavily accessed search engines.
- An additional problem may occur when serving search results based on recurrent events indexed in this manner. For example, a user may enter a term in a search query that is common among multiple instances of the recurrent event. Each of the multiple instances of the recurrent event containing this term may match the query, and the user's search results may be flooded with information from the recurrent event.
- Embodiments of the present disclosure can address the challenges associated with searching for and serving calendar event information, including recurrent event information. For example, embodiments of the present disclosure provide computerized systems and methods that index recurrent calendar event information by generating a search document that includes a first search document section including first information that is common to instances of the recurring event, and a second search document section including second information that is unique to instances of the recurring event. By generating such a document, recurrent event information can be indexed without having to store and search through many copies of identical information. Embodiments of the present disclosure also provide computerized systems and methods for updating such search documents in response to updates to recurrent calendar event information. Additional embodiments of the present disclosure provide solutions for efficiently scoring and serving information from search documents. By using such documents, search providers can quickly and accurately identify relevant search results. This may provide increased customer satisfaction of a search provider's services, which may stimulate additional use of the search and/or related services.
- As used herein, an “event” refers to an event that may occur one time, or that may occur repeatedly. An “instance” of an event refers to a single occurrence of the event. Thus, as used herein, an “event” will include at least one “instance” of the event, and may include multiple “instances” of the event.
- In accordance with the embodiments described herein, a search provider may provide one or more server systems including a search engine for processing user search queries received over a network, such as the Internet. A search query may include one or more terms or phrases submitted by a user to search an available pool of information indexed by the server(s). The server(s) may receive a search query as a character string including one or more terms or phrases.
- A character string may include a sequence of characters. The sequence of characters may include one or more alphanumeric characters, accented characters, diacritics, spaces, character returns, punctuation, and/or any other character commonly entered by a user with a keyboard and/or provided in a character-encoding scheme, such as American Standard Code for Information Interchange (ASCII) or UCS Transformation Format-8-bit (UTF-8). A character string may include one or more query terms or phrases entered by a user. For example, a character string may include one or more words, phrases, numbers, dates, abbreviations, and/or acronyms.
-
FIG. 4 illustrates anexemplary method 400, consistent with embodiments of the present disclosure.Exemplary method 400 may be implemented in a computing environment (see, e.g.,FIG. 13 ) using one or more computer systems (see, e.g.,FIG. 14 ). In some embodiments,method 400 may be performed by one or more servers or computer systems associated with a search engine that is accessible to users over a network, such as the Internet. - In
step 410, event information of a first instance of an event may be received. The event information may be received in the form of a data entry, such as a record or other data structure. The event information may include one or more attributes of the first instance of the event. In one embodiment, each of the attributes may include a field describing the type of attribute and a value for the attribute. The attributes may indicate one or more of a title of the event, description of the event, summary of the event, comments regarding the event, list of participants invited to the event, scheduled attendees of the event (e.g., those participants who accepted an invitation to attend the event), location of the event, start and end time of the event, status of the event (e.g., an indication that the event is cancelled), universal resource locator (URL) link to a displayable version of the event information, visibility of the event (e.g., whether there are restrictions on who can view the event), creation time of the event, modification time of the event, creator of the event, organizer of the event, and an original start time of the event. The attributes may also include an indication that the event is recurrent in time. A data entry with attributes indicating that the event is recurrent in time may be referred to as a “master” data entry. Exemplary event information of a first instance of the event is illustrated inFIG. 5A . - If the attributes indicate that the event is recurrent in time,
method 400 may proceed to step 420, and event information of a second instance of the event may be received. For example, one or more computer systems (see, e.g.,FIG. 14 ) implementingmethod 400 may request one or more other computer systems in the computing environment (see, e.g.,FIG. 13 ) to generate and provide event information for another instance of the event (e.g., the next instance in time). The one or more other computer systems may include one or more servers providing calendar applications and/or storing user calendar event information. Alternatively, the one or more computersystems implementing method 400 may provide calendar applications and/or user calendar event information, and may receive the event information of the second instance of the event from one or more of its own servers and/or databases. - Alternatively, the event information received in
step 410, in addition to including the indication that the event is recurrent, may include an indication of a pattern (e.g., time interval or frequency) at which the event recurs in time. With this pattern, the one or more computer systems (see, e.g.,FIG. 14 ) implementingmethod 400 may calculate event information for another instance of the event. For example, the pattern describing the recurrence of the event may indicate that the event recurs on an annual basis, monthly basis, weekly basis, daily basis, or any other pattern that repeats in time. One or more computersystems implementing method 400 may use this pattern to generate another instance of the event. - For example, a pattern indicating that an event recurs on an annual basis (e.g., every one year, every two years, every five years, etc.) may indicate a time of day at which the event starts, date (e.g., day of the month) on which the event starts, month in which the event starts, and frequency with which the event repeats (e.g., every two years). Such a pattern may indicate, for example, that the event recurs starting at 1:00 p.m. on Mar. 4 every two years, starting with 1:00 p.m. on Mar. 4, 2014 (e.g., 1:00 p.m. on Mar. 4, 2014; 1:00 p.m. on Mar. 4, 2016; etc.).
- A pattern indicating that an event recurs on a monthly basis (e.g., every one month, every two months, every six months, etc.) may indicate a time of day at which the event starts, date (e.g., day of the month) on which the event starts, and frequency with which the event repeats (e.g., every six months). Such a pattern may indicate, for example, that the event recurs on the 8th day every two months, starting at 2:00 p.m. on Feb. 8, 2014 (e.g., 2:00 p.m. on Feb. 8, 2014; 2:00 p.m. on Apr. 8, 2014; etc.). Alternatively, a pattern indicating that an event recurs on a monthly basis may indicate a time of day at which the event starts, day of the week (e.g., nth day of the week, where n is a number between 1 and 7), week of the month (e.g., nth week of the month), and frequency with which the event repeats (e.g., every 2 weeks, every three weeks, etc.). Such a pattern may indicate, for example, that the event recurs every second Friday, starting at 1:00 p.m. on the second Friday of April, 2014.
- A pattern indicating that an event recurs on a weekly basis may indicate a start time at which the event starts, day of the week (e.g., nth day of the week, where n is a number between 1 and 7), and frequency with which the event repeats (e.g., every 1 week, every three weeks, etc.). Such a pattern may indicate, for example, that the event recurs on Wednesday every three weeks, starting at 1:00 p.m. on Wednesday, Jan. 15, 2014.
- A pattern indicating that an event recurs on a daily basis may indicate a start time at which the event starts, and frequency with which the event repeats (e.g., every day, every 3 days, etc.). Such a pattern may indicate, for example, that the event recurs every three days, starting at 1:00 p.m. on Wednesday, Jan. 15, 2014.
- Thus, as described above, an indication of a pattern can be used by one or more computer systems (see, e.g.,
FIG. 14 ) implementingmethod 400 to calculate event information for another instance of the event. However, it will be appreciated that an event could recur at any interval, not limited to those listed above. The one or more computersystems implementing method 400 may not be aware of and/or capable of computing additional instances based on all the patterns utilized for recurrent events. Moreover, it will be appreciated that other instances of an event may include exceptions to the pattern of recurrence, and/or modified and/or additional attributes that are not reflected in the event information of the first instance of the event. Accordingly, in some embodiments, the one or more computersystems implementing method 400 may receive the event information of the second instance of the event from one or more computer systems that provide calendar applications and/or store calendar information. In such embodiments, the event information for the second instance of the event received instep 420 may include a time and/or date that does not correspond to the pattern of recurrence, and/or may include additional and/or different attributes from those included in the event information of the first instance of the event. - In
step 420, event information of the second instance of the event may be received. The event information may be received in the form of a data entry, such as a record or other data structure. The event information may include one or more attributes of the second instance of the event. In one embodiment, each of the attributes may include a field describing the type of attribute and a value for the attribute. The attributes may indicate one or more of a title of the event, description of the event, summary of the event, comments regarding the event, list of participants invited to the event, scheduled attendees of the event, location of the event, start and end time of the event, status of the event, URL link to a displayable version of the event information, visibility of the event, creation time of the event, modification time of the event, creator of the event, organizer of the event, and original start time of the event. Exemplary event information of a second instance of an event is illustrated inFIG. 5B . - In
step 430, the attributes of the event information of the first instance (e.g., attributes of the master data entry) may be compared with the attributes of the event information of the second instance, and commonalities and differences among the attributes may be identified. For example, attribute fields and values of the event information of the first instance may be compared with attribute fields and values of the event information of the second instance. Differences in the fields between the event information of the first instance and second instance, and differences in the values between the event information of the first instance and the second instance, may be identified. Differences could include, for example, an exception to the recurrent event (e.g., a different location for a meeting in a particular week).FIG. 5C is an exemplary illustration of the commonalities and differences between the event information of the first instance illustrated inFIG. 5A and the event information of the second instance illustrated inFIG. 5B . - In
step 440, a markup document may be generated with sections for listing the commonalities and differences between the event information of the first instance and the event information of the second instance. In one embodiment, the markup document is a HyperText Markup Language (HTML) or Extensible Markup Language (XML) document. Anexemplary markup document 600 is illustrated inFIG. 6 . The markup document may include afirst section 610 listing all of the attributes that are common to the event information of the first instance and the event information of the second instance. The markup document may also include asecond section 620 listing the attributes that are different between the event information of the first instance and the event information of the second instance.Second section 620 of the markup document may be generated to include a firstsub-document portion 630 that lists all of the attributes that are unique to the event information of the first instance, and a secondsub-document portion 640 that lists all of the attributes that are unique to the event information of the second instance. - In one embodiment, if the event information of the first instance of the event received in
step 410 indicates that the event is recurrent in time, steps 420 and 430 may be repeated for every other instance of the event. That is, the attributes of the event information for every other instance of the event may be received and compared with the attributes of the event information of the first instance (e.g., the “master” instance) of the event. Differences in the fields between the event information of each instance and the event information of the first instance, and differences in the values between the event information of each instance and the event information of the first instance, may be identified. The markup document generated instep 440 may then be generated with a first section listing the attributes common between the event information of the first instance of the event and the event information of a certain number (e.g., a majority) of the other instances of the event, and a second section listing the attributes of the event information of each instance of the event that differ from the common attributes. For example, the second section may include a sub-document for each instance of the event, and each sub-document may store attributes of the event information that differ from the common attributes. In one embodiment, each of the sub-documents may be separated by <div> tags, as illustrated inFIG. 6 . -
FIG. 7 illustrates anexemplary method 700 for creating a search document based on the document generated bymethod 400. Similar tomethod 400,exemplary method 700 may be implemented in a computing environment (see, e.g.,FIG. 13 ) using one or more computer systems (see, e.g.,FIG. 14 ). Further,method 700 may be implemented on the same or different web server(s) or computer(s) associated with the other exemplary methods disclosed herein, includingmethod 400. - In
step 710, the markup document generated bymethod 400 may be parsed. For example, the markup document may be broken into terms by tokenizing the markup document based on predetermined character delimiters, such as a space or punctuation mark. There are many known methods for parsing a markup document to identify terms. It will be appreciated that one or more of these conventional parsing methods could be used instep 710. Moreover, it will be appreciated that one or more of these methods could be used to identify various characteristics of the terms, such as a term's case (upper, lower, mixed, proper), language, encoding, part of speech, position in document, sentence number, sentence position, length, line number, etc. In one embodiment, certain terms of the markup document may be identified as particular types of terms, such as, but not limited to, start times, end times, URL links, and/or keywords. - In
step 720, a search document may be created to correspond to the markup document, with sections for listing the commonalities and differences between the event information of the first instance and the event information of the second instance. An exemplary search document is illustrated inFIG. 8 . The search document may include a firstsearch document section 810 corresponding to the first section of the markup document, and a secondsearch document section 820 corresponding to the second section of the markup document. Secondsearch document section 820 may include afirst search sub-document 830 that may include attributes from the first sub-document of the markup document, such as the start time, end time, and URL link of the event information of the first instance of the event. The secondsearch document section 820 may also include asecond search sub-document 840 that may include attributes from the second sub-document of the markup document, such as the start time, end time, and URL link of the event information of the second instance of the event. In creating the search document, the search sub-documents may be identified by, for example, parsing the <div> tags that separate the sub-documents in the markup document. - Identifiers corresponding to other attributes included in the markup document may also be included in the first search document section and in each search sub-document of the second search document section. In one embodiment, these identifiers may be token numbers, such as
token numbers 850, that identify the locations in which the attributes appear in the markup document. For example, each sub-document may store a start token number and an end token number to identify the range of locations in which the attributes for the sub-document appear in the markup document. - In
step 730, a search index may be updated with the terms that were identified in parsingmarkup document 600. Anexemplary search index 900 is illustrated inFIG. 9 .Search index 900 may be an inverted index including a listing of terms from one or more markup documents. For example,search index 900 may include terms parsed from markup documents for one or more of single occurrences of events, recurrent occurrences of events, web pages, social networking information, or any other type of information that can be represented by a markup document, One of skill in the art will recognize thatsearch index 900 may also include terms parsed from any other type of document. Any term identified from parsing any of the markup documents may be stored insearch index 900 once, and may be associated with a list of markup documents in which the term was identified. Accordingly, if a term identified from parsingmarkup document 600 was not already included insearch index 900,search index 900 will be updated to include that term. Each pairing between a term and a document in the listing of documents may also identify locations in which the term appeared in the paired document, and/or a number of times in which the term appeared in the paired document. In one embodiment, the locations may be stored as token numbers that correspond to the token numbers ofsearch document 800. One of ordinary skill in the art would recognize thatsearch index 900 may store a variety of other characteristics of one or more of the listed terms, including the term's case (e.g., upper, lower), language, encoding, part of speech, sentence number, sentence position, length, line number, etc. A search engine may usesearch index 900 to identify, for example, each document in which a term appears, each location in which the term appears in that document, and/or the number of times in which the term appears in that document. -
FIG. 10 illustrates anexemplary method 1000, consistent with embodiments of the present disclosure. Similar tomethods exemplary method 1000 may be implemented in a computing environment (see, e.g.FIG. 13 ) using one or more computer systems (see, e.g.,FIG. 14 ). Further,method 1000 may be implemented on the same or different web server(s) or computer system(s) associated with the other exemplary methods disclosed herein, includingmethods - In step 1010, an indication of a start time of a first instance of a recurrent event may be received and an indication of a start time of a last instance of the recurrent event may be received. In step 1020, an indication of a total number of instances of the recurring event may be received. One or more of the indications in steps 1010 and 1020 may be received by retrieving them from a search document generated by
method 700, such assearch document 800. The indications could also be retrieved from a markup document generated bymethod 400, such asmarkup document 600. Alternatively, one or more of the indications may have been determined and stored as part ofmethod 400 ormethod 700, and could be retrieved from storage in steps 1010 and 1020. - In
step 1030, an approximation of the interval at which the event recurs may be calculated. The interval may be calculated, for example, by subtracting the start time of the first instance from the start time of the last instance and dividing the result by the total number of instances of the event. - One or more of steps 1010-1030 of
method 1000 may occur at any time after the event information of the instances is received. For example, in one embodiment, the system may identify the start time of the first instance, the start time of the last instance, and the total number of instances for the event when the event information is received in performingmethod 400, and the time interval can be calculated at that time, or at any time thereafter. The calculated time interval may then be stored in the markup document generated instep 440 ofmethod 400, and/or in the search document generated instep 720 ofmethod 700, for later retrieval bystep 1040. - In
step 1040, the calculated interval may be used to estimate a start time for a next instance of the event in the future. For example, if no time is specified in a search query, the calculated interval may be used to determine the start time for a next instance of the event immediately after the current time. If a time restriction is included in a search query, the calculated interval may be used to determine whether an instance of the event would fall within the time restriction if the instances repeated at the calculated interval. - In
step 1050, the estimated start time for the next instance in the future of the event may be used to calculate an initial score for a search result, in accordance withmethod 1100, and as further described below. -
FIG. 11 illustrates anexemplary method 1100, consistent with embodiments of the present disclosure. Similar tomethods exemplary method 1100 may be implemented in a computing environment (see, e.g.FIG. 13 ) using one or more computer systems (see, e.g.,FIG. 14 ). Further,method 1100 may be implemented on the same or different web server(s) or computer system(s) associated with the other exemplary methods disclosed herein, includingmethods - In
step 1110, a search query is received, The search query may include a character string entered by a user to search for information, and the character string may include one or more search terms. Instep 1120, the character string may be parsed to identify the terms of the query. For example, the character string may be broken into terms by tokenizing the character string based on predetermined character delimiters, such as a space. There are many known methods and techniques for parsing a character string of a search query to identify search terms, such as natural language processing techniques. It will be appreciated that that one or more of these methods could be used instep 1120. Moreover, it will be appreciated that one or more of these methods could be used to identify various characteristics of the terms, such as a term's case (upper, lower, mixed, proper), language, encoding, part of speech, position in the character string, length, etc. In one embodiment, certain terms of the character string may be identified as particular types of terms, such as keywords or time-based terms. - Terms of the search query may be compared with terms stored in a search index, such as
search index 900. If one of the terms matches a term in the search index, the documents paired with that term may be returned, along with any other information that is associated with the pairing (e.g., locations of the term in the paired document, number of times the term appears in the document, etc.). - If one of the returned documents is a document for a recurrent event, such as
markup document 600 orsearch document 800, then instep 1130 an initial score may be calculated for the recurrent event. The initial score may be calculated usingmethod 1000, for example. Alternatively, an initial score may be generated bymethod 1000, and may be used in combination with one or more scores generated in another manner to determine the initial score ofstep 1130. - In
step 1140, a determination can be made as to whether the recurrent event is a candidate search result based on the initial score generated instep 1130. This determination could be made, for example, by ranking the initial score against initial scores generated for other documents, and determining whether the initial score of the document falls within a number of documents that are ranked the highest. Alternatively, the determination could be made by identifying whether the initial score is higher than a predetermined threshold. There are many known methods and techniques for scoring search results. It will be appreciated that these known methods may be used to rank the initial scores of the documents to determine which of the documents are candidate search results. If it is determined that the recurrent event is not a candidate search result, the method may end. If it is determined that the recurrent event is a candidate search result, the method may proceed to step 1150. - In
step 1150, a search document corresponding to the recurrent event, such assearch document 800, may be retrieved. Actual start times or end times of instances of the recurrent event may be retrieved from the search document. For example, if a search query included a time restriction (e.g., meetings between Tuesday and Thursday), the search document can be analyzed to determine whether any instances of the recurrent event fall within the time restriction. - In
step 1160, a score for an instance of the recurrent event can be generated based, at least in part, on the actual start and/or end times of the instance. For example, the system may analyze the search sub-documents of the search document to identify the actual start and/or end times of instances of the recurrent event, and may score the event instances based on the actual start and/or end times. For example, calendar event instances that occur in the near future may be considered to be more relevant search results. Accordingly, they may be given higher scores. If a search query includes a time restriction, calendar event instances with start and/or end times that fall within the time restriction may be scored higher than those with start and/or end times that do not. - The score generated in
step 1160 may be one of many scores that are combined to determine a total score for a potential search result for the query. For example, a total score may be based on a variety of factors other than time, such as the location the term appears in a document, the frequency with which the term appears in the document, whether terms appearing next to each other in the query also appear next to each other in the document, etc. There are a variety of known natural language processing techniques that can be used to better identify a user's intent with a search query, and to evaluate and score documents as potential search results based on that intent. It will be appreciated that any of these techniques could be used for this purpose, as part ofstep 1160. - Three different example searches are described below to further explain how potential search results for various search queries may be scored based on the disclosure herein. In a first example search query, the query may include a keyword. In
step 1110, the query may be received. Instep 1120, the query may be parsed to identify the keyword. Instep 1130, a search index, such assearch index 900, may be referenced to identify the documents that the keyword appears in and the locations the keyword appears in each document. If one of the returned documents corresponds to a recurrent event,method 1000 may be used to estimate a time interval at which the event recurs, to generate an initial score for the event. Instep 1140, this initial score may be used to rank this document as a candidate search result against other documents that matched the keyword. If it is determined that the recurrent event is a candidate search result, the search document corresponding to the recurrent event may be retrieved, along with the actual start times and end times of instances of the event. The actual start times and end times may be used to calculate a second score for the recurrent event. If the system determines that the event should be returned as a search result, the system may provide the event information for the instance considered to be the most relevant (e.g., the instance with a start time that is closest to the current time, or the instance whose sub-document contains the query keyword) as the search result. - In a second example search query, the query may include a keyword and a time restriction. For example, a user may search for “my project meeting tomorrow.” In this case, the system can parse the query to identify the terms “my,” “project,” “meeting,” and “tomorrow,” The system may intelligently determine that the terms “my” and “meeting” refer to a calendar event for that particular user, and that the term “project” is a keyword for particular calendar event. The system may then use a search index, such as
search index 900, to identify documents corresponding to “project” calendar events for the user. The system may also intelligently determine that the term “tomorrow” corresponds to events that fall within a range between a particular start time and end time. For documents that are returned and that correspond to recurrent events, the system may usemethod 1000 to estimate a time interval at which the event recurs. The system may use the estimated time interval to determine whether the event is likely to recur within the identified time range, and to calculate an initial score for the event based on this determination.Method 1100 may then determine whether the event is a candidate event. If it is,method 1100 may retrieve the search document for the event, and determine the actual start and end times of instances of the recurrent event to determine whether instances of the event actually fall within the determined time range. The system may associate scores with the event based on whether instances of the event fall within the range, and based on where an instance falls within the range. For example, if multiple returned events fall within the range, an event instance falling earlier in time in the range (e.g., a project meeting in the morning tomorrow) may be considered to be more relevant, and may be given higher scores than a project meeting event instance falling later in the day tomorrow. Alternatively, upon analyzing the search document, the system may determine that the sub-documents containing the keyword “project” do not fall within the time frame corresponding to “tomorrow.” In this case, the system may determine not to include any of the instances from the recurring event document in the search results. - In a third example search query, the query may include a keyword that matches a term in the common portion of a markup document for a recurrent event. In
step 1110, the query may be received. Instep 1120, the query may be parsed to identify the keyword. Instep 1130, a search index, such assearch index 900, may be referenced to identify the document that the keyword appears in and the location the keyword appears within the document (in this case, within the first section of the document that includes the information common to multiple instances of the event).Method 1000 may be used to estimate a time interval at which the event recurs, and to generate an initial score for the event. Instep 1140, the score may be used to rank this document as a candidate search result against other documents that matched the keyword. If it is determined that the recurrent event is a candidate search result, the search document corresponding to the recurrent event may be retrieved, along with the actual start and end times of instances of the event. The actual start and end times may be used to calculate a second score for the recurrent event. If, based on the second score, the system decides to return the document for the recurrent event as a search result, the instance of the recurrent event with the start time closest to the current time may be deemed most relevant, and could be provided to the user as a search result. - In one embodiment, if a recurrent event is to be returned as a search result, only the event information for the instance of the recurrent event receiving the highest score may be provided as a search result (e.g., the instance appearing closest to the current time, or within a time restriction of the search query). For example, if the instance corresponding to
second search sub-document 840 receives the highest score, the user may be provided with the start time of the instance (e.g., 12:00 p.m. on Jan. 22, 2014), the end time of the instance (e.g., 1:00 p.m. on Jan. 22, 2014), and the URL link (e.g., http://www . . . 2.com) of the instance. - Additionally, the user may be provided with a “snippet” of text as part of the search result to provide a context for the instance of the event. For example, the system may identify text for the instance in a corresponding markup document, such as
markup document 600, based on the start and endtoken numbers 850. The system may then, for example, select a text passage including a certain number of terms from either side of the term that matched the search query. -
FIGS. 12A-12C illustrate examples of a web page that displays calendar event search results, consistent with the embodiments disclosed herein. InFIG. 12A , a user may search for “my project meetings.” In response, the system may provide search results including snippets for upcoming project meetings. In one embodiment, the search results may be ranked and sorted, so that the results that are determined to be most relevant are displayed at the top of the list of search results. In this case, the system may determine the first search result to be more relevant, because it occurs closer in time to the current time. In one embodiment, the user may click any of the search results to retrieve more information for the calendar event, such as the information illustrated inFIG. 12B . -
FIG. 12B is an exemplary illustration of a display of calendar search results after the user clicks on a particular search result (in this case, the first search result inFIG. 12A ). In this example, more information may be displayed for the calendar event search result that was clicked on, including the title, description, date and time, and invited guests. The information that may be displayed is not limited to the information shown inFIG. 12B . Indeed, any relevant calendar event information may be displayed. The information may also include a link to view the full information of the event in a calendar application. In one embodiment, the calendar application may be the calendar application in which the user initially scheduled the calendar event, though the disclosure is not so limited. The exemplary display illustrated inFIG. 12B also displays snippets for one or more additional search results that were not clicked on by the user. - In
FIG. 12C , a user may search for “my meetings tomorrow.” In response, the system may provide search results including snippets for calendar events that are on the user's calendar for tomorrow. In one embodiment, the search results may be ranked and sorted, so that the results that are determined to be most relevant are displayed at the top of the list of search results. In this case, the search query may only include “my meetings tomorrow.” Accordingly, the system may determine that search results occurring earlier in the day are more relevant than those occurring later in the day, because they appear closer in time to the current time. In one embodiment, the user may click any of the search results to retrieve more information for the calendar event, such as the information illustrated inFIG. 12B . - Over time, information may be added, deleted, or modified for a recurring event, or for an instance of a recurrent event, in a calendar application. For example, a user may change a description, add a description to, or delete a description from, a recurrent event. A user could also delete a single instance of an event. For example, if a typical weekly meeting falls on a holiday, the user may wish to delete that instance of the event if, for example, the office will be closed that day. A user could also modify information for a single instance of an event. For example, if the weekly meeting for a particular week will be held in a different location. A user may also delete or change all future occurrences of the recurrent event. In addition, many other changes not listed above could be made by a user to a recurring event, or to an instance of a recurring event.
- When a change is made to a recurring event, or an instance of a recurring event, a computer system providing the calendar application, or storing the calendar information, may notify the one or more computer systems (see, e.g.,
FIG. 14 ) that implementmethod 400. In response, the one or more computer systems that implementmethod 400 may recreate the markup document and searchdocument using methods documents using methods - In an alternative embodiment, the one or more computer systems that implement
method 400 may not be notified of the change, but may implementmethods -
FIG. 13 is a diagram illustrating anexemplary computing environment 1300 for implementing embodiments consistent with the present disclosure, including the above-described exemplary methods and features. Incomputing environment 1300, a service provider or other entity may provide one or more computer system(s) 1320 that enable query and information retrieval services. By way of example, computer system(s) 1320 may include one or more servers, such as web servers, or other computing platforms for hosting web pages, indexing documents, and/or scoring documents. Computer system(s) 1320 may also host software applications that generate markup documents, search documents, and/or search indexes. Computer system(s) 1320 may further host software applications that handle and process user queries, score search results, rank search results, and/or provide search results to client devices, such as client(s) 1310. Computer system(s) 1320 may also include one or more back-end servers for carrying out one or more aspects of the present disclosure. In one embodiment, computer system(s) 1320 may be implemented usingcomputer system 1400 ofFIG. 14 . - One or
more networks 1330 may connect computer system(s) 1320 with one or more client device(s) 1310. Network(s) 1330 may provide for the exchange of information, such as search queries and results, between client device(s) 1310 and computer system(s) 1320. Network(s) 1330 may include one or more types of networks interconnecting computer system(s) 1320 with client device(s) 1310. For example, oneclient device 1310 may communicate with one or ore computer system(s) 1320 over a coaxial cable network, while adifferent client device 1310 may communicate with one or more computer system(s) 1320 over a cellular network, Networks) 1330 may include one or more wide area networks (WANs), metropolitan area networks (MANS), local area networks (LANs), or any combination of these networks. Network(s) 1330 may include a combination of a variety of different network types, including Internet, Ethernet, twisted-pair, coaxial cable, fiber optic, cellular, satellite, IEEE 802.11, terrestrial, and/or other types of network connections. In some embodiments,network 1330 comprises the Internet. - Client device(s) 1310 may include a variety of different types of computing devices capable of communicating with computer system(s) 1320 over network(s) 1330. These computing devices may include personal computers, laptops, personal digital assistants (PDAs), personal organizers, telephones, mobile phones, smart-phones, televisions, set-top boxes, tablet computers, servers, and/or other types of computing devices. A user may use more than one type of client device to communicate with computer system(s) 1320.
-
FIG. 14 is a diagram illustrating an exemplary computer system(s) 1400 that may be used for implementing embodiments consistent with the present disclosure, including the exemplary systems and methods described herein. Computer system(s) 1400 may include one ormore computers 1410, which may be servers, personal computers, and/or other types of computing devices. Eachcomputer 1410 may include one ormore processors 1430 that may be any suitable type of processor.Processor 1430 may be coupled to anetwork interface 1420 for receiving and/or transmitting data and/or commands to/from other devices over a variety of networks, such as Internet, Ethernet, twisted-pair, coaxial cable, fiber optic, cellular, satellite, IEEE 802.11, terrestrial, or other wired or wireless networks. -
Processor 1430 may be coupled to one or more memory device(s) 1440. Eachmemory device 1440 may be configured to store instructions that, when executed by one ormore processors 1430, carry out the methods and techniques consistent with the present disclosure, including the exemplary methods and techniques described herein.Memory device 1440 may also store an operating system, software applications, and/or parameters. Data stored onmemory device 1440 may be stored in a single dedicated memory, or over a plurality of memory devices.Memory device 1440 may include any type of memory, physical, non-transient, volatile, or non-volatile, including, but not limited to, random access memory (RAM), 1450, read-only memory (ROM) 1460, magnetic strip storage, semiconductor storage, optical disc storage, and/or magneto-optical disc storage. -
Memory device 1440 may also include one ormore databases 1470 for storing search information, such as search documents, indexes, and/or any other information or data stored as a result of performing the disclosed methods, or required to perform the disclosed methods. For example, database(s) 1470 may store documents, such as markup documents, search documents, and/or search indexes, that include event information, as disclosed herein. One of skill would recognize that database(s) 1470 could also store additional information that could be provided as search results, such as web page information, electronic mail information, social networking information, or any other type of information.Processor 1430 may also be coupled to a computer providing a user interface for allowing input of information and commands toprocessor 1430 and/or allowing output of information and commands in a human-readable form. - Different aspects of the present disclosure could be performed by different computer(s) 1410, or different computer system(s) 1400. For example, a
computer system 1400 implementingmethod 400 may receive calendar information from one or more different computer systems over a network. Any combination ofmethods same computer system 1400. Alternatively, each ofmethods - As disclosed herein, recurrent event information may be received, and a single markup document may be created including a first section containing information common to instances of the recurrent event, and a second section containing information that is unique to instances of the recurrent event. The second section may contain a plurality of sub-documents. Each sub-document may include the unique information of an instance of the recurrent event. The markup document may be parsed and a search document may be created with a first search document section corresponding to the first section of the markup document, and a second search document section corresponding to the second section of the markup document, and including search sub-documents corresponding to the sub-documents of the markup document. Terms parsed from the markup document may also be used to update a search index. When changes are made to a recurrent event, or to an instance of the recurrent event, the markup document and search document may be recreated, and the search index may be updated.
- As also disclosed herein, search queries may be received and parsed to identify terms of the search queries. Initial scores may be generated for search results corresponding to recurrent events by estimating a time corresponding to an instance of the recurrent event. If, based on the initial score, the recurrent event is determined to be a candidate search result, the search document corresponding to the recurrent event can be retrieved, and the actual start times and end times of instances of the recurrent event can be identified. The actual start and end times may be used to generate a second score for the recurrent event, and an instance of the recurrent event may be ranked and/or provided as a search result based on the second score.
- The disclosed systems and methods provide a useful way of indexing recurrent event information, so that instances of a recurrent event can be quickly and accurately searched. Creating markup documents and search documents using the systems and methods disclosed herein allows the indexing of recurrent event information in a manner that may be integrated with other indexed information. Thus, the systems and methods provided herein may be used to provide a search engine that integrates a variety of different types of searchable information. For example, a user's search query may return calendar event search results, including recurrent event information, along with search results including web pages, social networking information, electronic mail information, or any other type of indexed information.
- The many features and advantages of the disclosure are apparent from the detailed specification, and thus, it is intended that the appended claims cover all systems and methods, which fall within the true spirit and scope of the disclosure. As used herein, the indefinite articles “a” and “an” mean “one or more” in open-ended claims containing the transitional phrase “comprising,” “including,” and/or “having.” Further, since numerous modifications and variations will readily occur to those skilled in the art, it is not desired to limit the disclosure to the exact construction and operation illustrated and described, and accordingly, all suitable modifications and equivalents may be resorted to, falling within the scope of the disclosure.
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/154,889 US9760600B2 (en) | 2014-01-14 | 2014-01-14 | Serving recurrent calendar events |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/154,889 US9760600B2 (en) | 2014-01-14 | 2014-01-14 | Serving recurrent calendar events |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150199402A1 true US20150199402A1 (en) | 2015-07-16 |
US9760600B2 US9760600B2 (en) | 2017-09-12 |
Family
ID=53521567
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/154,889 Expired - Fee Related US9760600B2 (en) | 2014-01-14 | 2014-01-14 | Serving recurrent calendar events |
Country Status (1)
Country | Link |
---|---|
US (1) | US9760600B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160188599A1 (en) * | 2014-12-31 | 2016-06-30 | Yahoo! Inc. | Electronic message search system and method |
US20180218332A1 (en) * | 2017-01-31 | 2018-08-02 | Microsoft Technology Licensing, Llc | Categorized time designation on calendars |
US20180357305A1 (en) * | 2017-06-08 | 2018-12-13 | Microsoft Technology Licensing, Llc | Calendar user interface search and interactivity features |
US20190018827A1 (en) * | 2017-07-12 | 2019-01-17 | Google Inc. | Electronic content insertion systems and methods |
US10387568B1 (en) * | 2016-09-19 | 2019-08-20 | Amazon Technologies, Inc. | Extracting keywords from a document |
US20190332994A1 (en) * | 2015-10-03 | 2019-10-31 | WeWork Companies Inc. | Generating insights about meetings in an organization |
US10510026B1 (en) | 2015-10-03 | 2019-12-17 | WeWork Companies Inc. | Electronic calendaring system and method determining redundant meeting invitees based on a meeting composition score |
US20200042949A1 (en) * | 2018-08-03 | 2020-02-06 | Microsoft Technology Licensing, Llc | Automated calendar event association via implicit tagging |
US20210103606A1 (en) * | 2018-03-26 | 2021-04-08 | Rovi Guides, Inc. | Methods and systems for performing context maintenance on search queries in a conversational search environment |
US11461909B2 (en) * | 2018-06-13 | 2022-10-04 | Fujitsu Limited | Method, medium, and apparatus for specifying object included in image utilizing inverted index |
Citations (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030041076A1 (en) * | 2001-03-14 | 2003-02-27 | Lucovsky Mark H. | Schema-based services for identity-based access to calendar data |
US6621767B1 (en) * | 1999-07-14 | 2003-09-16 | Guide Technology, Inc. | Time interval analyzer having real time counter |
US20050192822A1 (en) * | 2003-03-25 | 2005-09-01 | Hartenstein Mark A. | Systems and methods for managing affiliations |
US20070220063A1 (en) * | 2005-12-30 | 2007-09-20 | O'farrell William J | Event data translation system |
US20080052203A1 (en) * | 2006-08-25 | 2008-02-28 | David Beyer | Design and management of an online environment that serves hierarchical community networks |
US20090048891A1 (en) * | 2007-08-13 | 2009-02-19 | Accenture S.P.A. | Message sequence management of enterprise based correlated events |
US20090248711A1 (en) * | 2008-03-28 | 2009-10-01 | Ronald Martinez | System and method for optimizing the storage of data |
US20100293029A1 (en) * | 2009-05-13 | 2010-11-18 | Hugh Olliphant | System and Method for Automatically Scheduling Appointments |
US7958003B2 (en) * | 2004-12-20 | 2011-06-07 | Microsoft Corporation | Method and system for work scheduling on calendars to establish day state information |
US8041725B2 (en) * | 2008-06-25 | 2011-10-18 | International Business Machines Corporation | Eliminating duplicate and invalid calendar items from end user calendars using a unique entry identifier (UEID) |
US20110289422A1 (en) * | 2010-05-21 | 2011-11-24 | Live Matrix, Inc. | Interactive calendar of scheduled web-based events and temporal indices of the web that associate index elements with metadata |
US20120023454A1 (en) * | 2010-07-20 | 2012-01-26 | Sap Ag | Schedule management using linked events |
US20130197957A1 (en) * | 2010-10-19 | 2013-08-01 | ClearCare, Inc. | System and apparatus for generating work schedules |
US20140095990A1 (en) * | 2012-09-28 | 2014-04-03 | Apple Inc. | Generating document content from application data |
US8751492B1 (en) * | 2008-01-17 | 2014-06-10 | Amdocs Software Systems Limited | System, method, and computer program product for selecting an event category based on a category score for use in providing content |
US20140280231A1 (en) * | 2013-03-14 | 2014-09-18 | Microsoft Corporation | Dynamically Expiring Crowd-Sourced Content |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7016909B2 (en) | 2002-06-04 | 2006-03-21 | Microsoft Corporation | Method and system for expansion of recurring calendar events |
US8060567B2 (en) | 2006-04-12 | 2011-11-15 | Google Inc. | Method, system, graphical user interface, and data structure for creating electronic calendar entries from email messages |
US8175875B1 (en) | 2006-05-19 | 2012-05-08 | Google Inc. | Efficient indexing of documents with similar content |
US20120136572A1 (en) | 2010-06-17 | 2012-05-31 | Norton Kenneth S | Distance and Location-Aware Reminders in a Calendar System |
-
2014
- 2014-01-14 US US14/154,889 patent/US9760600B2/en not_active Expired - Fee Related
Patent Citations (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6621767B1 (en) * | 1999-07-14 | 2003-09-16 | Guide Technology, Inc. | Time interval analyzer having real time counter |
US20030041076A1 (en) * | 2001-03-14 | 2003-02-27 | Lucovsky Mark H. | Schema-based services for identity-based access to calendar data |
US20050192822A1 (en) * | 2003-03-25 | 2005-09-01 | Hartenstein Mark A. | Systems and methods for managing affiliations |
US7958003B2 (en) * | 2004-12-20 | 2011-06-07 | Microsoft Corporation | Method and system for work scheduling on calendars to establish day state information |
US20070220063A1 (en) * | 2005-12-30 | 2007-09-20 | O'farrell William J | Event data translation system |
US20080052203A1 (en) * | 2006-08-25 | 2008-02-28 | David Beyer | Design and management of an online environment that serves hierarchical community networks |
US20090048891A1 (en) * | 2007-08-13 | 2009-02-19 | Accenture S.P.A. | Message sequence management of enterprise based correlated events |
US8751492B1 (en) * | 2008-01-17 | 2014-06-10 | Amdocs Software Systems Limited | System, method, and computer program product for selecting an event category based on a category score for use in providing content |
US20090248711A1 (en) * | 2008-03-28 | 2009-10-01 | Ronald Martinez | System and method for optimizing the storage of data |
US8041725B2 (en) * | 2008-06-25 | 2011-10-18 | International Business Machines Corporation | Eliminating duplicate and invalid calendar items from end user calendars using a unique entry identifier (UEID) |
US20100293029A1 (en) * | 2009-05-13 | 2010-11-18 | Hugh Olliphant | System and Method for Automatically Scheduling Appointments |
US20110289422A1 (en) * | 2010-05-21 | 2011-11-24 | Live Matrix, Inc. | Interactive calendar of scheduled web-based events and temporal indices of the web that associate index elements with metadata |
US20120023454A1 (en) * | 2010-07-20 | 2012-01-26 | Sap Ag | Schedule management using linked events |
US20130197957A1 (en) * | 2010-10-19 | 2013-08-01 | ClearCare, Inc. | System and apparatus for generating work schedules |
US20140095990A1 (en) * | 2012-09-28 | 2014-04-03 | Apple Inc. | Generating document content from application data |
US20140280231A1 (en) * | 2013-03-14 | 2014-09-18 | Microsoft Corporation | Dynamically Expiring Crowd-Sourced Content |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9838348B2 (en) * | 2014-12-31 | 2017-12-05 | Yahoo Holdings, Inc. | Electronic message search system and method |
US20160188599A1 (en) * | 2014-12-31 | 2016-06-30 | Yahoo! Inc. | Electronic message search system and method |
US20190332994A1 (en) * | 2015-10-03 | 2019-10-31 | WeWork Companies Inc. | Generating insights about meetings in an organization |
US10510026B1 (en) | 2015-10-03 | 2019-12-17 | WeWork Companies Inc. | Electronic calendaring system and method determining redundant meeting invitees based on a meeting composition score |
US10796094B1 (en) | 2016-09-19 | 2020-10-06 | Amazon Technologies, Inc. | Extracting keywords from a document |
US10387568B1 (en) * | 2016-09-19 | 2019-08-20 | Amazon Technologies, Inc. | Extracting keywords from a document |
US20180218332A1 (en) * | 2017-01-31 | 2018-08-02 | Microsoft Technology Licensing, Llc | Categorized time designation on calendars |
US11599857B2 (en) * | 2017-01-31 | 2023-03-07 | Microsoft Technology Licensing, Llc | Categorized time designation on calendars |
US20180357305A1 (en) * | 2017-06-08 | 2018-12-13 | Microsoft Technology Licensing, Llc | Calendar user interface search and interactivity features |
US10650033B2 (en) * | 2017-06-08 | 2020-05-12 | Microsoft Technology Licensing, Llc | Calendar user interface search and interactivity features |
CN111033493A (en) * | 2017-07-12 | 2020-04-17 | 谷歌有限责任公司 | Electronic content insertion system and method |
US20190018827A1 (en) * | 2017-07-12 | 2019-01-17 | Google Inc. | Electronic content insertion systems and methods |
US20210103606A1 (en) * | 2018-03-26 | 2021-04-08 | Rovi Guides, Inc. | Methods and systems for performing context maintenance on search queries in a conversational search environment |
US11461909B2 (en) * | 2018-06-13 | 2022-10-04 | Fujitsu Limited | Method, medium, and apparatus for specifying object included in image utilizing inverted index |
US20200042949A1 (en) * | 2018-08-03 | 2020-02-06 | Microsoft Technology Licensing, Llc | Automated calendar event association via implicit tagging |
Also Published As
Publication number | Publication date |
---|---|
US9760600B2 (en) | 2017-09-12 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9760600B2 (en) | Serving recurrent calendar events | |
US10558712B2 (en) | Enhanced online user-interaction tracking and document rendition | |
US11023513B2 (en) | Method and apparatus for searching using an active ontology | |
Campos et al. | Survey of temporal information retrieval and related applications | |
US8166013B2 (en) | Method and system for crawling, mapping and extracting information associated with a business using heuristic and semantic analysis | |
US8290924B2 (en) | Providing answer to keyword based query from natural owner of information | |
US8661031B2 (en) | Method and apparatus for determining the significance and relevance of a web page, or a portion thereof | |
US11354367B2 (en) | Search engine | |
US7783630B1 (en) | Tuning of relevancy ranking for federated search | |
US8099406B2 (en) | Method for human editing of information in search results | |
US20170300535A1 (en) | Systems and methods for suggesting content to a writer based on contents of a document | |
JP6538277B2 (en) | Identify query patterns and related aggregate statistics among search queries | |
US7765209B1 (en) | Indexing and retrieval of blogs | |
US11120057B1 (en) | Metadata indexing | |
EP2503477A1 (en) | A system and method for contextual resume search and retrieval based on information derived from the resume repository | |
US20160299951A1 (en) | Processing a search query and retrieving targeted records from a networked database system | |
US20120179709A1 (en) | Apparatus, method and program product for searching document | |
US11216735B2 (en) | Method and system for providing synthetic answers to a personal question | |
Tian et al. | Geek talents: Who are the top experts on github and stack overflow? | |
US20140095465A1 (en) | Method and apparatus for determining rank of web pages based upon past content portion selections | |
US20140149378A1 (en) | Method and apparatus for determining rank of web pages based upon past content portion selections | |
CN100496091C (en) | System for making global search in wired TV one-way set-top box | |
US8954415B2 (en) | Web discovery method for assessing ingredients for regulatory compliance | |
JP2008033386A (en) | Information processing provision system | |
Egilmez | Unlocking Insights from Multilingual Parliamentary Data: A Search Engine for In-depth Analysis and Research |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:AGRAWAL, TULIKA;DUKIELSKA, MAGDALENA NATALIA;GHEORGHITA, STEFAN VALENTIN;REEL/FRAME:032135/0661Effective date: 20140129 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20210912 |