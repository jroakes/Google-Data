Gebiet der Erfindung Field of the invention
Das Gebiet der Erfindung betrifft im Allgemeinen die Bildverarbeitung und insbesondere eine Zeilenpuffereinheit für einen Bildprozessor. The field of the invention relates generally to image processing, and more particularly to a line buffer unit for an image processor.
Allgemeiner Stand der Technik General state of the art
Die Bildverarbeitung beinhaltet in der Regel die Verarbeitung von Bildpunktwerten, die in einer Matrix angeordnet sind. Hierbei erfasst eine räumlich gegliederte zweidimensionale Matrix die zweidimensionale Beschaffenheit der Bilder (zusätzliche Dimensionen können unter anderem Zeit (z. B. eine Sequenz von zweidimensionalen Bildern) und Datentyp (z. B. Farben) einschließen). In einem typischen Szenario werden die angeordneten Bildpunktwerte von einer Kamera bereitgestellt, die ein Standbild oder eine Folge von Frames erzeugt hat, um Bewegungsbilder zu erfassen. Herkömmliche Bildprozessoren fallen in der Regel unter eines von zwei Extremen. The image processing usually involves the processing of pixel values arranged in a matrix. Here, a spatially structured two-dimensional array captures the two-dimensional nature of the images (additional dimensions may include, but are not limited to, time (eg, a sequence of two-dimensional images) and data type (eg, colors)). In a typical scenario, the ordered pixel values are provided by a camera that has generated a still image or sequence of frames to capture motion images. Conventional image processors typically fall under one of two extremes.
Ein erstes Extrem führt Bildverarbeitungsschritte als Softwareprogramme aus, die auf einem Universalprozessor oder einem universell verwendbaren Prozessor (z. B. einem Universalprozessor mit Vektorbefehlserweiterungen) ausgeführt werden. Obwohl das erste Extrem in der Regel eine vielseitig einsetzbare Anwendungssoftware-Entwicklungsplattform bereitstellt, resultiert dessen Verwendung feinerer Datenstrukturen kombiniert mit den zugehörigen Verwaltungsdaten (z. B. Befehlsabruf und -dekodierung, Handhabung von chipinternen und chipexternen Daten, spekulative Ausführung) letztendlich in einem Verbrauch größerer Energiemengen pro Dateneinheit während der Ausführung des Programmcodes. A first extreme executes image processing steps as software programs executing on a general purpose processor or a general purpose processor (eg, a general purpose processor with vector instruction extensions). Although the first extreme typically provides a versatile application software development platform, its use of finer data structures combined with associated management data (e.g., instruction fetching and decoding, on-chip and off-chip data handling, speculative execution) ultimately results in greater consumption Amounts of energy per unit of data during execution of the program code.
Ein zweites, entgegengesetztes Extrem wendet stationäre, fest verdrahtete Schaltungen auf viel größere Datenblöcke an. Die Verwendung von größeren (im Gegensatz zu feineren) Datenblöcken, die direkt auf benutzerdefinierte Schaltungen angewendet werden, verringert den Energieverbrauch pro Dateneinheit erheblich. Jedoch führt die Verwendung von benutzerdefinierten stationären Funktionsschaltungen im Allgemeinen zu einer begrenzten Menge von Arbeitsschritten, die der Prozessor ausführen kann. Dementsprechend fehlt im zweiten Extrem die vielseitige Programmierumgebung (die mit dem ersten Extrem assoziiert ist). A second, opposite extreme applies stationary hardwired circuitry to much larger data blocks. Using larger (as opposed to finer) blocks of data directly applied to custom circuits significantly reduces power consumption per unit of data. However, the use of custom stationary function circuits generally results in a limited amount of work that the processor can perform. Accordingly, the second extreme lacks the versatile programming environment (associated with the first extreme).
Eine Technologieplattform, die sowohl vielseitige Anwendungssoftware-Entwicklungsmöglichkeiten als auch eine verbesserte Energieeffizienz pro Dateneinheit bietet, bleibt eine wünschenswerte und dennoch fehlende Lösung. A technology platform that offers both versatile application software development opportunities and improved energy per unit of data remains a desirable yet missing solution.
Kurzdarstellung Summary
Es wird eine Vorrichtung beschrieben, die eine Zeilenpuffereinheit beinhaltet, die aus einer Vielzahl von Zeilenpuffer-Schnittstelleneinheiten besteht. Jede Zeilenpuffer-Schnittstelleneinheit dient zur Verarbeitung von einer oder mehreren Anforderungen durch einen Erzeuger, um eine entsprechende Zeilengruppe in einem Speicher zu speichern, und zur Verarbeitung von einer oder mehreren Anforderungen von einem entsprechenden Abnehmer, um die entsprechenden Zeilengruppe aus dem Speicher abzurufen und bereitzustellen. Die Zeilenpuffereinheit verfügt über einen programmierbaren Speicherplatz, dessen Informationen eine Zeilengruppengröße bestimmen, sodass verschiedene Zeilengruppengrößen für verschiedene Bildgrößen im Speicher gespeichert werden können. A device is described which includes a line buffer unit consisting of a plurality of line buffer interface units. Each line buffer interface unit is for processing one or more requests by a producer to store a corresponding stanza in a memory and for processing one or more requests from a corresponding customer to retrieve and provide the corresponding stanza from the memory. The line buffer unit has a programmable memory space whose information determines a stanza size so that different stanza sizes for different image sizes can be stored in memory.
Figurenverzeichnis Figure directory
Die folgende Beschreibung und begleitenden Zeichnungen dienen dazu, Ausführungsformen der Erfindung zu veranschaulichen. In den Zeichnungen: The following description and accompanying drawings serve to illustrate embodiments of the invention. In the drawings:
1 zeigt verschiedene Komponenten einer Technologieplattform; 1 shows various components of a technology platform;
2a zeigt eine Ausführungsform einer Anwendungssoftware, die mit Kerneln aufgebaut ist; 2a shows an embodiment of an application software built with kernels;
2b zeigt eine Ausführungsform der Struktur eines Kernels; 2 B shows an embodiment of the structure of a kernel;
3 zeigt eine Ausführungsform des Betriebs eines Kernels; 3 shows an embodiment of the operation of a kernel;
4 zeigt eine Ausführungsform einer Bildprozessor-Hardwarearchitektur; 4 shows an embodiment of an image processor hardware architecture;
5a, 5b, 5c, 5d und 5e zeigen das Parsen von Bilddaten in eine Zeilengruppe, das Parsen einer Zeilengruppe in ein Blatt und die an einem Blatt mit sich überschneidenden Schablonen durchgeführte Operation; 5a . 5b . 5c . 5d and 5e show the parsing of image data into a stanza, the parsing of a stanza into a leaf and the operation performed on a leaf with overlapping stencils;
6 zeigt eine Ausführungsform eines Schablonenprozessors; 6 shows an embodiment of a template processor;
7 zeigt eine Ausführungsform der Konfiguration und Programmierung eines Bildprozessors; 7 shows an embodiment of the configuration and programming of an image processor;
8 zeigt ein aus Zeilengruppen bestehendes Frame; 8th shows a frame consisting of stanzas;
9a, 9b und 9c zeigen Konstruktions- und Ausführungsformen einer Zeilenpuffereinheit; 9a . 9b and 9c show construction and embodiments of a row buffer unit;
9d und 9e zeigen Ausführungsformen eines programmierbaren Registerbereichs eines Bildprozessors; 9d and 9e show embodiments of a programmable register area of an image processor;
10a und 10b zeigen eine virtuell große Betriebsart; 10a and 10b show a virtually large mode of operation;
11a und 11b zeigen Ausführungsformen einer Zeilenpuffer-Schnittstelleneinheit; 11a and 11b show embodiments of a line buffer interface unit;
12 zeigt eine Ausführungsform eines Computersystems. Ausführliche Beschreibung 12 shows an embodiment of a computer system. Detailed description
i. Einführung i. introduction
Die nachfolgende Beschreibung beschreibt zahlreiche Ausführungsformen, die eine neue Bildverarbeitungstechnologieplattform betreffen, welche eine vielseitig einsetzbare Anwendungssoftware-Entwicklungsumgebung bereitstellt, die größere Datenblöcke (z. B. Zeilengruppen und Blätter, wie weiter unten beschrieben) verwendet, um für eine verbesserte Energieeffizienz zu sorgen. The following description describes numerous embodiments relating to a new image processing technology platform that provides a versatile application software development environment that uses larger data blocks (eg, stanzas and sheets as described below) to provide improved energy efficiency.
1.0 Anwendungssoftware-Entwicklungsumgebung a. Anwendung und Struktur von Kerneln 1.0 Application Software Development Environment a. Application and structure of kernels
1 zeigt eine umfassende Ansicht einer Bildprozessortechnologieplattform, die eine virtuelle Bildverarbeitungsumgebung 101, die eigentliche Bildverarbeitungshardware 103 und einen Compiler 102 beinhaltet, um einen für die virtuelle Verarbeitungsumgebung 101 geschriebenen höheren Code in Objektcode zu übersetzen, den die eigentliche Hardware 103 physisch ausgeführt. Wie nachfolgend näher beschrieben wird, ist die virtuelle Verarbeitungsumgebung 101 in Bezug auf die Anwendungen, die entwickelt werden können, vielseitig und auf eine einfache Visualisierung der einzelnen Prozesse einer Anwendung zugeschnitten. Nach Beendigung des Programmcode-Entwicklungsaufwands durch den Entwickler 104 übersetzt der Compiler 102 den Code, der in die virtuelle Verarbeitungsumgebung 101 geschrieben wurde, in einen Objektcode, der auf die eigentliche Hardware 103 zugeschnitten ist. 1 FIG. 12 shows a comprehensive view of an image processor technology platform that provides a virtual image processing environment 101 , the actual image processing hardware 103 and a compiler 102 includes one for the virtual processing environment 101 written higher code into object code to translate the actual hardware 103 physically executed. As will be described in more detail below, the virtual processing environment is 101 in terms of the applications that can be developed, versatile and tailored to easy visualization of the individual processes of an application. Upon completion of the program code development effort by the developer 104 the compiler translates 102 the code in the virtual processing environment 101 was written in an object code that refers to the actual hardware 103 is tailored.
2a zeigt eine beispielhafte Ausführungsform der Struktur und Form, welche eine Anwendungssoftware, die in die virtuelle Umgebung geschrieben wird, annehmen kann. Wie in 2a dargestellt, kann erwartet werden, dass der Programmcode ein oder mehrere Frames der Eingabebilddaten 201 verarbeitet, um eine Gesamttransformation an den Eingabebilddaten 201 zu bewirken. Die Transformation wird mit dem Betrieb eines oder mehrerer Kernels des Programmcodes 202 realisiert, die an den Eingabebilddaten in einer abgestimmten Sequenz arbeiten, welche von dem Entwickler artikuliert wird. 2a FIG. 10 shows an exemplary embodiment of the structure and form that may accept application software written to the virtual environment. As in 2a can be expected that the program code one or more frames of the input image data 201 processed to a total transformation on the input image data 201 to effect. The transformation involves the operation of one or more kernels of the program code 202 which works on the input image data in a tuned sequence which is articulated by the developer.
Wie in 2a erkennbar, wird die Gesamttransformation durch eine erste Verarbeitung von jedem Eingabebild mit einem ersten Kernel K1 bewirkt. An den vom Kernel K1 erzeugten Ausgabebildern arbeitet dann der Kernel K2. An jedem der vom Kernsystem K2 erzeugten Ausgabebilder arbeitet dann das Kernsystem K3_1 oder K3_2 gearbeitet. An den vom bzw. von den Kernsystem(en) K3_1/K3_2 erzeugten Ausgabebildern arbeitet dann das Kernsystem K4. Die Kernel K3_1 und K3_2 können identische Kernel sein, die derart ausgelegt sind, dass sie die Gesamtverarbeitung beschleunigen, indem sie eine Parallelverarbeitung in der K3-Stufe auferlegen, oder sie können unterschiedliche Kernel sein (z. B. arbeitet der Kernel K3_1 an Eingabebildern eines ersten spezifischen Typs und der Kernel K3_2 arbeitet an Eingabebildern eines zweiten unterschiedlichen Typs). As in 2a recognizable, the overall transformation is effected by a first processing of each input image with a first kernel K1. The kernel K2 then works on the output images generated by the kernel K1. The core system K3_1 or K3_2 then works on each of the output images generated by the core system K2. The core system K4 then operates on the output images generated by the core system (s) K3_1 / K3_2. The kernels K3_1 and K3_2 may be identical kernels designed to accelerate overall processing by imposing parallel processing at the K3 stage, or they may be different kernels (eg, kernel K3_1 operates on input images of a kernel) first specific type and the kernel K3_2 works on input images of a second different type).
Daher kann die größere Gesamtbildverarbeitungssequenz die Form einer Bildverarbeitungspipeline oder eines gerichteten azyklischen Graphen (DAG) annehmen und die Entwicklungsumgebung kann dafür ausgestattet sein, dem Entwickler tatsächlich eine Darstellung des Programmcodes als solches, der entwickelt wird, anzuzeigen. Kernels können von einem Entwickler einzeln entwickelt und/oder von einer Entität bereitgestellt werden, die jegliche darunterliegende Technologie liefert (wie z. B. die eigentliche Signalprozessorhardware und/oder ein Design derselben), und/oder durch einen Dritten (z. B. einen Anbieter von für die Entwicklungsumgebung geschriebene Kernelsoftware). Als solches wird davon ausgegangen, dass eine nominale Entwicklungsumgebung eine „Bibliothek“ von Kerneln einschließt, die von Entwicklern in verschiedenen Weisen „verbunden“ werden können, um den Gesamtablauf ihres größeren Entwicklungsaufwands herbeizuführen. Einige grundlegende Kernel, von denen erwartet wird, dass sie Teil einer solchen Bibliothek sind, können Kernel beinhalten, um eine oder mehrere der folgenden grundlegenden Bildverarbeitungstasks bereitzustellen: Faltungen, Entrauschen, Farbraumumwandlungen, Rand- und Eckenerfassung, Schärfen, Weißabgleich, Gammakorrektur, Tonemapping, Matrixmultiplikation, Bildregistrierung, Pyramidenbau, Wavelet-Transformation, blockweise diskrete Kosinus- und Fourier-Transformationen. Therefore, the larger overall image processing sequence may take the form of an image processing pipeline or a directed acyclic graph (DAG), and the development environment may be configured to actually display to the developer a representation of the program code being developed. Kernels may be individually developed by a developer and / or provided by an entity providing any underlying technology (such as the actual signal processor hardware and / or a design thereof), and / or by a third party (eg, a third party) Provider of kernel software written for the development environment). As such, a nominal development environment is considered to include a "library" of kernels that developers can "connect" to in various ways to accomplish the overall process of their greater development effort. Some basic kernels expected to be part of such a library may include kernels to provide one or more of the following basic image processing tasks: convolutions, denoising, color space conversions, edge and corner detection, sharpening, white balance, gamma correction, tonemapping, Matrix multiplication, image registration, pyramid construction, wavelet transform, blockwise discrete cosine and fourier transforms.
2b zeigt eine beispielhafte Darstellung der Struktur eines Kernels 203, der von einem Entwickler in Betracht gezogen werden kann. Wie in 2b dargestellt, kann der Kernel 203 als eine Anzahl von parallelen Threads von Programmcode („Threads“) 204 betrachtet werden, die jeweils auf einem entsprechenden zugrundeliegenden Prozessor 205 arbeiten, wobei jeder Prozessor 205 auf einen bestimmten Ort in einer Ausgabematrix 206 (z. B. einen bestimmten Bildpunktort in dem von dem Kernel generierten Ausgabebild) ausgerichtet ist. Der Einfachheit halber sind in 2b nur drei Prozessoren und entsprechende Threads dargestellt. Bei verschiedenen Ausführungsformen würde jeder dargestellte Ausgabematrixort einen eigenen fest zugeordneten Prozessor und einen entsprechenden Thread aufweisen. Das heißt, dass für jeden Bildpunkt in der Ausgabematrix ein separater Prozessor und Thread zugewiesen werden kann. 2 B shows an exemplary representation of the structure of a kernel 203 which can be considered by a developer. As in 2 B represented, the kernel 203 as a number of parallel threads of program code ("threads") 204 are considered, each based on a corresponding underlying processor 205 work, with each processor 205 to a specific location in an output matrix 206 (eg, a particular pixel location in the output image generated by the kernel). Of the For simplicity, in 2 B only three processors and corresponding threads are shown. In various embodiments, each output matrix location illustrated would have its own dedicated processor and thread. That is, for each pixel in the output matrix, a separate processor and thread can be assigned.
Wie nachstehend näher beschrieben, arbeiten eine Matrix von Ausführungsbahnen und entsprechenden Threads in der tatsächlichen zugrundeliegenden Hardware in verschiedenen Ausführungsformen im Gleichklang (z. B. bei der Datenverarbeitung durch gleichzeitiges Anwenden eines einzigen Befehls auf mehrere Daten), um für einen Teil einer „Zeilengruppe“ des gerade verarbeiteten Frames Bildausgabedaten zu erzeugen. Eine Zeilengruppe ist ein zusammenhängender, beträchtlicher Abschnitt eines Bildframes. Bei verschiedenen Ausführungsformen kann sich der Entwickler im Klaren darüber sein, dass die Hardware auf Zeilengruppen arbeitet, oder die Entwicklungsumgebung kann eine Abstraktion darstellen, in der es einen separaten Prozessor und einen Thread für beispielsweise jeden Bildpunkt in dem Ausgabeframe gibt (z. B. jeder Bildpunkt in einem Ausgabeframe generiert durch einen eigenen fest zugeordneten Prozessor und Thread). Unabhängig davon versteht der Entwickler, dass das Kernsystem in verschiedenen Ausführungsformen einen einzelnen Thread für jeden Ausgabebildpunkt beinhaltet (unabhängig davon, ob das Ausgabefeld als vollständiger Ausgabeframe oder Abschnitt desselben visualisiert wird). As described in more detail below, a matrix of execution lanes and corresponding threads in the actual underlying hardware in different embodiments operate in unison (eg, in data processing by simultaneously applying a single instruction to multiple data) to become part of a "stanza". of the currently processed frame to produce image output data. A stanza is a contiguous, substantial section of an image frame. In various embodiments, the developer may be aware that the hardware is working on stanzas, or the development environment may represent an abstraction in which there is a separate processor and thread for, for example, each pixel in the output frame (e.g. Pixel in an output frame generated by its own dedicated processor and thread). Regardless, the developer understands that in various embodiments, the core system includes a single thread for each output pixel (regardless of whether the output field is visualized as a complete output frame or portion thereof).
Wie nachfolgend näher beschrieben wird, weisen die Prozessoren 205 bei einer Ausführungsform, die dem Entwickler in der virtuellen Umgebung präsentiert werden, eine Befehlssatzarchitektur (ISA) auf, die nicht nur Standard-(z. B. RISC)-Maschinenbefehle unterstützt, sondern auch speziell formatierte Datenzugriffsbefehle beinhaltet, die es dem Entwickler ermöglichen, die durchgeführte Bildpunkt-für-Bildpunkt-Verarbeitung leicht zu visualisieren. Die Fähigkeit, einen beliebigen Eingabematrixort in Kombination mit einer vollständigen ISA herkömmlicher mathematischer und Programmsteuerungsmaschinenbefehle leicht zu definieren/zu visualisieren, ermöglicht eine extrem vielseitige Programmierumgebung, die es einem Anwendungsprogrammentwickler im Wesentlichen ermöglicht, im Idealfall jede gewünschte Funktion, die ausgeführt werden soll, auf einer beliebig großen Bildfläche zu definieren. Zum Beispiel kann im Idealfall jede mathematische Operation leicht programmiert und auf jede Schablonengröße angewendet werden. As will be described in more detail below, the processors have 205 In one embodiment, presented to the developer in the virtual environment, an instruction set architecture (ISA) that not only supports standard (e.g., RISC) machine instructions, but also includes specially formatted data access instructions that enable the developer to: to easily visualize the performed pixel-by-pixel processing. The ability to easily define / visualize any input matrix location in combination with a complete ISA of conventional mathematical and program control engine instructions enables an extremely versatile programming environment that substantially allows an application program developer, ideally any desired function to be performed on one to define arbitrarily large image area. For example, ideally, any mathematical operation can be easily programmed and applied to any template size.
Hinsichtlich der Datenzugriffsbefehle beinhaltet die ISA der virtuellen Prozessoren („virtuelle ISA“) bei einer Ausführungsform einen speziellen Datenladebefehl und einen speziellen Datenspeicherbefehl. Der Datenladebefehl ist in der Lage, von jedem Ort innerhalb einer Eingabematrix von Bilddaten zu lesen. Der Datenspeicherbefehl ist in der Lage an einen beliebigen Ort innerhalb der Ausgabematrix von Bilddaten zu schreiben. Der letztgenannte Befehl ermöglicht es, mehrere Instanzen des gleichen Prozessors problemlos verschiedenen Ausgabebildpunktorten zuzuordnen (jeder Prozessor schreibt in einen anderen Bildpunkt in der Ausgabematrix). Dementsprechend kann beispielsweise die Schablonengröße selbst (z. B. als Bildpunktbreite und Bildpunkthöhe ausgedrückt) zu einem leicht programmierbaren Merkmal gemacht werden. Die Visualisierung der Verarbeitungsvorgänge wird weiter vereinfacht, wobei jede der speziellen Lade- und Speicherbefehle ein spezielles Befehlsformat aufweist, wodurch Zielmatrixorte vereinfacht als X- und Y-Koordinaten angegeben werden. With regard to the data access commands, in one embodiment, the virtual processor ISA ("virtual ISA") includes a special data load command and a special data store command. The data load command is capable of reading image data from any location within an input array. The data store command is capable of writing to any location within the output matrix of image data. The latter command allows multiple instances of the same processor to be easily assigned to different output pixel locations (each processor writes to another pixel in the output matrix). Accordingly, for example, the template size itself (eg, expressed as pixel width and pixel height) can be made into a readily programmable feature. The visualization of the processing operations is further simplified, with each of the special load and store instructions having a special instruction format, which simply indicates target matrix locations as X and Y coordinates.
Unabhängig davon können durch Instanziieren eines getrennten Prozessors für jede von mehreren Orten in der Ausgabematrix die Prozessoren ihre jeweiligen Threads parallel ausführen, sodass z. B. die jeweiligen Werte für alle Orte in der Ausgabematrix gleichzeitig erzeugt werden. Es ist zu beachten, dass viele Bildverarbeitungsroutinen in der Regel die gleichen Vorgänge an verschiedenen Bildpunkten des gleichen Ausgabebildes ausführen. Dementsprechend wird bei einer Ausführungsform der Entwicklungsumgebung davon ausgegangen, dass jeder Prozessor identisch ist und den gleichen Thread-Programmcode ausführt. Somit kann die virtualisierte Umgebung als eine Art zweidimensionaler (2D)SIMD-Prozessor betrachtet werden, der aus einer 2D-Matrix von z. B. identischen Prozessoren besteht, die jeweils identischen Code im Sperrschritt ausführen. Regardless, by instantiating a separate processor for each of multiple locations in the output matrix, the processors can execute their respective threads in parallel, e.g. For example, the respective values for all the locations in the output matrix are generated simultaneously. It should be noted that many image processing routines typically perform the same operations on different pixels of the same output image. Accordingly, in one embodiment of the development environment, it is assumed that each processor is identical and executes the same thread program code. Thus, the virtualized environment may be considered as a type of two-dimensional (2D) SIMD processor consisting of a 2D matrix of e.g. B. identical processors, each executing identical code in the blocking step.
3 zeigt eine ausführlichere beispielhafte Ausführungsform der Verarbeitungsumgebung für zwei virtuelle Prozessoren, die identischen Code für zwei unterschiedliche Bildpunktpositionen in einer Ausgabematrix verarbeiten. 3 zeigt eine Ausgabematrix 304, die einem Ausgabebild entspricht, das generiert wird. Hier verarbeitet ein erster virtueller Prozessor den Code des Threads 301, um einen Ausgabewert am Ort X1 der Ausgabematrix 304 zu generieren, und ein zweiter virtueller Prozessor verarbeitet den Code des Threads 302, um einen Ausgabewert am Ort X2 der Ausgabematrix 304 zu generieren. Bei verschiedenen Ausführungsformen würde der Entwickler wiederum verstehen, dass es einen separaten Prozessor und Thread für jede Bildpunktposition in der Ausgabematrix 304 gibt (der Einfachheit halber zeigt 3 lediglich zwei davon). Jedoch muss der Entwickler (aufgrund der SIMD-ähnlichen Beschaffenheit der Maschine) bei verschiedenen Ausführungsformen nur Code für einen Prozessor und Thread entwickeln. 3 FIG. 12 shows a more detailed exemplary embodiment of the processing environment for two virtual processors that process identical code for two different pixel positions in an output matrix. 3 shows an output matrix 304 that corresponds to an output image being generated. Here a first virtual processor processes the code of the thread 301 to obtain an output value at location X1 of the output matrix 304 and a second virtual processor processes the code of the thread 302 to obtain an output value at location X2 of the output matrix 304 to generate. In various embodiments, the designer would again understand that there is a separate processor and thread for each pixel position in the output matrix 304 gives (for simplicity shows 3 only two of them). However, in various embodiments, the developer (due to the SIMD-like nature of the machine) only needs to develop code for a processor and thread.
Wie auf dem Fachgebiet bekannt, wird ein Ausgabebildpunktwert oft durch die Verarbeitung der Bildpunkte einer Eingabematrix bestimmt, welche die entsprechende Ausgabebildpunktposition beinhaltet und umgibt. Wie aus 3 ersichtlich, entspricht der Ort X1 der Ausgabematrix 304 beispielsweise dem Ort E der Eingabematrix 303. Die Schablone der Bildpunktwerte der Eingabematrix 303, die verarbeitet werden würden, um den Ausgabewert X1 zu bestimmen, würde daher den Eingabewerten ABCDEFGHI entsprechen. Ähnlich würde die Schablone der Eingabematrixbildpunkte, die verarbeitet werden würden, um den Ausgabewert X2 zu bestimmen, den Eingabewerten DEFGHIJKL entsprechen. As is known in the art, an output pixel value is often determined by the processing of the pixels of an input matrix that includes and surrounds the corresponding output pixel position. How out 3 As can be seen, the location X1 corresponds to the output matrix 304 for example, the location E of the input matrix 303 , The template of the pixel values of the input matrix 303 which would be processed to determine the output value X1 would therefore correspond to the input values ABCDEFGHI. Similarly, the template of the input matrix pixels that would be processed to determine the output value X2 would correspond to the input values DEFGHIJKL.
3 zeigt eine beispielhafte Ausführungsform eines entsprechenden Programmcodes einer virtuellen Umgebung für ein Thread-Paar 301, 302, das verwendet werden könnte, um die Ausgabewerte X1 bzw. X2 zu berechnen. Im Beispiel von 3 sind beide Code-Paare identisch und entsprechen durchschnittlich einer Schablone von neun Eingabematrixwerten, um einen entsprechenden Ausgabewert zu bestimmen. Der einzige Unterschied zwischen den beiden Threads sind die Variablen, die aus der Eingabematrix aufgerufen werden, und der Ort der Ausgabematrix, in die geschrieben wird. Speziell arbeitet der Thread, der in die Ausgabeposition X1 schreibt, an der Schablone ABCDEFGHI und der Thread, der in die Ausgabeposition X2 schreibt, an der Schablone DEFGHIJKL. 3 shows an exemplary embodiment of a corresponding program code of a virtual environment for a thread pair 301 . 302 which could be used to calculate the output values X1 and X2, respectively. In the example of 3 Both code pairs are identical and correspond on average to a template of nine input matrix values to determine a corresponding output value. The only difference between the two threads is the variables invoked from the input matrix and the location of the output matrix to be written to. Specifically, the thread that writes to issue position X1 works on template ABCDEFGHI and the thread that writes to issue position X2 on template DEFGHIJKL.
Wie aus dem jeweiligen Programmcode von dem Thread-Paar 301, 302 ersichtlich, beinhaltet jeder virtuelle Prozessor mindestens die internen Register R1 und R2 und unterstützt mindestens die folgenden Befehle: 1) einen LADE-Befehl aus der Eingabematrix in R1; 2) einen LADE-Befehl aus der Eingabematrix in R2; 3) einen ADDIER-Befehl, der den Inhalt von R1 und R2 addiert und die Resultante in R2 einfügt; 4) einen DIVIDIER-Befehl, der den Wert innerhalb R2 durch den unmittelbaren Operanden 9 teilt; und, 5) einen SPEICHER-Befehl, der den Inhalt von R2 in die Ausgabematrixposition speichert, zu der der Thread zugeordnet ist. Obwohl in 3 nur zwei Ausgabematrixpositionen und nur zwei Threads und entsprechende Prozessoren dargestellt sind, könnte jedem Ort in der Ausgabematrix durchaus ein virtueller Prozessor und ein entsprechender Thread zugewiesen werden, der diese Funktionen ausführt. Bei verschiedenen Ausführungsformen werden die mehreren Threads im Einklang mit der SIMD-artigen Beschaffenheit der Verarbeitungsumgebung isoliert voneinander ausgeführt. Das heißt, es gibt keine Thread-Thread-Kommunikation zwischen virtuellen Prozessoren (ein SIMD-Kanal verhindert den Übergang in einen anderen SIMD-Kanal). As from the respective program code of the thread pair 301 . 302 As can be seen, each virtual processor includes at least the internal registers R1 and R2 and supports at least the following instructions: 1) a LOAD instruction from the input matrix in R1; 2) a LOAD command from the input matrix in R2; 3) an ADD command that adds the contents of R1 and R2 and inserts the resultant in R2; 4) a DIVIDIER instruction which divides the value within R2 by the immediate operand 9; and, 5) a STORE command that stores the contents of R2 in the output array location to which the thread is associated. Although in 3 only two output matrix locations and only two threads and corresponding processors are shown, each location in the output matrix could well be assigned a virtual processor and a corresponding thread that performs these functions. In various embodiments, the multiple threads are executed in isolation in accordance with the SIMD-like nature of the processing environment. That is, there is no thread-thread communication between virtual processors (one SIMD channel prevents transition to another SIMD channel).
b. Virtuelles Prozessor-Speichermodell b. Virtual processor memory model
Bei verschiedenen Ausführungsformen ist ein zugehöriges Merkmal der virtuellen Prozessoren ihr Speichermodell. Wie auf dem Fachgebiet bekannt, liest ein Prozessor Daten aus einem Speicher, arbeitet an diesen Daten und schreibt neue Daten in den Speicher zurück. Ein Speichermodell ist die Perspektive oder Sicht, die ein Prozessor von der Art und Weise hat, in der Daten im Speicher organisiert sind. In einer Ausführungsform beinhaltet das Speichermodell der virtuellen Prozessoren sowohl Eingabe- als auch Ausgabematrixbereiche. Eingabebildpunktwerte für Threads werden im Eingabematrixbereich gespeichert und Ausgabebildpunktwerte, die durch Threads erzeugt werden, werden im Ausgabematrixbereich gespeichert. In various embodiments, an associated feature of the virtual processors is their memory model. As known in the art, a processor reads data from memory, works on that data, and writes new data back into memory. A storage model is the perspective or view that a processor has of the manner in which data is organized in memory. In one embodiment, the storage model of the virtual processors includes both input and output array areas. Threads input pixel values are stored in the input matrix area, and output pixel values generated by threads are stored in the output matrix area.
In einer Ausführungsform wird ein neuartiges Speicheradressierschema verwendet, um zu definieren, welche bestimmten Eingabewerte von einem Eingabematrixbereich des Speichermodells des virtuellen Prozessors aufgerufen werden sollen. Genauer gesagt wird ein „positionsbezogenes“ Adressierungsschema verwendet, das die gewünschten Eingabedaten anstatt einer herkömmlichen linearen Speicheradresse mit X, Y-Koordinaten definiert. Dementsprechend beinhaltet der Ladebefehl der Befehlssatzarchitektur der virtuellen Prozessoren ein Befehlsformat, das eine spezifische Speicherposition innerhalb der Eingabematrix mit einer X-Komponente und einer Y-Komponente identifiziert. Als solches wird ein zweidimensionales Koordinatensystem verwendet, um Speicher für Eingabewerte zu adressieren, die von der Eingabematrix gelesen werden. In one embodiment, a novel memory addressing scheme is used to define which particular input values are to be invoked by an input matrix area of the virtual processor memory model. More specifically, a "positional" addressing scheme is used which defines the desired input data rather than a conventional linear memory address having X, Y coordinates. Accordingly, the load instruction of the instruction set architecture of the virtual processors includes an instruction format that identifies a specific memory location within the input matrix having an X component and a Y component. As such, a two-dimensional coordinate system is used to address memory for input values read from the input matrix.
Die Verwendung eines positionsbezogenen Speicheradressierungsansatzes ermöglicht es, dass der Bereich eines Bildes, an dem ein virtueller Prozessor arbeitet, für einen Entwickler leichter identifizierbar ist. Wie vorstehend erwähnt, ermöglicht die, eine beliebige Eingabematrixposition in Kombination mit einer vollständigen ISA herkömmlicher mathematischer und Programmsteuerungsmaschinenbefehle leicht zu definieren/zu visualisieren, ermöglicht eine extrem vielseitige Programmierumgebung, die es einem Anwendungsprogrammentwickler im Wesentlichen ermöglicht, im Idealfall jede gewünschte Funktion, die ausgeführt werden soll, auf einer beliebig großen Bildfläche leicht zu definieren. Verschiedene Befehlsformat-Ausführungsformen für Befehle, die ein positionsbezogenes Adressierungsschema übernehmen, sowie Ausführungsformen anderer Merkmale der unterstützten ISA werden nachfolgend näher beschrieben. The use of a positional memory addressing approach allows the area of an image on which a virtual processor operates to be more easily identifiable to a developer. As mentioned above, the ability to easily define / visualize any input array position in combination with a complete ISA of conventional mathematical and program control engine instructions enables an extremely versatile programming environment that substantially enables an application program developer, ideally any desired function that is performed should be easy to define on an arbitrarily large screen. Various instruction format embodiments for instructions that adopt a positional addressing scheme, as well as embodiments of other features of the supported ISA, are described in more detail below.
Die Ausgabematrix enthält die Ausgabebilddaten, für deren Generierung die Threads verantwortlich sind. Die Ausgabebilddaten können endgültige Bilddaten, wie z. B. die tatsächlichen Bilddaten, sein, die auf einem Display dargestellt werden, das der Gesamtbildverarbeitungssequenz folgt, oder es können Zwischenbilddaten sein, die ein nachfolgender Kernel der Gesamtbildverarbeitungssequenz als Eingabebilddateninformationen verwendet. Virtuelle Prozessoren konkurrieren wiederum in der Regel jedoch nicht um Ausgabedatenelemente, da sie während eines gleichen Zyklus in verschiedene Bildpunktpositionen der Ausgabebilddaten schreiben. The output matrix contains the output image data that the threads are responsible for generating. The output image data may be final image data, such as. The actual image data, which are displayed on a display following the overall image processing sequence, or may be inter-image data that a subsequent kernel of the overall image processing sequence uses as input image data information. However, virtual processors typically do not compete for output data items because they write to different pixel positions of the output image data during a same cycle.
Bei einer Ausführungsform wird das positionsbezogene Adressierungsschema auch für Schreibvorgänge in die Ausgabematrix verwendet. Dementsprechend beinhaltet die ISA für jeden virtuellen Prozessor einen Speicherbefehl, dessen Befehlsformat anstelle einer herkömmlichen Speicherung mit wahlfreiem Zugriff einen adressierten Schreibort im Speicher als eine zweidimensionale X, Y-Koordinate definiert. In one embodiment, the positional addressing scheme is also used for writes to the output matrix. Accordingly, for each virtual processor, the ISA includes a store instruction whose instruction format, rather than conventional random access storage, defines an addressed write location in memory as a two-dimensional X, Y coordinate.
2.0 Hardwarearchitektur-Ausführungsformen 2.0 Hardware Architecture Embodiments
a. Bildprozessor-Hardwarearchitektur und -Betrieb a. Image processor hardware architecture and operation
4 zeigt eine Ausführungsform einer Architektur 400 für einen in Hardware implementierten Bildprozessor. Der Bildprozessor kann z. B. von einem Compiler angesteuert werden, der den Programmcode, der für einen virtuellen Prozessor geschrieben wurde, in einer simulierten Umgebung in Programmcode umwandelt, der von dem Hardwareprozessor tatsächlich ausgeführt wird. Wie in 4 dargestellt, beinhaltet die Architektur 400 eine Vielzahl von Zeilenpuffereinheiten 401_1 bis 401_M, die mit einer Vielzahl von Schablonenprozessoreinheiten 402_1 bis 402_N und entsprechenden Datenblattgeneratoreinheiten 403_1 bis 403_N über ein Netzwerk 404 (z. B. ein Netzwerk auf Chip (NOC), unter anderem auch ein Chip-Switch-Netzwerk, ein On-Chip-Ring-Netzwerk oder einer anderen Art von Netzwerk) verbunden ist. In einer Ausführungsform kann jede Zeilenpuffereinheit mit jedem Blattgenerator und einem entsprechenden Schablonenprozessor über das Netzwerk 404 verbunden sein. 4 shows an embodiment of an architecture 400 for a hardware implemented image processor. The image processor can, for. B. be driven by a compiler, which converts the program code written for a virtual processor in a simulated environment into program code that is actually executed by the hardware processor. As in 4 represented, includes the architecture 400 a variety of line buffer units 401_1 to 401_M Using a variety of template processor units 402_1 to 402_N and corresponding data sheet generator units 403_1 to 403_N over a network 404 (For example, a network on chip (NOC), including a chip switch network, an on-chip ring network or other type of network) is connected. In one embodiment, each row buffer unit may communicate with each leaf generator and a corresponding template processor over the network 404 be connected.
In einer Ausführungsform wird der Programmcode kompiliert und auf einen entsprechenden Schablonenprozessor 402 geladen, um die zuvor von einem Softwareentwickler definierten Bildverarbeitungsvorgänge auszuführen (der Programmcode kann je nach Konzipierung und Implementierung auch auf den zugehörigen Blattgenerator des Schablonenprozessors 403 geladen werden). In zumindest einigen Fällen kann eine Bildverarbeitungspipeline realisiert werden, indem ein erstes Kernelprogramm für eine erste Pipelinestufe in einen ersten Schablonenprozessor 402_1 geladen, ein zweites Kernelprogramm für eine zweite Pipelinestufe in einen zweiten Schablonenprozessor 402_2 geladen wird usw., wobei der erste Kernel die Funktionen der ersten Pipelinestufe durchführt, der zweite Kernel die Funktionen der zweiten Pipelinestufe durchführt usw., und zusätzliche Steuerablaufverfahren installiert werden, um Ausgabebilddaten von einer Pipelinestufe zur nächsten Pipelinestufe weiterzugeben. In one embodiment, the program code is compiled and dispatched to a corresponding template processor 402 loaded to execute the image processing operations previously defined by a software developer (the program code may also be applied to the template processor sheet generator, depending on design and implementation 403 getting charged). In at least some cases, an image processing pipeline may be implemented by placing a first kernel program for a first pipeline stage into a first template processor 402_1 loaded, a second kernel program for a second pipeline stage in a second template processor 402_2 etc., with the first kernel performing the functions of the first pipeline stage, the second kernel performing the functions of the second pipeline stage, and so forth, and additional control flow procedures are installed to pass output image data from one pipeline stage to the next pipeline stage.
In anderen Konfigurationen kann der Bildprozessor als eine parallele Maschine realisiert sein, die zwei oder mehr Schablonenprozessoren 402_1, 402_2 aufweist, die auf demselben Kernprogrammcode betrieben werden. Zum Beispiel kann ein hochgradig dichter und hoher Datenratenstrom von Bilddaten verarbeitet werden, indem Frames über mehrere Schablonenprozessoren verteilt werden, von denen jeder dieselbe Funktion ausführt. In other configurations, the image processor may be implemented as a parallel machine having two or more template processors 402_1 . 402_2 which are operated on the same core program code. For example, a high density and high data rate stream of image data may be processed by distributing frames across multiple template processors, each of which performs the same function.
Bei noch anderen Konfigurationen kann im Wesentlichen jeder DAG von Kerneln auf den Hardwareprozessor geladen werden, indem jeweilige Schablonenprozessoren mit deren eigenen jeweiligen Kernel von Programmcode konfiguriert und geeignete Steuerablauf-Hooks in die Hardware konfiguriert werden, um Ausgabebilder von einem Kernel an den Eingang eines nächsten Kernels im DAG-Design zu leiten. In still other configurations, essentially any DAG of kernels may be loaded onto the hardware processor by configuring respective template processors with their own respective kernel of program code and configuring appropriate control hooks into the hardware to output output images from one kernel to the input of a next kernel to lead in the DAG design.
Bei einem allgemeinen Ablauf werden die Frames der Bilddaten von einer Makro-E/A-Einheit 405 empfangen und zu einer oder mehreren der Zeilenpuffereinheiten 401 auf einer Frame-per-Frame-Basis übermittelt. Eine bestimmte Zeilenpuffereinheit parst ihren Frame aus Bilddaten in einen kleineren Bereich von Bilddaten, der als „Zeilengruppe“ bezeichnet wird, und führt dann die Zeilengruppe durch das Netzwerk 404 zu einem bestimmten Blattgenerator. Eine vollständige oder „volle“ singuläre Zeilengruppe kann sich beispielsweise aus den Daten mehrerer zusammenhängender vollständiger Zeilen oder Spalten eines Frames zusammensetzen (der Einfachheit halber bezieht sich die vorliegende Beschreibung hauptsächlich auf zusammenhängende Zeilen). Der Blattgenerator parst ferner die Zeilengruppe von Bilddaten in einen kleineren Bereich von Bilddaten, der als „Blatt“ bezeichnet wird, und präsentiert das Blatt seinem entsprechenden Schablonenprozessor. In a general process, the frames of the image data are from a macro I / O unit 405 received and to one or more of the line buffer units 401 transmitted on a frame-by-frame basis. A particular line buffer unit parses its frame of image data into a smaller range of image data called a "stanza" and then routes the stanza through the network 404 to a specific leaf generator. For example, a full or "full" singular stanza may be composed of the data of several contiguous complete rows or columns of a frame (for simplicity, the present description will mainly refer to contiguous rows). The sheet generator also parses the stanza of image data into a smaller range of image data called a "sheet" and presents the sheet to its corresponding stencil processor.
Im Falle einer Bildverarbeitungspipeline oder eines DAG-Ablaufs mit einer einzigen Eingabe werden im Allgemeinen Eingabeframes an die gleiche Zeilenpuffereinheit 401_1 geleitet, die die Bilddaten in Zeilengruppen parst und die Zeilengruppen zu dem Blattgenerator 403_1 leitet, dessen entsprechender Schablonenprozessor 402_1 den Code des ersten Kernsystems in der Pipeline/dem DAG ausführt. Nach Beendigung der Operationen durch den Schablonenprozessor 402_1 an den von ihm verarbeiteten Zeilengruppen sendet der Blattgenerator 403_1 Ausgabezeilengruppen an eine „nachgelagerten“ Zeilenpuffereinheit 401_2 (in manchen Anwendungsfällen kann die Ausgabezeilengruppe zurück an die gleiche Zeilenpuffereinheit 401_1 gesendet werden, die zuvor die Eingabezeilengruppen gesendet hatte). In the case of an image processing pipeline or a single input DAG flow, input frames are generally used to the same row buffer unit 401_1 which parses the image data into stanzas and the stanzas to the leaf generator 403_1 derives its corresponding template processor 402_1 executes the code of the first core system in the pipeline / DAG. After completion of the operations by the template processor 402_1 The leaf generator sends to the stanzas it processes 403_1 Output row groups to a "downstream" row buffer unit 401_2 (In some cases, the output row group can go back to the same row buffer unit 401_1 sent, which had previously sent the input line groups).
Ein oder mehrere „Abnehmerkernsysteme“, die die nächste Phase/Operation in der Pipeline/dem DAG darstellen, die auf deren eigenen jeweiligen anderen Blattgenerator und Schablonenprozessor (z. B. Blattgenerator 403_2 und Schablonenprozessor 402_2) ausgeführt werden, empfangen anschließend die von dem ersten Schablonenprozessor 402_1 erzeugten Bilddaten von der nachgelagerten Zeilenpuffereinheit 401_2. Auf diese Weise werden die Ausgabedaten eines „Erzeugerkernsystems“, das auf einem ersten Schablonenprozessor betrieben wird, an ein „Abnehmerkernsystem“ weitergeleitet, das auf einem zweiten Schablonenprozessor betrieben wird, wobei das Abnehmerkernsystem nach dem Erzeugerkernsystem den nächsten Satz von Arbeitsschritten gemäß dem Design der gesamten Pipeline oder des DAGs ausführt. One or more "customer core systems" that represent the next phase / operation in the pipeline / DAG, based on their own respective other sheet generator and stencil processor (eg, Sheet Generator 403_2 and template processor 402_2 ), then receive those from the first template processor 402_1 generated image data from the downstream line buffer unit 401_2 , In this way, the output data of a "producer core system" operating on a first template processor is forwarded to a "customer core system" operating on a second template processor, the customer core system after the producer core system the next set of operations according to the overall design Pipeline or DAG.
Ein Schablonenprozessor 402 ist dafür ausgelegt, gleichzeitig an mehreren sich überschneidenden Schablonen von Bilddaten zu arbeiten. Die mehreren sich überschneidenden Schablonen und die interne Hardwareverarbeitungskapazität des Schablonenprozessors bestimmen effektiv die Größe eines Blattes. Hier arbeiten innerhalb eines Schablonenprozessors 402 Matrizen von Ausführungsbahnen zusammen, um gleichzeitig den Bilddatenoberflächenbereich zu verarbeiten, der von den mehreren sich überschneidenden Schablonen bedeckt ist. A template processor 402 is designed to work simultaneously on multiple overlapping templates of image data. The multiple overlapping templates and the internal hardware processing capacity of the template processor effectively determine the size of a sheet. Here work inside a template processor 402 Matrices of execution paths to simultaneously process the image data surface area covered by the plurality of overlapping templates.
Wie nachstehend näher beschrieben, werden in verschiedenen Ausführungsformen, Blätter von Bilddaten in eine zweidimensionale Registermatrixstruktur innerhalb des Schablonenprozessors 402 geladen. Es wird davon ausgegangen, dass die Verwendung von Blättern und die zweidimensionale Registermatrixstruktur für effektive Energieverbrauchsverbesserungen sorgen, indem eine große Datenmenge in einen großen Registerbereich bewegt wird, so wird beispielsweise eine einzelne Ladeoperation mit direkt an den Daten ausgeführten Verarbeitungsschritten unmittelbar danach durch eine Ausführungsbahnmatrix durchgeführt. Zudem stellt die Verwendung einer Ausführungsbahnmatrix und einer entsprechenden Registermatrix verschiedene Schablonengrößen bereit, die leicht programmierbar/konfigurierbar sind. As described in more detail below, in various embodiments, sheets of image data are converted into a two-dimensional register array structure within the template processor 402 loaded. It is believed that the use of sheets and the two-dimensional register array structure provide for effective power consumption improvements by moving a large amount of data into a large register area, for example, a single load operation with processing steps performed directly on the data is performed immediately thereafter through an execution path matrix. In addition, the use of an execution path matrix and a corresponding register matrix provide various template sizes that are easily programmable / configurable.
5a bis 5e veranschaulichen umfassend Ausführungsformen sowohl der Parsing-Aktivität einer Zeilenpuffereinheit 401 als auch der feineren Parsing-Aktivität einer Blattgeneratoreinheit 403 sowie der Schablonenverarbeitungsaktivität des Schablonenprozessors 402, der mit der Blatterzeugereinheit 403 gekoppelt ist. 5a to 5e Illustratively, embodiments illustrate both the parsing activity of a row buffer unit 401 as well as the finer parsing activity of a leaf generator unit 403 and the template processing activity of the template processor 402 that with the leaf generator unit 403 is coupled.
5a zeigt eine Ausführungsform eines Eingabeframes der Bilddaten SOL. 5a zeigt zudem einen Umriss drei überlappender Schablonen 502 (die jeweils eine Abmessung von 3 Bildpunkten × 3 Bildpunkten aufweisen), für deren Betrieb ein Schablonenprozessor ausgelegt ist. Der Ausgabebildpunkt, für den jede Schablone jeweils die Ausgabebilddaten erzeugt, wird in schwarzer Farbe hervorgehoben. Der Einfachheit halber sind die drei überlappenden Schablonen 502 nur in vertikaler Richtung überlappend dargestellt. Es ist relevant, zu erkennen, dass ein Schablonenprozessor in Wirklichkeit so ausgelegt sein kann, dass dieser sowohl in vertikaler als auch in horizontaler Richtung überschneidende Schablonen aufweist. 5a shows an embodiment of an input frame of the image data SOL. 5a also shows an outline of three overlapping stencils 502 (each having a dimension of 3 pixels x 3 pixels) for the operation of which a template processor is designed. The output pixel for which each template produces the output image data is highlighted in black. For simplicity, the three overlapping templates 502 only overlapping in the vertical direction. It is relevant to realize that a template processor may in fact be designed to have overlapping templates in both the vertical and horizontal directions.
Aufgrund der sich, wie in 5a dargestellt, vertikal überschneidenden Schablonen 502 innerhalb des Schablonenprozessors gibt es ein breites Band von Bilddaten innerhalb des Frames, das von einem einzelnen Schablonenprozessor bearbeitet werden kann. Wie nachfolgend näher beschrieben, verarbeiten die Schablonenprozessoren in einer Ausführungsform innerhalb ihrer sich überschneidenden Schablonen Daten von links nach rechts über sämtliche Bilddaten (und wiederholen den Vorgang dann für die nächste Gruppe von Zeilen in der Reihenfolge von oben nach unten). Somit nimmt, während die Schablonenprozessoren mit ihrer Operation fortfahren, die Anzahl der schwarzen Ausgabebildpunktblöcke horizontal nach rechts zu. Wie oben erwähnt, ist eine Zeilenpuffereinheit 401 für das Parsen einer Zeilengruppe von Eingabebilddaten aus einem eingehenden Frame verantwortlich, der für die Schablonenprozessoren ausreichend ist, um eine erweiterte Anzahl anstehender Zyklen zu bearbeiten. Eine exemplarische Darstellung einer Zeilengruppe ist als schattierter Bereich 503 dargestellt. Bei einer weiteren Ausführungsform kann wie nachstehend weiter beschrieben die Zeilenpuffereinheit 401 unterschiedliche Dynamiken zum Senden/Empfangen einer Zeilengruppe an einen/von einem Blattgenerator umfassen. Beispielsweise werden gemäß einem Modus, der als „vollständige Gruppe“ bezeichnet wird, die gesamten Bilddatenzeilen mit voller Breite zwischen einer Zeilenpuffereinheit und einem Blattgenerator übermittelt. Gemäß einem zweiten Modus, der als „virtuell groß“ bezeichnet wird, wird eine Zeilengruppe zunächst mit einer Teilmenge von Zeilen mit voller Breite übermittelt. Die verbleibenden Zeilen werden dann nacheinander in kleineren Stücken (mit weniger als voller Breite) übermittelt. Because of itself, as in 5a illustrated, vertically overlapping stencils 502 Within the template processor, there is a broad band of image data within the frame that can be edited by a single template processor. As described in more detail below, in one embodiment, within their overlapping templates, the template processors process data from left to right across all image data (and then repeat the process for the next group of rows in the top-to-bottom order). Thus, as the template processors proceed with their operation, the number of black output pixel blocks increases horizontally to the right. As mentioned above, a line buffer unit is 401 is responsible for parsing a stanza of input image data from an incoming frame that is sufficient for the template processors to handle an extended number of pending cycles. An exemplary representation of a stanza is as a shaded area 503 shown. In another embodiment, as further described below, the line buffer unit 401 comprise different dynamics for sending / receiving a stanza to / from a sheet generator. For example, according to a mode called "full group", the entire full-width image data lines are communicated between a line buffer unit and a sheet generator. According to a second mode, called "virtually large," a stanza is first transmitted with a subset of full-width lines. The remaining lines are then successively transmitted in smaller pieces (less than full width).
Wenn die Zeilengruppe 503 der Eingabebilddaten durch die Zeilenpuffereinheit definiert und an die Blattgeneratoreinheit übermittelt worden ist, parst die Blattgeneratoreinheit die Zeilengruppe ferner in feinere Blätter, die an die Hardwarebeschränkungen des Schablonenprozessors präziser angepasst sind. Insbesondere wird in einer Ausführungsform, wie nachfolgend näher beschrieben, jeder Schablonenprozessor aus einer zweidimensionalen Schieberegistermatrix gebildet. Die zweidimensionale Schieberegistermatrix verschiebt im Wesentlichen Bilddaten „unterhalb“ einer Matrix von Ausführungsbahnen, wobei das Muster der Verschiebung bewirkt, dass jede Ausführungsbahn innerhalb ihrer eigenen jeweiligen Schablone an Daten arbeitet (d. h. jede Ausführungsbahn ihre eigene Schablone von Informationen verarbeitet, um eine Ausgabe für diese Schablone zu erzeugen). In einer Ausführungsform sind Blätter Oberflächenbereiche von Eingabebilddaten, die die zweidimensionale Schieberegistermatrix „ausfüllen“ oder anderweitig in dieselbe geladen werden. If the stanza 503 of the input image data has been defined by the line buffer unit and transmitted to the sheet generator unit, the sheet generator unit further parses the line group into finer sheets that are more precisely matched to the hardware limitations of the template processor. In particular, in one embodiment, As described in more detail below, each template processor is formed from a two-dimensional shift register matrix. The two-dimensional shift register matrix essentially shifts image data "below" a matrix of execution lanes, the pattern of displacement causing each execution lane to work within its own respective template on data (ie, each execution lane processing its own template of information to produce an output for that template to create). In one embodiment, sheets are surface areas of input image data that "populate" or otherwise load the two-dimensional shift register matrix.
Wie in 5b dargestellt, parst der Blattgenerator ein Anfangsblatt 504 von der Zeilengruppe 503 und stellt es dem Schablonenprozessor zur Verfügung (hier entspricht das Datenblatt dem schattierten Bereich, der im Allgemeinen mit der Bezugsnummer 504 gekennzeichnet ist). Wie in den 5c und 5d dargestellt, arbeitet der Schablonenprozessor an dem Blatt der eingegebenen Bilddaten durch effektives Bewegen der überlappenden Schablonen 502 in einer Weise von links nach rechts über das Blatt. Wie in 5d ist die Anzahl der Bildpunkte, für die ein Ausgabewert aus den Daten innerhalb des Blattes berechnet werden könnte, erschöpft (keine anderen Bildpunktpositionen können einen Ausgabewert haben, der aus den Informationen innerhalb des Blattes bestimmt wird). Zur Vereinfachung wurden die Randbereiche des Bildes ignoriert. As in 5b shown, the leaf generator parses a starting sheet 504 from the stanza 503 and provides it to the template processor (here the datasheet corresponds to the shaded area, generally with the reference number 504 is marked). As in the 5c and 5d As shown, the stencil processor operates on the sheet of input image data by effectively moving the overlapping stencils 502 in a way from left to right across the sheet. As in 5d For example, the number of pixels for which an output value could be calculated from the data within the sheet is exhausted (no other pixel positions can have an output value determined from the information within the sheet). For simplicity, the fringes of the image have been ignored.
Wie in 5e ersichtlich, liefert der Blattgenerator dann ein nächstes Blatt 505 für den Schablonenprozessor, um die Operationen fortzusetzen. Zu beachten ist, dass die Anfangspositionen der Schablonen, wenn sie mit der Operation an dem nächsten Blatt beginnen, der nächsten Progression (wie zuvor in 5d dargestellt) vom Erschöpfungspunkt nach rechts auf dem ersten Blatt entsprechen. Mit dem neuen Blatt 505 bewegen sich die Schablonen einfach weiter nach rechts, während der Schablonenprozessor auf dem neuen Blatt auf die gleiche Weise arbeitet wie bei der Verarbeitung des ersten Blattes. As in 5e As can be seen, the sheet generator then delivers a next sheet 505 for the template processor to continue the operations. Note that the starting positions of the templates, when starting the operation on the next sheet, are the next progression (as previously described in FIG 5d shown) from the exhaustion point to the right on the first sheet. With the new sheet 505 The stencils simply move further to the right, while the stencil processor on the new sheet works in the same way as when processing the first sheet.
Zu beachten ist, dass zwischen den Daten des ersten Blattes 504 und den Daten des zweiten Blattes 505 aufgrund der Randbereiche der Schablonen, die einen Ausgabebildpunktort umgeben, eine gewisse Überschneidung vorliegt. Die Überschneidung könnte einfach gehandhabt werden, indem der Blattgenerator die sich überschneidenden Daten zweimal überträgt. In alternativen Implementierungen kann, um dem Schablonenprozessor ein nächstes Blatt zuzuführen, der Blattgenerator damit fortfahren, ausschließlich neue Daten an den Schablonenprozessor zu senden, während der Schablonenprozessor die sich überschneidenden Daten aus dem vorhergehenden Blatt verwendet. It should be noted that between the data of the first sheet 504 and the data of the second leaf 505 there is some overlap due to the margins of the templates surrounding an output pixel location. The overlap could be handled easily by the leaf generator transferring the overlapping data twice. In alternative implementations, to feed a next sheet to the template processor, the sheet generator may continue to send only new data to the template processor while the template processor uses the overlapping data from the previous sheet.
b. Schablonenprozessordesign und -betrieb b. Template processor design and operation
6 zeigt eine Ausführungsform einer Schablonenprozessorarchitektur 600. Wie in 6 dargestellt, beinhaltet der Schablonenprozessor eine Datenberechnungseinheit 601, einen Skalarprozessor 602 und einen zugehörigen Speicher 603 sowie eine E-/A-Einheit 604. Die Datenberechnungseinheit 601 beinhaltet eine Matrix von Ausführungsbahnen 605, eine zweidimensionale Verschiebungsfeldstruktur 606 und getrennte Speicher mit wahlfreiem Zugriff 607, die mit bestimmten Zeilen oder Spalten der Matrix assoziiert sind. 6 shows an embodiment of a template processor architecture 600 , As in 6 As shown, the template processor includes a data calculation unit 601 , a scalar processor 602 and an associated memory 603 as well as an I / O unit 604 , The data calculation unit 601 includes a matrix of trajectories 605 , a two-dimensional displacement field structure 606 and separate random access memory 607 that are associated with particular rows or columns of the matrix.
Die E/A-Einheit 604 ist verantwortlich für das Laden von „eingegebenen“ Datenblättern, die von dem Blattgenerator empfangen wurden, in die Datenberechnungseinheit 601 sowie das Speichern der von dem Schablonenprozessor „ausgegebenen“ Blätter im Blattgenerator. In einer Ausführungsform umfasst das Laden von Blattdaten in die Datenberechnungseinheit 601 das Parsen eines empfangenen Blattes in die Zeilen/Spalten der Bilddaten sowie das Laden der Zeilen/Spalten der Bilddaten in die zweidimensionale Schieberegisterstruktur 606 oder in die jeweiligen Arbeitsspeicher 607 der Zeilen/Spalten der Ausführungsbahnmatrix (wie nachfolgend näher beschrieben). Wird das Datenblatt anfänglich in die Speicher 607 geladen, können die einzelnen Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605 dann die Blattdaten, sofern geeignet (z. B. als Ladebefehl kurz vor der Bearbeitung der Blattdaten) in die zweidimensionale Schieberegisterstruktur 606 der Speicher mit wahlfreiem Zugriff 607 einladen. Nach Beendigung des Einladens eines Datenblattes in die Registerstruktur 606 (ob direkt aus einem Datenblattgenerator oder aus den Speichern 607) arbeiten die Ausführungsbahnen der Ausführungsbahnmatrix 605 an den Daten und schreiben letztendlich die fertigen Daten als ein Blatt direkt „zurück“ in den Datenblattgenerator oder in die Speicher mit wahlfreiem Zugriff 607. Im letzteren Fall ruft die E/A-Einheit 604 die Daten aus den Direktzugriffsspeichern 607 ab, um ein Ausgabeblatt zu bilden, das dann an den Blattgenerator weitergeleitet wird. The I / O unit 604 is responsible for loading "input" data sheets received from the sheet generator into the data calculation unit 601 and storing the sheets "output" from the template processor in the sheet generator. In one embodiment, the loading of sheet data into the data computation unit 601 parsing a received sheet into the lines / columns of image data and loading the lines / columns of image data into the two-dimensional shift register structure 606 or in the respective memory 607 the lines / columns of the execution path matrix (as described in more detail below). Is the datasheet initially in memory 607 loaded, the individual runways within the runway matrix can 605 then the sheet data, if appropriate (e.g., as a load instruction just prior to processing the sheet data) into the two-dimensional shift register structure 606 the random access memory 607 invite. After completing the loading of a data sheet into the register structure 606 (whether directly from a data sheet generator or from the memories 607 ) the execution lanes of the execution lane matrix work 605 on the data and ultimately write the finished data as a sheet directly "back" into the datasheet generator or into the random access memory 607 , In the latter case, the I / O unit calls 604 the data from the random access memories 607 to form an output sheet, which is then forwarded to the sheet generator.
Der Skalarprozessor 602 beinhaltet einen Programmcontroller 609, der die Befehle des Programmcodes des Schablonenprozessors aus dem Skalarspeicher 603 einliest und die Befehle an die Ausführungsbahnen in der Ausführungsbahnmatrix 605 ausgibt. In einer Ausführungsform wird ein einzelner Befehl auf alle Ausführungsbahnen innerhalb der Matrix 605 übertragen, um ein SIMD-ähnliches Verhalten der Datenberechnungseinheit 601 zu bewirken. In einer Ausführungsform beinhaltet das Befehlsformat der Befehle, die aus dem Skalarspeicher 603 gelesen und an die Ausführungsbahnen der Ausführungsbahnmatrix 605 ausgegeben werden, ein sehr langes Befehlswortformat (VLIW), welches mehr als einen Operationscode pro Befehl beinhaltet. In einer weiteren Ausführungsform beinhaltet das VLIW-Format sowohl einen ALU-Operationscode, der eine mathematische Funktion anweist, die von der ALU einer Ausführungsbahn ausgeführt wird (wobei, wie nachstehend beschrieben, in einer Ausführungsform mehr als eine herkömmliche ALU-Operation angegeben sein kann), als auch einen Speicheroperationscode (der eine Speicheroperation für eine spezifische Ausführungsbahn oder eine Gruppe von Ausführungsbahnen anweist). The scalar processor 602 includes a program controller 609 containing the commands of the program code of the template processor from the scalar memory 603 read in and send the commands to the execution lanes in the execution lane matrix 605 outputs. In one embodiment, a single command is applied to all execution lanes within the matrix 605 transmitted to a SIMD-like behavior of the data calculation unit 601 to effect. In one embodiment, the instruction format includes the instructions from the scalar memory 603 read and to the execution lanes of the execution path matrix 605 a very long instruction word format (VLIW), which contains more than one opcode per instruction. In another embodiment, the VLIW format includes both an ALU opcode that directs a mathematical function performed by the ALU of an execution trajectory (where, as described below, in one embodiment, more than one conventional ALU operation may be specified). , as well as a memory operation code (which directs a memory operation for a specific execution lane or a group of execution lanes).
Der Begriff „Ausführungsbahn“ bezieht sich auf eine Gruppe von einer oder mehreren Ausführungseinheiten, die einen Befehl ausführen können (z. B. eine Logikschaltung, die einen Befehl ausführen kann). Eine Ausführungsbahn kann in verschiedenen Ausführungsformen jedoch prozessorähnlichere Funktionen und nicht nur Ausführungseinheiten beinhalten. Beispielsweise kann eine Ausführungsbahn neben einer oder mehreren Ausführungseinheiten auch Logikschaltungen beinhalten, die einen empfangenen Befehl dekodieren, oder für den Fall MIMD-ähnlicherer Architekturen eine Logikschaltung beinhalten, die einen Befehl abruft und dekodiert. In Bezug auf MIMD-ähnliche Ansätze kann, obwohl ein zentraler Programmsteuerungsansatz hier weitgehend beschrieben wurde, auch ein verteilter Ansatz in verschiedenen alternativen Ausführungsformen (z. B. unter anderem auch Programmcode und ein Programmcontroller innerhalb jeder Ausführungsbahn der Matrix 605) implementiert werden. The term "execution lane" refers to a group of one or more execution units that can execute a command (eg, a logic circuit that can execute a command). However, in some embodiments, an execution trajectory may include more processor-like functions rather than only execution units. For example, an execution lane may include, in addition to one or more execution units, logic circuits that decode a received instruction, or, in the case of MIMD-like architectures, a logic circuit that fetches and decodes an instruction. With respect to MIMD-like approaches, although a centralized program control approach has been broadly described herein, a distributed approach may also be used in various alternative embodiments (e.g., including program code and a program controller within each execution path of the matrix 605 ).
Die Kombination einer Ausführungsbahnmatrix 605, eines Programmcontrollers 609 und einer zweidimensionalen Schieberegisterstruktur 606 stellt eine weitgehend anpassbare/konfigurierbare Hardware-Plattform für ein breites Spektrum programmierbarer Funktionen bereit. Beispielsweise können Anwendungssoftwareentwickler in der Lage sein, Kernsysteme mit einem breiten Spektrum unterschiedlicher Funktionsfähigkeiten sowie Abmessungen (z. B. Schablonengrößen) zu programmieren, da die einzelnen Ausführungsbahnen in der Lage sind, eine breite Palette von Funktionen auszuführen und ohne Weiteres auf Eingabebilddaten in der Nähe einer beliebigen Ausgabematrixposition zuzugreifen. The combination of an execution trajectory matrix 605 , a program controller 609 and a two-dimensional shift register structure 606 provides a highly customizable / configurable hardware platform for a wide range of programmable functions. For example, application software developers may be able to program core systems with a wide variety of functional capabilities and dimensions (eg, stencil sizes) because the individual execution paths are capable of performing a wide range of functions and readily to nearby input image data to access any output matrix location.
Abgesehen davon, dass diese als Datenspeicher für Bilddaten genutzt werden, die durch die Ausführungsbahnmatrix 605 bearbeitet werden, können die Arbeitsspeicher 607 zudem eine oder mehrere Wertetabellen verwalten. In verschiedenen Ausführungsformen können eine oder mehrere skalare Wertetabellen auch innerhalb des skalaren Speichers 603 instanziiert werden. Apart from the fact that these are used as data storage for image data by the execution path matrix 605 can be edited, the memory 607 also manage one or more value tables. In various embodiments, one or more scalar value tables may also be within the scalar memory 603 to be instantiated.
Ein skalarer Nachschlagevorgang beinhaltet das Übermitteln desselben Datenwertes aus derselben Wertetabelle von demselben Index an sämtliche Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605. In verschiedenen Ausführungsformen wird das oben beschriebene VLIW-Befehlsformat erweitert, um darüber hinaus einen skalaren Operationscode einzuschließen, der eine vom Skalarprozessor ausgeführte Nachschlageoperation in eine skalare Wertetabelle leitet. Der für die Verwendung mit dem Operationscode angegebene Index kann ein unmittelbarer Operand sein oder von einem anderen Datenspeicherort abgerufen werden. Unabhängig davon umfasst in einer Ausführungsform ein Suchvorgang in einer skalaren Wertetabelle innerhalb des skalaren Speichers im Wesentlichen das Senden des gleichen Datenwertes an alle Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605 während a des gleichen Taktzyklus. A scalar lookup involves transmitting the same data value from the same value table from the same index to all execution lanes within the execution lane matrix 605 , In various embodiments, the VLIW instruction format described above is extended to further include a scalar operation code that directs a look-up operation performed by the scalar processor into a scalar value table. The index specified for use with the opcode may be an immediate operand or may be retrieved from another data location. Regardless, in one embodiment, a search in a scalar value table within the scalar memory essentially involves sending the same data value to all execution lanes within the execution lane array 605 during a of the same clock cycle.
3.0 Zeilenpuffereinheit-Ausführungsformen 3.0 Line Buffer Unit Embodiments
a. Zeilenpuffereinheit-Übersicht a. Line buffer unit index
Aus der obigen Beschreibung in Abschnitt 1.0 wird entnommen, dass in verschiedenen Ausführungsformen der für die Hardwareplattform geschriebene Programmcode unter Verwendung eines einzigartigen virtuellen Codes geschrieben wird, der einen Befehlssatz mit Lade- und Speicherbefehlen beinhaltet, deren Befehlsformat die Eingabe- und Ausgabefeldpositionen z. B. als X-, Y-Koordinaten kennzeichnet. In verschiedenen Implementierungen können die X-, Y-Koordinateninformationen tatsächlich in die Hardwareplattform programmiert werden und von verschiedenen ihrer Komponenten erkannt/verstanden werden. Dies unterscheidet sich beispielsweise von der Übersetzung der X-, Y-Koordination (z. B. innerhalb des Compilers) in unterschiedliche Informationen. Im Fall der zweidimensionalen Schieberegisterstruktur innerhalb des Schablonenprozessors werden die X-, Y-Koordinateninformationen beispielsweise in Registerverschiebungsbewegungen übersetzt. Im Gegensatz dazu können andere Teile der Hardwareplattform die ursprünglich auf der höheren virtuellen Codeebene ausgedrückten X-, Y-Koordinateninformationen empfangen und verstehen. From the above description in section 1.0, it will be appreciated that in various embodiments, the program code written for the hardware platform is written using a unique virtual code that includes an instruction set with load and store instructions whose instruction format includes the input and output field positions, e.g. B. as X, Y coordinates. In various implementations, the X, Y coordinate information may actually be programmed into the hardware platform and recognized / understood by various of its components. This differs, for example, from the translation of the X, Y coordination (eg within the compiler) into different information. For example, in the case of the two-dimensional shift register structure within the template processor, the X, Y coordinate information is translated into register shift motions. In contrast, other parts of the hardware platform may receive and understand the X, Y coordinate information originally expressed at the higher virtual code level.
Wie in 7 dargestellt und in Abschnitt 1.0 beschrieben, drückt ein Programmcode-Entwickler Datenpositionen als X-, Y-Koordinaten mit dem speziellen Befehlsformat auf der virtuellen Codeebene 710 aus. Während der Kompilierungsphase wird der virtuelle Code in Programmcode übersetzt, der genau genommen durch die Hardware (den Objektcode) und entsprechende Konfigurationsinformationen, die in den Hardwarekonfigurationsbereich (z. B. Registerregister) geladen werden, verarbeitet wird. Wie in 7 dargestellt, wird in einer Ausführungsform der Objektcode für ein bestimmtes Kernsystem in den Programmbereich des Skalarprozessors 705 des Schablonenprozessors geladen. As in 7 and described in Section 1.0, a program code developer pushes data locations as X, Y coordinates with the special instruction format at the virtual code level 710 out. During the compilation phase, the virtual code is translated into program code which, strictly speaking, is processed by the hardware (the object code) and corresponding configuration information loaded into the hardware configuration area (eg register register). As in 7 In one embodiment, the object code for a particular core system is shown in the program area of the scalar processor 705 of the template processor.
Im Rahmen des Konfigurationsprozesses lädt die auf dem Skalarprozessor 705 ausgeführte Konfigurationssoftware die entsprechenden Konfigurationsinformationen 711, 712 sowohl in die an den Schablonenprozessor 702 gekoppelte Datenblattgeneratoreinheit 703, als auch an die Zeilenpuffereinheit 701, die neue Datenblätter für den Schablonenprozessor 702 erzeugt, um an den von dem Schablonenprozessor 702 erzeugten Datenblättern zu arbeiten oder diese zu empfangen. Im Allgemeinen können die hierin genannten Datenblätter in Form von X-, Y-Koordinaten eines Gesamtbildes betrachtet werden. Das heißt, sobald ein Bild oder Frame (z. B. in Form einer Anzahl von Bildpunkten pro Zeile, Anzahl von Zeilen, Anzahl von Bildpunkten pro Spalte und Anzahl von Spalten) definiert ist, kann auf jeden Abschnitt bzw. jede Position des Bildes weiterhin mit X, Y-Koordinaten verwiesen werden. As part of the configuration process loads the on the scalar processor 705 The configuration software that was executed contains the corresponding configuration information 711 . 712 both in the template processor 702 coupled data sheet generator unit 703 , as well as to the line buffer unit 701 , the new data sheets for the template processor 702 generated to that of the template processor 702 to work or receive generated datasheets. In general, the data sheets referred to herein may be considered in the form of X, Y coordinates of an overall image. That is, once an image or frame (e.g., in the form of a number of pixels per line, number of lines, number of pixels per column, and number of columns) is defined, each section or position of the image may continue be referenced with X, Y coordinates.
Dementsprechend sind in verschiedenen Ausführungsformen entweder die Datenblattgeneratoreinheit 703 oder die Zeilenpuffereinheit 701 mit Informationen 711, 712 in ihrem jeweiligen Konfigurationsbereich 706, 707 konfiguriert, die eine Informationsplattform bilden, von der aus bestimmte Positionen und/oder Bereiche (z. B. Zeilengruppen, Datenblätter) eines Bildes oder Frames mit X-, Y-Koordinaten identifiziert werden. In verschiedenen Implementierungen/Anwendungen können die X, Y-Koordinaten dieselben X, Y-Koordinaten sein, die auf der Ebene des virtuellen Codes ausgedrückt werden. Accordingly, in various embodiments, either the data sheet generator unit 703 or the line buffer unit 701 with information 711 . 712 in their respective configuration area 706 . 707 which form an information platform from which certain positions and / or areas (eg, stanzas, datasheets) of an image or frame with X, Y coordinates are identified. In various implementations / applications, the X, Y coordinates may be the same X, Y coordinates that are expressed at the virtual code level.
Zu Beispielen für derartige Informationen zählen z. B. die Anzahl aktiver Zeilengruppen in der Zeilenpuffereinheit, die Bildgröße für jede Zeilengruppe (z. B. als eine Menge von vier X-, Y-Koordinaten (eine für jede Ecke) oder ein Paar von Zeilenpaaren X-, Y-Koordinaten (eine für eine untere näher gelegene Ecke und eine für eine obere weiter entfernte Ecke)), die absolute Bildbreite und Bildhöhe, die Schablonengröße (als X-, Y-Werte ausgedrückt, die die Größe einer einzelnen Schablone und/oder des Bereichs der überlappenden Schablonen des Schablonenprozessors definieren), die Datenblatt- und/oder Zeilengruppengröße (z. B. genauso angegeben wie eine Bildgröße, jedoch mit kleineren Abmessungen) usw. Darüber hinaus kann zumindest die Zeilenpuffereinheit 701 mit zusätzlichen Konfigurationsinformationen, wie beispielsweise der Anzahl der Erzeugerkernsystem-Schreibvorgänge und der Anzahl der Abnehmerkernsysteme, die die von der Zeilenpuffereinheit 701 verwalteten Zeilengruppen einlesen, programmiert werden. Die Anzahl der Kanäle und/oder die den Bilddaten zugeordneten Abmessungen sind in der Regel auch als Konfigurationsinformationen enthalten. Examples of such information include e.g. For example, the number of active stanzas in the line buffer unit, the image size for each stanza (eg, as a set of four X, Y coordinates (one for each corner) or a pair of line pairs, X, Y coordinates (a for a lower near corner and an upper farthest corner)), the absolute image width and height, the stencil size (expressed as X, Y values, which is the size of a single stencil and / or the overlapping template area of the stencil) Define template processors), the datasheet and / or stanza size (eg, given the same as an image size but with smaller dimensions), etc. In addition, at least the row buffer unit 701 with additional configuration information, such as the number of host core system writes and the number of customer core systems, that are from the line buffer unit 701 read in managed stanzas, be programmed. The number of channels and / or the dimensions associated with the image data are usually also included as configuration information.
8 zeigt die Verwendung von X-, Y-Koordinaten, um, nur um ein Beispiel anzuführen, Liniengruppen innerhalb eines Bildes zu definieren. Hier sind die N Zeilengruppen 801_1, 801_2 bis 801_N in einem Bild 801 zu sehen. Wie aus 8 ersichtlich, kann jede Zeilengruppe leicht durch Bezugnahme auf X-, Y-Koordinaten innerhalb des Bildes definiert werden, die z. B. einen oder mehrere Eckpunkte einer Zeilengruppe definieren. Somit kann in verschiedenen Ausführungsformen der Name einer Zeilengruppe oder eine andere Datenstruktur, die verwendet wird, um eine bestimmte Zeilengruppe zu definieren, X-, Y-Koordinatenpositionen beinhalten, die mit der Zeilengruppe verbunden sind, um speziell diese zu identifizieren. 8th shows the use of X, Y coordinates to, just to give an example, define line groups within an image. Here are the N stanzas 801_1 . 801_2 to 801_N in a picture 801 to see. How out 8th As can be seen, each row group can be easily defined by referring to X, Y coordinates within the image, e.g. B. define one or more vertices of a stanza. Thus, in various embodiments, the name of a stanza or other data structure used to define a particular stanza may include X, Y coordinate positions associated with the stanza to specifically identify them.
Unter Bezugnahme auf 7 ist zu beachten, dass 7 zeigt, dass ein Datenblattgenerator 703 während der Laufzeit beispielsweise durch X-, Y-Koordinateninformationen, die den gewünschten Datenbereich definieren, von der Zeilenpuffereinheit 701 eine „nächste“ Zeilengruppe (oder einen Teil einer Zeilengruppe) anfordern kann. 8 zeigt nominelle Zeilengruppen „mit voller Breite“, die nur aus vollständigen Reihen von Bilddaten bestehen. In einer alternativen Konfiguration, die als „virtuell groß“ bezeichnet und nachstehend näher beschrieben wird, leitet die Zeilenpuffereinheit 701 anfänglich nur einen ersten oberen Bereich einer Zeilengruppe als Reihen mit voller Breite von Bilddaten weiter. Die nachfolgenden unteren Reihen der Zeilengruppe werden dann vom Datenblattgenerator in zusammenhängenden Blöcken, die kleiner als eine Reihe mit voller Breite sind, speziell und gesondert angefordert. Daher werden Mehrfachanforderungen durch den Datenblattgenerator durchgeführt, um die vollständige Liniengruppe zu erhalten. Hier kann jede derartige Anforderung einen nächstniedrigeren Abschnitt durch X-, Y-Koordinaten definieren, die dem nächsten unteren Abschnitt zuzuordnen sind. With reference to 7 it should be noted that 7 shows that a datasheet generator 703 at runtime, for example, by X, Y coordinate information defining the desired data area from the row buffer unit 701 request a "next" stanza (or part of a stanza). 8th shows full-width nominal stanzas consisting of only complete sets of image data. In an alternative configuration, referred to as "virtually large" and described in more detail below, the line buffer unit forwards 701 Initially, only a first top portion of a row group continues as rows of full width image data. The subsequent lower rows of the stanza are then specifically and separately requested by the spreadsheet generator in contiguous blocks smaller than a full width row. Therefore, multiple requests are made by the datasheet generator to obtain the complete line group. Here, each such request may define a next lower portion by X, Y coordinates to be assigned to the next lower portion.
9a bis 9c zeigen verschiedene Merkmale einer Zeilenpuffereinheit-Ausführungsform 900. Wie in 9a dargestellt, beinhaltet eine Zeilenpuffereinheit einen Speicher 902, in dem Zeilengruppen 903_1 bis 903_N gespeichert sind (z. B. statischer oder dynamischer Direktzugriffsspeicher (SRAM oder DRAM)). 9a zeigt die Aktivität zwischen den verschiedenen Kernsystemen, die die Zeilengruppen 903_1 bis 903_N für ein bestimmtes Bild/einen bestimmten Frame innerhalb des Speichers 902 erzeugen und abnehmen. 9a to 9c show various features of a row buffer unit embodiment 900 , As in 9a As shown, a line buffer unit includes a memory 902 in which stanzas 903_1 to 903_N stored (eg static or dynamic random access memory (SRAM or DRAM)). 9a shows the activity between the different core systems that make up the stanzas 903_1 to 903_N for a specific image / frame within the memory 902 produce and lose weight.
Wie in 9a dargestellt, sendet ein Erzeugerkernsystem K1 über getrennte Zeitinstanzen P1, P2 bis PN neue Zeilengruppen an den Speicher 902. Das Erzeugerkernsystem K1 wird auf einem Schablonenprozessor ausgeführt, der neue Datenblätter erzeugt. Der Datenblattgenerator, der mit dem Schablonenprozessor gekoppelt ist, akkumuliert Datenblätter, um Zeilengruppen zu bilden, und leitet die Zeilengruppen an den Speicher 902 weiter. As in 9a 1, a producer core system K1 sends new stanzas to the memory via separate time instances P1, P2 to PN 902 , The producer core system K1 is executed on a template processor which generates new data sheets. The datasheet generator, which is coupled to the template processor, accumulates datasheets to form stanzas and routes the stanzas to memory 902 further.
Wie auch in 9a dargestellt, gibt es zwei Abnehmerkernsysteme K2, K3, die an den vom Abnehmerkernsystem K1 erzeugten Zeilengruppen 903_1 bis 903_N arbeiten. Hier empfangen die Abnehmerkernsysteme K2 und K3 die erste Zeilengruppe 903_1 zu den Zeitinstanzen C21 bzw. C31. Natürlich treten die Zeitinstanzen C21 und C31 nach der Zeitinstanz P1 auf. Andere Einschränkungen sind ggf. nicht vorhanden. Beispielsweise können C21 und/oder C31 vor oder nach einer der Zeitinstanzen P2 bis PN auftreten. Dabei fordern die jeweiligen Datenblattgeneratoren für die Kernsysteme K2 und K3 eine nächste Zeilengruppe zu einer Zeitinstanz an, die für deren jeweiliges Kernsystem geeignet ist. Wenn irgendeines der Kernsysteme K2, K3 die Zeilengruppe 903_1 vor der Zeitinstanz P1 anfordert, liegt die Anforderung im Leerlauf, bis die Zeilengruppe 903_1 tatsächlich in den Speicher 902 geschrieben ist. In vielen Implementierungen wird ein Erzeugerkernsystem auf einem anderen Schablonenprozessor betrieben als ein Abnehmerkernsystem. As well as in 9a As shown, there are two customer core systems K2, K3 attached to the stanzas generated by the customer core system K1 903_1 to 903_N work. Here, the customer core systems K2 and K3 receive the first stanza 903_1 to the time instances C21 or C31. Of course, the time instances C21 and C31 occur after the time instance P1. Other restrictions may not exist. For example, C21 and / or C31 may occur before or after any of the time instances P2 through PN. In this case, the respective data sheet generators for the core systems K2 and K3 request a next stanza at a time instance which is suitable for their respective core system. If any of the core systems K2, K3 are the stanza 903_1 before the time instance requests P1, the request is idle until the stanza 903_1 actually in the store 902 is written. In many implementations, a generator core system operates on a different template processor than a customer core system.
Denkbar ist, dass Anforderungen von einem oder beiden der Kernsysteme K2 und K3 für alle Zeilengruppen 903_1 bis 903_N vor der Zeitinstanz Pl eintreffen können. Somit können von Abnehmerkernsystemen jederzeit Zeilengruppen angefordert werden. Die Zeilengruppen werden an die Abnehmerkernsysteme weitergeleitet, während diese von denselben angefordert werden, jedoch nur so schnell, wie das Erzeugerkernsystem K1 diese erzeugen kann. In verschiedenen Ausführungsformen erfordern Abnehmerkernsysteme Sequenzgruppen in Folge und empfangen diese ebenfalls in Folge (Kernsystem K2 empfängt Zeilengruppen 902_2 bis 902_N zu Zeitinstanzen C22 bis C2N in Folge). Der Einfachheit halber wird für eine spezielle Zeilengruppe nur ein Erzeugerkernsystem dargestellt. Es ist denkbar, dass verschiedene Ausführungsformen entworfen werden können, um es verschiedenen Erzeugern zu ermöglichen, auf eine gleiche Zeilengruppe zu schreiben (z. B. dann, wenn Erzeuger nicht gewartet werden dürfen, bis alle Erzeuger in die Zeilengruppe geschrieben haben). It is conceivable that requirements of one or both of the core systems K2 and K3 for all stanzas 903_1 to 903_N before the time instance Pl can arrive. Thus, customer core systems can always request stanzas. The stanzas are forwarded to the customer core systems while they are requested by them, but only as fast as the producer core system K1 can generate them. In various embodiments, customer core systems require sequence groups in sequence and also receive them in sequence (core system K2 receives stanzas 902_2 to 902_N to time instances C22 to C2N in sequence). For the sake of simplicity, only one producer core system will be represented for a particular stanza. It is conceivable that various embodiments may be designed to allow different generators to write to a same stanza (eg, if generators are not allowed to wait until all generators have written to the stanza).
In Fällen, in denen es kein Erzeugerkernsystem gibt (weil der oder die Abnehmerkernsysteme die ersten Kernsysteme im DAG-Prozessablauf des Prozessors sind), können die Frames der Bilddaten (beispielsweise über einen direkten Speicherzugriff (DMA) oder von einer Kamera) in den Speicher 902 übertragen und in Zeilengruppen geparst werden. In Fällen, in denen es kein(e) Abnehmerkernsystem(e) gibt (weil das Erzeugerkernsystem das letzte Kernsystem im gesamten Programmablauf des Prozessors ist), können resultierende Zeilengruppen kombiniert werden, um Ausgabeframes zu bilden. In cases where there is no producer core system (because the customer core system (s) are the first core systems in the DAG process flow of the processor), the frames of the image data (for example, direct memory access (DMA) or from a camera) may be stored in memory 902 transferred and parsed into stanzas. In cases where there is no customer core system (s) (because the host core system is the last core system in the entire program flow of the processor), resulting stanzas can be combined to form output frames.
9b zeigt eine detailliertere Ausführungsform einer gesamten Zeilenpuffereinheit 900. Zum Zwecke der Erklärung wird die Zeilenpuffereinheit 900 aus 9b mit der Aktivität aus 9a überlagert. Wie aus 9b ersichtlich, beinhaltet eine Zeilenpuffereinheit 900 einen Speicher 902, der mit der Zeilenpufferschaltungseinheit 901 gekoppelt ist. Die Zeilenpufferschaltungseinheit 901 kann beispielsweise mit einer speziell dafür vorgesehenen Logikschaltung ausgestattet sein. Innerhalb der Zeilenpufferschaltungseinheit 901 ist eine Zeilenpuffer-Schnittstelleneinheit 904_1 bis 904_N für jede Zeilengruppe 903_1 bis 903_N innerhalb des Speichers 902 reserviert. In verschiedenen Ausführungsformen gibt es eine feste Anzahl von Zeilenpuffer-Schnittstelleneinheiten 904_1 bis 904_N, die eine Obergrenze für die Anzahl von Zeilengruppen festlegt, die eine Zeilenpuffereinheit zu jeder Zeitinstanz verwalten kann (sind weniger als N Zeilengruppen aktiv, wird eine entsprechende kleinere Anzahl von Schnittstellen der Zeilenpuffereinheit aktiviert und zu einem beliebigen Zeitpunkt in Betrieb genommen). 9b shows a more detailed embodiment of an entire row buffer unit 900 , For the purpose of explanation, the line buffer unit 900 out 9b with the activity off 9a superimposed. How out 9b can be seen, includes a line buffer unit 900 a memory 902 connected to the line buffer circuit unit 901 is coupled. The line buffer circuit unit 901 For example, it can be equipped with a dedicated logic circuit. Within the line buffer circuit unit 901 is a line buffer interface unit 904_1 to 904_N for each stanza 903_1 to 903_N inside the store 902 reserved. In various embodiments, there are a fixed number of line buffer interface units 904_1 to 904_N that sets an upper limit on the number of stanzas a row buffer unit can manage at each instance of time (if less than N stanzas are active, a corresponding smaller number of line buffer unit interfaces will be activated and put into service at any one time).
Wie in 9b dargestellt, bearbeitet die Zeilenpuffereinheit 900 mit einer Gesamtanzahl von N Zeilenpuffer-Schnittstelleneinheiten 904 innerhalb der Zeilenpufferschaltungseinheit 901 eine maximale Anzahl von Zeilengruppen. Darüber hinaus kann bei einer größten zulässigen Zeilengruppengröße (bei der die Zeilengruppengröße ein konfigurierbarer Parameter ist) eine ungefähre Größe für den Speicher 902 bestimmt werden (um Hardware-Effizienz zu ermöglichen, kann natürlich ein kleinerer Speicherbedarf instanziiert werden, wobei N Zeilengruppen mit maximaler Größe nicht gleichzeitig zugelassen werden können). As in 9b represented, processes the line buffer unit 900 with a total of N line buffer interface units 904 within the line buffer circuit unit 901 a maximum number of stanzas. In addition, with a maximum allowed stanza size (where the stanza size is a configurable parameter), an approximate size for the store may be 902 (to allow for hardware efficiency, of course, a smaller amount of memory can be instantiated, whereby N maximum size stanzas can not be allowed at the same time).
Jede Zeilenpuffer-Schnittstelleneinheit 904_1 bis 904_N ist verantwortlich für die Verarbeitung der Erzeuger- und Abnehmeranforderungen für eine spezielle ihr zugewiesene Zeilengruppe. Beispielsweise verarbeitet die Zeilenpuffer-Schnittstelleneinheit 904_1 die Anfrage von dem Erzeuger K1 zu der Zeitinstanz Pl, um die Zeilengruppe 903_1 zu speichern, und verarbeitet die Anforderungen von den Abnehmerkernsystemen K2 und K3 für die Zeilengruppe 903_1. In Reaktion auf den ersteren schreibt die Zeilenpuffer-Schnittstelleneinheit 904_1 die Zeilengruppe 903_1 in den Speicher 902. In Reaktion auf die letzteren führt die Zeilenpuffer-Schnittstelleneinheit 904_1 jeweilige Lesevorgänge der Zeilengruppe 903_1 aus dem Speicher 902 aus und leitet die Zeilengruppe 903_1 K3 jeweils zu den Zeitinstanzen C21 bzw. C31 an die Abnehmer K2 weiter. Each line buffer interface unit 904_1 to 904_N is responsible for processing the producer and buyer requests for a specific stanza assigned to it. For example, the line buffer interface unit processes 904_1 the request from the producer K1 to the time instance P1 to the stanza 903_1 and processes the requests from customer core systems K2 and K3 for the stanza 903_1 , In response to the former, the line buffer interface unit writes 904_1 the stanza 903_1 in the store 902 , In response to the latter, the line buffer interface unit performs 904_1 respective readings of the stanza 903_1 from the store 902 and directs the stanza 903_1 K3 in each case to the time instances C21 and C31 to the customer K2 on.
Nachdem alle Abnehmer einer Zeilengruppe ihre Kopie der Zeilengruppe weitergeleitet haben, ist die Zeilenpuffer-Schnittstelleneinheit „frei“ und kann einer anderen Zeilengruppe zugeordnet werden. Wenn beispielsweise die Zeilengruppe 903_1 die erste Zeilengruppe innerhalb eines ersten Bildframes einer Folge von Frames darstellt, kann nach dem Weiterleiten der Zeilengruppe 903_1 an die Abnehmer K2 und K3 zu den Zeitinstanzen C21 und C31 die Zeilenpuffer-Schnittstelleneinheit 904_1 als nächstes zugeordnet werden, um die erste Zeilengruppe innerhalb des nächsten, zweiten Bildframes der Folge von Frames zu verarbeiten. Auf diese Weise kann die Zeilenpufferschaltungseinheit 901 als einen „Pool“ von Zeilenpuffer-Schnittstelleneinheiten 904 betrachtet werden, wobei jeder Schnittstelleneinheit eine neue Zeilengruppe zugewiesen wird, die zu verwalten ist, nachdem ihre unmittelbar vorangehende Zeilengruppe an ihren letzten Abnehmer geliefert wurde. Somit gibt es eine Rotation von Schnittstelleneinheiten, während diese wiederholt eintreffen und aus einem „freien Pool“ von Zeilenpuffer-Schnittstelleneinheiten, die ihren letzten Abnehmer bedient haben und auf ihre nächste Zeilengruppe warten, entfernt werden. After all recipients of a stanza have passed their copy of the stanza, the line buffer interface unit is "free" and can be assigned to a different stanza. For example, if the stanza 903_1 The first row group within a first frame of a sequence of frames may be after forwarding the stanza 903_1 to the customers K2 and K3 at the time instances C21 and C31, the line buffer interface unit 904_1 next to process the first stanza within the next, second frame of the sequence of frames. In this way, the line buffer circuit unit 901 as a "pool" of line buffer interface units 904 Each interface unit is assigned a new stanza to be managed after its immediately preceding stanza has been delivered to its last customer. Thus, there is rotation of interface units as they repeatedly arrive and are removed from a "free pool" of line buffer interface units that have serviced their last customer and are waiting for their next stanza.
9c zeigt eine Ausführungsform der Rotation im Detail. Wie in 9c dargestellt, wird eine verfügbare Zeilenpuffer-Schnittstelleneinheit aus einem freien Pool von Zeilenpuffer-Schnittstelleneinheiten innerhalb der Zeilenpufferschaltungseinheit 910 ausgewählt. Die Zeilenpuffer-Schnittstelleneinheit wird dann mit geeigneten Konfigurationsinformationen 911 (z. B. X-, Y-Positionsdaten der neuen Zeilengruppe oder eines linearen Speicheradressenäquivalents) konfiguriert. Hier in 9b ist zu beachten, dass jede Zeilenpuffer-Schnittstelleneinheit einen Konfigurationsregisterbereich 905 aufweisen kann, in dem die besagten Konfigurationsinformationen aufbewahrt werden. 9c shows an embodiment of the rotation in detail. As in 9c 1, an available line buffer interface unit becomes a free pool of line buffer interface units within the line buffer circuit unit 910 selected. The line buffer interface unit is then provided with appropriate configuration information 911 (for example, X, Y position data of the new stanza, or a Linear Memory Address Equivalent). Here in 9b Note that each line buffer interface unit has a configuration register area 905 in which the said configuration information is kept.
Die Zeilenpuffer-Schnittstelleneinheit fährt dann damit fort, Erzeuger- und Abnehmeranforderungen für ihre neu zugewiesene Zeilengruppe 912 zu verarbeiten. Nachdem der letzte Erzeuger in die Zeilengruppe geschrieben hat (in verschiedenen Ausführungsformen gibt es nur einen Erzeuger pro Zeilengruppe) und nachdem der letzte Abnehmer mit der Version der Zeilengruppe versehen wurde, die von ihrem bzw. ihren Erzeuger(n) geschrieben wurde, wird die Zeilenpuffer-Schnittstelleneinheit in den freien Pool zurückgeführt, und der Prozess 910 für eine nächste Zeilengruppe wiederholt. Die Steuerlogikschaltung innerhalb der Zeilenpufferschaltungseinheit 901, die den Steuerablauf von 9c überwacht, ist der Einfachheit halber in 9b nicht dargestellt. The line buffer interface unit then proceeds to generate and receive requests for its newly assigned stanza 912 to process. After the last creator has written to the stanza (in various embodiments, there is only one creator per stanza) and after the last taker has been provided with the version of the stanza written by his or her creator (s), the line buffer becomes Interface unit returned to the free pool, and the process 910 repeated for a next stanza. The control logic circuit within the line buffer circuit unit 901 that control the flow of 9c is monitored, for simplicity's sake 9b not shown.
b. programmierbare Registerbereichsausführungen b. programmable register area designs
In Bezug auf die aktualisierte Konfigurationsinformationen 911, die im Rahmen der Zuweisung einer nächsten Zeilengruppe an einer Zeilenpuffer-Schnittstelleneinheit vorgesehen ist, verarbeitet die Zeilenpuffereinheit 900 selbst im Normalfall eine statische Anordnung von z. B. nur einem festen Erzeuger, der eine feste Gruppe von einem oder mehreren Abnehmern speist. In diesem Fall sind die primären Konfigurationsinformationen (z. B. die Zeilengruppengröße, die Anzahl der Abnehmer usw.) ebenfalls geeignet, statisch zu sein und werden sich von Zeilengruppe zu Zeilengruppe nicht ändern. Stattdessen identifizieren die an eine Zeilenpuffer-Schnittstelleneinheit gelieferten neuen Konfigurationsinformationen hauptsächlich die neue Zeilengruppe (z. B. die Position der Zeilengruppe im Speicher usw.). Kompliziertere potenzielle Anordnungen/Entwürfe sind jedoch möglich. Einige davon werden nachfolgend näher beschrieben. Regarding the updated configuration information 911 that is provided in the context of assigning a next stanza to a line buffer interface unit, processes the line buffer unit 900 even in the normal case, a static arrangement of z. For example, only one fixed producer who feeds a fixed group of one or more customers. In this case, the primary configuration information (eg, the stanza size, the number of customers, etc.) is also suitable for being static and will not change from stanza to stanza. Instead, the new configuration information provided to a line buffer interface unit mainly identifies the new stanza (e.g., the location of the stanza in memory, etc.). However, more complicated potential arrangements / designs are possible. Some of these are described in more detail below.
9d zeigt eine Ausführungsform des Inhalts des Registerbereichs einer Zeilenpuffer-Schnittstelleneinheit (z. B. des Inhalts des Registerbereichs 905_1 aus 9b). Eine Beschreibung einiger der Registerfelder folgt unmittelbar. 9d Fig. 11 shows an embodiment of the contents of the register area of a line buffer interface unit (eg, the contents of the register area 905_1 out 9b ). A description of some of the register fields follows immediately.
Das LB_Enable-Feld 921 aktiviert im Wesentlichen eine Zeilenpuffer-Schnittstelleneinheit und wird im Rahmen des Prozesses der Entnahme der Zeilenpuffer-Schnittstelleneinheit aus dem freien Pool „eingestellt“. Das Num_Channels-Feld 922 definiert die Anzahl der Kanäle innerhalb der Bilddaten der Zeilengruppe. In einer Ausführungsform kann das Num_Channels-Feld 922 verwendet werden, um die Gesamtmenge an Daten pro Zeilengruppe zu bestimmen. Beispielsweise beinhaltet ein Videostrom häufig eine Framesequenz aus roten (R) Bildpunkten, einer Framesequenz aus blauen (B) Bildpunkten und einer Framesequenz aus grünen (G) Bildpunkten. Somit gibt es für jede Zeilengruppe tatsächlich drei Zeilengruppen von Informationen (R, G und B). The LB_Enable field 921 essentially activates a line buffer interface unit and is "set" from the free pool as part of the process of extracting the line buffer interface unit. The Num_Channels field 922 defines the number of channels within the image data of the stanza. In one embodiment, the Num_Channels field 922 used to determine the total amount of data per stanza. For example, a video stream often includes a frame sequence of red (R) pixels, a frame sequence of blue (B) pixels, and a frame sequence of green (G) pixels. Thus, for each stanza, there are actually three stanzas of information (R, G and B).
Das Num_Consumers-Feld 923 beschreibt die Anzahl der Abnehmer, von denen die Zeilengruppe angefordert wird. In einer Ausführungsform wird die Zeilenpuffer-Schnittstelleneinheit in den freien Pool eingegeben, nachdem eine Zeilengruppeninstanz, die dem Wert in dem Num_Consumers-Feld 923 entspricht, einige Male geliefert wurde. The Num_Consumers field 923 describes the number of customers from which the stanza is requested. In one embodiment, the line buffer interface unit is entered into the free pool after a stanza instance equal to the value in the num_consumers field 923 corresponds, was delivered several times.
Das Row_Width-Feld 924 definiert die Breite einer Gruppe mit voller Zeile (z. B. in einer Anzahl von Bildpunkten). Zu beachten ist, dass der Wert „Row_Width 924“ als X-Koordinatenwert ausgedrückt werden kann, der vom Compiler bereitgestellt wird. Das FB_Rows-Feld 926 definiert die Höhe einer Gruppe mit voller Zeile (z. B. in einer Anzahl von Bildpunkten). Zu beachten ist, dass das FB_Rows-Feld 924 als ein Y-Koordinatenwert ausgedrückt werden kann, der von dem Compiler bereitgestellt wird. The Row_Width field 924 defines the width of a group with full line (eg in a number of pixels). Note that the value Row_Width 924 Can be expressed as an X coordinate value provided by the compiler. The FB_Rows field 926 defines the height of a group with full line (eg in a number of pixels). Note that the FB_Rows field 924 can be expressed as a Y coordinate value provided by the compiler.
Das Feld FB_Base_Address 930 definiert die Position der Zeilengruppe im Speicher der Zeilenpuffereinheit. In einem als „vollen“ Zeilengruppenmodus bezeichneten ersten Betriebsmodus wird im Speicher auf eine Zeilengruppe voller Größe zugegriffen (Zeilengruppen werden von den Erzeugern empfangen und mit der gesamten Menge ihrer jeweiligen Daten an die Abnehmer geliefert). Im vollen Zeilengruppenmodus können das Num_Channels-Feld 922, das Row_Width-Feld 924 und das FB_Rows-Feld 926 mit dem FB_Address-Feld 930 verwendet werden, um den Bereich von Adressen zu bestimmen, die auf den Speicher angewendet werden sollen, um auf eine volle Zeilengruppe vollständig zugreifen zu können. Zusätzlich können dieselben Parameter verwendet werden, um eine Anforderung von einem Datenblattgenerator zu „übersetzen“, der die Zeilengruppe in X-, Y-Koordinaten in eine lineare Speicheradresse angefordert hat. The field FB_Base_Address 930 defines the position of the stanza in the memory of the row buffer unit. In a first mode of operation, referred to as a "full" stanza mode, a full size stanza is accessed in memory (stanzas are received by the generators and with the entire amount of their respective data delivered to the customers). In full stanza mode, the Num_Channels field can be used 922 , the Row_Width field 924 and the FB_Rows field 926 with the FB_Address field 930 used to determine the range of addresses to be applied to memory in order to fully access a full stanza. In addition, the same parameters can be used to "translate" a request from a datasheet generator that has requested the X, Y coordinate stanza into a linear memory address.
Die VB_Enable-, VB_Rows-, VB_Cols-, Num_Reuse_Rows- und VB_Base_Address-Felder 925, 927, 928, 931 werden in einem anderen Betriebsmodus verwendet, der als der „virtuell große“ Zeilengruppenmodus bezeichnet und weiter unten näher beschrieben wird. The VB_Enable, VB_Rows, VB_Cols, Num_Reuse_Rows, and VB_Base_Address fields 925 . 927 . 928 . 931 are used in another mode of operation, referred to as the "virtual large" stanza mode, and described below.
Während 9d den Konfigurationsregisterbereich 905 für eine Einzelzeilenpuffer-Schnittstelleneinheit darstellte, zeigt 9e im Gegensatz dazu eine Ausführungsform des Inhalts des globalen Konfigurationsregisterbereichs 907 für die gesamte Zeilenpufferschaltungseinheit 901. Während der Puffer-Schnittstelleneinheit-Registerbereich pro Zeile von 9d auf eine bestimmte Zeilengruppe fokussiert ist, ist der globale Registerraum 907 aus 9e im Gegensatz dazu auf das Verständnis des Parsens verschiedener Zeilengruppen aus dem gleichen Bild, sowie anderer Informationen fokussiert, die für die Erzeuger-/Abnehmer-Kombination spezifisch und mit der Verarbeitung des Bildes verbunden sind. While 9d the configuration register area 905 for a single line buffer interface unit 9e in contrast, an embodiment of the contents of the global configuration register area 907 for the entire line buffer circuit unit 901 , During the buffer interface unit register area per line of 9d focused on a particular stanza, is the global register space 907 out 9e in contrast, focused on understanding the parsing of different stanzas from the same image, as well as other information specific to the producer / purchaser combination and associated with the processing of the image.
Wie in 9e dargestellt, beinhaltet eine Ausführungsform des globalen Registerbereichs die Anzahl der Kanäle 932 und die Anzahl der Abnehmer 933 für ein bestimmtes Bild. Der Einfachheit halber wird in dem Registerbereich von 9e nur ein Bild mit einer Gruppe von Erzeugern und Abnehmern (z. B. nur einen einzigen Videostream und einen einzigen Punkt in einem DAG) betrachtet. Denkbar ist, dass mehrere Instanzen des Registerbereichs von 9e zugewiesen werden, um der Zeilenpufferschaltungseinheit ein effektives Multitasking zu ermöglichen. As in 9e 1, one embodiment of the global register area includes the number of channels 932 and the number of customers 933 for a specific picture. For the sake of simplicity, in the register area of 9e looking at just one picture with a group of producers and customers (eg just a single video stream and a single point in a DAG). It is conceivable that multiple instances of the register area of 9e to allow the line buffer circuit unit to effectively multitask.
Eine erste Form von Multitasking befindet sich innerhalb einer DAG- oder Software-Pipeline, die auf dem Bildprozessor implementiert ist. Hier könnte die gleiche Zeilenpuffereinheit dafür konfiguriert sein, die Zeilengruppierung für zwei verschiedene Knoten innerhalb des DAG oder für zwei verschiedene Phasen der Pipeline zu behandeln (das heißt, eine einzelne Zeilenpuffereinheit könnte mehr als einen Schablonenprozessor unterstützen). Die verschiedenen Knoten/Phasen könnten leicht unterschiedliche Anzahlen von Abnehmern haben, in vielen Fällen sind jedoch die gleichen Bild- und Schablonengrößencharakteristiken wahrscheinlich. Eine zweite Form von Multitasking läuft über mehrere verschiedene DAGs und/oder mehrere unterschiedliche Pipelines, die auf der gleichen Bildprozessor-Hardware implementiert sind. Beispielsweise könnte ein Bildprozessor mit vier Schablonenprozessoren gleichzeitig zwei völlig unterschiedliche zweistufige Pipelines ausführen, die jeweils völlig unterschiedliche Bildgrößen mit völlig unterschiedlichen Schablonenabmessungen verarbeiten. A first form of multitasking resides within a DAG or software pipeline implemented on the image processor. Here, the same row buffer unit could be configured to handle the row grouping for two different nodes within the DAG or for two different phases of the pipeline (that is, a single row buffer unit could support more than one template processor). The various nodes / phases could easily have different numbers of customers, but in many cases the same image and template size characteristics are likely. A second form of multitasking runs over several different DAGs and / or several different pipelines implemented on the same image processor hardware. For example, an image processor with four template processors could simultaneously execute two completely different two-stage pipelines, each processing completely different image sizes with completely different template dimensions.
Unter erneuter Bezugnahme auf die spezielle Ausführungsform von 9e ist zu beachten, dass ein bestimmter Knoten in einem DAG oder zwischen Pipeline-Phasen durch die Anzahl von Kanälen im Bild, die Bildgröße, die Abmessungen der anwendbaren Schablone und die Anzahl der Abnehmer der Zeilengruppen umfassend charakterisiert werden kann (9e geht wiederum von einen Erzeuger pro Zeilengruppe aus, es können jedoch mehr als ein Erzeuger in eine einzige Zeilengruppe schreiben, wobei in diesem Fall der globale Registerbereich aus 9e auch ein Feld für die Anzahl der Erzeuger beinhalten würde). Die Felder Num_Channels und Num_Consumers 932, 933 sind im Wesentlichen die gleichen wie die entsprechenden Felder 922, 923 aus 9c. Referring again to the specific embodiment of FIG 9e It should be noted that a particular node in a DAG or between pipeline phases may be characterized by the number of channels in the image, the image size, the dimensions of the applicable template and the number of users of the stanzas ( 9e again assumes one producer per stanza, but more than one generator can write to a single stanza, in which case the global register area is off 9e would also include a field for the number of producers). The Num_Channels and Num_Consumers fields 932 . 933 are essentially the same as the corresponding fields 922 . 923 out 9c ,
Die Bildfelder 934, 935 für Image_Size und Stencil_Dimension beschreiben im Wesentlichen die Abmessungen des zu bearbeitenden Bildes und die Abmessungen der Schablone, die auf den Zeilengruppen arbeiten, die aus dem Bild geschnitzt werden sollen. Zu beachten ist, dass beide Felder 934, 935 in Form von X-, Y-Koordinatenwerten ausgedrückt und vom Compiler bereitgestellt werden können. Darüber hinaus verwendet in einer Ausführungsform die Steuerlogikschaltung innerhalb der Zeilenpufferschaltungseinheit (in 9b nicht dargestellt) die Image_Size- und Stencil_Dimension-Felder 934, 935, um die Row_Width- 924, FB_Rows- 926 und FB_Base_Address-Werte 930 zu bestimmen, die in einen Registerbereich einer Zeilenpuffer-Schnittstelle geladen werden, wenn die Zeilenpuffer-Schnittstelleneinheit zugeordnet ist, um Zeilengruppen von der Erzeuger-/Abnehmergruppe zu verarbeiten, auf die sich die globalen Informationen beziehen. In einer alternativen oder weiteren Ausführungsform wird die Bildgröße als zwei getrennte Werte, image_width und image_height ausgedrückt, die einen eigenen separat adressierbaren Registerbereich haben können. Ebenso kann die Schablonengröße als zwei getrennte Werte, stencil_width und stencil_height ausgedrückt werden, die einen eigenen separat adressierbaren Registerbereich haben können. The picture fields 934 . 935 for Image_Size and Stencil_Dimension essentially describe the dimensions of the image to be edited and the dimensions of the stencil that work on the stanzas to be carved out of the image. It should be noted that both fields 934 . 935 in the form of X, Y coordinate values and can be provided by the compiler. Moreover, in one embodiment, the control logic circuit within the line buffer circuit unit (in 9b not shown) the Image_Size and Stencil_Dimension fields 934 . 935 to retrieve the Row_Width 924 , FB_Rows- 926 and FB_Base_Address values 930 which are loaded into a register area of a line buffer interface when the line buffer interface unit is allocated to process stanzas from the producer / customer group to which the global information relates. In an alternative or further embodiment, the image size is expressed as two separate values, image_width and image_height, which may have their own separately addressable register area. Similarly, the template size may be expressed as two separate values, stencil_width and stencil_height, which may have their own separately addressable register area.
Row_Width 924 ist direkt aus den Informationen der Image_Size 934 erhältlich. Wenn beispielsweise Image_Size als das X-, Y-Koordinatenpaar am entferntesten Bildpunkt vom Bildursprung (obere rechte Ecke, wenn sich der Ursprung an der unteren linken Ecke befindet) ausgedrückt wird, kann Row_Width als der X-Koordinatenwert bestimmt werden. Row_Width 924 is directly from the information of Image_Size 934 available. For example, if Image_Size is the X, Y coordinate pair farthest pixel from the image origin (upper right corner when the origin is at the lower left corner), Row_Width may be determined as the X coordinate value.
Die Felder FB_Rows und FB_Base_Address 926, 930 können aus den Image_Size- und Stencil_Dimension-Feldern 934, 935 ermittelt werden. Hier kann insbesondere die Höhe jeder Zeilengruppe (FB_Rows 926) aus der Höhe des Bildes (Y-Koordinatenwert von Image_Size 934) und der Schablonenhöhe (Y-Koordinatenwert der Stencil_Dimension 935) berechnet werden. Sobald die Höhe der Zeilengruppen bekannt ist, kann auch die Anzahl der zu parsenden Zeilengruppen aus dem Bild und die Startlinearadresse für jede der besagten Zeilengruppen im Speicher (FB_Base_Adresse 930) bestimmt werden. The fields FB_Rows and FB_Base_Address 926 . 930 can from the Image_Size and Stencil_Dimension fields 934 . 935 be determined. In particular, the height of each stanza (FB_Rows 926 ) from the height of the image (Y coordinate value of Image_Size 934 ) and the template height (Y coordinate value of the Stencil_Dimension 935 ) be calculated. Once the height of the stanzas is known, the number of stanzas to be parsed from the image and the starting linear address for each of the stanzas in memory (FB_Base_Adresse 930 ).
Wenn also in einer Ausführungsform eine Zeilenpuffereinheit damit beauftragt ist, eine Zeilengruppe für eine bestimmte Erzeuger-/Abnehmer-Kombination zu verarbeiten, deren globaler Registerbereich durch die Registerfelder von 9e gekennzeichnet ist, werden die oben beschriebenen Bestimmungen gleichzeitig berechnet und die jeweiligen FB_Width- 924, FB_Rows- 926, Base_Address-Werte 934 zusammen mit den direkt kopierten Num_Channels 922 und Num_Consumers 923 in den spezifischen Registerbereich der Zeilenpuffer-Schnittstelleneinheit geladen. Logikschaltungen und Datenpfade können daher zwischen dem globalen Registerbereich und jeder Instanz des Registerbereichs der Zeilenpuffer-Schnittstelleneinheit vorhanden sein, um die besagten Bestimmungen und Datenübertragungen auszuführen. Thus, in one embodiment, when a line buffer unit is tasked with processing a stanza for a particular producer / user combination, its global register area is passed through the register fields of 9e marked, the provisions described above are calculated simultaneously and the respective FB_Width 924 , FB_Rows- 926 , Base_Address values 934 together with the directly copied Num_Channels 922 and Num_Consumers 923 loaded in the specific register area of the line buffer interface unit. Logic circuits and data paths may therefore exist between the global register area and each instance of the register area of the line buffer interface unit to carry out said determinations and data transfers.
In einer alternativen Ausführungsform führt der Compiler die jeweiligen Berechnungen durch, wodurch ein Großteil, wenn nicht gar der gesamte globale Registerbereich beseitigt wird. Hier kann beispielsweise der Compiler für jede Zeilengruppe den Base_Address-Wert ermitteln und die Werte in eine Nachschlagetabelle innerhalb der Zeilenpufferschaltungseinheit einladen. Die Werte werden aus der Nachschlagetabelle abgerufen und, sobald die entsprechenden Zeilengruppen konfiguriert sind, in einen Registerbereich der Zeilenpuffer-Schnittstelleneinheit geladen. Es können auch verschiedene Kombinationen zwischen diesen beiden Extremen (Hardware-improvisiert und statisch von einem Compiler ermittelt) implementiert werden. In an alternative embodiment, the compiler performs the respective computations, thereby eliminating much, if not all, of the global register area. Here, for example, the compiler may determine the Base_Address value for each row group and load the values into a lookup table within the line buffer circuit unit. The values are retrieved from the lookup table and, once the corresponding stanzas are configured, loaded into a register area of the line buffer interface unit. It is also possible to implement various combinations between these two extremes (hardware improvised and statically determined by a compiler).
Obwohl die obigen Ausführungsformen das Aufbewahren der Konfigurationsinformationen in der Registerschaltung (dem „Registerbereich“) hervorgehoben haben, können in anderen oder kombinierten Ausführungsformen Konfigurationsinformationen im Speicher (wie z. B. einem Pufferspeicher) oder in anderen Speichern oder Informationsaufbewahrungsschaltungen aufbewahrt werden. Although the above embodiments have highlighted the storage of the configuration information in the register circuit (the "register area"), in other or combined embodiments, configuration information may be stored in memory (such as a buffer memory) or in other memory or information storage circuits.
c. Zeilenpuffereinheit-Ausführungsformen und Modus „Vollzeilengruppe“ im Vergleich zum Modus „Virtuell groß“c. Row Buffer Unit Embodiments and Full Rule Group Mode Compared to Large Virtual Mode
Die obigen Erklärungen sind weitgehend auf den Modus „Vollzeilengruppe“ gerichtet, bei dem Zeilengruppen zwischen den Datenblattgeneratoren und der Zeilenpuffereinheit als vollständige, ganze Zeilengruppen bezeichnet und übermittelt werden. In einem anderen als „virtuell groß“ bezeichneten Modus werden Zeilengruppen zwischen den Datenblattgeneratoren als oberer Abschnitt mit voller Breite und unterer Abschnitt, der in getrennten, diskreten Segmenten vervollständigt wird, bezeichnet und übermittelt. The above explanations are largely directed to the "full-line group" mode in which stanzas between the datasheet generators and the row buffer unit are referred to as complete, whole stanzas and transmitted. In another mode, called "virtually large", stanzas between the data sheet generators are referred to as the upper full-width section and lower section completed in separate, discrete segments.
10a und 10b zeigen eine Darstellung einer exemplarischen Sequenz des Modus „Virtuell groß“. Wie in 10a dargestellt, ist eine Zeilengruppe anfänglich als ein oberer Abschnitt 1003 von Reihen mit voller Breite und ein erster unterer Abschnitt 1004_1 mit nur einem ersten, kürzeren Breitensegment ausgebildet. Die anfängliche Bildung einer Zeilengruppe kann durch einen Erzeuger-Datenblattgenerator an eine Zeilenpuffereinheit oder durch eine Zeilenpuffereinheit an einen Abnehmer-Datenblattgenerator geliefert werden. 10a and 10b show a representation of an exemplary sequence of the mode "Virtual large". As in 10a As shown, a row group is initially as an upper portion 1003 full width rows and a first lower portion 1004_1 formed with only a first, shorter width segment. The initial formation of a stanza may be provided by a generator datasheet generator to a row buffer unit or by a row buffer unit to a customer datasheet generator.
Im Fall eines Erzeugers wird die Zeilengruppe gebildet, nachdem die Schablonen 1002 über dem unteren Abschnitt 1004_1 die Verarbeitung abgeschlossen haben (die ungefähre Schablonenpositionierung ist in 10b zu sehen). Nachdem der Erzeuger-Schablonenprozessor über dem unteren Abschnitt 1004_1 die Verarbeitung abgeschlossen hat, fahren die Schablonen horizontal weiter nach rechts. Letztendlich werden diese über einem nächsten unteren Abschnitt 1004_2 die Verarbeitung fortsetzen. Nach Beendigung des nächsten unteren Abschnitts 1004_2 wird der nächste untere Abschnitt 1004_2 von dem Datenblattgenerator an die Zeilenpuffereinheit gesendet, die diesen in dem Speicher an der richtigen Position, z. B. „neben" dem ersten unteren Abschnitt 1004_1, speichert. Der Vorgang wird fortgesetzt, bis die Zeilengruppe vollständig in den Zeilenpufferspeicher geschrieben ist. In the case of a producer, the stanza is formed after the templates 1002 above the lower section 1004_1 finished processing (the approximate template positioning is in 10b to see). After the Producer Template processor above the lower section 1004_1 When the processing has finished, the stencils continue horizontally to the right. Eventually these will be over a next lower section 1004_2 continue processing. After completing the next lower section 1004_2 will be the next lower section 1004_2 sent from the datasheet generator to the line buffer unit which stores it in memory at the correct location, e.g. B. "next to" the first lower section 1004_1 stores. The process continues until the stanza is completely written to the line buffer.
Im Fall von Abnehmern wird die Zeilengruppe anfänglich, wie in 10a dargestellt, an den Datenblattgenerator geliefert. Der Schablonenprozessor arbeitet über dem ersten Abschnitt 1004_1 der Zeilengruppe. Nach Beendigung der Verarbeitung des ersten Abschnitts 1004_1 fordert der Datenblattgenerator den nächsten unteren Abschnitt 1004_2 an, der aus dem Speicher abgerufen und von der Zeilenpuffereinheit geliefert wird. Der Vorgang wird fortgesetzt, bis die Zeilengruppe vollständig verarbeitet ist. In the case of customers, the stanza becomes initial, as in 10a shown, delivered to the data sheet generator. The template processor works over the first section 1004_1 the stanza. After finishing the processing of the first section 1004_1 the datasheet generator asks for the next lower section 1004_2 which is retrieved from memory and provided by the row buffer unit. The process continues until the stanza is completely processed.
Zu beachten ist, dass sowohl für Erzeuger als auch für Abnehmer untere Abschnitte durch den Datenblattgenerator spezifisch identifiziert werden. Das heißt, sowohl im Erzeugerfall als auch im Abnehmerfall wird der untere Abschnitt 1004_2 durch den Datenblattgenerator spezifisch identifiziert, während die Zeilenpuffereinheit speziell auf den Speicher zugreift, um den unteren Abschnitt 1004_2 zu speichern/abzurufen. In einer Ausführungsform identifiziert der Datenblattgenerator den unteren Abschnitt 1004_2 durch X-, Y-Koordinatenwerte, die basierend auf den vom Compiler bereitgestellten Informationen betrachtet werden (beispielsweise eine der Ecken des unteren Abschnitts 1004_2, alle vier Ecken des unteren Abschnitts 1004_2, nur ein X-Koordinatenwert usw.). It should be noted that for both growers and customers, lower sections are specifically identified by the data sheet generator. That is, both in the case of the producer and in the case of the customer becomes the lower section 1004_2 specifically identified by the datasheet generator, while the line buffer unit accesses the memory specifically to the lower portion 1004_2 to store / retrieve. In one embodiment, the datasheet generator identifies the lower portion 1004_2 by X, Y coordinate values which are considered based on the information provided by the compiler (for example, one of the corners of the lower portion 1004_2 , all four corners of the lower section 1004_2 , just an X coordinate value, etc.).
11a zeigt eine erste (vereinfachtere) Ausführungsform der Schaltung in der Zeilenpuffer-Schnittstelleneinheit 1104. Wie in 11a dargestellt, beinhaltet die Zeilenpuffer-Schnittstelleneinheit eine Adressen-Übersetzungsschaltung 1106, um die Identität einer Zeilengruppe oder eines Abschnitts dieser Gruppe (wie beispielsweise den unteren Abschnitt 1004_2 von 10b), die bzw. der durch einen oder mehrere X, Y-Koordinatenwerte identifiziert wird, in eine lineare Adresse für den Zugriff auf den Speicher der Zeilenpuffereinheit zu konvertieren. Das heißt Zeilengruppen können als im Speicher der Zeilenpuffereinheit zugeordnet angesehen werden. Die Übersetzungsschaltung 1106 erfasst diese Zuordnung im Wesentlichen in Form von X, Y-Werten und kann diese in bestimmte lineare Speicheradressen konvertieren. 11a shows a first (more simplified) embodiment of the circuit in the line buffer interface unit 1104 , As in 11a As shown, the line buffer interface unit includes an address translation circuit 1106 to the identity of a stanza or section of that group (such as the lower section 1004_2 from 10b ) identified by one or more X, Y coordinate values, to convert to a linear address for accessing the memory of the line buffer unit. That is, stanzas may be considered to be allocated in the memory of the row buffer unit. The translation circuit 1106 captures this mapping essentially in the form of X, Y values and can convert them to specific linear memory addresses.
Die Fähigkeit zur Erfassung der Zuordnung basiert auf Informationen im Konfigurationsregisterbereich 1105, von dem eine Ausführungsform zuvor in 9d beschrieben wurde. Mit Kenntnis von Row_Width 924, FB_Rows 926 und FB_Base_Address 931 kann hier die Übersetzungseinheit die Größe und Position der Vollzeilengruppe im Speicher „erfassen“. Als solches reicht beispielsweise im Modus „Virtuell groß“ eine Anforderung für einen unteren Abschnitt basierend auf einem X-Koordinatenwert (z. B. wenn relativ zur Zeilengruppe auf den unteren Abschnitt verwiesen wird) oder einer X, Y-Koordinatenposition (z. B. wenn relativ zum Bildframe auf den unteren Abschnitt verwiesen wird) auf, um zu identifizieren, auf welchen Abschnitt der Blattgenerator verweist. Darüber hinaus legen die Felder Vb_Rows 927 und Vb_Cols 928 im Wesentlichen die Dimensionen der unteren Abschnitte fest. Mit Kenntnis der Dimensionen der oberen und unteren Bereiche ist auch die Menge an Daten, die aus dem Pufferspeicher abgerufen oder dort gespeichert werden sollen, leicht bestimmbar. Die gleichen Konzepte gelten möglicherweise auch für Zeilengruppen mit voller Breite. Eine Zeilengruppe mit voller Breite kann beispielsweise durch ihre X, Y-Position in einem Bild identifiziert werden. Darüber hinaus kann eine Zeilengruppe mit voller Breite in einigen Ausführungsformen über das Netzwerk in Form einer Sequenz von atomaren Anforderungen/Antworten übertragen werden, die mithilfe von X- und/-oder Y-Koordinatenwerten auf kleinere Blöcke einer Zeilengruppe mit voller Breite verweisen. The ability to capture the mapping is based on information in the configuration register area 1105 of which an embodiment was previously described in 9d has been described. With knowledge of Row_Width 924 , FB_Rows 926 and FB_Base_Address 931 Here, the translation unit can "capture" the size and position of the full line group in memory. As such, in the "Virtual Large" mode, for example, a request for a bottom portion based on an X coordinate value (eg, when referring to the bottom portion relative to the row group) or an X, Y coordinate position (eg, when reference is made to the lower portion relative to the image frame) to identify which portion the leaf generator references. In addition, the fields set Vb_Rows 927 and Vb_Cols 928 essentially fixed the dimensions of the lower sections. With knowledge of the dimensions of the upper and lower regions, the amount of data to be retrieved from the buffer memory or stored there is also easily determinable. The same concepts may apply to full-width stanzas as well. For example, a full-width stanza can be identified by its X, Y position in an image. In addition, in some embodiments, a full width stanza may be transmitted over the network in the form of a sequence of atomic requests / responses that reference smaller blocks of a full width stanza using X and / or Y coordinate values.
Die Übersetzungsschaltung 1106 könnte auch in einem Abstraktadressiermodus verwendet werden, in dem das Base_Address_Field 931 nicht ausgefüllt wird und die Blattgeneratoren auf die Zeilengruppen in Form von X, Y-Koordinaten in einem Bildframe verweisen. Wenn in diesem Fall die Übersetzungsschaltung 1006 mit einigen der Informationen im globalen Registerbereich von 9e (z. B. Image_Size, Stencil_Size) verknüpft ist oder diese anderweitig erhält, könnte die Übersetzungsschaltung 1106 alle sachbezogenen Informationen für die Zeilengruppe (ihre Dimensionen und Position innerhalb des Frames) berechnen und diese in lineare Adressen konvertierten, die für den Zugriff auf den Speicher der Zeilenpuffereinheit verwendet werden. In einer anderen Ausführungsform bestimmt die Übersetzungsschaltung 1106 den Wert Base_Address_Field 931 sofort (basierend auf den globalen Informationen und einer oder mehreren X, Y-Koordinaten, die die Zeilengruppe beschreiben) und lädt diesen in den eigenen Registerbereich 1105. The translation circuit 1106 could also be used in an abstract addressing mode in which the Base_Address_Field 931 is not filled in and the sheet generators refer to the stanzas in the form of X, Y coordinates in an image frame. If in this case the translation circuit 1006 with some of the information in the global register area of 9e (for example, Image_Size, Stencil_Size) or otherwise receives this could be the translation circuitry 1106 Calculate all pertinent information for the stanza (its dimensions and position within the frame) and convert it to linear addresses used to access the storage of the row buffer unit. In another embodiment, the translation circuit determines 1106 the value Base_Address_Field 931 immediately (based on the global information and one or more X, Y coordinates describing the stanza) and loads it into its own register area 1105 ,
Die Ausführungsform der Zeilenpuffer-Schnittstelleneinheit von 11a unterstützt zudem einen linearen Adressiermodus, in dem keine X, Y-Koordinatenwerte verwendet werden, um eine Zeilengruppe zu verweisen (stattdessen werden herkömmliche lineare Adressen verwendet). Im linearen Adressiermodus umgehen die Bypass-Pfade 1140 die Adressenübersetzungsschaltung 1106. In einer Ausführungsform stellt die Zeilenpuffer-Schnittstelleneinheit unabhängig davon, welcher Adressiermodus am Eingang der Zeilenpuffer-Schnittstelleneinheit verwendet wird, standardmäßige, lineare Speicheradressen zur Adressierung des Speichers der Zeilenpuffereinheit bereit. Erneut kurz bezugnehmend auf 9b werden die linearen Adressen einem Arbiter bereitgestellt. Die Speicherschnittstelle 908 löst kollidierende Speicherzugriffsanforderungen auf und greift auf den Speicher der Zeilenpuffereinheit 902 zu. The embodiment of the line buffer interface unit of 11a also supports a linear addressing mode in which no X, Y coordinate values are used to reference a stanza (using conventional linear addresses instead). In linear addressing mode bypasses the bypass paths 1140 the address translation circuit 1106 , In one embodiment, regardless of which addressing mode is used at the input of the line buffer interface unit, the line buffer interface unit provides standard, linear memory addresses for addressing the memory of the line buffer unit. Referring again briefly to 9b The linear addresses are provided to an arbiter. The storage interface 908 resolves colliding memory access requests and accesses the memory of the row buffer unit 902 to.
Wie zuvor ausführlich beschrieben kann ein Blattgenerator mit einem oder mehreren X, Y-Koordinatenwerten auf eine Zeilengruppe verweisen. In einer anderen Ausführungsform können die Blattgeneratoren, anstatt eine nächste Zeilengruppe im Modus „Vollzeilengruppen“ oder einen nächsten unteren Abschnitt im Modus „Virtuell groß“ zu identifizieren, einfach eine Anforderung ausgeben, die der Anforderung „Nächste(n)“ ähnelt (die Anforderung zeigt z. B. nur an, dass ohne Koordinaten auf die „nächste“ Vollzeilengruppe, den „nächsten“ untere Abschnitt oder die „nächsten“ Bilddaten innerhalb derselben vollen/virtuell großen Zeilengruppe verwiesen wird). As previously described in detail, a sheet generator having one or more X, Y coordinate values may refer to a stanza. In another embodiment, instead of identifying a next stanza in the "full stanza" mode or a next lower stub in the "virtual large" mode, the leaf generators may simply issue a request that is similar to the "next" request (the request shows For example, just say that without coordinates on the "next" full-line group, the "next" lower section or the "next" image data within the same full / virtual large stanza is referenced).
Um diesen Kommunikationsweg zu unterstützen, beinhaltet/beinhalten die Zeilenpuffereinheit und/oder die Zeilenpuffer-Schnittstelleneinheit einen Zustandsregisterbereich, um erfassen zu können, welches die nächste Zeilengruppe bzw. der nächste Abschnitt ist. 11b zeigt eine erweiterte Ausführungsform einer Zeilenpuffer-Schnittstelleneinheit, die Zeigerstatusinformationen speichert, sodass die Blattgeneratoren einfach auf einen „nächsten“ unteren Abschnitt einer Zeilengruppe im Modus „Virtuell groß“ verweisen können, anstatt dessen Position mithilfe von X, Y-Koordinaten festlegen zu müssen. Hier wird ein Schreibzeiger 1141 von der Zeigersteuerlogikschaltung 1143 gespeichert, die die unteren Abschnitte nachverfolgt, die vom erzeugenden Blattgenerator bereitgestellt wurden. Im Wesentlichen speichert der Schreibzeiger 1141 die Position des „nächsten“ Abschnitts, den der Erzeuger laut Planung bereitstellen soll. Darüber hinaus gestatten die Zeigerstatusinformationen den Blattgeneratoren, nur auf eine „nächste“ Zeilengruppe mit voller Breite (im Moduls „Volle Breite“) zu verweisen, ohne X, Y-Koordinaten festlegen zu müssen (da die Zeilenpuffer-Speichereinheit bestimmen kann, wo sich die nächste Zeilengruppe mit voller Breite für das Bild befindet). To support this communication path, the line buffer unit and / or the line buffer interface unit includes a state register area to detect which is the next line group or the next section. 11b Figure 12 shows an extended embodiment of a line buffer interface unit that stores pointer status information so that the sheet generators can simply reference a "next" bottom portion of a "large virtual" stanza instead of having to specify its location using X, Y coordinates. Here is a writing pointer 1141 from the pointer control logic circuit 1143 tracking the lower sections provided by the generating blade generator. Essentially, the write pointer saves 1141 the position of the "next" section that the producer should provide according to plan. In addition, the pointer status information allows the sheet generators to reference only a "full width" (in the "full width" module) "next" stanza without having to set X, Y coordinates (since the line buffer storage unit can determine where the next full-width stanza for the image).
In einer Ausführungsform wird der Zeiger als eine oder mehrere X, Y-Koordinaten artikuliert und die Übersetzungsschaltung konvertiert diese in eine lineare Adresse. Wenn der nächste Abschnitt empfangen wird, wird der Zeiger 1141 von der Zeigersteuerlogikschaltung 1143 aktualisiert, um auf den Abschnitt zu zeigen, der dem gerade empfangenen Abschnitt folgt. Lesezeiger 1142 funktionieren ähnlich, nur dass ein separater Lesezeiger für jeden Abnehmer gespeichert wird (erneut wird der Bequemlichkeit halber nur ein Erzeuger vorausgesetzt). In one embodiment, the pointer is articulated as one or more X, Y coordinates and the translation circuit converts it to a linear address. When the next section is received, the pointer becomes 1141 from the pointer control logic circuit 1143 Updated to point to the section following the section just received. read pointer 1142 work similarly, except that a separate read pointer is stored for each customer (again, for the sake of convenience, only one producer is required).
Im Modus „Vollzeilengruppe“ ist die Position der „nächsten“ Zeilengruppe mit voller Breite anhand der globalen Registerinformationen und einer ähnlichen Anordnung von Zeigern bestimmbar, die auf globaler Ebene gespeichert werden. In the Full Line Group mode, the position of the "next" full-width stanza is determinable based on global register information and a similar array of pointers stored at the global level.
d. Ausführungsformen zur Implementierung d. Embodiments for implementation
Es ist wichtig, darauf hinzuweisen, dass die oben beschriebenen verschiedenen Merkmale der Bildprozessorarchitektur nicht zwangsläufig auf die Bildverarbeitung im herkömmlichen Sinne beschränkt sind und daher auf andere Anwendungen angewendet werden können, die ggf. veranlassen, dass der Bildprozessor neu charakterisiert wird oder auch nicht. Wenn beispielsweise eines der vorstehend beschriebenen verschiedenen Merkmale der Bildprozessorarchitektur bei der Erstellung und/oder Erzeugung und/oder Wiedergabe von Animationen anstatt bei der Verarbeitung von tatsächlichen Kamerabildern verwendet werden soll, kann der Bildprozessor als grafische Verarbeitungseinheit charakterisiert sein. Zudem können die oben beschriebenen Architekturmerkmale des Bildprozessors in anderen technischen Anwendungen, wie z. B. in der Videoverarbeitung, Bildverarbeitung, Bilderkennung und/oder dem maschinellen Lernen, angewendet werden. Auf diese Weise kann der Bildprozessor (z. B. als Coprozessor) in einen allgemeineren Universalprozessor (z. B. als Teil einer CPU des Computersystems) mit integriert werden oder ein eigenständiger Prozessor innerhalb eines Computersystems sein. It is important to note that the various features of the image processor architecture described above are not necessarily limited to image processing in the conventional sense and therefore may be applied to other applications that may or may not cause the image processor to be re-characterized. For example, if one of the various features of the image processor architecture described above is to be used in creating and / or creating and / or rendering animations rather than processing actual camera images, the image processor may be characterized as a graphics processing unit. In addition, the above-described architectural features of the image processor in other technical applications, such. In video processing, image processing, image recognition and / or machine learning. In this way, the image processor (eg, as a coprocessor) may be integrated into a more general purpose general purpose processor (eg, as part of a CPU of the computer system) or may be a stand-alone processor within a computer system.
Die oben beschriebenen Hardware-Ausführungsformen können in einem Halbleiterchip und/oder als Beschreibung eines Schaltungsdesigns zur letztendlichen Ausrichtung auf einen Halbleiterherstellungsprozess enthalten sein. Im letzteren Fall können diese Schaltungsbeschreibungen die Form von Schaltungsbeschreibungen auf höherer/verhaltensorientierter Ebene (z. B. VHDL-Beschreibung) oder Schaltungsbeschreibungen auf unterer Ebene (z. B. Beschreibung auf Registertransferebene (RTL, Register Transfer Level), Beschreibung auf Transistorebene oder Maskenbeschreibung) oder verschiedener Kombinationen davon annehmen. Schaltungsbeschreibungen sind in der Regel auf einem computerlesbaren Speichermedium (wie z. B. einer CD-ROM oder einer anderen Art von Speichertechnologie) enthalten. The hardware embodiments described above may be included in a semiconductor chip and / or as a description of a circuit design for eventual alignment with a semiconductor manufacturing process. In the latter case, these circuit descriptions may take the form of higher / behaviorally oriented circuit descriptions (eg, VHDL description) or lower level circuit descriptions (eg, register transfer level (RTL) description, transistor level description, or mask description ) or various combinations thereof. Circuit descriptions are typically included on a computer-readable storage medium (such as a CD-ROM or other type of storage technology).
Aus den vorangehenden Abschnitten ist zu erkennen, dass ein Bildprozessor, wie oben beschrieben, in der Hardware auf einem Computersystem (z. B. als Teil eines Handgerätsystems on Chip (SOC), das Daten von der Kamera des Handgerätes verarbeitet) enthalten sein kann. In Fällen, in denen der Bildprozessor als Hardware-Schaltung ausgebildet ist, ist zu beachten, dass die Bilddaten, die von dem Bildprozessor verarbeitet werden, direkt von einer Kamera empfangen werden können. Hier kann der Bildprozessor Teil einer diskreten Kamera oder Teil eines Computersystems mit einer integrierten Kamera sein. Im letzteren Fall können die Bilddaten direkt von der Kamera oder aus dem Systemspeicher des Computersystems empfangen werden (z. B. sendet die Kamera ihre Bilddaten anstatt an den Bildprozessor an den Systemspeicher). Zu beachten ist auch, dass viele der in den vorangehenden Abschnitten beschriebenen Merkmale auf eine Bildprozessoreinheit (zur Darstellung von Animationen) anwendbar sind. From the foregoing sections, it will be appreciated that an image processor as described above may be included in hardware on a computer system (eg, as part of a handset system on chip (SOC) that processes data from the camera of the handset). In cases where the image processor is implemented as a hardware circuit, it should be noted that the image data processed by the image processor can be received directly from a camera. Here, the image processor may be part of a discrete camera or part of a computer system with an integrated camera. In the latter case, the image data may be received directly from the camera or from the system memory of the computer system (eg, the camera sends its image data to the system memory rather than to the image processor). It should also be noted that many of the features described in the preceding paragraphs are applicable to an image processing unit (for rendering animations).
12 zeigt eine exemplarische Darstellung eines Computersystems. Viele der Komponenten des nachstehend beschriebenen Computersystems sind auf ein Computersystem mit einer integrierten Kamera und einem zugehörigen Bildprozessor (z. B. einem Handgerät, wie z. B. einem Smartphone oder Tablet-Computer) anwendbar. Fachleute auf dem Gebiet werden leicht zwischen beiden unterscheiden können. 12 shows an exemplary representation of a computer system. Many of the components of the computer system described below are applicable to a computer system having an integrated camera and associated image processor (eg, a handheld device such as a smartphone or tablet computer). Professionals in the field will be able to easily distinguish between the two.
Wie in 12 dargestellt, kann das grundlegende Computersystem eine zentrale Verarbeitungseinheit 1201 (die beispielsweise eine Vielzahl von Universal-Verarbeitungskernsystemen 1215_1 bis 1215_N und einen auf einem Multikernprozessor oder einem Anwendungsprozessor angeordneten Hauptspeichercontroller 1217 beinhalten kann), Systemspeicher 1202, ein Display 1203 (z. B. Touchscreen, Flachbildschirm), eine lokal verdrahtete Punkt-zu-Punkt-Verbindung (z. B. eine USB-Schnittstelle) 1204, verschiedene Netzwerk-E-/A-Funktionen 1205 (wie z. B. eine Ethernet-Schnittstelle und/oder ein Mobilfunkmodem-Teilsystem), ein drahtloses lokales Netzwerk (z. B. WLAN) 1206, eine drahtlose Punkt-zu-Punkt-Verbindung (z. B. Bluetooth-Schnittstelle) 1207 und eine globale Positionierungssystemschnittstelle 1208, verschiedene Sensoren 1209_1 bis 1209_N, eine oder mehrere Kameras 1210, eine Batterie 1211, eine Energieverwaltungssteuereinheit 1212, einen Lautsprecher und ein Mikrofon 1213 sowie einen Audio-Kodierer/Dekodierer 1214 beinhalten. As in 12 As shown, the basic computer system may be a central processing unit 1201 (For example, a variety of general purpose processing kernel systems 1215_1 to 1215_N and a main memory controller arranged on a multi-core processor or an application processor 1217 may include) system memory 1202 , a display 1203 (eg touchscreen, flat screen), a locally wired point-to-point connection (eg a USB interface) 1204 , various network I / O functions 1205 (such as an Ethernet interface and / or a cellular modem subsystem), a wireless local area network (eg, WLAN) 1206 , a wireless point-to-point connection (eg Bluetooth interface) 1207 and a global positioning system interface 1208 , different sensors 1209_1 to 1209_N , one or more cameras 1210 , a battery 1211 , an energy management control unit 1212 , a speaker and a microphone 1213 and an audio encoder / decoder 1214 include.
Ein Anwendungsprozessor oder Multikernprozessor 1250 kann einen oder mehrere Universalprozessorkerne 1215 innerhalb seiner CPUs 1201, eine oder mehrere grafische Verarbeitungseinheiten 1216, eine Speicherverwaltungsfunktion 1217 (z. B. einen Speichercontroller), eine E/A-Steuerfunktion 1218 und eine Bildverarbeitungseinheit 1219 beinhalten. Die Universalverarbeitungskerne 1215 führen in der Regel das Betriebssystem und die Anwendungssoftware des Computersystems aus. Die Grafikverarbeitungseinheiten 1216 führen in der Regel grafikintensive Funktionen aus, um z. B. Grafikdaten zu erzeugen, die auf dem Display 1203 dargestellt werden. Die Speichersteuerfunktion 1217 ist mit dem Systemspeicher 1202 verbunden, um Daten in den Systemspeicher 1202 zu schreiben bzw. aus diesem einzulesen. Die Leistungsmanagementsteuereinheit 1212 steuert generell den Energieverbrauch des Systems 1200. An application processor or multi-core processor 1250 can be one or more universal processor cores 1215 within its CPUs 1201 , one or more graphical processing units 1216 , a memory management function 1217 (eg a memory controller), an I / O control function 1218 and an image processing unit 1219 include. The universal processing cores 1215 usually run the operating system and the application software of the computer system. The graphics processing units 1216 usually perform graphics intensive functions to B. to generate graphics data on the display 1203 being represented. The memory control function 1217 is with the system memory 1202 connected to data in the system memory 1202 to write or read from this. The power management control unit 1212 generally controls the energy consumption of the system 1200 ,
Die Bildverarbeitungseinheit 1219 kann gemäß einer der oben in den vorangehenden Abschnitten beschriebenen Ausführungsformen der Bildverarbeitungseinheit implementiert sein. Alternativ dazu oder in Kombination kann die IPU 1219 mit einer oder sowohl der GPU 1216 als auch der CPU 1201 als Coprozessor derselben gekoppelt sein. Darüber hinaus kann in verschiedenen Ausführungsformen die GPU 1216 mit einem der oben beschriebenen Prozessormerkmale implementiert sein. The image processing unit 1219 may be implemented according to one of the embodiments of the image processing unit described above in the preceding sections. Alternatively, or in combination, the IPU 1219 with one or both of the GPU 1216 as well as the CPU 1201 be coupled as coprocessor of the same. In addition, in various embodiments, the GPU 1216 be implemented with one of the processor features described above.
Das Touchscreen-Display 1203, die Kommunikationsschnittstellen 1204–1207, die GPS-Schnittstelle 1208, die Sensoren 1209, die Kamera 1210 und der Lautsprecher/Mikrofon-Codec 1213, 1214 können alle als unterschiedliche Formen der E/A (Eingabe und/oder Ausgabe) in Bezug auf das gesamte Rechensystem betrachtet werden, darunter auch gegebenenfalls ein integriertes Peripheriegerät (z. B. die eine oder mehrere Kameras 1210). Je nach Implementierung können verschiedene dieser E/A-Komponenten auf dem Anwendungsprozessor/Multikernprozessor 1250 integriert sein oder sich außerhalb des Chips oder außerhalb des Pakets des Anwendungsprozessors/Multikernprozessors 1250 befinden. The touch screen display 1203 , the communication interfaces 1204 - 1207 , the GPS interface 1208 , the sensors 1209 , the camera 1210 and the speaker / microphone codec 1213 . 1214 can all be viewed as different forms of I / O (input and / or output) with respect to the entire computing system, including, where appropriate, an integrated peripheral device (eg, the one or more cameras 1210 ). Depending on the implementation, various of these I / O components may be on the application processor / multi-core processor 1250 be integrated or external to the chip or outside the application processor / multi-core processor package 1250 are located.
In einer Ausführungsform beinhalten eine oder mehrere Kameras 1210 eine Tiefenkamera, die in der Lage ist, die Tiefe zwischen der Kamera und einem Objekt in dessen Sichtfeld zu messen. Anwendungssoftware, Betriebssystemsoftware, Gerätetreibersoftware und/oder Firmware, die auf einem universellen CPU-Kern (oder einem anderen Funktionsblock mit einer Befehlsausführungspipeline zum Ausführen eines Programmcodes) eines Anwendungsprozessors oder eines anderen Prozessors ausgeführt werden, können sämtliche der oben beschriebenen Funktionen ausführen. In one embodiment, one or more cameras include 1210 a depth camera capable of measuring the depth between the camera and an object in its field of view. Application software, operating system software, device driver software and / or firmware executing on a universal CPU core (or other functional block having an instruction execution pipeline for executing program code) of an application processor or other processor can perform all of the functions described above.
Ausführungsformen der Erfindung können, wie oben dargelegt, verschiedene Verfahren beinhalten. Die Prozesse können in maschinenausführbaren Befehlen enthalten sein. Die Befehle können dazu verwendet werden, einen Universalprozessor oder Spezialprozessor dazu zu veranlassen, bestimmte Prozesse auszuführen. Alternativ dazu können diese Prozesse von spezifischen Hardwarekomponenten ausgeführt werden, die eine fest verdrahtete Logik zum Ausführen der Prozesse oder eine beliebige Kombination von programmierten Computerkomponenten und benutzerdefinierten Hardwarekomponenten enthalten. Embodiments of the invention may include various methods as set forth above. The processes may be included in machine-executable instructions. The commands can be used to cause a general purpose processor or special processor to execute certain processes. Alternatively, these processes may be performed by specific hardware components that include hardwired logic for executing the processes or any combination of programmed computer components and custom hardware components.
Elemente der vorliegenden Erfindung können darüber hinaus als maschinenlesbares Medium zum Speichern der maschinenausführbaren Befehle bereitgestellt sein. Das maschinenlesbare Medium kann unter anderem Disketten, optische Platten, CD-ROMs und magneto-optische Platten, FLASH-Speicher, ROMs, RAMs, EPROMs, EEPROMs, magnetische oder optische Karten, Ausbreitungsmedien oder andere Arten von Medien/maschinenlesbare Medien, die für die Speicherung von elektronischen Befehlen geeignet sind, beinhalten. Die vorliegende Erfindung kann beispielsweise als ein Computerprogramm heruntergeladen werden, das von einem dezentralen Computer (z. B. einem Server) mittels eines in einer Trägerwelle oder in einem anderen Ausbreitungsmedium enthaltenen Datensignals an einen anfordernden Computer (z. B. einen Client) über eine Kommunikationsverbindung (z. B. ein Modem oder eine Netzwerkverbindung) übertragen werden kann. Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, floppy disks, optical disks, CD-ROMs and magneto-optical disks, FLASH memories, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media, or other types of media / machine-readable media suitable for Storage of electronic commands are suitable. For example, the present invention may be downloaded as a computer program transmitted from a remote computer (eg, a server) to a requesting computer (eg, a client) via a data signal contained in a carrier wave or other propagation medium Communication link (eg, a modem or a network connection) can be transmitted.
In der vorstehenden Spezifikation wurde die Erfindung unter Bezugnahme auf spezifische exemplarische Ausführungsformen derselben beschrieben. Es ist jedoch offensichtlich, dass verschiedene Modifikationen und Änderungen daran vorgenommen werden können, ohne von dem in den beigefügten Ansprüchen dargelegten Erfindungsgedanken und Umfang der Erfindung abzuweichen. Die Beschreibung und die Zeichnungen sind daher in einem veranschaulichenden und nicht in einem einschränkenden Sinne zu betrachten. In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the spirit and scope of the invention as set forth in the appended claims. The description and drawings are therefore to be considered in an illustrative rather than a limiting sense.