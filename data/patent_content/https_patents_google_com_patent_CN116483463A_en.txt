CN116483463A - Dynamically configurable client application activity - Google Patents
Dynamically configurable client application activity Download PDFInfo
- Publication number
- CN116483463A CN116483463A CN202310294821.XA CN202310294821A CN116483463A CN 116483463 A CN116483463 A CN 116483463A CN 202310294821 A CN202310294821 A CN 202310294821A CN 116483463 A CN116483463 A CN 116483463A
- Authority
- CN
- China
- Prior art keywords
- digital component
- client device
- application
- profile
- interaction
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000000694 effects Effects 0.000 title description 17
- 230000003993 interaction Effects 0.000 claims abstract description 121
- 230000004044 response Effects 0.000 claims abstract description 77
- 238000000034 method Methods 0.000 claims abstract description 55
- 230000009471 action Effects 0.000 claims description 139
- 230000000007 visual effect Effects 0.000 claims description 32
- 238000012545 processing Methods 0.000 claims description 21
- 238000009877 rendering Methods 0.000 abstract description 2
- 230000015654 memory Effects 0.000 description 36
- 238000004891 communication Methods 0.000 description 20
- 230000006870 function Effects 0.000 description 13
- 238000004590 computer program Methods 0.000 description 8
- 238000013507 mapping Methods 0.000 description 8
- 230000008569 process Effects 0.000 description 8
- 238000010586 diagram Methods 0.000 description 6
- 230000001960 triggered effect Effects 0.000 description 6
- 230000008901 benefit Effects 0.000 description 5
- 230000008859 change Effects 0.000 description 4
- 230000001413 cellular effect Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000013461 design Methods 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 239000011800 void material Substances 0.000 description 2
- 230000002730 additional effect Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000013480 data collection Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 235000015220 hamburgers Nutrition 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- XXUZFRDUEGQHOV-UHFFFAOYSA-J strontium ranelate Chemical compound [Sr+2].[Sr+2].[O-]C(=O)CN(CC([O-])=O)C=1SC(C([O-])=O)=C(CC([O-])=O)C=1C#N XXUZFRDUEGQHOV-UHFFFAOYSA-J 0.000 description 1
- 230000001502 supplementing effect Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 239000010409 thin film Substances 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44505—Configuring for program initiating, e.g. using registry, configuration files
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/08—Configuration management of networks or network elements
- H04L41/0803—Configuration setting
- H04L41/0806—Configuration setting for initial configuration or provisioning, e.g. plug-and-play
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/04817—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance using icons
Abstract
The present disclosure relates to a method comprising: selecting, by one or more servers, digital components to be presented in an application running at a client device; obtaining, by one or more servers, attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which interaction with the digital component is reported; selecting, by the one or more servers, a configuration file based on the obtained attributes, the configuration file specifying a set of operations to be performed by the client device rendering the digital component, wherein selecting the configuration file includes determining a particular format of the digital component based on the obtained attributes, determining a version of an application that the client device is running, and selecting a particular configuration file from a plurality of different configuration files, the particular configuration file being defined for a combination of the particular format of the digital component and the version of the application; and sending a payload to the client device, the payload comprising information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform the set of operations specified by the configuration file.
Description
The application is a divisional application of an invention patent application with the application date of 2020, the application number of 202080046480.9 and the name of 'dynamic configurable client application activity'.
Technical Field
The present application relates to dynamic configuration of actions performed by a client application, such as a mobile application or a tablet application.
Background
Users of client devices (e.g., cell phones, tablet devices, laptops) typically use applications to interact with and access various types of content. For example, a user can use an application to access email, interact with social media, play games, obtain maps, shop online, and play media content. An application running on a client device is capable of displaying various content, including interactive content, to a user of the mobile device on which the application is running. These applications interact with one or more servers to report client-side activities, such as user interactions with the applications.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in computer-implemented methods that include the operations of: selecting, by one or more servers, a digital component to be presented in an application executing at a client device; obtaining, by one or more servers, attributes of the digital component, including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which interaction with the digital component is reported; after selecting the digital component and obtaining the attributes of the digital component, selecting, by the one or more servers, a configuration ("config") file based on the obtained attributes, wherein the configuration file specifies a set of operations to be performed by a client device that presents the digital component in response to user interaction with the digital component; and sending a payload to the client device, wherein the payload includes information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform the set of operations specified by the configuration file. Other embodiments of this aspect include corresponding systems, devices, apparatuses, computer programs, and computer program products configured to perform the actions of the methods. A computer program (e.g., instructions) can be encoded on a computer storage device. These and other embodiments can each optionally include one or more of the following features.
In some implementations, the method further comprises: a configuration report packet is received by a server at a reporting network location, wherein the configuration report packet is (i) generated by a client device in response to execution of a configuration file, and (ii) specifies interactions with a digital component at the client device.
In some implementations, the method further comprises: after the payload is sent to the client device, a second selection of digital components to be presented in the application; selecting a different profile a second time based on the properties mapped to the digital component by the different profile instead of the profile sent in the payload, wherein the different profile specifies a different set of operations than the profile sent in the payload; and when the attribute of the digital component is mapped to the different profile, transmitting to the client device, based on the selection of the digital component, information including the specified digital component and the different profile, but not a different payload of the profile.
In some implementations, the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
In some implementations, the additional operations cause the client device to collect the set of operations of the profile without causing the client device to collect visual element interaction data, wherein the visual element interaction data is collected in response to a user interaction with a visual element of an application that is not part of a digital component presented in the application.
In some implementations, the set of operations includes: a first operation performed by the client device in response to a first type of interaction with the digital component; and a second operation performed by the client device in response to a second type of interaction with the digital component.
In some implementations, the first operation causes the client device to report presentation of the digital component in response to a first interaction with a first view of the digital component presented prior to interaction with the digital component within the application; and, the second operation causes the client device to report a second interaction with a second view of the digital component presented after the first interaction with the first view of the digital component.
In some implementations, selecting a configuration file that specifies a set of operations to be performed by a client device that presents a digital component includes: analyzing the obtained attributes to determine a particular format of the digital component; determining a version of an application being run by the client device; and selecting a particular profile defined for a combination of a particular format of the digital component and a version of the application from a plurality of different profiles.
Typically, actions taken by an application in response to user interaction with a component of the application (e.g., a user interface component), which can be referred to as event reporting, are performed by sending a URL or invoking a particular predefined Application Programming Interface (API) within the mobile application. For example, event reporting may be configured as a mapping of user actions to reporting events (e.g., data transmissions or other client device activities). However, in conventional systems, the actions taken by an application (or client device) are typically hard-coded in the application itself, which makes it difficult to change the actions taken by a particular application in response to user interaction with the application or a component presented in the application (e.g., content presented in a slot of an application display). For example, changing an action taken by an application typically requires publishing an updated version of the application, wherein a mapping of user interactions to actions taken by the application is updated. Issuing an updated version of an application requires a large amount of testing and, once issued over a wide range, can result in unexpected errors. Furthermore, even if an updated version of an application is published, users may not perform the updates needed to implement the changes and/or their client devices may be older versions that are not supported in the updated version of the application. Thus, even changing the hard coding of the application itself may not be sufficient to change the operation of the application when it has been installed on the client device.
The subject matter described in this specification can have one or more of the following technical advantages. The subject matter described in this specification can be implemented to allow for the introduction of new actions to be performed by an application or client device and/or to support new content formats (e.g., one click, charge for external clicks, etc.) without substantially increasing the amount of logic required on the client side and without requiring the release of updated versions of the application. For example, the techniques discussed in this document enable these changes to be made at a server that downloads the configuration file to the client device upon receiving a request from the application. In some implementations, the configuration is part of the response metadata rather than a file. It is referred to herein as a profile, but in all instances it may be part of the profile or response metadata. As discussed in more detail below, the configuration file may define actions taken by an application or client device in response to specified user interactions with particular user interface elements and cause the application to perform the defined actions. Because the configuration files are generated at the server and preferably provided to each client device as needed, the activities defined in the configuration files can be changed as often as needed or desired and can be changed on a per device or per user basis, providing greater flexibility in controlling the application environment. As more content formats are introduced, embodiments of the subject matter described in this specification increase the ability of a client device to react to user interactions with content formats and increase the ability of a client device to provide feedback to a server, which is an improvement over current reporting frameworks.
By merging the client instructions into a single configuration file, client-side event reporting can be unified and complexity in the client device can be reduced. Reporting actions can be configured in the server at service time to improve efficiency. The amount of lag time associated with a client code change to a product can be reduced. Errors that would be encountered when updating a client application to a new version can be more easily and quickly identified and repaired because there is no need to wait for the user to download the new version of the application. In summary, the present invention provides a dynamic, flexible, and efficient method of defining actions taken by an application or client device in response to user interaction with a digital component while reducing complexity at the client device. The method is also fast and robust, avoiding the lag time and errors associated with updating applications.
More specifically, the present disclosure relates to a method comprising: selecting, by one or more servers, digital components to be presented in an application running at a client device; obtaining, by one or more servers, attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which interaction with the digital component is reported; selecting, by the one or more servers, a configuration file based on the obtained attributes, the configuration file specifying a set of operations to be performed by the client device rendering the digital component, wherein selecting the configuration file includes determining a particular format of the digital component based on the obtained attributes, determining a version of an application that the client device is running, and selecting a particular configuration file from a plurality of different configuration files, the particular configuration file being defined for a combination of the particular format of the digital component and the version of the application; and sending a payload to the client device, the payload comprising information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform the set of operations specified by the configuration file.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a conceptual diagram of a system for triggering client-side activity in response to user interaction with a digital component on a mobile device.
FIG. 2 is a block diagram of an example environment for triggering client-side activities in response to user interaction with a digital component in an application.
FIG. 3 is a flow chart of a method for providing a configuration file with a set of operations that trigger client-side activity.
FIG. 4 is a flow diagram of a first example process for triggering client-side activity in response to a user interaction with a digital component in an application.
FIG. 5 is a flow diagram of a second example process for triggering client-side activity in response to user interaction with a digital component in an application.
FIG. 6 illustrates an example of a computing device and a mobile computing device that can be used to implement the techniques described herein.
Detailed Description
In general, this document describes mechanisms for triggering client-side activities in response to user interaction with digital components in an application on a client device. In some implementations, a client device communicates with one or more servers to receive instructions specifying a set of one or more operations corresponding to user interaction with a digital component. In particular, the server may provide content for display on the client device, including data that causes the digital component to be displayed and a configuration file (config file) associated with the digital component. When a user interacts with a digital component displayed in an application on a client device, the client device runs a configuration file, which causes the client device to perform a particular action according to the configuration file. In particular, the configuration file may cause an application on the client device to send data to the server reporting user interactions with the digital components to the server, and/or to perform one or more other actions in response to the user interactions. Further, the server may perform a plurality of responsive actions, such as reporting user interactions to another server. In this way, explicit instructions can be provided to the client device to specify actions to be performed as a result of user actions or interactions with digital components in an application running on the client device.
The use of a unified profile allows content providers to support different types of content formats, change actions performed by client devices in response to interactions with the different types of content formats, and reduce format changes and/or client action changes to achieve lag times (lag times) for products. Hard-coded logic in the client device is often insufficient to flexibly support new use cases, requiring changing logic in the application on the client device. By providing the client device with a configuration file generated at the server instead of hard-coding such a file at the client device, applications running on the client device need not be updated to address the new content type because the server-generated configuration file is able to provide the applications with the data needed to support the new content type.
Reports for each content format can be broken down into combinations of basic content actions (e.g., ping URLs, reporting content related events to content providers, etc.). A system is described herein in which the action combinations of each user action are configured by proto (prototypes) on a content server.
Fig. 1 illustrates a conceptual diagram of a system 100 for triggering client-side activity in response to user interaction with a digital component on a mobile device. Fig. 1 shows a user 102 of a client device 104 using an application 118 running on the client device 104. The server 110 sends data 112, also referred to as a payload, including the digital component (e.g., star) 106 or information specifying the digital component 106 and a configuration file 114 corresponding to the digital component 106. In some implementations, the server 110 provides the payload 112 in response to the request 108 from the client device 104. The configuration file 114 includes data that, when executed by the client device 104, causes the client device 104 to perform the set of operations specified by the configuration file 114.
After the server 110 provides the payload 112 to the client device 104, the client device 104 displays content associated with the received data 112 on a display of the device 104-e.g., in an application 118 running on the device 104. In FIG. 1, client 104 is displaying a "star" digital component 106 provided by server 110. When the user 102 interacts with the "star" digital component 106 on the client device 104, for example, by clicking or touching his or her finger to the "star" digital component 106, the application 118 sends a configuration report packet 116 to the server 110, wherein the packet 116 provides an indication of the user interaction with the "star" digital component 106 to the server 110. The configuration report packet 116 may include data such as a report URL or an API that calls a report URL.
In the example shown in FIG. 1, the application 118 running on the client device 104 shows a number of different digital components 106, including square, circular, and heart, in addition to the "star" 106. Each digital component 106 may be associated with a different profile 114 sent by the server 110, each profile 114 including a respective set of operations associated with a particular digital component 106. For example, the "star" component 106 can be associated with causing a particular video to be provided and played on a client device. Alternatively, the digital component 106 can cause one of a number of actions to be performed, such as opening a website associated with a particular URL, reporting to a particular content provider that a user has interacted with particular digital content, causing a particular image to be displayed on the client device 104, and so forth. In some implementations, the client device 104 can independently support certain actions, such as opening a URL or installing an application 118 on the client device 104. For other actions, the application 118 on the client device 104 provides an indication to the server 110 that facilitates implementation of those actions, including reporting actions.
In some implementations, the server 110 may receive a report of the user interaction 116 and further report the user interaction to another server (not shown). In some implementations, the application 118 on the client device 104 sends the report 116 to more than one server. One or more servers may then invoke an Application Programming Interface (API) to record the user interactions.
In some implementations, the system allows more granularity with which actions can be distinguished by adding additional action identifiers. For example, different action configurations can be provided for different links in html text. For example, it is possible to introducebridge to support a user interface that passes additional data from the link to the client. This approach provides several advantages. For example, if the user's action is clicking on a URL, it avoids the necessity of logic in the server to parse the clicked URL to determine the appropriate client response for the clicked URL, but rather allows the server to provide the appropriate client response on a per URL basis. In addition, it allows logging of various types of user actions, including interactions with different types of digital components (e.g., buttons displayed as overlays on a video). In addition, it can be used to support formats that previously required native formats. The native format is also compatible with the configuration.
The following table shows an example html code that provides a link to a user:
in the left-hand example of the above table (representing the known method), when a user clicks on a particular link, the application displaying the link may cause a telephone number to be dialed or cause the application to load a website associated with the particular URL. The logic for parsing the URL and determining the actions that should be performed, as well as the actions themselves, must be hard coded in the application. However, in the example on the right-hand side of the table above, which represents an example of the present invention, when a user clicks on a particular link, the client device invokes a plurality of actions provided in the configuration file associated with the particular link, including, but not necessarily limited to, invoking primitive actions (e.g., opening a URL, logging a visual element event, calling a telephone number, logging an event). The profile may invoke any number of actions, including recording statistics of impressions or clicks in the application, or charging advertisers for impressions or clicks. The configuration file is generated at the server side rather than the client and is not hard-coded in the application, so actions triggered in response to the client side interacting with the digital component can be easily adjusted without the need for client software updates. As described above, this provides the technical advantage of a fast and robust method of defining actions taken by an application or client device in response to user interaction with a digital component, thereby avoiding lag times and errors associated with updating the application.
FIG. 2 illustrates a block diagram of an example system 200 for triggering client-side activities in response to user interaction with a digital component in an application. The system 200 includes one or more client devices 204, which can be mobile devices such as smartphones, personal digital assistants, desktop devices, laptop devices, personal computers, and the like. The system 200 also includes one or more content servers 210 in communication with the client devices 204 and sending content to the client devices 204. Client device 204 and content server 210 communicate in system 200 over a network 214, such as a Local Area Network (LAN), wide Area Network (WAN), the internet, or a combination thereof. Client device 204 or server 210 may be a computing device as shown in fig. 6 and discussed in more detail below.
Fig. 3 illustrates a flow chart of a method 300 for providing a configuration file to a client device with a set of operations that trigger client-side activity.
In 310, the server selects a digital component to be presented in a client application executing at a client device. The server may select the digital component, for example, in response to a request for content from the client device. The digital components may be presented in different forms depending on a number of factors, including the type of client device on which the digital components are to be presented, the capabilities of the client device (e.g., call capabilities, video chat capabilities, etc.), applications installed on the client device, applications in which the digital components are to be presented, and/or the type of content (e.g., text, image, audio, or video) depicted by the digital components. The digital components may be sent to the client device in a push or pull manner, wherein pushing the digital components is provided independent of explicit requests from the client device and pulling the digital components is provided in response to explicit requests from the client device.
In 320, the server obtains attributes of the digital component including at least one or more of a destination network location to which the digital component redirects the user in response to interaction with the digital component and a reporting network location to which the interaction with the digital component is reported. The digital components can include, for example, text, video, audio, image data, or a combination thereof. Properties can include the type of client device on which the digital component is to be presented, the capabilities of the client device, the application installed on the client device, the application in which the digital component is to be presented, and/or the type of content depicted by the digital component. And more particularly to attributes of a digital component of a client device or application that is to render the digital component (e.g., type of client device, capabilities of the client device, application installed on the client device, and application that is to render the digital component) can be communicated from the client device to a server, for example, in a request for content.
In 330, after selecting the digital component and obtaining the attribute of the digital component, the server selects a configuration file based on the obtained attribute, the configuration file specifying a set of operations to be performed by a client device that presents the digital component. In some implementations, the configuration file can specify different operations to be performed by the client device in serial and/or parallel in response to user interaction with the digital component within the application. For example, different network calls initiated by the client device can be performed in parallel. In certain examples, the reporting server may be contacted while the client device is also being directed to a destination page linked to by the digital component. The method reduces latency in systems and methods that use hardcoded sequential calls.
In 340, the server sends the payload to the client device. The payload includes information and a configuration file specifying the digital components to be presented in the application. The configuration file includes data that, when run by the client device, causes the client device to perform a set of operations specified by the configuration file. In some implementations, the information specifying the digital components to be presented in the application can include, for example, data (e.g., image files) that includes the digital components themselves. In some implementations, the information specifying the digital component to be presented in the application includes a pointer or link to the digital component.
In 350, the server may receive a configuration report packet generated by a client application running on the client device. Typically, the configuration report packet is sent by a client application running on the client device in response to a user interaction with the digital component and specifies the interaction with the digital component at the client device. User interaction with the digital component may include, for example, a user clicking on the digital component or touching a finger to a touch screen on the digital component.
In some implementations, a configuration file associated with (e.g., assigned to) a digital component may be changed at a server. When the configuration file assigned to the digital component changes such that a different second configuration file is assigned to the digital component, the server will select and send the different second configuration file with the digital component in response to a subsequent request for content.
In these implementations, the method 300 can include further actions taken by the server. For example, after the server sends the first payload data including the first profile previously assigned to the digital component, the server can select the same digital component to be presented in the application a second time (e.g., in response to a request from the client device). Upon a second selection of the digital component, the server can select a different second profile based on the properties (e.g., upon request) that the different profile is mapped to the digital component, the second profile specifying a different set of operations than the first profile previously sent in the first payload. That is, instead of selecting the first profile, the server selects a different second profile based on an updated mapping of the different second profile to the properties of the digital component when the digital component is selected a second time. The server then sends a different second payload to the client device that includes information specifying the digital component and a different second profile instead of the first profile based on the selection of the digital component. While the attributes of the digital component are mapped to the different second configuration file, the server will continue to select the different second configuration file to send with the digital component. The different set of operations may include one or more additional operations that cause the client device to perform actions that the first profile does not cause the client device to perform. The different set of operations may also include fewer operations than the original first profile. Thus, the server is able to dynamically adjust the configuration files associated with the digital components without requiring modification on the client device.
In this way, different content formats may be presented by the server with configuration files that are modified or adapted to the particular content format. In some implementations, one or more additional servers may be used to support new features or data collection related to a particular content format. In fact, one of the benefits of using a server-provided profile is the ability to dynamically generate or modify the profile at the server to meet new content types. In this way, the present invention provides a dynamic and flexible method of defining actions taken by an application or client device in response to user interaction with a digital component. Generating or modifying the configuration file at the server rather than at the client device eliminates the need to rely on the user to update the application at the client side, avoiding the lag time and errors associated with updating the application.
In some implementations, the additional operations cause the application on the client device to collect the operational set of first profiles does not cause the application on the client device to collect visual element interaction data. Visual element interaction data is collected in response to a user interaction with a visual element of an application that is not part of a digital component presented in the application. For example, the collected visual interaction data may include data related to general application UI interactions.
In some implementations, the set of operations specified by the configuration file includes a first operation performed by the client device in response to a first type of interaction with the digital component and a second operation performed by the client device in response to a second type of interaction with the digital component. For example, a user of a client device may first click on a leading advertisement view and then click on an expanded form of the advertisement body to navigate to a landing page. In this example, the first operation may report the expansion of the advertisement and the second operation may report the opening of the landing page.
In some implementations, the first operation causes an application on the client device to report presentation of the digital component in response to a first interaction with a first view of the digital component presented prior to interacting with the digital component within the application; and the second operation causes an application on the client device to report a second interaction with a second view of the digital component presented after the first interaction with the first view of the digital component. For example, a first view of the digital components may be a leading advertisement view, and after a user clicks on a digital component in the leading advertisement view, the digital component may be presented in a second view that is an expanded view.
In some implementations, selecting a configuration file that specifies a set of operations to be performed by a client device that presents a digital component includes: analyzing the obtained attributes to determine a particular format of the digital component; determining a version of an application being run by the client device; and selecting a particular profile defined for a combination of a particular format of the digital component and a version of the application from a plurality of different profiles. For example, a version of an application may be transferred from a client device to a server in a request for content. The particular configuration file may include a mapping of content formats and application versions or any other attributes to different configuration files.
Content action configuration
Content actions (e.g., digital component actions) may be the smallest computational unit and represent functions that cannot be further broken down. The main action is a public action used across all content formats. The following example code illustrates an adation proto, which is the container of digital component actions that occur in the server layer. In this example, the configuration is built using protobuf, but it can be provided in other formats such as XML or Json.
Another proto specifies launching a browser on the client device. The following example code shows the UrlNavigationnAction specifying the launch browser:
A proto may be used to specify what applications are opened in the application store. The following example code shows the proto of the playstore navigator da action, which specifies an application to be opened in an application store on a client device:
in addition, many content operations require updating the state of content stored in a content database, such as whether the content has been released or the last time the content was displayed. This action abstracts the table of contents operation. The following example code illustrates the proto of an AdStateAction to update the status of advertisements stored in the advertisement database:
a content reporting action, such as an HTTP request content action, may be used to specify an HTTP GET request for a specified URL. The clickserveresponse enumeration may be used to specify whether a response is expected and should be stored. The following example code shows the proto of httprequest adaaction:
another content reporting action, such as an HTTP POST request content action, specifies an HTTP POST request for a specified URL. The following example code shows a prototype of formsubmicron da action:
the content provider event content action specifies a content event to report. The following example code shows the proto of an exemplarysetproviderreporting config:
Content action trigger
The content action may be triggered in different ways. For content event type triggers, the user action on the UI corresponds to a predefined content event type (e.g., pressing the star button triggers an asterisked content event). This option binds the content action configuration to a particular event type. Example code for advertisement event type triggering is shown below.
/>
Additional content event types may be defined to distinguish between events occurring in both the thread list and the session view.
When a content action is triggered for each content item, the content action is preferably configured per UI component and per user action. Most UI elements can be uniquely identified by their component IDs. However, in the case of a plurality of elements of the same ID, an element_index may be added. Using a combination of ID, index, and user actions, a configuration of a particular action may be defined. The following example code illustrates the proto of contentmentconfig, which may be used to map ad actions to its UI components and user actions:
for content actions triggered by a UI component, the configured UI component may be explicitly listed. The following example code illustrates the proto of the contentmententconfig, where the content action is triggered by the UI component:
Storing content actions
The content action may be further stored. In the API layer, content items are converted into their API interfaces. Upon instantiation, the content item profile may be converted into a mapping from, for example, a visual element ID, element index, or user action to content action.
FIG. 4 illustrates a flow chart of a first example process 400 for triggering client-side activity in response to user interaction with a digital component in an application. At the native client 410, a user performs an action 412 on a User Interface (UI) element 414. Upon user action 412, the relevant action listener is invoked. The listener then invokes a content reporting function (e.g., pressing the star button invokes a star () function) in an Application Programming Interface (API) layer 420 with reporting action 416.
In API layer 420, content 422 associated with UI element 414 makes an asynchronous call to processContentEvent in ContentService 432 with ContentEvent request434 at 424. ContentEventRequest434 contains a report type and information related to the action. The ContentService 432 function acts as an entry point to the service layer. ContentEventRequest434 is passed to ContentManager 436 for processing. Content manager 436 invokes different reporting functions based on the type of contenteeventrequest 434. The table of contents may also be updated in status. ContentEventReporter 440 executes the actual business logic for reporting each logic based on the function called.
FIG. 5 illustrates a flow chart of a second example process 500 for triggering client-side activity in response to user interaction with a digital component in an application. At the native client 510, the user performs an action 512 on a User Interface (UI) element 514. The action 512 may be, for example, a click action (e.g., a single click or double click), hovering a cursor over an element (e.g., with a mouse), touching an element on a touch screen with a finger, or dragging or sliding an element (e.g., with a mouse or with a finger on a touch screen). Element 514 may be, for example, a link, a media element (e.g., a picture, a sound clip, a video clip), a button (e.g., a radio button), a toggle, an input field, a text field, a date/time selector, a drop-down list, a list box, a drop-down button, a check box, a card (i.e., a module containing different types of information), a carousel, a feed, a form, a hamburger menu, an icon, a mode, a notification, a sidebar, a tab, a label, or any combination thereof.
User action 512 on UI element 514 causes native client 510 to report the action to API layer 520 at 516. On user action 512, the function is invoked to process action 512.
When reporting action 516 occurs, the user interface of native client 510 invokes API content item 522 to perform a lookup of the mapping of the action. If an action is found, a new API ContentAction (content action) 524 is instantiated.
ContentAction API interface 528 helps run contentdaction 524. ContentClientActionHelper 518 and ContentClientClientActionHelper 526 in the API layer are used to execute ContentClientClientAction in the native client 510. A ContentClientContientActionHelper 518 is implemented for each platform to allow the API layer to perform UI actions in a manner that is platform agnostic.
At 532, all non-UI content actions are aggregated in a contentdactionrequest and sent to a contentdervice 534 in the server layer 530. The contentmactivonrequest 536 is processed by a ContentManager 538. For reporting content actions, the content manager 538 calls the ContentReportingActionDispatcher 542 in 540 instead of the ContentEventReporter of FIG. 4. ContentReportingActionDispatcher 542 invokes a corresponding parser (e.g., formSubmissionReportingAction 544, httpRequest ReportingAction 548, XYZContentEventReportingAction 554) of a particular content reporting action. Reporting actions may include, for example, HTTP requests (GET, POST) to URLs, remote Procedure Call (RPC) calls for reporting content related events to a content server, URL navigation, and application store navigation.
A corresponding parser is implemented for each ContentReportingAction type. In some implementations, the httprequest reportingaction 548 contains a copy of the ContentTableController 552 to store any click server responses.
Content action execution detailed design
Detailed exemplary designs for content action execution are described below with respect to content items including advertisements. The API content item processes the user action using, for example, the following code:
ListenableFuture<Boolean>handleContentAction(int visualElementId,int elementIndex,UserAction userAction,Map<String,Object>arguments)；
depending on the context, additional arguments may be passed to the mapping of arguments (e.g., pressing the submit form button in the formfill advertisement adds form data as arguments to the mapping). The mapped key may be an argument name. The function performs a lookup to obtain the relevant content action. With content actions, the function calls an API AdAction interface to run AdAction. This function returns the listenablefutures that complete when all contentmactives complete the run. Boolean indicates whether the run was successful.
The API ContentAction interface (specifically, the adation interface) may be implemented using the following example code:
interface AdAction{
ListenableFuture<Boolean>execute(Map<String,Object>arguments)；
}
the API AdAction is instantiated using AdtAction proto. When executing execution, first an adcientlaction is executed in the UI using an adcientlaction helper. AdStateAction and AdRecortingAction are combined together into a request for AdService. Depending on the argument key, the argument is either added to the call to the addcliationhelper or to the request for addservice (e.g., form submission data is added to the addservice call).
AdClientActionHelper executes UI AdActions. Each supported platform may have its own implementation. The following example code may be used to provide an addclientionhelper:
the server RPC is used to perform content actions using, for example, the following code:
ListenableFuture<AdActionResponse>(AdActionRequest request)；
as shown in the example code below, the RPC in turn invokes the server AdsManager to execute the adaactionrequest:
/>
AdsManager can process AdActionRequests using the following example code:
ListenableFuture<AdActionResponse>processAdAction(AdActionRequest request)；
AdsManager can use the type of AdEventRequest to control what ad status is updated. Alternatively, adsManager may use the type of AdStateAction instead. If AdStateAction is not set, the default action is to load StoredAD for reporting actions.
After execution of the AdStateAction, adRecortingActionDispatcher is invoked with the updated StoredAD.
ListenableFuture<Void>processAdReportingAction(AdActionRequest request,StoredAd ad)；
The scheduler iterates through all the AdReportingActions and executes them in parallel. The type of the AdRecortingAction is used to map to the correct RecortingAction.
The adreportingection interface may be provided using the following example code:
an adreportingeaction interface is implemented for each reporting action type.
Content format specific actions
Additional examples are discussed below. For example, the external click URL action may be broken down into a report URL and a landing page URL, which speeds up landing page loading and improves user experience. Typically, the server may break down the URL multiple times and ping in parallel to improve the user experience.
In another use case, multiple URLs may be reported on a single event. Previously, when a user interacted with a particular URL element associated with multiple URLs, the application had to address each of the URLs in a separate step. For example, the client device needs business logic to ping URL1, URL2, and URL3, and further ping the API to report internal events. In some implementations, the server generates a single profile that addresses each individual URL and the required ping action. In these flexible implementations, new URLs or internal events to be reported can be easily added to the configuration file. Similarly, the order of actions in the configuration file can be easily changed, and additional parameters can be easily attached. The entire configuration file is then sent to the client device.
The client device supports some general actions, such as opening a URL or installing an application, which can be configured by the server on a per action basis. The client device queries the API for what actions to perform by providing information identifying the user action and receiving the action as a response.
API
An API may be provided on the client device to respond to user actions and to receive instructions from the server. In some implementations, the API includes An API. The following example describes +.>An API. In this example, the user action involves a digital component that includes the leading ad and the subject (e.g., opening the ad subject, submitting a leaderboard form). />The function is invoked from the subject in the following code, which takes the name of the triggered action and invokes the associated configuration file:
triggerAction(str)
because ofThe API is fixed for a particular client version, so the server uses the same API for older clients to avoid incompatibility problems. To address future changes, the API can be extended to employ other (optional) parameters that would be helpful to other use cases:
triggerAction(str,otherParameters)
in this way, the HTML code can be updated to pass new parameters (if available) and the otherParameters variable can be ignored for older clients. The other parameters, if used, can contain metadata, including visual element metadata.
In some cases (e.g., for the leadgen content), it is desirable to log non-static metadata. For example, to report the number of characters entered in a field, visual element events can be defined in the configuration:
Then, from the principal, the visual element metadata is passed using logic to call the API:
<input type＝"text"
id＝"name"
onblur＝"triggerAction('EnterName',enterNameMetadata())">
the following code calls extracting dynamic fields from the subject and constructing visual element metadataFunction:
alternative proto
The following examples describe various protos capable of supporting various primitive actions on a client device. In the following code, the reporting configuration is passed to the client as AdReportingActionConfig. Advertisements are synchronized as separate server services, out of core mail synchronization, and stored only in memory. To support primitive actions, proto can be extended with adnative actions that contain primitive UI actions associated with a configuration:
/>
the action is keyed by an AdActionKey, which is a combination of AdActionType and EventSource. To identify an advertiser action from a subject, the UI action is mapped to an item in the configuration. The adation key may be extended to employ an ID field that can be passed from the client device:
in these implementations, an ad_action_type or event_source is set, and optionally an element_id is set (e.g., when ad_action_type and/or event_source are insufficient to identify a user action). If ad_action_type and event_source are set, then AdRecort ActionConfig is used when the event occurs. If an element_id is set, then when the element_id passes from the principal to triggerEvent (), adoportingactionconfig is used.
API/server configuration
The following example describes a method for reporting actions using reporting configuration considering element ids on Ad:
ListenableFuture<Void>clickedFromBody(String elementId)；
this calls AdsServiceServer.processAddEvent () - > AdsManagerImpl.processAddEventRequest (), where AdEventRequest.EventType=URL_CLICKED and EventSource=CONVERSATION_VIEW. AdsManagerImpl.urlClicked () then calls AdsRecorterImpl.report (), which looks up the report configuration.
A field is added to the AdEventRequest to identify the id passed to the API, which is set in ad.clickedfrom body ().
optional string elementId；
Also provided is a method for taking into account ids on API Ad objects to retrieve primitive actions:
ListenableFuture<ImmutableList<AdNativeAction>>getNativeActions(String elementId)；
alternatively, clickedfrom body may return a list of primitive actions to be performed:
ListenableFuture<ImmutableList<AdNativeAction>>clickedFromBody(String elementId)；
however, this requires the client to wait for reporting to occur before performing the primitive actions, whereas in the previous example they were performed in parallel. Splitting it into two API calls means that the two API calls can continue to occur in parallel.
The method returns a package for handling URL parameterized proto AdNativeAction:
/>
for URL navigation, getnative actions calls adsserviceserver.
Adsmanager repl. Getaddtransitientstate () executes parameterized logic and returns parameterized url in proto similar to the interface described above (from which the interface will read).
/>
Client UI configuration
To use native reports, introduce in webviewInterface, which can be used by a clientThe interface invokes the primitive actions and associated reports. An example implementation is as follows:
/>
visual element events
When the primitive action is a visual element event, the client needs to translate the data into a visual element event in the client, parsing the metadata bytes into the appropriate prototypes.
In some implementations, the tag NATIVE_ACTION can be utilized and populated with client metadata. In some implementations, enumeration of native actions is used in proto, and is converted to visual element tag in the client. In some implementations, a single byte field in a visual element event is copied directly from a client, avoiding concerns over unknown fields. For example, in bigtopvisual element metadata, fields can be added to populate in native actionadvisual element as follows:
optional/*NativeAction*/bytes native_action；
in the visual element pipeline (createlandingpage), bytes are parsed into proto and added to adlandingeevent.
FIG. 6 illustrates an example of a computing device 600 and a mobile computing device 650 that can be used to implement the techniques described here. Computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The mobile computing device 650 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and not limiting.
Computing device 600 may include a processor 602, memory 604, storage 606, a high-speed interface 608 coupled to memory 604 and to a plurality of high-speed expansion ports 610, and a low-speed interface 612 coupled to low-speed expansion ports 614 and storage 606. Each of the processor 602, memory 604, storage 606, high-speed interface 608, high-speed expansion port 610, and low-speed interface 612 may be interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 602 is capable of processing instructions for execution within the computing device 600, including instructions stored in the memory 604 or on the storage device 606, to display graphical information for a GUI on an external input/output device, such as a display 616 coupled to the high-speed interface 608. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. In addition, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multiprocessor system).
Memory 604 may store information within computing device 600. In some implementations, the memory 604 is one or more volatile memory units. In some implementations, the memory 604 is one or more non-volatile memory units. Memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk.
The storage device 606 may have the capability to provide mass storage for the computing device 600. In some implementations, the storage device 606 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory, or other similar solid state memory device or array of devices, including devices in a storage area network or other configurations. The instructions can be stored in an information carrier. The instructions, when executed by one or more processing devices (e.g., processor 602), perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices, such as a computer or machine-readable medium (e.g., memory 604, storage 606, or memory on processor 602).
The high-speed interface 608 may manage bandwidth-intensive operations of the computing device 600, while the low-speed interface 612 may manage lower bandwidth-intensive operations. This allocation of functions is merely an example. In some implementations, the high-speed interface 608 is coupled to the memory 604, the display 616 (e.g., by a graphics processor or accelerator), and to a high-speed expansion port 610 that can accept various expansion cards. In this implementation, a low-speed interface 612 is coupled to storage 606 and low-speed expansion port 614. The low-speed expansion port 614, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, for example, through a network adapter.
As shown, computing device 600 may be implemented in a number of different forms. For example, it may be implemented as a standard server 620, or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer 622. It may also be implemented as part of a rack server system 624. Alternatively, components from computing device 600 may be combined with other components in a mobile device, such as mobile computing device 650. Each of these devices may contain one or more of computing device 600 and mobile computing device 650, and the entire system may be made up of multiple computing devices in communication with each other.
The mobile computing device 650 may include a processor 652, a memory 664, an input/output device such as a display 654, a communication interface 666, and a transceiver 668, among other components. The mobile computing device 650 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of the processor 652, the memory 664, the display 654, the communication interface 666, and the transceiver 668 may be interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
The processor 652 can execute instructions within the mobile computing device 650, including instructions stored in the memory 664. Processor 652 may be implemented as a chipset of chips that include separate pluralities of analog and digital processors. Processor 652 may provide, for example, for coordination of the other components of the mobile computing device 650, such as control of user interfaces, applications run by mobile computing device 650, and wireless communication by mobile computing device 650.
The processor 652 may communicate with a user through a control interface 658 and a display interface 656 coupled to a display 654. The display 654 may be, for example, a TFT (thin film transistor liquid crystal display) display or an OLED (organic light emitting diode) display or other suitable display technology. The display interface 656 may comprise appropriate circuitry for driving the display 654 to present graphical and other information to a user. The control interface 658 may receive commands from a user and convert them for submission to the processor 652. In addition, an external interface 662 may provide communication with the processor 652 in order to enable near area communication of the mobile computing device 650 with other devices. External interface 662 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
The memory 664 can store information within the mobile computing device 650. The memory 664 can be implemented as one or more of one or more computer-readable media, one or more volatile memory units, or one or more non-volatile memory units. Expansion memory 674 may also be provided and connected to mobile computing device 650 via expansion interface 672, wherein expansion interface 672 may include, for example, a SIMM (Single in line memory Module) card interface. Expansion memory 674 may provide additional storage space for mobile computing device 650 or may also store applications or other information for mobile computing device 650. In particular, expansion memory 674 may include instructions for performing or supplementing the processes described above, and may include secure information as well. Thus, for example, expansion memory 674 may be provided as a security module for mobile computing device 650, and may be programmed with instructions that allow secure use of mobile computing device 650. In addition, secure applications may be provided via the SIMM card, as well as additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
As described below, the memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory). In some implementations, the instructions are stored in an information carrier. The instructions, when executed by one or more processing devices (e.g., processor 652), preferably perform one or more methods, such as those described above. The instructions can also be stored by one or more storage devices, such as one or more computer-or machine-readable media (e.g., memory 664, expansion memory 674, or memory on processor 652). In some implementations, the instructions may be received in a propagated signal, for example, through transceiver 668 or external interface 662.
The mobile computing device 650 may communicate wirelessly through a communication interface 666, wherein the communication interface 666 may include digital signal processing circuitry as necessary. Communication interface 666 may provide for communication under various modes or protocols, such as GSM voice calls (global system for mobile communications), SMS (short message service), EMS (enhanced message service) or MMS messages (multimedia message service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (personal digital cellular), WCDMA (wideband code division multiple access), CDMA2000 or GPRS (general packet radio service), and the like. Such communication may occur, for example, through transceiver 668 using radio frequencies. In addition, short-range communications may occur, such as using bluetooth, wiFi, or other such transceivers. In addition, a GPS (Global positioning System) receiver module 670 may provide additional navigation-and location-related wireless data to the mobile computing device 650, which may be used as appropriate by applications running on the mobile computing device 650.
The mobile computing device 650 may also communicate audibly using the audio codec 660, wherein the audio codec 660 may receive voice information from a user and convert it to usable digital information. The audio codec 660 may likewise generate audible sound for a user, such as through a speaker (e.g., in a handset of the mobile computing device 650). Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.), and may also include sound generated by applications operating on the mobile computing device 650.
As shown, the mobile computing device 650 may be implemented in a number of different forms. For example, it may be implemented as a cellular telephone 680. It may also be implemented as part of a smart phone 682, personal digital assistant, or other similar mobile device.
As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components can be stored electronically in the physical storage device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files, and include advertising information such that the advertisements are one type of digital component.
Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, computer program products, and/or combinations thereof. These various implementations can include implementations in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms machine-readable medium and computer-readable medium refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term machine-readable signal refers to any signal used to provide machine instructions and/or data to a programmable processor.
To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other types of devices can also be used to provide interaction with a user; for example, the feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and can receive input from a user in any form, including acoustic, speech, or tactile input.
The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a Local Area Network (LAN), a Wide Area Network (WAN), and the Internet.
The computing system can include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
1. A method, comprising:
selecting, by one or more servers, digital components to be presented in an application running at a client device;
Obtaining, by one or more servers, attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which interaction with the digital component is reported;
after selecting the digital component and obtaining the attributes of the digital component, selecting, by the one or more servers, a configuration file based on the obtained attributes, the configuration file specifying a set of operations to be performed by a client device that presents the digital component in response to user interaction with the digital component; and
a payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
2. The method of claim 1, further comprising:
a configuration report packet is received by a server at a reporting network location, the configuration report packet (i) being generated by a client device in response to execution of a configuration file and (ii) specifying interactions with a digital component at the client device.
3. The method of claim 1 or 2, further comprising:
After the payload is sent to the client device, a second selection of digital components to be presented in the application;
selecting a different profile a second time based on the different profile being mapped to the properties of the digital component than the profile sent in the payload, the different profile specifying a different set of operations than the profile sent in the payload; and
when the attributes of the digital component are mapped to the different configuration files, based on the selection of the digital component, different payloads including information specifying the digital component and the different configuration files instead of the configuration files are sent to the client device.
4. The method of claim 3, wherein the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
5. The method of claim 4, wherein the additional operations cause the client device to collect the operational set of profiles do not cause the client device to collect visual element interaction data, wherein the visual element interaction data is collected in response to user interaction with visual elements of an application that are not part of a digital component presented in the application.
6. The method of any preceding claim, wherein the set of operations comprises:
a first operation performed by the client device in response to a first type of interaction with the digital component; and
a second operation performed by the client device in response to a second type of interaction with the digital component.
7. The method according to claim 6, wherein:
the first operation causes the client device to report a presentation of the digital component in response to a first interaction with a first view of the digital component, the first view of the digital component being presented prior to interaction with the digital component within the application; and
the second operation causes the client device to report a second interaction with a second view of the digital component that is presented after the first interaction with the first view of the digital component.
8. The method of any preceding claim, wherein selecting a configuration file specifying a set of operations to be performed by a client device presenting a digital component comprises:
analyzing the obtained attributes to determine a particular format of the digital component;
determining a version of an application being run by the client device; and
a particular profile defined for a combination of a particular format of the digital component and a version of the application is selected from a plurality of different profiles.
9. A system, comprising:
one or more storage devices storing instructions; and
one or more data processing apparatus configured to interact with one or more storage devices and, when executing the instructions, perform operations comprising:
selecting a digital component to be presented in an application running at a client device;
obtaining attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which the interaction with the digital component is reported;
after selecting the digital component and obtaining the attributes of the digital component, selecting, by the one or more servers, a configuration file based on the obtained attributes, the configuration file specifying a set of operations to be performed by a client device that presents the digital component in response to user interaction with the digital component; and
a payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
10. The system of claim 9, wherein the one or more data processing apparatuses configured to interact with the one or more storage devices, when executing the instructions, perform operations further comprising:
a configuration report packet is received at the reporting network location, the configuration report packet (i) being generated by the client device in response to execution of the configuration file and (ii) specifying interactions with the digital component at the client device.
11. The system of claim 9 or claim 10, wherein the one or more data processing apparatuses configured to interact with the one or more storage devices, when executing the instructions, perform operations further comprising:
after the payload is sent to the client device, a second selection of digital components to be presented in the application;
selecting a different profile a second time based on the different profile being mapped to the properties of the digital component than the profile sent in the payload, the different profile specifying a different set of operations than the profile sent in the payload; and
when the attributes of the digital component are mapped to the different configuration files, based on the selection of the digital component, different payloads including information specifying the digital component and the different configuration files instead of the configuration files are sent to the client device.
12. The system of claim 11, wherein the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
13. The method of claim 12, wherein the additional operations cause the client device to collect the operational set of profiles do not cause the client device to collect visual element interaction data, wherein the visual element interaction data is collected in response to user interaction with visual elements of an application that are not part of a digital component presented in the application.
14. The system of any of claims 9 to 13, wherein the set of operations comprises:
a first operation performed by the client device in response to a first type of interaction with the digital component; and
a second operation performed by the client device in response to a second type of interaction with the digital component.
15. The system of claim 14, wherein:
the first operation causes the client device to report a presentation of the digital component in response to a first interaction with a first view of the digital component, the first view of the digital component being presented prior to interaction with the digital component within the application; and
The second operation causes the client device to report a second interaction with a second view of the digital assembly, the second view of the comb assembly being presented after the first interaction with the first view of the digital assembly.
16. The system of any of claims 9 to 15, wherein selecting a configuration file specifying a set of operations to be performed by a client device presenting digital components comprises:
analyzing the obtained attributes to determine a particular format of the digital component;
determining a version of an application being run by the client device; and
a particular profile defined for a combination of a particular format of the digital component and a version of the application is selected from a plurality of different profiles.
17. A non-transitory computer-readable medium storing instructions that, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
selecting a digital component to be presented in an application running at a client device;
obtaining attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which the interaction with the digital component is reported;
After selecting the digital component and obtaining the attributes of the digital component, selecting, by the one or more servers, a configuration file based on the obtained attributes, the configuration file specifying a set of operations to be performed by a client device that presents the digital component in response to user interaction with the digital component; and
a payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
18. The non-transitory computer-readable medium of claim 17, wherein the instructions, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
a configuration report packet is received at the reporting network location, the configuration report packet (i) being generated by the client device in response to execution of the configuration file and (ii) specifying interactions with the digital component at the client device.
19. The non-transitory computer-readable medium of claim 17 or claim 18, wherein the instructions, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
After the payload is sent to the client device, a second selection of digital components to be presented in the application;
selecting a different profile a second time based on the different profile being mapped to the properties of the digital component than the profile sent in the payload, the different profile specifying a different set of operations than the profile sent in the payload; and
when the attributes of the digital component are mapped to the different configuration files, based on the selection of the digital component, different payloads including information specifying the digital component and the different configuration files instead of the configuration files are sent to the client device.
20. The system of claim 19, wherein the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
Although a few implementations have been described in detail above, other modifications are possible. For example, while the client application is described as accessing delegation(s), in other implementations delegation(s) may be employed by other applications implemented by one or more processors, such as applications executing on one or more servers. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. Additionally, other actions may be provided, or actions may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A method, comprising:
selecting, by one or more servers, digital components to be presented in an application running at a client device;
obtaining, by one or more servers, attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which interaction with the digital component is reported;
selecting, by one or more servers, a profile based on the obtained attributes, the profile specifying a set of operations to be performed by a client device that presents the digital component, wherein selecting the profile comprises:
a particular format of the digital component is determined based on the obtained attributes,
determining a version of an application being run by the client device, and selecting a particular profile from a plurality of different profiles, the particular profile being defined for a combination of a particular format of the digital component and the version of the application; and
a payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
2. The method of claim 1, wherein the profile records statistics of impressions or clicks in an application.
3. The method of claim 2, wherein the profile causes the entity to be charged for impressions or clicks in the application.
4. The method of claim 1, further comprising:
a configuration report packet is received, the configuration report packet (i) generated by the client device in response to execution of the configuration file and (ii) specifying interactions with the digital component at the client device.
5. The method of claim 1, further comprising:
after the payload is sent to the client device, a second selection of digital components to be presented in the application;
a second time selecting a different profile than a profile sent in the payload, the different profile specifying a different set of operations than the profile sent in the payload, based on the different profile being mapped to the properties of the digital component than the profile sent in the payload; and
when the attributes of the digital component are mapped to the different configuration files, based on the selection of the digital component, different payloads including information specifying the digital component and the different configuration files instead of the configuration files are sent to the client device.
6. The method of claim 5, wherein the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
7. The method of claim 6, wherein the additional operations cause the client device to collect the operational set of profiles do not cause the client device to collect visual element interaction data, wherein the visual element interaction data is collected in response to user interaction with visual elements of an application that are not part of a digital component presented in the application.
8. The method of claim 1, wherein the set of operations comprises:
a first operation performed by the client device in response to a first type of interaction with the digital component; and
a second operation performed by the client device in response to a second type of interaction with the digital component.
9. The method according to claim 8, wherein:
the first operation causes the client device to report a presentation of the digital component in response to a first interaction with a first view of the digital component, the first view of the digital component being presented prior to interaction with the digital component within the application; and
The second operation causes the client device to report a second interaction with a second view of the digital component that is presented after the first interaction with the first view of the digital component.
10. A system, comprising:
one or more storage devices storing instructions; and
one or more data processing apparatus configured to interact with one or more storage devices and, when executing the instructions, perform operations comprising:
selecting a digital component to be presented in an application running at a client device;
obtaining attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which the interaction with the digital component is reported;
selecting, by one or more servers, a profile based on the obtained attributes, the profile specifying a set of operations to be performed by a client device that presents the digital component, wherein selecting the profile comprises:
a particular format of the digital component is determined based on the obtained attributes,
determining a version of an application being run by the client device, and selecting a particular profile from a plurality of different profiles, the particular profile being defined for a combination of a particular format of the digital component and the version of the application; and
A payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
11. The system of claim 1, wherein the profile records statistics of impressions or clicks in an application.
12. The system of claim 2, wherein the profile causes the entity to be charged for impressions or clicks in the application.
13. The system of claim 10, wherein the one or more data processing apparatuses configured to interact with the one or more storage devices, when executing the instructions, perform operations further comprising:
a configuration report packet is received at the reporting network location, the configuration report packet (i) being generated by the client device in response to execution of the configuration file and (ii) specifying interactions with the digital component at the client device.
14. The system of claim 10, wherein the one or more data processing apparatuses configured to interact with the one or more storage devices, when executing the instructions, perform operations further comprising:
After the payload is sent to the client device, a second selection of digital components to be presented in the application;
a second time selecting a different profile than a profile sent in the payload, the different profile specifying a different set of operations than the profile sent in the payload, based on the different profile being mapped to the properties of the digital component than the profile sent in the payload; and
when the attributes of the digital component are mapped to the different configuration files, based on the selection of the digital component, different payloads including information specifying the digital component and the different configuration files instead of the configuration files are sent to the client device.
15. The system of claim 14, wherein the different set of operations includes additional operations that cause the client device to perform actions that the configuration file does not cause the client device to perform.
16. The system of claim 15, wherein the additional operations cause the client device to collect the set of operations of the profile do not cause the client device to collect visual element interaction data, wherein the visual element interaction data is collected in response to user interaction with visual elements of an application that are not part of a digital component presented in the application.
17. The system of claim 10, wherein the set of operations comprises:
a first operation performed by the client device in response to a first type of interaction with the digital component; and
a second operation performed by the client device in response to a second type of interaction with the digital component.
18. The system of claim 17, wherein:
the first operation causes the client device to report a presentation of the digital component in response to a first interaction with a first view of the digital component, the first view of the digital component being presented prior to interaction with the digital component within the application; and
the second operation causes the client device to report a second interaction with a second view of the digital component that is presented after the first interaction with the first view of the digital component.
19. A non-transitory computer-readable medium storing instructions that, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
selecting a digital component to be presented in an application running at a client device;
obtaining attributes of the digital component including at least one or more of a destination network location to which the digital component redirects a user in response to interaction with the digital component and a reporting network location to which the interaction with the digital component is reported;
Selecting, by one or more servers, a profile based on the obtained attributes, the profile specifying a set of operations to be performed by a client device that presents the digital component, wherein selecting the profile comprises:
a particular format of the digital component is determined based on the obtained attributes,
determining a version of an application being run by the client device, and selecting a particular profile from a plurality of different profiles, the particular profile being defined for a combination of a particular format of the digital component and the version of the application; and
a payload is sent to the client device, the payload including information specifying the digital component to be presented in the application and a configuration file that, when executed by the client device, causes the client device to perform a set of operations specified by the configuration file.
20. The non-transitory computer-readable medium of claim 19, wherein the instructions, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
a configuration report packet is received at the reporting network location, the configuration report packet (i) being generated by the client device in response to execution of the configuration file and (ii) specifying interactions with the digital component at the client device.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/564,298 US11128736B2 (en) | 2019-09-09 | 2019-09-09 | Dynamically configurable client application activity |
US16/564,298 | 2019-09-09 | ||
CN202080046480.9A CN114402281B (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
PCT/US2020/038634 WO2021050151A1 (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080046480.9A Division CN114402281B (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116483463A true CN116483463A (en) | 2023-07-25 |
Family
ID=71528024
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202310294821.XA Pending CN116483463A (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
CN202080046480.9A Active CN114402281B (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
CN202310293196.7A Pending CN116483228A (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080046480.9A Active CN114402281B (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
CN202310293196.7A Pending CN116483228A (en) | 2019-09-09 | 2020-06-19 | Dynamically configurable client application activity |
Country Status (5)
Country | Link |
---|---|
US (3) | US11128736B2 (en) |
EP (1) | EP3935493A1 (en) |
JP (1) | JP7286798B2 (en) |
CN (3) | CN116483463A (en) |
WO (1) | WO2021050151A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11128736B2 (en) | 2019-09-09 | 2021-09-21 | Google Llc | Dynamically configurable client application activity |
Family Cites Families (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH11316704A (en) * | 1998-05-01 | 1999-11-16 | Nippon Telegr & Teleph Corp <Ntt> | Link converting method of html page and storage medium stored with link converting program |
US7958457B1 (en) * | 1999-12-20 | 2011-06-07 | Wireless Agents, Llc | Method and apparatus for scheduling presentation of digital content on a personal communication device |
JP4355639B2 (en) * | 2004-09-15 | 2009-11-04 | キヤノン株式会社 | Image processing apparatus and control method thereof |
WO2010080598A1 (en) * | 2008-12-19 | 2010-07-15 | Nurago Gmbh | Mobile device and method for providing logging and reporting of user-device interaction |
US8332765B2 (en) * | 2009-03-06 | 2012-12-11 | Microsoft Corporation | Problem reporting system based on user interface interactions |
US8719381B2 (en) * | 2010-10-05 | 2014-05-06 | Edgecast Networks, Inc. | Reconfigurable download manager |
US20150170382A1 (en) * | 2010-10-19 | 2015-06-18 | Izenda, Inc. | Systems and methods for automatic interactive visualizations |
CN102752707B (en) * | 2011-04-19 | 2014-09-17 | 腾讯科技（深圳）有限公司 | Method and system for reporting location information of mobile terminal |
US20140019228A1 (en) * | 2012-07-11 | 2014-01-16 | Char Software, Inc. d/b/a Localytics | System and Method for Performing Application-Level Analytics and Testing to Tailor Actions and Communications to a User's Experience |
WO2014078805A1 (en) * | 2012-11-19 | 2014-05-22 | John Douglas Steinberg | System and method for creating customized, multi-platform video programming |
US9672575B2 (en) * | 2013-04-03 | 2017-06-06 | Salesforce.Com, Inc. | Capturing information regarding an interaction to a database |
US20150035823A1 (en) * | 2013-07-31 | 2015-02-05 | Splunk Inc. | Systems and Methods for Using a Three-Dimensional, First Person Display to Convey Data to a User |
US10965763B2 (en) * | 2014-07-31 | 2021-03-30 | Wells Fargo Bank, N.A. | Web analytics tags |
US20160162277A1 (en) * | 2014-12-05 | 2016-06-09 | Johannes Fenzl | Remote update of software components |
US20160380853A1 (en) * | 2015-06-26 | 2016-12-29 | Qualcomm Incorporated | Reporting media consumption based on service area |
US10264314B2 (en) * | 2016-04-29 | 2019-04-16 | Pccw Vuclip (Singapore) Pte. Ltd. | Multimedia content management system |
US11108681B2 (en) * | 2016-05-20 | 2021-08-31 | Arista Networks, Inc. | Systems for transmitting a data stream and methods for transmitting a data stream |
GB2566657B8 (en) * | 2016-06-30 | 2022-04-13 | Sophos Ltd | Proactive network security using a health heartbeat |
US10536547B2 (en) | 2017-04-03 | 2020-01-14 | Google Llc | Reducing redirects |
JP6843007B2 (en) * | 2017-06-26 | 2021-03-17 | 株式会社三菱Ｕｆｊ銀行 | Application generation support system |
US10943184B2 (en) * | 2017-09-14 | 2021-03-09 | Amadeus S.A.S. | Machine learning methods and systems for predicting online user interactions |
KR102519159B1 (en) * | 2018-01-23 | 2023-04-07 | 삼성전자주식회사 | Electronic apparatus and control method thereof |
US11157846B2 (en) * | 2018-08-06 | 2021-10-26 | Sociometric Solutions, Inc. | System and method for transforming communication metadata and sensor data into an objective measure of the communication distribution of an organization |
US11210466B2 (en) * | 2018-12-07 | 2021-12-28 | Hewlett Packard Enterprise Development Lp | Multiple document editing using rules for a restricted language |
US11128736B2 (en) | 2019-09-09 | 2021-09-21 | Google Llc | Dynamically configurable client application activity |
US11093267B2 (en) * | 2019-11-21 | 2021-08-17 | Zscaler, Inc. | Proxy auto config (PAC) file parser systems and methods |
US20210326018A1 (en) * | 2020-04-16 | 2021-10-21 | Honeywell International Inc. | Systems and methods providing visual affordances for human-machine interfaces |
US11847242B2 (en) * | 2020-05-28 | 2023-12-19 | EMC IP Holding Company LLC | DCF node configuration for device data |
-
2019
- 2019-09-09 US US16/564,298 patent/US11128736B2/en active Active
-
2020
- 2020-06-19 CN CN202310294821.XA patent/CN116483463A/en active Pending
- 2020-06-19 CN CN202080046480.9A patent/CN114402281B/en active Active
- 2020-06-19 JP JP2021560657A patent/JP7286798B2/en active Active
- 2020-06-19 WO PCT/US2020/038634 patent/WO2021050151A1/en unknown
- 2020-06-19 CN CN202310293196.7A patent/CN116483228A/en active Pending
- 2020-06-19 EP EP20737755.7A patent/EP3935493A1/en active Pending
-
2021
- 2021-08-27 US US17/459,628 patent/US11539802B2/en active Active
-
2022
- 2022-12-23 US US18/088,319 patent/US20230208925A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US11128736B2 (en) | 2021-09-21 |
US20230208925A1 (en) | 2023-06-29 |
EP3935493A1 (en) | 2022-01-12 |
US11539802B2 (en) | 2022-12-27 |
US20210075886A1 (en) | 2021-03-11 |
WO2021050151A1 (en) | 2021-03-18 |
US20210392203A1 (en) | 2021-12-16 |
CN114402281B (en) | 2023-03-24 |
JP2022537008A (en) | 2022-08-23 |
JP7286798B2 (en) | 2023-06-05 |
CN114402281A (en) | 2022-04-26 |
CN116483228A (en) | 2023-07-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10924574B2 (en) | Systems and methods for managing loading priority or sequencing of fragments of a web object | |
US10762277B2 (en) | Optimization schemes for controlling user interfaces through gesture or touch | |
US8271107B2 (en) | Controlling audio operation for data management and data rendering | |
US7805730B2 (en) | Common component framework | |
US20130066947A1 (en) | System and Method for Managing Applications for Multiple Computing Endpoints and Multiple Endpoint Types | |
US20060195779A1 (en) | Methods, systems and computer program products for maintaining a separation between markup and data at the client | |
WO2019228059A1 (en) | Data processing method, multi-cloud management system and related device | |
US20090100321A1 (en) | Universal contextual actions menu across windows applications | |
US20120229473A1 (en) | Dynamic Animation in a Mobile Device | |
US20140236756A1 (en) | Systems and methods for integrated recommendations | |
US20060212798A1 (en) | Rendering content natively on local operating system | |
KR20050091027A (en) | System and method of creating and communicating with component based wireless applications | |
JP2009087340A (en) | Method and system for generating screen element of wireless application or data object | |
TW201441829A (en) | Client side page processing | |
KR101960873B1 (en) | Detecting digital content visibility | |
US20090025011A1 (en) | Inter-process communication at a mobile device | |
WO2011061390A1 (en) | Method and apparatus for presenting a web application instance to multiple user interfaces | |
US8631324B2 (en) | Running content emitters natively on local operating system | |
US20230208925A1 (en) | Dynamically configurable client application activity | |
US10652341B2 (en) | Restful interface system for an application | |
US10558487B2 (en) | Dynamic customization of client behavior | |
CN113315687B (en) | Proxy network management method, device, storage medium and terminal | |
US20240069933A1 (en) | Database systems and client-side field retrieval methods | |
US20240070149A1 (en) | Database systems and client-side data synchronization methods | |
US20240070139A1 (en) | Database systems and methods for client-side initiation of server-side actions |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |