US20230367825A1 - Data processing system for generating entries in data structures from network requests - Google Patents
Data processing system for generating entries in data structures from network requests Download PDFInfo
- Publication number
- US20230367825A1 US20230367825A1 US18/312,283 US202318312283A US2023367825A1 US 20230367825 A1 US20230367825 A1 US 20230367825A1 US 202318312283 A US202318312283 A US 202318312283A US 2023367825 A1 US2023367825 A1 US 2023367825A1
- Authority
- US
- United States
- Prior art keywords
- application
- interaction
- remote source
- data
- new
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012545 processing Methods 0.000 title abstract description 73
- 230000003993 interaction Effects 0.000 claims description 133
- 238000000034 method Methods 0.000 claims description 24
- 238000004590 computer program Methods 0.000 claims description 20
- 230000004044 response Effects 0.000 claims description 14
- 238000006243 chemical reaction Methods 0.000 claims description 12
- 230000008569 process Effects 0.000 claims description 7
- 230000004913 activation Effects 0.000 claims 3
- 230000009849 deactivation Effects 0.000 claims 3
- 230000000977 initiatory effect Effects 0.000 claims 2
- 230000015654 memory Effects 0.000 abstract description 50
- 238000004891 communication Methods 0.000 description 20
- 238000010586 diagram Methods 0.000 description 5
- 230000008676 import Effects 0.000 description 5
- 238000011156 evaluation Methods 0.000 description 4
- 230000006870 function Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000009471 action Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 239000004973 liquid crystal related substance Substances 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 2
- 238000013479 data entry Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000002716 delivery method Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 238000002347 injection Methods 0.000 description 1
- 239000007924 injection Substances 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000001737 promoting effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000002910 structure generation Methods 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/215—Improving data quality; Data cleansing, e.g. de-duplication, removing invalid entries or correcting typographical errors
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/06—Resources, workflows, human or project management; Enterprise or organisation planning; Enterprise or organisation modelling
- G06Q10/063—Operations research, analysis or management
- G06Q10/0639—Performance analysis of employees; Performance analysis of enterprise or organisation operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
Definitions
- Publishers develop online applications that are downloaded and installed by users. When a user interacts with the application, analytical data is generated that is related to the application. A publisher may wish to track how many users download the application.
- the application can include interactive aspects. A user can interact with the application and generate additional analytical data. The publisher of the application may wish to track the interactions taking place with users in the application.
- the data processing system includes an input port that receives network requests from a remote source, where each network request includes values of parameters and further includes a value of a key; a shared memory that stores data structures, where each of the data structures is stored in association with a value of a key, and where each of the data structures includes one or more entries for storage of data representing a network request; a parser engine that parses a particular network request of the network requests for values of parameters included in the particular network request and for a value of a key included in the particular network request; a search engine that queries the shared memory for a particular data structure stored in association with the value of the key included in the particular network request; and a logic engine that detects an absence of a particular entry, in the particular data structure, that stores data representing the particular network request, generates an entry in the particular data structure for data representing the particular network request, and stores in the generated entry the values of the parameters.
- At least one of the parameters comprises data indicative of an interaction between an end user and a computing resource of the remote source, and the generated entry in the particular data structure is configured to store data representing the interaction.
- the remote source comprises a computing system of a publisher of online digital content
- the computing resource comprises an application published by the publisher.
- data processing system includes an interface generation engine that configures a user interface for presentation at the computing resource of the remote source, the user interface configured to include a control associated with the at least one of the parameters, the control being configured to specify an action of the logic engine in response to the data representing the interaction.
- the data representing the interaction comprises conversion data.
- the particular data structure is associated with an account of the remote source, and the value of the key represents the account of the remote source.
- the account is a first account and the remote source is associated with a plurality of accounts, and the search engine is configured to query a plurality of data structures each being associated with a second account of the plurality of accounts of the remote source.
- the generated entry is included in each of the plurality of data structures, in response to detecting the absence of the particular entry in the plurality of data structures.
- the generated entry in the particular data structure is searchable by the search engine in response to receiving a subsequent network request from the remote source.
- the network request comprises an HTTP request.
- the described system may provide for one or more benefits or advantages.
- the data processing system data processing system enables application publishers to track analytical data of their applications without needing to pre-declare interaction data (e.g., conversion data, event data, etc.) that the application publisher wishes to track with the data processing system.
- the data processing system can include or be associated with a platform (e.g., advertising platform, analytics tracking service, etc.) for promoting or monetizing the application.
- a network request e.g., HTTP request
- the parameters are automatically extracted from the network request without the publisher having to configure the network request to include one or more parameters in a specified format.
- a library of interactions is generated for the publisher and is accessible across multiple accounts of the publisher.
- the data processing system generates a formatted network request that is formatted for the platform, which can be included in the data processing system.
- the data processing system includes an improved flexibility of handling network requests relative to computing systems that do not include this data processing system because the network requests need not be formatted in a predefined way for the data processing system to extract interaction data from the network request.
- FIG. 1 is a diagram of an environment of the data processing system.
- FIGS. 2 A- 2 C show graphical user interfaces for displaying interaction data associated with a network request.
- FIGS. 3 - 4 are flowcharts showing actions taken for generating interaction data from network requests.
- FIG. 5 is a block diagram of components of a computing system for generating interaction data from network requests.
- networked environment 100 includes a data processing system 102 that is configured to communicate (e.g., over a network, not shown) with a remote source 104 and a terminal device 106 .
- the data processing system 102 includes a computing system (e.g., a server system), such as described in detail with respect to FIG. 5 , below.
- the data processing system 102 includes an interface 118 , a parser engine 120 , a search engine 122 , a logic engine ( 124 ), a shared memory 126 , an interface generation engine 128 , and an analytics/content evaluation platform 136 .
- the shared memory includes a library 130 of network request data, and a set of data structures 132 .
- the data processing system 102 is configured to respond to requests from the remote source 104 , such as a network request 112 (e.g., HTTP request), with interaction data 114 (e.g., conversion data, event data, etc.).
- the interaction data 114 is responsive to the network request 112 .
- the interaction data 114 comprising data associated with an interaction between the terminal device 106 and a computing resource (e.g., computing system, application, webpage, program, etc.) of the remote source 104 .
- the contents of the interaction data 114 are determined by the data processing system 102 based on one or more parameters of the network request 112 , as described below.
- the data processing system 102 is configured to generate interaction data 114 that enables the remote source 104 to respond to interactions with a computing resource (not shown) of the remote source.
- the interaction data 114 can enable the remote source 104 to track occurrences of the interactions with the computing resource.
- the interaction data 114 can enable the remote source 104 to send formatted requests to the analytics platform 136 , which can be a part of the data processing system 102 .
- the analytics platform includes a content evaluation platform (e.g., content auction platform).
- the data processing system 102 enables the remote source 104 to track the interactions with the computing resource (and send the formatted requests to the analytics platform 136 ) without requiring the remote source 104 to pre-define a list of interactions to track with the data processing system 102 .
- the data processing system 102 is configured to determine whether parameters of the network request 112 received from the remote source are indicative of an interaction that has been defined already for the publisher (e.g., advertiser) associated with the remote source 104 . If the interaction is not already defined for the publisher, the data processing system 102 generates data that defines a new interaction event for that publisher and/or remote source 104 .
- the publisher of content provided by the remote source 104 owns an account that stores the data defining the interaction event on the data processing system 102 .
- another user e.g., advertiser
- the account owner can be associated with many remote sources 104 , as described below. If the interaction is already defined for the publisher, the data processing system 102 can respond with data (not shown) from the shared memory 126 responsive to the network request (e.g., analytics data, etc.) or perform some other function (e.g., content evaluation, content auction, etc.).
- data not shown
- the network request e.g., analytics data, etc.
- some other function e.g., content evaluation, content auction, etc.
- the generated data defining the interaction event is presented the account owner (e.g., publisher, advertiser, etc.) on a user interface.
- the account owner can decide to include the newly defined interaction event for other applications (e.g., analytics, advertising) by use of this user interface. Examples of the user interface are provided below in relation to FIGS. 2 A- 2 C .
- the user interface enables a publisher (or other operator of the remote source 104 or associated computing system) to select, import, and manage interactions associated with the computing resource (or plurality of computing resources published by the publisher).
- an analytics platform can send network requests 112 to the data processing system 102 and receive, from the data processing system 102 , interaction data 114 including analytics parameters for tracking interactions of one or more resources.
- the analytics platform does not need to pre-format the network request for each particular interaction type for those one or more resources.
- the terminal device 106 includes a computing device, such as a laptop, tablet, mobile phone, or other computing device (e.g., a computing device of FIG. 5 ).
- the terminal device 106 transmits requests for content (e.g., application request 108 ) to the remote source 104 .
- the terminal device 106 is a client device or end user device.
- the terminal device 106 executes a computing resource provided by the remote source 104 , such as an application, webpage, etc.
- the terminal device 106 interacts with a computing resource executed by a computing system of the remote source 104 .
- the remote source 104 includes a computing system (e.g., a computing system described below in relation to FIG. 5 ) configured to interact with terminal device 106 and the data processing system 102 .
- the remote source 104 interacts with the terminal device 106 either directly or indirectly.
- the remote source 104 interacts with the terminal device 106 directly by responding to data requests (such as application request 108 ) from the terminal device 106 with the requested data (e.g., application data 110 ).
- the remote source can be a publisher of online content, and the terminal device 106 can request the online content from the remote source 104 .
- the remote source 104 interacts with the terminal device 106 indirectly.
- the remote source 104 can provide a resource (e.g., application) to a publishing platform (not shown), which hosts the application for the remote source 104 and/or provides the resource to the terminal device 106 .
- a publishing platform hosts the application for the remote source 104 and/or provides the resource to the terminal device 106 .
- the publishing platform can send data to the remote source indicative of the interaction by the terminal device 106 .
- the publishing platform can relay data indicative of the interaction to the remote source 104 .
- the data processing system 102 is configured to generate interaction data 114 that enables the remote source 104 to response to interactions with a computing resource (not shown) of the remote source.
- the computing resource includes an application, such as a game, social networking application, a fitness tracker, a navigation application, a web services application, payment application, personal assistant application, etc.
- the interaction data can enable the remote source 104 to track downloads of the computing resource, clicks on content in the computing resource, transactions consummated in the resource, requests for particular content in the application, the detection of keywords, purchase of in-game currency, page views, visits to a particular location, or any such interaction with the computing resource.
- a remote source 104 may wish to measure how frequently its users approach a café while using the application. In some implementations, combinations of these interactions can be classified as interactions that are tracked.
- the data processing system 102 includes an interface 118 that is configured to send and receive data from one or more other computing systems (e.g., the terminal device 106 , the remote source 104 ) of the networked environment 100 .
- the interface 118 includes a software interface, such as an Application Programming Interface (API), that facilitates communication with other computing systems.
- API Application Programming Interface
- the interface 118 can include an input port.
- the interface 118 receives the network request 112 from the remote source 104 and sends the network request to the shared memory 126 , the parser engine 120 , the search engine 122 , or other component of the data processing system 102 as appropriate.
- the parser engine 120 includes logic for parsing the network request 112 .
- the parser engine is configured to parse one or more parameters from the network request.
- the parameters can include one or more of a customer ID, an interaction type ID, a name of the remote source 104 , an interaction location, an interaction source, an interaction category, an interaction delivery method, a method of counting the interaction (one per click, many per click, etc.), a link ID, an interaction name, an application ID, a platform name, and other similar parameters.
- Interaction types can include one or more of a first open event, automatic IAP event, application launch, completion of a registration of the application, application purchase, an item is added to a virtual cart in the application, an item is added to a wish list in the application, payment information is added in an application, a user registration in the application, a login of a user, a checkout process is initiated, an in-application purchase, a search query is entered, a level is achieved in the application, a tutorial is completed, particular content is viewed or accessed, content of the application is shared, the application is rated, an invitation is sent to other users to try the application, and a reservation (e.g., for another service) is completed in the application.
- a reservation e.g., for another service
- the parser engine 120 parses the parameters included in the network request 112 and sends the parameters that are found to the search engine 122 .
- the parser 120 also extracts a key that indicates the account associated with the application or the campaign associated with the application.
- the key indicates to the search engine 122 that account with which to associate the network request 112 and where to search in the shared memory 126 for data associated with the parameters of the network request. For example, the key may indicate that a user of account “A” is sending the network request.
- the search engine 122 searches a data structure, of the data structures 132 , associated with account “A” for data responsive to the network request 112 .
- the search engine 122 searches the data structure, of the data structures 132 , based on the key, which indicates the account associated with the network request 112 .
- the remote source 104 can own many accounts.
- a separate data structure stores data for each account.
- a data structure stores data for several associated accounts.
- a data structure stores data for accounts that are not associated, but the key indicates where in the data structure to find one or more entries associated with the account represented by the key.
- the search engine 122 searches the shared memory 126 , based on the parameters and key received from the parser, for a data structure, of the data structures 136 , associated with the account represented by the key and associated with the remote source 104 . If a data structure is not found, the search engine 122 indicates to the logic engine 124 that a new data structure for the account should be generated. If the data structure (account) is found, the search engine 122 searches for an entry comprising the parameter included in the network request 112 (e.g., an entry comprising data that defines the interaction event). If an entry is found, the search engine 122 can report to the logic engine 124 that the interaction event has been defined for the remote source 104 .
- the logic engine 124 sends a request to the analytics platform (e.g., content evaluation platform or auction platform) to solicit bids for the interaction event (or perform some other action). If no entry is found, the search engine 122 reports to the logic engine that a new interaction event should be defined for the remote device 104 . The logic engine 124 generates a new entry in the associated data structure. The new entry in the data structure is responsive to subsequent interaction events of the type specified in the network request 112 , and is thus searchable by the search engine 122 and responsive to subsequent network requests (e.g., HTTP requests) of the same type (e.g., including at least one of the same parameter values that specify the interaction type).
- the analytics platform e.g., content evaluation platform or auction platform
- the new data entry is searchable and responsive to subsequent network requests of the same type (e.g., including one or more parameters specifying the interaction type) only if activated by an account user though a user interface. If a user chooses not to activate a response to subsequent network requests, the request is dropped when received by the data processing system 102 (rather than generating another data entry) because the interaction type has already been defined by the data processing system.
- the same type e.g., including one or more parameters specifying the interaction type
- the user interface is updated by the interface generation engine 128 to include one or more controls (e.g., buttons, sliders, etc.) that enable a user to import the interaction data 114 to the user's system (e.g., for analytics, etc.).
- the user interface can be updated to include one or more controls enabling the user to activate or deactivate tracking (e.g., for analytics or advertising) for the newly defined interaction type.
- Example interfaces are described below in relation to FIGS. 2 A- 2 C .
- the data processing system 102 thus has improved flexibility for responding to network requests (e.g., HTTP request) including data (e.g., one or more parameters) that has not been pre-defined by the remote source 104 (e.g., specifying an interaction type that has not been pre-defined by the remote source).
- the data processing system 102 dynamically configures a response to parameters in the network request specifying an undefined interaction with a resource of the remote source.
- the data processing system 102 is configured to handle subsequent network requests (e.g., HTTP requests) with parameters specifying the interaction without requiring the remote source 104 to provide a correctly configured request.
- the data processing system 102 enables a remote source 104 with many accounts to update all the accounts together. For example, if the remote source 104 publishes several applications, the account for each application can be updated simultaneously, and the remote source 104 need not provide a configuration request for each account. Thus, cross-account interactions can be tracked and managed together.
- the data processing system 102 includes a library 130 of network requests (e.g., HTTP requests) including parameters that specify interaction types. These stored network requests in the library 130 can serve as test data to prepopulate a data structure.
- the data structures 132 are generated and updated in response to receiving network requests (e.g., network request 112 ) from the remote source 104 . There can be a delay in responding to the remote source 104 with interaction data 114 if the response, to the undefined interaction type specified by the network request, is generated dynamically as described above.
- the data processing system 102 can automatically populate the associated data structure(s) with entries comprising the interactions of the system using the library 130 .
- the network requests of the library 130 are stored in response to receiving the requests from the remote source 104 in advance of “real-world” requests being made on the application of the remote source.
- the data processing system 102 supports incomplete interaction testing and data structure generation, which can decrease a delay, for responding to “real-world” network requests (e.g., HTTP requests), caused by dynamically generating the interaction data (e.g., conversion data) at that time.
- FIGS. 2 A- 2 C example interfaces 200 , 210 , and 220 for interacting with the data processing system (e.g., data processing system 102 of FIG. 1 ).
- FIG. 2 A shows interface 200 .
- the user interface enables users to link their resource with the data processing system 102 with a particular link defined by a link ID.
- the user can be, for example, an owner of the remote source 104 , an advertiser, or both.
- the user interface is used to generate a link that is common to the user.
- the common link enables a user to cross-link multiple accounts. For example, an advertiser may wish to link another analytics tool to the data processing system 102 .
- the accounts 204 of the user can share interaction data (e.g., for attribution purposes).
- the interface 200 is used to generate a link that is specific to the remote source (e.g., remote source 104 of FIG. 1 ) and the associated application (or other computing resource) of the remote source.
- the application is identified using one of controls 202 .
- the remote source 104 is identified using controls 206 .
- the link is pasted into the application of the remote source to link the accounts.
- FIG. 2 B shows interfaces 210 , 214 , which include a security measure for the remote source 104 .
- the security measure prevents fake injection of interaction data into another remote source's resource by knowing the link described in relation to FIG. 2 A .
- Interface 210 shows a control 212 for sharing the link described above for linking accounts.
- the user sharing the link between the two accounts can offer to share the link with a second account.
- Interface 214 shows a user receiving the offer for sharing the link between accounts.
- the user accepts the link using the control 216 .
- the offer and acceptance flow ensures that, if an unauthorized user knows the link ID described above, the unauthorized user cannot misuse the link ID.
- the interface 210 enables a user associated with the remote source 104 to add a security code to their link.
- a control (not shown) is used to enable the user to include the link particular to the user's accounts.
- a control (not shown) enables the user to append a security code to the link.
- data processing system 102 will recognize and respond to network requests (e.g., HTTP requests) only from authorized users.
- FIG. 2 C includes an interface 220 for importing interaction data for one or more interactions.
- a user e.g., owner of the remote source 104 or otherwise associated with the remote source
- the user can activate or deactivate tracking the interaction type for their resource.
- the user can import conversion events from another source (e.g., another tracking source) to include in the data processing system 102 .
- the data processing system 102 based on the third party interaction data, determines whether the interaction has been defined in the account of the user already or whether a new interaction event should be defined, as described above.
- the user can specify what kinds of interactions qualify.
- the user using controls 224 , can specify which interaction events to import from the third party tracking resource. As stated above, if any of the imported interactions are not already defined in the data processing system 102 , the data processing system 102 can automatically generate interaction data 114 for each new interaction type.
- a block diagram 300 showing an example process for generating data from a network request (e.g., HTTP request) is shown.
- the terminal device 105 sends ( 302 ) a request for application data to the remote source 104 .
- the remote source records ( 304 ) the interaction event in the application (e.g., an in-application purchase, download, etc.).
- the remote source generates ( 306 ) application data.
- the remote source may send a copy of the application for download, may advance the user to the next level in a game, and so forth.
- the terminal device 106 receives ( 308 ) the application data.
- the remote source 102 generates ( 310 ) a network request for conversion data.
- the network request may be configured for being sent to an ad exchange or to a tracking platform of the data processing system 102 .
- the data processing system 102 receives ( 312 ) the network request.
- the data processing system 102 stores ( 314 ) the network request to a shared memory.
- the data processing system 102 parses ( 316 ) the network request for parameters specifying the interaction event.
- the data processing system 102 searches ( 318 ) the shared memory for a related interaction event associated with an account of the remote source 104 (e.g., a publisher's account).
- the data processing system 102 generates ( 320 ) an entry including the interaction event type of the network request.
- the data processing system 102 retrieves ( 322 ) data associated with the interaction event.
- the data processing system 102 updates ( 324 ) the user interface for the account of the publisher with data associated with the interaction event.
- the data includes a control enabling the user to import the new conversion event type into a tracking/advertising campaign.
- the remote source 104 receives ( 326 ) the data associated with the interaction event, e.g., in the user interface.
- the terminal device 106 directly generates and sends ( 328 ) the network request for data associated with the remote source.
- the data processing system 102 can automatically generate a new conversion event as before.
- a flow diagram 400 showing a process for generating data in response to receiving a network request (e.g., HTTP request) is shown.
- the data processing system 102 receives ( 402 ) one or more network request from a remote source.
- the data processing system 102 parses ( 404 ) a network request for values of parameters included in the network request and for a value of a key referenced in the network request.
- the key indicates an account associated with the network request.
- the data processing system 102 queries ( 406 ) a shared memory for a data structure to which the key is assigned. The query is further for an entry of the data structure comprising one or more of the values of the parameters.
- a new data structure is generated ( 412 ) by the data processing system 102 . If a data structure is found ( 408 ), the data processing system 102 searches for an entry in the data structure that includes the parameters. If no entry is found ( 410 ), the data processing system 102 generates ( 414 ) a data structure entry for the interaction type specified in the parameters and populates the entry with the parameter values. Once an entry is found or generated, the data processing system 102 updates ( 416 ) the user interface for the remote source. The data processing system 102 sends ( 418 ) the interaction data responsive to the network request to the remote source if applicable. In some implementations, data is sent to a tracking or advertising exchange.
- FIG. 5 is a block diagram of computing devices 500 , 550 that may be used to implement the systems and methods described in this document, either as a client or as a server or plurality of servers.
- Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 550 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices.
- Additionally computing device 500 or 550 can include Universal Serial Bus (USB) flash drives.
- the USB flash drives may store operating systems and other applications.
- the USB flash drives can include input/output components, such as a wireless transmitter or USB connector that may be inserted into a USB port of another computing device.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 500 includes a processor 502 , memory 504 , a storage device 506 , a high-speed interface 508 connecting to memory 504 and high-speed expansion ports 510 , and a low speed interface 512 connecting to low speed bus 514 and storage device 506 .
- Each of the components 502 , 504 , 506 , 508 , 510 , and 512 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 502 can process instructions for execution within the computing device 500 , including instructions stored in the memory 504 or on the storage device 506 to display graphical information for a GUI on an external input/output device, such as display 516 coupled to high speed interface 508 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 504 stores information within the computing device 500 .
- the memory 504 is a volatile memory unit or units.
- the memory 504 is a non-volatile memory unit or units.
- the memory 504 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 506 is capable of providing mass storage for the computing device 500 .
- the storage device 506 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid-state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 504 , the storage device 506 , or memory on processor 502 .
- the high-speed controller 508 manages bandwidth-intensive operations for the computing device 500 , while the low speed controller 512 manages lower bandwidth-intensive operations.
- the high-speed controller 508 is coupled to memory 504 , display 516 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 510 , which may accept various expansion cards (not shown).
- low-speed controller 512 is coupled to storage device 506 and low-speed expansion port 514 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 520 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 524 . In addition, it may be implemented in a personal computer such as a laptop computer 522 . Alternatively, components from computing device 500 may be combined with other components in a mobile device (not shown), such as device 550 . Each of such devices may contain one or more of computing device 500 , 550 , and an entire system may be made up of multiple computing devices 500 , 550 communicating with each other.
- Computing device 550 includes a processor 552 , memory 564 , an input/output device such as a display 554 , a communication interface 566 , and a transceiver 568 , among other components.
- the device 550 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 550 , 552 , 564 , 554 , 566 , and 568 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 552 can execute instructions within the computing device 550 , including instructions stored in the memory 564 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally, the processor may be implemented using any of a number of architectures.
- the processor 410 may be a CISC (Complex Instruction Set Computers) processor, a RISC (Reduced Instruction Set Computer) processor, or a MISC (Minimal Instruction Set Computer) processor.
- the processor may provide, for example, for coordination of the other components of the device 550 , such as control of user interfaces, applications run by device 550 , and wireless communication by device 550 .
- Processor 552 may communicate with a user through control interface 558 and display interface 556 coupled to a display 554 .
- the display 554 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 556 may comprise appropriate circuitry for driving the display 554 to present graphical and other information to a user.
- the control interface 558 may receive commands from a user and convert them for submission to the processor 552 .
- an external interface 562 may be provide in communication with processor 552 , so as to enable near area communication of device 550 with other devices. External interface 562 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may be used.
- the memory 564 stores information within the computing device 550 .
- the memory 564 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 574 may also be provided and connected to device 550 through expansion interface 572 , which may include, for example, a SIMM (Single In-Line Memory Module) card interface.
- SIMM Single In-Line Memory Module
- expansion memory 574 may provide extra storage space for device 550 , or may also store applications or other information for device 550 .
- expansion memory 574 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 574 may be provided as a security module for device 550 , and may be programmed with instructions that permit secure use of device 550 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 564 , expansion memory 574 , or memory on processor 552 that may be received, for example, over transceiver 568 or external interface 862 .
- Device 550 may communicate wirelessly through communication interface 566 , which may include digital signal processing circuitry where necessary. Communication interface 566 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 568 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 570 may provide additional navigation- and location-related wireless data to device 550 , which may be used as appropriate by applications running on device 550 .
- GPS Global Positioning System
- Device 550 may also communicate audibly using audio codec 560 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 560 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 550 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may include sound generated by applications operating on device 550 .
- Audio codec 560 may receive spoken information from a user and convert it to usable digital information. Audio codec 560 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 550 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may include sound generated by applications operating on device 550 .
- the computing device 550 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 582 . It may also be implemented as part of a smartphone 580 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- LAN local area network
- WAN wide area network
- peer-to-peer networks having ad-hoc or static members
- grid computing infrastructures and the Internet.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- the features described is implemented in digital electronic circuitry, in computer hardware, firmware, software, or in combinations of them.
- the apparatus is implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device for execution by a programmable processor; and method steps is performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output.
- the described features are implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device.
- a computer program is a set of instructions that is used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result.
- a computer program is written in any form of programming language, including compiled or interpreted languages, and it is deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data.
- a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks.
- Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices such as EPROM, EEPROM, and flash memory devices
- magnetic disks such as internal hard disks and removable disks
- magneto-optical disks and CD-ROM and DVD-ROM disks.
- the processor and the memory is supplemented by, or incorporated in, ASICs (application-specific integrated circuits).
- ASICs application-specific integrated circuits
- a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user provides input to the computer.
- a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user provides input to the computer.
- the features are implemented in a computer system that includes a back-end component, such as a data server, that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them.
- the components of the system are connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- LAN local area network
- WAN wide area network
- peer-to-peer networks having ad-hoc or static members
- grid computing infrastructures and the Internet.
- the computer system includes clients and servers.
- a client and server are generally remote from each other and typically interact through a network, such as the described one.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This is a continuation of, and claims priority to, U.S. application Ser. No. 17/161,455, filed on Jan. 28, 2021, which is a continuation of, and claims priority to, U.S. application Ser. No. 15/983,544, filed on May 18, 2018, the entire contents of each are incorporated herein by reference.
- Publishers develop online applications that are downloaded and installed by users. When a user interacts with the application, analytical data is generated that is related to the application. A publisher may wish to track how many users download the application. The application can include interactive aspects. A user can interact with the application and generate additional analytical data. The publisher of the application may wish to track the interactions taking place with users in the application.
- The data processing system includes an input port that receives network requests from a remote source, where each network request includes values of parameters and further includes a value of a key; a shared memory that stores data structures, where each of the data structures is stored in association with a value of a key, and where each of the data structures includes one or more entries for storage of data representing a network request; a parser engine that parses a particular network request of the network requests for values of parameters included in the particular network request and for a value of a key included in the particular network request; a search engine that queries the shared memory for a particular data structure stored in association with the value of the key included in the particular network request; and a logic engine that detects an absence of a particular entry, in the particular data structure, that stores data representing the particular network request, generates an entry in the particular data structure for data representing the particular network request, and stores in the generated entry the values of the parameters.
- In some implementations, at least one of the parameters comprises data indicative of an interaction between an end user and a computing resource of the remote source, and the generated entry in the particular data structure is configured to store data representing the interaction. In some implementations, the remote source comprises a computing system of a publisher of online digital content, and the computing resource comprises an application published by the publisher.
- In some implementations, data processing system includes an interface generation engine that configures a user interface for presentation at the computing resource of the remote source, the user interface configured to include a control associated with the at least one of the parameters, the control being configured to specify an action of the logic engine in response to the data representing the interaction.
- In some implementations, the data representing the interaction comprises conversion data. In some implementations, the particular data structure is associated with an account of the remote source, and the value of the key represents the account of the remote source. In some implementations, the account is a first account and the remote source is associated with a plurality of accounts, and the search engine is configured to query a plurality of data structures each being associated with a second account of the plurality of accounts of the remote source.
- In some implementations, the generated entry is included in each of the plurality of data structures, in response to detecting the absence of the particular entry in the plurality of data structures. In some implementations, the generated entry in the particular data structure is searchable by the search engine in response to receiving a subsequent network request from the remote source. In some implementations, the network request comprises an HTTP request.
- The described system may provide for one or more benefits or advantages. The data processing system data processing system enables application publishers to track analytical data of their applications without needing to pre-declare interaction data (e.g., conversion data, event data, etc.) that the application publisher wishes to track with the data processing system. The data processing system can include or be associated with a platform (e.g., advertising platform, analytics tracking service, etc.) for promoting or monetizing the application. A network request (e.g., HTTP request) is automatically parsed for parameters that are indicative of an interaction (e.g., a conversion, event, etc.) that can be tracked by the data processing system. The parameters are automatically extracted from the network request without the publisher having to configure the network request to include one or more parameters in a specified format. A library of interactions is generated for the publisher and is accessible across multiple accounts of the publisher. The data processing system generates a formatted network request that is formatted for the platform, which can be included in the data processing system. The data processing system includes an improved flexibility of handling network requests relative to computing systems that do not include this data processing system because the network requests need not be formatted in a predefined way for the data processing system to extract interaction data from the network request.
- The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the systems and techniques described herein will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a diagram of an environment of the data processing system. -
FIGS. 2A-2C show graphical user interfaces for displaying interaction data associated with a network request. -
FIGS. 3-4 are flowcharts showing actions taken for generating interaction data from network requests. -
FIG. 5 is a block diagram of components of a computing system for generating interaction data from network requests. - Like reference symbols in the various drawings indicate like elements.
- Referring to
FIG. 1 ,networked environment 100 includes adata processing system 102 that is configured to communicate (e.g., over a network, not shown) with aremote source 104 and aterminal device 106. Thedata processing system 102 includes a computing system (e.g., a server system), such as described in detail with respect toFIG. 5 , below. Thedata processing system 102 includes aninterface 118, aparser engine 120, asearch engine 122, a logic engine (124), a sharedmemory 126, aninterface generation engine 128, and an analytics/content evaluation platform 136. The shared memory includes alibrary 130 of network request data, and a set ofdata structures 132. - The
data processing system 102 is configured to respond to requests from theremote source 104, such as a network request 112 (e.g., HTTP request), with interaction data 114 (e.g., conversion data, event data, etc.). Theinteraction data 114 is responsive to thenetwork request 112. Theinteraction data 114 comprising data associated with an interaction between theterminal device 106 and a computing resource (e.g., computing system, application, webpage, program, etc.) of theremote source 104. The contents of theinteraction data 114 are determined by thedata processing system 102 based on one or more parameters of thenetwork request 112, as described below. - The
data processing system 102 is configured to generateinteraction data 114 that enables theremote source 104 to respond to interactions with a computing resource (not shown) of the remote source. Theinteraction data 114 can enable theremote source 104 to track occurrences of the interactions with the computing resource. For example, theinteraction data 114 can enable theremote source 104 to send formatted requests to theanalytics platform 136, which can be a part of thedata processing system 102. In some implementations, the analytics platform includes a content evaluation platform (e.g., content auction platform). Thedata processing system 102 enables theremote source 104 to track the interactions with the computing resource (and send the formatted requests to the analytics platform 136) without requiring theremote source 104 to pre-define a list of interactions to track with thedata processing system 102. - The
data processing system 102 is configured to determine whether parameters of thenetwork request 112 received from the remote source are indicative of an interaction that has been defined already for the publisher (e.g., advertiser) associated with theremote source 104. If the interaction is not already defined for the publisher, thedata processing system 102 generates data that defines a new interaction event for that publisher and/orremote source 104. In some implementations, the publisher of content provided by theremote source 104 owns an account that stores the data defining the interaction event on thedata processing system 102. In some implementations, another user (e.g., advertiser) associated with theremote source 104 owns the account on thedata processing system 102 that stores the data. In some implementations, the account owner can be associated with manyremote sources 104, as described below. If the interaction is already defined for the publisher, thedata processing system 102 can respond with data (not shown) from the sharedmemory 126 responsive to the network request (e.g., analytics data, etc.) or perform some other function (e.g., content evaluation, content auction, etc.). - The generated data defining the interaction event is presented the account owner (e.g., publisher, advertiser, etc.) on a user interface. The account owner can decide to include the newly defined interaction event for other applications (e.g., analytics, advertising) by use of this user interface. Examples of the user interface are provided below in relation to
FIGS. 2A-2C . The user interface enables a publisher (or other operator of theremote source 104 or associated computing system) to select, import, and manage interactions associated with the computing resource (or plurality of computing resources published by the publisher). For example, an analytics platform can sendnetwork requests 112 to thedata processing system 102 and receive, from thedata processing system 102,interaction data 114 including analytics parameters for tracking interactions of one or more resources. The analytics platform does not need to pre-format the network request for each particular interaction type for those one or more resources. - The
terminal device 106 includes a computing device, such as a laptop, tablet, mobile phone, or other computing device (e.g., a computing device ofFIG. 5 ). Theterminal device 106 transmits requests for content (e.g., application request 108) to theremote source 104. In some implementations, theterminal device 106 is a client device or end user device. In some implementations, theterminal device 106 executes a computing resource provided by theremote source 104, such as an application, webpage, etc. In some implementations, theterminal device 106 interacts with a computing resource executed by a computing system of theremote source 104. - The
remote source 104 includes a computing system (e.g., a computing system described below in relation toFIG. 5 ) configured to interact withterminal device 106 and thedata processing system 102. Theremote source 104 interacts with theterminal device 106 either directly or indirectly. Theremote source 104 interacts with theterminal device 106 directly by responding to data requests (such as application request 108) from theterminal device 106 with the requested data (e.g., application data 110). For example, the remote source can be a publisher of online content, and theterminal device 106 can request the online content from theremote source 104. In some implementations, theremote source 104 interacts with theterminal device 106 indirectly. In some implementations, theremote source 104 can provide a resource (e.g., application) to a publishing platform (not shown), which hosts the application for theremote source 104 and/or provides the resource to theterminal device 106. In response to an interaction of theterminal device 106 with the resource, the publishing platform can send data to the remote source indicative of the interaction by theterminal device 106. For example, when theterminal device 106 downloads an application provided by theremote source 104 from a publishing platform, the publishing platform can relay data indicative of the interaction to theremote source 104. - The
data processing system 102 is configured to generateinteraction data 114 that enables theremote source 104 to response to interactions with a computing resource (not shown) of the remote source. In some implementations, the computing resource includes an application, such as a game, social networking application, a fitness tracker, a navigation application, a web services application, payment application, personal assistant application, etc. For example, the interaction data can enable theremote source 104 to track downloads of the computing resource, clicks on content in the computing resource, transactions consummated in the resource, requests for particular content in the application, the detection of keywords, purchase of in-game currency, page views, visits to a particular location, or any such interaction with the computing resource. For example, aremote source 104 may wish to measure how frequently its users approach a café while using the application. In some implementations, combinations of these interactions can be classified as interactions that are tracked. - The components of the
data processing system 102 are now described. Thedata processing system 102 includes aninterface 118 that is configured to send and receive data from one or more other computing systems (e.g., theterminal device 106, the remote source 104) of thenetworked environment 100. In some implementations, theinterface 118 includes a software interface, such as an Application Programming Interface (API), that facilitates communication with other computing systems. Theinterface 118 can include an input port. Theinterface 118 receives thenetwork request 112 from theremote source 104 and sends the network request to the sharedmemory 126, theparser engine 120, thesearch engine 122, or other component of thedata processing system 102 as appropriate. - The
parser engine 120 includes logic for parsing thenetwork request 112. The parser engine is configured to parse one or more parameters from the network request. The parameters can include one or more of a customer ID, an interaction type ID, a name of theremote source 104, an interaction location, an interaction source, an interaction category, an interaction delivery method, a method of counting the interaction (one per click, many per click, etc.), a link ID, an interaction name, an application ID, a platform name, and other similar parameters. Interaction types can include one or more of a first open event, automatic IAP event, application launch, completion of a registration of the application, application purchase, an item is added to a virtual cart in the application, an item is added to a wish list in the application, payment information is added in an application, a user registration in the application, a login of a user, a checkout process is initiated, an in-application purchase, a search query is entered, a level is achieved in the application, a tutorial is completed, particular content is viewed or accessed, content of the application is shared, the application is rated, an invitation is sent to other users to try the application, and a reservation (e.g., for another service) is completed in the application. - The
parser engine 120 parses the parameters included in thenetwork request 112 and sends the parameters that are found to thesearch engine 122. Theparser 120 also extracts a key that indicates the account associated with the application or the campaign associated with the application. The key indicates to thesearch engine 122 that account with which to associate thenetwork request 112 and where to search in the sharedmemory 126 for data associated with the parameters of the network request. For example, the key may indicate that a user of account “A” is sending the network request. Thesearch engine 122 then searches a data structure, of thedata structures 132, associated with account “A” for data responsive to thenetwork request 112. - The
search engine 122 searches the data structure, of thedata structures 132, based on the key, which indicates the account associated with thenetwork request 112. In some implementations, theremote source 104 can own many accounts. In some implementations, a separate data structure stores data for each account. In some implementations, a data structure stores data for several associated accounts. In some implementations, a data structure stores data for accounts that are not associated, but the key indicates where in the data structure to find one or more entries associated with the account represented by the key. - The
search engine 122 searches the sharedmemory 126, based on the parameters and key received from the parser, for a data structure, of thedata structures 136, associated with the account represented by the key and associated with theremote source 104. If a data structure is not found, thesearch engine 122 indicates to thelogic engine 124 that a new data structure for the account should be generated. If the data structure (account) is found, thesearch engine 122 searches for an entry comprising the parameter included in the network request 112 (e.g., an entry comprising data that defines the interaction event). If an entry is found, thesearch engine 122 can report to thelogic engine 124 that the interaction event has been defined for theremote source 104. Thelogic engine 124 sends a request to the analytics platform (e.g., content evaluation platform or auction platform) to solicit bids for the interaction event (or perform some other action). If no entry is found, thesearch engine 122 reports to the logic engine that a new interaction event should be defined for theremote device 104. Thelogic engine 124 generates a new entry in the associated data structure. The new entry in the data structure is responsive to subsequent interaction events of the type specified in thenetwork request 112, and is thus searchable by thesearch engine 122 and responsive to subsequent network requests (e.g., HTTP requests) of the same type (e.g., including at least one of the same parameter values that specify the interaction type). In some implementations, the new data entry is searchable and responsive to subsequent network requests of the same type (e.g., including one or more parameters specifying the interaction type) only if activated by an account user though a user interface. If a user chooses not to activate a response to subsequent network requests, the request is dropped when received by the data processing system 102 (rather than generating another data entry) because the interaction type has already been defined by the data processing system. - The user interface is updated by the
interface generation engine 128 to include one or more controls (e.g., buttons, sliders, etc.) that enable a user to import theinteraction data 114 to the user's system (e.g., for analytics, etc.). The user interface can be updated to include one or more controls enabling the user to activate or deactivate tracking (e.g., for analytics or advertising) for the newly defined interaction type. Example interfaces are described below in relation toFIGS. 2A-2C . - The
data processing system 102 thus has improved flexibility for responding to network requests (e.g., HTTP request) including data (e.g., one or more parameters) that has not been pre-defined by the remote source 104 (e.g., specifying an interaction type that has not been pre-defined by the remote source). Thedata processing system 102 dynamically configures a response to parameters in the network request specifying an undefined interaction with a resource of the remote source. Thedata processing system 102 is configured to handle subsequent network requests (e.g., HTTP requests) with parameters specifying the interaction without requiring theremote source 104 to provide a correctly configured request. - The
data processing system 102 enables aremote source 104 with many accounts to update all the accounts together. For example, if theremote source 104 publishes several applications, the account for each application can be updated simultaneously, and theremote source 104 need not provide a configuration request for each account. Thus, cross-account interactions can be tracked and managed together. - The
data processing system 102 includes alibrary 130 of network requests (e.g., HTTP requests) including parameters that specify interaction types. These stored network requests in thelibrary 130 can serve as test data to prepopulate a data structure. Generally, thedata structures 132 are generated and updated in response to receiving network requests (e.g., network request 112) from theremote source 104. There can be a delay in responding to theremote source 104 withinteraction data 114 if the response, to the undefined interaction type specified by the network request, is generated dynamically as described above. When an account is generated, thedata processing system 102 can automatically populate the associated data structure(s) with entries comprising the interactions of the system using thelibrary 130. The network requests of thelibrary 130 are stored in response to receiving the requests from theremote source 104 in advance of “real-world” requests being made on the application of the remote source. In this way, thedata processing system 102 supports incomplete interaction testing and data structure generation, which can decrease a delay, for responding to “real-world” network requests (e.g., HTTP requests), caused by dynamically generating the interaction data (e.g., conversion data) at that time. - Referring to
FIGS. 2A-2C , example interfaces 200, 210, and 220 for interacting with the data processing system (e.g.,data processing system 102 ofFIG. 1 ).FIG. 2A showsinterface 200. The user interface enables users to link their resource with thedata processing system 102 with a particular link defined by a link ID. The user can be, for example, an owner of theremote source 104, an advertiser, or both. The user interface is used to generate a link that is common to the user. The common link enables a user to cross-link multiple accounts. For example, an advertiser may wish to link another analytics tool to thedata processing system 102. Theaccounts 204 of the user can share interaction data (e.g., for attribution purposes). Theinterface 200 is used to generate a link that is specific to the remote source (e.g.,remote source 104 ofFIG. 1 ) and the associated application (or other computing resource) of the remote source. The application is identified using one ofcontrols 202. Theremote source 104 is identified usingcontrols 206. The link is pasted into the application of the remote source to link the accounts. -
FIG. 2B showsinterfaces remote source 104. The security measure prevents fake injection of interaction data into another remote source's resource by knowing the link described in relation toFIG. 2A . -
Interface 210 shows acontrol 212 for sharing the link described above for linking accounts. The user sharing the link between the two accounts can offer to share the link with a second account.Interface 214 shows a user receiving the offer for sharing the link between accounts. The user accepts the link using thecontrol 216. The offer and acceptance flow ensures that, if an unauthorized user knows the link ID described above, the unauthorized user cannot misuse the link ID. - In some implementations, the
interface 210 enables a user associated with theremote source 104 to add a security code to their link. A control (not shown) is used to enable the user to include the link particular to the user's accounts. A control (not shown) enables the user to append a security code to the link. In this way,data processing system 102 will recognize and respond to network requests (e.g., HTTP requests) only from authorized users. -
FIG. 2C includes aninterface 220 for importing interaction data for one or more interactions. A user (e.g., owner of theremote source 104 or otherwise associated with the remote source) can specify which interactions to track as described above by selecting the interactions from a list. Simply by selecting the generated interaction types, generated by thedata processing system 102, the user can activate or deactivate tracking the interaction type for their resource. Additionally, as shown in theinterface 220, the user can import conversion events from another source (e.g., another tracking source) to include in thedata processing system 102. Thedata processing system 102, based on the third party interaction data, determines whether the interaction has been defined in the account of the user already or whether a new interaction event should be defined, as described above. The user, usingcontrols 222, can specify what kinds of interactions qualify. The user, usingcontrols 224, can specify which interaction events to import from the third party tracking resource. As stated above, if any of the imported interactions are not already defined in thedata processing system 102, thedata processing system 102 can automatically generateinteraction data 114 for each new interaction type. - Referring to
FIG. 3 , a block diagram 300 showing an example process for generating data from a network request (e.g., HTTP request) is shown. The terminal device 105 sends (302) a request for application data to theremote source 104. The remote source records (304) the interaction event in the application (e.g., an in-application purchase, download, etc.). The remote source generates (306) application data. For example, the remote source may send a copy of the application for download, may advance the user to the next level in a game, and so forth. Theterminal device 106 receives (308) the application data. Theremote source 102 generates (310) a network request for conversion data. For example, the network request may be configured for being sent to an ad exchange or to a tracking platform of thedata processing system 102. Thedata processing system 102 receives (312) the network request. Thedata processing system 102 stores (314) the network request to a shared memory. Thedata processing system 102 parses (316) the network request for parameters specifying the interaction event. Thedata processing system 102 searches (318) the shared memory for a related interaction event associated with an account of the remote source 104 (e.g., a publisher's account). Thedata processing system 102 generates (320) an entry including the interaction event type of the network request. Thedata processing system 102 retrieves (322) data associated with the interaction event. Thedata processing system 102 updates (324) the user interface for the account of the publisher with data associated with the interaction event. In some implementations, the data includes a control enabling the user to import the new conversion event type into a tracking/advertising campaign. Theremote source 104 receives (326) the data associated with the interaction event, e.g., in the user interface. In some implementations, theterminal device 106 directly generates and sends (328) the network request for data associated with the remote source. Thedata processing system 102 can automatically generate a new conversion event as before. - Referring to
FIG. 4 , a flow diagram 400 showing a process for generating data in response to receiving a network request (e.g., HTTP request) is shown. Thedata processing system 102 receives (402) one or more network request from a remote source. Thedata processing system 102 parses (404) a network request for values of parameters included in the network request and for a value of a key referenced in the network request. The key indicates an account associated with the network request. Thedata processing system 102 queries (406) a shared memory for a data structure to which the key is assigned. The query is further for an entry of the data structure comprising one or more of the values of the parameters. If the data structure (account) is not found (408), a new data structure is generated (412) by thedata processing system 102. If a data structure is found (408), thedata processing system 102 searches for an entry in the data structure that includes the parameters. If no entry is found (410), thedata processing system 102 generates (414) a data structure entry for the interaction type specified in the parameters and populates the entry with the parameter values. Once an entry is found or generated, thedata processing system 102 updates (416) the user interface for the remote source. Thedata processing system 102 sends (418) the interaction data responsive to the network request to the remote source if applicable. In some implementations, data is sent to a tracking or advertising exchange. -
FIG. 5 is a block diagram ofcomputing devices Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 550 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices. Additionally computingdevice -
Computing device 500 includes aprocessor 502,memory 504, astorage device 506, a high-speed interface 508 connecting tomemory 504 and high-speed expansion ports 510, and alow speed interface 512 connecting tolow speed bus 514 andstorage device 506. Each of thecomponents processor 502 can process instructions for execution within thecomputing device 500, including instructions stored in thememory 504 or on thestorage device 506 to display graphical information for a GUI on an external input/output device, such asdisplay 516 coupled tohigh speed interface 508. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. In addition,multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 504 stores information within thecomputing device 500. In one implementation, thememory 504 is a volatile memory unit or units. In another implementation, thememory 504 is a non-volatile memory unit or units. Thememory 504 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 506 is capable of providing mass storage for thecomputing device 500. In one implementation, thestorage device 506 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid-state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 504, thestorage device 506, or memory onprocessor 502. - The high-
speed controller 508 manages bandwidth-intensive operations for thecomputing device 500, while thelow speed controller 512 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller 508 is coupled tomemory 504, display 516 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 510, which may accept various expansion cards (not shown). In the implementation, low-speed controller 512 is coupled tostorage device 506 and low-speed expansion port 514. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 520, or multiple times in a group of such servers. It may also be implemented as part of arack server system 524. In addition, it may be implemented in a personal computer such as alaptop computer 522. Alternatively, components fromcomputing device 500 may be combined with other components in a mobile device (not shown), such asdevice 550. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 550 includes aprocessor 552,memory 564, an input/output device such as adisplay 554, a communication interface 566, and atransceiver 568, among other components. Thedevice 550 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 552 can execute instructions within thecomputing device 550, including instructions stored in thememory 564. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally, the processor may be implemented using any of a number of architectures. For example, theprocessor 410 may be a CISC (Complex Instruction Set Computers) processor, a RISC (Reduced Instruction Set Computer) processor, or a MISC (Minimal Instruction Set Computer) processor. The processor may provide, for example, for coordination of the other components of thedevice 550, such as control of user interfaces, applications run bydevice 550, and wireless communication bydevice 550. -
Processor 552 may communicate with a user throughcontrol interface 558 anddisplay interface 556 coupled to adisplay 554. Thedisplay 554 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 556 may comprise appropriate circuitry for driving thedisplay 554 to present graphical and other information to a user. Thecontrol interface 558 may receive commands from a user and convert them for submission to theprocessor 552. In addition, anexternal interface 562 may be provide in communication withprocessor 552, so as to enable near area communication ofdevice 550 with other devices.External interface 562 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may be used. - The
memory 564 stores information within thecomputing device 550. Thememory 564 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.Expansion memory 574 may also be provided and connected todevice 550 through expansion interface 572, which may include, for example, a SIMM (Single In-Line Memory Module) card interface.Such expansion memory 574 may provide extra storage space fordevice 550, or may also store applications or other information fordevice 550. Specifically,expansion memory 574 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 574 may be provided as a security module fordevice 550, and may be programmed with instructions that permit secure use ofdevice 550. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the
memory 564,expansion memory 574, or memory onprocessor 552 that may be received, for example, overtransceiver 568 or external interface 862. -
Device 550 may communicate wirelessly through communication interface 566, which may include digital signal processing circuitry where necessary. Communication interface 566 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 568. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 570 may provide additional navigation- and location-related wireless data todevice 550, which may be used as appropriate by applications running ondevice 550. -
Device 550 may also communicate audibly usingaudio codec 560, which may receive spoken information from a user and convert it to usable digital information.Audio codec 560 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 550. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may include sound generated by applications operating ondevice 550. - The
computing device 550 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 582. It may also be implemented as part of asmartphone 580, personal digital assistant, or other similar mobile device. - Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- The features described is implemented in digital electronic circuitry, in computer hardware, firmware, software, or in combinations of them. The apparatus is implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device for execution by a programmable processor; and method steps is performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features are implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that is used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program is written in any form of programming language, including compiled or interpreted languages, and it is deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory is supplemented by, or incorporated in, ASICs (application-specific integrated circuits).
- To provide for interaction with a user, the features is implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user provides input to the computer.
- The features are implemented in a computer system that includes a back-end component, such as a data server, that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system are connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- The computer system includes clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- Although a few implementations have been described in detail above, other modifications are possible. Moreover, other mechanisms for generating interaction data from network requests may be used. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. Other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/312,283 US20230367825A1 (en) | 2018-05-18 | 2023-05-04 | Data processing system for generating entries in data structures from network requests |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/983,544 US10915587B2 (en) | 2018-05-18 | 2018-05-18 | Data processing system for generating entries in data structures from network requests |
US17/161,455 US11675859B2 (en) | 2018-05-18 | 2021-01-28 | Data processing system for generating entries in data structures from network requests |
US18/312,283 US20230367825A1 (en) | 2018-05-18 | 2023-05-04 | Data processing system for generating entries in data structures from network requests |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/161,455 Continuation US11675859B2 (en) | 2018-05-18 | 2021-01-28 | Data processing system for generating entries in data structures from network requests |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230367825A1 true US20230367825A1 (en) | 2023-11-16 |
Family
ID=68533761
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/983,544 Active 2039-02-04 US10915587B2 (en) | 2018-05-18 | 2018-05-18 | Data processing system for generating entries in data structures from network requests |
US17/161,455 Active 2038-09-16 US11675859B2 (en) | 2018-05-18 | 2021-01-28 | Data processing system for generating entries in data structures from network requests |
US18/312,283 Pending US20230367825A1 (en) | 2018-05-18 | 2023-05-04 | Data processing system for generating entries in data structures from network requests |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/983,544 Active 2039-02-04 US10915587B2 (en) | 2018-05-18 | 2018-05-18 | Data processing system for generating entries in data structures from network requests |
US17/161,455 Active 2038-09-16 US11675859B2 (en) | 2018-05-18 | 2021-01-28 | Data processing system for generating entries in data structures from network requests |
Country Status (1)
Country | Link |
---|---|
US (3) | US10915587B2 (en) |
Family Cites Families (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6721749B1 (en) * | 2000-07-06 | 2004-04-13 | Microsoft Corporation | Populating a data warehouse using a pipeline approach |
US7134137B2 (en) | 2000-07-10 | 2006-11-07 | Oracle International Corporation | Providing data to applications from an access system |
US9058416B2 (en) * | 2000-12-11 | 2015-06-16 | Peter K. Trzyna | System and method for detecting and reporting online activity using real-time content-based network monitoring |
US8706551B2 (en) | 2003-09-04 | 2014-04-22 | Google Inc. | Systems and methods for determining user actions |
US8230478B2 (en) * | 2009-08-27 | 2012-07-24 | International Business Machines Corporation | Flexibly assigning security configurations to applications |
US11042897B2 (en) | 2010-08-30 | 2021-06-22 | Adap.Tv, Inc. | System and method for determining effects of multi-channel media sources on multi-channel conversion events |
US9633378B1 (en) | 2010-12-06 | 2017-04-25 | Wayfare Interactive, Inc. | Deep-linking system, method and computer program product for online advertisement and E-commerce |
US8620933B2 (en) | 2011-04-11 | 2013-12-31 | Google Inc. | Illustrating cross channel conversion paths |
US20130173777A1 (en) * | 2011-12-28 | 2013-07-04 | Microsoft Corporation | Mining Execution Pattern For System Performance Diagnostics |
US8977909B2 (en) * | 2012-07-19 | 2015-03-10 | Dell Products L.P. | Large log file diagnostics system |
US10860557B2 (en) * | 2013-03-13 | 2020-12-08 | Salesforce.Com, Inc. | Systems, methods, and apparatuses for implementing change value indication and historical value comparison |
US9411708B2 (en) * | 2013-04-12 | 2016-08-09 | Wipro Limited | Systems and methods for log generation and log obfuscation using SDKs |
US9210183B2 (en) * | 2013-12-19 | 2015-12-08 | Microsoft Technology Licensing, Llc | Detecting anomalous activity from accounts of an online service |
US9703675B2 (en) * | 2014-08-11 | 2017-07-11 | Microsoft Technology Licensing, Llc | Structured logging and instrumentation framework |
US10397236B1 (en) * | 2016-12-12 | 2019-08-27 | Amazon Technologies, Inc. | Anamoly detection and recovery of a corrupted computing resource |
WO2018159362A1 (en) * | 2017-03-03 | 2018-09-07 | 日本電信電話株式会社 | Log analysis apparatus, log analysis method, and log analysis program |
-
2018
- 2018-05-18 US US15/983,544 patent/US10915587B2/en active Active
-
2021
- 2021-01-28 US US17/161,455 patent/US11675859B2/en active Active
-
2023
- 2023-05-04 US US18/312,283 patent/US20230367825A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US11675859B2 (en) | 2023-06-13 |
US20210149977A1 (en) | 2021-05-20 |
US10915587B2 (en) | 2021-02-09 |
US20190354635A1 (en) | 2019-11-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8515966B2 (en) | Analyzing queries to generate product intention rules | |
US20160191699A1 (en) | Dynamic Telephone Number Assignment | |
US11295339B1 (en) | Tracking user conversions across mobile applications and browsers | |
US20120265607A1 (en) | Click-to-reveal content | |
US10089652B2 (en) | Generating advertisements for search results that reference software applications | |
US20160253715A1 (en) | Hashtags and Content Presentation | |
CA2803786A1 (en) | Ad privacy management | |
CN107924413B (en) | Bifurcation searching | |
US11620686B2 (en) | Third party customized content based on first party identifer | |
US20150348097A1 (en) | Autocreated campaigns for hashtag keywords | |
US20160328752A1 (en) | Native creative generation using hashtagged user generated content | |
WO2013078935A1 (en) | Information searching method and system | |
US20150248673A1 (en) | Methods and apparatus for a token management system for transactions | |
US20240062263A1 (en) | Managing transaction state data | |
US20170251070A1 (en) | Multiple User Interest Profiles | |
US20160027025A1 (en) | Systems and methods of counting unique interactions between users of a software application | |
US20150088648A1 (en) | Determining commercial intent | |
US11675859B2 (en) | Data processing system for generating entries in data structures from network requests | |
US20180336601A1 (en) | Securitization of Virtual Objects | |
US20140122222A1 (en) | Customizing online content for a user | |
US11087359B1 (en) | Immersive content items | |
CN107239956B (en) | Member management system, method for managing members using user member registration, and apparatus therefor | |
US20150317694A1 (en) | Crediting ecommerce entities for conversions | |
US20220284475A1 (en) | Selection and presentation of hyper-relevant content | |
US10019455B2 (en) | Selecting search queries for display with data associated with search terms |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHEN, JUNFU;AKABAS, TAL MAX;ELMQUIST, RYAN SCOTT;AND OTHERS;REEL/FRAME:064341/0037Effective date: 20180517 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |