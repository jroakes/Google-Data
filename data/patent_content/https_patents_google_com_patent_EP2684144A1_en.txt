EP2684144A1 - Efficient indexing and searching of access control listed documents - Google Patents
Efficient indexing and searching of access control listed documentsInfo
- Publication number
- EP2684144A1 EP2684144A1 EP12757104.0A EP12757104A EP2684144A1 EP 2684144 A1 EP2684144 A1 EP 2684144A1 EP 12757104 A EP12757104 A EP 12757104A EP 2684144 A1 EP2684144 A1 EP 2684144A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- user
- documents
- users
- index
- document
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/101—Access control lists [ACL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6227—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database where protection concerns the structure of data, e.g. records, types, queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
Definitions
- This specification generally relates to indexing and searching of documents, access to which are regulated by respective access control lists (ACLs).
- ACLs access control lists
- ACLs that specify a set of people who have access to the documents. Searching over such a corpus of documents presents certain challenges. For example, documents that one user sees may be different than documents that another user sees. This problem can be solved by adding ACL tokens to documents, each ACL token representing a user having permission to access the corresponding document.
- search systems must perform intersections of large hit lists, which is particularly problematic in disk-based indexing solutions.
- a solution for disk-based indexing systems is to write separate copies of a document to each person that has permission to them. This is referred to as write fan-out.
- An alternate solution includes writing a single copy of each document with ACL tokens into a sub-index (partition) corresponding to each document owner, and merging results from each collaborator of a user at search time. This is referred to as read fan-in. Although this improves efficiency of document writes, searches can end up merging a large number of result sets when users have many
- Implementations of the present disclosure are directed to methods and systems for indexing and searching of access control listed (ACL'd) documents.
- Implementations of the present disclosure provide search indices that can be used to efficiently search ACL'ed documents, each index being partitioned into ad-hoc groups, where each document is indexed in one or more ad-hoc groups. Indexing places a document into a set of user and group partitions, and searching combines results from a set of users and group partitions. Documents can be moved or copied between partitions for more efficient search behavior
- each document of the plurality of documents having a corresponding access control list (ACL), each ACL defining a plurality of users that are authorized to access a respective document, generating an index based on the plurality of users, the index comprising a plurality of partitions, each partition corresponding to a user of the plurality of users, and, for each document of the plurality of documents: ranking the users of the plurality of users, selecting a user as an indexing user based on the ranking, and storing the document in a partition of the index, the partition corresponding to the indexing user.
- ACL access control list
- the actions further include generating an index map based on the plurality of users, the index map including a plurality of map partitions, each map partition corresponding to a user of the plurality of users and including one or more references to respective one or more partitions of the index; wherein ranking includes: determining a plurality of user identifiers, each user identifier corresponding to a user of the plurality of users, and ranking the users based on the plurality of user identifiers; wherein ranking the users based on the plurality of user identifiers includes: for each user identifier, generating a
- the actions further include: generating a replicate index based on the index, the replicate index including at least one partition including one or more replicate documents, each of one or more replicate documents being a replicate of a document of the plurality of documents, and generating an index map based on the plurality of users, the index map including a plurality of map partitions, each map partition corresponding to a user of the plurality of users and including one or more references to respective one or more partitions of the index and the replicate index; the actions further include: monitoring a frequency at which a document of the plurality of documents is updated, and determining whether to replicate the document based on the frequency; the actions further include: monitoring a frequency at which one or more documents corresponding to
- FIG. 1 depicts an example system for efficient indexing and searching of documents based on an access control list (ACL).
- ACL access control list
- FIG. 2 depicts an example bipartite graph illustrating example access relationships between users and documents.
- FIG. 3 is a table summarizing an example ACL based on the relationships depicted in FIG. 2.
- FIG. 4A is an example index in accordance with implementations of the present disclosure.
- FIG. 4B is an example partition map in accordance with implementations of the present disclosure.
- FIG. 5 is an example index including partitions based on document collaborators.
- FIG. 6 is an example index including partitions based on document owner.
- FIG. 7A depicts an example replicate index based on the example index of FIG. 4A.
- FIG. 7B depicts an example partition map based on the example index of FIG. 4A and the example replicate index of FIG. 7A.
- FIG. 8 is a flowchart of an example process for efficient indexing and searching of access control listed documents.
- the present disclosure is generally directed to restricting user access to one or more documents based on an access control list (ACL).
- ACL access control list
- the term document can refer to any collaborative media such as electronic media that can be electronically viewed and/or edited by a plurality of users.
- Example documents can include electronically created and stored collaborative documents, such as word processing documents, spreadsheet documents, presentation documents, as well as documents associated with one or more social networking services (e.g., shared posts, images and the like).
- implementations of the present disclosure provide efficient indexing and searching of collaborative documents.
- a plurality of documents can be generated and stored.
- Each of the plurality of documents can be access control listed (ACL'ed) such that access to each document is only provided to designated users.
- Techniques are provided for implementing a search index that can be used to efficiently search ACL'ed documents.
- the index is partitioned into per-user document sets and ad-hoc groups. Indexing places a document into a set of user and group partitions, and searching combines results from a set of users and group partitions. Documents can be moved or copied between partitions for more efficient search behavior.
- FIG. 1 depicts an example system 100 for efficient indexing and searching of access control listed (ACL'ed) documents.
- the system 100 includes computing devices 102A-102F that can each communicate with one or more server systems 104 over a network 106.
- Each of the computing devices 102A-102F includes an associated user 108A-108F, respectively.
- the network 106 can include a large computer network, such as a local area network (LAN), wide area network (WAN), the Internet, a cellular network, or a combination thereof connecting any number of mobile computing devices, fixed computing devices, and server systems.
- the server system 104 includes a computing device 1 10 and a machine-readable repository, or database 1 12.
- the single server system can represent one or more server systems.
- the computing devices 102A-102C are illustrated as desktop-type computing devices
- the computing devices 102D, 102F are illustrated as laptop-type computing devices
- the computing device 102E is illustrated as a mobile computing device.
- the computing devices 102A-102F can each include any type of computing device such as a desktop computer, a laptop computer, a handheld computer, a personal digital assistant (PDA), a cellular telephone, a network appliance, a camera, a smart phone, an enhanced general packet radio service (EGPRS) mobile phone, a media player, a navigation device, an email device, a game console, or a combination of any two or more of these data processing devices or other data processing devices.
- PDA personal digital assistant
- GPRS enhanced general packet radio service
- the computing devices 102A-102F enable the respective users 108A- 108F to create, access, view and/or edit documents such as collaborative
- the documents can be electronically stored in memory.
- the documents can be stored on one or more of the computing devices 102A-102F and/or the server system 104.
- the computing devices 102A- 102F and/or the server system 104 can communicate with one another over the network 106 to enable access to the document from any of the other computing devices 102A-102F and/or the server system 104.
- a document can be generated, accessed, viewed and/or edited by a user 108A-108F using a computer application that is executed by a respective computing device 102A-102F.
- a document can be generated, accessed, viewed and/or edited by a user 108A-108F using a computer application that is executed by the server system 104.
- the computer application can be provided as a web-based application (web application) that is executed using the server system 104 and that receives input from and provides output to one or more of the computing devices 102A-102F over the network 106.
- FIG. 2 depicts an example bipartite graph 200 illustrating example access relationships between users 202 and documents 204.
- the users 202 include users A-F.
- users A-F can correspond to the users 108A-108F of FIG. 1 .
- the documents 204 include documents Doc1 -Doc7.
- the bipartite graph 200 can be based on an example ACL that defines the relationships between the users A-F and the documents Doc1 -Doc7.
- the bipartite graph 200 provides that user A has access to documents Doc1 , Doc2 and Doc6, the users B and C each have access to documents Doc1 -Doc3, Doc5 and Doc6, the users D and E have access to documents Doc4 and Doc7, and the user F has access to document Doc7.
- the user A e.g., user 108A of FIG. 1
- the document Doc1 can be stored at the computing device and/or a server system (e.g., computing device 102A and/or server system 104 of FIG. 1 ).
- the user A can be designated as the owner of the document Doc1 .
- the owner of the document is the creator of the document.
- the user A can designate access and access/editing rights to the document Doc1 .
- the user A can designate the user B and the user C as having access/editing rights to the document Doc1 .
- This designation information can be provided in an ACL that records which users 202 have access/editing rights to which documents 204.
- FIG. 3 is a table 300 summarizing an example ACL based on the relationships depicted in FIG. 2.
- the table 300 includes a Document column 302, a Collaborators column 304 and an Owner column 306.
- the Document column 302 and the Collaborators column 304 provide the relationships between the users 202 and the documents 204 as depicted in FIG. 2.
- the Owner column 306 depicts the respective owners of each of the documents.
- the user A is the owner of the document Doc1
- the user B is the owner of the documents Doc1 -Doc3 and Doc5
- the user C is the owner of the document Doc6
- the user D is the owner of the document Doc4
- the user E is the owner of the document Doc7.
- the user F is not designated as an owner of any of the documents Doc1 -Doc7.
- each of the documents Doc1 -Doc7 can be stored in computer-readable memory.
- An index can be generated to enable efficient searching of the stored documents to identify a relevant document based on a search query.
- a search query can be generated by a user (e.g., one or more of users 108A-108F), and the index can be accessed based on the search query to identify one or more documents that may be relevant to the search query.
- a search result can be provided to the querying user, which search result can include an identification of the one or more documents. If the user is designated as having access to one or more of the one or more documents, the user can select and access a document.
- Implementations of the present disclosure enable generation of an index and/or re-indexing of an existing index to provide efficient indexing and searching of documents governed by an ACL.
- bipartite graphs such as bipartite graph 200 of FIG. 2
- documents can be clustered based on collaborators, such that every user can find all documents, in which they are a collaborator, in a relatively small number of clusters.
- a total ordering among users can be defined and a user of each shared document can be selected as the indexer for a particular document.
- a user is identified as an indexer based on a rank of the user among other users of a particular shared document.
- a smaller number of indexers covers all documents that a user has access to.
- a majority of users would only need to search relatively few indexers.
- a small number of users may need to search a larger number of indexers, which is addressed by selected replication of documents, as discussed in further detail herein.
- the indexing user for each document is selected based on a total order among users, which enables a smaller number of indexing users to cover all documents a particular user has access to.
- collaborative users for a particular document are ranked based on hash values associated with each user.
- the hash values can be determined based on respective user identifications (user IDs) associated with the users of a particular document.
- user IDs can be provided as input to a hash function.
- the hash function can be provided as a well-defined procedure or mathematical function that converts each user ID into a hash value.
- the hash value can be provided, for example, as an integer and can serve as an index to an array.
- the minimum hash value can be used as the index for a particular document.
- the maximum hash value can be used as the index for a particular document.
- each of the users A, B, C can have an associated user ID (e.g., ID A , ID B , ID C ).
- the user IDs can each be processed using a hash function to provide respective hash values (e.g., HV A , HV B , HVC).
- the hash values can be processed to determine one of a minimum hash value and a maximum hash value, for example.
- HV A can be less than HV B and HVc.
- HV A can be deemed to be the minimum hash value, and can be selected as the index for all documents where user A is a collaborator with users B and C, as discussed in further detail below with reference to FIGs. 4A and 4B.
- the user A can be selected as the index for documents Doc1 , Doc2, Doc6, even though the user B is the owner of Doc2 and the user C is the owner of Doc3.
- HV B can be less than HVc. Consequently, HV B can be deemed to be the minimum hash value, as between the users B and C, and can be selected as the index for all documents where user B is a collaborator with user C, as discussed in further detail below with reference to FIGs. 4A and 4B. For example, the user B can be selected as the index for documents Doc3, Doc5.
- FIG. 4A is an example index 400 in accordance with implementations of the present disclosure.
- the index 400 is based on table 300 of FIG. 3, and includes partitions 402-412.
- Each of the partitions 402-412 corresponds to a user (users A-F, respectively) provided as an index.
- the user A can be selected as the index for documents Doc1 , Doc2, Doc6, based on the hash values HV A , HV B , HV C . Consequently, the documents Doc1 , Doc2, Doc6 are saved to the partition 402, which is indexed by the user A.
- the user B can be selected as the index for documents Doc3, Doc5 based on the hash values HV B , HVc.
- the documents Doc3, Doc5 are saved to the partition 404, which is indexed by the user B. Because, in accordance with the first and second examples provided above, the user C is not selected as the index for any of the documents, in which the user C is a collaborator, the partition 406 is empty.
- the partition 408, which is indexed by the user D includes the documents Doc4, Doc7.
- the users E, F are not selected as the index for any of the documents, in which the users E, F are collaborators. Consequently, the partitions 410, 412 are empty. This indicates that a hash value (HV D ) corresponding to the user D is less than both hash values (HV E , HV F ) corresponding to the users E, F, respectively.
- FIG. 4B is an example partition map 420 in accordance with
- Partition maps keep track of where shared documents are indexed at, and where to search for every user.
- a continuous cleaner scanlet is provided.
- the cleaner scanlet deletes obsolete search fan-in edges and re-index documents to reduce search fan- in.
- the cleaner scanlet trims sharing edges having small, infrequently updated documents and frequent searches.
- the cleaner scanlet achieves this by replicating documents. For example, if a particular document currently resides only with the creating user, and user A only has to search the creating user's index for that one document, the cleaner scanlet can copy the document from the creator user's index to user A's index and thus reduce the fan-in needed by one.
- the partition map minimizes search-time operation and simplifies write-time operation by avoiding transactions.
- the cleaner scanlet can operate offline to synchronize the reader map to document sharing states.
- the sharing map tracks which users can read a given document and in which shared index locations the document is currently indexed.
- the reader map tracks for each reader, in which shared index locations they can find all documents shared with that reader.
- the partition map 420 includes partitions 422-432, which correspond to partitions 402-412 of FIG. 4A.
- the partition map 420 maps which partitions to fan-in. That is, the partition map 420 maps which partitions 402-412 of the index 400 to construct the list of documents corresponding to each user.
- the partition 422 corresponds to the user A and includes a corresponding fan-in designation A. This indicates that the documents saved in the partition 402 are to be fanned into the partition 422.
- the partition 424 corresponds to the user B and includes corresponding fan-in
- the documents Doc1 , Doc2, Doc3, Doc5, Doc6 are fanned into the partition 422, which corresponds to the documents that the user B is a collaborator on (see FIGs. 2 and 3).
- the partition 426 corresponds to the user C and includes corresponding fan-in designations A, B. This indicates that the documents saved in the partitions 402, 404 are to be fanned into the partition 426. Accordingly, the documents Doc1 , Doc2, Doc3, Doc5, Doc6 are fanned into the partition 426, which corresponds to the documents that the user C is a collaborator on (see FIGs. 2 and 3).
- FIG. 5 is an example index 500 including partitions 502-512 based on document collaborators.
- a separate copy of each document is stored for each user that has access to the document.
- the partition 502 includes the documents Doc1 , Doc2, Doc6, which the user A is a collaborator on.
- the partitions 504, 506 each include the documents Doc1 , Doc2, Doc3, Doc5, Doc6, which the users B, C are collaborators on.
- the partitions 508, 510 each include the documents Doc4, Doc7, which the users D, E are collaborators on, and the partition 512 includes the document Doc7, which the user F is a collaborator on.
- the collaborator-based indexing technique illustrated in FIG. 5 provides for efficient searching, the size of the index and the document write rate are greatly increased.
- the index 400 of FIG. 4A includes seven documents, while the index 500 of FIG. 5 includes eighteen documents. This is compounded as the number of collaborators and the number of documents increase.
- FIG. 6 is an example index 600 including partitions 602-612 based on document owner.
- this technique which can be referred to as a read fan-in approach, a single copy of each document is written into a partition corresponding to each document owner, and search results are merged together from each collaborator of a user at search time.
- this technique is efficient for writes (e.g., the index 600 of FIG. 6 includes seven documents, while the index 500 of FIG. 5 includes eighteen documents), searches can end up having to merge a large number of result sets when users have many collaborators.
- Implementations of the user rank-based indexing discussed herein provides good document distribution for most users. It is appreciated, however, that a small number of users may still have large search fan-ins. To address such a scenario, a small set of documents can be replicated at multiple index locations to limit search fan-in for all users. That is, search fan-in can be improved by selectively replicating a small subset of documents to multiple indices. In some
- replication is done asynchronously using a background process.
- search fan-in can be further improved based on the selection the user ordering.
- search fan-in can be limited to a threshold (e.g., 10). In cases where a search fan-in exceeds the threshold, index locations having the smallest total document sizes can be selected and all of the documents from those locations are replicated to the searcher's own index location.
- a threshold e.g. 10
- implementations can be described as a simple fan-in limit.
- dynamic document replication can be provided.
- update timing of documents can be collected, and the next update time per document can be estimated.
- search timing of users can be collected, and search frequency can be estimated. In this manner, frequent searchers can be identified, and the search fan-in corresponding to frequent searchers can be more aggressively reduced than less frequent searchers.
- a re-indexing price is provided, which represents the cost-benefit ratio of whether to remove a fan-in through replication.
- the re-indexing price can be determined based on document size, update timing and search frequency.
- a dynamic price threshold can be provided. The re-indexing price can be compared to the corresponding price threshold to determine whether to replicate documents. For example, if the re-indexing price is greater than the price threshold, the documents are not replicated.
- a control is provided to regulate a total re- indexing rate.
- the total re-indexing rate can correspond to the total bandwidth spent on replication.
- the control can be used to adjust the price threshold, discussed above, to satisfy a bandwidth limit. In this manner, the impact of replication traffic can be controlled, and off-peak time when documents are less frequently updated (e.g., nights and weekends) can be utilized for more aggressive replication.
- a search fan-in threshold can be provided to bound the worst case fan-in. The threshold overrides the price threshold for big readers, although prices are still used to rank fan-in edges of the reader and select edges to remove.
- big readers are users who have a very large fan-in (e.g., greater than some threshold).
- the fan-in edges of a user are provided as the number of other user indexes that need to be accessed to see all documents that have been shared with/by that user.
- the price threshold represents a cost vs. benefit analysis of replicating a document.
- the price is computed from document size, update timing and the reader's search frequency. For example, if a document is updated frequently, the cost of replicating it is high since the benefit will be lost once it is updated again. A rarely updated document which is small and searched frequently can be cheaply replicated for high benefit.
- FIG. 7A depicts an example replicate index 700 based on the example index 400 of FIG. 4A.
- the replicate index 700 includes partitions 702-712, which correspond to partitions 402-412 of example index 400.
- the example replicate index 700 includes replicates of Doc1 , Doc2, Doc3, Doc5, Doc6 in partition 706, which corresponds to a write fan-in of the documents in partitions 402, 404 of example index 400, per the partition map 420 od FIG. 4B.
- FIG. 7B depicts an example partition map 740 based on the example index 400 of FIG. 4A and the example replicate index 700 of FIG. 7A.
- the partition map 740 includes partitions 742-752 that correspond to partitions 402-412 of index 400.
- the indices 400, 700 can be implemented to provide search results based on a search query entered by a user.
- An example search query can include one or more keywords and a user identity.
- a corresponding search engine can process the search query to identify documents, to which the identified user has access, and which include the one or more search queries.
- a partition map (e.g., partition map 740 of FIG. 7A) can be used to determine which partition of an index corresponds to the identified user (e.g., partitions 402-412 of the index 400 and/or partitions 702-712 of the replicate index 700 of FIG. 7A).
- Documents within a partition can be searched based on the one or more keywords and search results can be generated that include documents that are associated with the identified user and that include one or more keywords of the one or more keywords.
- a search query can include "user B" and "keyword.”
- a search engine can receive the search query as input and can access the partition map 740 of FIG. 7B based on user B.
- user B corresponds to partition 744, which identifies documents associated with users A and B in the index 400 of FIGs. 4A and 7B to be fanned in. Consequently, the document set including Doc1 , Doc2, Doc3, Doc5 and Doc6 can be searched based on keyword to identify any documents within this document set that include keyword. Any documents within this document set that include keyword can be provided in the search result.
- FIG. 8 is a flowchart of an example process 800 for efficient indexing of access control listed documents.
- a plurality of documents are stored in computer- readable memory (802).
- the server system 104 of FIG. 1 can store the plurality of documents.
- Each document of the plurality of documents has a corresponding ACL, and each ACL defines a plurality of users that are authorized to access a respective document.
- An index is generated based on the plurality of users (804).
- the server system 104 of FIG. 1 can generate the index based on the plurality of users.
- the index includes a plurality of partitions, each partition corresponding to a user of the plurality of users (e.g., index 400 of FIG. 4A).
- the users of the plurality of users are ranked (806), a user is selected as an indexing user based on the ranking (808), and the document is stored in a partition of the index (810), the partition corresponding to the indexing user.
- the server system 104 of FIG. 1 can, for each document of the plurality of documents, rank the users of the plurality of users, select a user as the indexing user based on the ranking, and store the document in a partition of the index.
- An index map is generated based on the plurality of users (812).
- the server system 104 of FIG. 1 can generate the index map.
- the index map includes a plurality of map partitions, each map partition partitions, each map partition partition
- a replicate index is generated based on the index (814).
- the server system 104 of FIG. 1 can generate the replicate index based on the index.
- the replicate index includes at least one partition including one or more replicate documents, each of one or more replicate documents being a replicate of a document of the plurality of documents.
- a revised index map is generated based on the index and the replicate index (816).
- the server system 104 of FIG. 4A can generate the revised index map (e.g., index map 740 of FIG. 7B).
- Implementations of the present disclosure and all of the functional operations provided herein can be realized in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the present disclosure can be realized as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus.
- the computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this disclose can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- Elements of a computer can include a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the present disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- implementation can also be provided in multiple implementations separately or in any suitable subcombination.
- features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161452013P | 2011-03-11 | 2011-03-11 | |
PCT/US2012/028517 WO2012125466A1 (en) | 2011-03-11 | 2012-03-09 | Efficient indexing and searching of access control listed documents |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2684144A1 true EP2684144A1 (en) | 2014-01-15 |
EP2684144A4 EP2684144A4 (en) | 2014-09-17 |
Family
ID=46797030
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP12757104.0A Withdrawn EP2684144A4 (en) | 2011-03-11 | 2012-03-09 | Efficient indexing and searching of access control listed documents |
Country Status (4)
Country | Link |
---|---|
US (2) | US9152736B2 (en) |
EP (1) | EP2684144A4 (en) |
CN (1) | CN103597474B (en) |
WO (1) | WO2012125466A1 (en) |
Families Citing this family (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9152736B2 (en) | 2011-03-11 | 2015-10-06 | Google Inc. | Efficient indexing and searching of access control listed documents |
US9460226B2 (en) * | 2012-06-28 | 2016-10-04 | Yahoo! Inc. | Index replication in distributed search engines |
US9619539B2 (en) * | 2012-09-28 | 2017-04-11 | Vmware, Inc. | Automated document replication in a distributed computing system |
US20150237400A1 (en) * | 2013-01-05 | 2015-08-20 | Benedict Ow | Secured file distribution system and method |
US9613131B2 (en) | 2013-01-25 | 2017-04-04 | International Business Machines Corporation | Adjusting search results based on user skill and category information |
US9576022B2 (en) | 2013-01-25 | 2017-02-21 | International Business Machines Corporation | Identifying missing content using searcher skill ratings |
US9659043B2 (en) * | 2013-02-07 | 2017-05-23 | Enigma Technologies, Inc. | Data system and method |
US9870422B2 (en) * | 2013-04-19 | 2018-01-16 | Dropbox, Inc. | Natural language search |
US10311054B2 (en) * | 2014-01-08 | 2019-06-04 | Red Hat, Inc. | Query data splitting |
US9984110B2 (en) | 2014-08-21 | 2018-05-29 | Dropbox, Inc. | Multi-user search system with methodology for personalized search query autocomplete |
CN104408188B (en) * | 2014-12-15 | 2018-07-13 | 北京国双科技有限公司 | Data processing method and device |
US9384226B1 (en) | 2015-01-30 | 2016-07-05 | Dropbox, Inc. | Personal content item searching system and method |
US9183303B1 (en) | 2015-01-30 | 2015-11-10 | Dropbox, Inc. | Personal content item searching system and method |
US10997184B2 (en) * | 2015-05-22 | 2021-05-04 | Coveo Solutions, Inc. | System and method for ranking search results |
CN107515879B (en) | 2016-06-16 | 2021-03-19 | 伊姆西Ip控股有限责任公司 | Method and electronic equipment for document retrieval |
US11003662B2 (en) * | 2017-10-30 | 2021-05-11 | Salesforce.Com, Inc. | Trigger-free asynchronous maintenance of custom indexes and skinny performance meta-structures |
CN108563697B (en) * | 2018-03-22 | 2021-02-26 | 腾讯科技（深圳）有限公司 | Data processing method, device and storage medium |
US11038889B2 (en) * | 2018-11-20 | 2021-06-15 | Cisco Technology, Inc. | System and method for migrating existing access control list policies to intent based policies and vice versa |
CN116011410B (en) * | 2023-03-27 | 2023-08-11 | 天津联想协同科技有限公司 | Method, device, network disk and storage medium for realizing document call content |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040267722A1 (en) * | 2003-06-30 | 2004-12-30 | Larimore Stefan Isbein | Fast ranked full-text searching |
US20090287692A1 (en) * | 2008-05-16 | 2009-11-19 | Canon Kabushiki Kaisha | Information processing apparatus and method for controlling the same |
US20090327043A1 (en) * | 2008-06-25 | 2009-12-31 | Maheshinder Singh Sekhon | Method And System Of Ranking A Document |
Family Cites Families (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7031954B1 (en) | 1997-09-10 | 2006-04-18 | Google, Inc. | Document retrieval system with access control |
US7058630B2 (en) * | 2002-08-12 | 2006-06-06 | International Business Machines Corporation | System and method for dynamically controlling access to a database |
US20060047643A1 (en) * | 2004-08-31 | 2006-03-02 | Chirag Chaman | Method and system for a personalized search engine |
US20060080316A1 (en) | 2004-10-08 | 2006-04-13 | Meridio Ltd | Multiple indexing of an electronic document to selectively permit access to the content and metadata thereof |
US20060155705A1 (en) * | 2005-01-10 | 2006-07-13 | Kamper Robert J | Managing hierarchical authority to access files in a shared database |
US8705746B2 (en) * | 2006-09-29 | 2014-04-22 | Microsoft Corporation | Data security in an off-premise environment |
US9053195B2 (en) | 2007-07-19 | 2015-06-09 | Grant Chieh-Hsiang Yang | Method and system for user and reference ranking in a database |
US8024324B2 (en) | 2008-06-30 | 2011-09-20 | International Business Machines Corporation | Information retrieval with unified search using multiple facets |
JP5549596B2 (en) * | 2008-11-14 | 2014-07-16 | 日本電気株式会社 | Information processing system, method and program |
CN101714172B (en) * | 2009-11-13 | 2012-03-21 | 华中科技大学 | Search method of index structure supporting access control |
JP2011133928A (en) * | 2009-12-22 | 2011-07-07 | Internatl Business Mach Corp <Ibm> | Retrieval device, retrieval system, retrieval method, and computer program for retrieving document file stored in storage device |
US9152736B2 (en) | 2011-03-11 | 2015-10-06 | Google Inc. | Efficient indexing and searching of access control listed documents |
-
2012
- 2012-03-07 US US13/414,206 patent/US9152736B2/en not_active Expired - Fee Related
- 2012-03-09 WO PCT/US2012/028517 patent/WO2012125466A1/en active Application Filing
- 2012-03-09 CN CN201280021929.1A patent/CN103597474B/en active Active
- 2012-03-09 EP EP12757104.0A patent/EP2684144A4/en not_active Withdrawn
-
2015
- 2015-08-24 US US14/834,052 patent/US9479508B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040267722A1 (en) * | 2003-06-30 | 2004-12-30 | Larimore Stefan Isbein | Fast ranked full-text searching |
US20090287692A1 (en) * | 2008-05-16 | 2009-11-19 | Canon Kabushiki Kaisha | Information processing apparatus and method for controlling the same |
US20090327043A1 (en) * | 2008-06-25 | 2009-12-31 | Maheshinder Singh Sekhon | Method And System Of Ranking A Document |
Non-Patent Citations (1)
Title |
---|
See also references of WO2012125466A1 * |
Also Published As
Publication number | Publication date |
---|---|
EP2684144A4 (en) | 2014-09-17 |
CN103597474A (en) | 2014-02-19 |
US9479508B2 (en) | 2016-10-25 |
WO2012125466A1 (en) | 2012-09-20 |
US9152736B2 (en) | 2015-10-06 |
US20120233176A1 (en) | 2012-09-13 |
CN103597474B (en) | 2017-07-11 |
US20150365418A1 (en) | 2015-12-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9479508B2 (en) | Efficient indexing and searching of access control listed documents | |
Zhai et al. | Beyond independent relevance: methods and evaluation metrics for subtopic retrieval | |
Xiong et al. | Query expansion with freebase | |
Zamani et al. | Pseudo-relevance feedback based on matrix factorization | |
Reinanda et al. | Mining, ranking and recommending entity aspects | |
US9842158B2 (en) | Clustering web pages on a search engine results page | |
Shi et al. | Constrained-meta-path-based ranking in heterogeneous information network | |
Lalmas | Aggregated search | |
Lu et al. | Knowledge enhanced personalized search | |
Yang et al. | SESAME: Mining user digital footprints for fine-grained preference-aware social media search | |
CN110291515B (en) | Distributed index searching in computing systems | |
Nguyen et al. | Tag-based paper retrieval: minimizing user effort with diversity awareness | |
Peska et al. | Using linked open data in recommender systems | |
US10353907B1 (en) | Efficient indexing of feed updates for content feeds | |
US20170060892A1 (en) | Search-based shareable collections | |
US9542457B1 (en) | Methods for displaying object history information | |
Lu | Scalable distributed architectures for information retrieval | |
US11151168B2 (en) | Hierarchical search folders for a document repository | |
Kahng et al. | Ranking objects by following paths in entity-relationship graphs | |
Drosou et al. | Poikilo: a tool for evaluating the results of diversification models and algorithms | |
Rats et al. | Using of cloud computing, clustering and document-oriented database for enterprise content management | |
Wu et al. | Beyond greedy search: pruned exhaustive search for diversified result ranking | |
Li et al. | Dynamic reverse furthest neighbor querying algorithm of moving objects | |
Lu et al. | Efficient algorithms for answering reverse spatial-keyword nearest neighbor queries | |
KR20050063637A (en) | Search system for providing information of keyword input frequency by category and method thereof |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20130924 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
DAX | Request for extension of the european patent (deleted) | ||
A4 | Supplementary search report drawn up and despatched |
Effective date: 20140819 |
|
REG | Reference to a national code |
Ref country code: HKRef legal event code: DERef document number: 1193891Country of ref document: HK |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/40 20060101ALI20140911BHEPIpc: G06F 17/30 20060101AFI20140911BHEP |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/30 20060101AFI20140922BHEP |
|
17Q | First examination report despatched |
Effective date: 20170113 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN WITHDRAWN |
|
18W | Application withdrawn |
Effective date: 20210301 |
|
REG | Reference to a national code |
Ref country code: HKRef legal event code: WDRef document number: 1193891Country of ref document: HK |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |