US20240098298A1 - Segmentation-based parameterized motion models - Google Patents
Segmentation-based parameterized motion models Download PDFInfo
- Publication number
- US20240098298A1 US20240098298A1 US18/521,182 US202318521182A US2024098298A1 US 20240098298 A1 US20240098298 A1 US 20240098298A1 US 202318521182 A US202318521182 A US 202318521182A US 2024098298 A1 US2024098298 A1 US 2024098298A1
- Authority
- US
- United States
- Prior art keywords
- motion model
- global motion
- motion
- decoding
- segment
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000033001 locomotion Effects 0.000 title claims abstract description 380
- 230000011218 segmentation Effects 0.000 title claims abstract description 30
- 239000013598 vector Substances 0.000 claims abstract description 31
- 238000000034 method Methods 0.000 claims description 91
- PXFBZOLANLWPMH-UHFFFAOYSA-N 16-Epiaffinine Natural products C1C(C2=CC=CC=C2N2)=C2C(=O)CC2C(=CC)CN(C)C1C2CO PXFBZOLANLWPMH-UHFFFAOYSA-N 0.000 claims description 14
- 230000009466 transformation Effects 0.000 claims description 10
- 238000000844 transformation Methods 0.000 claims description 4
- 230000008569 process Effects 0.000 description 66
- 230000015654 memory Effects 0.000 description 26
- 238000010586 diagram Methods 0.000 description 14
- 238000013519 translation Methods 0.000 description 13
- 230000014616 translation Effects 0.000 description 13
- 238000004891 communication Methods 0.000 description 10
- 238000001914 filtration Methods 0.000 description 8
- 230000006870 function Effects 0.000 description 8
- 238000012545 processing Methods 0.000 description 8
- 230000008901 benefit Effects 0.000 description 6
- 230000006835 compression Effects 0.000 description 4
- 238000007906 compression Methods 0.000 description 4
- 238000013139 quantization Methods 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 150000001875 compounds Chemical class 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 238000010008 shearing Methods 0.000 description 3
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 230000006837 decompression Effects 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 230000001747 exhibiting effect Effects 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000002123 temporal effect Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008867 communication pathway Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000001131 transforming effect Effects 0.000 description 1
- PICXIOQBANWBIZ-UHFFFAOYSA-N zinc;1-oxidopyridine-2-thione Chemical class [Zn+2].[O-]N1C=CC=CC1=S.[O-]N1C=CC=CC1=S PICXIOQBANWBIZ-UHFFFAOYSA-N 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/513—Processing of motion vectors
- H04N19/517—Processing of motion vectors by encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/20—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using video object coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/513—Processing of motion vectors
- H04N19/521—Processing of motion vectors for estimating the reliability of the determined motion vectors or motion vector field, e.g. for smoothing the motion vector field or for correcting motion vectors
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/537—Motion estimation other than block-based
- H04N19/54—Motion estimation other than block-based using feature points or meshes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/537—Motion estimation other than block-based
- H04N19/543—Motion estimation other than block-based using regions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/547—Motion estimation performed in a transform domain
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/557—Motion estimation characterised by stopping computation or iteration based on certain criteria, e.g. error magnitude being too large or early exit
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/80—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications including, for example, video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- Encoding based on motion estimation and compensation may be performed by breaking frames or images into blocks that are predicted based on one or more prediction blocks of reference frames. Differences (i.e., residual errors) between blocks and prediction blocks are compressed and encoded in a bitstream. A decoder uses the differences and the reference frames to reconstruct the frames or images.
- a first aspect is a method that includes decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decoding blocks of the current frame by: for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decoding the each inter-predicted block based on the indication.
- a second aspect is a device that includes a processor.
- the processor is configured to decode, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decode blocks of the current frame by configuration to: for each inter-predicted block of a segment, decode, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decode the each inter-predicted block based on the indication.
- a third aspect is a non-transitory computer readable medium storing instructions operable to cause one or more processors to perform operations that include: decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decoding blocks of the current frame by: for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decoding the each inter-predicted block based on the indication.
- FIG. 1 is a schematic of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded.
- FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 6 is a flowchart diagram of a process for encoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure.
- FIG. 7 is a diagram of a frame segmentation according to implementations of this disclosure.
- FIG. 8 is an illustration of examples of motion within a video frame according to implementations of this disclosure.
- FIGS. 9 A-D are illustrations of examples of warping pixels of a block of a video frame according to a parameterized motion model according to implementations of this disclosure.
- FIG. 10 is a flowchart diagram of a process for decoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure.
- compression schemes related to coding video streams may include breaking images into blocks and generating a digital video output bitstream (i.e., an encoded bitstream) using one or more techniques to limit the information included in the output bitstream.
- a received bitstream can be decoded to re-create the blocks and the source images from the limited information.
- Encoding a video stream, or a portion thereof, such as a frame or a block can include using temporal or spatial similarities in the video stream to improve coding efficiency. For example, a current block of a video stream may be encoded based on identifying a difference (residual) between the previously coded pixel values, or between a combination of previously coded pixel values, and those in the current block.
- Intra prediction attempts to predict the pixel values of a block of a frame of a video stream using pixels peripheral to the block; that is, using pixels that are in the same frame as the block but that are outside the block.
- Inter prediction attempts to predict the pixel values of a block using a possibly displaced block or blocks from a temporally nearby frame (i.e., reference frame) or frames.
- a temporally nearby frame is a frame that appears earlier or later in time in the video stream than the frame of the block being encoded.
- Inter prediction can be performed using a motion vector that represents translational motion, i.e., pixel shifts of a prediction block in a reference frame in the x- and y-axes as compared to the block being predicted.
- Some codecs use up to eight reference frames, which can be stored in a frame buffer.
- the motion vector can refer to (i.e., use) one of the reference frames of the frame buffer.
- Two predictor blocks can be combined to form a compound predictor for a block or region of a video image.
- a compound predictor can be created by combining two or more predictors determined using, for example, the aforementioned prediction methods (i.e., inter and/or intra prediction).
- a compound predictor can be combination of a first predictor and a second predictor which can be two intra predictors (i.e., intra+intra), an intra predictor and an inter predictor (i.e., intra+inter) or two inter predictors (i.e., inter+inter).
- translational motion compensation assume purely translational motion between blocks.
- Translational motion compensation models are performed using rectangular transformations.
- motion within a block can be described using translational motion models with respect to a reference block of a reference frame.
- some motion may include scaling, shearing, or rotating motion, either alone or with translational motion.
- Such motion can be attributed, for example, to camera motion and is applicable to all, or at least many, blocks of a frame.
- the motion is “global” to a frame.
- the global motion may be used to produce a reference block.
- the translational motion vector(s) found by motion searching can be used.
- Global motion may be represented by a “parameterized motion model” or “motion model.”
- a single motion model for each reference frame may not accurately predict all of the underlying motion of the frame.
- a single motion model for a reference frame performs well with respect to rate-distortion optimization for video with consistent motion.
- a video frame may include two or more moving segments comprising a collection of blocks of the video frame. The segments may comprise, for example, one or more foreground objects moving along different directions and a background that moves along yet another direction. In particular, for example, video with strong parallax may not obtain consistent gains from using the single motion model.
- Implementations of this disclosure describe the use of multiple motion models per reference frame.
- the current video frame may be segmented with respect to the reference frame and parameterized motion models may be identified for the segments.
- Each of the parameterized motion models associated with a segment corresponds to a motion model type.
- the segmentation of the current video frame with respect to a reference frame results in a segment containing the current block.
- the segmentation results in three segments (one corresponding to each reference frame) containing the current block.
- the parameterized motion models of the segments containing the current block can be used to generate a prediction block for the current block. Further details of techniques for using segmentation-based parameterized motion models for encoding and decoding a current block of a video frame are described herein with initial reference to a system in which they can be implemented.
- FIG. 1 is a schematic of a video encoding and decoding system 100 .
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2 .
- the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102
- the encoded video stream can be decoded in the receiving station 106 .
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network, or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106 .
- LAN local area network
- WAN wide area network
- VPN virtual private network
- the receiving station 106 in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2 . However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104 .
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory.
- the receiving station 106 receives (e.g., via the network 104 , a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP may be used, e.g., a Hypertext Transfer Protocol-based (HTTP-based) video streaming protocol.
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102 ) to decode and view and further encodes and transmits his or her own video bitstream to the video conference server for decoding and viewing by other participants.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1 .
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a CPU 202 in the computing device 200 can be a conventional central processing unit.
- the CPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed.
- the disclosed implementations can be practiced with one processor as shown (e.g., the CPU 202 ), advantages in speed and efficiency can be achieved by using more than one processor.
- a memory 204 in computing device 200 can be a read only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as the memory 204 .
- the memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212 .
- the memory 204 can further include an operating system 208 and application programs 210 , the application programs 210 including at least one program that permits the CPU 202 to perform the methods described herein.
- the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described here.
- Computing device 200 can also include a secondary storage 214 , which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218 .
- the display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the CPU 202 via the bus 212 .
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218 .
- the output device is or includes a display
- the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display, or a light emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220 , for example, a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200 .
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200 .
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a sound- sensing device 222 , for example, a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200 .
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200 .
- FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into one unit, other configurations can be utilized.
- the operations of the CPU 202 can be distributed across multiple machines (wherein individual machines can have one or more processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200 .
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded.
- the video stream 300 includes a video sequence 302 .
- the video sequence 302 includes a number of adjacent frames 304 . While three frames are depicted as the adjacent frames 304 , the video sequence 302 can include any number of adjacent frames 304 .
- the adjacent frames 304 can then be further subdivided into individual frames, for example, a frame 306 .
- the frame 306 can be divided into a series of planes or segments 308 .
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- a frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310 , which can contain data corresponding to, for example, 16 ⁇ 16 pixels in the frame 306 .
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size such as 4 ⁇ 4 pixels, 8 ⁇ 8 pixels, 16 ⁇ 8 pixels, 8 ⁇ 16 pixels, 16 ⁇ 16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein.
- FIG. 4 is a block diagram of an encoder 400 according to implementations of this disclosure.
- the encoder 400 can be implemented, as described above, in the transmitting station 102 , such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the transmitting station 102 to encode video data in the manner described in FIG. 4 .
- the encoder 400 an also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the encoder 400 is a hardware encoder.
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402 , a transform stage 404 , a quantization stage 406 , and an entropy encoding stage 408 .
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410 , an inverse transform stage 412 , a reconstruction stage 414 , and a loop filtering stage 416 .
- Other structural variations of the encoder 400 can be used to encode the video stream 300 .
- respective adjacent frames 304 can be processed in units of blocks.
- respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction).
- intra-frame prediction also called intra-prediction
- inter-frame prediction also called inter-prediction
- a prediction block can be formed.
- intra-prediction a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction a prediction block may be formed from samples in one or more previously constructed reference frames. Implementations for forming a prediction block are discussed below with respect to FIGS. 6 , 7 , and 8 , for example, using parameterized motion model identified for encoding a current block of a video frame.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408 .
- the entropy-encoded coefficients, together with other information used to decode the block are then output to the compressed bitstream 420 .
- the compressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding.
- VLC variable length coding
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
- the reconstruction path in FIG. 4 can be used to ensure that the encoder 400 and a decoder 500 (described below) use the same reference frames to decode the compressed bitstream 420 .
- the reconstruction path performs functions that are similar to functions that take place during the decoding process (described below), including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
- encoder 400 can be used to encode the compressed bitstream 420 .
- a non-transform based encoder can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder can have the quantization stage 406 and the dequantization stage 410 combined in a common stage.
- FIG. 5 is a block diagram of a decoder 500 according to implementations of this disclosure.
- the decoder 500 can be implemented in the receiving station 106 , for example, by providing a computer software program stored in the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the receiving station 106 to decode video data in the manner described in FIG. 5 .
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106 .
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 : an entropy decoding stage 502 , a dequantization stage 504 , an inverse transform stage 506 , an intra/inter prediction stage 508 , a reconstruction stage 510 , a loop filtering stage 512 , and a deblocking filtering stage 514 .
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400 .
- the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 , e.g., at the intra/inter prediction stage 402 .
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts.
- the deblocking filtering stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 516 .
- the output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein.
- Other variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the decoder 500 can produce the output video stream 516 without the deblocking filtering stage 514 .
- FIG. 6 is a flowchart diagram of a process 600 for encoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure.
- the process 600 can be implemented in an encoder such as the encoder 400 of FIG. 4 .
- the process 600 can be implemented, for example, as a software program that can be executed by computing devices such as transmitting station 102 .
- the software program can include machine-readable instructions (e.g., executable instructions) that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause the computing device to perform the process 600 .
- the process 600 can be performed in whole or in part by the intra/inter prediction stage 402 of the encoder 400 of FIG. 4 .
- the process 600 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of the process 600 can be distributed using different processors, memories, or both. Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps.
- FIG. 7 is a diagram 700 of a frame segmentation according to implementations of this disclosure.
- FIG. 7 includes a current frame 701 .
- Blocks of the current frame 701 can be encoded using reference frames, such as a reference frame 704 and a reference frame 706 , of a frame buffer 702 .
- the current frame 701 includes the head and shoulders of a person 720 and other background objects.
- the process 600 segments the video frame with respect to a reference frame resulting in a segmentation.
- the segmentation can include one or more segments.
- the segmentation includes a segment containing the current block and a parameterized motion model for the segment.
- FIG. 7 depicts three segments: a segment 722 depicted by a group of shaded blocks, a segment 718 depicted by another group of differently shaded blocks, and a segment 714 , which is a group that includes the rest of the blocks of the frame constituting the background of the frame.
- the segment 722 includes the current block 716 .
- the process 600 can segment the current frame 701 .
- the process 600 can use an image segmentation technique that leverages the motion of objects between a reference frame and the current frame.
- a parameterized motion model is then associated with each segment as further described with respect to FIG. 8 .
- Image segmentation can be performed using interest points.
- the process 600 can determine first interest points in a reference frame, such as the reference frame 704 , and second interest points in the current frame 701 .
- the Features from Accelerated Segment Test (FAST) algorithm can be used to determine the first interest points and the second interest points.
- the first interest points and the second interest points are then matched.
- the process 600 can use the matched interest points to determine a parameterized motion model for the matching interest points.
- FAST Accelerated Segment Test
- the process 600 can use the Random Sample Consensus (RANSAC) method to fit a model (i.e., a parameterized motion model) to the matched points.
- RANSAC is an iterative algorithm that can be used to estimate model parameters (i.e., the parameters of the parameterized motion model) from data that contain inliers and outliers.
- Inliers are the data points (i.e., pixels) of the current frame that fit the parameterized motion model.
- the process 600 can determine a segment based on the inliers. That is, the process 600 can include the inliers in one segment.
- the segment (referred to as a foreground segment) based on the inliers may correspond to motion in the current frame corresponding to foreground objects. However, that need not be the case. That is, the foreground segment may include background objects or blocks. The foreground segment may not include all foreground objects or blocks.
- Outliers are the data points (i.e., pixels) of the current frame that do not fit the parameterized motion model.
- the process 600 can determine a second segment based on the outliers.
- the segment (referred to as a background segment) based on the outliers may correspond to relatively static background objects of the current frame. However, that need not be the case.
- the process 600 can use the outliers to determine additional segments. For example, the process 600 can recursively apply the same process as described above to determine additional segments. For example, by applying the process described above to the current frame 701 and using the reference frame 704 , the process 600 determined the three segments 714 , 718 , and 722 .
- the two segments 718 and 722 may be identified for the person 720 in a case where, for example, the shoulders of the person 720 are moving, with respect to a reference frame, in one direction while the head is moving another direction.
- the process 600 can determine a parameterized motion model (for example, using RANSAC) based on a motion model type.
- the RANSAC algorithm can determine a parameterized motion model based on a motion model type provided by the process 600 .
- Different motion model types can be available. Available motion model types include, in increasing complexity, a translational motion model type, a similarity motion model type, an affine motion model type, and a homographic motion model type. Additional or fewer motion model types may be available. Some of the motion model types are explained further with respect to FIGS. 9 A- 9 D .
- the parameterized motion model determined by the RANSAC method may contain more parameters than are necessary to provide a good approximation (e.g., with respect to an error metric) of the global motion for that segment. For example, requesting an affine model from RANSAC may return a six-parameter model (as described with respect to FIGS. 9 A- 9 D ), even though a four-parameter model is sufficient to provide a good approximation of the segment. As such, the process 600 can iteratively evaluate the available model types starting from a least complex motion model type (e.g., the translation motion model type) to a most complex model (e.g., the homographic motion model type). If a lower complexity model is determined to produce an error metric within a predefined threshold, then the parameterized motion model corresponding to the lower complexity model is determined to be the parameterized motion model of the segment.
- a least complex motion model type e.g., the translation motion model type
- a most complex model e.g., the homographic motion
- an error advantage associated with a model type can be used as the error metric.
- the error advantage E can be defined as
- a is a weight value
- c xy is the pixel at (x, y) in the current frame
- w xy is the pixel at (x, y) in the warped frame as described below.
- the process 600 does not evaluate the homographic motion model type; rather the process 600 stops at the similarity motion model type. This is so in order to reduce decoder complexity.
- the process 600 can segment the current frame with respect to (or based on) each of the reference frames of the frame buffer 702 .
- the frame buffer 702 includes eight (8) reference frames. Assuming that the process 600 determines two (2) segments (i.e., a foreground segment and a background segment) per reference frame, the segmentation results in a total of 16 segments. Each of the 16 segments corresponds to a respective parameterized motion model resulting in 16 parameterized motion models.
- a prediction block for a current block is determined based on the available segments that contain the current block in the reference frames.
- an encoder such as the encoder 400 of FIG. 4
- a decoder such as the decoder 500 of FIG. 5
- the 16 parameterized motion models are encoded in an encoded bitstream, such as the bitstream 420 generated by the encoder 400 and received by the decoder 500 .
- the process 600 can determine a subset of the reference frames of the frame buffer that results in the best fit for a specific segment. For a segment, a number of reference frames (e.g., three frames) are selected and the parameterized motion models with respect to these frames are determined and encoded in the encoded bitstream. For example, the process 600 can determine, for a segment, the parameterized motion models based on the golden reference frame, alternative reference frame, and the last reference frame of the frame buffer.
- the golden reference frame can be a reference frame available as a forward prediction frame for encoding a current frame.
- the last reference frame can be available as a forward prediction frame for encoding the current frame.
- the alternative reference frame can be available as a backward reference frame for encoding the current frame.
- Encoding a parameterized motion model can mean encoding the parameters of the parameterized motion model in the header of the current frame being encoded.
- encoding the parameterized motion model can mean encoding the motion model type corresponding to the parameterized motion model.
- a decoder such as the decoder 500 of FIG. 5 , decodes the motion model type and determines the parameters of the parameterized motion model of the motion model type in a similar way to that of the encoder.
- the encoder can encode a motion model type that is less complex than the most complex motion model type. That is, for example, the encoder can determine a parameterized motion model for a segment using a motion model type no more complex than the similarity motion model type.
- the foreground segment 722 is obtained from the reference frame 704 (as indicated by line 708 ).
- the background segment 714 is obtained from the reference frame 706 (as indicated by line 710 ). That is, each segment can be obtained from a different reference frame. However, this is not necessary. Some of the segments can be obtained from the same reference frames. For example, and as illustrated in FIG. 7 , the foreground segment 722 and the background segment 714 can be obtained from the same reference frame 706 (as indicated by line 712 and the line 710 , respectively).
- the segment 718 while not specifically indicated in FIG. 7 , can also be obtained from any of the reference frames of the frame buffer 702 .
- FIG. 8 is an illustration of examples of motion within a video frame 800 according to implementations of this disclosure. While not specifically indicated, it should be understood that the end points of the motion directions (e.g., motion 808 ) of FIG. 8 refer to pixel positions within a reference frame. For example, motion end point 809 refers to positions within a reference frame. This is so because motion is described with respect to another frame, such as a reference frame.
- a block 802 within the video frame 800 can include warped motion. Warped motion is motion that might not be accurately predicted using motion vectors determined via translational motion compensation (e.g., translational inter prediction as described above). For example, the motion within the block 802 might scale, rotate, or otherwise move in a not entirely linear manner in any number of different directions. Translational motion compensation can miss certain portions of the motion falling outside of the rectangular geometry or use an unnecessary number of bits to predict the motion. As such, a prediction block used to encode or decode the block 802 can be formed, or generated, using a parameterized motion model.
- Motion within the video frame 800 may be global motion.
- motion within the video frame 800 can be considered a global motion where a large number of pixels of the blocks of the video frame 800 yield a low prediction error.
- a prediction error threshold can be defined, and values for all or a portion of the pixels of the blocks of the video frame 800 can be compared thereto.
- motion within the video frame 800 can be considered global motion where it is in a direction common with most other motion within the video frame 800 .
- a video frame can contain more than one global motion. Portions of the pixels exhibiting the same global motion can be grouped into a segment.
- the video frame 800 includes motion at 804 , 806 , and 808 .
- the motion at 804 , 806 , and 808 demonstrate motion of pixels of the block 802 in a generally common direction to linear and non-linear locations external to the block 802 within the video frame 800 .
- the motion shown at 804 is a translational motion from a leftmost set of pixels of the block 802 .
- the motion shown at 806 is a rotational motion from a middle set of pixels of the block 802 .
- the motion shown at 808 is a warped motion from a rightmost set of pixels of the block 802 .
- the motion shown at 804 , 806 , and 808 is global motion.
- the group of pixels of the video frame 800 exhibiting the same global motion can be grouped into one segment. More than one global motion can be associated with the frame. Each global motion can be associated with a segment of the frame.
- the global motion within the video frame 800 may not be entirely associated with the block 802 .
- the global motion can include motion of pixels located within the video frame 800 and outside of the block 802 , such as is shown at 810 .
- the video frame 800 may have other global motion within a portion of the video frame 800 .
- another motion is shown at 812 as moving pixels in a direction different from the global motion shown at 804 , 806 , 808 , and 810 .
- Pixels associated with the other global motion within the video frame 800 can be grouped into another segment.
- the video frame 800 may include multiple global motions.
- a frame header 814 of the video frame 800 includes references to reference frames available for encoding or decoding the block 802 .
- the references to the reference frames in the frame header 814 can be for parameterized motion model associated with those reference frames.
- a parameterized motion model corresponds to a motion model type (described later with respect to FIG. 9 ) and indicates how pixels of the block 802 can be warped to generate a prediction block usable for encoding or decoding the block 802 .
- the frame header 814 can include one or more parameterized motion models each corresponding to a segment of the video frame 800 .
- the parameterized motion model 816 corresponds to a first motion model of a first segment associated with a first reference frame.
- the parameterized motion model 818 corresponds to a second motion model of a second segment associated with the first reference frame.
- the parameterized motion model 820 corresponds to a first motion model of a first segment associated with a second reference frame.
- the parameterized motion model 822 corresponds to a second motion model of a second segment associated with the second reference frame.
- the parameterized motion model 824 corresponds to a third motion model of a third segment associated with the second reference frame.
- the parameterized motion model 826 corresponds to a first motion model of a first segment associated with a third reference frame.
- the parameterized motion model 828 corresponds to a second motion model of a second segment associated with the third reference frame.
- the parameterized motion models associated with a reference frame may correspond to one or more motion model types.
- the parameterized motion model 816 and the parameterized motion model 818 may respectively correspond to a homographic motion model and an affine motion model for the first reference frame.
- each reference frame can be associated with multiple parameterized motion models of a single motion model type.
- the parameterized motion model 816 and the parameterized motion model 818 may both correspond to different homographic motion models.
- a reference frame may be limited to one motion model for each motion model type.
- a reference frame may be limited to a single motion model total. In such a case, that motion model may be replaced in certain situations, such as where a new motion model results in a lower prediction error.
- Parameterized motion models may indicate a global motion within multiple frames of a video sequence.
- the parameterized motion models encoded within the frame header 814 may be used to generate prediction blocks for multiple blocks in multiple frames of a video sequence.
- the reference frames associated with parameterized motion models in the frame header 814 may be selected from a reference frame buffer, such as by using bits encoded to the frame header 814 .
- the bits encoded to the frame header 814 may point to virtual index locations of the reference frames within the reference frame buffer.
- FIGS. 9 A-D are illustrations of examples of warping pixels of a block of a video frame according to a parameterized motion model according to implementations of this disclosure.
- a parameterized motion model used to warp pixels of a block of a frame can correspond to a motion model type.
- the motion model type that corresponds to a parameterized motion model may be a homographic motion model type, an affine motion model type, a similarity motion model type, or a translational motion model type.
- the parameterized motion model to use can be indicated by data associated with reference frames, such as within frame headers of an encoded bitstream.
- FIGS. 9 A-D depict different motion model types used to project pixels of a block to a warped patch within a reference frame.
- the warped patch can be used to generate a prediction block for encoding or decoding that block.
- a parameterized motion model indicates how the pixels of a block are to be scaled, rotated, or otherwise moved when projected into the reference frame.
- Data indicative of pixel projections can be used to identify parameterized motion models corresponding to a respective motion model. The number and function of the parameters of a parameterized motion model depend upon the specific projection used.
- pixels of a block 902 A are projected to a warped patch 904 A of a frame 900 A using a homographic motion model.
- a homographic motion model uses eight parameters to project the pixels of the block 902 A to the warped patch 904 A.
- a homographic motion is not bound by a linear transformation between the coordinates of two spaces.
- the eight parameters that define a homographic motion model can be used to project pixels of the block 902 A to a quadrilateral patch (e.g., the warped patch 904 A) within the frame 900 A.
- Homographic motion models thus support translation, rotation, scaling, changes in aspect ratio, shearing, and other non-parallelogram warping.
- a homographic motion between two spaces is defined as follows:
- (x, y) and (X, Y) are coordinates of two spaces, namely, a projected position of a pixel within the frame 900 A and an original position of a pixel within the block 902 A, respectively.
- a, b, c, d, e, f, g, and h are the homographic parameters and are real numbers representing a relationship between positions of respective pixels within the frame 900 A and the block 902 A.
- a represents a fixed scale factor along the x-axis with the scale of the y-axis remaining unchanged
- b represents a scale factor along the x-axis proportional to the y-distance to a center point of the block
- c represents a translation along the x-axis
- d represents a scale factor along the y-axis proportional to the x-distance to the center point of the block
- e represents a fixed scale factor along the y-axis with the scale of the x-axis remaining unchanged
- f represents a translation along the y-axis
- g represents a proportional scale of factors of the x- and y-axes according to a function of the x-axis
- h represents a proportional scale of factors of the x- and y-axes according to a function of the y-axis.
- pixels of a block 902 B are projected to a warped patch 904 B of a frame 900 B using an affine motion model.
- An affine motion model uses six parameters to project the pixels of the block 902 B to the warped patch 904 B.
- An affine motion is a linear transformation between the coordinates of two spaces defined by the six parameters.
- the six parameters that define an affine motion model can be used to project pixels of the block 902 B to a parallelogram patch (e.g., the warped patch 904 B) within the frame 900 B.
- Affine motion models thus support translation, rotation, scale, changes in aspect ratio, and shearing.
- the affine projection between two spaces is defined as follows:
- (x, y) and (X, Y) are coordinates of two spaces, namely, a projected position of a pixel within the frame 900 B and an original position of a pixel within the block 902 B, respectively.
- a, b, c, d, e, and f are affine parameters and are real numbers representing a relationship between positions of respective pixels within the frame 900 B and the block 902 B.
- a and d represent rotational or scaling factors along the x-axis
- b and e represent rotational or scaling factors along the y-axis
- c and f respectively represent translation along the x- and y-axes.
- pixels of a block 902 C are projected to a warped patch 904 C of a frame 900 C using a similarity motion model.
- a similarity motion model uses four parameters to project the pixels of the block 902 C to the warped patch 904 C.
- a similarity motion is a linear transformation between the coordinates of two spaces defined by the four parameters.
- the four parameters can be a translation along the x-axis, a translation along the y-axis, a rotation value, and a zoom value.
- the four parameters that define a similarity motion model can be used to project pixels of the block 902 C to a square patch (e.g., the warped patch 904 C) within the frame 900 C. Similarity motion models thus support square to square transformation with rotation and zoom.
- pixels of a block 902 D are projected to a warped patch 904 D of a frame 900 D using a translational motion model.
- a translational motion model uses two parameters to project the pixels of the block 902 D to the warped patch 904 D.
- a translational motion is a linear transformation between the coordinates of two spaces defined by the two parameters.
- the two parameters can be a translation along the x-axis and a translation along the y-axis.
- the two parameters that define a translational motion model can be used to project pixels of the block 902 D to a square patch (e.g., the warped patch 904 D) within the frame 900 D.
- the process 600 determines a first motion vector for the current block based on the segmentation.
- the video frame can be partitioned with respect to at least some of the reference frames into segments.
- the current block can be part of many segments, each corresponding to a reference frame. For at least some of the segments that the current frame belongs to, the process 600 determines a respective motion vector.
- a motion vector is generated between the current block and a reference frame selected based on the parameterized motion model associated with the segment of the current block as described with respect to FIGS. 7 , 8 , and 9 .
- the motions vector between the current block and a reference frame selected based on the parameterized motion model can be a reference to the parameterized motion model. That is, the motion vector indicates which reference frame and the parametrized motion model.
- the motion vector can be generated by warping pixels of the current block to a warped patch within the reference frame according to the selected parameterized motion model. For example, the pixels of the current block are projected to the warped patch within the reference frame.
- the shape and size of the warped patch to which the pixels of the current block are projected depends upon the motion model associated with the selected parameterized motion model.
- the warped patch can be a rectangular patch or a non-rectangular patch. For example, if the parameterized motion model is of a translational motion model type, the warped patch is a rectangular block that is the same size as the current block. In another example, if the parameterized motion model is of a homographic motion model type, the warped patch may be any quadrilateral and of any size.
- the position of the warped patch also depends upon the motion model.
- the parameters of the parameterized motion model indicates an x-axis and/or y-axis translation for the warped patch.
- the parameters of the parameterized motion model may further indicate a rotation, zoom, or other motional change for the warped patch.
- the warped patch can then be unwarped using the motion vector to return the current block to generate a prediction block.
- the prediction block can have a rectangular geometry for predicting the current block.
- unwarping the projected pixels of the warped patch after respective pixels are projected to the warped patch of the reference frame can include projecting the warped patch to a rectangular block using the generated motion vector.
- the pixel position coordinates of the warped patch of the reference frame can be projected to the rectangular block based on respective coordinate translations to the rectangular block.
- the resulting rectangular block can be used to generate the prediction block.
- the process 600 determines a second motion vector for the current block using translational motion compensation. That is, the process 600 can determine the second motion vector using inter prediction as described above.
- the process 600 encodes, for the current block, the one of the first motion vector and the second motion vector corresponding to a smaller error.
- the smaller error can be the error corresponding to the best rate-distortion value.
- a rate-distortion value refers to a ratio that balances an amount of distortion (i.e., loss in video quality) with rate (i.e., the number of bits) used for encoding.
- the process 600 can determine the motion vector corresponding to the best rate-distortion value.
- the process 600 can encode, in the encoded bitstream, the selected motion vector.
- the process 600 can encode the parameters of the parameterized motion model used to determine the motion vector.
- the process 600 can encode the motion model type corresponding to the parameterized motion model.
- FIG. 10 is a flowchart diagram of a process 1000 for decoding a current block of a video frame according to one implementation of the disclosure.
- the process 1000 receives an encoded bitstream, such as the compressed bitstream 420 of FIG. 5 .
- the process 1000 may be performed by a decoder.
- the process 1000 can be performed in whole or in part by the intra/inter prediction stage 508 of the decoder 500 .
- the process 1000 can be performed in whole or in part during the reconstruction path (shown by the dotted connection lines) of the encoder 400 of FIG. 4 .
- Implementations of the process 1000 can be performed by storing instructions in a memory such as the memory 204 of the receiving station 106 , or the transmitting station 102 , to be executed by a processor such as CPU 202 , for example.
- the process 1000 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of the process 1000 can be distributed using different processors, memories, or both. For simplicity of explanation, the process 1000 is depicted and described as a series of steps or operations. However, the teachings in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, steps in accordance with this disclosure may occur with other steps not presented and described herein. Furthermore, not all illustrated steps or operations may be used to implement a method in accordance with the disclosed subject matter.
- the process 1000 identifies a parameterized motion model corresponding to a motion model type.
- the parameterized motion model can be identified based on information encoded in a header of a current frame (i.e., frame header) being decoded.
- the current frame being decoded is a frame containing the current block.
- the process 1000 can identify the parameterized motion model by decoding the parameters of the parameterized motion model from the encoded bitstream. Alternatively, the process 1000 can decode a motion model type from the encoded bitstream. The process 1000 can then generate the parameters of the parameterized motion model corresponding to the motion model type. The process 1000 can determine the parameters of the parameterized motion model as described above with respect to the FIG. 6 .
- the process 1000 associates the parameterized motion model with a segment of a reference frame.
- the process 1000 can associate the parameterized motion model with the segment of the reference frame as described above with respect to FIG. 8 .
- the process 1000 can receive, in the frame header, information regarding the segmentation of the frame.
- the information regarding the segmentation can enable the process 1000 to determine, for example, the number of segments of the current frame with respect to at least some of the reference frames.
- the information regarding the segmentation can enable the process 1000 to determine, with respect to a reference frame, which segment includes the current block.
- the process 1000 decodes the current block using the parameterized motion model in response to determining that the current block is encoded using the parameterized motion model.
- the current block header can include an indication identifying that the current block is encoded using the parameterized motion model.
- the current block header can include an indicator of a global motion model type used to encode the current block.
- the indicator can indicate that global motion was used to encode the current block or that no global motion was used to encode the current block (e.g., zero global motion).
- the process 1000 decodes the current block using the parameterized motion model. In response to determining that the current block is not encoded using the parameterized motion model, the process 1000 decodes the current block using translational motion compensation.
- the frame header for an inter-frame frame of the video sequence can include data indicating one or more parameterized motion models usable to encode or decode one or more blocks thereof.
- the data encoded to the frame header of an inter-frame frame can include the parameters of a parameterized motion model.
- the data may also include a coded flag indicating a number of parameterized motion models available to the inter-frame frame.
- a reference frame may not have a parameterized motion model. For example, there may be too many distinct motions within the reference frame to identify a global motion.
- the prediction errors determined for warped pixels based on motion models may not satisfy the threshold.
- blocks of frames using that reference frame can be encoded or decoded using zero motion.
- a zero motion model may by default be encoded to the frame header of all or some of the inter-frame frames of a video sequence.
- a current block encoded using a parameterized motion model is decoded by warping the pixels of the encoded block according to the parameterized motion model.
- the warped pixels of the encoded block are then interpolated.
- the interpolation can be performed using a 6-tap by 6-tap subpixel filter.
- the interpolation can be performed using bicubic interpolation.
- Bicubic interpolation can include using a 4-tap by 4-tap window to interpolate the subpixel values of an encoded block.
- Bicubic interpolation can include applying a horizontal sheer and a vertical sheer to an encoded block.
- encoding and decoding illustrate some examples of encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
- example is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as being preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clearly indicated otherwise by the context, the statement “X includes A or B” is intended to mean any of the natural inclusive permutations thereof. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances.
- Implementations of the transmitting station 102 and/or the receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers programmable logic controllers
- microcode microcontrollers
- servers microprocessors, digital signal processors, or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of the transmitting station 102 and the receiving station 106 do not necessarily have to be implemented in the same manner.
- the transmitting station 102 or the receiving station 106 can be implemented using a general purpose computer or general purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein.
- a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein.
- the transmitting station 102 and the receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- the transmitting station 102 can be implemented on a server, and the receiving station 106 can be implemented on a device separate from the server, such as a handheld communications device.
- the transmitting station 102 using an encoder 400 , can encode content into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 102 .
- Other suitable transmitting and receiving implementation schemes are available.
- the receiving station 106 can be a generally stationary personal computer rather than a portable communications device, and/or a device including an encoder 400 may also include a decoder 500 .
- implementations of the present disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
Abstract
Multiple global motion models associated with respective segments of a current frame are decoded from a compressed bitstream. Each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment. Blocks of the current frame are decoded by: for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decoding the each inter-predicted block based on the indication.
Description
- This application is a continuation of U.S. application patent Ser. No. 16/693,425, filed Nov. 25, 2019, which is a continuation of U.S. application patent Ser. No. 15/838,748, filed Dec. 12, 2017, which claims priority to and the benefit of U.S. Provisional Application Patent Serial No. 62/471,659, filed Mar. 15, 2017, the entire disclosures of which are hereby incorporated by reference.
- Digital video streams may represent video using a sequence of frames or still images. Digital video can be used for various applications including, for example, video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos. A digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data. Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- Encoding based on motion estimation and compensation may be performed by breaking frames or images into blocks that are predicted based on one or more prediction blocks of reference frames. Differences (i.e., residual errors) between blocks and prediction blocks are compressed and encoded in a bitstream. A decoder uses the differences and the reference frames to reconstruct the frames or images.
- Disclosed herein are aspects, features, elements, and implementations for encoding and decoding blocks using segmentation-based parameterized motion models.
- A first aspect is a method that includes decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decoding blocks of the current frame by: for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decoding the each inter-predicted block based on the indication.
- A second aspect is a device that includes a processor. The processor is configured to decode, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decode blocks of the current frame by configuration to: for each inter-predicted block of a segment, decode, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decode the each inter-predicted block based on the indication.
- A third aspect is a non-transitory computer readable medium storing instructions operable to cause one or more processors to perform operations that include: decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, where each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and decoding blocks of the current frame by: for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and decoding the each inter-predicted block based on the indication.
- These and other aspects of the present disclosure are disclosed in the following detailed description of the embodiments, the appended claims and the accompanying figures.
- The description herein makes reference to the accompanying drawings described below, wherein like reference numerals refer to like parts throughout the several views.
-
FIG. 1 is a schematic of a video encoding and decoding system. -
FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station. -
FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded. -
FIG. 4 is a block diagram of an encoder according to implementations of this disclosure. -
FIG. 5 is a block diagram of a decoder according to implementations of this disclosure. -
FIG. 6 is a flowchart diagram of a process for encoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure. -
FIG. 7 is a diagram of a frame segmentation according to implementations of this disclosure. -
FIG. 8 is an illustration of examples of motion within a video frame according to implementations of this disclosure. -
FIGS. 9A-D are illustrations of examples of warping pixels of a block of a video frame according to a parameterized motion model according to implementations of this disclosure. -
FIG. 10 is a flowchart diagram of a process for decoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure. - As mentioned above, compression schemes related to coding video streams may include breaking images into blocks and generating a digital video output bitstream (i.e., an encoded bitstream) using one or more techniques to limit the information included in the output bitstream. A received bitstream can be decoded to re-create the blocks and the source images from the limited information. Encoding a video stream, or a portion thereof, such as a frame or a block, can include using temporal or spatial similarities in the video stream to improve coding efficiency. For example, a current block of a video stream may be encoded based on identifying a difference (residual) between the previously coded pixel values, or between a combination of previously coded pixel values, and those in the current block.
- Encoding using spatial similarities can be known as intra prediction. Intra prediction attempts to predict the pixel values of a block of a frame of a video stream using pixels peripheral to the block; that is, using pixels that are in the same frame as the block but that are outside the block.
- Encoding using temporal similarities can be known as inter prediction. Inter prediction attempts to predict the pixel values of a block using a possibly displaced block or blocks from a temporally nearby frame (i.e., reference frame) or frames. A temporally nearby frame is a frame that appears earlier or later in time in the video stream than the frame of the block being encoded. Inter prediction can be performed using a motion vector that represents translational motion, i.e., pixel shifts of a prediction block in a reference frame in the x- and y-axes as compared to the block being predicted. Some codecs use up to eight reference frames, which can be stored in a frame buffer. The motion vector can refer to (i.e., use) one of the reference frames of the frame buffer.
- Two predictor blocks can be combined to form a compound predictor for a block or region of a video image. A compound predictor can be created by combining two or more predictors determined using, for example, the aforementioned prediction methods (i.e., inter and/or intra prediction). For example, a compound predictor can be combination of a first predictor and a second predictor which can be two intra predictors (i.e., intra+intra), an intra predictor and an inter predictor (i.e., intra+inter) or two inter predictors (i.e., inter+inter).
- The video compression and decompression methods of motion compensation described above (herein referred to as translational motion compensation or translational motion) assume purely translational motion between blocks. Translational motion compensation models are performed using rectangular transformations.
- However, not all motion within a block can be described using translational motion models with respect to a reference block of a reference frame. For example, some motion may include scaling, shearing, or rotating motion, either alone or with translational motion. Such motion can be attributed, for example, to camera motion and is applicable to all, or at least many, blocks of a frame. As such, the motion is “global” to a frame. In encoding blocks using inter prediction, the global motion may be used to produce a reference block. Alternatively, the translational motion vector(s) found by motion searching can be used.
- Global motion may be represented by a “parameterized motion model” or “motion model.” A single motion model for each reference frame may not accurately predict all of the underlying motion of the frame. For example, a single motion model for a reference frame performs well with respect to rate-distortion optimization for video with consistent motion. However, a video frame may include two or more moving segments comprising a collection of blocks of the video frame. The segments may comprise, for example, one or more foreground objects moving along different directions and a background that moves along yet another direction. In particular, for example, video with strong parallax may not obtain consistent gains from using the single motion model.
- Implementations of this disclosure describe the use of multiple motion models per reference frame. For several reference frames, the current video frame may be segmented with respect to the reference frame and parameterized motion models may be identified for the segments. Each of the parameterized motion models associated with a segment corresponds to a motion model type. The segmentation of the current video frame with respect to a reference frame results in a segment containing the current block. As such, if the current frame is segmented with respect to three reference frames, then the segmentation results in three segments (one corresponding to each reference frame) containing the current block. The parameterized motion models of the segments containing the current block can be used to generate a prediction block for the current block. Further details of techniques for using segmentation-based parameterized motion models for encoding and decoding a current block of a video frame are described herein with initial reference to a system in which they can be implemented.
-
FIG. 1 is a schematic of a video encoding anddecoding system 100. A transmittingstation 102 can be, for example, a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other suitable implementations of the transmittingstation 102 are possible. For example, the processing of the transmittingstation 102 can be distributed among multiple devices. - A
network 104 can connect the transmittingstation 102 and a receivingstation 106 for encoding and decoding of the video stream. Specifically, the video stream can be encoded in the transmittingstation 102, and the encoded video stream can be decoded in the receivingstation 106. Thenetwork 104 can be, for example, the Internet. Thenetwork 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network, or any other means of transferring the video stream from the transmittingstation 102 to, in this example, the receivingstation 106. - The receiving
station 106, in one example, can be a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other suitable implementations of the receivingstation 106 are possible. For example, the processing of the receivingstation 106 can be distributed among multiple devices. - Other implementations of the video encoding and
decoding system 100 are possible. For example, an implementation can omit thenetwork 104. In another implementation, a video stream can be encoded and then stored for transmission at a later time to the receivingstation 106 or any other device having memory. In one implementation, the receivingstation 106 receives (e.g., via thenetwork 104, a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding. In an example implementation, a real-time transport protocol (RTP) is used for transmission of the encoded video over thenetwork 104. In another implementation, a transport protocol other than RTP may be used, e.g., a Hypertext Transfer Protocol-based (HTTP-based) video streaming protocol. - When used in a video conferencing system, for example, the transmitting
station 102 and/or the receivingstation 106 may include the ability to both encode and decode a video stream as described below. For example, the receivingstation 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) to decode and view and further encodes and transmits his or her own video bitstream to the video conference server for decoding and viewing by other participants. -
FIG. 2 is a block diagram of an example of acomputing device 200 that can implement a transmitting station or a receiving station. For example, thecomputing device 200 can implement one or both of the transmittingstation 102 and the receivingstation 106 ofFIG. 1 . Thecomputing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like. - A
CPU 202 in thecomputing device 200 can be a conventional central processing unit. Alternatively, theCPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed. Although the disclosed implementations can be practiced with one processor as shown (e.g., the CPU 202), advantages in speed and efficiency can be achieved by using more than one processor. - A
memory 204 incomputing device 200 can be a read only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as thememory 204. Thememory 204 can include code anddata 206 that is accessed by theCPU 202 using abus 212. Thememory 204 can further include anoperating system 208 andapplication programs 210, theapplication programs 210 including at least one program that permits theCPU 202 to perform the methods described herein. For example, theapplication programs 210 can includeapplications 1 through N, which further include a video coding application that performs the methods described here.Computing device 200 can also include asecondary storage 214, which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in thesecondary storage 214 and loaded into thememory 204 as needed for processing. - The
computing device 200 can also include one or more output devices, such as adisplay 218. Thedisplay 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs. Thedisplay 218 can be coupled to theCPU 202 via thebus 212. Other output devices that permit a user to program or otherwise use thecomputing device 200 can be provided in addition to or as an alternative to thedisplay 218. When the output device is or includes a display, the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display, or a light emitting diode (LED) display, such as an organic LED (OLED) display. - The
computing device 200 can also include or be in communication with an image-sensingdevice 220, for example, a camera, or any other image-sensingdevice 220 now existing or hereafter developed that can sense an image such as the image of a user operating thecomputing device 200. The image-sensingdevice 220 can be positioned such that it is directed toward the user operating thecomputing device 200. In an example, the position and optical axis of the image-sensingdevice 220 can be configured such that the field of vision includes an area that is directly adjacent to thedisplay 218 and from which thedisplay 218 is visible. - The
computing device 200 can also include or be in communication with a sound-sensing device 222, for example, a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near thecomputing device 200. The sound-sensing device 222 can be positioned such that it is directed toward the user operating thecomputing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates thecomputing device 200. - Although
FIG. 2 depicts theCPU 202 and thememory 204 of thecomputing device 200 as being integrated into one unit, other configurations can be utilized. The operations of theCPU 202 can be distributed across multiple machines (wherein individual machines can have one or more processors) that can be coupled directly or across a local area or other network. Thememory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of thecomputing device 200. Although depicted here as one bus, thebus 212 of thecomputing device 200 can be composed of multiple buses. Further, thesecondary storage 214 can be directly coupled to the other components of thecomputing device 200 or can be accessed via a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards. Thecomputing device 200 can thus be implemented in a wide variety of configurations. -
FIG. 3 is a diagram of an example of avideo stream 300 to be encoded and subsequently decoded. Thevideo stream 300 includes avideo sequence 302. At the next level, thevideo sequence 302 includes a number ofadjacent frames 304. While three frames are depicted as theadjacent frames 304, thevideo sequence 302 can include any number ofadjacent frames 304. Theadjacent frames 304 can then be further subdivided into individual frames, for example, aframe 306. At the next level, theframe 306 can be divided into a series of planes orsegments 308. Thesegments 308 can be subsets of frames that permit parallel processing, for example. Thesegments 308 can also be subsets of frames that can separate the video data into separate colors. For example, aframe 306 of color video data can include a luminance plane and two chrominance planes. Thesegments 308 may be sampled at different resolutions. - Whether or not the
frame 306 is divided intosegments 308, theframe 306 may be further subdivided intoblocks 310, which can contain data corresponding to, for example, 16×16 pixels in theframe 306. Theblocks 310 can also be arranged to include data from one ormore segments 308 of pixel data. Theblocks 310 can also be of any other suitable size such as 4×4 pixels, 8×8 pixels, 16×8 pixels, 8×16 pixels, 16×16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein. -
FIG. 4 is a block diagram of anencoder 400 according to implementations of this disclosure. Theencoder 400 can be implemented, as described above, in the transmittingstation 102, such as by providing a computer software program stored in memory, for example, thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theCPU 202, cause the transmittingstation 102 to encode video data in the manner described inFIG. 4 . Theencoder 400 an also be implemented as specialized hardware included in, for example, the transmittingstation 102. In one particularly desirable implementation, theencoder 400 is a hardware encoder. - The
encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded orcompressed bitstream 420 using thevideo stream 300 as input: an intra/inter prediction stage 402, atransform stage 404, aquantization stage 406, and anentropy encoding stage 408. Theencoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks. InFIG. 4 , theencoder 400 has the following stages to perform the various functions in the reconstruction path: adequantization stage 410, aninverse transform stage 412, areconstruction stage 414, and aloop filtering stage 416. Other structural variations of theencoder 400 can be used to encode thevideo stream 300. - When the
video stream 300 is presented for encoding, respectiveadjacent frames 304, such as theframe 306, can be processed in units of blocks. At the intra/inter prediction stage 402, respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction). In any case, a prediction block can be formed. In the case of intra-prediction, a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter-prediction, a prediction block may be formed from samples in one or more previously constructed reference frames. Implementations for forming a prediction block are discussed below with respect toFIGS. 6, 7, and 8 , for example, using parameterized motion model identified for encoding a current block of a video frame. - Next, still referring to
FIG. 4 , the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual). Thetransform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms. Thequantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated. The quantized transform coefficients are then entropy encoded by theentropy encoding stage 408. The entropy-encoded coefficients, together with other information used to decode the block (which may include, for example, the type of prediction used, transform type, motion vectors and quantizer value), are then output to thecompressed bitstream 420. Thecompressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding. Thecompressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein. - The reconstruction path in
FIG. 4 (shown by the dotted connection lines) can be used to ensure that theencoder 400 and a decoder 500 (described below) use the same reference frames to decode thecompressed bitstream 420. The reconstruction path performs functions that are similar to functions that take place during the decoding process (described below), including dequantizing the quantized transform coefficients at thedequantization stage 410 and inverse transforming the dequantized transform coefficients at theinverse transform stage 412 to produce a derivative residual block (also called a derivative residual). At thereconstruction stage 414, the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts. - Other variations of the
encoder 400 can be used to encode thecompressed bitstream 420. For example, a non-transform based encoder can quantize the residual signal directly without thetransform stage 404 for certain blocks or frames. In another implementation, an encoder can have thequantization stage 406 and thedequantization stage 410 combined in a common stage. -
FIG. 5 is a block diagram of adecoder 500 according to implementations of this disclosure. Thedecoder 500 can be implemented in the receivingstation 106, for example, by providing a computer software program stored in thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theCPU 202, cause the receivingstation 106 to decode video data in the manner described inFIG. 5 . Thedecoder 500 can also be implemented in hardware included in, for example, the transmittingstation 102 or the receivingstation 106. - The
decoder 500, similar to the reconstruction path of theencoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420: anentropy decoding stage 502, adequantization stage 504, aninverse transform stage 506, an intra/inter prediction stage 508, areconstruction stage 510, aloop filtering stage 512, and adeblocking filtering stage 514. Other structural variations of thedecoder 500 can be used to decode thecompressed bitstream 420. - When the
compressed bitstream 420 is presented for decoding, the data elements within thecompressed bitstream 420 can be decoded by theentropy decoding stage 502 to produce a set of quantized transform coefficients. Thedequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and theinverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by theinverse transform stage 412 in theencoder 400. Using header information decoded from thecompressed bitstream 420, thedecoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in theencoder 400, e.g., at the intra/inter prediction stage 402. At thereconstruction stage 510, the prediction block can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. - Other filtering can be applied to the reconstructed block. In this example, the
deblocking filtering stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 516. The output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein. Other variations of thedecoder 500 can be used to decode thecompressed bitstream 420. For example, thedecoder 500 can produce the output video stream 516 without thedeblocking filtering stage 514. -
FIG. 6 is a flowchart diagram of aprocess 600 for encoding a current block using segmentation-based parameterized motion models according to an implementation of this disclosure. Theprocess 600 can be implemented in an encoder such as theencoder 400 ofFIG. 4 . - The
process 600 can be implemented, for example, as a software program that can be executed by computing devices such as transmittingstation 102. The software program can include machine-readable instructions (e.g., executable instructions) that can be stored in a memory such as thememory 204 or thesecondary storage 214, and that can be executed by a processor, such asCPU 202, to cause the computing device to perform theprocess 600. In at least some implementations, theprocess 600 can be performed in whole or in part by the intra/inter prediction stage 402 of theencoder 400 ofFIG. 4 . - The
process 600 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of theprocess 600 can be distributed using different processors, memories, or both. Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps. - The
process 600 is described with reference toFIG. 7 .FIG. 7 is a diagram 700 of a frame segmentation according to implementations of this disclosure.FIG. 7 includes acurrent frame 701. Blocks of thecurrent frame 701 can be encoded using reference frames, such as areference frame 704 and areference frame 706, of aframe buffer 702. Thecurrent frame 701 includes the head and shoulders of aperson 720 and other background objects. - At 602, the
process 600 segments the video frame with respect to a reference frame resulting in a segmentation. The segmentation can include one or more segments. The segmentation includes a segment containing the current block and a parameterized motion model for the segment.FIG. 7 depicts three segments: asegment 722 depicted by a group of shaded blocks, asegment 718 depicted by another group of differently shaded blocks, and asegment 714, which is a group that includes the rest of the blocks of the frame constituting the background of the frame. Thesegment 722 includes thecurrent block 716. - For each of at least some of the reference frames of the
frame buffer 702, theprocess 600 can segment thecurrent frame 701. Theprocess 600 can use an image segmentation technique that leverages the motion of objects between a reference frame and the current frame. A parameterized motion model is then associated with each segment as further described with respect toFIG. 8 . - Image segmentation can be performed using interest points. For example, the
process 600 can determine first interest points in a reference frame, such as thereference frame 704, and second interest points in thecurrent frame 701. The Features from Accelerated Segment Test (FAST) algorithm can be used to determine the first interest points and the second interest points. The first interest points and the second interest points are then matched. Theprocess 600 can use the matched interest points to determine a parameterized motion model for the matching interest points. - The
process 600 can use the Random Sample Consensus (RANSAC) method to fit a model (i.e., a parameterized motion model) to the matched points. RANSAC is an iterative algorithm that can be used to estimate model parameters (i.e., the parameters of the parameterized motion model) from data that contain inliers and outliers. Inliers are the data points (i.e., pixels) of the current frame that fit the parameterized motion model. Theprocess 600 can determine a segment based on the inliers. That is, theprocess 600 can include the inliers in one segment. The segment (referred to as a foreground segment) based on the inliers may correspond to motion in the current frame corresponding to foreground objects. However, that need not be the case. That is, the foreground segment may include background objects or blocks. The foreground segment may not include all foreground objects or blocks. - “Outliers” are the data points (i.e., pixels) of the current frame that do not fit the parameterized motion model. The
process 600 can determine a second segment based on the outliers. The segment (referred to as a background segment) based on the outliers may correspond to relatively static background objects of the current frame. However, that need not be the case. Alternatively, instead of determining a second segment based on the outliers, theprocess 600 can use the outliers to determine additional segments. For example, theprocess 600 can recursively apply the same process as described above to determine additional segments. For example, by applying the process described above to thecurrent frame 701 and using thereference frame 704, theprocess 600 determined the threesegments segments person 720 in a case where, for example, the shoulders of theperson 720 are moving, with respect to a reference frame, in one direction while the head is moving another direction. - The
process 600 can determine a parameterized motion model (for example, using RANSAC) based on a motion model type. For example, the RANSAC algorithm can determine a parameterized motion model based on a motion model type provided by theprocess 600. Different motion model types can be available. Available motion model types include, in increasing complexity, a translational motion model type, a similarity motion model type, an affine motion model type, and a homographic motion model type. Additional or fewer motion model types may be available. Some of the motion model types are explained further with respect toFIGS. 9A-9D . - In some situations, the parameterized motion model determined by the RANSAC method may contain more parameters than are necessary to provide a good approximation (e.g., with respect to an error metric) of the global motion for that segment. For example, requesting an affine model from RANSAC may return a six-parameter model (as described with respect to
FIGS. 9A-9D ), even though a four-parameter model is sufficient to provide a good approximation of the segment. As such, theprocess 600 can iteratively evaluate the available model types starting from a least complex motion model type (e.g., the translation motion model type) to a most complex model (e.g., the homographic motion model type). If a lower complexity model is determined to produce an error metric within a predefined threshold, then the parameterized motion model corresponding to the lower complexity model is determined to be the parameterized motion model of the segment. - In an implementation an error advantage associated with a model type can be used as the error metric. The error advantage E can be defined as
-
E=Σα|c xy −w xy|0.6 - In the equation above, a is a weight value, cxy is the pixel at (x, y) in the current frame, and wxy is the pixel at (x, y) in the warped frame as described below. If a model type produces an error advantage E below a predefined threshold, then the parameterized motion model corresponding to the model type is associated with the segment. If no model type produces an error advantage E below the predefined threshold, then the translation motion model type can be assumed for the segment.
- In an implementation, the
process 600 does not evaluate the homographic motion model type; rather theprocess 600 stops at the similarity motion model type. This is so in order to reduce decoder complexity. - The
process 600 can segment the current frame with respect to (or based on) each of the reference frames of theframe buffer 702. InFIG. 7 , theframe buffer 702 includes eight (8) reference frames. Assuming that theprocess 600 determines two (2) segments (i.e., a foreground segment and a background segment) per reference frame, the segmentation results in a total of 16 segments. Each of the 16 segments corresponds to a respective parameterized motion model resulting in 16 parameterized motion models. - As will be explained further with respect to
FIG. 8 , a prediction block for a current block is determined based on the available segments that contain the current block in the reference frames. As such, if an encoder, such as theencoder 400 ofFIG. 4 , determines a prediction block using the 16 parameterized motion models, then a decoder, such as thedecoder 500 ofFIG. 5 , also uses the 16 parameterized motion models to reconstruct the current block. As such, the 16 parameterized motion models are encoded in an encoded bitstream, such as thebitstream 420 generated by theencoder 400 and received by thedecoder 500. - Encoding, in the encoded bitstream, the parameters of, e.g., 16 parameterized motion models may outweigh the prediction gains of segmentation-based parameterized motion models. As such, the
process 600 can determine a subset of the reference frames of the frame buffer that results in the best fit for a specific segment. For a segment, a number of reference frames (e.g., three frames) are selected and the parameterized motion models with respect to these frames are determined and encoded in the encoded bitstream. For example, theprocess 600 can determine, for a segment, the parameterized motion models based on the golden reference frame, alternative reference frame, and the last reference frame of the frame buffer. The golden reference frame can be a reference frame available as a forward prediction frame for encoding a current frame. The last reference frame can be available as a forward prediction frame for encoding the current frame. The alternative reference frame can be available as a backward reference frame for encoding the current frame. - Encoding a parameterized motion model can mean encoding the parameters of the parameterized motion model in the header of the current frame being encoded. Alternatively, encoding the parameterized motion model can mean encoding the motion model type corresponding to the parameterized motion model.
- In the case where the motion model type is encoded, a decoder, such as the
decoder 500 ofFIG. 5 , decodes the motion model type and determines the parameters of the parameterized motion model of the motion model type in a similar way to that of the encoder. In order to limit decoder complexity, the encoder can encode a motion model type that is less complex than the most complex motion model type. That is, for example, the encoder can determine a parameterized motion model for a segment using a motion model type no more complex than the similarity motion model type. - Referring again to
FIG. 7 , theforeground segment 722 is obtained from the reference frame 704 (as indicated by line 708). Thebackground segment 714 is obtained from the reference frame 706 (as indicated by line 710). That is, each segment can be obtained from a different reference frame. However, this is not necessary. Some of the segments can be obtained from the same reference frames. For example, and as illustrated inFIG. 7 , theforeground segment 722 and thebackground segment 714 can be obtained from the same reference frame 706 (as indicated byline 712 and theline 710, respectively). Thesegment 718, while not specifically indicated inFIG. 7 , can also be obtained from any of the reference frames of theframe buffer 702. -
FIG. 8 is an illustration of examples of motion within avideo frame 800 according to implementations of this disclosure. While not specifically indicated, it should be understood that the end points of the motion directions (e.g., motion 808) ofFIG. 8 refer to pixel positions within a reference frame. For example,motion end point 809 refers to positions within a reference frame. This is so because motion is described with respect to another frame, such as a reference frame. Ablock 802 within thevideo frame 800 can include warped motion. Warped motion is motion that might not be accurately predicted using motion vectors determined via translational motion compensation (e.g., translational inter prediction as described above). For example, the motion within theblock 802 might scale, rotate, or otherwise move in a not entirely linear manner in any number of different directions. Translational motion compensation can miss certain portions of the motion falling outside of the rectangular geometry or use an unnecessary number of bits to predict the motion. As such, a prediction block used to encode or decode theblock 802 can be formed, or generated, using a parameterized motion model. - Motion within the
video frame 800 may be global motion. For example, motion within thevideo frame 800 can be considered a global motion where a large number of pixels of the blocks of thevideo frame 800 yield a low prediction error. A prediction error threshold can be defined, and values for all or a portion of the pixels of the blocks of thevideo frame 800 can be compared thereto. In another example, motion within thevideo frame 800 can be considered global motion where it is in a direction common with most other motion within thevideo frame 800. A video frame can contain more than one global motion. Portions of the pixels exhibiting the same global motion can be grouped into a segment. - The
video frame 800 includes motion at 804, 806, and 808. The motion at 804, 806, and 808 demonstrate motion of pixels of theblock 802 in a generally common direction to linear and non-linear locations external to theblock 802 within thevideo frame 800. For example, the motion shown at 804 is a translational motion from a leftmost set of pixels of theblock 802. The motion shown at 806 is a rotational motion from a middle set of pixels of theblock 802. The motion shown at 808 is a warped motion from a rightmost set of pixels of theblock 802. Because the direction of the motion shown at 804, 806, and 808 is a most common direction within thevideo frame 800, the motion shown at 804, 806, and 808 is global motion. The group of pixels of thevideo frame 800 exhibiting the same global motion can be grouped into one segment. More than one global motion can be associated with the frame. Each global motion can be associated with a segment of the frame. - The global motion within the
video frame 800 may not be entirely associated with theblock 802. For example, the global motion can include motion of pixels located within thevideo frame 800 and outside of theblock 802, such as is shown at 810. In addition to the global motion, thevideo frame 800 may have other global motion within a portion of thevideo frame 800. For example, another motion is shown at 812 as moving pixels in a direction different from the global motion shown at 804, 806, 808, and 810. Pixels associated with the other global motion within thevideo frame 800 can be grouped into another segment. Thevideo frame 800 may include multiple global motions. - A
frame header 814 of thevideo frame 800 includes references to reference frames available for encoding or decoding theblock 802. The references to the reference frames in theframe header 814 can be for parameterized motion model associated with those reference frames. A parameterized motion model corresponds to a motion model type (described later with respect toFIG. 9 ) and indicates how pixels of theblock 802 can be warped to generate a prediction block usable for encoding or decoding theblock 802. Theframe header 814 can include one or more parameterized motion models each corresponding to a segment of thevideo frame 800. - For example, the parameterized
motion model 816 corresponds to a first motion model of a first segment associated with a first reference frame. The parameterizedmotion model 818 corresponds to a second motion model of a second segment associated with the first reference frame. The parameterizedmotion model 820 corresponds to a first motion model of a first segment associated with a second reference frame. The parameterizedmotion model 822 corresponds to a second motion model of a second segment associated with the second reference frame. The parameterizedmotion model 824 corresponds to a third motion model of a third segment associated with the second reference frame. The parameterizedmotion model 826 corresponds to a first motion model of a first segment associated with a third reference frame. The parameterizedmotion model 828 corresponds to a second motion model of a second segment associated with the third reference frame. - The parameterized motion models associated with a reference frame may correspond to one or more motion model types. For example, the parameterized
motion model 816 and the parameterizedmotion model 818 may respectively correspond to a homographic motion model and an affine motion model for the first reference frame. In some implementations, each reference frame can be associated with multiple parameterized motion models of a single motion model type. For example, the parameterizedmotion model 816 and the parameterizedmotion model 818 may both correspond to different homographic motion models. However, in some implementations, a reference frame may be limited to one motion model for each motion model type. Further, in some implementations, a reference frame may be limited to a single motion model total. In such a case, that motion model may be replaced in certain situations, such as where a new motion model results in a lower prediction error. - Parameterized motion models may indicate a global motion within multiple frames of a video sequence. As such, the parameterized motion models encoded within the
frame header 814 may be used to generate prediction blocks for multiple blocks in multiple frames of a video sequence. The reference frames associated with parameterized motion models in theframe header 814 may be selected from a reference frame buffer, such as by using bits encoded to theframe header 814. For example, the bits encoded to theframe header 814 may point to virtual index locations of the reference frames within the reference frame buffer. -
FIGS. 9A-D are illustrations of examples of warping pixels of a block of a video frame according to a parameterized motion model according to implementations of this disclosure. A parameterized motion model used to warp pixels of a block of a frame can correspond to a motion model type. The motion model type that corresponds to a parameterized motion model may be a homographic motion model type, an affine motion model type, a similarity motion model type, or a translational motion model type. The parameterized motion model to use can be indicated by data associated with reference frames, such as within frame headers of an encoded bitstream. -
FIGS. 9A-D depict different motion model types used to project pixels of a block to a warped patch within a reference frame. The warped patch can be used to generate a prediction block for encoding or decoding that block. A parameterized motion model indicates how the pixels of a block are to be scaled, rotated, or otherwise moved when projected into the reference frame. Data indicative of pixel projections can be used to identify parameterized motion models corresponding to a respective motion model. The number and function of the parameters of a parameterized motion model depend upon the specific projection used. - In
FIG. 9A , pixels of ablock 902A are projected to awarped patch 904A of aframe 900A using a homographic motion model. A homographic motion model uses eight parameters to project the pixels of theblock 902A to thewarped patch 904A. A homographic motion is not bound by a linear transformation between the coordinates of two spaces. As such, the eight parameters that define a homographic motion model can be used to project pixels of theblock 902A to a quadrilateral patch (e.g., thewarped patch 904A) within theframe 900A. Homographic motion models thus support translation, rotation, scaling, changes in aspect ratio, shearing, and other non-parallelogram warping. A homographic motion between two spaces is defined as follows: -
- In these equations, (x, y) and (X, Y) are coordinates of two spaces, namely, a projected position of a pixel within the
frame 900A and an original position of a pixel within theblock 902A, respectively. Further, a, b, c, d, e, f, g, and h are the homographic parameters and are real numbers representing a relationship between positions of respective pixels within theframe 900A and theblock 902A. Of these parameters, a represents a fixed scale factor along the x-axis with the scale of the y-axis remaining unchanged, b represents a scale factor along the x-axis proportional to the y-distance to a center point of the block, c represents a translation along the x-axis, d represents a scale factor along the y-axis proportional to the x-distance to the center point of the block, e represents a fixed scale factor along the y-axis with the scale of the x-axis remaining unchanged, f represents a translation along the y-axis, g represents a proportional scale of factors of the x- and y-axes according to a function of the x-axis, and h represents a proportional scale of factors of the x- and y-axes according to a function of the y-axis. - In
FIG. 9B , pixels of ablock 902B are projected to awarped patch 904B of aframe 900B using an affine motion model. An affine motion model uses six parameters to project the pixels of theblock 902B to thewarped patch 904B. An affine motion is a linear transformation between the coordinates of two spaces defined by the six parameters. As such, the six parameters that define an affine motion model can be used to project pixels of theblock 902B to a parallelogram patch (e.g., thewarped patch 904B) within theframe 900B. Affine motion models thus support translation, rotation, scale, changes in aspect ratio, and shearing. The affine projection between two spaces is defined as follows: -
x=a*X+b*Y+c;and y=d*X+e*Y+f - In these equations, (x, y) and (X, Y) are coordinates of two spaces, namely, a projected position of a pixel within the
frame 900B and an original position of a pixel within theblock 902B, respectively. Also, a, b, c, d, e, and f are affine parameters and are real numbers representing a relationship between positions of respective pixels within theframe 900B and theblock 902B. Of these, a and d represent rotational or scaling factors along the x-axis, b and e represent rotational or scaling factors along the y-axis, and c and f respectively represent translation along the x- and y-axes. - In
FIG. 9C , pixels of ablock 902C are projected to awarped patch 904C of a frame 900C using a similarity motion model. A similarity motion model uses four parameters to project the pixels of theblock 902C to thewarped patch 904C. A similarity motion is a linear transformation between the coordinates of two spaces defined by the four parameters. For example, the four parameters can be a translation along the x-axis, a translation along the y-axis, a rotation value, and a zoom value. As such, the four parameters that define a similarity motion model can be used to project pixels of theblock 902C to a square patch (e.g., thewarped patch 904C) within the frame 900C. Similarity motion models thus support square to square transformation with rotation and zoom. - In
FIG. 9D , pixels of ablock 902D are projected to awarped patch 904D of aframe 900D using a translational motion model. A translational motion model uses two parameters to project the pixels of theblock 902D to thewarped patch 904D. A translational motion is a linear transformation between the coordinates of two spaces defined by the two parameters. For example, the two parameters can be a translation along the x-axis and a translation along the y-axis. As such, the two parameters that define a translational motion model can be used to project pixels of theblock 902D to a square patch (e.g., thewarped patch 904D) within theframe 900D. - Returning again to
FIG. 6 , at 604, theprocess 600 determines a first motion vector for the current block based on the segmentation. As described above, the video frame can be partitioned with respect to at least some of the reference frames into segments. As such, the current block can be part of many segments, each corresponding to a reference frame. For at least some of the segments that the current frame belongs to, theprocess 600 determines a respective motion vector. - A motion vector is generated between the current block and a reference frame selected based on the parameterized motion model associated with the segment of the current block as described with respect to
FIGS. 7, 8, and 9 . As such, the motions vector between the current block and a reference frame selected based on the parameterized motion model can be a reference to the parameterized motion model. That is, the motion vector indicates which reference frame and the parametrized motion model. - The motion vector can be generated by warping pixels of the current block to a warped patch within the reference frame according to the selected parameterized motion model. For example, the pixels of the current block are projected to the warped patch within the reference frame. The shape and size of the warped patch to which the pixels of the current block are projected depends upon the motion model associated with the selected parameterized motion model. The warped patch can be a rectangular patch or a non-rectangular patch. For example, if the parameterized motion model is of a translational motion model type, the warped patch is a rectangular block that is the same size as the current block. In another example, if the parameterized motion model is of a homographic motion model type, the warped patch may be any quadrilateral and of any size. The position of the warped patch also depends upon the motion model. For example, the parameters of the parameterized motion model indicates an x-axis and/or y-axis translation for the warped patch. The parameters of the parameterized motion model may further indicate a rotation, zoom, or other motional change for the warped patch.
- The warped patch can then be unwarped using the motion vector to return the current block to generate a prediction block. The prediction block can have a rectangular geometry for predicting the current block. For example, unwarping the projected pixels of the warped patch after respective pixels are projected to the warped patch of the reference frame can include projecting the warped patch to a rectangular block using the generated motion vector. The pixel position coordinates of the warped patch of the reference frame can be projected to the rectangular block based on respective coordinate translations to the rectangular block. The resulting rectangular block can be used to generate the prediction block.
- At 606, the
process 600 determines a second motion vector for the current block using translational motion compensation. That is, theprocess 600 can determine the second motion vector using inter prediction as described above. - At 608, the
process 600 encodes, for the current block, the one of the first motion vector and the second motion vector corresponding to a smaller error. The smaller error can be the error corresponding to the best rate-distortion value. A rate-distortion value refers to a ratio that balances an amount of distortion (i.e., loss in video quality) with rate (i.e., the number of bits) used for encoding. For each of the motion vectors determined at 604 and 606, theprocess 600 can determine the motion vector corresponding to the best rate-distortion value. - The
process 600 can encode, in the encoded bitstream, the selected motion vector. In the case where the selected motion vector is a segmentation-based motion vector (i.e., a motion vector determined at 604), theprocess 600 can encode the parameters of the parameterized motion model used to determine the motion vector. Alternatively, theprocess 600 can encode the motion model type corresponding to the parameterized motion model. -
FIG. 10 is a flowchart diagram of aprocess 1000 for decoding a current block of a video frame according to one implementation of the disclosure. Theprocess 1000 receives an encoded bitstream, such as thecompressed bitstream 420 ofFIG. 5 . Theprocess 1000 may be performed by a decoder. For example, theprocess 1000 can be performed in whole or in part by the intra/inter prediction stage 508 of thedecoder 500. Theprocess 1000 can be performed in whole or in part during the reconstruction path (shown by the dotted connection lines) of theencoder 400 ofFIG. 4 . Implementations of theprocess 1000 can be performed by storing instructions in a memory such as thememory 204 of the receivingstation 106, or the transmittingstation 102, to be executed by a processor such asCPU 202, for example. - The
process 1000 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of theprocess 1000 can be distributed using different processors, memories, or both. For simplicity of explanation, theprocess 1000 is depicted and described as a series of steps or operations. However, the teachings in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, steps in accordance with this disclosure may occur with other steps not presented and described herein. Furthermore, not all illustrated steps or operations may be used to implement a method in accordance with the disclosed subject matter. - At 1002, the
process 1000 identifies a parameterized motion model corresponding to a motion model type. The parameterized motion model can be identified based on information encoded in a header of a current frame (i.e., frame header) being decoded. The current frame being decoded is a frame containing the current block. - The
process 1000 can identify the parameterized motion model by decoding the parameters of the parameterized motion model from the encoded bitstream. Alternatively, theprocess 1000 can decode a motion model type from the encoded bitstream. Theprocess 1000 can then generate the parameters of the parameterized motion model corresponding to the motion model type. Theprocess 1000 can determine the parameters of the parameterized motion model as described above with respect to theFIG. 6 . - At 1004, the
process 1000 associates the parameterized motion model with a segment of a reference frame. Theprocess 1000 can associate the parameterized motion model with the segment of the reference frame as described above with respect toFIG. 8 . Theprocess 1000 can receive, in the frame header, information regarding the segmentation of the frame. The information regarding the segmentation can enable theprocess 1000 to determine, for example, the number of segments of the current frame with respect to at least some of the reference frames. The information regarding the segmentation can enable theprocess 1000 to determine, with respect to a reference frame, which segment includes the current block. - At 1006, the
process 1000 decodes the current block using the parameterized motion model in response to determining that the current block is encoded using the parameterized motion model. The current block header can include an indication identifying that the current block is encoded using the parameterized motion model. For example, the current block header can include an indicator of a global motion model type used to encode the current block. For example, the indicator can indicate that global motion was used to encode the current block or that no global motion was used to encode the current block (e.g., zero global motion). - In response to determining that the current block is encoded using the parameterized motion model, the
process 1000 decodes the current block using the parameterized motion model. In response to determining that the current block is not encoded using the parameterized motion model, theprocess 1000 decodes the current block using translational motion compensation. - For simplicity of explanation, the
processes - The frame header for an inter-frame frame of the video sequence can include data indicating one or more parameterized motion models usable to encode or decode one or more blocks thereof. For example, the data encoded to the frame header of an inter-frame frame can include the parameters of a parameterized motion model. The data may also include a coded flag indicating a number of parameterized motion models available to the inter-frame frame.
- In some implementations, a reference frame may not have a parameterized motion model. For example, there may be too many distinct motions within the reference frame to identify a global motion. In another example, the prediction errors determined for warped pixels based on motion models may not satisfy the threshold. In such a case, blocks of frames using that reference frame can be encoded or decoded using zero motion. A zero motion model may by default be encoded to the frame header of all or some of the inter-frame frames of a video sequence.
- In some implementations, a current block encoded using a parameterized motion model is decoded by warping the pixels of the encoded block according to the parameterized motion model. The warped pixels of the encoded block are then interpolated. For example, the interpolation can be performed using a 6-tap by 6-tap subpixel filter. In another example, the interpolation can be performed using bicubic interpolation. Bicubic interpolation can include using a 4-tap by 4-tap window to interpolate the subpixel values of an encoded block. Bicubic interpolation can include applying a horizontal sheer and a vertical sheer to an encoded block.
- The aspects of encoding and decoding described above illustrate some examples of encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
- The word “example” is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as being preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise or clearly indicated otherwise by the context, the statement “X includes A or B” is intended to mean any of the natural inclusive permutations thereof. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more,” unless specified otherwise or clearly indicated by the context to be directed to a singular form. Moreover, use of the term “an implementation” or the term “one implementation” throughout this disclosure is not intended to mean the same embodiment or implementation unless described as such.
- Implementations of the transmitting
station 102 and/or the receiving station 106 (and the algorithms, methods, instructions, etc., stored thereon and/or executed thereby, including by theencoder 400 and the decoder 500) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmittingstation 102 and the receivingstation 106 do not necessarily have to be implemented in the same manner. - Further, in one aspect, for example, the transmitting
station 102 or the receivingstation 106 can be implemented using a general purpose computer or general purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms, and/or instructions described herein. In addition, or alternatively, for example, a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein. - The transmitting
station 102 and the receivingstation 106 can, for example, be implemented on computers in a video conferencing system. Alternatively, the transmittingstation 102 can be implemented on a server, and the receivingstation 106 can be implemented on a device separate from the server, such as a handheld communications device. In this instance, the transmittingstation 102, using anencoder 400, can encode content into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using adecoder 500. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmittingstation 102. Other suitable transmitting and receiving implementation schemes are available. For example, the receivingstation 106 can be a generally stationary personal computer rather than a portable communications device, and/or a device including anencoder 400 may also include adecoder 500. - Further, all or a portion of implementations of the present disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable mediums are also available.
- The above-described embodiments, implementations, and aspects have been described in order to facilitate easy understanding of this disclosure and do not limit this disclosure. On the contrary, this disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation as is permitted under the law so as to encompass all such modifications and equivalent arrangements.
Claims (20)
1. A method, comprising:
decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, wherein each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and
decoding blocks of the current frame by:
for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and
decoding the each inter-predicted block based on the indication.
2. The method of claim 1 , wherein the multiple global motion models include transformations selected from a group comprising a translational motion model type, a similarity motion model type, an affine motion model type, and a homographic motion model type.
3. The method of claim 1 , wherein decoding, from the compressed bitstream, the multiple global motion models comprises:
decoding respective global motion model types for at least some of the multiple global motion models.
4. The method of claim 3 , further comprising:
determining parameters of one of the at least some of the multiple global motion models based on a motion model type associated with the one of the at least some of the multiple global motion models.
5. The method of claim 1 , wherein the segmentation of the current frame is based on motion analysis between the current frame and reference frames used for decoding the current frame.
6. The method of claim 1 , further comprising:
decoding parameters of the global motion model of the multiple global motion models and associated with the segment from the compressed bitstream.
7. The method of claim 1 , wherein decoding the blocks of the current frame further comprises:
decoding at least one block of the segment using intra-prediction.
8. A device, comprising:
a processor, the processor configured to:
decode, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, wherein each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and
decode blocks of the current frame by configuration to:
for each inter-predicted block of a segment, decode, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and
decode the each inter-predicted block based on the indication.
9. The device of claim 8 , wherein the multiple global motion models include transformations selected from a group comprising a translational motion model type, a similarity motion model type, an affine motion model type, and a homographic motion model type.
10. The device of claim 8 , wherein to decode, from the compressed bitstream, the multiple global motion models comprises to:
decode respective global motion model types for at least some of the multiple global motion models.
11. The device of claim 10 , wherein the processor is further configured to:
determine parameters of one of the at least some of the multiple global motion models based on a motion model type associated with the one of the at least some of the multiple global motion models.
12. The device of claim 8 , wherein the segmentation of the current frame is based on motion analysis between the current frame and reference frames used for decoding the current frame.
13. The device of claim 8 , wherein the processor is further configured to:
decode parameters of the global motion model of the multiple global motion models and associated with the segment from the compressed bitstream.
14. The device of claim 8 , wherein to decode the blocks of the current frame further comprises to:
decode at least one block of the segment using intra-prediction.
15. A non-transitory computer readable medium storing instructions operable to cause one or more processors to perform operations comprising:
decoding, from a compressed bitstream, multiple global motion models associated with respective segments of a current frame, wherein each global motion model is based on a segmentation of the current frame and represents a respective underlying motion of blocks within a respective segment; and
decoding blocks of the current frame by:
for each inter-predicted block of a segment, decoding, form the compressed bitstream, an indication of whether to decode the each inter-predicted block based on a global motion model of the multiple global motion models and associated with the segment, or whether to decode the each inter-predicted block based on a motion vector that is different from the global motion model; and
decoding the each inter-predicted block based on the indication.
16. The non-transitory computer readable medium of claim 15 , wherein the multiple global motion models include transformations selected from a group comprising a translational motion model type, a similarity motion model type, an affine motion model type, and a homographic motion model type.
17. The non-transitory computer readable medium of claim 15 , wherein decoding, from the compressed bitstream, the multiple global motion models comprises:
decoding respective global motion model types for at least some of the multiple global motion models.
18. The non-transitory computer readable medium of claim 17 , wherein the operations further comprise:
determining parameters of one of the at least some of the multiple global motion models based on a motion model type associated with the one of the at least some of the multiple global motion models.
19. The non-transitory computer readable medium of claim 15 , wherein the segmentation of the current frame is based on motion analysis between the current frame and reference frames used for decoding the current frame.
20. The non-transitory computer readable medium of claim 15 , wherein the operations further comprise:
decoding parameters of the global motion model of the multiple global motion models and associated with the segment from the compressed bitstream.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/521,182 US20240098298A1 (en) | 2017-03-15 | 2023-11-28 | Segmentation-based parameterized motion models |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762471659P | 2017-03-15 | 2017-03-15 | |
US15/838,748 US10506249B2 (en) | 2017-03-15 | 2017-12-12 | Segmentation-based parameterized motion models |
US16/693,425 US20200092575A1 (en) | 2017-03-15 | 2019-11-25 | Segmentation-based parameterized motion models |
US18/521,182 US20240098298A1 (en) | 2017-03-15 | 2023-11-28 | Segmentation-based parameterized motion models |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/693,425 Continuation US20200092575A1 (en) | 2017-03-15 | 2019-11-25 | Segmentation-based parameterized motion models |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240098298A1 true US20240098298A1 (en) | 2024-03-21 |
Family
ID=60484462
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/838,748 Active 2038-01-19 US10506249B2 (en) | 2017-03-15 | 2017-12-12 | Segmentation-based parameterized motion models |
US16/693,425 Abandoned US20200092575A1 (en) | 2017-03-15 | 2019-11-25 | Segmentation-based parameterized motion models |
US18/521,182 Pending US20240098298A1 (en) | 2017-03-15 | 2023-11-28 | Segmentation-based parameterized motion models |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/838,748 Active 2038-01-19 US10506249B2 (en) | 2017-03-15 | 2017-12-12 | Segmentation-based parameterized motion models |
US16/693,425 Abandoned US20200092575A1 (en) | 2017-03-15 | 2019-11-25 | Segmentation-based parameterized motion models |
Country Status (2)
Country | Link |
---|---|
US (3) | US10506249B2 (en) |
WO (1) | WO2018169571A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8472792B2 (en) | 2003-12-08 | 2013-06-25 | Divx, Llc | Multimedia distribution system |
US7519274B2 (en) * | 2003-12-08 | 2009-04-14 | Divx, Inc. | File format for multiple track digital data |
EP3151243B1 (en) * | 2015-09-29 | 2021-11-24 | Nokia Technologies Oy | Accessing a video segment |
EP3379884B1 (en) * | 2017-03-23 | 2019-08-28 | Mitsubishi Electric R&D Centre Europe B.V. | Low complexity mu-mimo pairing and scheduling for 5g systems |
CN114128288A (en) | 2019-04-25 | 2022-03-01 | Op方案有限责任公司 | Global motion model for motion vector inter-frame prediction |
JP2022529510A (en) * | 2019-04-25 | 2022-06-22 | オーピー ソリューションズ， エルエルシー | Selective motion vector prediction candidates in frames with global motion |
MX2021013065A (en) * | 2019-04-25 | 2022-04-12 | Op Solutions Llc | Global motion constrained motion vector in inter prediction. |
CN111310594B (en) * | 2020-01-20 | 2023-04-28 | 浙江大学 | Video semantic segmentation method based on residual error correction |
Family Cites Families (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP0562672A3 (en) * | 1992-03-22 | 1994-07-13 | Igp Res & Dev Ltd | Process of picture representation by data compression |
EP1279293A1 (en) * | 2000-01-21 | 2003-01-29 | Nokia Corporation | A motion estimation method and a system for a video coder |
US7085401B2 (en) * | 2001-10-31 | 2006-08-01 | Infowrap Systems Ltd. | Automatic object extraction |
JP2003274410A (en) * | 2002-03-13 | 2003-09-26 | Hitachi Ltd | Encoder and decoder, and encoding method for monitored video image |
AU2002950210A0 (en) * | 2002-07-11 | 2002-09-12 | Mediaware Solutions Pty Ltd | Mosaic construction from a video sequence |
KR20050097936A (en) * | 2003-01-10 | 2005-10-10 | 코닌클리케 필립스 일렉트로닉스 엔.브이. | Efficient predictive image parameter estimation |
US20080144716A1 (en) * | 2004-03-11 | 2008-06-19 | Gerard De Haan | Method For Motion Vector Determination |
US20060227865A1 (en) * | 2005-03-29 | 2006-10-12 | Bhaskar Sherigar | Unified architecture for inverse scanning for plurality of scanning scheme |
US7676081B2 (en) * | 2005-06-17 | 2010-03-09 | Microsoft Corporation | Image segmentation of foreground from background layers |
US20070025444A1 (en) * | 2005-07-28 | 2007-02-01 | Shigeyuki Okada | Coding Method |
WO2007093780A2 (en) * | 2006-02-13 | 2007-08-23 | Snell & Wilcox Limited | Method and apparatus for modifying a moving image sequence |
KR101366242B1 (en) * | 2007-03-29 | 2014-02-20 | 삼성전자주식회사 | Method for encoding and decoding motion model parameter, and method and apparatus for video encoding and decoding using motion model parameter |
JP5289440B2 (en) * | 2008-07-10 | 2013-09-11 | 三菱電機株式会社 | Image encoding device, image decoding device, image encoding method, and image decoding method |
US8031111B2 (en) * | 2008-10-03 | 2011-10-04 | Trimble Navigation Limited | Compact transmission of GPS information using compressed measurement record format |
US9100535B2 (en) * | 2008-10-22 | 2015-08-04 | Entropic Communications, Llc | Device and method for motion estimation and compensation |
JP5856143B2 (en) * | 2010-04-13 | 2016-02-09 | ジーイー ビデオ コンプレッション エルエルシー | Encoding spatial sampling of 2D information signals using subdivision |
EP2675163A1 (en) * | 2010-07-21 | 2013-12-18 | Dolby Laboratories Licensing Corporation | Reference processing using advanced motion models for video coding |
EP2697971B1 (en) * | 2011-04-14 | 2015-07-08 | Dolby Laboratories Licensing Corporation | Multiple color channel multiple regression predictor |
GB2493210B (en) * | 2011-07-29 | 2014-04-23 | Canon Kk | Method and device for error concealment in motion estimation of video data |
US10863170B2 (en) * | 2012-04-16 | 2020-12-08 | Nokia Technologies Oy | Apparatus, a method and a computer program for video coding and decoding on the basis of a motion vector |
US20130294513A1 (en) * | 2012-05-07 | 2013-11-07 | Qualcomm Incorporated | Inter layer merge list construction for video coding |
GB2509703B (en) * | 2013-01-04 | 2016-09-14 | Canon Kk | Method and apparatus for encoding an image into a video bitstream and decoding corresponding video bitstream using enhanced inter layer residual prediction |
JP2014143530A (en) * | 2013-01-23 | 2014-08-07 | Sony Corp | Information processing unit, information processing method, and imaging apparatus |
WO2014120368A1 (en) * | 2013-01-30 | 2014-08-07 | Intel Corporation | Content adaptive entropy coding for next generation video |
KR102087073B1 (en) * | 2013-04-29 | 2020-03-10 | 팅크웨어(주) | Image-processing Apparatus for Car and Method of Sharing Data Using The Same |
US9609343B1 (en) * | 2013-12-20 | 2017-03-28 | Google Inc. | Video coding using compound prediction |
WO2015115644A1 (en) * | 2014-02-03 | 2015-08-06 | 三菱電機株式会社 | Image encoding device, image decoding device, encoded stream conversion device, image encoding method, and image decoding method |
US10097851B2 (en) * | 2014-03-10 | 2018-10-09 | Euclid Discoveries, Llc | Perceptual optimization for model-based video encoding |
US9438910B1 (en) * | 2014-03-11 | 2016-09-06 | Google Inc. | Affine motion prediction in video coding |
JP6211737B1 (en) * | 2014-09-12 | 2017-10-11 | コーニンクレッカ フィリップス エヌ ヴェＫｏｎｉｎｋｌｉｊｋｅ Ｐｈｉｌｉｐｓ Ｎ．Ｖ． | Analyzing aortic valve calcification |
US10321150B2 (en) * | 2015-03-31 | 2019-06-11 | Realnetworks, Inc. | Motion vector selection and prediction in video coding systems and methods |
US10271064B2 (en) * | 2015-06-11 | 2019-04-23 | Qualcomm Incorporated | Sub-prediction unit motion vector prediction using spatial and/or temporal motion information |
WO2017087751A1 (en) * | 2015-11-20 | 2017-05-26 | Mediatek Inc. | Method and apparatus for global motion compensation in video coding system |
WO2017118409A1 (en) * | 2016-01-07 | 2017-07-13 | Mediatek Inc. | Method and apparatus for affine merge mode prediction for video coding system |
KR20170096088A (en) * | 2016-02-15 | 2017-08-23 | 삼성전자주식회사 | Image processing apparatus, image processing method thereof and recording medium |
RU2696551C1 (en) * | 2016-03-15 | 2019-08-02 | МедиаТек Инк. | Method and device for encoding video with compensation of affine motion |
US10225573B1 (en) * | 2017-01-31 | 2019-03-05 | Google Llc | Video coding using parameterized motion models |
-
2017
- 2017-10-31 WO PCT/US2017/059306 patent/WO2018169571A1/en active Application Filing
- 2017-12-12 US US15/838,748 patent/US10506249B2/en active Active
-
2019
- 2019-11-25 US US16/693,425 patent/US20200092575A1/en not_active Abandoned
-
2023
- 2023-11-28 US US18/521,182 patent/US20240098298A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20180270497A1 (en) | 2018-09-20 |
WO2018169571A1 (en) | 2018-09-20 |
US20200092575A1 (en) | 2020-03-19 |
US10506249B2 (en) | 2019-12-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11800136B2 (en) | Constrained motion field estimation for hardware efficiency | |
US20240098298A1 (en) | Segmentation-based parameterized motion models | |
US11115678B2 (en) | Diversified motion using multiple global motion models | |
US11647223B2 (en) | Dynamic motion vector referencing for video coding | |
US11102477B2 (en) | DC coefficient sign coding scheme | |
US20210021859A1 (en) | Same frame motion estimation and compensation | |
US10271062B2 (en) | Motion vector prediction through scaling | |
US10694205B2 (en) | Entropy coding of motion vectors using categories of transform blocks | |
US11025950B2 (en) | Motion field-based reference frame rendering for motion compensated prediction in video coding | |
US10582212B2 (en) | Warped reference motion vectors for video compression | |
WO2019036080A1 (en) | Constrained motion field estimation for inter prediction | |
US20190028714A1 (en) | Video coding using frame rotation | |
US10225573B1 (en) | Video coding using parameterized motion models | |
US10645417B2 (en) | Video coding using parameterized motion model | |
US10110914B1 (en) | Locally adaptive warped motion compensation in video coding | |
WO2023287417A1 (en) | Warped motion compensation with explicitly signaled extended rotations | |
WO2024081012A1 (en) | Inter-prediction with filtering |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MUKHERJEE, DEBARGHA;LIU, YUXIN;PARKER, SARAH;REEL/FRAME:065765/0114Effective date: 20171212 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |