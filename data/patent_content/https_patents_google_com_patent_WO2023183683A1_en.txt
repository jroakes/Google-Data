WO2023183683A1 - Generalized automatic speech recognition for joint acoustic echo cancellation, speech enhancement, and voice separation - Google Patents
Generalized automatic speech recognition for joint acoustic echo cancellation, speech enhancement, and voice separation Download PDFInfo
- Publication number
- WO2023183683A1 WO2023183683A1 PCT/US2023/062886 US2023062886W WO2023183683A1 WO 2023183683 A1 WO2023183683 A1 WO 2023183683A1 US 2023062886 W US2023062886 W US 2023062886W WO 2023183683 A1 WO2023183683 A1 WO 2023183683A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- training
- contextual
- encoder
- input
- noise
- Prior art date
Links
- 238000000926 separation method Methods 0.000 title abstract description 13
- 238000012549 training Methods 0.000 claims abstract description 228
- 238000012545 processing Methods 0.000 claims abstract description 99
- 238000000034 method Methods 0.000 claims abstract description 55
- 230000005236 sound signal Effects 0.000 claims abstract description 48
- 239000013598 vector Substances 0.000 claims abstract description 42
- 230000015654 memory Effects 0.000 claims description 44
- 230000008569 process Effects 0.000 claims description 28
- 230000006870 function Effects 0.000 claims description 12
- 238000004891 communication Methods 0.000 claims description 11
- 230000003595 spectral effect Effects 0.000 claims description 11
- 239000010410 layer Substances 0.000 description 11
- 238000004590 computer program Methods 0.000 description 8
- 230000003287 optical effect Effects 0.000 description 6
- 238000013528 artificial neural network Methods 0.000 description 5
- 238000001514 detection method Methods 0.000 description 5
- 230000004044 response Effects 0.000 description 5
- 238000011156 evaluation Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000002955 isolation Methods 0.000 description 3
- 230000003068 static effect Effects 0.000 description 3
- 230000001629 suppression Effects 0.000 description 3
- 238000013518 transcription Methods 0.000 description 3
- 230000035897 transcription Effects 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 230000003190 augmentative effect Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 239000000284 extract Substances 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- PXFBZOLANLWPMH-UHFFFAOYSA-N 16-Epiaffinine Natural products C1C(C2=CC=CC=C2N2)=C2C(=O)CC2C(=CC)CN(C)C1C2CO PXFBZOLANLWPMH-UHFFFAOYSA-N 0.000 description 1
- 230000005534 acoustic noise Effects 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 230000001364 causal effect Effects 0.000 description 1
- 238000013434 data augmentation Methods 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000002356 single layer Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000000844 transformation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/20—Speech recognition techniques specially adapted for robustness in adverse environments, e.g. in noise, of stress induced speech
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
- G10L2021/02082—Noise filtering the noise being echo, reverberation of the speech
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0272—Voice signal separating
Definitions
- This disclosure relates to generalized automatic speech recognition for joint acoustic echo cancellation, speech enhancement, and voice separation.
- ASR automatic speech recognition
- a joint ASR model may be trained to handle these conditions.
- the joint ASR model may not encounter all conditions occurring at the same time. Accordingly, training the joint ASR model with all conditions present is not practical.
- One aspect of the disclosure provides a computer-implemented method for training a generalized automatic speech recognition model for joint echo cancellation, speech enhancement, and voice separation that, when executed on data processing hardware, causes the data processing hardware to perform operations.
- the operations include receiving a plurality of training utterances paired with corresponding training contextual signals.
- the training contextual signals include a training contextual noise signal including noise prior to the corresponding training utterance, a training reference audio signal, and a training speaker vector including voice characteristics of a target speaker that spoke the corresponding training utterance.
- the operations also include training, using a contextual signal dropout strategy, a contextual frontend processing model on the training utterances to learn how to predict enhanced speech features.
- the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals during training of the contextual frontend processing model.
- Implementations of the disclosure may include one or more of the following optional features.
- the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with allzeroes.
- replacing the training reference audio signal with all zeroes includes replacing the training reference audio signal with an all-zero feature of a same length and feature dimension as the corresponding training utterance.
- replacing the training contextual noise signal includes replacing the training contextual noise signal with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance.
- replacing the training speaker vector includes replacing the training speaker vector with an all-zero feature with an all-zero vector.
- the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with a frame-level learned representation.
- the trained contextual frontend processing model includes a primary encoder, a noise context encoder, a cross-attention encoder, and a decoder.
- the primary encoder receives, as input, input speech features corresponding to a target utterance and generate, as output, a main input encoding.
- the noise context encoder receives, as input, a contextual noise signal including noise prior to the target utterance, and generate, as output, a contextual noise encoding.
- the cross-attention encoder receives, as input, the main input encoding generated as output from the primary encoder and the contextual noise encoding generated as output from the noise context encoder, and generates, as output, a cross-attention embedding.
- the decoder decodes the cross-attention embedding into enhanced input speech features corresponding to the target utterance.
- the primary encoder is further configured to receive, as input, reference features corresponding to a reference audio signal, and generate, as output, the main input encoding by processing the input speech features stacked with the reference features.
- the primary encoder is further configured to receive, as input, a speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and generate, as output, the main input encoding by combining the input speech features with the speaker embedding using feature-wise linear modulation (FiLM).
- the cross-attention encoder is further configured to receive, as input, the main input encoding modulated by a speaker embedding using feature-wise linear modulation (FiLM).
- the speaker embedding including voice characteristics of a target speaker that spoke the target utterance and process the main input encoding modulated by the speaker embedding and the contextual noise encoding to generate, as output, the cross-attention embedding.
- the primary encoder includes N modulated conformer blocks
- the context noise encoder includes N conformer blocks and executes in parallel with the primary encoder
- the cross-attention encoder includes M modulated cross-attention conformer blocks.
- the contextual frontend processing model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
- the spectral loss may be based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask.
- the ideal ratio mask is computed using reverberant speech and reverberant noise.
- the ASR loss is computed by receiving enhanced speech features predicted by the contextual frontend processing model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features, and computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- the system includes data processing hardware and memory hardware in communication with the data processing hardware.
- the memory hardware stores instructions that when executed on the data processing hardware cause the date processing hardware to perform operations including receiving a plurality of training utterances paired with corresponding training contextual signals.
- the training contextual signals include a training contextual noise signal including noise prior to the corresponding training utterance, a training reference audio signal, and a training speaker vector including voice characteristics of a target speaker that spoke the corresponding training utterance.
- the operations also include training, using a contextual signal dropout strategy, a contextual frontend processing model on the training utterances to learn how to predict enhanced speech features.
- the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals during training of the contextual frontend processing model.
- the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with all-zeroes.
- replacing the training reference audio signal with all zeroes includes replacing the training reference audio signal with an all-zero feature of a same length and feature dimension as the corresponding training utterance.
- replacing the training contextual noise signal includes replacing the training contextual noise signal with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance.
- replacing the training speaker vector includes replacing the training speaker vector with an all-zero feature with an all-zero vector.
- the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with a frame-level learned representation.
- the trained contextual frontend processing model includes a primary encoder, a noise context encoder, a cross-attention encoder, and a decoder.
- the primary encoder receives, as input, input speech features corresponding to a target utterance and generate, as output, a main input encoding.
- the noise context encoder receives, as input, a contextual noise signal including noise prior to the target utterance, and generate, as output, a contextual noise encoding.
- the cross-attention encoder receives, as input, the main input encoding generated as output from the primary encoder and the contextual noise encoding generated as output from the noise context encoder, and generates, as output, a cross-attention embedding.
- the decoder decodes the cross-attention embedding into enhanced input speech features corresponding to the target utterance.
- the primary encoder is further configured to receive, as input, reference features corresponding to a reference audio signal, and generate, as output, the main input encoding by processing the input speech features stacked with the reference features.
- the primary encoder is further configured to receive, as input, a speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and generate, as output, the main input encoding by combining the input speech features with the speaker embedding using feature-wise linear modulation (FiLM).
- FiLM feature-wise linear modulation
- the cross-attention encoder is further configured to receive, as input, the main input encoding modulated by a speaker embedding using feature-wise linear modulation (FiLM).
- FiLM feature-wise linear modulation
- the speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and process the main input encoding modulated by the speaker embedding and the contextual noise encoding to generate, as output, the cross-attention embedding.
- the primary encoder includes N modulated conformer blocks
- the context noise encoder includes N conformer blocks and executes in parallel with the primary encoder
- the cross-attention encoder includes M modulated cross-attention conformer blocks.
- the contextual frontend processing model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
- the spectral loss may be based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask.
- the ideal ratio mask is computed using reverberant speech and reverberant noise.
- the ASR loss is computed by receiving enhanced speech features predicted by the contextual frontend processing model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features, and computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- FIG. l is a schematic view of a system that includes a user communicating a spoken target utterance to a speech-enabled user device.
- FIG. 2 is a schematic view of a contextual frontend processing model of FIG.
- FIG. 3 is a schematic view of a modulated conformer block.
- FIG. 4 is a schematic view of a modulated conformer block architecture implemented by a cross-attention encoder of the contextual frontend processing model.
- FIG. 5 is a schematic view of an example training process for training a contextual frontend processing model.
- FIG. 6 is a schematic view of an example training process for jointly training a contextual frontend processing model and an automatic speech recognition model.
- FIG. 7 is an example flowchart of an example arrangement of operations for a method of automatic speech recognition using a contextual frontend processing model.
- FIG. 8 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
- ASR automatic speech recognition
- background interference can significantly deteriorate the ability of ASR systems to accurately recognize speech directed toward the ASR system.
- Background interference can be broadly classified into three groups: device echo; background noise; and competing speech. While separate ASR models may be trained to handle each of these background interference groups in isolation, the difficulty in maintaining multiple task/condition-specific ASR models and switching between the models on the fly during use is not practical.
- Device echo may correspond to playback audio output from devices, such as smart home speakers, whereby the playback audio is recorded as echo and can affect performance of a backend speech system, such as an ASR system.
- a backend speech system such as an ASR system.
- the playback audio contains audible speech, e g., a text-to-speech (TTS) response from a digital assistant.
- TTS text-to-speech
- AEC acoustic echo cancelation
- Background noise with non-speech characteristics is usually well handled using data augmentation strategies like multi-style training (MTR) of the ASR models.
- MTR multi-style training
- a room simulator is used to add noise to the training data, which is then carefully weighted with clean data during training to get a good balance in performance between clean and noisy conditions.
- SNR signal -to-noise ratio
- the training data for these ASR models typically covers various acoustic and linguistic use cases (e.g., voice search and video captioning), thereby making it challenging to simultaneously address harsher noise conditions.
- acoustic and linguistic use cases e.g., voice search and video captioning
- the ASR model must also perform well when one or more of the aforementioned groups of background interference (e.g., device echo; background noise; and competing speech) are missing from training examples.
- Implementations herein are directed toward training a contextual frontend processing model for improving robustness of ASR by jointly implementing acoustic echo cancellation (AEC), speech enhancement, and speech separation modules into a single model.
- a single joint model is practical from the standpoint that it is difficult, if not impossible, to know what class of background interference to address ahead of time, particularly in a streaming ASR setting.
- the contextual frontend processing model includes a contextual enhancement neural network (CENN) capable of optionally making use of three different types of side contextual inputs: a reference signal associated with playback audio; noise context; and a speaker embedding representing voice characteristics of a target speaker of interest.
- CENN contextual enhancement neural network
- Implementations herein are more specifically directed toward using a contextual signal dropout strategy for training the contextual frontend processing model to improve performance of the model during inference when one or more contextual inputs are missing.
- the reference signal associated with the playback audio is necessary for providing echo cancellation while the noise context is useful for speech enhancement.
- the speaker embedding (when available) representing the voice characteristics of the target speaker is not only critical for speech separation, but is also helpful for echo cancelation and speech enhancement.
- the noise context i.e., a few seconds of audio before the target utterance to be recognized, carries useful information about the acoustic context.
- a system 100 includes a user 10 communicating a spoken target utterance 12 to a speech-enabled user device 110 (also referred to as a device 110 or a user device 110) in a speech environment.
- a speech-enabled user device 110 also referred to as a device 110 or a user device 110
- the user 10 may speak the target utterance 12 as a query or a command to solicit a response from the device 110.
- the device 110 is configured to capture sounds from one or more users 10, 11 within the speech environment.
- the audio sounds may refer to a spoken utterance 12 by the user 10 that functions as an audible query, a command for the device 110, or an audible communication captured by the device 110.
- Speech-enabled systems of the device 110 or associated with the device 110 may field the query for the command by answering the query and/or causing the command to be performed.
- the background interference may interfere with the ability of a backend speech system 180 to process the target utterance 12 that specifies the query or command for the device 110.
- the background interference may include one or more of a device echo corresponding to playback audio 154 (also referred to as a reference audio signal 154) output from the user device (e.g., a smart speaker) 110, competing speech 13 such as utterances other than the target utterance 12 spoken by one or more other users 111 that are not directed toward the device 110, and background noise with non-speech characteristics.
- Implementations herein employ a contextual frontend processing model 200 (also referred to as a model 200) that executes on the device 110 and is configured to receive, as input, input speech features corresponding to the target utterance 12 and one or more contextual input features 213, 214, 215, and generate, as output, enhanced input speech features 250 corresponding to the target utterance 12 by processing the input speech features 212 and the one or more contextual input features 213, 214, 215.
- the model 200 may be trained using a contextual signal dropout strategy to improve performance of the model 200 during inference when one or more of the contextual input features 213, 214, 215 is missing.
- a backend speech system 180 may then process the enhanced input speech features 250 to generate an output 182.
- the contextual frontend processing model 200 effectively removes the presence of background interference recorded by the device 110 when the user 10 spoke the target utterance 12 such that the enhanced input speech features 250 provided to the backend speech system 180 convey the speech (i . e. , target utterance 12) that was intended for the device 110 so that the output 182 generated by the backend speech system 180 is not degraded by the background interference.
- the backend speech system 180 includes an ASR system 190 that employs an ASR model 192 to process the enhanced input speech features 250 to generate a speech recognition result (e.g., transcription) for the target utterance 12.
- the ASR system 190 may further include a natural language understanding (NLU) module (not shown) that performs semantic interpretation on the transcription of the target utterance 12 to identify the query/command directed toward the device 110.
- NLU natural language understanding
- the output 182 from the backend speech system 180 may include the transcription and/or instructions to fulfill the query/command identified by the NLU module.
- the backend speech system 180 may additionally or alternatively include a hotword detection model (not shown) configured to detect whether or not the enhanced input speech features 250 include a presence of one or more hotwords/warm words the hotword detection model is trained to detect.
- the hotword detection model may output a hotword detection score indicating a likelihood that the enhanced input speech features 250 corresponding to the target utterance 12 include a particular hotword/warm word. Detection of a hotword may trigger a wake-up process that causes the device 110 to wake-up from a sleep state. For instance, the device 110 may wake-up and process the hotword and/or one or more terms preceding/foll owing the hotword.
- the background speech system 180 includes an audio or audio-video calling application (e.g., a video conferencing application).
- the enhanced input speech features 250 corresponding to the target utterance 12 are used by the audio or audio-video calling application to filter the voice of the target speaker 10 for communications to recipients during an audio or audio-video communication session.
- the background speech system 180 may additionally or alternatively include a speaker identification model configured to perform speaker identification using the enhanced input speech features 250 to identify the user 10 that spoke the target utterance 12.
- the device 110 captures a noisy audio signal 202 (also referred to audio data) of the target utterance 12 spoken by the user 10 in the presence of background interference emanating from one or more sources other than the user 10.
- the device 110 may correspond to any computing device associated with the user 10 and capable of receiving noisy audio signals 202.
- Some examples of user devices 110 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, and internet of things (loT) devices, smart speakers, etc.
- the device 110 includes data processing hardware 112 and memory hardware 114 in communication with the data processing hardware 112 and storing instructions, that when executed by the data processing hardware 112, cause the data processing hardware 112 to perform one or more operations.
- the contextual frontend processing model 200 may execute on the data processing hardware 112.
- the backend speech system 180 executes on the data processing hardware 112.
- the device 110 includes one or more applications (i.e., software applications) where each application may utilize enhanced input speech features 250 generated by the contextual frontend processing model 200 to perform various functions within the application.
- the device 110 includes an assistant application configured to communicate synthesized playback audio 154 to the user 10 to assist the user 10 with various tasks.
- the device 110 further includes an audio subsystem with an audio capturing device (e.g., a microphone) 116 for capturing and converting spoken utterances 12 within the speech environment into electrical signals and a speech output device (e.g., a speaker) 118 for communicating an audible audio signal (e g., a synthesized playback signal 154 from the device 110).
- an audio capturing device e.g., a microphone
- a speech output device e.g., a speaker
- an audible audio signal e.g., a synthesized playback signal 154 from the device 110.
- the device 110 implements a single audio capturing device 116 in the example shown, the device 110 may implement an array of audio capturing devices 116 without departing from the scope of the present disclosure, whereby one or more audio capturing devices 116 in the array may not physically reside on the device 110, but be in communication with the audio subsystem (e.g., peripherals of the device 110).
- the device 110 may correspond to
- the device 110 is configured to communicate with a remote system 130 via a network (not shown).
- the remote system 130 may include remote resources 132, such as remote data processing hardware 134 (e.g., remote servers or CPUs) and/or remote memory hardware 136 (e.g., remote databases or other storage hardware).
- the device 110 may utilize the remote resources 132 to perform various functionality related to speech processing and/or synthesized playback communication.
- the contextual frontend processing model 200 and the backend speech system 180 may reside on the device 110 (referred to as on-device systems) or reside remotely (e.g., reside on the remote system 130), but in communication with the device 110.
- one or more backend speech systems 180 reside locally or on-device while one or more other backend speech systems 180 reside remotely.
- one or more backend speech systems 180 leveraging the enhanced input speech features 250 output from the contextual frontend processing model 200 may be local or remote in any combination.
- the system 180 may reside in the remote system 130.
- the device 110 may support the size or the processing requirements of one or more systems 180
- the one or more systems 180 may reside on the device 110 using the data processing hardware 112 and/or the memory hardware 114.
- the one or more of the systems 180 may reside on both locally/on-device and remotely.
- a backend speech system 180 may default to execute on the remote system 130 when a connection between the device 110 and remote system 130 is available, but when the connection is lost or unavailable, the system 180 instead executes locally on the device 110.
- the device 110 or a system associated with the device 110 identifies text that the device 110 will communicate to the user 10 as a response to a query spoken by the user 10.
- the device 110 may then use a text-to-speech (TTS) system to convert the text into corresponding synthesized playback audio 154 for the device 110 to communicate to the user 10 (e.g., audibly communicate to the user 10) as the response to the query.
- TTS text-to-speech
- the TTS system communicates the synthesized playback audio 154 to the device 110 to allow the device 110 to output the synthesized playback audio 154.
- the device 110 outputs the synthesized playback audio 154 of “today is sunny” at a speaker 118 of the device 110 responsive to the user 10 providing a spoken query for today’s weather forecast.
- the synthesized playback audio 154 when the device 110 outputs the synthesized playback audio 154, the synthesized playback audio 154 generates an echo 156 captured by the audio capturing device 116.
- the synthesized playback audio 154 corresponds to a reference audio signal. While synthesized playback audio 154 depicts a reference audio signal in the example of FIG. 1, the reference audio signal may include other types of playback audio 154 including media content output from the speaker 118 or a communication from a remote user the user 10 is conversing with (e.g., voice over IP call or video conferencing call) through the device 110.
- the audio capturing device 116 may also be simultaneously capturing the target utterance 12 spoken by the user 10 that includes a follow-up query inquiring more about the weather, by stating “what about tomorrow?”
- FIG. 1 depicts that, as the device 110 outputs the synthesized playback audio 154, the user 10 inquires more about the weather, in a spoken utterance 12 to the device 110, by stating “what about tomorrow?”
- the spoken utterance 12 and the echo 156 are both captured at the audio capturing device 116 simultaneously to form the noisy audio signal 202.
- the audio signal 202 includes an overlapped audio signal where some portion of the target utterance 12 spoken by the user 10 overlaps with some portion of the reference audio signal (e.g., synthesized playback audio) 154 output from the speaker 118 of the device 110.
- the reference audio signal e.g., synthesized playback audio
- competing speech 13 spoken by another user 11 in the environment may also be captured by the audio capturing device 116 and contribute to background interference that overlaps with the target utterance 12.
- the backend speech system 180 may have issues processing the target utterance 12 corresponding to the follow-up weather query “what about tomorrow?” in the noisy audio signal 202 due to the presence of the background interference attributed to at least one of the playback audio 154, competing speech 13, or non-speech background noise interfering with target utterance 12.
- the contextual frontend processing model 200 is employed to improve robustness of the backend speech system 180 by jointly implementing acoustic echo cancellation (AEC), speech enhancement, and speech separation models/modules into a single model.
- AEC acoustic echo cancellation
- the single model 200 uses the reference signal 154 that is being played back by the device as an input to the model 200. It is assumed that the reference signal 154 is temporally aligned with the target utterance 12, and is of the same length.
- a feature extractor (not shown) extracts reference features 214 corresponding to the reference audio signal 154.
- the reference features 214 may include log Mel-fdterbank energy (LFBE) features of the reference audio signal 154.
- the feature extractor may extract input speech features 212 corresponding to the target utterance 12.
- the input speech features 212 may include LFBE features.
- the input speech features 212 may be stacked with the reference features 214 and provided as input to a primary encoder 210 (FIG. 2) of the single model 200 to perform AEC.
- a primary encoder 210 FIG. 2
- an all-zero reference signal may be used such that only the input speech features 212 are received as input to the primary encoder 210.
- the single model 200 may additionally perform speech enhancement in parallel with AEC by applying noise context modeling where the single model 200 processes a contextual noise signal 213 associated with a predetermined duration of noise segments captured by the audio capturing device 116 prior to the target utterance 12 spoken by the user 10.
- the predetermined duration includes six (6) seconds of noise segments.
- the contextual noise signal 213 provides noise context
- the contextual noise signal 213 includes LFBE features of the noise context signal for use as contextual information.
- the single model 200 may additionally perform target speaker modeling for speech separation jointly with AEC and speech enhancement.
- a speaker embedding 215 is received as input by the single model 200.
- the speaker embedding 215 may include voice characteristics of the target speaker 10 that spoke the target utterance 12.
- the speaker embedding 215 may include a d-vector.
- the speaker embedding 215 is computed using a text-independent speaker identification (TI-SID) model trained with a generalized end-to-end extended-set softmax loss.
- the TI-SID may include three long short-term memory (LSTM) layers with 768 nodes and a projection size of 256. The output of the final frame of the last LSTM layer is then linearly transformed to the final 256-dimension d-vector.
- LSTM long short-term memory
- each target utterance may be paired with a separate “enrollment” utterance from the same speaker.
- the enrollment utterance may be randomly selected from a pool of available utterances of the target speaker.
- the d-vectors are then computed on the enrollment utterance.
- the enrollment utterances are usually obtained via a separate offline process.
- FIG. 2 shows the contextual frontend processing model 200 of FIG. 1.
- the contextual frontend processing model 200 uses a modified version of a conformer neural network architecture that combines convolution and self-attention to model short-range and long-range interactions.
- the model 200 includes a primary encoder 210, a noise context encoder 220, a cross-attention encoder 400, and a decoder 240.
- the primary encoder 210 may include N modulated conformer blocks.
- the noise context encoder 220 may include N conformer blocks.
- the cross-attention encoder 230 may include M modulated cross-attention conformer blocks.
- the primary and noise context encoders 210, 220 may execute in parallel. As used herein, each conformer block may use local, causal self-attention to allow for streaming capabilities.
- the primary encoder 210 may be configured to receive, as input, input speech features 212 corresponding to the target utterance, and generate, as output, a main input encoding 218.
- the primary encoder 210 is configured to receive the input speech features 212 stacked with reference features 214 corresponding to the reference audio signal as input and generate the main input encoding by processing the input speech features 212 stacked with the reference features 214.
- the input speech features and the reference features may each include a respective sequence of LFBE features.
- the primary encoder 210 may be further configured to receive, as input, the speaker embedding 215 (i.e., when available) including the voice characteristics of the target speaker (i.e., the user) 10 that spoke the target utterance 12, and generate, as output, the main input encoding 218 by combining the input speech features 212 (or the input speech features stacked with the reference features 214) using a feature-wise linear modulation (FiLM) layer 310 (FIG. 3).
- FIG. 3 provides an example modulated conformer block 320 employed by the primary encoder 210.
- the speaker embedding 215 (e.g., d- vector) is combined with the input speech features 212 (or stack of input speech and reference features 214) using the FiLM layer 310 to generate an output 312.
- FiLM permits the primary encoder 210 to adjust its encoding based on the speaker embedding 215 of the target speaker 10.
- a residual connection 314 is added after the FiLM layer 310 to combine the input speech features 212 (or the input speech features 212 stacked with the reference features 214) with the output 312 of the FiLM layer 310 to generate modulated input features 316 as input for the conformer block 320 in order to ensure that the architecture can perform well when the speaker embedding 215 is absent.
- h ( ) and r (•) are affine transformations.
- FFN, Conv, and MHSA stand for feed-forward module, convolution module, and multi-headed self-attention module, respectively.
- Eq. 1 shows the feature-wise linear modulation (FiLM) layer 310, with the residual connection.
- the noise context encoder 220 is configured to receive, as input, a contextual noise signal 213 that includes the noise prior to the target utterance, and generate, as output, a contextual noise encoding 222.
- the contextual noise signal 213 may include LFBE features of the contextual noise signal.
- the noise context encoder 220 unlike the primary and cross-attention encoders 210, 400, includes standard conformer blocks without modulation by the speaker embedding 215.
- the noise context encoder 220 does not modulate the contextual noise signal 213 with the speaker embedding 215 since the contextual noise signal 213 is associated with acoustic noise context prior to the target utterance 12 is spoken, and thus, is assumed to contain information that should be passed forward to the cross-attention encoder 400 to aid with noise suppression.
- the cross-attention encoder 400 may be configured to receive, as input, the main input encoding 218 generated as output from the primary encoder 210 and the contextual noise encoding 222 generated as output from the noise context encoder 220, and generate, as output, a cross-attention embedding 480. Thereafter, the decoder 240 is configured to decode the cross-attention embedding 480 into the enhanced input speech features 250 corresponding to the target utterance 12.
- the contextual noise encoding 222 may correspond to an auxiliary input.
- the decoder 240 may include a simple projection decoder having a single layer, frame-wise fully connected network with sigmoid activation.
- the cross-attention encoder 400 may employ a respective set of M modulated conformer blocks that each receive, as input, the main input encoding 218 modulated by the speaker embedding 215 using FiLM as described in FIG. 3 and the contextual noise encoding 222 output from the noise context encoder 220.
- the crossattention encoder 400 first independently processes the modulated input 218 and the auxiliary input 222 using half feed-forward nets 402, first residual connections 404, convolutional blocks 406, and second residual connections 408. Specifically, the modulated input 218 is processed by a half feed-forward net 402a, which generates an output 403a.
- a first residual connection 404a combines the modulated input 218 with the output 403 a of the half-feedforward net 402a to generate modulated input features 405a.
- the modulated input features 405a are input to a convolution block 406a, which generates a convolutional output 407a.
- a second residual connection 408a combines the convolutional output 407a of the convolution block 406a with the modulated input features 405a to generate an output including a query vector 409a.
- the auxiliary input 222 is processed by a half feed-forward net 402b, which generates an output 403b.
- a first residual connection 404b combines the auxiliary input 222 with the output 403b of the half-feedforward net 402b to generate modulated input features 405b.
- the modulated input features 405b are input to a convolution block 406b, which generates a convolutional output 407b.
- a second residual connection 408b combines the convolutional output 407b of the convolution block 406b with the modulated input features 405b to generate an output including a first key vector 409b and a first value vector 409c.
- a multi -head cross attention (MHCA) module 410 receives, as input, the query vector 409a, the first key vector 409b, and the first value vector 409c, and summarizes these vectors 409a-c to generate a noise summary 412.
- the role of the MHCA module 410 is to summarize noise context separately for each input frame that is to be enhanced.
- the noise summary 412 output by the MHCA module 410 is then merged with the query vector 409a using a FiLM layer 420, which generates an FiLM output 422.
- a multi-head self attention (MHSA) layer 430 receives the FiLM output 422 as input and merges the FiLM output 422 with the query vector 409a to generate an attention output 432.
- a third residual connection 434 receives the query vector 409a and the attention output 432 and combines the query vector 409a and the attention output 432 to generate a residual output 436.
- a feed forward module 440 then receives the residual output 436 of the third residual connection 434 as input and generates a features output 442.
- a fourth residual connection 444 combines the features output 422 with the residual output 436 of the third residual output 434 to generate merged input features 446.
- the merged input features 446 are then processed as input by a layernorm 450, which to a convolution block 406b, which generates a cross-attention embedding 480.
- the cross attention encoder 400 generates, as an output, the cross-attention embedding 480, which is passed on to the next layer of the M modulated conformer blocks, along with the d-vector m, and the encoded noise context n.
- inputs are modulated by each of the M conformer blocks by both the speaker embedding 215 associated with the target speaker and the noise context encoding 222.
- FIG. 5 shows an example training process 500 for training the contextual frontend processing model 200 to generate enhanced input speech features 250 when one or more of the contextual input features 213, 214, 215 are not present.
- the training process 500 may execute on the remote system 130 of FIG. 1. As shown, the training process obtains one or more training data sets 520 stored in a data store 510 and trains the contextual frontend processing model 200 on the training data sets 520.
- the data store 510 may reside on the memory hardware 136 of the remote system 130.
- Each training data set 520 includes a plurality of training examples, 530, 530a-n, where each training example 530 may include a training utterance 532 paired with corresponding training contextual signals 534, 534a-c.
- the training contextual signals 534 include a training contextual noise signal 534a including noise prior to the corresponding training utterance 532, a training reference audio signal 534b, and a training speaker vector 534c including voice characteristics of a target speaker that spoke the corresponding training utterance 532.
- the contextual frontend processing model 200 may not receive all of the contextual input features 213, 214, 215 at the same time. Training the contextual frontend processing model 200 with one or more missing training contextual signals 534 encourages the contextual frontend processing model 200 to utilize alternates in the contextual input features 213, 214, 215 rather than overly rely on the most relevant of the contextual input features 213, 214, 215. As a result, the contextual frontend processing model 200 can accurately predict enhanced input speech features 250 when one or more of the contextual input features 213, 214, 215 is not present. In order to keep the contextual frontend processing model 200 static, any missing training contextual signals 534 still need to be input to the contextual frontend processing model 200 in some manner.
- the training process 500 may also utilize a signal dropout model 550.
- the signal dropout model 550 receives the training contextual signals 534 as input from the data store 510 and, using a contextual signal dropout strategy, drops out one or more of the training contextual signals 534 prior to training the contextual frontend processing model 200.
- the contextual signal dropout strategy of the signal dropout model 550 may include a predetermined probability (e g., 50%, 20%, etc.,) to drop out each of the training contextual signals 534, where the same predetermined probability is used for each of the training contextual signals 534.
- the signal dropout model 550 may, using the contextual signal dropout strategy, drop out the training contextual noise signal 534a at a predetermined probability of 50%, the training reference audio signal 534b at a predetermined probability of 50%, and the training speaker vector 534c at a predetermined probability of 50%.
- the signal dropout model 550 may, using the contextual signal dropout strategy, drop out the training contextual noise signal 534a at a predetermined probability of 20%, the training reference audio signal 534b at a predetermined probability of 20%, and the training speaker vector 534c at a predetermined probability of 20%.
- the signal dropout model 550 may trim the length of the training contextual noise signal 534a to include noise prior to the corresponding training utterance 532 with a uniformly distributed length of zero to six (0-6) seconds.
- the signal dropout model 550 implements the signal dropout strategy and trims the training contextual noise signal 534a concurrently. For example, for a given training example 530, even if the signal dropout model 550 does not drop out the training contextual noise signal 534a, the signal dropout model 550 may still trim the length of the training contextual noise signal 534a.
- the signal dropout model 550 uses the signal dropout strategy to, based on the predetermined probability, drop out each training contextual signal 534 by replacing the corresponding training contextual signal 534 with all-zeroes.
- the signal dropout model 550 may replace the training contextual noise signal 534a with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance 532.
- the signal dropout strategy includes creating an all-zero feature with a length of six (6) seconds, and the same dimension as the LFBE features.
- the signal dropout model 550 may replace the training reference audio signal 534b with an all-zero feature of a same length and feature dimension as the corresponding training utterance 532.
- the feature dimension of the all-zero training reference audio signal 534b corresponds to the LFBE features of the training reference audio signal 534b if the signal dropout strategy had not dropped out the training reference audio signal 534b.
- the signal dropout model 550 using the signal dropout strategy, may replace the training speaker vector 534c with an all-zero feature with an allzero vector.
- the training speaker vector 534c is replaced with a 256-dimensional all-zero vector.
- the signal dropout model 550 uses the signal dropout strategy to, based on the predetermined probability, drop out each training contextual signal 534 by replacing the corresponding training contextual signal 534 with a frame-level learned representation.
- the signal dropout model 550 receives the training contextual signals 534a-c as input and, using the predetermined probability of the contextual signal dropout strategy, drops out the training reference audio signal 534b by replacing the training reference audio signal 534b with an all-zero feature of a same length and feature dimension as the corresponding training utterance 532.
- the contextual frontend processing model 200 is only trained on the training contextual signals 534a, 534c, which approximates a condition the model 200 may encounter during inference where the contextual input features 213, 214, 215 only include a contextual noise signal 213 and a speaker embedding 215.
- the training utterance 532 and the training contextual signals 534 including the training reference audio signal 534b replaced with the all-zero feature and dimension to simulate the training reference audio signal 534b as missing are provided to train the contextual frontend processing model 200.
- the contextual frontend processing model 200 receives, as input, the training utterance 532 and the training contextual signals 534 simulating the training reference audio signal 534b as missing and generates an output prediction
- the output prediction y r includes enhanced input speech features 250, which is tested for its accuracy.
- the contextual frontend processing model 200 is additionally trained using the output prediction for the previous time-step y r -i.
- FIG. 6 shows an example training process 600 for computing ASR loss 640 when the contextual frontend processing model 200 is trained j ointly with the ASR model 192.
- an encoder 620 of the ASR model 192 is used for computing the loss.
- the ASR loss 640 is computed as the 12 distance between the outputs of the ASR encoder 620 for target features 540 of the training utterance 532 and the enhanced input speech features 250.
- the ASR encoder 620 is not updated during the training process 600.
- the training process 600 computes the ASR loss 640 by generating, using the ASR encoder 620 of the ASR model 192 configured to receive enhanced input speech features 250 predicted by the contextual frontend processing model 200 for a training utterance 532 as input, predicted outputs 622 of the ASR encoder 620 for the enhanced input speech features 250, and generating, using the ASR encoder 620 configured to receive target speech features 540 for the training utterance 532 as input, target outputs 624 of the ASR encoder 620 for the target speech features 540.
- the predicted outputs 622 for the enhanced input speech features 250 and the target outputs 624 for the target speech features 540 may each include respective sequences of LFBE features.
- the training process 600 via a loss module 630, computes the ASR loss 640 based on the predicted outputs 622 of the ASR encoder 620 for the enhanced input speech features 250 and the target outputs 624 of the ASR encoder 620 for the target speech features 540.
- the goal of using the ASR loss 640 is to make enhancements to the contextual frontend processing model 200 to be more attuned to the ASR model 192, which is critical for getting the best performance out of the contextual frontend processing model 200.
- the ASR model 192 is decoupled from the contextual frontend processing model 200, thereby allowing each to be trained and deployed independent of each other.
- the contextual frontend processing model 200 is trained jointly with the ASR model 192 of the backend automatic speech recognition system 180 using a spectral loss and the ASR loss 640.
- the training target 540 for training the contextual frontend processing model 200 uses ideal ratio mask (IRM). IRMs are computed using reverberant speech and reverbant noise based on an assumption that speech and noise are uncorrelated in Mel spectral space as follows.
- X and N are the reverberant speech and reverberant noise Mel spectrograms, respectively, t and c, represent time and Mel frequency bin indices.
- the choice to estimate IRMs is based on the targets being bounded between [0, 1], simplifying the estimation process.
- the ASR model used for evaluation may be trained on real and simulated reverberant data, resulting in a trained ASR model that is relatively robust to reveberant speech. Therefore, IRMs derived using reverberant speech as the target still provide substantial gains in performance.
- the spectral loss during training are computed based LI and L2 losses between the IRM and estimated IRM, M as follows.
- the estimated IRM is scaled and floored to reduce speech distortion at the expense of reduced noise suppression. This is especially important, since the ASR model 192 is sensitive to speech distortions and non-linear frontend processing, which is one of the main challenges in improving performance of robust ASR models using enhancement frontends.
- the enhanced feature is derived as follows.
- Y is the noisy Mel spectrogram
- X is an estimate of clean Mel spectrogram
- a and P are exponential mask scalars, and mask floor.
- a is set 0.5
- P is set to 0.01 .
- the enhanced features may be log-compressed, i.e. log(X), and passed to the ASR model 192 for evaluation.
- FIG. 7 includes a flowchart of an example arrangement of operations for a method 700 of training a generalized automatic speech recognition model using a contextual frontend processing model 200.
- the method 700 includes receiving a plurality of training utterances 532 paired with corresponding training contextual signals 534, 534a-c.
- the training contextual signals 534 include a training contextual noise signal 534a including noise prior to the corresponding training utterance 532, a training reference audio signal 534b, and a training speaker vector 534c including voice characteristics of a target speaker that spoke the corresponding training utterance 532.
- the method 700 also includes, at operation 704, training, using a contextual signal dropout strategy, the contextual frontend processing model 200 on the training utterances 532 to learn how to predict enhanced input speech features 250.
- the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals 534 during training of the contextual frontend processing model 200 to simulate one or more of the training contextual signals 534 as being missing to teach the model 200 to learn how to robustly generate enhanced speech features 250 when any of the corresponding contextual input features are missing during inference.
- FIG. 8 is schematic view of an example computing device 800 that may be used to implement the systems and methods described in this document.
- the computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the disclosures described and/or claimed in this document.
- the computing device 800 includes a processor 810, memory 820, a storage device 830, a high-speed interface/controller 840 connecting to the memory 820 and high-speed expansion ports 850, and a low speed interface/controller 860 connecting to a low speed bus 870 and a storage device 830.
- Each of the components 810, 820, 830, 840, 850, and 860, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 810 e.g., data processing hardware 112, 134 of FIG.
- GUI graphical user interface
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 820 (e g., memory hardware 114, 136 of FIG. 1) stores information non-transitorily within the computing device 800.
- the memory 820 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s).
- the non-transitory memory 820 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 800.
- the storage device 830 is capable of providing mass storage for the computing device 800.
- the storage device 830 is a computer- readable medium.
- the storage device 830 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 820, the storage device 830, or memory on processor 810.
- the high speed controller 840 manages bandwidth-intensive operations for the computing device 800, while the low speed controller 860 manages lower bandwidth- intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 840 is coupled to the memory 820, the display 880 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 850, which may accept various expansion cards (not shown).
- the low-speed controller 860 is coupled to the storage device 830 and a low-speed expansion port 890.
- the low-speed expansion port 890 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 800 may be implemented in a number of different forms, as shown in the figure For example, it may be implemented as a standard server 800a or multiple times in a group of such servers 800a, as a laptop computer 800b, or as part of a rack server system 800c.
- Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a software application may refer to computer software that causes a computing device to perform a task.
- a software application may be referred to as an “application,” an “app,” or a “program.”
- Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- the non-transitory memory may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by a computing device.
- the non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory.
- nonvolatile memory examples include, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs).
- volatile memory examples include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- the processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input
Abstract
A method (700) for training a generalized automatic speech recognition model for joint acoustic echo cancellation, speech enhancement, and voice separation includes receiving a plurality of training utterances (532) paired with corresponding training contextual signals (534, 534a-c). The training contextual signals include a training contextual noise signal including noise prior to the corresponding training utterance, a training reference audio signal, and a training speaker vector including voice characteristics of a target speaker that spoke the corresponding training utterance. The operations also include training, using a contextual signal dropout strategy, a contextual frontend processing model (200) on the training utterances to learn how to predict enhanced speech features (250). Here, the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals during training of the contextual frontend processing model.
Description
Generalized Automatic Speech Recognition for Joint Acoustic Echo Cancellation, Speech Enhancement, and Voice Separation
TECHNICAL FIELD
[0001] This disclosure relates to generalized automatic speech recognition for joint acoustic echo cancellation, speech enhancement, and voice separation.
BACKGROUND
[0002] Robustness of automatic speech recognition (ASR) systems has significantly improved over the years with the advent of neural network-based end-to-end models, large-scale training data, and improved strategies for augmenting training data.
Nevertheless, various conditions such as echo, harsher background noise, and competing speech significantly deteriorate performance of ASR systems. A joint ASR model may be trained to handle these conditions. However, in use, the joint ASR model may not encounter all conditions occurring at the same time. Accordingly, training the joint ASR model with all conditions present is not practical.
SUMMARY
[0003] One aspect of the disclosure provides a computer-implemented method for training a generalized automatic speech recognition model for joint echo cancellation, speech enhancement, and voice separation that, when executed on data processing hardware, causes the data processing hardware to perform operations. The operations include receiving a plurality of training utterances paired with corresponding training contextual signals. The training contextual signals include a training contextual noise signal including noise prior to the corresponding training utterance, a training reference audio signal, and a training speaker vector including voice characteristics of a target speaker that spoke the corresponding training utterance. The operations also include training, using a contextual signal dropout strategy, a contextual frontend processing model on the training utterances to learn how to predict enhanced speech features. Here, the contextual signal dropout strategy uses a predetermined probability to drop out each
of the training contextual signals during training of the contextual frontend processing model.
[00041 Implementations of the disclosure may include one or more of the following optional features. In some implementations, the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with allzeroes. In these implementations, replacing the training reference audio signal with all zeroes includes replacing the training reference audio signal with an all-zero feature of a same length and feature dimension as the corresponding training utterance. Additionally or alternatively, replacing the training contextual noise signal includes replacing the training contextual noise signal with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance. Additionally, in these implementations, replacing the training speaker vector includes replacing the training speaker vector with an all-zero feature with an all-zero vector. In some examples, the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with a frame-level learned representation. [0005] In some implementations, the trained contextual frontend processing model includes a primary encoder, a noise context encoder, a cross-attention encoder, and a decoder. The primary encoder receives, as input, input speech features corresponding to a target utterance and generate, as output, a main input encoding. The noise context encoder receives, as input, a contextual noise signal including noise prior to the target utterance, and generate, as output, a contextual noise encoding. The cross-attention encoder receives, as input, the main input encoding generated as output from the primary encoder and the contextual noise encoding generated as output from the noise context encoder, and generates, as output, a cross-attention embedding. The decoder decodes the cross-attention embedding into enhanced input speech features corresponding to the target utterance. In these implementations, the primary encoder is further configured to receive, as input, reference features corresponding to a reference audio signal, and generate, as output, the main input encoding by processing the input speech features stacked with the reference features. Alternatively, the primary encoder is further configured to receive, as input, a speaker embedding including voice characteristics of a
target speaker that spoke the target utterance, and generate, as output, the main input encoding by combining the input speech features with the speaker embedding using feature-wise linear modulation (FiLM). Additionally or alternatively, the cross-attention encoder is further configured to receive, as input, the main input encoding modulated by a speaker embedding using feature-wise linear modulation (FiLM). Here, the speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and process the main input encoding modulated by the speaker embedding and the contextual noise encoding to generate, as output, the cross-attention embedding. In some implementations, the primary encoder includes N modulated conformer blocks, the context noise encoder includes N conformer blocks and executes in parallel with the primary encoder, and the cross-attention encoder includes M modulated cross-attention conformer blocks.
[0006] In some examples, the contextual frontend processing model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss. In these examples, the spectral loss may be based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask. Here, the ideal ratio mask is computed using reverberant speech and reverberant noise. Additionally, in these examples, the ASR loss is computed by receiving enhanced speech features predicted by the contextual frontend processing model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features, and computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
[0007] Another aspect of the disclosure provides a system for training for a generalized automatic speech recognition model for joint echo cancellation, speech enhancement, and voice separation. The system includes data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that when executed on the data processing hardware cause
the date processing hardware to perform operations including receiving a plurality of training utterances paired with corresponding training contextual signals. The training contextual signals include a training contextual noise signal including noise prior to the corresponding training utterance, a training reference audio signal, and a training speaker vector including voice characteristics of a target speaker that spoke the corresponding training utterance. The operations also include training, using a contextual signal dropout strategy, a contextual frontend processing model on the training utterances to learn how to predict enhanced speech features. Here, the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals during training of the contextual frontend processing model.
[0008] This aspect may include one or more of the following optional features. In some implementations, the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with all-zeroes. In these implementations, replacing the training reference audio signal with all zeroes includes replacing the training reference audio signal with an all-zero feature of a same length and feature dimension as the corresponding training utterance. Additionally or alternatively, replacing the training contextual noise signal includes replacing the training contextual noise signal with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance. Additionally, in these implementations, replacing the training speaker vector includes replacing the training speaker vector with an all-zero feature with an all-zero vector. In some examples, the signal dropout strategy drops out each training contextual signal by replacing the corresponding contextual signal with a frame-level learned representation.
[0009] In some implementations, the trained contextual frontend processing model includes a primary encoder, a noise context encoder, a cross-attention encoder, and a decoder. The primary encoder receives, as input, input speech features corresponding to a target utterance and generate, as output, a main input encoding. The noise context encoder receives, as input, a contextual noise signal including noise prior to the target utterance, and generate, as output, a contextual noise encoding. The cross-attention encoder receives, as input, the main input encoding generated as output from the primary
encoder and the contextual noise encoding generated as output from the noise context encoder, and generates, as output, a cross-attention embedding. The decoder decodes the cross-attention embedding into enhanced input speech features corresponding to the target utterance. In these implementations, the primary encoder is further configured to receive, as input, reference features corresponding to a reference audio signal, and generate, as output, the main input encoding by processing the input speech features stacked with the reference features. Alternatively, the primary encoder is further configured to receive, as input, a speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and generate, as output, the main input encoding by combining the input speech features with the speaker embedding using feature-wise linear modulation (FiLM). Additionally or alternatively, the cross-attention encoder is further configured to receive, as input, the main input encoding modulated by a speaker embedding using feature-wise linear modulation (FiLM). Here, the speaker embedding including voice characteristics of a target speaker that spoke the target utterance, and process the main input encoding modulated by the speaker embedding and the contextual noise encoding to generate, as output, the cross-attention embedding. In some implementations, the primary encoder includes N modulated conformer blocks, the context noise encoder includes N conformer blocks and executes in parallel with the primary encoder, and the cross-attention encoder includes M modulated cross-attention conformer blocks.
[0010] In some examples, the contextual frontend processing model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss. In these examples, the spectral loss may be based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask. Here, the ideal ratio mask is computed using reverberant speech and reverberant noise. Additionally, in these examples, the ASR loss is computed by receiving enhanced speech features predicted by the contextual frontend processing model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features, and
computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
[0011] The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
DESCRIPTION OF DRAWINGS
[0012] FIG. l is a schematic view of a system that includes a user communicating a spoken target utterance to a speech-enabled user device.
[0013] FIG. 2 is a schematic view of a contextual frontend processing model of FIG.
1.
[0014] FIG. 3 is a schematic view of a modulated conformer block.
[0015] FIG. 4 is a schematic view of a modulated conformer block architecture implemented by a cross-attention encoder of the contextual frontend processing model. [0016] FIG. 5 is a schematic view of an example training process for training a contextual frontend processing model.
[0017] FIG. 6 is a schematic view of an example training process for jointly training a contextual frontend processing model and an automatic speech recognition model.
[0018] FIG. 7 is an example flowchart of an example arrangement of operations for a method of automatic speech recognition using a contextual frontend processing model.
[0019] FIG. 8 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
[0020] Like reference symbols in the various drawings indicate like elements.
DETAILED DESCRIPTION
[0021] Robustness of automatic speech recognition (ASR) systems has significantly improved over the years with the advent of neural network-based end-to-end models, large-scale training data, and improved strategies for augmenting training data.
Nevertheless, background interference can significantly deteriorate the ability of ASR
systems to accurately recognize speech directed toward the ASR system. Background interference can be broadly classified into three groups: device echo; background noise; and competing speech. While separate ASR models may be trained to handle each of these background interference groups in isolation, the difficulty in maintaining multiple task/condition-specific ASR models and switching between the models on the fly during use is not practical.
[0022] Device echo may correspond to playback audio output from devices, such as smart home speakers, whereby the playback audio is recorded as echo and can affect performance of a backend speech system, such as an ASR system. Particularly, degradation of performance of the backend speech system is especially severe if the playback audio contains audible speech, e g., a text-to-speech (TTS) response from a digital assistant. This problem is typically addressed via acoustic echo cancelation (AEC) techniques. A unique characteristic of AEC is that a reference signal corresponding to the playback audio is typically available and can be used for suppression.
[0023] Background noise with non-speech characteristics is usually well handled using data augmentation strategies like multi-style training (MTR) of the ASR models. Here, a room simulator is used to add noise to the training data, which is then carefully weighted with clean data during training to get a good balance in performance between clean and noisy conditions. As a result, large scale ASR models are robust to moderate levels of non-speech noise. However, background noise can still affect performance of backend speech systems in the presence of low signal -to-noise ratio (SNR) conditions. [0024] Unlike non-speech background noise, competing speech is quite challenging for ASR models that are trained to recognize a single speaker. Training ASR models with multi-talker speech can pose problems in itself, since it is hard to disambiguate which speaker to focus on during inference. Using models that recognize multiple speakers is also sub-optimal since it is hard to know ahead of time how many users to support. Furthermore, such multi-speaker models typically have degraded performance in singlespeaker settings, which is undesirable.
[0025] The three aforementioned classes of background interference have typically been addressed in isolation of one another, each using separate modeling strategies.
Speech separation has received a lot of attention in the recent literature using techniques like deep clustering, permutation invariant training, and using speaker embeddings. When using speaker embeddings, the target speaker of interest is assumed to be known a priori. Techniques developed for speaker separation have also been applied to remove non-speech noise, with modifications to the training data. AEC has also been studied in isolation or together in the presence of background noise. It is well known that improving speech quality does not always improve ASR performance since the distortions introduced by non-linear processing can adversely affect ASR performance. One way to mitigate discrepancies between an enhancement frontend initially processing incoming audio and the resulting ASR performance is to jointly train the enhancement frontend together with the backend ASR model.
[0026] Moreover, as the application of large scale multi-domain and multi -lingual ASR models continues to gain interest, the training data for these ASR models typically covers various acoustic and linguistic use cases (e.g., voice search and video captioning), thereby making it challenging to simultaneously address harsher noise conditions. As a result, it is often convenient to train and maintain separate frontend feature processing models capable of handling adverse conditions, without combining it with the backend ASR model. Furthermore, while various types of data for ASR models is available for training, the ASR model must also perform well when one or more of the aforementioned groups of background interference (e.g., device echo; background noise; and competing speech) are missing from training examples.
[0027] Implementations herein are directed toward training a contextual frontend processing model for improving robustness of ASR by jointly implementing acoustic echo cancellation (AEC), speech enhancement, and speech separation modules into a single model. A single joint model is practical from the standpoint that it is difficult, if not impossible, to know what class of background interference to address ahead of time, particularly in a streaming ASR setting. Specifically, the contextual frontend processing model includes a contextual enhancement neural network (CENN) capable of optionally making use of three different types of side contextual inputs: a reference signal associated with playback audio; noise context; and a speaker embedding representing voice
characteristics of a target speaker of interest. Implementations herein are more specifically directed toward using a contextual signal dropout strategy for training the contextual frontend processing model to improve performance of the model during inference when one or more contextual inputs are missing. As will become apparent, the reference signal associated with the playback audio is necessary for providing echo cancellation while the noise context is useful for speech enhancement. Additionally, the speaker embedding (when available) representing the voice characteristics of the target speaker is not only critical for speech separation, but is also helpful for echo cancelation and speech enhancement. For speech enhancement and separation, the noise context, i.e., a few seconds of audio before the target utterance to be recognized, carries useful information about the acoustic context. The CENN employs a respective neural network architecture configured to ingest each corresponding contextual side input to produce enhanced input speech features that may be passed to a backend speech system, such as, an ASR model that may process the enhanced input speech features to generate a speech recognition result for the target utterance. Notably, as the noise context and reference features are optional contextual side inputs, the noise context and reference features are assumed by the CENN to be respective uninformative silence signals when not available. [0028] Referring to FIG. 1, in some implementations, a system 100 includes a user 10 communicating a spoken target utterance 12 to a speech-enabled user device 110 (also referred to as a device 110 or a user device 110) in a speech environment. The user 10 (i.e., speaker of the utterance 12) may speak the target utterance 12 as a query or a command to solicit a response from the device 110. The device 110 is configured to capture sounds from one or more users 10, 11 within the speech environment. Here, the audio sounds may refer to a spoken utterance 12 by the user 10 that functions as an audible query, a command for the device 110, or an audible communication captured by the device 110. Speech-enabled systems of the device 110 or associated with the device 110 may field the query for the command by answering the query and/or causing the command to be performed.
[0029] Various types of background interference may interfere with the ability of a backend speech system 180 to process the target utterance 12 that specifies the query or
command for the device 110. As aforementioned, the background interference may include one or more of a device echo corresponding to playback audio 154 (also referred to as a reference audio signal 154) output from the user device (e.g., a smart speaker) 110, competing speech 13 such as utterances other than the target utterance 12 spoken by one or more other users 111 that are not directed toward the device 110, and background noise with non-speech characteristics. Implementations herein employ a contextual frontend processing model 200 (also referred to as a model 200) that executes on the device 110 and is configured to receive, as input, input speech features corresponding to the target utterance 12 and one or more contextual input features 213, 214, 215, and generate, as output, enhanced input speech features 250 corresponding to the target utterance 12 by processing the input speech features 212 and the one or more contextual input features 213, 214, 215. As described in greater detail below (e g., FIG. 5), the model 200 may be trained using a contextual signal dropout strategy to improve performance of the model 200 during inference when one or more of the contextual input features 213, 214, 215 is missing. A backend speech system 180 may then process the enhanced input speech features 250 to generate an output 182. Notably, the contextual frontend processing model 200 effectively removes the presence of background interference recorded by the device 110 when the user 10 spoke the target utterance 12 such that the enhanced input speech features 250 provided to the backend speech system 180 convey the speech (i . e. , target utterance 12) that was intended for the device 110 so that the output 182 generated by the backend speech system 180 is not degraded by the background interference.
[0030] In the example shown, the backend speech system 180 includes an ASR system 190 that employs an ASR model 192 to process the enhanced input speech features 250 to generate a speech recognition result (e.g., transcription) for the target utterance 12. The ASR system 190 may further include a natural language understanding (NLU) module (not shown) that performs semantic interpretation on the transcription of the target utterance 12 to identify the query/command directed toward the device 110. As such, the output 182 from the backend speech system 180 may include the transcription and/or instructions to fulfill the query/command identified by the NLU module.
[0031] The backend speech system 180 may additionally or alternatively include a hotword detection model (not shown) configured to detect whether or not the enhanced input speech features 250 include a presence of one or more hotwords/warm words the hotword detection model is trained to detect. For instance, the hotword detection model may output a hotword detection score indicating a likelihood that the enhanced input speech features 250 corresponding to the target utterance 12 include a particular hotword/warm word. Detection of a hotword may trigger a wake-up process that causes the device 110 to wake-up from a sleep state. For instance, the device 110 may wake-up and process the hotword and/or one or more terms preceding/foll owing the hotword. [0032] In additional examples, the background speech system 180 includes an audio or audio-video calling application (e.g., a video conferencing application). Here, the enhanced input speech features 250 corresponding to the target utterance 12 are used by the audio or audio-video calling application to filter the voice of the target speaker 10 for communications to recipients during an audio or audio-video communication session. The background speech system 180 may additionally or alternatively include a speaker identification model configured to perform speaker identification using the enhanced input speech features 250 to identify the user 10 that spoke the target utterance 12.
[0033] In the example shown, the device 110 captures a noisy audio signal 202 (also referred to audio data) of the target utterance 12 spoken by the user 10 in the presence of background interference emanating from one or more sources other than the user 10. The device 110 may correspond to any computing device associated with the user 10 and capable of receiving noisy audio signals 202. Some examples of user devices 110 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, and internet of things (loT) devices, smart speakers, etc. The device 110 includes data processing hardware 112 and memory hardware 114 in communication with the data processing hardware 112 and storing instructions, that when executed by the data processing hardware 112, cause the data processing hardware 112 to perform one or more operations. The contextual frontend processing model 200 may execute on the data
processing hardware 112. In some examples, the backend speech system 180 executes on the data processing hardware 112.
[00341 In some examples, the device 110 includes one or more applications (i.e., software applications) where each application may utilize enhanced input speech features 250 generated by the contextual frontend processing model 200 to perform various functions within the application. For instance, the device 110 includes an assistant application configured to communicate synthesized playback audio 154 to the user 10 to assist the user 10 with various tasks.
[0035] The device 110 further includes an audio subsystem with an audio capturing device (e.g., a microphone) 116 for capturing and converting spoken utterances 12 within the speech environment into electrical signals and a speech output device (e.g., a speaker) 118 for communicating an audible audio signal (e g., a synthesized playback signal 154 from the device 110). While the device 110 implements a single audio capturing device 116 in the example shown, the device 110 may implement an array of audio capturing devices 116 without departing from the scope of the present disclosure, whereby one or more audio capturing devices 116 in the array may not physically reside on the device 110, but be in communication with the audio subsystem (e.g., peripherals of the device 110). For example, the device 110 may correspond to a vehicle infotainment system that leverages an array of microphones positioned throughout the vehicle.
[0036] In some examples, the device 110 is configured to communicate with a remote system 130 via a network (not shown). The remote system 130 may include remote resources 132, such as remote data processing hardware 134 (e.g., remote servers or CPUs) and/or remote memory hardware 136 (e.g., remote databases or other storage hardware). The device 110 may utilize the remote resources 132 to perform various functionality related to speech processing and/or synthesized playback communication. The contextual frontend processing model 200 and the backend speech system 180 may reside on the device 110 (referred to as on-device systems) or reside remotely (e.g., reside on the remote system 130), but in communication with the device 110. In some examples, one or more backend speech systems 180 reside locally or on-device while one or more other backend speech systems 180 reside remotely. In other words, one or more
backend speech systems 180 leveraging the enhanced input speech features 250 output from the contextual frontend processing model 200 may be local or remote in any combination. For instance, when a system 180 is rather large in size or processing requirements, the system 180 may reside in the remote system 130. Yet when the device 110 may support the size or the processing requirements of one or more systems 180, the one or more systems 180 may reside on the device 110 using the data processing hardware 112 and/or the memory hardware 114. Optionally, the one or more of the systems 180 may reside on both locally/on-device and remotely. For instance, a backend speech system 180 may default to execute on the remote system 130 when a connection between the device 110 and remote system 130 is available, but when the connection is lost or unavailable, the system 180 instead executes locally on the device 110.
[0037] In some implementations, the device 110 or a system associated with the device 110 identifies text that the device 110 will communicate to the user 10 as a response to a query spoken by the user 10. The device 110 may then use a text-to-speech (TTS) system to convert the text into corresponding synthesized playback audio 154 for the device 110 to communicate to the user 10 (e.g., audibly communicate to the user 10) as the response to the query. Once generated, the TTS system communicates the synthesized playback audio 154 to the device 110 to allow the device 110 to output the synthesized playback audio 154. For instance, the device 110 outputs the synthesized playback audio 154 of “today is sunny” at a speaker 118 of the device 110 responsive to the user 10 providing a spoken query for today’s weather forecast.
[0038] With continued reference to FIG. 1, when the device 110 outputs the synthesized playback audio 154, the synthesized playback audio 154 generates an echo 156 captured by the audio capturing device 116. The synthesized playback audio 154 corresponds to a reference audio signal. While synthesized playback audio 154 depicts a reference audio signal in the example of FIG. 1, the reference audio signal may include other types of playback audio 154 including media content output from the speaker 118 or a communication from a remote user the user 10 is conversing with (e.g., voice over IP call or video conferencing call) through the device 110. Unfortunately, in addition to the echo 156, the audio capturing device 116 may also be simultaneously capturing the target
utterance 12 spoken by the user 10 that includes a follow-up query inquiring more about the weather, by stating “what about tomorrow?” For example, FIG. 1 depicts that, as the device 110 outputs the synthesized playback audio 154, the user 10 inquires more about the weather, in a spoken utterance 12 to the device 110, by stating “what about tomorrow?” Here, the spoken utterance 12 and the echo 156 are both captured at the audio capturing device 116 simultaneously to form the noisy audio signal 202. In other words, the audio signal 202 includes an overlapped audio signal where some portion of the target utterance 12 spoken by the user 10 overlaps with some portion of the reference audio signal (e.g., synthesized playback audio) 154 output from the speaker 118 of the device 110. In addition to the synthesized playback audio 154, competing speech 13 spoken by another user 11 in the environment may also be captured by the audio capturing device 116 and contribute to background interference that overlaps with the target utterance 12.
[0039] In FIG. 1, the backend speech system 180 may have issues processing the target utterance 12 corresponding to the follow-up weather query “what about tomorrow?” in the noisy audio signal 202 due to the presence of the background interference attributed to at least one of the playback audio 154, competing speech 13, or non-speech background noise interfering with target utterance 12. The contextual frontend processing model 200 is employed to improve robustness of the backend speech system 180 by jointly implementing acoustic echo cancellation (AEC), speech enhancement, and speech separation models/modules into a single model.
[0040] In order to perform acoustic echo cancellation (AEC), the single model 200 uses the reference signal 154 that is being played back by the device as an input to the model 200. It is assumed that the reference signal 154 is temporally aligned with the target utterance 12, and is of the same length. In some examples, a feature extractor (not shown) extracts reference features 214 corresponding to the reference audio signal 154. The reference features 214 may include log Mel-fdterbank energy (LFBE) features of the reference audio signal 154. Similarly, the feature extractor may extract input speech features 212 corresponding to the target utterance 12. The input speech features 212 may include LFBE features. As described in greater detail below, the input speech features
212 may be stacked with the reference features 214 and provided as input to a primary encoder 210 (FIG. 2) of the single model 200 to perform AEC. When there is no reference audio signal 154 being played by the device, an all-zero reference signal may be used such that only the input speech features 212 are received as input to the primary encoder 210.
[0041] The single model 200 may additionally perform speech enhancement in parallel with AEC by applying noise context modeling where the single model 200 processes a contextual noise signal 213 associated with a predetermined duration of noise segments captured by the audio capturing device 116 prior to the target utterance 12 spoken by the user 10. In some examples, the predetermined duration includes six (6) seconds of noise segments. As such, the contextual noise signal 213 provides noise context In some examples, the contextual noise signal 213 includes LFBE features of the noise context signal for use as contextual information.
[0042] Optionally, the single model 200 may additionally perform target speaker modeling for speech separation jointly with AEC and speech enhancement. Here, a speaker embedding 215 is received as input by the single model 200. The speaker embedding 215 may include voice characteristics of the target speaker 10 that spoke the target utterance 12. The speaker embedding 215 may include a d-vector. In some examples, the speaker embedding 215 is computed using a text-independent speaker identification (TI-SID) model trained with a generalized end-to-end extended-set softmax loss. The TI-SID may include three long short-term memory (LSTM) layers with 768 nodes and a projection size of 256. The output of the final frame of the last LSTM layer is then linearly transformed to the final 256-dimension d-vector.
[0043] For training and evaluations, each target utterance may be paired with a separate “enrollment” utterance from the same speaker. The enrollment utterance may be randomly selected from a pool of available utterances of the target speaker. The d-vectors are then computed on the enrollment utterance. For most real applications, the enrollment utterances are usually obtained via a separate offline process.
[0044] FIG. 2 shows the contextual frontend processing model 200 of FIG. 1. The contextual frontend processing model 200 uses a modified version of a conformer neural
network architecture that combines convolution and self-attention to model short-range and long-range interactions. The model 200 includes a primary encoder 210, a noise context encoder 220, a cross-attention encoder 400, and a decoder 240. The primary encoder 210 may include N modulated conformer blocks. The noise context encoder 220 may include N conformer blocks. The cross-attention encoder 230 may include M modulated cross-attention conformer blocks. The primary and noise context encoders 210, 220 may execute in parallel. As used herein, each conformer block may use local, causal self-attention to allow for streaming capabilities.
[0045] The primary encoder 210 may be configured to receive, as input, input speech features 212 corresponding to the target utterance, and generate, as output, a main input encoding 218. When the reference audio signal 154 is available, the primary encoder 210 is configured to receive the input speech features 212 stacked with reference features 214 corresponding to the reference audio signal as input and generate the main input encoding by processing the input speech features 212 stacked with the reference features 214. The input speech features and the reference features may each include a respective sequence of LFBE features.
[0046] The primary encoder 210 may be further configured to receive, as input, the speaker embedding 215 (i.e., when available) including the voice characteristics of the target speaker (i.e., the user) 10 that spoke the target utterance 12, and generate, as output, the main input encoding 218 by combining the input speech features 212 (or the input speech features stacked with the reference features 214) using a feature-wise linear modulation (FiLM) layer 310 (FIG. 3). FIG. 3 provides an example modulated conformer block 320 employed by the primary encoder 210. Here, before each conformer block 320 at the primary encoder 210, the speaker embedding 215 (e.g., d- vector) is combined with the input speech features 212 (or stack of input speech and reference features 214) using the FiLM layer 310 to generate an output 312. FiLM permits the primary encoder 210 to adjust its encoding based on the speaker embedding 215 of the target speaker 10. A residual connection 314 is added after the FiLM layer 310 to combine the input speech features 212 (or the input speech features 212 stacked with the reference features 214) with the output 312 of the FiLM layer 310 to generate
modulated input features 316 as input for the conformer block 320 in order to ensure that the architecture can perform well when the speaker embedding 215 is absent. Mathematically, the modulated conformer block 320 transforms input features x, using modulation features m, to produce output features y, as follows: x = x + r(m) O x + h m) x' = % + j FFN(x) x" = x' + Conv(x') x'" = x" + MHSAfx") y = LayerNorm (1).
[0047] Here, h ( ) and r (•) are affine transformations. FFN, Conv, and MHSA stand for feed-forward module, convolution module, and multi-headed self-attention module, respectively. Eq. 1 shows the feature-wise linear modulation (FiLM) layer 310, with the residual connection.
[0048] Referring back to FIG. 2, the noise context encoder 220 is configured to receive, as input, a contextual noise signal 213 that includes the noise prior to the target utterance, and generate, as output, a contextual noise encoding 222. The contextual noise signal 213 may include LFBE features of the contextual noise signal. The noise context encoder 220, unlike the primary and cross-attention encoders 210, 400, includes standard conformer blocks without modulation by the speaker embedding 215. The noise context encoder 220 does not modulate the contextual noise signal 213 with the speaker embedding 215 since the contextual noise signal 213 is associated with acoustic noise context prior to the target utterance 12 is spoken, and thus, is assumed to contain information that should be passed forward to the cross-attention encoder 400 to aid with noise suppression.
[0049] With continued reference to FIG. 2, the cross-attention encoder 400 may be configured to receive, as input, the main input encoding 218 generated as output from the primary encoder 210 and the contextual noise encoding 222 generated as output from the noise context encoder 220, and generate, as output, a cross-attention embedding 480.
Thereafter, the decoder 240 is configured to decode the cross-attention embedding 480 into the enhanced input speech features 250 corresponding to the target utterance 12. The contextual noise encoding 222 may correspond to an auxiliary input. The decoder 240 may include a simple projection decoder having a single layer, frame-wise fully connected network with sigmoid activation.
[0050] As shown in FIG. 4, the cross-attention encoder 400 may employ a respective set of M modulated conformer blocks that each receive, as input, the main input encoding 218 modulated by the speaker embedding 215 using FiLM as described in FIG. 3 and the contextual noise encoding 222 output from the noise context encoder 220. The crossattention encoder 400 first independently processes the modulated input 218 and the auxiliary input 222 using half feed-forward nets 402, first residual connections 404, convolutional blocks 406, and second residual connections 408. Specifically, the modulated input 218 is processed by a half feed-forward net 402a, which generates an output 403a. Next, a first residual connection 404a combines the modulated input 218 with the output 403 a of the half-feedforward net 402a to generate modulated input features 405a. The modulated input features 405a are input to a convolution block 406a, which generates a convolutional output 407a. A second residual connection 408a combines the convolutional output 407a of the convolution block 406a with the modulated input features 405a to generate an output including a query vector 409a.
[0051] Likewise, the auxiliary input 222 is processed by a half feed-forward net 402b, which generates an output 403b. Next, a first residual connection 404b combines the auxiliary input 222 with the output 403b of the half-feedforward net 402b to generate modulated input features 405b. The modulated input features 405b are input to a convolution block 406b, which generates a convolutional output 407b. A second residual connection 408b combines the convolutional output 407b of the convolution block 406b with the modulated input features 405b to generate an output including a first key vector 409b and a first value vector 409c.
[0052] Subsequently, a multi -head cross attention (MHCA) module 410 receives, as input, the query vector 409a, the first key vector 409b, and the first value vector 409c, and summarizes these vectors 409a-c to generate a noise summary 412. Intuitively, the
role of the MHCA module 410 is to summarize noise context separately for each input frame that is to be enhanced. The noise summary 412 output by the MHCA module 410 is then merged with the query vector 409a using a FiLM layer 420, which generates an FiLM output 422.
[0053] A multi-head self attention (MHSA) layer 430 receives the FiLM output 422 as input and merges the FiLM output 422 with the query vector 409a to generate an attention output 432. A third residual connection 434 receives the query vector 409a and the attention output 432 and combines the query vector 409a and the attention output 432 to generate a residual output 436. A feed forward module 440 then receives the residual output 436 of the third residual connection 434 as input and generates a features output 442. Next, a fourth residual connection 444 combines the features output 422 with the residual output 436 of the third residual output 434 to generate merged input features 446. The merged input features 446 are then processed as input by a layernorm 450, which to a convolution block 406b, which generates a cross-attention embedding 480.
[0054] Mathematically, if x, m, and n are the encoded input, d-vector and the encoded noise context from the previous layer, the cross attention encoder 400 performs the following: x = x + r(m) O x + h(m)
1 1 x = x -I- - FFN (x), n = n + - FFN (n) x' = x + Conv(x), n' = n + Conv(n) x" = MHCA(x'.n') x'" = x' + x' O r(x") + /i(x”) x"" = x'" + MHSA(x'") y — LayerNorm (2).
[0055] The cross attention encoder 400 generates, as an output, the cross-attention embedding 480, which is passed on to the next layer of the M modulated conformer
blocks, along with the d-vector m, and the encoded noise context n. Thus, inputs are modulated by each of the M conformer blocks by both the speaker embedding 215 associated with the target speaker and the noise context encoding 222.
[0056] FIG. 5 shows an example training process 500 for training the contextual frontend processing model 200 to generate enhanced input speech features 250 when one or more of the contextual input features 213, 214, 215 are not present. The training process 500 may execute on the remote system 130 of FIG. 1. As shown, the training process obtains one or more training data sets 520 stored in a data store 510 and trains the contextual frontend processing model 200 on the training data sets 520. The data store 510 may reside on the memory hardware 136 of the remote system 130. Each training data set 520 includes a plurality of training examples, 530, 530a-n, where each training example 530 may include a training utterance 532 paired with corresponding training contextual signals 534, 534a-c. Specifically, the training contextual signals 534 include a training contextual noise signal 534a including noise prior to the corresponding training utterance 532, a training reference audio signal 534b, and a training speaker vector 534c including voice characteristics of a target speaker that spoke the corresponding training utterance 532.
[0057] As discussed above with respect to FIG. 1, during inference, the contextual frontend processing model 200 may not receive all of the contextual input features 213, 214, 215 at the same time. Training the contextual frontend processing model 200 with one or more missing training contextual signals 534 encourages the contextual frontend processing model 200 to utilize alternates in the contextual input features 213, 214, 215 rather than overly rely on the most relevant of the contextual input features 213, 214, 215. As a result, the contextual frontend processing model 200 can accurately predict enhanced input speech features 250 when one or more of the contextual input features 213, 214, 215 is not present. In order to keep the contextual frontend processing model 200 static, any missing training contextual signals 534 still need to be input to the contextual frontend processing model 200 in some manner.
[0058] The training process 500 may also utilize a signal dropout model 550. The signal dropout model 550 receives the training contextual signals 534 as input from the
data store 510 and, using a contextual signal dropout strategy, drops out one or more of the training contextual signals 534 prior to training the contextual frontend processing model 200. The contextual signal dropout strategy of the signal dropout model 550 may include a predetermined probability (e g., 50%, 20%, etc.,) to drop out each of the training contextual signals 534, where the same predetermined probability is used for each of the training contextual signals 534. In other words, in a given training example 530, the signal dropout model 550 may, using the contextual signal dropout strategy, drop out the training contextual noise signal 534a at a predetermined probability of 50%, the training reference audio signal 534b at a predetermined probability of 50%, and the training speaker vector 534c at a predetermined probability of 50%. Likewise, in a given training example, the signal dropout model 550 may, using the contextual signal dropout strategy, drop out the training contextual noise signal 534a at a predetermined probability of 20%, the training reference audio signal 534b at a predetermined probability of 20%, and the training speaker vector 534c at a predetermined probability of 20%.
[0059] In addition to the signal dropout strategy, the signal dropout model 550 may trim the length of the training contextual noise signal 534a to include noise prior to the corresponding training utterance 532 with a uniformly distributed length of zero to six (0-6) seconds. In other words, the signal dropout model 550 implements the signal dropout strategy and trims the training contextual noise signal 534a concurrently. For example, for a given training example 530, even if the signal dropout model 550 does not drop out the training contextual noise signal 534a, the signal dropout model 550 may still trim the length of the training contextual noise signal 534a.
[0060] In some implementations, the signal dropout model 550 uses the signal dropout strategy to, based on the predetermined probability, drop out each training contextual signal 534 by replacing the corresponding training contextual signal 534 with all-zeroes. In these implementations, the signal dropout model 550 may replace the training contextual noise signal 534a with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance 532. For example, the signal dropout strategy includes creating an all-zero feature with a length of six (6) seconds, and the same dimension as the LFBE features. Similarly, the signal
dropout model 550, using the signal dropout strategy, may replace the training reference audio signal 534b with an all-zero feature of a same length and feature dimension as the corresponding training utterance 532. Here, the feature dimension of the all-zero training reference audio signal 534b corresponds to the LFBE features of the training reference audio signal 534b if the signal dropout strategy had not dropped out the training reference audio signal 534b. Likewise, the signal dropout model 550, using the signal dropout strategy, may replace the training speaker vector 534c with an all-zero feature with an allzero vector. Here, the training speaker vector 534c is replaced with a 256-dimensional all-zero vector. In other implementations, the signal dropout model 550 uses the signal dropout strategy to, based on the predetermined probability, drop out each training contextual signal 534 by replacing the corresponding training contextual signal 534 with a frame-level learned representation.
[0061] In the example shown in FIG. 5, the signal dropout model 550 receives the training contextual signals 534a-c as input and, using the predetermined probability of the contextual signal dropout strategy, drops out the training reference audio signal 534b by replacing the training reference audio signal 534b with an all-zero feature of a same length and feature dimension as the corresponding training utterance 532. In other words, at this time-step, the contextual frontend processing model 200 is only trained on the training contextual signals 534a, 534c, which approximates a condition the model 200 may encounter during inference where the contextual input features 213, 214, 215 only include a contextual noise signal 213 and a speaker embedding 215.
[0062] After the signal dropout model 550 drops out the training reference audio signal 534b, the training utterance 532 and the training contextual signals 534 including the training reference audio signal 534b replaced with the all-zero feature and dimension to simulate the training reference audio signal 534b as missing are provided to train the contextual frontend processing model 200. The contextual frontend processing model 200 receives, as input, the training utterance 532 and the training contextual signals 534 simulating the training reference audio signal 534b as missing and generates an output prediction
[00631 FIG. 6 shows an example training process 600 for computing ASR loss 640 when the contextual frontend processing model 200 is trained j ointly with the ASR model 192. Here, only an encoder 620 of the ASR model 192 is used for computing the loss.
The ASR loss 640 is computed as the 12 distance between the outputs of the ASR encoder 620 for target features 540 of the training utterance 532 and the enhanced input speech features 250. The ASR encoder 620 is not updated during the training process 600. In detail, the training process 600 computes the ASR loss 640 by generating, using the ASR encoder 620 of the ASR model 192 configured to receive enhanced input speech features 250 predicted by the contextual frontend processing model 200 for a training utterance 532 as input, predicted outputs 622 of the ASR encoder 620 for the enhanced input speech features 250, and generating, using the ASR encoder 620 configured to receive target speech features 540 for the training utterance 532 as input, target outputs 624 of the ASR encoder 620 for the target speech features 540. The predicted outputs 622 for the enhanced input speech features 250 and the target outputs 624 for the target speech features 540 may each include respective sequences of LFBE features. Thereafter, the training process 600, via a loss module 630, computes the ASR loss 640 based on the predicted outputs 622 of the ASR encoder 620 for the enhanced input speech features 250 and the target outputs 624 of the ASR encoder 620 for the target speech features 540. The goal of using the ASR loss 640 is to make enhancements to the contextual frontend processing model 200 to be more attuned to the ASR model 192, which is critical for getting the best performance out of the contextual frontend processing model 200. By keeping the parameters of the ASR model 192 fixed, the ASR model 192 is decoupled from the contextual frontend processing model 200, thereby allowing each to be trained and deployed independent of each other.
[0064] In some implementations, the contextual frontend processing model 200 is trained jointly with the ASR model 192 of the backend automatic speech recognition system 180 using a spectral loss and the ASR loss 640. The training target 540 for training the contextual frontend processing model 200 uses ideal ratio mask (IRM).
IRMs are computed using reverberant speech and reverbant noise based on an assumption that speech and noise are uncorrelated in Mel spectral space as follows.
M(t, c) = — (3) v J X(t,c)+N (t,c) v 7
Here, X and N are the reverberant speech and reverberant noise Mel spectrograms, respectively, t and c, represent time and Mel frequency bin indices. The choice to estimate IRMs is based on the targets being bounded between [0, 1], simplifying the estimation process. Moreover, the ASR model used for evaluation may be trained on real and simulated reverberant data, resulting in a trained ASR model that is relatively robust to reveberant speech. Therefore, IRMs derived using reverberant speech as the target still provide substantial gains in performance. The spectral loss during training are computed based LI and L2 losses between the IRM and estimated IRM, M as follows.
[0065] During inference, the estimated IRM is scaled and floored to reduce speech distortion at the expense of reduced noise suppression. This is especially important, since the ASR model 192 is sensitive to speech distortions and non-linear frontend processing, which is one of the main challenges in improving performance of robust ASR models using enhancement frontends. The enhanced feature is derived as follows.
Here, Y is the noisy Mel spectrogram, X is an estimate of clean Mel spectrogram, a and P are exponential mask scalars, and mask floor. In some examples, a is set 0.5, and P is set to 0.01 . The enhanced features may be log-compressed, i.e. log(X), and passed to the ASR model 192 for evaluation.
[0066] FIG. 7 includes a flowchart of an example arrangement of operations for a method 700 of training a generalized automatic speech recognition model using a contextual frontend processing model 200. At operation 702, the method 700 includes receiving a plurality of training utterances 532 paired with corresponding training
contextual signals 534, 534a-c. The training contextual signals 534 include a training contextual noise signal 534a including noise prior to the corresponding training utterance 532, a training reference audio signal 534b, and a training speaker vector 534c including voice characteristics of a target speaker that spoke the corresponding training utterance 532. The method 700 also includes, at operation 704, training, using a contextual signal dropout strategy, the contextual frontend processing model 200 on the training utterances 532 to learn how to predict enhanced input speech features 250. Here, the contextual signal dropout strategy uses a predetermined probability to drop out each of the training contextual signals 534 during training of the contextual frontend processing model 200 to simulate one or more of the training contextual signals 534 as being missing to teach the model 200 to learn how to robustly generate enhanced speech features 250 when any of the corresponding contextual input features are missing during inference.
[0067] FIG. 8 is schematic view of an example computing device 800 that may be used to implement the systems and methods described in this document. The computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the disclosures described and/or claimed in this document.
[0068] The computing device 800 includes a processor 810, memory 820, a storage device 830, a high-speed interface/controller 840 connecting to the memory 820 and high-speed expansion ports 850, and a low speed interface/controller 860 connecting to a low speed bus 870 and a storage device 830. Each of the components 810, 820, 830, 840, 850, and 860, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 810 (e.g., data processing hardware 112, 134 of FIG. 1) can process instructions for execution within the computing device 800, including instructions stored in the memory 820 or on the storage device 830 to display graphical information for a graphical user interface (GUI) on an external input/output device, such as display 880 coupled to high speed interface 840. In other implementations, multiple processors and/or multiple buses may be used, as
appropriate, along with multiple memories and types of memory. Also, multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
[0069] The memory 820 (e g., memory hardware 114, 136 of FIG. 1) stores information non-transitorily within the computing device 800. The memory 820 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). The non-transitory memory 820 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 800. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
[0070] The storage device 830 is capable of providing mass storage for the computing device 800. In some implementations, the storage device 830 is a computer- readable medium. In various different implementations, the storage device 830 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory 820, the storage device 830, or memory on processor 810.
[0071] The high speed controller 840 manages bandwidth-intensive operations for the computing device 800, while the low speed controller 860 manages lower bandwidth-
intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 840 is coupled to the memory 820, the display 880 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 850, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 860 is coupled to the storage device 830 and a low-speed expansion port 890. The low-speed expansion port 890, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
[0072] The computing device 800 may be implemented in a number of different forms, as shown in the figure For example, it may be implemented as a standard server 800a or multiple times in a group of such servers 800a, as a laptop computer 800b, or as part of a rack server system 800c.
[0073] Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
[0074] A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an “application,” an “app,” or a “program.” Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
[0075] The non-transitory memory may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by a computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of nonvolatile memory include, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
[0076] These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, non- transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
[0077] The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
[0078] To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
[0079] A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims
1. A computer-implemented method (700) that when executed on data processing hardware (134) causes the data processing hardware (134) to perform operations comprising: receiving a plurality of training utterances (532) paired with corresponding training contextual signals (534, 534a-c), the training contextual signals (534a-c) comprising: a training contextual noise signal (534a) comprising noise prior to the corresponding training utterance (532); a training reference audio signal (543b); and a training speaker vector (534c) comprising voice characteristics of a target speaker that spoke the corresponding training utterance (532); and training, using a contextual signal dropout strategy, a contextual frontend processing model (200) on the training utterances (532) to learn how to predict enhanced speech features (250), the contextual signal dropout strategy using a predetermined probability to drop out each of the training contextual signals (534) during training of the contextual frontend processing model (200).
2. The computer-implemented method (700) of claim 1, wherein the signal dropout strategy drops out each training contextual signal (534) by replacing the corresponding training contextual signal (534) with all-zeroes.
3. The computer-implemented method (700) of claim 2, wherein replacing the training reference audio signal (543b) with all zeroes comprises replacing the training reference audio signal (543b) with an all-zero feature of a same length and feature dimension as the corresponding training utterance (532).
4. The computer-implemented method (700) of claims 2 or 3, wherein replacing the training contextual noise signal (534a) comprises replacing the training contextual noise
signal (534a) with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance (532).
5. The computer-implemented method (700) of any of claims 2-4, wherein replacing the training speaker vector (534c) comprises replacing the training speaker vector (534c) with an all-zero feature with an all-zero vector.
6. The computer-implemented method (700) of claim 1, wherein the signal dropout strategy drops out each training contextual signal (534) by replacing the corresponding training contextual signal (534) with a frame-level learned representation.
7. The computer-implemented method (700) of any of claims 1-6, wherein the trained contextual frontend processing model (200) comprises: a primary encoder (210) configured to: receive, as input, input speech features (212) corresponding to a target utterance (12); and generate, as output, a main input encoding (218); a noise context encoder (220) configured to: receive, as input, a contextual noise signal (213) comprising noise prior to the target utterance (12); and generate, as output, a contextual noise encoding (222); and a cross-attention encoder (400) configured to: receive, as input, the main input encoding (218) generated as output from the primary encoder (210) and the contextual noise encoding (222) generated as output from the noise context encoder (220); and generate, as output, a cross-attention embedding (480); and a decoder (240) configured to decode the cross-attention embedding (480) into enhanced speech features (250) corresponding to the target utterance (12).
8. The computer-implemented method (700) of claim 7, wherein the primary encoder (210) is further configured to: receive, as input, reference features (214) corresponding to a reference audio signal (154); and generate, as output, the main input encoding (218) by processing the input speech features (212) stacked with the reference features (214).
9. The computer-implemented method (700) of claims 7 or 8, wherein the primary encoder (210) is further configured to: receive, as input, a speaker embedding (215) comprising voice characteristics of a target speaker (10) that spoke the target utterance (12); and generate, as output, the main input encoding (218) by combining the input speech features (212) with the speaker embedding (215) using feature- wise linear modulation (FiLM).
10. The computer-implemented method (700) of any of claims 7-9, wherein the cross-attention encoder (400) is further configured to: receive, as input, the main input encoding (218) modulated by a speaker embedding (215) using feature-wise linear modulation (FiLM), the speaker embedding (215) comprising voice characteristics of a target speaker (10) that spoke the target utterance (12); and process the main input encoding (218) modulated by the speaker embedding (215) and the contextual noise encoding (222) to generate, as output, the cross-attention embedding (480).
11. The computer-implemented method (700) of any of claims 7-10, wherein: the primary encoder (210) comprises N modulated conformer blocks (320); the noise context encoder (220) comprises N conformer blocks and executes in parallel with the primary encoder (210); and
the cross-attention encoder (400) comprises M modulated cross-attention conformer blocks.
12. The computer-implemented method (700) of any of claims 1-11, wherein the contextual frontend processing model (200) is trained j ointly with a backend automatic speech recognition (ASR) model (192) using a spectral loss and an ASR loss (640).
13. The computer-implemented method (700) of claim 12, wherein the spectral loss is based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask, the ideal ratio mask computed using reverberant speech and reverberant noise.
14. The computer-implemented method (700) of claims 12 or 13, wherein the ASR loss (640) is computed by, for each training utterance (532): generating, using an ASR encoder (620) of the ASR model (192) configured to receive enhanced speech features (250) predicted by the contextual frontend processing model (200) for the training utterance (532) as input using the contextual signal dropout strategy, predicted outputs (622) of the ASR encoder (620) for the enhanced speech features (250); generating, using the ASR encoder (620) configured to receive target speech features (540) for the training utterance (532) as input, target outputs (624) of the ASR encoder (620) for the target speech features (540); and computing the ASR loss (640 based on the predicted outputs (622) of the ASR encoder (620) for the enhanced speech features (250) and the target outputs (624) of the ASR encoder (620) for the target speech features (540).
15. A system (100) comprising: data processing hardware (134); and
memory hardware (136) in communication with the data processing hardware (134) and storing instructions that when executed on the data processing hardware (134) causes the data processing hardware (134) to perform operations comprising: receiving a plurality of training utterances (532) paired with corresponding training contextual signals (534, 534a-c), the training contextual signals (534a-c) comprising: a training contextual noise signal (534a) comprising noise prior to the corresponding training utterance (532); a training reference audio signal (543b); and a training speaker vector (534c) comprising voice characteristics of a target speaker that spoke the corresponding training utterance (532); and training, using a contextual signal dropout strategy, a contextual frontend processing model (200) on the training utterances (532) to learn how to predict enhanced speech features (250), the contextual signal dropout strategy using a predetermined probability to drop out each of the training contextual signals (534) during training of the contextual frontend processing model (200).
16. The system (100) of claim 15, wherein the signal dropout strategy drops out each training contextual signal (534) by replacing the corresponding training contextual signal (534) with all-zeroes.
17. The system (100) of claim 16, wherein replacing the training reference audio signal (543b) with all zeroes comprises replacing the training reference audio signal (543b) with an all-zero feature of a same length and feature dimension as the corresponding training utterance (532).
18. The system (100) of claims 16 or 17, wherein replacing the training contextual noise signal (534a) comprises replacing the training contextual noise signal (534a) with an all-zero feature having a predetermined length and a same feature dimension as the corresponding training utterance (532).
19. The system (100) of any of claims 16-18, wherein replacing the training speaker vector (534c) comprises replacing the training speaker vector (534c) with an all-zero feature with an all-zero vector.
20. The system (100) of claim 15, wherein the signal dropout strategy drops out each training contextual signal (534) by replacing the corresponding traning contextual signal (534) with a frame-level learned representation.
21. The system (100) of any of claims 15-20, wherein the trained contextual frontend processing model (200) comprises: a primary encoder (210) configured to: receive, as input, input speech features (212) corresponding to a target utterance (12); and generate, as output, a main input encoding (218); a noise context encoder (220) configured to: receive, as input, a contextual noise signal (213) comprising noise prior to the target utterance (12); and generate, as output, a contextual noise encoding (222); and a cross-attention encoder (400) configured to: receive, as input, the main input encoding (218) generated as output from the primary encoder (210) and the contextual noise encoding (222) generated as output from the noise context encoder (220); and generate, as output, a cross-attention embedding (480); and a decoder (240) configured to decode the cross-attention embedding (480) into enhanced speech features (250) corresponding to the target utterance (12).
22. The system (100) of claim 21, wherein the primary encoder (210) is further configured to:
receive, as input, reference features (214) corresponding to a reference audio signal (154); and generate, as output, the main input encoding (218) by processing the input speech features (212) stacked with the reference features (214).
23. The system (100) of claims 21 or 22, wherein the primary encoder (210) is further configured to: receive, as input, a speaker embedding (215) comprising voice characteristics of a target speaker (10) that spoke the target utterance (12); and generate, as output, the main input encoding (218) by combining the input speech features (212) with the speaker embedding (215) using feature- wise linear modulation (FiLM).
24. The system (100) of any of claims 21-23, wherein the cross-attention encoder (400) is further configured to: receive, as input, the main input encoding (218) modulated by a speaker embedding (215) using feature-wise linear modulation (FiLM), the speaker embedding (215) comprising voice characteristics of a target speaker (10) that spoke the target utterance (12); and process the main input encoding (218) modulated by the speaker embedding (215) and the contextual noise encoding (222) to generate, as output, the cross-attention embedding (480).
25. The system (100) of any of claims 21-24, wherein: the primary encoder (210) comprises N modulated conformer blocks (320); the noise context encoder (220) comprises N conformer blocks and executes in parallel with the primary encoder (210); and the cross-attention encoder (400) comprises M modulated cross-attention conformer blocks.
26. The system (100) of any of claims 15-25, wherein the contextual frontend processing model (200) is trained j ointly with a backend automatic speech recognition (ASR) model (192) using a spectral loss and an ASR loss.
27. The system (100) of claim 26, wherein the spectral loss is based on an LI loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask, the ideal ratio mask computed using reverberant speech and reverberant noise.
28. The system (100) of claims 26 or 27, wherein the ASR loss is computed by, for each training utterance (532): generating, using an ASR encoder (620) of the ASR model (192) configured to receive enhanced speech features (250) predicted by the contextual frontend processing model (200) for the training utterance (532) as input using the contextual signal dropout strategy, predicted outputs (622) of the ASR encoder (620) for the enhanced speech features (250); generating, using the ASR encoder (620) configured to receive target speech features (540) for the training utterance (532) as input, target outputs (624) of the ASR encoder (620) for the target speech features (540); and computing the ASR loss (640) based on the predicted outputs (622) of the ASR encoder (620) for the enhanced speech features (250) and the target outputs (624) of the ASR encoder (620) for the target speech features (540).
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263269629P | 2022-03-20 | 2022-03-20 | |
US63/269,629 | 2022-03-20 |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2023183683A1 true WO2023183683A1 (en) | 2023-09-28 |
Family
ID=85703491
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2023/062886 WO2023183683A1 (en) | 2022-03-20 | 2023-02-19 | Generalized automatic speech recognition for joint acoustic echo cancellation, speech enhancement, and voice separation |
Country Status (2)
Country | Link |
---|---|
US (1) | US20230298609A1 (en) |
WO (1) | WO2023183683A1 (en) |
-
2023
- 2023-02-19 US US18/171,368 patent/US20230298609A1/en active Pending
- 2023-02-19 WO PCT/US2023/062886 patent/WO2023183683A1/en unknown
Non-Patent Citations (2)
Title |
---|
O'MALLEY TOM ET AL: "A Conformer-Based ASR Frontend for Joint Acoustic Echo Cancellation, Speech Enhancement and Speech Separation", 2021 IEEE AUTOMATIC SPEECH RECOGNITION AND UNDERSTANDING WORKSHOP (ASRU), IEEE, 13 December 2021 (2021-12-13), pages 304 - 311, XP034076936, DOI: 10.1109/ASRU51503.2021.9687942 * |
RAJEEV RIKHYE ET AL: "Closing the Gap between Single-User and Multi-User VoiceFilter-Lite", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 24 February 2022 (2022-02-24), XP091164401 * |
Also Published As
Publication number | Publication date |
---|---|
US20230298609A1 (en) | 2023-09-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7434137B2 (en) | Speech recognition method, device, equipment and computer readable storage medium | |
CN111370014A (en) | Multi-stream target-speech detection and channel fusion | |
US11699453B2 (en) | Adaptive multichannel dereverberation for automatic speech recognition | |
Yu et al. | Audio-visual multi-channel integration and recognition of overlapped speech | |
US11715458B2 (en) | Efficient streaming non-recurrent on-device end-to-end model | |
EP4295357A1 (en) | Mixture model attention for flexible streaming and non-streaming automatic speech recognition | |
CN112466327B (en) | Voice processing method and device and electronic equipment | |
JP2023162265A (en) | Text echo cancellation | |
Jaroslavceva et al. | Robot Ego‐Noise Suppression with Labanotation‐Template Subtraction | |
US20230298609A1 (en) | Generalized Automatic Speech Recognition for Joint Acoustic Echo Cancellation, Speech Enhancement, and Voice Separation | |
WO2023060008A1 (en) | Optimizing inference performance for conformer | |
US20230038982A1 (en) | Joint Acoustic Echo Cancelation, Speech Enhancement, and Voice Separation for Automatic Speech Recognition | |
US20230298612A1 (en) | Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition | |
WO2023055409A1 (en) | Large-scale language model data selection for rare-word speech recognition | |
CN112669848B (en) | Offline voice recognition method and device, electronic equipment and storage medium | |
US20240135918A1 (en) | Knowledge Distillation with Domain Mismatch For Speech Recognition | |
Sun et al. | Multiple beamformers with rover for the chime-5 challenge | |
WO2023060002A1 (en) | Training for long-form speech recognition | |
Pandya et al. | Evaluating the impact of different acoustic contexts on German speech recognition | |
WO2024086164A1 (en) | Knowledge distillation with domain mismatch for speech recognition | |
WO2023192327A1 (en) | Representation learning using informed masking for speech and other audio applications | |
WO2023043470A1 (en) | Stft-based echo muter |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 23711907Country of ref document: EPKind code of ref document: A1 |