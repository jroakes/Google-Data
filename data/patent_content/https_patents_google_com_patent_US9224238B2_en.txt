US9224238B2 - Seamless texturing of 3D meshes of objects from multiple views - Google Patents
Seamless texturing of 3D meshes of objects from multiple views Download PDFInfo
- Publication number
- US9224238B2 US9224238B2 US14/098,659 US201314098659A US9224238B2 US 9224238 B2 US9224238 B2 US 9224238B2 US 201314098659 A US201314098659 A US 201314098659A US 9224238 B2 US9224238 B2 US 9224238B2
- Authority
- US
- United States
- Prior art keywords
- images
- polygons
- image
- boundaries
- assigned
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/10—Geometric effects
- G06T15/20—Perspective computation
- G06T15/205—Image-based rendering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/04—Texture mapping
Definitions
- 3D models can be created by hand, algorithmically, or objects can be scanned, for example.
- an artist may manually generate a 3D image of an object that can be used as the 3D model.
- a given object may be scanned from a number of different angles, and the scanned images can be combined to generate the 3D image of the object.
- an image of an object may be used to generate a point cloud that can be algorithmically processed to generate the 3D image.
- 3D object data models may include solid models that define a volume of the object, or may include shell or boundary models that represent a surface (e.g. the boundary) of the object. Because an appearance of an object depends largely on an exterior of the object, boundary representations are common in computer graphics.
- 3D models are used in a wide variety of fields, and may be displayed using a number of different types of interfaces.
- Example interfaces may provide functionality to enable interaction between a user and the 3D models.
- the method may also include determining an image of the plurality of images that is assigned to a threshold number of polygons in a proximity of one of the adjacent polygons and reassigning the image that is assigned to the threshold number of polygons to the adjacent polygons so as to modify the boundaries of images.
- the method may also include determining a mismatch factor for boundaries of the modified boundaries of images.
- the method may also include reassigning images in boundaries having a mismatch factor above a threshold so as to reduce a gradient variation between the images in the modified boundaries.
- the present disclosure provides a non-transitory computer readable memory having stored thereon that, in response to execution by a computing device, cause the computing device to perform functions.
- the functions may include receiving information indicating a geometry of an object, where the information indicating the geometry of the object comprises a plurality of polygons that approximate a geometric surface of the object.
- the functions may also include receiving a plurality of images of the object, where each of said plurality of images illustrate the object from a different respective angle.
- the functions may also include assigning images of the plurality of images that have a resolution above a threshold to polygons of the plurality of polygons.
- the functions may also include determining adjacent polygons that are assigned to different images of the plurality of images so as to identify boundaries of images.
- the functions may also include determining an image of the plurality of images that is assigned to a threshold number of polygons in a proximity of one of the adjacent polygons and reassigning the image that is assigned to the threshold number of polygons to the adjacent polygons so as to modify the boundaries of images.
- the functions may also include determining a mismatch factor for boundaries of the modified boundaries of images.
- the functions may also include reassigning images in boundaries having a mismatch factor above a threshold so as to reduce a gradient variation between the images in the modified boundaries.
- a system may include a means for receiving information indicating a geometry of an object, where the information indicating the geometry of the object comprises a plurality of polygons that approximate a geometric surface of the object.
- the system may also include a means for receiving a plurality of images of the object, where each of said plurality of images illustrate the object from a different respective angle.
- the system may also include a means for assigning images of the plurality of images that have a resolution above a threshold to polygons of the plurality of polygons.
- the system may also include a means for determining adjacent polygons that are assigned to different images of the plurality of images so as to identify boundaries of images.
- the system may also include a means for determining an image of the plurality of images that is assigned to a threshold number of polygons in a proximity of one of the adjacent polygons and a means for reassigning the image that is assigned to the threshold number of polygons to the adjacent polygons so as to modify the boundaries of images.
- the system may also include a means for determining a mismatch factor for boundaries of the modified boundaries of images.
- the system may also include a means for reassigning images in boundaries having a mismatch factor above a threshold so as to reduce a gradient variation between the images in the modified boundaries.
- FIG. 1 illustrates an example system for object data modeling.
- FIG. 2A is a block diagram of an example method for seamless texturing of three-dimensional (3D) object data models.
- FIG. 2B is a block diagram of another example method for seamless texturing of 3D object data models.
- FIG. 3A is a conceptual illustration of a 3D object model, arranged according to at least some embodiments presented herein.
- FIG. 3B is a conceptual illustration of a 3D object model, arranged according to at least some embodiments presented herein.
- FIG. 4A illustrates a highly textured area of a 3D object model, arranged according to at least some embodiments presented herein.
- FIG. 5 is a functional block diagram illustrating an example computing device used in a computing system that is arranged in accordance with at least some embodiments described herein.
- FIG. 6 is a schematic illustrating a conceptual partial view of an example computer program product that includes a computer program for executing a computer process on a computing device, arranged according to at least some embodiments presented herein.
- a 3D image of an object may be generated by using a model having a mesh including a plurality of polygons as a first input and a set of images of the object as a second input.
- the mesh including a plurality of polygons may be a triangular mesh.
- the examples described herein include the triangular mesh, although other polygons are possible.
- the triangular mesh may include several points connected by lines to create triangles that may be used to approximate the geometric surface of the object. The more triangles that are present in the model, the more accurate the approximation, for example.
- a set of images of the object may be input into the model.
- the set of images represent the object from many different angles.
- Each triangle in the triangle mesh may then be assigned a particular image.
- Each triangle has a single image that has the highest resolution for that particular triangle, in some examples.
- the model only assigned the image based on the highest resolution for that triangle, there may be many different images used to texture all of the different triangles, which may lead to texture distortion seams between triangles. Therefore, an approach that minimizes texture distortion associated with the boundaries between triangles mapped from different images may be desirable.
- Minimizing texture distortion can be accomplished in some examples through optimization of three objectives: (1) maximize the resolution of the assigned image for each individual triangle; (2) minimize the total length of the boundaries between texture models; and (3) minimize the boundary crossings in highly textured areas.
- a “boundary” may refer to an edge (e.g., two vertices in the mesh such that there is a single triangle that contains both) in which the two triangles sharing that edge are assigned to different images.
- a “highly textured area” can include an area where an image experiences significant changes, such as a change in color, pixel value, or gradient.
- example methods are described.
- the method may be executed to assign every triangle independently to the image with the highest projected resolution.
- the method may apply a local and iterative process to reduce the total boundaries length.
- the method may apply another local and iterative process that “routes” the boundaries to regions where there is more agreement between the images.
- FIG. 1 illustrates an example system 100 for object data modeling.
- the system 100 includes an input source 102 coupled to a server 104 and a database 106 .
- the server 104 is also shown coupled to the database 106 and an output target 108 .
- the system 100 may include more or fewer components, and each of the input source 102 , the server 104 , the database 106 , and the output target 108 may comprise multiple elements as well, or each of the input source 102 , the server 104 , the database 106 , and the output target 108 may be interconnected as well.
- one or more of the described functions of the system 100 may be divided up into additional functional or physical components, or combined into fewer functional or physical components.
- additional functional and/or physical components may be added to the examples illustrated by FIG. 1 .
- Components of the system 100 may be coupled to or configured to be capable of communicating via a network (not shown), such as a local area network (LAN), wide area network (WAN), wireless network (Wi-Fi), or Internet, for example.
- a network such as a local area network (LAN), wide area network (WAN), wireless network (Wi-Fi), or Internet, for example.
- any of the components of the system 100 may be coupled to each other using wired or wireless communications.
- communication links between the input source 102 and the server 104 may include wired connections, such as a serial or parallel bus, or wireless links, such as Bluetooth, IEEE 802.11 (IEEE 802.11 may refer to IEEE 802.11-2007, IEEE 802.11n-2009, or any other IEEE 802.11 revision), or other wireless based communication links.
- the input source 102 may be any source from which a 3D object data model may be received.
- 3D model acquisition shape and appearance
- structured light scanners may capture images of an object and a shape of the object may be recovered using monochrome stereo cameras and a pattern projector.
- a high-resolution DSLR camera may be used to capture images for color texture information.
- a raw computer-aided drafting (CAD) set of drawings may be received for each object.
- the input source 102 may provide a 3D object data model, in various forms, to the server 104 .
- multiple scans of an object may be processed into a merged mesh and assets data model, and provided to the server 104 in that form.
- the model builder 110 receives the mesh data set for each object from the input source 102 , which may include a data set defining a dense surface mesh geometry, and may generate an animated model of the object in 3D. For example, the model builder 110 may perform coherent texture unwrapping from the mesh surface, and determine textures of surfaces emulated from the geometry.
- the semantics and search index 114 may receive captured images or processed images that have been decimated and compressed, and may perform texture resampling and also shape-based indexing. For example, for each object, the semantics and search index 114 may index or label components of the images (e.g., per pixel) as having a certain texture, color, shape, geometry, attribute, etc.
- the output target 108 may include a number of different targets, such as a webpage on the Internet, a search engine, a database, etc.
- the output target 108 may include a 3D object data model viewer that enables product advertisements or product searches based on the 3D object data model.
- system 100 may be used to acquire data of an object, process the data to generate a 3D object data model, and render the 3D object data model for display.
- a 3D object may be modeled using a wireframe built of triangles or other polygons to approximate the geometric surface of the object, and the triangles may be textured using multiple camera images. Therefore, each triangle of the wireframe model can be assigned to one camera image. In some cases, two triangles that share a boundary may be textured from different images, which may lead to texture distortion seams between those triangles. Therefore, an approach that minimizes texture distortion associated with the boundaries between triangles mapped from different images may be desirable.
- FIG. 2A is a block diagram of an example method for seamless texturing of 3D object models.
- Method 200 shown in FIG. 2A presents an embodiment of a method that could be used by the system 100 of FIG. 1 , for example.
- Method 200 may include one or more operations, functions, or actions as illustrated by one or more of blocks 202 - 208 . Although the blocks are illustrated in a sequential order, these blocks may also be performed in parallel, and/or in a different order than those described herein. Also, the various blocks may be combined into fewer blocks, divided into additional blocks, and/or removed based upon the desired implementation.
- each block may represent a module, a segment, or a portion of program code, which includes one or more instructions executable by a processor or computing device for implementing specific logical functions or steps in the process.
- the program code may be stored on any type of computer readable medium, for example, such as a storage device including a disk or hard drive.
- the computer readable medium may include non-transitory computer readable medium, for example, such as computer-readable media that stores data for short periods of time like register memory, processor cache and Random Access Memory (RAM).
- the computer readable medium may also include non-transitory media, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example.
- the computer readable media may also be any other volatile or non-volatile storage systems.
- the computer readable medium may be considered a computer readable storage medium, for example, or a tangible storage device.
- each block in FIG. 2A may represent circuitry that is wired to perform the specific logical functions in the process.
- the method 200 includes receiving information indicating the geometry of an object.
- the information indicating the geometry of the object may be received by a device, such as a computing device or server, as examples.
- the information indicating the geometry of the object includes a wireframe built of triangles or other polygons that are used to approximate the geometric surface of the object. The more triangles that are used in the wireframe, sometimes the better the approximation.
- the wireframe triangular mesh may thus represent a 3D object data model.
- such 3D object data models may be provided by a server in a format suitable for display in a web browser or other application.
- the 3D object data models may be of any size and include and represent any number of objects.
- the method 200 includes receiving a plurality of images of the object.
- the plurality of images may be received by a device, such as a computing device or server, as examples.
- the plurality of images may be captured by a camera, such as a CCD TV camera as an example.
- the plurality of images may include images of the object taken from different angles.
- a camera may be set up in a stationary position, and the object may be placed on a turntable configured to rotate and a known angular velocity. The camera may then be configured to take a picture at set time intervals as the object rotates on the turntable.
- the object may be set up in a stationary position, and the camera may be configured to rotate around the object at a known angular velocity and may further be configured to take a picture at set time intervals.
- Other examples are possible as well.
- the method 200 includes associating a given image with a given triangle of the wireframe triangular mesh representing the geometric surface of the object. Each image is used to provide texture to the previously untextured 3D triangular mesh. This process may be performed by the server, such as by the object data model processor 112 as an example. Once the plurality of images of the object are received, the method continues with assigning a particular image of the plurality of images of the object to each individual triangle of the triangular mesh. This process may be referenced as the image assignment or the view assignment. The image assignment attempts to optimize the following objectives: (1) maximize the texture resolution of the assigned image for each triangle; (2) minimize the total length of the boundaries between texture models; and (3) minimize the boundary crossings in highly textured areas. These objectives will be discussed in more detail below with reference to FIG. 2B .
- FIG. 2B is a block diagram of another example method for seamless texturing of 3D object models.
- Method 250 shown in FIG. 2B presents an embodiment of a method that could be used by the system 100 of FIG. 1 , for example.
- Method 250 may include one or more operations, functions, or actions as illustrated by one or more of blocks 252 - 264 . Although the blocks are illustrated in a sequential order, these blocks may also be performed in parallel, and/or in a different order than those described herein. Also, the various blocks may be combined into fewer blocks, divided into additional blocks, and/or removed based upon the desired implementation.
- the method 250 includes receiving information indicating a geometry of an object and receiving a plurality of images of the object.
- the information indicating the geometry of the object may be received by a device, such as a computing device or server, as examples.
- the information indicating the geometry of the object may include a wireframe built of a plurality of triangles or other polygons that are used to approximate the geometric surface of the object.
- the wireframe triangular mesh may thus represent a 3D object data model.
- the plurality of images may be received by a device, such as a computing device or server, as examples.
- the plurality of images may be captured by a camera, such as a CCD TV camera as an example, and the plurality of images may include images of the object taken from different angles.
- the first objective in assigning images to triangles of a triangular mesh is to maximize the texture resolution of the assigned image for each individual triangle.
- This objective can be accomplished by block 254 of method 250 .
- the method 250 includes assigning images of the plurality of images that have a resolution above a threshold to triangles of the plurality of triangles. This may be performed to obtain an initial assignment which is locally optimal for every triangle.
- the object data model processor 112 may be configured to compute for each image the triangles that are visible in that particular image.
- the object data model processor 112 may project every triangle to all the images in which the object is visible and computes the resolution of the projected texture.
- the triangle may then be assigned to the image with the highest resolution.
- the visibility can be computed using z-buffer algorithm, as an example.
- the second objective in assigning images to triangles of a triangular mesh is to minimize the total length of the boundaries between texture models.
- Blocks 256 - 260 of method 250 describe an example process for optimizing this second objective.
- the method 250 includes determining adjacent polygons that are assigned to different images of the plurality of images so as to identify boundaries of images.
- a “boundary” may refer to an edge (e.g., two vertices in the mesh such that there is a single triangle that contains both) in which the two triangles sharing that edge are assigned to different images.
- the method 250 includes determining an image of the plurality of images that is assigned to a threshold number of polygons in a proximity of one of the adjacent polygons.
- the data model processor 112 may compute a set of triangles in G within a threshold distance d from t. The data model processor 112 may next compute the image I with the most triangles in the set of triangles assigned to that given image.
- the method 250 includes reassigning the image that is assigned to the threshold number of polygons to the adjacent polygons so as to modify the boundaries of images.
- the data model processor 112 may assign t to I.
- the process described in blocks 256 - 260 may thus reduce the number of boundaries of images, thereby reducing the number of transitions between image assignments.
- the process described in blocks 256 - 260 ignores the location of the boundaries, which may affect the visibility of the seam between triangles. This stems from the fact that when the boundary is in a texture region with a gradient difference between the texture regions that is below a threshold value, even relatively large misalignments of texture regions can be blended away with further processing to further eliminate seams between assigned images.
- the third objective in assigning images to triangles of a triangular mesh is to minimize the boundary crossings in highly textured areas.
- Blocks 262 - 264 of method 250 describe an example process for optimizing this third objective.
- the method 250 includes determining a mismatch factor for boundaries of the modified boundaries of images.
- a highly textured area is an area where an image experiences significant changes, such as a change in color, pixel value, or gradient.
- the processor may use a notion of mismatch factor of an image assignment of a model and implement a local and iterative method that in each step changes the assignment in a local region of the mesh in order to reduce a gradient variation between bordering assigned images.
- a function used for the mismatch factor may have the following two properties: (1) output high values when the transition between the texture in the separated views is smooth, i.e. the seam is invisible; and (2) output low values if the transition between the texture in the separated views is not smooth, i.e. the seam is visible.
- GP(t, v) may denote the 2D image gradient of the back-projection of view v to t.
- the method 250 includes reassigning images in boundaries having a mismatch factor above a threshold so as to reduce a gradient variation between the images in the modified boundaries.
- the data model processor 112 may determine a first seam that represents a separation of a first group of triangles assigned to a first image of the plurality of images, and a second group of triangles assigned to a second image of the plurality of images.
- the first seam may include a boundary of the first image and second image with a mismatch factor above the threshold.
- the first seam may further include two endpoints, p 1 and p 2 .
- the data model processor 112 may compute T, the set of triangles within a threshold graph distance d from a triangle t 1 assigned to the first image.
- the data model processor 112 may compute the mismatch factor for every adjacent triangle pair in T, using the first image and the second image as the views.
- the data model processor 112 may compute the shortest path from p 1 and p 2 , which may result in a second seam.
- the shortest path may be determined using Dijkstra's algorithm, with the mismatch factor determined above as the weights, and p 1 and p 2 as the source and sink vertices.
- the data model processor 112 may flip the image assignment of all the triangles between the second seam and the first seam, so that triangles that were assigned to the first image are reassigned to the second image, and vice versa.
- Other example embodiments are possible as well.
- FIGS. 3A-3B are conceptual illustrations of a 3D object model 300 in the image assignment stage.
- FIG. 3A represents an image assignment that maximizes the texture resolution of the assigned image for each individual triangle.
- Such an image assignment may be implemented using the process described in relation to block 254 of FIG. 2B , as an example.
- image resolution as the determining factor in assigning images to each triangle leads to groups of triangles textured from a common image, which may be referred to as surface regions. Because those surface regions are inhomogeneous, a large number of distorted boundaries exist between the assigned images.
- FIG. 3A illustrates a surface region of a 3D object model 300 .
- the 3D object model has a plurality of triangles 302 , 304 that create a triangular mesh that approximate the geometric surface of the 3D object model 300 .
- the shaded triangles 302 represent triangles assigned to a first image.
- the light triangles 304 represent triangles assigned to a second image.
- the shaded triangles 302 and the light triangles 304 are separated by boundaries 306 .
- an exemplary method may be applied which reassigns images to the triangles so that the surface regions are more homogenous.
- the exemplary method may include the method described in blocks 256 - 260 of FIG. 2B , as described above.
- FIG. 3B The effect of reassigning the images is shown in FIG. 3B .
- Three of the triangles 308 A-C are reassigned using the method described in blocks 256 - 260 of FIG. 2B .
- the resulting number of boundaries 306 therefore is reduced from 11 to 5 in this example, and the resulting surface regions are more homogenous.
- FIG. 4A illustrates a highly textured area with a seam.
- Algorithm 1 ignores the location of the boundaries, which can affect the visibility of the seam between triangles. For example, when the gradient difference between texture regions exceeds a threshold, even slight misalignments between the views can cause differences that are hard to conceal blending once the alignment is set. Thus, it is desirable to aim for an assignment that minimizes the transitions in texture regions with a lot of details when there is disagreement between the image assignments.
- a first area 402 is textured using a first image.
- a second area 404 is textured using a second image. The transition between the separated views results in a visible seam.
- the boundary 406 is identified as a problematic location because there is a disagreement between views and the mismatch factor exceeds a threshold, as discussed above.
- the original seam 408 includes two end points 410 A-B, which are described above in reference to FIG. 2B as p 1 and p 2 .
- the algorithm can select a new seam 412 between views that is constrained to be with same end points 410 A-B.
- the goal is to minimize the mismatch factor with the end points 410 A-B fixed, thereby moving the seam to a place that is less visible.
- the images assigned to triangles located between the original seam 408 and the new seam 412 are reassigned from the second image 404 to the first image 402 .
- System memory 520 and storage devices 540 are examples of computer storage media.
- Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device 500 . Any such computer storage media can be part of device 500 .
- a modulated data signal can be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.
- communication media can include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared (IR) and other wireless media.
- RF radio frequency
- IR infrared
- FIG. 6 is a schematic illustrating a conceptual partial view of an example computer program product that includes a computer program for executing a computer process on a computing device, arranged according to at least some embodiments presented herein.
Abstract
Description
MM triangle(t,v 1 ,v 2):=Sum(|GP(t,v 1)−GP(t,v 2)|).
This represents the sum of the absolute values of the difference between the gradients of the triangle as back-projected from v1 and v2.
MM boundary(t 1 ,t 2 ,v 1 ,v 2):=MM triangle(t 1 ,v 1 ,v 2)+MM triangle(t 2 ,v 1 ,v 2).
Note that only triangles on the boundaries of the assignment contribute to the sum.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/098,659 US9224238B2 (en) | 2013-12-06 | 2013-12-06 | Seamless texturing of 3D meshes of objects from multiple views |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/098,659 US9224238B2 (en) | 2013-12-06 | 2013-12-06 | Seamless texturing of 3D meshes of objects from multiple views |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150161812A1 US20150161812A1 (en) | 2015-06-11 |
US9224238B2 true US9224238B2 (en) | 2015-12-29 |
Family
ID=53271708
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/098,659 Active 2034-08-05 US9224238B2 (en) | 2013-12-06 | 2013-12-06 | Seamless texturing of 3D meshes of objects from multiple views |
Country Status (1)
Country | Link |
---|---|
US (1) | US9224238B2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10127715B2 (en) * | 2016-11-18 | 2018-11-13 | Zspace, Inc. | 3D user interface—non-native stereoscopic image conversion |
US10271043B2 (en) | 2016-11-18 | 2019-04-23 | Zspace, Inc. | 3D user interface—360-degree visualization of 2D webpage content |
US10691880B2 (en) * | 2016-03-29 | 2020-06-23 | Microsoft Technology Licensing, Llc | Ink in an electronic document |
US11003305B2 (en) | 2016-11-18 | 2021-05-11 | Zspace, Inc. | 3D user interface |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8314790B1 (en) * | 2011-03-29 | 2012-11-20 | Google Inc. | Layer opacity adjustment for a three-dimensional object |
US10347031B2 (en) * | 2015-03-09 | 2019-07-09 | Carestream Dental Technology Topco Limited | Apparatus and method of texture mapping for dental 3D scanner |
US9928645B2 (en) * | 2015-04-17 | 2018-03-27 | Microsoft Technology Licensing, Llc | Raster-based mesh decimation |
US9868212B1 (en) * | 2016-02-18 | 2018-01-16 | X Development Llc | Methods and apparatus for determining the pose of an object based on point cloud data |
US11222460B2 (en) * | 2019-07-22 | 2022-01-11 | Scale AI, Inc. | Visualization techniques for data labeling |
KR20220160197A (en) * | 2021-05-27 | 2022-12-06 | 한국전자통신연구원 | Texture mapping method using a reference image and, computing apparatus performing the method |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6300958B1 (en) * | 1998-07-17 | 2001-10-09 | T-Surf Corp. | Global constrained parameterization of triangulated surfaces |
US6469710B1 (en) * | 1998-09-25 | 2002-10-22 | Microsoft Corporation | Inverse texture mapping using weighted pyramid blending |
US20040227766A1 (en) * | 2003-05-16 | 2004-11-18 | Hong-Long Chou | Multilevel texture processing method for mapping multiple images onto 3D models |
-
2013
- 2013-12-06 US US14/098,659 patent/US9224238B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6300958B1 (en) * | 1998-07-17 | 2001-10-09 | T-Surf Corp. | Global constrained parameterization of triangulated surfaces |
US6469710B1 (en) * | 1998-09-25 | 2002-10-22 | Microsoft Corporation | Inverse texture mapping using weighted pyramid blending |
US20040227766A1 (en) * | 2003-05-16 | 2004-11-18 | Hong-Long Chou | Multilevel texture processing method for mapping multiple images onto 3D models |
Non-Patent Citations (2)
Title |
---|
Niem et al., "Mapping Texture From Multiple Camera Views onto 3D-Object Models for Computer Animation", Universitat Hannover, (1995). |
Szeliski, "Image Alignment and Stitching: A Tutorial", Microsoft Research, www.research.microsoft.com (2006). |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10691880B2 (en) * | 2016-03-29 | 2020-06-23 | Microsoft Technology Licensing, Llc | Ink in an electronic document |
US10127715B2 (en) * | 2016-11-18 | 2018-11-13 | Zspace, Inc. | 3D user interface—non-native stereoscopic image conversion |
US20190043247A1 (en) * | 2016-11-18 | 2019-02-07 | Zspace, Inc. | 3D User Interface - Non-native Stereoscopic Image Conversion |
US10271043B2 (en) | 2016-11-18 | 2019-04-23 | Zspace, Inc. | 3D user interface—360-degree visualization of 2D webpage content |
US10587871B2 (en) | 2016-11-18 | 2020-03-10 | Zspace, Inc. | 3D User Interface—360-degree visualization of 2D webpage content |
US10623713B2 (en) * | 2016-11-18 | 2020-04-14 | Zspace, Inc. | 3D user interface—non-native stereoscopic image conversion |
US10863168B2 (en) | 2016-11-18 | 2020-12-08 | Zspace, Inc. | 3D user interface—360-degree visualization of 2D webpage content |
US11003305B2 (en) | 2016-11-18 | 2021-05-11 | Zspace, Inc. | 3D user interface |
Also Published As
Publication number | Publication date |
---|---|
US20150161812A1 (en) | 2015-06-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9224238B2 (en) | Seamless texturing of 3D meshes of objects from multiple views | |
US9117267B2 (en) | Systems and methods for marking images for three-dimensional image generation | |
US10460510B2 (en) | Methods and systems for viewing a three-dimensional (3D) virtual object | |
US8497859B1 (en) | Display of information on or within a three-dimensional image | |
US8922576B2 (en) | Side-by-side and synchronized displays for three-dimensional (3D) object data models | |
US8436853B1 (en) | Methods and systems for acquiring and ranking image sets | |
US8817021B1 (en) | System for writing, interpreting, and translating three-dimensional (3D) scenes | |
US9852544B2 (en) | Methods and systems for providing a preloader animation for image viewers | |
US9665800B1 (en) | Rendering virtual views of three-dimensional (3D) objects | |
US10453164B2 (en) | Tile based computer graphics | |
US8416236B1 (en) | Calibration of devices used to generate images of a three-dimensional object data model | |
US9163938B2 (en) | Systems and methods for image acquisition | |
US9529826B2 (en) | Methods and systems for use of a database of three-dimensional (3D) object data models for search queries | |
US10210618B1 (en) | Object image masking using depth cameras or three-dimensional (3D) models | |
US8831366B1 (en) | Encoding and compressing three-dimensional (3D) object data models | |
US20130257856A1 (en) | Determining a View of an Object in a Three-Dimensional Image Viewer | |
US9147279B1 (en) | Systems and methods for merging textures | |
KR20140024361A (en) | Employing mesh files to animate transitions in client applications | |
US10891780B2 (en) | Methods and systems for viewing a three-dimensional (3D) virtual object | |
Zhang et al. | A geometry and texture coupled flexible generalization of urban building models | |
US8948498B1 (en) | Systems and methods to transform a colored point cloud to a 3D textured mesh | |
US9734579B1 (en) | Three-dimensional models visual differential | |
Fang et al. | 3D shape recovery of complex objects from multiple silhouette images | |
Koca et al. | A hybrid representation for modeling, interactive editing, and real-time visualization of terrains with volumetric features | |
Li et al. | Semantic volume texture for virtual city building model visualisation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WEILL, JONATHAN;AIGER, DROR;SIGNING DATES FROM 20131205 TO 20131206;REEL/FRAME:031728/0613 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |