CN110692244B - Maximum probability symbol based binary string compilation - Google Patents
Maximum probability symbol based binary string compilation Download PDFInfo
- Publication number
- CN110692244B CN110692244B CN201880035986.2A CN201880035986A CN110692244B CN 110692244 B CN110692244 B CN 110692244B CN 201880035986 A CN201880035986 A CN 201880035986A CN 110692244 B CN110692244 B CN 110692244B
- Authority
- CN
- China
- Prior art keywords
- probability
- symbol
- binary
- bits
- string
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/124—Quantisation
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/40—Conversion to or from variable length codes, e.g. Shannon-Fano code, Huffman code, Morse code
- H03M7/4006—Conversion to or from arithmetic code
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/13—Adaptive entropy coding, e.g. adaptive variable length coding [AVLC] or context adaptive binary arithmetic coding [CABAC]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/146—Data rate or code amount at the encoder output
- H04N19/149—Data rate or code amount at the encoder output by estimating the code amount by means of a model, e.g. mathematical model or statistical model
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/18—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a set of transform coefficients
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/184—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being bits, e.g. of the compressed video stream
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/70—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by syntax aspects related to video coding, e.g. related to compression standards
Abstract
Determining the number of bits to be used to encode the binarized video data includes: receiving a string of binary bits representing the binarized video data, each binary bit of the string of binary bits storing a symbol; and determining whether the symbol stored in each binary bit is a maximum probability symbol of a probability model that can be used to encode the binarized video data. In response to determining that the symbol stored in each bin is the most probable symbol, the probability model may be updated based on the size of the bin string to determine the number of bits to be used to encode the binarized video data. Otherwise, the number of bits is determined by the number of binary bits of the binary bit string storing symbols that are not the most probable symbol of the probabilistic model. After updating the probability model, the binarized video data is encoded into a bitstream using the number of bits.
Description
Background
A digital video stream may represent video using a series of frames or still images. Digital video can be used for a variety of applications including, for example, video conferencing, high definition video entertainment, video advertising, or sharing of user-generated video. Digital video streams can contain large amounts of data and consume a large amount of computing or communication resources of the computing device used to process, transmit, or store the video data. Various methods have been proposed to reduce the amount of data in a video stream, including encoding or decoding techniques.
Disclosure of Invention
A method for encoding binarized video data based on probability changes of a probability model according to an embodiment of the present disclosure includes receiving a string of binary bits representing the binarized video data. The string of binary bits includes binary bits that each store a symbol. The method also includes identifying the symbol stored in one of the bins as a current symbol. The method also includes determining whether the current symbol is a most probable symbol of the probabilistic model. The method also includes, in response to determining that the current symbol is not the most probable symbol, updating at least one of the probabilities. The probabilities include a first probability associated with a most probable symbol of the probabilistic model and a second probability associated with a least probable symbol of the probabilistic model. The method also includes, after updating the probability, determining whether the second probability is greater than the first probability. The method also includes, in response to determining that the second probability is greater than the first probability, switching the most probable symbol and the least probable symbol to reflect that the least probable symbol is a new most probable symbol of the probability model and to reflect that the most probable symbol is a new least probable symbol of the probability model. The method also includes determining a first number of bits to be used to encode the binarized video data using the new most probable symbol. The method also includes encoding the binarized video data into a bitstream using the first number of bits.
An apparatus for encoding binarized video data based on probability changes of a probability model according to an embodiment of the present disclosure includes a processor configured to execute instructions stored in a non-transitory storage medium. The instructions include instructions for receiving a string of binary bits representing the binarized video data. The string of binary bits includes binary bits that each store a symbol. The instructions also include instructions for identifying the symbol stored in one of the bins as a current symbol. The instructions also include instructions for determining whether the current symbol is a most probable symbol of the probabilistic model. The instructions further include instructions for: in response to determining that the current symbol is not the most probable symbol, updating the probability by decreasing a first probability associated with a most probable symbol of the probabilistic model and increasing a second probability associated with a least probable symbol of the probabilistic model. The instructions also include instructions for determining whether the second probability is greater than the first probability after updating the probability. The instructions further include instructions to: in response to a determination that the second probability is greater than the first probability: switching the maximum probability symbol and the minimum probability symbol to reflect that the minimum probability symbol is a new maximum probability symbol of the probability model and to reflect that the maximum probability symbol is a new minimum probability symbol of the probability model, using the new maximum probability symbol to determine a first number of bits to be used to encode the binarized video data, and using the first number of bits to encode the binarized video data into a bitstream. The instructions further include instructions to: in response to determining that the second probability is not greater than the first probability: determining a second number of bits to be used to encode the binarized video data based on at least one of the first probability or the second probability, and encoding the binarized video data into the bitstream using the second number of bits.
A method for encoding binarized video data based on probability changes of a probability model according to an embodiment of the present disclosure includes receiving a string of binary bits representing the binarized video data. The string of binary bits includes binary bits that each store a symbol. The method further includes updating a probability model that can be used to encode the binarized video data based on a determination that a current symbol stored in one of the bins is not a maximum probability symbol of the probability model. The method also includes determining whether the updated probabilistic model reflects: the probability that a symbol of the plurality of binary bits stored in the binary bits of the binary bit string is a least probability symbol of the probability model is greater than the most probability symbol. The method further includes, after determining that the updated probability model reflects the greater probability, determining a first number of bits to be used to encode the binarized video data based on the probability associated with the minimum probability symbol. The method also includes encoding the binarized video data into a bitstream using the first number of bits.
An apparatus for encoding binarized video data based on probability changes of a probability model according to an embodiment of the present disclosure includes a processor configured to execute instructions stored in a non-transitory storage medium. The instructions include instructions for receiving a string of binary bits representing the binarized video data, the string of binary bits including binary bits of respective stored symbols. The instructions also include instructions for updating a probability model usable to encode the binarized video data in a single clock cycle based on the size of the string of binary bits or the number of binary bits of the string of binary bits storing symbols other than the maximum probability symbol of the probability model, the updated probability model reflecting the number of bits to be used to encode the binarized video data. The instructions further include instructions for encoding the binarized video data into the bitstream using the number of bits after updating the probability model.
These and other aspects of the disclosure are disclosed in the following detailed description of the embodiments, the appended claims and the accompanying drawings.
Drawings
The description herein makes reference to the accompanying drawings described below wherein like reference numerals refer to like parts throughout the several views.
Fig. 1 is a diagram of a video encoding and decoding system.
Fig. 2 is a block diagram of an example of a computing device capable of implementing a transmitting station or a receiving station.
Fig. 3 is a diagram of a typical video stream to be encoded and subsequently decoded.
Fig. 4 is a block diagram of an encoder according to an embodiment of the present disclosure.
Fig. 5 is a block diagram of a decoder according to an embodiment of the present disclosure.
Fig. 6 is a flow diagram of an example of a technique for compiling binarized video data into a bitstream.
Fig. 7 is a flow diagram of an example of a technique for storing a binary string of the most probable symbol of the probability model for each binary bit to determine the number of bits to be used to compile the binarized video data.
FIG. 8 is a flow diagram of an example of a technique for updating the probability of the most probable symbol of a probabilistic model using elements of a lookup table.
Fig. 9 is a flow diagram of an example of a technique for determining the number of bits to be used to compile binarized video data for a string of binary bits that does not store the most probable symbol of the probabilistic model.
FIG. 10 is a flow diagram of an example of a technique for determining a probability change for a maximum probability symbol of a probabilistic model and a minimum probability symbol of the probabilistic model.
FIG. 11 is a block diagram of an entropy encoding component.
FIG. 12 is a block diagram of an entropy decoding component.
Fig. 13 is a diagram of a table reflecting the number of bits required to compile a maximum probability symbol or a minimum probability symbol of a probabilistic model based on a given state of the probabilistic model.
FIG. 14 is an illustration of a table reflecting the probability change for the most probable symbol and the least probable symbol of a probabilistic model.
Detailed Description
The video compression scheme may include: the method may include dividing each image or frame into smaller portions (such as blocks) and generating an output bitstream using techniques that limit the information included in the output for each block. The encoded bitstream can be decoded to recreate the source image from limited information. Typical video compression and decompression techniques use entropy coding to further reduce the number of bits required to encode or decode video data into or from a bitstream. For example, entropy coding may include using arithmetic coding or the like to reduce the amount of data that needs to be encoded into the bitstream after the data is transformed and quantized.
One example of an arithmetic coding technique is Context Adaptive Binary Arithmetic Coding (CABAC). In CABAC, each possible value of a symbol to be encoded or decoded is associated with a probability that the next symbol to be encoded or decoded will have the same value. For example, for a three symbol string AAB, the probability of a given symbol of the string having a value a is about 66% and the probability of the given symbol of the string having a value B is about 33%. The probability distribution of values of symbols to be encoded or decoded can be used to reduce the amount of data to be encoded or decoded, such as by using a smaller number of bits to code more likely symbols and using a larger number of bits to encode less likely symbols. For example, if the value of most symbols in the string is known to be a, each symbol having a value a can be encoded using a fraction of a bit, such as but not the 1 bit that is typically used to encode a value.
The values of the symbols associated with the video coding aspects (e.g., quantized transform coefficients, motion vector differences, etc.) can be stored in a bin string, where each bin of the bin string stores one of these values. The probability of different values changes after each binary bit is processed. For example, the CABAC engine can adjust the probability of a symbol value stored in the current bin based on the symbol value stored in the bin that has been processed. Thus, if a long string of a particular symbol value is compiled, the CABAC engine can adjust the probability of that particular symbol value to reflect that it is more likely to occur than it was originally.
However, this may also mean: the coding of the symbol value stored in the current bin depends on information associated with previously coded bins. In the case of entropy coding performed using hardware components, the dependency of the current bin on previously coded bins limits the data throughput to processing one bin per clock cycle. Given that a single bin string may include a large number of bins and that there may be a large number of bin strings to encode for each video block, entropy coding of video data, for example, may take a long time.
Embodiments of the present disclosure address such issues by entropy coding a bin string representing binarized video data based on the number of most probable symbols stored in the bins of the bin string. The binary bits of the binary bit string representing the binarized video data are processed to determine whether each binary bit stores a maximum probability symbol of a probability model that can be used to compile the binarized video data. If the symbol stored in each bin of the bin string is a maximum probability symbol, the probability model is updated based on the size of the bin string to determine a first number of bits to be used to compile the binarized video data. However, if the symbol stored in each bin of the bin string is not a most probable symbol, the probability model is updated based on the number of bins of the bin string that are not stored as most probable symbols to determine a second number of bits to be used to compile the binarized video data.
The probability model has a state that reflects the number of bits required to compile each of the maximum probability symbol of the probability model and the minimum probability symbol of the probability model. Upon determining that the symbol stored in the current binary bit is a most probable symbol, the state of the probabilistic model is increased such that the probability of the most probable symbol is increased and the probability of the least probable symbol is decreased. Upon determining that the symbol stored in the current binary bit is a least probability symbol, the state of the probability model is decreased such that the probability of the most probability symbol is decreased and the probability of the least probability symbol is increased. After processing the last bin of the bin string, the number of bits associated with the final state of the probabilistic model is used to determine the number of bits to be used to compile the binarized video data. In at least some cases, multiple binary bits can thus be processed in a single clock cycle, thereby increasing the speed for coding binarized video data using arithmetic coding techniques.
Further details of techniques for compiling binarized video data are initially described herein with reference to a system in which techniques for compiling binarized video data can be implemented, as shown in fig. 1-5. Fig. 1 is a diagram of a video encoding and decoding system 100. Transmitting station 102 can be, for example, a computer having an internal configuration such as the hardware depicted in fig. 2. However, other implementations of transmitting station 102 are possible. For example, the processing of transmitting station 102 can be distributed among multiple devices.
In one example, the receiving station 106 can be a computer having an internal configuration such as the hardware depicted in fig. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
Other implementations of the video encoding and decoding system 100 are possible. For example, one embodiment can omit network 104. In another embodiment, the video stream can be encoded and then stored for transmission to the receiving station 106 or any other device having memory at a later time. In one embodiment, the receiving station 106 receives an encoded video stream (e.g., via the network 104, a computer bus, and/or some communication pathway) and stores the video stream for later decoding. In an example embodiment, the real-time transport protocol (RTP) is used to transmit the encoded video over the network 104. In another embodiment, transport protocols other than RTP may be used (e.g., hypertext transfer protocol based (HTTP based) video streaming protocol).
When used in a videoconferencing system, for example, transmitter station 102 and/or receiving station 106 may include the ability to encode and decode video streams as described below. For example, receiving station 106 may be a video conference participant that receives an encoded video bitstream from a video conference server (e.g., transmitting station 102) to decode and view his or her own video stream, and further encodes and sends the encoded video bitstream to the video conference server for decoding and viewing by other participants.
Fig. 2 is a block diagram of an example of a computing device 200 capable of implementing a transmitting station or a receiving station. For example, computing device 200 may be capable of implementing one or both of transmitting station 102 and receiving station 106 of fig. 1. Computing device 200 can be in the form of a computing system that includes multiple computing devices, or in the form of one computing device (e.g., a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, etc.).
The processor 202 in the computing device 200 can be a conventional central processing unit. Alternatively, processor 202 can be another type of device or devices that can manipulate or process information now existing or hereafter developed. For example, although the disclosed embodiments can be practiced with one processor (e.g., processor 202) as shown, speed and efficiency advantages can be realized by using more than one processor.
In one implementation, the memory 204 in the computing device 200 can be a Read Only Memory (ROM) device or a Random Access Memory (RAM) device. However, other suitable types of storage devices can be used as the memory 204. The memory 204 can include code and data 206 that are accessed by the processor 202 using the bus 212. Memory 204 can further include an operating system 208 and application programs 210, the application programs 210 including at least one program that permits processor 202 to perform the techniques described herein. For example, the application programs 210 can include applications 1 through N, which further include a video compilation application that performs the techniques described herein. The computing device 200 can also include secondary storage 214, which can be, for example, a memory card for use with the mobile computing device. Because video communication sessions may contain a large amount of information, they can be stored in whole or in part in secondary storage 214 and loaded into memory 204 for processing as needed.
The computing device 200 can also include or be in communication with the following devices: an image sensing device 220 (e.g., a camera) or any other image sensing device 220 now existing or hereafter developed that is capable of sensing an image, such as an image of a user operating the computing device 200. The image sensing device 220 can be positioned such that it is pointed at the user operating the computing device 200. In an example, the position and optical axis of the image sensing device 220 can be configured such that the field of view includes an area directly adjacent to the display 218 and from which the display 218 is visible.
The computing device 200 can also include or be in communication with the following devices: a sound sensing device 222 (e.g., a microphone) or any other sound sensing device now existing or hereafter developed that is capable of sensing sound in the vicinity of the computing device 200. The sound sensing device 222 can be positioned such that it is directed toward a user operating the computing device 200 and can be configured to receive sound, e.g., a voice or other utterance, made by the user while the user is operating the computing device 200.
Although fig. 2 depicts the processor 202 and memory 204 of the computing device 200 as being integrated into one unit, other configurations can be utilized. The operations of processor 202 can be distributed across multiple machines (where individual machines can have one or more processors) that can be coupled directly or across a local area network or other network. Memory 204 can be distributed across multiple machines, such as a network-based memory or a memory among multiple machines that perform operations for computing device 200. Although depicted as one bus herein, the bus 212 of the computing device 200 can be comprised of multiple buses. In addition, secondary storage 214 can be directly coupled to other components of computing device 200 or accessible via a network, and can include an integrated unit such as a memory card or multiple units such as multiple memory cards. Computing device 200 can be implemented in a wide variety of configurations.
Fig. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded. The video stream 300 includes a video sequence 302. At the next level, the video sequence 302 includes a number of adjacent frames 304. Although three frames are depicted as adjacent frames 304, the video sequence 302 can include any number of adjacent frames 304. The adjacent frames 304 can then be further subdivided into individual frames, such as frame 306. At the next level, the frame 306 can be divided into a series of planes or sections 308. For example, section 308 can be, for example, a subset of frames that are permitted to be processed in parallel. The section 308 can also be a subset of frames that can separate the video data into separate colors. For example, the frame 306 of color video data can include a luminance plane and two chrominance planes. The sections 308 may be sampled at different resolutions.
Regardless of whether frame 306 is divided into sections 308, frame 306 may be further subdivided into blocks 310, which blocks 310 can contain, for example, data corresponding to 16x16 pixels in frame 306. The block 310 can also be arranged to include data from one or more sections 308 of pixel data. The block 310 can also be any other suitable size, such as 4x4 pixels, 8x8 pixels, 16x8 pixels, 8x16 pixels, 16x16 pixels, or larger. Unless otherwise indicated, the terms block and macroblock can be used interchangeably herein.
Fig. 4 is a block diagram of an encoder 400 according to an embodiment of the present disclosure. Encoder 400 can be implemented in transmitting station 102 as described above, such as by providing a computer software program stored in a memory, such as memory 204. The computer software program can include machine instructions that, when executed by a processor, such as processor 202, cause transmitting station 102 to encode video data in the manner described in fig. 4. Encoder 400 can also be implemented as dedicated hardware included, for example, in transmitting station 102. In one particularly desirable embodiment, the encoder 400 is a hardware encoder.
The encoder 400 has the following stages that perform various functions in the forward path (shown by the solid connecting lines) to generate an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy coding stage 408. The encoder 400 may also include a reconstruction path (shown by dashed connecting lines) to reconstruct frames used to encode future blocks. In fig. 4, the encoder 400 has the following stages that perform various functions in the reconstruction path: a dequantization stage 410, an inverse transform stage 412, a reconstruction stage 414 and a loop filtering stage 416. Other structural variations of the encoder 400 can be used to encode the video stream 300.
When the video stream 300 is presented for encoding, each adjacent frame 304, such as frame 306, can be processed in units of blocks. At the intra/inter prediction stage 402, each block can be encoded using either intra prediction (also referred to as intra prediction) or inter prediction (also referred to as inter prediction). In any case, a prediction block can be formed. In the case of intra-prediction, the prediction block may be formed from previously encoded and reconstructed samples in the current frame. In the case of inter-prediction, the prediction block may be formed from samples in one or more previously constructed reference frames.
Next, the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to generate a residual block (also referred to as a residual). The transform stage 404 uses a block-based transform to transform the residual into transform coefficients, e.g., in the frequency domain. The quantization stage 406 uses the quantizer value or quantization level to convert the transform coefficient into a discrete quantum value, referred to as a quantized transform coefficient. For example, the transform coefficients may be divided by the quantized values and truncated.
The quantized transform coefficients are then entropy encoded by the entropy encoding stage 408. The entropy encoded coefficients, as well as other information used to decode the block (which may include, for example, syntax elements such as those used to indicate the type of prediction used, the transform type, motion vectors, quantizer values, etc.), are then output to the compressed bitstream 420. The compressed bitstream 420 can be formatted using various techniques, such as Variable Length Coding (VLC) or arithmetic coding. The compressed bitstream 420 can also be referred to as an encoded video stream or an encoded video bitstream, and these terms will be used interchangeably herein.
A reconstruction path (shown by dashed lines) can be used to ensure that encoder 400 and decoder 500 (described below with respect to fig. 5) use the same reference frame to decode compressed bitstream 420. The reconstruction path performs functions similar to those performed during the decoding process (described below with respect to fig. 5), including dequantizing the quantized transform coefficients at a dequantization stage 410 and inverse transforming the dequantized transform coefficients at an inverse transform stage 412 to produce a block of derivative residues (also referred to as derivative residuals). At the reconstruction stage 414, the predicted block predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block. The loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
Other variations of the encoder 400 can be used to encode the compressed bitstream 420. In some implementations, a non-transform based encoder can quantize the residual signal directly without the transform stage 404 for certain blocks or frames. In some implementations, the encoder can cause the quantization stage 406 and the dequantization stage 410 to be combined in a common stage.
Fig. 5 is a block diagram of a decoder 500 according to an embodiment of the present disclosure. The decoder 500 can be implemented in the receiving station 106, for example, by providing a computer software program stored in the memory 204. The computer software program can include machine instructions that, when executed by a processor, such as processor 202, cause receiving station 106 to decode video data in the manner described in fig. 5. Decoder 500 can also be implemented in hardware included in, for example, transmitting station 102 or receiving station 106.
Similar to the reconstruction path of the encoder 400 discussed above, the decoder 500 in one example includes the following stages that perform various functions to generate the output video stream 516 from the compressed bitstream 420: an entropy decoding stage 502, a dequantization stage 504, an inverse transform stage 506, an intra/inter prediction stage 508, a reconstruction stage 510, a loop filtering stage 512, and a deblocking filtering stage 514. Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420.
When the compressed bitstream 420 is presented for decoding, data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients. Dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by quantizer values), and inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce derivative residuals that can be the same as the derivative residuals created by inverse transform stage 412 in encoder 400. Using the header information decoded from the compressed bitstream 420, the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 (e.g., at the intra/inter prediction stage 402).
At the reconstruction stage 510, the prediction block can be added to the derivative residual to create a reconstructed block. The loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. Other filtering can be applied to the reconstructed block. In this example, a deblocking filtering stage 514 is applied to the reconstructed block to reduce block distortion, and the result is output as a video stream 516. The output video stream 516 can also be referred to as a decoded video stream, and these terms will be used interchangeably herein. Other variations of the decoder 500 can be used to decode the compressed bitstream 420. In some implementations, the decoder 500 is capable of generating the output video stream 516 without the deblocking filtering stage 514.
Techniques for coding binarized video data will now be described with respect to fig. 6-10. For ease of explanation, the techniques described with respect to fig. 6-10 are each depicted and described as a series of steps or operations. However, steps or operations in accordance with the present disclosure can occur in various orders and/or concurrently. Additionally, other steps or operations not presented and described herein may be used. Moreover, not all illustrated steps or operations may be required to implement a technique in accordance with the disclosed subject matter.
Fig. 6 is a flow diagram of an example of a technique 600 for compiling binarized video data into a bitstream. Technique 600 can be implemented, for example, as a software program executable by a computing device such as transmitting station 102 or receiving station 106. For example, the software program can include machine-readable instructions that can be stored in a memory such as memory 204 or secondary storage 214 and which, when executed by a processor (such as processor 202), can cause a computing device to perform technique 600. The technique 600 can be implemented using dedicated hardware or firmware. For example, a hardware component configured to perform the technique 600 to encode or decode video data. As explained above, some computing devices may have multiple memories or processors and may be able to distribute the operations described in the technique 600 using multiple processors, memories, or both.
At 602, a string of binary bits is received. The binary string represents the binarized video data to be compiled. The binary bit string includes binary bits each storing a symbol. Each symbol of the binary bit string corresponds to a portion of the binarized video data. The binarized video data may represent quantized transform coefficients of a transform block. Those quantized transform coefficients are binarized to convert the quantized transform coefficient values into binary-valued symbols. For example, a syntax element may be binarized into one or more binary-valued symbols, each stored in a separate bin of a bin string. The binarized video data may be represented as codewords, e.g., unary codewords, truncated unary codewords, exponential golomb codewords, etc.
At 604, a determination is made as to whether the symbol stored in each bin of the bin string is the maximum probability symbol of a probability model that can be used to compile the binarized video data. The probabilistic model may be, for example, or otherwise refer to a context or context model, such as described in the h.264 video coding standard. The probability model reflects the probability of whether a binary value stored in a binary bit of the binary bit string is '1' or '0'. The probability model is selected from a plurality of available probability models, such as based on the probability of the most recently coded binarized video data or other binarized video data that is spatially adjacent (such as within a video block) to the current binarized video data to be coded. The probability model may be a probability model selected for coding a binary bit or bits of a binary bit string.
Each binary bit of the string of binary bits is associated with a probability model. The probability model has states or probabilities that are updated when symbols stored in binary bits are encoded or decoded according to the probability model. The probabilistic model has a maximum probability sign and a minimum probability sign. The most probable symbol is the binary value most likely to be coded using a probability model, whereas the least probable symbol is the binary value least likely to be coded using a probability model. The probability model thus reflects the statistical probability that the symbol stored in a binary bit of the binary bit string is the most probable symbol.
Determining whether the symbols stored in each binary digit of the binary digit string are most probable symbols can include scanning the symbols stored in each binary digit string and comparing them to the most probable symbols. This may be, for example, a pre-processing step using a probabilistic model. Determining whether the symbol stored in each binary bit of the string of binary bits is a most probable symbol can therefore also include selecting a probabilistic model and identifying its most probable symbol. For example, a set of motion vector differences may be encoded in relation to a set of quantized transform coefficients using different probability models.
At 606, the number of bits to be used to compile the binarized video data is determined based on the size of the bin string in response to determining that the symbol stored in each bin of the bin string is a most probable symbol. Determining the number of bits to be used to compile the binarized video data based on the size of the bin string includes updating the probability model based on the size of the bin string.
As described above, the probability model has a probability of being updated when a symbol stored in a binary bit is encoded or decoded according to the probability model. Updating the probability model changes the number of bits required to compile the binary-valued symbols. For example, the probability that the symbol is the most probable symbol of the probability model may reflect that 0.1538 bits are needed to compile the most probable symbol before processing the current binary bit. However, in response to determining that the symbol stored in the current binary bit is a most probable symbol, the probability model can be updated to increase the probability that the symbol compiled from the probability model is a most probable symbol. As a result, for example, the probability that the symbol is a most probable symbol may be updated to reflect that 0.1429 bits are now required to compile the most probable symbol.
Because it has been determined that each bin of the bin string stores a maximum probability symbol, the probability model can be updated once to determine the number of bits needed to compile the maximum probability symbol, rather than incrementally updating the probability on a per individual bin basis. That is, if each bin is processed separately, updates to the probability model that would otherwise be done can be combined to calculate the number of bits needed to compile the maximum probability symbol based on the bin size (e.g., based on the number of maximum probability symbols stored in the bins of the bin string). Implementations and examples for determining the number of bits to be used to compile binarized video data based on the size of the binary bit string are described below with respect to fig. 7.
Alternatively, at 608, in response to determining that the symbol stored in each bin of the bin string is not a most probable symbol, the number of bits to be used to compile the binarized video data is determined based on the number of least probable symbols stored in the bins of the bin string. Determining the number of bits to be used to compile the binarized video data based on the number of binary bits of the binary bit string storing symbols other than the most probable symbol comprises updating the probability model based on the number of binary bits of the binary bit string storing symbols other than the most probable symbol.
Because it has been determined that at least one bin of the bin string does not store the most probable symbol, the number of bins of the bin string that do not store the most probable symbol is determined. The probability model is updated based on the number of binary bits that do not store the most probable symbol to determine a new probability for the most probable symbol. For example, the probability that a symbol is the most probable symbol of the probability model may reflect that 0.4675 bits are needed to compile the most probable symbol and 2 bits are needed to compile the least probable symbol before processing the current binary bit. However, in response to determining that the symbol stored in the current binary bit is not a most probable symbol, the probability model can be updated to increase the probability that the symbol compiled from the probability model is not a most probable symbol. As a result, for example, the probability that a symbol is a most probable symbol may be updated to reflect that 0.48 bits are now needed to compile the most probable symbol and 1.75 bits are needed to compile the least probable symbol.
Updating the probabilistic model in this manner may also include determining that a probability of a least probability symbol of the probabilistic model is greater than a probability of a most probability symbol. In such a case, the minimum probability symbol can become a new maximum probability symbol of the probability model, and the maximum probability symbol can become a new minimum probability symbol of the probability model. Embodiments and examples for determining the number of bits to be used to compile binarized video data based on the number of least probability symbols stored in the binary bits of a binary bit string are described below with respect to fig. 9.
At 610, the binarized video data is compiled using either the number of bits determined at 606 or the number of bits determined at 608. For example, during encoding in which each bin of a bin string stores a maximum probability symbol, binarized video data is encoded into a space of a bitstream having a size equal to the number of bits determined based on the size of the bin string. In another example, during encoding in which each bin of the bin string does not store a maximum probability symbol, the binarized video data is encoded into a space of the bitstream having a size equal to the number of bits determined based on the number of bins that do not store maximum probability symbols.
The number of bits to be used to compile the binarized data may be determined in a single clock cycle in at least some cases. For example, the technique 600 can include determining a state that the probability model will be in based on a number of most probable symbols and/or least probable symbols stored in the binary bits of the binary bit string prior to accessing the lookup table. The technique 600 may then include accessing a one-time lookup table to determine a number of bits to use to compile the binary string based on the updated state information. That is, since each binary bit of the binary bit string is compiled according to the same probability model and the number of bits to be used to compile the binary bit string can be determined by updating the probability model before compilation, as little as one clock cycle may be required to compile the binary bit string. This may be particularly the case where each binary bit of the binary bit string stores the same binary value symbol.
In some embodiments, where each bin of the bin string stores a maximum probability symbol or a minimum probability symbol, the last bin at the end of the bin string can be processed differently than the rest of the bins of the bin string, except that it stores the opposite symbol. For example, the original binary digits of a binary digit string (e.g., the binary digits each storing a most or least probability symbol) are a first part of the binary digit string and may be referred to as a prefix, while the binary digits at the end storing the opposite symbol are a second part of the binary digit string and may be referred to as a suffix.
In such implementations, the technique 600 can include identifying the prefix and suffix prior to the determination at 604. The determination at 604 can then include determining whether each binary bit of the prefix stores the same sign (e.g., most probable sign or least probable sign) and whether the suffix stores the opposite sign. If so, the prefix and suffix may be processed separately (e.g., using the operations at 606 or 608, as applicable). In some embodiments, processing the prefix may switch the most probable symbol and the least probable symbol, e.g., as described below with respect to fig. 10. In some embodiments, processing the suffix may switch the most probable symbol and the least probable symbol. In some embodiments, processing the prefix may result in a first such switch, and processing the suffix may result in a second such switch.
In some implementations, the binarized video data may be used to indicate a saliency map for encoding to one or more video blocks of a bitstream. For example, a significance map can be specified for each transform block to be encoded into a bitstream. The significance map can indicate non-zero coefficients within the corresponding transform block, such as according to a scanning order used for encoding. Each coefficient in the transform block is represented by storing a binary bit of a binary-valued symbol. For example, when a binary bit stores 0, the coefficient represented by the binary bit is zero. However, when a bit stores a 1, the coefficient represented by the bit is non-zero. If the coefficient is non-zero, another flag is used to indicate whether the bin represents the last non-zero coefficient of the transform block.
A maximum of N (e.g., 15) contexts may be defined for the saliency map. The context of each bin is defined based on the position (e.g., in scan order) of the coefficients of the bin representation. Each context is thus inversely mapped to one or more coefficients. The contexts that will be used for significance map compilation and the number of times each context will be used can be determined by this inverse mapping.
A transform block can be represented as a tuple of (Run, Level, Last) values, where Run reflects the number of zero coefficients that appear in the transform block before the next non-zero coefficient, Level reflects the non-zero coefficient immediately after Run, and Last reflects whether Level is the Last non-zero coefficient in the transform block. Calculating the number of bits to be used to compile each coefficient flag for a given (Run, Level) pair will cause each such flag to be processed sequentially, as there may be dependencies between the terms of the pairs (e.g., having the property of sharing context across multiple coefficient indices for a transform block).
Alternatively, the number of times each context is accessed during a given Run can be calculated based on the initial scan position and the scan position of the nth coefficient and the Run preceding the nth coefficient. A set of binary digit strings can be defined, wherein each binary digit string includes a prefix of binary digits storing a value 0 and a suffix of binary digits storing a non-zero coefficient of a value 1. One such string of bits may be, for example, a string of bits processed by technique 600. For example, technique 600 can be performed to determine the number of bits required to compile a subset of the significance map of a transform block. Each of the N contexts that can be used to compile the transform block coefficients for the significance map can be stored in a hardware register to improve processing performance. The significance map may thus be processed in N cycles, where N represents the number of non-zero coefficients in the transform block.
In some implementations, the encoded binarized video data may be used to indicate coefficient levels for encoding to one or more video blocks of a bitstream. For example, in h.264, different coefficient levels of non-zero coefficients are specified for a prefix and a suffix. For the prefix, a truncated unary code is used, which represents coefficient levels from 1 to 15. For the suffix, an exponential golomb code is used, which represents coefficient levels greater than or equal to 16. The suffix is typically encoded without using probabilistic modeling as a bypass binary bit and, therefore, is coded using one bit.
Instead, two contexts are used per prefix. A first context is used for a first bit of the string of bits and a second context is used for each other bit of the string of bits. Because these contexts are independent of each other, the first binary digit and the rest of these binary digits can be processed in parallel. For example, a first binary digit of the prefix can be divided into a first portion of the string of binary digits, and the remaining binary digits of the prefix can be divided into a second portion of the string of binary digits. The technique 600 can be used to process the first portion and the second portion in parallel so that the entire string of binary bits can be processed in one clock cycle.
Fig. 7 is a flow diagram of an example of a technique 700 for storing a bin string of the most probable symbol of the probabilistic model for each bin to determine the number of bits to be used to compile the binarized video data. The technique 700 may be performed as part of a technique for compiling binarized video data. For example, technique 700 can represent operations performed at 606 of technique 600 shown in fig. 6.
At 702, it is determined that each bin of the bin string stores a maximum probability symbol of a probability model to be used to compile binarized video data represented by the bin string. This determination may reflect, for example, the determination made at 604 of technique 600 shown in FIG. 6. As such, in some implementations, the determination at 702 can be omitted from the technique 700.
At 704, a lookup table is generated. The lookup table is generated based on the size of the binary string and the initial probability of the most probable symbol of the probability model to be used to compile the binarized video data represented by the binary string. The lookup table includes elements corresponding to a plurality of bits of the binary bit string. These elements are associated with the probability that a symbol in a consecutive binary bit of the binary bits stored in the binary bit string is the most probable symbol. For example, the first element of the lookup table may correspond to the first bin of the bin string and be associated with an initial probability of a most probable symbol (e.g., reflecting the probability that a symbol stored in the first bin of the bin string is a most probable symbol). In another example, the last element of the lookup table may correspond to the last binary bit of the binary bit string and be associated with a final probability of the most probable symbol (e.g., reflecting the probability that the symbol stored in the last binary bit of the binary bit string is the most probable symbol).
The look-up table may be stored in static memory available to the hardware components performing the technique 600. The static memory may be, for example, a local Static Random Access Memory (SRAM), a Dynamic Random Access Memory (DRAM), or the like. For example, the lookup table may be accessed once per clock cycle by a processor of the hardware component or otherwise used by the hardware component. The number of bits associated with the elements of the look-up table may be stored in a Q (4) representation, for example, in the case where the fractional value is represented in terms of the number of processing bits. Each probabilistic model may be stored in memory using seven bits, six of which are reserved for different state numbers of the probabilistic model and a seventh bit reserved for the most probable symbol for that state.
The look-up table is used to update the probabilities of the most probable symbols, such as to determine the number of bits to be used to compile binarized video data represented by binary bit strings having binary bits each storing the most probable symbol. Updating the probability of the most probable symbol can include updating the initial probability of the most probable symbol based on the probability that a symbol in consecutive ones of the binary bits stored in the binary bit string is the most probable symbol.
At 706, a lookup table is used to determine a probability that the last bin of the bin string stores the most probable symbol. Compiling the most probable symbol can increase the state of the probabilistic model by one, which can reflect values from 0 to 62 inclusive. For a bin string having N bins each storing a maximum probability symbol, the final state after coding the N bins is 62 and the lesser of the initial state of the probability model plus N. In this way, the state for the Nth bit of the binary bit string can be identified. The state for the nth binary digit reflects the probability that the nth binary digit of the string of binary digits is the most probable symbol (e.g., the final probability of the most probable symbol). Embodiments and examples for updating the probability of the maximum probability symbol of a probability model using elements of a look-up table are described below with respect to fig. 8.
At 708, the number of bits to be used to compile the binarized video data is calculated. The number of bits is calculated based on the final probability of the most probable symbol. For example, calculating the number of bits to be used to encode the binarized video data can include multiplying the size of the binary bit string and the number of bits required to encode the most probable symbol according to the final probability of the most probable symbol. That is, the number of bits to be used to encode binarized video data represented by a binary bit string storing a maximum probability symbol per binary bit is equal to the product of the number of binary bits in the binary bit string and the number of bits required to encode the maximum probability symbol according to the final probability of the maximum probability symbol (e.g., according to the final state of a probability model generated by updating the probability model based on the size of the binary bit string).
Fig. 8 is a flow diagram of an example of a technique 800 for updating a probability of a maximum probability symbol of a probabilistic model using elements of a lookup table. The technique 800 may be performed as part of a technique for compiling binarized video data. For example, technique 800 can represent operations performed at 704 of technique 700 shown in fig. 7.
At 802, a symbol stored in a next binary digit of a string of binary digits is identified. For example, if the next binary digit is the first binary digit of a string of binary digits, the symbol stored in the first binary digit is identified. If the last processed bit of a bit is the first bit of the string, the symbol stored in the second bit of the string is identified. Identifying the symbols stored in the binary bits of the binary bit string comprises determining whether the symbols stored in the binary bits are the largest probability symbol or the smallest probability symbol of a probability model to be used to compile the binarized video data represented by the binary bit string.
At 804, a lookup table element is defined for storing the binary bits of the identified symbol. Defining the elements of the lookup table includes generating new entries of the lookup table to include one or more or a combination of: a value of a state associated with a probability that a bin storing the identified symbol is the most probable symbol, an index of the bin within a bin string, a number of bits to be used to compile the most probable symbol based on the probability associated with the state for the element, and the like. For example, the elements of the lookup table may be defined as:
where N is the index of the bin storing the identified symbol (e.g., the number of bins storing the most probable symbol in a bin string from top to bottom and including the bin storing the identified symbol), S is the state of the defined element, BitsMPS is the number of bits required to compile the most probable symbol in state S, and BitsPerMPSString [ N ] [ S ] is the total number of bits required to compile a bin string from top to bottom and including the bin storing the identified symbol.
At 806, the probability model to be used to compile the binarized video data represented by the binary string is updated based on the probabilities of the newly defined elements. Updating the probability model can include increasing the state associated with the probability of the most probable symbol by one based on adding a new element to the look-up table. In this way, the probability of the most probable symbol of the probabilistic model can be updated according to the probability that a symbol stored in consecutive binary bits of the binary bit string is the most probable symbol.
Fig. 9 is a flow diagram of an example of a technique 900 for determining the number of bits to be used to compile binarized video data for a string of binary bits for which the most probable symbol of the probabilistic model is not stored for some binary bits. The technique 900 may be performed as part of a technique for compiling binarized video data. For example, the technique 900 can represent the operations performed at 608 of the technique 600 shown in fig. 6.
At 902, probabilities of a most probable symbol and a least probable symbol of a probabilistic model are updated. The probability of the least probability symbol is updated according to the probability that a symbol of a plurality of binary bits stored in the binary bits of the binary bit string is the least probability symbol. The probability of updating the minimum probability symbol by the state of the probability model is reduced according to whether the symbol stored in the current binary bit is the minimum probability symbol. For example, if the current binary bit stores the minimum probability sign, the state of the probabilistic model is decreased by one.
The probability of the most probable symbol is updated according to the probability that a symbol of the plurality of binary bits stored in the binary bit string is the most probable symbol. The probability of updating the most probable symbol by the state of the probability model is increased according to whether the symbol stored in the current binary bit is the most probable symbol. For example, if the current binary bit stores the most probable symbol, the state of the probabilistic model is increased by one.
The probability of the most probable symbol and the least probable symbol (e.g., an increase or decrease in the state of the probabilistic model) can be performed by accessing a lookup table associated with the probabilistic model. For example, the lookup table may be stored in local SRAM or other memory accessible by the component performing the update.
At 904, during the updating of the probabilities for the most probable symbol and the least probable symbol, a determination is made as to whether the most probable symbol and the least probable symbol have been toggled. For example, this determination can be made after each update to the probabilities of the least probability symbol and the most probability symbol. Alternatively, this determination can be made at the end after updating it N times.
The most probable symbol and the least probable symbol switch when the probability that a symbol stored in a binary bit of the binary bit string is the least probable symbol is greater than the probability that such a symbol is the most probable symbol. Thus, determining that the most probable symbol and the least probable symbol have switched includes comparing the probabilities of the most probable symbol and the least probable symbol (e.g., after updating them) to determine whether the probability of the least probable symbol is greater than the probability of the most probable symbol.
As a result of the switching, the least probability symbol becomes the most probability symbol of the probability model, and the most probability symbol becomes the least probability symbol of the probability model. After switching, or after determining not to switch the most probable symbol and the least probable symbol, if there are additional bits in the bin string to process (e.g., to use to update the probabilities of the most probable symbol and/or the least probable symbol), technique 900 returns to 902. Embodiments and examples for determining that updating the probability of the least probable symbol based on symbols stored in identifiable ones of the number of binary bits is such that the probability of the least probable symbol is greater than the probability of the most probable symbol are described below with respect to fig. 10.
At 906, the number of bits to be used to compile the binarized video data is calculated. The number of bits is calculated based on the probability of the updated minimum probability symbol and the probability of the updated maximum probability symbol. For example, after updating the probabilities of the minimum probability symbol and the maximum probability symbol based on the full binary bit string, the probabilistic model will be in the final state. The final state will be associated with the number of bits required to compile each of the most probable symbol and the least probable symbol. The number of bits can thus be calculated by adding a first value and a second value, wherein the first value is the product of the number of bits required for coding the maximum probability symbol and the number of maximum probability symbols stored in the binary bit string, and wherein the second value is the product of the number of bits required for coding the minimum probability symbol and the number of minimum probability symbols in the binary bit string.
In some embodiments, a loop of operations that begins with identifying the next symbol and ends with determining whether the probability of the least probable symbol is greater than the probability of the most probable symbol can be omitted. Instead of such omitted operations, the technique 1000 may instead include scanning some or all of the symbols stored in the binary bits of the binary bit string to determine whether there are a number of least probability symbols that will switch the most and least probability symbols.
For example, after scanning the least-probability symbol, a lookup table can be accessed to determine whether reducing the state of the probabilistic model based on the least-probability symbol toggles the most-probability symbol and the least-probability symbol. This may occur in each of the least probable symbols that are scanned until it is determined that a handoff will occur. Alternatively, the number of look-up table accesses can be compared to the current state of the probability model to determine whether a switch will occur based on the number of minimum probability symbols stored in the binary string.
In such an embodiment, calculating the number of bits to be used to compile the binarized video data can include dividing the string of binary bits into two portions, where the first portion corresponds to the binary bits processed before the most probable symbol and the least probable symbol are switched and the second portion corresponds to the binary bits post-processed. For example, the first portion may start at the first bit of the string of bits and end at the bit immediately preceding the bit of the string of bits storing the symbol that caused the switch when processed, or alternatively, end at the bit storing the symbol that caused the switch when processed. In another example, the second portion may begin at the binary digit storing the symbol that caused the switch when processed, or alternatively, begin at the binary digit immediately thereafter and end at the last binary digit of the string of binary digits.
A first bit value can be calculated for a first portion of the binary bit string. A second bit value can be calculated for a second portion of the binary bit string. For example, the first bit value and/or the second bit value can be calculated by determining a first value and a second value such as each of the above. The first bit value and the second bit value can then be added together to calculate the number of bits to be used to compile the binarized video data.
FIG. 10 is a flow diagram of an example of a technique 1000 for determining a probability change for a most probable symbol and a least probable symbol of a probabilistic model 1000. The technique 1000 may be performed as part of a technique for compiling binarized video data. For example, the technique 1000 can represent operations performed at 902 and 904 of the technique 900 shown in fig. 9.
At 1002, a symbol stored in a next binary digit of a string of binary digits is identified. For example, if the next binary digit is the first binary digit of a string of binary digits, the symbol stored in the first binary digit is identified. If the last processed bit of a bit is the first bit of the string, the symbol stored in the second bit of the string is identified. At 1004, it is determined whether the identified symbol is a maximum probability symbol or a minimum probability symbol of a probability model to be used to compile the binarized video data represented by the binary bit string.
At 1006, in response to determining that the identified symbol is a most probable symbol, the probability of the most probable symbol is increased and the probability of the least probable symbol is decreased. For example, increasing the probability of the most probable symbol and decreasing the probability of the least probable symbol can include increasing the state of the probability model, such as by accessing a lookup table associated with the probability model.
At 1008, in response to determining that the identified symbol is not a most probable symbol, the probability of the most probable symbol is decreased and the probability of the least probable symbol is increased. For example, decreasing the probability of the most probable symbol and increasing the probability of the least probable symbol can include decreasing the state of the probability model, such as by accessing a lookup table associated with the probability model. At 1010, it is determined whether the change in probability at 1006 or 1008 causes the probability of the least probable symbol to be greater than the probability of the most probable symbol.
In response to determining that the change in probability does not cause the probability of the least probability symbol to be greater than the probability of the most probability symbol, the technique 1000 returns to 1002 to identify the symbol stored in the next binary bit of the string of binary bits. For example, if the current state of the probabilistic model is 1, such that the probability of the most probable symbol is only slightly greater than the probability of the least probable symbol and the symbol identified at 1002 is the least probable symbol, the state of the probabilistic model is reduced to 0, such that the probabilities of the most probable symbol and the least probable symbol become equal, but the most probable symbol and the least probable symbol do not switch.
At 1012, the most probable symbol and the least probable symbol are switched in response to determining that the change in probability does cause the probability of the least probable symbol to be greater than the probability of the most probable symbol. For example, if the current state of the probabilistic model is 0 and the symbol identified at 1002 is the least probability symbol, then the most probability symbol and the least probability symbol switch and the state of the probabilistic model is increased to 1.
In some embodiments, a new look-up table is generated after the most probable symbol and the least probable symbol switch. For example, a new lookup table can be generated as described in the technique 800 shown in fig. 8 or similar to that described in the technique 800 shown in fig. 8. For example, an element can be defined to reference based on a new maximum probability symbol: a state of the probability model for the element, a number of bits required to compile a new maximum probability symbol in the state, a number of bits required to compile a new minimum probability symbol in the state, and the like, or a combination thereof.
Fig. 11 is a block diagram of an entropy encoding component 1100. Entropy encoding component 1100 may be used to encode input video data 1102 (e.g., binarized video data) into compressed bitstream 1104, for example, using all or a portion of technique 600 shown in fig. 6. The entropy encoding component 1100 may, for example, represent a component for performing one or more operations of the entropy encoding stage 408 shown in fig. 4. Input video data 1102 may, for example, represent transform coefficients output by quantization stage 406 shown in fig. 4. The compressed bitstream 1104 may, for example, represent the compressed bitstream 420 shown in fig. 4.
The binarized video data is output to binary string processing module 1108. Each symbol of the binarized video data is stored in a separate bin of the bin string. The binary string processing module 1108 can process symbols, for example, stored in each binary bit of a binary string to determine the values of those symbols. The bin string processing module 1108 can also determine, select, or otherwise identify a probability model to be used to encode the binarized video data represented by the bin string. For example, there may be multiple probability models that can be used to encode data based on one or more contexts of the data.
The output of the binary string processing module 1108 is received by a probability model module 1110. The probability model module 1110 updates the probability model identified by the binary string processing module 1108 based on the values of the symbols stored in the binary bits of the binary string. Based on the update, the probability model module 1110 can determine the number of bits to be used to encode the binarized video data. The binarized video data is then encoded into a space where the compressed bitstream 1104 is equal to the number of bits determined by probability model module 1110.
The implementation of the entropy encoding component 1100 may differ from the implementation shown and described with respect to fig. 11. In some embodiments, a probability model to be used to encode the binarized video data may be determined, selected, or otherwise identified. In some implementations, the probability model module 1110 can output information indicative of the probability model after updating (e.g., the probabilities of its most and least probability symbols, its final state, the number of bits associated with each of the most and least probability symbols in the final state, etc.), such as to an arithmetic coding module (not shown). The arithmetic coding module can process the information received from the probability model module 1110 to determine the number of bits to be used to encode the binarized video data.
Fig. 12 is a block diagram of an entropy decoding component 1200. The entropy encoding component 1100 may be used to decode binarized video data from the compressed bitstream 1202 into output video data 1204, e.g., using all or a portion of the technique 600 shown in fig. 6. The entropy decoding component 1200 may, for example, represent a component for performing one or more operations of the entropy decoding stage 502 shown in fig. 5. The compressed bitstream 1202 may, for example, represent the compressed bitstream 420 shown in fig. 5. The output video data 1204 may, for example, represent data output to one or more of the dequantization stage 504 or intra/inter prediction stage 508 shown in fig. 5.
The entropy decoding component 1200 receives the compressed bitstream 1202 and decodes the plurality of symbols encoded therein using a symbol decoding module 1206. The symbol decoding module 1206 can, for example, decode the entire binary string of symbols worth encoding from the bit stream 1202. Decoding the symbols of the entire bin string can include determining a number of most probable symbols in the bin string and a number of least probable symbols in the bin string. Decoding the symbol may also include determining, selecting, or otherwise identifying a probability model to be used to decode the symbol into the output video data 1204.
The output of the symbol decoding module 1206 is received by a probability model module 1208. The probability model module 1208 updates the probability model identified by the symbol decoding module 1206 based on the values of the symbols stored in the binary bits of the binary bit string. Based on the update, the probability model module 1208 can determine the number of bits to be used to decode the binarized video data. The binarized video data is then decoded to output video data 1204 using the number of bits determined by the probability model module 1208.
The implementation of the entropy decoding component 1200 may differ from the implementation shown and described with respect to fig. 12. In some implementations, the compressed bitstream 1202 may not include data indicating a probability model to be used to decode the binarized video data.
Fig. 13 is an illustration of a table 1300 that reflects the number of bits required to compile a maximum probability symbol or a minimum probability symbol of a probabilistic model based on a given state of the probabilistic model 1300. Table 1300 includes 63 entries. Each entry includes a value of a state of the probability model, a number of bits required to compile a maximum probability symbol in the state, and a number of bits required to compile a minimum probability symbol in the state.
The table 1300 may represent, for example, data stored in a lookup table generated or otherwise used in conjunction with determining the number of bits to use to encode or decode binarized video data into or from a bitstream. Alternatively, in another example, such a lookup table may include only a portion of table 1300, such as entries defined based on the initial state of the probabilistic model and the state to which the probabilistic model is updated.
Fig. 14 is an illustration of a table 1400, the table 1400 reflecting probability changes for the most probable symbol and the least probable symbol of a probabilistic model. In table 1400, S denotes an initial state of the probability model, and C denotes the number of minimum probability symbols that would switch the maximum probability symbol and the minimum probability symbol if processed consecutively from the initial state S.
The above-described aspects of encoding and decoding illustrate some examples of encoding techniques and decoding techniques. However, it should be understood that encoding and decoding (as those terms are used in the claims) can mean compression, decompression, transformation, or any other processing or alteration of data.
The word "example" is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as "exemplary" is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word "example" is intended to present concepts in a concrete fashion. As used in this application, the term "or" is intended to mean an inclusive "or" rather than an exclusive "or". That is, unless specified otherwise or clearly indicated otherwise by context, the statement "X includes a or B" is intended to mean any of its naturally inclusive permutations. That is, if X comprises A; x comprises B; or X includes both a and B, then "X includes a or B" is satisfied under any of the above examples. In addition, the articles "a" and "an" as used in this application and the appended claims should generally be construed to mean "one or more" unless specified otherwise or clear from context to be directed to a singular form. Furthermore, the use of the term "embodiment" or the term "one embodiment" throughout this disclosure is not intended to mean the same embodiment or embodiment, unless so described.
Embodiments of transmitting station 102 and/or receiving station 106 (as well as algorithms, methods, instructions, etc. stored thereon and/or executed thereby, including by encoder 400 and decoder 500) can be implemented in hardware, software, or any combination thereof. The hardware can include, for example, a computer, an Intellectual Property (IP) core, an Application Specific Integrated Circuit (ASIC), a programmable logic array, an optical processor, a programmable logic controller, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit. In the claims, the term "processor" should be understood to encompass any of the above hardware, alone or in combination. The terms "signal" and "data" are used interchangeably. In addition, portions of transmitting station 102 and receiving station 106 need not necessarily be implemented in the same manner.
Additionally, in one aspect, transmitting station 102 or receiving station 106 can be implemented, for example, using a general purpose computer or a general purpose processor having a computer program that, when executed, performs any of the various methods, algorithms, and/or instructions described herein. Additionally or alternatively, for example, a special purpose computer/processor can be utilized, which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein.
Additionally, all or a portion of implementations of the present disclosure can take the form of, for example, a computer program product accessible from a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be, for example, any device that can tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable media are also available.
Further embodiments are summarized in the following examples.
Example 1: a method for encoding binarized video data based on changes in probability of a probability model, the method comprising: receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols; identifying the symbol stored in one of the bits as a current symbol; determining whether the current symbol is a most probable symbol of the probabilistic model; in response to determining that the current symbol is not the most probable symbol, updating at least one of the probabilities, the probabilities comprising a first probability associated with a most probable symbol of the probabilistic model and a second probability associated with a least probable symbol of the probabilistic model; after updating the probability, determining whether the second probability is greater than the first probability; in response to determining that the second probability is greater than the first probability, switching the most probable symbol and the least probable symbol to reflect that the least probable symbol is a new most probable symbol of the probability model and to reflect that the most probable symbol is a new least probable symbol of the probability model; determining a first number of bits to be used to encode the binarized video data using the new most probable symbol; and encoding the binarized video data into a bitstream using the first number of bits.
Example 2: the method of example 1, further comprising: in response to determining that the current symbol is the most probable symbol, updating the probability by increasing the first probability and decreasing the second probability; determining a second number of bits to be used to encode the binarized video data based on at least one of the first probability or the second probability after updating the probabilities by increasing the first probability and decreasing the second probability; and encoding the binarized video data into the bitstream using the second number of bits.
Example 3: the method of example 1, further comprising: in response to determining that the second probability is not greater than the first probability after updating at least one of the probabilities, determining a third number of bits to be used to encode the binarized video data based on at least one of the first probability or the second probability; and encoding the binarized video data into the bitstream using the third number of bits.
Example 4: the method of any of examples 1-3, wherein using the new most probable symbol to determine the first number of bits to use to encode the binarized video data comprises: determining the first number of bits based on a third one of the probabilities, the third probability being associated with a new most probable symbol of the probabilistic model.
Example 5: the method of example 4, wherein the third probability is the second probability.
Example 6: the method of example 1, wherein using the new maximum probability symbol to determine the first number of bits to use to encode the binarized video data comprises: calculating a first bit value for a first portion of the string of binary bits starting at a first binary bit of the string of binary bits and ending at a binary bit immediately preceding one of the binary bits storing the current symbol, the first bit value being based on the first probability after updating the probability; calculating a second bit value for a second portion of the bin string beginning at one of the bins storing the current symbol and ending at a last bin of the bin string, the second bit value based on the second probability after updating the probabilities; and calculating the first number of bits as a sum of the first bit value and the second bit value.
Example 7: the method of example 1, wherein updating at least one of the probabilities in response to determining that the current symbol is not a most probable symbol of the probabilistic model comprises: decreasing the first probability; and increasing the second probability.
Example 8: the method of example 1, wherein the first probability reflects a probability that a symbol of a plurality of binary bits stored in a binary bit of the string of binary bits is the most probable symbol and the second probability reflects a probability that the symbol of a plurality of binary bits stored in a binary bit of the string of binary bits is the least probable symbol.
Example 9: the method of any of examples 1-8, wherein at least one of the probabilities is updated in a single clock cycle.
Example 10: an apparatus for encoding binarized video data based on probability changes of a probability model, the apparatus comprising: a processor configured to execute instructions stored in a non-transitory storage medium to: receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols; identifying the symbol stored in one of the bits as a current symbol; determining whether the current symbol is a most probable symbol of the probabilistic model; in response to determining that the current symbol is not the most probable symbol, updating the probability by decreasing a first probability associated with a most probable symbol of the probabilistic model and increasing a second probability associated with a least probable symbol of the probabilistic model; after updating the probability, determining whether the second probability is greater than the first probability; in response to a determination that the second probability is greater than the first probability: switching the most probable symbol and the least probable symbol to reflect that the least probable symbol is a new most probable symbol of the probabilistic model and to reflect that the most probable symbol is a new least probable symbol of the probabilistic model; determining a first number of bits to be used to encode the binarized video data using the new most probable symbol; and encoding the binarized video data into a bitstream using the first number of bits; and in response to a determination that the second probability is not greater than the first probability: determining a second number of bits to be used to encode the binarized video data based on at least one of the first probability or the second probability; and encoding the binarized video data into the bitstream using the second number of bits.
Example 11: the apparatus of example 10, wherein the instructions include instructions to: in response to a determination that the current symbol is the most probable symbol, updating the probability by increasing the first probability and decreasing the second probability.
Example 12: the apparatus of example 11, wherein the instructions include instructions to: determining a third number of bits to be used to encode the binarized video data based on at least one of the first probability or the second probability after updating the probabilities by increasing the first probability and decreasing the second probability; and encoding the binarized video data into the bitstream using the third number of bits.
Example 13: the apparatus of any of examples 10 to 12, wherein the instructions to determine the first number of bits to be used to encode the binarized video data using the new maximum probability sign comprise instructions to: determining the first number of bits based on a third one of the probabilities, the third probability being associated with a new most probable symbol of the probabilistic model.
Example 14: the apparatus of example 10 or 11, wherein the instructions to determine the first number of bits to use to encode the binarized video data using the new most probable symbol include instructions to: calculating a first bit value for a first portion of the string of binary bits starting at a first binary bit of the string of binary bits and ending at a binary bit immediately preceding one of the binary bits storing the current symbol, the first bit value being based on the first probability after updating the probability; calculating a second bit value for a second portion of the bin string starting at one of the bins storing the current symbol and ending at a last bin of the bin string, the second bit value based on the second probability after updating the probabilities; and calculating the first number of bits as a sum of the first bit value and the second bit value.
Example 15: the apparatus of any of examples 10 to 14, wherein the first probability reflects a probability that a symbol of a plurality of binary bits stored in a binary bit of the string of binary bits is the most probable symbol and the second probability reflects a probability that the symbol of a plurality of binary bits stored in a binary bit of the string of binary bits is the least probable symbol.
Example 16: a method for encoding binarized video data based on probability changes of a probability model, the method comprising: receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols; updating a probability model that can be used to encode the binarized video data based on a determination that a current symbol stored in one of the bins is not a maximum probability symbol of the probability model; determining whether the updated probabilistic model reflects: a probability that a symbol of a plurality of binary bits stored in a binary bit of the binary bit string is a least probability symbol of the probability model is greater than the most probability symbol; after determining that the updated probability model reflects the greater probability, determining a first number of bits to be used to encode the binarized video data based on the probability associated with the least probable symbol; and encoding the binarized video data into a bitstream using the first number of bits.
Example 17: the method of example 16, further comprising: in response to determining that the updated probability model reflects the greater probability and prior to determining the first number of bits, switching the most probable symbol and the least probable symbol to reflect that the least probable symbol is a new most probable symbol and the most probable symbol is a new least probable symbol.
Example 18: the method of example 17, wherein determining the first number of bits to use to encode the binarized video data based on the probability associated with the minimum probability symbol comprises: determining the first number of bits based on a probability associated with the new most probable symbol.
Example 19: the method of example 18, further comprising: after switching the most probable symbol and the least probable symbol and before determining the first number of bits, updating the probability associated with the new most probable symbol based on a determination that a next symbol in a next binary bit stored in the binary bits is the new most probable symbol, wherein determining the first number of bits to be used to encode the binarized video data based on the probability associated with the least probable symbol comprises using the updated probability associated with the new most probable symbol.
Example 20: the method of example 16, further comprising: after determining that the updated probability model does not reflect the greater probability, determining a second number of bits to be used to encode the binarized video data based on the probability associated with the most probable symbol; and encoding the binarized video data into a bitstream using the second number of bits.
The above-described embodiments, implementations, and aspects have been described in order to facilitate understanding of the present disclosure and not to limit the present disclosure. On the contrary, the disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation as permitted under the law so as to encompass all such modifications and equivalent arrangements.
Claims (20)
1. A method for determining the number of bits to be used to encode binarized video data, said method comprising:
receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols;
determining whether a symbol stored in each bin of the bin string is a maximum probability symbol of a probability model that can be used to encode the binarized video data;
in response to determining that the symbol stored in each bin of the bin string is the most probable symbol, updating the probability model based on the size of the bin string to determine a first number of bits to be used to encode the binarized video data; and
after updating the probability model based on the size of the binary string to determine a first number of bits to be used to encode the binarized video data, encoding the binarized video data into a bitstream using the first number of bits.
2. The method of claim 1, wherein updating the probability model based on the size of the bin string to determine the first number of bits to be used to encode the binarized video data comprises:
updating an initial probability of the most probable symbol according to a probability that a symbol in a consecutive binary bit of the binary bits of the binary bit string is the most probable symbol, the initial probability of the most probable symbol reflecting a probability that a symbol stored in a first binary bit of the binary bit string is the most probable symbol; and
calculating the first number of bits based on a final probability of the most probable symbol, the final probability of the most probable symbol being determined based on the updating.
3. The method of claim 2, further comprising:
generating a lookup table based on the size of the string of binary digits and the initial probability of the most probable symbol, the lookup table including elements corresponding to a plurality of the binary digits of the string of binary digits and associated with probabilities that symbols in consecutive ones of the binary digits stored in the string of binary digits are the most probable symbol,
wherein a first one of the elements corresponds to a first bin of the bin string and is associated with the initial probability of the most probable symbol, a last one of the elements corresponds to a last bin of the bin string and is associated with the final probability of the most probable symbol, and
wherein updating the initial probability of the most probable symbol based on the probabilities that the symbols in the consecutive ones of the binary bits stored in the binary bit string are the most probable symbol comprises using the lookup table.
4. The method of claim 2, wherein calculating the first number of bits based on the final probability of the most probable symbol comprises:
multiplying the size of the binary bit string with the number of bits required to encode the most probable symbol according to the final probability of the most probable symbol.
5. The method of claim 1, wherein the symbol stored in each of a plurality of binary bits is a least probability symbol of the probability model, wherein the method further comprises updating the probability model to determine a second number of bits to be used to encode the binarized video data based on the number of binary bits of the binary bit string storing symbols other than the most probability symbol, comprising:
updating a probability of the least probability symbol and a probability of the most probability symbol, the probability of the least probability symbol being updated according to a probability that a symbol of the plurality of binary bits stored in the binary bits of the binary bit string is the least probability symbol, the probability of the most probability symbol being updated according to a probability that a symbol of the plurality of binary bits stored in the binary bits of the binary bit string is the most probability symbol; and
calculating the second number of bits based on the updated probability of the least probable symbol and the updated probability of the most probable symbol.
6. The method of claim 5, wherein updating the probabilities of the least probable symbol and the most probable symbol comprises:
determining a probability of updating the least probable symbol based on a symbol stored in an identifiable bin of a plurality of bins such that the probability of the least probable symbol is greater than the probability of the most probable symbol,
wherein the maximum probability symbol and the minimum probability symbol are switched to reflect that the minimum probability symbol is a new maximum probability symbol and the maximum probability symbol is a new minimum probability symbol when the probability of the minimum probability symbol becomes greater than the probability of the maximum probability symbol.
7. The method of claim 6, wherein calculating the second number of bits based on the updated probability of the least probable symbol and the updated probability of the most probable symbol comprises:
calculating a first bit value for a first portion of the string of binary bits starting at a first binary bit of the string of binary bits and ending at a binary bit immediately preceding an identifiable binary bit of the string of binary bits, the first bit value based on a final probability of the most probable symbol after the updating is complete;
calculating a second bit value for a second portion of the bin string starting at the identifiable bin of the bin string and ending at a last bin of the bin string, the second bit value based on a final probability of a new most probable symbol after the updating is complete; and
calculating the second number of bits as a sum of the first bit value and the second bit value.
8. The method of claim 1, wherein the string of binary bits comprises a first portion and a second portion, wherein the second portion comprises a last binary bit of the string of binary bits and the first portion comprises each other binary bit of the string of binary bits, wherein a symbol stored in the last binary bit is different from a symbol stored in each other binary bit of the string of binary bits, wherein determining whether the symbol stored in each binary bit of the string of binary bits is a maximum probability symbol of the probability model that can be used to encode the binarized video data comprises:
determining whether the symbol stored in each binary bit of the first portion of the string of binary bits is the maximum probability symbol.
9. The method of claim 1, wherein the binarized video data is used to indicate one of a significance map or coefficient levels for one or more video blocks.
10. The method of claim 1, the method comprising:
in response to determining that the symbol stored in each bin of the bin string is not the most probable symbol, updating the probability model based on the number of bins of the bin string that store symbols that are not the most probable symbol to determine a second number of bits to be used to encode the binarized video data; and
after updating the probability model based on the number of binary bits of the binary bit string storing symbols other than the maximum probability symbol to determine a second number of bits to be used to encode the binarized video data, encoding the binarized video data using the second number of bits.
11. An apparatus for determining a number of bits to be used to encode binarized video data, said apparatus comprising:
a processor configured to execute instructions stored in a non-transitory storage medium to:
receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols;
determining whether the symbol stored in each bin of the bin string is a maximum probability symbol of a probability model that can be used to encode the binarized video data;
in response to determining that the symbol stored in each binary bit of the string of binary bits is the most probable symbol:
updating the probability model based on the size of the binary string to determine a first number of bits to be used to encode the binarized video data; and is
Encoding the binarized video data into a bitstream using the first number of bits; and
in response to determining that the symbol stored in each binary digit of the string of binary digits is not the maximum probability symbol:
updating the probability model based on the number of binary bits of the binary bit string storing symbols other than the most probable symbol to determine a second number of bits to be used to encode the binarized video data; and is
Encoding the binarized video data into the bitstream using the second number of bits.
12. The apparatus of claim 11, wherein the instructions to update the probabilistic model based on the size of the bin string to determine the first number of bits to be used to encode the binarized video data comprise instructions to:
updating an initial probability of the most probable symbol according to a probability that a symbol in a consecutive binary bit of the binary bits of the binary bit string is the most probable symbol, the initial probability of the most probable symbol reflecting a probability that a symbol stored in a first binary bit of the binary bit string is the most probable symbol; and is
Calculating the first number of bits based on a final probability of the most probable symbol, the final probability of the most probable symbol determined based on an update to an initial probability of the most probable symbol.
13. The apparatus of claim 12, wherein the processor is configured to execute instructions stored in a non-transitory storage medium to:
generating a lookup table based on the size of the string of binary digits and the initial probability of the most probable symbol, the lookup table including elements corresponding to a plurality of the binary digits of the string of binary digits and associated with a probability that a symbol of the consecutive binary digits stored in the binary digits of the string of binary digits is the most probable symbol,
wherein a first one of the elements corresponds to a first bin of the bin string and is associated with the initial probability of the most probable symbol, a last one of the elements corresponds to a last bin of the bin string and is associated with the final probability of the most probable symbol, and
wherein the instructions for updating the initial probability of the most probable symbol based on the probability that a symbol of the consecutive ones of the binary bits stored in the binary bit string is the most probable symbol comprise instructions for using the lookup table.
14. The apparatus of claim 12, wherein the instructions for calculating the first number of bits based on the final probability of the most probable symbol comprise instructions for:
determining the final probability of the most probable symbol based on a sum of bits required to encode a symbol stored in each bin of the bin string.
15. The apparatus of claim 11, wherein the symbol stored in each of a plurality of binary bits is a minimum probability symbol of the probability model, wherein the instructions to update the probability model to determine the second number of bits to be used to encode the binarized video data based on the number of binary bits of the binary bit string storing symbols other than the maximum probability symbol comprise instructions to:
updating a probability of the least probability symbol and a probability of the most probability symbol, the probability of the least probability symbol being updated according to a probability that a symbol of the plurality of binary bits stored in the binary bits of the binary bit string is the least probability symbol, the probability of the most probability symbol being updated according to a probability that a symbol of the plurality of binary bits stored in the binary bits of the binary bit string is the most probability symbol; and is
Calculating the second number of bits based on the updated probability of the least probable symbol and the updated probability of the most probable symbol.
16. The apparatus of claim 15, wherein the instructions for updating the probability of the least probable symbol and the probability of the most probable symbol comprise instructions for:
determining a probability of updating the least probable symbol based on a symbol stored in an identifiable bin of a plurality of bins such that the probability of the least probable symbol is greater than the probability of the most probable symbol,
wherein the maximum probability symbol and the minimum probability symbol are switched to reflect that the minimum probability symbol is a new maximum probability symbol and the maximum probability symbol is a new minimum probability symbol when the probability of the minimum probability symbol becomes greater than the probability of the maximum probability symbol.
17. The apparatus of claim 16, wherein the instructions to calculate the second number of bits based on the updated probability of the least probability symbol and the updated probability of the most probability symbol comprise instructions to:
calculating a first bit value for a first portion of the string of binary bits starting at a first binary bit of the string of binary bits and ending at a binary bit immediately preceding an identifiable binary bit of the string of binary bits, the first bit value based on a final probability of the most probable symbol after the updating is complete;
calculating a second bit value for a second portion of the bin string starting at an identifiable bin of the bin string and ending at a last bin of the bin string, the second bit value based on a final probability of a new most probable symbol after the updating is complete; and is
Calculating the second number of bits as a sum of the first bit value and the second bit value.
18. The apparatus of claim 11, wherein the string of binary bits comprises a first portion and a second portion, wherein the second portion comprises a last binary bit of the string of binary bits and the first portion comprises each other binary bit of the string of binary bits, wherein a symbol stored in the last binary bit is different from a symbol stored in each other binary bit of the string of binary bits, wherein the instructions to determine whether a symbol stored in each binary bit of the string of binary bits is a maximum probability symbol of the probability model that can be used to encode the binarized video data comprise instructions to:
determining whether a symbol stored in each binary bit of the first portion of the string of binary bits is the maximum probability symbol.
19. The apparatus of claim 11, wherein the binarized video data is used to indicate one of a significance map or coefficient levels for one or more video blocks.
20. A method for determining the number of bits to be used to encode binarized video data, said method comprising:
receiving a binary string representing the binarized video data, the binary string comprising binary bits of respective stored symbols;
updating, in a single clock cycle, a probability model that can be used to encode the binarized video data based on the size of the bin string in response to determining that the symbol stored in each bin of the bin string is a maximum probability symbol, or updating a probability model that can be used to encode the binarized video data based on the number of bins of the bin string that store symbols that are not maximum probability symbols of the probability model in response to determining that the symbol stored in each bin of the bin string is not a maximum probability symbol, the updated probability model reflecting the number of bits to be used to encode the binarized video data; and
after updating the probability model, the binarized video data is encoded into a bitstream using the number of bits.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/813,387 | 2017-11-15 | ||
US15/813,387 US9992496B1 (en) | 2017-11-15 | 2017-11-15 | Bin string coding based on a most probable symbol |
US15/983,662 US10194153B1 (en) | 2017-11-15 | 2018-05-18 | Bin string coding based on a most probable symbol |
US15/983,662 | 2018-05-18 | ||
PCT/US2018/046451 WO2019099076A1 (en) | 2017-11-15 | 2018-08-13 | Bin string coding based on a most probable symbol |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110692244A CN110692244A (en) | 2020-01-14 |
CN110692244B true CN110692244B (en) | 2021-03-30 |
Family
ID=62235624
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880035986.2A Active CN110692244B (en) | 2017-11-15 | 2018-08-13 | Maximum probability symbol based binary string compilation |
Country Status (4)
Country | Link |
---|---|
US (2) | US9992496B1 (en) |
EP (1) | EP3711295A1 (en) |
CN (1) | CN110692244B (en) |
WO (1) | WO2019099076A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9992496B1 (en) * | 2017-11-15 | 2018-06-05 | Google Llc | Bin string coding based on a most probable symbol |
WO2020186535A1 (en) * | 2019-03-21 | 2020-09-24 | 深圳市大疆创新科技有限公司 | Point cloud attribute encoding method and device, and point cloud attribute decoding method and device |
US11212531B2 (en) * | 2019-06-07 | 2021-12-28 | The University Of North Carolina At Chapel Hill | Methods, systems, and computer readable media for decoding video using rate sorted entropy coding |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7932843B2 (en) * | 2008-10-17 | 2011-04-26 | Texas Instruments Incorporated | Parallel CABAC decoding for video decompression |
CN102176750A (en) * | 2011-03-10 | 2011-09-07 | 西安电子科技大学 | High-performance adaptive binary arithmetic encoder |
CN107005697A (en) * | 2014-12-26 | 2017-08-01 | 英特尔公司 | Method and system for the entropy coding of probability updating of the use based on look-up table of video coding |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7599435B2 (en) * | 2004-01-30 | 2009-10-06 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung E.V. | Video frame encoding and decoding |
US7714754B2 (en) * | 2008-07-14 | 2010-05-11 | Vixs Systems, Inc. | Entropy decoder with pipelined processing and methods for use therewith |
US20110280314A1 (en) * | 2010-05-12 | 2011-11-17 | Texas Instruments Incorporated | Slice encoding and decoding processors, circuits, devices, systems and processes |
WO2013067435A1 (en) * | 2011-11-04 | 2013-05-10 | Huawei Technologies Co., Ltd. | Differential pulse code modulation intra prediction for high efficiency video coding |
US9681133B2 (en) | 2012-03-29 | 2017-06-13 | Intel Corporation | Two bins per clock CABAC decoding |
US9584802B2 (en) | 2012-04-13 | 2017-02-28 | Texas Instruments Incorporated | Reducing context coded and bypass coded bins to improve context adaptive binary arithmetic coding (CABAC) throughput |
CA2950180C (en) | 2014-05-28 | 2020-04-21 | Arris Enterprises Llc | Acceleration of context adaptive binary arithmetic coding (cabac) in video codecs |
US9379236B2 (en) * | 2014-06-04 | 2016-06-28 | Broadcom Corporation | LDMOS device and structure for bulk FinFET technology |
US9992496B1 (en) * | 2017-11-15 | 2018-06-05 | Google Llc | Bin string coding based on a most probable symbol |
-
2017
- 2017-11-15 US US15/813,387 patent/US9992496B1/en active Active
-
2018
- 2018-05-18 US US15/983,662 patent/US10194153B1/en active Active
- 2018-08-13 WO PCT/US2018/046451 patent/WO2019099076A1/en unknown
- 2018-08-13 CN CN201880035986.2A patent/CN110692244B/en active Active
- 2018-08-13 EP EP18759833.9A patent/EP3711295A1/en active Pending
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7932843B2 (en) * | 2008-10-17 | 2011-04-26 | Texas Instruments Incorporated | Parallel CABAC decoding for video decompression |
CN102176750A (en) * | 2011-03-10 | 2011-09-07 | 西安电子科技大学 | High-performance adaptive binary arithmetic encoder |
CN107005697A (en) * | 2014-12-26 | 2017-08-01 | 英特尔公司 | Method and system for the entropy coding of probability updating of the use based on look-up table of video coding |
Also Published As
Publication number | Publication date |
---|---|
US9992496B1 (en) | 2018-06-05 |
CN110692244A (en) | 2020-01-14 |
US10194153B1 (en) | 2019-01-29 |
EP3711295A1 (en) | 2020-09-23 |
WO2019099076A1 (en) | 2019-05-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11405645B2 (en) | Transform kernel selection and entropy coding | |
KR102097285B1 (en) | Motion vector reference selection through reference frame buffer tracking | |
CN113287306A (en) | Improved entropy coding in image and video compression using machine learning | |
US10764590B2 (en) | Entropy coding primary and secondary coefficients of video data | |
CN110731084B (en) | Coding video syntax elements using context trees | |
CN110169068B (en) | DC coefficient sign coding scheme | |
CN110692244B (en) | Maximum probability symbol based binary string compilation | |
US11870993B2 (en) | Transforms for large video and image blocks | |
CN110692247B (en) | Prediction for composite motion compensation | |
US20190379912A1 (en) | Hash table for video and image transforms | |
US11218737B2 (en) | Asymmetric probability model update and entropy coding precision | |
WO2024020119A1 (en) | Bit stream syntax for partition types | |
CN116830574A (en) | Palette mode coding with specified bit depth precision |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |