US11003728B1 - Native application search results - Google Patents
Native application search results Download PDFInfo
- Publication number
- US11003728B1 US11003728B1 US16/270,876 US201916270876A US11003728B1 US 11003728 B1 US11003728 B1 US 11003728B1 US 201916270876 A US201916270876 A US 201916270876A US 11003728 B1 US11003728 B1 US 11003728B1
- Authority
- US
- United States
- Prior art keywords
- native application
- application
- uri
- search result
- user device
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
Definitions
- the Internet provides access to a wide variety of information.
- digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles are accessible over the Internet.
- web page resources many of these resources are designed to facilitate the performing of particular functions, such as banking, booking hotel reservations, shopping, etc., or to provide information, such as on-line encyclopedias, movie databases, news, etc.
- search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources. The search engine then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query.
- the present disclosure relates to native application deep linking, and more specifically to systems and methods for deep link processing when the target application is not present on a device seeking to access the linked content.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving, at a user device in response to a query in a first application, a set of search results that identify resources responsive to the query, the search results including at least one native application search result that identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes content responsive to the query, wherein the native application is an application that is different from the first application; determining, at the user device, whether the user device has a native application installed that can process the first URI of the native application search result; in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, a second URI that can be processed by the first application, where the second URI, when processed, causes the first application to display a first application page that includes content responsive to the query; wherein the content included in the first application page and the content included in
- the uniform resource identifier can be rewritten with a URI of a corresponding web page.
- the search system need not necessarily store native application installation information for multiple user devices to distinguish when to provide native application search results.
- the embedded URI of a search result can be changed automatically, either in response to rendering or in response to a selection, thus providing the user with a seamless and smooth user experience.
- FIG. 1 is a block diagram of an example environment in which native application search results are provided with web resource search results in response to queries.
- FIG. 2 is a flow diagram of an example process for processing a native application search result according to the installation status of a native application on a user device.
- FIGS. 3A and 3B are illustrations of a search results page that includes a native application search result.
- a system provides native application search results.
- a native application operates independent of a browser application on the user device.
- a native application is an application specifically designed to run on a particular user device operating system and machine firmware and not within a browser. Native applications thus differ from browsers, browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered.
- browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific as are native applications.
- a native application search result is a search result that corresponds to a particular native application and that, when selected, invokes the particular native application.
- native application examples include applications to create text documents, edit photographs, play music, interface with a remote banking system, and so on.
- Mobile native applications are designed to operate on mobile devices such as smart phones, tablets, and so on.
- Web native applications are designed to run within (both visually and functionally) web browser software.
- native applications, or simply “apps,” provide a user with access to content and/or functionality.
- Internet search engines provide the ability to search an indexed collection of web pages that exist on the Internet.
- the typical search engine provides, in response to a query, a list of results relevant to the query, often with hyperlinks allowing a user to quickly navigate to a result of interest.
- a user may select a linked result and thereby be provided with a web page(s) containing content about a celebrity, product, business, etc.
- the links may be to a site's “home page” (e.g., a welcome and search page for a site aggregating cooking information such recipes) or may be a “content page” that a user can access when navigating from a site's home page (e.g., a specific recipe at the cooking information site).
- links to content pages, as opposed to home pages are referred to as “deep links” (and the process for crawling, indexing, and serving these content pages is similarly referred to as “deep linking”).
- each home page has a specific uniform resource locator (URL) permitting a quick navigation to that page.
- URL uniform resource locator
- content associated with the app or generated by the app does not have a specific URL, and/or can only be reached from within the app itself.
- a search for documents may be performed “within an app” or for content specific to that app.
- the browser may launch an app and instruct the app to present to a user a specific content page within the app. In such cases, the app content cannot be displayed by a general browser.
- URI uniform resource identifier
- app content cannot be deep linked such that the content is broadly and generally accessible (i.e., without having the app associated with the content on the device, and without accessing the content from within the app).
- a web server typically only serves pages having web URLs, even if the app is present and the desired content has a link to the app (an “app link”).
- an app link In some cases a browser can recognize that content requires a special app, but in such cases the user is most often presented with a chooser and required to select the appropriate app for accessing the content page via the page's URL.
- indexed pages are ranked based on a query.
- the results are presented.
- a client side script inspects the URI and determines whether the device on which the page is to be accessed is capable of processing the URI and accessing (e.g., displaying) the content page, for example by an application installed on the device. If the content page can be accessed, then processing proceeds to access. If the content page cannot be accessed, a check is made to determine if a URI rewrite can provide a link to an alternate target for the desired content.
- URI app specific content page
- an alternate source for the content of the target content page may be determined (e.g., a page capable of providing the content without invoking a specific app on the client device), and a URI may be “rewritten” (e.g., linked to a URL) to access the desired content from that alternate source.
- the target web URI may either be stored in the web page that was sent by the server (that is, the original link returns a page that specifies frames for some content that is app-specific), or it can be fetched on demand from the server. In the latter case, the client device requests from the server a web URL that serves the same content as that from the given URI.
- the server may maintain a table of these alternate sources for this purpose.
- the client device then rewrites the target link URI with the response from the server.
- the search result presented to the user remains unchanged from the user's perspective, the underlying link is rewritten, and target content page may then be accessed from the web as opposed to a specific app.
- FIG. 1 is a block diagram of an example environment 100 in which native application search results are provided with web resource search results in response to queries.
- a computer network 102 such as the Internet, connects resource publisher web sites 104 , application publishers 106 , user devices 108 and a search engine 110 .
- a resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations.
- a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements.
- HTML hypertext markup language
- Each website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104 .
- a web page resource 105 is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL).
- Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few.
- the resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
- a publisher 105 may also provide a native application 107 .
- a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware.
- an “application page” is a particular display environment within a native application and in which is displayed content, such as text, images, and the like.
- An application page is specific to the particular native application, and the native application is specific to the particular operating system of the user device 108 .
- An application page differs from a rendered web resource in that the application page is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
- the publisher backend 120 includes a publisher store 122 that stores content the publisher provides, a web server 124 that provides the content from the publisher store as web resources (e.g., web pages), and a native application server 126 that handles requests from a native application.
- the web pages correspond to native application pages, and thus for many native application URIs there are corresponding web page URIs.
- the content of the publisher store 122 is accessible for presentation on both the web resources and the corresponding native application pages. Accordingly, such content is referred to as “synchronized” content.
- news publishers which may have a “mobile news app” for reading news content on a mobile device.
- the news content (e.g., the text of news story) provided on web resources 105 are the same content that is provided by the corresponding application pages of the native application 107 .
- a user device 108 is an electronic device that is capable of requesting and receiving web page resources 105 and native applications 107 over the network 102 .
- Example user devices 108 include personal computers, mobile communication devices, and tablet computers.
- the web index 112 is an index of publisher content that has, for example, been built from crawling the publisher web sites 104 , by receiving data feeds from the publisher websites 104 , or by other appropriate methods of collecting and indexing data.
- the native application index 114 stores data relating to native applications 107 .
- the application index 114 stores, for example, a list of native applications provided by the publishers 104 and identifiers that identify the native applications.
- publishers 104 may specify that certain native applications 107 are used to access and display synchronized data, and this information may be stored in the application index.
- a news publisher may specify that a news reading application it provides displays synchronized content that is displayed on the news publisher's website. Data specifying this relationship may be, for example, a tuple pairs that pair various native application pages with corresponding web pages by the corresponding URI pairs.
- the publisher may, in some implementations, specify what data the native application requires to access content provided on a web resource. For example, the publisher may specify that only the URL of a web resource is required by the native application to access and display the content displayed in the web resource.
- the application index 114 may also store additional information, depending on the implementation, and as described in more detail below.
- the user devices 108 submit search queries to the search engine 110 .
- the search engine 110 accesses the web index 112 and the application index 114 to identify content that is relevant to the query.
- the search engine 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively, by use of a search result generator 116 . Once generated, the search results are provided to the user device 108 from which the query was received.
- a web resource search result is data generated by the search engine 110 that identifies a web resource, based on the content of the resource, that satisfies a particular search query.
- a web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a uniform resource identifier (URI) for the resource, e.g., the uniform resource locator (URL) of the web page.
- URI uniform resource identifier
- the web resource search result causes the user device to generate a request for the resource located at the URL.
- the web resource that is received is then displayed in a browser application.
- a native application search result specifies a native application and is generated in response to a search of the application index 114 and the web index 112 , as described in more detail below.
- the native application search result When selected at a user device, the native application search result causes the native application installed on the user device to request the synchronized content. Once the native application receives the requested content, the native application displays the content in a user interface of the native application.
- a particular user device may not have a particular native application installed, but may nevertheless receive a native application search result with a URI for that native application. Processing of such a native application search result is described with reference to FIG. 2 .
- the process 200 can be implemented in a user device.
- the process 200 sends query using first application to a search system ( 202 ).
- the search query includes one or more terms.
- the process 200 receives data identifying resources responsive to the query ( 204 ).
- the data may include web search results and also include at least one native application search result.
- the native application search result identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes first content responsive to the query.
- the native application is an application that is different from the first application, the latter of which may be, for example a web browser.
- the search result generator 116 receives data identifying resources that are determined to be responsive to the query, and generates the search results, which are then transmitted to the user device 108 .
- the user device 108 receives the results.
- the process 200 determines whether the user device has a native application installed that can process the first URI ( 206 ).
- the native application search result may include a native application identifier, and a script running in the web browser may access a manifest of the user device to determine if the native application is installed.
- Other ways of determining whether a native application is installed can also be used.
- the process 200 determines the user device has a native application installed that can process the first URI, then the native application search result is processed according to the first URI. For example, the search result will be displayed with the first URI being operable to generate a request should the search result be selected.
- the process 200 determines the user device does not have an application installed that can process the first URI, then the process 200 processes a second URI that can be processed by the first application ( 210 ).
- the second URI when processed, causes the first application to display a first application page that includes the first content responsive to the query.
- the second URI that can be processed by the first application by rewriting the first URI with the second URI.
- the second URI may have been included with the native application search result but not in the form of an active link; however, when processed, the second URI mark-up code is modified to make the second URI active.
- the first URI may be removed or its mark-up code altered to make it inactive.
- the user device may provide a request for the second URI to the search system 110 , which then provides the second URI for processing.
- the URI may be visible, or may be embedded and associated with anchor text. In the case of the latter, the change in the URI is not visible to the user, thus resulting in a fluid experience.
- the process 200 is performed when the search results are rendered. In an alternate implementation, the process 200 is performed in response to a native application search result being selected.
- FIG. 3A is an illustration of a search results page 300 that includes a native application search result.
- Displayed in the search results page 300 are search results 320 , 330 , and 340 that are responsive to the query “current news” displayed in the search input field 304 .
- the search results 320 and 340 are web search results generated in response to a search of a web index 112 of resources.
- Each search result 320 and 340 references a resource that can be rendered in a browser application on a user device and includes a URL link to the resource, and other data 322 and 342 , such as a snippet of text extracted for the referenced resource.
- the search result 330 is a native application search result, and includes a first URI 1 336 .
- the native application search result 330 may also include, for example, a snippet 332 of text and an image 334 of the native application display.
- the snippet 332 may be extracted from the web resource.
- the snippet 332 is a headline and text of a news story.
- the image 334 may be, for example, an image of a user interface of the native application. The image 334 helps visually distinguish the native application search result 330 from the web resource search results.
- the first URI 336 when processed by a native application to which it corresponds, allows the user device to fetch synchronized content of a news server.
- the first URI 336 is shown in phantom, indicting it may be visible or embedded with anchor text.
- the search result 330 is not altered. Selection of the image 334 or any other portion of the native application search result 332 , at the user device will then causes the native application to launch and request the content that is relevant to the search query.
- the process 200 detects the native application is not installed, the URI 336 is rewritten with the second URI 338 , as shown in FIG. 3B .
- the search result 330 now links to a web resource at which the synchronized content is available.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device).
- Data generated at the user device e.g., a result of the user interaction
Abstract
Methods, systems, and apparatus, for receiving a native application search result that identifies a native application and a first URI that causes the native application to display a native application page that includes content responsive to the query; determining, at the user device, whether the user device has a native application installed that can process the first uniform resource identifier (URI) of the native application search result; in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, a second URI that can be processed by the first application, where the second URI, when processed, causes the first application to display a first application page that includes content responsive to the query; wherein the content included in the first application page and the content included in the native application page are synchronized content.
Description
This application is a continuation (and claims the benefit of priority under 35 USC 120) of U.S. patent application Ser. No. 14/747,878, filed Jun. 23, 2015, which claims priority under 35 USC § 119(e) to U.S. Patent Application Ser. No. 62/016,616, filed on Jun. 24, 2014, the entire contents of which are hereby incorporated by reference.
The Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet. With respect to web page resources, many of these resources are designed to facilitate the performing of particular functions, such as banking, booking hotel reservations, shopping, etc., or to provide information, such as on-line encyclopedias, movie databases, news, etc.
A variety of search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources. The search engine then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query.
With the advent of tablet computers and smart phones, native applications that facilitate the performance of the same functions facilitated by the use of web page resources, or the provisioning of the same content by the use of web pages, are now being provided in large numbers.
The present disclosure relates to native application deep linking, and more specifically to systems and methods for deep link processing when the target application is not present on a device seeking to access the linked content.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving, at a user device in response to a query in a first application, a set of search results that identify resources responsive to the query, the search results including at least one native application search result that identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes content responsive to the query, wherein the native application is an application that is different from the first application; determining, at the user device, whether the user device has a native application installed that can process the first URI of the native application search result; in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, a second URI that can be processed by the first application, where the second URI, when processed, causes the first application to display a first application page that includes content responsive to the query; wherein the content included in the first application page and the content included in the native application page are synchronized content. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. When an application search result is served to a user device that does not have the corresponding native application installed, the uniform resource identifier (URI) can be rewritten with a URI of a corresponding web page. Thus, the search system need not necessarily store native application installation information for multiple user devices to distinguish when to provide native application search results. Instead, the embedded URI of a search result can be changed automatically, either in response to rendering or in response to a selection, thus providing the user with a seamless and smooth user experience.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Like reference numbers and designations in the various drawings indicate like elements.
A system provides native application search results. As used herein, a native application operates independent of a browser application on the user device. A native application is an application specifically designed to run on a particular user device operating system and machine firmware and not within a browser. Native applications thus differ from browsers, browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered. Furthermore, browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific as are native applications. Furthermore, as used herein, a native application search result is a search result that corresponds to a particular native application and that, when selected, invokes the particular native application.
Examples of native application include applications to create text documents, edit photographs, play music, interface with a remote banking system, and so on. Mobile native applications are designed to operate on mobile devices such as smart phones, tablets, and so on. Web native applications are designed to run within (both visually and functionally) web browser software. At a very high level, native applications, or simply “apps,” provide a user with access to content and/or functionality.
Internet search engines provide the ability to search an indexed collection of web pages that exist on the Internet. The typical search engine provides, in response to a query, a list of results relevant to the query, often with hyperlinks allowing a user to quickly navigate to a result of interest. A user may select a linked result and thereby be provided with a web page(s) containing content about a celebrity, product, business, etc. The links may be to a site's “home page” (e.g., a welcome and search page for a site aggregating cooking information such recipes) or may be a “content page” that a user can access when navigating from a site's home page (e.g., a specific recipe at the cooking information site). Links to content pages, as opposed to home pages, are referred to as “deep links” (and the process for crawling, indexing, and serving these content pages is similarly referred to as “deep linking”).
The ability to navigate to a page, as well as the accessibility of content and functionality that that page provides, is dictated in part by the nature of the published page. For example, certain pages may contain dynamic content (e.g., asynchronous java script and XML (AJAX), Adobe Flash, etc.) that are difficult or impossible to crawl and retrieve. Consequently, these pages may not be available in response to a search, a user may not be able to save the page as a bookmark or the like, and page navigation via browser controls (e.g., forward and back in history) may not operate as intended.
In most instances, each home page (and many content pages) has a specific uniform resource locator (URL) permitting a quick navigation to that page. However, for many apps, content associated with the app or generated by the app does not have a specific URL, and/or can only be reached from within the app itself. In certain instances, a search for documents may be performed “within an app” or for content specific to that app. When properly configured to process a uniform resource identifier (URI), the browser may launch an app and instruct the app to present to a user a specific content page within the app. In such cases, the app content cannot be displayed by a general browser. That is, that app content cannot be deep linked such that the content is broadly and generally accessible (i.e., without having the app associated with the content on the device, and without accessing the content from within the app). In general, a web server typically only serves pages having web URLs, even if the app is present and the desired content has a link to the app (an “app link”). In some cases a browser can recognize that content requires a special app, but in such cases the user is most often presented with a chooser and required to select the appropriate app for accessing the content page via the page's URL.
According to the present disclosure, indexed pages are ranked based on a query. The results are presented. Upon render, or alternatively in response to a selection of, a native application search result that includes an app specific content page (URI), a client side script inspects the URI and determines whether the device on which the page is to be accessed is capable of processing the URI and accessing (e.g., displaying) the content page, for example by an application installed on the device. If the content page can be accessed, then processing proceeds to access. If the content page cannot be accessed, a check is made to determine if a URI rewrite can provide a link to an alternate target for the desired content. In some cases, an alternate source for the content of the target content page may be determined (e.g., a page capable of providing the content without invoking a specific app on the client device), and a URI may be “rewritten” (e.g., linked to a URL) to access the desired content from that alternate source. The target web URI may either be stored in the web page that was sent by the server (that is, the original link returns a page that specifies frames for some content that is app-specific), or it can be fetched on demand from the server. In the latter case, the client device requests from the server a web URL that serves the same content as that from the given URI. The server may maintain a table of these alternate sources for this purpose. The client device then rewrites the target link URI with the response from the server. The search result presented to the user remains unchanged from the user's perspective, the underlying link is rewritten, and target content page may then be accessed from the web as opposed to a specific app.
A resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations. Generally, a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements. Each website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104.
A web page resource 105 is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL). Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few. The resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
A publisher 105 may also provide a native application 107. As described above, a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware. As used in this specification, an “application page” is a particular display environment within a native application and in which is displayed content, such as text, images, and the like. An application page is specific to the particular native application, and the native application is specific to the particular operating system of the user device 108. An application page differs from a rendered web resource in that the application page is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
Examples of such publishers are news publishers, which may have a “mobile news app” for reading news content on a mobile device. The news content (e.g., the text of news story) provided on web resources 105 are the same content that is provided by the corresponding application pages of the native application 107.
A user device 108 is an electronic device that is capable of requesting and receiving web page resources 105 and native applications 107 over the network 102. Example user devices 108 include personal computers, mobile communication devices, and tablet computers.
The web index 112 is an index of publisher content that has, for example, been built from crawling the publisher web sites 104, by receiving data feeds from the publisher websites 104, or by other appropriate methods of collecting and indexing data.
The native application index 114 stores data relating to native applications 107. The application index 114 stores, for example, a list of native applications provided by the publishers 104 and identifiers that identify the native applications. Furthermore, in some implementations, publishers 104 may specify that certain native applications 107 are used to access and display synchronized data, and this information may be stored in the application index. For example, a news publisher may specify that a news reading application it provides displays synchronized content that is displayed on the news publisher's website. Data specifying this relationship may be, for example, a tuple pairs that pair various native application pages with corresponding web pages by the corresponding URI pairs.
The publisher may, in some implementations, specify what data the native application requires to access content provided on a web resource. For example, the publisher may specify that only the URL of a web resource is required by the native application to access and display the content displayed in the web resource. The application index 114 may also store additional information, depending on the implementation, and as described in more detail below.
The user devices 108 submit search queries to the search engine 110. In response to each query, the search engine 110 accesses the web index 112 and the application index 114 to identify content that is relevant to the query. The search engine 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively, by use of a search result generator 116. Once generated, the search results are provided to the user device 108 from which the query was received.
A web resource search result is data generated by the search engine 110 that identifies a web resource, based on the content of the resource, that satisfies a particular search query. A web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a uniform resource identifier (URI) for the resource, e.g., the uniform resource locator (URL) of the web page. When selected at a user device, the web resource search result causes the user device to generate a request for the resource located at the URL. The web resource that is received is then displayed in a browser application.
A native application search result specifies a native application and is generated in response to a search of the application index 114 and the web index 112, as described in more detail below. When selected at a user device, the native application search result causes the native application installed on the user device to request the synchronized content. Once the native application receives the requested content, the native application displays the content in a user interface of the native application.
As described above, a particular user device may not have a particular native application installed, but may nevertheless receive a native application search result with a URI for that native application. Processing of such a native application search result is described with reference to FIG. 2 . The process 200 can be implemented in a user device.
The process 200 sends query using first application to a search system (202). The search query includes one or more terms.
The process 200 receives data identifying resources responsive to the query (204). The data may include web search results and also include at least one native application search result. The native application search result identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes first content responsive to the query. The native application is an application that is different from the first application, the latter of which may be, for example a web browser. For example, the search result generator 116 receives data identifying resources that are determined to be responsive to the query, and generates the search results, which are then transmitted to the user device 108. The user device 108, in turn, receives the results.
The process 200 determines whether the user device has a native application installed that can process the first URI (206). For example, the native application search result may include a native application identifier, and a script running in the web browser may access a manifest of the user device to determine if the native application is installed. Other ways of determining whether a native application is installed can also be used.
If the process 200 determines the user device has a native application installed that can process the first URI, then the native application search result is processed according to the first URI. For example, the search result will be displayed with the first URI being operable to generate a request should the search result be selected.
If the process 200 determines the user device does not have an application installed that can process the first URI, then the process 200 processes a second URI that can be processed by the first application (210). The second URI, when processed, causes the first application to display a first application page that includes the first content responsive to the query. For example, the second URI that can be processed by the first application by rewriting the first URI with the second URI. The second URI may have been included with the native application search result but not in the form of an active link; however, when processed, the second URI mark-up code is modified to make the second URI active. Likewise, the first URI may be removed or its mark-up code altered to make it inactive.
Alternatively, if the second URI is not included with the native application, the user device may provide a request for the second URI to the search system 110, which then provides the second URI for processing.
In the native application search result, the URI may be visible, or may be embedded and associated with anchor text. In the case of the latter, the change in the URI is not visible to the user, thus resulting in a fluid experience.
As described above, the process 200 is performed when the search results are rendered. In an alternate implementation, the process 200 is performed in response to a native application search result being selected.
An example of a change in the URI's is described with reference to FIGS. 3A and 3B . FIG. 3A is an illustration of a search results page 300 that includes a native application search result. Displayed in the search results page 300 are search results 320, 330, and 340 that are responsive to the query “current news” displayed in the search input field 304. The search results 320 and 340 are web search results generated in response to a search of a web index 112 of resources. Each search result 320 and 340 references a resource that can be rendered in a browser application on a user device and includes a URL link to the resource, and other data 322 and 342, such as a snippet of text extracted for the referenced resource.
The search result 330 is a native application search result, and includes a first URI 1 336. The native application search result 330 may also include, for example, a snippet 332 of text and an image 334 of the native application display. The snippet 332 may be extracted from the web resource. In this example, the snippet 332 is a headline and text of a news story. The image 334 may be, for example, an image of a user interface of the native application. The image 334 helps visually distinguish the native application search result 330 from the web resource search results.
The first URI 336, when processed by a native application to which it corresponds, allows the user device to fetch synchronized content of a news server. The first URI 336 is shown in phantom, indicting it may be visible or embedded with anchor text.
If the native application is installed on the user device, the search result 330 is not altered. Selection of the image 334 or any other portion of the native application search result 332, at the user device will then causes the native application to launch and request the content that is relevant to the search query.
If, however, the process 200 detects the native application is not installed, the URI 336 is rewritten with the second URI 338, as shown in FIG. 3B . In this case, the search result 330 now links to a web resource at which the synchronized content is available.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's user device in response to requests received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device). Data generated at the user device (e.g., a result of the user interaction) can be received from the user device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (18)
1. A computer-implemented method, comprising:
receiving, at a user device in response to a query in a first application, a set of search results that identify resources responsive to the query, the search results including a native application search result that identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes first content responsive to the query, wherein the native application operates independent of a browser application and is an application that is different from the first application, wherein the native application search result is a search result that corresponds to a particular native application and that, when selected, invokes the particular native application, wherein the set of search results includes a second URI that can be processed by the first application and that causes the first application to display a first application page that includes the first content responsive to the query;
determining, at the user device, whether the user device has a native application installed that can process the first URI of the native application search result; and
in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, the second URI that can be processed by the first application, the processing comprising:
rewriting the first URI in the native application search result with the second URI as an underlying link so that the native application search result remains unchanged from a user's perspective and, as a result of the rewriting, the selection of the native application search result causes the first application to display the first application page that includes the first content responsive to the query;
wherein the content included in the first application page and the content included in the native application page are synchronized content.
2. The computer-implemented method of claim 1 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to receiving the set of search results.
3. The computer-implemented method of claim 1 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to a selection of the native application search result by a user.
4. The computer implemented method of claim 1 , wherein determining whether the user device has a native application installed that can process the first URI of the native application search result comprises executing a script included with the set of search results.
5. The computer-implemented method of claim 1 , further comprising, in response to determining that the user device has a native application installed that can process the first URI of the native application search result, launching the native application to process the first URI in response to a user selection of the native application search result.
6. The computer-implemented method of claim 1 , wherein the first application is a web browser application and the second URI is a uniform resource locator (URL) of a web page.
7. A non-transitory computer readable storage medium storing instructions executable by a data processing apparatus and that upon such execution cause the data processing apparatus to perform operations comprising:
receiving, at a user device in response to a query in a first application, a set of search results that identify resources responsive to the query, the search results including a native application search result that identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes first content responsive to the query, wherein the native application operates independent of a browser application and is an application that is different from the first application, wherein the native application search result is a search result that corresponds to a particular native application and that, when selected, invokes the particular native application, wherein the set of search results includes a second URI that can be processed by the first application and that causes the first application to display a first application page that includes the first content responsive to the query;
determining, at the user device, whether the user device has a native application installed that can process the first URI of the native application search result; and
in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, the second URI that can be processed by the first application, the processing comprising:
rewriting the first URI in the native application search result with the second URI as an underlying link so that the native application search result remains unchanged from a user's perspective and, as a result of the rewriting, the selection of the native application search result causes the first application to display the first application page that includes the first content responsive to the query;
wherein the content included in the first application page and the content included in the native application page are synchronized content.
8. The non-transitory computer readable storage medium of claim 7 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to receiving the set of search results.
9. The non-transitory computer readable storage medium of claim 7 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to a selection of the native application search result by a user.
10. The non-transitory computer readable storage medium of claim 7 , wherein determining whether the user device has a native application installed that can process the first URI of the native application search result comprises executing a script included with the set of search results.
11. The non-transitory computer readable storage medium of claim 7 , further comprising, in response to determining that the user device has a native application installed that can process the first URI of the native application search result, launching the native application to process the first URI in response to a user selection of the native application search result.
12. The non-transitory computer readable storage medium of claim 7 , wherein the first application is a web browser application and the second URI is a uniform resource locator (URL) of a web page.
13. A system, comprising:
receiving, at a user device in response to a query in a first application, a set of search results that identify resources responsive to the query, the search results including a native application search result that identifies a native application and a first uniform resource identifier (URI) that, when processed by the native application, causes the native application to display a native application page that includes first content responsive to the query, wherein the native application operates independent of a browser application and is an application that is different from the first application, wherein the native application search result is a search result that corresponds to a particular native application and that, when selected, invokes the particular native application, wherein the set of search results includes a second URI that can be processed by the first application and that causes the first application to display a first application page that includes the first content responsive to the query;
determining, at the user device, whether the user device has a native application installed that can process the first URI of the native application search result; and
in response to determining that the user device does not have a native application installed that can process the first URI, processing, at the user device, the second URI that can be processed by the first application, the processing comprising:
rewriting the first URI in the native application search result with the second URI as an underlying link so that the native application search result remains unchanged from a user's perspective and, as a result of the rewriting, the selection of the native application search result causes the first application to display the first application page that includes the first content responsive to the query;
wherein the content included in the first application page and the content included in the native application page are synchronized content.
14. The system of claim 13 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to receiving the set of search results.
15. The system of claim 13 , wherein:
determining whether the user device has a native application installed that can process the first URI of the native application search result comprises determining whether the user device has the native application installed in response to a selection of the native application search result by a user.
16. The system of claim 13 , wherein determining whether the user device has a native application installed that can process the first URI of the native application search result comprises executing a script included with the set of search results.
17. The system of claim 13 , further comprising, in response to determining that the user device has a native application installed that can process the first URI of the native application search result, launching the native application to process the first URI in response to a user selection of the native application search result.
18. The system of claim 13 , wherein the first application is a web browser application and the second URI is a uniform resource locator (URL) of a web page.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/270,876 US11003728B1 (en) | 2014-06-24 | 2019-02-08 | Native application search results |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201462016616P | 2014-06-24 | 2014-06-24 | |
US14/747,878 US10210263B1 (en) | 2014-06-24 | 2015-06-23 | Native application search results |
US16/270,876 US11003728B1 (en) | 2014-06-24 | 2019-02-08 | Native application search results |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/747,878 Continuation US10210263B1 (en) | 2014-06-24 | 2015-06-23 | Native application search results |
Publications (1)
Publication Number | Publication Date |
---|---|
US11003728B1 true US11003728B1 (en) | 2021-05-11 |
Family
ID=65322700
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/747,878 Active 2036-01-30 US10210263B1 (en) | 2014-06-24 | 2015-06-23 | Native application search results |
US16/270,876 Active 2035-11-27 US11003728B1 (en) | 2014-06-24 | 2019-02-08 | Native application search results |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/747,878 Active 2036-01-30 US10210263B1 (en) | 2014-06-24 | 2015-06-23 | Native application search results |
Country Status (1)
Country | Link |
---|---|
US (2) | US10210263B1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10540168B2 (en) * | 2017-05-01 | 2020-01-21 | Apptimize Llc | Mobile application webview modification |
CN107329743B (en) * | 2017-06-14 | 2021-09-28 | 北京小米移动软件有限公司 | Application page display method and device and storage medium |
Citations (61)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040030882A1 (en) | 2002-08-08 | 2004-02-12 | Forman George Henry | Managed application pre-launching |
US20050240943A1 (en) * | 2001-07-10 | 2005-10-27 | Microsoft Corporation | Application program interface for network software platform |
US20060047644A1 (en) * | 2004-08-31 | 2006-03-02 | Bocking Andrew D | Method of searching for personal information management (PIM) information and handheld electronic device employing the same |
US20070209080A1 (en) | 2006-03-01 | 2007-09-06 | Oracle International Corporation | Search Hit URL Modification for Secure Application Integration |
US20090210631A1 (en) * | 2006-09-22 | 2009-08-20 | Bea Systems, Inc. | Mobile application cache system |
US7617225B2 (en) | 2004-06-25 | 2009-11-10 | Apple Inc. | Methods and systems for managing data created by different applications |
US20100228724A1 (en) * | 2009-03-09 | 2010-09-09 | Jonah Petri | Search capability implementation for a device |
US20100257466A1 (en) | 2009-04-01 | 2010-10-07 | Yahoo! Inc. | Method and system for generating a mini-software application corresponding to a web site |
US20100306191A1 (en) | 2009-05-27 | 2010-12-02 | Lebeau Michael J | Computer Application Data In Search Results |
US7853606B1 (en) * | 2004-09-14 | 2010-12-14 | Google, Inc. | Alternate methods of displaying search results |
US20110246567A1 (en) * | 2009-05-18 | 2011-10-06 | Telefonaktiebolaget L M Ericsson (Publ) | Method for implementing ims functionality in a set top box |
US20110252038A1 (en) | 2010-04-07 | 2011-10-13 | Schmidt Edward T | Search extensibility to third party applications |
US20110314004A1 (en) | 2010-06-18 | 2011-12-22 | Verizon Patent And Licensing, Inc. | Cross application execution service |
US8086957B2 (en) | 2008-05-21 | 2011-12-27 | International Business Machines Corporation | Method and system to selectively secure the display of advertisements on web browsers |
US20120124061A1 (en) | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Rich Search Over and Deep Integration with Applications |
US20120179706A1 (en) | 2011-01-06 | 2012-07-12 | Mitel Networks Corporation | Contextual application launch via search query |
US20120179955A1 (en) | 2011-01-06 | 2012-07-12 | Microsoft Corporation | Providing deep links in association with toolbars |
US20120221955A1 (en) * | 2009-01-28 | 2012-08-30 | Raleigh Gregory G | End user device that secures an association of application to service policy with an application certificate check |
US20120284247A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Integrating applications within search results |
US20120284256A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Location-aware application searching |
US20120290584A1 (en) | 2011-05-09 | 2012-11-15 | Google Inc. | Recommending Applications for Mobile Devices Based on Installation Histories |
US20120316955A1 (en) | 2011-04-06 | 2012-12-13 | Yahoo! Inc. | System and Method for Mobile Application Search |
US20120323898A1 (en) * | 2011-06-16 | 2012-12-20 | Microsoft Corporation | Surfacing applications based on browsing activity |
US20130006897A1 (en) | 2011-07-01 | 2013-01-03 | Google Inc. | Predicting user navigation events |
US20130019202A1 (en) * | 2011-07-14 | 2013-01-17 | Nuance Communications, Inc. | Methods and apparatus for delivering information of various types to a user |
US20130097596A1 (en) * | 2011-10-17 | 2013-04-18 | Google Inc. | Selective notification of native applications |
US20130111328A1 (en) | 2011-11-01 | 2013-05-02 | Amit Khanna | Launching applications from webpages |
US20130110815A1 (en) | 2011-10-28 | 2013-05-02 | Microsoft Corporation | Generating and presenting deep links |
US20130124606A1 (en) | 2011-11-14 | 2013-05-16 | Boopsie, Inc. | Automatic personalization of downloadable mobile apps |
US20130122861A1 (en) | 2011-11-11 | 2013-05-16 | Electronics And Telecommunications Research Institute | System and method for verifying apps for smart phone |
US20130139182A1 (en) * | 2011-11-25 | 2013-05-30 | Microsoft Corporation | Integrating An Application Into Operating System Components Of A Mobile Computing Platform |
US8458384B2 (en) | 2010-02-03 | 2013-06-04 | National Instruments Corporation | Automatically launching a measurement application in response to measurement device connection |
US20130191360A1 (en) | 2012-01-19 | 2013-07-25 | Google Inc. | System and method for improving access to search results |
US8510764B1 (en) | 2012-11-02 | 2013-08-13 | Google Inc. | Method and system for deep links in application contexts |
US20130232256A1 (en) | 2011-08-31 | 2013-09-05 | Nhn Corporation | System and method for providing ranking information of mobile application |
US20130260739A1 (en) * | 2010-12-22 | 2013-10-03 | France Telecom | System and method for remotely triggering actions on a mobile device |
US8554345B2 (en) | 2011-11-10 | 2013-10-08 | Cbs Interactive, Inc. | APP rating system |
US20130298007A1 (en) | 2012-04-18 | 2013-11-07 | International Business Machines Corporation | Determining page loading of user interfaces of web applications |
US8595450B2 (en) | 2003-03-24 | 2013-11-26 | Sony Corporation | Application pre-launch to reduce user interface latency |
US20130325856A1 (en) | 2012-06-04 | 2013-12-05 | Apple Inc. | App recommendation using crowd-sourced localized app usage data |
US8631097B1 (en) * | 2012-10-11 | 2014-01-14 | Google Inc. | Methods and systems for finding a mobile and non-mobile page pair |
US20140047413A1 (en) * | 2012-08-09 | 2014-02-13 | Modit, Inc. | Developing, Modifying, and Using Applications |
US8656265B1 (en) * | 2012-09-11 | 2014-02-18 | Google Inc. | Low-latency transition into embedded web view |
US20140052617A1 (en) * | 2011-12-13 | 2014-02-20 | Visa International Service Association | Payment platform interface widget generation apparatuses, methods and systems |
US20140201179A1 (en) * | 2013-01-16 | 2014-07-17 | Google Inc. | Indexing application pages of native applications |
US20140244786A1 (en) * | 2013-02-27 | 2014-08-28 | Quixey, Inc. | Techniques for Sharing Application States |
US20140250147A1 (en) * | 2013-03-01 | 2014-09-04 | Quixey, Inc. | Generating Search Results Containing State Links to Applications |
US20140282032A1 (en) * | 2013-03-15 | 2014-09-18 | Microsoft Corporation | Dynamically configuring user experiences with action uniform resource identifiers |
US20140316890A1 (en) * | 2013-04-23 | 2014-10-23 | Quixey, Inc. | Entity Bidding |
US20140359598A1 (en) * | 2013-05-29 | 2014-12-04 | Microsoft Corporation | Application installation from search results |
US20150254310A1 (en) * | 2014-03-04 | 2015-09-10 | Google Inc. | Triggering and ranking of native applications |
US20160070801A1 (en) * | 2014-09-05 | 2016-03-10 | Quixey, Inc. | Augmenting Search Results With Device And Application History |
US20160085514A1 (en) * | 2014-09-23 | 2016-03-24 | Quixey, Inc. | Development System and Method for Providing External Functionality |
US20160117388A1 (en) * | 2014-10-23 | 2016-04-28 | Quixey, Inc. | Searching and Accessing Application Functionality |
US20160132596A1 (en) * | 2014-11-12 | 2016-05-12 | Quixey, Inc. | Generating Search Results Based On Software Application Installation Status |
US20160179956A1 (en) * | 2014-12-23 | 2016-06-23 | Quixey, Inc. | Techniques For Efficient Access Of Software Application Functionality In Search |
US20160191639A1 (en) * | 2014-12-31 | 2016-06-30 | Quixey, Inc. | Recommending Content Based On User Profiles Clustered By Subscription Data |
US20160203519A1 (en) * | 2015-01-09 | 2016-07-14 | Facebook, Inc. | Presenting content to an online system user promoting interaction with an application based on installation of the application on a client device |
US9608870B1 (en) * | 2014-02-28 | 2017-03-28 | Google Inc. | Deep link verification for native applications |
US9720672B2 (en) * | 2014-01-06 | 2017-08-01 | Quixey, Inc. | Searching and accessing application functionality |
US9817646B1 (en) * | 2014-03-17 | 2017-11-14 | Google Llc | Multiplatform and multichannel distribution of web applications across devices |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8909697B2 (en) | 2010-11-29 | 2014-12-09 | Hughes Network Systems, Llc | Computer networking system and method with javascript execution for pre-fetching content from dynamically-generated URL and javascript injection to modify date or random number calculation |
-
2015
- 2015-06-23 US US14/747,878 patent/US10210263B1/en active Active
-
2019
- 2019-02-08 US US16/270,876 patent/US11003728B1/en active Active
Patent Citations (62)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050240943A1 (en) * | 2001-07-10 | 2005-10-27 | Microsoft Corporation | Application program interface for network software platform |
US20040030882A1 (en) | 2002-08-08 | 2004-02-12 | Forman George Henry | Managed application pre-launching |
US8595450B2 (en) | 2003-03-24 | 2013-11-26 | Sony Corporation | Application pre-launch to reduce user interface latency |
US7617225B2 (en) | 2004-06-25 | 2009-11-10 | Apple Inc. | Methods and systems for managing data created by different applications |
US20060047644A1 (en) * | 2004-08-31 | 2006-03-02 | Bocking Andrew D | Method of searching for personal information management (PIM) information and handheld electronic device employing the same |
US7853606B1 (en) * | 2004-09-14 | 2010-12-14 | Google, Inc. | Alternate methods of displaying search results |
US20070209080A1 (en) | 2006-03-01 | 2007-09-06 | Oracle International Corporation | Search Hit URL Modification for Secure Application Integration |
US20090210631A1 (en) * | 2006-09-22 | 2009-08-20 | Bea Systems, Inc. | Mobile application cache system |
US8086957B2 (en) | 2008-05-21 | 2011-12-27 | International Business Machines Corporation | Method and system to selectively secure the display of advertisements on web browsers |
US20120221955A1 (en) * | 2009-01-28 | 2012-08-30 | Raleigh Gregory G | End user device that secures an association of application to service policy with an application certificate check |
US20100228724A1 (en) * | 2009-03-09 | 2010-09-09 | Jonah Petri | Search capability implementation for a device |
US20100257466A1 (en) | 2009-04-01 | 2010-10-07 | Yahoo! Inc. | Method and system for generating a mini-software application corresponding to a web site |
US20110246567A1 (en) * | 2009-05-18 | 2011-10-06 | Telefonaktiebolaget L M Ericsson (Publ) | Method for implementing ims functionality in a set top box |
US20100306191A1 (en) | 2009-05-27 | 2010-12-02 | Lebeau Michael J | Computer Application Data In Search Results |
US8458384B2 (en) | 2010-02-03 | 2013-06-04 | National Instruments Corporation | Automatically launching a measurement application in response to measurement device connection |
US20110252038A1 (en) | 2010-04-07 | 2011-10-13 | Schmidt Edward T | Search extensibility to third party applications |
US20110314004A1 (en) | 2010-06-18 | 2011-12-22 | Verizon Patent And Licensing, Inc. | Cross application execution service |
US8515979B2 (en) | 2010-06-18 | 2013-08-20 | Verizon Patent And Licensing, Inc. | Cross application execution service |
US20120124061A1 (en) | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Rich Search Over and Deep Integration with Applications |
US20130260739A1 (en) * | 2010-12-22 | 2013-10-03 | France Telecom | System and method for remotely triggering actions on a mobile device |
US20120179955A1 (en) | 2011-01-06 | 2012-07-12 | Microsoft Corporation | Providing deep links in association with toolbars |
US20120179706A1 (en) | 2011-01-06 | 2012-07-12 | Mitel Networks Corporation | Contextual application launch via search query |
US20120316955A1 (en) | 2011-04-06 | 2012-12-13 | Yahoo! Inc. | System and Method for Mobile Application Search |
US20120284247A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Integrating applications within search results |
US20120284256A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Location-aware application searching |
US20120290584A1 (en) | 2011-05-09 | 2012-11-15 | Google Inc. | Recommending Applications for Mobile Devices Based on Installation Histories |
US20120323898A1 (en) * | 2011-06-16 | 2012-12-20 | Microsoft Corporation | Surfacing applications based on browsing activity |
US20130006897A1 (en) | 2011-07-01 | 2013-01-03 | Google Inc. | Predicting user navigation events |
US20130019202A1 (en) * | 2011-07-14 | 2013-01-17 | Nuance Communications, Inc. | Methods and apparatus for delivering information of various types to a user |
US20130232256A1 (en) | 2011-08-31 | 2013-09-05 | Nhn Corporation | System and method for providing ranking information of mobile application |
US20130097596A1 (en) * | 2011-10-17 | 2013-04-18 | Google Inc. | Selective notification of native applications |
US20130110815A1 (en) | 2011-10-28 | 2013-05-02 | Microsoft Corporation | Generating and presenting deep links |
US20130111328A1 (en) | 2011-11-01 | 2013-05-02 | Amit Khanna | Launching applications from webpages |
US8554345B2 (en) | 2011-11-10 | 2013-10-08 | Cbs Interactive, Inc. | APP rating system |
US20130122861A1 (en) | 2011-11-11 | 2013-05-16 | Electronics And Telecommunications Research Institute | System and method for verifying apps for smart phone |
US20130124606A1 (en) | 2011-11-14 | 2013-05-16 | Boopsie, Inc. | Automatic personalization of downloadable mobile apps |
US20130139182A1 (en) * | 2011-11-25 | 2013-05-30 | Microsoft Corporation | Integrating An Application Into Operating System Components Of A Mobile Computing Platform |
US20140052617A1 (en) * | 2011-12-13 | 2014-02-20 | Visa International Service Association | Payment platform interface widget generation apparatuses, methods and systems |
US20130191360A1 (en) | 2012-01-19 | 2013-07-25 | Google Inc. | System and method for improving access to search results |
US20130298007A1 (en) | 2012-04-18 | 2013-11-07 | International Business Machines Corporation | Determining page loading of user interfaces of web applications |
US20130325856A1 (en) | 2012-06-04 | 2013-12-05 | Apple Inc. | App recommendation using crowd-sourced localized app usage data |
US20140047413A1 (en) * | 2012-08-09 | 2014-02-13 | Modit, Inc. | Developing, Modifying, and Using Applications |
US8656265B1 (en) * | 2012-09-11 | 2014-02-18 | Google Inc. | Low-latency transition into embedded web view |
US8631097B1 (en) * | 2012-10-11 | 2014-01-14 | Google Inc. | Methods and systems for finding a mobile and non-mobile page pair |
US8510764B1 (en) | 2012-11-02 | 2013-08-13 | Google Inc. | Method and system for deep links in application contexts |
US20140201179A1 (en) * | 2013-01-16 | 2014-07-17 | Google Inc. | Indexing application pages of native applications |
US20140244786A1 (en) * | 2013-02-27 | 2014-08-28 | Quixey, Inc. | Techniques for Sharing Application States |
US20140250147A1 (en) * | 2013-03-01 | 2014-09-04 | Quixey, Inc. | Generating Search Results Containing State Links to Applications |
US20140282032A1 (en) * | 2013-03-15 | 2014-09-18 | Microsoft Corporation | Dynamically configuring user experiences with action uniform resource identifiers |
US20140316890A1 (en) * | 2013-04-23 | 2014-10-23 | Quixey, Inc. | Entity Bidding |
US20140359598A1 (en) * | 2013-05-29 | 2014-12-04 | Microsoft Corporation | Application installation from search results |
US9720672B2 (en) * | 2014-01-06 | 2017-08-01 | Quixey, Inc. | Searching and accessing application functionality |
US9608870B1 (en) * | 2014-02-28 | 2017-03-28 | Google Inc. | Deep link verification for native applications |
US20150254310A1 (en) * | 2014-03-04 | 2015-09-10 | Google Inc. | Triggering and ranking of native applications |
US9817646B1 (en) * | 2014-03-17 | 2017-11-14 | Google Llc | Multiplatform and multichannel distribution of web applications across devices |
US20160070801A1 (en) * | 2014-09-05 | 2016-03-10 | Quixey, Inc. | Augmenting Search Results With Device And Application History |
US20160085514A1 (en) * | 2014-09-23 | 2016-03-24 | Quixey, Inc. | Development System and Method for Providing External Functionality |
US20160117388A1 (en) * | 2014-10-23 | 2016-04-28 | Quixey, Inc. | Searching and Accessing Application Functionality |
US20160132596A1 (en) * | 2014-11-12 | 2016-05-12 | Quixey, Inc. | Generating Search Results Based On Software Application Installation Status |
US20160179956A1 (en) * | 2014-12-23 | 2016-06-23 | Quixey, Inc. | Techniques For Efficient Access Of Software Application Functionality In Search |
US20160191639A1 (en) * | 2014-12-31 | 2016-06-30 | Quixey, Inc. | Recommending Content Based On User Profiles Clustered By Subscription Data |
US20160203519A1 (en) * | 2015-01-09 | 2016-07-14 | Facebook, Inc. | Presenting content to an online system user promoting interaction with an application based on installation of the application on a client device |
Also Published As
Publication number | Publication date |
---|---|
US10210263B1 (en) | 2019-02-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9547721B2 (en) | Native application search results | |
US10073911B2 (en) | Deep links for native applications | |
KR102254117B1 (en) | Indexing application pages of native applications | |
US10713324B2 (en) | Search results for native applications | |
US11188578B1 (en) | Search suggestions based on native application history | |
US9146972B2 (en) | Ranking of presentation modes for particular content | |
CN107408065B (en) | Monitoring application loading | |
JP6410992B1 (en) | Pre-instantiating native applications in the background | |
KR102023147B1 (en) | Application partial deep link to the corresponding resource | |
US11003728B1 (en) | Native application search results | |
US9513961B1 (en) | Monitoring application loading | |
US20150193393A1 (en) | Dynamic Display of Web Content | |
RU2774319C2 (en) | Deep links for native applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |