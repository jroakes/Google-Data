CN111247538A - Simulation of quantum circuits - Google Patents
Simulation of quantum circuits Download PDFInfo
- Publication number
- CN111247538A CN111247538A CN201780096102.XA CN201780096102A CN111247538A CN 111247538 A CN111247538 A CN 111247538A CN 201780096102 A CN201780096102 A CN 201780096102A CN 111247538 A CN111247538 A CN 111247538A
- Authority
- CN
- China
- Prior art keywords
- quantum
- quantum circuit
- function
- classical
- representing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000004088 simulation Methods 0.000 title claims description 24
- 230000006870 function Effects 0.000 claims abstract description 120
- 238000000034 method Methods 0.000 claims abstract description 102
- 238000005192 partition Methods 0.000 claims abstract description 35
- 238000012360 testing method Methods 0.000 claims abstract description 8
- 239000002096 quantum dot Substances 0.000 claims description 76
- 238000004422 calculation algorithm Methods 0.000 claims description 59
- 230000008030 elimination Effects 0.000 claims description 58
- 238000003379 elimination reaction Methods 0.000 claims description 58
- 239000011159 matrix material Substances 0.000 claims description 24
- 238000003860 storage Methods 0.000 claims description 14
- NHTMVDHEPJAVLT-UHFFFAOYSA-N Isooctane Chemical compound CC(C)CC(C)(C)C NHTMVDHEPJAVLT-UHFFFAOYSA-N 0.000 claims description 6
- JVSWJIKNEAIKJW-UHFFFAOYSA-N dimethyl-hexane Natural products CCCCCC(C)C JVSWJIKNEAIKJW-UHFFFAOYSA-N 0.000 claims description 6
- 230000003993 interaction Effects 0.000 claims description 5
- 239000000126 substance Substances 0.000 claims description 4
- 230000008569 process Effects 0.000 description 27
- 238000012545 processing Methods 0.000 description 21
- 238000010586 diagram Methods 0.000 description 19
- 230000009471 action Effects 0.000 description 18
- 238000004590 computer program Methods 0.000 description 17
- 230000008878 coupling Effects 0.000 description 7
- 238000010168 coupling process Methods 0.000 description 7
- 238000005859 coupling reaction Methods 0.000 description 7
- 238000012805 post-processing Methods 0.000 description 6
- 238000004891 communication Methods 0.000 description 5
- 238000013507 mapping Methods 0.000 description 5
- 230000008859 change Effects 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000005281 excited state Effects 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000006698 induction Effects 0.000 description 2
- 238000005259 measurement Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 230000009466 transformation Effects 0.000 description 2
- 238000004458 analytical method Methods 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000004907 flux Effects 0.000 description 1
- 230000005283 ground state Effects 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 239000004576 sand Substances 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/32—Circuit design at the digital level
- G06F30/33—Design verification, e.g. functional simulation or model checking
- G06F30/3308—Design verification, e.g. functional simulation or model checking using simulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/32—Circuit design at the digital level
- G06F30/33—Design verification, e.g. functional simulation or model checking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/20—Models of quantum computing, e.g. quantum circuits or universal quantum computers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/80—Quantum programming, e.g. interfaces, languages or software-development kits for creating or handling programs capable of running on quantum computers; Platforms for simulating or accessing quantum computers, e.g. cloud-based quantum computing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/544—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices for evaluating functions by calculation
- G06F7/5443—Sum of products
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/40—Physical realisations or architectures of quantum processors or components for manipulating qubits, e.g. qubit coupling or qubit control
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
Abstract
Methods, systems, and apparatus for simulating a quantum circuit comprising a plurality of quantum logic gates. In one aspect, a method comprises the acts of: representing the plurality of quantum logic gates as a function of one or more classical Boolean variables that define the undirected graphical model, wherein each classical Boolean variable represents a vertex in the model and each function of a respective classical Boolean variable represents a clique between vertices corresponding to the respective classical Boolean variable; representing the probability of obtaining a particular output bit string from the quantum circuit as the sum of first products of a function; and calculating a probability of obtaining a particular output bit string from the quantum circuit by directly evaluating a sum of products of the functions. The calculated partition function is used to (i) calibrate, (ii) validate, or (iii) benchmark test quantum computing hardware implementing the quantum circuit.
Description
Technical Field
This specification relates to quantum computing.
Background
Quantum circuits are a model for quantum computation, where computation is a sequence of quantum logic gates-a reversible transformation on an n-qubit (n-qubit) register.
Disclosure of Invention
This specification describes techniques for simulating quantum circuits. In particular, methods and systems for partition function simulation of two-dimensional quantum circuits and simulation of quantum circuits using controlled phase gates are described.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods for simulating a quantum circuit, wherein the quantum circuit includes a plurality of quantum logic gates, the method including: representing the plurality of quantum logic gates as a function of one or more classical Boolean variables, wherein the function of one or more classical Boolean variables defines a undirected graphical model, each classical Boolean variable representing a vertex in the undirected graphical model and each function of a respective classical Boolean variable representing a clique (clique) between vertices corresponding to the respective classical Boolean variable; representing the probability of obtaining a particular output bit string from the quantum circuit as the sum of first products of a function; and calculating a probability of obtaining a particular output bit string from the quantum circuit by directly evaluating a sum of products of the functions.
Other embodiments of this aspect include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more computers may be configured to perform particular operations or actions by installing software, firmware, hardware, or a combination thereof on the system that in operation causes the system to perform the actions. One or more computer programs may be configured to perform particular operations or actions by virtue of comprising instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
The foregoing and other embodiments may each optionally, individually or in combination include one or more of the following features. In some implementations, directly evaluating the sum of products of the functions includes applying a technique for performing an accurate inference on the undirected graphical model.
In some embodiments, applying the technique for performing accurate inference on undirected graphical models includes applying a variable elimination algorithm.
In some embodiments, applying the variable elimination algorithm comprises: a tree width of the approximately defined undirected graphical model; determining a cancellation order for the variable cancellation algorithm based on the approximated tree width; and evaluating the sum of products of the functions by executing a variable elimination algorithm in the determined elimination order.
In some embodiments, applying the variable elimination algorithm comprises: determining a vertical elimination order for the variable elimination algorithm; and executing a variable elimination algorithm using the determined order.
In some embodiments, a classical boolean variable enumerates (i) each qubit in a system of qubits on which a quantum circuit operates, and (ii) for each qubit a new variable along a worldwide line of qubits.
In some embodiments, calculating the probability of obtaining a particular output bit string from the quantum circuit by directly evaluating the sum of the products of the functions comprises: fixing the value of the first classical boolean variable in each world line to zero; and fixing the value of the last classical boolean variable in the world line of qubits j (qubitj) to the value in the bit string corresponding to position j.
In some embodiments, representing the plurality of quantum logic gates as a function of one or more classical boolean variables includes, for each diagonal one qubit quantum logic gate: the quantum logic gate is represented as a univariate function that takes as input a classical boolean variable that indexes an element on a diagonal of a matrix representation of the quantum logic gate and provides as output a value of the element.
In some embodiments, each input classical Boolean variable of a univariate function is mapped to a vertex in the undirected graphical model corresponding to the variable.
In some embodiments, representing the plurality of quantum logic gates as a function of one or more classical boolean variables includes, for each non-diagonal one qubit: the quantum logic gate is represented as a two-variable function that takes as input a pair of two classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a corresponding value of the element.
In some embodiments, each function of a pair of input classical boolean variables is mapped to an edge in the undirected graphical model that connects two vertices corresponding to these variables.
In some embodiments, representing the plurality of quantum logic gates as a function of one or more classical boolean variables includes, for each diagonal two qubits: the quantum logic gate is represented as a two-variable function that takes as input a pair of two classical boolean variables that index an element on a diagonal of a matrix representation of the quantum logic gate and provides as output a value of the element.
In some embodiments, each function of a pair of input classical boolean variables is mapped to an edge in the undirected graphical model that connects two vertices corresponding to these variables.
In some embodiments, representing the plurality of quantum logic gates as a function of one or more classical boolean variables includes, for each non-diagonal two qubits: the quantum logic gate is represented as a four-variable function that takes as input four classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a corresponding value of the element.
In some embodiments, each function of the four input classical boolean variables is mapped to a link in the undirected graphical model that connects the four fully connected vertices corresponding to these variables.
In some embodiments, the method further comprises determining the performance of the quantum circuit using the calculated probabilities.
In some embodiments, the method further comprises using the computed probabilities to (i) calibrate, (ii) validate, or (iii) benchmark test quantum computing hardware implementing the quantum circuit.
In some embodiments, the method further comprises representing the desired value of the operator as a sum of second products of the function; and calculating the expected value of the defined operator by directly evaluating the sum of the products of the functions.
In general, another innovative aspect of the subject matter described in this specification can be embodied in methods for simulating a quantum circuit, the method including: representing the quantum circuit as a product of unitary matrices corresponding to the sequence of clock cycles; representing the probability of outputting a predefined bit string after applying a final clock cycle of the quantum circuit on a system of qubits as a partition function of a classical inching model at a virtual (imaginary) temperature, the probability depending on a product of a unitary matrix; and precisely computing a partition function to determine a probability of outputting the predefined bit string after applying the final clock cycle of the quantum circuit on the system of qubits includes applying an algorithm that performs a precise inference on the graphical model.
Other embodiments of this aspect include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more computers may be configured to perform particular operations or actions by installing software, firmware, hardware, or a combination thereof on the system that in operation causes the system to perform the actions. One or more computer programs may be configured to perform particular operations or actions by virtue of comprising instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
The foregoing and other embodiments may each optionally, individually or in combination include one or more of the following features. In some embodiments, accurately calculating the partition function includes representing the classical isooctane model as a graphical model that includes: nodes representing spins in the classical Eschen model and edges representing interactions between spins; determining the tree width of the graphic model; and applying an algorithm developed for performing accurate inference on the graphical model using the determined tree width to compute a partition function of the classical Esinc model.
In some embodiments, the algorithms developed to perform accurate inference on the graphical model include bucket (bucket) elimination algorithms or variable elimination algorithms.
In some embodiments, the computational cost of the algorithm is exponential with the tree width of the graphical model representation of the classical Esinc model.
In some embodiments, representing the probability of outputting a predefined bit string after applying the final clock cycle of the quantum circuit as a partition function of a classical isooctane model at a virtual temperature comprises: expressing the probability as a path integral comprising a plurality of phase factors associated with the paths in the path integral; and determining a value of the phase factor accumulated as a sum of discrete phase changes associated with quantum logic gates in the quantum circuit.
In some implementations, the quantum circuit is configured to operate on qubits arranged in a two-dimensional lattice (lattice).
In some embodiments, the quantum circuit includes (i) a controlled phase, (ii) X1/2、(iii)Y1/2And (iv) a non-Clifford (non-Clifford) T quantum logic gate.
In some embodiments, the quantum circuit includes a depth of d clock cycles.
In some embodiments, the probability of outputting a predefined bit string after applying the final clock cycle of the quantum circuit on a system of qubits is given by:
wherein, | x>Representing a predefined bit string, | ψd>Representing the state of the system of n qubits after the final clock cycle d, to which the quantum circuit is applied, U(t)Represents the product of unitary matrices corresponding to sequences of clock periods 1 to d, an states 0 and 1, respectively, of the j-th qubit
In some embodiments, the partition function of the classical isooctane model at a virtual temperature is given by:
wherein the content of the first and second substances,
In some embodiments, the calculated partition function is used to determine the performance of the quantum circuit.
In some embodiments, the calculated partition function is used to (i) calibrate, (ii) verify, or (iii) benchmark test quantum computing hardware implementing the quantum circuit.
The subject matter described in this specification can be implemented in particular ways to realize one or more of the following advantages.
As described in this specification, the system and method for simulating a quantum circuit provides more efficient use of computational resources and provides computational and practical improvements over existing methods for simulating a quantum circuit.
Furthermore, as described in this specification, systems and methods for simulating quantum circuits may be used to improve quantum computing hardware. For example, simulation results generated by the systems and methods described in this specification can be used to calibrate or verify quantum computing hardware, or to determine adjustments that can improve the accuracy or efficiency of existing quantum computing hardware.
As described in this specification, systems and methods for simulating quantum circuits may be implemented on a large scale (at scale) using modest computational resources (e.g., on a workstation).
The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 depicts an example system for simulating a quantum circuit.
FIG. 2 is a flow diagram of an example process for simulating a quantum circuit using controlled phase gates.
Fig. 3A is a diagram of an example quantum logic gate and corresponding graphical model representation of a qubit in opposite corners.
Fig. 3B is a diagram of an example quantum logic gate and corresponding graphical model representation of a non-diagonal one of the qubits.
Fig. 3C is a diagram of an example quantum logic gate and corresponding graphical model representation of two qubits in opposite corners.
Fig. 3D is a diagram of an example quantum logic gate and corresponding graphical model representation of two non-diagonal qubits.
Fig. 4 is a diagram of an example quantum circuit and a corresponding undirected graphical model representation of the quantum circuit.
FIG. 5 is a flow diagram of an example process of applying a variable elimination algorithm to directly evaluate a sum of products of a function representing one or more classical Boolean variables of a plurality of quantum logic gates.
FIG. 6 is a flow diagram of an example process for partition function simulation of a quantum circuit.
FIG. 7 is a flow diagram of an example process for accurately calculating the partition function of the classical Esinc model at a virtual temperature.
Fig. 8 is a plot (plot) of the numerical upper limit of the tree width of the interaction pattern of the isooctane model corresponding to quantum circuits with 6 × 6, 7 × 6, and 7 × 7 qubits as a function of circuit depth.
Fig. 9 is a graph of the magnitude of the maximum tensor rank (rank) as a function of circuit depth for quantum circuits with 6 × 6, 7 × 6, and 7 × 7 qubits using vertical erasure ordering.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Simulating a quantum circuit is an essential part of manufacturing quantum hardware. For example, simulating quantum circuits can be used for calibration, verification, and benchmark testing of emerging quantum computing hardware and architectures.
Conventional processes for simulating generic quantum circuits, such as circuits that do not have symmetry that allows for faster shorts (shorts) or simulations, typically require significant computational resources and technical optimizations. For example, conventional processes for simulating quantum circuits use a number of technically optimized techniques to convert the application of quantum logic gates included in the quantum circuits into correspondingly optimized efficient matrix multiplications. The optimized effective matrix multiplication is then applied directly to the vector states using a computer with a high level of computational performance (e.g., a classical supercomputer).
The computations in supercomputers are scarce and expensive. Furthermore, even supercomputers may not be able to simulate quantum circuits on a large scale. For example, benchmark test results for simulating a quantum circuit with only 9 x 5 qubits and a depth of 25 deplete current classical supercomputers.
Thus, large scale simulation of generic quantum circuits without the use of brute force calculations, approximations, and/or large amounts of computational resources is a very important technical problem in the field of quantum computing.
This specification describes methods and systems for more efficient simulation of low depth quantum circuits with controlled phase gates. The output amplitude of the quantum circuit is represented as a undirected graphical model, which is then solved using the property that the controlled phase gates in the computational base are diagonal, using an exact inference algorithm (e.g., a variable elimination algorithm) in a probabilistic graphical model. The computational cost of the method is exponential to the tree width of the undirected graph.
This specification also describes methods and systems for more efficient simulation of generic quantum circuits by directly mapping the quantum circuits to partition functions of the Esinc model in virtual time. The partition function can be solved accurately using algorithms developed in the context of accurate inference of graphical models. The term "solve exactly" or "calculate exactly" means to solve or calculate without applying an approximation. Thus, the methods described in this specification can be implemented on a large scale using modest computing resources (e.g., on a workstation).
The described systems and methods result in more efficient use of computational resources and provide computational and practical improvements over existing methods for simulating quantum circuits. Furthermore, the described systems and methods may be used to improve quantum computing hardware. For example, simulation results generated by the systems and methods described in this specification can be used to calibrate or verify quantum computing hardware, or to determine adjustments that can improve the accuracy or efficiency of existing quantum computing hardware.
Example hardware
Fig. 1 depicts an example system 100 for simulating a quantum circuit. Example system 100 is an example of a system implemented as a classical computer program on one or more classical computers at one or more locations, where the systems, components, and techniques described below may be implemented.
The components of the quantum computing hardware 112 may include, but are not limited to, a plurality of qubits, quantum circuits (including quantum logic gates), control and measurement devices. In general, the types of components included in the quantum computing hardware 112 may depend on the physical implementation of the qubits included in the quantum computing hardware 112 and the types of computations performed by the quantum computing hardware 112.
For example, in some embodiments, the qubit may be a superconducting qubit, such as, for example, a superconducting charge qubit, a superconducting flux qubit, or a superconducting phase qubit. In these examples, the quantum computing hardware 112 may include one or more quantum circuits that implement controlled phase quantum logic gates (e.g., controlled Z quantum logic gates) as gates of two qubits as well as gates of other single and multiple qubits. In some implementations, the quantum circuitry included in the quantum hardware 112 may include low depth quantum circuitry, e.g., having a depth no greater than approximately linear of L for circuitry implemented in a two-dimensional lattice of L by L qubits.
Alternatively or additionally, the quantum computing hardware may include quantum circuitry operating on a two-dimensional lattice of qubits. In some implementations, the quantum circuit may include the following set of quantum logic gates for a circuit having a clock cycle of depth d: (1) a quantum logic gate comprising two qubits of a controlled phase (CZ) quantum logic gate, and (2) a quantum logic gate comprising a quantum bit from the set { X }1/2，Y1/2Gate of a single qubit of a gate of T, where X1/2Representing the X-axis around the Bloch sphere (Bloch sphere)
Classical processor 102 may receive input data, such as input data 104, specifying the quantum circuit to be simulated. For example, classical processor 102 may receive input data specifying properties of quantum circuits included in quantum hardware 112.
Classical processor 102 may generate output data, such as output data 106, that represents processed input data 104. For example, the generated output data 106 may include data representing the probability of obtaining a particular bit string after applying the final clock cycle of the quantum circuit specified by the input data 104 on the system of qubits.
The generated output data 106 may be provided to a post-processing module 108 for processing or analysis, for example, as part of a quantum simulation process. For example, output data representing the probability of outputting different bit strings after applying the quantum circuit on a system of qubits may be processed or analyzed by the post-processing module 108 to determine properties of the quantum circuit (e.g., its performance), or to calibrate, validate, or benchmark the quantum circuit. The post-processing module 108 may generate as output data representing the determined properties of the quantum circuit, such as simulation data 110.
In some implementations, the post-processing module 108 can further generate as output data representing one or more adjustments 114 that can be used to adjust the quantum hardware (e.g., quantum hardware 112). For example, the post-processing module 108 may use the generated simulation data 110 to determine adjustments to the quantum circuit specified by the received input data 104. For example, the simulation data 110 may be used with cross-entropy benchmarking to estimate experimental fidelity of quantum circuit and quantum logic gate implementations. Then, an outer loop may be performed to find the best experimental control to improve fidelity.
In some implementations, the classical processor 102 may include a processor with enhanced computing capabilities, such as a workstation. For example, where the system 100 is configured to perform a method for simulation of a quantum circuit, as described below with reference to fig. 2, the system 100 may use a workstation to efficiently and accurately implement the method without the need for a supercomputer. In some embodiments, classical processor 102 may include, for example, a cluster of central processing units and tensor processing units running tensrflow.
Programming hardware
FIG. 2 is a flow diagram of an example process 200 for simulating a quantum circuit including a plurality of quantum logic gates. For convenience, process 200 will be described as being performed by a system of one or more classical computing devices located at one or more locations. For example, process 200 may be performed by system 100 of FIG. 1 appropriately programmed according to the present description.
The system represents the plurality of quantum logic gates as a function ψ of one or more classical boolean variables (step 202). Each classical Boolean variable may be represented by
The function psi number defines an undirected graphical model in which each classical Boolean variable
For example, in some embodiments, the quantum circuit may include quantum logic gates of one or more diagonal qubits, where the gate of each diagonal qubit may be given by
In these embodiments, the system may represent the quantum logic gates as a univariate function that takes as input a classical boolean variable that indexes an element on a diagonal of a matrix representation of the quantum logic gates, and provides as output a value of the element. For example, the system may represent the quantum logic gate as a univariate function given by:
univariate function psi1,dEach input classical Boolean variable of
As another example, in some embodiments, a quantum circuit may include quantum logic gates of one qubit of one or more off-diagonal (also known as two-sparse), where the gate of one qubit of each off-diagonal may be given by:
in these embodiments, the system may represent the quantum logic gate as a two-variable function that takes as input a pair of two classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a corresponding value of the element. For example, the system may represent the quantum logic gate as a two-variable function given by:
where j represents the index of the qubit on which the quantum logic gate acts, and new variables are introduced along the worldwide line of qubits
Bivariate function psi1,ndEach pair of input classical Boolean variables of
As another example, in some embodiments, the quantum circuit may include one or more diagonal two-qubit quantum logic gates, wherein the quantum logic gates of each diagonal two-qubit may be given by:
in these embodiments, the system may represent the quantum logic gate as a two-variable function that takes as input a pair of two classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a value of the element. For example, the system may represent the quantum logic gate as a two-variable function given by:
bivariate function psi2,ndEach pair of input classical Boolean variables of
As another example, in some embodiments, the quantum circuit may include one or more non-diagonal two-qubit quantum logic gates, wherein the quantum logic gate for each non-diagonal two-qubit may be given by:
in these embodiments, the system may represent the quantum logic gate as a four-variable function that takes as input four classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a corresponding value of the element. For example, the system may represent the quantum logic gate as a four variable function given by:
wherein the index j, j 'marks the two qubits on which the quantum logic gate acts by introducing two new variables, and the world line index k, k' is incremented by one along the world line of the two qubits. Four input classical Boolean variables
Where the quantum circuit comprises quantum logic gates operating on three or more qubits, the above description of representing the quantum gates as a function of classical boolean variables can be extended accordingly.
The system represents the probability of obtaining a particular output bit string from the quantum circuit as the sum of the first products of the functions (step 204). The probability may be given by:
p(x)＝|<x|U|0>|2＝|φ(x)|2(9)
where U denotes the sequence of the gate of one qubit and the gates of two qubits U ═ Uv,…,U1And |0>Indicating an initial state, exampleSuch as product state
The sum ψ of the first products of the functions may be defined using a technique similar to the fisherman path representation, and may be given by
Wherein the function ψ is defined as above with reference to step 202.
The system calculates the probability of obtaining a particular output bit string from the quantum circuit by directly evaluating the sum of the products of the functions (step 206). The system directly evaluates the sum of products of functions using techniques developed in the context of accurate inference against undirected graphical models (also known as markov random fields). For example, the system may apply a bucket elimination algorithm or a variable elimination algorithm.
Typically, algorithms developed in the context of accurate inference for undirected graphical models, such as variable elimination algorithms, are applied to classical probabilistic models, i.e. probabilistic models representing systems described by real numbers. However, in this specification, the applicability of this algorithm is expanded. The algorithm is applied to a graphical model of a quantum circuit taking imaginary values and is therefore not a probability in the classical sense. An example process of applying a variable elimination algorithm to directly evaluate the sum of products of functions is described below with reference to fig. 5.
In some embodiments, the graphical model of the quantum circuit may be directly interpreted as an Esinon model at a virtual temperature, as described below with reference to FIG. 6. In these embodiments, the applicability of the algorithm developed in the context of no accurate inference to the graphical model is also extended to calculate the partition function of the Esino model at the imaginary temperature. An example process for accurately calculating the partition function of the classical Esin model at a virtual temperature using a variable elimination algorithm is described below with reference to FIG. 7.
In some embodiments, the computation obtained from the quantum circuit is performed by directly evaluating the sum of products of the functionsThe probability of a particular output bit string may include: in the sum, the first classical Boolean variable in each world line j is summed
The system may determine properties of the quantum circuit using the computed probability of obtaining a particular output bit string from the quantum circuit (step 208). For example, the computed probabilities may be used to determine the performance of the quantum circuit. As another example, the computed probabilities may be used to (i) calibrate, (ii) verify, or (iii) benchmark test quantum computing hardware implementing a quantum circuit.
The process 200 described above may be used to calculate the expected value of the operator O
Fig. 3A is a diagram 300 of a quantum logic gate 302 and a corresponding graphical model representation 304 of a qubit in a diagonal. As described above with reference to step 202 and equation (1) of fig. 2, the quantum logic gate 302 of a diagonal one-qubit is mapped to a single vertex 304 in the graphical representation of the quantum circuit comprising the quantum logic gate 302 of a diagonal one-qubit.
Fig. 3B is a diagram 310 of an example non-diagonal quantum logic gate 312 and corresponding graphical model representations 314a, 314B of one qubit. As described above with reference to step 202 and equation (3) of fig. 2, the quantum logic gate 312 of a non-diagonal one of the qubits maps to two connected vertices 314a, 314b in the graphical representation of the quantum circuit comprising the quantum logic gate 312 of a non-diagonal one of the qubits.
Fig. 3C is a diagram 320 of an example diagonal quantum logic gate 322 and corresponding graphical model representations 324a, 324b of two qubits. As described above with reference to step 202 and equation (5) of fig. 2, the quantum logic gate 322 of two qubits in a diagonal maps to a link between two connected vertices 324a, 324b in the graphical representation of the quantum circuit comprising the quantum logic gate 322 of one qubit in a non-diagonal.
Fig. 3D is a diagram 330 of an example quantum logic gate 332 and corresponding graphical model representations 334a, 334b of two non-diagonal qubits. As described above with reference to step 202 and equation (7) of fig. 2, the quantum logic gate 322 of the non-diagonal two qubits maps to four fully connected vertices 334a, 334b, 334c, 334d in the graphical representation of the quantum circuit comprising the quantum logic gate 332 of the non-diagonal one qubit.
Fig. 4 is a diagram of an example quantum circuit 400 and a corresponding undirected graphical model representation 450 of the quantum circuit 400. The example quantum circuit 400 is configured to operate on a register of two qubits 402a and 402 b. The example quantum circuit 400 includes a first Hadamard gate (non-diagonal single qubit gate) 404a operating on a first qubit 402a, a second Hadamard gate 404b operating on a second qubit 402b, a controlled Z gate (diagonal two-qubit gate) 406 operating on both qubits 402a and 402b, a third Hadamard gate 408a operating on the first qubit 402a, and a fourth Hadamard gate 408b operating on the second qubit 402b and two measurement gates 410a, 410 b.
The corresponding undirected graphical model representation 450 of quantum circuit 400 includes six vertices 452a, 452b, 452c, 452d, 452e, 452 f. Vertices 452a and 452b correspond to hadamard gate 404 a. Vertices 452d and 452e correspond to hadamard gate 404 b. Vertices 452b and 452e correspond to controlled Z gate 406. Vertices 452b and 452c correspond to hadamard gate 408 a. Vertices 452e and 452f correspond to hadamard gate 408 b.
Fig. 5 is a flow diagram of an example process 500 of applying a variable elimination algorithm to directly evaluate a sum of products of a function representing one or more classical boolean variables of a plurality of quantum logic gates. For convenience, process 500 will be described as being performed by a system of one or more classical computing devices located at one or more locations. For example, process 500 may be performed by system 100 of FIG. 1 appropriately programmed according to the present description.
The system approximates the tree width of the defined undirected graphical model described above with reference to FIG. 2 (step 502). The tree width of the defined undirected graph model is defined as the minimum induced width (induced width) of the graph model (graph) over all possible elimination orders of the graph. The elimination order is the ordering of vertices, and when vertex X is eliminated, edges are added between all vertices connected to X. The induction width of the elimination sequence is the size of the largest bolus on all plots formed following the elimination sequence. A clique is a set of vertices in which all vertex pairs are connected by a link. The tree width may be determined using one of a number of possible heuristic algorithms, such as QuickBB.
The system determines a cancellation order for the variable cancellation algorithm based on the approximated tree width (step 504). The order of elimination for the variable elimination algorithm is the same as the order of elimination of vertices described above with reference to step 502.
In some embodiments, alternative techniques may be used to determine the elimination order for the variable elimination algorithm as described above with reference to steps 502 and 504. For example, for circuits with low depth and low dimensions, the system may determine a vertical variable elimination ordering. To determine the vertical variable elimination ordering, the system may process one of the qubits on which the quantum circuit operates at a time, sequentially eliminating all variables in one world line before moving to an adjacent qubit. For example, for a quantum circuit in a two-dimensional lattice of qubits with gates restricted to two qubits of nearest neighbors, the mapping of the circuit output amplitude to an undirected graphical model results in a classical transformation from booleanMeasurement ofqubit j + 1
The system evaluates the sum of the products of the functions by executing a variable elimination algorithm in the determined elimination order (step 506).
For example, to compute input |00 of quantum circuit 400 described above with reference to FIG. 4>And output |00>First, the system represents the quantum logic gates 404a, 404b, 406, 408a, and 408b as classical boolean variables, respectivelygraphical representations 450, as described above with reference to fig. 4. The vertices labeled 452a, 452b, 452c, 452d, 452e, and 452f in FIG. 4 correspond to Boolean variables, respectively
more specifically, the amplitude <00| C |00> (where C represents the quantum circuit 400 of FIG. 4) is given by:
wherein the function ψHCorresponds to hadamard gate and is given by the following table:
function psiCZCorresponding to the controlled Z gate and given by the following table:
0 0 | 1 |
0 1 | 1 |
1 0 | 1 |
1 1 | -1 |
therefore, equation (11) can be written as
0 | 1/2 |
1 | 0 |
FIG. 6 is a flow diagram of an example process 600 for partition function simulation of a quantum circuit. For convenience, process 600 will be described as being performed by a system of one or more classical computing devices located at one or more locations. For example, process 600 may be performed by system 100 of FIG. 1 appropriately programmed according to the present description.
The system represents the quantum circuit as a unitary matrix U corresponding to a sequence of clock cycles t e {1, …, d }(t)The product of (step 602). As described above with reference to fig. 1, in some embodiments, a quantum circuit may be a circuit configured to operate on a qubit system (e.g., with nearest neighbor connectivity) arranged as a two-dimensional lattice. In some embodiments, a quantum circuit may include (i) a controlled phase (CZ) quantum logic gate as a gate of two qubits, and (ii) an X as a gate of a single qubit1/2，Y1/2And a non-Cliford T quantum logic gate, wherein X1/2Representing the X-axis around the Bloch sphere
The system represents the probability of outputting a predefined bit string after applying the final clock cycle of the quantum circuit on the system of qubits as a partition function of the classical Esinogram model at the imaginary temperature (step 604).
The probability of outputting a predefined bit string after applying the final clock cycle of a quantum circuit on a system of qubits depends on the unitary matrix U(t)And may be given by:
wherein, | x>Representing a predefined bit string, | ψd>Representing the state of the system of n qubits after the final clock cycle d, to which the quantum circuit is applied, U(t)Represents the product of unitary matrices corresponding to sequences of clock periods 1 to d, an states 0 and 1 corresponding to the j-th qubit, respectively
To represent the probability of outputting a predefined bit string after applying the final clock cycle of the quantum circuit as the partition function of the classical Eicogen model at imaginary temperature, the system may express the probability (e.g., the right-hand side of equation (1) above) as a Fisher-Man path integral, where the individual paths { σ } are-1,σ0,…,σdFormed by a sequence of n qubit system computation basis states. For all qubits, the initial condition of each path may correspond to
If T quantum logic gates are applied to qubits j at period T, the matrix<σt|U(t)|σt-1>May be equal to each other, i.e.,
With quantum circuits, each qubit j may have a sequence of two sparse gates applied to it. The length of the sequence may be denoted as d (j) +1 (this includes the 0 th cycle formed by the layer of the hadamard gate applied to each qubit). In a given path, qubit j undergoes a sequence of spin states
thus, individual paths in the path integrals can pass
wherein the content of the first and second substances,
The system may then determine a phase factor that accumulates as a sum of discrete phase changes associated with individual quantum logic gates in the quantum circuit
For example, to determine as X1/2And Y1/2Accumulated phase factor of sum of discrete phase changes associated with gates
accumulated phase factor for determining sum of discrete phase changes associated with T and CZ quantum logic gates
for a given qubit pair (i, j), the system may introduce coefficients
comparing equation (13) above with equations (14) - (16) above shows: probability defined in equation (13)<x|ψd>In the form of a partition function of the classical Esinc model, with an energy H for the state ssAnd is prepared by
The system computes the partition function of the classical Esinc model at the virtual temperature to determine the probability of outputting a predefined bit string after the final clock cycle of applying the quantum circuit on the system of qubits (step 606).
The system accurately computes the partition function of the classical Esinogram model at the imaginary temperature by applying one or more algorithms that are typically used to perform accurate inferences on the graphical model to accurately compute the partition function. Example algorithms include, but are not limited to, bucket elimination algorithms, and product or variable elimination algorithms. As described above with reference to fig. 5, typically, algorithms developed in the context of accurate inference for undirected graphical models (such as variable elimination algorithms) are applied to classical probabilistic models, i.e. probabilistic models representing systems described by real numbers. However, in this specification, the applicability of this algorithm is expanded. An example process for accurately calculating the partition function of the classical Esin model at a virtual temperature using a variable elimination algorithm is described below with reference to FIG. 7.
The probability of outputting a predefined bit string after applying the final clock cycle of the quantum circuit on the system of qubits is used to simulate the quantum circuit (step 608). For example, the determined probabilities may be used to determine performance of the quantum circuit, or to calibrate, validate, or benchmark the quantum computing hardware implementing the quantum circuit. In some implementations, the system can use the determined probabilities and/or results of the simulation of the quantum circuit to determine adjustments that can improve the quantum circuit (e.g., improve the accuracy of the quantum circuit).
FIG. 7 is a flow diagram of an example process 700 for accurately calculating a partition function of a classical Esin model at a virtual temperature using a variable elimination algorithm. For convenience, process 700 will be described as being performed by a system of one or more classical computing devices located at one or more locations. For example, process 700 may be performed by system 100 of FIG. 1 appropriately programmed according to the present description.
The system represents the classic Esinon model as a graphical model (step 702). A graph model (also referred to as an interaction model) is a graph of nodes and edges. The nodes in the graphical model represent spins in the classical Esinon model. The edges between the nodes represent the coupling between spins in the classical Esinon model. To represent the classical Eschen model as a graphical model, the system determines the value of the coupling coefficient between spins in the classical Eschen model.
To determine the value of the coupling coefficient between spins, the system will determine the energy H of the classical Esinon model given in equation (13) aboveS(x) Expressed as the sum of three different types of terms:
first item
Second item
Item III(2)Dependent on the spin variable x instead of s, i.e. H(2)＝H(2)(x)。
Equations (17) - (24) above enable the system to define the structure of the graphical model. The system further describes the evolution of the quantum bit state under the influence of the quantum logic gates in the quantum circuit by introducing a third dimension describing the diagram of the Esinc coupling given in equation (21). For each qubit j, an index with a value of t e [1 … d]A world line of a grid of enumerated points, wherein each point corresponds to a layer. Therefore, the sum coefficient
The system approximates the tree width of the graphical model (step 704). The tree width of the graphical model is defined as the minimum induced width of the graphical model (graph) over all possible elimination orders of the graph. The elimination order is the ordering of vertices, and when vertex X is eliminated, edges are added between all vertices connected to X. The induction width of the elimination sequence is the size of the largest clique on all the plots formed following the elimination sequence. A clique is a set of vertices in which all vertex pairs are connected by a link. The tree width may be determined using one of a number of possible heuristic algorithms, such as QuickBB. In some embodiments, the system may store the approximate tree width in a cache. In these embodiments, approximating the tree width of the graphical model may include determining that the graphical model matches a previously generated graphical model, and querying a cache to retrieve a previously calculated tree width of the graphical model.
The system determines the ordering of the variable elimination algorithm using the determined tree width (step 706). The order of elimination of the variable elimination algorithm is the same as the order of elimination of vertices described above with reference to step 704.
The system accurately calculates the partition function of the classical Esinon model at the imaginary temperature by executing a variable elimination algorithm (step 708). Executing the variable elimination algorithm may proceed as described above with reference to step 506 of fig. 5, where the function ψ is given by the exponent of the yincin term.
Fig. 8 is a graph 800 of example numerical upper limits of tree widths for interaction maps of the itaxin model corresponding to quantum circuits having 6 × 6, 7 × 6, and 7 × 7 qubits as a function of circuit depth.
The quantum circuit included in the circuit described above with reference to fig. 1 (i.e., a quantum circuit having 6 × 6, 7 × 6, and 7 × 7 qubits) for generating a graph 800 as a function of circuit depth, which (1) begins with the period of the hadamard gate (clock cycle 0) and (2) repeats d clock cycles: a) placing controlled phase (CZ) gates alternating between eight configurations and (b) not in the same cyclePlace slave set { X over all qubits occupied by the CZ gate1/2，Y1/2T } a gate of randomly selected individual qubits (subject to the following limitations). Door X1/2(or Y)1/2) About the X (or Y) axis of the Bloch sphere
In addition, the gate that places a single qubit is subject to the following rules: (1) placing a gate at the qubit q only if the CZ gate occupies the qubit in a previous cycle; (2) placing a T-gate at qubit q if there is no gate of a single qubit on qubit q in a previous cycle except the initial cycle of the hadamard gate; (3) any gate at qubit q should be different from the gate at qubit q in the previous cycle.
Fig. 9 is a graph 900 of the magnitude of the maximum tensor rank as a function of circuit depth for quantum circuits with 6 × 6, 7 × 6, and 7 × 7 qubits using vertical erasure ordering.
Embodiments of the digital and/or quantum subject matter and digital functional operations and quantum operations described in this specification can be implemented as digital electronic circuitry, suitable quantum circuitry, or, more generally, quantum computing systems, tangibly embodied digital and/or quantum computer software or firmware, digital and/or quantum computers, including the structures disclosed in this specification and their structural equivalents, or combinations of one or more thereof. The term "quantum computing system" may include, but is not limited to, a quantum computer, a quantum information processing system, a quantum cryptography system, or a quantum emulator.
Embodiments of the digital and/or quantum subject matter described in this specification can be implemented as one or more digital and/or quantum computer programs, i.e., one or more modules of digital and/or quantum computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The digital and/or quantum computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access storage device, one or more qubits, or a combination of one or more of them. Alternatively or additionally, program instructions may be encoded on an artificially generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is capable of encoding digital and/or quantum information that is generated to encode the digital and/or quantum information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The terms quantum information and quantum data refer to information or data carried, held or stored by a quantum system, where the smallest nontrivial system is a qubit, i.e., a system that defines a unit of quantum information. It is understood that the term "qubit" encompasses all quantum systems that can be appropriately approximated as two-stage systems in a corresponding context. Such a quantum system may comprise, for example, a multi-stage system having two or more stages. Such systems may include, for example, atomic, electronic, photonic, ionic, or superconducting qubits. In many embodiments, the computational base states are identified as the ground state and the first excited state, however it is understood that other arrangements are possible in which the computational states are identified as higher-order excited states.
The term "data processing apparatus" refers to digital and/or quantum data processing hardware and encompasses various apparatus, devices, and machines for processing digital and/or quantum data, including by way of example a programmable digital processor, a programmable quantum processor, a digital computer, a quantum computer, a plurality of digital and quantum processors or computers, and combinations thereof. The apparatus may also be or further comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array), an ASIC (application-specific integrated circuit), or a quantum simulator, i.e., a quantum data processing apparatus designed to simulate or generate information about a particular quantity of subsystems. In particular, quantum emulators are specialized quantum computers that do not have the capability to perform general-purpose quantum computations. The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the digital and/or quantum computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A digital computer program, which can also be referred to or described as a program, software application, module, software module, script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a digital computing environment. A quantum computer program, which may also be referred to or described as a program, software application, module, software module, script, or code, may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and translated into a suitable quantum programming language or may be written in a quantum programming language such as QCL or Quipper.
A digital and/or quantum computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A digital and/or quantum computer program can be deployed to be executed on one digital and/or quantum computer or on multiple digital and/or quantum computers that are located at one site or distributed across multiple sites and interconnected by a digital and/or quantum data communication network. A quantum data communication network is understood to be a network in which quantum systems (e.g., qubits) can be used to transmit quantum data. Generally, digital data communication networks are not capable of transferring quantum data, whereas quantum data communication networks may transfer both quantum data and digital data.
The processes and logic flows described in this specification can be performed by one or more programmable digital and/or quantum computers operating in conjunction with one or more digital and/or quantum processors, where appropriate, to run one or more digital and/or quantum computer programs to perform functions by operating on input digital and quantum data and generating outputs. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry (e.g., an FPGA or an ASIC), or a quantum emulator, or a combination of special purpose logic circuitry or a quantum emulator and one or more programmed digital and/or quantum computers.
For a system of one or more digital and/or quantum computers that is to be "configured to" perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. By one or more digital and/or quantum computer programs to be configured to perform particular operations or actions is meant that the one or more programs include instructions that, when executed by a digital and/or quantum data processing apparatus, cause the apparatus to perform the operations or actions. A quantum computer may receive instructions from a digital computer that, when executed by a quantum computing device, cause the device to perform operations or actions.
A digital and/or quantum computer adapted to execute a digital and/or quantum computer program may be based on general or special purpose digital and/or quantum processors or both, or any other kind of central digital and/or quantum processing unit. Typically, the central digital and/or quantum processing unit will receive instructions and digital and/or quantum data from a read-only memory, a random access memory, or a quantum system suitable for transmitting quantum data (e.g., photons), or a combination thereof.
The essential elements of a digital and/or quantum computer are a central processing unit for executing or running instructions, and one or more memory devices for storing instructions and digital and/or quantum data. The central processing unit and memory may be supplemented by, or incorporated in, special purpose logic circuitry or quantum emulators. Typically, a digital and/or quantum computer will also include, or be operatively coupled to receive digital and/or quantum data from or transfer digital and/or quantum data, or both, from or to one or more mass storage devices for storing digital and/or quantum data (e.g., a magnetic disk, a magneto-optical disk, an optical disk, or a quantum system suitable for storing quantum information). However, a digital and/or quantum computer need not have such devices.
Digital and/or quantum computer readable media suitable for storing digital and/or quantum computer program instructions and digital and/or quantum data include all forms of non-volatile digital and/or quantum memory, media and storage devices, including by way of example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; CD-ROM and DVD-ROM disks; and quantum systems, such as trapped atoms or electrons. It is understood that quantum memory is a device that can store quantum data with high fidelity and efficiency for long periods of time, such as an optical-to-matter interface, where light is used for transmission and matter is used to store and preserve quantum features of quantum data, such as superposition or quantum coherence.
Control of the various systems described in this specification, or portions thereof, may be implemented in digital and/or quantum computer program products comprising instructions stored on one or more non-transitory machine-readable storage media and executable on one or more digital and/or quantum processing devices. The systems described in this specification, or portions thereof, may each be implemented as an apparatus, method, or system that may include one or more digital and/or quantum processing devices and memory for storing executable instructions to perform the operations described in this specification.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular implementations. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be construed as: such operations are required to be performed in the particular order shown or in sequential order, or all illustrated operations are required to be performed, in order to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various modules and components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (35)
1. A computer-implemented method for simulating a quantum circuit, the method comprising:
receiving data representing a quantum circuit, wherein the quantum circuit comprises a plurality of quantum logic gates;
generating a simulation of a quantum circuit using received data, comprising:
representing a plurality of quantum logic gates specified by the received data as a function of one or more classical Boolean variables, wherein the function of the one or more classical Boolean variables defines a undirected graphical model, each classical Boolean variable represents a vertex in the undirected graphical model and each function of a respective classical Boolean variable represents a clique between vertices corresponding to the respective classical Boolean variable;
representing the probability of obtaining a particular output bit string from the quantum circuit as the sum of first products of a function; and
calculating the probability of obtaining a particular output bit string from the quantum circuit by directly evaluating the sum of the products of the functions; and
one or more properties of the quantum circuit are determined using the generated simulation.
2. The method of claim 1, wherein directly evaluating the sum of products of the functions comprises applying a technique for performing accurate inference on undirected graphical models.
3. The method of claim 2, wherein applying a technique for performing accurate inference on undirected graphical models comprises applying a variable elimination algorithm.
4. The method of claim 3, wherein applying a variable elimination algorithm comprises:
a tree width of the approximately defined undirected graphical model;
determining a cancellation order for the variable cancellation algorithm based on the approximated tree width; and
the sum of the products of the functions is evaluated by executing a variable elimination algorithm in the determined elimination order.
5. The method of claim 3, wherein applying a variable elimination algorithm comprises: determining a vertical elimination order for the variable elimination algorithm; and executing a variable elimination algorithm using the determined order.
6. The method of any preceding claim wherein a classical Boolean variable enumerates (i) each qubit in the system of qubits on which the quantum circuit operates and (ii) for each qubit a new variable along the worldwide line of qubits.
7. The method of claim 6, wherein computing the probability of obtaining a particular output bit string from a quantum circuit by directly evaluating the sum of products of the functions comprises:
fixing the value of the first classical boolean variable in each world line to zero; and
the value of the last classical boolean variable in the world line of qubits j is fixed to the value in the bit string corresponding to position j.
8. The method of any one of the preceding claims, wherein representing a plurality of quantum logic gates as a function of one or more classical Boolean variables comprises, for each diagonal one qubit quantum logic gate:
the quantum logic gate is represented as a univariate function that takes as input a classical boolean variable that indexes an element on a diagonal of a matrix representation of the quantum logic gate and provides as output a value of the element.
9. The method of claim 8, wherein each input classical Boolean variable of the univariate function is mapped to a vertex in the undirected graphical model corresponding to the variable.
10. The method of any of claims 1-7, wherein representing the plurality of quantum logic gates as a function of one or more classical Boolean variables comprises, for each non-diagonal one qubit quantum logic gate:
representing the quantum logic gate as a bivariate function that takes as input a pair of two classical boolean variables that index an element of a matrix representation of the quantum logic gate and provides as output a corresponding value of the element.
11. The method of claim 10, wherein each function of a pair of input classical boolean variables is mapped to an edge in the undirected graphical model that connects two vertices corresponding to those variables.
12. The method of any of claims 1-7, wherein representing the plurality of quantum logic gates as a function of one or more classical Boolean variables comprises, for each diagonal two qubits:
the quantum logic gate is represented as a bivariate function that takes as input a pair of two classical boolean variables that index an element on a diagonal of a matrix representation of the quantum logic gate and provides as output a value of the element.
13. The method of claim 12, wherein each function of a pair of input classical boolean variables is mapped to an edge in the undirected graphical model that connects two vertices corresponding to those variables.
14. The method of any of claims 1-7, wherein representing the plurality of quantum logic gates as a function of one or more classical Boolean variables comprises, for each non-diagonal two qubits:
the quantum logic gate is represented as a four-variable function that takes as input four classical boolean variables that index elements of a matrix representation of the quantum logic gate and provides as output corresponding values of the elements.
15. The method of claim 14, wherein each function of the four input classical boolean variables is mapped to links in the undirected graphical model that connect four fully connected vertices corresponding to those variables.
16. The method of any preceding claim, wherein the one or more properties of the quantum circuit comprise performance of the quantum circuit.
17. The method of any preceding claim, further comprising using the determined one or more properties to (i) calibrate, (ii) validate or (iii) benchmark test quantum computing hardware implementing the quantum circuit.
18. The method of any of the preceding claims, further comprising:
representing the desired value of the operator as a sum of second products of said functions; and
the expected value of the defined operator is calculated by directly evaluating the sum of the products of the functions.
19. A system comprising one or more computers and one or more storage devices storing instructions operable, when executed by the one or more computers, to cause the one or more computers to perform the method of any of claims 1-18.
20. A non-transitory computer storage medium encoded with instructions that, when executed by the one or more computers, cause the one or more computers to perform operations comprising the method of any of claims 1-18.
21. A computer-implemented method for simulating a quantum circuit, the method comprising:
receiving data representing a quantum circuit;
generating a simulation of a quantum circuit using received data, comprising:
representing the quantum circuit as a product of unitary matrices corresponding to the sequence of clock cycles;
representing the probability of outputting a predefined bit string after applying a final clock cycle of a quantum circuit on a system of qubits as a partition function of a classical Eicon model at a virtual temperature, the probability depending on a product of the unitary matrix; and
accurately computing the partition function to determine a probability of outputting a predefined bit string after applying a final clock cycle of a quantum circuit on a system of qubits includes applying an algorithm that performs accurate inference on a graphical model; and
one or more properties of the quantum circuit are determined using the generated simulation.
22. The method of claim 21, wherein accurately calculating the partition function comprises:
representing a classic Esin model as a graph model comprising nodes representing spins in the classic Esin model and edges representing interactions between spins;
determining the tree width of the graphic model; and
an algorithm developed for performing accurate inference on the graphical model using the determined tree width application to compute the partition function of the classical itacin model.
23. The method of claim 21 or claim 22, wherein the algorithm developed to perform accurate inference on graphical models comprises a bucket elimination algorithm or a variable elimination algorithm.
24. The method of any one of claims 21-23, wherein the computational cost of the algorithm is exponential with the tree width of a graphical model representation of a classical itacin model.
25. The method of any one of claims 21-24, wherein representing the probability of outputting a predefined bit string after applying a final clock cycle of the quantum circuit as a partition function of a classical isooctane model at a virtual temperature comprises:
expressing the probability as a path integral comprising a plurality of phase factors associated with paths in the path integral; and
a value of a phase factor accumulated as a sum of discrete phase changes associated with quantum logic gates in a quantum circuit is determined.
26. The method of any of claims 21-25, wherein the quantum circuit is configured to operate on qubits arranged in a two-dimensional lattice.
27. The method of any of claims 21-26, wherein the quantum circuit comprises (i) a controlled phase, (ii) X1/2、(iii)Y1/2And (i)v) A non-cliford T quantum logic gate.
28. The method of any of claims 21-27, wherein the quantum circuit comprises a depth of d clock cycles.
30. The method of any of claims 21-29 wherein the probability of outputting a predefined bit string after applying a final clock cycle of a quantum circuit on a system of qubits is given by:
wherein, | x>Representing a predefined bit string, | ψd>Representing the state of the system of n qubits after the final clock cycle d of the applied quantum circuit, U(t)Represents the product of unitary matrices corresponding to sequences of clock periods 1 to d, an
31. The method of any of claims 21-30, wherein the partition function of the classical isooctane model at a virtual temperature is given by:
32. The method of any of claims 21-30, wherein determining one or more properties of the quantum circuit using the generated simulation comprises determining a performance of the quantum circuit using a calculated partition function.
33. The method of any of claims 21-30, wherein determining one or more properties of the quantum circuit using the generated simulation comprises using the calculated partition function to (i) calibrate, (ii) verify, or (iii) benchmark test quantum computing hardware implementing the quantum circuit.
34. A system comprising one or more computers and one or more storage devices storing instructions operable, when executed by the one or more computers, to cause the one or more computers to perform the method of any of claims 21-33.
35. A non-transitory computer storage medium encoded with instructions that, when executed by the one or more computers, cause the one or more computers to perform operations comprising the method of any of claims 21-33.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762574050P | 2017-10-18 | 2017-10-18 | |
US62/574,050 | 2017-10-18 | ||
PCT/US2017/067083 WO2019078907A1 (en) | 2017-10-18 | 2017-12-18 | Simulation of quantum circuits |
Publications (1)
Publication Number | Publication Date |
---|---|
CN111247538A true CN111247538A (en) | 2020-06-05 |
Family
ID=60957461
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201780096102.XA Pending CN111247538A (en) | 2017-10-18 | 2017-12-18 | Simulation of quantum circuits |
Country Status (5)
Country | Link |
---|---|
US (2) | US11556686B2 (en) |
EP (2) | EP3682383B1 (en) |
CN (1) | CN111247538A (en) |
CA (2) | CA3079533A1 (en) |
WO (1) | WO2019078907A1 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112488317A (en) * | 2020-11-27 | 2021-03-12 | 北京百度网讯科技有限公司 | Simulation method and device in quantum control, classical computer and storage medium |
CN113807525A (en) * | 2021-09-22 | 2021-12-17 | 北京百度网讯科技有限公司 | Quantum circuit operation method and device, electronic device and medium |
CN114418105A (en) * | 2020-10-28 | 2022-04-29 | 合肥本源量子计算科技有限责任公司 | Method and device for processing quantum application problem based on quantum line |
CN116341667A (en) * | 2023-04-03 | 2023-06-27 | 正则量子(北京)技术有限公司 | Quantum circuit building method and device |
Families Citing this family (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110428055A (en) * | 2018-04-27 | 2019-11-08 | 阿里巴巴集团控股有限公司 | Quantum computing method and equipment |
WO2020047661A1 (en) * | 2018-09-04 | 2020-03-12 | Lumerical Inc. | System and method for simulating and analyzing quantum circuits |
US11245584B2 (en) * | 2018-10-15 | 2022-02-08 | Red Hat, Inc. | Software defined network optimization using quantum computing |
US10901896B2 (en) * | 2018-11-27 | 2021-01-26 | International Business Machines Corporation | Cached result use through quantum gate rewrite |
US11586792B2 (en) * | 2018-12-06 | 2023-02-21 | International Business Machines Corporation | Scheduling fusion for quantum computing simulation |
US10803215B2 (en) * | 2018-12-18 | 2020-10-13 | International Business Machines Corporation | Incremental generation of quantum circuits |
FR3091388B1 (en) * | 2018-12-26 | 2022-06-10 | Bull Sas | Method for compiling a quantum circuit on a trapped ion quantum processor |
WO2020223850A1 (en) * | 2019-05-05 | 2020-11-12 | Supreme Qi Pte Ltd | System and method for quantum circuit simulation |
CN111915011B (en) * | 2019-05-07 | 2023-11-03 | 本源量子计算科技（合肥）股份有限公司 | Single-amplitude quantum computing simulation method |
CN113128015B (en) * | 2019-12-31 | 2023-04-07 | 合肥本源量子计算科技有限责任公司 | Method and system for predicting resources required by single-amplitude analog quantum computation |
US11556832B2 (en) | 2020-05-12 | 2023-01-17 | International Business Machines Corporation | Randomized benchmarking by exploiting the structure of the Clifford group |
CN113850389B (en) * | 2020-06-28 | 2023-08-11 | 本源量子计算科技（合肥）股份有限公司 | Quantum circuit construction method and device |
CN112073221B (en) * | 2020-08-14 | 2022-08-16 | 合肥本源量子计算科技有限责任公司 | Method and device for realizing network node sequencing |
CN114511093B (en) * | 2020-11-16 | 2023-06-09 | 中国人民解放军国防科技大学 | Simulation method of boson subsystem |
CN112633507B (en) * | 2020-11-27 | 2024-05-07 | 本源量子计算科技（合肥）股份有限公司 | Method and device for encoding complex vector to quantum circuit |
CN113379058B (en) * | 2021-06-08 | 2022-04-01 | 北京百度网讯科技有限公司 | Quantum simulation method and device, electronic device and storage medium |
US11294797B1 (en) * | 2021-06-22 | 2022-04-05 | Classiq Technologies LTD. | Debugger for quantum computers |
JP2023027611A (en) * | 2021-08-17 | 2023-03-02 | 株式会社日立製作所 | Quantum computer system and method for operating quantum computer system |
CN114418107B (en) * | 2022-01-17 | 2022-10-18 | 北京百度网讯科技有限公司 | Unitary operator compiling method, computing device, unitary operator compiling apparatus and storage medium |
CN115376238B (en) * | 2022-08-17 | 2024-05-07 | 国开启科量子技术(北京)有限公司 | Grouping type ticket counting method and device based on quantum ballot |
CN117852659A (en) * | 2022-09-30 | 2024-04-09 | 本源量子计算科技（合肥）股份有限公司 | Quantum circuit generation method and device, storage medium and electronic device |
CN115907025B (en) * | 2022-12-06 | 2023-08-22 | 北京百度网讯科技有限公司 | Quantum network protocol simulation method and device and electronic equipment |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104011723A (en) * | 2011-12-15 | 2014-08-27 | 美光科技公司 | Boolean logic in a state machine lattice |
CN105531725A (en) * | 2013-06-28 | 2016-04-27 | D-波系统公司 | Systems and methods for quantum processing of data |
CN105637514A (en) * | 2013-10-14 | 2016-06-01 | 微软技术许可有限责任公司 | Method and system for efficient decomposition of single-qubit quantum gates into fibonacci anyon braid circuits |
CN107004162A (en) * | 2014-12-05 | 2017-08-01 | 微软技术许可有限责任公司 | Quantum deep learning |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2009152180A2 (en) * | 2008-06-10 | 2009-12-17 | D-Wave Systems Inc. | Parameter learning system for solvers |
-
2017
- 2017-12-18 WO PCT/US2017/067083 patent/WO2019078907A1/en unknown
- 2017-12-18 CA CA3079533A patent/CA3079533A1/en active Pending
- 2017-12-18 EP EP17829097.9A patent/EP3682383B1/en active Active
- 2017-12-18 EP EP22193793.1A patent/EP4160491A1/en active Pending
- 2017-12-18 CA CA3133427A patent/CA3133427A1/en active Pending
- 2017-12-18 CN CN201780096102.XA patent/CN111247538A/en active Pending
- 2017-12-18 US US16/754,998 patent/US11556686B2/en active Active
-
2022
- 2022-12-13 US US18/080,614 patent/US20230118636A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104011723A (en) * | 2011-12-15 | 2014-08-27 | 美光科技公司 | Boolean logic in a state machine lattice |
CN105531725A (en) * | 2013-06-28 | 2016-04-27 | D-波系统公司 | Systems and methods for quantum processing of data |
CN105637514A (en) * | 2013-10-14 | 2016-06-01 | 微软技术许可有限责任公司 | Method and system for efficient decomposition of single-qubit quantum gates into fibonacci anyon braid circuits |
CN107004162A (en) * | 2014-12-05 | 2017-08-01 | 微软技术许可有限责任公司 | Quantum deep learning |
Non-Patent Citations (2)
Title |
---|
EDWIN PEDNAULT等: ""Breaking the 49-Qubit Barrier in the Simulation of Quantum Circuits"", pages 1 - 18 * |
SERGIO BOIXO等: ""Characterizing Quantum Supremacy in Near-Term Devices"", pages 1 - 22 * |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114418105A (en) * | 2020-10-28 | 2022-04-29 | 合肥本源量子计算科技有限责任公司 | Method and device for processing quantum application problem based on quantum line |
CN114418105B (en) * | 2020-10-28 | 2023-08-08 | 本源量子计算科技（合肥）股份有限公司 | Method and device for processing quantum application problem based on quantum circuit |
CN112488317A (en) * | 2020-11-27 | 2021-03-12 | 北京百度网讯科技有限公司 | Simulation method and device in quantum control, classical computer and storage medium |
CN113807525A (en) * | 2021-09-22 | 2021-12-17 | 北京百度网讯科技有限公司 | Quantum circuit operation method and device, electronic device and medium |
CN116341667A (en) * | 2023-04-03 | 2023-06-27 | 正则量子(北京)技术有限公司 | Quantum circuit building method and device |
CN116341667B (en) * | 2023-04-03 | 2024-03-12 | 正则量子(北京)技术有限公司 | Quantum circuit building method and device |
Also Published As
Publication number | Publication date |
---|---|
CA3133427A1 (en) | 2019-04-25 |
US20210192114A1 (en) | 2021-06-24 |
US11556686B2 (en) | 2023-01-17 |
EP3682383A1 (en) | 2020-07-22 |
EP4160491A1 (en) | 2023-04-05 |
EP3682383B1 (en) | 2022-09-21 |
US20230118636A1 (en) | 2023-04-20 |
CA3079533A1 (en) | 2019-04-25 |
WO2019078907A1 (en) | 2019-04-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111247538A (en) | Simulation of quantum circuits | |
JP7362692B2 (en) | quantum neural network | |
US20220164506A1 (en) | Simulating quantum circuits | |
Haghshenas et al. | Variational power of quantum circuit tensor networks | |
JP6918980B2 (en) | Operator averaging in quantum computing systems | |
CN110023966B (en) | Simulation material using quantum computation | |
CA3091246C (en) | Variational quantum state preparation | |
CA3102290C (en) | Preparing superpositions of computational basis states on a quantum computer | |
CN111373420A (en) | Cost function deformation in quantum approximation optimization | |
Lee et al. | An FPGA-based quantum computing emulation framework based on serial-parallel architecture | |
Bombin et al. | Statistical mechanical models and topological color codes | |
AU2019454277B2 (en) | Patch and elided fidelity estimation | |
Schalkers et al. | Efficient and fail-safe collisionless quantum Boltzmann method | |
AU2019455705B2 (en) | Parallel cross entropy benchmarking | |
CN116075836A (en) | Quantum hardware generative modeling | |
Wicaksono et al. | Implementation of Shor’s quantum factoring algorithm using projectQ framework | |
Naher et al. | Using Machine Learning to Estimate Utilization and Throughput for OpenCL-Based SpMV Implementation on an FPGA | |
US9355363B2 (en) | Systems and methods for virtual parallel computing using matrix product states | |
GB2609016A (en) | Determining matching data | |
Snow-Kropla | Compiling Programs for an Adiabatic Quantum Computer |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |