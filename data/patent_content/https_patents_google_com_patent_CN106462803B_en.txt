CN106462803B - Enhancing neural networks with external memory - Google Patents
Enhancing neural networks with external memory Download PDFInfo
- Publication number
- CN106462803B CN106462803B CN201580033184.4A CN201580033184A CN106462803B CN 106462803 B CN106462803 B CN 106462803B CN 201580033184 A CN201580033184 A CN 201580033184A CN 106462803 B CN106462803 B CN 106462803B
- Authority
- CN
- China
- Prior art keywords
- neural network
- weights
- external memory
- output
- read
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
Abstract
methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for enhancing neural networks with external memory. One of the methods comprises the following steps: providing an output derived from a first portion of the neural network output as a system output; determining one or more sets of write weights for each of a plurality of locations in an external memory; writing data defined by the third portion of the neural network output to the external memory according to the set of write weights; determining, from a fourth portion of the neural network output, one or more sets of read weights for each of a plurality of locations in the external memory; reading data from an external memory according to the set of reading weights; and combining the data read from the external memory with a next system input to generate a next neural network input.
Description
Technical Field
This specification relates to neural network system architectures.
background
Neural networks are machine learning models that employ one or more layers of nonlinear units to predict the output for a received input. Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e. the next hidden layer or output layer. Each layer of the network generates an output from the received input in accordance with current values of the respective set of parameters.
Some neural networks are recurrent neural networks. A recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence. In particular, the recurrent neural network may use some or all of the internal states of the network that processed the previous inputs in computing the current output. An example of a recurrent neural network is a long-term short-term memory (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block may include one or more monomers, each monomer including an input gate, a forgetting gate, and an output gate, which allows the monomer to store a previous state of the monomer, e.g., for generating a current activation or other component to be provided to the LSTM neural network.
Disclosure of Invention
This specification describes technologies relating to enhancing neural network systems. Generally, an augmented neural network system includes: a neural network configured to receive a neural network input and generate a neural network output; an external memory storing values derived from a portion of the neural network output; and a memory interface subsystem configured to receive the portion of the neural network output and to erase, write, and read with respect to an external memory using the received portion.
For a system of one or more computers to be configured to perform a particular operation or action, it is meant that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. Representing one or more programs for one or more computer programs to be configured to perform specified operations or actions includes instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. By augmenting the neural network with external memory, the augmented neural network can more accurately generate outputs from received inputs of various machine learning tasks. In particular, to facilitate processing of a given input from a sequence of inputs, the augmented neural network may effectively use information generated by the augmented neural network by reading from external memory when processing many previous inputs in the sequence. Similarly, to facilitate processing subsequent inputs from the sequence, the augmented neural network may store information generated during processing of the current input in an external memory. Additionally, the size of the external memory may be increased without increasing the number of trainable parameters of the augmented neural network. In addition, the augmented neural network may use content and location based lookup to access external memory. In addition, the augmented neural network may utilize long-term memory storage with less interference between successive writes. Furthermore, because the entire external memory is distinguishable, the augmented neural network system can be trained efficiently.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example augmented neural network system.
FIG. 2 is a flow diagram of an example process for generating system output from system input.
FIG. 3 is a flow diagram of an example process for determining memory access weights from a designated portion of a neural network output.
FIG. 4 is a flow diagram of an example process of generating content-based weights for locations in external memory.
FIG. 5 is a flow diagram of an example process for applying location-based adjustments to content-based weights.
FIG. 6 is a flow diagram of an example process for erasing from external memory according to erase weights.
FIG. 7 is a flow chart of an example process for writing to external memory according to write weights.
FIG. 8 is a flow chart of an example process of reading from external memory according to read weights.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Fig. 1 illustrates an exemplary augmented neural network system 100. The augmented neural network system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
The augmented neural network system 100 is a machine learning system that receives a sequence of system inputs and generates a sequence of system outputs from the system inputs. For example, the augmented neural network system 100 may receive a system input x as part of an input sequence and generate a system output y from the system input x. The augmented neural network system 100 may store the generated output sequence in an output data store or provide the output for some other immediate purpose.
the augmented neural network system 100 may be configured to receive any kind of digital data input and generate any kind of score (score) or classification output based on the input.
For example, if the input to the augmented neural network system 100 is an image or feature that has been extracted from an image, the output generated by the augmented neural network system 100 for a given image may be a score for each of a set of object classes, where each score represents an estimated likelihood that the image contains an image of an object belonging to that class.
As another example, if the input to the augmented neural network system 100 is an internet resource, document, or portion of a document extracted from an internet resource (e.g., a web page), document, or portion of a document, the output generated by the augmented neural network system 100 for a given internet resource, document, or portion of a document may be a score for each of a set of topics, each score representing an estimated likelihood of the internet resource, document, or portion of a document with respect to the topic.
As another example, if the input to the augmented neural network system 100 is a feature of an impression context for a particular advertisement, the output generated by the augmented neural network system 100 may be a score representing an estimated likelihood that the particular advertisement will be clicked.
As another example, if the input to the augmented neural network system 100 is a characteristic of a personalized recommendation for the user, such as a characteristic characterizing the context of the recommendation, such as a characteristic characterizing a previous action taken by the user, the output generated by the augmented neural network system 100 may be a score for each of a set of content items, where each score represents an estimated likelihood that the user will respond favorably to the recommended content item.
As another example, if the input to the augmented neural network system 100 is text in one language, the output generated by the augmented neural network system 100 may be a score for each of a set of texts in another language, each score representing an estimated likelihood that a text segment in the other language is an appropriate translation of the input text into the other language.
as another example, if the input to the augmented neural network system 100 is a spoken utterance, a sequence of spoken utterances, or a feature derived from either, the output produced by the augmented neural network system 100 may be a score for each of a set of text segments, each score representing the likelihood that the text segment is an estimate for a correct transcription of the utterance or the sequence of utterances.
As another example, the augmented neural network system 100 may be part of a speech synthesis system.
As another example, the augmented neural network system 100 may be part of a video processing system.
As another example, the augmented neural network system 100 may be part of a dialog system.
as another example, the augmented neural network system 100 may be part of an autocomplete system.
as another example, the augmented neural network system 100 may be part of a text processing system.
As another example, the augmented neural network system 100 may be part of a reinforcement learning system.
In particular, augmented neural network system 100 includes a neural network 102 and an external memory 104. The neural network 102 may be a feed-forward neural network or a recurrent neural network configured to receive neural network inputs and process the neural network inputs to produce neural network outputs. In general, the neural network inputs received by the neural network 102 are a combination of current system inputs and data read from external memory through the memory interface subsystem 106. For example, the neural network 102 may be configured to receive current system inputs x and data r from the external memory 104 and generate a neural network output comprising a system output y and an additional output o provided to the memory interface subsystem 106.
the memory interface subsystem 106 receives outputs generated by the neural network, such as the portion o (+ representing cascade) of the neural network output o + y, and converts the received outputs into erase, read, and write operations to be performed on the external memory 104. That is, the memory interface subsystem 106 receives the output o from the neural network 102, and erases the data e from the external memory 104 based on the output o, writes the data w to the external memory 104, and reads the data r from the external memory 104. The data read by the memory interface subsystem 106 may then be provided to the neural network 102 as part of a later neural network input, e.g., along with a system input.
The external memory 104 stores data vectors written to the external memory 104 by the memory interface subsystem 106. In some embodiments, external memory 104 is a real-valued matrix memory with elements M (i, j, t), where i indexes position, j indexes vector element, and t indexes time. Thus, M (i, j, t) will be the value stored in external memory 104 at time t at element j of the vector at position i. By configuring the external memory 104, the memory interface subsystem 106, and the neural network 102 in this manner, the components of the augmented neural network system 100 are completely distinguishable, allowing the augmented neural network system 100 to be effectively trained.
FIG. 2 is a flow diagram of an example process 200 for generating system output from system input. For convenience, process 200 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system, such as augmented neural network system 100 of FIG. 1, suitably programmed in accordance with the present description, to perform process 200.
The system receives system input (step 202). The system input is one of a sequence of system inputs received by the system.
The system obtains a read data vector generated by reading from an external memory, such as external memory 104 of fig. 1 (step 204). Typically, the read data vector is generated by the system by reading from external memory during processing of a previous input in the system input sequence.
The system generates neural network inputs by combining the system inputs and data read from the external memory (step 206). For example, the system may cascade system inputs and read data vectors to generate neural network inputs. For a first system input, the system may cascade the system input with a predetermined vector, e.g., a learning state of a neural network.
the system processes the neural network input using a neural network, such as neural network 102 of fig. 1, to produce a neural network output from the neural network input (step 208). According to an embodiment, the neural network may be a feedforward neural network, such as a convolutional neural network, or another deep feedforward neural network, or a recurrent neural network, such as an LSTM neural network. If the neural network is a recurrent neural network, the recurrent neural network also uses internal states of the recurrent neural network from a previous neural network input in the sequence in processing the current neural network input to generate the neural network output. In some embodiments, the neural network includes a recursive layer and a feed-forward layer.
The system generates a system output for the system input from the system output portion of the neural network output (step 210). The system output portion of the neural network output is a predetermined portion of the neural network output that has been specified by, for example, a system administrator as the portion used to generate the system output, i.e., such that the same portion of the neural network output is used to generate the system output for each output produced by the neural network.
in some embodiments, the system provides the system output portion as a system output to a system input. However, in some other embodiments, the system applies one or more transformations to the system output portion in order to generate the system output. For example, the system output may be converted into commands that control a robot or a different digital interface.
The system erases from the external memory using the erased portion of the neural network output (step 212). The erased portion of the neural network output is a predetermined portion of the neural network output that has been designated as the portion to be erased from the external memory. Specifically, to erase from the external memory, the system determines an erase weight using an erase portion of the neural network output. The erasure weight is a memory access weight that includes a respective weight for each location in the external memory and defines a distribution over the locations in the external memory.
The system then erases from each location in the external memory according to the erase weight. Determining memory access weights, such as erasure weights, from a designated portion of the neural network output is described in more detail below with reference to FIG. 3. Erasing from the external memory according to the erase weights is described in more detail below with reference to fig. 6.
The system writes to external memory using the written portion of the neural network output (step 214). The written portion of the neural network output is a predetermined portion of the neural network output that has been designated as the portion used in writing to the external memory.
Specifically, to write to the external memory, the system uses a designated subportion of the write portion of the neural network output to determine the write weight. In some embodiments, the write weights are the same as the erase weights, i.e., a designated subsection of the write portion is the erase portion of the neural network output. However, in some other implementations, the designated subportion of the write portion is different than the erase portion. Determining memory access weights, e.g., write weights, from a designated portion of the neural network output is described in more detail below with reference to FIG. 3.
The system also determines a write vector to be written to the external memory from a different designated subportion of the write portion and then writes the write vector to the external memory according to the write weight. Determining and writing a write vector to external memory is described below with reference to fig. 7.
the system reads from external memory using the read portion of the neural network output (step 216). The read portion of the neural network output is a predetermined portion of the neural network output that has been designated as the portion used in reading from the external memory.
Specifically, to read from the external memory, the system determines a read weight using a read portion of the neural network output, and then reads from a location in the external memory according to the read weight. Determining memory access weights, e.g., read weights, from a designated portion of the neural network output is described in more detail below with reference to FIG. 3. Reading from the external memory is described below with reference to fig. 8.
In some embodiments, the system performs multiple erase, read, and write operations for a given system input. For example, the system may execute multiple sets, each set including an erase operation, a read operation, and a write operation in parallel and independently of each other set of operations. In addition, as will be described in more detail below with reference to fig. 6-8, the system may use different memory access weights in performing each set of operations, e.g., because the system uses different portions of the neural network output in calculating each of the sets of memory access weights.
Further, the system may perform erase, read, and write operations in any order. For example, in some embodiments, the system erases, then writes, and then reads from external memory. However, in other embodiments, the system may perform these operations in a different order.
process 200 may be performed for each system input in a sequence of system inputs to generate a sequence of system outputs for the sequence of system inputs. The system input sequence may be an output for which it is desired, i.e. a sequence for which the output sequence that should be generated by the system for the input sequence is not known. The system may also perform process 200 on inputs of a training data set, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the system, i.e., determine training values for parameters of the neural network and any additional parameters for the process of erasing, writing, and reading with respect to the external memory. Because the components of the system are completely distinguishable, process 200 may be repeatedly performed on inputs selected from the training data set as part of a conventional machine learning training technique for training a neural network, e.g., by random gradient descent back-propagation of a temporal training technique if the neural network is a recurrent neural network.
FIG. 3 is a flow diagram of an example process 300 for determining memory access weights from a designated portion of a neural network output. For convenience, process 300 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed in accordance with the present description, such as augmented neural network system 100 of FIG. 1, may perform process 300.
The system receives a specified portion of the neural network output (step 302). That is, the system receives an erased portion of the neural network output if the memory access weight determined by the system is an erase weight, receives a specified sub-portion of the written portion of the neural network output if the memory access weight determined by the system is a write weight, and receives a read portion of the neural network output if the memory access weight determined by the system is a read weight.
The system determines content-based weights from the content-based sub-portions of the specified portion (step 304). Typically, to determine the content-based weights, the system determines content key vectors from the content-based sub-portions. The system then compares the content key vector to the vectors stored in the locations in the external memory to determine the weights for the locations. Determining content-based weights is described in more detail below with reference to FIG. 4.
The system applies a location-based adjustment to the content-based weights to determine memory access weights (step 306). Typically, the system determines a shift vector from the location-based sub-portion of the specified portion, and then uses the shift vector to adjust the content-based weights in order to determine the memory access weights. Adjusting the content-based weights is described below with reference to fig. 5.
FIG. 4 is a flow diagram of an example process 400 for generating content-based weights for locations in external memory. For convenience, process 400 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed in accordance with the present description, such as augmented neural network system 100 of FIG. 1, may perform process 400.
The system receives a content-based sub-portion of the specified portion of the neural network output (step 402).
The system generates content-based key vectors from the content-based sub-portions (step 404). In some implementations, the system can use the content-based sub-portions as content-based key vectors. In some other implementations, the system applies one or more transforms to the content-based sub-portions to generate content-based key vectors. For example, the system may process the content-based sub-portions using a neural network, such as a multi-layer perceptron (MLP) neural network, configured to receive the sub-portions and generate content-based key vectors.
The system calculates similarity measures between the content-based key vectors and vectors stored in external memory (step 406). That is, the system calculates a respective similarity metric between the content-based key vector and each vector stored in the external memory. For example, the similarity measure may be a cosine similarity measure, where the similarity K between the content-based key vector K (h, t) and a given vector M (i, t) located at the ith position in the external memory M satisfies:
the system uses the similarity metric to calculate a content-based weight for the location in external memory (step 406). Typically, the system calculates the weights such that locations with higher similarity measures to the content-based key vectors are assigned higher weights. For example, the content-based weight for the ith location in the external memory M may satisfy:
Where β (h, t) is a "key strength" value, which is a positive value derived from a specified portion of the neural network output, and the summation is the sum over all locations in the external memory.
Fig. 5 is a flow diagram of an example process 500 for applying location-based adjustments to content-based weights. For convenience, process 500 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed according to the present description, such as augmented neural network system 100 of FIG. 1, may perform process 500.
the system receives a location-based sub-portion of the specified portion of the neural network output (step 502).
the system generates temporary weights from the content-based weights and the system-generated previous weights (step 504). Typically, the previous weights generated by the system are memory access weights generated by the system during processing of a previous system input. The system generates temporary weights by combining the content-based weights and the previous weights. For example, the temporary weight may be an interpolation of the content-based weight and the previous weight, where for the t +1 th system input, the temporary weight for a given location i in external memorysatisfies the following conditions:
Wherein g isi(h, t +1) is a gate output between 0 and 1 and derived from a specified portion of the neural network output, wc(i, h, t +1) is the content-based weight of the t +1 th system input, and w(i, h, t) is the memory access weight from the t-th system input.
The system generates a shift vector from the location-based sub-portion (step 506). In some implementations, the system can use the location-based sub-portion as a shift vector. In some other implementations, the system applies one or more transforms to the location-based sub-portions to generate displacement vectors. For example, the system may process the location-based sub-portions using a neural network, such as an MLP neural network, configured to receive the sub-portions and generate the shift vectors.
The system shifts the temporary weights using the shift vector to generate memory access weights (step 508). In particular, the system uses the shift vector to apply a convolution, such as a circular convolution, to the temporary weights to generate the memory access weights. For example, the weight w (i, h, t +1) for location i in the external memory may satisfy:
Where all indexing algorithms are modulo-N computed, and where s (i-j, h, t +1) is a shift vector for location i-j in memory.
FIG. 6 is a flow diagram of an example process 600 for erasing from external memory according to erase weights. For convenience, process 600 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed in accordance with the present description, such as augmented neural network system 100 of FIG. 1, may perform process 600.
the system generates erasure weights (step 602). The system may generate erasure weights as described above with reference to fig. 3-5.
The system generates an erase vector (step 604). In some embodiments, the system may use a specified portion of the neural network output as an erasure vector. In some other implementations, the system applies one or more transforms to the portion in order to generate the erasure vector. For example, the system may process the portion using a neural network (e.g., a multi-layer perceptron (MLP) neural network) configured to receive the portion and generate an erasure vector.
The system erases from the external memory using the erase weights and the erase gate vector (step 606). In particular, for a value M (i, j, t) stored at a vector element j of a vector stored at a location i in external memory, the system generates an erasure value that satisfies the following condition
Wherein we(i, h, t +1) is the erasure weight for location i, and ge(j, h, t +1) is the erase vector.
in embodiments where the system performs multiple erase operations for a given system input, each erase operation may be performed independently, e.g., in parallel as described above, by performing technique 600 with optionally different values for the erase weight and the erase gate vector. For example, each erase operation may be performed using a different neural network with possibly different parameter values to generate an erase gate vector. Thus, the cumulative effect of multiple erase operations performed in parallel is multiplicative.
FIG. 7 is a flow diagram of an example process 700 for writing to external memory according to write weights. For convenience, process 700 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed in accordance with the present description, such as augmented neural network system 100 of FIG. 1, may perform process 700.
the system generates write weights (step 702). The system may generate write weights from the designated subportions of the write output portion as described above with reference to fig. 3-5. As described above, in some embodiments, the write weights are the same as the erase weights.
the system generates write vectors from different specified portions of the write output portion (step 704). In some embodiments, the system may use different designated subdivisions as write vectors. In some other implementations, the system applies one or more transforms to different specified sub-portions in order to generate the write vector. For example, the system may process the different specified sub-portions using a neural network, such as an MLP neural network, configured to receive the sub-portions and generate the write vectors.
The system writes the write vector to external memory using the write weights (step 706). In particular, for a value M (i, j, t) stored at a vector element j of a vector stored at a location i in external memory, the system generates a value that satisfies the following condition:
Wherein ww(i, h, t +1) is the write weight for location i, and is the value at element h of the write vector. In embodiments where a write operation is performed after an erase operation, rather than modifying the value M (i, j, t), the system may modify the value generated by the erase operation described aboveTo generate a value M (i, j, t + 1).
In embodiments where the system performs multiple write operations on a given system input, for example, in parallel as described above, each write operation may be performed independently by performing technique 700 with optionally different values for the write weights and write vectors. For example, each write operation may be performed using a different neural network with possibly different parameter values to generate a write vector. Thus, the cumulative effect of multiple write operations performed in parallel is additive.
FIG. 8 is a flow diagram of an example process 800 for reading from external memory according to read weights. For convenience, process 800 will be described as being performed by a system of one or more computers located at one or more locations. For example, an augmented neural network system suitably programmed in accordance with the present description, such as augmented neural network system 100 of FIG. 1, may perform process 800.
The system generates read weights (step 802). The system may generate read weights from the read output portions as described above with reference to fig. 3-5.
The system reads from a location in external memory according to the read weight (step 804). In particular, the system generates a read data vector by combining the values stored at each location in the external memory. That is, for a given element of the read data vector, the system computes a weighted average of each value stored in the external memory at that element, the weight of each value being the read weight of the corresponding location. For example, the value r (j, h, t +1) of the read vector at element j may satisfy:
wherein wr(i, h, t +1) is the read weight for location i, and M (i, j, t +1) is the value stored in memory at element j of the vector at location i.
In embodiments where the system performs multiple read operations for a given system input (e.g., in parallel as described above), each read operation may be performed independently by performing technique 800 with optionally different read weight values for the read weights. In these embodiments, the system may combine the read data vectors generated by each read operation, e.g., by cascading the vectors, to form a final read data vector that is provided to the neural network as part of the neural network inputs.
According to embodiments, the system may maintain varying degrees of persistence of data stored in the external memory based on output received from the neural network. For example, in some embodiments, the system resets the external memory after each sequence of system inputs has been completely processed by the system. As another example, in some embodiments, the data stored in the external memory persists between input sequences. That is, the system does not delete any data from the external memory between system input sequences. In these embodiments, the system may reset the external memory after a given task assigned to the system is completed and before the system begins a different machine learning task. Alternatively, the system may maintain external memory, even without deleting values between tasks. Thus, in processing a current input sequence, the system may be able to utilize data stored in memory in processing a previous input sequence or even in performing a previous machine learning task.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
the term "data processing apparatus" refers to data processing hardware and includes all kinds of apparatus, devices and machines for processing data, including for example a programmable processor, a computer or multiple processors or computers. The apparatus can also be or further comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program, which may also be referred to or described as a program, software application, module, software module, script, or code, may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, such as one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
computers suitable for the execution of a computer program include, for example, central processing units that may be based on general or special purpose microprocessors or both, or any other type of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or carrying out instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Furthermore, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a Universal Serial Bus (USB) flash drive, to name a few.
Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having: a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information and a keyboard to a user; and a pointing device, such as a mouse or a trackball, by which a user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. Additionally, the computer may interact with the user by: sending and receiving documents to and from a device used by a user; for example, by sending a web page to a web browser on a user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), such as the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (20)
1. An augmented neural network system for processing a sequence of system inputs to produce a sequence of system outputs, the augmented neural network system comprising:
A neural network, wherein the neural network is configured to receive a sequence of neural network inputs and to process each neural network input to generate a neural network output from the neural network inputs;
an external memory; and
A memory interface subsystem, wherein the memory interface subsystem is configured to: performing, for each of the neural network outputs, operations comprising:
providing an output derived from a first portion of the neural network outputs as a system output in the sequence of system outputs;
for each of a plurality of locations in the external memory, determining one or more sets of write weights from a second portion of the neural network output;
Writing data defined by a third portion of the neural network output to the external memory according to the set of write weights;
for each of the plurality of locations in the external memory, determining one or more sets of read weights from a fourth portion of the neural network output;
Reading data from the external memory according to the read weight set; and
combining the data read from the external memory with a next system input in the sequence of system inputs to generate a next neural network input in the sequence of neural network inputs.
2. The augmented neural network system of claim 1, the operations further comprising: for each of the neural network outputs:
For each of the plurality of locations in the external memory, determining one or more sets of erasure weights from a fifth portion of the neural network output; and
Erasing data from the external memory according to the set of erase weights.
3. The augmented neural network system of claim 2, wherein the set of erasure weights is the same as the set of write weights and the second portion is the same as the fifth portion.
4. The augmented neural network system of claim 1, wherein determining each of the one or more sets of write weights comprises:
Determining a set of content-based write weights from the second portion of the neural network output.
5. the augmented neural network system of claim 4, wherein determining each of the one or more sets of write weights further comprises:
determining a set of location-based write weights; and
Adjusting the content-based write weights using the location-based write weights to generate the set of write weights.
6. the augmented neural network system of claim 1, wherein determining each of the one or more sets of read weights comprises:
determining a set of content-based read weights from the fourth portion of the neural network output.
7. the augmented neural network system of claim 6, wherein determining each of the one or more sets of read weights further comprises:
determining a set of location-based read weights; and
adjusting the content-based read weights using the location-based read weights to generate the set of read weights.
8. The augmented neural network system of claim 1, wherein reading data from the external memory in accordance with the sets of read weights comprises, for each set of the read weights:
determining a weighted average of values stored in the plurality of locations in the external memory according to the read weights in the set of read weights.
9. The augmented neural network system of claim 1, wherein writing data defined by the third portion of the neural network output to the external memory in accordance with the set of writing weights comprises, for each of the set of writing weights:
determining a write vector for the set of write weights from the third portion of the neural network output; and
Writing the write vector to the plurality of locations according to the set of write weights.
10. A method for processing a system input sequence to generate a system output sequence using an augmented neural network system comprising a neural network and an external memory, wherein the neural network is configured to: receiving a sequence of neural network inputs and processing each neural network input to generate a neural network output from the neural network inputs, and wherein the method comprises: for each neural network output:
Providing an output derived from a first portion of the neural network outputs as a system output in the sequence of system outputs;
For each of a plurality of locations in the external memory, determining one or more sets of write weights from a second portion of the neural network output;
Writing data defined by a third portion of the neural network output to the external memory according to the set of write weights;
For each of the plurality of locations in the external memory, determining one or more sets of read weights from a fourth portion of the neural network output;
reading data from the external memory according to the read weight set; and
combining the data read from the external memory with a next system input in the sequence of system inputs to generate a next neural network input in the sequence of neural network inputs.
11. the method of claim 10, further comprising: for each of the neural network outputs:
For each of the plurality of locations in the external memory, determining one or more sets of erasure weights from a fifth portion of the neural network output; and
Erasing data from the external memory according to the set of erase weights.
12. The method of claim 11, wherein the set of erase weights is the same as the set of write weights, and the second portion is the same as the fifth portion.
13. The method of claim 10, wherein determining each of the one or more sets of write weights comprises:
determining a set of content-based write weights from the second portion of the neural network output.
14. The method of claim 13, wherein determining each of the one or more sets of write weights further comprises:
Determining a set of location-based write weights; and
Adjusting the content-based write weights using the location-based write weights to generate the set of write weights.
15. The method of claim 10, wherein determining each of the one or more sets of read weights comprises:
Determining a set of content-based read weights from the fourth portion of the neural network output.
16. The method of claim 15, wherein determining each of the one or more sets of read weights further comprises:
Determining a set of location-based read weights; and
Adjusting the content-based read weights using the location-based read weights to generate the set of read weights.
17. The method of claim 10, wherein reading data from the external memory according to the sets of read weights comprises, for each set of read weights:
Determining a weighted average of values stored in the plurality of locations in the external memory according to the read weights in the set of read weights.
18. The method of claim 10, wherein writing data defined by the third portion of the neural network output to the external memory according to the set of writing weights comprises, for each of the set of writing weights:
Determining a write vector for the set of write weights from the third portion of the neural network output; and
writing the write vector to the plurality of locations according to the set of write weights.
19. a non-transitory computer storage medium storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations for processing a system input sequence to generate a system output sequence using an augmented neural network system comprising a neural network and an external memory, wherein the neural network is configured to: receiving a sequence of neural network inputs and processing each neural network input to generate a neural network output from the neural network inputs, and wherein the operations comprise, for each neural network output:
Providing an output derived from a first portion of the neural network outputs as a system output in the sequence of system outputs;
for each of a plurality of locations in the external memory, determining one or more sets of write weights from a second portion of the neural network output;
Writing data defined by a third portion of the neural network output to the external memory according to the set of write weights;
for each of the plurality of locations in the external memory, determining one or more sets of read weights from a fourth portion of the neural network output;
Reading data from the external memory according to the read weight set; and
Combining the data read from the external memory with a next system input in the sequence of system inputs to generate a next neural network input in the sequence of neural network inputs.
20. the non-transitory computer storage medium of claim 19, the operations further comprising: for each of the neural network outputs:
For each of the plurality of locations in the external memory, determining one or more sets of erasure weights from a fifth portion of the neural network output; and
Erasing data from the external memory according to the set of erase weights.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN201911105640.8A CN111079895A (en) | 2014-10-16 | 2015-10-15 | Enhancing neural networks with external memory |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201462064965P | 2014-10-16 | 2014-10-16 | |
US62/064,965 | 2014-10-16 | ||
PCT/US2015/055817 WO2016061403A1 (en) | 2014-10-16 | 2015-10-15 | Augmenting neural networks with external memory |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201911105640.8A Division CN111079895A (en) | 2014-10-16 | 2015-10-15 | Enhancing neural networks with external memory |
Publications (2)
Publication Number | Publication Date |
---|---|
CN106462803A CN106462803A (en) | 2017-02-22 |
CN106462803B true CN106462803B (en) | 2019-12-10 |
Family
ID=54477238
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201911105640.8A Pending CN111079895A (en) | 2014-10-16 | 2015-10-15 | Enhancing neural networks with external memory |
CN201580033184.4A Active CN106462803B (en) | 2014-10-16 | 2015-10-15 | Enhancing neural networks with external memory |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201911105640.8A Pending CN111079895A (en) | 2014-10-16 | 2015-10-15 | Enhancing neural networks with external memory |
Country Status (4)
Country | Link |
---|---|
US (2) | US10650302B2 (en) |
EP (1) | EP3207507B1 (en) |
CN (2) | CN111079895A (en) |
WO (1) | WO2016061403A1 (en) |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10410119B2 (en) * | 2015-06-05 | 2019-09-10 | Deepmind Technologies Limited | Augmented recurrent neural network with external memory |
US10489701B2 (en) * | 2015-10-13 | 2019-11-26 | Facebook, Inc. | Generating responses using memory networks |
CN107203598A (en) * | 2017-05-08 | 2017-09-26 | 广州智慧城市发展研究院 | A kind of method and system for realizing image switch labels |
EP3602397A1 (en) * | 2017-05-15 | 2020-02-05 | Deepmind Technologies Limited | Neural network systems for action recognition in videos |
US10963780B2 (en) | 2017-08-24 | 2021-03-30 | Google Llc | Yield improvements for three-dimensionally stacked neural network accelerators |
CN111465943B (en) * | 2017-12-12 | 2023-10-31 | 亚马逊技术股份有限公司 | Integrated circuit and method for neural network processing |
US10803379B2 (en) | 2017-12-12 | 2020-10-13 | Amazon Technologies, Inc. | Multi-memory on-chip computational network |
EP3567548B1 (en) * | 2018-05-09 | 2020-06-24 | Siemens Healthcare GmbH | Medical image segmentation |
CN109815162A (en) * | 2019-01-28 | 2019-05-28 | Oppo广东移动通信有限公司 | EMS memory management process, device, mobile terminal and storage medium |
CN109886416A (en) * | 2019-02-01 | 2019-06-14 | 京微齐力(北京)科技有限公司 | The System on Chip/SoC and machine learning method of integrated AI's module |
US11080152B2 (en) * | 2019-05-15 | 2021-08-03 | Western Digital Technologies, Inc. | Optimized neural network data organization |
US11748576B2 (en) | 2021-01-21 | 2023-09-05 | International Business Machines Corporation | Interpretation of deep neural model based dialogue agents |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5493632A (en) * | 1992-08-28 | 1996-02-20 | Goldstar Co., Ltd. | Neural network employing a location addressable memory and method for operating the same |
CN101460941A (en) * | 2006-06-01 | 2009-06-17 | 雅虎公司 | Predicting results for input data based on a model generated from clusters |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5167006A (en) * | 1989-12-29 | 1992-11-24 | Ricoh Company, Ltd. | Neuron unit, neural network and signal processing method |
CA2040903C (en) * | 1991-04-22 | 2003-10-07 | John G. Sutherland | Neural networks |
JP2695102B2 (en) * | 1992-09-30 | 1997-12-24 | 川崎製鉄株式会社 | Content addressable memory |
US7440968B1 (en) * | 2004-11-30 | 2008-10-21 | Google Inc. | Query boosting based on classification |
US9015093B1 (en) * | 2010-10-26 | 2015-04-21 | Michael Lamport Commons | Intelligent control with hierarchical stacked neural networks |
RU2013156784A (en) * | 2013-12-20 | 2015-06-27 | ИЭмСи КОРПОРЕЙШН | METHOD AND DEVICE FOR SELECTING THE READING AND WRITING DATA ROUTE |
-
2015
- 2015-10-15 WO PCT/US2015/055817 patent/WO2016061403A1/en active Application Filing
- 2015-10-15 CN CN201911105640.8A patent/CN111079895A/en active Pending
- 2015-10-15 CN CN201580033184.4A patent/CN106462803B/en active Active
- 2015-10-15 EP EP15791075.3A patent/EP3207507B1/en active Active
- 2015-10-16 US US14/885,086 patent/US10650302B2/en active Active
-
2020
- 2020-03-26 US US16/831,566 patent/US11210579B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5493632A (en) * | 1992-08-28 | 1996-02-20 | Goldstar Co., Ltd. | Neural network employing a location addressable memory and method for operating the same |
CN101460941A (en) * | 2006-06-01 | 2009-06-17 | 雅虎公司 | Predicting results for input data based on a model generated from clusters |
Non-Patent Citations (2)
Title |
---|
Learning Context-free Grammars: Capabilities and Limitations of a Recurrent Neural Network with an External Stack Memory;Sreerupa Das等;《Advances in Neural Information Processing Systems 5.》;19930101;第1-6页 * |
Memory Networks;Jason Weston等;《http://arxiv.org/pdf/1410.3916v1.pdf》;20141015;第1-8页 * |
Also Published As
Publication number | Publication date |
---|---|
CN106462803A (en) | 2017-02-22 |
US20200226446A1 (en) | 2020-07-16 |
EP3207507B1 (en) | 2021-02-17 |
US11210579B2 (en) | 2021-12-28 |
US20160117586A1 (en) | 2016-04-28 |
US10650302B2 (en) | 2020-05-12 |
CN111079895A (en) | 2020-04-28 |
WO2016061403A1 (en) | 2016-04-21 |
EP3207507A1 (en) | 2017-08-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN106462803B (en) | Enhancing neural networks with external memory | |
EP3238144B1 (en) | Augmenting neural networks to generate additional outputs | |
US11900232B2 (en) | Training distilled machine learning models | |
US11775804B2 (en) | Progressive neural networks | |
US11568250B2 (en) | Training neural networks using a prioritized experience memory | |
US20210117801A1 (en) | Augmenting neural networks with external memory | |
CN109155002B (en) | Enhanced neural network system, method and computer program | |
US11714993B2 (en) | Classifying input examples using a comparison set | |
US11080594B2 (en) | Augmenting neural networks with external memory using reinforcement learning | |
US20170228638A1 (en) | Augmenting neural networks with sparsely-accessed external memory | |
US10635972B1 (en) | Recurrent neural networks with rectified linear units |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
CB02 | Change of applicant information |
Address after: American CaliforniaApplicant after: Google limited liability companyAddress before: American CaliforniaApplicant before: Google Inc. |
|
CB02 | Change of applicant information | ||
GR01 | Patent grant | ||
GR01 | Patent grant | ||
TR01 | Transfer of patent right |
Effective date of registration: 20200303Address after: England AtsushiPatentee after: DEEPMIND TECHNOLOGIES Ltd.Address before: California, USAPatentee before: GOOGLE Inc. |
|
TR01 | Transfer of patent right |