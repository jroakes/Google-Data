US6687704B1 - Database model system and method - Google Patents
Database model system and method Download PDFInfo
- Publication number
- US6687704B1 US6687704B1 US09/655,779 US65577900A US6687704B1 US 6687704 B1 US6687704 B1 US 6687704B1 US 65577900 A US65577900 A US 65577900A US 6687704 B1 US6687704 B1 US 6687704B1
- Authority
- US
- United States
- Prior art keywords
- content
- attributes
- category
- database
- providing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/211—Schema design and management
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
Definitions
- Computer Program Listing Appendices A-H are contained on compact disc and are hereby incorporated herein by reference in their entirety.
- Computer Program Listing Appendix A (created on compact disc on Jul. 7, 2003 and having a size of 1,777,600 bytes) contains technical architecture design definitions and data for implementing a database model system and method in accordance with an embodiment of the present invention as described more completely below.
- Computer Program Listing Appendices B and D define data elements utilized for implementing the database model system and method of Computer Program Listing Appendix A.
- Computer Program Listing Appendix B (pages 1-53) was created on compact disc on Jul. 8, 2003 and has a size of 1,550,336 bytes.
- Computer Program Listing Appendix B (pages 54-105) was created on compact disc on Jul.
- Computer Program Listing Appendix D was created on compact disc on Jul. 8, 2003 and has a size of 1,359,872 bytes.
- Computer Program Listing Appendix D was created on compact disc on Jul. 8, 2003 and has a size of 1,275,904 bytes.
- Computer Program Listing Appendix C (created on compact disc on Jul. 7, 2003 and having a size of 763,904 bytes) provides a table and index report and
- Computer Program Listing Appendix E (created on compact disc on Jul. 8, 2003 and having a size of 346,112) provides a group definition report for implementing the database model system and method of Computer Program Listing Appendix A.
- Computer Program Listing Appendix F (created on compact disc on Jul.
- Computer Program Listing Appendix G (created on compact disc on Jul. 9, 2003 and having a size of 624,640) provides a design document for a dynamic HTML template interpreter for delivering content in accordance with the database model system and method of Computer Program Listing Appendix A.
- Computer Program Listing Appendix H provides listings of computer programs and related data including the software source code for implementing a database model system and method in accordance with the database model system and method of Computer Program Listing Appendix A.
- Computer Program Listing Appendix H (pages 1-50) was created on compact disc on Jul.
- Computer Program Listing Appendix H (pages 51-100) was created on compact disc on Jul. 10, 2003 and has a size of 1,511,424 bytes.
- Computer Program Listing Appendix H (pages 101-150) was created on compact disc on Jul. 10, 2003 and has a size of 1,593,344 bytes.
- Computer Program Listing Appendix H (pages 151-200) was created on compact disc on Jul. 10, 2003 and has a size of 1,411,072 bytes.
- Computer Program Listing Appendix H (pages 201-250) was created on compact disc on Jul. 10, 2003 and has a size of 1,538,048 bytes.
- Computer Program Listing Appendix H (pages 251-300) was created on compact disc on Jul.
- Computer Program Listing Appendix H (pages 301-350) was created on compact disc on Jul. 10, 2003 and has a size of 1,343,488 bytes.
- Computer Program Listing Appendix H (pages 351-400) was created on compact disc on Jul. 11, 2003 and has a size of 1,187,840 bytes.
- Computer Program Listing Appendix H (pages 401-450) was created on compact disc on Jul. 14, 2003 and has a size of 1,101,824 bytes.
- Computer Program Listing Appendix H (pages 451-500) was created on compact disc on Jul. 14, 2003 and has a size of 1,249,280 bytes.
- Computer Program Listing Appendix H (pages 501-550) was created on compact disc on Jul.
- Computer Program Listing Appendix H (pages 551-600) was created on compact disc on Jul. 14, 2003 and has a size of 1,210,368 bytes.
- Computer Program Listing Appendix H (pages 601-630) was created on compact disc on Jul. 15, 2003 and has a size of 651,264 bytes.
- the present invention relates generally to computer systems and, more particularly, to data modeling.
- Data models describe the organization of a database, which is generally a set of related files that are created and managed by a database management system.
- the database is typically part of a computer system that stores a large quantity of data organized in a manner that facilitates efficient storage, search, and retrieval. For example, businesses tend to store and require access to large quantities of data relating to specific business matters such as pertaining to employees, customers, inventory, and finances.
- a relational database is a common type of database model.
- the relational database organizes the data in tables comprised of rows and columns, with each data element indexed by its particular row and column.
- Each row represents an entity, which is a thing of significance about which the organization wishes to hold information concerning.
- Each column in the corresponding row defines a characteristic or attribute of that entity, with certain columns possibly being designated as “keys” that uniquely identify each row.
- Primary keys identify an indexed field that maintains the primary sequence of the file or table to access the row, while foreign keys identify a field in one table that is indexed in another table in order to relate or link the tables.
- FIG. 1 illustrates a traditional data model table structure for an employee table 100 .
- Employee table 100 is an exemplary table structure listing various attributes of an employee including identification (ID) such as a number, name, and salary.
- ID identification
- Employee table 100 could be used to create a relational database employee table, with each row corresponding to a certain employee. In such a case, the first column would correspond to the identification number, the next column would correspond to the name, and the final column would correspond to the salary.
- the attributes (i.e., the columns) in an entity table are properties specific to an instance of that entity (i.e., the row).
- a drawback of the traditional data model is that it may be difficult to add or change attributes.
- companies differ from each other in terms such as products, services, scale, operating procedures, and organizational structures. Companies may also change internally due to changes such as restructuring, changing product lines, or ways of doing business. Consequently, all of the attributes may not be known, may not be well defined, or may change frequently over a certain period of time.
- an attribute must be changed or a new attribute added to a table, then this value must be added to each one of the related records in the database and the change reflected in the related, corresponding tables. This process is time-consuming and labor intensive and requires database maintenance to change the structure of the database.
- the present invention provides a database model system and method which offer a flexible and generic database design.
- the present invention provides many advantages over traditional database modeling schemes and permits additions, deletions, or modifications of attributes of a table by adding, deleting, or modifying the data in an appropriate row and constructing the desired relationships. Consequently, database modifications require changes to the data rather than to the fundamental table definition and database schema.
- the database model may be incorporated into a computer system, for example, to deliver web pages to users on a computer network.
- a method of structuring a database comprises providing a data object table having a minimal set of attributes, an attribute table having attributes corresponding to the data object table, and a value table having values corresponding to the attributes.
- a method of structuring a database comprising providing a category table, a content table containing content corresponding to categories in the category table, and a category contents table containing a mapping scheme that maps content contained in the content table to categories in the category table.
- An attribute table containing attributes for an application utilizing the database and an attribute values table containing values corresponding to attributes in the attribute table are also provided.
- a computer system comprising one or more server computers connected through a computer network and one or more computer programs executed by a server computer that manages data stored in a database having a structure in accordance with the embodiments described above.
- FIG. 1 is a block diagram illustrating a traditional data model table structure.
- FIG. 2 a is a block diagram illustrating an exemplary data model table structure, in accordance with some embodiments of the present invention.
- FIG. 2 b is a block diagram illustrating an exemplary data model table structure for FIG. 2 a.
- FIG. 3 a is a block diagram illustrating an exemplary generic database model table structure, in accordance with some embodiments of the present invention.
- FIG. 3 b is a block diagram illustrating an exemplary relationship of category and content, in accordance with some embodiments of the present invention.
- FIG. 3 c is a table illustrating a category hierarchy, in accordance with some embodiments of the present invention.
- FIGS. 4 a - 4 l are a block diagram illustrating a database model for an exemplary Internet publishing architecture, in accordance with some embodiments of the present invention.
- FIG. 5 is a system block diagram for an exemplary network application utilizing the database model of FIG. 4 .
- FIG. 6 is an exemplary template for displaying content by utilizing the database model of FIG. 4 .
- FIG. 7 is a flowchart for an exemplary data model table structure, in accordance with some embodiments of the present invention.
- FIG. 8 is a flowchart for an exemplary data model table structure, in accordance with some embodiments of the present invention.
- FIG. 2 a shows a block diagram illustrating an exemplary data model table structure 200 , in accordance with some embodiments of the present invention.
- Table structure 200 comprises an employees table 202 , an attributes table 204 , and an employee attributes table 206 .
- Employees table 202 comprises attributes (i.e., columns) that are always required and are very unlikely to be changed.
- employees table 202 includes employee identification (ID) and employee name as attributes that will be relatively permanent and remain significant.
- Employees table 202 may be viewed as an entity table or a data object table.
- Attributes table 204 comprises rows of properties about employees that may be required or desired.
- attributes table 204 includes ID and name, with values for attribute “name” being such items as address and phone number.
- Employee attributes table 206 comprises the values of the specified attributes for a specified employee.
- Employee attributes table 206 may store the actual value for the address and phone number of each employee. The foreign keys in employee attributes table 206 determine the attribute for which each value is defined and the corresponding employee.
- employee attributes table 206 has two columns, EMPLOYEE_ID and ATTRIBUTE_ID, which combine to form its primary key.
- the primary key may be viewed as an attribute (i.e., a column) or combination of attributes (i.e., columns) that can be utilized to uniquely identify a body of information (i.e., a record).
- EMPLOYEE_ID and ATTRIBUTE_ID may be used to uniquely identify every record of information in employee attributes table 206 .
- the “*” symbol placed next to a column indicates the column is mandatory for every record of information in the specified table.
- employees table 202 has a “*” symbol associated with columns ID and NAME, because both columns are mandatory for every record in employees table 202 .
- Other column identifiers may also be employed to indicate, for example, columns that are optional.
- Table structure 200 is an example of a database architecture in accordance with an embodiment of the present invention.
- Table structure 200 differs from the traditional data model table structure, as exemplified in employee table 100 and described in reference to FIG. 1, by providing a generic data model for employee information.
- Table structure 200 in comparison to employee table 100 could be viewed as rotating the entities or tables of the traditional data model on their side and providing attributes and attribute values of an entity in a separate table.
- the attribute columns in a traditional data model become rows in an attribute table in accordance with some embodiments of the present invention. Consequently, the addition, deletion, or modification of attributes does not require a database schema change.
- FIG. 2 b is a block diagram illustrating an exemplary data model table structure 250 for FIG. 2 a .
- table structure 250 comprises exemplary data for table structure 200 of FIG. 2 a .
- Table structure 250 comprises employees table 252 , attributes table 254 , and employee attributes 256 .
- Employees table 252 includes attributes such as, for example, ID and name, with rows corresponding to specific instances of those attributes. For example, the rows may include IDs 10 , 20 , and 30 , corresponding to Names Joe, Peter, and Sue, which are employees.
- Attributes table 254 includes values for attribute Name such as, for example, telephone, address, and age, with corresponding attribute ID values 100 , 110 , and 120 .
- Employee attributes table 256 includes the values of the specified attributes for a specified employee.
- column headings may include Employee ID (EMP_ID), attribute ID (ATTRIB_ID), and Value, with the rows corresponding to specific instances of these column headings.
- EMP_ID Employee ID
- attribute ID has rows 100 , 120 , 120 , 110
- Value has rows containing values for a telephone number ((123) 123-1234), age (30), age (45), and address (123 Main St., City, State).
- the first row identifies Joe (Employee ID of 10 , known through Employees table 252 ) and stores the value of his telephone number, which is identified as a telephone number through Attributes table 254 .
- Joe Employee ID of 10 , known through Employees table 252
- Attributes table 254 The same analysis may be performed for the other exemplary rows.
- Table structure 250 illustrates the generic nature of the data model, in accordance with some embodiments of the present invention.
- the addition, deletion, or modification of attributes does not require a database schema change. For example, if data regarding the drivers license for employee Sue (Employee ID 30 ) needs to be incorporated into table structure 250 , no additional columns are required. Instead, attributes table 254 would be modified to include another row (e.g., ID of 140 and Name of Drivers License) and Employee attributes table 256 would be modified to include another row (e.g., Employee ID of 30 , Attribute ID of 140 , and Value of A 123 , with A 123 being the value of Sue's drivers license number). Thus, many different changes may be made that only require changes to the data rather than to the database structure and table definitions.
- FIG. 3 a is a block diagram illustrating an exemplary generic database model table structure 300 , in accordance with some embodiments of the present invention.
- Table structure 300 comprises an attribute values table 302 , an attributes table 304 , a category contents table 310 , a categories table 312 , a content table 314 , and a category relationships table 316 .
- the basic table components of this exemplary generic database model comprise content, categories, and attributes, which are linked together and provide attributes and content for a given entity in separate tables.
- Categories table 312 comprises a table of categories for the subject matter of table structure 300 .
- categories may consist of a company's business structure or product line, which may be viewed as structured data.
- Category relationships table 316 describes how categories relate to each other along with corresponding relationship rules.
- FIG. 3 b is a block diagram 330 illustrating an exemplary relationship of category and content, in accordance with some embodiments of the present invention.
- Block diagram 330 comprises a number of category items 332 , 334 , 336 , 338 , and 340 and a number of content items 342 , 344 , 346 , 348 , and 350 , with the arrows showing the direction and linking of one to the other.
- category item 332 is linked to category 334 and to category 336 .
- Category 336 is linked to content 1 342 , which contains the category content for category 336 .
- block diagram 330 defines the relationship of category (e.g., structured data) to content (e.g., unstructured data).
- Category contents table 310 comprises a mapping scheme that maps a piece of content from content table 314 to its place in the category index corresponding to categories table 312 .
- a document that describes how to ensure a telephone line is properly installed into a facsimile machine may appear in the following product hierarchy position: Facsimile product X—installation and configuration—connecting telephone line.
- FIG. 3 c is a table 380 illustrating a product hierarchy, in accordance with some embodiments of the present invention.
- Table 380 illustrates an exemplary category hierarchy (e.g., product hierarchy) that shows how categories may be arranged in a hierarchy.
- category types may include a product family, product series, product name, and the final content.
- categories such as printers, copy machines, computers, and facsimile machines. If the printers category (e.g., DeskJet printers) is selected, then a selection may be made from the product series (e.g., 2000 series or 3000 series).
- the product name for a particular type (e.g., 2001 or 2002) of series printer is selected next, and finally, the particular content (e.g., document 1 or document 2 ) desired is obtained.
- attributes table 304 describes all attributes defined for a given application utilizing table structure 300 .
- the attributes may be further defined in terms of areas of a given application that may be referenced in table structure 300 . For example, certain areas that may be referenced are “content” and “categories.”
- the attributes can also be defined for the areas of the application that are designated. For example, attributes may be access control lists, operating system, or language.
- the area of a given application utilizing table structure 300 that is allowed to use a certain attribute may also be defined.
- the attribute language may apply to all areas including content and categories defined by their corresponding tables.
- Attribute values table 302 is linked to attributes table 304 , category contents table 310 , categories table 312 , and content table 314 . Attributes table 304 may be used to identify what attribute belongs to what area of the application. Attribute values table 302 comprises values assigned to an attribute specified through one of the related tables via foreign keys.
- a new type of data may be represented as an attribute using attributes table 304 or as a category relating to another category using categories table 312 . If more than one piece of information needs to be recorded about the new type of data being added, then a category should be created.
- a product may have warranty information accessible through a network hypertext link. Associated with the warranty navigation link is a number of warranty documents. Because of the additional information needed for the warranty (i.e., the warranty documents), making an attribute identifying the product as having warranty information is not appropriate. Making warranty a category and relating it to the product would be the preferred choice.
- an attribute would suffice. For example, a product ID is associated with a product. Because no additional information is necessary concerning the product ID, making it an attribute related to the product is the preferred choice.
- table structure 300 illustrates a generic and flexible database model that is an extension of the principles illustrated in exemplary table structure 200 described in detail in reference to FIG. 2 a .
- Table structure 300 provides, for example, categories to be changed and content to be revised simply by making the changes to the appropriate row in categories table 312 and content table 314 , respectively.
- the principles of the present invention permit additions or modifications of attributes of a table simply by adding or modifying the data in an appropriate row and constructing the desired relationships. Consequently, database modifications require changes to the data rather than to the table definition and database schema.
- This database model architecture is flexible and extensible and allows for enhancements, changes, and additions to the data stored in the database.
- This data may include product information, product navigation, support documents, images, video or sound data, or any other items of interest.
- the principles of the present invention may be applied to any type of data or structure that may be modeled by a data base model, and is not limited to products or other embodiments discussed herein.
- FIG. 4 is a block diagram illustrating a database model 400 for an exemplary Internet publishing architecture (IPA) in accordance with some embodiments of the present invention.
- Database model 400 incorporates the principles of the present invention to provide a content delivery system (CDS) that displays information in the form of, for example, an Internet web page.
- CDS content delivery system
- Database model 400 comprises an attribute values (CDS_ATTRIBUTE_VALUES) table 402 , a category contents (CDS_CATEGORY_CONTENTS) table 404 , a presentation methods (CDS_PRESENTATION_METHODS) table 406 , a content relationships (CDS_CONTENT_RELATIONSHIPS) table 408 , a parameter values (CDS_PARAMETER_VALUES) table 410 , a templates (CDS_TEMPLATES) table 412 , a category relationships (CDS_CATEGORY_RELATIONSHIPS) table 414 , a content relationship types (CDS_CONTENT_RLTNSHP_TYPES) table 416 , a parameter names (CDS_PARAMETER_NAMES) table 418 , a template types (CDS_TEMPLATE_TYPES) table 420 , a category relationship rules (CDS_CATEGORY_RLTNSHP_RULES) table 422 , a content values
- the various tables of database model 400 are linked using the notation of a solid line meaning mandatory, a dashed line meaning optional, one line branching out meaning one-to-many, many lines joining to one meaning many-to-one, and an arc linking several lines meaning a logical exclusive OR relationship.
- the links are further labeled based on their origin and destination within database model 400 .
- the tables shown in the database model 400 list exemplary data such as attributes and keys for each respective table. Various icons indicate columns that correspond to the primary or foreign key along with mandatory or optional data.
- Computer Program Listing Appendices B and D (on compact disc) provide details and definition for all of the data elements, but a brief description of the tables is provided below.
- Category types table 444 describes the type of category such as a generic name or class (e.g., an object class) of a category.
- category types are product number (e.g., product ID or SKU), product name, product series, product line, product family, and product category.
- Categories table 430 and category types table 444 are used because not all products follow the same traditional hierarchy of product categorization. This provides flexibility in modeling hierarchies having a different number of hierarchical levels. In more general terms, HP products fit into a network or hierarchical model with categories table 430 , category relationships table 414 , category types table 444 , and category relationship rules table 422 forming this network model.
- Categories table 430 contains a physical tangible product list, category of products, or subject area of a product for a company (e.g., Hewlett Packard (HP)).
- a product family is HP DeskJet printers or HP DeskJet 600 series printers
- a product name is HP DeskJet 694C printer
- a subject area i.e., a category type
- a product, category, and subject categorization is described by its relationship to category types table 444 .
- Category relationships table 414 describes how two or more product/subject categories are related and the relationship rule of the related product/subject category, with product/subject categories defined by the product hierarchy or, generally, a product network. For example, there may be four product/subject categories described in the product network as shown below.
- Category relationships table 414 would record the fact that ID 4 is related to ID 3 , ID 3 is related to ID 2 , and ID 2 is related to ID 1 (see also description in reference to FIG. 3 c . for another exemplary hierarchical relationship).
- Category relationships rule table 422 describes the rules for how category types can be related.
- a rule may be restricted to a previously defined category and define whether the relationship can occur only once or repeatedly for two nodes. For example, product series nodes are related to product name nodes and product name nodes are related to product number nodes. An example where the relationship to category would be useful would be a rule such as product number nodes are related to product name nodes. This relationship is phrased in the opposite direction than the prior example. Thus, there is a many-to-many relationship between product names and product numbers. However, the relationship between product numbers and product names is only applicable to certain products. Thus, to prevent the use of product number related to product name rule, the rule is restricted to a specified category.
- Category pre-defined values table 436 describes pre-defined categories, with one or more pre-defined categories permitted for a given category type. For example, for “Help” subject area, which is a specific instance in categories table 430 , category there may be pre-defined values of “show me how,” “troubleshooting,” and “install and configure.”
- Content types table 438 describes the type of content stored by contents table 432 .
- a text document, an image, and a manual would be type classified as .doc, .GIF, and .PDF, respectively.
- Contents table 432 comprises any content that describes or supports a product, category, or subject, with the actual content located in content values table 424 . Thus, content table 432 defines a placeholder for the content but does not actually store the content.
- contents table 432 may include documents, images, lists, spreadsheets, drawings, manuals, video, or audio.
- Content properties such as name or description are represented in the relationship of content table 432 to attribute values table 402 .
- Content is classified into the appropriate product, category, and/or subject categories by the relationship of contents table 432 to category contents table 404 .
- Content relationships table 408 describes the relationship among contents.
- a document may be comprised of multiple pieces of content (i.e., chunked), which may include images or common paragraphs shared by other documents.
- Content relationship types table 416 defines how or why content is related to another piece of content.
- content may be converted from existing content (e.g., text document converted to HTML). This type may be defined as converted.
- Another example would be a logo that is associated with several pieces of content (e.g., HP logo used in various documents). This type may be defined as chunked.
- Category contents table 404 maps a piece of content to its proper location or locations in the category (e.g., product or subject) index and defines relationships between categories and content. For example, a document that describes how to ensure that a telephone line is properly inserted into a facsimile machine may be located in various product hierarchy locations such as shown below (see also description in reference to FIG. 3 c . for an exemplary hierarchical relationship).
- Fax product or Fax product -troubleshooting -install and configure -faxing -connecting telephone line. -sending -no dial tone;
- Parameter names table 418 defines the name of a parameter based on a specified parameter type and may also be defined for a specified language.
- Application parameter types table 426 is used to group parameter types such as hypertext markup language (HTML) errors, HTML constants, and system constants.
- Parameter values table 410 defines a value for the parameter that is named by parameter names table 418 . Examples of parameter names and values are shown below.
- Application areas table 440 is used to define areas (e.g., content, categories, templates, or template methods) of an application utilizing database model 400 that may be referenced by database model 400 .
- Attributes table 442 describes the attributes, within the limits set forth in application areas table 440 , that can be defined for an application utilizing database model 400 .
- attributes may include access control lists, display, language, release date, and author.
- Attribute areas table 434 defines the area of an application utilizing database model 400 that is allowed to use each attribute. For example, a language attribute would apply to areas including content, categories, and templates, while an operating system attribute would apply only to the content area.
- Attribute pre-defined value table 428 holds all pre-defined enumerated values for a specified attribute, because an attribute or attribute area may have one or more values pre-defined in an enumerated list.
- Attribute values table 402 contains values assigned to the attributes specified for the related tables via a foreign key.
- a value is assigned to the attribute and specified as either a category, category type, content, content type, category content, parameter name, or template.
- the value may come from a pre-defined list (i.e., attribute pre-defined value table 428 ) or be user defined (one of the value attributes).
- Various database rules may be required regarding attribute values (e.g., see Computer Program Listing Appendix B).
- the content for database model 400 may be displayed using templates to construct the web pages.
- the templates are generated and represent the intended layout of a desired page type.
- the dynamic content of the page is identified and substituted by CDS specific tags which allow access to the database and provide control mechanisms.
- the HTML generator finds these specific tags and replaces them with content from the database.
- Computer Program Listing Appendix G provides further details of the dynamic HTML template interpreter.
- Template types table 420 defines a category for a presentation template. Examples of template types are content template, category template, standard error template, and navigation template. Templates table 412 defines the template (i.e., name of the template and the template source) that is used to define how content and product/subject categories are presented. For example, when a product category/index or a product content (e.g., documents) is presented on the World Wide Web (WWW), a template is used to define how this information is formatted for presentation and may also be used to define what information is presented.
- WWW World Wide Web
- Presentation methods table 406 defines the template(s) used to display a piece of content or category.
- a piece of content or category may have many templates defined for it, but based on pre-defined criteria, only one of the templates will be used to present the content or category.
- Attributes associated with the presentation method are used to resolve the ambiguity as to what template to use when presenting a content or a category that has two or more templates. For example, a support document for changing a toner cartridge may be presented a certain way for commercial users and in a different way for home users. Therefore, a presentation template must be associated to the content for each presentation method.
- the presentation method used for a template (e.g., commercial or home user) can be determined by the relationship of the presentation methods table 406 to attribute values table 402 . Presentation methods may have any number of pre-defined attributes associated with them.
- FIG. 5 is a block diagram of a computer system 500 for an exemplary network application utilizing the database model of FIG. 4 .
- Computer system 500 comprises a plurality of user terminals 502 that access a web server 506 through a network 504 , such as the Internet.
- a firewall 508 provides security and isolation through which web server 506 communicates with a database server 510 .
- Database server 510 is connected to a database 512 utilizing database model 400 .
- Database server 510 is also connected to one or more administrator terminals 514 and various other computers 516 , 518 , 520 that may comprise servers or computer systems that provide various services or information for database server 510 .
- a user may access various content or information by utilizing user terminal 502 , which may include a desktop computer, a laptop computer, a personal digital assistant, or a telephone such as a cellular telephone with a display.
- user terminal 502 may employ a web browser to communicate through network 504 .
- Web server 506 comprises an HP-UX 11 operating system, an Oracle application server 4.0, an Oracle application server's spyglass listener for use as the web listener, and Net 8 for communication with database 512 .
- the Oracle application server is responsible for spawning off server applications to support the Internet publishing architecture application, such as an HTML template interpreter that communicates with database 512 using Net 8.
- the template interpreter is a cartridge of the Oracle application server and is responsible for preparing and presenting content to users, typically by the use of templates, as described in greater detail below in reference to FIG. 6 .
- the names Oracle and HP are registered Trademarks of Oracle Corporation of Redwood Shores, Calif., and Hewlett Packard of Palo Alto, Calif., respectively.
- Database server 510 hosts an HP-UX 11 operating system, an Oracle 8.0.5 database management system, and Net 8.0 for communication with server 506 (e.g., Web Server and Oracle Application Server) through firewall 508 .
- server 506 e.g., Web Server and Oracle Application Server
- One or more administrator terminals 514 allow for the maintenance of the product and navigation information along with other components of computer system 500 .
- Computer 516 provides new or updated content and computer 518 uses an application such as DeltaLoader to extract the content from computer 516 and load the information into database 512 through database server 510 .
- Computer system 500 may also use one or more remote terminals such as computer 520 to provide required product information such as product name, series, family, and ID.
- computer Program Listing Appendix A For more detailed information for computer system 500 , such as multi-language support, please refer to Computer Program Listing Appendix A.
- Data maintained in database 512 includes templates, structured data, and unstructured data.
- a template will be required to display data (e.g., structured or unstructured) to a user.
- FIG. 6 is an exemplary template 600 for displaying content by utilizing the database model of FIG. 4 .
- Template 600 illustrates the principle of nesting templates within templates so that templates can be designed with modularity and re-use in mind.
- Template 600 comprises a top banner template 602 , a navigation template 604 , a bottom banner template 606 , along with content 608 .
- Top banner template. 602 displays top banner content including the HP logo.
- Navigation template 604 displays navigation content, while bottom banner template 606 displays bottom banner content.
- Content 608 displays the content for template 600 , which in this case is an exemplary support document on print quality troubleshooting.
- the exemplary Internet publishing architecture utilizing computer system 500 and the data and table structure of database model 400 , may serve all content and navigation pages dynamically through the use of templates to provide web pages with the requested content to a user through the network.
- the requests may also be directed to static/dynamic HTML pages or to images or other multi-media items such as portable document format (PDF) files.
- PDF portable document format
- FIG. 7 is a flowchart 700 for an exemplary data model table structure, in accordance with some embodiments of the present invention.
- Flowchart 700 provides the basic steps for creating a database model that provides a basic, generic structure of exemplary table structure 200 of FIG. 2 a .
- Step 702 creates a data objects table that includes attributes that generally are unlikely to be changed and specific instances of these attributes.
- Step 704 creates an attributes table that includes properties regarding attributes in the data objects table of step 702 .
- Step 706 creates an attributes value table that includes the actual values of the properties for the specified attributes corresponding to certain specific instances of the attributes. Therefore, flowchart 700 provides a generic, flexible, and expandable database model applicable to many types of database applications.
- FIG. 8 is a flowchart 800 for an exemplary data model table structure, in accordance with some embodiments of the present invention.
- Flowchart 800 provides the basic steps for creating a database model that provides a basic, generic structure of exemplary table structure 300 of FIG. 3 a .
- Step 802 creates a categories table that includes categories for the subject matter of the database.
- Step 804 creates a contents table that contains any content necessary to describe or support a category in the categories table of step 802 .
- Step 806 creates a category contents table that provides a mapping scheme that maps a portion of content from the contents table of step 804 to its place in the category index corresponding to the categories table of step 802 .
- Step 808 creates an attributes table that includes all attributes defined for the database.
- Step 810 creates an attributes values table that includes values assigned to an attribute specified through one of the related tables of flowchart 800 .
- Step 812 creates a category relationships table 812 , which may be optional, that describes how categories relate to each other along with corresponding relationship rules. Therefore, flowchart 800 provides a generic, flexible, and expandable database model applicable to many types of database applications.
- the database model system and method in accordance with an embodiment of the present invention provides many advantages over traditional database modeling schemes.
- the database model system and method provides flexibility and the ability to change or modify aspects of the data model by the modification of data rather than through fundamental data model schema changes.
- the database model may be incorporated into a computer system, for example, to deliver web pages to users on the computer network (e.g., WWW users on the Internet).
- these web pages may be product pages, navigation pages, or pages with support documents, with requests made by users via a uniform resource locator (URL) using a hypertext transfer protocol (HTTP).
- URL uniform resource locator
- HTTP hypertext transfer protocol
Abstract
Description
ID | Product/Category | Category Type | |
1 | Personal | Product Family | |
2 | HP Vectra | Product Group | |
3 | |
|
|
4 | D3520A | Product Number | |
Fax product | or | Fax product | ||
-troubleshooting | -install and | |||
configure | ||||
-faxing | -connecting | |||
telephone line. | ||||
-sending | ||||
-no dial tone; | ||||
Name | Value | ||
CDS-0001 | Web page not found | ||
CDS-0002 | SQL error | ||
Time-out |
45 minutes | ||
Claims (33)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/655,779 US6687704B1 (en) | 2000-08-31 | 2000-09-06 | Database model system and method |
NL1018853A NL1018853C2 (en) | 2000-08-31 | 2001-08-30 | Database modelling system and method make possible alterations to data model, such as input, removal or matching of attributes by alteration of data instead of fundamental data model scheme |
US10/749,067 US20040143588A1 (en) | 2000-08-31 | 2003-12-29 | Database model system and method |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US22960800P | 2000-08-31 | 2000-08-31 | |
US09/655,779 US6687704B1 (en) | 2000-08-31 | 2000-09-06 | Database model system and method |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/749,067 Continuation US20040143588A1 (en) | 2000-08-31 | 2003-12-29 | Database model system and method |
Publications (1)
Publication Number | Publication Date |
---|---|
US6687704B1 true US6687704B1 (en) | 2004-02-03 |
Family
ID=26923452
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/655,779 Expired - Lifetime US6687704B1 (en) | 2000-08-31 | 2000-09-06 | Database model system and method |
Country Status (2)
Country | Link |
---|---|
US (1) | US6687704B1 (en) |
NL (1) | NL1018853C2 (en) |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030221187A1 (en) * | 2002-05-23 | 2003-11-27 | International Business Machines Corporation | Database breakpoint apparatus and method |
US20030227487A1 (en) * | 2002-06-01 | 2003-12-11 | Hugh Harlan M. | Method and apparatus for creating and accessing associative data structures under a shared model of categories, rules, triggers and data relationship permissions |
US20040083222A1 (en) * | 2002-05-09 | 2004-04-29 | Robert Pecherer | Method of recursive objects for representing hierarchies in relational database systems |
US20040143588A1 (en) * | 2000-08-31 | 2004-07-22 | Russell Norman Robert | Database model system and method |
GB2398662A (en) * | 2003-02-20 | 2004-08-25 | Sun Microsystems Inc | Specifying properties using regular expression parameterization employing a configuration file. |
WO2004109557A1 (en) * | 2003-06-03 | 2004-12-16 | Forbes Holten Norris, Iii | Flexible, dynamic menu-based web-page architecture |
US20050222981A1 (en) * | 2004-03-31 | 2005-10-06 | Lawrence Stephen R | Systems and methods for weighting a search query result |
US20060004750A1 (en) * | 2004-06-30 | 2006-01-05 | Microsoft Corporation | Method and system for mapping between logical data and physical data |
US7003524B1 (en) * | 2001-03-14 | 2006-02-21 | Polymorphic Data Corporation | Polymorphic database |
US20060235836A1 (en) * | 2005-04-14 | 2006-10-19 | International Business Machines Corporation | Query conditions on related model entities |
US20070100842A1 (en) * | 2005-11-02 | 2007-05-03 | Click Commerce, Inc. | System and Method for Storing Item Attributes in an Electronic Catalog |
US20070130125A1 (en) * | 2005-12-05 | 2007-06-07 | Bmenu As | System, process and software arrangement for assisting in navigating the internet |
US20070130195A1 (en) * | 2005-12-06 | 2007-06-07 | Xiang Li | Modeling enumeration tables for relational databases |
US20070271262A1 (en) * | 2004-03-31 | 2007-11-22 | Google Inc. | Systems and Methods for Associating a Keyword With a User Interface Area |
US20070276829A1 (en) * | 2004-03-31 | 2007-11-29 | Niniane Wang | Systems and methods for ranking implicit search results |
US20080040316A1 (en) * | 2004-03-31 | 2008-02-14 | Lawrence Stephen R | Systems and methods for analyzing boilerplate |
US20080243876A1 (en) * | 2007-03-30 | 2008-10-02 | International Business Machines Corporation | Creation of generic hierarchies |
US20090125983A1 (en) * | 2006-02-10 | 2009-05-14 | Siemens Aktiengesellschaft | Security key with instructions |
US20090271419A1 (en) * | 2008-04-29 | 2009-10-29 | Sap Ag | Dynamic Database Schemas for Highly Irregularly Structured or Heterogeneous Data |
US20090276408A1 (en) * | 2004-03-31 | 2009-11-05 | Google Inc. | Systems And Methods For Generating A User Interface |
US7664734B2 (en) | 2004-03-31 | 2010-02-16 | Google Inc. | Systems and methods for generating multiple implicit search queries |
US7707142B1 (en) | 2004-03-31 | 2010-04-27 | Google Inc. | Methods and systems for performing an offline search |
US20100128302A1 (en) * | 2008-11-26 | 2010-05-27 | Xerox Corporation | Exception page programming for banner sheets |
US7788274B1 (en) * | 2004-06-30 | 2010-08-31 | Google Inc. | Systems and methods for category-based search |
US8131754B1 (en) | 2004-06-30 | 2012-03-06 | Google Inc. | Systems and methods for determining an article association measure |
US9009153B2 (en) | 2004-03-31 | 2015-04-14 | Google Inc. | Systems and methods for identifying a named entity |
US20150127668A1 (en) * | 2013-11-04 | 2015-05-07 | Denise TROTTIER | Document generation system |
WO2016007162A1 (en) * | 2014-07-10 | 2016-01-14 | Hewlett-Packard Development Company, L.P. | Categorizing columns in a data table |
US20180114179A1 (en) * | 2016-10-24 | 2018-04-26 | Simmonds Precision Products, Inc. | Product life cycle model storage architecture |
US10515231B2 (en) * | 2013-11-08 | 2019-12-24 | Symcor Inc. | Method of obfuscating relationships between data in database tables |
Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP0583108A2 (en) | 1992-07-30 | 1994-02-16 | AUTOMATED TECHNOLOGY ASSOCIATES Inc. | Entity-relation database |
US5615367A (en) | 1993-05-25 | 1997-03-25 | Borland International, Inc. | System and methods including automatic linking of tables for improved relational database modeling with interface |
US5734887A (en) * | 1995-09-29 | 1998-03-31 | International Business Machines Corporation | Method and apparatus for logical data access to a physical relational database |
US5832498A (en) | 1994-09-13 | 1998-11-03 | Bull, S.A. | Device for generating object-oriented interfaces for relational data bases and a process implemented by this device |
US5974407A (en) | 1997-09-29 | 1999-10-26 | Sacks; Jerome E. | Method and apparatus for implementing a hierarchical database management system (HDBMS) using a relational database management system (RDBMS) as the implementing apparatus |
US6112209A (en) * | 1998-06-17 | 2000-08-29 | Gusack; Mark David | Associative database model for electronic-based informational assemblies |
US6192371B1 (en) | 1999-04-28 | 2001-02-20 | Lucent Technologies, Inc | Object morphing in an object oriented computing environment using relational database query procedure |
US6252956B1 (en) * | 1995-02-17 | 2001-06-26 | Nec Corporation | Switching system data inheritance method and system |
US6263341B1 (en) * | 1992-07-29 | 2001-07-17 | Texas Instruments Incorporated | Information repository system and method including data objects and a relationship object |
US6324541B1 (en) * | 1998-06-11 | 2001-11-27 | Boardwalk Ltd. | System, method, and computer program product for providing relational patterns between entities |
US6366917B1 (en) * | 1998-04-01 | 2002-04-02 | Webputty, Inc. | Method of modifying a populated database structure by modifying metadata describing the database structure |
US6480857B1 (en) * | 2001-06-07 | 2002-11-12 | David Chandler | Method of organizing hierarchical data in a relational database |
US6493717B1 (en) * | 1998-06-16 | 2002-12-10 | Datafree, Inc. | System and method for managing database information |
US6493699B2 (en) * | 1998-03-27 | 2002-12-10 | International Business Machines Corporation | Defining and characterizing an analysis space for precomputed views |
-
2000
- 2000-09-06 US US09/655,779 patent/US6687704B1/en not_active Expired - Lifetime
-
2001
- 2001-08-30 NL NL1018853A patent/NL1018853C2/en not_active IP Right Cessation
Patent Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6263341B1 (en) * | 1992-07-29 | 2001-07-17 | Texas Instruments Incorporated | Information repository system and method including data objects and a relationship object |
EP0583108A2 (en) | 1992-07-30 | 1994-02-16 | AUTOMATED TECHNOLOGY ASSOCIATES Inc. | Entity-relation database |
US5615367A (en) | 1993-05-25 | 1997-03-25 | Borland International, Inc. | System and methods including automatic linking of tables for improved relational database modeling with interface |
US5832498A (en) | 1994-09-13 | 1998-11-03 | Bull, S.A. | Device for generating object-oriented interfaces for relational data bases and a process implemented by this device |
US6252956B1 (en) * | 1995-02-17 | 2001-06-26 | Nec Corporation | Switching system data inheritance method and system |
US5734887A (en) * | 1995-09-29 | 1998-03-31 | International Business Machines Corporation | Method and apparatus for logical data access to a physical relational database |
US5974407A (en) | 1997-09-29 | 1999-10-26 | Sacks; Jerome E. | Method and apparatus for implementing a hierarchical database management system (HDBMS) using a relational database management system (RDBMS) as the implementing apparatus |
US6493699B2 (en) * | 1998-03-27 | 2002-12-10 | International Business Machines Corporation | Defining and characterizing an analysis space for precomputed views |
US6366917B1 (en) * | 1998-04-01 | 2002-04-02 | Webputty, Inc. | Method of modifying a populated database structure by modifying metadata describing the database structure |
US6324541B1 (en) * | 1998-06-11 | 2001-11-27 | Boardwalk Ltd. | System, method, and computer program product for providing relational patterns between entities |
US6493717B1 (en) * | 1998-06-16 | 2002-12-10 | Datafree, Inc. | System and method for managing database information |
US6112209A (en) * | 1998-06-17 | 2000-08-29 | Gusack; Mark David | Associative database model for electronic-based informational assemblies |
US6192371B1 (en) | 1999-04-28 | 2001-02-20 | Lucent Technologies, Inc | Object morphing in an object oriented computing environment using relational database query procedure |
US6480857B1 (en) * | 2001-06-07 | 2002-11-12 | David Chandler | Method of organizing hierarchical data in a relational database |
Non-Patent Citations (8)
Title |
---|
David Hay Titled "Data Model Patterns : Conventions of Thought" copyright 1996 published by Dorset House Publishing, Chapter 4 (pp. 46-67) & 12 (pp. 235-257).* * |
F. Saltor, M. Castellanos and M. Garcia-Solaco Titled " Suitability odf data models as canonical models for federated databases" SIGMOD 1991.* * |
Hay, David C., Data Model Patterns: Convention of Thought, (Dorset House Publishing, New York, NY 1996). |
Jeff Sutherland, Matthew Pope and Ken Rugg Titled " The Hybrid Object Relational Architecture-An Integration of object-oriented and relational technology" Copyrigth 1993 ACM 0-39791-568-2/93/0002/0326 pp. 326-333.* * |
L. A. Kalinichenko Titled " Integeration of heterogeneous Semistructured Data Models in the Canonical One" Proc. of first all-Russian Conference on Digital Libraries, Sep. 1999.* * |
P. Loos, article entitled "Representation of Data Structures Using the Entity Relationship Model and the Transformation in Relational Databases", dated Apr., 1996, obtain by the Internet www.tu-chemnitz.de/wirtschaft/wi2/home/loos/heft_100.pdf. |
U. Sommer and P. Zoller, article entitled "WebCon: Design and Modeling of Database Driven Hypertext Applications", proceedings fo the 32nd Hawaii International Conference on System Sciences 1999, obtained by the Internet www.computer.org/proceedings/hicss/0001/00016/00016022.PDF?SMSESSION= NO. |
Wen-Hsiang Kevin Lia O and Dennis McLeod, University of Southern California article entitled "Introduction to Databases", dated Oct., 1999, obtained by the Internet www.scf.usc.edu/-csci586/papers/cs586_reading_12.pdf. |
Cited By (54)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040143588A1 (en) * | 2000-08-31 | 2004-07-22 | Russell Norman Robert | Database model system and method |
US7003524B1 (en) * | 2001-03-14 | 2006-02-21 | Polymorphic Data Corporation | Polymorphic database |
US20040083222A1 (en) * | 2002-05-09 | 2004-04-29 | Robert Pecherer | Method of recursive objects for representing hierarchies in relational database systems |
US7548935B2 (en) * | 2002-05-09 | 2009-06-16 | Robert Pecherer | Method of recursive objects for representing hierarchies in relational database systems |
US20080098363A1 (en) * | 2002-05-23 | 2008-04-24 | International Business Machines Corporation | Database breakpoint apparatus and method |
US7363617B2 (en) * | 2002-05-23 | 2008-04-22 | International Business Machines Corporation | Database breakpoint apparatus and method |
US8010949B2 (en) * | 2002-05-23 | 2011-08-30 | International Business Machines Corporation | Database breakpoint apparatus and method |
US20030221187A1 (en) * | 2002-05-23 | 2003-11-27 | International Business Machines Corporation | Database breakpoint apparatus and method |
US20030227487A1 (en) * | 2002-06-01 | 2003-12-11 | Hugh Harlan M. | Method and apparatus for creating and accessing associative data structures under a shared model of categories, rules, triggers and data relationship permissions |
GB2398662B (en) * | 2003-02-20 | 2005-12-14 | Sun Microsystems Inc | Method and apparatus for specifying properties using regular expression parameterization |
GB2398662A (en) * | 2003-02-20 | 2004-08-25 | Sun Microsystems Inc | Specifying properties using regular expression parameterization employing a configuration file. |
WO2004109557A1 (en) * | 2003-06-03 | 2004-12-16 | Forbes Holten Norris, Iii | Flexible, dynamic menu-based web-page architecture |
US20060242557A1 (en) * | 2003-06-03 | 2006-10-26 | Nortis Iii Forbes H | Flexible, dynamic menu-based web-page architecture |
US7962522B2 (en) | 2003-06-03 | 2011-06-14 | Norris Iii Forbes Holten | Flexible, dynamic menu-based web-page architecture |
GB2418509A (en) * | 2003-06-03 | 2006-03-29 | Forbes Holton Norris Iii | Flexible, dynamic menu-based web-page architecture |
US8438188B2 (en) | 2003-06-03 | 2013-05-07 | Forbes Holten Norris, III | Alternating-menu Quad-navigator |
US9009153B2 (en) | 2004-03-31 | 2015-04-14 | Google Inc. | Systems and methods for identifying a named entity |
US20070271262A1 (en) * | 2004-03-31 | 2007-11-22 | Google Inc. | Systems and Methods for Associating a Keyword With a User Interface Area |
US20070276829A1 (en) * | 2004-03-31 | 2007-11-29 | Niniane Wang | Systems and methods for ranking implicit search results |
US20080040316A1 (en) * | 2004-03-31 | 2008-02-14 | Lawrence Stephen R | Systems and methods for analyzing boilerplate |
US20050222981A1 (en) * | 2004-03-31 | 2005-10-06 | Lawrence Stephen R | Systems and methods for weighting a search query result |
US7664734B2 (en) | 2004-03-31 | 2010-02-16 | Google Inc. | Systems and methods for generating multiple implicit search queries |
US8631001B2 (en) | 2004-03-31 | 2014-01-14 | Google Inc. | Systems and methods for weighting a search query result |
US7707142B1 (en) | 2004-03-31 | 2010-04-27 | Google Inc. | Methods and systems for performing an offline search |
US7873632B2 (en) | 2004-03-31 | 2011-01-18 | Google Inc. | Systems and methods for associating a keyword with a user interface area |
US7693825B2 (en) | 2004-03-31 | 2010-04-06 | Google Inc. | Systems and methods for ranking implicit search results |
US8041713B2 (en) | 2004-03-31 | 2011-10-18 | Google Inc. | Systems and methods for analyzing boilerplate |
US20090276408A1 (en) * | 2004-03-31 | 2009-11-05 | Google Inc. | Systems And Methods For Generating A User Interface |
US20060004750A1 (en) * | 2004-06-30 | 2006-01-05 | Microsoft Corporation | Method and system for mapping between logical data and physical data |
US8131754B1 (en) | 2004-06-30 | 2012-03-06 | Google Inc. | Systems and methods for determining an article association measure |
US7251653B2 (en) * | 2004-06-30 | 2007-07-31 | Microsoft Corporation | Method and system for mapping between logical data and physical data |
US7788274B1 (en) * | 2004-06-30 | 2010-08-31 | Google Inc. | Systems and methods for category-based search |
US7580949B2 (en) * | 2005-04-14 | 2009-08-25 | International Business Machines Corporation | Query conditions on related model entities |
US20060235836A1 (en) * | 2005-04-14 | 2006-10-19 | International Business Machines Corporation | Query conditions on related model entities |
US20070100842A1 (en) * | 2005-11-02 | 2007-05-03 | Click Commerce, Inc. | System and Method for Storing Item Attributes in an Electronic Catalog |
US8112461B2 (en) | 2005-11-02 | 2012-02-07 | Requisite Software, Inc. | System and method for storing item attributes in an electronic catalog |
US20110161384A1 (en) * | 2005-11-02 | 2011-06-30 | Wykes Nathan E | System and method for storing item attributes in an electronic catalog |
US7882156B2 (en) * | 2005-11-02 | 2011-02-01 | Requisite Software, Inc. | System and method for storing item attributes in an electronic catalog |
US20070130125A1 (en) * | 2005-12-05 | 2007-06-07 | Bmenu As | System, process and software arrangement for assisting in navigating the internet |
US8271560B2 (en) * | 2005-12-05 | 2012-09-18 | Bmenu As | System, process and software arrangement for assisting in navigating the internet |
US20070130195A1 (en) * | 2005-12-06 | 2007-06-07 | Xiang Li | Modeling enumeration tables for relational databases |
US20090125983A1 (en) * | 2006-02-10 | 2009-05-14 | Siemens Aktiengesellschaft | Security key with instructions |
US8214881B2 (en) * | 2006-02-10 | 2012-07-03 | Siemens Aktiengesellschaft | Security key with instructions |
US20080243876A1 (en) * | 2007-03-30 | 2008-10-02 | International Business Machines Corporation | Creation of generic hierarchies |
US8032484B2 (en) * | 2007-03-30 | 2011-10-04 | International Business Machines Corporation | Creation of generic hierarchies |
US8352510B2 (en) * | 2008-04-29 | 2013-01-08 | Sap Ag | Dynamic database schemas for highly irregularly structured or heterogeneous data |
US20090271419A1 (en) * | 2008-04-29 | 2009-10-29 | Sap Ag | Dynamic Database Schemas for Highly Irregularly Structured or Heterogeneous Data |
US20100128302A1 (en) * | 2008-11-26 | 2010-05-27 | Xerox Corporation | Exception page programming for banner sheets |
US9019549B2 (en) * | 2008-11-26 | 2015-04-28 | Xerox Corporation | Exception page programming for banner sheets |
US20150127668A1 (en) * | 2013-11-04 | 2015-05-07 | Denise TROTTIER | Document generation system |
US10515231B2 (en) * | 2013-11-08 | 2019-12-24 | Symcor Inc. | Method of obfuscating relationships between data in database tables |
WO2016007162A1 (en) * | 2014-07-10 | 2016-01-14 | Hewlett-Packard Development Company, L.P. | Categorizing columns in a data table |
US10353927B2 (en) | 2014-07-10 | 2019-07-16 | Entit Software Llc | Categorizing columns in a data table |
US20180114179A1 (en) * | 2016-10-24 | 2018-04-26 | Simmonds Precision Products, Inc. | Product life cycle model storage architecture |
Also Published As
Publication number | Publication date |
---|---|
NL1018853A1 (en) | 2002-03-01 |
NL1018853C2 (en) | 2002-11-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6687704B1 (en) | Database model system and method | |
US7308458B2 (en) | System for normalizing and archiving schemas | |
US8429519B2 (en) | Presentation generator | |
US7991805B2 (en) | System for viewing and indexing mark up language messages, forms and documents | |
JP5710102B2 (en) | Adaptive content platform and application integration with the platform | |
EP1693793A1 (en) | Intellectual property management system | |
US20070168325A1 (en) | System and method for workflow processing using a portable knowledge format | |
US20030135517A1 (en) | Method, system, and program for defining asset classes in a digital library | |
US20050203931A1 (en) | Metadata management convergence platforms, systems and methods | |
US20040143588A1 (en) | Database model system and method | |
Heaney | An analytical model of collections and their catalogues | |
US20070088704A1 (en) | System and method for creation, distribution, and utilization of portable knowledge format | |
JP2006525608A (en) | System and method for managing dynamic content assemblies | |
US5855014A (en) | Getfield function for a relational workgroup platform using keyword and workflow databases | |
US7992079B2 (en) | Information architecture for the interactive environment | |
US20020152221A1 (en) | Code generator system for digital libraries | |
US20060265395A1 (en) | Personalizable information networks | |
US20050166139A1 (en) | System and method for managing legal documents | |
Ye et al. | Generating synthetic data to support entity resolution education and research | |
JP2009110241A (en) | Electronic file management device | |
EP1304630A2 (en) | Report generating system | |
Bellwood et al. | UDDI Version 2.03 data structure reference | |
McIntosh | Content Management Using the Rational Unified Process® | |
Parson | A detailed analysis of techniques for translating SQL databases into Microsoft access | |
Asprey et al. | Integrative Document and Content Management Systems' Architecture |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: HEWLETT-PACKARD COMPANY, COLORADOFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:RUSSELL, NORMAN ROBERT;REEL/FRAME:011597/0718Effective date: 20000925 |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY L.P., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:014061/0492Effective date: 20030926Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY L.P.,TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:014061/0492Effective date: 20030926 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.;HEWLETT-PACKARD COMPANY;REEL/FRAME:027661/0258Effective date: 20111025 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |