JP2023139043A - Just-in-time container - Google Patents
Just-in-time container Download PDFInfo
- Publication number
- JP2023139043A JP2023139043A JP2023111341A JP2023111341A JP2023139043A JP 2023139043 A JP2023139043 A JP 2023139043A JP 2023111341 A JP2023111341 A JP 2023111341A JP 2023111341 A JP2023111341 A JP 2023111341A JP 2023139043 A JP2023139043 A JP 2023139043A
- Authority
- JP
- Japan
- Prior art keywords
- execution environment
- bootstrap
- data store
- software application
- extended
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 55
- 230000003190 augmentative effect Effects 0.000 claims description 43
- 230000015654 memory Effects 0.000 claims description 33
- 238000012545 processing Methods 0.000 claims description 31
- 229910001750 ruby Inorganic materials 0.000 claims description 12
- 239000010979 ruby Substances 0.000 claims description 6
- 238000004891 communication Methods 0.000 claims description 3
- 230000002708 enhancing effect Effects 0.000 abstract 2
- 230000003068 static effect Effects 0.000 description 15
- 238000010586 diagram Methods 0.000 description 12
- 238000004590 computer program Methods 0.000 description 8
- 230000006399 behavior Effects 0.000 description 4
- 230000008569 process Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 238000010276 construction Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000008676 import Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 239000013598 vector Substances 0.000 description 2
- 230000004913 activation Effects 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 238000003339 best practice Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/4401—Bootstrapping
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/71—Version control; Configuration management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
- G06F8/63—Image based installation; Cloning; Build to order
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/4401—Bootstrapping
- G06F9/4416—Network booting; Remote initial program loading [RIPL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44505—Configuring for program initiating, e.g. using registry, configuration files
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/45575—Starting, stopping, suspending or resuming virtual machine instances
Abstract
Description
技術分野
本開示は、ソフトウェアアプリケーションのための実行環境を効率的に構成および展開することに関する。
TECHNICAL FIELD This disclosure relates to efficiently configuring and deploying execution environments for software applications.
背景
コンテナ技術は、従来の仮想化環境に関連付けられる大きなオーバーヘッドを招くことなく、アプリケーションおよびサービスを迅速にスケーリングする見込みを提供する。ソフトウェアアプリケーションのためのソースコードは、コンテナ内での動作展開に先立って、ソフトウェア開発環境内で開発および試験されてもよい。コンテナビルダは、入力されるソースコードから出力されるコンテナを構築するために公然利用可能である。これらのコンテナビルダは、概して、ソースコードを展開のために対応するコンテナにどのようにパッケージ化するかを記述する命令および構築ツールを含む。コンテナビルダは、しばしば、ソフトウェア開発キット、コンパイラ、および／またはデバッガなどの構築時ツール、ならびに出力されるコンテナを実行するためのランタイム環境の両方を含む、重いコンテナイメージを生成する。これらの重いコンテナイメージはより大きく、展開および顧客への配信時に不要なコンテンツ／コンポーネントを含む。例えば、展開されたコンテナにコンパイラを含めることは、コンテナに重量を追加するだけでなく、パッケージ化された展開に攻撃ベクトルおよびセキュリティ脆弱性を導入するので、不必要である。より軽量な実行環境は、アプリケーションまたはサービスをサポートするために必要なコンポーネント／コンテンツのみを含む。しかしながら、実行環境のこの合理化は、構成負担の増加という犠牲を払って成り得る。ソフトウェア開発プラットフォームは、アプリケーション実行環境を構成および展開することに対しては最適化されていない場合がある。さらに、ソフトウェア開発者は、軽量実行環境を構成および展開するのに熟練もしくは知識がないことがあり、または実行環境を構成もしくは展開する権限がないことがある。その結果、軽量実行環境においてアプリケーションを展開することを望むソフトウェア開発者は、非効率に直面する。
Background Container technology offers the promise of rapidly scaling applications and services without incurring the significant overhead associated with traditional virtualized environments. Source code for a software application may be developed and tested within a software development environment prior to operational deployment within a container. Container builders are publicly available for building output containers from input source code. These container builders generally include instructions and construction tools that describe how to package source code into a corresponding container for deployment. Container builders often produce heavy container images that include both build-time tools such as software development kits, compilers, and/or debuggers, and runtime environments for running the output containers. These heavy container images are larger and contain content/components that are unnecessary during deployment and delivery to customers. For example, including a compiler in a deployed container is unnecessary, as it not only adds weight to the container, but also introduces attack vectors and security vulnerabilities to the packaged deployment. A more lightweight execution environment contains only the components/content necessary to support an application or service. However, this rationalization of the execution environment may come at the cost of increased configuration burden. Software development platforms may not be optimized for configuring and deploying application execution environments. Additionally, software developers may not be skilled or knowledgeable in configuring and deploying lightweight execution environments, or may not have the authority to configure or deploy execution environments. As a result, software developers wishing to deploy applications in lightweight execution environments face inefficiencies.
概要
本開示の態様は、ソフトウェアアプリケーションのための実行環境を構成および展開することに関する。一態様は、データ処理ハードウェアにおいて、データストアからブートストラップ実行環境を受信することを含む方法を提供し、ブートストラップ実行環境は、依存関係のマニフェストを有するソフトウェアアプリケーションを含む。本方法は、データ処理ハードウェアがブートストラップ実行環境を実行し、拡張された実行環境がデータストアから利用可能であるかどうかを判断することを含む動作をデータ処理ハードウェアに実行させることをさらに含む。拡張された実行環境がデータストアから利用可能である場合、動作は、データストアから拡張された実行環境を受信することと、拡張された実行環境に基づいてブートストラップ実行環境を拡張することと、ソフトウェアアプリケーションを実行することとをさらに含む。拡張された実行環境がデータストアから利用可能ではない場合、動作は、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張して、拡張された実行環境を作成することと、拡張された実行環境をデータストアに記憶することと、ソフトウェアアプリケーションを実行することとを含む。
Overview Aspects of the present disclosure relate to configuring and deploying execution environments for software applications. One aspect provides a method, at data processing hardware, that includes receiving a bootstrap execution environment from a data store, the bootstrap execution environment including a software application having a manifest of dependencies. The method further includes causing the data processing hardware to perform operations that include executing a bootstrap execution environment and determining whether an expanded execution environment is available from the data store. include. If the augmented execution environment is available from the data store, the operations include: receiving the augmented execution environment from the data store; and augmenting the bootstrap execution environment based on the augmented execution environment; and executing the software application. If an augmented execution environment is not available from the datastore, the behavior is to augment the bootstrap execution environment based on the dependency manifest to create an augmented execution environment, and to create an augmented execution environment. storing the data in a data store and executing the software application.
本開示の実現例は、以下の任意選択の特徴のうちの１つ以上を含んでもよい。いくつか
の実現例では、本方法は、データ処理ハードウェアが、データストア内の拡張された実行環境に注釈を付けて、ソフトウェアアプリケーションのバージョン、拡張された実行環境に関連付けられるオペレーティングシステムバージョン、または拡張された実行環境に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つを示すことを含む。拡張された実行環境がデータストアから利用可能であるかどうかを判断することは、拡張された実行環境が、ソフトウェアアプリケーション、ブートストラップ実行環境に関連付けられるオペレーティングシステムバージョン、またはブートストラップ実行環境に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つと互換性があるかどうかを判断することを含んでもよい。
Implementations of this disclosure may include one or more of the following optional features. In some implementations, the method includes data processing hardware annotating an extended execution environment in a data store to identify a software application version, an operating system version associated with the extended execution environment, or including illustrating at least one processor architecture associated with the extended execution environment. Determining whether an extended execution environment is available from a data store determines whether the extended execution environment is associated with the software application, the operating system version associated with the bootstrap execution environment, or the bootstrap execution environment. The method may include determining whether the method is compatible with at least one of the processor architectures.
本方法は、データ処理ハードウェアにおいて、ソフトウェアアプリケーションのための構築要求を受信することと、データ処理ハードウェアが、ソフトウェアアプリケーションに基づいてブートストラップ実行環境を構成することと、データ処理ハードウェアが、ブートストラップ実行環境をデータストアに記憶することとをさらに含んでもよい。依存関係のマニフェストに基づいてブートストラップ実行環境を拡張することは、アプリケーション依存関係をインストールすることを含んでもよい。いくつかの例では、ソフトウェアアプリケーションは、JavaScriptアプリケーション、Pythonアプリケーション、またはRubyアプリケーションのうちの１つである。アプリケーション依存関係は、サポートライブラリ、アーキテクチャ固有のバイナリモジュール、または実行時にコンパイルされるモジュールのうちの少なくとも１つを含んでもよい。いくつかの実現例では、本方法は、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張して、拡張された実行環境を作成した後、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張することによって追加または修正されたファイルを含む更新されたファイルのセットを識別することを含む。拡張された実行環境をデータストアに記憶することは、更新されたファイルのセットをデータストアに記憶することを含んでもよい。いくつかの例では、ブートストラップ実行環境はコンテナイメージを含み、データストアはコンテナレジストリを含む。 The method includes, at data processing hardware, receiving a build request for a software application; the data processing hardware configuring a bootstrap execution environment based on the software application; The method may further include storing the bootstrap execution environment in a data store. Extending the bootstrap execution environment based on the dependency manifest may include installing application dependencies. In some examples, the software application is one of a JavaScript application, a Python application, or a Ruby application. Application dependencies may include at least one of support libraries, architecture-specific binary modules, or modules compiled at runtime. In some implementations, the method extends the bootstrap execution environment based on the dependency manifest to create an augmented execution environment, and then extends the bootstrap execution environment based on the dependency manifest. identifying a set of updated files that includes files that have been added or modified by; Storing the expanded execution environment on the data store may include storing an updated set of files on the data store. In some examples, the bootstrap execution environment includes a container image and the data store includes a container registry.
本開示の別の態様は、ソフトウェアアプリケーションのための実行環境を構成し、展開するためのシステムを提供する。本システムは、データ処理ハードウェアと、データ処理ハードウェアと通信するメモリハードウェアとを備える。メモリハードウェアは、データ処理ハードウェア上で実行されるとデータ処理ハードウェアに動作を実行させる命令を記憶する。動作は、データストアからブートストラップ実行環境を受信することを含み、ブートストラップ実行環境は、依存関係のマニフェストを有するソフトウェアアプリケーションを含む。動作は、ブートストラップ実行環境を実行し、拡張された実行環境がデータストアから利用可能であるかどうかを判断することを含むさらなる動作をデータ処理ハードウェアに実行させることをさらに含む。拡張された実行環境がデータストアから利用可能である場合、動作は、データストアから拡張された実行環境を受信することと、拡張された実行環境に基づいてブートストラップ実行環境を拡張することと、ソフトウェアアプリケーションを実行することとをさらに含む。拡張された実行環境がデータストアから利用可能ではない場合、動作は、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張して、拡張された実行環境を作成することと、拡張された実行環境をデータストアに記憶することと、ソフトウェアアプリケーションを実行することとを含む。 Another aspect of the disclosure provides a system for configuring and deploying an execution environment for software applications. The system includes data processing hardware and memory hardware in communication with the data processing hardware. Memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operations include receiving a bootstrap execution environment from the data store, the bootstrap execution environment including a software application having a manifest of dependencies. The operations further include causing the data processing hardware to perform further operations including executing the bootstrap execution environment and determining whether an expanded execution environment is available from the data store. If the augmented execution environment is available from the data store, the operations include: receiving the augmented execution environment from the data store; and augmenting the bootstrap execution environment based on the augmented execution environment; and executing the software application. If an augmented execution environment is not available from the datastore, the behavior is to augment the bootstrap execution environment based on the dependency manifest to create an augmented execution environment, and to create an augmented execution environment. storing the data in a data store and executing the software application.
本開示の実現例は、以下の任意選択の特徴のうちの１つ以上を含んでもよい。いくつかの実現例では、動作は、データストア内の拡張された実行環境に注釈を付けて、ソフトウェアアプリケーションのバージョン、拡張された実行環境に関連付けられるオペレーティングシステムバージョン、または拡張された実行環境に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つを示すことをさらに含む。拡張された実行環境がデータストアから利用可能であるかどうかを判断することは、拡張された実行環境が、ソフトウ
ェアアプリケーション、ブートストラップ実行環境に関連付けられるオペレーティングシステムバージョン、またはブートストラップ実行環境に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つと互換性があるかどうかを判断することを含んでもよい。
Implementations of this disclosure may include one or more of the following optional features. In some implementations, the behavior annotates the extended execution environment in the data store to identify the software application version, the operating system version associated with the extended execution environment, or the extended execution environment associated with the extended execution environment. The method further includes indicating at least one of the processor architectures. Determining whether an extended execution environment is available from a data store determines whether the extended execution environment is associated with the software application, the operating system version associated with the bootstrap execution environment, or the bootstrap execution environment. The method may include determining whether the method is compatible with at least one of the processor architectures.
動作は、ソフトウェアアプリケーションのための構築要求を受信することと、ソフトウェアアプリケーションに基づいてブートストラップ実行環境を構成することと、ブートストラップ実行環境をデータストアに記憶することとをさらに含んでもよい。依存関係のマニフェストに基づいてブートストラップ実行環境を拡張することは、アプリケーション依存関係をインストールすることを含んでもよい。いくつかの例では、ソフトウェアアプリケーションは、JavaScriptアプリケーション、Pythonアプリケーション、またはRubyアプリケーションのうちの１つである。アプリケーション依存関係は、サポートライブラリ、アーキテクチャ固有のバイナリモジュール、または実行時にコンパイルされるモジュールのうちの少なくとも１つを含んでもよい。いくつかの実現例では、動作は、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張して、拡張された実行環境を作成した後、依存関係のマニフェストに基づいてブートストラップ実行環境を拡張することによって追加または修正されたファイルを含む更新されたファイルのセットを識別することを含む。拡張された実行環境をデータストアに記憶することは、更新されたファイルのセットをデータストアに記憶することを含んでもよい。いくつかの例では、ブートストラップ実行環境はコンテナイメージを含み、データストアはコンテナレジストリを含む。 The operations may further include receiving a build request for the software application, configuring a bootstrap execution environment based on the software application, and storing the bootstrap execution environment in a data store. Extending the bootstrap execution environment based on the dependency manifest may include installing application dependencies. In some examples, the software application is one of a JavaScript application, a Python application, or a Ruby application. Application dependencies may include at least one of support libraries, architecture-specific binary modules, or modules compiled at runtime. In some implementations, the behavior extends the bootstrap execution environment based on the dependency manifest to create an augmented execution environment, and then extends the bootstrap execution environment based on the dependency manifest. identifying a set of updated files that includes files that have been added or modified by. Storing the expanded execution environment on the data store may include storing an updated set of files on the data store. In some examples, the bootstrap execution environment includes a container image and the data store includes a container registry.
本開示の１つ以上の実現例の詳細を、添付の図面および以下の説明に記載する。他の態様、特徴、および利点は、説明および図面、ならびに特許請求の範囲から明らかになるであろう。 The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
様々な図面における同様の参照符号は、同様の要素を示す。
詳細な説明
ソフトウェアアプリケーションは、ソフトウェア開発環境において開発された後に、アプリケーション実行環境において動作可能に展開される場合がある。コンテナは、ソフトウェアアプリケーションを展開するための好ましいアプリケーション実行環境として現れつつある。コンテナ技術は、従来の仮想化環境に関連付けられる大きなオーバーヘッドを招くことなく、アプリケーションおよびサービスを迅速にスケーリングする見込みを提供する。複数のコンテナ化されたアプリケーションは、単一のホストコンピュータ上で実行され、同じ基底のオペレーティングシステムにアクセスしてもよい。さらに、コンテナ化されたアプリケーションは、様々な基底のオペレーティングシステムおよび／またはコンピュータもしくはプロセッサアーキテクチャ上で実行されてもよい。コンテナビルダは、入力ソースコードからコンテナイメージを構築するために公然利用可能である。これらのコンテナビルダは、典型的には、ソフトウェア開発キット、コンパイラ、および／またはデバッガ等の構築時ツール、ならびにソフトウェアアプリケーションを実行するために必要とされる実行時環境を含む、重いコンテナイメージを生成する。これらの重いコンテナイメージは大きく、展開／配信されるときに不要なコンテンツ／コンポーネントを含むことが多い。例えば、展開されたコンテナにコンパイラを含めることは、コンテナに重量を追加し、パッケージ化された展開に攻撃ベクトルおよびセキュリティ脆弱性を導入するので、不必要である。コンテナイメージを構成および展開することは、時間、労力、および技術を必要とする。コンテナイメージは、ソフトウェアアプリケーションが更新されるたびに再構成される必要がある場合がある。頻繁な再構成は、ソフトウェア開発の費用および労力を増大させる。
Like reference numbers in the various drawings indicate similar elements.
DETAILED DESCRIPTION Software applications may be developed in a software development environment and then operably deployed in an application execution environment. Containers are emerging as the preferred application execution environment for deploying software applications. Container technology offers the promise of rapidly scaling applications and services without incurring the significant overhead associated with traditional virtualized environments. Multiple containerized applications may run on a single host computer and access the same underlying operating system. Additionally, containerized applications may run on various underlying operating systems and/or computer or processor architectures. Container builders are publicly available for building container images from input source code. These container builders typically produce heavy container images that include build-time tools such as software development kits, compilers, and/or debuggers, as well as the runtime environment required to run the software application. do. These heavy container images are large and often contain unnecessary content/components when deployed/delivered. For example, including a compiler in a deployed container is unnecessary as it adds weight to the container and introduces attack vectors and security vulnerabilities to packaged deployments. Configuring and deploying container images requires time, effort, and skill. Container images may need to be reconfigured each time a software application is updated. Frequent reconfiguration increases software development cost and effort.
より軽量な実行環境は、例えばソフトウェア開発コンテンツ／コンポーネントなしで、アプリケーションまたはサービスをサポートするために必要なコンポーネント／コンテンツのみを含む。しかしながら、より軽量な実行環境を構成および展開するためには、特殊な技術または知識が必要とされ得る。構成は、省略されるべきソフトウェア開発コンテンツ／コンポーネントを識別すること、および実行環境に含まれるべき必要な実行時コンテンツ／コンポーネントを識別することを必要とし得る。要するに、アプリケーション実行環境は、ソフトウェア開発環境とは実質的に異なり得る。例えば、ソフトウェア開発環境は、ウェブブラウザ、電子メールクライアント、修正制御システム、および／またはソフトウェア開発を容易にするために最適化されたグラフィカルディスプレイを含み得る。しかしながら、アプリケーション実行環境は、展開されたアプリケーションの、信頼できる効率的な実行のために、最適化され得る。ソフトウェア開発者は、軽量実行環境を構成および展開するのに熟練もしくは知識がないことがあり、または実行環境を構成もしくは展開する権限がないことがある。 A more lightweight execution environment includes only the components/content necessary to support an application or service, eg, without software development content/components. However, special skills or knowledge may be required to configure and deploy a more lightweight execution environment. Configuration may require identifying software development content/components to be omitted and identifying necessary runtime content/components to be included in the execution environment. In short, an application execution environment can be substantially different from a software development environment. For example, a software development environment may include a web browser, an email client, a modification control system, and/or a graphical display optimized to facilitate software development. However, the application execution environment may be optimized for reliable and efficient execution of deployed applications. Software developers may not be skilled or knowledgeable in configuring and deploying lightweight execution environments, or may not have the authority to configure or deploy execution environments.
コンテナビルダは、コンテナ構成最良実践の深い習熟を必要とすることなく汎用コンテナイメージを構築するために公然利用可能である。しかしながら、これらのコンテナビルダは、静的イメージからコンテナを構築する。すなわち、静的コンテナイメージは、アプリケーションの初期または「ブートストラップ」実行のための環境を含む。この手法は、アーキテクチャに依存しないソフトウェアアプリケーションまたはアーキテクチャついて互換性のあるソフトウェアアプリケーションに対しては充分であるかもしれないが、ソフトウェアアプリケーションは、それらの実行環境をカスタマイズまたは拡張した後、より効率的に実行される場合がある。例えば、ソフトウェアアプリケーションは、アーキテクチャ特有のバイナリモジュール、サポートライブラリ、もしくは他のファイル等のコンテンツを動的にインストールしてもよく、または、アプリケーションランタイム環境は、ソースコードまたはバイトコードをアーキテクチャ特有の機械コードにコンパイルして、アプリケーション性能を向上させてもよい。したがって、静的イメージからコンテナを構築する汎用コンテナ構築ツールは、これらの動的実行時拡張を捕らえるかまたはコンテナイメージを更新して実行時アーキテクチャ特有拡張を反映する能力を欠いている。アプリケ
ーションが再開されるたびに、これらの実行時拡張は、再度実行される。コンテナ内で重い重量のコンテナ構成ツールを実行することは、コンテナを構成および／または展開するのに、重量を追加すること、ならびに時間、労力、および技術を必要とすることという犠牲を払って、これらの動的実行時拡張を捕らえることが可能であってもよい。本明細書の実現例は、ソフトウェアアプリケーションの後続の実行において用いるためにソフトウェアアプリケーションによって実行環境に合わせて調整された動的および／またはアーキテクチャ固有の拡張を捕らえることを含む、ソフトウェアアプリケーションのためのセキュアな実行環境（たとえば、コンテナ）を効率的に構成および展開する方法ならびにシステムを対象とする。
Container builders are publicly available for building generic container images without requiring deep familiarity with container configuration best practices. However, these container builders build containers from static images. That is, a static container image contains the environment for the initial or "bootstrap" execution of an application. Although this technique may be sufficient for architecture-independent or architecture-compatible software applications, software applications can become more efficient after customizing or extending their execution environment. may be executed. For example, a software application may dynamically install content such as architecture-specific binary modules, support libraries, or other files, or an application runtime environment may convert source code or bytecode to architecture-specific machine code. may be compiled to improve application performance. Therefore, general-purpose container building tools that build containers from static images lack the ability to capture these dynamic runtime extensions or update the container image to reflect runtime architecture-specific extensions. Each time the application is restarted, these runtime extensions are executed again. Running heavy container configuration tools within a container comes at the cost of adding weight and requiring time, effort, and skill to configure and/or deploy the container. It may be possible to capture these dynamic runtime extensions. Implementations herein provide secure solutions for software applications that include capturing dynamic and/or architecture-specific extensions tailored to the execution environment by the software application for use in subsequent executions of the software application. Methods and systems for efficiently configuring and deploying runtime environments (e.g., containers).
図１を参照すると、いくつかの実現例では、システム１００は、例えば、ネットワーク１３０を介して、遠隔システム１４０と通信し得る、ソフトウェア開発者１０と関連付けられる開発者デバイス１１０、１１０ａ－ｎを含む。遠隔システム１４０は、スケーラブル／弾性リソース１４２を有する分散型システム（例えば、クラウド環境）であってもよい。リソース１４２は、コンピューティングリソース（例えば、データ処理ハードウェア）１４４および／または記憶リソース（例えば、メモリハードウェア）１４６を含む。ソフトウェア開発者１０は、開発者デバイス１１０を用いて、遠隔システム１４０上で実行するためのソフトウェアアプリケーション２００を開発することができる。遠隔システム１４０はまた、ソフトウェアアプリケーション２００が開発者１０によってどのように開発／作成されたかとは無関係に、遠隔システム１４０上でソフトウェアアプリケーション２００を実行するための１つ以上のセキュアな実行環境３１０、３２０（たとえば、コンテナ）を構築するためのコンテナビルダ３００を実行する。ソフトウェアアプリケーション２００を実行するためにコンテナを構築するための命令に関連付けられる構成を開発者１０が提供することを要求する汎用コンテナ構築ツール（例えば、ドッカー）とは対照的に、コンテナビルダ３００は、構成段階３０１中に開発者デバイス１１０から受信されたソフトウェアアプリケーション２００に基づいてブートストラップ実行環境３１０（たとえば、ブートストラップコンテナ３１０）を自動的に構成するように構成される。ここで、ブートストラップ実行環境３１０は、静的コンテンツを有する静的コンテナイメージに関連付けられる。特に、汎用コンテナ構築ツール（例えば、ドッカー）で使用されるワークフローとは対照的に、構成段階３０１は、動的コンテンツを作成するためのコマンドを実行することなく、ブートストラップ実行環境３１０に関連付けられる静的イメージを構成する。ブートストラップ実行環境３１０は、実行環境３１０、３２０を構築または構成するためのツーリング３１６を含んでもよい。いくつかの実現例では、ツーリング３１６は、コンテナを作成、構成、および管理するためのコマンドラインツールのセットである。遠隔および／またはウェブベースのサービスを含む、他の形態のツーリング３１６が可能である。いくつかの実現例では、コンテナビルダ３００は、起動命令のセット３１８を含むようにブートストラップ実行環境３１０を構成する。起動命令３１８は、ブートストラップ実行環境３１０を実行するときにコンテナビルダ３００が取るステップを定義する。ツーリング３１６および起動命令３１８の使用は、図３Ａ～図３Ｅを参照して以下でより詳細に説明される。
Referring to FIG. 1, in some implementations, a
その後、実行段階３０２中に、コンテナビルダ３００は、ブートストラップ実行環境３１０を走らせて／実行して、拡張された実行環境３２０を動的コンテンツ（例えば、アプリケーション依存関係３２２）とともに構築／作成するように構成される。具体的には、コンテナビルダ３００は、動的コンテンツ（例えば、アプリケーション依存関係３２２）でブートストラップ実行環境３１０を拡張することによって、ソフトウェアアプリケーション２００のための拡張された実行環境３２０を構築する。すなわち、実行段階３０２中に、コンテナビルダ３００は、ブートストラップ実行環境３１０内でソフトウェアアプリケーション２００を実行する。コンテナビルダ３００および／またはソフトウェアアプリケーション２００は、ソフトウェアアプリケーション２００の依存関係のマニフェスト２
１２に基づいて動的コンテンツ（たとえば、アプリケーション依存関係３２２）を作成し、それによって、ブートストラップ実行環境３１０を動的コンテンツ３２２で拡張して、拡張された実行環境３２０を作成してもよい。その結果、コンテナビルダ３００は、コンテナを構築するために静的および動的コンテンツがイメージにどのように記述されるべきかに関する命令を提供する構成（例えば、ドッカーファイル）を提供することを開発者１０に要求することなく、遠隔システム１４０上でソフトウェアアプリケーション２００を実行するための、動的コンテンツ３２２を含む、拡張された実行環境３２０を、開発者１０が構築し、および任意選択肢的に展開することを可能にする。
Thereafter, during an
12, thereby extending the
いくつかの実現例では、遠隔システム１４０は、メモリハードウェア１４６、５２０（図５）内に１つ以上のブートストラップ実行環境３１０、３１０ａ～ｎと１つ以上の拡張された実行環境３２０、３２０ａ～ｎとを記憶するデータストア１５０を含む。いくつかの例では、データストア１５０はコンテナレジストリを含み、各実行環境３１０、３２０は、それぞれのコンテナ化されたソフトウェアアプリケーション２００に関連付けられる。これらの例において、ブートストラップ実行環境３１０は、静的コンテンツ（たとえば、依存関係のマニフェスト２１２）を有する静的イメージに関連付けられる「ブートストラップコンテナ」と称されてもよく、拡張された実行環境３２０は、ブートストラップ実行環境３１０の実行中に（例えば実行段階３０２において）動的に作成されるコンテンツ３２２（たとえば、アプリケーション依存関係）を有するコンテナイメージに関連付けられる「拡張されたコンテナ」と称されてもよい。各実行環境３１０、３２０は、実行環境３１０、３２０に関連付けられるソフトウェアアプリケーション２００を識別する識別子３１４（例えば、タグ）を含んでもよい。拡張された実行環境３２０はまた、拡張された実行環境３２０を構築した遠隔システム１４０のオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャなどの、拡張された実行環境３２０の態様を示すメタデータ３２４を含んでもよい。
In some implementations,
図示の例では、コンテナビルダ３００は、開発者デバイス１１０から、開発者１０によってローカルに開発されたソフトウェアアプリケーション２００のための実行環境３１０、３２０を構築するよう、構築要求１８０を受信する。構築要求１８０は、単に、依存関係のマニフェスト２１２を含むソフトウェアアプリケーション２００を含んでもよい。構築要求１８０はまた、ソフトウェアアプリケーション２００に加えて、またはその代わりに、ソフトウェアアプリケーション２００を識別する識別子３１４（例えば、タグ）を含んでもよく、コンテナビルダ３００は、識別子３１４を用いて、データストア１５０からソフトウェアアプリケーション２００に関連付けられるブートストラップ実行環境３１０を取り出してもよい。ここで、ブートストラップ実行環境３１０は、コンテンツに関する情報のみを含む静的イメージに関連付けられている。
In the illustrated example,
以下でより詳細に説明されるように、ブートストラップ実行環境３１０を受信した後、コンテナビルダ３００は、ブートストラップ実行環境３１０を実行し、拡張された実行環境３２０がデータストア１５０から利用可能であるかどうか、例えば、それが以前に作成され、データストア１５０に記憶されたかどうかを判断してもよい。拡張された実行環境３２０が利用可能である場合、コンテナビルダ３００は、少なくとも、拡張された実行環境３２０に関連付けられるアプリケーション依存関係３２２（たとえば、動的コンテンツ）をデータストア１５０から取り出し、ブートストラップ実行環境３１０の以前の初期実行中に動的に作成されたアプリケーション依存関係３２２を用いてブートストラップ実行環境３１０を拡張してもよい。ブートストラップ実行環境３１０は、実行環境３１０、３２０を構築または構成するためのツーリング３１６を含んでもよい。いくつかの例では、ブートストラップ実行環境３１０は、ツーリング３１６を用いて、拡張された実行環境３２０を構成し、拡張された実行環境３２０をデータストア１５０に記憶する。この筋書では、ブートストラップ実行環境３１０は、拡張された実行環境３２０を作成するためにす
でに１回実行されているので、ブートストラップ実行環境３１０を実行する後続のインスタンスは、動的コンテンツ（例えば、アプリケーション依存関係）を作成するための起動コマンドの実行をしないで済ますことになり、なぜならば、動的コンテンツは、データストア１５０から単純に、そしてより効率的に、取り出されることができるからである。
After receiving the
ソフトウェアアプリケーション２００（すなわち、ソフトウェアリソース）という用語は、コンピューティングデバイス（例えば、データ処理ハードウェア１４４、５００（図５））にタスクを実行させるコンピュータソフトウェアを指し得る。したがって、ソフトウェアアプリケーション２００は、分散型システム（例えば、遠隔システム１４０）上にインストール、実行、展開、および／もしくは別様に実現され得る、任意のタイプまたは形態のソフトウェア、ファイル、ならびに／または実行可能コードに対応してもよい。いくつかの例では、ソフトウェアアプリケーション２００は、「アプリケーション」、「アプリ」、または「プログラム」と呼ばれることがある。例示的なアプリケーションは、システム診断アプリケーション、システム管理アプリケーション、システム保守アプリケーション、ワードプロセッシングアプリケーション、スプレッドシートアプリケーション、メッセージングアプリケーション、ウェブブラウザアプリケーション、メディアストリーミングアプリケーション、ソーシャルネットワーキングアプリケーション、セキュリティアプリケーション、およびゲームアプリケーションを含むが、これらに限定されない。ソフトウェアアプリケーション２００は、C/C++、Java（登録商標）、Python、Ruby、Perl
、またはJavaScript（登録商標）などの高レベルおよび構造化プログラミング言語を含む１つ以上のプログラミング言語で表現されてもよく、C/C++アプリケーション、Java（登
録商標）アプリケーション、Pythonアプリケーション、Rubyアプリケーション、Perlアプリケーション、またはJavaScript（登録商標）アプリケーションと呼ばれることがある。ソフトウェアアプリケーション２００は、他の形態、フレームワーク、および／またはプログラミング言語でも表現され得る。たとえば、Node.jsフレームワークにおいて開発さ
れたJavaScriptアプリケーションは、Node.jsアプリケーションまたはJavaScriptアプリ
ケーションと呼ばれることがある。
The term software application 200 (i.e., software resource) may refer to computer software that causes a computing device (eg,
, or may be expressed in one or more programming languages, including high-level and structured programming languages such as JavaScript, C/C++ applications, Java applications, Python applications, Ruby applications, Perl It is sometimes called an application or a JavaScript (registered trademark) application.
いくつかの例では、ソフトウェアアプリケーション２００は、依存関係のマニフェスト２１２またはリストを含む。依存関係のマニフェスト（「依存関係マニフェスト」と相互交換可能に称される）２１２は、遠隔システム１４０上での実行中にソフトウェアアプリケーション２００によって使用またはアクセスされるファイルおよび／もしくはソフトウェアライブラリまたはモジュールを列挙することができる。依存関係マニフェスト２１２は、ソフトウェアアプリケーション２００によって使用されるアーキテクチャ固有および／またはプログラミング言語固有のサポートライブラリを含んでもよい。例えば、依存関係マニフェスト２１２は、Pythonプログラミング言語のためのNumPy科学コンピューティ
ングパッケージを含んでもよい。依存関係のマニフェスト２１２は、遠隔システム１４０上で実行環境３１０、３２０を構成するために、ソフトウェア開発者１０によって明示的に構成されてもよい。いくつかの例では、依存関係のマニフェスト２１２は、ソフトウェアアプリケーション２００によって暗示される。例えば、ソフトウェアアプリケーション２００は、サポートライブラリを要求またはインポートするステートメントを含んでもよい。ソフトウェアアプリケーション２００は、「ＵＲＬ解析支援ライブラリへの依存関係を示すよう要求（「urlib」）」というステートメントを含んでもよい。集合的に、その
ようなステートメントは、依存関係のマニフェスト２１２の一部と見なされてもよい。
In some examples,
ブートストラップ実行環境３１０は、ソフトウェアアプリケーション２００が動作環境にかかわらず一貫して実行できるように、ソフトウェアアプリケーション２００を最初に実行するために必要とされるすべて、例えば、コード、ランタイム、システムツール、およびライブラリを含む完全なファイルシステムに、ソフトウェアアプリケーション２００を含んでもよい。いくつかの例では、開発者デバイス１１０ａ～ｎは、ソフトウェアアプ
リケーション２００に基づいてブートストラップ実行環境３１０を構築する。この場合、遠隔システム１４０は、開発者デバイス１１０ａ～ｎからブートストラップ実行環境３１０を受信し、ブートストラップ実行環境３１０をデータストア１５０に記憶してもよい。これらの例では、開発者デバイス１１０から受信された構築要求１８０は、ブートストラップ実行環境３１０を含んでもよい。データストア１５０に記憶された実行環境３１０、３２０は、後でデータストア１５０から取り出すために、インデックス付けおよび／またはカタログ化および／または識別子３１４を割り当てられることができる。データストア１５０は、「タグ」または他の注釈を用いて、各実行環境３１０、３２０に割り当てられた識別子３１４を表して、その後の検索および取得を容易にしてもよい。識別子３１４は、実行環境に関連付けられるソフトウェアアプリケーション２００を識別してもよく、および／または実行環境３１０、３２０を具体的に識別してもよい。したがって、開発者デバイス１１０ａ～ｎからの構築要求１８０は、ソフトウェアアプリケーション２００および／またはブートストラップ実行環境３１０を識別する１つ以上の識別子３１４を含んでもよい。データストア１５０は、実行環境３１０、３２０またはソフトウェアアプリケーション２００への不正アクセスから保護するための認証などのセキュリティ機能を含んでもよい。
図２Ａ～図２Ｃは、ソフトウェアアプリケーション２００、２００ａ～ｃおよび依存関係のそれぞれのマニフェスト２１２、２１２ａ～ｃの概略図である。図２Ａは、アプリケーション依存関係３２２を動的に作成するためのランタイムコマンドを含む依存関係２１２ａのマニフェストを列挙する「.gemspec」ファイルを含む例示的なRubyソフトウェアアプリケーション２００ａを示す。ここで、Rubyソフトウェアアプリケーション２００ａのアプリケーション依存関係３２２は、ブートストラップ実行環境３１０において依存関係２１２ａのマニフェストを実行すると動的に作成され、URL処理（curl）およびJSONデー
タ交換フォーマット（json）サポートライブラリを含む。いくつかの例では、「.gemspec」ファイルは、Rubyソフトウェアアプリケーション２００ａがブートストラップ実行環境３１０において実行されるときに動的に作成されるアプリケーション依存関係３２２の特定のバージョンまたはバージョンの好適な範囲を示すステートメントを含む。ここで、「.gemspec」ファイルは、バージョン０．０．９およびバージョン１．７．３がRubyソフトウェアアプリケーション２００ａのアプリケーション依存関係３２２であることを示す。いくつかの例では、「.gemspec」ファイルは、２．１より大きいが３．０より小さいjsonサポートライブラリがRubyソフトウェアアプリケーション２００ａのアプリケーション依存関係３２２であることを示すよう、ステートメント「s.add_dependency('json', '~>2.1')」を含む。コンテナビルダ３００は、Rubyソフトウェアアプリケーション２００ａが
ブートストラップ実行環境３１０内で実行されるときに、「.gemspec」ファイル内に列挙された依存関係のマニフェスト２１２に基づいてアプリケーション依存関係３２２を作成することによって、ブートストラップ実行環境３１０を拡張することができる。Rubyソフトウェアアプリケーション２００ａのためにブートストラップ実行環境３１０を拡張するための他の技法も可能である。コンテナビルダ３００は、拡張された実行環境３２０をデータストア１５０に記憶してもよい。
2A-2C are schematic illustrations of
図２Ｂを参照すると、例示的なNode.jsソフトウェアアプリケーション（例えば、JavaScriptアプリケーション２００ｂ）が示される。Node.jsソフトウェアアプリケーション２００ｂは、アプリケーション依存関係３２２を動的に作成するためのランタイムコマンドを含む、依存関係のマニフェスト２１２ｂを列挙するパッケージマネージャ（npm）コマ
ンドを含む。ここで、パッケージマネージャコマンドは、データベース（mysql）パッケ
ージが、Node.jsソフトウェアアプリケーション２００ｂがブートストラップ実行環境３
１０において実行されるときに動的に作成されることになるアプリケーション依存関係３２２であることを示す。いくつかの例では、コンテナビルダ３００は、Node.jsソフトウ
ェアアプリケーション２００ｂがブートストラップ実行環境３１０内で実行されるとき、
パッケージマネージャコマンドを実行してアプリケーション依存関係３２２を動的に作成することによってブートストラップ実行環境３１０を拡張する。Node.jsソフトウェアア
プリケーション２００ｂは、依存関係のマニフェスト２１２をさらに列挙するJavaScriptステートメントを含む。ここで、JavaScriptステートメントは、暗号（「crypto」）およびデータベース（「mysql」）サポートライブラリも、Node.jsソフトウェアアプリケーション２００ｂがブートストラップ実行環境３１０において実行されるときに動的に作成されることになるアプリケーション依存関係３２２であることを示す。いくつかの例では、コンテナビルダ３００は、実行時（ＪＩＴ）コンパイラを含むJavaScriptエンジンにおいてNode.jsソフトウェアアプリケーション２００ｂを実行する。コンテナビルダ３００は
、ブートストラップ実行環境３１０を拡張するために、ＪＩＴコンパイラに、Node.jsソ
フトウェアアプリケーション２００ｂを、より効率的な機械コードに、例えば実行時にコンパイルされるモジュールに、コンパイルさせてもよい。いくつかの実現例では、コンテナビルダ３００は、パッケージマネージャコマンドを実行し、Node.jsソフトウェアアプ
リケーション２００ｂを実行して、Node.jsソフトウェアアプリケーション２００ｂのア
プリケーション依存関係３２２を動的に作成してもよい。Node.jsソフトウェアアプリケ
ーション２００ｂのためのブートストラップ実行環境３１０を拡張するために他の技法が可能である。コンテナビルダ３００は、拡張された実行環境３２０をデータストア１５０に記憶してもよい。
Referring to FIG. 2B, an example Node.js software application (eg, JavaScript application 200b) is shown. Node.js software application 200b includes a package manager (npm) command that enumerates a dependency manifest 212b, which includes runtime commands to dynamically create
10 is an
Extend the
図２Ｂを参照すると、例示的なPythonソフトウェアアプリケーション２００ｃが示される。Node.jsソフトウェアアプリケーション２００ｂと同様に、Pythonソフトウェアアプ
リケーション２００ｃは、アプリケーション依存関係３２２を動的に作成するためのランタイムコマンドを含む、依存関係のマニフェスト２１２を列挙するパッケージマネージャ（pip）コマンドを含む。ここで、パッケージマネージャコマンドは、ウェブフレームワ
ーク（django）パッケージが、Pythonソフトウェアアプリケーション２００ｃがブートストラップ実行環境３１０において実行されるときに動的に作成されることになるアプリケーション依存関係３２２であることを示す。Pythonソフトウェアアプリケーション２００ｃは、アプリケーション依存関係のマニフェスト２１２をさらに列挙するPythonステートメントを含む。ここで、Pythonステートメントは、djangoの特定のバージョン（django==1.11.0, django-braces==0.2.1, django-model-utils==1.1.0, django-oauth2-provider==0.2.4, djangorestframework==2.3.1）サポートライブラリも、Pythonソフトウェアアプリケーション２００ｃがブートストラップ実行環境３１０において実行されるときに動的に作成されるアプリケーション依存関係３２２であることを示す。いくつかの実現例では、コンテナビルダ３００は、パッケージマネージャコマンドを実行し、Pythonソフトウェアアプリケーション２００ｃを実行して、Pythonソフトウェアアプリケーション２００ｃのためのアプリケーション依存関係３２２を動的に作成する。Pythonソフトウェアアプリケーション２００ｃのためのブートストラップ実行環境３１０を拡張するための他の技法が可能である。コンテナビルダ３００は、拡張された実行環境３２０をデータストア１５０に記憶してもよい。
Referring to FIG. 2B, an exemplary Python software application 200c is shown. Similar to Node.js software application 200b, Python software application 200c includes a package manager (pip) command that enumerates a manifest of
図３Ａ～図３Ｅは、ソフトウェアアプリケーション２００のために拡張された実行環境３２０を構築するコンテナビルダ３００の概略図を示す。図３Ａを参照すると、コンテナビルダ３００の構成段階３０１（図１）が示される。いくつかの例では、コンテナビルダ３００は、構築要求１８０を受信する。ここで、構築要求１８０は、単に、依存関係のマニフェスト２１２を含むソフトウェアアプリケーション２００を含む。構成段階３０１の間、コンテナビルダ３００は、ソフトウェアアプリケーション２００のためにブートストラップ実行環境３１０を構成し、構築する。ブートストラップ実行環境３１０は、ソフトウェアアプリケーション２００が動作環境にかかわらず一貫して実行できるように、ソフトウェアアプリケーション２００を最初に実行するために必要とされるすべて、たとえばコード、ランタイム、システムツール、およびライブラリを含む完全なファイルシステム
を含んで、ソフトウェアアプリケーション２００を静的イメージに含んでもよい。いくつかの例では、コンテナビルダ３００は、動的コンテンツを作成することなく、すなわち、実行時アーキテクチャ固有および／または動的アプリケーション依存関係３２２を伴わずに、静的イメージ（たとえば、ブートストラップ実行環境３１０）を構成する。
3A-3E show schematic diagrams of a
コンテナビルダ３００は、実行環境３１０、３２０を構築または構成するためのツーリング３１６を含むようにブートストラップ実行環境３１０を構成することができる。いくつかの実現例では、ツーリング３１６は、コンテナを作成、構成、および管理するためのコマンドラインツールのセットである。ツーリング３１６はまた、拡張された実行環境３２０をデータストア１５０に記憶することが可能であってもよい。例えば、図３Ａは、コンテナビルダ３００がブートストラップ実行環境３１０をデータストア１５０に記憶するのを示す。実行段階３０２に関して以下でより詳細に説明されるように、ツーリング３１６はまた、たとえば拡張された実行環境３２０が利用可能であるかどうかを判断するために、データストア１５０と対話することが可能であってもよい。いくつかの例では、ツーリング３１６は、実行環境内観が可能である。すなわち、ツーリング３１６は、実行環境、たとえばブートストラップ実行環境３１０を拡張して、拡張された実行環境３２０を作成するプロセス中に、ブートストラップ実行環境３１０内のどのファイルが追加または修正されたかを判断することが可能であってもよい。いくつかの実現例では、コンテナビルダ３００は、起動命令のセット３１８を含むようにブートストラップ実行環境３１０を構成する。起動命令３１８は、実行段階３０２中にブートストラップ実行環境３１０を実行するときにコンテナビルダ３００が実行するための動作（例えば、ステップ）を定義する。コンテナビルダ３００は、起動命令３１８のステップを実行する際に、ブートストラップ実行環境３１０に含まれるツーリング３１６を用いてもよい。コンテナビルダ３００は、ツーリング３１６を用いて、ブートストラップ実行環境３１０を含むコンテナイメージをコンテナレジストリ（例えば、データストア１５０）にアップロードすることができる。コンテナビルダ３００は、ブートストラップ実行環境３１０に関連付けられるソフトウェアアプリケーション２００を識別する識別子３１４（たとえば、タグ）をブートストラップ実行環境３１０に追加することができる。識別子３１４は、その後の検索および取得を容易にすることができる。
図３Ｂを参照すると、コンテナビルダ３００は、実行段階３０２中にブートストラップ実行環境３１０を実行する。コンテナビルダ３００は、構成段階３０１（図３Ａ）中にブートストラップ実行環境３１０を構築／作成／構成した後、データストア１５０からブートストラップ実行環境３１０を（たとえば、識別子３１４を用いて）受信してもよい。いくつかの例では、コンテナビルダ３００は、構成段階３０１中にブートストラップ実行環境３１０を作成／構成すると、実行段階３０２中にブートストラップ実行環境３１０を直ちに実行する。ブートストラップ実行環境３１０は、依存関係のマニフェスト２１２を含むソフトウェアアプリケーション２００を含んでもよい。図示の例では、コンテナビルダ３００はブートストラップ実行環境３１０を実行し、コンテナビルダ３００に起動命令３１８を実行させる。起動命令３１８は、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能であるかどうかを判断することを含んでもよい。図３Ｂに示す例では、データストア１５０は、最初は、拡張された実行環境３２０を含まない。したがって、コンテナビルダ３００は、起動命令３１８を実行している間、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能ではないと判断する。例えば、コンテナビルダ３００は、識別子３１４を用いてデータストア１５０に問い合わせて、データストア１５０が関連付けられる拡張された実行環境３２０を含むかどうかを判断してもよい。識別子３１４は、ソフトウェアアプリケーション２００のバージョンに関連付けられてもよい。いくつかの例では、コンテナビルダ３００は、ブートストラップ実行環境３１０に関連付けられ（かつ構築要求１８０に含まれる）ソフトウェアアプリケーション２００のバージョン番号が、記憶された拡張された実行環境３２０に関連付けられるソ
フトウェアアプリケーション２００のバージョンと同じでない場合、拡張された実行環境３２０は利用可能ではないと判断する。
Referring to FIG. 3B,
コンテナビルダ３００が、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能ではないと判断すると、起動命令３１８は、依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張するための動作／ステップを含む。コンテナビルダ３００は、ブートストラップ実行環境３１０を拡張して、拡張された実行環境３２０を構築／作成／構成してもよい。コンテナビルダ３００は、アプリケーション依存関係３２２をインストールする（例えば、ダウンロードする、コピーする、コンパイルする）ことによってブートストラップ実行環境３１０を拡張してもよい。いくつかの例では、コンテナビルダ３００は、ソフトウェアアプリケーション２００を実行する前にアプリケーション依存関係３２２をインストールする。前述のように、コンテナビルダ３００は、依存関係のマニフェスト２１２に含まれるパッケージマネージャコマンドなどのコマンドを実行して、アプリケーション依存関係３２２を作成（例えばインストール）してもよい。いくつかの例では、コンテナビルダ３００は、ソフトウェアアプリケーション２００を実行して、アプリケーション依存関係３２２を作成する。コンテナビルダ３００は、ソフトウェアアプリケーション２００を実行して／走らせて、ソフトウェアアプリケーション２００に、サポートライブラリ、ファイル、もしくは他のアプリケーション依存関係３２２を必要とするかまたはインポートするステートメントを実行させてもよい。したがって、コンテナビルダ３００は、インポートされたアプリケーション依存関係３２２を用いてブートストラップ実行環境３１０を拡張して、拡張された実行環境３２０を作成する。コンテナビルダ３００は、ソフトウェアアプリケーション２００を実行して、アプリケーションソースコードまたはバイトコードなどの共通中間言語（ＣＩＬ）をアーキテクチャ固有の機械コードまたはバイナリコードにコンパイルすることができる。例えば、コンテナビルダ３００は、ＪＩＴ実行エンジンにおいてソフトウェアアプリケーション２００を実行してもよい。ＪＩＴエンジンは、ソフトウェアアプリケーション２００のモジュールが最初にロードまたはアクセスされるときに、ソフトウェアアプリケーション２００のモジュールを、効率的な機械コードを含むＪＩＴコンパイルされたモジュールにコンパイルしてもよい。いくつかの実現例では、コンテナビルダ３００は、ソフトウェアアプリケーション２００を実行する前にいくつかのアプリケーション依存関係３２２を作成し、ソフトウェアアプリケーション２００を実行／実行することによって他のアプリケーション依存関係３２２を作成する。コンテナビルダ３００は、アプリケーション依存関係３２２を動的に作成するために他の技法を用いてもよい。
When
動的コンテンツ（例えば、アプリケーション依存関係３２２）は、アーキテクチャ固有であってもよい。すなわち、アプリケーション依存関係３２２は、アプリケーション依存関係３２２を作成するためにコンテナビルダ３００によって実行されるブートストラップ実行環境３１０に関連付けられる特定のプロセッサアーキテクチャおよび／または特定のオペレーティングシステムバージョンと互換性があってもよい。例えば、アプリケーション依存関係３２２は、効率的なアーキテクチャ固有の機械コードもしくはバイナリコード、および／もしくはＪＩＴ実行エンジンによって作成される、実行時にコンパイルされるモジュールを含むファイルまたはモジュールを含んでもよい。いくつかの実現例では、コンテナビルダ３００が、動的に作成されたアプリケーション依存関係３２２を含むようにブートストラップ実行環境３１０を拡張した後、拡張された実行環境３２０は、もはや、アプリケーション依存関係３２２を作成することに関連付けられる起動命令３１８のステップを実行する必要はない。したがって、コンテナビルダ３００は、拡張された実行環境３２０から起動命令３１８を省くことができる。コンテナビルダ３００は、拡張された実行環境３２０を作成したブートストラップ実行環境３１０に関連付けられるオペレーティングシステムバージョンおよび／またはブートストラップ実行環境３１０に関連付けられるプロセッサアーキテクチャを示すメタデータ３２４を、拡張された実行環境３２０に追
加してもよい。いくつかの例では、アーキテクチャ固有コンテンツ（たとえば、アプリケーション依存関係３２２）は、ブートストラップ実行環境３１０に関連付けられるオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャを示すメタデータを含む。コンテナ構築は、拡張された実行環境３２０を作成／構成するために他の技法を用いてもよい。
Dynamic content (eg, application dependencies 322) may be architecture-specific. That is,
図３Ｂはまた、コンテナビルダ３００が、拡張された実行環境３２０をデータストア１５０に記憶することを含む起動命令３１８のさらなるステップを実行するのを示す。いくつかの実現例では、コンテナビルダ３００は、ツーリング３１６を用いて、拡張された実行環境３２０を記憶する。例えば、データストア１５０は、コンテナレジストリを含んでもよい。コンテナビルダ３００は、ツーリング３１６を用いて、拡張された実行環境３２０を含むコンテナイメージを作成することができる。拡張された実行環境３２０は、ブートストラップ実行環境３１０のコンテンツ（たとえば、静的コンテンツ）と、コンテナビルダ３００によって作成されたアプリケーション依存関係３２２（動的コンテンツ）とを含んでもよい。コンテナビルダ３００は、さらに、ツーリング３１６を用いて、拡張された実行環境３２０を含むコンテナイメージをコンテナレジストリ（例えば、データストア１５０）にアップロードしてもよい。起動命令３１８は、検索および取得を容易にするために、拡張された実行環境３２０をタグ付けすること、注釈付けすること、インデックス付けすること、または別様に識別することをさらに含んでもよい。例えば、起動命令３１８は、拡張された実行環境３２０に識別子３１４を追加することを含んでもよい。例えば、識別子３１４は、データストア１５０が、ソフトウェアアプリケーション２００のバージョンに関連付けられる拡張された実行環境３２０を含むことを示してもよい。コンテナビルダ３００は、拡張された実行環境３２０を実行する遠隔システム１４０のオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャなどの、拡張された実行環境３２０の態様を示すために、メタデータ３２４を拡張された実行環境３２０に追加することができる。例えば、コンテナビルダ３００は、メタデータ３２４を用いて、拡張された実行環境３２０に「タグ」または注釈を付けることができる。一例では、コンテナビルダ３００は、拡張された実行環境３２０が「x86_64」アーキテクチャ上で実行されるUbuntu LINUXシステム上で作成されたことを示すメタデータ３２４を、拡張された実行環境３２０にタグ付けする。他のメタデータ３２４の規約またはコンテンツも同様に使用されてもよい。
FIG. 3B also shows
図３Ｃを参照すると、コンテナビルダ３００は、ブートストラップ実行環境３１０と拡張された実行環境３２０との間の差分をデータストア１５０に記憶してもよい。すなわち、コンテナビルダ３００は、例えば、データストア１５０内の空間を節約するために、動的に作成されたアプリケーション依存関係３２２のみをデータストア１５０内に記憶してもよい。ここで、拡張された実行環境のための動的に作成されたアプリケーション依存関係３２２は、データストア１５０に記憶されてもよく、関連付けられる識別子３１４（例えば、アプリケーション依存関係の、後の検索および取得のため）および／または関連付けられるメタデータ３２４（例えば、動的に作成されたアプリケーション依存関係に関連付けられる拡張された実行環境３２０を実行するための遠隔システム１４０のオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャなどの態様を示すため）を含んでもよい。たとえば、起動命令３１８は、実行段階３０２の間に更新または動的に作成されたアプリケーション依存関係３２２を識別することによってブートストラップ実行環境３１０と拡張された実行環境３２０との間の差を判断するための内観を含んでもよい。すなわち、コンテナビルダ３００は、ブートストラップ実行環境３１０を拡張することによって追加または修正されたファイルに対応するアプリケーション依存関係３２２を判断／識別してもよい。コンテナビルダ３００は、ブートストラップ実行環境３１０に含まれるツーリング３１６を用いて、更新されたファイルのセット、すなわち、コンテナビルダ３００が動的コンテンツ（たとえば、アプリケーション依存関係３２２）を追加
することによってブートストラップ環境３１０を拡張したときに追加または修正されたファイルを識別してもよい。いくつかの実現例では、コンテナビルダ３００は、標準的なオペレーティングシステムコマンドまたはプログラミングインターフェイスを用いて、依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張することによって追加または修正されたファイルを判断する。例えば、コンテナビルダ３００は、UNIX（登録商標）「find」コマンドを用いて、変更されたファイルを再帰的に検索することができる。コンテナビルダ３００は、ブートストラップ実行環境３１０に対する拡張を判断するために他の技法を用いることができる。いくつかの実現例では、コンテナビルダ３００は、最近追加または修正されたファイルに基づいてUNIX（登録商標）「tar」ファイ
ルを作成する。コンテナビルダ３００は、「tar」ファイルを拡張された実行環境３２０
としてデータストア１５０に記憶し、「tar」ファイルをタグ付けして、拡張された実行
環境３２０が、完全に実行可能な拡張された実行環境３２０ではなく、アプリケーション依存関係３２２のみを含む差分を含むことを示してもよい。その後ブートストラップ実行環境３１０が実行されると、コンテナビルダ３００は、データストア１５０から受信される「tar」ファイル内のアプリケーション依存関係３２２に基づいてブートストラップ実
行環境３１０を拡張してもよい。
Referring to FIG. 3C,
, and tag the "tar" file so that the
関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能ではないとコンテナビルダが判断した図３Ｂに示される例とは対照的に、図３Ｄは、コンテナビルダ３００が、起動命令３１８を実行している間に、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能である（例えば、データストア１５０は、関連付けられる拡張された実行環境３２０を含む）、と判断するのを示す。いくつかの例においては、コンテナビルダ３００は、拡張された実行環境３２０を以前に作成しており、データストア１５０に記憶していた。以前に作成された実行環境３２０は、拡張された実行環境３２０をソフトウェアアプリケーション２００のバージョンと関連付ける識別子３１４を含んでもよい。コンテナビルダ３００は、拡張された実行環境３２０がソフトウェアアプリケーション２００の好適なバージョン（例えば、バージョン番号）を含むことを示す「タグ」（例えば、識別子３１４）を、拡張された実行環境３２０が含む場合に、拡張された実行環境３２０は利用可能である、と判断してもよい。いくつかの例では、バージョン番号は、メジャーバージョン番号およびマイナーバージョン番号を含む。これらの例では、コンテナビルダ３００は、ブートストラップ実行環境３１０に関連付けられるソフトウェアアプリケーション２００のメジャーソフトウェアバージョン番号が、記憶される拡張された実行環境３２０に関連付けられるソフトウェアアプリケーション２００のメジャーバージョンと同じである場合、関連付けられる拡張された実行環境３２０はデータストア１５０から利用可能である、と判断してもよい。
In contrast to the example shown in FIG. 3B, where the container builder determined that the associated
関連付けられる拡張された実行環境３２０は、拡張された実行環境３２０を構築するために使用される遠隔システム１４０のオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャなどの、拡張された実行環境３２０の態様を示すメタデータ３２４を含んでもよい。拡張された実行環境３２０は、メタデータ３２４を含む注釈またはタグを含んでもよい。コンテナビルダ３００は、拡張された実行環境３２０を構築した遠隔システム１４０のオペレーティングシステムバージョンおよび／またはプロセッサアーキテクチャなど、拡張された実行環境３２０の態様が好適であることを示すメタデータ３２４を拡張された実行環境３２０が含む場合、拡張された実行環境３２０は利用可能である、と判断してもよい。たとえば、コンテナビルダ３００は、メタデータ３２４がブートストラップ実行環境３１０と互換性がない（例えば、ブートストラップ実行環境３１０を実行する遠隔システム１４０とは互換性がない）プロセッサアーキテクチャを示すとき、拡張された実行環境３２０はデータストア１５０から利用可能ではない、と判断してもよい。この例では、コンテナビルダ３００は、図３Ｂを参照して上述したように、依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張することによ
って起動命令３１８を実行することに進むことになる。代替として、コンテナビルダ３００は、拡張された実行環境３２０に関連付けられるメタデータ３２４が、ブートストラップ実行環境３１０と互換性があるオペレーティングシステムバージョンおよびプロセッサアーキテクチャを示すとき、拡張された実行環境３２０はデータストア１５０から利用可能である、と判断してもよい。コンテナビルダ３００は、他の技法を用いて、拡張された実行環境３２０がデータストア１５０から利用可能であるかどうかを判断してもよい。コンテナビルダ３００は、ブートストラップ実行環境３１０に含まれるツーリング３１６を用いて、関連付けられる拡張された実行環境３２０が利用可能であるかどうかを判断してもよい。例えば、データストア１５０は、コンテナレジストリを含んでもよい。この例では、ツーリング３１６は、コンテナレジストリ（例えば、データストア１５０）内で好適な拡張された実行環境３２０を検索することが可能であってもよい。ツールは、ソフトウェアバージョン識別子３１４および／またはメタデータ３２４を用いて、または好適な拡張された実行環境３２０がデータストア１５０から利用可能であることを判断するために他の技法を用いて、拡張された実行環境３２０を検索してもよい。
The associated
図示の例では、コンテナビルダ３００が、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能である、と判断すると、コンテナビルダ３００は、拡張された実行環境３２０をデータストア１５０から受信し、拡張された実行環境３２０に基づいてブートストラップ実行環境３１０を拡張する。コンテナビルダ３００は、データストア１５０からソフトウェアアプリケーション２００を含む拡張された実行環境３２０をダウンロードすることによって、拡張された実行環境３２０を受信し、静的コンテンツのみを有するブートストラップ実行環境３１０の代わりに、動的コンテンツ（たとえば、アプリケーション依存関係３２２）を有するダウンロードされた拡張された実行環境３２０を単に実行することによって、ブートストラップ実行環境３１０を拡張してもよい。別の例では、ダウンロードされた拡張された実行環境３２０を実行する代わりに、コンテナビルダ３００は、ダウンロードされた拡張された実行環境３２０に含まれるアプリケーション依存関係３２２に基づいてブートストラップ実行環境３１０を拡張する。例えば、コンテナビルダ３００は、ツーリング３１６を用いて、アプリケーション依存関係３２２をデータストア１５０内の関連付けられる拡張された実行環境３２０からブートストラップ実行環境３１０にダウンロードおよびインストールしてもよい。拡張された実行環境３２０に基づいてブートストラップ実行環境３１０を拡張することは、依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張することよりも効率的であり得る。
In the illustrated example, when
図３Ｃに関して上述したように、コンテナビルダ３００は、ブートストラップ実行環境３１０と拡張された実行環境３２０との間の差分（すなわち、動的に作成されたアプリケーション依存関係３２２）をデータストア１５０に記憶してもよい。図３Ｅを参照すると、コンテナビルダ３００が、関連付けられる拡張された実行環境３２０がデータストア１５０から利用可能であるかどうかについて起動命令３１８を実行するとき、コンテナビルダ３００は、好適な差分がデータストア１５０から利用可能である、と判断してもよい。ここで、差分は、例えばブートストラップ実行環境３１０におけるソフトウェアアプリケーション２００の以前の実行中に動的に作成され、コンパイルされ、ダウンロードされ、またはそうでなければマーシャリングされたアプリケーション依存関係３２２を含むコンテナイメージを含んでもよい。前述のように、コンテナビルダ３００は、受信したブートストラップ実行環境３１０の識別子３１４を用いて、データストア１５０内のアプリケーション依存関係３２２を含む関連付けられる差分を検索してもよい。例えば、コンテナビルダ３００は、差分が遠隔システム１４０と同じオペレーティングシステムバージョンおよび／または同じプロセッサアーキテクチャを用いて生成されたことを示す「タグ」（例えば、識別子３１４）を、差分が含むとき、差分はデータストア１５０から利用可能である、と判断してもよい。いくつかの例では、コンテナビルダ３００は、アプリケーション
依存関係３２２を含むUNIX（登録商標）「tar」ファイルを含むコンテナイメージ（たと
えば、拡張された実行環境３２０）をデータストア１５０から受信する。コンテナビルダ３００は、データストア１５０から受信されたコンテナイメージに含まれるアプリケーション依存関係３２２に基づいてブートストラップ実行環境３１０を拡張してもよい。コンテナビルダ３００は、ツーリング３１６を用いて、データストア１５０からコンテナイメージをダウンロードし、アプリケーション依存関係３２２をインストールすることによってブートストラップ実行環境３１０を拡張してもよい。例えば、コンテナビルダ３００は、「tar」ファイルからアプリケーション依存関係３２２を抽出してもよい。コンテナビ
ルダ３００は、拡張された実行環境３２０に基づいてブートストラップ実行環境３１０を拡張するために他の技法を用いてもよい。
As discussed above with respect to FIG. 3C,
いくつかの例では、実行段階３０２中にブートストラップ実行環境３１０を拡張した後、コンテナビルダ３００はソフトウェアアプリケーション２００を実行する。あるいは、コンテナビルダ３００は、ブートストラップ実行環境３１０内でソフトウェアアプリケーション２００を実行して、アプリケーション依存関係３２２を作成（すなわち、拡張された実行環境３２０を作成）してもよい。この例では、ソフトウェアアプリケーション２００は、拡張された実行環境３２０において続行してもよい。言い換えれば、起動命令３１８のステップ／動作の順序、例えば、拡張された実行環境３２０を作成するステップ、およびソフトウェアアプリケーション２００を実行するステップは、示される例から変更されてもよい。
In some examples, after extending the
図４は、アプリケーション実行環境においてソフトウェアアプリケーション２００を実行する方法４００のための動作の例示的な構成のフローチャートを提供する。ソフトウェアアプリケーションは、JavaScriptアプリケーション、Pythonアプリケーション、またはRubyアプリケーションのうちの１つであってもよい。動作４０２において、方法４００は、データ処理ハードウェア１４４（例えば、コンテナビルダ３００）において、データストア１５０からブートストラップ実行環境３１０を受信することを含む。ブートストラップ実行環境３１０はソフトウェアアプリケーション２００を含み、ソフトウェアアプリケーション２００は依存関係のマニフェスト２１２を含む。いくつかの実現例では、データストア１５０は、ブートストラップ実行環境３１０を含むコンテナイメージを記憶するコンテナレジストリを含む。
FIG. 4 provides a flowchart of an example arrangement of operations for a
動作４０４において、方法４００は、データ処理ハードウェア１４４が、ブートストラップ実行環境３１０を実行して、データ処理ハードウェア１４４に（たとえば、ブートストラップ実行環境３１０に関連付けられる起動命令３１８を実行することによって）動作を実行させることを含む。動作４０６において、方法４００は、拡張された実行環境３２０がデータストア１５０から利用可能であるかどうかを判断することを含む。たとえば、拡張された実行環境３２０がデータストア１５０から利用可能であるかどうかを判断することは、拡張された実行環境３２０が、ソフトウェアアプリケーション２００、ブートストラップ実行環境３２０に関連付けられるオペレーティングシステムバージョン、またはブートストラップ実行環境３２０に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つと互換性があるかどうかを判断することを含んでもよい。
At act 404,
拡張された実行環境３２０がデータストア１５０から利用可能である場合、方法４００は、動作４０８において、拡張された実行環境３２０をデータストア１５０から受信することを含む。データストア１５０から拡張された実行環境３２０を受信した後、方法４００は、動作４１０において、拡張された実行環境３２０に基づいてブートストラップ実行環境３１０を拡張することを含む。たとえば、ブートストラップ実行環境３１０を拡張することは、拡張された実行環境３２０に基づいてアプリケーション依存関係３２２をインストールすることを含んでもよい。アプリケーション依存関係３２２は、サポートライブ
ラリ、アーキテクチャ固有のバイナリモジュール、または実行時にコンパイルされるモジュールのうちの少なくとも１つを含んでもよい。拡張された実行環境３２０に基づいてブートストラップ実行環境３１０を拡張した後、方法４００は、動作４１６において、ソフトウェアアプリケーション２００を実行することを含む。
If the
拡張された実行環境３２０がデータストア１５０から利用可能ではない場合、方法４００は、動作４１２において、拡張された実行環境３２０を作成するために、依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張することを含む。拡張された実行環境３２０を作成するために依存関係のマニフェスト２１２に基づいてブートストラップ実行環境３１０を拡張した後、方法４００は、動作４１４において、拡張された実行環境３２０をデータストア１５０に記憶することを含む。いくつかの実現例では、方法４００は、データ処理ハードウェア１４４が、データストア１５０内の拡張された実行環境３２０に注釈を付けて、ソフトウェアアプリケーション２００のバージョン、拡張された実行環境３２０に関連付けられるオペレーティングシステムバージョン、または拡張された実行環境３２０に関連付けられるプロセッサアーキテクチャのうちの少なくとも１つを示すことも含む。拡張された実行環境３２０をデータストア１５０に記憶した後、方法４００は、動作４１６において、ソフトウェアアプリケーション２００を実行することを含む。
If the
図５は、本明細書で説明するシステムおよび方法（たとえば、方法４００）を実施するために使用され得る例示的なコンピューティングデバイス５００の概略図である。コンピューティングデバイス５００は、ラップトップ、デスクトップ、ワークステーション、携帯情報端末、サーバ、ブレードサーバ、メインフレーム、および他の適切なコンピュータなど、様々な形態のデジタルコンピュータを表すことが意図されている。本明細書に示された構成要素、それらの接続および関係、ならびにそれらの機能は、例示的なものにすぎず、本文書に記載および／または特許請求される本発明の実現例を限定するものではない。
FIG. 5 is a schematic diagram of an
コンピューティングデバイス５００は、プロセッサ５１０（データ処理ハードウェアとも呼ばれる）と、メモリ５２０（メモリハードウェアとも呼ばれる）と、ストレージデバイス５３０と、メモリ５２０および高速拡張ポート５５０に接続する高速インターフェイス／コントローラ５４０と、低速バス５７０およびストレージデバイス５３０に接続する低速インターフェイス／コントローラ５６０とを含む。構成要素５１０，５２０，５３０，５４０，５５０，および５６０の各々は、様々なバスを用いて相互接続され、共通のマザーボード上に、または必要に応じて他の方法で実装されてもよい。プロセッサ５１０は、高速インターフェイス５４０に結合されたディスプレイ５８０などの外部入力／出力装置上にグラフィカルユーザインターフェイス（ＧＵＩ）のためのグラフィカル情報を表示するために、メモリ５２０またはストレージデバイス５３０に記憶された命令を含む、コンピューティングデバイス５００内で実行するための命令を処理することができる。他の実現例では、複数のプロセッサおよび／または複数のバスが、必要に応じて、複数のメモリおよびメモリのタイプとともに用いられてもよい。また、複数のコンピューティングデバイス５００が接続されてもよく、各デバイスは、（たとえば、サーババンクとして、ブレードサーバのグループとして、またはマルチプロセッサシステムとして）必要な動作の部分を提供する。
メモリ５２０は、コンピューティングデバイス５００内で情報を非一時的に記憶する。メモリ５２０は、コンピュータ可読媒体、揮発性メモリユニット、または不揮発性メモリユニットであってもよい。非一時的メモリ５２０は、コンピューティングデバイス５００による使用のためにプログラム（例えば、命令のシーケンス）またはデータ（例えば、プログラム状態情報）を一時的または永続的に記憶するために用いられる物理デバイスであ
ってもよい。不揮発性メモリの例は、フラッシュメモリおよび読み出し専用メモリ（ＲＯＭ）／プログラマブル読み出し専用メモリ（ＰＲＯＭ）／消去可能プログラマブル読み出し専用メモリ（ＥＰＲＯＭ）／電子的消去可能プログラマブル読み出し専用メモリ（ＥＥＰＲＯＭ）（たとえば、ブートプログラムなどのファームウェアに典型的に用いられる）を含むが、これらに限定されない。揮発性メモリの例には、ランダムアクセスメモリ（ＲＡＭ）、ダイナミックランダムアクセスメモリ（ＤＲＡＭ）、スタティックランダムアクセスメモリ（ＳＲＡＭ）、相変化メモリ（ＰＣＭ）、およびディスクまたはテープが含まれるが、これらに限定されない。
ストレージデバイス５３０は、コンピューティングデバイス５００のための大容量ストレージを提供することができる。いくつかの実現例では、ストレージデバイス５３０はコンピュータ可読媒体である。様々な異なる実現例では、ストレージデバイス５３０は、フロッピー（登録商標）ディスクデバイス、ハードディスクデバイス、光ディスクデバイス、もしくはテープデバイス、フラッシュメモリもしくは他の同様のソリッドステートメモリデバイス、またはストレージエリアネットワークもしくは他の構成におけるデバイスを含むデバイスのアレイであってもよい。さらなる実現例では、コンピュータプログラム製品は、情報担体において有形に具現化される。コンピュータプログラム製品は、実行されると上述の方法などの１つ以上の方法を実行する命令を含む。情報担体は、メモリ５２０、ストレージデバイス５３０、またはプロセッサ５１０上のメモリなどのコンピュータ可読媒体または機械可読媒体である。
高速コントローラ５４０は、コンピューティングデバイス５００のための帯域幅集約型動作を管理し、低速コントローラ５６０は、より低い帯域幅集約型動作を管理する。そのような役割の割り当ては、例示的なものにすぎない。いくつかの実現例では、高速コントローラ５４０は、メモリ５２０、ディスプレイ５８０（たとえば、グラフィックスプロセッサまたはアクセラレータを通して）、および様々な拡張カード（図示せず）を受け入れ得る高速拡張ポート５５０に結合される。いくつかの実現例では、低速コントローラ５６０は、ストレージデバイス５３０および低速拡張ポート５９０に結合される。低速拡張ポート５９０は、様々な通信ポート（たとえば、ＵＳＢ、Bluetooth（登録商標）、イーサ
ネット（登録商標）、無線イーサネット（登録商標））を含んでもよく、キーボード、ポインティングデバイス、スキャナ、またはスイッチもしくはルータなどのネットワーキングデバイスなどの１つ以上の入力／出力装置に、たとえばネットワークアダプタを介して結合されてもよい。
A
コンピューティングデバイス５００は、図に示されるように、いくつかの異なる形態で実現されてもよい。例えば、標準サーバ５００ａとして、もしくはそのようなサーバ５００ａのグループ内で複数回、ラップトップコンピュータ５００ｂとして、またはラックサーバシステム５００ｃの一部として実装されてもよい。
本明細書に記載のシステムおよび技術のさまざまな実現例は、デジタル電子および／もしくは光学回路系、集積回路系、特別に設計されたＡＳＩＣ（特定用途向け集積回路）、コンピュータハードウェア、ファームウェア、ソフトウェア、ならびに／またはそれらの組合せで実現されてもよい。これらのさまざまな実現例は、少なくとも１つのプログラマブルプロセッサを含むプログラマブルシステム上で実行可能および／または解釈可能な１つ以上のコンピュータプログラムにおける実現例を含んでいてもよく、当該プロセッサは専用であっても汎用であってもよく、ストレージシステム、少なくとも１つの入力装置、および少なくとも１つの出力装置からデータおよび命令を受信するように、かつこれらにデータおよび命令を送信するように結合されている。 Various implementations of the systems and techniques described herein include digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (Application Specific Integrated Circuits), computer hardware, firmware, software. , and/or a combination thereof. These various implementations may include implementation in one or more computer programs executable and/or interpretable on a programmable system that includes at least one programmable processor, where the processor is dedicated and The device may also be general-purpose and coupled to receive data and instructions from and to transmit data and instructions to the storage system, at least one input device, and at least one output device.
これらのコンピュータプログラム（プログラム、ソフトウェア、ソフトウェアアプリケ
ーションまたはコードとしても知られる）は、プログラム可能なプロセッサのための機械命令を含み、高水準手続き型および／もしくはオブジェクト指向型プログラミング言語で、ならびに／またはアセンブリ／機械言語で実現することができる。本明細書で使用されるとき、用語「機械可読媒体」および「コンピュータ可読媒体」は、機械命令を機械可読信号として受信する機械可読媒体を含む、機械命令および／またはデータをプログラマブルプロセッサに提供するよう使用される任意のコンピュータプログラム製品、非一時的コンピュータ可読媒体、装置および／またはデバイス（例えば、磁気ディスク、光ディスク、メモリ、プログラマブルロジックデバイス（ＰＬＤ））を指す。「機械可読信号」という用語は、機械命令および／またはデータをプログラマブルプロセッサに提供するために使用される任意の信号を指す。
These computer programs (also known as programs, software, software applications or code) contain machine instructions for a programmable processor and are written in high-level procedural and/or object-oriented programming languages and/or in assembly. /Can be realized using machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" include a machine-readable medium that receives machine instructions as a machine-readable signal to provide machine instructions and/or data to a programmable processor. Refers to any computer program product, non-transitory computer readable medium, apparatus and/or device (eg, magnetic disk, optical disk, memory, programmable logic device (PLD)) used as such. The term "machine readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
本明細書に記載されるプロセスおよび論理フローは、入力データを操作し出力を生成することにより機能を実行するよう１つ以上のプログラマブルプロセッサが１つ以上のコンピュータプログラムを実行することによって実行され得る。プロセスおよび論理フローはまた、専用論理回路、たとえば、ＦＰＧＡ（フィールドプログラマブルゲートアレイ）またはＡＳＩＣ（特定用途向け集積回路）によって実行され得る。コンピュータプログラムの実行に好適であるプロセッサは、例として、汎用マイクロプロセッサおよび特殊目的マイクロプロセッサの両方、ならびに任意の種類のデジタルコンピュータの任意の１つ以上のプロセッサを含む。概して、プロセッサは、読み取り専用メモリもしくはランダムアクセスメモリまたは両方から命令およびデータを受信することになる。コンピュータの必須要素は、命令を実行するためのプロセッサ、ならびに命令およびデータを記憶するための１つ以上のメモリデバイスである。一般に、コンピュータはさらに、たとえば磁気ディスク、光磁気ディスクまたは光ディスクといった、データを格納するための１つ以上の大容量記憶装置を含むか、当該１つ以上の大容量記憶装置からデータを受取るかもしくは当該１つ以上の大容量記憶装置にデータを転送するよう作動的に結合されるか、またはその両方を行うことにもなる。しかしながら、コンピュータは、そのようなデバイスを有する必要はない。コンピュータプログラム命令およびデータを記憶するのに好適なコンピュータ可読媒体は、例として、半導体メモリデバイス、たとえば、ＥＰＲＯＭ、ＥＥＰＲＯＭ、およびフラッシュメモリデバイス；磁気ディスク、たとえば内蔵ハードディスクまたはリムーバブルディスク；光磁気ディスク；およびＣＤ ＲＯＭおよびＤＶＤ－ＲＯＭディスクを含む、あらゆる形態の不揮発性メモリ、媒体、ならびにメモリデバイスを含む。プロセッサおよびメモリは、特殊目的論理回路によって補足され得るか、または特殊目的論理回路に組み込まれ得る。 The processes and logic flows described herein may be performed by one or more programmable processors executing one or more computer programs to perform functions by manipulating input data and generating output. . The processes and logic flows may also be performed by dedicated logic circuits, such as FPGAs (Field Programmable Gate Arrays) or ASICs (Application Specific Integrated Circuits). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any type of digital computer. Generally, a processor will receive instructions and data from read-only memory and/or random access memory. The essential elements of a computer are a processor for executing instructions, and one or more memory devices for storing instructions and data. Generally, the computer also includes one or more mass storage devices for storing data, or receiving data from, or It may also be operatively coupled to transfer data to the one or more mass storage devices, or both. However, a computer does not need to have such a device. Computer readable media suitable for storing computer program instructions and data include, by way of example, semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks or removable disks; magneto-optical disks; and Includes all forms of non-volatile memory, media, and memory devices, including CD ROM and DVD-ROM discs. The processor and memory may be supplemented by or incorporated into special purpose logic circuits.
ユーザとの対話を提供するために、本開示の１つ以上の局面は、たとえばＣＲＴ（陰極線管）、ＬＣＤ（液晶ディスプレイ）モニタまたはタッチスクリーンといったユーザに対して情報を表示するための表示装置と、選択肢的にキーボードおよびたとえばマウス、トラックボールといったユーザがコンピュータに入力を提供可能であるポインティングデバイスとを有するコンピュータ上で実現され得る。他の種類のデバイスを用いて、ユーザとの対話を提供することもでき、たとえば、ユーザに提供されるフィードバックは、任意の形態の感覚フィードバック、たとえば、視覚フィードバック、聴覚フィードバック、または触覚フィードバックであり得、ユーザからの入力は、音響入力、音声入力、または触覚入力を含む、任意の形態で受信することができる。加えて、コンピュータは、ユーザが用いるデバイスにドキュメントを送信し、ユーザが用いるデバイスからドキュメントを受信することによって、たとえば、ユーザのクライアントデバイス上のウェブブラウザから受信された要求に応答してそのウェブブラウザにウェブページを送信することによって、ユーザと対話し得る。 To provide user interaction, one or more aspects of the present disclosure may include a display device, such as a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen, for displaying information to the user. , optionally having a keyboard and pointing device, such as a mouse, trackball, etc., by which a user can provide input to the computer. Other types of devices may also be used to provide user interaction, for example, the feedback provided to the user may be any form of sensory feedback, such as visual, auditory, or tactile feedback. Input from the user can be received in any form, including acoustic, audio, or tactile input. In addition, the computer may respond to a request received from a web browser on a user's client device by transmitting the document to the device used by the user and receiving the document from the device used by the user, such as by sending the document to the device used by the user and receiving the document from the device used by the user. may interact with the user by submitting a web page to the user.
いくつかの実現例について説明した。それにもかかわらず、本開示の精神および範囲から逸脱することなく、様々な修正がなされ得ることが理解されるであろう。したがって、
他の実現例は特許請求の範囲内にある。
Several implementation examples have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. therefore,
Other implementations are within the scope of the claims.
Claims (20)
データ処理ハードウェア（１４４）において、データストア（１５０）からブートストラップ実行環境（３１０）を受信することを含み、前記ブートストラップ実行環境（３１０）はソフトウェアアプリケーション（２００）を含み、前記ソフトウェアアプリケーション（２００）は依存関係のマニフェスト（２１２）を含み、前記方法はさらに、
前記データ処理ハードウェア（１４４）が、前記ブートストラップ実行環境（３１０）を実行し、前記データ処理ハードウェア（１４４）に、動作を実行させることを含み、前記動作は、
拡張された実行環境（３２０）が前記データストア（１５０）から利用可能であるかどうかを判断することと、
前記拡張された実行環境（３２０）が前記データストア（１５０）から利用可能である場合、
前記拡張された実行環境（３２０）を前記データストア（１５０）から受信することと、
前記拡張された実行環境（３２０）に基づいて前記ブートストラップ実行環境（３１０）を拡張することと、
前記ソフトウェアアプリケーション（２００）を実行することと、
前記拡張された実行環境（３２０）が前記データストア（１５０）から利用可能ではない場合、
前記依存関係のマニフェスト（２１２）に基づいて前記ブートストラップ実行環境（３１０）を拡張して、前記拡張された実行環境（３２０）を作成することと、
前記拡張された実行環境（３２０）を前記データストア（１５０）に記憶することと、
前記ソフトウェアアプリケーション（２００）を実行することとを含む、方法。 A method (400), comprising:
at data processing hardware (144), including receiving a bootstrap execution environment (310) from a data store (150), said bootstrap execution environment (310) including a software application (200); 200) includes a dependency manifest (212), the method further comprising:
The data processing hardware (144) executes the bootstrap execution environment (310) and causes the data processing hardware (144) to perform operations, the operations comprising:
determining whether an extended execution environment (320) is available from the data store (150);
if the extended execution environment (320) is available from the data store (150);
receiving the expanded execution environment (320) from the data store (150);
extending the bootstrap execution environment (310) based on the extended execution environment (320);
executing the software application (200);
if said extended execution environment (320) is not available from said data store (150);
extending the bootstrap execution environment (310) based on the dependency manifest (212) to create the extended execution environment (320);
storing the extended execution environment (320) in the data store (150);
and executing the software application (200).
前記データ処理ハードウェア（１４４）において、前記ソフトウェアアプリケーション（２００）のための構築要求（１８０）を受信することと、
前記データ処理ハードウェア（１４４）が、前記ソフトウェアアプリケーション（２００）に基づいて前記ブートストラップ実行環境（３１０）を構成することと、
前記データ処理ハードウェア（１４４）が、前記ブートストラップ実行環境（３１０）を前記データストア（１５０）に記憶することとを含む、請求項１～３のいずれか１項に記載の方法（４００）。 moreover,
receiving, at the data processing hardware (144), a build request (180) for the software application (200);
the data processing hardware (144) configuring the bootstrap execution environment (310) based on the software application (200);
The method (400) of any preceding claim, wherein the data processing hardware (144) comprises storing the bootstrap execution environment (310) in the data store (150). .
１０）を拡張して、前記拡張された実行環境（３２０）を作成することの後に、更新されたファイルのセットを識別することをさらに含み、前記更新されたファイルのセットは、前記依存関係のマニフェスト（２１２）に基づいて前記ブートストラップ実行環境（３１０）を拡張することによって追加または修正されたファイルを含む、請求項１～４のいずれか１項に記載の方法（４００）。 The bootstrap execution environment (3) is configured based on the dependency manifest (212).
10) further comprising identifying a set of updated files after creating the extended execution environment (320), the set of updated files including: The method (400) of any preceding claim, comprising files added or modified by extending the bootstrap execution environment (310) based on a manifest (212).
データ処理ハードウェア（１４４）と、
前記データ処理ハードウェア（１４４）と通信するメモリハードウェア（１４６）とを備え、前記メモリハードウェア（１４６）は、前記データ処理ハードウェア（１４４）上で実行されると前記データ処理ハードウェア（１４４）に動作を実行させる命令を記憶し、前記動作は、
データストア（１５０）からブートストラップ実行環境（３１０）を受信することを含み、前記ブートストラップ実行環境（３１０）はソフトウェアアプリケーション（２００）を含み、前記ソフトウェアアプリケーション（２００）は依存関係のマニフェスト（２１２）を含み、前記動作はさらに、
前記ブートストラップ実行環境（３１０）を実行し、前記データ処理ハードウェア（１４４）にさらなる動作を実行させることを含み、前記さらなる動作は、
拡張された実行環境（３２０）が前記データストア（１５０）から利用可能であるかどうかを判断することと、
前記拡張された実行環境（３２０）が前記データストア（１５０）から利用可能である場合、
前記拡張された実行環境（３２０）を前記データストア（１５０）から受信することと、
前記拡張された実行環境（３２０）に基づいて前記ブートストラップ実行環境（３１０）を拡張することと、
前記ソフトウェアアプリケーション（２００）を実行することと、
前記拡張された実行環境（３２０）が前記データストア（１５０）から利用可能ではない場合、
前記依存関係のマニフェスト（２１２）に基づいて前記ブートストラップ実行環境（３
１０）を拡張して、前記拡張された実行環境（３２０）を作成することと、
前記拡張された実行環境（３２０）を前記データストア（１５０）に記憶することと、
前記ソフトウェアアプリケーション（２００）を実行することとを含む、システム。 A system (100),
data processing hardware (144);
memory hardware (146) in communication with said data processing hardware (144), said memory hardware (146), when executed on said data processing hardware (144), communicating with said data processing hardware (144); 144) stores an instruction for executing an operation, and the operation is:
receiving a bootstrap execution environment (310) from a data store (150), said bootstrap execution environment (310) including a software application (200), said software application (200) having a dependency manifest (212); ), the operation further comprising:
executing the bootstrap execution environment (310) and causing the data processing hardware (144) to perform further operations, the further operations comprising:
determining whether an extended execution environment (320) is available from the data store (150);
if the extended execution environment (320) is available from the data store (150);
receiving the expanded execution environment (320) from the data store (150);
extending the bootstrap execution environment (310) based on the extended execution environment (320);
executing the software application (200);
if said extended execution environment (320) is not available from said data store (150);
The bootstrap execution environment (3) is configured based on the dependency manifest (212).
10) to create the extended execution environment (320);
storing the extended execution environment (320) in the data store (150);
executing said software application (200).
前記ソフトウェアアプリケーション（２００）のための構築要求（１８０）を受信することと、
前記ソフトウェアアプリケーション（２００）に基づいて前記ブートストラップ実行環境（３１０）を構成することと、
前記ブートストラップ実行環境（３１０）を前記データストア（１５０）に記憶することとを含む、請求項１１～１３のいずれか１項に記載のシステム（１００）。 The operation further includes:
receiving a build request (180) for the software application (200);
configuring the bootstrap execution environment (310) based on the software application (200);
The system (100) of any one of claims 11 to 13, comprising: storing the bootstrap execution environment (310) in the data store (150).
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/677,805 | 2019-11-08 | ||
US16/677,805 US11669334B2 (en) | 2019-11-08 | 2019-11-08 | Just-in-time containers |
PCT/US2020/059555 WO2021092502A1 (en) | 2019-11-08 | 2020-11-06 | Just-in-time containers |
JP2022526203A JP7311710B2 (en) | 2019-11-08 | 2020-11-06 | runtime container |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022526203A Division JP7311710B2 (en) | 2019-11-08 | 2020-11-06 | runtime container |
Publications (1)
Publication Number | Publication Date |
---|---|
JP2023139043A true JP2023139043A (en) | 2023-10-03 |
Family
ID=73643362
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022526203A Active JP7311710B2 (en) | 2019-11-08 | 2020-11-06 | runtime container |
JP2023111341A Pending JP2023139043A (en) | 2019-11-08 | 2023-07-06 | Just-in-time container |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022526203A Active JP7311710B2 (en) | 2019-11-08 | 2020-11-06 | runtime container |
Country Status (6)
Country | Link |
---|---|
US (2) | US11669334B2 (en) |
EP (1) | EP4055477A1 (en) |
JP (2) | JP7311710B2 (en) |
KR (1) | KR20220092615A (en) |
CN (1) | CN114651233A (en) |
WO (1) | WO2021092502A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11212336B2 (en) | 2020-04-30 | 2021-12-28 | Software Ag | Systems and/or methods for dynamically configuring and evaluating rules with dynamic and/or user inputs at runtime |
US20230094506A1 (en) * | 2021-09-27 | 2023-03-30 | Salesforce.Com, Inc. | Centralized and decoupled build file management |
US11934255B2 (en) | 2022-01-04 | 2024-03-19 | Bank Of America Corporation | System and method for improving memory resource allocations in database blocks for executing tasks |
US11928110B2 (en) * | 2022-02-25 | 2024-03-12 | Snowflake Inc. | Multiple environments and functions in a distributed database |
JP2023146844A (en) * | 2022-03-29 | 2023-10-12 | 富士通株式会社 | Generation program, generation method, and information processing device |
US11586436B1 (en) * | 2022-08-02 | 2023-02-21 | Soos Llc | Systems and methods for version control in a computing device |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7103874B2 (en) * | 2003-10-23 | 2006-09-05 | Microsoft Corporation | Model-based management of computer systems and distributed applications |
JP2008209982A (en) | 2007-02-23 | 2008-09-11 | Casio Comput Co Ltd | Server device, client device, remote connection system and program |
US8219987B1 (en) * | 2007-08-24 | 2012-07-10 | Vmware, Inc. | Optimized virtual machine specification for provisioning application specific runtime environment |
US9823915B1 (en) * | 2015-08-06 | 2017-11-21 | Mesosphere, Inc. | Software container format |
WO2019181860A1 (en) | 2018-03-23 | 2019-09-26 | 日本電気株式会社 | Application execution device, application execution method, and recording medium |
-
2019
- 2019-11-08 US US16/677,805 patent/US11669334B2/en active Active
-
2020
- 2020-11-06 JP JP2022526203A patent/JP7311710B2/en active Active
- 2020-11-06 KR KR1020227019140A patent/KR20220092615A/en unknown
- 2020-11-06 EP EP20816353.5A patent/EP4055477A1/en active Pending
- 2020-11-06 CN CN202080077159.7A patent/CN114651233A/en active Pending
- 2020-11-06 WO PCT/US2020/059555 patent/WO2021092502A1/en unknown
-
2023
- 2023-04-27 US US18/308,029 patent/US20240078116A1/en active Pending
- 2023-07-06 JP JP2023111341A patent/JP2023139043A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
JP2022553860A (en) | 2022-12-26 |
WO2021092502A1 (en) | 2021-05-14 |
CN114651233A (en) | 2022-06-21 |
US20240078116A1 (en) | 2024-03-07 |
EP4055477A1 (en) | 2022-09-14 |
US11669334B2 (en) | 2023-06-06 |
US20210141645A1 (en) | 2021-05-13 |
KR20220092615A (en) | 2022-07-01 |
JP7311710B2 (en) | 2023-07-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7311710B2 (en) | runtime container | |
US11144306B2 (en) | Scheduling upgrades in distributed computing systems | |
US8799893B2 (en) | Method, system and computer program product for solution replication | |
US8495598B2 (en) | Control flow graph operating system configuration | |
US20200026505A1 (en) | Scheduling firmware operations in distributed computing systems | |
US9684786B2 (en) | Monitoring an application in a process virtual machine | |
EP3035191B1 (en) | Identifying source code used to build executable files | |
US20100205604A1 (en) | Systems and methods for efficiently running multiple instances of multiple applications | |
US8583709B2 (en) | Detailed inventory discovery on dormant systems | |
US9459986B2 (en) | Automatic generation of analysis-equivalent application constructs | |
EP3607432B1 (en) | Flow-based scoping | |
EP3021216A1 (en) | Incremental source code analysis | |
US20070180433A1 (en) | Method to enable accurate application packaging and deployment with optimized disk space usage | |
Vivian et al. | Rapid and efficient analysis of 20,000 RNA-seq samples with Toil | |
CN113805882A (en) | Method and device for developing application program, electronic equipment and storage medium | |
US9841982B2 (en) | Locating import class files at alternate locations than specified in classpath information | |
US20090070791A1 (en) | Method for decoupling components of a software system at compile time and load time | |
Okafor et al. | Eliminating the operating system via the bare machine computing paradigm | |
US11086605B1 (en) | Processing portable extensions at build time | |
Kiss | Build automation systems against CI lock-in-A comparative study of Dagger and Mage | |
US20150365302A1 (en) | Dynamic collaboration service platform and method for providing an application service at the same platform | |
Vasilakis et al. | The web as a distributed computing platform | |
Villela et al. | About Static. NET Assembly | |
CN113836008A (en) | Method and system for fuzz testing of virtual machine monitor | |
Starkman | The Robot Operating System in Transition: Experiments and Tutorials |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230728 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20230728 |