US7346009B2 - Dense mode coding scheme - Google Patents
Dense mode coding scheme Download PDFInfo
- Publication number
- US7346009B2 US7346009B2 US10/262,643 US26264302A US7346009B2 US 7346009 B2 US7346009 B2 US 7346009B2 US 26264302 A US26264302 A US 26264302A US 7346009 B2 US7346009 B2 US 7346009B2
- Authority
- US
- United States
- Prior art keywords
- subtree
- node
- bit
- pointer
- mapper
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/74591—Address table lookup; Address filtering using content-addressable memories [CAM]
Definitions
- the Internet is a set of networks connected by routers.
- a router maintains a routing table that indicates for each possible destination network, the next hop to which a received data packet should be forwarded. The next hop may be another router or the final destination.
- IP Internet Protocol
- IPv4 IP version 4
- IPv6 IP version 6
- IPv4 destination address provides 4 billion possible routes.
- An Internet router typically stores 50,000 of the 4 billion possible routes. However, the number of stored routes will increase with the growth of the Internet and the widespread use of IPv6.
- IP address space was divided into three classes of IP addresses; A, B and C. Each IP address space was divided into a network address and a host address. Class A allowed for 126 networks and 16 million hosts per network. Class B allowed for 16382 networks with 64,000 hosts per network and class C allowed for 2 million networks with 256 hosts per network. However, dividing the IP address space into different classes reduced the number of available IP addresses. Class C only allowed a maximum of 256 hosts per network which is too small for most organizations. Therefore, most organizations were assigned a Class B address, taking up 64,000 host addresses which could not be used by other organizations even if they were not used by the organization to which they were assigned. Hosts in an organization with a Class B IP address all store the same network address in the 16 Most Significant Bits (“MBSs”), for example, 128.32.xx.xx.
- MFSs Most Significant Bits
- Classless InterDomain Routing (“CIDR”) was introduced to free up unused IP host addresses. The remaining unused networks are allocated to organization in variable sized blocks. An organization requiring 500 addresses gets 500 continuous addresses. For example, an organization can be assigned 500 available addresses starting at 128.32.xx. The number of routes stored by a router has increased since the introduction of Classless InterDomain Routing. Classless InterDomain Routing requires longest prefix matching to find the corresponding route instead of searching for a matching network address in order to find the corresponding next hop for the IP destination address. For example, a search can no longer stop after the 16 MSBs of a Class B IP address, for example, 128.xx.xx because 128.32.4.xx may be assigned to another organization requiring a different next hop.
- CIDR Classless InterDomain Routing
- a binary tree search matches a 32-bit input bit by bit down to 32 levels, requiring 32 searches to find the entry matching the 32-bit key.
- Another method for searching for a match is through the use of a Patricia tree.
- a Patricia tree reduces the number of searches required if there are no entries down a leaf of the binary tree.
- Brodnick et al. divides the binary tree into 3-levels. Dividing the binary tree into 3-levels reduces the number of searches to three.
- the indexed entry in the first level indicates whether the search can end at the first level with the route taken from the entry, or the search must continue to a subsequent level using a further portion of the IP destination address.
- FIG. 1A illustrates a prior art 64K (65536) bit map representing the first level of a binary tree.
- a 64K bit map 30 represents the leaves or nodes 44 of the binary tree at depth 16 , with one bit per node 44 .
- the bit map is divided into bit-masks of length 16 .
- There are 2 12 4096 bit masks in the 64k bit map.
- One bit mask is shown in FIG. 1A .
- a bit in the bit map 30 is set to ‘1’ if there is a subtree or a route index stored in an array of pointers corresponding to the node 44 .
- a bit in the bit map 30 is set to ‘0’ if the node shares a route entry with a previous node 44 .
- a bit is set in the bit map 30 if the node does not share the route entry the previous node 44 .
- Bit 4 is set ‘1’ indicating that there is a subtree or route index corresponding to the node 44 .
- Bit 5 is set ‘0’ indicating that the node corresponding to bit 5 shares the subtree or route index with the node corresponding to bit 4 .
- Bit 6 is set ‘1’ indicating that the node corresponding to bit 6 does not share a subtree or route index with bits 4 and 5 .
- Bit 6 corresponds to a node sharing the default route.
- Bits 6 and 12 set to ‘1’ correspond to the default route.
- FIG. 1B illustrates a prior art lookup table implemented in cache memory.
- the lookup table includes an array of code words 36 , an array of base indices 34 and a map table 40 .
- a 32-bit IP address 38 is also shown in FIG. 1B .
- a codeword 46 is stored in the array of code words 36 for each bit mask in the bit map 30 ( FIG. 1A ).
- the code word 46 includes a six-bit value 46 a and a 10-bit offset 46 b .
- a base index 42 is stored in the array of base indices 34 for every four code words 46 in the array of code words 36 .
- the array of code words 36 , array of base indices 34 and map table 40 are used to select a pointer in an array of pointers (not shown).
- the pointer stores a route index or an index to perform a further search.
- a group of pointers in the array of pointers is selected by selecting a code word 46 in the array of code words 36 and a base index 42 in the array of base indices 34 .
- the code word 46 is selected using the first 12 bits 50 of the IP address 38 .
- the base index 42 is selected using the first 10 bits 48 of the IP address 38 .
- the correct pointer in the group of pointers is selected using the map table 32 .
- the 10-bit value 46 b in the selected code word 36 is an index into the map table 32 .
- the map table 32 maps bit numbers within a bit-mask to 4-bit offsets.
- the offset specifies the pointer within the selected group of pointers in the array of pointers.
- the 10-bit value 46 b selects the row in the map table 32 and bits 19 : 16 of the IP address 52 selects the 4-bit offset 54 .
- An offset to specify a pointer is stored in the map table 32 for each ‘1’ stored in the bit mask 30 ( FIG. 1A ).
- two separate location offsets to specify a default pointer corresponding to bits 6 and 12 in the bit mask 30 are stored in two separate locations in the map table 32 .
- Storing multiple copies of the default pointer in the array of pointers reduces the number of route indexes that can be stored in a fixed size memory.
- FIG. 2A illustrates a worst case encoded subtree which requires twice the number of entries in the array of pointers than actual routes.
- the routes r 1 -r 8 are assigned to leaf nodes 215 , 217 , 219 , 221 , 223 , 225 , 227 and 229 as follows: r 1 to leaf node 215 ; r 2 to leaf node 217 , r 3 to leaf node 219 ; r 4 to leaf node 221 ; r 5 to leaf node 223 ; r 6 to leaf node 225 ; r 7 to leaf node 227 and r 8 to leaf node 229 .
- the default route r 0 is assigned to all of the other leaf nodes 216 , 218 , 220 , 222 , 224 , 226 , 228 and 230 .
- FIG. 2B illustrates a prior art bit map 30 and associated pointers stored in an array of pointers 50 representative of the subtree shown in FIG. 2A .
- the bit map 30 includes one bit 242 1 - 242 16 for each leaf node in the subtree.
- the array of pointers 50 stores a pointer for each bit set to ‘1’ in the bit map 30 .
- a bit is set ‘1’ to indicate that the route corresponding to the leaf node differs from the route stored for the previous leaf node in the map table 32 .
- Sixteen entries are used to store the eight pointers to routes r 1 -r 8 and the default route r 0 .
- the pointer to the default route r 0 is stored in eight of the sixteen entries 252 1-16 .
- a route corresponding to a node in the subtree is found by counting the number of ‘1’s in the bit map and incrementing the pointer by the total number of ones. For example, the entry corresponding to node 224 ( FIG. 2A ) is stored in entry 252 12 . Storing the pointer to the default route in eight different entries decreases the available memory for storing pointers to routes.
- a longest prefix match lookup table defining nodes of a tree searched for a route pointer corresponding to a prefix match is presented.
- the lookup table stores a binary tree representation of a key in a plurality of subtree levels. A portion of the bits of the key are searched in each subtree level.
- Each subtree level includes a subtree memory and a mapper memory.
- the result of a search of each subtree level indicates whether a search must continue in a subtree in the next subtree level.
- the mapper memory stores pointers for nodes in a subtree.
- the subtree memory stores a subtree descriptor indexed by a subtree select from the previous subtree level. Instead of including a bit per node in the bottom level of the subtree, the subtree descriptor includes a bit for each node in the subtree. The bit corresponding to the node indicates whether a pointer for the node is stored in the mapper memory.
- a pointer to a default route for the subtree shared by a plurality of nodes in the subtree is stored in a single entry in the mapper memory.
- the number of available locations for storing routes in the mapper memory is increased.
- the subtree descriptor includes a level descriptor for each level in the subtree. Each level descriptor includes a bit for each node in the level. Each subtree level also includes mapper address logic. The mapper address logic performs a parallel search in each level descriptor for a node matching a search key and computes an offset to the pointer corresponding to the matching node.
- the subtree descriptor may also include a block pointer.
- the block pointer may store an index to the first pointer in the mapper memory for the subtree. The combination of the offset and the block pointer provides the index to the pointer corresponding to the matching node.
- the default route is stored for a root node of the subtree.
- the default route stored may be an indication to use another default route for a parent subtree.
- FIG. 1A illustrates a prior art bit map for representing the first level of a binary tree.
- FIG. 1B illustrates a prior art lookup table implemented in cache memory
- FIG. 2A illustrates a worst case encoded subtree which requires twice the number of map table entries than actual routes
- FIG. 2B illustrates a prior art bit map representation of the subtree shown in FIG. 2A and associated pointers stored in the map table;
- FIG. 3A is a four level subtree
- FIG. 3B illustrates a bit map representation of the subtree shown in FIG. 3A according to the principles of the present invention
- FIG. 3C is a block diagram of a subtree descriptor and associated routes for the subtree shown in FIG. 2A according to the principles of the present invention
- FIG. 4 is a block diagram of a bit map representation of the subtree shown in FIG. 2A stored in the subtree data shown in FIG. 3C ;
- FIG. 5 illustrates a subtree mapper storing a mapper entry corresponding to a leaf node in a subtree and a subtree memory storing a subtree descriptor for the subtree;
- FIG. 6 illustrates an embodiment of the mapper address logic for computing the mapper index to a mapper entry corresponding to a leaf node in the subtree
- FIG. 7 is a block diagram illustrating an embodiment of the level N offset count logic shown in FIG. 6 ;
- FIG. 8 is a circuit diagram of the embodiment of the mapper address logic described in conjunction with FIG. 6 and FIG. 7 for a subtree with seven levels;
- FIG. 9 is a flowchart illustrating a method for computing the mapper index implemented in the mapper address logic shown in FIG. 8 .
- U.S. patent application Ser. No. 09/733,627 filed on Dec. 8, 2000 describes a method and apparatus for storing a route for an Internet Protocol (“IP”) address in a multi-level lookup table, the contents of which are incorporated herein by reference.
- IP Internet Protocol
- a multi-level search is performed to find a route index stored in a mapper in the lookup table which indexes a range of IP addresses corresponding to a range of leaves of a subtree.
- FIG. 3A is a four level subtree.
- the four level subtree has 15 (2 3+1 ⁇ 1) nodes with 3 route nodes r 1 , r 2 , r 3 and 2 subtree entry nodes s 0 , s 1 .
- One node labeled ‘a’ is in level 1
- two nodes labeled ‘b’ and ‘c’ are in level 2.
- Four nodes labeled ‘d’, ‘e’, ‘f’, ‘g’ are in level 3.
- Eight nodes labeled ‘h’, ‘i’, ‘j’, ‘k’, ‘l’, ‘m’, ‘n’, ‘o’, ‘p’ are in level 4.
- FIG. 3B illustrates a bit map representation of the subtree shown in FIG. 3A according to the principles of the present invention.
- Each node in the subtree shown in FIG. 3A is assigned a label.
- Each node has a corresponding bit position in the bit map.
- the corresponding bits in the bit map are set to ‘1’.
- bit 350 corresponding to node a the root node of the subtree is set to ‘1’
- bit 352 corresponding to route r 1 (node c) is ‘1’
- bit 354 corresponding to route r 3 (node d) is ‘1’
- bit 356 corresponding to subtree entry s 0 is ‘1’
- bit 358 corresponding to subtree entry s 1 is ‘1’.
- the bit map includes a bit for each node in the subtree instead of only leaf nodes as in the prior art coding scheme described in conjunction with FIGS. 2A and 2B .
- FIG. 3C is a block diagram of a subtree descriptor 300 and associated routes for the subtree shown in FIG. 2A .
- the subtree descriptor 300 includes subtree data 308 and subtree pointers 310 .
- the subtree data 308 includes a bit for each node in the subtree.
- the subtree pointers 310 include a block pointer 320 for storing a pointer to a block of mapper entries in a memory allocated for storing routes for the subtree.
- a pointer to a default route is stored in one location for all nodes in the subtree.
- the pointer to the default route is stored in a mapper entry corresponding to the root of the subtree.
- the small increase in the size of the subtree data 308 due to the longer bit map decreases the number of mapper entries for storing the default route to one per subtree. Thus, the number of routes that can be stored is increased.
- the same number of routes stored in the prior art map table described in conjunction with FIG. 2B can be stored in a smaller memory.
- the subtree data 308 includes a bit for each node in the subtree.
- a bit for each node in the bottom level of the N-level subtree; that is, the leaf nodes is provided in level N nodes bitmap 312 .
- a bit for each node in the level above the bottom level (N ⁇ 1) is provided in level N ⁇ 1 nodes bitmap 314 and a bit for the root of the subtree is provided in the level 1 node bitmap 316 .
- the subtree pointers field 310 includes a default index 318 for storing the default route for the subtree and a block pointer 320 for storing a pointer to the start of a block of mapper entries allocated for storing routes for the subtree.
- the default index 318 is described in co-pending U.S. application Ser. No. 10/004,280 filed on Oct. 31, 2001 entitled “Default Route Coding,” by David A. Brown, the contents of which are incorporated herein by reference.
- FIG. 4 is a block diagram of a bit map representation of the subtree shown in FIG. 2A stored in the subtree data 308 shown in FIG. 3C .
- the subtree data 308 in the subtree descriptor is expanded to include a bit 404 for each node 200 - 230 in the subtree shown in FIG. 2A instead of only the leaf nodes as shown in the prior art coding scheme ( FIG. 2B ).
- the number of bits in the subtree data 308 is 2 h+1 ⁇ 1 where h is the height of the subtree. For example, a subtree of height 8 requires 511 bits (2 9 ⁇ 1) in the subtree data to represent the subtree.
- the subtree data 308 is described in conjunction with FIG. 2A .
- Bits 404 25 - 404 28 correspond to nodes 203 - 206 in level 3 of the subtree
- bits 404 29 - 404 30 correspond to nodes 201 , 202 in level 2 of the subtree
- bit 404 31 corresponds to node 200 at the root of the tree (the default route for the subtree) and the level 1 node bitmap 316 ( FIG. 3C ).
- Mapper entry 406 1 stores a pointer to r 1 for leaf node 215 in the subtree.
- Mapper entry 406 2 stores a pointer to route r 2 for leaf node 217 in the subtree.
- Mapper entry 406 3 stores a pointer to route r 3 for leaf node 219 represented by bit 404 5 in the subtree data 308 .
- Mapper entry 406 4 stores a pointer to route r 4 for leaf node 221 represented by bit 404 7 in the subtree data 308 .
- Mapper entry 406 5 stores a pointer to route r 5 for leaf node 223 represented by bit 404 9 in the subtree data 308 .
- Mapper entries 406 6 , 406 7 and 406 8 store a pointer to routes for respective leaf nodes 225 , 227 and 229 . All of the other nodes in the subtree map to the default route r 0 .
- the default route r 0 is stored once in mapper entry 406 9 for the root of the subtree represented by bit 404 31 in the subtree data 308 and for all nodes mapping to the default route.
- the prior art subtree encoded using only leaf nodes requires 16 mapper entries 252 .
- the number of mapper entries used is reduced from 16 to 9 for the same four level subtree with 16 leaf nodes and eight routes shown in FIG. 2A .
- the available memory for storing routes is increased.
- seven mapper entries which would have been used to store the default route in the prior art can be used for storing routes.
- the increase in the number of bits in the subtree descriptor is offset by the corresponding reduction in the number of mapper entries 306 used per subtree, to store the same number of routes stored in the prior art lookup table.
- the default route is stored in the default index 318 to facilitate updating the default route and allow the default route to be inherited from a parent subtree.
- An inherit indicator is stored in the default index 318 instead of the default route, to indicate that the default route corresponding to the root of the subtree is inherited from a parent subtree.
- a use default indicator is stored in mapper entry 406 9 instead of the default route itself. Upon detecting the use default indicator stored in the mapper entry, the pointer to the default route stored in the default index or the inherited default route pointer is returned as the result of the search of the lookup table.
- FIG. 5 illustrates a subtree mapper 502 storing a mapper entry 412 for a node in a subtree and a subtree memory 500 storing a subtree descriptor 300 for the subtree.
- a subtree index 508 forwarded from a mapper entry of a previous level selects the subtree descriptor 300 stored in the subtree memory 500 for the subtree.
- Mapper address logic 504 selects the mapper index 516 for the node dependent on the selected subtree descriptor 300 and the node index 510 .
- the node index 510 for a subtree of height N has N bits.
- the node index 510 for a subtree of height 3 has 3 bits.
- the three bits identify the leaf node (i.e., the node at the bottom of the subtree) and all parent nodes up to the root of the subtree.
- a search for a longest match begins with the leaf node ‘h’ identified by the node index 510 .
- the subtree descriptor 300 includes subtree data 308 ( FIG. 3C ) and subtree pointers 310 ( FIG. 3C ).
- the subtree data field 308 has one bit for each node in the subtree as described in conjunction with FIG. 3C .
- the subtree descriptor 300 also includes a pointers field 310 to allow for the storage of pointers to mapper entries in the subtree mapper 502 to provide access to the 256 mapper entries 412 that can be stored for an eight level subtree.
- the subtree data 308 stored in the subtree descriptor 300 is forwarded to the mapper address logic 504 .
- the mapper address logic 504 also receives a node index 510 .
- the mapper address logic 504 determines the mapper index 516 to the mapper entry 412 corresponding to the node in the subtree dependent on the node index 510 , the subtree data 308 and the subtree pointers 310 in the subtree descriptor 300 for the subtree.
- the mapper index 516 selects the mapper entry 412 for the node in the subtree.
- FIG. 6 illustrates an embodiment of the mapper address logic 504 for computing the mapper index 516 for a mapper entry 412 ( FIG. 5 ) corresponding to a node index 510 in the subtree.
- the offset count logic 600 counts the number of mapper entries lower than the selected node based on the number of bits set to ‘1’ in the subtree data 308 ( FIG. 3 ) in the subtree descriptor 300 ( FIG. 3C ).
- the total number of mapper entries lower than the mapper entry for the selected node is computed by summing the offsets 602 1 - 602 n output by the offset count logic 600 1 - 600 n for each level.
- the mapper index 516 is computed in the adder 610 by adding the pointer offsets to the block pointer 320 ( FIG. 3C ) stored in the subtree descriptor 300 .
- FIG. 7 is a block diagram illustrating an embodiment of the level N offset count logic 600 n shown in FIG. 6 .
- the level N offset count logic 600 n computes the offset from the block pointer 320 ( FIG. 3C ) to the node selected by the node index 604 .
- the offset is the number of mapper entries stored in mapper memory for the subtree between the mapper entry for the selected node and the block pointer 320 ( FIG. 3C ) for the subtree.
- the level N offset logic 600 n includes a level N thermometer decoder 700 , a bitmap comparator 702 and a level N offset adder 704 . If there is a mapper entry stored for the level N node, the level N thermometer decoder 700 selects all nodes lower than the leaf node index 604 . A match N signal 708 is set to ‘0’. The match N signal is coupled to the bitmap comparator 702 in the level N ⁇ 1 offset count logic 600 n-1 . The match N signal 708 set to ‘0’ disables the output of offset count logic 600 of lower levels. If there is no mapper entry stored for the level N node, all of the bits in the match bit map 706 are forced high. The match N signal 708 is set to ‘1’ to enable the output of offset count logic 600 of lower levels.
- the bitmap comparator 702 compares each bit in the match bit map 706 with the respective bit in the level N nodes bitmap 312 stored in the subtree descriptor 300 . The result of the comparison is output as the offset bitmap 710 .
- the offset bitmap 710 indicates all mapper entries 406 that are stored in mapper memory 402 up to the selected node for the subtree.
- the level N offset adder 704 counts the number of ‘1’s in the offset bit map 710 . The total number of ‘1’s is the level N offset 602 n of the mapper entry for the node from the block pointer 320 .
- the subtree has eight levels 0-7, and corresponds to 7-bits [6:0] subtree.
- the mapper address logic 504 includes level 7 offset count logic 800 7 , level 6 offset count logic 800 6 and level 1 offset counter 800 1 and level 0 offset logic 800 0 .
- Level 7 offset count logic 800 7 includes a level 7 thermometer decoder 802 7 , 2 7 (128) bit map comparator 804 7 and level 7 offset adder 806 7 as described in conjunction with FIG. 7 .
- Level 7 of the subtree has 128 (2 7 ) nodes.
- the thermometer decoder 802 7 includes a 1 of 128 decoder 808 , a plurality of AND-gates, one for each of the 128 outputs of the 1 of 128 decoder 808 , a NOR gate 812 and a plurality of OR gates, one for each output of the plurality of AND-gates.
- the bit map comparator 804 7 includes a plurality of AND gates, one for each bit in the level 7 nodes bit map. The operation of the mapper address logic 504 is explained using a numerical example.
- the bit map (for the most significant 21 bits of the 128 bitmap) stored in subtree data 308 ( FIG. 3C ) in the subtree descriptor 300 ( FIG. 3C ) are shown in Table 1 below:
- the node index [6:0] is ‘001000’ indicating a search for the route corresponding to the 17 th node in the seventh level of the subtree.
- the level 7 nodes bit map SM 7 0 -SM 7 127 for the first 21 nodes in the seventh level of the subtree is shown in Table 1.
- the SM 7 16 bit is ‘1’ indicating that a mapper entry is stored for the node in mapper memory.
- bitmap output from the 1 of 128 decoder 808 based on the leaf node index [6:0] set to ‘001 0000’ has bit SM 7 16 set to ‘1’ and all other bits set to ‘0’ as shown in Table 1.
- all bits output from the “1 of 128 decoder” 808 are set to ‘0’ except the S M0 16 bit which is set to ‘1’ indicating the selected node.
- Each output from the 1 of 128 decoder 808 is compared with a respective bit of the level 7 nodes bitmap SM 7 0 -SM 7 127 to determine if there is a mapper entry for the 17 th node; that is, if there is a mapper entry for the 17 th node in the 7 th level of the subtree.
- Table 1 only bit 16 of the bit map output from the plurality of the AND gates 810 0 - 810 127 is set to ‘1’ indicating that there is a mapper entry for the 17 th node.
- Each of the AND gate outputs is coupled to a respective input of NOR gate 812 .
- NOR gate 812 If any of the inputs to NOR gate 812 is set to ‘1’, the output of NOR gate 812 is set to ‘0’, indicating that there is a mapper entry corresponding to a node in the 7 th level. If the output of NOR gate 812 is set to ‘0’, a further search for a match in the level 6 nodes or nodes in any other upper levels of the subtree is not necessary because a node in the 7 th level is selected according to the longest match requirement when there are multiple matches in the subtree.
- NOR gate 812 As shown, there is a mapper entry for the 17 th node in level 7 of the subtree, thus the output of the NOR gate 812 is set to ‘0’.
- the output of NOR gate 812 (match N 708 ( FIG. 7 ) is coupled to level 6 offset logic 800 6 and also coupled to one input of each of the plurality of 2-input OR gates 814 0 - 814 127 .
- the 2-input OR gates select all bits in the level 7 nodes bitmap SM 7 0 -SM 7 127 that are lower than or equal to the selected node (17 th node) selected by the 1 of 128 decoder 808 .
- the match bit map 706 ( FIG. 7 ) output from the OR gates 814 0 - 814 127 is shown in Table 1. Bits 0:16 are set to ‘1’ and all other bits are set to ‘0’.
- the bitmap comparator 702 includes a plurality of 2-input AND-gates 816 0 - 816 127 , one for each bit in the match bit map 706 .
- Each AND gate 816 0 - 816 127 compares one bit of the match bit map 706 with a respective bit of the level 7 nodes bitmapS M0 7 -S M 7 127 312 ( FIG. 7 ).
- the result of the comparison provides the number of mapper entries stored in mapper memory up to and including the 17 th node in level 7 of the subtree.
- the bits of node bit map SM 7 0 -SM 7 127 are ANDed with respective bits of match bit map.
- the bitmap output (offset bit map) 710 ( FIG.
- the 128 bit, 1 bit adder 806 7 counts the number of ‘1’s in the offset bit map 710 output from the AND gates 816 0 - 816 127 .
- the total number of bits set to ‘1’ is 11.
- an offset of 11 is added to the block pointer 320 ( FIG. 6 ) to provide the mapper index 516 ( FIG. 6 ) to the mapper entry for the 17 th node in level 7 of the subtree in mapper memory.
- the speed of the mapper address logic 504 can be improved using other components such as look ahead adders, parallel versus serial logic and adder pre-decoders to reduce propagation delay. These techniques are well-known to those skilled in the art.
- FIG. 9 is a flowchart illustrating a method for computing the mapper index implemented in the mapper address logic 504 shown in FIG. 8 .
- FIG. 9 is described in conjunction with FIG. 8 .
- each decoder 808 , 810 in each respective offset count logic ( FIG. 8 ) generates a node map in parallel for the selected node.
- the bit in the node map corresponding to the selected node is set ‘1’, all other bits are set ‘0’. Processing continues with step 902 .
- step 902 the node map output by the decoder is compared with the node bit map for the respective level. If any of the resulting bits are ‘1’, there is a mapper entry for the node and processing continues with step 904 . If not, processing continues with step 910 to compute the number of mapper entries used by the level.
- step 904 all mapper entries lower than the selected node in the level are selected in parallel in each level offset count logic 802 by selecting all bits above the selected node and comparing with the node bit map for the respective level. Processing continues with step 906 .
- each level adder 806 computes the offset based on the number of mapper entries up to the selected node in the level. Processing continues with step 908 .
- adder 610 adds the total number of mapper entries from all levels stored in mapper memory for nodes up to the selected node to the block pointer to provide the mapper index 516 to the pointer for the selected node. Processing is complete.
- step 910 there is no mapper entry for the selected node. All the mapper entries for the level are added to provide the offset to the first mapper entry in the next level. Processing continues with step 908 .
- a lookup table including a subtree descriptor encoding a subtree using one bit per node requires less overall memory than the prior art subtree descriptor encoding a subtree using one bit per leaf node.
- the reduction in memory for an embodiment capable of storing 256K routes in mapper memory is shown below in Table 2.
- the number of bits per entry in subtree memory is increased from 256 bits to 294 bits.
- the 294 bit entry includes 256 bits of subtree data, a 20-bit default index and an 18-bit block pointer field. As shown in Table 2, the total memory is reduced from 20 Mega bits to 15 Mega bits.
- mapper address logic is implemented using decoders, adders and combinational logic (AND, NOR, OR gates).
- the mapper address logic can be implemented using a Content Addressable Memory (CAM) as is well known to those skilled in the art.
- CAM Content Addressable Memory
Abstract
Description
TABLE 1 | |
Bit Map | Value (Bit 0: Bit 20) |
SM7 0-SM7 20 | 110101011101010110111 |
1 of 128 decoder | 000000000000000010000 |
(First set of AND-gate outputs (8100-81020) | 000000000000000010000 |
Match Bit Map | 111111111111111110000 |
(OR-gate outputs (8140-81420)) | |
Offset Bit Map | 110101011101010110000 |
(Second set of AND gate outputs | |
(8160-81620)) | |
TABLE 2 | |||
Prior Art | New | ||
Subtree memory | 32 K × 256 bits = | 32 K × 294 bits = 9.1875 M bits |
8 M bits | (practical 32 K × 304 bits = 9.5 M | |
bits) | ||
Mapper memory | 512 K × 21 bits = | 256 K × 21 bits = |
10.5 M bits | 5.25 M bits (practical | |
(practical size = | size = 256 K × | |
512 K × 24 bits = | 24 bits = 6 M bits) | |
12 M bits) | ||
Total memory | 18.5 M bits | 14.4375 M bits |
(practical size = | (practical size = | |
20 M bits) | 15.5 M bits) | |
Claims (15)
Priority Applications (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/262,643 US7346009B2 (en) | 2002-09-30 | 2002-09-30 | Dense mode coding scheme |
PCT/CA2003/001390 WO2004030305A2 (en) | 2002-09-30 | 2003-09-10 | Improved dense mode coding scheme |
AU2003266879A AU2003266879A1 (en) | 2002-09-30 | 2003-09-10 | Improved dense mode coding scheme |
US11/969,521 US7633960B2 (en) | 2002-09-30 | 2008-01-04 | Dense mode coding scheme |
US12/612,443 US8023519B2 (en) | 2002-09-30 | 2009-11-04 | Dense mode coding scheme |
US13/221,566 US20110317704A1 (en) | 2002-09-30 | 2011-08-30 | Dense mode coding scheme |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/262,643 US7346009B2 (en) | 2002-09-30 | 2002-09-30 | Dense mode coding scheme |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/969,521 Continuation US7633960B2 (en) | 2002-09-30 | 2008-01-04 | Dense mode coding scheme |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040062208A1 US20040062208A1 (en) | 2004-04-01 |
US7346009B2 true US7346009B2 (en) | 2008-03-18 |
Family
ID=32030266
Family Applications (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/262,643 Expired - Fee Related US7346009B2 (en) | 2002-09-30 | 2002-09-30 | Dense mode coding scheme |
US11/969,521 Expired - Lifetime US7633960B2 (en) | 2002-09-30 | 2008-01-04 | Dense mode coding scheme |
US12/612,443 Expired - Fee Related US8023519B2 (en) | 2002-09-30 | 2009-11-04 | Dense mode coding scheme |
US13/221,566 Abandoned US20110317704A1 (en) | 2002-09-30 | 2011-08-30 | Dense mode coding scheme |
Family Applications After (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/969,521 Expired - Lifetime US7633960B2 (en) | 2002-09-30 | 2008-01-04 | Dense mode coding scheme |
US12/612,443 Expired - Fee Related US8023519B2 (en) | 2002-09-30 | 2009-11-04 | Dense mode coding scheme |
US13/221,566 Abandoned US20110317704A1 (en) | 2002-09-30 | 2011-08-30 | Dense mode coding scheme |
Country Status (3)
Country | Link |
---|---|
US (4) | US7346009B2 (en) |
AU (1) | AU2003266879A1 (en) |
WO (1) | WO2004030305A2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070189284A1 (en) * | 2006-02-13 | 2007-08-16 | Delia Kecskemeti | System and method for routing table computation and analysis |
US20080101372A1 (en) * | 2002-09-30 | 2008-05-01 | Mosaid Technologies Incorporated | Dense mode coding scheme |
US8549041B2 (en) * | 2011-07-18 | 2013-10-01 | Sap Ag | Converter traversal using power of two-based operations |
Families Citing this family (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6212183B1 (en) * | 1997-08-22 | 2001-04-03 | Cisco Technology, Inc. | Multiple parallel packet routing lookup |
US7114064B2 (en) * | 2002-11-14 | 2006-09-26 | Hewlett-Packard Development Company, L.P. | System and method for accessing an advanced configuration and power interface (ACPI) namespace nodal tree |
US7697432B2 (en) * | 2003-06-27 | 2010-04-13 | Broadcom Corporation | Equal and weighted cost multipath load balancing in a network device |
US8886677B1 (en) | 2004-07-23 | 2014-11-11 | Netlogic Microsystems, Inc. | Integrated search engine devices that support LPM search operations using span prefix masks that encode key prefix length |
US7747599B1 (en) | 2004-07-23 | 2010-06-29 | Netlogic Microsystems, Inc. | Integrated search engine devices that utilize hierarchical memories containing b-trees and span prefix masks to support longest prefix match search operations |
US7774346B2 (en) * | 2005-08-26 | 2010-08-10 | Oracle International Corporation | Indexes that are based on bitmap values and that use summary bitmap values |
EP2074534B1 (en) * | 2006-10-20 | 2017-01-25 | Oricane AB | Method, device, computer program product and system for representing a partition of n w-bit intervals associated to d-bit data in a data communications network |
US7987205B1 (en) | 2006-11-27 | 2011-07-26 | Netlogic Microsystems, Inc. | Integrated search engine devices having pipelined node maintenance sub-engines therein that support database flush operations |
US8086641B1 (en) | 2006-11-27 | 2011-12-27 | Netlogic Microsystems, Inc. | Integrated search engine devices that utilize SPM-linked bit maps to reduce handle memory duplication and methods of operating same |
US7953721B1 (en) | 2006-11-27 | 2011-05-31 | Netlogic Microsystems, Inc. | Integrated search engine devices that support database key dumping and methods of operating same |
US7831626B1 (en) | 2006-11-27 | 2010-11-09 | Netlogic Microsystems, Inc. | Integrated search engine devices having a plurality of multi-way trees of search keys therein that share a common root node |
US9531986B2 (en) * | 2008-06-30 | 2016-12-27 | Sibeam, Inc. | Bitmap device identification in a wireless communication system |
DE102008059204B9 (en) * | 2008-11-27 | 2011-05-05 | Infineon Technologies Ag | Method for searching for a slave node in a communication network, master node and slave node for a communication network |
US8255496B2 (en) | 2008-12-30 | 2012-08-28 | Juniper Networks, Inc. | Method and apparatus for determining a network topology during network provisioning |
US8036126B2 (en) * | 2009-02-17 | 2011-10-11 | At&T Intellectual Property Llp | System and method for compressing internet protocol routing tables |
US8179898B2 (en) * | 2009-06-11 | 2012-05-15 | Alcatel Lucent | Packet processing using braided tries |
EP2541412A4 (en) * | 2010-02-23 | 2013-04-10 | Fujitsu Ltd | Update method, update device, and update program |
US9077669B2 (en) * | 2010-06-14 | 2015-07-07 | Dynamic Invention Llc | Efficient lookup methods for ternary content addressable memory and associated devices and systems |
CN103229070B (en) * | 2010-07-15 | 2016-10-12 | 泽布拉企业解决方案公司 | For determining system node position and the method and apparatus performing temperature-compensating |
US8891406B1 (en) | 2010-12-22 | 2014-11-18 | Juniper Networks, Inc. | Methods and apparatus for tunnel management within a data center |
US8615015B1 (en) * | 2010-12-30 | 2013-12-24 | Juniper Networks, Inc. | Apparatus, systems and methods for aggregate routes within a communications network |
CN102546108A (en) * | 2011-12-28 | 2012-07-04 | 深圳市新为软件有限公司 | Method and device for transmitting network resources by tree structure |
CN102662855B (en) * | 2012-04-17 | 2015-02-25 | 华为技术有限公司 | Storage method and system of binary tree |
CN102739520B (en) * | 2012-05-31 | 2015-03-18 | 华为技术有限公司 | Checking method and checking device |
US9386307B2 (en) * | 2012-06-14 | 2016-07-05 | Qualcomm Incorporated | Grouping of bypass-coded bins for SAO syntax elements |
US8856138B1 (en) * | 2012-08-09 | 2014-10-07 | Google Inc. | Faster substring searching using hybrid range query data structures |
CN104426774A (en) * | 2013-09-03 | 2015-03-18 | 中兴通讯股份有限公司 | High-speed routing lookup method and device simultaneously supporting IPv4 and IPv6 |
US9647941B2 (en) * | 2013-10-04 | 2017-05-09 | Avago Technologies General Ip (Singapore) Pte. Ltd. | Hierarchical hashing for longest prefix matching |
US9328521B2 (en) * | 2014-06-27 | 2016-05-03 | Wearwell | Modular molded mat with exposable ramp surfaces |
US11146788B2 (en) | 2015-06-12 | 2021-10-12 | Qualcomm Incorporated | Grouping palette bypass bins for video coding |
US9516377B1 (en) * | 2015-06-12 | 2016-12-06 | Sorenson Media, Inc. | Detecting channel change in automatic content recognition fingerprint matching |
US10303671B1 (en) * | 2016-09-30 | 2019-05-28 | Juniper Networks, Inc. | Apparatus, system, and method for accelerating bitmap lookups in network devices |
RU2755935C2 (en) * | 2019-06-20 | 2021-09-23 | Сергей Александрович Шумский | Method and system for machine learning of hierarchically organized purposeful behavior |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1999014906A1 (en) | 1997-09-15 | 1999-03-25 | Effnet Group Ab | Method and system for fast routing lookups |
US20030189930A1 (en) * | 2001-10-18 | 2003-10-09 | Terrell William C. | Router with routing processors and methods for virtualization |
US6691218B2 (en) * | 1999-12-10 | 2004-02-10 | Mosaid Technologies, Inc. | Method and apparatus for longest match address lookup |
US6985960B2 (en) * | 2000-03-27 | 2006-01-10 | Fujitsu Limited | Routing information mapping device in a network, method thereof and storage medium |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6553002B1 (en) * | 1997-08-29 | 2003-04-22 | Ascend Communications, Inc. | Apparatus and method for routing data packets through a communications network |
US6430527B1 (en) * | 1998-05-06 | 2002-08-06 | Avici Systems | Prefix search circuitry and method |
JP3735471B2 (en) * | 1998-10-05 | 2006-01-18 | 株式会社日立製作所 | Packet relay device and LSI |
US6560610B1 (en) * | 1999-08-10 | 2003-05-06 | Washington University | Data structure using a tree bitmap and method for rapid classification of data in a database |
US7016351B1 (en) * | 2000-02-29 | 2006-03-21 | Cisco Technology, Inc. | Small group multicast in a computer network |
US7215637B1 (en) * | 2000-04-17 | 2007-05-08 | Juniper Networks, Inc. | Systems and methods for processing packets |
US7106732B2 (en) | 2000-12-27 | 2006-09-12 | Mosaid Technologies Incorporated | Default route coding |
US6973494B2 (en) * | 2000-12-29 | 2005-12-06 | Bellsouth Intellectual Property Corporation | System and method for bi-directional mapping between customer identity and network elements |
US6741999B2 (en) * | 2001-03-20 | 2004-05-25 | Northrop Grumman Corporation | String tree utility data structure and order n sort |
US7180887B1 (en) * | 2002-01-04 | 2007-02-20 | Radisys Patent Properties | Routing and forwarding table management for network processor architectures |
US7028042B2 (en) * | 2002-05-03 | 2006-04-11 | Jorma Rissanen | Lossless data compression system |
US7899067B2 (en) * | 2002-05-31 | 2011-03-01 | Cisco Technology, Inc. | Method and apparatus for generating and using enhanced tree bitmap data structures in determining a longest prefix match |
US7346009B2 (en) * | 2002-09-30 | 2008-03-18 | Mosaid Technologies, Inc. | Dense mode coding scheme |
-
2002
- 2002-09-30 US US10/262,643 patent/US7346009B2/en not_active Expired - Fee Related
-
2003
- 2003-09-10 AU AU2003266879A patent/AU2003266879A1/en not_active Abandoned
- 2003-09-10 WO PCT/CA2003/001390 patent/WO2004030305A2/en not_active Application Discontinuation
-
2008
- 2008-01-04 US US11/969,521 patent/US7633960B2/en not_active Expired - Lifetime
-
2009
- 2009-11-04 US US12/612,443 patent/US8023519B2/en not_active Expired - Fee Related
-
2011
- 2011-08-30 US US13/221,566 patent/US20110317704A1/en not_active Abandoned
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1999014906A1 (en) | 1997-09-15 | 1999-03-25 | Effnet Group Ab | Method and system for fast routing lookups |
US6691218B2 (en) * | 1999-12-10 | 2004-02-10 | Mosaid Technologies, Inc. | Method and apparatus for longest match address lookup |
US6985960B2 (en) * | 2000-03-27 | 2006-01-10 | Fujitsu Limited | Routing information mapping device in a network, method thereof and storage medium |
US20030189930A1 (en) * | 2001-10-18 | 2003-10-09 | Terrell William C. | Router with routing processors and methods for virtualization |
Non-Patent Citations (3)
Title |
---|
Degermark, M., et al., "Small Forwarding Tables for Fast Routing Lookups," Deparment of Computer Science and Electrical Engineering, Luleå University of Technology, S-971 Luleå, Sweden, pp. 3-14. |
Miguel Á. Ruiz-Sánchez, et al., "Survey and Taxonomy of IP Address Lookup Algorithms," IEEE Network, pp. 8-23 (2001). |
P. Gupta, et al., "Routing Lookups in Hardware at Memory Access Speeds," IEEE, pp. 1240-1247 (1998). |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080101372A1 (en) * | 2002-09-30 | 2008-05-01 | Mosaid Technologies Incorporated | Dense mode coding scheme |
US7633960B2 (en) * | 2002-09-30 | 2009-12-15 | Mosaid Technologies Inc. | Dense mode coding scheme |
US20100049870A1 (en) * | 2002-09-30 | 2010-02-25 | Brown David A | Dense mode coding scheme |
US8023519B2 (en) * | 2002-09-30 | 2011-09-20 | Mosaid Technologies, Inc. | Dense mode coding scheme |
US20070189284A1 (en) * | 2006-02-13 | 2007-08-16 | Delia Kecskemeti | System and method for routing table computation and analysis |
US7860106B2 (en) * | 2006-02-13 | 2010-12-28 | Wind River Systems, Inc. | System and method for routing table computation and analysis |
US8549041B2 (en) * | 2011-07-18 | 2013-10-01 | Sap Ag | Converter traversal using power of two-based operations |
Also Published As
Publication number | Publication date |
---|---|
WO2004030305A2 (en) | 2004-04-08 |
US20040062208A1 (en) | 2004-04-01 |
US8023519B2 (en) | 2011-09-20 |
US20080101372A1 (en) | 2008-05-01 |
WO2004030305A3 (en) | 2004-07-15 |
US20100049870A1 (en) | 2010-02-25 |
AU2003266879A8 (en) | 2004-04-19 |
US7633960B2 (en) | 2009-12-15 |
AU2003266879A1 (en) | 2004-04-19 |
US20110317704A1 (en) | 2011-12-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7346009B2 (en) | Dense mode coding scheme | |
US6691218B2 (en) | Method and apparatus for longest match address lookup | |
US7715385B2 (en) | Default route coding | |
US6880064B1 (en) | Method and apparatus for physical width expansion of a longest prefix match lookup table | |
US5946679A (en) | System and method for locating a route in a route table using hashing and compressed radix tree searching | |
US6697363B1 (en) | Method and apparatus for longest matching prefix determination in a communication network | |
US20050157724A1 (en) | Method and apparatus for encoding a plurality of pre-defined codes into a search key and for locating a longest matching pre-defined code | |
US6917954B2 (en) | Load balancing in IP address lookup | |
US7478109B1 (en) | Identification of a longest matching prefix based on a search of intervals corresponding to the prefixes | |
US20050135135A1 (en) | Content addressable memory for CIDR address searches | |
KR101587756B1 (en) | Apparatus and method for searching string data using bloom filter pre-searching | |
EP3255571B1 (en) | System and method for efficient interval search using locality-preserving hashing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOSAID TECHNOLOGIES, INC., CANADAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BROWN, DAVID A.;GILLINGHAM, PETER B.;REEL/FRAME:013606/0532;SIGNING DATES FROM 20021201 TO 20021212 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: MOSAID TECHNOLOGIES INCORPORATED, CANADAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GILLINGHAM, PETER, MR.;REEL/FRAME:021254/0608Effective date: 20080618 |
|
AS | Assignment |
Owner name: MOSAID TECHNOLOGIES INCORPORATED, CANADAFree format text: CHANGE OF ADDRESS OF ASSIGNEE;ASSIGNOR:MOSAID TECHNOLOGIES INCORPORATED;REEL/FRAME:022542/0876Effective date: 20090209Owner name: MOSAID TECHNOLOGIES INCORPORATED,CANADAFree format text: CHANGE OF ADDRESS OF ASSIGNEE;ASSIGNOR:MOSAID TECHNOLOGIES INCORPORATED;REEL/FRAME:022542/0876Effective date: 20090209 |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOSAID TECHNOLOGIES INC.;REEL/FRAME:026933/0942Effective date: 20110909 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20200318 |