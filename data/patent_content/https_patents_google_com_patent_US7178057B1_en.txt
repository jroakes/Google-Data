US7178057B1 - Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy - Google Patents
Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy Download PDFInfo
- Publication number
- US7178057B1 US7178057B1 US10/346,489 US34648903A US7178057B1 US 7178057 B1 US7178057 B1 US 7178057B1 US 34648903 A US34648903 A US 34648903A US 7178057 B1 US7178057 B1 US 7178057B1
- Authority
- US
- United States
- Prior art keywords
- cluster
- capacity
- server
- cluster lock
- master
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/20—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements
- G06F11/202—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where processing functionality is redundant
- G06F11/2035—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where processing functionality is redundant without idle spare hardware
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/20—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements
- G06F11/2097—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements maintaining the standby controller/processing unit updated
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/52—Program synchronisation; Mutual exclusion, e.g. by means of semaphores
- G06F9/526—Mutual exclusion algorithms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/20—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements
- G06F11/2002—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where interconnections or communication control functionality are redundant
- G06F11/2007—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where interconnections or communication control functionality are redundant using redundant communication media
Definitions
- the present invention generally relates to data processing systems and more particularly relates to fail recovery redundancy provisions for data processing system architectures which employ commodity hardware within a cluster/lock operating environment.
- An alternative to increasing computational capacity is the employment of a plurality of instruction processors into the same operational system.
- This approach has the advantage of generally increasing the number of instruction processors in the market place, thereby increasing utilization volumes. It is further advantageous that such an approach tends to utilize redundant components, so that greater reliability can be achieved through appropriate coupling of components.
- Cluster/lock processing system such as the XPC (Extended Processing Complex) available from Unisys Corporation and described in U.S. Pat. No. 5,940,826, entitled “Dual XPCs for Disaster Recovery in Multi-Host Environments”, which is incorporated herein by reference.
- This technique utilizes a relatively large number of instruction processors which are “clustered” about various shared resources. Tasking and management tends to be decentralized with the cluster processors having shared responsibilities. Maximal redundancy is utilized to enhance reliability.
- cluster/lock systems tend to solve the reliability problems but remains relatively costly to implement, because virtually all of the hardware and firmware are specifically designed and manufactured for the cluster/lock architecture. This is necessary to enable each of the system components to effectively contribute to system reliability, system management, and system viability As a result, demand volumes remain relatively low.
- the present invention overcomes the disadvantages of the prior art by providing a technique which permits failure recovery within a data processing system, which enables redundant, substitute system elements to replace failed, but not identical system elements.
- the preferred mode of the present invention is incorporated into a system with a relatively large number of low cost instruction processors providing an extremely high performance, high reliability, relatively low cost cluster/lock system.
- the low cost is largely achieved by utilizing “commodity” hardware and software for the large numbers of instruction processors.
- a “commodity” system component is one which is designed for and marketed to the general public.
- each of the large number of instruction processors is essentially an industry compatible personal computer chip available from Intel Corporation, similar to that found in many “high-end” home computers.
- these instruction processors employ a commonly available operating system, such as a current version of “Windows” available from Microsoft Corporation.
- the cluster lock server is a Cellular Multiprocessing (CMP) architecture System available from Unisys Corporation.
- CMP Cellular Multiprocessing
- a host computer utilizes the large number of commodity instruction processors (essentially personal computers) much like the personal computer employed by users in their homes and offices.
- the host computer expects that there will be reliability problems with the hardware and software of each and every one of the commodity instruction processors and has available to it the means to systematically recover from those failures.
- the system of the present invention is generic in that it is operable within a wide variety of operating system environments. It is equally suited to the proprietary OS2200, available from Unisys Corporation; Windows, available from Microsoft Corporation; UNIX, available from Sun Microsystems; as well as any other viable operating system.
- the system of the present invention employs a master/slave arrangement of system elements.
- a master is assigned that performs the service provided by the cluster/lock processing system.
- the slave functions in a standby role, while preparing for assumption of the master role by synchronization communication with the master. Furthermore, the slave checks for proper operation of the master by “heartbeat” communication.
- the slave is prepared to assume the role of the master, regardless of the fact that it may indeed have more or less capacity than the current master. It is only necessary the slave have sufficient capacity to replace the master. It is not necessary that the slave have the same capacity as the master.
- FIG. 1 is detailed block diagram showing a generalized cluster processing system in accordance with the present invention
- FIG. 2 is a detailed diagram showing the architecture of the cluster lock server
- FIG. 3 is a detailed schematic diagram showing data flow paths within the overall system of the present invention.
- FIG. 4 is a diagram showing the format of data transfers between the cluster processors and the host computer
- FIG. 5 shows the format of the Synchronization path Request/Response (SRR) packet
- FIG. 6 is diagram showing the format of the SRR packet header
- FIG. 7 is a diagram showing the format of a control entry
- FIG. 8 is a memory allocation table for the cluster processing system
- FIG. 9 is a detailed diagram showing operation of the segment descriptor
- FIG. 10 is a detailed diagram showing operation of the locks
- FIG. 11 is a detailed diagram showing operation of process registration
- FIG. 13 is a detailed diagram showing operation of the validity entries
- FIG. 14 is a detailed diagram showing message handling
- FIG. 15 is a detailed diagram showing integration of the various functions into a single platform
- FIG. 16 shows the format of an Audit Buffer Control Entry (ABCE) utilized in master/slave communication
- FIG. 17 is a detailed flow diagram showing handling of the Audit Buffer Control Entry by the master
- FIG. 18 is a detailed flow diagram showing handling of the Audit Buffer Control Entry by the slave.
- FIG. 19 is a detailed flow diagram showing operation of the present invention during assumption of the master role by the slave components.
- the present invention is described in accordance with several preferred embodiments which are to be viewed as illustrative without being limiting. These preferred embodiments are based upon mainframe hardware components and various operating system software components available from Unisys Corporation and commodity hardware and software components available from Microsoft Corporation, Intel Corporation, and in the general personal computer market place. It is important, however, to view the present invention as equally applicable to systems employing various proprietary and non-proprietary environments.
- FIG. 1 is a detailed diagram showing the general relationship of the clustered hardware components.
- the commodity instruction processors Node 1 ( 18 ), Node 2 ( 20 ), and Node N ( 22 ) are preferably processor chips from industry compatible personal computers of the currently available technology. The total number of instruction processors is selected for the particular system application(s). Each of these instruction processors communicate with Data Base 24 and Duplex Copy 26 of Data Base 24 via busses 34 and 32 , respectively. This provides the redundancy necessary to recover from single point of failures within the data base.
- the instruction processors can communicate only with Master CLS (Cluster Lock Server) 10 and Slave CLS 12 via busses 28 and 30 , respectively. Redundant connections to redundant cluster lock servers ensures that single point control structure failures can also be accommodated. Because the sole interface between the instruction processors (i.e., Nodes 1 , 2 , . . . N) is with the Master CLS and Slave CLS, all services to be provided to an individual instruction processor must be provided by the Master CLS or Slave CLS.
- Master CLS Cluster Lock Server
- the primary services provided include: 1) services to synchronize updates to one or more shared databases; 2) services to facilitate inter-node communication; 3) services to provide for shared data among the nodes; 4) services to detect failing nodes in the cluster; and 5) duplication of all information contained in the Cluster Lock Server.
- the CLS is the “keeper” of all locks for shared data.
- the locking functionality includes: 1) ability for any node to request and release database locks; 2) ability to support multiple locking protocols; 3) asynchronous notification to the appropriate node when a lock has been granted; 4) automatic deadlock detection including the ability to asynchronously notify the nodes owning the locks that are deadlocked; and 5) support for two-phase commit processing using XA including holding locks in the “ready” state across recoveries of individual nodes.
- Inter-node communication services provide the capability for any node to send messages to and receive messages from any other node in the cluster.
- the ability for a node to broadcast to all other nodes is also provided.
- Shared data services provide the capability for the nodes to share the common data structures required to facilitate the management and coordination of the shared processing environment. This data is maintained within the CLS.
- Failed node detection services include heartbeat capability, the ability to move in-progress transactions from a failed node onto other nodes and the ability to isolate the failed node.
- the CLS's are duplexed in a master/slave relationship.
- the nodes communicate with either the master or the slave with each ensuring all data is duplicated in the other.
- the ability of a node to communicate with either the master or the slave at any time increases resiliency and availability as the loss of the physical connection from the node to either the master or the slave does not effect the node's ability to continue operating.
- the master is responsible for control and heartbeat functions.
- the ability to manually switch from the master to the slave is also provided in the preferred mode. Manual switching facilitates testing and maintenance. Of course, automatic switching occurs upon failure of the master CLS.
- FIG. 2 is a detailed block diagram 36 of a fully populated ES7000 Cellular Multi-Processor (CMP) system available from Unisys Corporation, employed in the preferred mode of practicing the present invention.
- CMP Cellular Multi-Processor
- Each of Master CLS 14 and Slave CLS 16 consists of one of these computers.
- the ES7000 CMP is a commercially available product available from Unisys Corporation now on the market.
- One key advantage of this computer is that it provides the cluster lock server inherent scalability. It should be readily apparent that the total processing load on a cluster lock server increases directly with the number of cluster instruction processors which are directly managed by that cluster lock server. Thus, it is of substantial value that a readily scalable processor is utilized for this purpose. It is further required that the cluster lock server have the inherent reliability (e.g., failure recovery) and system viability (e.g., memory and shared resource protection) functionality to assume responsibility for these aspects of the systems operation.
- a fully populated CMP contains up to four main memory storage units, MSU 40 , MSU 42 , MSU 44 , and MSU 46 . These are interfaced as shown through up to four cache memory systems, Cache 48 , Cache 50 , Cache 52 , and Cache 54 .
- Each of subpods 56 , 58 , 60 , 62 , 64 , 66 , 68 , and 70 contains up to four instruction processors, each having its own dedicated cache memories.
- Duplexed input/output processors 72 , 74 , 76 , 78 , 80 , 82 , 84 , and 86 interface with the cluster instruction processors (see FIG. 1 ), with other cluster lock server(s), and with host computers (see below).
- each of the cluster lock servers i.e., Master CLS 14 and Slave CLS 16
- each of the cluster lock servers preferably consists of an ES7000 CMP having from one to four MSU's, one to four Cache's, one to eight subpods, and one to eight duplexed input/output processors.
- FIG. 3 is a detailed block diagram showing implementation of the cluster processing system of the present invention within a practical configuration for high capacity and high reliability data processing.
- the major hardware components include Primary (or Master) Extended Processing Complex (XPC) 50 and Secondary (or Slave) XPC 52 , each of consisting of a cluster processing system as discussed above.
- each of the cluster processing systems i.e., XPC 50 and XPC 52
- the actual cluster instruction processors i.e., Nodes 1 –N
- XPC control 54 is a personal computer implemented as control console which interfaces with the XPC's via intercomputer paths 64 and 66 .
- the “external world” is shown as Host A 46 through Host D 48 , which are coupled to the XPC's via intercomputer paths 56 , 58 , 60 , and 62 .
- the host computers are preferably ClearPath Plus (OS 2200 based) mainframe computers available from Unisys Corporation.
- the paths are arranged to provide completely redundant paths amongst all major components.
- Paths 68 are the Primary/Secondary crossover paths wherein paths 72 and 74 are redundant request/status packet routing paths.
- Paths 70 are the Primary/Secondary synchronization paths.
- FIG. 4 is a detailed diagram 76 showing the format for data conversion between the XPC's (i.e., Primary XPC 50 and Secondary XPC 52 ) with Host A through Host D.
- Host A through Host D being ClearPath Plus (OS 2200 based) mainframes from Unisys Corporation, have a basic 36 bit word internal format, whereas the XPC's are basically byte oriented with 16 bit, 32 bit, and 64 bit words.
- a 64 bit data word 78 corresponds to a 36 bit 2200 data word 80 , and two 32 bit Intel DWORD's 82 .
- FIG. 5 is a diagram 84 showing the format of a Synchronization path Request/Response (SRR) packet.
- SRR Synchronization path Request/Response
- the first 48 words contain Descriptor 86 . This is followed by Header 88 .
- a number of control entries i.e., Control Entry # 1 90 , Control Entry # 2 92 , Control Entry # 3 , and Control Entry # 4 94 ) provide the actual control information.
- Each of the control entries has a variable length depending upon the function to be performed, as explained below.
- FIG. 6 is a diagram showing the format of SRR header 88 .
- the first 32 bit word contains version number 96 , which describes the version number of the service running on the platform. This is used to determine whether services running on primary/secondary platforms are compatible.
- SRR data count 98 indicating the number of 32 bit words within the SRR packet, and transaction number 100 .
- the last 32 bit word of the fixed length SRR header 88 contains Last Packet Flag 102 , which indicates that the current packet is the last packet of an audit sequence, and Packet Number 104 . If Last Packet Flag 102 is set and Packet Number 104 is equal to 1, the current SRR packet is the only packet in the audit sequence.
- FIG. 7 is a diagram showing the format of control entry go. Sequence Number 106 is available to keep track of the specific control entry. Function 108 determines the length of the control entry, because it determines the number of 32 bit words 110 – 112 required to define the function.
- the function code is an 8 bit number which decodes into 256 different numbers. Values 0, 7–16, and 33–255 are defined as invalid.
- the remaining defined function codes are as follows:
- FIG. 8 is a table showing allocation of memory as made by the Master CLS.
- FIG. 9 is a detailed diagram showing segment descriptor accessing.
- Segment Descriptor Pointer Table 114 consists of up to 1024—32-bit unsigned integer entries.
- SCP Segment Descriptor Pointer
- Segment Descriptor Pointer 118 consists of 32 words of 32 bits each. The first word is the test and set lock which is used to control access to the segment descriptors that hash to this entry. The remaining words point to up to eight entries within the Segment Descriptor Table, consisting of 1,024—32-bit unsigned integers. Word 17 of Segment Descriptor Pointer Entry 116 is hash link 0 ( 122 ), word 19 is hash link 1 ( 124 ), and word 31 is hash link 7 ( 126 ).
- the file name associated with hash link 0 is File Identifier 130 occupying the first two words of the Segment Descriptor Table.
- the corresponding File Relative Segment Offset 132 is located in the next word.
- Word 9 is Next Segment Descriptor 134 which points to the next associated segment (i.e., File Identifier 142 ) as shown.
- File name associated with hash link 1 is File Identifier 136 .
- File Relative Segment Offset 138 provides the corresponding relative offset. Because there are no further associated segment descriptors, Next Segment Descriptor 140 is null.
- File Relative Segment Offset 144 corresponds to File Identifier 142 .
- Next Segment Descriptor 146 which points to File Identifier 148 , located subsequent to extended area 128 .
- File Relative Segment Offset 150 corresponds thereto. There are no further associated segment descriptors so Next Segment Descriptor 152 is null.
- FIG. 10 is a detailed flow diagram showing lock entry accessing. It is via this locking system that the Cluster Lock Servers (see also FIG. 1 ) maintain control of the shared memory facilities.
- Lock Index Table consists of 65,636—32-bit unsigned integer entries.
- Example 156 is Object Hast +32 which points to Lock Index Entry 158 .
- Test and Set Lock 160 occupies the first word of Lock Index Entry 158 . It is used to control access to this lock list.
- Lock_List_Head 162 provides the address of the first lock entry that hashes to this location.
- Lock_List_Tail 164 supplies the address of the last lock entry that hashes to his location.
- Lock_List_Count 166 specifies the number of lock entries on this lock list.
- Lock Reverse Links 178 , 182 , 186 , and 190 supply the address of the previous lock entry in this lock list. Because it is associated with the first lock entry in the lock list, Lock Reverse Link 178 is Null.
- FIG. 11 is a detailed flow diagram of Process Entry Accessing in accordance with the preferred mode of the present invention.
- Process Index Table 192 consists of 4,096—32-bit unsigned integer entries.
- Sample entry 194 contains process hash +32 which identifies the Process Index Entry shown.
- Test and Set Lock 196 is used to control access to this process list.
- PRP_List_Head 198 address the first Process Registration Packet 204 that hashes to this location.
- PRP_List_Tail 200 supplies the address of the last Process Registration Packet that hashes to this location.
- PRP_List_Count 202 provides the number of Process Registration Packets on this process list.
- Process Registration Packets PRP 204 , 218 , 232 , and 246 , each consist of 16—32-bit unsigned integers.
- the first word is Process Identifier 206 , 220 , 234 , and 248 , respectively.
- the second word contains Host Identifier 210 , 224 , 238 , and 252 and Application Identifier 208 , 222 , 236 , and 250 , each of which define processing for the corresponding cluster instruction processor.
- Process Registration time 212 , 226 , 240 , and 254 is maintained because the Windows operating system employed within the individual cluster instruction processors has insufficient resolution for the system of the present invention. Part of the time is derived from system time and part from a code-maintained counter, which is sized to assure overall registration time uniqueness.
- Next PRP 214 , 228 , 242 , and 256 point to the next Process Registration Packet within the list.
- Previous PRP 216 , 230 , 244 , and 260 each point to the next previous PRP packet. Because PRP Packet 204 is the first packet in the list, Previous PRP is set to null.
- FIG. 12 is a detailed view of the Inter-Host Cache (IHC) data structures.
- IHC Inter-Host Cache
- Two validity lists are shown in the example, with validity entries for sub-applications 1:1 and 2:1.
- the sub-application entry is shown for sub-application 1:1, and contains the Most_Recent_Age of validity entries for sub-application 1:1.
- the Most_Recent_Age is used in conjunction with the sub-application size (SA_SIZE) to implement a MRU/LRU algorithm used to determine if the validity object is within the sub-application cache.
- SA_SIZE sub-application size
- Validity list entries which are outside of the LRU limit are removed whenever a validity operation encounters an ‘old’ entry. This is accomplished via a scan of the entire validity list after status is returned to the host.
- validity list ‘i’ contains two entries (A and B), one each for sub-application 1:1 and 2:1.
- Validity list ‘j’ contains three entries (X, Y and Z), two for sub-application 1:1 and one for sub-application 2:1.
- the sub-application entry is shown for sub-application 1:1, having a Most_Recent_Age of 683 and SA_Size of 100, yielding a “validity age’ range of 584–683.
- the validity entries in validity list ‘j’ (entries X and Y) are both within the range and are therefore within the sub-application cache.
- the validity entry B in validity list ‘i’ for sub-application cache is not within the range, and is therefore not with in the sub-application cache.
- the next IHC operation that references validity list ‘i’ will find and remove the ‘aged out’ entry.
- Sub-Application Table 262 contains 1,684—32-bit unsigned integer entries. Entry 264 contains a Sub-Application Index +16 which points to Sub-Application Entry 266 . The first word is Test and Set Lock 268 which controls access to the sub-application entry. MOST_RECENT_AGE 270 is the counter value for the most recently accessed validity entry in this sub-application. After its initial value of zero, the only operations allowed on this field are increments. SA_SIZE 272 is the number of validity entries for this sub-application. This is the value as seen by the hosts and not the actual number of validity entries that are on the validity lists.
- Validity Index Table 274 contains 65,638—32-bit unsigned integer entries.
- a first sample entry 276 contains Validity Hash (i+32) which points to Validity Index Entry 280 .
- a second sample entry 278 contains Validity Hash (j+32) which points to Validity Index Entry 290 .
- Validity Index Entry 280 has a Test and Set Lock 282 which is used to control access to this validity list.
- VL_HEAD 284 supplies the address of the first validity entry (i.e., Validity Entry A 300 ) that hashes to his location.
- VL_TAIL 286 contains the address of the last validity entry (i.e., Validity Entry B 314 ) that hashes to this location.
- VL_ITEM_CNT 288 specifies the number of validity entries on this validity list.
- Validity Index Entry 290 has a Test and Set Lock 292 which is used to control access to this validity list.
- VL_HEAD 294 supplies the address of the first validity entry (i.e., Validity Entry X 328 ) that hashes to his location.
- VL_TAIL 296 contains the address of the last validity entry (i.e., Validity Entry Z 356 ) that hashes to this location.
- VL_ITEM_CNT 298 specifies the number of validity entries on this validity list.
- Each of Validity Entries A 300 , B 314 , X 328 , Y 342 , and Z 356 an Object Identifier (i.e., 302 , 316 , 330 , 344 , and 358 ); a forward link (i.e., VL_FWD_LINK 306 , 318 , 332 , 346 , and 360 ); a reverse link (i.e., VL_REV_LINK 308 , 320 , 334 , 348 , and 362 ); and an age (i.e., SA_VL_AGE 310 , 322 , 336 , 350 , and 364 ).
- an Object Identifier i.e., 302 , 316 , 330 , 344 , and 358
- a forward link i.e., VL_FWD_LINK 306 , 318 , 332 , 346 , and 360
- a reverse link i.e
- FIG. 13 is detailed diagram showing the format of Validity Entry 370 with Refresh Pending Extension.
- Validity Entry 370 contains VL_FWD_LINK 374 and VL_REV_LINK 376 , as previously discussed.
- the validity entry i.e., Validity Entry 370
- Refresh Pending Entry-Process A 378 shows that Process A was the first initiated.
- the order of the processes in the RP Extension entries i.e., entries 384 , 386 , 388 , and 390 ) indicates that the processes initially referenced the validity entry in the order of A-B-C-D-E. However, subsequent references to the same validity entry occurred in a different order.
- the ‘RP List Order’ 382 maintains an LRU/MRU list of the current processes in the Refresh Pending entries.
- process B referenced the validity entry most recently
- process D referenced the validity entry least recently (i.e., or oldest reference).
- the RP Extension is addressed by RP_Extension_Address 380 .
- FIG. 14 is a detailed diagram showing messaging implementation.
- messages (represented by message buffers i 426 , j 430 , and k 434 ) reside on the ‘waiting message queue’ (WMQ), waiting for a wait-for-message (WFM) from each addressed host.
- WMQ waiting message queue
- WFM wait-for-message
- Message Control Table 394 points to Message Buffer i 426 via WMQ_HEAD 398 and to Message Buffer k 434 via WMQ_TAIL 400 .
- the three message buffers are internally linked via NEXT_MESSAGE 428 and 432 .
- Messages (represented by Message Buffers x 438 and y 442 ) have been sent to the host(s) but have not yet been acknowledged, and both are members of the ‘sent message queue’ (SMQ).
- SMQ_HEAD 402 points to Message Buffer x 438 and SMQ_TAIL 404 points to Message Buffer y 442 .
- Message Buffer ‘x’ 438 belongs to the host corresponding to the shown head-of-host (HOH) entry, and Message Buffer ‘y’ 442 belongs to some other host.
- NEXT_MESSAGE 440 links the two message buffers in the sent message queue.
- the message buffers are shown as separate entries for purposes of clarity and are derived from the Message Buffers in the Head-of-Host entries.
- the collection of Message Buffers in a HOH entry 410 are known as a Host Message Buffer Queue (HMBQ).
- HMBQ Host Message Buffer Queue
- Message Buffer ‘x’ 438 resides within the Message Buffers 422 of the shown HOH entry 410 .
- a Head-of-Host Table (HOHT) 406 contains an entry for each of the 64 possible hosts, each table entry contains an array of active Wait-For-Message commands (WFMs), an array of Unacknowledged Messages (UAMs), and an array of message buffers.
- WFMs Wait-For-Message commands
- UAMs Unacknowledged Messages
- MCT Message Control Table
- FIG. 15 is a detailed diagram showing integration of the cluster/locking, caching, and mass storage accessing functions into a single platform.
- the OS 2200 host 446 communicates directly with the single platform incorporating the 2200 IOP 446 , 2200 Locking 448 , and 2200 Interhost Messaging 450 functionality as shown.
- Large I/O Cache 452 Windows Operating system and Device Drivers 454 , and the Standard Channel I/O Processor as shown.
- the present invention incorporates each of these elements into a single platform. Therefore, communication with Tape 456 , DVD 458 , and Disk 460 , via paths 462 , 464 , and 466 , respectively, is accomplished within the same hardware entity as is interfaced directly with OS 2200 Host 446 .
- FIG. 16 shows the format of an Audit Buffer Control Entry (ABCE). Certain operations require a larger amount of audit data than can be contained within a single SRR Pkt (see also FIG. 5 ).
- the slave is required to queue all of the SRR Pkts that contain the audit data and receive an audit commit indication prior to initiating the data structure update procedure. This is accomplished by the use of the Audit Buffer Control Entry (ABCE) for that VI, which contains sufficient space to maintain a list of addresses of the SRR Pkts containing the audit data.
- the master is required to maintain a list of all SRR Pkts that have been sent to the slave.
- the master maintained list is used to allow resending of a list of SRR Pkts, which is required for recovering from sync path failures.
- Both master and slave contain sufficient Audit Buffer Control entries to allow simultaneous execution of the maximum number of multiple-SRR Pkt generating commands via the host paths.
- the first entry in an idle Audit Buffer Control Entry corresponding to a new audit sequence is time-stamped to allow detection of stalled (or improper) master operation.
- 32-bit word 0 is STATE. This is the current state of the Audit Buffer Control Entry, indicating whether it is idle, active, update in progress, or timed out.
- TRANSACTION NUMBER of 32-bit word 1 is a unique identifier defining an audit sequence that requires more than one SRR Pkt to contain the audit data.
- the TRANSACTION_INITIATION_TIME is the system time of the receipt of the first SRR Pkt containing the audit data.
- LAST_PKT_RECEIVED is the packet number of the SRR Pkt that was received with LAST_PKT_FLAG set.
- SRR_ADDRESS-SRR_PKT_NUM_x is the virtual address of an SRR Pkt whose packet number is “x”.
- the Audit Buffer Control Entry Pool is an array of 38 available Audit Buffer Control Entries. Access to this array uses the sync path VI number to compute the appropriate index value.
- FIG. 17 is a detailed flow diagram showing how the master handles the Audit Buffer Control Entry (ABCE).
- the process begins at element 484 .
- the state field (see also FIG. 16 ) is checked at element 486 .
- Element 488 determines if the state field indicates that the ABCE is active. If yes control is given to element 494 for further processing.
- element 490 sets the SRR Pkt TRANSACTION_NUMBER to ABCE TRANSACTION_NUMBER.
- Element 492 sets the state to active and sets all of the SRR_ADDRESS entries to null.
- FIG. 18 is a detailed flow diagram of the process for handling the ABCE by the slave. Entry is at element 500 .
- Element 502 selects the LAST_PKT_FLAG from the current SRR Pkt. If the flag is set, element 504 routes control to element 506 for a determination of the content of PKT_NUM. If it is set one, control is returned to element 512 . If the packet number is 1, element 508 shows that the current SRR packet contains all of the audit items and exit is via element 510 .
- Element 512 determines whether the ABCE state is idle. If yes, control is given to element 524 . If no, element 514 determines whether the ABCE state is active. If no, control is given to element 518 , that performs error recovery with exit via element 520 . If yes, element 516 determines whether the ABCE transaction number is the same as the SRR packet. If yes, control is routed to element 532 . If no, element 518 performs error recovery with exit via element 520 .
- Element 524 sets the ABCE state to active.
- the SRR packet number is moved to the current ABCE by element 526 .
- TRANSACTION_INITATION_TIME is loaded with the current time by element 528 .
- Element 530 sets all SRR ADDRESS entries to null. The entry address is computed at element 532 from SRR packet number.
- Element 534 determines if the entry was used. If yes, control is given to element 518 for error recovery. Otherwise control is routed to element 536 for continuation of the process.
- the SRR address is set to the ABCE address at element 536 .
- Element 538 determines if the last packet flag is set in the SRR packet. If yes, control is given to element 520 to set LAST_PKT_RECEIVED to the SRR packet number.
- Element 542 determines if LAST_PKT_RECEIVED is Null. If yes, control is given to element 544 indicating that all audit data has not been received. Exit is via element 546 .
- control is routed to element 548 which checks the SRR packet addresses of packet numbers prior to the last packet received. If any SRR_ADDRESS_SRR_PKT_NUM,_X prior to LAST_PKT_RECEIVED is null, control is given to element 544 by element 550 , because not all audit data has been received. If not, element 552 sets STATE to update in progress. Element 554 updates the data structures defined by the SRR packets of the current ABCE. Element 556 determines if an error has been generated by the update process. If yes, control is given to element 518 for error recovery. If not, element 558 sends an ‘audit update completed’ response via the Sync Path VI. Element 560 returns each SRR packet address from the current ABCE to the current sync path VI receive queue. Element 562 sets the ABCE state to idle. Exit is via element 564 .
- FIG. 19 is a detailed flow diagram showing the overall logic for failure recovery utilizing non-identical resources. This is readily distinguishable from typical redundancy recovery schemes which require replacement of a failing resource by an identical resource.
- the process begins at element 468 .
- the synchronization path communication is established at element 470 (see also FIG. 3 ).
- the slave transmits reference data to the master at element 472 .
- the only question that is important at element 474 is whether the slave has sufficient resources to accommodate the on-going processing activity. If it does, the transfer of responsibility from the master to the slave is possible, even if the slave does not have the same capacity as the master.
- Element 480 performs the resource allocation, and exit is via element 482 . If the slave has fewer resources, a request is sent to the master to reduce the resources to equal that of the slave. If successful, transfer of responsibility is possible If the slave has insufficient resources, element 476 notes that transfer of responsibility is not possible. The error exit is via element 478 .
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/346,489 US7178057B1 (en) | 2003-01-17 | 2003-01-17 | Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/346,489 US7178057B1 (en) | 2003-01-17 | 2003-01-17 | Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy |
Publications (1)
Publication Number | Publication Date |
---|---|
US7178057B1 true US7178057B1 (en) | 2007-02-13 |
Family
ID=37719794
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/346,489 Active 2024-08-21 US7178057B1 (en) | 2003-01-17 | 2003-01-17 | Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy |
Country Status (1)
Country | Link |
---|---|
US (1) | US7178057B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060239665A1 (en) * | 2005-04-21 | 2006-10-26 | Miller Sammye E Ii | Gas chromatograph having a radiant oven for analytical devices |
US20060277354A1 (en) * | 2005-06-07 | 2006-12-07 | Fujitsu Limited | Library apparatus |
US7290015B1 (en) * | 2003-10-02 | 2007-10-30 | Progress Software Corporation | High availability via data services |
US7877625B2 (en) | 2008-04-16 | 2011-01-25 | Invensys Systems, Inc. | Efficient architecture for interfacing redundant devices to a distributed control system |
US8560662B2 (en) * | 2011-09-12 | 2013-10-15 | Microsoft Corporation | Locking system for cluster updates |
US8930754B2 (en) | 2008-12-12 | 2015-01-06 | Bae Systems Plc | Apparatus and method for processing data streams |
US9170852B2 (en) | 2012-02-02 | 2015-10-27 | Microsoft Technology Licensing, Llc | Self-updating functionality in a distributed system |
CN107301250A (en) * | 2017-07-27 | 2017-10-27 | 南京南瑞集团公司 | A kind of Various database cooperates with backup method |
US11074322B1 (en) | 2017-07-17 | 2021-07-27 | Juniper Networks, Inc. | Adaptive capacity management for network licensing |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5940826A (en) | 1997-01-07 | 1999-08-17 | Unisys Corporation | Dual XPCS for disaster recovery in multi-host computer complexes |
US6629266B1 (en) * | 1999-11-17 | 2003-09-30 | International Business Machines Corporation | Method and system for transparent symptom-based selective software rejuvenation |
US20040030852A1 (en) * | 2002-03-18 | 2004-02-12 | Coombs David Lawrence | System and method for data backup |
US6883065B1 (en) * | 2001-11-15 | 2005-04-19 | Xiotech Corporation | System and method for a redundant communication channel via storage area network back-end |
-
2003
- 2003-01-17 US US10/346,489 patent/US7178057B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5940826A (en) | 1997-01-07 | 1999-08-17 | Unisys Corporation | Dual XPCS for disaster recovery in multi-host computer complexes |
US6629266B1 (en) * | 1999-11-17 | 2003-09-30 | International Business Machines Corporation | Method and system for transparent symptom-based selective software rejuvenation |
US6883065B1 (en) * | 2001-11-15 | 2005-04-19 | Xiotech Corporation | System and method for a redundant communication channel via storage area network back-end |
US20040030852A1 (en) * | 2002-03-18 | 2004-02-12 | Coombs David Lawrence | System and method for data backup |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10114710B1 (en) | 2003-10-02 | 2018-10-30 | Progress Software Corporation | High availability via data services |
US7290015B1 (en) * | 2003-10-02 | 2007-10-30 | Progress Software Corporation | High availability via data services |
US20060239665A1 (en) * | 2005-04-21 | 2006-10-26 | Miller Sammye E Ii | Gas chromatograph having a radiant oven for analytical devices |
US20060277354A1 (en) * | 2005-06-07 | 2006-12-07 | Fujitsu Limited | Library apparatus |
US7877625B2 (en) | 2008-04-16 | 2011-01-25 | Invensys Systems, Inc. | Efficient architecture for interfacing redundant devices to a distributed control system |
US20110099416A1 (en) * | 2008-04-16 | 2011-04-28 | Mendu Krishna R | Efficient Architecture for Interfacing Redundant Devices to a Distributed Control System |
US8516296B2 (en) | 2008-04-16 | 2013-08-20 | Invensys Systems, Inc. | Efficient architecture for interfacing redundant devices to a distributed control system |
US8930754B2 (en) | 2008-12-12 | 2015-01-06 | Bae Systems Plc | Apparatus and method for processing data streams |
US8560662B2 (en) * | 2011-09-12 | 2013-10-15 | Microsoft Corporation | Locking system for cluster updates |
US9058237B2 (en) | 2011-09-12 | 2015-06-16 | Microsoft Technology Licensing, Llc | Cluster update system |
US9170852B2 (en) | 2012-02-02 | 2015-10-27 | Microsoft Technology Licensing, Llc | Self-updating functionality in a distributed system |
US11074322B1 (en) | 2017-07-17 | 2021-07-27 | Juniper Networks, Inc. | Adaptive capacity management for network licensing |
CN107301250A (en) * | 2017-07-27 | 2017-10-27 | 南京南瑞集团公司 | A kind of Various database cooperates with backup method |
CN107301250B (en) * | 2017-07-27 | 2020-06-26 | 南京南瑞集团公司 | Multi-source database collaborative backup method |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5809527A (en) | Outboard file cache system | |
US7130924B2 (en) | System and method for synchronizing copies of data in a computer system | |
Davcev et al. | Consistency and Recovery Control for Replicated Files. | |
US7509322B2 (en) | Aggregated lock management for locking aggregated files in a switched file system | |
US6889249B2 (en) | Transaction aggregation in a switched file system | |
US7512673B2 (en) | Rule based aggregation of files and transactions in a switched file system | |
US7454422B2 (en) | Optimization for transaction failover in a multi-node system environment where objects' mastership is based on access patterns | |
KR100232247B1 (en) | Virtual shared disks with application-transparent recovery | |
US7013305B2 (en) | Managing the state of coupling facility structures, detecting by one or more systems coupled to the coupling facility, the suspended state of the duplexed command, detecting being independent of message exchange | |
US20130013562A1 (en) | Multi-node replication systems, devices and methods | |
US8856091B2 (en) | Method and apparatus for sequencing transactions globally in distributed database cluster | |
US7246255B1 (en) | Method for shortening the resynchronization time following failure in a computer system utilizing separate servers for redundancy | |
US7260589B2 (en) | High performance support for XA protocols in a clustered shared database | |
US5442785A (en) | Method and apparatus for passing messages between application programs on host processors coupled to a record lock processor | |
US20040133652A1 (en) | Aggregated opportunistic lock and aggregated implicit lock management for locking aggregated files in a switched file system | |
US20060161642A1 (en) | Method and apparatus for implementing high-performance, scaleable data processing and storage systems | |
US20060053139A1 (en) | Methods, systems, and computer program products for implementing single-node and cluster snapshots | |
US20060203718A1 (en) | Method, apparatus and program storage device for providing a triad copy of storage data | |
US7181642B1 (en) | Method for distributing the processing among multiple synchronization paths in a computer system utilizing separate servers for redundancy | |
EP2643771B1 (en) | Real time database system | |
JPH086854A (en) | Outboard-file-cache external processing complex | |
WO2007028248A1 (en) | Method and apparatus for sequencing transactions globally in a distributed database cluster | |
US6424988B2 (en) | Multicomputer system | |
US7178057B1 (en) | Method for allowing a clustered computer systems manager to use disparate hardware on each of the separate servers utilized for redundancy | |
US7155638B1 (en) | Clustered computer system utilizing separate servers for redundancy in which the host computers are unaware of the usage of separate servers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: UNISYS CORPORATION, MINNESOTAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEIDEMAN, MICHAEL J.;KONRAD, DENNIS R.;NOVAK, DAVID A.;REEL/FRAME:013685/0066Effective date: 20030117 |
|
AS | Assignment |
Owner name: CITIBANK, N.A.,NEW YORKFree format text: SECURITY AGREEMENT;ASSIGNORS:UNISYS CORPORATION;UNISYS HOLDING CORPORATION;REEL/FRAME:018003/0001Effective date: 20060531Owner name: CITIBANK, N.A., NEW YORKFree format text: SECURITY AGREEMENT;ASSIGNORS:UNISYS CORPORATION;UNISYS HOLDING CORPORATION;REEL/FRAME:018003/0001Effective date: 20060531 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION, DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS CORPORATION,PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION,DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION, DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS CORPORATION,PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION,DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601 |
|
AS | Assignment |
Owner name: DEUTSCHE BANK TRUST COMPANY AMERICAS, AS COLLATERAFree format text: PATENT SECURITY AGREEMENT (PRIORITY LIEN);ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:023355/0001Effective date: 20090731 |
|
AS | Assignment |
Owner name: DEUTSCHE BANK TRUST COMPANY AMERICAS, AS COLLATERAFree format text: PATENT SECURITY AGREEMENT (JUNIOR LIEN);ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:023364/0098Effective date: 20090731 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GENERAL ELECTRIC CAPITAL CORPORATION, AS AGENT, ILFree format text: SECURITY AGREEMENT;ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:026509/0001Effective date: 20110623 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0530Effective date: 20120229Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0777Effective date: 20120229Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0701Effective date: 20120229 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:028060/0908Effective date: 20120229 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:WELLS FARGO BANK, NATIONAL ASSOCIATION (SUCCESSOR TO GENERAL ELECTRIC CAPITAL CORPORATION);REEL/FRAME:044416/0358Effective date: 20171005 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |