US7290085B2 - Method and system for flexible and efficient protocol table implementation - Google Patents
Method and system for flexible and efficient protocol table implementation Download PDFInfo
- Publication number
- US7290085B2 US7290085B2 US10/989,751 US98975104A US7290085B2 US 7290085 B2 US7290085 B2 US 7290085B2 US 98975104 A US98975104 A US 98975104A US 7290085 B2 US7290085 B2 US 7290085B2
- Authority
- US
- United States
- Prior art keywords
- field
- key
- protocol
- key value
- entry
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L12/00—Data switching networks
- H04L12/28—Data switching networks characterised by path configuration, e.g. LAN [Local Area Networks] or WAN [Wide Area Networks]
- H04L12/2854—Wide area networks, e.g. public data networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0806—Multiuser, multiprocessor or multiprocessing cache systems
- G06F12/0815—Cache consistency protocols
- G06F12/0817—Cache consistency protocols using directory methods
Definitions
- the present invention relates generally to the implementation of protocols, such as cache coherence protocols.
- Protocol implementations can be hardwired, or they can be implemented in software using fully programmable processors or using programmable tables. Each implementation has drawbacks. Hardwired implementations increase development time and cannot be modified after tapeout. Software or fully programmable implementations are inefficient. Table-based programmable implementations typically require large table sizes for flexibility.
- the latter implementation uses a concatenation of event encoding and state encoding as an index into the table specifying the protocol. If x bits are used for encoding events and y bits are used for encoding states, then up to 2 x distinct events can be encoded, and up to 2 y can be defined.
- the table size is 2 x+y entries. The table is loadable to allow protocol flexibility for improving performance as well as for correcting protocol errors. However, the more flexibility that is allowed means the more the table size grows. In order to keep the size of the table practical, states need to be packed carefully using as few bits as possible. This reduces the flexibility of the protocol significantly.
- the number of distinct cases is typically much less than 2 x+y , where x and y are the binary logarithms of the number of events and states, respectively.
- the size of the protocol table can be reduced by adding a key field to each entry in the protocol table. A larger key field provided greater flexibility.
- the number of entries in the table can be independent of the key size. This allows more bits to be used in the key components, and more bits can be dedicated to components that are completely defined by the protocol, such as inter-node requests and responses and transient states. In addition, state bits need not be packed tightly, thus increasing flexibility.
- a protocol table in accordance with the invention includes key fields and action fields. Whenever a protocol event, such as an incoming command, requires protocol action, a key can be formed as follows. An event identifying component can be extracted, for example from an incoming message. Bits that identify the current state can be extracted from, for example, a pending buffer or a memory directory. A key is then formed to be used for associative lookup in the protocol table. The output of the lookup is a set of action fields in the table entry with a matching key field. If a match is not found between the formed key and a matching key field in the table, then there is a protocol error.
- a method for accessing a table comprising the steps of providing a content addressable table comprising a plurality of entries, wherein each entry includes a key field and an output field, constructing a key value from an input, searching the table for an entry whose key field matches the key value constructed from the input, and returning the output field of an entry whose key field matches that of the key value.
- the step of searching of the table comprises an associative search.
- the method includes generating an error if no entry on the table has a key field that matches the key value.
- the table further includes a mask field
- the step of searching the table further comprises seeking the entry whose key field matches a bitwise AND of its mask field with the key value.
- the table is a protocol table
- the output field of the protocol table is indicative of an action to be taken.
- the input includes a command and a state machine state indicator, wherein the key value is determined from the command and state indicator.
- a program storage device readable by a computer, tangibly embodying a program of instructions executable by the computer to perform the method steps for accessing a protocol table.
- FIG. 1 shows an example of a system environment incorporating the current invention.
- FIG. 2 shows an example implementation of a conventional protocol table.
- FIG. 3 shows the lookup method implementation of a conventional protocol table.
- FIG. 4 shows one embodiment using content addressable memory and key fields included in protocol table entries.
- FIG. 5 shows the method for lookup in an embodiment using content addressable memory and key fields included in protocol table entries.
- FIG. 6 shows an embodiment using content addressable memory, with key and mask fields included in protocol table entries.
- FIG. 7 shows a lookup method in an embodiment using content addressable memory, with key and mask fields included in protocol table entries.
- the present invention may be implemented in various forms of hardware, software, firmware, special purpose processors, or a combination thereof.
- the present invention is implemented as a combination of both hardware and software, the software being an application program tangibly embodied on a program storage device.
- the application program may be uploaded to, and executed by, a machine comprising any suitable architecture.
- the machine is implemented on a computer platform having hardware such as one or more central processing units (CPU), a random access memory (RAM), and input/output (I/O) interface(s).
- CPU central processing units
- RAM random access memory
- I/O input/output
- the computer platform also includes an operating system and microinstruction code.
- the various processes and functions described herein may either be part of the microinstruction code or part of the application program (or a combination thereof), which is executed via the operating system.
- various other peripheral devices may be connected to the computer platform such as an additional data storage device.
- FIG. 1 depicts an exemplary system environment for implementing the methods and systems of the present invention.
- the system includes one or more computing devices 110 , each of which can comprise, inter alia, one or more processors ands caches 120 , a shared/remote cache 130 , a main memory 140 , and a coherence controller 150 that includes a protocol table 160 .
- the computer devices 110 are interconnected through a system area network 100 , which can be a local area network, or a global network, such as the Internet.
- Computing device 110 can additionally include an I/O interface (not shown) which couples to a display (not shown) and various input devices such as a mouse and a keyboard (not shown).
- the support circuits can include circuits such as cache, power supplies, clock circuits, and a communication bus.
- the memory 140 can include random access memory (RAM), read only memory (ROM), disk drive, tape drive, etc., or a combinations thereof.
- the computing device 110 also includes an operating system and microinstruction code.
- the various processes and functions described herein can either be part of the microinstruction code or part of the application program (or combination thereof), which is executed via the operating system.
- various other peripheral devices can be connected to the computer platform such as an additional data storage device and a printing device.
- the system depicted here is exemplary, and the invention is applicable to any finite state machine (or protocol) where the number of possible inputs (states, operations, etc) is large.
- One such usage in current systems is that of cache coherence protocols for large scale shared memory multiprocessor systems, however, the invention can be implemented in any computing or network system that utilizes a protocol.
- FIG. 2 depicts an implementation of a conventional protocol table.
- Protocol table 200 includes 2 s entries 220 , which can be indexed by numbers in the range 0 . . . 2 s -1.
- Each protocol table entry 220 includes a protocol output 230 , which specifies an action result 240 of a protocol table lookup.
- the protocol table 200 can be accessed by a protocol input 210 , which includes a key comprising S bits. More precisely, if the range of possible key values is from 0 to M-1 then the table size is M entries. Note that the number of key values (say K) actually used can be much less than M.
- FIG. 3 depicts a lookup method 300 for the table depicted in FIG. 2 .
- a key value k is constructed at step 310 from the protocol inputs. These inputs include commands and an indicator of the current state. Commands can include requests/responses from local or remote nodes, memory directory or remote cache evictions, or internal commands.
- the internal state refers to the state of a state machine that is utilizing the protocol table, and includes the state of the command source node, a stable state such as a memory directory or remote cache directory access, a transient state as in the case of a pending buffer, address or resource conflicts, the status of data, or whether the command is for a last expected response.
- the protocol output is returned from the table at step 330 .
- a protocol table output is indicative of an action to be taken, and can include sending an outgoing message to a requester or home nodes an action on a pending buffer, updating a stable state, updating a transient state bit vector, transitioning to a new transient state, returning the status of data, performing an action on a remote cache, such as a read or write, etc.
- FIG. 4 depicts an implementation of one embodiment of a protocol table in accordance with the invention.
- Protocol table 400 is content addressable, and includes a plurality of table entries 420 .
- Each protocol table entry 420 further includes a key field 430 and an output field 440 , which will be the result 450 of a table lookup.
- the protocol input 410 includes a key of size S bits. If the number of possible key values is K, then the table size is K entries, or slightly more to accommodate possible changes.
- the table should be designed so that each key field is unique, so that there is exactly one output field for each possible key field.
- FIG. 5 depicts a lookup method 500 for the table depicted in FIG. 4 , in accordance with the invention.
- a key value k is constructed from the protocol inputs at step 510 .
- the inputs include a command and an indicator of the current state. Methods of forming a key value from a command indicator and a state indicator are known in the art.
- FIG. 6 depicts an implementation of another embodiment of a protocol table in accordance with the invention.
- Protocol table 600 is content addressable, and includes a plurality of table entries 620 .
- Each protocol table entry 620 further includes a key field 630 , a mask field 640 , and an output field 650 , which is produced as the result 660 of a protocol table lookup operation.
- the protocol input 610 includes a key k of S bits.
- the inclusion of a mask field in the protocol table entry can allow a smaller table size for a larger number of key values.
- the mask can cover all or part of the key field.
- a mask bit is clear (i.e., zero) if the corresponding key bit is immaterial to choosing the entry.
- the key field is compared to a function of the mask field and the input key value.
- the table should be designed so that each key field is unique, so that there is there is exactly one output field for each possible combination of input key value and mask field.
- FIG. 7 depicts a lookup method 700 for the table depicted in FIG. 6 , in accordance with the invention.
- a key value k is constructed from the protocol inputs at step 710 , as before.
- this function can be a bitwise AND of the mask and key value.
- a bitwise OR function can also be used by flipping all of the bits.
- the output portion 650 of the protocol table entry is returned at step 740 as the result of the table lookup operation.
- the entry chosen to provide the output of the protocol table lookup is the entry with a function of its mask field equal and the input key equal to its key field.
- a protocol error or exception is generated at step 750 .
- a table with more than one action for a given set of inputs and mask is an error condition.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/989,751 US7290085B2 (en) | 2004-11-16 | 2004-11-16 | Method and system for flexible and efficient protocol table implementation |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/989,751 US7290085B2 (en) | 2004-11-16 | 2004-11-16 | Method and system for flexible and efficient protocol table implementation |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060106976A1 US20060106976A1 (en) | 2006-05-18 |
US7290085B2 true US7290085B2 (en) | 2007-10-30 |
Family
ID=36387771
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/989,751 Expired - Fee Related US7290085B2 (en) | 2004-11-16 | 2004-11-16 | Method and system for flexible and efficient protocol table implementation |
Country Status (1)
Country | Link |
---|---|
US (1) | US7290085B2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100312973A1 (en) * | 2009-06-03 | 2010-12-09 | Micron Technology, Inc. | Methods for controlling host memory access with memory devices and systems |
CN103488505A (en) * | 2013-09-16 | 2014-01-01 | 杭州华为数字技术有限公司 | Patching method, device and system |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7882134B2 (en) * | 2008-04-28 | 2011-02-01 | Oracle International Corporation | Non-repeating random values in user specified formats and character sets |
US8571031B2 (en) * | 2009-10-07 | 2013-10-29 | Intel Corporation | Configurable frame processing pipeline in a packet switch |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
US6715057B1 (en) * | 2000-08-31 | 2004-03-30 | Hewlett-Packard Development Company, L.P. | Efficient translation lookaside buffer miss processing in computer systems with a large range of page sizes |
US6751698B1 (en) * | 1999-09-29 | 2004-06-15 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US6892273B1 (en) * | 2001-12-27 | 2005-05-10 | Cypress Semiconductor Corporation | Method and apparatus for storing mask values in a content addressable memory (CAM) device |
-
2004
- 2004-11-16 US US10/989,751 patent/US7290085B2/en not_active Expired - Fee Related
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
US6751698B1 (en) * | 1999-09-29 | 2004-06-15 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US20050053057A1 (en) * | 1999-09-29 | 2005-03-10 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US6715057B1 (en) * | 2000-08-31 | 2004-03-30 | Hewlett-Packard Development Company, L.P. | Efficient translation lookaside buffer miss processing in computer systems with a large range of page sizes |
US6892273B1 (en) * | 2001-12-27 | 2005-05-10 | Cypress Semiconductor Corporation | Method and apparatus for storing mask values in a content addressable memory (CAM) device |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100312973A1 (en) * | 2009-06-03 | 2010-12-09 | Micron Technology, Inc. | Methods for controlling host memory access with memory devices and systems |
US8225052B2 (en) | 2009-06-03 | 2012-07-17 | Micron Technology, Inc. | Methods for controlling host memory access with memory devices and systems |
CN103488505A (en) * | 2013-09-16 | 2014-01-01 | 杭州华为数字技术有限公司 | Patching method, device and system |
CN103488505B (en) * | 2013-09-16 | 2016-03-30 | 杭州华为数字技术有限公司 | Patch method, equipment and system |
Also Published As
Publication number | Publication date |
---|---|
US20060106976A1 (en) | 2006-05-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6725671B2 (en) | Adaptive Value Range Profiling for Extended System Performance | |
JP3640978B2 (en) | Memory address control device using hash address tag in page table | |
US8370575B2 (en) | Optimized software cache lookup for SIMD architectures | |
US7472253B1 (en) | System and method for managing table lookaside buffer performance | |
US8185692B2 (en) | Unified cache structure that facilitates accessing translation table entries | |
US5802571A (en) | Apparatus and method for enforcing data coherency in an information handling system having multiple hierarchical levels of cache memory | |
MX2014015347A (en) | Compare and replace dat table entry. | |
JP2011013858A (en) | Processor and address translating method | |
US9323798B2 (en) | Storing a key value to a deleted row based on key range density | |
JP2004171547A (en) | Method and apparatus for managing memory system | |
CN113569508B (en) | Database model construction method and device for data indexing and access based on ID | |
JP2007048296A (en) | Method, apparatus and system for invalidating multiple address cache entries | |
US7549035B1 (en) | System and method for reference and modification tracking | |
CN116049034A (en) | Verification method and device for cache consistency of multi-core processor system | |
US7290085B2 (en) | Method and system for flexible and efficient protocol table implementation | |
US6862675B1 (en) | Microprocessor and device including memory units with different physical addresses | |
JP2008512758A (en) | Virtual address cache and method for sharing data stored in virtual address cache | |
US7519792B2 (en) | Memory region access management | |
CN112930522A (en) | Universal pointer for data exchange in computer system with independent processor | |
CN105183668B (en) | Cache flush method and device | |
CN115269199A (en) | Data processing method and device, electronic equipment and computer readable storage medium | |
JP6222100B2 (en) | Data storage device, data storage method and program | |
KR20220054389A (en) | Optimizing Access to Page Table Entries on Processor-Based Devices | |
US9002810B1 (en) | Method and system for managing versioned structured documents in a database | |
KR100841130B1 (en) | Method and apparatus for efficient ordered stores over an interconnection network |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MICHAEL, MAGED M.;REEL/FRAME:015519/0899Effective date: 20041230 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20191030 |