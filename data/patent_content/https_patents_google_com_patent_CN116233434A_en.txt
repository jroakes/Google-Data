CN116233434A - Transform block level scan order selection for video coding - Google Patents
Transform block level scan order selection for video coding Download PDFInfo
- Publication number
- CN116233434A CN116233434A CN202310250203.5A CN202310250203A CN116233434A CN 116233434 A CN116233434 A CN 116233434A CN 202310250203 A CN202310250203 A CN 202310250203A CN 116233434 A CN116233434 A CN 116233434A
- Authority
- CN
- China
- Prior art keywords
- block
- scan order
- transform block
- transform
- candidate scan
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/129—Scanning of coding units, e.g. zig-zag scan of transform coefficients or flexible macroblock ordering [FMO]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/18—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a set of transform coefficients
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
- H04N19/61—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding in combination with predictive coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/80—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation
- H04N19/82—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation involving filtering within a prediction loop
Abstract
The present invention relates to transform block level scan order selection for video coding. The candidate scan order set is processed by identifying block ending locations within the transformed block for the candidate scan order. A cost value is determined for each of the candidate scan orders to reflect the number of coefficients of the transform block preceding the corresponding block ending location. In particular, the cost value of a candidate scan order reflects the number of zero-valued coefficients located before the end-of-block position of the candidate scan order. One of the candidate scan orders is then selected based on these cost values. The selected scan order is used to scan the coefficients in the transform block, such as for encoding Cheng Bite the coefficients or for decoding the coefficients into an output video stream.
Description
Description of the division
The present application belongs to the divisional application of Chinese patent application No.201880036916.9 whose application date is 2018, 9, 14.
Background
The digital video stream may represent video using a series of frames or still images. Digital video may be used in a variety of applications including, for example, video conferencing, high definition video entertainment, video advertising, or sharing user-generated video. Digital video streams may contain large amounts of data and consume large amounts of computing or communication resources of a computing device for processing, transmitting, or storing video data. Various schemes have been proposed to reduce the amount of data in a video stream, including encoding or decoding techniques.
Disclosure of Invention
According to an embodiment of the present disclosure, a method of decoding a current transform block according to a scan order selected based on transform coefficients of a previously decoded transform block includes identifying a location within the previously decoded transform block of a last non-zero transform coefficient of the transform coefficients as a first block end position according to a first candidate scan order. The method further includes identifying a location within a previously decoded transform block of a last non-zero one of the transform coefficients as a second block ending location according to a second candidate scan order. The method further includes determining a cost value for the first candidate scan order based on a number of transform coefficients located before the first block end position. The method further includes determining a cost value for the second candidate scan order based on a number of transform coefficients located before the second block ending location. The method further includes selecting one of the first candidate scan order or the second candidate scan order as a scan order for decoding the current transform block based on the cost value of the first candidate scan order and the cost value of the second candidate scan order. The method further includes decoding the current transform block using the selected scan order.
According to an embodiment of the present disclosure, an apparatus for decoding a current transform block according to a scan order selected based on transform coefficients of a previously decoded transform block includes a memory and a processor configured to execute instructions stored in the memory. The instructions include instructions to identify a location within a previously decoded transform block of a last non-zero transform coefficient of the transform coefficients as a first block end position according to a first candidate scan order. The instructions further include instructions for identifying a location within a previously decoded transform block of a last non-zero one of the transform coefficients as a second block ending location according to a second candidate scan order. The instructions further include instructions to determine a cost value for the first candidate scan order based on a number of transform coefficients located before the first block end position. The instructions further include instructions to determine a cost value for the second candidate scan order based on a number of transform coefficients located before the second block ending location. The instructions further include instructions to select one of the first candidate scan order or the second candidate scan order as the scan order for decoding the current transform block based on the cost value of the first candidate scan order and the cost value of the second candidate scan order. The instructions further include instructions for decoding the current transform block using the selected scan order.
A method of decoding a current transform block according to an embodiment of the present disclosure includes identifying a first number of zero-valued transform coefficients preceding a last non-zero coefficient of a previously decoded transform block according to a first candidate scan order. The method further includes identifying a second number of zero-valued transform coefficients preceding a last non-zero coefficient of the previously decoded transform block according to a second candidate scan order. The method further includes determining that the first number of zero-valued transform coefficients is less than the second number of zero-valued transform coefficients. The method further includes, in response to determining that the first number of zero-valued transform coefficients is less than the second number of zero-valued transform coefficients, decoding the current transform block using the first candidate scan order.
An apparatus for decoding a current transform block according to an embodiment of the present disclosure includes a memory and a processor configured to execute instructions stored in the memory. The instructions include instructions for: identifying a first number of zero-valued transform coefficients preceding a last non-zero coefficient of a previously decoded transform block according to a first candidate scan order, identifying a second number of zero-valued transform coefficients preceding the last non-zero coefficient of the previously decoded transform block according to a second candidate scan order, determining that the first number of zero-valued transform coefficients is less than the second number of zero-valued transform coefficients, and decoding the current transform block using the first candidate scan order in response to determining that the first number of zero-valued transform coefficients is less than the second number of zero-valued transform coefficients.
These and other aspects of the disclosure are disclosed in the following detailed description of the embodiments, the appended claims and the accompanying drawings.
Drawings
The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views.
Fig. 1 is a schematic diagram of a video encoding and decoding system.
Fig. 2 is a block diagram of an example of a computing device that may implement a sending station or a receiving station.
Fig. 3 is a diagram of a normal video stream to be encoded and then decoded.
Fig. 4 is a block diagram of an encoder according to an embodiment of the present disclosure.
Fig. 5 is a block diagram of a decoder according to an embodiment of the present disclosure.
Fig. 6 is a block diagram of a representation of a portion of a frame according to an embodiment of the present disclosure.
Fig. 7 shows a diagram of an example of a transform block and an example of a scan order for encoding or decoding the transform block according to an embodiment of the present disclosure.
Fig. 8 is a flow chart of an example of a technique for selecting a scan order for encoding or decoding a transform block.
Fig. 9 is a flow chart of an example of a technique for determining the number of zero-valued coefficients prior to a block end position in a transform block.
FIG. 10 is a flow chart of an example of a technique for selecting a scan order using accumulated cost values for neighboring transform blocks.
Fig. 11 illustrates a candidate scan order set according to an embodiment of the present disclosure.
Fig. 12 illustrates a current transform block and neighboring transform blocks of the current transform block within a video frame according to an embodiment of the present disclosure.
DETAILED DESCRIPTION OF EMBODIMENT (S) OF INVENTION
Video compression schemes may include encoding a video stream by dividing each image or frame of a video sequence into smaller portions, such as blocks, and generating an output bitstream using techniques that limit the information included in each block in the output. The coded bit stream may be decoded to recreate the block and source images from limited information. Common video compression and decompression techniques for encoding video streams or decoding encoded bitstreams include encoding quantized transform coefficients in transform blocks according to a scan order. The scan order converts a two-dimensional array of quantized transform coefficients (e.g., transform blocks from a two-dimensional planar rectangle) into a one-dimensional sequence. The coefficients are then processed according to their order in a one-dimensional sequence.
There may be many scan orders available for scanning the coefficients to be encoded or decoded. For example, the scanning order may scan the transform block row by row (e.g., raster or horizontal scan) starting from the top of the transform block, or scan the transform block column by column (e.g., vertical scan) starting from the left side of the transform block. In another example, the scan order may process coefficients in a direction that is not exactly horizontal or vertical (e.g., diagonal scan, zig-zag scan, etc.). Some scan orders may be more suitable for encoding or decoding coefficients than others in some cases. For example, the transform block may end up with a series of zeros. In this case, the end-of-block position is encoded to signal that all coefficients following the end-of-block position are zero-valued coefficients. However, the location of the end-of-block position depends on the scanning order used. This is because the patterns used to scan coefficients in the transform block differ between scan orders, and some patterns will locate the last non-zero coefficient faster than others. The efficiency of the encoder or decoder is improved by using a scan order that maximizes the number of zero-valued coefficients located after the end-of-block position in the transform block.
One solution to using such a scan order involves processing a super block (e.g., a 64 x 64 block within a frame) by identifying each non-zero coefficient in each transform block of the left and upper neighboring super blocks. For each of these non-zero coefficients, the values of neighboring coefficients (e.g., to the left or above the current non-zero coefficient in the same transform block) are processed and aggregated to determine the location of the non-zero coefficient relative to other non-zero coefficients in the transform block. The values of each non-zero coefficient in each transform block are clustered according to direction and then weighted according to the relative intensity of the direction. The direction with the lowest weighted aggregate value may then be selected. However, this solution is complex because it requires processing coefficients at the superblock level and is burdensome for the encoder or decoder because it requires processing all non-zero coefficients in all transform blocks of neighboring superblocks to select the scan order of the current superblock. Furthermore, this solution requires that the scanning order eventually selected for the current super block is used to scan the coefficients in all transform blocks of the current super block.
Embodiments of the present disclosure include systems and techniques for transform block level selection of scan orders. The set of candidate scan orders is processed by identifying, for each of the candidate scan orders, a block ending location within the transformed block. A cost value is determined for each of the candidate scan orders to reflect the number of coefficients of the transform block preceding the corresponding block ending location. In particular, the cost value of a candidate scan order reflects (e.g., may indicate or specify) the number of zero-valued coefficients that precede the block end position of the candidate scan order. The cost value may indicate a computational cost (e.g., an amount of computational resources) for the encoding coefficient. The cost value may depend on or indicate one or more parameters selected from the group of parameters consisting of: time for encoding coefficients, space for encoding coefficients (e.g., size of computer memory), number of operations for encoding coefficients (e.g., arithmetic operations), number of coefficients to encode, and bit cost (e.g., number of bits) for encoding (e.g., entropy encoding) coefficients. One of the candidate scan orders is then selected based on these cost values. The selected scan order is used to scan the coefficients in the transform block, such as for encoding Cheng Bite the coefficients or for decoding the coefficients into an output video stream. In some implementations, the selection of the scan order can include a processing cost value or ranking of candidate scan orders for neighboring transform blocks (e.g., within the same block, superblock, etc.) of the current transform block.
Further details of techniques for transform block level scan order selection are described herein first with reference to a system in which transform block level scan order selection may be implemented. Fig. 1 is a schematic diagram of a video encoding and decoding system 100. The transmitting station 102 may be, for example, a computer having a hardware internal configuration as described in fig. 2. However, other implementations of the sending station 102 are possible. For example, the processing of the sending station 102 may be distributed among multiple devices.
The network 104 may connect the transmitting station 102 and the receiving station 106 for encoding and decoding of video streams. In particular, the video stream may be encoded in the sending station 102 and the encoded video stream may be decoded in the receiving station 106. The network 104 may be, for example, the internet. Network 104 may also be a Local Area Network (LAN), wide Area Network (WAN), virtual Private Network (VPN), cellular telephone network, or any other device that transfers a video stream from transmitting station 102 to receiving station 106 (in this example).
In one example, the receiving station 106 may be a computer having an internal configuration of hardware as depicted in fig. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 may be distributed among multiple devices.
Other implementations of the video encoding and decoding system 100 are possible. For example, embodiments may omit network 104. In another embodiment, the video stream may be encoded and then stored for later transmission to the receiving station 106 or any other device having memory. In one embodiment, the receiving station 106 receives the encoded video stream (e.g., via the network 104, a computer bus, and/or some communication paths) and stores the video stream for later decoding. In an example embodiment, real-time transport protocol (RTP) is used to transport encoded video over network 104. In another embodiment, a transport protocol other than RTP may be used, such as a hypertext transfer protocol (HTTP) based video streaming protocol.
For example, when used in a video conferencing system, the sending station 102 and/or the receiving station 106 may include the capability to encode and decode both video streams as described below. For example, the receiving station 106 may be a video conference participant that receives the encoded video bitstream from a video conference server (e.g., the sending station 102) to decode and view, and further encodes and sends his or her own video bitstream to the video conference server for decoding and viewing by other participants.
Fig. 2 is a block diagram of an example of a computing device 200 that may implement a sending station or a receiving station. For example, computing device 200 may implement one or both of transmitting station 102 and receiving station 106 of fig. 1. Computing device 200 may be in the form of a computing system including multiple computing devices or one computing device, such as a mobile phone, tablet computer, laptop computer, notebook computer, desktop computer, or the like.
The processor 202 in the computing device 200 may be a conventional central processing unit. Alternatively, processor 202 may be another type of device or devices capable of manipulating or processing information now present or later developed. For example, while the disclosed embodiments may be implemented with one processor (e.g., processor 202) as shown, advantages in speed and efficiency may be realized through the use of more than one processor.
In an implementation, the memory 204 in the computing device 200 may be a Read Only Memory (ROM) device or a Random Access Memory (RAM) device. However, other suitable types of storage devices may be used as memory 204. Memory 204 may include code and data 206 that is accessed by processor 202 using bus 212. Memory 204 may also include an operating system 208 and application programs 210, with application programs 210 including at least one program that allows processor 202 to perform the techniques described herein. For example, application 210 may include applications 1 through N, which also include video encoding applications that perform the techniques described herein. Computing device 200 may also include secondary storage 214, which may be, for example, a memory card for use with a mobile computing device. Because video communication sessions may contain large amounts of information, they may be stored in whole or in part in secondary memory 214 and loaded into memory 204 as needed for processing.
Although fig. 2 depicts the processor 202 and memory 204 of the computing device 200 as being integrated into one unit, other configurations may be used. The operations of processor 202 may be distributed across multiple machines (where each machine may have one or more processors), which may be coupled directly or across a local area network or other network. Memory 204 may be distributed across multiple machines, such as network-based memory or memory in multiple machines performing the operations of computing device 200. Although depicted as a single bus, the bus 212 of the computing device 200 may be comprised of multiple buses. Further, secondary memory 214 may be directly coupled to other components of computing device 200 or may be accessible via a network and may include an integrated unit such as a memory card or multiple units such as multiple memory cards. Computing device 200 may thus be implemented in a variety of configurations.
Fig. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded. Video stream 300 includes video sequence 302. At the next level, the video sequence 302 includes a plurality of adjacent frames 304. Although three frames are depicted as adjacent frames 304, the video sequence 302 may include any number of adjacent frames 304. Adjacent frames 304 may then be further subdivided into individual frames, such as frame 306. At the next stage, the frame 306 may be divided into a series of planes or segments 308. For example, segment 308 may be a subset of frames that allow parallel processing. Segment 308 may also be a subset of frames that may separate video data into separate colors. For example, a frame 306 of color video data may include a luminance plane and two chrominance planes. Segment 308 may be sampled at different resolutions.
Regardless of whether frame 306 is divided into segments 308, frame 306 may be further subdivided into blocks 310, and blocks 310 may contain data corresponding to, for example, 16 x 16 pixels in frame 306. The block 310 may also be arranged to include data from one or more segments 308 of pixel data. The block 310 may also be any other suitable size, such as 4 x 4 pixels, 8 x 8 pixels, 16 x 8 pixels, 8 x 16 pixels, 16 x 16 pixels, or larger. Unless otherwise indicated, the terms block and macroblock (macroblock) are used interchangeably herein.
Fig. 4 is a block diagram of an encoder 400 according to an embodiment of the present disclosure. As described above, the encoder 400 may be implemented in the sending station 102, such as by providing a computer software program stored in a memory, such as the memory 204. The computer software program may include machine instructions that, when executed by a processor, such as processor 202, cause sending station 102 to encode video data in the manner described in fig. 4. Encoder 400 may also be implemented as dedicated hardware included in, for example, transmitting station 102. In a particularly desirable embodiment, encoder 400 is a hardware encoder.
The encoder 400 has the following stages to perform various functions in the forward path (shown by the real connection line) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy coding stage 408. Encoder 400 may also include a reconstruction path (shown by dashed connecting lines) to reconstruct the frames used to encode the future blocks. In fig. 4, the encoder 400 has the following stages to perform various functions in the reconstruction path: a dequantization stage 410, an inverse transformation stage 412, a reconstruction stage 414, and a loop filtering stage 416. Other structural variations of encoder 400 may be used to encode video stream 300.
When video stream 300 is presented for encoding, respective adjacent frames 304, such as frames 306, may be processed in units of blocks. At the intra/inter prediction stage 402, the corresponding block may be encoded using intra prediction (also referred to as intra prediction) or inter prediction (also referred to as inter prediction). In any case, a prediction block may be formed. In the case of intra prediction, a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter prediction, a prediction block may be formed from samples in one or more previously constructed reference frames.
Next, the prediction block may be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also referred to as a residual or prediction residual). The transform stage 404 transforms the residual using a block-based transform into transform coefficients, e.g., in the frequency domain. The quantization stage 406 converts the transform coefficients, referred to as quantized transform coefficients, into discrete quantum values using quantizer values or quantization stages. For example, the transform coefficients may be divided by the quantizer values and truncated.
The quantized transform coefficients are then entropy encoded by entropy encoding stage 408. The entropy encoded coefficients, as well as other information used to decode the block (e.g., which may include syntax elements such as those used to indicate the type of prediction used, the type of transform, motion vectors, quantizer values, etc.), are then output to the compressed bitstream 420. The compressed bitstream 420 may be formatted using various techniques, such as Variable Length Coding (VLC) or arithmetic coding. The compressed bitstream 420 may also be referred to as an encoded video stream or an encoded video bitstream, and these terms may be used interchangeably herein.
The reconstruction path (shown by the dashed connection) may be used to ensure that the encoder 400 and decoder 500 (described below with reference to fig. 5) use the same reference frame to decode the compressed bitstream 420. The reconstruction path performs functions similar to those that occur during decoding (described below with reference to fig. 5), including dequantizing the quantized transform coefficients at dequantization stage 410 and inverse transforming the dequantized transform coefficients at inverse transform stage 412 to produce a derived residual block (also referred to as a derived residual). At the reconstruction stage 414, the prediction block predicted at the intra/inter prediction stage 402 may be added to the derived residual to create a reconstructed block. Loop filter stage 416 may be applied to the reconstructed block to reduce distortion, such as block artifacts.
Other variations of encoder 400 may be used to encode compressed bit stream 420. In some implementations, for certain blocks or frames, the non-transform based encoder may directly quantize the residual signal without the transform stage 404. In some implementations, the encoder may combine the quantization stage 406 and the dequantization stage 410 in a common stage.
Fig. 5 is a block diagram of a decoder 500 according to an embodiment of the present disclosure. Decoder 500 may be implemented in receiving station 106, for example, by providing a computer software program stored in memory 204. The computer software program may include machine instructions that, when executed by a processor, such as processor 202, cause receiving station 106 to decode video data in the manner described in fig. 5. Decoder 500 may also be implemented in hardware included in, for example, transmitting station 102 or receiving station 106.
When the compressed bitstream 420 is presented for decoding, data elements within the compressed bitstream 420 may be decoded by the entropy decoding stage 502 to produce a quantized transform coefficient set. Dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by quantizer values), and inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derived residual, which may be the same as the derived residual created by inverse transform stage 412 in encoder 400. Using header information decoded from the compressed bitstream 420, the decoder 500 may use the intra/inter prediction stage 508 to create the same prediction block as created in the encoder 400 (e.g., at the intra/inter prediction stage 402).
At the reconstruction stage 510, a prediction block may be added to the derived residual to create a reconstructed block. Loop filter stage 512 may be applied to the reconstructed block to reduce block artifacts (e.g., using deblocking filtering, sample adaptive offset filtering, etc., or a combination thereof). Other filtering may be applied to the reconstructed block. In this example, post-filter stage 514 is applied to the reconstructed block to reduce block distortion and the result is output as output video stream 516. The output video stream 516 may also be referred to as a decoded video stream, and these terms may be used interchangeably herein. Other variations of decoder 500 may be used to decode compressed bit stream 420. In some implementations, the decoder 500 may generate the output video stream 516 without the post-filter stage 514.
Fig. 6 is a block diagram of a representation of a frame portion 600 of a frame 304, such as shown in fig. 3, in accordance with an embodiment of the present disclosure. As shown, the portion 600 of the frame includes four 64 x 64 blocks 610, two rows and two columns in a matrix or cartesian plane. In some embodiments, a 64×64 block may be the largest coding unit, n=64. Each 64 x 64 block may include four 32 x 32 blocks 620. Each 32 x 32 block may include four 16 x 16 blocks 630. Each 16 x 16 block may include four 8 x 8 blocks 640. Each 8 x 8 block 640 may include four 4 x 4 blocks 650. Each 4 x 4 block 650 may include 16 pixels, which may be represented in four rows and four columns in each respective block in a cartesian plane or matrix. The pixels may include information representing an image captured in the frame, such as luminance information, color information, and location information. In some implementations, a block such as the 16 x 16 block of pixels shown may include: a luminance block 660, the luminance block 660 may include luminance pixels 662; and two chroma blocks 670, 680, such as a U or Cb chroma block 670 and a V or Cr chroma block 680. The chroma blocks 670, 680 may include chroma pixels 690. For example, luminance block 660 may include 16×16 luminance pixels 662, and each chrominance block 670, 680 may include 8×8 chrominance pixels 690, as shown. Although one arrangement of blocks is shown, any arrangement may be used. Although fig. 6 shows an nxn block, in some embodiments, an nxm block may be used. For example, 32×64 blocks, 64×32 blocks, 16×32 blocks, 32×16 blocks, or any other size block may be used. In some embodiments, an nx2n block, a 2nxn block, or a combination thereof may be used.
In some implementations, video encoding may include in-order block level encoding. Ordered block level encoding may include encoding blocks of a frame in an order such as a raster scan order, where blocks may be identified and processed starting from a block or portion of a frame at the left top corner of the frame, and proceeding along left to right rows and top to bottom rows, each block being identified in turn for processing. For example, a 64×64 block in the top row and left column of a frame may be a first block that is encoded, and a 64×64 block immediately to the right of the first block may be a second block that is encoded. The second row from the top may be the second row encoded such that a 64 x 64 block in the left column of the second row may be encoded after a 64 x 64 block in the right-most column of the first row.
In some implementations, encoding the block may include using quadtree encoding, which may include encoding smaller block units within the block in raster scan order. For example, a 64×64 block shown in the left bottom corner of the frame portion shown in fig. 6 may be encoded using a quadtree encoding, in which a top left 32×32 block may be encoded, then a top right 32×32 block may be encoded, then a bottom left 32×32 block may be encoded, and then a bottom right 32×32 block may be encoded. Each 32 x 32 block may be encoded using quadtree encoding, where the top left 16 x 16 block may be encoded, then the top right 16 x 16 block may be encoded, then the bottom left 16 x 16 block may be encoded, then the bottom right 16 x 16 block may be encoded. Each 16 x 16 block may be encoded using quadtree encoding, where the top left 8 x 8 block may be encoded, then the top right 8 x 8 block may be encoded, then the bottom left 8 x 8 block may be encoded, then the bottom right 8 x 8 block may be encoded. Each 8 x 8 block may be encoded using quadtree encoding, where the top left 4 x 4 block may be encoded, then the top right 4 x 4 block may be encoded, then the bottom left 4 x 4 block may be encoded, and then the bottom right 4 x 4 block may be encoded. In some embodiments, for 16×16 blocks, 8×8 blocks may be omitted, and 16×16 blocks may be encoded using quadtree encoding, where the top-left 4×4 block may be encoded, and then the other 4×4 blocks in the 16×16 block may be encoded in raster scan order.
In some implementations, video encoding may include compressing information included in the original frame or the input frame by, for example, omitting some of the information in the original frame from the corresponding encoded frame. For example, encoding may include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
In some embodiments, reducing spectral redundancy may include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which may be referred to as a YUM or YCbCr color model or color space. Using the YUM color model may include using a relatively large amount of information to represent a luma component of a portion of a frame and using a relatively small amount of information to represent each corresponding chroma component of the portion of the frame. For example, a portion of a frame may be represented by a high resolution luma component, which may include 16 x 16 pixel blocks, and two lower resolution chroma components, each of which represents a portion of the frame as an 8 x 8 pixel block. The pixels may indicate a value in the range of 0 to 255, for example, and may be stored or transmitted using eight bits, for example. Although the present disclosure is described with reference to the YUM color model, any color model may be used.
In some implementations, reducing spatial redundancy may include transforming the block to the frequency domain using, for example, a Discrete Cosine Transform (DCT). For example, a unit of an encoder, such as transform stage 404 shown in fig. 4, may perform DCT using spatial frequency based transform coefficient values.
In some implementations, reducing temporal redundancy may include using similarities between frames to encode frames using relatively small amounts of data based on one or more reference frames, which may be previously encoded, decoded, and reconstructed frames of a video stream. For example, a block or pixel of the current frame may be similar to a spatially corresponding block or pixel of the reference frame. In some implementations, the blocks or pixels of the current frame may be similar to the blocks or pixels of the reference frame at different spatial locations, and reducing temporal redundancy may include generating motion information indicative of spatial differences or translations between the locations of the blocks or pixels in the current frame and the corresponding locations of the blocks or pixels in the reference frame.
In some implementations, reducing temporal redundancy may include identifying a portion of the reference frame that corresponds to a current block or pixel of the current frame. For example, a reference frame or a portion of a reference frame that may be stored in memory may be searched to identify a portion for generating a predictor for encoding a current block or pixel of a current frame with maximum efficiency. For example, the search may identify a portion of the reference frame for which differences in pixel values between the current block and a prediction block generated based on the portion of the reference frame are minimized, and may be referred to as a motion search. In some implementations, a portion of the reference frames that are searched may be limited. For example, a portion of a reference frame that may be referred to as a search region that is searched may include a limited number of rows of the reference frame. In one example, identifying a portion of the reference frame for generating the predictor may include calculating a cost function, such as a Sum of Absolute Differences (SAD) between pixels of a portion of the search region and pixels of the current block.
In some embodiments, the spatial difference between the location of the reference frame portion used to generate the predictor in the reference frame and the current block in the current frame may be represented as a motion vector. The difference in pixel values between the predictor block and the current block may be referred to as differential data, residual data, prediction error, or residual block. In some implementations, generating motion vectors may be referred to as motion estimation, and pixels of the current block may use Cartesian coordinates such as f x,y Indication is based on location. Similarly, pixels of the search area of the reference frame may use Cartesian coordinates such as r x,y Indication is based on location. The Motion Vector (MV) of the current block may be determined based on, for example, SAD between a pixel of the current frame and a corresponding pixel of the reference frame.
Although described herein with reference to a matrix or Cartesian representation of a frame for clarity, a frame may be stored, transmitted, processed, or any combination thereof in any data structure such that pixel values may be effectively represented for a frame or image. For example, the frames may be stored, transmitted, processed, or any combination thereof in a two-dimensional data structure such as the illustrated matrix, or in a one-dimensional data structure such as a vector array. In one embodiment, a representation of a frame, such as the two-dimensional representation shown, may correspond to a physical location of the frame as it is rendered as an image. For example, the location of the left corner of a block at the left corner of a frame may correspond to the physical location of the left corner of the frame rendered as an image.
In some implementations, block-based coding efficiency may be improved by dividing an input block into one or more prediction partitions, which may be rectangular (including square) partitions used for predictive coding. In some implementations, video encoding using predictive partitioning may include selecting a predictive partitioning scheme from a plurality of candidate predictive partitioning schemes. For example, in some embodiments, the candidate prediction partition scheme for a 64×64 coding unit may include rectangular-sized prediction partitions ranging in size from 4×4 to 64×64, such as 4×4, 4×8, 8×4, 8×8, 8×16, 16×8, 16×16, 16×32, 32×16, 32×32, 32×64, 64×32, or 64×64. In some embodiments, video encoding using predictive partitioning may include a complete predictive partitioning search, which may include selecting a predictive partitioning scheme by encoding the coding unit using each available candidate predictive partitioning scheme, and selecting the best scheme, such as the scheme that yields the smallest rate-distortion error.
In some implementations, encoding a video frame may include identifying a prediction partitioning scheme for encoding a current block, such as block 610. In some implementations, identifying a prediction partition scheme may include determining whether to encode a block as a single prediction partition of a maximum coding unit size (as shown, the maximum coding unit size may be 64×64) or to divide the block into multiple prediction partitions, which may correspond to sub-blocks, as shown, 32×32 blocks 620, 16×16 blocks 630, or 8×8 blocks 640, and may include determining whether to divide into one or more smaller prediction partitions. For example, a 64×64 block may be divided into four 32×32 prediction partitions. Three of the four 32×32 prediction partitions may be encoded as 32×32 prediction partitions, and the fourth 32×32 prediction partition may be further divided into four 16×16 prediction partitions. Three of the four 16×16 prediction partitions may be encoded as 16×16 prediction partitions, and the fourth 16×16 prediction partition may be further divided into four 8×8 prediction partitions, each of which may be encoded as an 8×8 prediction partition. In some implementations, identifying the predictive partition scheme may include using a predictive partition decision tree.
In some embodiments, video encoding of a current block may include identifying an optimal predictive coding mode from among a plurality of candidate predictive coding modes, which may provide flexibility in processing video signals having various statistical properties and may improve compression efficiency. For example, the video encoder may evaluate each candidate predictive coding mode to identify the best predictive coding mode, which may be, for example, a predictive coding mode that minimizes an error metric (e.g., rate distortion cost) for the current block. In some implementations, the complexity of searching for candidate predictive coding modes may be reduced by limiting the set of available candidate predictive coding modes based on similarity between the current block and the corresponding predictive block. In some implementations, by performing a directional refinement mode search, the complexity of searching each candidate predictive coding mode may be reduced. For example, metrics may be generated for a limited set of candidate block sizes (such as 16×16, 8×8, and 4×4); the error metric associated with each block size may be in descending order; and additional candidate block sizes, such as 4 x 8 and 8 x 4 block sizes, may be evaluated.
In some implementations, block-based coding efficiency may be improved by dividing the current residual block into one or more transform partitions, which may be rectangular (including square) partitions for transform coding. In some implementations, video encoding using transform partitioning may include selecting a uniform transform partitioning scheme. For example, the current residual block, such as block 610, may be a 64×64 block, and the transform may be performed without partitioning using a 64×64 transform.
Although not explicitly expressed in fig. 6, the residual block may be transform partitioned using a uniform transform partition scheme. For example, the 64×64 residual block may be transform-partitioned using a uniform transform partition scheme including four 32×32 transform blocks, using a uniform transform partition scheme including sixteen 16×16 transform blocks, using a uniform transform partition scheme including sixty-four 8×8 transform blocks, or using a uniform transform partition scheme including 256 4×4 transform blocks.
In some implementations, video encoding using transform partitioning may include identifying multiple transform block sizes for the residual block using multiple forms of transform partition encoding. In some implementations, the multi-form transform partition coding may include recursively determining whether to transform the current block using a current block size transform or by partitioning the current block and multi-form transform partition coding each partition. For example, the left bottom block 610 shown in fig. 6 may be a 64×64 residual block, and the multi-form transform partition coding may include determining whether to code a current 64×64 residual block using a 64×64 transform or to code a 64×64 residual block by dividing the 64×64 residual block into partitions such as four 32×32 blocks 620 and multi-form transform partition coding each partition. In some implementations, determining whether to transform partition the current block may be based on comparing a cost of transform encoding the current block using the current block size with a sum of costs of transform encoding each partition using the partition size.
Fig. 7 illustrates a diagram of an example of a transform block 700 and an example of scan orders 702-708 for encoding or decoding the transform block 700, according to an embodiment of the present disclosure. In some implementations, elements of an encoder, such as transform stage 404 of encoder 400 shown in fig. 4, may generate transform block 700. In some implementations, an element of an encoder, such as the quantization stage 406 of the encoder 400 shown in fig. 4, may quantize the transform block 700 to generate a quantized transform block. As used herein, unless explicitly indicated otherwise, the term "transform block" may refer to a block, matrix, or other data structure of transform coefficients or quantized transform coefficients. Although 4 x 4 blocks are shown for simplicity, any size block may be used. For example, 64×64 blocks, 64×32 blocks, 32×64 blocks, 32×32 blocks, 32×16 blocks, 16×32 blocks, 16×16 blocks, 16×8 blocks, 8×16 blocks, 8×8 blocks, 8×4 blocks, or 4×8 blocks may be used.
In transform block 700, shown in FIG. 7, the value shown for each location represents the transform coefficient value for the corresponding location. For clarity, the locations of transform coefficients of a block may be referred to as "locations," "locations," or variations thereof of the transform coefficients. As used herein, references to "proximity," "spatial proximity," or "distance" between transform coefficients may indicate a proximity or distance in a transform coefficient matrix representation of the transform coefficients of a block.
Some of the coefficients in transform block 700 are non-zero coefficients, such as those coefficients that do not have a value of "0". Other ones of the coefficients in transform block 700 are zero-valued coefficients, such as those coefficients having a value of "0". In some implementations, the transform block 700 may be processed in scan order to increase entropy encoding efficiency. For example, the scan order may favor grouping zero-valued coefficients at the end of a block, and consecutive zero-valued coefficients at the end of the block (i.e., zero coefficient tails) may be omitted from the output bitstream in the scan order without losing data.
In some implementations, encoding coefficients of transform block 700 may include encoding the coefficients in a scan order, such as horizontal scan order 702, vertical scan order 704, diagonal scan order 706, or zigzag scan order 708 encoding the coefficients of transform block 700. The values shown in each block of the scan order represent the order in which the corresponding coefficients are entropy encoded. Although 4 x 4 blocks are shown for simplicity, any size block may be used. For example, 64×64 blocks, 64×32 blocks, 32×64 blocks, 32×32 blocks, 32×16 blocks, 16×32 blocks, 16×16 blocks, 16×8 blocks, 8×16 blocks, 8×8 blocks, 8×4 blocks, or 4×8 blocks may be used.
Depending on the scanning order used, one of the non-zero coefficients will be the last non-zero coefficient scanned using the scanning order. For example, when a horizontal scan order 702 is used, the coefficients 701 of transform block 700 are the last non-zero coefficients. Thus, the block end position in the transform block 700 for the horizontal scan order 702 is identified as a location of the coefficient 701. In another example, when using the vertical scan order 704, the coefficients 703 of the transform block 700 are the last non-zero coefficients. Thus, the block end position in the transform block 700 of the vertical scan sequence 704 is identified as a location of the coefficient 703.
In some implementations, encoding the coefficients of the transform coefficient matrix in scan order may include generating a one-dimensional array of transform coefficients, such as a vector, by including each transform coefficient in the vector in scan order. For example, a DC coefficient, which may be a coefficient at the left top corner of the transform coefficient matrix, may be the first element of the scan order vector, may have a transform coefficient matrix position of (0, 0), and may have a scan order position of (0).
As used herein, the terms "sequential," "scan position," "vector position," or variants thereof, of transform coefficients refer to the relative position or index of the transform coefficients in a scan sequence or scan sequence vector. Although fig. 7 shows an example of a sequential scan pattern, the coefficients may be encoded using a discontinuous scan pattern.
Techniques for encoding or decoding video frames are now described with reference to fig. 8-10. Fig. 8 is a flow chart of an example of a technique 800 for selecting a scan order for encoding or decoding a transform block. Fig. 9 is a flow diagram of an example of a technique 900 for determining a number of zero-valued coefficients prior to a block end position in a transform block. Fig. 10 is a flow chart of an example of a technique 1000 for selecting a scan order using accumulated cost values for neighboring transform blocks.
One or more of the techniques 800, 900, or 1000 may be implemented as, for example, a software program that may be executed by a computing device, such as the sending station 102 or the receiving station 106. For example, a software program may include machine-readable instructions that may be stored in a memory, such as memory 204 or secondary storage 214, and that when executed by a processor, such as processor 202, may cause a computing device to perform one or more of techniques 800, 900, or 1000. One or more of the techniques 800, 900, or 1000 may be implemented using dedicated hardware or firmware. As explained above, some computing devices may have multiple memories or processors, and operations described in one or more of techniques 800, 900, or 1000 may be allocated using multiple processors, memories, or both.
For ease of explanation, the techniques 800, 900, and 1000 are each depicted and described as a series of steps or operations. However, steps or operations according to the present disclosure may occur in various orders and/or concurrently. Furthermore, other steps or operations not presented and described herein may be used. Furthermore, not all illustrated steps or operations may be required to implement techniques in accordance with the disclosed subject matter.
Referring first to fig. 8, a flow chart of an example of a technique 800 for selecting a scan order for encoding or decoding a transform block is shown. At 802, a block ending location is identified for each candidate scan order in a set of candidate scan orders. The end-of-block position for a given candidate scan order represents the location within the transform block of the last non-zero transform coefficient according to that candidate scan order. For example, the set of candidate scan orders may include a first candidate scan order and a second candidate scan order. The first block end position may be identified as a location within the transform block of the last non-zero transform coefficient of the transform coefficients according to the first candidate scan order, and the second block end position may be identified as a location within the transform block of the last non-zero transform coefficient of the transform coefficients according to the second candidate scan order.
The position of the end-of-block position within a transform block refers to the index of the last non-zero coefficient of the transform block in the one-dimensional sequence of transform coefficients of the transform block. For example, the candidate scan order may convert the transform coefficients of the transform block from a two-dimensional array to a one-dimensional sequence. The order of the transform coefficients in the one-dimensional sequence reflects the order in which those transform coefficients are processed according to the candidate scan order. The index of the last non-zero coefficient (e.g., the location of the end-of-block position) may be earlier or later in the one-dimensional sequence based on the particular type of candidate scan order.
Identifying the block ending location of the candidate scan order may include determining to encode or decode a particular number of transform coefficients of the transform block based on the candidate scan order (based on whether the transform block is encoded or decoded by the execution technique 800 is applicable). The particular number of transform coefficients includes non-zero transform coefficients and zero-valued transform coefficients to be encoded or decoded. More specifically, the particular number of transform coefficients includes each of all non-zero transform coefficients of the transform block and zero-valued transform coefficients of the transform block that precede the last non-zero coefficient. Embodiments and examples for determining the number of transform coefficients to be encoded or decoded are described below with reference to fig. 9.
At 804, a cost value is determined for the candidate scan order based on the block end position. For example, the cost value for the first candidate scan order may be determined based on the number of transform coefficients located before the end of block position for the first candidate scan order, and the cost value for the second candidate scan order may be determined based on the number of transform coefficients located before the end of block position for the second candidate scan order.
The cost value for the candidate scan order is determined based on the number of zero value coefficients within the transform block that precede the block ending position of the candidate scan order. In this way, a candidate scan order with an earlier end of block position in a one-dimensional sequence of transform coefficients will have a lower cost value than a candidate scan order with a later end of block position in the one-dimensional sequence. Embodiments and examples for determining the number of zero valued coefficients prior to the end of block position in a transform block are described below with reference to fig. 9.
At 806, one of the candidate scan orders is selected based on the cost value. The selecting may include selecting the lowest one of the cost values. For example, in the case where the set of candidate scan orders includes the first candidate scan order and the second candidate scan order described above, one of the first candidate scan order or the second candidate scan order is selected as the scan order for encoding or decoding the transform block based on the cost value of the first candidate scan order and the cost value of the second candidate scan order.
For example, selecting one of the first candidate scan order or the second candidate scan order may include determining whether a cost value of the first candidate scan order is less than a cost value of the second candidate scan order. In response to determining that the cost value of the first candidate scan order is less than the cost value of the second candidate scan order, the first candidate scan order is selected as the scan order for encoding or decoding the transform block. However, in response to determining that the cost value of the first candidate scan order is greater than the cost value of the second candidate scan order (e.g., or the cost value of the second candidate scan order is less than the cost value of the first candidate scan order), the second candidate scan order is selected as the scan order for encoding or decoding the transform block.
Alternatively, selecting the candidate scan orders may include more than simply determining which of the candidate scan orders has the lowest cost value. For example, the set of candidate scan orders may include the first and second candidate scan values and the third and fourth candidate scan values described above. The first candidate scan value and the second candidate scan value may scan the transform coefficients of the transform block according to the same angle but in different directions. For example, the first candidate scan order may have a 45 degree diagonal direction from bottom left to top right, and the second candidate scan order may have a 45 degree diagonal direction from top right to bottom left. The cost value may not be determined for both the first candidate scan order and the second candidate scan order. Instead, the first candidate scan order and the second candidate scan order may share a common cost value.
Thus, selecting one of the candidate scan orders may include determining that the first candidate scan order has the lowest cost value in the set of candidate scan orders. In this case, one of the first candidate scan order or the second candidate scan order will be selected. Determining which of the first candidate scan order or the second candidate scan order to select may include determining whether the third candidate scan order has a greater cost value than the fourth candidate scan order. For example, the third candidate scan order and the fourth candidate scan order have different cost values because they process the transform coefficients of the transform block in different orders. The different orders corresponding to the third candidate scan order and the fourth candidate scan order may indicate whether a bottom-left to top-right direction or a top-right to bottom-left direction is preferred.
In this way, in response to determining that the third candidate scan order has a greater cost value than the fourth candidate scan order, the first candidate scan order is selected as the scan order for encoding or decoding the transform block. However, in response to determining that the cost value of the third candidate scan order is equal to or less than the cost value of the fourth candidate scan order, the second candidate scan order is selected as the scan order for encoding or decoding the transform block.
At 808, the transform block is encoded or decoded according to the selected scan order. For example, a transform block may be encoded or decoded by scanning transform coefficients according to a selected scan order. At 810, the encoded or decoded transform block is output to an output element. For example, during an encoding operation, the encoded transform block is output to a bitstream, such as a bitstream that may be decoded later. In another example, during a decoding operation, the decoded transformed block is output for further processing by a decoder and then output to an output video stream, such as a video stream that may be displayed on a computing device of a receiving station (e.g., computing device 200 shown in fig. 2 and receiving station 106 shown in fig. 1).
In some implementations, the technique 800 may include determining cost values for at least some of the candidate scan orders based on transform coefficients of neighboring transform blocks of the transform block. Those cost values determined based on the transform coefficients of neighboring transform blocks may then be used to select a scan order for encoding or decoding the transform block. For example, cost values for candidate scan order determination determined based on transform coefficients of neighboring transform blocks may be accumulated to produce an accumulated cost value. In such an embodiment, selecting the scan order for encoding or decoding the transform block may include determining that one of the candidate scan orders has the lowest one of the accumulated cost values and selecting that candidate scan order as the scan order for encoding or decoding the transform block.
In another example, cost values for candidate scan orders determined based on transform coefficients of neighboring transform blocks may be ranked and accumulated to produce an accumulated rank. In such embodiments, selecting a scan order for encoding or decoding a transform block may include determining that one of the candidate scan orders has a ranking of the lowest accumulation of the accumulated ranks (e.g., closest to "1" when the ranking is expressed as a number), and selecting that candidate scan order as the scan order for encoding or decoding the transform block. Embodiments and examples of selecting a scan order using accumulated cost values or accumulated ranks of adjacent transform blocks are described below with reference to fig. 10.
Referring next to fig. 9, a flow chart of an example of a technique 900 for determining a number of zero-valued coefficients prior to a block end position in a transform block is shown. At 902, a total number of transform coefficients to encode or decode is determined. The total number of transform coefficients represents the number of transform coefficients that precede the end-of-block position according to a given candidate scan order. The total number of transform coefficients includes non-zero coefficients and non-zero coefficients.
At 904, a total number of non-zero coefficients in the transform block is determined. The total number of non-zero coefficients in the transformed block is the same for each candidate scan order, as each candidate scan order must be scanned before the end of block position of the candidate scan order can be identified.
At 906, a total number of zero-valued coefficients located within the transform block and prior to the block end position in the transform block is determined. Determining the total number of zero-valued coefficients located within the transform block and preceding the end-of-block position includes calculating a difference between the total number of transform coefficients to be encoded or decoded and the total number of non-zero coefficients in the transform block.
For example, technique 900 may be performed using the following pseudo code, where the cost value of a candidate scan order reflects the total number of zero-valued coefficients for which the candidate scan order is located within a transform block and before the end-of-block position:
initialize scan_cost as array of size S to all 0
determine nnz//number of non-zero coefficients in the transform block
for each i in{0,1,…,S-1}://for each candidate scan order in a set of S>1scan orders
determine eob[i]//number of coefficients to beencoded/decoded
scan_cost[i]＝eob[i]–nnz//cost value
(scan_cost is initialized to an array of all 0' S in size S)
Determining nnz// number of non-zero coefficients in a transform block
For each i:// for each candidate scan order in the set of S >1 scan orders in {0,1, …, S-1}
Determining eob [ i ]// number of coefficients to encode/decode
scan_cost [ i ] = eob [ i ] -nnz// cost value)
Thus, the cost value for a given candidate scan order is positively correlated with the total number of zero-valued coefficients of that candidate scan order that are located within the transformed block and that precede the end-of-block position.
In some implementations, the pseudocode may differ based on the implementation of technique 900. For example, the set of candidate scan orders may include more or less than six candidate scan orders. The cost value for a given candidate scan order may be some function of the total number of zero-valued coefficients located within the transform block and preceding the block end position in the transform block (e.g., equal to the total number of zero-valued coefficients located within the transform block and preceding the block end position in the transform block).
Referring next to fig. 10, a flow diagram of an example of a technique 1000 for selecting a scan order using accumulated cost values of neighboring transform blocks is shown. At 1002, a cost of candidate scan orders is determined for a current transform block. For example, the cost may be a cost value determined as described with reference to technique 800 shown in fig. 8. At 1004, an accumulated cost of candidate scan orders for left and above neighboring transform blocks of the current transform block is determined. For example, there may be one or more left-side neighboring transform blocks of the current transform block. In another example, there may be one or more upper neighboring transform blocks of the current transform block. In yet another example, there may be a combination of left and upper neighboring transform blocks of the current transform block.
Accumulating the costs of the candidate scan orders for the left and upper neighboring transform blocks includes determining a cost value for each candidate scan order for each neighboring transform block, and then jointly adding the cost values for the same candidate scan order to produce an accumulated cost. For example, the cost value of the first candidate scan order of the left neighboring transform block may be 1, and the cost value of the same first candidate scan order of the upper neighboring transform block may be 2. Thus, the accumulated cost for this first candidate scan order will be 3. At 1006, a candidate scan order with the lowest accumulation cost is selected. In another example, the cost values may be weighted by a factor (e.g., the corresponding transform block size) before being used to generate the accumulated cost.
In some implementations, technique 1000 can include selecting a scan order using an accumulated rank of adjacent transform blocks instead of an accumulated cost value. For example, instead of determining a cost value for a candidate scan order for a given transform block, the candidate scan orders available for the given transform block may be ranked according to one or more of a block ending location, a number of zero-valued coefficients preceding the block ending location, and the like. For example, the ranking may be expressed in numerical form, such as "1" reflecting the best ranking and "N" reflecting the lowest ranking, where N is the number of candidate scan orders in the set of candidate scan orders. The rankings of a given candidate scan order at each neighboring transform block may then be added to produce an accumulated ranking of that candidate scan order. The accumulated rank of each of the candidate scan orders may then be compared. Thus, one of the candidate scan orders selected for the current transform block has the lowest one of these accumulated ranks.
In some implementations, the technique 1000 may omit the cost of determining the candidate scan order for the current transform block. For example, the scan order selected for encoding or decoding the current transform block may be selected based only on the cost determined for the candidate scan orders of neighboring transform blocks. In such an embodiment, the operation of accumulating costs for the candidate scan orders does not include using the costs for the candidate scan orders determined for the current transform block.
In some implementations, cost values may not be available for some candidate scan orders for some of the neighboring transform blocks. For example, the current transform block may have been processed using the first, second, and third candidate scan orders (e.g., such that a cost value for each of the first, second, and third candidate scan orders is determined for the current transform block). The first neighboring transform block may have been processed using the first candidate scan order and the second candidate scan order, and the second neighboring transform block may have been processed using the second candidate scan order and the third candidate scan order. In this way, the cost value of the second candidate scan order may be used from the first neighboring transform block and the second neighboring transform block. However, the cost value of the first candidate scan order can only be used from the first neighboring transform block and the cost value of the third candidate scan order can only be used from the second neighboring transform block.
Fig. 11 illustrates a candidate scan order set 1100 according to an embodiment of the disclosure. The set of candidate scan orders includes candidate scan orders 1102, 1104, 1106, 1108, 1110, and 1112. Each of the candidate scan orders 1102, 1104, 1106, 1108, 1110 and 1112 have different angles and/or directions to scan coefficients in the transform block. For example, candidate scan order 1102 has a horizontal 0 degree angle, candidate scan order 1104 has a horizontal 22.5 degree angle from bottom left to top right, candidate scan order 1106 has a 45 degree angle from bottom left to top right, candidate scan order 1108 has a 45 degree angle from top right to bottom left, candidate scan order 1110 has a vertical 22.5 degree angle from top right to bottom left, and candidate scan order 1112 has a vertical 0 degree angle.
The candidate scan order set 1100 may be represented as an array or other data object that includes elements referenced by an index. For example, candidate scan order set 1100 may be referred to as candidate [ x ], where x= {0,1,2,3,4,5}. For example, candidate scan order 1102 has index [0], and is therefore referenced at candidate [0], candidate scan order 1104 has index [1], is therefore referenced at candidate [1], and so on. In some cases, the size of the candidate scan order set 1100 may be based on the size of the transform block for which the scan order is selected. For example, when the transform block is large, there may be a greater number of candidate scan orders.
However, the set of candidate scan orders from which the scan orders for encoding or decoding the transform block are selected may be different from the set of candidate scan orders 1100. For example, in addition to or instead of one or more of the candidate scan orders 1102, 1104, 1106, 1108, 1110, or 1112, other scan orders, such as one or more of the scan orders 702, 704, 706, or 708 shown in fig. 7, may be included in the candidate scan order set 1100. In another example, scan orders other than the scan orders shown in fig. 7 or 11 may be included in the set of candidate scan orders, such as in addition to or instead of one or more of the candidate scan orders 1102, 1104, 1106, 1108, 1110, or 1112.
Fig. 12 illustrates a current transform block 1200 and neighboring transform blocks 1202-1208 of the current transform block 1200 within a video frame in accordance with an embodiment of the present disclosure. Some implementations of the present disclosure include selecting a scan order for encoding or decoding a transform block based on cost values determined only with respect to a current transform block (e.g., current transform block 1200). However, other implementations include selecting a scan order based on cost values or ranks of neighboring transform blocks (e.g., neighboring transform blocks 1202-1208) from such a current transform block. For example, the technique 1000 described above with respect to fig. 10 may be performed to generate an accumulated cost or accumulated rank based on cost values or ranks determined for individual ones of the neighboring transform blocks 1202-1208, and a candidate scan order for the current transform block 1200 may be selected based on these accumulated costs or accumulated ranks. In this way, the neighboring transform blocks 1202-1208 may basically vote on a candidate scan order for encoding or decoding the current transform block 1200, such as based on an accumulated cost value or accumulated rank from the neighboring transform blocks 1202-1208.
The above-described aspects of encoding and decoding illustrate some examples of encoding and decoding techniques and hardware components configured to perform all or a portion of these examples of encoding and/or decoding techniques. However, it should be understood that encoding and decoding, as those terms are used in the claims, may mean compression, decompression, transformation, or any other processing or change of data.
The word "exemplary" is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as "exemplary" is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, the word "example" or "embodiment" is used to present concepts in a concrete fashion. As used in this application, the term "or" is intended to mean an inclusive "or" rather than an exclusive "or". That is, unless otherwise indicated or clearly indicated by the context, the recitation "X includes a or B" is intended to mean that it naturally encompasses its arrangement. That is, if X includes A; x comprises B; or X includes both A and B, then "X includes A or B" is satisfied in any of the foregoing cases. Furthermore, the articles "a" and "an" as used in this application and the appended claims should generally be construed to mean "one or more" unless specified otherwise or clear from context to be directed to a singular form. Furthermore, the use of the term "embodiment" or the term "one embodiment" throughout this disclosure does not mean the same example or embodiment unless so described.
Embodiments of the sending station 102 and/or receiving station 106 (as well as algorithms, methods, instructions, etc., stored thereon and/or executed thereby (including by the encoder 400 and decoder 500) may be implemented in hardware, software, or a combination thereof. The hardware (e.g., hardware component 1000 and/or hardware component 1100) may include, for example, a computer, an Intellectual Property (IP) core, an Application Specific Integrated Circuit (ASIC), a programmable logic array, an optical processor, a programmable logic controller, microcode, a microcontroller, a server, a microprocessor, a digital signal processor, or any other suitable circuit. In the claims, the term "processor" should be understood to encompass any of the foregoing hardware, whether alone or in combination. The terms "signal" and "data" may be used interchangeably. Furthermore, portions of the sending station 102 and the receiving station 106 are not necessarily implemented in the same manner.
Furthermore, in one aspect, for example, the sending station 102 or the receiving station 106 may be implemented by a computer program using a general purpose computer or general purpose processor, which when executed implements any of the respective methods, algorithms, and/or instructions described herein. Additionally or alternatively, for example, a special purpose computer/processor may be used that may contain other hardware for implementing any of the methods, algorithms, or instructions described herein.
The sending station 102 and the receiving station 106 may be implemented, for example, on computers in a video conferencing system. Alternatively, the sending station 102 may be implemented on a server and the receiving station 106 may be implemented on a device separate from the server, such as a handheld communication device. In this case, using the encoder 400, the transmitting station 102 may encode the content into an encoded video signal and transmit the encoded video signal to the communication device. The communication device may then decode the encoded video signal using decoder 500. Alternatively, the communication device may decode content stored locally on the communication device, e.g., content that is not transmitted by the transmitting station 102. Other suitable transmit and receive implementations are available. For example, the receiving station 106 may be a generally stationary personal computer rather than a portable communication device, and/or a device including the encoder 400 may also include the decoder 500.
Furthermore, all or part of the embodiments of the present disclosure may take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium may be any apparatus that can, for example, tangibly contain, store, communicate, or transport a program for use by or in connection with any processor. The medium may be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable media are also available.
The foregoing examples, embodiments and aspects have been described in order to facilitate an easy understanding of the present disclosure and are not limiting thereof. On the contrary, the disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation of the legal permit so as to encompass all such modifications and equivalent arrangements.
Claims (20)
1. A method, comprising:
for one or more previously decoded transform blocks, determining an accumulated cost value for each candidate scan order in a set of candidate scan orders available for block-level scan order selection, wherein determining the accumulated cost value for a given candidate scan order in the set of candidate scan orders comprises:
adding a first value representing a cost value for the given candidate scan order based on a block ending position within a first previously decoded transform block of the one or more previously decoded transform blocks and a second value representing a cost value for the given candidate scan order based on a block ending position within a second previously decoded transform block of the one or more previously decoded transform blocks;
selecting a candidate scan order in the set of candidate scan orders having a lowest accumulated cost value of the accumulated cost values as a scan order; and
The current transform block is decoded using the selected scan order.
2. The method of claim 1, wherein at least one of the first previously decoded transform block or the second previously decoded transform block is a neighboring transform block to the current transform block.
3. The method of claim 1, wherein the selected scan order is a first scan order, wherein the method further comprises:
the next transform block is decoded using a second scan order selected from the set of candidate scan orders.
4. The method of claim 1, wherein the accumulated cost value comprises an accumulated cost value determined for the current transform block.
5. The method of claim 1, wherein the first value is weighted based on a size of the first previously decoded transform block and the second value is weighted based on a size of the second previously decoded transform block.
6. The method of claim 1, wherein the accumulated cost value is represented as an accumulated ranking of corresponding candidate scan orders in the set of candidate scan orders, wherein a candidate scan order selected as the scan order has a lowest accumulated ranking of the accumulated ranks.
7. The method of claim 1, wherein the first previously decoded transform block is a left neighbor transform block of the current transform block and the second previously decoded transform block is an upper neighbor transform block of the current transform block.
8. A method, comprising:
for one or more previously encoded transform blocks, determining an accumulated cost value for each candidate scan order in a set of candidate scan orders available for block-level scan order selection, wherein determining the accumulated cost value for a given candidate scan order in the set of candidate scan orders comprises:
adding a first value representing a cost value for the given candidate scan order based on a block ending position within a first previously encoded transform block of the one or more previously encoded transform blocks and a second value representing a cost value for the given candidate scan order based on a block ending position within a second previously encoded transform block of the one or more previously encoded transform blocks;
selecting a candidate scan order in the set of candidate scan orders having a lowest accumulated cost value of the accumulated cost values as a scan order; and
The current transform block is encoded into the output bitstream using the selected scan order.
9. The method of claim 8, wherein determining an accumulated cost value for a given candidate scan order in the set of candidate scan orders comprises:
a cost value determined based on a block ending location within the current transform block and based on a block ending location within each of the one or more previously encoded transform blocks is added.
10. The method of claim 8, wherein the selected scan order is a first scan order, wherein the method further comprises:
the next transform block is encoded using a second scan order selected from the set of candidate scan orders.
11. The method of claim 8, wherein the accumulated cost value comprises an accumulated cost value determined for the current transform block.
12. The method of claim 8, wherein the first value is weighted based on a size of the first previously encoded transform block and the second value is weighted based on a size of the second previously encoded transform block.
13. The method of claim 8, wherein the accumulated cost value is represented as an accumulated ranking of corresponding candidate scan orders in the set of candidate scan orders, wherein a candidate scan order selected as the scan order has a lowest accumulated ranking of the accumulated ranks.
14. The method of claim 8, wherein the first previously encoded transform block is a left neighbor transform block of the current transform block and the second previously encoded transform block is an upper neighbor transform block of the current transform block.
15. A method, comprising:
decoding a current transform block in a scan order selected at a block level based on accumulated cost values determined for one or more previously compiled transform blocks;
wherein for each candidate scan order in a set of candidate scan orders available for block-level scan order selection, an accumulated cost value of the accumulated cost values is determined by adding a first value representing a cost value of the candidate scan orders based on block end positions within a first previously compiled transform block of the one or more previously compiled transform blocks and a second value representing a cost value of the candidate scan orders based on block end positions within a second previously compiled transform block of the one or more previously compiled transform blocks, and wherein the candidate scan order having the lowest accumulated cost value of the accumulated cost values is selected as the scan order.
16. The method of claim 15, wherein the first value is weighted based on a size of the first previously compiled transform block and the second value is weighted based on a size of the second previously compiled transform block.
17. The method of claim 15, wherein determining an accumulated cost value for a given candidate scan order in the set of candidate scan orders comprises:
a cost value determined based on a block ending location within the current transform block and based on a block ending location within at least one of the one or more previously compiled transform blocks is added.
18. The method of claim 15, wherein the accumulated cost value comprises an accumulated cost value determined for the current transform block.
19. The method of claim 15, wherein the accumulated cost value is represented as an accumulated ranking of corresponding candidate scan orders in the set of candidate scan orders, wherein a candidate scan order selected as the scan order has a lowest accumulated ranking of the accumulated ranks.
20. The method of claim 15, wherein the first previously decoded transform block is a left neighbor transform block of the current transform block and the second previously decoded transform block is an upper neighbor transform block of the current transform block.
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762599325P | 2017-12-15 | 2017-12-15 | |
US62/599,325 | 2017-12-15 | ||
US15/880,939 | 2018-01-26 | ||
US15/880,939 US10382758B2 (en) | 2017-12-15 | 2018-01-26 | Transform block-level scan order selection for video coding |
PCT/US2018/051036 WO2019118026A1 (en) | 2017-12-15 | 2018-09-14 | Transform block-level scan order selection for video coding |
CN201880036916.9A CN110741636B (en) | 2017-12-15 | 2018-09-14 | Transform block level scan order selection for video coding |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880036916.9A Division CN110741636B (en) | 2017-12-15 | 2018-09-14 | Transform block level scan order selection for video coding |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116233434A true CN116233434A (en) | 2023-06-06 |
Family
ID=66814040
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202310250203.5A Pending CN116233434A (en) | 2017-12-15 | 2018-09-14 | Transform block level scan order selection for video coding |
CN201880036916.9A Active CN110741636B (en) | 2017-12-15 | 2018-09-14 | Transform block level scan order selection for video coding |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880036916.9A Active CN110741636B (en) | 2017-12-15 | 2018-09-14 | Transform block level scan order selection for video coding |
Country Status (4)
Country | Link |
---|---|
US (2) | US10382758B2 (en) |
EP (1) | EP3725076B1 (en) |
CN (2) | CN116233434A (en) |
WO (1) | WO2019118026A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR102030384B1 (en) * | 2018-06-19 | 2019-11-08 | 광운대학교 산학협력단 | A method and an apparatus for encoding/decoding residual coefficient |
US11606568B1 (en) * | 2021-08-18 | 2023-03-14 | Meta Platforms, Inc. | End-of-block detection of quantized transform coefficient matrices in video encoding |
CN113873252B (en) * | 2021-09-27 | 2023-12-19 | 上海哔哩哔哩科技有限公司 | Image processing method and device, electronic equipment and storage medium |
Family Cites Families (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8311119B2 (en) * | 2004-12-31 | 2012-11-13 | Microsoft Corporation | Adaptive coefficient scan order |
WO2007063472A2 (en) * | 2005-11-30 | 2007-06-07 | Koninklijke Philips Electronics N.V. | Encoding method and apparatus applying coefficient reordering |
US8428133B2 (en) | 2007-06-15 | 2013-04-23 | Qualcomm Incorporated | Adaptive coding of video block prediction mode |
EP2182732A1 (en) * | 2008-10-28 | 2010-05-05 | Panasonic Corporation | Switching between scans in image coding |
US8737613B2 (en) * | 2008-11-20 | 2014-05-27 | Mediatek Inc. | Scanning methods of transform-based digital data processing that conditionally adjust scan order according to characteristics information and related apparatus thereof |
US9641846B2 (en) * | 2010-10-22 | 2017-05-02 | Qualcomm Incorporated | Adaptive scanning of transform coefficients for video coding |
US20120163456A1 (en) * | 2010-12-22 | 2012-06-28 | Qualcomm Incorporated | Using a most probable scanning order to efficiently code scanning order information for a video block in video coding |
US20120236931A1 (en) * | 2010-12-23 | 2012-09-20 | Qualcomm Incorporated | Transform coefficient scan |
KR101739580B1 (en) * | 2010-12-30 | 2017-05-25 | 에스케이 텔레콤주식회사 | Adaptive Scan Apparatus and Method therefor |
US9414056B2 (en) * | 2011-01-13 | 2016-08-09 | Samsung Electronics Co., Ltd. | Video-encoding method and apparatus for same and video-decoding method and apparatus for same using a selective scan mode |
CN102651816B (en) * | 2011-02-23 | 2014-09-17 | 华为技术有限公司 | Method and device for scanning transformation coefficient block |
US9338449B2 (en) | 2011-03-08 | 2016-05-10 | Qualcomm Incorporated | Harmonized scan order for coding transform coefficients in video coding |
GB2496194A (en) * | 2011-11-07 | 2013-05-08 | Sony Corp | Entropy encoding video data using reordering patterns |
US9386306B2 (en) | 2012-08-15 | 2016-07-05 | Qualcomm Incorporated | Enhancement layer scan order derivation for scalable video coding |
EP2946553B1 (en) * | 2013-01-16 | 2019-01-02 | BlackBerry Limited | Transform coefficient coding for context-adaptive binary entropy coding of video |
US11223832B2 (en) * | 2014-07-24 | 2022-01-11 | Qualcomm Incorporated | Methods and apparatus for encoding video data using block palettes and sub-block and pixel scanning orders |
KR102159252B1 (en) * | 2016-02-12 | 2020-10-14 | 후아웨이 테크놀러지 컴퍼니 리미티드 | Method and apparatus for selecting the scan order |
CN108605133B (en) * | 2016-02-12 | 2020-10-23 | 华为技术有限公司 | Method and device for selecting scanning order |
GB2557335A (en) * | 2016-12-07 | 2018-06-20 | Sony Corp | Image data encoding and decoding |
-
2018
- 2018-01-26 US US15/880,939 patent/US10382758B2/en active Active
- 2018-09-14 CN CN202310250203.5A patent/CN116233434A/en active Pending
- 2018-09-14 WO PCT/US2018/051036 patent/WO2019118026A1/en unknown
- 2018-09-14 CN CN201880036916.9A patent/CN110741636B/en active Active
- 2018-09-14 EP EP18779973.9A patent/EP3725076B1/en active Active
-
2019
- 2019-08-08 US US16/535,154 patent/US10951894B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US10382758B2 (en) | 2019-08-13 |
US20190191164A1 (en) | 2019-06-20 |
CN110741636A (en) | 2020-01-31 |
US10951894B2 (en) | 2021-03-16 |
WO2019118026A1 (en) | 2019-06-20 |
US20190364281A1 (en) | 2019-11-28 |
CN110741636B (en) | 2023-03-21 |
EP3725076A1 (en) | 2020-10-21 |
EP3725076B1 (en) | 2023-08-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN107027038B (en) | Dynamic reference motion vector coding mode | |
CN107027032B (en) | Method and device for partitioning motion vector of last frame | |
US10506240B2 (en) | Smart reordering in recursive block partitioning for advanced intra prediction in video coding | |
CN113491129B (en) | Adaptive filter intra prediction mode in image/video compression | |
CN112203088B (en) | Transform selection for non-baseband signal coding | |
CN110741641B (en) | Method and apparatus for video compression | |
US11917156B2 (en) | Adaptation of scan order for entropy coding | |
US10951894B2 (en) | Transform block-level scan order selection for video coding | |
US10523944B2 (en) | Modifying a scan order to limit scan distance | |
WO2019036080A1 (en) | Constrained motion field estimation for inter prediction | |
WO2018222238A1 (en) | Improved coding of intra-prediction modes | |
KR20200002035A (en) | Dual Deblocking Filter Thresholds | |
GB2547754A (en) | Dynamic reference motion vector coding mode | |
WO2024081010A1 (en) | Region-based cross-component prediction |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |