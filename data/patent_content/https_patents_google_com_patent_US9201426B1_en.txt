US9201426B1 - Reverse iteration of planning data for system control - Google Patents
Reverse iteration of planning data for system control Download PDFInfo
- Publication number
- US9201426B1 US9201426B1 US14/183,771 US201414183771A US9201426B1 US 9201426 B1 US9201426 B1 US 9201426B1 US 201414183771 A US201414183771 A US 201414183771A US 9201426 B1 US9201426 B1 US 9201426B1
- Authority
- US
- United States
- Prior art keywords
- balloon
- time
- flight
- contingent
- sequence
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 230000002441 reversible effect Effects 0.000 title description 32
- 238000000034 method Methods 0.000 claims abstract description 97
- 230000009471 action Effects 0.000 claims description 98
- 238000003860 storage Methods 0.000 claims description 45
- 230000006870 function Effects 0.000 claims description 34
- 238000013500 data storage Methods 0.000 claims description 9
- 230000003287 optical effect Effects 0.000 description 47
- 238000004891 communication Methods 0.000 description 32
- 238000007796 conventional method Methods 0.000 description 18
- 230000008569 process Effects 0.000 description 17
- 239000007789 gas Substances 0.000 description 12
- 239000000463 material Substances 0.000 description 11
- 239000013598 vector Substances 0.000 description 11
- 230000008859 change Effects 0.000 description 9
- 238000004088 simulation Methods 0.000 description 8
- 230000000670 limiting effect Effects 0.000 description 7
- 239000005437 stratosphere Substances 0.000 description 7
- 238000010586 diagram Methods 0.000 description 5
- 238000009826 distribution Methods 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 238000013459 approach Methods 0.000 description 4
- 230000001413 cellular effect Effects 0.000 description 4
- 238000013461 design Methods 0.000 description 4
- 230000033001 locomotion Effects 0.000 description 4
- 239000007787 solid Substances 0.000 description 4
- UFHFLCQGNIYNRP-UHFFFAOYSA-N Hydrogen Chemical compound [H][H] UFHFLCQGNIYNRP-UHFFFAOYSA-N 0.000 description 2
- 230000003044 adaptive effect Effects 0.000 description 2
- FFBHFFJDDLITSX-UHFFFAOYSA-N benzyl N-[2-hydroxy-4-(3-oxomorpholin-4-yl)phenyl]carbamate Chemical compound OC1=C(NC(=O)OCC2=CC=CC=C2)C=CC(=C1)N1CCOCC1=O FFBHFFJDDLITSX-UHFFFAOYSA-N 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 230000003247 decreasing effect Effects 0.000 description 2
- 238000009472 formulation Methods 0.000 description 2
- 239000001307 helium Substances 0.000 description 2
- 229910052734 helium Inorganic materials 0.000 description 2
- SWQJXJOGLNCZEY-UHFFFAOYSA-N helium atom Chemical compound [He] SWQJXJOGLNCZEY-UHFFFAOYSA-N 0.000 description 2
- 239000001257 hydrogen Substances 0.000 description 2
- 229910052739 hydrogen Inorganic materials 0.000 description 2
- 239000000203 mixture Substances 0.000 description 2
- 229910001120 nichrome Inorganic materials 0.000 description 2
- 230000036961 partial effect Effects 0.000 description 2
- 238000010248 power generation Methods 0.000 description 2
- 230000029305 taxis Effects 0.000 description 2
- 230000002123 temporal effect Effects 0.000 description 2
- 229920002799 BoPET Polymers 0.000 description 1
- 239000005041 Mylar™ Substances 0.000 description 1
- 101100182136 Neurospora crassa (strain ATCC 24698 / 74-OR23-1A / CBS 708.71 / DSM 1257 / FGSC 987) loc-1 gene Proteins 0.000 description 1
- 239000004677 Nylon Substances 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000012512 characterization method Methods 0.000 description 1
- YACLQRRMGMJLJV-UHFFFAOYSA-N chloroprene Chemical compound ClC(=C)C=C YACLQRRMGMJLJV-UHFFFAOYSA-N 0.000 description 1
- 238000001816 cooling Methods 0.000 description 1
- 238000005520 cutting process Methods 0.000 description 1
- 238000009795 derivation Methods 0.000 description 1
- 229920001971 elastomer Polymers 0.000 description 1
- 230000007613 environmental effect Effects 0.000 description 1
- 239000002360 explosive Substances 0.000 description 1
- 230000010006 flight Effects 0.000 description 1
- 238000010438 heat treatment Methods 0.000 description 1
- 239000004816 latex Substances 0.000 description 1
- 229920000126 latex Polymers 0.000 description 1
- 239000007788 liquid Substances 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000007935 neutral effect Effects 0.000 description 1
- 229920001778 nylon Polymers 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000000737 periodic effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000005086 pumping Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 238000010008 shearing Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000001052 transient effect Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
- XLYOFNOQVPJJNP-UHFFFAOYSA-N water Substances O XLYOFNOQVPJJNP-UHFFFAOYSA-N 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05D—SYSTEMS FOR CONTROLLING OR REGULATING NON-ELECTRIC VARIABLES
- G05D1/00—Control of position, course or altitude of land, water, air, or space vehicles, e.g. automatic pilot
- G05D1/10—Simultaneous control of position or course in three dimensions
- G05D1/101—Simultaneous control of position or course in three dimensions specially adapted for aircraft
- G05D1/105—Simultaneous control of position or course in three dimensions specially adapted for aircraft specially adapted for unpowered flight, e.g. glider, parachuting, forced landing
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05D—SYSTEMS FOR CONTROLLING OR REGULATING NON-ELECTRIC VARIABLES
- G05D1/00—Control of position, course or altitude of land, water, air, or space vehicles, e.g. automatic pilot
- G05D1/10—Simultaneous control of position or course in three dimensions
- G05D1/101—Simultaneous control of position or course in three dimensions specially adapted for aircraft
- G05D1/104—Simultaneous control of position or course in three dimensions specially adapted for aircraft involving a plurality of aircrafts, e.g. formation flying
Definitions
- Computing devices such as personal computers, laptop computers, tablet computers, cellular phones, and countless types of Internet-capable devices are increasingly prevalent in numerous aspects of modern life.
- the demand for data connectivity via the Internet, cellular data networks, and other such networks is growing.
- data connectivity is still unavailable, or if available, is unreliable and/or costly. Accordingly, additional network infrastructure is desirable.
- example embodiments provide a method comprising: at a system including one or more processors, receiving a specification for N time steps at which to compute N corresponding contingency tables of contingent balloon flight states for at least one balloon, wherein the N time steps define a sequence of time steps in a range between an initial time and a target time; by an iterator implemented by at least one of the one or more processors, reverse-generating the N contingency tables in an order from the initial time to the target time, wherein the iterator is configured for recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time; for the at least one balloon, determining a sequence of planned balloon flight states from the reverse-generated contingency tables, ordered from the initial time to the target time, corresponding to a predicted balloon flight trajectory that is within a threshold of a quantitative flight-plan objective; and providing at least one flight command from the determined sequence of planned balloon flight states to the at least one balloon, in order to cause the at least one balloon
- example embodiments provide a non-transient computer-readable storage medium having stored therein instructions, that when executed by a computing device, cause the computing device to perform functions comprising: receiving a specification for N time steps at which to compute N corresponding contingency tables of contingent balloon flight states for at least one balloon, wherein the N time steps define a sequence of time steps in a range between an initial time and a target time; reverse-generating the N contingency tables in an order from the initial time to the target time by using an iterator function configured for recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time; for the at least one balloon, determining a sequence of planned balloon flight states from the reverse-generated contingency tables, ordered from the initial time to the target time, corresponding to a predicted balloon flight trajectory that is within a threshold of a quantitative flight-plan objective; and providing at least one flight command from the determined sequence of planned balloon flight states to the at least one balloon, in order to cause the at least one balloon
- example embodiments provide a system comprising: at least one processor; and data storage comprising program instructions executable by the at least one processor to cause the system to perform functions comprising: receiving a specification for N time steps at which to compute N corresponding contingency tables of contingent balloon flight states for at least one balloon, wherein the N time steps define a sequence of time steps in a range between an initial time and a target time; reverse-generating the N contingency tables in an order from the initial time to the target time by using an iterator function configured for recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time; for the at least one balloon, determining a sequence of planned balloon flight states from the reverse-generated contingency tables, ordered from the initial time to the target time, corresponding to a predicted balloon flight trajectory that is within a threshold of a quantitative flight-plan objective; and providing at least one flight command from the determined sequence of planned balloon flight states to the at least one balloon, in order to cause the at least one
- FIG. 1 is a block diagram illustrating an example balloon network.
- FIG. 2 is a block diagram illustrating an example balloon-network control system.
- FIG. 3 shows a high-altitude balloon according to an example embodiment.
- FIG. 4 illustrates example trajectories for a balloon that is traveling from one of a plurality of starting landmarks to a landmark E.
- FIG. 5 illustrates an example cost value map where location A is a starting location of a balloon, location B is a desired final location, and example cost values are assigned to cells surrounding location B.
- FIG. 6 illustrates an area divided into cells, and for a given cell labeled X, example wind vectors A 1 -A 5 that are determined based on wind conditions at five different altitude levels.
- FIG. 7 illustrates an example of accessing an example iterator in iteration order.
- FIG. 8 illustrates an example of accessing an example iterator in reverse iteration order.
- FIG. 9 illustrates another example of accessing an example iterator in reverse iteration order.
- FIGS. 10A and 10B illustrates an example method of generating iterations of iterator in reverse iteration order, in accordance with example embodiments.
- FIG. 11 is a flowchart illustrating an example method of reverse iteration in accordance with an example embodiment.
- FIG. 12 is a flowchart illustrating another example method of reverse iteration in accordance with an example embodiment.
- Examples herein may be configured to provide control of vehicles within a fleet of vehicles.
- the vehicles may be any number of types of vehicles including, for example, autonomous or semi-autonomous vehicles, such as aerial vehicles, boats, underwater vehicles, satellites, aerostats, etc. for mapping/surveying, sensing, providing connectivity, etc.
- methods described herein may be used to control or dispatch autonomous cars to maintain a well-distributed fleet of autonomous taxis in a city to support rapid dispatch of taxis.
- the vehicles may be any type of mobile object, element, platform, etc.
- vehicles may be or include elements of a data network that includes a plurality of balloons, for example, configured as a mesh network formed by high-altitude balloons deployed in the stratosphere. Since winds in the stratosphere may affect locations of the balloons in a differential manner, each balloon in an example network may be configured to change its horizontal position by adjusting its vertical position (i.e., altitude). For example, by adjusting its altitude, a balloon may be able find winds that will carry the balloon horizontally (e.g., latitudinally and/or longitudinally) to a desired horizontal location. In other examples, each balloon may be configured to change its horizontal position using propellers or other mechanisms to generate horizontal thrust rather than or in addition to adjusting its horizontal position by adjusting its vertical position.
- methods and systems are described with respect to elements of a fleet of vehicles being balloons in a fleet of balloons arranged as a data network.
- methods and systems herein may be applicable to other types of vehicles of a fleet of vehicles, and thus, the examples described are not limiting.
- a fleet administrator or computer may determine a sequence of coverage requirements for the fleet.
- the sequence of coverage requirements may specify desired amounts of balloon coverage for different parts of the world.
- the desired amounts of balloon coverage may include providing at least ten balloons in a first area, at least five balloons in a second area, and at least eighteen balloons in a third area at a first instance in time and then, at a second instance in time, providing at least five balloons in the first area, ten balloons in the second area, and twenty balloons in the third area.
- a fleet plan that stages balloons in particular places ahead of deadlines such that the balloons will be able to arrive at a desired location on time may be required. Therefore, to control the fleet of balloons, a simultaneous plan of trajectory for many balloons at many different starting locations is needed, and each balloon may take a different path.
- initial positions of each balloon of a fleet of balloons as well as a sequence of coverage requirements may be received or determined.
- the coverage requirements may be goal distributions for the fleet that are defined with respect to various landmarks of a region of interest.
- the region of interest may include a small region of the Earth or possibly the entire Earth, and the landmarks may be individual locations, positions, or subregions within the region of interest.
- the coverage requirements may specify a desired number of balloons, or goal, for each landmark at various times within a planning period of time. The desired number of balloons is but one objective function on the balloon distribution.
- the coverage requirement may be specified in another form. Thus the coverage requirements may be specified according to any objective function on the balloon distribution among the region of interest.
- each phase may correspond to a time interval within the period of time.
- a summary of which landmarks are reachable by a balloon from which other landmarks may be determined based on predicted wind conditions for the region of interest. For example, for each phase and respective landmark, a set of starting landmarks from which a balloon could reach the respective landmark by following one or more predicted winds at one or more altitudes during the phase may be found.
- a determination regarding which landmark that each balloon should travel to during each phase may be made. For instance, trajectories for each balloon that satisfy the sequence of coverage requirements may be determined by solving an optimization problem.
- Planning flight trajectories for one or a fleet of balloons to achieve one or more specified objectives, such as coverage requirements, is an example of a class of problems that can be solved via dynamic programming.
- a planning algorithm or technique may be run with a complete set of contingencies.
- a planning algorithm based on dynamic programming may generate large tables, designated herein by way of example as “A” and “V,” which specify that for a system in given state S(t) at time t, an action A[S(t), t] should be taken in order to maximize an expected reward over a planning period, and that the expected reward is V[S(t), t]. Then after some time ⁇ t transpires, the table will be consulted again in order to determine a next action, and so on.
- the data may be computed in reverse chronological order, such that all the data for A[S(t n ), t n ] and V[S(t n ), t n ] may be computed before the data for A[S(t n ⁇ 1 ), t n ⁇ 1 ] and V[S(t n ⁇ 1 ), t n ⁇ 1 ] can be computed, and so on.
- V[S(t n ), t n ] is the set of information required to compute A[S(t n ⁇ 1 , t n ⁇ 1 ] and V[S(t n ⁇ 1 ), t n ⁇ 1 ].
- the algorithm can output the data in slices in the order t n , t n ⁇ 1 , t n ⁇ 2 , . . . , t 1 .
- the planning program needs to access the data in chronological order: t 1 , t 2 , t 3 , . . . , t N .
- states may need to be evolved chronologically.
- the simulation may then look up the action the balloon should take according to A[S 1 , t 1 ], and then simulate the balloon taking this action in order to compute the state S 2 that the balloon will be in at time t 2 .
- This process may then repeat by looking up the next action in A[S 2 , t 2 ] in order to compute the state S 3 that the balloon will be in at time t 3 , and so on.
- data may be generated in an order from t 1 to t N , but may need to be accessed in the reverse order, from t N to t 1 . Both types of examples involve circumstances in which iteratively generated data need to be accessed in an order opposite from the computational iteration order.
- the complete contingency tables e.g., A and V tables
- the complete contingency tables can become quite large in view of data storage requirements and the speed at which stored data may be accessed (e.g., random access read/write/transfer operations).
- generation of the data and data structures that hold the generated data may be computationally expensive, making generation of the complete tables all the more computationally costly.
- Large size and computation costs can pose practical challenges when the data need to be accessed in an order opposite the computational iteration order in which the data are computed. Accordingly, it would be desirable to devise an efficient means of iterating over the output of a planner in a reverse order from the order in which the planner produces its output.
- Example embodiments described herein provide a system and method for implementing technique for reversing any finite-length duplicatable iterator. While developed and described in the context of balloon fleet planning, the system and method can be adapted for application in any scenario where an iteration (including all linear recursions) needs to be reversed from its computationally-defined (“natural”) iteration order. As will be described in detail below, example embodiments can achieve reverse-iteration of data in far more efficient combination of data storage and computational operations that conventional approaches. The increase in efficiency can make it possible to implement planning tools that might otherwise be impractical.
- FIG. 1 is a block diagram illustrating an example balloon network 100 .
- the balloon network 100 includes balloons 102 A to 102 F, which are configured to communicate with one another via free-space optical links 104 and/or RF links 108 .
- balloons 102 A to 102 F may collectively function as a mesh network for packet-data communications.
- at least some of balloons 102 A and 102 B may be configured for RF communications with ground-based stations 106 via respective RF links 108 .
- some balloons, such as balloon 102 F may be configured to communicate via optical link 110 with ground-based station 112 .
- balloons 102 A to 102 F are high-altitude balloons, which are deployed in the stratosphere.
- the stratosphere includes altitudes between approximately 10 kilometers (km) and 50 km altitude above the surface.
- the stratosphere starts at an altitude of approximately 8 km.
- high-altitude balloons may be generally configured to operate in an altitude range within the stratosphere that has a wide range of wind speeds. For instance, between 17 km and 20 km altitude above the surface, the average wind speed may be between about 30 mph to about 35 mph, while the max wind speed may be up to 200 mph. As another example, at about 26 km altitude above the surface, the average wind speed may be between about 60 mph to about 65 mph, while the max wind speed may exceed 300 mph.
- balloons 102 A to 102 F may generally be configured to operate at altitudes between 18 km and 25 km (although other altitudes are possible). At such altitudes, the winds may vary with latitude and by season, and the variations can be modeled in a reasonably accurate manner. Additionally, altitudes above 18 km are typically above the maximum flight level designated for commercial air traffic. Therefore, interference with commercial flights is not a concern when balloons are deployed between 18 km and 25 km.
- a given balloon 102 A to 102 F may be configured to transmit an optical signal via an optical link 104 .
- a given balloon 102 A to 102 F may use one or more high-power light-emitting diodes (LEDs) to transmit an optical signal.
- LEDs high-power light-emitting diodes
- some or all of balloons 102 A to 102 F may include laser systems for free-space optical communications over optical links 104 . Other types of free-space optical communication are possible.
- a given balloon 102 A to 102 F may include one or more optical receivers.
- balloons 102 A to 102 F may utilize one or more of various different RF air-interface protocols for communication with ground-based stations 106 via respective RF links 108 .
- some or all of balloons 102 A to 102 F may be configured to communicate with ground-based station 106 using protocols described in IEEE 802.11 (including any of the IEEE 802.11 revisions), various cellular protocols such as GSM, CDMA, UMTS, EV-DO, WiMAX, and/or LTE, and/or one or more propriety protocols developed for balloon-ground RF communication, among other possibilities.
- balloon 102 F is configured as a downlink balloon to provide a high-capacity air-ground link.
- a downlink balloon 102 F may be operable for optical communication with other balloons via optical links 104 .
- a downlink balloon 102 F may also be configured for free-space optical communication with a ground-based station 112 via an optical link 110 .
- Optical link 110 may therefore serve as a high-capacity link (as compared to an RF link 108 ) between the balloon network 100 and ground-based station 112 .
- a downlink balloon 102 F may additionally be operable for RF communication with ground-based station 106 .
- a downlink balloon 102 F may only use an optical link for balloon-to-ground communications.
- an exemplary balloon network can also include multiple downlink balloons.
- a balloon network can also be implemented without any downlink balloons.
- a downlink balloon may be equipped with a specialized, high-bandwidth RF communication system for balloon-to-ground communications, instead of, or in addition to, a free-space optical communication system.
- the high-bandwidth RF communication system may take the form of an ultra-wideband system, which may provide an RF link with substantially the same capacity as one of the optical links 104 .
- Ground-based stations such as ground-based station 106 and/or 112 , may include components such as transceivers, transmitters, and/or receivers for communication via RF links and/or optical links with a balloon network. Further, a ground-based station may use various air-interface protocols in order to communicate with a balloon 102 A to 102 F over an RF link. As such, a ground-based station 106 may be configured as an access point via which various devices can connect to balloon network 100 .
- some or all balloons 102 A to 102 F could be configured to establish a communication link with space-based satellites in addition to, or as an alternative to, a ground-based communication link.
- a balloon may communicate with a satellite via an optical link.
- ground-based stations such as ground-based station 106 may be configured as gateways between balloon network 100 and one or more other networks. Such a ground-based station 106 may thus serve as an interface between the balloon network and the Internet, a cellular service provider's network, and/or other types of networks.
- balloons 102 A to 102 F may collectively function as a mesh network. More specifically, since balloons 102 A to 102 F may communicate with one another using free-space optical links, the balloons may collectively function as a free-space optical mesh network.
- each balloon 102 A to 102 F may function as a node of the mesh network, which is operable to receive data directed to the balloon and to route data to other balloons.
- data may be routed from a source balloon to a destination balloon by determining an appropriate sequence of optical links between the source balloon and the destination balloon.
- These optical links may be collectively referred to as a “lightpath” for the connection between the source and destination balloons.
- each of the optical links may be referred to as a “hop” on the lightpath.
- balloons 102 A to 102 F may employ various routing techniques and self-healing algorithms.
- a balloon network 100 may employ adaptive or dynamic routing, where a lightpath between a source and destination balloon is determined and set-up when the connection is needed, and released at a later time. Further, when adaptive routing is used, the lightpath may be determined dynamically depending upon the current state, past state, and/or predicted state of the balloon network.
- an exemplary balloon network 100 may apply a mesh protocol to update the state of the network as the topology of the network changes.
- balloon network 100 may employ and/or adapt various techniques that are employed in mobile ad hoc networks (MANETs). Other examples are possible as well.
- MANETs mobile ad hoc networks
- a balloon network 100 may be configured as a transparent mesh network.
- the balloons may include components for physical switching that is entirely optical, without any electrical components involved in the physical routing of optical signals.
- signals travel through a multi-hop lightpath that is entirely optical.
- the balloon network 100 may implement a free-space optical mesh network that is opaque.
- some or all balloons 102 A to 102 F may implement optical-electrical-optical (OEO) switching.
- some or all balloons may include optical cross-connects (OXCs) for OEO conversion of optical signals.
- OEO optical-electrical-optical
- Other opaque configurations are also possible.
- balloons in an exemplary balloon network 100 may implement wavelength division multiplexing (WDM), which may help to increase link capacity.
- WDM wavelength division multiplexing
- physical lightpaths through the balloon network may be subject to the “wavelength continuity constraint.” More specifically, because the switching in a transparent network is entirely optical, the same wavelength can be assigned for all optical links on a given lightpath.
- An opaque configuration may avoid the wavelength continuity constraint.
- balloons in an opaque balloon network may include the OEO switching systems operable for wavelength conversion. As a result, balloons can convert the wavelength of an optical signal at each hop along a lightpath.
- exemplary balloons may apply or consider shortest-path routing techniques such as Dijkstra's algorithm and k-shortest path, and/or edge and node-diverse or disjoint routing such as Suurballe's algorithm, among others. Additionally or alternatively, techniques for maintaining a particular quality of service (QoS) may be employed when determining a lightpath. Other techniques are also possible.
- QoS quality of service
- a balloon network 100 may have a non-uniform topology.
- exemplary embodiments may involve topologies where balloons are distributed more or less densely in certain areas, for various reasons.
- balloons may be clustered more densely over urban areas.
- the distribution of balloons may be more dense over land than over large bodies of water.
- Many other examples of non-uniform topologies are possible.
- FIG. 2 is a block diagram illustrating an example balloon-network control system.
- FIG. 2 shows a distributed control system, which includes a central control system 200 and a number of regional control-systems 202 A to 202 C.
- a control system may be configured to coordinate certain functionality for balloon network 204 , and as such, may be configured to control and/or coordinate certain functions for balloons 206 A to 2061 .
- central control system 200 may be configured to communicate with balloons 206 A to 2061 via a number of regional control systems 202 A to 202 C. These regional control systems 202 A to 202 C may be configured to receive communications and/or aggregate data from balloons in the respective geographic areas that the balloons cover, and to relay the communications and/or data to central control system 200 . Further, regional control systems 202 A to 202 C may be configured to route communications from central control system 200 to the balloons in their respective geographic areas. For instance, as shown in FIG.
- regional control system 202 A may relay communications and/or data between balloons 206 A to 206 C and central control system 200
- regional control system 202 B may relay communications and/or data between balloons 206 D to 206 F and central control system 200
- regional control system 202 C may relay communications and/or data between balloons 206 G to 2061 and central control system 200 .
- each regional control system 202 A to 202 C may be configured to communicate with the downlink balloon or balloons in the respective geographic area it covers.
- balloons 204 A, 204 D, and 204 H are configured as downlink balloons.
- regional control systems 202 A to 202 C may respectively communicate with balloons 204 A, 204 D, and 204 H via optical links 206 , 208 , and 210 , respectively.
- the central control system 200 may coordinate certain mesh-networking functions for balloon network 204 .
- balloons 206 A to 2061 may send the central control system 200 certain state information, which the central control system 200 may utilize to determine the state of balloon network 204 .
- the state information from a given balloon may include location data, optical-link information (e.g., the identity of other balloons with which the balloon has established an optical link, the bandwidth of the link, wavelength usage and/or availability on a link, etc.), wind data collected by the balloon, and/or other types of information.
- the central control system 200 may aggregate state information from some or all of the balloons 206 A to 2061 in order to determine an overall state of the network.
- the overall state of the network may then be used to coordinate and/or facilitate certain mesh-networking functions such as determining lightpaths for connections.
- the central control system 200 may determine a current topology based on the aggregate state information from some or all of the balloons 206 A to 2061 .
- the topology may provide a picture of the current optical links that are available in balloon network and/or the wavelength availability on the links. This topology may then be sent to some or all of the balloons so that a routing technique may be employed to select appropriate lightpaths (and possibly backup lightpaths) for communications through the balloon network 204 .
- control and coordination of a balloon network may be shared by a ground-based control system and a balloon network to varying degrees, depending upon the implementation. In fact, in some embodiments, there may be no ground-based control systems. In such an embodiment, all network control and coordination functions may be implemented by the balloon network itself. For example, certain balloons may be configured to provide the same or similar functions as central control system 200 and/or regional control systems 202 A to 202 C. Other examples are also possible.
- control and/or coordination of a balloon network may be de-centralized.
- each balloon may relay state information to, and receive state information from, some or all nearby balloons.
- each balloon may relay state information that it receives from a nearby balloon to some or all nearby balloons.
- each balloon may be able to individually determine the state of the network.
- certain balloons may be designated to aggregate state information for a given portion of the network. These balloons may then coordinate with one another to determine the overall state of the network.
- FIG. 3 shows a high-altitude balloon 300 , according to an exemplary embodiment.
- the balloon 300 includes an envelope 302 , a skirt 304 , a payload 306 , and a cut-down system 308 that is attached between the balloon 302 and payload 306 .
- the envelope 302 and skirt 304 may take various forms, for instance, the envelope 302 and/or skirt 304 may be made of metalized Mylar or BoPet. Alternatively or additionally, some or all of the envelope 302 and/or skirt 304 may be constructed from a highly-flexible latex material or a rubber material such as chloroprene. Further, the shape and size of the envelope 302 and skirt 304 may vary depending upon the particular implementation. Additionally, the envelope 302 may be filled with various different types of gases, such as helium and/or hydrogen.
- gases such as helium and/or hydrogen.
- the payload 306 of balloon 300 may include a processor 312 and on-board data storage, such as memory 314 .
- the memory 314 may take the form of or include a non-transitory computer-readable medium.
- the non-transitory computer-readable medium may have instructions stored thereon, which can be accessed and executed by the processor 312 in order to carry out the balloon functions described herein.
- the payload 306 of balloon 300 may also include various other types of equipment and systems to provide a number of different functions.
- payload 306 may include optical communication system 316 , which may transmit optical signals via an ultra-bright LED system 320 , and which may receive optical signals via an optical-communication receiver 322 (e.g., a photo-diode receiver system).
- payload 306 may include an RF communication system 318 , which may transmit and/or receive RF communications via an antenna system 340 .
- the payload may further include a positioning system 324 that can include a GPS or other location-based sensors.
- the payload 306 may also include a power supply 326 to supply power to the various components of balloon 300 .
- the power supply 326 may include or take the form of a rechargeable battery.
- the balloon 300 may include a solar power generation system 327 .
- the solar power generation system 327 may include solar panels and could be used to generate power that charges and/or is distributed by the power supply 326 .
- payload 306 may include various types of other systems 328 and sensors 334 .
- payload 306 may include one or more video and/or still cameras, a GPS system, various motion sensors (e.g., accelerometers, gyroscopes, and/or compasses), and/or various sensors for capturing environmental data.
- some or all of the components within payload 306 may be implemented in a radiosonde, which may be operable to measure, e.g., pressure, altitude, geographical position (latitude and longitude), temperature, relative humidity, and/or wind speed and/or direction, among other information.
- balloon 300 includes an ultra-bright LED system 320 for free-space optical communication with other balloons.
- optical communication system 316 may be configured to transmit a free-space optical signal by modulating the ultra-bright LED system 320 .
- the optical communication system 316 may be implemented with mechanical systems and/or with hardware, firmware, and/or software.
- balloon 300 may be configured for altitude control.
- balloon 300 may include a variable buoyancy system, which is configured to change the altitude of the balloon 300 by adjusting the volume and/or density of the gas in the balloon 300 .
- a variable buoyancy system may take various forms, and may generally be any system that can change the volume and/or density of gas in envelope 302 .
- a variable buoyancy system may include a bladder 310 that is located inside of envelope 302 .
- the bladder 310 could be an elastic chamber configured to hold liquid and/or gas.
- the bladder 310 need not be inside the envelope 302 .
- the bladder 310 could be a rigid bladder that could be pressurized well beyond neutral pressure.
- the buoyancy of the balloon 300 may therefore be adjusted by changing the density and/or volume of the gas in bladder 310 .
- balloon 300 may be configured with systems and/or mechanisms for heating and/or cooling the gas in bladder 310 .
- balloon 300 may include pumps or other features for adding gas to and/or removing gas from bladder 310 .
- balloon 300 may include release valves or other features that are controllable to allow gas to escape from bladder 310 .
- Multiple bladders 310 could be implemented within the scope of this disclosure. For instance, multiple bladders could be used to improve balloon stability.
- the envelope 302 could be filled with helium, hydrogen or other lighter-than-air material.
- the envelope 302 could thus have an associated upward buoyancy force.
- air in the bladder 310 could be considered a ballast tank that may have an associated downward ballast force.
- the amount of air in the bladder 310 could be changed by pumping air (e.g., with an air compressor) into and out of the bladder 310 . By adjusting the amount of air in the bladder 310 , the ballast force may be controlled. In some embodiments, the ballast force may be used, in part, to counteract the buoyancy force and/or to provide altitude stability.
- the envelope 302 could be substantially rigid and include an enclosed volume. Air could be evacuated from envelope 302 while the enclosed volume is substantially maintained. In other words, at least a partial vacuum could be created and maintained within the enclosed volume. Thus, the envelope 302 and the enclosed volume could become lighter than air and provide a buoyancy force. In yet other embodiments, air or another material could be controllably introduced into the partial vacuum of the enclosed volume in an effort to adjust the overall buoyancy force and/or to provide altitude control.
- a portion of the envelope 302 could be a first color (e.g., black) and/or a first material from the rest of envelope 302 , which may have a second color (e.g., white) and/or a second material.
- the first color and/or first material could be configured to absorb a relatively larger amount of solar energy than the second color and/or second material.
- the buoyancy force of the balloon could be adjusted by changing the temperature/volume of gas inside the envelope 302 using solar energy.
- a bladder 310 may not be a necessary element of balloon 300 .
- altitude control of balloon 300 could be achieved, at least in part, by adjusting the rotation of the balloon with respect to the sun.
- the balloon 300 may include a navigation system (not shown).
- the navigation system may implement station-keeping functions to maintain position within and/or move to a position in accordance with a desired topology.
- the navigation system may use altitudinal wind data to determine altitudinal adjustments that result in the wind carrying the balloon in a desired direction and/or to a desired location.
- the altitude-control system may then make adjustments to the density of the balloon chamber in order to effectuate the determined altitudinal adjustments and cause the balloon to move laterally to the desired direction and/or to the desired location.
- the altitudinal adjustments may be computed by a ground-based control system and communicated to the high-altitude balloon.
- the altitudinal adjustments may be computed by a ground-based or satellite-based control system and communicated to the high-altitude balloon.
- specific balloons in a heterogeneous balloon network may be configured to compute altitudinal adjustments for other balloons and transmit the adjustment commands to those other balloons.
- the balloon 300 also includes a cut-down system 308 .
- the cut-down system 308 may be activated to separate the payload 306 from the rest of balloon 300 . This functionality may be utilized anytime the payload needs to be accessed on the ground, such as when it is time to remove balloon 300 from a balloon network, when maintenance is due on systems within payload 306 , and/or when power supply 326 needs to be recharged or replaced.
- the cut-down system 308 may include a connector, such as a balloon cord, connecting the payload 306 to the envelope 302 and a means for severing the connector (e.g., a shearing mechanism or an explosive bolt).
- a connector such as a balloon cord
- the balloon cord which may be nylon, is wrapped with a nichrome wire. A current could be passed through the nichrome wire to heat it and melt the cord, cutting the payload 306 away from the envelope 302 .
- Other types of cut-down systems and/or variations on the illustrated cut-down system 308 are possible as well.
- a balloon may not include a cut-down system.
- the navigation system may be operable to navigate the balloon to a landing location, in the event the balloon needs to be removed from the network and/or accessed on the ground.
- a balloon may be self-sustaining, such that it theoretically does not need to be accessed on the ground.
- balloons may be serviced in-flight by specific service balloons or another type of service aerostat or service aircraft.
- a balloon in an example network may be configured to change its horizontal position by adjusting its vertical position (i.e., altitude). For example, by adjusting its altitude, a balloon may be able to find winds that will carry the balloon horizontally (e.g., latitudinally and/or longitudinally) to a desired horizontal location.
- Wind speed and/or direction may vary with altitude, and since current wind velocities as well as weather forecasts are available, in principle, a balloon may be directed to a location by identifying an altitude at which a wind direction takes a balloon to along a desired trajectory.
- a balloon without other forms of propulsion may be constrained to follow the wind and there may not be a single altitude with winds taking the balloon along the desired trajectory.
- movement of the balloons should occur from one location above the surface of the Earth to another in a predictable manner.
- determining a fleetplan for a fleet of balloons may require staging balloons of the fleet into places ahead of time such that the balloons will be able to arrive at a landmark on time. For instance, a balloon may need to follow a trajectory that does not contribute usefully to goals during a first phase and a second phase such that the balloon can reach a desired landmark at the end of a third phase.
- This kind of staging may be useful when goal landmarks are spread non-uniformly throughout a fleet's coverage area. For example, there may be large regions (e.g., relative to a balloon's maximum range during a phase) requiring few or no balloons, but which may need to be traversed in order to satisfy a goal number of balloons for other regions.
- Such situations arise naturally, for example, when goal distributions are proportional to population density: there are a limited number of people in the oceans, few people on many parts of land, and many people in major cities.
- a system may be configured to receive (or determine) a starting location of each balloon of a fleet of balloons and receive a sequence of coverage requirements for the region for a planning time period.
- the sequence of coverage requirements for the time period may specify a goal number of balloons for each of a plurality of landmarks within the region at various times T during the time period.
- the system may also be configured to divide the time period into phases based on distinct values of T in the sequence of coverage requirements: a first phase may be defined from a starting time of the time period to an earliest T; a second phase may be defined between the end of the first phase and a second earliest T, etc.
- a set of landmarks may be associated with the start and end of each phase: the start of the first phase may use the initial location of each of the balloons as landmarks; the end of the first phase and the start of the second phase may share the set of landmarks associated with the earliest T, etc.
- the system may be further configured to determine trajectories that satisfy the sequence of coverage requirements for the region. To determine the trajectories, the system may initially establish possible routes for balloons within each phase. For each landmark at the start of a phase and for each landmark at the end of the phase, the system may determine how close to the end-of-phase landmark that a balloon starting from the start-of-phase landmark could get by traveling during the phase.
- FIG. 4 illustrates example trajectories for a balloon that is traveling from a plurality of starting landmarks to a landmark E. Specifically, FIG. 4 illustrates trajectories from each of landmark A, B, C, D, and F to an ending landmark E.
- a region 400 has been divided into a plurality of subregions, and the landmarks A-L have been established at the center of each subregion.
- coverage requirements may specify a goal number of balloons to be located at one or more locations within the region 400 , and the goal number of balloons may be added to the nearest landmark to determine the goal number of balloons for each landmark. For example, if an individual coverage requirement indicates that five balloons are desired at location Loc 1 and seven balloons are desired at location Loc 2 , the desired number of balloons for landmark A may be determined to be twelve.
- landmarks A-L have been distributed uniformly throughout the region 400 , the example is not meant to be limiting. In other instances, landmarks may be non-uniformly distributed within the region 400 . For example, if a region covers the entire Earth, one or more oceans or countries may not include any landmarks.
- the example trajectories may be determined based on estimated or predicted wind conditions at one or more altitudes.
- a reachability algorithm may be used to determine a measure of how close to a target location that a balloon could reach if the balloon was starting at another location within a region. For example, given a target time and target location as well as an initial time, the reachability algorithm may be configured to determine, for a grid of starting locations within a region, a measure of how close to the target location a balloon could get, if the balloon was flying from initial time to target time.
- the reachability algorithm may be a backward planner.
- the backward planner may consider a problem of minimizing a cost function associated with a balloon path.
- the cost function may be a measure of how close a balloon gets to a target location by following a path.
- FIG. 5 illustrates an example cost value map where location A is a starting location of a balloon, location B is a desired final location, and example cost values are assigned to cells surrounding location B.
- the region can also be discretized by dividing the region into a finite number of cells.
- FIG. 5 illustrates a region that has been divided into a number of cells (e.g., a 10 ⁇ 7 grid of cells). Although the region is represented as a rectangular grid, the example is not meant to be limiting.
- a cost value can be assigned to each cell based on a final location of the balloon.
- cost values may be systematically assigned such that a cell in which the desired location resides has a low cost and cells further away may be assigned a higher cost value (e.g., the farther away from the desired location, the higher the cost value).
- a cell in which the desired location B resides can be assigned a cost value of zero, and cost values for surrounding cells can be assigned higher cost values based on a distance away from the desired location cell. Cost values for all cells can be populated in this manner by increasing the cost value for a given cell based on the distance from the desired location.
- FIG. 6 illustrates an area divided into cells (e.g., a 10 by 7 grid of cells), and for a given cell labeled X, example wind vectors A 1 -A 5 that are determined based on wind conditions at five different altitude levels.
- wind vectors associated with different altitudes may be the same for each cell. In other examples, wind vectors associated with different altitudes may vary based on the location of the cell. For each cell, an estimation of where a balloon would travel to (e.g., destination cell) at the end of the time period if the balloon started at the cell and moved with a given wind vector is determined. To do so, a direction and magnitude (e.g., speed) of the estimated wind vector can be used to estimate a trajectory and distance that the balloon travels, and to determine estimated destination cells (e.g., A 1(EST) -A 5(EST) ).
- FIG. 6 illustrates estimated destination cells for a balloon starting at cell X, and moving with one of the five wind vectors A 1 -A 5 . Example simulations can be performed to simulate movement of the balloons due to the estimated wind directions and speed, for example.
- further estimations may be made by a balloon traveling at a first altitude for a portion of a time interval and then changing to a second altitude for a remainder of the time interval. It could be possible that by traveling at any given number of combinations of altitudes, the winds may be able to carry the balloon to a desired location over the time interval.
- the wind vector A 3 may be assigned a value of zero, and cost values for a remainder of the wind vectors may be assigned higher cost values for causing the balloon to travel to a location further away from the desired destination (e.g., such as a A 4 having cost of one, A 5 having cost of four, A 2 having cost of two, and A 1 having cost of three).
- the same determinations may be performed for each cell of the area.
- each cell of a given map has estimates of directions that are based on estimates of directions as determined for a subsequent time interval. This enables planning for a balloon to take a given path at a first time interval so that the balloon will be at a location needed during the next time interval to take appropriate action, and so on.
- a cost value for each of landmarks A-L may be proportional to a distance such that a given cost value can be converted to a given three-dimensional distance.
- the backward planner is provided as one example mechanism for establishing possible routes between landmarks during a phase.
- other mechanisms that can determine, for a particular staring location/time and an ending location/time, how close to the ending location a balloon can get in the time period allotted, based on predicted wind velocities at one or more altitudes may also be utilized.
- a forward planner may be used. For instance, the forward planner may determine for a particular starting location and time, how close to the ending location a balloon can get in a first time period based on predicted wind velocities at one or more altitudes. For the first time period, an altitude that leads to the closest location to the ending location may be selected. For a second time period, the forward planner may determine how close to the ending location a balloon can get during the second time period by starting from the ending location of the first time period. Based on predicted wind velocities at one or more altitudes during the second time period, a determination for the second time period regarding an altitude that leads to the closest location to the ending location may be made. The process may be repeated sequentially for additional time periods to ultimately determine how close a balloon could get to the ending location in the time period allotted.
- a backward planner can generate cost value maps at discrete time steps, from a target time to an initial time, in the form of contingency tables.
- the contingency tables at each time step can include one or more contingent balloon states, each including a set of state variables specifying geographic location (e.g., latitude and longitude), altitude, and battery level, possibly among other state variables.
- the balloon states are “contingent” in the sense that the values assigned to the state variables are contingent upon state variables of one or more previous contingent balloon states at a next earlier time step, and an action taken by the balloon while in the one or more previous contingent balloon states.
- the target time can correspond to a time at which a balloon is projected to reach a target location (e.g., target latitude and target longitude), and the initial time can correspond to a time at which the balloon begins (or is planned to begin) on a trajectory to the target location from an initial location of one or more balloon states at the initial time.
- a target location e.g., target latitude and target longitude
- the initial time can correspond to a time at which the balloon begins (or is planned to begin) on a trajectory to the target location from an initial location of one or more balloon states at the initial time.
- the backward planner can also specify for each contingent balloon state at each time step an action that a balloon should take in order to cause the balloon to follow on a predicted trajectory that results in a target location that is as close as possible to the goal location.
- a score can be assigned to each contingent balloon state based on how close the target location is to the goal location. Because the score assigned to each respective contingent balloon state is related to a distance between the target location for the respective contingent balloon state and the goal location, the contingency tables could also take a form that includes just the contingent balloon states and assigned scores. In this form, the action taken in a given contingent balloon state could be derived from a functional relation between the score, the goal location, and the implied target location.
- the action at each time step can be an adjustment of balloon altitude.
- the action can be one of increasing altitude, decreasing altitude, or maintaining altitude.
- the actions of increasing altitude and decreasing altitude can also include an amount by which the altitude should be changed.
- Determination of the action for each contingent balloon state at each time step may be made based on winds as forecast for each time step, location, and altitude.
- Each possible action can be associated with a command to execute the action.
- a balloon can be made to adjust or control its altitude by one or another of the specific techniques described above in connection with FIG. 3 , for example.
- a command to adjust balloon altitude may be a command to carry out one or more steps according to the altitude control techniques.
- a balloon flight plan can be generated by simulating a balloon flight trajectory as a simulated sequence of actions across the contingency tables at each time step, where one action is taken at each time step in a contingent state reached from a previous contingent state and a previous action.
- the simulated sequence of actions can be determined as one that results in a simulated trajectory that, from among other possible simulated trajectories, brings the balloon closest to the goal location.
- the simulated sequence of actions can then be converted into a corresponding sequence of commands for carrying out the actions, the sequence of commands thereby forming a balloon flight plan.
- the balloon flight plan can be encoded and transmitted to a balloon for execution by the balloon. The balloon may thereby be caused to attempt to follow a predicted trajectory determined according to the simulated trajectory.
- One aspect of using a backward planner to derive a balloon flight plan is that the contingent states from the initial location at the initial time to the target location closest to the goal location at the target time are determined in reverse-chronological order, from the target time to the initial time. More particularly, the contingency tables at each time step are computed from the contingency tables at the next chronologically later time step. Conceptually, this corresponds to “working backward” from the goal to the start and identifying contingent intermediate states that can connect the start to the goal.
- the balloon flight plan is derived by simulating actions in contingent states in forward-chronological order (or just “chronological order”). Thus, in deriving a balloon flight plan using a backward planner, the contingency tables are accessed in a temporal order that is opposite that in which the tables are computed.
- computational iteration order is reverse-chronological and derivation order is chronological.
- accessing (and/or processing) data in reverse-iteration order could also include computational iteration order being chronological and reverse-iteration order being reverse-chronological.
- computational iteration order and reverse-iteration order need not refer to forward or reverse temporal ordering. That is, they could refer forward or reverse spatial ordering (e.g., of spatial steps), or forward or reverse ordering of any given indexed sequence for which adjacent sequential elements are iteratively related.
- techniques for reverse-generation of iteratively-computed data are developed and described herein that are significantly better than conventional techniques in terms of processing time and data storage.
- the reverse-generation techniques are described herein by way of example for balloon flight planning, but are more generally applicable to access of data in reverse-iteration order.
- the simpler context also serves to illustrate two conventional techniques for reverse-iteration access as well.
- N 8 so that the iterator generates the integers 1, 2, 3, . . . , 8. It will be appreciated that other integer values of N could be used as well.
- the data generated at each iteration step is just the next integer in the sequence, and for this example the iteratively computed data are accessed in the same order in which they are computed. That is, the question of accessing data in reverse-iteration order is not yet addressed in the example of FIG. 7 .
- accessing the data in computational iterative order can be achieved using one memory unit 702 to store each next iterated data value until that data value is accessed and processed by one of eight executions of an example representative process 706 .
- the memory unit 702 can be some form of reusable storage (e.g., writeable computer-readable media such as Random Access Memory) suitable for recording data corresponding to an integer. After each access, the memory unit 702 can be overwritten with the next iteratively-computed data value.
- the process 706 is meant to represent any processing operation that accesses the iterated value, but is otherwise arbitrary.
- Process 1 accesses iteration #1
- Process 2 accesses iteration #2, . . . , and so on through Process 8 accessing iteration #8.
- the iterations begin by initializing the memory unit 702 with the value zero. Thereafter, each new iteration applies the operation 704 , which simply increments the contents of the single memory unit 702 by one.
- reverse-iteration access is again achieved using just one memory unit 802 , but at a relatively high cost of iteration operations 804 .
- the Process' accesses iteration #8 (in this example, the integer 8), which is generated with by way of eight consecutive executions of the “+1” iteration applied to the single memory unit 802 .
- the Process 2 accesses iteration #7 (in this example, the integer 7), which is generated with by way of seven consecutive executions of the “+1” iteration applied to the single memory unit 802 .
- the Process 8 accesses iteration #1 (in this example, the integer 1), which is generated with by way of one execution of the “+1” iteration applied to the single memory unit 802 .
- nearly the entire iterative sequence needs to be executed for each new accessed value.
- a more mathematically rigorous definition can be expressed by stating that f(x) is O(N 2 ) if there exists some positive number x 0 and some positive constant C such that
- the storage in this example can be characterized as “O(1)” (or “order 1”) storage unit (where the size of one storage unit accommodates the data from one iteration).
- O(1) or “order 1” storage unit
- N the number of storage units remains approximately constant. That is, for O(1), the number of storage units might not necessarily stay exactly equal to a particular value, but the number will not systematically increase (or decrease) as the number of iterations increases.
- FIG. 8 illustrates one conventional technique for reverse-iteration access that uses O(1) storage unit and incurs O(N 2 ) iterations.
- reverse-iteration access is achieved using just eight iterations 904, but requiring eight memory units 902 - 1 , 902 - 2 , 902 - 3 , . . . , 902 - 8 .
- each iteration gets its own “dedicated” memory unit, which enables the entire sequence of iterated values to be computed and stored prior to accessing the values by the process 906 .
- the memory unit 902 - 1 is first initialized to zero (signified by the dashed rectangular border), and then incremented to one by a first iteration of the “+1” operation.
- the solid rectangular border of the memory unit 902 - 1 signifies dedicated storage for the first iteration (dedicated in the sense that it is not reused to store any subsequent iterations, though its contents are not necessarily permanent).
- the value of the first iteration is copied to a second memory unit 902 - 2 (again, signified by the dashed rectangular border), and then incremented to two by a second iteration of the “+1” operation.
- the solid rectangular border of the memory unit 902 - 2 signifies dedicated storage for the second iteration.
- the value of the second iteration is copied to a third memory unit 902 - 3 (again, signified by the dashed rectangular border), and then incremented to three by a third iteration of the “+1” operation.
- the solid rectangular border of the memory unit 902 - 3 signifies dedicated storage for the third iteration.
- the iterations continue through the eighth iteration, where the value of the seventh iteration is copied to an eighth memory unit 902 - 8 (again, signified by the dashed rectangular border), and then incremented to eight by an eighth iteration of the “+1” operation.
- the solid rectangular border of the memory unit 902 - 8 again signifies dedicated storage for the eighth iteration.
- reverse-iteration access can be a matter of accessing the eight memory units in the desired reverse order, as indicated by the backward-point arrow at the bottom of FIG. 9 . That is, Process' accesses the memory unit 902 - 8 , the Process 2 accesses the memory unit 902 - 7 , and so on until the Process 8 accesses the memory unit 902 - 1 .
- the second conventional technique illustrated in FIG. 9 can therefore be characterized as using O(N) storage units and incurring O(N) iterations.
- O(N) is that the number of iterations, or of storage units, tends to N as N increases.
- each iteration incurs just one operation (e.g, “+1”) and uses storage (temporary or dedicate) for just one integer.
- the computational and/or storage costs of either conventional technique for reverse-iteration access may not necessarily be pose significant practical design and/or implementation challenges.
- each of the O(N 2 ) iterations of the first conventional technique can be correspondingly complex and/or computationally costly, making the total computational cost high in terms of time and complexity.
- O(N) storage units of the second conventional technique can similarly become non-negligible in terms of a total amount of required memory.
- reverse-iteration access is achieved by first computing and storing all of the iterated data, as in the second conventional technique, and the total amount of data is very large, accessing the data in any order can be subject to inefficiencies sometimes associated with memory access of large data sets.
- neither of the conventional techniques may be suitable for meeting design constraints that may be imposed on reverse-iteration access.
- FIGS. 10A and 10B illustrate an example embodiment of a technique for reverse-generation of iterated data that is more efficient than either of the two conventional techniques when both storage size and computational complexity are potentially subject to some form of design and/or implementation constraint.
- the general approach is to recursively sub-divide the N-length sequence by two and, upon each sub-division, forward-iterate only up to a particular element that is the next to be reverse-iteration accessed.
- storage of iterated values is maintained for only those elements that support the current recursive iteration.
- the reverse-generated iterations may be accessed by the process 1006 in reverse-iteration order.
- the technique can be modified to include first a linear search to determine the value of N.
- the extra computations incurred in the preliminary linear search do not alter the overall order of the number of computations of the technique for the case when N is known ahead of time (and the preliminary search is not needed).
- Process' can access iteration #8; once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 4 may be released. This is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 4 .
- Now Process 2 can access iteration #7 that is still stored in the memory unit 1002 - 3 . Again, once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 3 may be released. This is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 3 .
- Process 3 can access iteration #6; once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 3 may be released. As before, this is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 3 .
- Now Process 4 can access iteration #5 that is still stored in the memory unit 1002 - 2 . Again, once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 2 may be released. This, too, is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 2 .
- the memory unit 1002 - 1 still holds the first iteration value, while the memory units 1002 - 2 and 1002 - 3 have been released.
- Process 5 can access iteration #4; once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 3 may be released. As before, this is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 3 .
- Now Process 6 can access iteration #3 that is still stored in the memory unit 1002 - 2 .
- the storage associated with the memory unit 1002 - 2 may be released. This, too, is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 2 .
- Process 7 can access iteration #2; once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 2 may be released. As before, this is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 2 .
- Now Process 8 can access iteration #1 that is still stored in the memory unit 1002 - 1 . Again, once the access is complete (e.g., the iterated data processed and/or consumed), the storage associated with the memory unit 1002 - 2 may be released. This, too, is indicated by the arrow labeled “Release after access” overlaid on the memory unit 1002 - 1 .
- the complete reverse-generation and reverse-iteration access of the iteratively-computed sequence has been achieved using two, three, or four memory units at any one time, and a total of 13 iterations. More particularly, the example reverse-generation technique retains approximately one memory unit per factor-of-two sub-division of the N-length sequence.
- the reverse-generation technique uses O(log 2 N) memory units, because an N-length sequence can be recursively sub-divided by two log 2 N times. And as described below, the example reverse-generation technique can be shown to incur O(N log 2 N) iterations.
- O(log 2 N) memory units and O(N log 2 N) iterations is significantly better than either of the two conventional techniques in circumstances where both the memory usage per iteration is large and the computational cost of each iteration is high.
- the reverse-generation technique could be adapted to subdividing an N-length sequence by factors greater than two. In this sense, the technique can be characterized more generally as subdividing an N-length sequence by at least a factor of two.
- An example implementation of the reverse-generation technique can be described using example pseudo-code to specify logical programming instructions for carrying out steps and memory usage of a computational iterator, and that show how it can be invoked so as to reverse-generate the iterated data.
- the pseudo-code implements a generalized iterator as an object that includes both storage for current data from the last iteration and callable logical operations to generate the next iteration (in computational iteration order) from the current data.
- the generalized iterator can also include callable logic to determine when the last iteration of a sequence has been reached (e.g., at N iterations).
- the generalized iterator can also be copied or duplicated, which results in new storage for the copied or duplicated instance of the iterator.
- Such an iterator is sometimes referred to as a copyable, finite length iterator. While a particular implementation of an iterator may include additional logic and/or instructions specific to the details of the iterative computation, the callable logic indicated above can be used to invoke the generalized iterator in a revere-generation context.
- Table 1 illustrates example pseudo-code of a reverse-generation iterator, or just “reverse iterator” for the purposes of the discussion herein.
- text preceded by the number sign (“#”) represents comments, not encoded logic instructions.
- the reverse iterator illustrated in Table 1 can be applied to any iterator, such as the iterator in the examples of FIGS. 7 , 8 , 9 , and 10 A and 10 B. As discussed below, it can also be applied to an iterator that produces contingency tables for balloon flight planning.
- an example implementation of reverse-generation of iterated data can be applied to planning a long-distance balloon flight for a fleet of balloons.
- the planned flight could be a circumnavigation of the Earth, starting and ending at the same location.
- the balloons could be driven (or guided) along their respective paths by winds, and the entire trip could take two to three weeks or more.
- the flight plan could include a respective sequence of altitude adjustment commands for each balloon, each altitude adjustment intended to expose the balloon to expected wind conditions that are predicted to carry the balloon along at least a portion of a planned trajectory.
- a backward planner can compute a complete set of contingency tables for the entire planned flight of the fleet. It may be expected that the data size of the complete set of contingency tables will be quite large, possibly exceeding a terabyte or more, for example.
- updated wind forecasts can be obtained approximately every six hours, and upon which the complete set of contingency tables may need to be recomputed.
- recomputation of the contingency tables can take on the order of ten minutes. Taking these example parameters as a context, a flight-planning approach that includes transmission of contingency tables to the balloons can be impractical.
- a strategy the includes both complete recomputation of the contingency tables on an hours-long time scale and periodic simulation of flight trajectories on a time scale of minutes can be used to periodically check and possibly update each balloon's flight plan (e.g., command sequence).
- the short time between flight plan updates can help ensure accuracy of each predicted trajectory, as well as optimal adherence of each balloon's flight path to the predicted trajectory.
- the example embodiment of the reverse-iterator can be used to reverse-generate the contingency tables for updating the simulated trajectories in a way that can satisfy constraints of time and data size.
- Table 2 illustrates an example flight-planning strategy as a set of high-level steps at specified time scales.
- reverse-chronological order is computational iteration order for the backward planner
- chronological order is reverse-iteration order for the backward planner.
- F, W, and h are not limited to the values in the example, and that other values could be used.
- the threshold in the comparison step is sufficiently small, the result of the comparison might nearly always call for replacing the current flight plan with the candidate flight plan. In this case, the comparison step might just be eliminated, and the candidate flight plan always sent as a replacement to the balloon. Such an approach could be used, for example, when the cost of sending the updated flight plan to the balloon is considered to be negligible.
- An example implementation of the reverse-generation technique applied to a backward flight planner can be described using example pseudo-code to specify logical programming instructions for carrying out steps and memory usage of an iterative backward planner, and that show how it can be invoked so as to reverse-generate the iterated data in a trajectory simulation.
- the pseudo-code implements the iterative backward planner as a set of objects that include both storage for current contingency data from the last iteration and callable logical operations to generate the next iteration (in computational iteration order) from the current contingency data.
- the example pseudo-code also includes logic for invoking the backward planner in accordance with example embodiments to reverse-generate the contingency tables.
- Table 3 illustrates example pseudo-code of reverse-generation iterative flight planner. Again, text preceded by the number sign (“#”) represents comments, not encoded logic instructions.
- the backward planner implemented as function P that takes as arguments current time, current state, goal location, and goal time, and returns an action and a score for the action.
- Table 3 includes definitions of various terms, as well as some brief explanatory comments.
- # score how close to the goal location the balloon will be at the goal time; that is, the # great circle distance between s(gt) and gl. Note that lower scores are better: they get the # balloon closer to the goal.
- iterator ScoreGridlterator::Make(ct, gl, gt) while iterator.HasNext( ): iterator ⁇ -iterator.Next( ) return iterator.score_grid def ScoreGridIterator::Make(ct, gl, gt): let score_grid be an array with one entry for every state cs in the discretized state space.
- score_grid[cs] great circle distance between cs and gl.
- t gt return (t, ct, gt, score_grid) def
- the example planner function P illustrates the use of dynamic programming to find the best trajectory.
- the function simulate (ct, cs, action, dt) simulates a balloon starting in state cs at time ct and performing the given action for a time duration dt.
- the function discretize (cs) maps a balloon state cs to its closest discretized counterpart.
- the function ScoreGrid iterates through all the score grids in reverse chronological order from gt to ct, making (gt ⁇ ct)/dt calls to ScoreGridIterator::Next.
- FIG. 11 is an example block diagram of a method 1100 to determine trajectories for a fleet of vehicles, in accordance with at least some embodiments described herein.
- Method 1100 shown in FIG. 11 presents an embodiment of a method that, for example, could be used with the balloon networks 100 and 204 , for example, and may be performed by a device, a server, a control station, a balloon, or a combination of any components of the balloon networks 100 and 204 .
- Method 1100 may include one or more operations, functions, or actions as illustrated by one or more of blocks 1102 - 1108 . Although the blocks are illustrated in a sequential order, these blocks may in some instances be performed in parallel, and/or in a different order than those described herein. Also, the various blocks may be combined into fewer blocks, divided into additional blocks, and/or removed based upon the desired implementation.
- each block may represent a module, a segment, or a portion of program code, which includes one or more instructions executable by a processor for implementing specific logical functions or steps in the process.
- the program code may be stored on any type of computer readable medium, for example, such as a storage device including a disk or hard drive.
- the computer readable medium may include a non-transitory computer readable medium, for example, such as computer-readable media that stores data for short periods of time like register memory, processor cache and Random Access Memory (RAM).
- the computer readable medium may also include non-transitory media, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example.
- the computer readable media may also be any other volatile or non-volatile storage systems.
- the computer readable medium may be considered a computer readable storage medium, a tangible storage device, or other article of manufacture, for example.
- each block in FIG. 11 may represent circuitry that is wired to perform the specific logical functions in the process.
- a system receives a specification for N time steps at which to compute N corresponding contingency tables of contingent balloon flight states for at least one balloon.
- the N time steps can define a sequence of time steps in a range between an initial time and a target time.
- an iterator configured for recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time is caused to reverse-generate the N contingency tables in an order from the initial time to the target time.
- Reverse-generation is caused by recursively: (i) subdividing the sequence of time steps by a factor of at least two into successively smaller sub-sequences, (ii) iterating in the computational iteration order over each recursively subdivided sub-sequence, and (iii) generating a contingency table closest in time to the initial time for the recursive iteration over each recursively subdivided sub-sequence.
- a sequence of planned balloon flight states is determined from the reverse-generated contingency tables.
- the sequence is ordered from ordered from the initial time to the target time, and corresponds to a predicted balloon flight trajectory that is within a threshold of a quantitative flight-plan objective.
- At block 1108 at least one flight command from the determined sequence of planned balloon flight states is provided to the at least one balloon, in order to cause the at least one balloon to attempt to follow at least a portion of the predicted flight trajectory.
- receiving the specification for N time steps could entail receiving the initial time, the target time, and a time-step size. In this way, N could be determined as a difference between the initial time and the target time divided by the time-step size.
- reverse-generating the N contingency tables in the order from the initial time to the target time further comprises reverse-generating the N contingency tables can be accomplished in O(N log 2 N) iteration steps.
- contingency tables from O(log 2 N) other iteration steps may be retained.
- each of the contingent balloon flight states can include a latitude state variable, a longitude state variable, an altitude state variable, and a battery level state variable.
- battery level could potentially be omitted as a contingent balloon flight state.
- battery power might still be considered a state variable, but just not one considered sufficiently relevant to flight planning vis-à-vis contingency tables.
- the contingency tables can also include at each of the N time steps one or more contingent balloon flight states, each having a contingent flight action and a respective target location for the at least one balloon that is predicted to be reachable at the target time by a sequence of contingent balloon flight states at intervening time steps.
- Each of the one or more contingent balloon flight states at each of the N time steps can be assigned a respective score based on a distance between its respective target location and a goal location for the at least one balloon.
- the goal location can be the same for all of the one or more contingent balloon flight states of the at least one balloon, and the score can increase inversely to distance between target location and goal location. In this formulation, the smaller the distance between the target location the goal location, the higher the score.
- a higher score would be deemed preferable to a lower score, since it corresponds to getting closer to the goal location.
- a penalty that increases with distance between target location and goal location could be assigned to each contingent balloon flight state.
- contingent balloon flight state can be quantified in a functional form, such that any one of these quantities can be determined or derived from the others. For example, given a particular contingent balloon flight state and a target location score, and a known (or specified) goal location, a score can be derived, and a corresponding contingent flight action determined. Therefore, various specific forms of contingency tables could be devised in accordance with example embodiments. In addition to the example above, which includes contingent balloon flight state, target location, contingent flight action, and score, other example forms of contingency tables could include just scores and contingent balloon flight states, just target locations and contingent balloon flight states, just contingent flight actions and contingent balloon flight states. Other example forms of contingency tables that support flight planning are possible as well.
- determining the sequence of planned balloon flight states from the reverse-generated contingency tables can entail determining a sequence of planned flight actions to execute at each of the N time steps by choosing one contingent flight action from each of the N time steps such that a predicted target location for the sequence of planned flight actions is closest to the goal location. More particularly, determining the sequence of planned flight actions to execute at each of the N time steps can entail simulating one or more balloon flight trajectories by simulating execution of each of one or more sequences of contingent flight actions, and determining a particular sequence of contingent flight actions from among the one or more sequences of contingent flight actions for which a simulated target location is closest to the goal location.
- the contingent flight action for each of the one or more contingent flight states can be one of three action commands to execute at a specified time.
- the three action commands can be increase balloon altitude, decrease balloon altitude, and maintain balloon altitude.
- the iterator could be a backward planner, such that the initial time is chronologically earlier than the target time, and the at least one balloon is projected to be at the goal location at the target time. Then, recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time can entail recursively determining in backward chronological order at least one backward sequence of contingent balloon flight states from the goal location at the target time to an initial contingent balloon flight state at the initial time.
- FIG. 12 illustrates an example method for such an application of reverse-iteration.
- a system receives a specification for N time steps at which to compute N corresponding contingency tables of contingent operational states for an autonomous device or “vehicle.”
- the N time steps can define a sequence of time steps in a range between an initial time and a target time.
- an iterator configured for recursively determining the contingency tables at successive time steps in a computational iteration order from the target time to the initial time is caused to reverse-generate the N contingency tables in an order from the initial time to the target time.
- Reverse-generation is caused by recursively: (i) subdividing the sequence of time steps by a factor of at least two into successively smaller sub-sequences, (ii) iterating in the computational iteration order over each recursively subdivided sub-sequence, and (iii) generating a contingency table closest in time to the initial time for the recursive iteration over each recursively subdivided sub-sequence.
- a sequence of planned operational states is determined from the reverse-generated contingency tables.
- the sequence is ordered from ordered from the initial time to the target time, and corresponds to a predicted operational state trajectory that is within a threshold of a quantitative operational plan objective.
- At block 1208 at least one command from the determined sequence of planned operational states is provided to the autonomous device (vehicle), in order to cause the at least one autonomous device to carry out a command in accordance with the planned operational states.
Abstract
Description
TABLE 1 |
reverse_iterate(iterator, iteration_length = None): |
# Determine iterator sequence length N on first call to reverse_iterate |
if iteration_length is None: |
iterator_length = len(copy(iterator)) |
# No more elements to reverse iterate |
if iteration_length == 0: |
return |
# Recursive sub-divisions down to just N/N |
if iteration_length == 1: |
yield iterator.next( ) |
return |
# Sub-divide this segment |
# [P1]: zero midpoint_index advances so far |
midpoint_index = floor(iteration length / 2) |
iterator_right = copy(iterator) |
# Recurse right (midpoint_index to n − 1) |
# [P2]: midpoint_index_advances ~ N/2 |
right_iter_length = iteration_length − midpoint_index |
skip_n_items(iterator_right, midpoint_index) |
# [P3]: T(right_iter_length) ~ T(N/2) |
for item in reverse_iterate(iterator_right, right_iter_length): |
yield item |
# Recurse left (0 to midpoint_index1) |
# [P4]: T(midpoint_index) ~ T(N/2) |
for item in reverse_iterate(iterator, midpoint_index): |
yield item |
TABLE 2 | ||
Every F = 6 hours: obtain latest wind forecasts and recompute entire contingency tables | ||
Every W = 5 minutes: | ||
Obtain current state of all balloons in fleet (latitude, longitude, altitude, battery level) | ||
For each balloon: | ||
Candidate simulation: simulate balloon trajectory for the next h = 6 hours of | ||
flight to determine a candidate flight plan (candidate sequence of altitude | ||
adjustment commands), using reverse-iterator to reverse-generate contingency | ||
tables with latest wind forecasts | ||
Current simulation: simulate balloon trajectory for the next h = 6 hours of | ||
flight using current flight plan (current sequence of altitude adjustment | ||
commands) most recently sent to the balloon | ||
Compare candidate flight plan with current flight plan: if the simulated | ||
trajectory of candidate flight plan brings balloon greater than a threshold | ||
closer to a goal location than the simulated trajectory of current flight plan, | ||
replace the current flight plan with the candidate flight plan | ||
TABLE 3 | |
# | Planner P(ct, cs, gl, gt)->(action, score) |
# | Arguments: |
# | ct = current time |
# | cs = current balloon state (latitude, longitude, altitude, battery level) |
# | gl = goal location (goal latitude, goal longitude) |
# | gt = goal time (time at which balloon should reach the goal location) |
# | Outputs: |
# | action = what action (ascend, descend, keep altitude) will allow the balloon to get as |
# | close as possible to the goal location at the goal time, assuming that the balloon always |
# | follows the action recommended by P(t, s(t), gl, gt) for all times between t between ct |
# | and gt, where s is the state trajectory resulting from always following the prescribed |
# | action and s(t) is the state in that trajectory at time t. |
# | score = how close to the goal location the balloon will be at the goal time; that is, the |
# | great circle distance between s(gt) and gl. Note that lower scores are better: they get the |
# | balloon closer to the goal. |
def P(ct, cs, gl, gt): | |
# Compute the score at every point in the state space, one time step into the future | |
next_score_grid = ScoreGrid(ct + dt, gl, gt) | |
# The best action is the one that takes you to the highest score point in space. | |
return ChooseBestAction(next_score_grid, ct, cs) | |
def ScoreGrid(ct, gl, gt): | |
# Make a new iterator starting at the goal time gt and walk reverse chronologically | |
# back to the desired time ct. | |
iterator = ScoreGridlterator::Make(ct, gl, gt) | |
while iterator.HasNext( ): | |
iterator <-iterator.Next( ) | |
return iterator.score_grid | |
def ScoreGridIterator::Make(ct, gl, gt): | |
let score_grid be an array with one entry for every state cs in the discretized state space. | |
for each state cs: | |
score_grid[cs] = great circle distance between cs and gl. | |
t = gt | |
return (t, ct, gt, score_grid) | |
def ScoreGridIterator::HasNext(iterator): | |
if (iterator.t − dt) >= iterator.ct: | |
return true | |
else: | |
return false | |
def ScoreGridIterator::Next(iterator): | |
let new_score_grid = new array, one entry for every state cs in the discretized state space. | |
t = iterator.t − dt | |
for each state cs: | |
new_ score_grid[cs] = ChooseBestAction(iterator.score_grid, t, cs).score | |
return (t, iterator.ct, iterator.gt, new_score_grid) | |
def ScoreOfAction(ct, cs, next_score_grid, action): | |
next_state = discretize(simulate(ct, cs, action, dt)) | |
return next_score_grid[next_state] | |
def ChooseBestAction(next_score_grid, ct, cs): | |
best_action = argminaction ScoreOfAction(ct, cs, next_score_grid, action) | |
best_score = ScoreOfAction(ct, cs, next_score_grid, best_action) | |
return (best_action, best_score) | |
# Invoke the planner P in the reverse-iterator and simulate a balloon trajectory | |
def FastSimulatePlan(start_state, starttime, gl, gt): | |
iterator = ScoreGridIteraton:Make(starttime + dt, gl, gt) | |
chronological_iterator = reverse_iterate(iterator) | |
let cs be a copy of start_state | |
let ct = start_time | |
while chronological_iterator.HasNext( ): | |
chronological_iterator <-chronological_iterator.Next( ) | |
next_score_grid = chronological_iterator.ScoreGrid | |
action = ChooseBestAction(next_score_grid, ct, cs) | |
cs <-simulate(ct, cs, action, dt) | |
ct <-ct + dt | |
append (ct, cs) to path | |
return path | |
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/183,771 US9201426B1 (en) | 2014-02-19 | 2014-02-19 | Reverse iteration of planning data for system control |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/183,771 US9201426B1 (en) | 2014-02-19 | 2014-02-19 | Reverse iteration of planning data for system control |
Publications (1)
Publication Number | Publication Date |
---|---|
US9201426B1 true US9201426B1 (en) | 2015-12-01 |
Family
ID=54609196
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/183,771 Expired - Fee Related US9201426B1 (en) | 2014-02-19 | 2014-02-19 | Reverse iteration of planning data for system control |
Country Status (1)
Country | Link |
---|---|
US (1) | US9201426B1 (en) |
Cited By (31)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9507346B1 (en) | 2015-11-04 | 2016-11-29 | Zoox, Inc. | Teleoperation system and method for trajectory modification of autonomous vehicles |
US9540091B1 (en) | 2016-02-11 | 2017-01-10 | World View Enterprises Inc. | High altitude balloon systems and methods |
US9561858B2 (en) | 2015-03-09 | 2017-02-07 | World View Enterprises Inc. | Rigidized assisted opening system for high altitude parafoils |
US9606539B1 (en) * | 2015-11-04 | 2017-03-28 | Zoox, Inc. | Autonomous vehicle fleet service and system |
US9612123B1 (en) | 2015-11-04 | 2017-04-04 | Zoox, Inc. | Adaptive mapping to navigate autonomous vehicles responsive to physical environment changes |
US9632502B1 (en) | 2015-11-04 | 2017-04-25 | Zoox, Inc. | Machine-learning systems and techniques to optimize teleoperation and/or planner decisions |
US9694910B2 (en) | 2013-02-22 | 2017-07-04 | World View Enterprises Inc. | Near-space operation systems |
US9720415B2 (en) | 2015-11-04 | 2017-08-01 | Zoox, Inc. | Sensor-based object-detection optimization for autonomous vehicles |
US9734455B2 (en) | 2015-11-04 | 2017-08-15 | Zoox, Inc. | Automated extraction of semantic information to enhance incremental mapping modifications for robotic vehicles |
US9754490B2 (en) | 2015-11-04 | 2017-09-05 | Zoox, Inc. | Software application to request and control an autonomous vehicle service |
US9802661B1 (en) | 2015-11-04 | 2017-10-31 | Zoox, Inc. | Quadrant configuration of robotic vehicles |
US9878664B2 (en) | 2015-11-04 | 2018-01-30 | Zoox, Inc. | Method for robotic vehicle communication with an external environment via acoustic beam forming |
US9910441B2 (en) | 2015-11-04 | 2018-03-06 | Zoox, Inc. | Adaptive autonomous vehicle planner logic |
US9958864B2 (en) | 2015-11-04 | 2018-05-01 | Zoox, Inc. | Coordination of dispatching and maintaining fleet of autonomous vehicles |
US10124875B1 (en) | 2017-01-09 | 2018-11-13 | World View Enterprises Inc. | Continuous multi-chamber super pressure balloon |
US10334050B2 (en) | 2015-11-04 | 2019-06-25 | Zoox, Inc. | Software application and logic to modify configuration of an autonomous vehicle |
US10338594B2 (en) * | 2017-03-13 | 2019-07-02 | Nio Usa, Inc. | Navigation of autonomous vehicles to enhance safety under one or more fault conditions |
US10336432B1 (en) | 2017-01-09 | 2019-07-02 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US10369974B2 (en) | 2017-07-14 | 2019-08-06 | Nio Usa, Inc. | Control and coordination of driverless fuel replenishment for autonomous vehicles |
US10401852B2 (en) | 2015-11-04 | 2019-09-03 | Zoox, Inc. | Teleoperation system and method for trajectory modification of autonomous vehicles |
US10409284B2 (en) | 2015-11-04 | 2019-09-10 | Zoox, Inc. | System of configuring active lighting to indicate directionality of an autonomous vehicle |
US10423162B2 (en) | 2017-05-08 | 2019-09-24 | Nio Usa, Inc. | Autonomous vehicle logic to identify permissioned parking relative to multiple classes of restricted parking |
US10466707B2 (en) * | 2017-12-22 | 2019-11-05 | X Development Llc | Planning robot stopping points to avoid collisions |
US10496766B2 (en) | 2015-11-05 | 2019-12-03 | Zoox, Inc. | Simulation system and methods for autonomous vehicles |
US10710633B2 (en) | 2017-07-14 | 2020-07-14 | Nio Usa, Inc. | Control of complex parking maneuvers and autonomous fuel replenishment of driverless vehicles |
US10745003B2 (en) | 2015-11-04 | 2020-08-18 | Zoox, Inc. | Resilient safety system for a robotic vehicle |
US11022971B2 (en) | 2018-01-16 | 2021-06-01 | Nio Usa, Inc. | Event data recordation to identify and resolve anomalies associated with control of driverless vehicles |
US11283877B2 (en) | 2015-11-04 | 2022-03-22 | Zoox, Inc. | Software application and logic to modify configuration of an autonomous vehicle |
US11301767B2 (en) | 2015-11-04 | 2022-04-12 | Zoox, Inc. | Automated extraction of semantic information to enhance incremental mapping modifications for robotic vehicles |
US11500378B2 (en) | 2015-11-04 | 2022-11-15 | Zoox, Inc. | Active lighting control for communicating a state of an autonomous vehicle to entities in a surrounding environment |
US20230109463A1 (en) * | 2021-09-20 | 2023-04-06 | Oracle International Corporation | Practical method for fast graph traversal iterators on delta-logged graphs |
Citations (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4802096A (en) * | 1987-05-14 | 1989-01-31 | Bell & Howell Company | Controlled direction non-contact detection system for automatic guided vehicles |
US5959574A (en) * | 1993-12-21 | 1999-09-28 | Colorado State University Research Foundation | Method and system for tracking multiple regional objects by multi-dimensional relaxation |
US6167263A (en) | 1997-05-16 | 2000-12-26 | Spherecore, Inc. | Aerial communications network including a plurality of aerial platforms |
US6230099B1 (en) * | 1998-08-12 | 2001-05-08 | Robert Bosch Gmbh | Method of determining a route from a starting point to a destination in a route network |
US20020065603A1 (en) * | 2000-11-30 | 2002-05-30 | Nissan Motor Co., Ltd. | Vehicle position calculation apparatus and method |
US6402090B1 (en) * | 1998-06-29 | 2002-06-11 | Global Aerospace Corporation | Balloon trajectory control system |
US6611755B1 (en) * | 1999-12-19 | 2003-08-26 | Trimble Navigation Ltd. | Vehicle tracking, communication and fleet management system |
US6628941B2 (en) * | 1999-06-29 | 2003-09-30 | Space Data Corporation | Airborne constellation of communications platforms and method |
US20040243381A1 (en) * | 2003-01-29 | 2004-12-02 | Sun Microsystems, Inc. | Automated test execution framework with central management |
US20040263386A1 (en) * | 2003-06-26 | 2004-12-30 | King Thomas M. | Satellite positioning system receivers and methods |
US6904335B2 (en) | 2002-08-21 | 2005-06-07 | Neal Solomon | System, method and apparatus for organizing groups of self-configurable mobile robotic agents in a multi-robotic system |
US7026980B1 (en) * | 2005-03-04 | 2006-04-11 | Lockheed Martin Corporation | Missile identification and tracking system and method |
US20060167869A1 (en) * | 2005-01-27 | 2006-07-27 | Kevin Jones | Multi-path simultaneous Xpath evaluation over data streams |
US7132975B2 (en) * | 2004-05-28 | 2006-11-07 | Time Domain Corporation | Apparatus and method for detecting moving objects |
US7603212B2 (en) * | 2006-03-30 | 2009-10-13 | Honeywell International, Inc. | Real time planning and scheduling for a team of unmanned vehicles |
US20090267740A1 (en) * | 2008-04-25 | 2009-10-29 | Pizzulo Thomas J | Systems and processes for tracking items |
US7805481B1 (en) * | 2006-01-19 | 2010-09-28 | Everest Michael T | Exploitation of topological categorization of chaotic and fractal functions, including field line calculations |
US20100317420A1 (en) * | 2003-02-05 | 2010-12-16 | Hoffberg Steven M | System and method |
US7913948B2 (en) | 2004-09-09 | 2011-03-29 | Porter David R | Method and apparatus for stratospheric and space structures |
US20110147513A1 (en) * | 2009-01-21 | 2011-06-23 | John Steven Surmont | Aerial payload deployment system |
US20120042315A1 (en) * | 2010-08-16 | 2012-02-16 | Clear Channel Management Services, Inc. | Method and system for controlling a scheduling order per category in a music scheduling system |
US8170747B2 (en) * | 2009-04-15 | 2012-05-01 | Industrial Technology Research Institute | Fleet maintenance method and in-vehicle communication system |
US20120120230A1 (en) * | 2010-11-17 | 2012-05-17 | Utah State University | Apparatus and Method for Small Scale Wind Mapping |
US8275499B2 (en) * | 2008-10-17 | 2012-09-25 | Thales | Device for calculating a flight plan of an aircraft |
US20120286991A1 (en) * | 2010-02-14 | 2012-11-15 | Trimble Navigation Limited | GNSS Signal Processing with Regional Augmentation Positioning |
US8412445B2 (en) * | 2011-02-18 | 2013-04-02 | Honda Motor Co., Ltd | Predictive routing system and method |
US8494689B1 (en) * | 2012-05-09 | 2013-07-23 | Raytheon Company | Autonomous coordination of agents |
US20130226373A1 (en) | 2012-02-27 | 2013-08-29 | Ge Aviation Systems Llc | Methods for in-flight adjusting of a flight plan |
US20140188377A1 (en) * | 2012-12-29 | 2014-07-03 | Google Inc. | Methods and Systems for Determining Fleet Trajectories to Satisfy a Sequence of Coverage Requirements |
US8781727B1 (en) * | 2013-01-15 | 2014-07-15 | Google Inc. | Methods and systems for performing flocking while executing a long-range fleet plan |
US8849571B1 (en) * | 2012-12-26 | 2014-09-30 | Google Inc. | Methods and systems for determining fleet trajectories with phase-skipping to satisfy a sequence of coverage requirements |
US8874356B1 (en) * | 2013-01-24 | 2014-10-28 | Google Inc. | Methods and systems for decomposing fleet planning optimizations via spatial partitions |
US8880326B1 (en) * | 2013-02-20 | 2014-11-04 | Google Inc. | Methods and systems for determining a cyclical fleet plan satisfying a recurring set of coverage requirements |
-
2014
- 2014-02-19 US US14/183,771 patent/US9201426B1/en not_active Expired - Fee Related
Patent Citations (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4802096A (en) * | 1987-05-14 | 1989-01-31 | Bell & Howell Company | Controlled direction non-contact detection system for automatic guided vehicles |
US5959574A (en) * | 1993-12-21 | 1999-09-28 | Colorado State University Research Foundation | Method and system for tracking multiple regional objects by multi-dimensional relaxation |
US6167263A (en) | 1997-05-16 | 2000-12-26 | Spherecore, Inc. | Aerial communications network including a plurality of aerial platforms |
US6402090B1 (en) * | 1998-06-29 | 2002-06-11 | Global Aerospace Corporation | Balloon trajectory control system |
US6230099B1 (en) * | 1998-08-12 | 2001-05-08 | Robert Bosch Gmbh | Method of determining a route from a starting point to a destination in a route network |
US6628941B2 (en) * | 1999-06-29 | 2003-09-30 | Space Data Corporation | Airborne constellation of communications platforms and method |
US6611755B1 (en) * | 1999-12-19 | 2003-08-26 | Trimble Navigation Ltd. | Vehicle tracking, communication and fleet management system |
US20020065603A1 (en) * | 2000-11-30 | 2002-05-30 | Nissan Motor Co., Ltd. | Vehicle position calculation apparatus and method |
US6904335B2 (en) | 2002-08-21 | 2005-06-07 | Neal Solomon | System, method and apparatus for organizing groups of self-configurable mobile robotic agents in a multi-robotic system |
US20040243381A1 (en) * | 2003-01-29 | 2004-12-02 | Sun Microsystems, Inc. | Automated test execution framework with central management |
US20100317420A1 (en) * | 2003-02-05 | 2010-12-16 | Hoffberg Steven M | System and method |
US20040263386A1 (en) * | 2003-06-26 | 2004-12-30 | King Thomas M. | Satellite positioning system receivers and methods |
US7132975B2 (en) * | 2004-05-28 | 2006-11-07 | Time Domain Corporation | Apparatus and method for detecting moving objects |
US7913948B2 (en) | 2004-09-09 | 2011-03-29 | Porter David R | Method and apparatus for stratospheric and space structures |
US20060167869A1 (en) * | 2005-01-27 | 2006-07-27 | Kevin Jones | Multi-path simultaneous Xpath evaluation over data streams |
US7026980B1 (en) * | 2005-03-04 | 2006-04-11 | Lockheed Martin Corporation | Missile identification and tracking system and method |
US7805481B1 (en) * | 2006-01-19 | 2010-09-28 | Everest Michael T | Exploitation of topological categorization of chaotic and fractal functions, including field line calculations |
US7603212B2 (en) * | 2006-03-30 | 2009-10-13 | Honeywell International, Inc. | Real time planning and scheduling for a team of unmanned vehicles |
US20090267740A1 (en) * | 2008-04-25 | 2009-10-29 | Pizzulo Thomas J | Systems and processes for tracking items |
US8275499B2 (en) * | 2008-10-17 | 2012-09-25 | Thales | Device for calculating a flight plan of an aircraft |
US20110147513A1 (en) * | 2009-01-21 | 2011-06-23 | John Steven Surmont | Aerial payload deployment system |
US8170747B2 (en) * | 2009-04-15 | 2012-05-01 | Industrial Technology Research Institute | Fleet maintenance method and in-vehicle communication system |
US20120286991A1 (en) * | 2010-02-14 | 2012-11-15 | Trimble Navigation Limited | GNSS Signal Processing with Regional Augmentation Positioning |
US20120042315A1 (en) * | 2010-08-16 | 2012-02-16 | Clear Channel Management Services, Inc. | Method and system for controlling a scheduling order per category in a music scheduling system |
US20120120230A1 (en) * | 2010-11-17 | 2012-05-17 | Utah State University | Apparatus and Method for Small Scale Wind Mapping |
US8412445B2 (en) * | 2011-02-18 | 2013-04-02 | Honda Motor Co., Ltd | Predictive routing system and method |
US20130226373A1 (en) | 2012-02-27 | 2013-08-29 | Ge Aviation Systems Llc | Methods for in-flight adjusting of a flight plan |
US8494689B1 (en) * | 2012-05-09 | 2013-07-23 | Raytheon Company | Autonomous coordination of agents |
US8849571B1 (en) * | 2012-12-26 | 2014-09-30 | Google Inc. | Methods and systems for determining fleet trajectories with phase-skipping to satisfy a sequence of coverage requirements |
US20140188377A1 (en) * | 2012-12-29 | 2014-07-03 | Google Inc. | Methods and Systems for Determining Fleet Trajectories to Satisfy a Sequence of Coverage Requirements |
US8781727B1 (en) * | 2013-01-15 | 2014-07-15 | Google Inc. | Methods and systems for performing flocking while executing a long-range fleet plan |
US8874356B1 (en) * | 2013-01-24 | 2014-10-28 | Google Inc. | Methods and systems for decomposing fleet planning optimizations via spatial partitions |
US8880326B1 (en) * | 2013-02-20 | 2014-11-04 | Google Inc. | Methods and systems for determining a cyclical fleet plan satisfying a recurring set of coverage requirements |
Cited By (59)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9694910B2 (en) | 2013-02-22 | 2017-07-04 | World View Enterprises Inc. | Near-space operation systems |
US11613364B2 (en) | 2013-02-22 | 2023-03-28 | World View Enterprises Inc. | Near-space operation systems |
US10829229B2 (en) | 2013-02-22 | 2020-11-10 | World View Enterprises Inc. | Near-space operation systems |
US9561858B2 (en) | 2015-03-09 | 2017-02-07 | World View Enterprises Inc. | Rigidized assisted opening system for high altitude parafoils |
US11608181B2 (en) | 2015-03-09 | 2023-03-21 | World View Enterprises Inc. | Rigidized assisted opening system for high altitude parafoils |
US10787268B2 (en) | 2015-03-09 | 2020-09-29 | World View Enterprises Inc. | Rigidized assisted opening system for high altitude parafoils |
US10591910B2 (en) | 2015-11-04 | 2020-03-17 | Zoox, Inc. | Machine-learning systems and techniques to optimize teleoperation and/or planner decisions |
US9507346B1 (en) | 2015-11-04 | 2016-11-29 | Zoox, Inc. | Teleoperation system and method for trajectory modification of autonomous vehicles |
US9720415B2 (en) | 2015-11-04 | 2017-08-01 | Zoox, Inc. | Sensor-based object-detection optimization for autonomous vehicles |
US9734455B2 (en) | 2015-11-04 | 2017-08-15 | Zoox, Inc. | Automated extraction of semantic information to enhance incremental mapping modifications for robotic vehicles |
US9754490B2 (en) | 2015-11-04 | 2017-09-05 | Zoox, Inc. | Software application to request and control an autonomous vehicle service |
US9802661B1 (en) | 2015-11-04 | 2017-10-31 | Zoox, Inc. | Quadrant configuration of robotic vehicles |
US9878664B2 (en) | 2015-11-04 | 2018-01-30 | Zoox, Inc. | Method for robotic vehicle communication with an external environment via acoustic beam forming |
US9910441B2 (en) | 2015-11-04 | 2018-03-06 | Zoox, Inc. | Adaptive autonomous vehicle planner logic |
US9958864B2 (en) | 2015-11-04 | 2018-05-01 | Zoox, Inc. | Coordination of dispatching and maintaining fleet of autonomous vehicles |
US10048683B2 (en) | 2015-11-04 | 2018-08-14 | Zoox, Inc. | Machine learning systems and techniques to optimize teleoperation and/or planner decisions |
US11314249B2 (en) | 2015-11-04 | 2022-04-26 | Zoox, Inc. | Teleoperation system and method for trajectory modification of autonomous vehicles |
US10259514B2 (en) | 2015-11-04 | 2019-04-16 | Zoox, Inc. | Drive module for robotic vehicle |
US10334050B2 (en) | 2015-11-04 | 2019-06-25 | Zoox, Inc. | Software application and logic to modify configuration of an autonomous vehicle |
US9630619B1 (en) | 2015-11-04 | 2017-04-25 | Zoox, Inc. | Robotic vehicle active safety systems and methods |
US11301767B2 (en) | 2015-11-04 | 2022-04-12 | Zoox, Inc. | Automated extraction of semantic information to enhance incremental mapping modifications for robotic vehicles |
US11283877B2 (en) | 2015-11-04 | 2022-03-22 | Zoox, Inc. | Software application and logic to modify configuration of an autonomous vehicle |
US10401852B2 (en) | 2015-11-04 | 2019-09-03 | Zoox, Inc. | Teleoperation system and method for trajectory modification of autonomous vehicles |
US10409284B2 (en) | 2015-11-04 | 2019-09-10 | Zoox, Inc. | System of configuring active lighting to indicate directionality of an autonomous vehicle |
US11796998B2 (en) | 2015-11-04 | 2023-10-24 | Zoox, Inc. | Autonomous vehicle fleet service and system |
US10446037B2 (en) | 2015-11-04 | 2019-10-15 | Zoox, Inc. | Software application to request and control an autonomous vehicle service |
US10745003B2 (en) | 2015-11-04 | 2020-08-18 | Zoox, Inc. | Resilient safety system for a robotic vehicle |
US11167812B2 (en) | 2015-11-04 | 2021-11-09 | Zoox, Inc. | Drive module for robotic vehicles |
US10543838B2 (en) | 2015-11-04 | 2020-01-28 | Zoox, Inc. | Robotic vehicle active safety systems and methods |
US11500378B2 (en) | 2015-11-04 | 2022-11-15 | Zoox, Inc. | Active lighting control for communicating a state of an autonomous vehicle to entities in a surrounding environment |
US11106218B2 (en) | 2015-11-04 | 2021-08-31 | Zoox, Inc. | Adaptive mapping to navigate autonomous vehicles responsive to physical environment changes |
US10712750B2 (en) | 2015-11-04 | 2020-07-14 | Zoox, Inc. | Autonomous vehicle fleet service and system |
US11091092B2 (en) | 2015-11-04 | 2021-08-17 | Zoox, Inc. | Method for robotic vehicle communication with an external environment via acoustic beam forming |
US9606539B1 (en) * | 2015-11-04 | 2017-03-28 | Zoox, Inc. | Autonomous vehicle fleet service and system |
US11067983B2 (en) | 2015-11-04 | 2021-07-20 | Zoox, Inc. | Coordination of dispatching and maintaining fleet of autonomous vehicles |
US9612123B1 (en) | 2015-11-04 | 2017-04-04 | Zoox, Inc. | Adaptive mapping to navigate autonomous vehicles responsive to physical environment changes |
US11061398B2 (en) | 2015-11-04 | 2021-07-13 | Zoox, Inc. | Machine-learning systems and techniques to optimize teleoperation and/or planner decisions |
US10921811B2 (en) | 2015-11-04 | 2021-02-16 | Zoox, Inc. | Adaptive autonomous vehicle planner logic |
US11022974B2 (en) | 2015-11-04 | 2021-06-01 | Zoox, Inc. | Sensor-based object-detection optimization for autonomous vehicles |
US9632502B1 (en) | 2015-11-04 | 2017-04-25 | Zoox, Inc. | Machine-learning systems and techniques to optimize teleoperation and/or planner decisions |
US11500388B2 (en) | 2015-11-04 | 2022-11-15 | Zoox, Inc. | System of configuring active lighting to indicate directionality of an autonomous vehicle |
US10496766B2 (en) | 2015-11-05 | 2019-12-03 | Zoox, Inc. | Simulation system and methods for autonomous vehicles |
US10988227B2 (en) | 2016-02-11 | 2021-04-27 | World View Enterprises Inc. | High altitude balloon systems and methods using continuous multi-compartment super pressure balloon |
US9540091B1 (en) | 2016-02-11 | 2017-01-10 | World View Enterprises Inc. | High altitude balloon systems and methods |
US10829192B1 (en) | 2017-01-09 | 2020-11-10 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US11511843B2 (en) | 2017-01-09 | 2022-11-29 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US10737754B1 (en) | 2017-01-09 | 2020-08-11 | World View Enterprises Inc. | Continuous multi-chamber super pressure balloon |
US11904999B2 (en) | 2017-01-09 | 2024-02-20 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US10336432B1 (en) | 2017-01-09 | 2019-07-02 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US10124875B1 (en) | 2017-01-09 | 2018-11-13 | World View Enterprises Inc. | Continuous multi-chamber super pressure balloon |
US11447226B1 (en) | 2017-01-09 | 2022-09-20 | World View Enterprises Inc. | Lighter than air balloon systems and methods |
US10338594B2 (en) * | 2017-03-13 | 2019-07-02 | Nio Usa, Inc. | Navigation of autonomous vehicles to enhance safety under one or more fault conditions |
US10423162B2 (en) | 2017-05-08 | 2019-09-24 | Nio Usa, Inc. | Autonomous vehicle logic to identify permissioned parking relative to multiple classes of restricted parking |
US10710633B2 (en) | 2017-07-14 | 2020-07-14 | Nio Usa, Inc. | Control of complex parking maneuvers and autonomous fuel replenishment of driverless vehicles |
US10369974B2 (en) | 2017-07-14 | 2019-08-06 | Nio Usa, Inc. | Control and coordination of driverless fuel replenishment for autonomous vehicles |
US11016493B2 (en) | 2017-12-22 | 2021-05-25 | X Development Llc | Planning robot stopping points to avoid collisions |
US10466707B2 (en) * | 2017-12-22 | 2019-11-05 | X Development Llc | Planning robot stopping points to avoid collisions |
US11022971B2 (en) | 2018-01-16 | 2021-06-01 | Nio Usa, Inc. | Event data recordation to identify and resolve anomalies associated with control of driverless vehicles |
US20230109463A1 (en) * | 2021-09-20 | 2023-04-06 | Oracle International Corporation | Practical method for fast graph traversal iterators on delta-logged graphs |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9201426B1 (en) | Reverse iteration of planning data for system control | |
US9275551B2 (en) | Methods and systems for determining fleet trajectories to satisfy a sequence of coverage requirements | |
US8781727B1 (en) | Methods and systems for performing flocking while executing a long-range fleet plan | |
US9651382B1 (en) | Methods and systems for determining altitudes for a vehicle to travel | |
US10354535B1 (en) | Methods and systems for determining when to launch vehicles into a fleet of autonomous vehicles | |
US8874356B1 (en) | Methods and systems for decomposing fleet planning optimizations via spatial partitions | |
US9424752B1 (en) | Methods and systems for performing fleet planning based on coarse estimates of regions | |
US8880326B1 (en) | Methods and systems for determining a cyclical fleet plan satisfying a recurring set of coverage requirements | |
US20200277038A1 (en) | Selection between Explore Mode and Control Mode for Aerial Vehicle | |
US20210014691A1 (en) | Balloon Clumping to Provide Bandwidth Requested in Advance | |
US9550558B1 (en) | Optimal altitude controller for super pressure aerostatic balloon | |
US8849571B1 (en) | Methods and systems for determining fleet trajectories with phase-skipping to satisfy a sequence of coverage requirements | |
US9321517B1 (en) | Methods and systems for altitude control of balloons to improve wind data | |
AU2013208213C1 (en) | Relative positioning of balloons with altitude control and wind data | |
US9319905B2 (en) | Re-tasking balloons in a balloon network based on expected failure modes of balloons | |
US9665103B1 (en) | Efficient aerostat navigation by moving between atmospheric layers | |
US8948927B1 (en) | Methods and systems for determining a distribution of balloons based on population densities | |
US9829561B2 (en) | Balloon-based positioning system and method | |
US9635706B1 (en) | Method for determining fleet control policies to satisfy a sequence of coverage requirements | |
US9747568B1 (en) | Methods and systems for determining when to decommission vehicles from a fleet of autonomous vehicles |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BONAWITZ, KEITH ALLEN;REEL/FRAME:032243/0486Effective date: 20140219 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: X DEVELOPMENT LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOOGLE INC.;REEL/FRAME:039900/0610Effective date: 20160901 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044144/0001Effective date: 20170929 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE CORRECTIVE BY NULLIFICATION TO CORRECT INCORRECTLY RECORDED APPLICATION NUMBERS PREVIOUSLY RECORDED ON REEL 044144 FRAME 0001. ASSIGNOR(S) HEREBY CONFIRMS THE CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:047894/0508Effective date: 20170929 |
|
AS | Assignment |
Owner name: LOON LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:X DEVELOPMENT LLC;REEL/FRAME:048175/0720Effective date: 20180627 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
AS | Assignment |
Owner name: LOON LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:X DEVELOPMENT LLC;REEL/FRAME:052345/0094Effective date: 20180627 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20231201 |