CN112970012A - System and method for specifying OLAP multidimensional datasets at query time - Google Patents
System and method for specifying OLAP multidimensional datasets at query time Download PDFInfo
- Publication number
- CN112970012A CN112970012A CN201980073362.4A CN201980073362A CN112970012A CN 112970012 A CN112970012 A CN 112970012A CN 201980073362 A CN201980073362 A CN 201980073362A CN 112970012 A CN112970012 A CN 112970012A
- Authority
- CN
- China
- Prior art keywords
- data source
- olap
- dataset
- data
- multidimensional
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 55
- 238000012545 processing Methods 0.000 claims abstract description 22
- 230000004044 response Effects 0.000 claims description 4
- 238000004590 computer program Methods 0.000 description 8
- 238000012800 visualization Methods 0.000 description 8
- 238000010586 diagram Methods 0.000 description 6
- 230000008569 process Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 4
- 230000001360 synchronised effect Effects 0.000 description 4
- 238000005516 engineering process Methods 0.000 description 3
- 238000013507 mapping Methods 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 230000002776 aggregation Effects 0.000 description 2
- 238000004220 aggregation Methods 0.000 description 2
- 238000007405 data analysis Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012935 Averaging Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2465—Query processing support for facilitating data mining operations in structured databases
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/283—Multi-dimensional databases or data warehouses, e.g. MOLAP or ROLAP
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2264—Multidimensional index structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2452—Query translation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2455—Query execution
- G06F16/24552—Database cache management
Abstract
Systems, methods, and storage media for generating an online analytical processing (OLAP) multi-dimensional dataset are disclosed. Exemplary embodiments may: receiving a multi-dimensional dataset definition file; accessing a data source; generating a data source property configuration for the data source using the multi-dimensional dataset definition file; determining that each of the respective parsed data from the data source is a key, an attribute, or a measure; and generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the data source characteristic configuration for the determined parsed data from the data source.
Description
Cross reference to related patent applications
This application claims priority from U.S. provisional patent application No.62/792,640 entitled "SYSTEMS AND METHODS FOR specializing OLAP CUBE AT QUERY TIME" (system and method FOR SPECIFYING OLAP multi-dimensional datasets AT QUERY TIME) filed on 15/1/2019, the entire contents of which are incorporated herein by reference in their entirety and FOR all purposes.
Background
The present disclosure relates to information distribution. Schemas that include a star schema can be generally described as a relational data warehouse. Multidimensional dataset (cube) structures are often built from relational data warehouses in order to provide faster and more powerful data analysis. Typically, a multidimensional dataset structure accomplishes this by organizing data in a hierarchical arrangement according to dimensions and metrics. A dimension may group data along natural categories and consist of one or more levels, where each level represents a different grouping within the same dimension. The levels can be organized into one or more hierarchies, typically from a coarse grained level to a most detailed level. The metrics may be the data values of the multi-dimensional dataset that are summarized and analyzed.
Disclosure of Invention
One aspect of the present disclosure relates to a system configured for generating an online analytical processing (OLAP) multi-dimensional dataset. The system may include one or more processors configured by machine-readable instructions. The processor may be configured to receive a multi-dimensional dataset definition file. The processor may be configured to access and parse data of a data source. The processor may be configured to generate a data source characteristic configuration for the data source. The processor may be configured to determine that each of the respective parsed data from the data sources is a key, an attribute, or a metric. The processor may be configured to generate an OLAP multidimensional dataset by combining a multidimensional dataset definition file and a data source characteristic configuration for the determined parsed data from the data source.
Another aspect of the present disclosure relates to a method for generating an online analytical processing multi-dimensional dataset. The method may include receiving a multi-dimensional dataset definition file. The method may include accessing and parsing data of a data source. The method may include generating a data source property configuration for the data source using the multi-dimensional dataset definition file. The method may include determining that each of the respective parsed data from the data sources is a key, an attribute, or a measure. The method may include generating an OLAP multidimensional dataset by combining the multidimensional dataset definition file and a data source characteristic configuration for the determined parsed data from the data source.
Another aspect of the present disclosure relates to a system configured for operating a query system. The system may include one or more processors configured by machine-readable instructions. The processor may be configured to receive a query including a multi-dimensional dataset identifier. The processor may be configured to retrieve an object from a data source associated with the multidimensional dataset identifier. The processor may be configured to generate an OLAP context container based on the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible. The processor may be configured to respond to a query based on the generated OLAP context container and the object retrieved from the data source.
Another aspect of the present disclosure relates to a method for operating a query system. The method may include receiving a query including a multi-dimensional dataset identifier. The method may include retrieving an object from a data source associated with the multidimensional dataset identifier. The method may additionally automatically generate and/or fetch an OLAP context container based on the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible. In some embodiments, the method may automatically generate an OLAP context container based on inferred data source characteristics and the role of the data source required for multidimensional dataset processing. The method may include responding to a query based on the generated OLAP context container and the object retrieved from the data source.
Still other aspects of the disclosure relate to a non-transitory computer-readable storage medium having instructions embodied thereon, the instructions being executable by one or more processors to perform any of the above methods. Other embodiments are disclosed, including embodiments relating to systems, methods, apparatuses, computer-readable media, and user interfaces.
Drawings
FIG. 1 is a block diagram of an example network architecture for specifying an OLAP multidimensional dataset at query time.
FIG. 2 is a block diagram of an example query system.
FIG. 3 is a flow diagram of a method for generating an online analytical processing multidimensional dataset according to one or more embodiments.
FIG. 4 is a flow diagram of a method for operating a query system in accordance with one or more embodiments.
Detailed Description
Systems and methods for specifying an OLAP multidimensional dataset at a database query time are disclosed. Additionally, the creation of OLAP multi-dimensional datasets on a star schema is simplified. Search and discovery of existing OLAP multi-dimensional datasets is simplified. Finally, the time to begin querying the OLAP multidimensional dataset after it is defined and updated is reduced. These features and advantages are achieved, at least in part, by decoupling a mode from an instance. The star schema can be more generally described as a relational data warehouse designed for retrieval speed. Multidimensional dataset structures are often built from relational data warehouses in order to provide faster and more powerful data analysis. Typically, a multidimensional dataset structure accomplishes this by organizing data in a hierarchical arrangement according to dimensions and metrics. A dimension may group data along natural categories and consist of one or more levels, where each level represents a different grouping within the same dimension. The levels can be organized into one or more hierarchies, typically from a coarse grained level to a most detailed level. The metrics may be the data values of the multi-dimensional dataset that are summarized and analyzed.
Some types of OLAP multidimensional datasets or other multidimensional dataset database structures are managed services that allow developers to improve the queryability of their multidimensional data through multidimensional dataset modeling. It provides data administration, protection against error pattern modification, and fast queries. It handles both simple business logic and complex business logic. One technical and computer-centric problem that is addressed is that of simplifying the creation of a multidimensional dataset database that would otherwise require the writing of multiple schema files. Schema (schema) is a structure behind the data organization. It includes different table relationships that enable business rules for the underlying tasks for which the database is created. The simplification will result in a reduction in the time it takes to write the pattern. By using a single configuration file, (1) a data source characteristic configuration for each data source is automatically generated, and (2) whether a column of a relational data source is a key, attribute, or measure is automatically generated. Multidimensional dataset creation may involve tools in which humans are involved in building the multidimensional dataset definition. The tool is able to automatically generate the configuration and schema (or multi-dimensional dataset definition) of an OLAP multi-dimensional dataset and when the tool finds any ambiguity, it involves a human removing the ambiguity, asking a question to the end user to generate the multi-dimensional dataset definition itself.
Another technical and computer-centric problem that is addressed is the creation of mechanisms in which there is no discovery of existing and new OLAP multidimensional datasets. The multi-dimensional datasets are indexed so that they can be searched and found.
Another technical and computer-centric problem that is addressed is reducing the time to compose a query from deciding to use an OLAP multidimensional dataset to execute the query. In some embodiments, the time may be reduced from on the order of days to on the order of seconds.
In some embodiments, one component of the disclosed systems and methods is to provide functionality for a user to specify a multidimensional dataset identifier in the request itself. Another component may be a schema-less tenant/instance that brings the multidimensional dataset definition file from a data source at a query time and then executes the query on the multidimensional dataset definition file. This may involve reducing the multidimensional dataset definition file creation time by not creating self-contained query language specific objects within the multidimensional dataset definition file. In some embodiments, the additional latency due to the creation of the on-the-fly multi-dimensional dataset definition file may be reduced by: (1) caching a multidimensional dataset definition file for reuse of the multidimensional dataset definition file if the query reappears on the same multidimensional dataset, (2) prefetching a multidimensional dataset definition file in which changes in the OLAP multidimensional dataset are scanned for changes and the cache in memory of the multidimensional dataset is updated whenever the multidimensional dataset definition changes, and (3) the tenant owns the data view pattern provider instead of creating the data view pattern provider each time at the query time.
FIG. 1 is a block diagram of an example network architecture 100 for specifying an OLAP multidimensional dataset at query time. The architecture can include one or more database servers 110, user devices 130, and a network 140.
In some implementations, the user device 130 may be used by a user to perform various actions and/or access various types of content, some of which may be provided over a network 140 (e.g., the internet, a LAN, a WAN, etc.). As used herein, a "user" or "entity" may refer to an individually operated user device 130 or the like that interacts with a resource or content item via the user device 130. User device 130 may be used to access websites (e.g., using an internet browser), media files, and/or any other type of content. An API (e.g., multidimensional dataset definition file API 204) may be configured to access content for display to a user within a resource (e.g., a web page, an application, etc.) and to provide content items to user devices 130 over network 140 for display within the resource. The content from which the API selects the items may be provided by one or more database servers 110 via network 140. In some implementations, one or more of the database servers can be at least the data catalog 208 and/or the schema-less database server 210.
FIG. 2 is a block diagram of an example query system 200. In some implementations, the user device 130 can include a Graphical User Interface (GUI)202 and a multidimensional dataset definition file API 204. There may be a data flow from the pipeline 206 to the data catalog 208 into the multidimensional dataset definition file API 204. There may be an OLAP multidimensional dataset query request from the multidimensional dataset definition file API204 to the schema-less database server 210. The query request may also pass through one or more visualization explorers 214. In some implementations, a drag-and-drop query interface can be used. The schema-less database server 210 can contain query scope schemas.
In some implementations, the user device 130 includes a GUI 202. The GUI can be configured to allow the user to create new dimensions and metrics and then map them onto the data source columns.
In some embodiments, the user device 130 includes a multidimensional dataset definition file API 204. The multidimensional dataset definition file API204 may provide a shell layer for allowing a user to set the multidimensional dataset definition file during a session. In some embodiments, the multidimensional dataset definition file creation time is reduced by not creating self-contained query language (e.g., RVL) -specific objects within the multidimensional dataset definition file. Further latency may be avoided by multidimensional dataset definition file caching and prefetching. The multidimensional dataset definition file caching may include storing the multidimensional dataset definition file for use in the event that the query is again received on the same multidimensional dataset, rather than recreating the multidimensional dataset definition file each time. The multidimensional dataset definition file prefetcher may scan the data directory 208 for changes in the OLAP multidimensional dataset. The multidimensional dataset definition file prefetcher is capable of updating an in-memory cache of an OLAP multidimensional dataset whenever the multidimensional dataset definition changes. Querying the specific field may be used to bypass the cache entirely and access the data directory 208 directly to retrieve the multidimensional dataset definition file change.
In some implementations, the example query system 200 includes a pipeline 206 (i.e., a version control system). The pipeline 206 can be used to modify the multidimensional dataset definition file and can validate the query against the modified schema. In some implementations, the pipeline 206 can be used to search OLAP multidimensional datasets. In some implementations, if the OLAP multidimensional dataset is indexed in the data directory 208, the pipeline 206 accesses the index in the data directory 208. The patterns in the pipe 206 may be synchronized to the data directory 208 for discovery. The schema in the pipeline 206 may be synchronized to the data catalog 208 for use in the schema-less database server 210.
In some implementations, the example query system 200 includes a data catalog 208. The data catalog 208 may index each OLAP multidimensional dataset that can be searched and discovered therein. In some embodiments, the multidimensional dataset definition file may be stored in a data directory 208 where it may be discovered. In some implementations, the data catalog 208 can be used to modify the multidimensional dataset definition file and the query can be validated against the modified query. In some implementations, if the OLAP multidimensional dataset is indexed in the data directory 208, the pipeline 206 accesses the index in the data directory 208. The multidimensional dataset definition file in the pipeline 206 may be synchronized to the data directory 208 for discovery.
In some implementations, the example query system 200 includes a visualization explorer 214. The visualization explorer 214 can serve a static dashboard or a dynamic dashboard over the OLAP multidimensional dataset. In some implementations, the visualization explorer 214 can be used as a service for generating interactive reports. The visualization explorer 214 instance may have to be set up and customized. In some implementations, the example query system 200 includes other visualization explorers. The visualization explorer may provide access to data sources. In some implementations, the visualization explorer can be used as a service for generating interactive reports.
In some implementations, the example query system 200 includes a schema-less database server 210. Schema-less database server 210 may contain query scope schema 216. Schema synchronized to the data catalog 208 (i.e., multidimensional dataset definition file) in the pipeline 206 may be used by the schema-less database server 210. In some embodiments, the schema-less database server 210 is capable of running requests on OLAP multidimensional datasets provided as part of a query request. The query scope schema 216 can be configured to use references to the data directories 208 in queries for specifying what multi-dimensional dataset definition files to use. In some implementations, the example query system 200 uses an OLAP context container, where the OLAP context container is an object used to convert an OLAP query into an SQL query during OLAP query execution. The OLAP context container may contain a mapping from the OLAP model to a relational data source. The OLAP context container may also contain various indexes to speed up the OLAP switch request. In some embodiments, the OLAP context container also includes user-specified data to influence the heuristics used during SQL generation. For example, when a particular set of fields is a request, user-specified data in an OLAP context container may determine that a multidimensional dataset schema preferentially selects one data source over another.
FIG. 3 illustrates a method 300 for generating an online analytical processing multidimensional dataset, according to one or more embodiments. The operations of method 300 presented below are intended to be illustrative. In some implementations, the method 300 may be implemented with one or more additional operations not described and/or without one or more of the operations discussed. Additionally, the order in which the operations of method 300 are illustrated in fig. 3 and described below is not intended to be limiting. Briefly, the method 300 includes: receiving a multi-dimensional dataset definition file; accessing a data source; generating a data source characteristic configuration for the data source; determining that each of the respective parsed data from the data source is a key, an attribute, or a measure; and generating an OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the data source property configuration for the data.
In some implementations, method 300 may be implemented in one or more processing devices (e.g., a digital processor, an analog processor, a digital circuit designed to process information, an analog circuit designed to process information, a state machine, and/or other mechanisms for electronically processing information). The one or more processing devices (e.g., database server 110, modeless database server 210, etc.) may include one or more devices that perform some or all of the operations of method 300 in response to instructions electronically stored on an electronic storage medium. The one or more processing devices may include one or more devices configured through hardware, firmware, and/or software to be specifically designed for performing one or more of the operations of method 300.
Still referring to FIG. 3, and in more detail, operation 310 may include receiving a multi-dimensional dataset definition file. In some embodiments, rather than requiring multiple multi-dimensional dataset definition files to create an OLAP multi-dimensional dataset, only a single multi-dimensional dataset definition file can be utilized to create an OLAP multi-dimensional dataset by using a data source (e.g., a non-RVL data source, where RVL or a relational view language is a self-contained query language, where RVL uses information in the schema to automatically aggregate data as columns are projected). For example, the multidimensional dataset definition file may be a cube definition configuration file. In some embodiments, this is a multidimensional dataset definition file used to create an OLAP multidimensional dataset in the "RVL _ LESS" mode. The RVL _ LESS mode may be hidden from the end user.
FIG. 4 illustrates a method 400 for operating a query system in accordance with one or more embodiments. The operations of method 400 presented below are intended to be illustrative. In some implementations, the method 400 may be implemented with one or more additional operations not described and/or without one or more of the operations discussed. Additionally, the order in which the operations of method 400 are illustrated in fig. 4 and described below is not intended to be limiting.
In some implementations, method 400 may be implemented in one or more processing devices (e.g., a digital processor, an analog processor, a digital circuit designed to process information, an analog circuit designed to process information, a state machine, and/or other mechanisms for electronically processing information). The one or more processing devices (e.g., user device 130, database server 110, modeless database server 210, etc.) may include one or more devices that perform some or all of the operations of method 300 in response to instructions stored electronically on an electronic storage medium. The one or more processing devices may include one or more devices configured through hardware, firmware, and/or software to be specifically designed for performing one or more of the operations of method 400.
Although the technology has been described in detail for the purpose of illustration based on what is currently considered to be the most practical and preferred embodiments, it is to be understood that such detail is solely for that purpose and that the technology is not limited to the disclosed embodiments, but, on the contrary, is intended to cover modifications and equivalent arrangements that are within the spirit and scope of the appended claims. For example, it is to be understood that the present technology contemplates that, to the extent possible, one or more features of any embodiment can be combined with one or more features of any other embodiment.
Aspects of the subject matter described in this specification and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term "data processing apparatus" encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer does not necessarily have such a device. Furthermore, the computer can be embedded in another device, e.g., a mobile phone, a Personal Digital Assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name a few. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example: semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a key pad and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
Aspects of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component, such as a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), such as the Internet.
While this specification contains many specifics, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of particular embodiments of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
The subject matter of this specification has been described in terms of particular embodiments, but other embodiments can be practiced and are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.
These and other embodiments are within the scope of the following claims.
Claims (20)
1. A system configured for generating an online analytical processing (OLAP) multidimensional dataset, the system comprising:
one or more processors configured by machine-readable instructions to:
receiving a multi-dimensional dataset definition file;
accessing and parsing data of a data source;
generating a data source characteristic configuration for the data source;
determining that each of the respective parsed data from the data source is a key, an attribute, or a measure; and
generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the data source characteristic configuration for the determined parsed data from the data source.
2. The system of claim 1, wherein a plurality of data sources are accessed and parsed, and wherein the one or more processors are further configured by machine readable instructions to:
generating a respective data source characteristic configuration for each of the plurality of data sources; and is
Generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the respective data source characteristic configuration for each of the plurality of data sources.
3. The system of claim 1, wherein the one or more processors are further configured by machine-readable instructions to:
receiving a query including a multi-dimensional dataset identifier;
retrieving an object from a data source associated with the multi-dimensional dataset identifier;
generating an OLAP context container based on the multidimensional dataset identifier provided in the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible; and
responding to the query based on the generated OLAP context container and the object retrieved from the data source.
4. The system of claim 3, wherein the cached OLAP context container is updated by scanning the data source associated with the multidimensional dataset identifier for changes and updating the cached OLAP context container each time the multidimensional dataset definition for the data source has changed.
5. The system of claim 4, wherein the cached OLAP context container is stored in a cache within a memory of a multidimensional dataset, wherein the data source associated with the multidimensional dataset identifier comprises the multidimensional dataset.
6. The system of claim 3, wherein the data source characteristic configuration is generated at query time in response to receiving the query including the multi-dimensional dataset identifier.
7. A method executed on a computing device for generating an online analytical processing multi-dimensional dataset, the method comprising:
receiving a multi-dimensional dataset definition file;
accessing and parsing data of a data source;
generating a data source property configuration for the data source by using the multi-dimensional dataset definition file;
determining that each of the respective parsed data from the data source is a key, an attribute, or a measure; and
generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the data source characteristic configuration for the determined parsed data from the data source.
8. The method of claim 7, wherein a plurality of data sources are accessed and parsed, the method further comprising: generating a respective OLAP context container for each of the plurality of data sources using the multi-dimensional dataset definition file; and generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the respective data source characteristic configuration for each of the plurality of data sources.
9. The method of claim 7, further comprising receiving a query including a multidimensional dataset identifier, wherein the data source characteristic configuration is generated at a query time in response to receiving the query including the multidimensional dataset identifier.
10. A non-transitory computer-readable storage medium having instructions embodied thereon, the instructions being executable by one or more processors to perform a method for generating an online analytics processing multidimensional dataset, the method comprising:
receiving a multi-dimensional dataset definition file;
accessing and parsing data of a data source;
generating a data source property configuration for the data source by using the multi-dimensional dataset definition file;
determining that each of the respective parsed data from the data source is a key, an attribute, or a measure; and
generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the data source characteristic configuration for the determined parsed data from the data source.
11. The computer-readable storage medium of claim 10, wherein a plurality of data sources are accessed, further comprising: generating a respective data source characteristic configuration for each of the plurality of data sources using the multi-dimensional dataset definition file; and generating the OLAP multi-dimensional dataset by combining the multi-dimensional dataset definition file and the respective data source characteristic configuration for each of the plurality of data sources.
12. A system configured for operating a query system, the system comprising:
one or more processors configured by machine-readable instructions to:
receiving a query including a multi-dimensional dataset identifier;
retrieving an object from a data source associated with the multi-dimensional dataset identifier;
generating an OLAP context container based on the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible; and
responding to the query based on the generated OLAP context container and the object retrieved from the data source.
13. The system of claim 12, wherein the cached OLAP context container is updated by scanning the data source associated with the multidimensional dataset identifier for changes; and is
Wherein the cached OLAP context container is updated by updating the OLAP context container each time the multidimensional dataset definition of the data source has changed.
14. The system of claim 13, wherein the cached OLAP context container is stored in a cache within a memory of a multidimensional dataset, wherein the data source associated with the multidimensional dataset identifier comprises the multidimensional dataset.
15. A method of operating a query system, comprising:
receiving a query including a multi-dimensional dataset identifier;
retrieving an object from a data source associated with the multi-dimensional dataset identifier;
generating an OLAP context container based on the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible; and
responding to the query based on the generated OLAP context container and the object retrieved from the data source.
16. The method of claim 15, wherein the cached OLAP context container is updated by scanning the data source associated with the multidimensional dataset identifier for changes; and is
Wherein the cached OLAP context container is updated by updating the cached OLAP context container each time the multidimensional dataset definition for the data source has changed.
17. The method of claim 16, wherein the cached OLAP context container is stored in a cache within a memory of a multidimensional dataset, wherein the data source associated with the multidimensional dataset identifier comprises the multidimensional dataset.
18. A non-transitory computer-readable storage medium having instructions embodied thereon, the instructions being executable by one or more processors to perform a method for operating a query system, the method comprising:
receiving a query including a multi-dimensional dataset identifier;
retrieving an object from a data source associated with the multi-dimensional dataset identifier;
generating an OLAP context container based on the query by determining whether a cached OLAP context container associated with the multidimensional dataset identifier is accessible; and
responding to the query based on the generated OLAP context container and the object retrieved from the data source.
19. The computer-readable storage medium of claim 18, wherein the cached OLAP context container is updated by scanning the data source associated with the multidimensional dataset identifier for changes; and is
Wherein the cached OLAP context container is updated by updating the cached OLAP context container each time the multidimensional dataset definition for the data source has changed.
20. The computer-readable storage medium of claim 19, wherein the cached OLAP context container is stored in a cache within a memory of a multidimensional dataset, wherein the data source associated with the multidimensional dataset identifier comprises the multidimensional dataset.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962792640P | 2019-01-15 | 2019-01-15 | |
US62/792,640 | 2019-01-15 | ||
PCT/US2019/016901 WO2020149865A1 (en) | 2019-01-15 | 2019-02-06 | Systems and methods for specifying olap cube at query time |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112970012A true CN112970012A (en) | 2021-06-15 |
Family
ID=65494633
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980073362.4A Pending CN112970012A (en) | 2019-01-15 | 2019-02-06 | System and method for specifying OLAP multidimensional datasets at query time |
Country Status (4)
Country | Link |
---|---|
US (1) | US11941031B2 (en) |
EP (1) | EP3864520A1 (en) |
CN (1) | CN112970012A (en) |
WO (1) | WO2020149865A1 (en) |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090228436A1 (en) * | 2008-03-05 | 2009-09-10 | Microsoft Corporation | Data domains in multidimensional databases |
CN102725757A (en) * | 2010-02-05 | 2012-10-10 | 微软公司 | Contextual queries |
CN104933115A (en) * | 2015-06-05 | 2015-09-23 | 北京京东尚科信息技术有限公司 | Multi-dimensional analysis method and system |
CN107301206A (en) * | 2017-06-01 | 2017-10-27 | 华南理工大学 | A kind of distributed olap analysis method and system based on pre-computation |
CN108875008A (en) * | 2018-06-15 | 2018-11-23 | 湖北德普电气股份有限公司 | A kind of Large Volume Data analysis method and device |
Family Cites Families (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6633882B1 (en) * | 2000-06-29 | 2003-10-14 | Microsoft Corporation | Multi-dimensional database record compression utilizing optimized cluster models |
US9626421B2 (en) * | 2007-09-21 | 2017-04-18 | Hasso-Plattner-Institut Fur Softwaresystemtechnik Gmbh | ETL-less zero-redundancy system and method for reporting OLTP data |
US7904413B2 (en) * | 2007-09-28 | 2011-03-08 | International Business Machines Corporation | Method and system to segment an OLAP set |
US8121975B2 (en) * | 2008-02-20 | 2012-02-21 | Panorama Software Inc. | Creating pivot tables from tabular data |
CN102207940B (en) * | 2010-03-31 | 2014-11-05 | 国际商业机器公司 | Method and system for checking data |
US9495429B2 (en) * | 2010-07-09 | 2016-11-15 | Daniel Paul Miranker | Automatic synthesis and presentation of OLAP cubes from semantically enriched data sources |
US9418101B2 (en) * | 2012-09-12 | 2016-08-16 | International Business Machines Corporation | Query optimization |
US20160103903A1 (en) * | 2013-03-15 | 2016-04-14 | Decisyon, Inc. | Systems, devices, and methods for generation of contextual objects mapped by dimensional data to data measures |
US11176175B1 (en) * | 2014-07-31 | 2021-11-16 | Pulselight Holdings, Inc. | System and method for computing and managing datasets using hierarchical analytics |
US10528540B2 (en) * | 2015-05-11 | 2020-01-07 | AtScale, Inc. | Dynamic aggregate generation and updating for high performance querying of large datasets |
US9817876B2 (en) * | 2015-06-29 | 2017-11-14 | Planisware SAS | Enhanced mechanisms for managing multidimensional data |
US10838982B2 (en) * | 2015-10-23 | 2020-11-17 | Oracle International Corporation | System and method for aggregating values through risk dimension hierarchies in a multidimensional database environment |
US10140325B2 (en) * | 2015-12-30 | 2018-11-27 | Business Objects Software Limited | Data source identification mapping in blended data operations |
US10896205B2 (en) * | 2018-04-30 | 2021-01-19 | Pelatro Pte. Ltd. | Interactive on-demand hypercube synthesis based multi-dimensional drilldown and a pivotal analysis tool and methods of use |
US11188554B2 (en) * | 2018-07-19 | 2021-11-30 | Oracle International Corporation | System and method for real time data aggregation in a virtual cube in a multidimensional database environment |
-
2019
- 2019-02-06 WO PCT/US2019/016901 patent/WO2020149865A1/en unknown
- 2019-02-06 EP EP19706193.0A patent/EP3864520A1/en active Pending
- 2019-02-06 US US17/290,543 patent/US11941031B2/en active Active
- 2019-02-06 CN CN201980073362.4A patent/CN112970012A/en active Pending
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090228436A1 (en) * | 2008-03-05 | 2009-09-10 | Microsoft Corporation | Data domains in multidimensional databases |
CN102725757A (en) * | 2010-02-05 | 2012-10-10 | 微软公司 | Contextual queries |
CN104933115A (en) * | 2015-06-05 | 2015-09-23 | 北京京东尚科信息技术有限公司 | Multi-dimensional analysis method and system |
CN107301206A (en) * | 2017-06-01 | 2017-10-27 | 华南理工大学 | A kind of distributed olap analysis method and system based on pre-computation |
CN108875008A (en) * | 2018-06-15 | 2018-11-23 | 湖北德普电气股份有限公司 | A kind of Large Volume Data analysis method and device |
Also Published As
Publication number | Publication date |
---|---|
WO2020149865A1 (en) | 2020-07-23 |
US20220012266A1 (en) | 2022-01-13 |
EP3864520A1 (en) | 2021-08-18 |
US11941031B2 (en) | 2024-03-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230376487A1 (en) | Processing database queries using format conversion | |
US20210286787A1 (en) | System and method for slowly changing dimension and metadata versioning in a multidimensional database environment | |
US10853343B2 (en) | Runtime data persistency for in-memory database systems | |
US10452650B1 (en) | Data querying | |
JP2020518069A (en) | Generation and Execution of Query Plan in Relational Database Management System with Temporal-Relational Database | |
US20120310934A1 (en) | Historic View on Column Tables Using a History Table | |
US20220138226A1 (en) | System and method for sandboxing support in a multidimensional database environment | |
US7814045B2 (en) | Semantical partitioning of data | |
US10339040B2 (en) | Core data services test double framework automation tool | |
US11354332B2 (en) | Enabling data access by external cloud-based analytics system | |
US10289622B2 (en) | Ranking using data of continuous scales | |
US9600299B2 (en) | Application object framework | |
US20140181004A1 (en) | Common Framework for Definition, Generation, and Management of Metadata Runtime-Loads | |
US9400830B2 (en) | Key figure data filters in OLAP with hierarchies | |
US10366089B2 (en) | Ranking based on dynamic contextual information | |
CN109947768B (en) | Local identifier for database object | |
Wang et al. | EasyCache: a transparent in-memory data caching approach for internetware | |
US11941031B2 (en) | Systems and methods for specifying OLAP cube at query time | |
US10642660B2 (en) | Database variable size entry container page reorganization handling based on use patterns | |
US10642756B2 (en) | Database variable size entry container free space handling based on use patterns | |
US20180210903A1 (en) | Multi-Pass Duplicate Identification Using Sorted Neighborhoods and Aggregation Techniques | |
US11526513B2 (en) | SQL interface for embedded graph subqueries | |
US20240095243A1 (en) | Column-based union pruning | |
US20240134849A1 (en) | Virtual access to parameterized data objects | |
US20230185714A1 (en) | Transactional multi-version control enabled update of cached graph indices |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |