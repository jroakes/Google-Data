US11093813B2 - Answer to question neural networks - Google Patents
Answer to question neural networks Download PDFInfo
- Publication number
- US11093813B2 US11093813B2 US15/787,615 US201715787615A US11093813B2 US 11093813 B2 US11093813 B2 US 11093813B2 US 201715787615 A US201715787615 A US 201715787615A US 11093813 B2 US11093813 B2 US 11093813B2
- Authority
- US
- United States
- Prior art keywords
- neural network
- question
- input
- decoder
- passage
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G06N3/0445—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
Definitions
- This specification relates to identifying answers to questions using neural networks.
- Neural networks are machine learning models that employ one or more layers of models to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- a recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence.
- a recurrent neural network can use some or all of the internal state of the network from a previous time step in computing an output at a current time step.
- An example of a recurrent neural network is a long short term (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells that each include an input gate, a forget gate, and an output gate that allow the cell to store previous states for the cell, e.g., for use in generating a current activation or to be provided to other components of the LSTM neural network.
- LSTM long short term
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving an input passage and an input question string; and processing the input passage and the input question string using a neural network system to generate an answer score that indicates how well the input text passage answers the question posed by the input question string, wherein the neural network system includes an encoder neural network, a decoder neural network, and a matching vector neural network.
- another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving an input passage; and processing the input passage using a neural network system to generate an output question string that poses a question that is answered by the input passage, wherein the neural network system includes an encoder neural network, a decoder neural network, and a matching vector neural network.
- inventions of these aspects include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods.
- a system of one or more computers can be configured to perform particular operations or actions by virtue of software, firmware, hardware, or any combination thereof installed on the system that in operation may cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- a computer system that includes an encoder neural network, a decoder neural network, a matching vector neural network.
- the encoder neural network is configured to receive an input text passage and to generate a respective encoded representation for each passage token in the input text passage.
- the decoder neural network is configured to, for each of a plurality of time steps, receive as input at least a preceding token in the input question string and a preceding internal state of the decoder neural network and to process the input to update the internal state of the decoder neural network and, optionally, generate a set of question token scores for the time step.
- the matching vector neural network is configured to, at each time step, receive the preceding internal state of the decoder neural network and the encoded representations and to generate a matching vector for the time step.
- the system also includes a subsystem that is configured to generate an answer score that indicates how well the input text passage answers the question posed by the input question string based at least on the matching vectors for the time step.
- inventions of this aspect include corresponding apparatus, and computer programs recorded on one or more computer storage devices, each configured to implement the computer system.
- a system of one or more computers can be configured to perform particular operations or actions by virtue of software, firmware, hardware, or any combination thereof installed on the system that in operation may cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- An answer to question system can effectively generate an answer score that indicates how well a passage answers a given question.
- the answer to question system can also effectively generate a question that is answered by an input passage.
- the answer to question system can not only effectively determine the best question for a given input passage, but can also effectively score input questions to reflect how well the input passage answers the input question, i.e., to discern bad answers from mediocre answers, mediocre answers from good answers, bad answers from good answers, and so on.
- the neural network can therefore be trained using given relationships between text inputs such that the neural network is then able to determine corresponding relationships based upon unseen input. Additionally, because the system is configured to and is trained to determine questions that are answered by a given passage rather than determining passages that answer a given question, the amount of data needed to train the system and that needs to be analyzed by the system to generate an output is greatly reduced. In particular, the system does not need to analyze a large body of electronic documents to generate an output and can instead analyze multiple questions, which tend to be shorter and more computationally efficient to process than electronic documents or passages extracted from electronic documents, against a single answer, rather than analyzing a single question against multiple answers, which are generally longer and less computationally efficient to process.
- a system encodes a single relatively longer passage and can then score multiple relatively shorter possible questions rather than encoding a single short question and then scoring multiple relatively longer possible passages when generating an output, the system is much more computationally-efficient and can generate more accurate answer scores.
- a system according to embodiments is such that it may be effectively trained using a relatively small body of text.
- the use of the answer to question system can improve the operation of the computer or computers on which the system is implemented. For example, because the answer to question system allows answer scores for input passage—input answer pairs to be effectively computed in advance, less compute time, bandwidth, battery use, and so on is required to determine appropriate answers to questions when the questions are actually posed.
- a passage that effectively answers the question posed by the search query can be quickly identified and presented as part of the response to the search query.
- the answer to question system allows answer scores for input passage—input question pairs to be determined without needing to use templates or other external data
- the amount of computing resources needed to effectively determine the question score are reduced, i.e., the amount of processing resources and memory needed to determine the answer score are reduced. That is, because the described system scores an input passage—question pair without needing to take any other external data, e.g., templates, as input, the system can generate the scores using fewer computing resources.
- FIG. 1 shows an example answer to question system.
- FIG. 2 shows an example attention, matching, and decoding subsystem.
- FIG. 3 is a flow diagram of an example process for selecting a passage that provides an answer to a question.
- FIG. 4 is a flow diagram of an example process for generating a question that is answered by a passage.
- FIG. 5 is a flow diagram of an example process for training an encoder neural network and an attention, matching, and decoding subsystem.
- FIG. 1 shows an example answer to question system 100 .
- the answer to question system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the answer to question system 100 can (i) receive an input text passage and generate a score for each of one or more input question strings that indicates how well the input text passage answers the question posed by the input question string or (ii) receive an input text passage and generate an output question string that is answered by the input text passage.
- the answer to question system 100 can obtain an input passage 102 and generate a corresponding question string 110 that is answered by the input passage 102 .
- the answer to question system 100 can obtain an input passage 102 and an input question string 112 and generate a corresponding answer score 114 that indicates how well the input passage 102 answers the input question string 112 .
- the answer score 114 indicates how well the input passage 102 satisfies the informational need of a user posing the input question string 112 .
- An input passage is a sequence of tokens, referred to in this specification as passage tokens, that each represent n-grams, i.e., characters, words, sub-words, and so on.
- the passage 102 may be a phrase, a sentence, a paragraph, or another text segment extracted from a source document.
- a question string is a sequence of tokens, referred to in this specification as question tokens, that each represent n-grams, such that the question string represents a natural language question or search query that explicitly or implicitly poses a question.
- the answer to question system 100 includes an encoder neural network 104 and an attention, matching, and decoding subsystem 108 .
- the encoder neural network 104 processes a given input passage and generates a respective encoded representation for each passage token in the input passage, e.g., encoded representations 106 for the passage tokens in the input passage 102 .
- the encoded representation for each passage token is a vector or other ordered collection of numeric values that represents the passage token (or the n-gram represented by the passage token) in the context of the input passage.
- the encoder neural network 104 is a recurrent neural network, e.g., a long short-term memory neural network (LSTM), that has been configured through training to generate the encoded representations.
- LSTM long short-term memory neural network
- Example encoder recurrent neural networks that can be configured through training to generate appropriate encoded representations are described in Wu, Yonghui, et al, Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation , available at https://arxiv.org/abs/1609.08144.
- the subsystem 108 receives the encoded representations 106 and the input question string 108 and generates a matching output that defines the answer score for the input question string 108 that indicates how well the input passage 102 answers the question posed by the input question string 108 .
- a question scoring engine 104 in the answer to question system 100 then receives the matching output generated by the subsystem 108 and generates the answer score from at least the matching output. The operations performed by the subsystem 108 to generate a matching score are described in more detail below with reference to FIG. 2 .
- the subsystem 108 receives the encoded representations 106 and generates an output question string that is answered by the input passage 102 .
- the operations performed by the subsystem 108 to generate a question string are described in more detail below with reference to FIG. 2 .
- FIG. 2 shows an example attention, matching, and decoding subsystem 108 as described above with reference to FIG. 1 .
- the subsystem 108 when generating an output question string, the subsystem 108 generates the output question string token by token, i.e., by outputting a respective set of question token scores 214 time step by time step until the output question string has been completed.
- Each set of question token scores is a score distribution over tokens in a vocabulary of tokens that may be included in an output question string.
- the vocabulary of tokens can include multiple tokens that each represent n-grams, i.e., characters, words, sub-words, and so on.
- the vocabulary of tokens also includes one or more special tokens, e.g., an end-of-sequence token, a start-of-sequence token, and so on.
- the subsystem 108 includes a decoder Recurrent Neural Network (RNN) 202 , an attention vector neural network 204 , and a matching vector neural network 220 .
- RNN decoder Recurrent Neural Network
- the decoder RNN 202 is a recurrent neural network that receives an input sequence and maintains an internal state while processing the inputs in the input sequence.
- the RNN uses some or all of the internal hidden state of the network from processing a preceding input in the input sequence in combination with the preceding output in the output sequence to update the internal hidden state of the recurrent neural network and to generate a decoder output.
- the decoder RNN 202 has been configured to, for each time step, generate a decoder output that is a score distribution over tokens in the vocabulary of tokens that may be included in an output question string.
- the decoder RNN includes multiple recurrent neural network layers, e.g., multiple LSTM layers, and an output layer.
- the decoder RNN 202 receives as input a preceding question token 208 and an attention vector 210 generated by the attention vector neural network 204 for the time step and processes the preceding question token 208 and the preceding attention vector 210 to generate as output an updated hidden state of the decoder RNN for the time step, i.e., to update the internal hidden states of the recurrent layers, and a set of question token scores 214 that define a score distribution over the question tokens in the vocabulary of possible question tokens.
- the token that is used as the preceding question token 208 for a given time step is dependent on the task that the answer to question system is currently performing.
- the preceding token is the question token that has been selected by the system as the question token at the immediately preceding time step in the output question string based on the question token scores generated at the preceding time step. Selecting a question token for a time step based on question token scores is described further below.
- the preceding token is the question token that is in the input question string at the preceding time step. That is, in this task, the system generates question token scores for as many time steps as there are question tokens in the input question string, so that each question token in the input question string corresponds to a respective time step. For a given time step, the system selects the question token in the input question string that corresponds to the immediately preceding time step as the preceding question token.
- the preceding question token is a predetermined start of sequence token.
- the attention vector neural network 204 receives a preceding RNN output 216 and the encoded representations 106 , i.e., the encoded representations of the passage 102 described above with reference to FIG. 1 .
- the preceding RNN output 216 is an output generated by one of the layers of the decoder RNN during the processing for the preceding time step.
- the preceding RNN output 216 may be the output of the last layer in the decoder RNN for the preceding time step or the output of the first layer in the decoder RNN for the preceding time step.
- the preceding RNN output 216 may be the same as or different from the updated hidden state of the layer of the decoder RNN after the processing for the preceding time step.
- the attention vector neural network 204 processes the preceding RNN output 216 of the decoder RNN 202 and the encoded representation 106 to generate as output the attention vector 210 for the time step.
- the attention vector 210 includes a respective attention value for each token in the input text passage.
- An example architecture for the attention vector neural network 204 and the decoder RNN 202 and an example configuration for how the attention vector neural network 204 can be connected to the decoder RNN 202 are described in more detail in Wu, Yonghui, et al, Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation , available at https://arxiv.org/abs/1609.08144.
- the system samples from the score distribution over the question tokens in the vocabulary or selects the highest-scoring question token as the question token in the output question string for the time step. The system continues to add question tokens to the output question string until an end-of-sequence token is selected or sampled.
- the system maintains multiple partial output question strings using a left to right beam search decoding.
- the system may maintain a beam, i.e., a set of partial hypotheses, i.e., partial output question strings.
- each partial hypothesis in the beam may be expanded with every possible question token and only a predetermined number of likely beams are kept.
- the partial hypothesis may be removed from the beam, i.e., the system stops adding additional outputs to the partial hypothesis, and added to the set of complete hypotheses. The system can repeat these steps until each partial hypothesis in the beam has been finalized.
- the system can then select the final hypothesis from the set of complete hypotheses having the highest sequence score as the hypothesis for the input passage or may output multiple of the finalized hypotheses as possible questions to be answered by the input passage.
- An example beam search technique is described in Wu, Yonghui, et al, Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation , available at https://arxiv.org/abs/1609.08144.
- the matching neural network 220 is used by the subsystem 108 when the task being performed is to evaluate how well the input passage answers the input question string.
- the matching vector neural network 220 also receives the preceding RNN output 216 and the encoded representations 106 and processes the preceding RNN output 216 and the encoded representations 106 to generate as output a matching vector 216 for the time step.
- the matching vectors generated by the matching neural network 220 are not provided as input to the decoder vector RNN and are instead used by the question scoring engine 104
- the matching vector neural network 220 has the same neural network architecture as the attention neural network 204 .
- the matching vectors generated by the matching vector neural network 220 will have the same dimensionality as the attention vectors generated by the attention vector neural network 204 , i.e., will also have a respective value/entry for each passage token in the input passage.
- the attention vectors and the matching vectors are used for different purposes by the answer to question system when generating outputs, after training of the subsystem the values of the parameters of the matching vector neural network 220 will differ from those of the attention vector neural network 204 . Accordingly, the matching vectors generated by the matching vector neural network 220 will differ from the attention vectors generated by the attention vector neural network 204 .
- the question scoring engine 104 generates the answer score for a given question from the matching vectors over all of the time steps for which the decoder RNN 202 generates an output while scoring the given question.
- the question scoring engine 104 can generate the answer score by combining the entries in the matching vectors over all of the time steps. For example, the question scoring engine 104 can compute an average of the entries in the matching vectors over all of the time steps, a weighted average of entries in the matching vectors over all of the time steps, e.g., with entries from later time steps being given greater weight, or a sum of entries in the matching vectors over all of the time steps.
- the question scoring engine 104 also considers the perplexity for the tokens in the input question string as reflected by the question token scores generated by the decoder RNN 202 .
- the question scoring engine 104 can compute a perplexity score from an average perplexity of the tokens in the input question string as reflected by the scores generated by the decoder RNN 202 for the tokens and can combine, e.g., sum, average, or multiply, the perplexity score with the score determined from the matching vectors to generate the final answer score for the input question string.
- FIG. 3 is a flow diagram of an example process 300 for selecting a passage that provides an answer to a question.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- the system receives a question (step 302 ).
- the question may have been submitted as a search query to an Internet search engine.
- the system receives candidate passages (step 304 ).
- the candidate passages may have been extracted from resources identified by search results for the search query, e.g., a predetermined number of highest-ranked search results as determined by the Internet search engine.
- the system determines a respective answer score for each candidate passage (step 306 ).
- the answer score for a given candidate passage indicates how well the candidate passage answers the question.
- the system provides each candidate passage as input to the answer to question system along with a question string derived from the received question.
- the answer to question system processes the candidate passage and the question string to generate an answer score for the candidate passage as described above with reference to FIGS. 1 and 2 .
- the system has already pre-processed the candidate passages and the question string using the answer to question system and has stored the answer scores for the candidate passages. In these implementations, the system accesses the pre-computed answer scores from memory.
- the system selects a candidate passage as the passage that provides the best answer to the question (step 308 ) using the answer scores for the candidate passages. For example, the system can select the highest-scoring candidate passage according to the answer scores or can combine the answer scores with scores generated based on other signals to generate a respective final answer score for each passage and can select the highest-scoring candidate passage according to the final answer scores.
- the system outputs the selected candidate passage to a user as part of a response to the search query.
- the system can provide the selected candidate passage for presentation to the user as part of a response to the search query, i.e., along with the search results for the search query.
- the system can provide a formatted presentation of the passage that identifies the passage as an answer to the question along with a presentation of search results for the search query.
- the system can receive the question as a voice query and can verbalize all of or part of the selected candidate passage in response to the voice query, e.g., using a text-to-speech system.
- FIG. 4 is a flow diagram of an example process 400 for generating a question that is answered by a passage.
- the process 400 will be described as being performed by a system of one or more computers located in one or more locations.
- the system receives an input passage (step 402 ).
- the system processes the input passage using the answer to question system to generate an output question string that represents a question that is answered by the input passage (step 404 ), e.g., as described above with reference to FIGS. 1 and 2 .
- FIG. 5 is a flow diagram of an example process 500 for training an encoder neural network and an attention, matching, and decoding subsystem.
- the process 500 will be described as being performed by a system of one or more computers located in one or more locations.
- an answer to question system e.g., the answer to question system 100 of FIG. 1 , appropriately programmed, can perform the process 500 .
- the system receives first training data for training the encoder neural network and the attention, matching, and decoding subsystem (step 502 ).
- the first training data includes multiple training passages and, for each training passage, a training question string for which the training passage has been determined to be a high-quality answer, and a training answer score for the training passage—training question string pair.
- the system trains the encoder neural network and the attention, matching, and decoding subsystem on the first training data (step 504 ).
- the system trains the neural network and the subsystem on the first training data to minimize a loss function that is a weighted combination of (i) an average token perplexity loss function and (ii) a pseudo Huber loss function.
- the average token perplexity loss function measures the average per token perplexity for the question tokens in the training question string as reflected by the corresponding question token scores generated by the decoder neural network during the processing of the corresponding question passage. That is, for each time step, the perplexity is measured based on the question token score generated by the decoder neural network for the question token in the training question string at that time step.
- the pseudo Huber loss function measures the loss between the training answer score for the training passage—training question pair and the answer score generated by the question scoring engine for the training passage—training question pair, i.e., the score generated based on the matching vectors generated by the matching vector neural network.
- each training passage or most of the training passages are associated with a training question for which the training passage has been determined to be a high-quality answer. Accordingly, while training on the first training data, the weight assigned to the average per token perplexity loss function is significantly greater than the weight assigned to the pseudo Huber loss function.
- the system receives second training data (step 506 ) and trains the encoder neural network and the attention, matching, and decoding subsystem on the second training data (step 508 ).
- the second training data also includes multiple training passages and, for each training passage, a training question and a training answer score for the training passage—training question pair.
- the second training data includes training passage—training question pairs that are of varying quality, i.e., some of the training passage are not good answers to the questions they are paired with (as reflected by the training score associated with the pair). Accordingly, so that the neural networks learn to discern between good answers and not-so-good or poor answers, while training on the second training data, the weight assigned to the average per token perplexity loss function is significantly reduced relative to the weight assigned to the pseudo Huber loss function.
- the system can train the encoder neural network and the attention, matching, and decoding subsystem on the first and second training data using conventional machine learning training techniques, e.g., a backpropagation-through-time based training techniques.
- machine learning training techniques e.g., a backpropagation-through-time based training techniques.
- the system can use the encoder neural network and the subsystem to accurately score input questions or to generate question strings for a given input passage.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. The computer storage medium is not, however, a propagated signal.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- an “engine,” or “software engine,” refers to a software implemented input/output system that provides an output that is different from the input.
- An engine can be an encoded block of functionality, such as a library, a platform, a software development kit (“SDK”), or an object.
- SDK software development kit
- Each engine can be implemented on any appropriate type of computing device, e.g., servers, mobile phones, tablet computers, notebook computers, music players, e-book readers, laptop or desktop computers, PDAs, smart phones, or other stationary or portable devices, that includes one or more processors and computer readable media. Additionally, two or more of the engines may be implemented on the same computing device, or on different computing devices.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- special purpose logic circuitry e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
Claims (18)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/787,615 US11093813B2 (en) | 2016-10-20 | 2017-10-18 | Answer to question neural networks |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662410773P | 2016-10-20 | 2016-10-20 | |
US15/787,615 US11093813B2 (en) | 2016-10-20 | 2017-10-18 | Answer to question neural networks |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180114108A1 US20180114108A1 (en) | 2018-04-26 |
US11093813B2 true US11093813B2 (en) | 2021-08-17 |
Family
ID=60481886
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/787,615 Active 2040-06-03 US11093813B2 (en) | 2016-10-20 | 2017-10-18 | Answer to question neural networks |
Country Status (4)
Country | Link |
---|---|
US (1) | US11093813B2 (en) |
DE (1) | DE202017106363U1 (en) |
GB (1) | GB2557014A (en) |
WO (1) | WO2018097907A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220335051A1 (en) * | 2017-11-09 | 2022-10-20 | Microsoft Technology Licensing, Llc | Machine reading comprehension system for answering queries related to a document |
Families Citing this family (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9959315B1 (en) * | 2014-01-31 | 2018-05-01 | Google Llc | Context scoring adjustments for answer passages |
US10558750B2 (en) * | 2016-11-18 | 2020-02-11 | Salesforce.Com, Inc. | Spatial attention model for image captioning |
US10691886B2 (en) * | 2017-03-09 | 2020-06-23 | Samsung Electronics Co., Ltd. | Electronic apparatus for compressing language model, electronic apparatus for providing recommendation word and operation methods thereof |
WO2019035862A1 (en) * | 2017-08-14 | 2019-02-21 | Sisense Ltd. | System and method for increasing accuracy of approximating query results using neural networks |
US10380236B1 (en) * | 2017-09-22 | 2019-08-13 | Amazon Technologies, Inc. | Machine learning system for annotating unstructured text |
WO2019084551A1 (en) * | 2017-10-27 | 2019-05-02 | Google Llc | Attention-based decoder-only sequence transduction neural networks |
US10915560B2 (en) * | 2017-11-30 | 2021-02-09 | International Business Machines Corporation | Ranking passages by merging features from factoid answers |
US11227218B2 (en) * | 2018-02-22 | 2022-01-18 | Salesforce.Com, Inc. | Question answering from minimal context over documents |
US11600194B2 (en) * | 2018-05-18 | 2023-03-07 | Salesforce.Com, Inc. | Multitask learning as question answering |
US10909157B2 (en) * | 2018-05-22 | 2021-02-02 | Salesforce.Com, Inc. | Abstraction of text summarization |
CN108764753A (en) * | 2018-06-06 | 2018-11-06 | 平安科技（深圳）有限公司 | Test method, apparatus, computer equipment and the storage medium of business personnel's ability |
CN108846125A (en) * | 2018-06-29 | 2018-11-20 | 北京百度网讯科技有限公司 | Talk with generation method, device, terminal and computer readable storage medium |
EP3824606A1 (en) * | 2018-07-20 | 2021-05-26 | Nokia Technologies Oy | Learning in communication systems by updating of parameters in a receiving algorithm |
US10929392B1 (en) * | 2018-11-16 | 2021-02-23 | Amazon Technologies, Inc. | Artificial intelligence system for automated generation of realistic question and answer pairs |
US11055330B2 (en) | 2018-11-26 | 2021-07-06 | International Business Machines Corporation | Utilizing external knowledge and memory networks in a question-answering system |
US11023530B2 (en) | 2019-02-13 | 2021-06-01 | International Business Machines Corporation | Predicting user preferences and requirements for cloud migration |
US11494614B2 (en) * | 2019-03-20 | 2022-11-08 | Microsoft Technology Licensing, Llc | Subsampling training data during artificial neural network training |
SG10201903516WA (en) * | 2019-04-18 | 2020-11-27 | Mega Forte Pte Ltd | System For Determining Accuracy Of Matching A Subject Text Passage To A Reference Text Passage and Method Thereof |
CN110032635B (en) * | 2019-04-22 | 2023-01-20 | 齐鲁工业大学 | Problem pair matching method and device based on depth feature fusion neural network |
CN110263330A (en) * | 2019-05-22 | 2019-09-20 | 腾讯科技（深圳）有限公司 | Improvement, device, equipment and the storage medium of problem sentence |
US11163953B2 (en) * | 2019-06-12 | 2021-11-02 | International Business Machines Corporation | Natural language processing and candidate response evaluation |
US11429789B2 (en) | 2019-06-12 | 2022-08-30 | International Business Machines Corporation | Natural language processing and candidate response identification |
CN111078851B (en) * | 2019-12-09 | 2024-04-12 | 科大讯飞(苏州)科技有限公司 | Information processing method, device, equipment and readable storage medium |
US11610069B2 (en) * | 2019-12-20 | 2023-03-21 | Naver Corporation | Training a question answering network using relational loss |
CN111522915A (en) * | 2020-04-20 | 2020-08-11 | 北大方正集团有限公司 | Extraction method, device and equipment of Chinese event and storage medium |
CN111475636B (en) * | 2020-06-24 | 2020-11-06 | 北京金山数字娱乐科技有限公司 | Information extraction method and device, equipment and storage medium |
US11704499B2 (en) | 2021-04-13 | 2023-07-18 | Microsoft Technology Licensing, Llc | Generating questions using a resource-efficient neural network |
WO2023144413A1 (en) * | 2022-01-31 | 2023-08-03 | Deepmind Technologies Limited | Augmenting machine learning language models using search engine results |
WO2023175089A1 (en) * | 2022-03-16 | 2023-09-21 | Deepmind Technologies Limited | Generating output sequences with inline evidence using language model neural networks |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050080625A1 (en) * | 1999-11-12 | 2005-04-14 | Bennett Ian M. | Distributed real time speech recognition system |
US20070094285A1 (en) * | 2005-10-21 | 2007-04-26 | Microsoft Corporation | Question answering over structured content on the web |
US20160358072A1 (en) * | 2015-06-05 | 2016-12-08 | Google Inc. | Reading comprehension neural networks |
US10147037B1 (en) * | 2015-07-28 | 2018-12-04 | Intuit Inc. | Method and system for determining a level of popularity of submission content, prior to publicizing the submission content with a question and answer support system |
-
2017
- 2017-10-18 WO PCT/US2017/057251 patent/WO2018097907A1/en active Application Filing
- 2017-10-18 US US15/787,615 patent/US11093813B2/en active Active
- 2017-10-20 DE DE202017106363.1U patent/DE202017106363U1/en active Active
- 2017-10-20 GB GB1717243.8A patent/GB2557014A/en not_active Withdrawn
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050080625A1 (en) * | 1999-11-12 | 2005-04-14 | Bennett Ian M. | Distributed real time speech recognition system |
US20070094285A1 (en) * | 2005-10-21 | 2007-04-26 | Microsoft Corporation | Question answering over structured content on the web |
US20160358072A1 (en) * | 2015-06-05 | 2016-12-08 | Google Inc. | Reading comprehension neural networks |
US10147037B1 (en) * | 2015-07-28 | 2018-12-04 | Intuit Inc. | Method and system for determining a level of popularity of submission content, prior to publicizing the submission content with a question and answer support system |
Non-Patent Citations (10)
Title |
---|
‘wikipedia.org’ [online] "Beam Search," Last update: Jul. 16, 2017, [retrieved on Nov. 29, 2017] Retrieved from Internet: URL< https://en.wikipedia.org/wiki/Beam_search> 3 pages. |
‘www.wildml.com’ [online] Attention and Memory in Deep Learning and NLP, Denny Britz, Jan. 3, 2016, [retrieved on Nov. 29, 2017] Retrieved from Internet: URL< http://www.wildml.com/2016/01/attention-and-memory-in-deep-learning-and-nlp/> 10 pages. |
Bandanau et al. "Neural Machine Translation by Jointly Learning to Align and Translate," arXiv 1409.0473v7, May 19, 2016, 15 pages. |
International Preliminary Report on Patentability issued in International Application No. PCT/US2017/057251, dated Jan. 28, 2019, 17 pages. |
International Search Report and Written Opinion issued in International Application No. PT/US2017/057251, dated Apr. 9, 2018, 14 pages. |
Office Action and Search Report issued in British Application No. GB1717243.8, dated Mar. 20, 2018, 8 pages. |
Sutskever et al. "Sequence to Sequence Learning with Neural Networks" Advances in neural information processing systems, 2014, 9 pages. |
Written Opinion issued in International Application No. PCT/US2017/057251, dated Sep. 19, 2018, 7 pages. |
Wu et al. "Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation," arXiv preprint arXiv 1609.08144, Oct. 8, 2016, 23 pages. |
Yin et al. "Neural Generative Questions Answering," Proceedings of the Workshop on Human-Computer Questions Answering, Apr. 22, 2016, 12 pages. |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220335051A1 (en) * | 2017-11-09 | 2022-10-20 | Microsoft Technology Licensing, Llc | Machine reading comprehension system for answering queries related to a document |
US11899675B2 (en) * | 2017-11-09 | 2024-02-13 | Microsoft Technology Licensing, Llc | Machine reading comprehension system for answering queries related to a document |
Also Published As
Publication number | Publication date |
---|---|
GB2557014A (en) | 2018-06-13 |
WO2018097907A1 (en) | 2018-05-31 |
DE202017106363U1 (en) | 2018-02-21 |
US20180114108A1 (en) | 2018-04-26 |
GB201717243D0 (en) | 2017-12-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11093813B2 (en) | Answer to question neural networks | |
US11868888B1 (en) | Training a document classification neural network | |
US9818409B2 (en) | Context-dependent modeling of phonemes | |
US11222252B2 (en) | Generating representations of input sequences using neural networks | |
US10922488B1 (en) | Computing numeric representations of words in a high-dimensional space | |
US10559300B2 (en) | Generating target sequences from input sequences using partial conditioning | |
US10083169B1 (en) | Topic-based sequence modeling neural networks | |
US10268671B2 (en) | Generating parse trees of text segments using neural networks | |
US20200118554A1 (en) | Speech recognition with attention-based recurrent neural networks | |
US10140977B1 (en) | Generating additional training data for a natural language understanding engine | |
US9460704B2 (en) | Deep networks for unit selection speech synthesis | |
CN109074517B (en) | Global normalized neural network | |
US11699074B2 (en) | Training sequence generation neural networks using quality scores | |
US11954594B1 (en) | Training recurrent neural networks to generate sequences | |
US11488067B2 (en) | Training machine learning models using teacher annealing | |
EP3475890A1 (en) | Reward augmented model training | |
CN110678882A (en) | Selecting answer spans from electronic documents using machine learning | |
US20240028893A1 (en) | Generating neural network outputs using insertion commands | |
US11625572B2 (en) | Recurrent neural networks for online sequence generation | |
US20240013769A1 (en) | Vocabulary selection for text processing tasks using power indices | |
US10026396B2 (en) | Frequency warping in a speech recognition system | |
US20220050971A1 (en) | System and Method for Generating Responses for Conversational Agents | |
US10657435B1 (en) | Processing inputs using recurrent neural networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LAO, NI;KAISER, LUKASZ MIECZYSLAW;GUPTA, NITIN;AND OTHERS;SIGNING DATES FROM 20161215 TO 20161222;REEL/FRAME:043905/0181 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044581/0746Effective date: 20170930 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: AWAITING TC RESP, ISSUE FEE PAYMENT VERIFIED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |