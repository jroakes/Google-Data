US9116940B1 - Searching for join candidates - Google Patents
Searching for join candidates Download PDFInfo
- Publication number
- US9116940B1 US9116940B1 US13/862,768 US201313862768A US9116940B1 US 9116940 B1 US9116940 B1 US 9116940B1 US 201313862768 A US201313862768 A US 201313862768A US 9116940 B1 US9116940 B1 US 9116940B1
- Authority
- US
- United States
- Prior art keywords
- column
- potential
- score
- input
- refinity
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/30336—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2272—Management thereof
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G06F17/3053—
Definitions
- a user may receive a table containing two columns: States and Population.
- the state column may be filled in and contain a list of each of the 50 states in the USA.
- the population column may not contain any values and the user may be required to fill in the cells in the population column.
- the user may utilize a web search engine to input state-population based queries (e.g., “California's Population”, “New York's Population”, “Virginia's Population”, etc.) and input the results into respective cells.
- a search query for “California's population” may result multiple webpage links.
- the user may select the first link and be directed to the respective webpage that contains text indicating that California's population is 38,000,000 people. Accordingly, the user may input the value into the respective cell in the state-population table.
- searching for a cell value based on a corresponding value in a related cell entry generally produces results based specifically on the related cell entry. For example, searching for the population of New York using a search engine will generally produce results only based on the term “New York” and may not account for variations of New York such as “The Big Apple”, “The Empire City”, “The City that None Sleeps”, etc., which may also produce relevant results.
- an input column containing at least one query value and a search keyword may be received.
- a first potential table column may be identified and a coverage score may be determined, for the first potential column, based on the number of query values in the input column also contained in at least a portion of the potential table column.
- a refinity score may be determined, for the first potential column, based on a number of occurrences of values from the input column within at least a portion of the first potential column.
- a search keyword score for the first potential column may be determined based on the search keyword and a total score corresponding to the first potential column may be determined based on the coverage, refinity, and search keyword scores.
- the first potential table may be provided to a user based on the total score.
- Systems and techniques according to the present disclosure may allow for searching for tabular data by providing an input column and search keyword.
- One or more suggested columns may be provided to a user by conducting a search based on the input column and search keyword.
- FIG. 1 shows a computer according to an implementation of the disclosed subject matter.
- FIG. 2 shows a network configuration according to an implementation of the disclosed subject matter.
- FIG. 3 shows an example process for ranking a suggested table column, according to an implementation of the disclosed subject matter.
- FIG. 4 shows an example illustration of a tabular search system according to an implementation of the disclosed subject matter.
- FIG. 5 shows an example illustration of user input interface according to an implementation of the disclosed subject matter.
- FIG. 6 shows an example illustration of suggested merge results according to an implementation of the disclosed subject matter.
- a technique that provides one or more relevant suggested columns and/or rows, based on receiving an input query that includes at least a column or row and a search keyword, may enable a user to obtain a completed table in an efficient and seamless manner.
- a user may request that a table consisting of two columns [Country, Population] be augmented with “Poverty” data for countries.
- the input query for disclosed arrangement may be the table [Country, Population], a specified input column (i.e., Country), and the search keyword “Poverty”.
- the expected response may be one or more completed tables containing a Country column that is related to a completed Poverty column.
- the input query may be compared to potential table columns indexed and stored in a database, and refinity and coverage scores may be computed based on at least a subset of the indexed columns.
- a coverage score can be based on the number of query values in the input column that are also contained in at least a part of a potential table column.
- a refinity score can be based on a number of occurrences of values from the input column within at least a part of a potential table column.
- a search score based on the search keyword may be assigned to at least the subset of the indexed potential columns, as disclosed herein.
- the user may be provided with one or more suggested columns and/or rows based on the refinity, coverage, and search score.
- a user may input a column containing “New York”, “California”, and “Virginia” and a search keyword “Population”.
- the arrangement may initiate a dual stream process where each stream is processed independently to identify possible suggested columns.
- the first stream may be a table search stream that scores potential columns based on the search keyword (e.g., Population).
- a second stream may generate a refinity and coverage score for at least a subset of the potential columns.
- a total score for the potential columns may be calculated based on their respective search, refinity and coverage scores and one or more suggested columns may be provided to the user based on the total scores.
- a threshold total, refinity, coverage, and/or search score may be required for a suggested column to be provided to a user.
- FIG. 1 is an example computer 20 suitable for implementing implementations of the presently disclosed subject matter.
- the computer 20 includes a bus 21 which interconnects major components of the computer 20 , such as a central processor 24 , a memory 27 (typically RAM, but which may also include ROM, flash RAM, or the like), an input/output controller 28 , a user display 22 , such as a display or touch screen via a display adapter, a user input interface 26 , which may include one or more controllers and associated user input or devices such as a keyboard, mouse, WiFi/cellular radios, touchscreen, microphone/speakers and the like, and may be closely coupled to the I/O controller 28 , fixed storage 23 , such as a hard drive, flash storage, Fibre Channel network, SAN device, SCSI device, and the like, and a removable media component 25 operative to control and receive an optical disk, flash drive, and the like.
- a bus 21 which interconnects major components of the computer 20 , such as a central processor 24 , a
- the bus 21 allows data communication between the central processor 24 and the memory 27 , which may include read-only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted.
- the RAM can include the main memory into which the operating system and application programs are loaded.
- the ROM or flash memory can contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components.
- BIOS Basic Input-Output system
- Applications resident with the computer 20 can be stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed storage 23 ), an optical drive, floppy disk, or other storage medium 25 .
- a network interface 29 may provide a direct connection to a remote server via a telephone link, to the Internet via an internet service provider (ISP), or a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence) or other technique.
- the network interface 29 may provide such connection using wireless techniques, including digital cellular telephone connection, Cellular Digital Packet Data (CDPD) connection, digital satellite data connection or the like.
- CDPD Cellular Digital Packet Data
- the network interface 29 may allow the computer to communicate with other computers via one or more local, wide-area, or other networks, as shown in FIG. 2 .
- FIG. 1 Many other devices or components (not shown) may be connected in a similar manner (e.g., document scanners, digital cameras and so on). Conversely, all of the components shown in FIG. 1 need not be present to practice the present disclosure. The components can be interconnected in different ways from that shown. The operation of a computer such as that shown in FIG. 1 is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer-readable storage media such as one or more of the memory 27 , fixed storage 23 , removable media 25 , or on a remote storage location.
- FIG. 2 shows an example network arrangement according to an implementation of the disclosed subject matter.
- One or more clients 10 , 11 such as local computers, smart phones, tablet computing devices, and the like may connect to other devices via one or more networks 7 .
- the network may be a local network, wide-area network, the Internet, or any other suitable communication network or networks, and may be implemented on any suitable platform including wired and/or wireless networks.
- the clients may communicate with one or more servers 13 and/or databases 15 .
- the devices may be directly accessible by the clients 10 , 11 , or one or more other devices may provide intermediary access such as where a server 13 provides access to resources stored in a database 15 .
- the clients 10 , 11 also may access remote platforms 17 or services provided by remote platforms 17 such as cloud computing arrangements and services.
- the remote platform 17 may include one or more servers 13 and/or databases 15 .
- implementations of the presently disclosed subject matter may include or be implemented in the form of computer-implemented processes and apparatuses for practicing those processes. Implementations also may be implemented in the form of a computer program product having computer program code containing instructions implemented in non-transitory and/or tangible media, such as floppy diskettes, CD-ROMs, hard drives, USB (universal serial bus) drives, or any other machine readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing implementations of the disclosed subject matter.
- Implementations also may be implemented in the form of computer program code, for example, whether stored in a storage medium, loaded into and/or executed by a computer, or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing implementations of the disclosed subject matter.
- the computer program code segments configure the microprocessor to create specific logic circuits.
- a set of computer-readable instructions stored on a computer-readable storage medium may be implemented by a general-purpose processor, which may transform the general-purpose processor or a device containing the general-purpose processor into a special-purpose device configured to implement or carry out the instructions.
- Implementations may be implemented using hardware that may include a processor, such as a general purpose microprocessor and/or an Application Specific Integrated Circuit (ASIC) that implements all or part of the techniques according to implementations of the disclosed subject matter in hardware and/or firmware.
- the processor may be coupled to memory, such as RAM, ROM, flash memory, a hard disk or any other device capable of storing electronic information.
- the memory may store instructions adapted to be executed by the processor to perform the techniques according to implementations of the disclosed subject matter.
- a column containing any applicable form of data may be merged with one or more additional columns, by a merge service.
- the one or more additional columns may contain data that is related to the data in the original column such that a comprehensible table results from the merge.
- a column containing “New York”, “California”, and “Virginia” may be input into the arrangement along with the search keyword “Population”.
- the following table may be returned to the user based on the column and search keyword:
- a user may provide an input column by manually inputting values using a user interface or by any other applicable means such as uploading a stored table, specifying a table by inputting the table location (e.g., a URL, file location, an HTML tag, etc.), or the like.
- a user interface for a manual upload may provide the user with two input fields, a first field to input a search keyword and a second field to input column values.
- a user may be provided with an input screen 500 containing a first input field 510 and a second input field 520 .
- the arrangement may place a limit on the number of column values that can be input into the second field 520 .
- the limit may be based on any applicable factor such as aesthetic criteria, overburdening a component of the arrangement, available memory, user permission (e.g., a user that pays for the service may be able to input a larger number of column values in comparison to a user that receives the service for free), or the like.
- the user may input a search keyword into the first input field 510 .
- the user interface may contain a numerical value input field 540 where a user inputs a value corresponding to a threshold coverage score, refinity score, or search score and the suggested columns provided to the user may be filtered based on the threshold score.
- a default value may be automatically generated and input into the numerical value input field 540 , and may be modified by the user.
- the arrangement may access a corpus of tabular data, at step 330 , and score the data as disclosed herein.
- a refinity score may be calculated for a potential column based on an average number of occurrences of distinct values contained in the potential column that are also contained in the input column.
- the refinity may be understood as the multiplicity of the input column if joined with the potential column.
- the refinity score of a potential column may indicate the ratio of occurrences of values from an input column found in a potential column.
- the refinity score may be calculated based on the following formula:
- Refinity ⁇ ( T s , C s ) ( ⁇ v i ⁇ V i ⁇ ⁇ v i , cnt i ⁇ / ⁇ V s ⁇
- T q be the provided input query table
- C q be the query column
- T s be a potential table
- C s be the potential column from within the potential table.
- V i be the set of distinct values after projecting a column C i of table T i and cnt i be the number of occurrences of v i in (T s , C s ).
- an input column may contain “George Washington”, “John Adams”, and “Thomas Jefferson”.
- the number of distinct values found in the potential column may not exceed the number of distinct values in the input column. Accordingly, in continuing the previous example, the value for V s may not exceed 3 as the input column only contains the three distinct values (i.e., “George Washington”, “John Adams”, and “Thomas Jefferson”).
- an optimal refinity score may be 1 as it may indicate that the potential table contains a one to one match for the distinct values contained in the input column.
- an input column may contain three distinct values, “George Washington”, “John Adams”, and “Thomas Jefferson”.
- a potential column may contain one instance of “George Washington”, one instance of “Thomas Jefferson”, and one instance of “John Adams”.
- a refinity that is greater than 1 may result from at least one distinct value, from an input column, being present more than once in the potential column.
- a repeated distinct value in a potential column may indicate that the potential column is not separated in a similar manner as the input column.
- the potential column corresponds to another column that lists the counties within respective state as well as county population information.
- the county population information is unlikely to be the information that the user intended to merge with the input column as the input column contained three distinct states. Therefore, the high refinity value (71.67) may correspond to a less desirable result than a column with a lower refinity.
- a coverage score may be calculated for a potential column based on the proportion of values in the input column that are also present in the potential column.
- the coverage score for a potential column may be understood as the number of values in the input column that are covered by the potential column.
- an input column may contain “George Washington”, “John Adams”, and “Thomas Jefferson”.
- a potential column may contain two instances of “George Washington”, one instances of “Thomas Jefferson”, and no instances of “John Adams”. Accordingly, the coverage may be 2/3 based on the potential column containing two values that are also contained in the input column (i.e., “George Washington” and “Thomas Jefferson”) divided by the total number of distinct values contained in the input column (i.e., 3 for “George Washington”, “John Adams”, and “Thomas Jefferson”.
- the potential column only included four instances of “George Washington” and no instances of “John Adams” or “Thomas Jefferson” then the coverage score would be 1/3 based on the presence of one out of the three distinct values.
- V q is a constant value corresponding to the input column and, thus, does not change based on the potential column. Accordingly, in relation to the previous examples, the value for V q remains the same (i.e., 3) for a potential column containing two instances of “George Washington”, one instances of “Thomas Jefferson”, and no instances of “John Adams” as well as for a potential column containing four instances of “George Washington” and no instances of “John Adams” or “Thomas Jefferson”.
- an optimal coverage score may be 1 as it may indicate that the potential table contains all the distinct values that are contained in the input column.
- an input column may contain three distinct values, “George Washington”, “John Adams”, and “Thomas Jefferson”.
- a potential column may contain one instance of “George Washington”, two instance of “Thomas Jefferson”, and one instance of “John Adams”.
- it is more likely that a potential table that contains each distinct value in an input table is likely to be more applicable to the input table than a potential table that does not contain each distinct value.
- a coverage score that is lower than 1 may result from at least one distinct value, from an input column, not being present in the potential column.
- a non-present value may indicate that the potential table does not contain a complete data set to match with the input table.
- a search keyword provided by a user may be “Population” and a potential column corresponding to an input column containing “New York”, “California”, and “Virginia” may contain “New York” 3 times, “California” 2 times, and “Virginia” 0 times. Accordingly, the coverage score would be 2/3 based on two of the three values being present in the potential column. Therefore, a higher coverage score is more desirable than a lower coverage score as a higher score corresponds to more distinct values, in an input column, also being present in the potential column.
- a search score may be calculated for one or more potential tables.
- the search score may be calculated independent of the refinity and coverage score such that the search score for a potential table is calculated without factoring in the refinity or coverage score.
- the search score may be based on any applicable factor such as text matching, historical matching, user profile information, geo-location, query category, advertisement value, context matching, current event, social media value, or the like.
- a user may input the search keyword “Population” using a user interface and the arrangement may assign a first potential table, containing the word “Population” as a title to a column, a search score of 0.7.
- the arrangement may assign a second potential table, containing the word “Population” as a title to a column as well as a high historical access score, a search score of 0.75.
- the search score may be calculated independent of values in the input column such that the search score calculation is based only on the search keyword.
- a user may input an input column and a search keyword, “Location”.
- the arrangement may generate a search score for one or more potential tables based only on the search keyword “Location”, independent of the values in the input column.
- the search score may be calculated based on one or more values in the input column such that the search score calculation is based on the search keyword and the input column.
- the arrangement may determine a common category based on the input column (e.g., the category of “USA State” based on an input column of “New York”, “California”, and “Virginia”).
- a user may also input “Population” as the search keyword.
- a search score for a potential table may be determined based on both the search keyword “Population” as well as the common category of “USA State”. More specifically, incorporating both the search keyword and one or more values from the input column into the search score may result in a more targeted potential tables.
- a refinity, coverage, and/or search score may be determined based on a sample of the input column.
- Using a sample of the input column when calculating a respective score, may allow faster processing of a corpus of potential table data.
- calculating refinity scores for potential tables in a corpus, for an input column containing 100 values may consume an unacceptable amount of time.
- a representative set of 10 values selected from the set of 100 values may require substantially lower processing time and, thus, may be identified and used by the arrangement.
- the sample may be any applicable subset of the entire input column such as a predetermined portion (e.g., a number of sample values, a percentage of sample values, a user setting, etc.) a dynamically determined portion (e.g., based on a percentage of the size of the input column, a search keyword, a user history, system capacity, a machine trained determination, etc.), or the like.
- a predetermined portion e.g., a number of sample values, a percentage of sample values, a user setting, etc.
- a dynamically determined portion e.g., based on a percentage of the size of the input column, a search keyword, a user history, system capacity, a machine trained determination, etc.
- the arrangement may modify the sample size of the input column and re-score the potential columns.
- a refinity, coverage, and/or search score for a potential column may be determined based on a sample of the potential column. Using a sample of one or more potential columns to calculate scores may allow faster processing of a corpus of potential table data, as disclosed herein.
- a potential column may qualify as a suggested column only if the coverage, refinity, or search score for the potential column meets a threshold requirement.
- a potential column may be suggested if the coverage score for the potential column is greater than a threshold value c and if the refinity score for the potential column is below a threshold value r.
- a threshold value for a refinity, coverage, or search score may be based on any applicable factor such as historical data, available suggested columns, available potential columns, user setting, system setting, or the like.
- a user may input a threshold value, such as 0.9, for a minimum coverage score into the numerical value input field 540 . Accordingly, the arrangement may reject any potential columns that receive a coverage score of less than, for example, 0.9 and, thus, may not suggest those columns to be merged with an input table or column.
- the arrangement may use an inverted index of data to evaluate potential columns and provide suggested columns.
- An inverted index may map each cell value of a table within a corpus to a set of (table ID, column ID, and row count) triple.
- the (table ID, column ID) pair may identify the column of a potential table where the value is retrieved from and the row count may be the number of occurrences of the value in the same column.
- Refinity and coverage scores may be calculated by retrieving the table with the table ID and sample at least a set of random values of the column identified by the column ID.
- the inverted index may be accessed to retrieve a list of (table ID, column ID, and row count) triples.
- a union of all lists may be identified and represented as a table “index_table” (table_ID, column_ID, row_count).
- the coverage may be approximated by the following query:
- a total score for a suggested table/column may be determined based on the coverage score, refinity score, search score, and/or any other applicable factor (e.g., a popularity score, user history, user location, user setting, etc.).
- the total scores may be determined by a server local to the merge service or a remote server and may be determined based on any applicable set of rules.
- a column in a table receives a higher total score for a higher coverage and search score and for a lower refinity score.
- the total score may be used by a merge service to determine which potential columns are to be suggested to a user. For example, the merge service may suggest the potential columns with the top m highest total scores. More specifically, a merge service may only provide a user with the potential columns with the top 10 total scores.
- the merge service may suggest columns to a user only if the potential column receives a threshold total score and the threshold may be generated by the arrangement or provided by a user. Notably, the total score may be used by a merge service to rank two or more potential columns and to select acceptable columns to provide to a user.
- the arrangement may allow seamless integration of transformation functions on the tabular data.
- a transformation function may be any applicable function that modifies at least part of the data in the input table or potential tables in the corpus such as modifying text (e.g., converting to upper case or lower case, translating, transliterating, localizing, etc.), modifying a value (e.g., rounding a number, applying a formula, calculating a location, etc.), converting the data based on a predetermined or dynamic rule set, or the like.
- An original function for looking up potential tables may be “lookup(s)”, and may be modified to lookup values with the transformation function as “lookup(f(s))”.
- an input column and potential tables in a corpus may contain mixed uppercase and lowercase text.
- a function to convert text into all uppercase may be applied to both the input table and the potential tables in the corpus. Accordingly, calculation of a coverage and/or refinity score may be made based on the transformed input column and potential tables. Additionally, values that may have originally been mismatched based on different text casing may be matched after the transformation uniformly cased the text.
- an input table may contain names of the cities, “San Francisco”, “San Diego”, and “Los Angeles” and the search keyword may be “Italian Restaurants”.
- the corpus may contain locations based on GPS coordinates and, thus, may not contain information identifying the GPS coordinates as specifically corresponding to a city.
- At least a subset of the GPS data in the corpus may be transformed such that the coordinates are converted to identify the city that they correspond to.
- a GPS coordinate ( ⁇ 31.4250142, ⁇ 62.0841809) may be converted to “San Francisco” as it is within the city's boundaries.
- potential tables with GPS coordinates converted to city names may be assigned coverage and refinity scores based on the city names in the input column and the city names in the converted potential tables.
- a transformation function may be used to map a value to a set of values.
- an input column may contain the text “Bell”, which may correspond to various annotations such as an object that makes a sound, a telephone company, or a restaurant. Accordingly, it is beneficial to calculate coverage and refinity scores in view of the different annotations as it may enable the arrangement to avoid determining an applicable annotation.
- a table of triples may be grouped by an additional factor (i.e., a value) such that they are arranged according to (value, table ID, column ID, row count).
- the coverage and refinity score for a (table ID, column ID, and row count) set may be different for a given value.
- an input column may contain “Bell”, “Drum”, and “Clarinet” and may mapped using three different values such that, as an example, the following three columns are effectively formed:
- the different mappings of a value may be generated based on any applicable annotation generation technique such as historical data, input value matching, machine learning, or the like.
- the arrangement may calculate coverage and refinity scores based on all three columns and, accordingly, generate total scores and provide the highest ranking columns to a user.
- a transformation function mapping a value to a set of values may be applied to values in potential table and, thus, the available number of potential tables may increase based on the number of annotations.
- Reconciliation may be the process of determining the correct annotation to pick for a given value in a table.
- an input column may contain “Bell”, “Drum”, and “Clarinet” and the following potential columns may be scored by the arrangement without reconciliation of the correct annotation of Bell (e.g., as an instrument or a telephone company):
- the coverage score for Row 1 may be 2/3 based on the matching “Bell” and “Clarinet” and the coverage score for Row 2 may be 1/3 based only on the matching “Bell”.
- a threshold coverage score of 1/2 may be required for a potential column to be suggested to a user and, accordingly, Row 2 may not be suggested to a user and Row 1 may be suggested to the user. Namely, no reconciliation regarding whether the “Bell” in the input column corresponds to an instrument or a telephone company is required as the coverage and refinity scores may inherently reduce the probability of providing a user with merge options with inapplicable annotations.
- a user interface 500 may be provided to a user who may input a search keyword using the input bar 510 and an input table and column id using input area 520 .
- a merge request comprising the input table, column identifier, and search keyword may be received by a merge service 410 .
- a sample of the input column may contain ⁇ “CA, “NY”, “WI” ⁇ and the search keyword may be “Population”.
- the merge service may transmit the merge request to two independent streams, a keyword search 420 and a coverage refinity stream 430 .
- the keyword search 420 may use a web tables search stream 423 to access a webtables search service 426 and provide a search score for multiple columns contained in tables received from the webtables search service.
- the coverage refinity stream may identify the input column data ( ⁇ “CA, “NY”, “WI” ⁇ ) as being present in the following triples contained an inverted index 435 :
- the table may not contain the specific values that the table ID, column ID and row count are based on in order to calculate the refinity and coverage scores as the scores may not need to factor in the specific values.
- the coverage and refinity scores may be calculated, as disclosed herein, and as shown in the following table:
- each unique column is assigned a coverage and refinity score.
- Column 1 in Table 2 receives a coverage score of 2/3 based on 2 of the distinct values being present in the column as well as a refinity score of 4/2 based on 4 instances of the 2 distinct values being present in the column.
- Column 2 in table 2 receives a coverage score of 1/3 based on only 1 of the distinct values being present in the column as well as a refinity score of 9/1 based on 9 instances of the 1 distinct value being present in the column.
- the search score calculated by the search stream 420 and the coverage and refinity scores calculated by the coverage refinity stream 430 may be received by a stream aggregator 440 and be combined into a total score.
- the total score may be provided to the merge service that received the merge request and, based on ranking suggested columns based on the total scores, the merge service may provide the user with suggested columns that the input column or table may be merged with.
- the user may be provided with a results page 600 containing one or more suggested results 610 .
- the results may be organized such that the input column 612 is displayed adjacent or proximate to a suggested column 614 .
- the suggested columns may be arranged based on the top score. As an example, the highest scoring suggested column may be displayed above the second highest scoring suggested column.
Abstract
Description
New York | 19,570,261 | ||
California | 38,041,430 | ||
Virginia | 8,185,867 | ||
Let Tq be the provided input query table and Cq be the query column, Ts be a potential table and Cs be the potential column from within the potential table. Additionally, let Vi be the set of distinct values after projecting a column Ci of table Ti and cnti be the number of occurrences of vi in (Ts, Cs). For example, an input column may contain “George Washington”, “John Adams”, and “Thomas Jefferson”. A potential column may contain three instances of “George Washington”, four instances of “Thomas Jefferson”, and no instances of “John Adams”. Accordingly, the refinity may be (3/2)+(4/2)+(0/2)=7/2 based on the three instances of “George Washington” divided by 2 for the presence of two of the three president's names being present in the potential column plus the four instances of “Thomas Jefferson” divided by 2 for the presence of two of the three president's names being present in the potential column plus zero (based on zero instances of John Adams). Alternatively, if the potential column also included one instance of “John Adams”, then the refinity would be (3/3)+(4/3)+(1/3)=8/3. Note that the number of distinct values found in the potential column may not exceed the number of distinct values in the input column. Accordingly, in continuing the previous example, the value for Vs may not exceed 3 as the input column only contains the three distinct values (i.e., “George Washington”, “John Adams”, and “Thomas Jefferson”).
Coverage(T s ,C s)=|V q ∩V s |/|V q|
Let Tq be the provided input query table and Cq be the query column, Ts be a potential table and Cs be the potential column from within the potential table. Additionally, let Vi be the set of distinct values after projecting a column Ci of table Ti. For example, an input column may contain “George Washington”, “John Adams”, and “Thomas Jefferson”. A potential column may contain two instances of “George Washington”, one instances of “Thomas Jefferson”, and no instances of “John Adams”. Accordingly, the coverage may be 2/3 based on the potential column containing two values that are also contained in the input column (i.e., “George Washington” and “Thomas Jefferson”) divided by the total number of distinct values contained in the input column (i.e., 3 for “George Washington”, “John Adams”, and “Thomas Jefferson”. Alternatively, if the potential column only included four instances of “George Washington” and no instances of “John Adams” or “Thomas Jefferson” then the coverage score would be 1/3 based on the presence of one out of the three distinct values. Note that Vq is a constant value corresponding to the input column and, thus, does not change based on the potential column. Accordingly, in relation to the previous examples, the value for Vq remains the same (i.e., 3) for a potential column containing two instances of “George Washington”, one instances of “Thomas Jefferson”, and no instances of “John Adams” as well as for a potential column containing four instances of “George Washington” and no instances of “John Adams” or “Thomas Jefferson”.
n≦m
coverage(P i |Q)≧c
refinity(P i |Q)≦r
Here, a potential column may be suggested if the coverage score for the potential column is greater than a threshold value c and if the refinity score for the potential column is below a threshold value r. A threshold value for a refinity, coverage, or search score may be based on any applicable factor such as historical data, available suggested columns, available potential columns, user setting, system setting, or the like. As an example, as shown in
-
- SELECT table_id, column_id, COUNT(*)/sample_size AS coverage
- FROM index_table
- GROUP BY table_id, column_id
Similarly, Refinity may be approximated by the following query: - SELECT table_id, column_id, SUM(row_count)/COUNT(*)
- FROM index_table
- GROUP BY table_id, column_id
The coverage score and refinity score of a potential column with respect to a given (table_ID, column) input may be defined in accordance with techniques disclosed herein.
TotalScore(T,C)=[Coverage(T,C)/Refinity(T,C)]+SearchScore(T,C)
As indicated by the equation, a column in a table receives a higher total score for a higher coverage and search score and for a lower refinity score. The total score may be used by a merge service to determine which potential columns are to be suggested to a user. For example, the merge service may suggest the potential columns with the top m highest total scores. More specifically, a merge service may only provide a user with the potential columns with the top 10 total scores. The merge service may suggest columns to a user only if the potential column receives a threshold total score and the threshold may be generated by the arrangement or provided by a user. Notably, the total score may be used by a merge service to rank two or more potential columns and to select acceptable columns to provide to a user.
index(s,table id,column id,row count)=s·(table id,column id,row count)
The function may be modified based on the transformation function (f(s)) as:
index(s,table id,column id,row count)=f(s)·(table id,column id,row count)
An original function for looking up potential tables may be “lookup(s)”, and may be modified to lookup values with the transformation function as “lookup(f(s))”. As an example, an input column and potential tables in a corpus may contain mixed uppercase and lowercase text. A function to convert text into all uppercase may be applied to both the input table and the potential tables in the corpus. Accordingly, calculation of a coverage and/or refinity score may be made based on the transformed input column and potential tables. Additionally, values that may have originally been mismatched based on different text casing may be matched after the transformation uniformly cased the text. As another example, an input table may contain names of the cities, “San Francisco”, “San Diego”, and “Los Angeles” and the search keyword may be “Italian Restaurants”. The corpus may contain locations based on GPS coordinates and, thus, may not contain information identifying the GPS coordinates as specifically corresponding to a city. At least a subset of the GPS data in the corpus may be transformed such that the coordinates are converted to identify the city that they correspond to. For example, a GPS coordinate (−31.4250142, −62.0841809) may be converted to “San Francisco” as it is within the city's boundaries. Accordingly, potential tables with GPS coordinates converted to city names may be assigned coverage and refinity scores based on the city names in the input column and the city names in the converted potential tables.
index(s,table id,column id,row count)=s·(table id,column id,row count)
and may be modified to a set of entries, as:
index(s,table id,column id,row count)={s′·(table id,column id,row count),s′εf(s)}
An original function for looking up potential tables may be “lookup(s)”, and may be modified to return a set of values as lookup(s)={lookup(s′), s′εg(s)}. A table of triples, as disclosed herein, may be grouped by an additional factor (i.e., a value) such that they are arranged according to (value, table ID, column ID, row count). The coverage and refinity score for a (table ID, column ID, and row count) set may be different for a given value. Continuing the previous example, an input column may contain “Bell”, “Drum”, and “Clarinet” and may mapped using three different values such that, as an example, the following three columns are effectively formed:
Bell/Instrument/ | Bell/Telephone/ | Bell/Restaurant/ |
Drum | Drum | Drum |
Clarinet | Clarinet | Clarinet |
The different mappings of a value may be generated based on any applicable annotation generation technique such as historical data, input value matching, machine learning, or the like. The arrangement may calculate coverage and refinity scores based on all three columns and, accordingly, generate total scores and provide the highest ranking columns to a user. Similarly, a transformation function mapping a value to a set of values may be applied to values in potential table and, thus, the available number of potential tables may increase based on the number of annotations.
| Row 2 | ||
Bell | Bell | ||
Flute | AT&T ™ | ||
Clarinet | Verizon ™ | ||
According to the techniques disclosed herein, the coverage score for
List of (table id, column id, | |||
Value | row count) triples | ||
CA | (1, 1, 5), (2, 1, 3), (3, 5, 2) | ||
NY | (2, 2, 9), (3, 5, 1), (4, 7, 3) | ||
WI | (1, 1, 6), (3, 5, 1), (2, 1, 1) | ||
Specifically, the value “CA” may be identified as being present in a 1st table at a 1st column, a total of 5 times; a 2nd table at a 2nd column, a total number of 3 times, and in a 3rd table at a 5th column, a total number of 2 times. The triples for “NY” and “WI” are similarly distributed. Based on the list of triples, the following table may be generated:
Table | Column | Row | |
| ID | Count | |
1 | 1 | 5 | |
2 | 1 | 3 | |
3 | 5 | 2 | |
2 | 2 | 9 | |
3 | 5 | 1 | |
4 | 7 | 3 | |
1 | 1 | 6 | |
3 | 5 | 1 | |
2 | 1 | 1 | |
The table may not contain the specific values that the table ID, column ID and row count are based on in order to calculate the refinity and coverage scores as the scores may not need to factor in the specific values. The coverage and refinity scores may be calculated, as disclosed herein, and as shown in the following table:
Table | Column | Row | |||
ID | ID | | Coverage | Refinity | |
1 | 1 | 5 | 2/3 | 11/2 | |
1 | 1 | 6 | |||
2 | 1 | 3 | 2/3 | 4/2 | |
2 | 1 | 1 | |||
2 | 2 | 9 | 1/3 | 9/1 | |
3 | 5 | 2 | 3/3 | 4/3 | |
3 | 5 | 1 | |||
3 | 5 | 1 | |||
4 | 7 | 3 | 1/3 | 3/1 | |
Note that each unique column is assigned a coverage and refinity score. For example,
Claims (23)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/862,768 US9116940B1 (en) | 2013-04-15 | 2013-04-15 | Searching for join candidates |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/862,768 US9116940B1 (en) | 2013-04-15 | 2013-04-15 | Searching for join candidates |
Publications (1)
Publication Number | Publication Date |
---|---|
US9116940B1 true US9116940B1 (en) | 2015-08-25 |
Family
ID=53838473
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/862,768 Active 2033-08-23 US9116940B1 (en) | 2013-04-15 | 2013-04-15 | Searching for join candidates |
Country Status (1)
Country | Link |
---|---|
US (1) | US9116940B1 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150057993A1 (en) * | 2013-08-26 | 2015-02-26 | Lingua Next Technologies Pvt. Ltd. | Method and system for language translation |
US20150379057A1 (en) * | 2014-06-30 | 2015-12-31 | Microsoft Corporation | Understanding tables for search |
US20160012051A1 (en) * | 2014-07-08 | 2016-01-14 | Microsoft Corporation | Computing features of structured data |
US10127324B2 (en) * | 2014-06-21 | 2018-11-13 | Google Llc | Dynamically integrating offline and online suggestions in a geographic application |
US10394815B2 (en) | 2016-10-20 | 2019-08-27 | Microsoft Technology Licensing, Llc | Join with predictive granularity modification by example |
US10546055B2 (en) | 2016-10-20 | 2020-01-28 | Microsoft Technology Licensing, Llc | Join with format modification by example |
US10545960B1 (en) * | 2019-03-12 | 2020-01-28 | The Governing Council Of The University Of Toronto | System and method for set overlap searching of data lakes |
US10585888B2 (en) | 2016-10-20 | 2020-03-10 | Microsoft Technology Licensing, Llc | Join with predictive merging of multiple columns |
US20200251191A1 (en) * | 2015-11-10 | 2020-08-06 | Hyland Switzerland Sàrl | Systems and methods for transmitting clinical data from one or more sending applications to a dictation system |
US20220222489A1 (en) * | 2021-01-13 | 2022-07-14 | Salesforce.Com, Inc. | Generation of training data for machine learning based models for named entity recognition for natural language processing |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6397204B1 (en) * | 1999-06-25 | 2002-05-28 | International Business Machines Corporation | Method, system, and program for determining the join ordering of tables in a join query |
US20030126138A1 (en) * | 2001-10-01 | 2003-07-03 | Walker Shirley J.R. | Computer-implemented column mapping system and method |
US20050071345A1 (en) * | 2003-09-30 | 2005-03-31 | Oracle International Corporation | Attribute partitioning for user extensibility |
US7426520B2 (en) * | 2003-09-10 | 2008-09-16 | Exeros, Inc. | Method and apparatus for semantic discovery and mapping between data sources |
US7730060B2 (en) * | 2006-06-09 | 2010-06-01 | Microsoft Corporation | Efficient evaluation of object finder queries |
-
2013
- 2013-04-15 US US13/862,768 patent/US9116940B1/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6397204B1 (en) * | 1999-06-25 | 2002-05-28 | International Business Machines Corporation | Method, system, and program for determining the join ordering of tables in a join query |
US20030126138A1 (en) * | 2001-10-01 | 2003-07-03 | Walker Shirley J.R. | Computer-implemented column mapping system and method |
US7426520B2 (en) * | 2003-09-10 | 2008-09-16 | Exeros, Inc. | Method and apparatus for semantic discovery and mapping between data sources |
US20050071345A1 (en) * | 2003-09-30 | 2005-03-31 | Oracle International Corporation | Attribute partitioning for user extensibility |
US7730060B2 (en) * | 2006-06-09 | 2010-06-01 | Microsoft Corporation | Efficient evaluation of object finder queries |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9218341B2 (en) * | 2013-08-26 | 2015-12-22 | Lingua Next Technologies Pvt. Ltd. | Method and system for language translation |
US20150057993A1 (en) * | 2013-08-26 | 2015-02-26 | Lingua Next Technologies Pvt. Ltd. | Method and system for language translation |
US10127324B2 (en) * | 2014-06-21 | 2018-11-13 | Google Llc | Dynamically integrating offline and online suggestions in a geographic application |
US20150379057A1 (en) * | 2014-06-30 | 2015-12-31 | Microsoft Corporation | Understanding tables for search |
US9734181B2 (en) * | 2014-06-30 | 2017-08-15 | Microsoft Technology Licensing, Llc | Understanding tables for search |
US10853344B2 (en) | 2014-06-30 | 2020-12-01 | Microsoft Technology Licensing, Llc | Understanding tables for search |
US20160012051A1 (en) * | 2014-07-08 | 2016-01-14 | Microsoft Corporation | Computing features of structured data |
US10127315B2 (en) * | 2014-07-08 | 2018-11-13 | Microsoft Technology Licensing, Llc | Computing features of structured data |
US20200251191A1 (en) * | 2015-11-10 | 2020-08-06 | Hyland Switzerland Sàrl | Systems and methods for transmitting clinical data from one or more sending applications to a dictation system |
US10394815B2 (en) | 2016-10-20 | 2019-08-27 | Microsoft Technology Licensing, Llc | Join with predictive granularity modification by example |
US10546055B2 (en) | 2016-10-20 | 2020-01-28 | Microsoft Technology Licensing, Llc | Join with format modification by example |
US10585888B2 (en) | 2016-10-20 | 2020-03-10 | Microsoft Technology Licensing, Llc | Join with predictive merging of multiple columns |
US10545960B1 (en) * | 2019-03-12 | 2020-01-28 | The Governing Council Of The University Of Toronto | System and method for set overlap searching of data lakes |
US20220222489A1 (en) * | 2021-01-13 | 2022-07-14 | Salesforce.Com, Inc. | Generation of training data for machine learning based models for named entity recognition for natural language processing |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9116940B1 (en) | Searching for join candidates | |
US20210149890A1 (en) | Searchable index | |
US8214361B1 (en) | Organizing search results in a topic hierarchy | |
JP2015118708A (en) | Method and apparatus for providing search results | |
US9984687B2 (en) | Image display device, method for driving the same, and computer readable recording medium | |
CN112163076B (en) | Knowledge question bank construction method, question and answer processing method, device, equipment and medium | |
WO2017180212A1 (en) | Related entity discovery | |
CN110968203A (en) | Personalized neural query automatic completion pipeline | |
US20170185653A1 (en) | Predicting Knowledge Types In A Search Query Using Word Co-Occurrence And Semi/Unstructured Free Text | |
US20170177706A1 (en) | Category-Based Search System and Method for Providing Application Related Search Results | |
US20180276210A1 (en) | Dynamic summary generator | |
US20220300543A1 (en) | Method of retrieving query, electronic device and medium | |
US8682892B1 (en) | Ranking search results | |
KR102601545B1 (en) | Geographic position point ranking method, ranking model training method and corresponding device | |
CN110968801A (en) | Real estate product searching method, storage medium and electronic device | |
KR20130011557A (en) | System and method for providing automatically completed query by regional groups | |
CN114036322A (en) | Training method for search system, electronic device, and storage medium | |
US11392589B2 (en) | Multi-vertical entity-based search system | |
CN105893396B (en) | Interpreting user queries based on nearby locations | |
US9690858B1 (en) | Predicting categorized completions of a partial search term | |
WO2019179208A1 (en) | Drop-down suggestion list | |
KR20180087702A (en) | Apparatus and method for servicing content map using story graph of video content and user structure query | |
CN111666417B (en) | Method, device, electronic equipment and readable storage medium for generating synonyms | |
KR20200014589A (en) | Apparatus and method of recommending items based on areas | |
CN112800160A (en) | Search ranking optimization method, system and device based on map scene and readable storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUPTA, NITIN;HALEVY, ALON YITZCAHK;MADHAVAN, JAYANT;AND OTHERS;SIGNING DATES FROM 20130409 TO 20130412;REEL/FRAME:030219/0441 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |