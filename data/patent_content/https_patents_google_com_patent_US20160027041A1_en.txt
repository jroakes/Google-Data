US20160027041A1 - System, method and computer program product for fractional attribution using online advertising information - Google Patents
System, method and computer program product for fractional attribution using online advertising information Download PDFInfo
- Publication number
- US20160027041A1 US20160027041A1 US14/878,759 US201514878759A US2016027041A1 US 20160027041 A1 US20160027041 A1 US 20160027041A1 US 201514878759 A US201514878759 A US 201514878759A US 2016027041 A1 US2016027041 A1 US 2016027041A1
- Authority
- US
- United States
- Prior art keywords
- event
- events
- event items
- defined events
- items
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0242—Determining effectiveness of advertisements
- G06Q30/0246—Traffic
-
- H04L67/22—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/535—Tracking the activity of the user
Definitions
- This disclosure relates generally to online advertising. More particularly, embodiments disclosed herein relate to a system, method, and computer program product for fractional attribution using display, search, and other advertising information, useful in attributing conversion credits to advertising campaigns.
- an operator of a Web site acting as a publisher, displays ads from advertisers in exchange for some kind of payment.
- search engine operators display search results or ads in a particular order in response to advertiser-sponsored search terms.
- advertisers make use of multiple online channels concurrently.
- a conversion occurs when exposure to an ad leads directly to behavior considered desirable by an advertiser. For example, if a user clicks on an ad and makes a purchase, this particular click has resulted in a conversion. It is noted that other behaviors can be considered conversions, as well, such as simply clicking on an ad or signing up for additional information.
- an important aspect of online marketing is an attribution model, whereby an advertiser can accurately assess the effectiveness of a particular ad campaign and thus better allocate advertising budget across multiple channels.
- the current de facto online marketing attribution model is the so-called “last-click” model.
- the last-click model gives full credit for a desired outcome (conversion) to the last advertisement event that can be associated with the outcome. While the last-click model is simple and easy to understand, it is often wrong.
- a user has seen a display advertisement from advertiser A on one or more Web sites and then employed a search engine to search about A's products, clicked on A's search advertisements, and then converted (e.g., a conversion here could be a visit to A's web site or a purchase of A's products).
- the last-click model would attribute all the conversion credit to the search engine simply because it was the last event of a series of potentially influential events that led to the ultimate conversion.
- Display advertisements are increasingly being seen as brand introducers or purchase assistors higher up in the user purchase funnel. That is, display advertisements might drive users down the purchase funnel and when users get close to the bottom of the funnel and have the intent to purchase an advertiser's products, it is very likely that they would go through the search channel and convert via the search advertisements. If there is no display advertisement, then, the upstream source of users with intent to purchase a given product dries up and the effectiveness of search advertisement actually drops in the long run.
- an attribution platform may have input data from one or more client computers and servers coupled to the platform. Input data may include one or more log files and/or impression and click data.
- An end user may be exposed to one or more advertising channels, e.g., he may receive directed e-mail advertisements, or may visit one or more Web sites or search engines having advertisements hosted by a client of the attribution platform. The end user may use a Web browser application running on a user device and may click on or otherwise convert (e.g., visit the advertiser's Web page, sign up for additional mailings, or make a purchase) upon exposure to one or more of the advertising channels.
- an attribution method employs historical data to determine one or more conditional probabilities.
- an attribution model may comprise determining a first conditional probability of exposure to an advertising event given an occurrence of other advertising events and an ultimate conversion. The method may further comprise determining a second conditional probability of an advertising event given the occurrence of other advertising events.
- the credit weight given to that event is determined as a function of the first and second conditional probabilities. In some embodiments, the credit weight is inversely proportional to the second conditional probability.
- an attribution model may comprise determining a number of converted users exposed to all but one event in a set of advertising events. The method may further comprise determining the number of all users exposed to all but that one event in the set of advertising events. In some embodiments, the credit weight given to that one event is determined as a function of the number of users and number of converted users. In some embodiments, the credit weight given to a particular event is proportional to the probability of conversion given exposure to a set of events not including the particular event.
- the attribution method defines events across granularity levels, determines attribution weights for those events, and combines them based on confidence levels of the different estimates. For example, in some embodiments, a less granular level is a “campaign” event, while higher granularities include a “campaign and frequency” event and a “campaign and recency” event. The resulting attribution weight at a given level of granularity is then a function of a confidence-weighted average across different levels.
- the attribution model may comprise creating an event definition, i.e., a particular granularity level.
- the method may further comprise creating event sets for each user/conversion, that is arranging events by user and conversion so as to list all the events the user was exposed to prior to conversion.
- the method may further comprise, for each event definition, defining subsets, i.e., sets of K ⁇ 1 events for each set of K events.
- the method may further comprise, for each event subset, determining the number of converting users and non-converting users and determining attribution weights based on a function of the two.
- the method may further comprise, for each event definition, populating the attribution weights down to the most granular level.
- the method may further comprise combining the attribution weights from the different event definitions or granularity levels using, for example, a confidence-weighted average across the granularity levels.
- the attribution method may be embodied in a computer program product comprising at least one non-transitory computer readable medium storing instructions translatable by at least one processor to perform the method.
- an attribution system may comprise software and hardware, including the at least one non-transitory computer readable medium, necessary to implement the attribution method.
- Computer-readable storage medium encompasses all types of data storage medium that can be read by a processor. Examples of computer-readable storage media can include random access memories, read-only memories, hard drives, datacartridges, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices.
- FIG. 1 depicts a diagrammatic representation of an example user transaction in a network environment where embodiments disclosed herein may reside;
- FIG. 2 depicts a diagrammatic representation of an example system architecture comprising multiple clients coupled to an attribution platform, implementing some embodiments disclosed herein;
- FIG. 3 depicts an exemplary event tree according to some embodiments disclosed herein;
- FIG. 4 is a flowchart illustrating attribution modeling according to some embodiments disclosed herein;
- FIG. 5 is a table illustrating comparative results for fractional attribution and last event attribution according to some embodiments disclosed herein;
- FIG. 6 is a plot diagram illustrating comparative differences by campaign for fractional attribution and other attribution methods according to some embodiments disclosed herein;
- FIG. 7 is a table illustrating cost per conversions based on attribution results.
- FIG. 1 depicts a diagrammatic representation of an example network environment for fractional cross-channel attribution.
- a user 102 may “convert,” or perform a desired action, after clicking a link 104 (e.g., a banner ad on a publisher web site 114 , a search engine ad 110 , or an ad on another channel 112 ), via a user device 106 at a particular Internet Protocol (IP) address and being directed via network 122 to the advertiser's web page 116 .
- Conversion 118 can be a purchase transaction, but could also include such actions as registering with a Web site, signing up for product information, and the like.
- An attribution platform 120 in accordance with embodiments of the invention allows the advertiser 116 to make informed decisions about payment for advertisements and future ad campaigns.
- Data from the click 101 and ultimate conversion 118 may be collected in a variety of ways.
- one or more computers in the network 122 may collect click data.
- a click data collecting computer may be a server machine residing in a publisher 114 's or other party's computing environment or network.
- the click data collecting computer may collect click streams associated with visitors to one or more Web sites.
- the collected information may be stored in one or more log files.
- the information associated with the plurality of clicks may comprise visitor Internet Protocol (IP) address information, date and time information, publisher information, referrer information, user-agent information, searched keywords, cookies, and so on.
- IP visitor Internet Protocol
- the attribution platform 120 employs “ad tags” for monitoring impression data and “page tags” for monitoring click data.
- Ad tags can be 1 ⁇ 1 pixels embedded in page code at the publisher site and can be used to determine where the ad is on a page (above or below a “fold,” i.e., visible with or without scrolling) and whether and how long a user sees it.
- Page tags can be embedded in a similar manner on the landing page, and can identify whether a user has arrived and where the user comes from.
- Example tags are included in the attached Appendices A and B.
- ad tags or page tags can be transmitted to the attribution platform 120 responsive to a user viewing or clicking on an ad and viewing or clicking on an associated web page.
- FIG. 2 depicts a diagrammatic representation of example system architecture 200 comprising one or more clients 202 and attribution platform 220 .
- a user may browse a publisher site 204 which maintains one or more ad tags 205 .
- Ad tag data can be sent to a tag server 210 , responsive to a user viewing or clicking an ad, which stores in a database 216 , impression data sorted by customer.
- impression data may include, e.g., where, when, and how long a user viewed the ad.
- An ad server 212 may be used to maintain the ad on the publisher's web site 204 .
- the user 202 may click an ad to arrive at a landing page 208 .
- Embedded on the landing page 208 includes a page tag 207 , which identifies user accesses to the landing page 208 and may be sent to a database 214 accessible by the attribution platform 220 .
- An advertiser 206 records a conversion 218 , if any, and likewise provides the information to the attribution platform 220 .
- Attribution platform 220 may reside in a computing environment comprising one or more server machines.
- Each server machine may include a central processing unit (CPU), read-only memory (ROM), random access memory (RAM), hard drive (HD) or non-volatile memory, and input/output (I/O) device(s).
- An I/O device may be a keyboard, monitor, printer, electronic pointing device (e.g., mouse, trackball, etc.), or the like.
- the hardware configuration of this server machine can be representative of other devices and computers alike at a server site (represented by platform 220 ) as well as at a client site.
- Embodiments of platform 220 disclosed herein may include a system and a computer program product implementing a method for fractional attribution in a network environment.
- platform 220 may be owned and operated independent of the clients that it services.
- company A operating platform 220 may provide attribution services to company B operating a client (not shown).
- Companies A and B may communicate over a network.
- Companies A and B may communicate over a secure channel in a public network such as the Internet.
- Example clients may include advertisers, publishers, and ad networks.
- the system may run on a Web server.
- the computer program product may comprise one or more non-transitory computer readable storage media storing computer instructions translatable by multiple processors to process attribution data.
- the input data may be from a log file, a memory, a streaming source, or ad and page tags.
- attribution data refers to any and all data associated with online advertising events such as clicking on an ad, viewing an ad (an impression), entering a search query, conversion, and so on, and may include click history data, click intelligence data, post-click data, visitor profile data, impression data, etc.
- software running on a server computer in platform 220 may receive a client file containing attribution data from an attribution data collecting computer associated with a client.
- a client may represent an online retailer and may collect click stream data from visitors to a Web site own and/or operated by the online retailer. The attribution data thus collected can provide a detailed look at how each visitor got to the Web site, what pages were viewed by the visitor, what products and/or services the visitor clicked on, the date and time of each visit and click, and so on.
- the specific attribution data that can be collected from each click stream may include a variety of entities such as the Internet Protocol (IP) address associated with a visitor (which can be a human or a bot), timestamps indicating the date and time at which each request is made or click is generated, target URL or page and network address of a server associated therewith, user-agent (which shows what browser the visitor was using), query strings (which may include keywords searched by the visitor), and cookie data.
- IP Internet Protocol
- the corresponding click stream may contain the referrer page of the search engine and the search words entered by the visitor.
- Attribution data can be created using a corporate information infrastructure that supports a Web-based enterprise computing environment. A skilled artisan can appreciate what typical attribution click streams may contain and how they are generated and stored.
- optimization data may include an impression/click record for every ad impression/click received from a given client of the system.
- An example impression/click record may include at least the following attributes:
- Embodiments disclosed herein may be implemented in suitable software code (i.e., computer instructions translatable by a processor).
- suitable software code i.e., computer instructions translatable by a processor.
- computer instructions and data implementing embodiments disclosed herein may be carried out on various types of computer-readable storage media, including volatile and non-volatile computer memories and storage devices. Examples of computer-readable storage media may include ROM, RAM, HD, direct access storage device arrays, magnetic tapes, floppy diskettes, optical storage devices, etc.
- the computer instructions may be written in any suitable computer language, including C++.
- some or all of the software components may reside on a single server computer or on any combination of separate server computers. Communications between any of the computers described above may be accomplished in various ways, including wired and wireless. As one skilled in the art can appreciate, network communications can include electronic signals, optical signals, radio-frequency signals, and other signals as well as combinations thereof.
- a good attribution model may possess three desirable properties: Monotonicity (Property 1); Correlation with Conversion (Property 2); and Accounting for Event Interactions (Property 3).
- the first desired property is Monotonicity, which means that if two events (e.g., E 1 and E 2 ) were combined into one composite event E 12 then the fraction credit w 12 for E 12 should most likely be no less than w 1 , or w 2 . That is, w 12 ⁇ w 1 and w 12 ⁇ w 2 .
- E 1 and E 2 the fraction credit w 12 for E 12 should most likely be no less than w 1 , or w 2 . That is, w 12 ⁇ w 1 and w 12 ⁇ w 2 .
- the intuition is that two events a converted user has with a marketer's campaigns should deserve no less credit than each of those two events individually.
- the third property of the model should take into account as much as possible the interactions among different events. For example, if individually each of the three events has driven conversions equally well, but when, E 2 and E 3 are together they have driven conversions much better, a higher credit weight should be given to either E 2 or E 3 than to E 1 .
- Embodiments of the invention make use of data-driven probabilistic models. That is, all the conditional probability estimates discussed herein are based on historical data.
- B) can be derived from historical data by dividing the number of users who (at least) had events A and B by number of users who (at least) had event B. That is,
- Embodiments of the invention may make use of any of a variety of models, although some may be more or less desirable, depending on the nature of the data.
- a first model (Model 1) may be the Naive Bayes model:
- a second model (Model 2) may be the Conversion Index model:
- a third model (Model 3) may be the Conditional Importance model:
- a fourth model may be the Marginal Importance model:
- a variant of Model 4 can be
- ⁇ E 1 ,E 2 , . . . ,E K ⁇ ⁇ E j means the subset of ⁇ E 1 ,E 2 , . . . ,E K ⁇ without E j
- E 1 could represent a user seeing one or more impressions from a specific campaign; or a user seeing one or more impressions from a specific campaign more than two weeks ago; or a user seeing exactly two impressions from a specific campaign in the last day; or a user seeing one or more impressions on a specific site in the last day; etc.
- an event may be desirable to define an event as specifically as possible; e.g., a user seeing exactly n impressions from campaign x with creative y on site z exactly m days ago.
- defining events at that deep level of granularity may encounter data sparsity—often there is not enough data to robustly derive the conditional probabilities described in the previous section. It may sound counterintuitive as the system easily collects billions of impressions and hundreds of millions of users every month from a large advertiser. However, not many users would share the same event of “seeing exactly n impressions from campaign x with creative y on site z exactly m days ago”. When the number of users is small, there would be low confidence in the conditional probabilities estimated.
- an attribution analysis may be run at many different granularity levels and then combined based on confidence values of different estimates.
- One technique for this task is “hierarchical Bayesian shrinkage.” The goal is to get as robust as possible an estimate at the most granular level.
- One way to address data sparsity at the granular level is to borrow information (or estimates) from lower granularity levels.
- different levels can be arranged into a hierarchy 300 like the one shown in FIG. 3 .
- shown are parent nodes campaign 302 and site 304 .
- Campaign node 302 is less granular and a parent to the nodes at the next most granular level, campaign+frequency 306 and campaign+recency 308 .
- the nodes 306 , 308 in turn are parents to node 310 (campaign+frequency+recency).
- parent node site 304 is parent to site+frequency 312 and site+frequency node 314 which, in turn, are parents to site+frequency+recency node 316 .
- Nodes 310 and 316 are parents and less granular than node 318 (campaign+site+frequency+recency).
- the attribution weight for a given event can be calculated for every node in the hierarchy and combined based on the confidence of each calculation.
- Confidence can be a function of the amount of data (i.e., the number of users) used to estimate the conditional probabilities. For example, a reasonable confidence function is the sigmoid function
- ⁇ ⁇ ( n ) 1 1 + ⁇ - ( n - ⁇ a ) ,
- n is the number of users
- ⁇ and ⁇ are adjustable parameters.
- the parameter ⁇ determines when confidence becomes 0.5 and ⁇ controls how fast the confidence grows with n.
- One way of combining the attribution weights estimated at different granularity levels is to take a confidence-weighted average across different levels. That is,
- w 1 is the attribution weight at level l and g 1 is the confidence at level l.
- bias and variance At more granular levels, the estimates have lower bias but higher variance; at less granular levels, the estimates have lower variance (i.e., more robust) but higher bias.
- the actual equation may vary somewhat from implementation to implementation. For example, one embodiment may add a level-dependent weight that is fixed for each level to reflect prior knowledge about the importance of difference levels. That is, if enough data can be had at a campaign+recency level, one might want to give more weight to that level than to a less granular (e.g., campaign) level.
- FIG. 4 is a flowchart illustrating operation of embodiments of the invention for generating fractional attribution results.
- a conversion is a desired activity, such as a user purchase of an advertiser's product or service.
- An event can be one or more user-defined events or sequences of events.
- event sets for each user/conversion are created. This is essentially to arrange events by user and conversion. For each incidence of the conversion, this step may include listing all the event item exposures the user had prior to the conversion. Events are defined and tracked from the raw impression/click/conversion data obtained from the ad tags and page tags or log files or other data collected.
- a step 406 for each event definition, create event subsets that need counts. That is, for each event set of size K (that associates with a conversion), generate K ⁇ 1 event subsets as explained above.
- a step 408 for each event definition, and for each event subset generated, count the number of converted users and number of non-converting users and use the ratio between those two as the basis for computing attribution weights.
- the total user counts may also be used as the basis for computing confidence as described above.
- a step 410 for each event definition, populate the attribution weights down to the most granular event level, i.e., individual impressions or clicks.
- each event may map to one or more impressions/clicks and the attribution weight computed for the event will be evenly distributed down to individual impressions/clicks. For example, if events are defined by a campaign+recency, an event (campaign x+3 days ago) gets a weight of 0.6 and it corresponds to 10 impressions on that day, then each of those 10 impressions would get a weight of 0.06.
- a step 410 combine the attribution weights from different event definitions (i.e., different granularity levels) using, for example, the hierarchical Bayesian shrinkage method described above.
- step 406 getting the user counts for each event subset—is computationally intensive. There can be hundreds of millions of users and hundreds of thousands of subsets. Each user is represented by an event set (all the events the user has had). The basic operation is, for each user and each subset, to determine if the user's event set contains the subset of interest (for which we want to get user counts).
- One efficient way of doing the counting is to determine, for each user, which n events he has seen, and to define (n ⁇ 1) subsets. For example, if he has seen events E 1 , E 2 , E 3 , then the subsets are defined as follows:
- each user go through each event in the user's event set and add all the subset indexes to a hash and keep track of the counts. For example, for event E 1 , add the subset indexes of S 1 and S 2 to a hash; for event E 2 , add the subset indexes of S 1 and S 3 to a hash; and for event E 3 , add the subset indexes of S 2 and S 3 to a hash. If the hash count of a subset index equals the length of the subset, increase the user count for a subset.
- Table 1 Shown in Table 1 below are exemplary event data (Each row in this example is a user event sequence; E 1 -E 8 are eight events to be assigned conversion credits; C/NC stands for conversion/no conversion):
- each converted user For each converted user, generate all leave-one-out subsequences. For example, from the first converted user, one gets ⁇ E 1 , E 2 ⁇ , ⁇ E 2 , E 3 ⁇ , and ⁇ E 1 E 3 ⁇ .
- FIG. 5 shows attribution weights for a particular user with six impression events before a conversion.
- the six impressions imp_ 1 , imp_ 2 , . . . imp_ 6
- the last-click model assigns all credit to imp_ 6 whereas an even attribution model assign 1 ⁇ 6 credit to each of the six events.
- the next two rows show the results of fractional attribution model at campaign level and campaign+frequency level, respectively. In this case, there are four event items for both of those levels but the weights are different as one takes into account frequency in the event definition and the other does not.
- results for many other levels are omitted and in the last row the final fractional attribution results based on applying hierarchical Bayesian shrinkage to combine the results from all different levels are shown.
- the result is a weight for each impression/click event (i.e., at the most granular level). These final weights can then be rolled up along different dimensions for reporting. Common dimensions of interest include campaign, site, creative, etc.
- FIG. 6 compares the fractional model with the last-click model and even attribution model, after rolling up the attribution weights to campaign level.
- Campaign IDs are shown on the x-axis and relative difference between models on the y-axis. For example, for campaign ID 214383 (highlighted in the box), the fractional attribution model assigns to it 12% less credit than last-click model does, but 20% more than even model does.
- FIG. 7 shows some examples of the cost per conversion metrics based on attribution results.
- the cost numbers based on fractional attribution models will be more accurate and can help make better business decisions regarding whether to increase or decrease spend on a particular campaign.
- Any suitable programming language can be used to implement the routines, methods or programs of embodiments of the invention described herein, including C, C++, Java, assembly language, etc.
- Different programming techniques can be employed such as procedural or object oriented.
- Any particular routine can execute on a single computer processing device or multiple computer processing devices, a single computer processor or multiple computer processors.
- Data may be stored in a single storage medium or distributed through multiple storage mediums, and may reside in a single database or multiple databases (or other data storage techniques).
- sequence of operations described herein can be interrupted, suspended, or otherwise controlled by another process, such as an operating system, kernel, etc.
- the routines can operate in an operating system environment or as stand-alone routines. Functions, routines, methods, steps and operations described herein can be performed in hardware, software, firmware or any combination thereof.
- Embodiments described herein can be implemented in the form of control logic in software or hardware or a combination of both.
- the control logic may be stored in an information storage medium, such as a computer-readable medium, as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in the various embodiments.
- an information storage medium such as a computer-readable medium
- a person of ordinary skill in the art will appreciate other ways and/or methods to implement the invention.
- a “computer-readable medium” may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, system or device.
- the computer readable medium can be, by way of example only but not by limitation, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, system, device, propagation medium, or computer memory.
- Such computer-readable medium shall generally be machine readable and include software programming or code that can be human readable (e.g., source code) or machine readable (e.g., object code).
- a “processor” includes any, hardware system, mechanism or component that processes data, signals or other information.
- a processor can include a system with a general-purpose central processing unit, multiple processing units, dedicated circuitry for achieving functionality, or other systems. Processing need not be limited to a geographic location, or have temporal limitations. For example, a processor can perform its functions in “real-time,” “offline,” in a “batch mode,” etc. Portions of processing can be performed at different times and at different locations, by different (or the same) processing systems.
Abstract
Embodiments disclosed provide technical details on fractional attribution using online advertising information. More specifically, embodiments disclosed herein use historical data to determine one or more conditional probabilities and assign credit weights to given events. In this way, fairer and more accurate attribution of conversions to particular events may be assigned.
Description
- This application claims priority to and is a continuation of U.S. patent application Ser. No. 13/195,753 entitled “System, Method and Computer Program Product for Fractional Attribution Using Online Online Advertising Information,” filed Aug. 1, 2011, incorporated herein by reference in its entirety.
- A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.
- This disclosure relates generally to online advertising. More particularly, embodiments disclosed herein relate to a system, method, and computer program product for fractional attribution using display, search, and other advertising information, useful in attributing conversion credits to advertising campaigns.
- In a typical online marketing scenario, an operator of a Web site, acting as a publisher, displays ads from advertisers in exchange for some kind of payment. In other scenarios, search engine operators display search results or ads in a particular order in response to advertiser-sponsored search terms. In many cases, advertisers make use of multiple online channels concurrently.
- In online marketing, a conversion occurs when exposure to an ad leads directly to behavior considered desirable by an advertiser. For example, if a user clicks on an ad and makes a purchase, this particular click has resulted in a conversion. It is noted that other behaviors can be considered conversions, as well, such as simply clicking on an ad or signing up for additional information.
- In any case, an important aspect of online marketing is an attribution model, whereby an advertiser can accurately assess the effectiveness of a particular ad campaign and thus better allocate advertising budget across multiple channels.
- The current de facto online marketing attribution model is the so-called “last-click” model. The last-click model gives full credit for a desired outcome (conversion) to the last advertisement event that can be associated with the outcome. While the last-click model is simple and easy to understand, it is often wrong.
- For example, suppose a user has seen a display advertisement from advertiser A on one or more Web sites and then employed a search engine to search about A's products, clicked on A's search advertisements, and then converted (e.g., a conversion here could be a visit to A's web site or a purchase of A's products). The last-click model would attribute all the conversion credit to the search engine simply because it was the last event of a series of potentially influential events that led to the ultimate conversion.
- According to the last-click model, it would make sense for an advertiser to put all or most of its budget into search engine advertisements. However, it has been found that, if this is done, overall marketing effectiveness actually decreases. Display advertisements are increasingly being seen as brand introducers or purchase assistors higher up in the user purchase funnel. That is, display advertisements might drive users down the purchase funnel and when users get close to the bottom of the funnel and have the intent to purchase an advertiser's products, it is very likely that they would go through the search channel and convert via the search advertisements. If there is no display advertisement, then, the upstream source of users with intent to purchase a given product dries up and the effectiveness of search advertisement actually drops in the long run.
- From advertisers' and hosts' perspectives, it would be desirable to move away from the last-click model to a more reasonable fractional attribution model that more correctly give credits to display advertisements and perhaps other advertising channels (such as email and affiliate, or even offline) for all desired outcomes received. It would also help the advertiser make the right decisions as to how to better allocate advertising budget across different channels.
- Embodiments disclosed herein provide a system, method, and computer program product for fractional attribution using display, search, and other advertising information. In some embodiments, an attribution platform may have input data from one or more client computers and servers coupled to the platform. Input data may include one or more log files and/or impression and click data. An end user may be exposed to one or more advertising channels, e.g., he may receive directed e-mail advertisements, or may visit one or more Web sites or search engines having advertisements hosted by a client of the attribution platform. The end user may use a Web browser application running on a user device and may click on or otherwise convert (e.g., visit the advertiser's Web page, sign up for additional mailings, or make a purchase) upon exposure to one or more of the advertising channels.
- In some embodiments, an attribution method employs historical data to determine one or more conditional probabilities. In particular, in some embodiments, an attribution model may comprise determining a first conditional probability of exposure to an advertising event given an occurrence of other advertising events and an ultimate conversion. The method may further comprise determining a second conditional probability of an advertising event given the occurrence of other advertising events. In some embodiments, the credit weight given to that event is determined as a function of the first and second conditional probabilities. In some embodiments, the credit weight is inversely proportional to the second conditional probability.
- In some embodiments, an attribution model may comprise determining a number of converted users exposed to all but one event in a set of advertising events. The method may further comprise determining the number of all users exposed to all but that one event in the set of advertising events. In some embodiments, the credit weight given to that one event is determined as a function of the number of users and number of converted users. In some embodiments, the credit weight given to a particular event is proportional to the probability of conversion given exposure to a set of events not including the particular event.
- In some embodiments, the attribution method defines events across granularity levels, determines attribution weights for those events, and combines them based on confidence levels of the different estimates. For example, in some embodiments, a less granular level is a “campaign” event, while higher granularities include a “campaign and frequency” event and a “campaign and recency” event. The resulting attribution weight at a given level of granularity is then a function of a confidence-weighted average across different levels.
- In some embodiments, the attribution model may comprise creating an event definition, i.e., a particular granularity level. For each event definition, the method may further comprise creating event sets for each user/conversion, that is arranging events by user and conversion so as to list all the events the user was exposed to prior to conversion. The method may further comprise, for each event definition, defining subsets, i.e., sets of K−1 events for each set of K events. The method may further comprise, for each event subset, determining the number of converting users and non-converting users and determining attribution weights based on a function of the two. The method may further comprise, for each event definition, populating the attribution weights down to the most granular level. The method may further comprise combining the attribution weights from the different event definitions or granularity levels using, for example, a confidence-weighted average across the granularity levels.
- In some embodiments, the attribution method may be embodied in a computer program product comprising at least one non-transitory computer readable medium storing instructions translatable by at least one processor to perform the method. In some embodiments, an attribution system may comprise software and hardware, including the at least one non-transitory computer readable medium, necessary to implement the attribution method.
- Software implementing embodiments disclosed herein may be implemented in suitable computer-executable instructions that may reside on a computer-readable storage medium. Within this disclosure, the term “computer-readable storage medium” encompasses all types of data storage medium that can be read by a processor. Examples of computer-readable storage media can include random access memories, read-only memories, hard drives, datacartridges, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices.
- These, and other, aspects of the disclosure will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood, however, that the following description, while indicating various embodiments of the disclosure and numerous specific details thereof, is given by way of illustration and not of limitation. Many substitutions, modifications, additions and/or rearrangements may be made within the scope of the disclosure without departing from the spirit thereof, and the disclosure includes all such substitutions, modifications, additions and/or rearrangements.
- The drawings accompanying and forming part of this specification are included to depict certain aspects of the disclosure. It should be noted that the features illustrated in the drawings are not necessarily drawn to scale. A more complete understanding of the disclosure and the advantages thereof may be acquired by referring to the following description, taken in conjunction with the accompanying drawings in which like reference numbers indicate like features and wherein:
-
FIG. 1 depicts a diagrammatic representation of an example user transaction in a network environment where embodiments disclosed herein may reside; -
FIG. 2 depicts a diagrammatic representation of an example system architecture comprising multiple clients coupled to an attribution platform, implementing some embodiments disclosed herein; -
FIG. 3 depicts an exemplary event tree according to some embodiments disclosed herein; -
FIG. 4 is a flowchart illustrating attribution modeling according to some embodiments disclosed herein; -
FIG. 5 is a table illustrating comparative results for fractional attribution and last event attribution according to some embodiments disclosed herein; -
FIG. 6 is a plot diagram illustrating comparative differences by campaign for fractional attribution and other attribution methods according to some embodiments disclosed herein; and -
FIG. 7 is a table illustrating cost per conversions based on attribution results. - The disclosure and various features and advantageous details thereof are explained more fully with reference to the exemplary, and therefore non-limiting, embodiments illustrated in the accompanying drawings and detailed in the following description. Descriptions of known programming techniques, computer software, hardware, operating platforms and protocols may be omitted so as not to unnecessarily obscure the disclosure in detail. It should be understood, however, that the detailed description and the specific examples, while indicating the preferred embodiments, are given by way of illustration only and not by way of limitation. Thus, any examples or illustrations given herein are not to be regarded in any way as restrictions on, limits to, or express definitions of, any term or terms with which they are utilized. Instead these examples or illustrations are to be regarded as being described with respect to one particular embodiment and as illustrative only. Those of ordinary skill in the art will appreciate that any term or terms with which these examples or illustrations are utilized encompass other embodiments as well as implementations and adaptations thereof which may or may not be given therewith or elsewhere in the specification and all such embodiments are intended to be included within the scope of that term or terms. Language designating such non-limiting examples and illustrations includes, but is not limited to: “for example,” “for instance,” “e.g.,” “in one embodiment,” and the like. Various substitutions, modifications, additions and/or rearrangements within the spirit and/or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure.
-
FIG. 1 depicts a diagrammatic representation of an example network environment for fractional cross-channel attribution. - In the example of
FIG. 1 , auser 102 may “convert,” or perform a desired action, after clicking a link 104 (e.g., a banner ad on apublisher web site 114, asearch engine ad 110, or an ad on another channel 112), via auser device 106 at a particular Internet Protocol (IP) address and being directed vianetwork 122 to the advertiser'sweb page 116.Conversion 118 can be a purchase transaction, but could also include such actions as registering with a Web site, signing up for product information, and the like. - An
attribution platform 120 in accordance with embodiments of the invention allows theadvertiser 116 to make informed decisions about payment for advertisements and future ad campaigns. - Data from the
click 101 andultimate conversion 118 may be collected in a variety of ways. In some embodiments, one or more computers in thenetwork 122 may collect click data. In some embodiments, a click data collecting computer may be a server machine residing in apublisher 114's or other party's computing environment or network. In some embodiments, the click data collecting computer may collect click streams associated with visitors to one or more Web sites. In some embodiments, the collected information may be stored in one or more log files. In some embodiments, the information associated with the plurality of clicks may comprise visitor Internet Protocol (IP) address information, date and time information, publisher information, referrer information, user-agent information, searched keywords, cookies, and so on. For additional examples on collecting information provided from a visitor's Web browser application, readers are directed to U.S. patent application Ser. No. 11/796,031, filed Apr. 26, 2007, entitled “METHOD FOR COLLECTING ONLINE VISIT ACTIVITY,” which is fully incorporated herein by reference. - In some embodiments, the
attribution platform 120 employs “ad tags” for monitoring impression data and “page tags” for monitoring click data. Ad tags can be 1×1 pixels embedded in page code at the publisher site and can be used to determine where the ad is on a page (above or below a “fold,” i.e., visible with or without scrolling) and whether and how long a user sees it. Page tags can be embedded in a similar manner on the landing page, and can identify whether a user has arrived and where the user comes from. Example tags are included in the attached Appendices A and B. As will be described in greater detail below, ad tags or page tags can be transmitted to theattribution platform 120 responsive to a user viewing or clicking on an ad and viewing or clicking on an associated web page. -
FIG. 2 depicts a diagrammatic representation ofexample system architecture 200 comprising one ormore clients 202 andattribution platform 220. A user may browse apublisher site 204 which maintains one or more ad tags 205. Ad tag data can be sent to atag server 210, responsive to a user viewing or clicking an ad, which stores in adatabase 216, impression data sorted by customer. Such data may include, e.g., where, when, and how long a user viewed the ad. - An
ad server 212 may be used to maintain the ad on the publisher'sweb site 204. Theuser 202 may click an ad to arrive at alanding page 208. Embedded on thelanding page 208 includes apage tag 207, which identifies user accesses to thelanding page 208 and may be sent to adatabase 214 accessible by theattribution platform 220. Anadvertiser 206 records aconversion 218, if any, and likewise provides the information to theattribution platform 220. -
Attribution platform 220 may reside in a computing environment comprising one or more server machines. Each server machine may include a central processing unit (CPU), read-only memory (ROM), random access memory (RAM), hard drive (HD) or non-volatile memory, and input/output (I/O) device(s). An I/O device may be a keyboard, monitor, printer, electronic pointing device (e.g., mouse, trackball, etc.), or the like. The hardware configuration of this server machine can be representative of other devices and computers alike at a server site (represented by platform 220) as well as at a client site. - Embodiments of
platform 220 disclosed herein may include a system and a computer program product implementing a method for fractional attribution in a network environment. In some embodiments,platform 220 may be owned and operated independent of the clients that it services. For example, companyA operating platform 220 may provide attribution services to company B operating a client (not shown). In one embodiment, Companies A and B may communicate over a network. In one embodiment, Companies A and B may communicate over a secure channel in a public network such as the Internet. Example clients may include advertisers, publishers, and ad networks. - In some embodiments, the system may run on a Web server. In some embodiments, the computer program product may comprise one or more non-transitory computer readable storage media storing computer instructions translatable by multiple processors to process attribution data. The input data may be from a log file, a memory, a streaming source, or ad and page tags. Within this disclosure, the term “attribution data” refers to any and all data associated with online advertising events such as clicking on an ad, viewing an ad (an impression), entering a search query, conversion, and so on, and may include click history data, click intelligence data, post-click data, visitor profile data, impression data, etc.
- In some embodiments, software running on a server computer in
platform 220 may receive a client file containing attribution data from an attribution data collecting computer associated with a client. For example, a client may represent an online retailer and may collect click stream data from visitors to a Web site own and/or operated by the online retailer. The attribution data thus collected can provide a detailed look at how each visitor got to the Web site, what pages were viewed by the visitor, what products and/or services the visitor clicked on, the date and time of each visit and click, and so on. The specific attribution data that can be collected from each click stream may include a variety of entities such as the Internet Protocol (IP) address associated with a visitor (which can be a human or a bot), timestamps indicating the date and time at which each request is made or click is generated, target URL or page and network address of a server associated therewith, user-agent (which shows what browser the visitor was using), query strings (which may include keywords searched by the visitor), and cookie data. For example, if the visitor found the Web site through a search engine, the corresponding click stream may contain the referrer page of the search engine and the search words entered by the visitor. Attribution data can be created using a corporate information infrastructure that supports a Web-based enterprise computing environment. A skilled artisan can appreciate what typical attribution click streams may contain and how they are generated and stored. - Thus, in some embodiments, optimization data may include an impression/click record for every ad impression/click received from a given client of the system. An example impression/click record may include at least the following attributes:
-
- Impression/click timestamp;
- visitor cookie (if available, may be set up as a domain cookie for persistent visitor identification);
- visitor IP address;
- visitor browser user-agent;
- impression/click source (may be a publisher ID or a referrer domain);
- click destination (landing page Web address or bid keywords for advertisers); and
- conversion data (whether the visitor executed a desired conversion).
- For the sake of simplicity, hardware components (e.g., CPU, ROM, RAM, HD, I/O, etc.) are not illustrated in
FIG. 2 . Embodiments disclosed herein may be implemented in suitable software code (i.e., computer instructions translatable by a processor). As one skilled in the art can appreciate, computer instructions and data implementing embodiments disclosed herein may be carried out on various types of computer-readable storage media, including volatile and non-volatile computer memories and storage devices. Examples of computer-readable storage media may include ROM, RAM, HD, direct access storage device arrays, magnetic tapes, floppy diskettes, optical storage devices, etc. As those skilled in the art can appreciate, the computer instructions may be written in any suitable computer language, including C++. In embodiments disclosed herein, some or all of the software components may reside on a single server computer or on any combination of separate server computers. Communications between any of the computers described above may be accomplished in various ways, including wired and wireless. As one skilled in the art can appreciate, network communications can include electronic signals, optical signals, radio-frequency signals, and other signals as well as combinations thereof. - Without loss of generality, assume that a user has had three events (i.e., three interactions with a marketer's various campaigns; the definition of interactions is discussed below), prior to her conversion. The fractional attribution problem includes figuring out what fraction of the conversion credit goes each of the three events. A more mathematical description can be as follows:
- If a user had events E1, E2, and E3 and then converted, what fractional credit w1 goes to E1, w2 goes to E2, and w3 goes to E3, subject to Σj=1 3wj=1?
- In this example, it is assumed that the conversion event is 100% driven by the combination of the three events {E1,E2,E3}. In reality this might not be true. However, it appears likely that whatever factors not observed introduce the same bias to all the campaigns in the data. The fractional attribution results are still useful in reflecting the relative importance of different channels/campaigns or of any other entities in which one might be interested.
- In some embodiments, a good attribution model may possess three desirable properties: Monotonicity (Property 1); Correlation with Conversion (Property 2); and Accounting for Event Interactions (Property 3).
- The first desired property is Monotonicity, which means that if two events (e.g., E1 and E2) were combined into one composite event E12 then the fraction credit w12 for E12 should most likely be no less than w1, or w2. That is, w12≧w1 and w12≧w2. The intuition is that two events a converted user has with a marketer's campaigns should deserve no less credit than each of those two events individually.
- The second property, Correlation with Conversion, holds that the weight for each event should be roughly correlated with the event's ability to drive conversions based on historical data. If E1. historically has driven conversions better than E2 and E3 together, then E1 deserves more credit than either E2 and E3.
- The third property of the model should take into account as much as possible the interactions among different events. For example, if individually each of the three events has driven conversions equally well, but when, E2 and E3 are together they have driven conversions much better, a higher credit weight should be given to either E2 or E3 than to E1.
- Let conversion be represented by C, in mathematical terms, this means
-
- If P(C|E1)≅P(C|E2)≅P(C|E3) but (C|E2, E3)>>P(C|E1), then we probably should have w2>>w1 and w3>>w1.
- Embodiments of the invention make use of data-driven probabilistic models. That is, all the conditional probability estimates discussed herein are based on historical data.
- In particular, each conditional probability P(A|B) can be derived from historical data by dividing the number of users who (at least) had events A and B by number of users who (at least) had event B. That is,
-
- Embodiments of the invention may make use of any of a variety of models, although some may be more or less desirable, depending on the nature of the data.
- A first model (Model 1) may be the Naive Bayes model:
-
- Consider the naive Bayes model for P(C|E1, E2, E3:
-
P(C|E 1 ,E 2 ,E 3)∝P(C|E 1)·P(C|E 2)·P(C|E 3). -
- One natural idea would be to use
-
w j =P(C|E j),j=1, 2, 3 - This naive choice does possess
Properties 1 & 2 discussed above. However, this model assumes that the three events {E1,E2,E3} are independent given the conversion event C. It does not return the right answer when there are strong event correlations; that is, it does not possessProperty 3. For example, in the example used for explainingProperty 3, this model would NOT give a higher weight to either E2 or E3 than that to E1, which is desired. - A second model (Model 2) may be the Conversion Index model:
-
- If w1 is set to be the conversion index of E1
-
-
- where Ē1 means “no event E1”. This model turns out to be very similar to the naive Bayes model because w1 in (3) is strongly positively (although nonlinearly) correlated with P(C|E1). As in the naive Bayes model, correlations among the three events are not taken into account.
- A third model (Model 3) may be the Conditional Importance model:
-
- Consider capturing the importance E1 by the conditional probability
-
-
- which indicates how likely E1 is observed given that we observe {E2,E3,C}. However, with (4), w1 may change in the wrong direction when the specificity of E1 is increased. For example, if (4) were used to compute the importance of a composite event E12={E1, E2}, the result would be
-
-
- which will most likely be smaller than w1, even though according to
Property 1 one would normally expect the opposite (w12>w1), i.e., the composite event E12 should most likely get more conversion credit, not less.
- which will most likely be smaller than w1, even though according to
- A fourth model (Model 4) may be the Marginal Importance model:
-
- Consider an improvement of
Model 3 as follows
- Consider an improvement of
-
-
- This normalizes the probability of seeing E1 given {E2,E3,C} in (4) by the probability of seeing E1 given {E2,E3}. The idea is that, if E1 is equally likely with or without C (given {E2,E3}, then it is probably not that important.
- Also what it means is that if E2&E3 together drive conversions as well as all three events together, i.e., P(C|E2, E3) is close to P(C|E1, E2, E3), then E1 is probably not that important and the weight for E1 should be small.
- This new importance measure does not have the issue of
Model 3 as the composite event E12={E1,E2} would have an importance weight most likely higher than w1, or w2 alone. It can be imagined that -
-
- is most likely higher than w1 as it is most likely that P(C|E2)<P(C|E2, E3). Again the intuition here is that normally for a given user, the more he is advertised to, the more likely he is to convert.
- This model also addresses the issue of not considering event interactions (as mentioned for Model 1&2). Suppose E1 & E2 together is effective and drives a high P {FORMULA} but it is not the case for P)C|E1, E3) and P(C|E2, E3), it can be seen that based on (5) E1 &E2 will each get more credits than E3.
- A variant of
Model 4 can be -
- This weight becomes zero when P(C|E2, E3)=1.
- Overall, the Marginal Importance model in (5) seems to provide better results than the other models discussed and possesses the three desired properties proposed above.
- To generalize to the situation in which there are there are more than three events, say a converted user had K events, {E1,E2, . . . ,Ek}, the credit weight for Ej(j=1, . . . , K) would be
-
- where {E1,E2, . . . ,EK} \Ej means the subset of {E1,E2, . . . ,EK} without Ej
- The definition of events may vary from implementation to implementation. For example, E1 could represent a user seeing one or more impressions from a specific campaign; or a user seeing one or more impressions from a specific campaign more than two weeks ago; or a user seeing exactly two impressions from a specific campaign in the last day; or a user seeing one or more impressions on a specific site in the last day; etc.
- As can be appreciated, the list of possible definitions can quickly become intractable. The question is which definitions make more sense than others for a particular implementation and how to combine attribution results if one were to run attribution analysis with different event definitions.
- It may be desirable to define an event as specifically as possible; e.g., a user seeing exactly n impressions from campaign x with creative y on site z exactly m days ago. However, defining events at that deep level of granularity may encounter data sparsity—often there is not enough data to robustly derive the conditional probabilities described in the previous section. It may sound counterintuitive as the system easily collects billions of impressions and hundreds of millions of users every month from a large advertiser. However, not many users would share the same event of “seeing exactly n impressions from campaign x with creative y on site z exactly m days ago”. When the number of users is small, there would be low confidence in the conditional probabilities estimated.
- To increase confidence levels, one can define events at a less granular level such as the campaign level. There are likely a lot of (both converted and non-converting) users sharing the event of “seeing at least one impression from campaign x”, making the estimates at campaign level more robust. However, if there are only estimates at the campaign level, it does not help to attribute conversion credits across different sites, different frequency or recency values for the same campaign.
- In some embodiments, an attribution analysis may be run at many different granularity levels and then combined based on confidence values of different estimates. One technique for this task is “hierarchical Bayesian shrinkage.” The goal is to get as robust as possible an estimate at the most granular level. One way to address data sparsity at the granular level is to borrow information (or estimates) from lower granularity levels.
- In some embodiments, different levels can be arranged into a
hierarchy 300 like the one shown inFIG. 3 . In particular, shown areparent nodes campaign 302 andsite 304.Campaign node 302 is less granular and a parent to the nodes at the next most granular level, campaign+frequency 306 and campaign+recency 308. Thenodes - Likewise,
parent node site 304 is parent to site+frequency 312 and site+frequency node 314 which, in turn, are parents to site+frequency+recency node 316.Nodes - The attribution weight for a given event can be calculated for every node in the hierarchy and combined based on the confidence of each calculation. Confidence can be a function of the amount of data (i.e., the number of users) used to estimate the conditional probabilities. For example, a reasonable confidence function is the sigmoid function
-
- where n is the number of users, and μ and α are adjustable parameters. The parameter μ determines when confidence becomes 0.5 and α controls how fast the confidence grows with n.
- One way of combining the attribution weights estimated at different granularity levels is to take a confidence-weighted average across different levels. That is,
-
Σ1 g 1 w 1/Σ1 g 1, - where w1 is the attribution weight at level l and g1 is the confidence at level l. This effectively shrinks the (less robust) estimate at the most granular level towards (more robust) estimates at less granular levels, thus the name of “shrinkage”. In statistical terms, it is a tradeoff between bias and variance. At more granular levels, the estimates have lower bias but higher variance; at less granular levels, the estimates have lower variance (i.e., more robust) but higher bias. It will be appreciated that the actual equation may vary somewhat from implementation to implementation. For example, one embodiment may add a level-dependent weight that is fixed for each level to reflect prior knowledge about the importance of difference levels. That is, if enough data can be had at a campaign+recency level, one might want to give more weight to that level than to a less granular (e.g., campaign) level.
-
FIG. 4 is a flowchart illustrating operation of embodiments of the invention for generating fractional attribution results. - In a
step 402, conversions and events are defined. As noted above, in some embodiments, a conversion is a desired activity, such as a user purchase of an advertiser's product or service. An event can be one or more user-defined events or sequences of events. - In a
step 404, for each event definition (i.e., a particular granularity level), event sets for each user/conversion are created. This is essentially to arrange events by user and conversion. For each incidence of the conversion, this step may include listing all the event item exposures the user had prior to the conversion. Events are defined and tracked from the raw impression/click/conversion data obtained from the ad tags and page tags or log files or other data collected. - In a
step 406, for each event definition, create event subsets that need counts. That is, for each event set of size K (that associates with a conversion), generate K−1 event subsets as explained above. - In a
step 408, for each event definition, and for each event subset generated, count the number of converted users and number of non-converting users and use the ratio between those two as the basis for computing attribution weights. The total user counts may also be used as the basis for computing confidence as described above. - In a
step 410, for each event definition, populate the attribution weights down to the most granular event level, i.e., individual impressions or clicks. Depending on the event definition, each event may map to one or more impressions/clicks and the attribution weight computed for the event will be evenly distributed down to individual impressions/clicks. For example, if events are defined by a campaign+recency, an event (campaign x+3 days ago) gets a weight of 0.6 and it corresponds to 10 impressions on that day, then each of those 10 impressions would get a weight of 0.06. - Finally, in a
step 410, combine the attribution weights from different event definitions (i.e., different granularity levels) using, for example, the hierarchical Bayesian shrinkage method described above. - In some embodiments,
step 406—getting the user counts for each event subset—is computationally intensive. There can be hundreds of millions of users and hundreds of thousands of subsets. Each user is represented by an event set (all the events the user has had). The basic operation is, for each user and each subset, to determine if the user's event set contains the subset of interest (for which we want to get user counts). - One efficient way of doing the counting is to determine, for each user, which n events he has seen, and to define (n−1) subsets. For example, if he has seen events E1, E2, E3, then the subsets are defined as follows:
- S1 E1, E2
- S2 E1, E3
- S3 E2, E3
- For each event in any of the subsets, keep track of the list of the indexes of the subsets that contain the item.
- Then, for each user, go through each event in the user's event set and add all the subset indexes to a hash and keep track of the counts. For example, for event E1, add the subset indexes of S1 and S2 to a hash; for event E2, add the subset indexes of S1 and S3 to a hash; and for event E3, add the subset indexes of S2 and S3 to a hash. If the hash count of a subset index equals the length of the subset, increase the user count for a subset.
- These steps can be performed for both converted users and non-converting users, separately, to obtain the counts. Further, these steps can be easily parallelized in practice.
- An additional simplification may be made by noticing that most of the users are non-converting users. As such, a sample of the non-converting users may be taken to reduce the computation. Experiments have shown that using a 10% sample of non-converting users seems to generate roughly the same attribution weights vs. using all users' data.
- The process of shortcut counting of converting and nonconverting users is shown below by way of an eight event example:
- Shown in Table 1 below are exemplary event data (Each row in this example is a user event sequence; E1-E8 are eight events to be assigned conversion credits; C/NC stands for conversion/no conversion):
-
TABLE 1 E1 E2 E3 C E1 E2 E5 NC E3 E4 E5 C E1 E3 E4 E5 NC E1 E2 E6 C E3 E4 E5 E6 C E1 E5 E6 E7 C E1 E2 E4 E6 E7 NC E2 E3 E4 E7 NC E1 E2 E3 E5 E7 NC E1 E3 E5 E6 E8 NC E2 E6 NC - For each converted user, generate all leave-one-out subsequences. For example, from the first converted user, one gets {E1, E2}, {E2, E3}, and {E1 E3}.
- Next, merge the sub-sequences from all converted users. For example, from the four converted users, one gets the following 12 sub-sequences, where the second column is an index assigned to the sub-sequences:
-
TABLE 2 {E1, E2}, 1 {E2, E3}, 2 {E1, E3}, 3 {E3, E4}, 4 {E4, E5}, 5 {E3, E5}, 6 {E1, E6}, 7 {E2, E6}, 8 {E1, E5, E6}, 9 {E1, E5, E7}, 10 {E1, E6, E7}, 11 {E5, E6, E7}, 12 - For each sub-sequence S, count the number of converted users (nconv) and number of non-converting users (nnonconv) that have the sub-sequence and compute the conditional probability
-
- (the
extra count - To get the counts (nconv and nnonconv), do the following:
-
- For each event, build an inverted index for each event that appeared in any converted user sequence, which stores the indexes of the sub-sequences that contain the event.
-
TABLE 3 E1 {1, 3, 7, 9, 10, 11} E2 {1, 2, 8} E3 {2, 3, 4, 6} E4 {4, 5} E5 {5, 6, 9, 10, 12} E6 {7, 8, 9, 11, 12} E7 {10, 11, 12} - For each user sequence in Table 1, use the inverted index to determine which sub-sequences in Table 2 are subsets of the user sequence, i.e., for which sub-sequences one should increment nconv and/or nnonconv. That is, for the first converted user sequence {E1E2E3→C},
-
- generate the following list from the inverted index Table 3: {1,3,7,9,10,11; 1,2,8; 2,3,4,6} and then the sub-sequence counts (number of times appearing in the list)
-
TABLE 4 1:2 ✓ 2:2 ✓ 3:2 ✓ 4:1 x 6:1 x 7:1 x 8:1 x 9:1 x 10:1 x 11:1 x -
- where the last column indicates whether each sub-sequence is a subset of the user sequence (by comparing the counts in the second column to the length of the sub-sequence; e.g.,
sequence 1 has a count of 2 in Table 4 and a length of 2 as seen in Table 2). Therefore, by going through, the user sequence {E1E2E3→C}, it was determined that one should increase nconv forsub-sequence
- where the last column indicates whether each sub-sequence is a subset of the user sequence (by comparing the counts in the second column to the length of the sub-sequence; e.g.,
- Results from operation of attribution modeling according to some embodiments will be discussed by way of example below.
-
FIG. 5 shows attribution weights for a particular user with six impression events before a conversion. The six impressions (imp_1, imp_2, . . . imp_6) are arranged in temporal order. The last-click model assigns all credit to imp_6 whereas an even attribution model assign ⅙ credit to each of the six events. The next two rows show the results of fractional attribution model at campaign level and campaign+frequency level, respectively. In this case, there are four event items for both of those levels but the weights are different as one takes into account frequency in the event definition and the other does not. - For simplicity, results for many other levels are omitted and in the last row the final fractional attribution results based on applying hierarchical Bayesian shrinkage to combine the results from all different levels are shown.
- After this is done for every conversion, the result is a weight for each impression/click event (i.e., at the most granular level). These final weights can then be rolled up along different dimensions for reporting. Common dimensions of interest include campaign, site, creative, etc.
-
FIG. 6 compares the fractional model with the last-click model and even attribution model, after rolling up the attribution weights to campaign level. Campaign IDs are shown on the x-axis and relative difference between models on the y-axis. For example, for campaign ID 214383 (highlighted in the box), the fractional attribution model assigns to it 12% less credit than last-click model does, but 20% more than even model does. -
FIG. 7 shows some examples of the cost per conversion metrics based on attribution results. In accordance with embodiments of the invention, the cost numbers based on fractional attribution models will be more accurate and can help make better business decisions regarding whether to increase or decrease spend on a particular campaign. - Although the invention has been described with respect to specific embodiments thereof, these embodiments are merely illustrative, and not restrictive of the invention. The description herein of illustrated embodiments of the invention, including the description in the Abstract and Summary, is not intended to be exhaustive or to limit the invention to the precise forms disclosed herein (and in particular, the inclusion of any particular embodiment, feature or function within the Abstract or Summary is not intended to limit the scope of the invention to such embodiment, feature or function). Rather, the description is intended to describe illustrative embodiments, features and functions in order to provide a person of ordinary skill in the art context to understand the invention without limiting the invention to any particularly described embodiment, feature or function, including any such embodiment feature or function described in the Abstract or Summary. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes only, various equivalent modifications are possible within the spirit and scope of the invention, as those skilled in the relevant art will recognize and appreciate. As indicated, these modifications may be made to the invention in light of the foregoing description of illustrated embodiments of the invention and are to be included within the spirit and scope of the invention. Thus, while the invention has been described herein with reference to particular embodiments thereof, a latitude of modification, various changes and substitutions are intended in the foregoing disclosures, and it will be appreciated that in some instances some features of embodiments of the invention will be employed without a corresponding use of other features without departing from the scope and spirit of the invention as set forth. Therefore, many modifications may be made to adapt a particular situation or material to the essential scope and spirit of the invention.
- Reference throughout this specification to “one embodiment”, “an embodiment”, or “a specific embodiment” or similar terminology means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment and may not necessarily be present in all embodiments. Thus, respective appearances of the phrases “in one embodiment”, “in an embodiment”, or “in a specific embodiment” or similar terminology in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore, the particular features, structures, or characteristics of any particular embodiment may be combined in any suitable manner with one or more other embodiments. It is to be understood that other variations and modifications of the embodiments described and illustrated herein are possible in light of the teachings herein and are to be considered as part of the spirit and scope of the invention.
- Reference throughout this specification to “one embodiment”, “an embodiment”, or “a specific embodiment” or similar terminology means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment and may not necessarily be present in all embodiments. Thus, respective appearances of the phrases “in one embodiment”, “in an embodiment”, or “in a specific embodiment” or similar terminology in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore, the particular features, structures, or characteristics of any particular embodiment may be combined in any suitable manner with one or more other embodiments. It is to be understood that other variations and modifications of the embodiments described and illustrated herein are possible in light of the teachings herein and are to be considered as part of the spirit and scope of the invention.
- In the description herein, numerous specific details are provided, such as examples of components and/or methods, to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that an embodiment may be able to be practiced without one or more of the specific details, or with other apparatus, systems, assemblies, methods, components, materials, parts, and/or the like. In other instances, well-known structures, components, systems, materials, or operations are not specifically shown or described in detail to avoid obscuring aspects of embodiments of the invention. While the invention may be illustrated by using a particular embodiment, this is not and does not limit the invention to any particular embodiment and a person of ordinary skill in the art will recognize that additional embodiments are readily understandable and are a part of this invention.
- Any suitable programming language can be used to implement the routines, methods or programs of embodiments of the invention described herein, including C, C++, Java, assembly language, etc. Different programming techniques can be employed such as procedural or object oriented. Any particular routine can execute on a single computer processing device or multiple computer processing devices, a single computer processor or multiple computer processors. Data may be stored in a single storage medium or distributed through multiple storage mediums, and may reside in a single database or multiple databases (or other data storage techniques). Although the steps, operations, or computations may be presented in a specific order, this order may be changed in different embodiments. In some embodiments, to the extent multiple steps are shown as sequential in this specification, some combination of such steps in alternative embodiments may be performed at the same time. The sequence of operations described herein can be interrupted, suspended, or otherwise controlled by another process, such as an operating system, kernel, etc. The routines can operate in an operating system environment or as stand-alone routines. Functions, routines, methods, steps and operations described herein can be performed in hardware, software, firmware or any combination thereof.
- Embodiments described herein can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium, such as a computer-readable medium, as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in the various embodiments. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the invention.
- It is also within the spirit and scope of the invention to implement in software programming or code an of the steps, operations, methods, routines or portions thereof described herein, where such software programming or code can be stored in a computer-readable medium and can be operated on by a processor to permit a computer to perform any of the steps, operations, methods, routines or portions thereof described herein. The invention may be implemented by using software programming or code in one or more general purpose digital computers, by using application specific integrated circuits, programmable logic devices, field programmable gate arrays, optical, chemical, biological, quantum or nanoengineered systems, components and mechanisms may be used. In general, the functions of the invention can be achieved by any means as is known in the art. For example, distributed, or networked systems, components and circuits can be used. In another example, communication or transfer (or otherwise moving from one place to another) of data may be wired, wireless, or by any other means.
- A “computer-readable medium” may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, system or device. The computer readable medium can be, by way of example only but not by limitation, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, system, device, propagation medium, or computer memory. Such computer-readable medium shall generally be machine readable and include software programming or code that can be human readable (e.g., source code) or machine readable (e.g., object code).
- A “processor” includes any, hardware system, mechanism or component that processes data, signals or other information. A processor can include a system with a general-purpose central processing unit, multiple processing units, dedicated circuitry for achieving functionality, or other systems. Processing need not be limited to a geographic location, or have temporal limitations. For example, a processor can perform its functions in “real-time,” “offline,” in a “batch mode,” etc. Portions of processing can be performed at different times and at different locations, by different (or the same) processing systems.
- It will also be appreciated that one or more of the elements depicted in the drawings/figures can also be implemented in a more separated or integrated manner, or even removed or rendered as inoperable in certain cases, as is useful in accordance with a particular application. Additionally, any signal arrows in the drawings/Figures should be considered only as exemplary, and not limiting, unless otherwise specifically noted.
- Furthermore, the term “or” as used herein is generally intended to mean “and/or” unless otherwise indicated. As used herein, including the claims that follow, a term preceded by “a” or “an” (and “the” when antecedent basis is “a” or “an”) includes both singular and plural of such term, unless clearly indicated within the claim otherwise (i.e., that the reference “a” or “an” clearly indicates only the singular or only the plural). Also, as used in the description herein and throughout the claims that follow, the meaning of “in” includes “in” and “on” unless the context clearly dictates otherwise. The scope of the present disclosure should be determined by the following claims and their legal equivalents.
- Although the foregoing specification describes specific embodiments, numerous changes in the details of the embodiments disclosed herein and additional embodiments will be apparent to, and may be made by, persons of ordinary skill in the art having reference to this description. In this context, the specification and figures are to be regarded in an illustrative rather than a restrictive sense, and all such modifications are intended to be included within the scope of this disclosure. Accordingly, the scope of the present disclosure should be determined by the following claims and their legal equivalents.
Claims (20)
1. A method comprising:
receiving, by one or more processors, attribution data from a plurality of client devices responsive to ad tags executing on each of the plurality of client devices, the attribution data of each of the plurality of client devices associated with a plurality of event items;
receiving, by one or more processors, a plurality of defined events and a defined conversion, the plurality of defined events defined across a plurality of granularity levels;
determining, by one or more processors, a plurality of subsets of events for a sequence of event items based on the plurality of defined events, the defined conversion, and the attribution data of the plurality of client devices, each of the plurality of subsets of events corresponding to a respective set of event items of the sequence of event items that exclude one of the event items of the sequence of event items;
determining, by one or more processors, a number of conversions and a number of remaining event items for each of the plurality of subsets of event items;
determining, by one or more processors, an attribution weight for each of the plurality of defined events defined across the plurality of granularity levels based, at least in part, on a ratio of the determined number of conversions to the determined number of remaining event items for each of the plurality of subset of event items;
determining, by one or more processors, a credit weight for each of the plurality of defined events based on the attribution weights.
2. The method of claim 1 , wherein the determined credit weight for each of the plurality of defined events is a function of a confidence-weighted average across the plurality of granularity levels.
3. The method of claim 1 , further comprising:
determining a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
determining a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
4. The method of claim 1 , wherein the determined credit weight for a defined event of the plurality of defined events is proportional to a probability of conversion for a set of defined events of the plurality of defined events that exclude the defined event.
5. The method of claim 1 , wherein the determined credit weight for a defined event of the plurality of defined events is proportional to a function of:
a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
6. The method of claim 1 , wherein the plurality of granularity levels form a hierarchy.
7. The method of claim 6 , wherein the determined credit weight for each of the plurality of defined events is based on the attribution weights for each of the plurality of defined events defined across the plurality of granularity levels and confidence values for each of the plurality of granularity levels.
8. A computer readable storage device storing instructions that, when executed by one or more processors, cause the one or more processors to perform operations comprising:
receiving attribution data from a plurality of client devices responsive to ad tags executing on each of the plurality of client devices;
defining a plurality of events and a conversion, the plurality of defined events defined across a plurality of granularity levels;
determining a plurality of subsets of events for a sequence of event items based on the plurality of defined events, the defined conversion, and the attribution data, each of the plurality of subsets of events corresponding to a respective set of event items of the sequence of event items that exclude one of the event items of the sequence of event items;
determining a number of conversions and a number of remaining event items for each of the plurality of subsets of event items;
determining an attribution weight for each of the plurality of defined events defined across the plurality of granularity levels based, at least in part, on a ratio of the determined number of conversions to the determined number of remaining event items for each of the plurality of subset of event items; and
determining a credit weight for each of the plurality of defined events based on the attribution weights.
9. The computer readable storage device of claim 8 , wherein the determined credit weight for each of the plurality of defined events is a function of a confidence-weighted average across the plurality of granularity levels.
10. The computer readable storage device of claim 8 storing instructions that, when executed by one or more processors, cause the one or more processors to perform operations further comprising:
determining a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
determining a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
11. The computer readable storage device of claim 8 , wherein a credit weight for a defined event of the plurality of defined events is proportional to a probability of conversion for a set of defined events of the plurality of defined events that exclude the defined event.
12. The computer readable storage device of claim 8 , wherein the determined credit weight for a defined event of the plurality of defined events is proportional to a function of:
a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
13. The computer readable storage device of claim 8 , wherein the plurality of granularity levels form a hierarchy.
14. The computer readable storage device of claim 13 , wherein the determined credit weight for each of the plurality of defined events is based on the attribution weights for each of the plurality of defined events defined across the plurality of granularity levels and confidence values for each of the plurality of granularity levels.
15. A system comprising:
one or more processors; and one or more storage devices storing instructions that, when executed by the one or more processors, cause the one or more processors to perform operations comprising:
receiving attribution data from a plurality of client devices responsive to ad tags executing on each of the plurality of client devices;
defining a plurality of events and a conversion, the plurality of defined events defined across a plurality of granularity levels;
determining a plurality of subsets of events for a sequence of event items based on the plurality of defined events, the defined conversion, and attribution data, each of the plurality of subsets of events corresponding to a respective set of event items of the sequence of event items that exclude one of the event items of the sequence of event items;
determining a number of conversions and a number of remaining event items for each of the plurality of subsets of event items;
determining an attribution weight for each of the plurality of defined events defined across the plurality of granularity levels based, at least in part, on a ratio of the determined number of conversions to the determined number of remaining event items for each of the plurality of subset of event items; and
determining a credit weight for each of the plurality of defined events based on the attribution weights.
16. The system of claim 15 , wherein the determined credit weight for each of the plurality of defined events is a function of a confidence-weighted average across the plurality of granularity levels.
17. The system of claim 15 , wherein the one or more storage devices stores instructions that, when executed by the one or more processors, cause the one or more processors to perform operations further comprising:
determining a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
determining a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
18. The system of claim 15 , wherein the determined credit weight for a defined event of the plurality of defined events is proportional to a probability of conversion for a set of defined events of the plurality of defined events that exclude the defined event.
19. The system of claim 15 , wherein the determined credit weight for a defined event of the plurality of defined events is proportional to a function of:
a first number of sequences of event items that converted and that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items; and
a second number of sequences of event items that included a set of defined events excluding the defined event of the plurality of defined events as event items of the respective sequence of event items.
20. The system of claim 15 , wherein the plurality of granularity levels form a hierarchy, and wherein the determined credit weight for each of the plurality of defined events is based on the attribution weights for each of the plurality of defined events defined across the plurality of granularity levels and confidence values for each of the plurality of granularity levels.
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/878,759 US20160027041A1 (en) | 2011-08-01 | 2015-10-08 | System, method and computer program product for fractional attribution using online advertising information |
US16/040,108 US20180349949A1 (en) | 2011-08-01 | 2018-07-19 | System, method and computer program product for fractional attribution using online advertising information |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201113195753A | 2011-08-01 | 2011-08-01 | |
US14/878,759 US20160027041A1 (en) | 2011-08-01 | 2015-10-08 | System, method and computer program product for fractional attribution using online advertising information |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US201113195753A Continuation | 2011-08-01 | 2011-08-01 |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/040,108 Continuation US20180349949A1 (en) | 2011-08-01 | 2018-07-19 | System, method and computer program product for fractional attribution using online advertising information |
Publications (1)
Publication Number | Publication Date |
---|---|
US20160027041A1 true US20160027041A1 (en) | 2016-01-28 |
Family
ID=55167048
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/878,759 Abandoned US20160027041A1 (en) | 2011-08-01 | 2015-10-08 | System, method and computer program product for fractional attribution using online advertising information |
US16/040,108 Abandoned US20180349949A1 (en) | 2011-08-01 | 2018-07-19 | System, method and computer program product for fractional attribution using online advertising information |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/040,108 Abandoned US20180349949A1 (en) | 2011-08-01 | 2018-07-19 | System, method and computer program product for fractional attribution using online advertising information |
Country Status (1)
Country | Link |
---|---|
US (2) | US20160027041A1 (en) |
Cited By (55)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140257972A1 (en) * | 2012-06-08 | 2014-09-11 | Anto Chittilappilly | Method, computer readable medium and system for determining true scores for a plurality of touchpoint encounters |
US20160055519A1 (en) * | 2014-08-22 | 2016-02-25 | Anto Chittilappilly | Apportioning a media campaign contribution to a media channel in the presence of audience saturation |
US20160189205A1 (en) * | 2014-12-30 | 2016-06-30 | Anto Chittilappilly | Validation of bottom-up attributions to channels in an advertising campaign |
US20160210656A1 (en) * | 2014-12-31 | 2016-07-21 | Anto Chittilappilly | System for marketing touchpoint attribution bias correction |
CN107888635A (en) * | 2016-09-30 | 2018-04-06 | 中国电信股份有限公司 | Method and apparatus for realizing mobile edge storage |
US20190279236A1 (en) * | 2015-09-18 | 2019-09-12 | Mms Usa Holdings Inc. | Micro-moment analysis |
US10475067B2 (en) * | 2016-08-11 | 2019-11-12 | Adobe Inc. | Attributing contributions of digital marketing campaigns towards conversions |
US10789612B2 (en) | 2015-09-18 | 2020-09-29 | Mms Usa Holdings Inc. | Universal identification |
US10896182B2 (en) | 2017-09-25 | 2021-01-19 | Splunk Inc. | Multi-partitioning determination for combination operations |
US10958747B2 (en) | 2017-08-24 | 2021-03-23 | Google Llc | Digital component transmission |
US10956415B2 (en) | 2016-09-26 | 2021-03-23 | Splunk Inc. | Generating a subquery for an external data system using a configuration file |
US10977260B2 (en) | 2016-09-26 | 2021-04-13 | Splunk Inc. | Task distribution in an execution node of a distributed execution environment |
US10984044B1 (en) | 2016-09-26 | 2021-04-20 | Splunk Inc. | Identifying buckets for query execution using a catalog of buckets stored in a remote shared storage system |
US11003714B1 (en) | 2016-09-26 | 2021-05-11 | Splunk Inc. | Search node and bucket identification using a search node catalog and a data store catalog |
US11010435B2 (en) | 2016-09-26 | 2021-05-18 | Splunk Inc. | Search service for a data fabric system |
US11023463B2 (en) | 2016-09-26 | 2021-06-01 | Splunk Inc. | Converting and modifying a subquery for an external data system |
US11106734B1 (en) * | 2016-09-26 | 2021-08-31 | Splunk Inc. | Query execution using containerized state-free search nodes in a containerized scalable environment |
US11126632B2 (en) | 2016-09-26 | 2021-09-21 | Splunk Inc. | Subquery generation based on search configuration data from an external data system |
US11151137B2 (en) | 2017-09-25 | 2021-10-19 | Splunk Inc. | Multi-partition operation in combination operations |
US11163758B2 (en) | 2016-09-26 | 2021-11-02 | Splunk Inc. | External dataset capability compensation |
US11222066B1 (en) | 2016-09-26 | 2022-01-11 | Splunk Inc. | Processing data using containerized state-free indexing nodes in a containerized scalable environment |
US11232100B2 (en) | 2016-09-26 | 2022-01-25 | Splunk Inc. | Resource allocation for multiple datasets |
US11243963B2 (en) | 2016-09-26 | 2022-02-08 | Splunk Inc. | Distributing partial results to worker nodes from an external data system |
US11250056B1 (en) | 2016-09-26 | 2022-02-15 | Splunk Inc. | Updating a location marker of an ingestion buffer based on storing buckets in a shared storage system |
US11269939B1 (en) | 2016-09-26 | 2022-03-08 | Splunk Inc. | Iterative message-based data processing including streaming analytics |
US11281706B2 (en) | 2016-09-26 | 2022-03-22 | Splunk Inc. | Multi-layer partition allocation for query execution |
US11294941B1 (en) | 2016-09-26 | 2022-04-05 | Splunk Inc. | Message-based data ingestion to a data intake and query system |
US11314753B2 (en) | 2016-09-26 | 2022-04-26 | Splunk Inc. | Execution of a query received from a data intake and query system |
US11321321B2 (en) | 2016-09-26 | 2022-05-03 | Splunk Inc. | Record expansion and reduction based on a processing task in a data intake and query system |
US11334543B1 (en) | 2018-04-30 | 2022-05-17 | Splunk Inc. | Scalable bucket merging for a data intake and query system |
US20220222594A1 (en) * | 2021-01-12 | 2022-07-14 | Adobe Inc. | Facilitating analysis of attribution models |
US11416528B2 (en) | 2016-09-26 | 2022-08-16 | Splunk Inc. | Query acceleration data store |
US11442935B2 (en) | 2016-09-26 | 2022-09-13 | Splunk Inc. | Determining a record generation estimate of a processing task |
US11461334B2 (en) | 2016-09-26 | 2022-10-04 | Splunk Inc. | Data conditioning for dataset destination |
US11494380B2 (en) | 2019-10-18 | 2022-11-08 | Splunk Inc. | Management of distributed computing framework components in a data fabric service system |
US11550847B1 (en) | 2016-09-26 | 2023-01-10 | Splunk Inc. | Hashing bucket identifiers to identify search nodes for efficient query execution |
US11562023B1 (en) | 2016-09-26 | 2023-01-24 | Splunk Inc. | Merging buckets in a data intake and query system |
US11567993B1 (en) | 2016-09-26 | 2023-01-31 | Splunk Inc. | Copying buckets from a remote shared storage system to memory associated with a search node for query execution |
US11580107B2 (en) | 2016-09-26 | 2023-02-14 | Splunk Inc. | Bucket data distribution for exporting data to worker nodes |
US11586627B2 (en) | 2016-09-26 | 2023-02-21 | Splunk Inc. | Partitioning and reducing records at ingest of a worker node |
US11586692B2 (en) | 2016-09-26 | 2023-02-21 | Splunk Inc. | Streaming data processing |
US11593377B2 (en) | 2016-09-26 | 2023-02-28 | Splunk Inc. | Assigning processing tasks in a data intake and query system |
US11599541B2 (en) | 2016-09-26 | 2023-03-07 | Splunk Inc. | Determining records generated by a processing task of a query |
US20230071453A1 (en) * | 2020-01-21 | 2023-03-09 | Huawei Technologies Co., Ltd. | Advertisement Attribution Method and Device |
US11604795B2 (en) | 2016-09-26 | 2023-03-14 | Splunk Inc. | Distributing partial results from an external data system between worker nodes |
US11615104B2 (en) | 2016-09-26 | 2023-03-28 | Splunk Inc. | Subquery generation based on a data ingest estimate of an external data system |
US11615087B2 (en) | 2019-04-29 | 2023-03-28 | Splunk Inc. | Search time estimate in a data intake and query system |
US11620336B1 (en) | 2016-09-26 | 2023-04-04 | Splunk Inc. | Managing and storing buckets to a remote shared storage system based on a collective bucket size |
US11663227B2 (en) | 2016-09-26 | 2023-05-30 | Splunk Inc. | Generating a subquery for a distinct data intake and query system |
US11704313B1 (en) | 2020-10-19 | 2023-07-18 | Splunk Inc. | Parallel branch operation using intermediary nodes |
US11715051B1 (en) | 2019-04-30 | 2023-08-01 | Splunk Inc. | Service provider instance recommendations using machine-learned classifications and reconciliation |
US11860940B1 (en) | 2016-09-26 | 2024-01-02 | Splunk Inc. | Identifying buckets for query execution using a catalog of buckets |
US11874691B1 (en) | 2016-09-26 | 2024-01-16 | Splunk Inc. | Managing efficient query execution including mapping of buckets to search nodes |
US11922222B1 (en) | 2020-01-30 | 2024-03-05 | Splunk Inc. | Generating a modified component for a data intake and query system using an isolated execution environment image |
US11921672B2 (en) | 2017-07-31 | 2024-03-05 | Splunk Inc. | Query execution at a remote heterogeneous data store of a data fabric service |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8359229B2 (en) * | 2007-09-28 | 2013-01-22 | Teradata Us, Inc. | Methods and systems for forecasting product demand during promotional events using statistical confidence filters |
CA2795128A1 (en) * | 2010-03-31 | 2011-10-06 | Mediamath, Inc. | Systems and methods for integration of a demand side platform |
US9183562B2 (en) * | 2012-06-08 | 2015-11-10 | Visual Iq, Inc. | Method and system for determining touchpoint attribution |
-
2015
- 2015-10-08 US US14/878,759 patent/US20160027041A1/en not_active Abandoned
-
2018
- 2018-07-19 US US16/040,108 patent/US20180349949A1/en not_active Abandoned
Cited By (70)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140257972A1 (en) * | 2012-06-08 | 2014-09-11 | Anto Chittilappilly | Method, computer readable medium and system for determining true scores for a plurality of touchpoint encounters |
US20160055519A1 (en) * | 2014-08-22 | 2016-02-25 | Anto Chittilappilly | Apportioning a media campaign contribution to a media channel in the presence of audience saturation |
US20160189205A1 (en) * | 2014-12-30 | 2016-06-30 | Anto Chittilappilly | Validation of bottom-up attributions to channels in an advertising campaign |
US20160210656A1 (en) * | 2014-12-31 | 2016-07-21 | Anto Chittilappilly | System for marketing touchpoint attribution bias correction |
US20190279236A1 (en) * | 2015-09-18 | 2019-09-12 | Mms Usa Holdings Inc. | Micro-moment analysis |
US20190340629A1 (en) * | 2015-09-18 | 2019-11-07 | Mms Usa Holdings Inc. | Micro-moment analysis |
US10528959B2 (en) * | 2015-09-18 | 2020-01-07 | Mms Usa Holdings Inc. | Micro-moment analysis |
US10789612B2 (en) | 2015-09-18 | 2020-09-29 | Mms Usa Holdings Inc. | Universal identification |
US10475067B2 (en) * | 2016-08-11 | 2019-11-12 | Adobe Inc. | Attributing contributions of digital marketing campaigns towards conversions |
US11321321B2 (en) | 2016-09-26 | 2022-05-03 | Splunk Inc. | Record expansion and reduction based on a processing task in a data intake and query system |
US11442935B2 (en) | 2016-09-26 | 2022-09-13 | Splunk Inc. | Determining a record generation estimate of a processing task |
US10984044B1 (en) | 2016-09-26 | 2021-04-20 | Splunk Inc. | Identifying buckets for query execution using a catalog of buckets stored in a remote shared storage system |
US11003714B1 (en) | 2016-09-26 | 2021-05-11 | Splunk Inc. | Search node and bucket identification using a search node catalog and a data store catalog |
US11010435B2 (en) | 2016-09-26 | 2021-05-18 | Splunk Inc. | Search service for a data fabric system |
US11023539B2 (en) | 2016-09-26 | 2021-06-01 | Splunk Inc. | Data intake and query system search functionality in a data fabric service system |
US11023463B2 (en) | 2016-09-26 | 2021-06-01 | Splunk Inc. | Converting and modifying a subquery for an external data system |
US11080345B2 (en) | 2016-09-26 | 2021-08-03 | Splunk Inc. | Search functionality of worker nodes in a data fabric service system |
US11106734B1 (en) * | 2016-09-26 | 2021-08-31 | Splunk Inc. | Query execution using containerized state-free search nodes in a containerized scalable environment |
US11126632B2 (en) | 2016-09-26 | 2021-09-21 | Splunk Inc. | Subquery generation based on search configuration data from an external data system |
US11966391B2 (en) | 2016-09-26 | 2024-04-23 | Splunk Inc. | Using worker nodes to process results of a subquery |
US11874691B1 (en) | 2016-09-26 | 2024-01-16 | Splunk Inc. | Managing efficient query execution including mapping of buckets to search nodes |
US11860940B1 (en) | 2016-09-26 | 2024-01-02 | Splunk Inc. | Identifying buckets for query execution using a catalog of buckets |
US11797618B2 (en) | 2016-09-26 | 2023-10-24 | Splunk Inc. | Data fabric service system deployment |
US11163758B2 (en) | 2016-09-26 | 2021-11-02 | Splunk Inc. | External dataset capability compensation |
US11176208B2 (en) | 2016-09-26 | 2021-11-16 | Splunk Inc. | Search functionality of a data intake and query system |
US11222066B1 (en) | 2016-09-26 | 2022-01-11 | Splunk Inc. | Processing data using containerized state-free indexing nodes in a containerized scalable environment |
US11232100B2 (en) | 2016-09-26 | 2022-01-25 | Splunk Inc. | Resource allocation for multiple datasets |
US11238112B2 (en) | 2016-09-26 | 2022-02-01 | Splunk Inc. | Search service system monitoring |
US11243963B2 (en) | 2016-09-26 | 2022-02-08 | Splunk Inc. | Distributing partial results to worker nodes from an external data system |
US11250056B1 (en) | 2016-09-26 | 2022-02-15 | Splunk Inc. | Updating a location marker of an ingestion buffer based on storing buckets in a shared storage system |
US11269939B1 (en) | 2016-09-26 | 2022-03-08 | Splunk Inc. | Iterative message-based data processing including streaming analytics |
US11281706B2 (en) | 2016-09-26 | 2022-03-22 | Splunk Inc. | Multi-layer partition allocation for query execution |
US11294941B1 (en) | 2016-09-26 | 2022-04-05 | Splunk Inc. | Message-based data ingestion to a data intake and query system |
US11314753B2 (en) | 2016-09-26 | 2022-04-26 | Splunk Inc. | Execution of a query received from a data intake and query system |
US10956415B2 (en) | 2016-09-26 | 2021-03-23 | Splunk Inc. | Generating a subquery for an external data system using a configuration file |
US11663227B2 (en) | 2016-09-26 | 2023-05-30 | Splunk Inc. | Generating a subquery for a distinct data intake and query system |
US11341131B2 (en) | 2016-09-26 | 2022-05-24 | Splunk Inc. | Query scheduling based on a query-resource allocation and resource availability |
US11636105B2 (en) | 2016-09-26 | 2023-04-25 | Splunk Inc. | Generating a subquery for an external data system using a configuration file |
US11392654B2 (en) | 2016-09-26 | 2022-07-19 | Splunk Inc. | Data fabric service system |
US11416528B2 (en) | 2016-09-26 | 2022-08-16 | Splunk Inc. | Query acceleration data store |
US10977260B2 (en) | 2016-09-26 | 2021-04-13 | Splunk Inc. | Task distribution in an execution node of a distributed execution environment |
US11461334B2 (en) | 2016-09-26 | 2022-10-04 | Splunk Inc. | Data conditioning for dataset destination |
US11620336B1 (en) | 2016-09-26 | 2023-04-04 | Splunk Inc. | Managing and storing buckets to a remote shared storage system based on a collective bucket size |
US11615104B2 (en) | 2016-09-26 | 2023-03-28 | Splunk Inc. | Subquery generation based on a data ingest estimate of an external data system |
US11550847B1 (en) | 2016-09-26 | 2023-01-10 | Splunk Inc. | Hashing bucket identifiers to identify search nodes for efficient query execution |
US11562023B1 (en) | 2016-09-26 | 2023-01-24 | Splunk Inc. | Merging buckets in a data intake and query system |
US11567993B1 (en) | 2016-09-26 | 2023-01-31 | Splunk Inc. | Copying buckets from a remote shared storage system to memory associated with a search node for query execution |
US11580107B2 (en) | 2016-09-26 | 2023-02-14 | Splunk Inc. | Bucket data distribution for exporting data to worker nodes |
US11586627B2 (en) | 2016-09-26 | 2023-02-21 | Splunk Inc. | Partitioning and reducing records at ingest of a worker node |
US11586692B2 (en) | 2016-09-26 | 2023-02-21 | Splunk Inc. | Streaming data processing |
US11593377B2 (en) | 2016-09-26 | 2023-02-28 | Splunk Inc. | Assigning processing tasks in a data intake and query system |
US11599541B2 (en) | 2016-09-26 | 2023-03-07 | Splunk Inc. | Determining records generated by a processing task of a query |
US11604795B2 (en) | 2016-09-26 | 2023-03-14 | Splunk Inc. | Distributing partial results from an external data system between worker nodes |
CN107888635A (en) * | 2016-09-30 | 2018-04-06 | 中国电信股份有限公司 | Method and apparatus for realizing mobile edge storage |
US11921672B2 (en) | 2017-07-31 | 2024-03-05 | Splunk Inc. | Query execution at a remote heterogeneous data store of a data fabric service |
US10958747B2 (en) | 2017-08-24 | 2021-03-23 | Google Llc | Digital component transmission |
US11500875B2 (en) | 2017-09-25 | 2022-11-15 | Splunk Inc. | Multi-partitioning for combination operations |
US11151137B2 (en) | 2017-09-25 | 2021-10-19 | Splunk Inc. | Multi-partition operation in combination operations |
US10896182B2 (en) | 2017-09-25 | 2021-01-19 | Splunk Inc. | Multi-partitioning determination for combination operations |
US11860874B2 (en) | 2017-09-25 | 2024-01-02 | Splunk Inc. | Multi-partitioning data for combination operations |
US11334543B1 (en) | 2018-04-30 | 2022-05-17 | Splunk Inc. | Scalable bucket merging for a data intake and query system |
US11720537B2 (en) | 2018-04-30 | 2023-08-08 | Splunk Inc. | Bucket merging for a data intake and query system using size thresholds |
US11615087B2 (en) | 2019-04-29 | 2023-03-28 | Splunk Inc. | Search time estimate in a data intake and query system |
US11715051B1 (en) | 2019-04-30 | 2023-08-01 | Splunk Inc. | Service provider instance recommendations using machine-learned classifications and reconciliation |
US11494380B2 (en) | 2019-10-18 | 2022-11-08 | Splunk Inc. | Management of distributed computing framework components in a data fabric service system |
US11875383B2 (en) * | 2020-01-21 | 2024-01-16 | Huawei Technologies Co., Ltd. | Advertisement attribution method and device |
US20230071453A1 (en) * | 2020-01-21 | 2023-03-09 | Huawei Technologies Co., Ltd. | Advertisement Attribution Method and Device |
US11922222B1 (en) | 2020-01-30 | 2024-03-05 | Splunk Inc. | Generating a modified component for a data intake and query system using an isolated execution environment image |
US11704313B1 (en) | 2020-10-19 | 2023-07-18 | Splunk Inc. | Parallel branch operation using intermediary nodes |
US20220222594A1 (en) * | 2021-01-12 | 2022-07-14 | Adobe Inc. | Facilitating analysis of attribution models |
Also Published As
Publication number | Publication date |
---|---|
US20180349949A1 (en) | 2018-12-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20180349949A1 (en) | System, method and computer program product for fractional attribution using online advertising information | |
US20160034948A1 (en) | System and method for fractional attribution utilizing user-level data and aggregate level data | |
US20180308123A1 (en) | System and method for fractional attribution utilizing aggregated advertising information | |
US10679260B2 (en) | Cross-device message touchpoint attribution | |
US8655695B1 (en) | Systems and methods for generating expanded user segments | |
US10699204B2 (en) | Knowledge discovery from belief networks | |
JP6254283B2 (en) | Method and system for creating a data-driven attribution model that assigns attribution achievements to multiple events | |
US20160210658A1 (en) | Determining touchpoint attributions in a segmented media campaign | |
US20160210657A1 (en) | Real-time marketing campaign stimuli selection based on user response predictions | |
US20140122245A1 (en) | Method for audience profiling and audience analytics | |
US8639575B2 (en) | Audience segment estimation | |
US20140351046A1 (en) | System and Method for Predicting an Outcome By a User in a Single Score | |
US11232473B2 (en) | Demographic prediction using aggregated labeled data | |
US20170337578A1 (en) | Dynamic media buy optimization using attribution-informed media buy execution feeds | |
US20160098735A1 (en) | Marketing channel attribution | |
US20160210656A1 (en) | System for marketing touchpoint attribution bias correction | |
US20150254709A1 (en) | System and Method for Attributing Engagement Score Over a Channel | |
CN102640179A (en) | Advertisee-history-based bid generation system and method for multi-channel advertising | |
KR20110116150A (en) | Conversion crediting | |
US20190080246A1 (en) | Systems and methods for generating a brand bayesian hierarchical model with a category bayesian hierarchical model | |
US20170046734A1 (en) | Enhancing touchpoint attribution accuracy using offline data onboarding | |
CN111095330B (en) | Machine learning method and system for predicting online user interactions | |
US10628503B2 (en) | Systems and methods for online web site lead generation service | |
US11538058B2 (en) | System and method for measuring the relative and absolute effects of advertising on behavior based events over time | |
US20110055004A1 (en) | Method and system for selecting and optimizing bid recommendation algorithms |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |