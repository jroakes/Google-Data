CN113168411A - Storage and structured searching of historical security data - Google Patents
Storage and structured searching of historical security data Download PDFInfo
- Publication number
- CN113168411A CN113168411A CN201980076506.1A CN201980076506A CN113168411A CN 113168411 A CN113168411 A CN 113168411A CN 201980076506 A CN201980076506 A CN 201980076506A CN 113168411 A CN113168411 A CN 113168411A
- Authority
- CN
- China
- Prior art keywords
- data
- event
- request
- culling
- ingestion
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2477—Temporal data queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
- G06F16/1834—Distributed file systems implemented based on peer-to-peer networks, e.g. gnutella
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/604—Tools and structures for managing or administering access control systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
Abstract
The method (500) includes ingesting event data (162) for a plurality of events obtained by different computing resources over a network (120). Each event is associated with a respective timestamp (164) and one or more ingestion attributes (166). The method includes identifying whether a corresponding event is associated with any custom index attribute (168) defined by the user. The method also includes indexing the corresponding event into the data store (150) as structured data (162b) based on the respective timestamp, the one or more ingestion attributes, and any identified custom index attributes. The method also includes culling any events of the event data in the data store for a time period that satisfies a culling time period threshold (322). The method also includes retrieving data associated with the time range, the ingestion attribute, or one of the custom index attributes from a data store.
Description
Technical Field
The present disclosure relates to a system for storage and structured searching of historical security data.
Background
Identity, access, data and resource security events continue to grow rapidly. Similarly, the amount of raw security signals available to be collected and analyzed also grows exponentially. These security signals are key resources that enterprises need to protect themselves from security breaches and downtime. This demand drives human analysts and safety engineers to increase efficiency and priority in handling the resource.
Disclosure of Invention
One aspect of the present disclosure provides a method comprising ingesting, by data processing hardware over a network, event data for a plurality of events obtained by a plurality of different computing resources in communication with the data processing hardware. The event data includes a respective timestamp for each event of the event data indicating a point in time when the event was obtained by one of the plurality of different computing resources. The event data further includes at least one ingestion attribute associated with each event of the event data, the at least one ingestion attribute satisfying ingestion criteria required to allow ingestion of related events. For each of a plurality of events of the event data, the method comprises: identifying, by the data processing hardware, whether the corresponding event is associated with any custom index attribute defined by a user for indexing events. The method also includes indexing, by the data processing hardware, the corresponding event into the data store as structured data based on the respective timestamp for the corresponding event, the at least one ingestion attribute associated with the corresponding event, and any identified custom index attributes associated with the corresponding event. The method also includes culling, by data processing hardware, any of the event data that has been indexed into the data store as structured data for a time period that satisfies a culling time period threshold. The method also includes receiving, at the data processing hardware, a retrieval request for structured data stored in the data store, the retrieval request requesting structured data associated with at least one of a time range specified by the retrieval request, one or more ingestion attributes specified by the retrieval request, or one or more custom index attributes specified by the retrieval request. The method also includes retrieving, by the data processing hardware from the data store, structured data associated with at least one of the time range specified by the retrieval request, the one or more ingestion attributes specified by the retrieval request, or the one or more custom index attributes specified by the retrieval request.
Implementations of the disclosure may include one or more of the following optional features. In some examples, the custom index attributes defined by the user for indexing events each include a respective key-value pair defined by a customer of the plurality of different computing resources. In some examples, for each of a plurality of events of the event data, the method comprises: applying, by the data processing hardware, a set of validity rules to determine whether the corresponding event is valid. When the corresponding event is valid based on the applied validity rule set, the method includes indexing the corresponding event into the data store as structured data. When the corresponding event is invalid based on the applied validity rule set, the method includes rejecting, by the data processing hardware, the corresponding event from being indexed into the data store. The validity rule set may include a priority rule set for determining a priority of the corresponding event. In some embodiments, when receiving the retrieval request, the method includes receiving a structured data retrieval offset indicating a location in the list of structured data to retrieve, and wherein only structured data subsequent to the location in the list of structured data is retrieved. The method may further include sending, by the data processing hardware, the retrieved portion of the structured data; and a page token, and the page token indicates a position in the list of retrieved structured data. The retrieved portion of structured data includes only data from an earlier location in the list than the page token. In some examples, the data store comprises a distributed storage system. In other examples, the data store includes a relational database. At least one of a plurality of events of the event data may indicate a measured characteristic of a corresponding one of the plurality of different computing resources. The priority of the measured characteristic may be determined based on a set of priority rules. Optionally, the retrieval request requesting structured data is associated with a first time range and a second time range, and the second time range is different from the first time range. In some implementations, ingesting the event data includes obtaining the event data from the plurality of different computing resources over the network via an application programming interface. The method may further include receiving, at the data processing hardware, a culling request to cull data, and the culling request to cull data may be associated with at least one of a time range specified by the culling request, one or more ingestion attributes specified by the culling request, or one or more custom index attributes specified by the culling request. The method may further include culling, by the data processing hardware, the structured data from the data store, the structured data associated with at least one of a time range specified by the culling request, one or more ingestion attributes specified by the culling request, or one or more custom index attributes specified by the culling request. In some embodiments, the ingestion event data is responsive to at least one of: receiving an ingestion request; an indication from a schedule; or an indication from an event. Retrieving the structured data may include verifying a permission of the structured data associated with the retrieval request.
Another aspect of the disclosure provides a system comprising data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. Operations include ingesting, over a network, event data for a plurality of events obtained by a plurality of different computing resources in communication with the data processing hardware. The event data includes a respective timestamp for each event of the event data indicating a point in time when the event was obtained by one of the plurality of different computing resources. The event data further comprises at least one ingestion attribute associated with each event of the event data, the at least one ingestion attribute satisfying ingestion criteria required to allow ingestion of related events. For each of a plurality of events of the event data, operations include identifying whether the corresponding event is associated with any custom index attribute defined by a user for indexing events. The operations also include indexing the corresponding event into the data store as structured data based on the respective timestamp for the corresponding event. At least one ingestion attribute is associated with a corresponding event, and any identified custom index attribute is also associated with the corresponding event. The operations further comprise culling any events in the event data that have been indexed into the data store as structured data for a time period that satisfies a culling time period threshold. The operations further comprise receiving a retrieval request for structured data stored in the data store, the retrieval request requesting structured data associated with at least one of a time range specified by the retrieval request, one or more ingestion attributes specified by the retrieval request, or one or more custom index attributes specified by the retrieval request. The operations further comprise retrieving, from the data store, structured data associated with at least one of a time range specified by the retrieval request, one or more ingestion attributes specified by the retrieval request, or one or more custom index attributes specified by the retrieval request.
Implementations of the disclosure may include one or more of the following optional features. In some examples, the custom index attributes defined by the user for indexing events each include a respective key-value pair defined by a customer of the plurality of different computing resources. For each of a plurality of events of the event data, the operations may further include applying a validity rule set to determine whether the corresponding event is valid. Then, the operations may further include indexing the corresponding event into the data store as structured data when the corresponding event is valid based on the applied validity rule set. The validity rule set may include a priority rule set for determining a priority of the corresponding event. In some embodiments, the operations further comprise: denying the corresponding event from being indexed into the data store when the corresponding event is invalid based on the applied validity rule set. The retrieval request may include receiving a structured data retrieval offset, and the structured data retrieval offset may indicate a location in a list of structured data to retrieve. Retrieving only structured data subsequent to the location in the list of structured data. In some examples, the operations further comprise sending the retrieved portion of structured data. Then, the operations include sending a page token, and the page token indicates a position in the list of the retrieved structured data. Operations may also include the retrieved portion of structured data including only data from an earlier location in the list than the page token. In some examples, the data store comprises a distributed storage system. In other examples, the data store includes a relational database. At least one of a plurality of events of the event data may indicate a measured characteristic of a corresponding one of the plurality of different computing resources. The operations may include determining a priority of the measured characteristic based on a set of priority rules. In some implementations, the retrieval request requesting structured data is associated with a first time range and a second time range, and the second time range is different from the first time range. Ingesting the event data may include obtaining the event data from the plurality of different computing resources over the network via an application programming interface. In some embodiments, the operations further comprise: a culling request to cull data is received, and the culling request to cull data is associated with at least one of a time range specified by the culling request, one or more ingestion attributes specified by the culling request, or one or more custom index attributes specified by the culling request. Then, operations include culling the structured data from the data store, the structured data associated with at least one of a time range specified by the culling request, one or more ingestion attributes specified by the culling request, or one or more custom index attributes specified by the culling request. In some embodiments, ingesting the event data is in response to at least one of: receiving an ingestion request; an indication from a schedule; or an indication from an event. Retrieving the structured data may include verifying a permission of the structured data associated with the retrieval request.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIGS. 1A and 1B are schematic diagrams of an exemplary system for storing and searching structured event data.
FIG. 2 is a schematic diagram of exemplary components of an ingestion interface of the system of FIGS. 1A and 1B.
FIG. 3 is a schematic diagram of exemplary components of the persistence subsystem of the system of FIGS. 1A and 1B.
FIG. 4 is a schematic diagram of exemplary components of a retrieval interface of the system of FIGS. 1A and 1B.
FIG. 5 is a flow diagram of an exemplary arrangement of operations of a method for storing and structuring event data.
FIG. 6 is a schematic diagram of an exemplary computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
As the amount of available raw security signals that must be collected and analyzed grows exponentially (e.g., security discoveries or events across the resources of a vast distributed computing system), enterprises are looking for ways to increase the efficiency of detecting and responding to security issues in a cloud environment.
Embodiments herein are directed to systems and methods for enabling the scalable indexing and joining of current and historical raw security data across previously disparate sources, in order to accelerate procedural and human analysis and their prioritization of data to deliver insight and to push human comprehension as well as preferential response actions. Further, embodiments herein enable users to organize, manage, investigate, make informed decisions, and take actions based on abstractions of user assets, workloads, and related threats, while further mitigating the user's awareness and workload. These contributions reduce the time to detect and fix problems and minimize the risk of events and the radius of explosion by providing efficient ingestion and retrieval of structured timestamp information about cloud resources and security information associated with cloud resources.
Referring to fig. 1A and 1B, in some implementations, the exemplary system 100 includes a remote system 112. The remote system 112 may be a single computer, multiple computers, or a distributed system (e.g., a cloud environment) with extensible/resilient computing resources 114 (e.g., data processing hardware 610 (fig. 6)) and/or storage resources 116 (e.g., memory hardware 620 (fig. 6)). The remote system 112 is connected to a plurality of different computing resources or clients 118, 118a-n through a network 120. A storage abstraction 150 (e.g., a distributed storage system or data store) is overlaid on the storage resources 116 to allow scalable use of the storage resources 116 by one or more of the client or computing resources 118. Remote system 112 executes structured data search system 160. The search system 160 obtains and ingests event data 162 from the computing resources 118. Event data 162 represents events associated with cloud resources. In some implementations, the event data 162 or associated events indicate measured characteristics of a respective one of the plurality of different computing resources 118. Event data 162 includes, for example, characteristics associated with cloud resources, security and privacy vulnerabilities, and caller-provided annotation data. In some implementations, the event data 162 forms a hierarchy with parent-child relationships (e.g., a hierarchy of cloud resources). The system 160 may prioritize the measured characteristics based on a set of priority rules. The event data 162 may also form a graph of one-to-many or many-to-many relationships between elements. For example, the event data 162 may represent a cloud resource and all security issues associated with the cloud resource.
The event data 162 received by the search system 160 further includes a timestamp 164, at least one ingestion attribute 166, and a custom index attribute 168. Custom index attribute 168 may or may not be included in event data 162. In some examples, search system 160 includes ingestion interface 200, persistence subsystem 300, and retrieval interface 400. The ingestion interface 200 receives the event data 162, processes the data 162, and passes the ingested data 162 to the persistence subsystem 300. The persistence subsystem 300 stores the event data 162 in the storage abstraction 150 as structured data. The storage abstraction 150 is configured to store event data 162 from the computing resources 118. The distributed storage system 150 may implement an archive 190 (e.g., tape archive) configured to backup the stored event data 162 for recovery purposes. Archive 190 may include a long retention period (e.g., three (3) years). In response to a retrieval request 410 from data requestor 119, retrieval interface 400 passes retrieval data 420 to data requestor 119. Data requestor 119 may be associated with a user/customer or entity that owns event data 162 and corresponding search data 420, and thus may access search data 420 to examine its content by transmitting search request 410 specifying the content to be included in search data 420.
Referring to fig. 1B, in some embodiments, a distributed system 140 includes loosely coupled memory hosts 114, 114a-n (i.e., data processing hardware), each having computing resources 122 (e.g., one or more processors or Central Processing Units (CPUs)) in communication with storage resources 116 (e.g., memory hardware, flash memory, Dynamic Random Access Memory (DRAM), Phase Change Memory (PCM), and/or disks) that may be used to cache data. The storage abstraction 150 overlaid on the storage resource 116 allows one or more clients 118, 119 to use the storage resource 116 in an extensible manner. Clients 118, 119 may communicate with memory host 114 over network 120 (e.g., via Remote Procedure Calls (RPCs)). In some embodiments, remote distributed system 112 is "single-sided. "single-sided" refers to a method in which most of the request processing on the memory host 114 is done in hardware rather than by software executing on the CPU of the memory host 114.
The distributed system 112 may store event data 162 obtained from clients 118, 119 into storage resources 116 (e.g., storage abstractions 150) of the remote memory hosts 114 and obtain retrieval data 420 from the remote memory hosts 114 via a Network Interface Controller (NIC) 126. The network interface controller 126 (also referred to as a network interface card, network adapter, or LAN adapter) may be a computer hardware component that connects the computing device/resource 122 to the network 120. Both the memory hosts 114a-n and clients 118, 119 may each have a network interface controller 126 for network communications. Each memory location 124 is configured to store event data 162. As used herein, clients 118, 119 may include different computing resources 118 that collect/obtain/measure event data 162 ingested by structured data system 160, as well as data requesters 119 associated with clients/users associated with event data 162 ingested by structured data system 160 and corresponding retrieval data 410 retrieved from structured data system 160 in response to sending retrieval requests 410.
Referring now to fig. 2, the ingestion interface 200 ingests event data 162. The ingestion interface 200 may ingest the event data 162 by receiving the event data 162 from the different computing resources 118 and/or by actively extracting the event data 162 from the different computing resources over the network 120 (e.g., via an Application Programming Interface (API)). Optionally, the event data 162 may be written or updated via an API. That is, the clients 118, 119 may push the event data 162 to the ingestion interface 200 via the API. The ingestion interface 200 may ingest data in response to any number of stimuli. For example, the ingestion event data may be in response to receiving an ingestion request. That is, the user or client requests the ingestion interface 200 to ingest data. The ingestion interface 200 may also ingest data in response to an indication from a schedule. For example, a schedule for an ingestion interface may specify a particular time or range of times that event data should be ingested. Alternatively, the ingestion interface 200 may ingest data in response to an indication from an event. That is, ingesting particular event data may trigger the ingestion of additional event data 162 from the same or different clients 118.
As previously discussed, the event data 162 includes a timestamp 164. The timestamp 164 indicates a point in time at which the respective computing resource 118 obtained the respective event. In some examples, the event is associated with a cloud resource, and may include a feature or some other measurable parameter associated with operation of the cloud resource. For example, the event data 162 may include results from a security scanner that has scanned the remote computing resource 118. In another example, the event data 162 includes a notification that a password has been set on the computing resource 118 associated with the remote database. The timestamp 164 may indicate the time at which the event occurred. That is, returning to the scanner example, the timestamp 164 may indicate when the security scanner completed the scan or when the remote computing resource 118 received the scan results from the scanner. In some implementations, the timestamp 164 can indicate the time at which the structured data search system 160 ingested the event data 162. In other implementations, the ingestion interface 200 provides the timestamp 164 (e.g., of the current time) when ingesting the event data 162 lacking the timestamp 164.
The event data 162 also includes one or more ingestion attributes 166. These attributes 166 are needed by the ingestion interface 200 to allow ingestion of the data 162. For example, the event data 162 may be compared to an ingestion rule 210 (i.e., a validity rule or ingestion criteria). If the rule 210 is not satisfied (e.g., the ingestion attribute 166 is missed), then the data 162 may be determined to be invalid and the data 162 may be discarded 212 (i.e., ignored or rejected) or otherwise not ingested 162. If the rule 210 is satisfied (e.g., all ingestion attributes 166 are present and in the correct format), the ingestion interface 200 may determine that the data 162 is valid ingestion data 162 and continue to send the ingested data 162 to the persistence subsystem 300 for indexing. In some embodiments, the ingestion rules 210 do not just verify the presence of the ingestion attributes 166. For example, the ingestion rules 210 may enforce time and/or bandwidth constraints (e.g., the amount of data 162 or the rate at which data 162 is obtained). In another example, the ingestion rules 210 enforce access control (i.e., rights) to the data 162 and/or the system 100 (i.e., verify that the data 162 has access or rights to the system 100 and/or that the system 100 has access or rights to the data 162). In yet another example, the ingestion rules 210 enforce ordering and may reject out-of-order updates. The ingestion rule may include a set of priority rules that determine a priority of the corresponding event. The data may be ingested or indexed based in part on the determined priority. The ingest attributes 166 may be strongly typed (i.e., strictly enforce the type and format of the attributes). The ingestion property 166 may be represented as a pair (e.g., a key, a value).
With continued reference to FIG. 2, in some embodiments, event data 162 includes custom index attribute 168. The custom index attribute 168 is not necessary for the ingestion interface 200 to ingest the data 162, but rather allows clients (e.g., data requesters 119) more flexibility and customization in indexing and retrieving the event data 162. That is, the event data 162 may be ingested independent of the presence of the custom index attribute 168. For example, the description attributes defined by the client may be optional, and in the absence of the description, the ingestion interface 200 may still ingest the event data 162. Similar to the ingest attribute 166, the custom index attribute 168 may be represented as a (key, value) pair defined for a client or client. In some embodiments, custom index attribute 168 augments event data 162 with additional caller-provided tuples (e.g., keys, values, validity periods).
Referring now to FIG. 3, the persistence subsystem 300 receives ingested data 162 (again including the timestamp 164, the at least one ingest attribute 166, and any custom index attributes 168) as pre-indexed data 162 a. In some embodiments, the persistence subsystem includes data indexer 310. Data indexer 310 accepts pre-index data 162a and identifies whether pre-index data 162a is associated with any custom index attributes 168 defined by client 119 (a user of the client). Data indexer 310 then indexes (i.e., structures) the ingested data 162 into data store (e.g., storage abstraction) 150 as structured data 162b based on the corresponding timestamp 164, ingest attributes 166, and any custom index attributes 168. That is, data indexer 310 orders and organizes data 162 for efficient updating and retrieval in persistent storage. In some implementations, data store 150 is associated with a relational database, and data indexer 310 indexes data 162 into the relational database. Additionally or alternatively, data store 150 can be associated with a distributed database, and data indexer 310 indexes data 162b into the distributed database.
In some embodiments, data indexer 310 adds custom index attribute 168 when structuring data 162 (e.g., pre-index data 162 a). For example, data indexer 310 may add a timeline attribute over a specified time period that includes all changes in the attributes, properties, extensions, and relationship structures (e.g., parent-child relationships) of the corresponding data 162.
In some examples, the persistence subsystem 300 includes a data rejector 320. The data rejector 320 may include a retention threshold 322. The persistence subsystem 300, via the data rejecter 320, may limit the amount of time during which structured data 162b is stored in the data store 150. That is, structured data 162b can have a corresponding retention threshold or culling period threshold 322 (e.g., three months), and data 162b can be culled (i.e., deleted) from data store 150 when the amount of time data 162b has been stored in data store 150 satisfies this threshold 322. Different elements of the data 162 may have different retention thresholds 322. The threshold applied to the elements of structured data 162b may depend on one or more of the following: corresponding timestamp 164, ingest attribute 166, and any custom index attribute 168. For example, the ingestion attributes 166 may include the owner of the structured data 162b (i.e., the owner of the cloud resources associated with the events of the structured data 162 b). A retention threshold 322 may be assigned to structured data 162b based on the state of the owner ingestion attribute 166.
In some embodiments, structured data 162b has more than one corresponding retention threshold 322. For example, structured data 162b may be associated with a last modified retention threshold 324 and a total retention threshold 326. The structured data 162b may sometimes be an update to previously received ingestion data 162. For example, the structured data 162b can update the status (e.g., availability) of cloud resources. Subsystem 300 may store older "versions" of structured data 162b in less time than total retention threshold 326 (i.e., less time than the "newest" version). For example, the last modified retention threshold 324 may be three months, while the total retention threshold 326 may be thirteen months. When structured data 162b is updated, older versions of data 162 (i.e., data before being updated) may be kept at the last modified retention threshold 324 (three months), while the newest update 162b is kept at the total retention threshold 326 (thirteen months), unless updated again later.
With continued reference to FIG. 3, in some embodiments, the persistence subsystem 300 receives a culling request 328 from a user or client of the structured data search system 160. For example, the user or client sending the culling request 328 may be the same user or client as the data requestor 119. Culling request 328 requests culling of structured data 162b from data store 150 that is associated with at least one of: a time range 165 specified by the cull request 328, one or more ingestion attributes 166 specified by the cull request 328, or one or more custom index attributes 168 specified by the cull request 328. Data rejecter 320 may reject any number of structured data 162b based on reject request 328. For example, a user or client 119 may request to cull all data associated with the respective client 119 as specified by the corresponding ingestion attribute 166. In another example, client 119 may request to cull all data having timestamps 164 that fall within a time range 165 specified by culling request 328. The data rejector 320 may require verification (e.g., username and password) that the requester 119 is authorized to reject the requested data 162.
Referring now to FIG. 4, a retrieval interface 400 (i.e., a query interface) receives a retrieval request 410 for structured data 162b stored in data store 150. Retrieval request 410 may be substantially similar to culling request 328 of FIG. 3, except that retrieval request 410 is requesting retrieval of structured data 162b from data store 150 as retrieved data 420. Thus, retrieval request 410 may request structured data 162b from data store 150 that is associated with at least one of: a time range 165 specified by the retrieval request 410, one or more ingestion attributes 166 specified by the retrieval request 410, or one or more custom index attributes 168 specified by the retrieval request 410. Custom index attributes 168 specified by search request 410 may include attributes (e.g., timeline attributes) generated by data indexer 310. In some examples, the retrieve request 410 includes a request to retrieve data from a particular point in time or to compare the data 162b between a first time range and a second time range (also referred to as a "diff"), where each time range is different. diff may be between more than two time ranges. The comparison may yield additional attributes. For example, the comparison may result in an attribute that indicates whether the data 162b exists at some point in time or at some two points in time, or whether any attributes, characteristics, or extensions of the data 162b have changed between the two points in time. In another example, retrieval request 410 may request all data 162b associated with a particular cloud resource 118. Retrieval interface 400 will extract the requested structured data 162b from data store 150 and return data 162b to requestor 119 as retrieved data 420. In some implementations, the retrieval interface 400 orders and/or groups the retrieval data 420 based on the attributes 166, 168 and/or the timestamps 164.
The retrieval interface 400 may also filter, sort, or group the retrieval data 420 across any elements of the data 420, such as augmentation and relationship structures (e.g., parent-child relationships). The filtering can be specified in a standardized or proprietary query language. The retrieval interface may further utilize an aggregation function to group the retrieval data 420. For example, the aggregation function may include counting, summing, and/or averaging. In some implementations, the retrieval requests 410 may be "linked" or otherwise serialized together to expose clusters, correlations, and causal relationships between the structured event data 162b associated with the respective timestamps 164, attributes 166, 168, or any other event.
In some implementations, receiving the retrieval request 410 includes receiving a structured data retrieval offset 412. Structured data retrieval offset 412 indicates a position in the list of structured data 162b to retrieve. Only structured data 162b following that location in the list of structured data 162b is then retrieved. For example, if the retrieval request 410 includes a structured data retrieval offset 412 of fifty (50), and the retrieval interface 400 extracts a list of the elements corresponding to the one hundred (100) structured data 162b of the retrieval request 410, the retrieval interface 400 returns fifty (50) elements across the one hundred (100) elements, rather than all data elements. In other embodiments, structured data retrieval offset 412 indicates the amount of elements of structured data 162b to be returned at one time. For example, search request 410 may request that search interface 400 return only ten (10) results at a time. Optionally, the retrieval data 420 returned by the retrieval interface 400 may include a page token 422. When the retrieval interface 400 returns only a portion of the retrieval data 420 corresponding to the retrieval request 410, the page token 422 may indicate a position in the list corresponding to the data 420 that has been returned. That is, if the retrieval interface 400 has one hundred (100) elements of the retrieval data 420 to return in the list and only ten (10) elements are returned, the page token 422 may indicate that the next element of the retrieval data 420 to be returned by the retrieval interface 400 is the eleventh element. Thus, subsequent retrieval requests 410 may include a page token 422 to indicate to the retrieval interface 400 that the requestor is ready for the next "batch" or set of data 420.
Thus, the system 100 enables clients and clients to protect themselves at a high level of abstraction. That is, asset, vulnerability, threat and risk assessment and detection is largely prioritized and personalized to the relevant business classes and contextualized applications (or workloads, services, etc.) that the respective customer or client has deployed. Rather than protecting individual resources from policy, system 100 protects the environment of the client as a whole. In particular, the system 100 enables large-scale automatic and assisted discovery of declared and inferred relationships to workloads and their underlying services and resources. The system 100 enables large scale automatic and aided understanding and analysis (bagging) of normal static and dynamic behavior and relationship changes for a particular workload (or workload class). The system 100 also enables large-scale automatic and assisted detection of static and dynamic anomalies, and enables understanding of the types and/or values of target data that exist in the context of particular applications, workloads, and workload classes. The system 100 allows for automatic or assisted targeting and discovery of priorities that map to common threat actor methods and vulnerabilities personalized for a particular client or customer, a particular business context of a client, an application, a workload, and a workload category.
FIG. 5 is a flow diagram of an exemplary method 500 for storing and structuring event data. The flow diagram begins at operation 502, which includes ingesting, by the data processing hardware 114 over the network 120, event data 162 for a plurality of events obtained by a plurality of different computing resources 118 in communication with the data processing hardware 114. In some embodiments, the ingestion event data is responsive to at least one of: an ingestion request, an indication from a schedule, or an indication from an event is received. The event data 162 includes a respective timestamp 164 for each event of the event data 162, the respective timestamp 164 indicating a point in time at which the event was obtained by one of the plurality of different computing resources 118. The event data 162 also includes at least one ingestion attribute 166 associated with each event of the event data 162. The at least one ingestion attribute 166 meets ingestion criteria 210 required to allow ingestion of the related event. In some implementations, ingesting the event data 162 includes extracting the event data 162 from a plurality of different computing resources 118 via an application programming interface over the network 120.
For each of the plurality of events of event data 162, method 500 includes identifying, by data processing hardware 114, whether the corresponding event is associated with any custom index attribute 168 defined by the user for indexing the event at step 504. In some examples, custom index attributes 168 are defined by a user for indexing events, the custom index attributes 168 each including a corresponding key-value pair defined by clients of a plurality of different computing resources 118. At step 506, the method 500 further includes, for each of the plurality of events of the event data 162, indexing, by the data processing hardware 114, the corresponding event into the data store 150 as structured data 162b based on the respective timestamp 164 for the corresponding event, the at least one ingestion attribute 166 associated with the corresponding event, and any identified custom index attributes 168 associated with the corresponding event. In some examples, data store 150 comprises a distributed storage system. In other examples, the data store 150 includes a relational database.
At step 508, the method 500 includes culling, by the data processing hardware 114, any events in the event data 162 that have been indexed into the data store 150 as structured data 162b for a time period that satisfies the culling time period threshold 322. At step 510, the method 500 includes receiving, at the data processing hardware 114, a retrieval request 410 for structured data 162b stored in the data store 150, the retrieval request 410 requesting the structured data 162b associated with at least one of the time range 165 specified by the retrieval request 410, the one or more ingestion attributes 166 specified by the retrieval request 410, or the one or more custom index attributes 168 specified by the retrieval request 410. The retrieval request 410 requesting the structured data 162b may be associated with a first time range and a second time range. The second time range is different from the first time range.
At step 512, the method 500 includes retrieving, by the data processing hardware 114, from the data store 150, the structured data 162b associated with at least one of the time range 165 specified by the retrieval request 410, the one or more ingestion attributes 166 specified by the retrieval request 410, or the one or more custom index attributes 168 specified by the retrieval request 410. For example, when structured data 162b includes a corresponding timestamp 164 that falls within a specified time range 165, structured data 162b may be associated with the time range 165 specified by retrieval request 410. In some implementations, receiving the retrieval request 410 includes receiving a structured data retrieval offset 412, the structured data retrieval offset 412 indicating a list of structured data 162b to retrieve
And wherein only after retrieving the location in the list of structured data 162b
410 rights of associated structured data.
Optionally, the method 500 includes, for each of a plurality of events of the event data 162, applying, by the data processing hardware 114, the validity rule set 210 to determine whether the corresponding event is valid. The method 500 may further include indexing the corresponding event into the data store 150 as structured data 162b when the corresponding event is valid based on the applied validity rule set 210. The validity rule set 210 may include a priority rule set that determines a priority of a corresponding event. When the corresponding event is invalid based on the applied validity rule set, the method 500 can include denying, by the data processing hardware 114, the corresponding event from being indexed into the data store 150. In some examples, the method 500 includes sending, by the data processing hardware 114, the retrieved portion of the structured data 162b and the page token 422. The page token 422 indicates a position in the list of the retrieved structured data 162b, and the portion of the retrieved structured data 162b includes only data 162b in the list from an earlier position than the page token 422. At least one of the plurality of events of the event data 162 may be indicative of a measured characteristic of a corresponding one of the plurality of different computing resources 118. Optionally, the method 500 includes determining a priority of the measured characteristic based on a set of priority rules.
A software application (i.e., software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," app, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
FIG. 6 is a schematic diagram of an exemplary computing device 600 that may be used to implement the systems and methods described in this document. Computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown herein, their connections and relationships, and their functions, are meant to be illustrative only and are not meant to limit embodiments of the inventions described and/or claimed in this document.
The memory 620 stores information within the computing device 600 non-temporarily. The memory 620 may be a computer-readable medium, a volatile memory unit, or a nonvolatile memory unit. Non-transitory memory 620 may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 600. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), Phase Change Memory (PCM), and magnetic disks or tape.
The storage device 630 can provide mass storage for the computing device 600. In some implementations, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state storage device, or an array of devices, including devices in a storage area network or other configurations. In an additional embodiment, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 620, the storage device 630, or memory on processor 610.
The high speed controller 640 manages bandwidth-intensive operations for the computing device 600, while the low speed controller 660 manages lower bandwidth-intensive operations. This allocation of duties is merely illustrative. In some implementations, the high-speed controller 640 is coupled to memory 620, a display 680 (e.g., through a graphics processor or accelerator), and high-speed expansion ports 660, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 660 is coupled to the storage device 630 and the low-speed expansion port 690. The low-speed expansion port 690, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a network device, such as a switch or router, for example, through a network adapter.
The computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, the computing device 600 may be implemented as a standard server 600a or multiple times in a group of such servers 600a, as a laptop computer 600b, or as part of a rack server system 600 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. The terms "machine-readable medium" and "computer-readable medium" as used herein refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors (also known as data processing hardware) executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor or touch screen, for displaying information to the user and an optional keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a Web page to a Web browser on the user's client device in response to a request received from the Web browser.
A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (32)
1. A method (500), comprising:
ingesting, by data processing hardware (114) over a network (120), event data (162) for a plurality of events obtained by a plurality of different computing resources (118) in communication with the data processing hardware (114), the event data (162) comprising:
a respective timestamp (164) for each event of the event data (162), the respective timestamp (164) indicating a point in time when the event was obtained by one of the plurality of different computing resources (118); and
at least one ingestion attribute (166) associated with each event of the event data (162), the at least one ingestion attribute (166) satisfying ingestion criteria (210) required to allow ingestion of related events;
for each of a plurality of events of the event data (162):
identifying, by the data processing hardware (114), whether the corresponding event is associated with any custom index attribute (168) defined by a user for indexing events; and
indexing, by the data processing hardware (114), the corresponding event into a data store (150) as structured data (162b) based on the respective timestamp (164) for the corresponding event, the at least one ingestion attribute (166) associated with the corresponding event, and any identified custom index attributes (168) associated with the corresponding event;
culling, by the data processing hardware (114), any events in the event data (162) that have been indexed into the data store (150) as structured data (162b) for a time period that satisfies a culling time period threshold (322);
receiving, at the data processing hardware (114), a retrieval request (410) for structured data (162b) of a data store (150) in the data store (150), the retrieval request (410) requesting the structured data (162b) associated with at least one of a time range (165) specified by the retrieval request (410), one or more ingestion attributes (166) specified by the retrieval request (410), or one or more custom index attributes (168) specified by the retrieval request (410); and
retrieving, by the data processing hardware (114), the structured data (162b) from the data store (150) associated with at least one of the time range (165) specified by the retrieval request (410), the one or more ingestion attributes (166) specified by the retrieval request (410), or the one or more custom index attributes (168) specified by the retrieval request (410).
2. The method (500) of claim 1, wherein the custom index attributes (168) defined by the user for indexing events each include a respective key-value pair defined by a customer of the plurality of different computing resources (118).
3. The method (500) of claim 1 or 2, further comprising, for each of a plurality of events of the event data (162):
applying, by the data processing hardware (114), a set of validity rules (210) to determine whether the corresponding event is valid; and
when the corresponding event is valid based on the applied validity rule set (210), the corresponding event is indexed into a data store (150) as structured data (162 b).
4. The method (500) of claim 3, wherein the validity rule set (210) includes a priority rule set (210) for determining a priority of the corresponding event.
5. The method (500) of claim 3 or 4, further comprising: rejecting, by the data processing hardware (114), the corresponding event from being indexed into the data store (150) when the corresponding event is invalid based on the applied validity rule set (210).
6. The method (500) according to any one of claims 1-5, wherein receiving the retrieval request (410) includes receiving a structured data (162b) retrieval offset, the structured data (162b) retrieval offset indicating a location in a list of structured data (162b) to retrieve, and wherein only structured data (162b) subsequent to the location in the list of structured data (162b) is retrieved.
7. The method (500) according to any one of claims 1-6, further comprising sending, by the data processing hardware (114):
a portion of the retrieved structured data (162 b); and
a page token (422), the page token (422) indicating a position in the list of retrieved structured data (162b),
wherein the portion of the retrieved structured data (162b) includes only data from an earlier location in the list than the page token (422).
8. The method (500) according to any one of claims 1-7, wherein the data store (150) includes a distributed storage system.
9. The method (500) according to any one of claims 1-8, wherein the data store (150) includes a relational database.
10. The method (500) according to any one of claims 1-9, wherein at least one of a plurality of events of the event data (162) indicates a measured characteristic of a corresponding one of the plurality of different computing resources (118).
11. The method (500) of claim 10, further comprising prioritizing, by the data processing hardware (114), the measured characteristic based on a set of priority rules (210).
12. The method (500) according to any one of claims 1-11, wherein the retrieval request (410) requesting structured data (162b) is associated with a first time range (165) and a second time range (165), the second time range (165) being different from the first time range (165).
13. The method (500) according to any one of claims 1-12, wherein ingesting the event data (162) includes obtaining the event data (162) from the plurality of different computing resources (118) over the network (120) via an application programming interface.
14. The method (500) according to any one of claims 1-13, further including:
receiving, at the data processing hardware (114), a culling request (328) for culling data, the culling request (328) for culling data being associated with at least one of a time range (165) specified by the culling request (328), one or more ingestion attributes (166) specified by the culling request (328), or one or more custom index attributes (168) specified by the culling request (328); and
culling, by the data processing hardware (114), the structured data (162b) from the data store (150), the structured data (162b) being associated with at least one of a time range (165) specified by the culling request (328), one or more ingestion attributes (166) specified by the culling request (328), or one or more custom index attributes (168) specified by the culling request (328).
15. The method (500) according to any one of claims 1-14, wherein ingesting the event data (162) is responsive to at least one of: receiving an ingestion request; an indication from a schedule; or an indication from an event.
16. The method (500) according to any one of claims 1-15, wherein retrieving the structured data (162b) includes verifying a right of the structured data (162b) associated with the retrieval request (410).
17. A system (100) comprising:
data processing hardware (114); and
memory hardware (116) in communication with the data processing hardware (114), the memory hardware (116) storing instructions that, when executed on the data processing hardware (114), cause the data processing hardware (114) to perform operations comprising:
ingesting, over a network (120), event data (162) for a plurality of events obtained by a plurality of different computing resources (118) in communication with the data processing hardware (114), the event data (162) comprising:
a respective timestamp (164) for each event of the event data (162), the respective timestamp (164) indicating a point in time when the event was obtained by one of the plurality of different computing resources (118); and
at least one ingestion attribute (166) associated with each event of the event data (162), the at least one ingestion attribute (166) satisfying ingestion criteria (210) required to allow ingestion of related events;
for each of a plurality of events of the event data (162):
identifying whether the corresponding event is associated with any custom index attribute (168) defined by the user for indexing the event; and
indexing the corresponding event into a data store (150) as structured data (162b) based on the respective timestamp (164) for the corresponding event, the at least one ingestion attribute (166) associated with the corresponding event, and any identified custom index attributes (168) associated with the corresponding event;
culling any events in the event data (162) that have been indexed into the data store (150) as structured data (162b) for a time period that satisfies a culling time period threshold (322);
receiving a retrieval request (410) for structured data (162b) of a data store (150) in the data store (150), the retrieval request (410) requesting structured data (162b) associated with at least one of a time range (165) specified by the retrieval request (410), one or more ingestion attributes (166) specified by the retrieval request (410), or one or more custom index attributes (168) specified by the retrieval request (410); and
retrieving the structured data (162b) from the data store (150) associated with at least one of the time range (165) specified by the retrieval request (410), the one or more ingestion attributes (166) specified by the retrieval request (410), or the one or more custom index attributes (168) specified by the retrieval request (410).
18. The system (100) of claim 17, wherein the custom index attributes (168) defined by the user for indexing events each include a respective key-value pair defined by a customer of the plurality of different computing resources (118).
19. The system (100) according to claim 17 or 18, wherein, for each of a plurality of events of the event data (162), the operations further comprise:
applying a validity rule set (210) to determine whether the corresponding event is valid; and
when the corresponding event is valid based on the applied validity rule set (210), the corresponding event is indexed into a data store (150) as structured data (162 b).
20. The system (100) of claim 19, wherein the validity rule set (210) comprises a priority rule set (210), the priority rule set (210) being used to determine a priority of the corresponding event.
21. The system (100) according to claim 19 or 20, wherein the operations further include: denying the corresponding event from being indexed into the data store (150) when the corresponding event is invalid based on the applied validity rule set (210).
22. The system (100) according to any one of claims 17-21, wherein receiving the retrieval request (410) includes receiving a structured data (162b) retrieval offset, the structured data (162b) retrieval offset indicating a location in the list of structured data (162b) to retrieve, and wherein only structured data (162b) subsequent to the location in the list of structured data (162b) is retrieved.
23. The system (100) according to any one of claims 17-22, wherein the operations further include transmitting:
a portion of the retrieved structured data (162 b); and
a page token (422), the page token (422) indicating a position in the list of retrieved structured data (162b),
wherein the portion of the retrieved structured data (162b) includes only data from an earlier location in the list than the page token (422).
24. The system (100) according to any one of claims 17-23, wherein the data store (150) includes a distributed storage system.
25. The system (100) according to any one of claims 17-24, wherein the data store (150) includes a relational database.
26. The system (100) according to any one of claims 17-25, wherein at least one of a plurality of events of the event data (162) indicates a measured characteristic of a corresponding one of the plurality of different computing resources (118).
27. The system (100) of claim 26, wherein the operations further comprise prioritizing the measured characteristic based on a set of priority rules (210).
28. The system (100) according to any one of claims 17-27, wherein the retrieval request (410) requesting structured data (162b) is associated with a first time range (165) and a second time range (165), the second time range (165) being different from the first time range (165).
29. The system (100) according to any one of claims 17-28, wherein ingesting the event data (162) includes obtaining the event data (162) from the plurality of different computing resources (118) over the network (120) via an application programming interface.
30. The system (100) according to any one of claims 17-29, wherein the operations further include:
receiving a culling request (328) for culling data, the culling request (328) for culling data being associated with at least one of a time range (165) specified by the culling request (328), one or more ingestion attributes (166) specified by the culling request (328), or one or more custom index attributes (168) specified by the culling request (328); and
culling the structured data (162b) from the data store (150), the structured data (162b) being associated with at least one of a time range (165) specified by the culling request (328), one or more ingestion attributes (166) specified by the culling request (328), or one or more custom index attributes (168) specified by the culling request (328).
31. The system (100) according to any one of claims 17-30, wherein ingesting the event data (162) is responsive to at least one of: receiving an ingestion request; an indication from a schedule; or an indication from an event.
32. The system (100) according to any one of claims 17-31, wherein retrieving the structured data (162b) includes verifying a right of the structured data (162b) associated with the retrieval request (410).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/198,344 US11163737B2 (en) | 2018-11-21 | 2018-11-21 | Storage and structured search of historical security data |
US16/198,344 | 2018-11-21 | ||
PCT/US2019/053073 WO2020106363A1 (en) | 2018-11-21 | 2019-09-26 | Storage and structured search of historical security data |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113168411A true CN113168411A (en) | 2021-07-23 |
Family
ID=68211193
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980076506.1A Pending CN113168411A (en) | 2018-11-21 | 2019-09-26 | Storage and structured searching of historical security data |
Country Status (6)
Country | Link |
---|---|
US (2) | US11163737B2 (en) |
EP (1) | EP3884398A1 (en) |
JP (2) | JP7133714B2 (en) |
KR (1) | KR20210074383A (en) |
CN (1) | CN113168411A (en) |
WO (1) | WO2020106363A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230237032A1 (en) * | 2022-01-27 | 2023-07-27 | Salesforce.Com, Inc. | On-demand ingestion of records from a staging storage into a primary database |
Family Cites Families (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6138121A (en) | 1998-05-29 | 2000-10-24 | Hewlett-Packard Company | Network management event storage and manipulation using relational database technology in a data warehouse |
JP4102502B2 (en) | 1999-01-28 | 2008-06-18 | エヌ・ティ・ティ・コムウェア株式会社 | COMMUNICATION CONTROL DEVICE AND COMMUNICATION CONTROL DEVICE CONTROL METHOD |
US20060265746A1 (en) * | 2001-04-27 | 2006-11-23 | Internet Security Systems, Inc. | Method and system for managing computer security information |
US20030200192A1 (en) * | 2002-04-18 | 2003-10-23 | Bell Brian L. | Method of organizing information into topical, temporal, and location associations for organizing, selecting, and distributing information |
US20060075007A1 (en) * | 2004-09-17 | 2006-04-06 | International Business Machines Corporation | System and method for optimizing a storage system to support full utilization of storage space |
US20080208820A1 (en) * | 2007-02-28 | 2008-08-28 | Psydex Corporation | Systems and methods for performing semantic analysis of information over time and space |
US8489578B2 (en) * | 2008-10-20 | 2013-07-16 | International Business Machines Corporation | System and method for administering data ingesters using taxonomy based filtering rules |
US8898267B2 (en) * | 2009-01-19 | 2014-11-25 | Netapp, Inc. | Modifying information lifecycle management rules in a distributed system |
US8239529B2 (en) * | 2010-11-30 | 2012-08-07 | Google Inc. | Event management for hosted applications |
US8752178B2 (en) * | 2013-07-31 | 2014-06-10 | Splunk Inc. | Blacklisting and whitelisting of security-related events |
US20150046251A1 (en) * | 2013-08-08 | 2015-02-12 | Monica C. Smith | Methods and systems for analyzing key performance metrics |
WO2015051181A1 (en) * | 2013-10-03 | 2015-04-09 | Csg Cyber Solutions, Inc. | Dynamic adaptive defense for cyber-security threats |
EP3069275A4 (en) | 2013-11-11 | 2017-04-26 | Amazon Technologies, Inc. | Data stream ingestion and persistence techniques |
US9858322B2 (en) | 2013-11-11 | 2018-01-02 | Amazon Technologies, Inc. | Data stream ingestion and persistence techniques |
US9984427B2 (en) * | 2013-12-02 | 2018-05-29 | Qbase, LLC | Data ingestion module for event detection and increased situational awareness |
JP2015172862A (en) | 2014-03-12 | 2015-10-01 | 日本電気株式会社 | Information processing device for controlling data life cycle, data life cycle control method, and program for the same |
US10419457B2 (en) * | 2014-04-30 | 2019-09-17 | Hewlett Packard Enterprise Development Lp | Selecting from computing nodes for correlating events |
US10097619B2 (en) | 2014-06-24 | 2018-10-09 | Google Llc | Cross-device notifications |
RU2674331C2 (en) * | 2014-09-03 | 2018-12-06 | Дзе Дан Энд Брэдстрит Корпорейшн | System and process for analysis, qualification and acquisition of sources of unstructured data by means of empirical attribution |
US10614050B2 (en) | 2015-01-25 | 2020-04-07 | Iguazio Systems, Ltd. | Managing object requests via multiple indexes |
US10650014B2 (en) * | 2015-04-09 | 2020-05-12 | International Business Machines Corporation | Data ingestion process |
US10817544B2 (en) * | 2015-04-20 | 2020-10-27 | Splunk Inc. | Scaling available storage based on counting generated events |
US10353893B2 (en) | 2015-05-14 | 2019-07-16 | Deephaven Data Labs Llc | Data partitioning and ordering |
US20180005274A1 (en) * | 2015-05-29 | 2018-01-04 | Nanigans, Inc. | Management system for high volume data analytics and data ingestion |
JP2018523862A (en) | 2015-08-18 | 2018-08-23 | グーグル エルエルシー | Time series explorer |
US20170134243A1 (en) * | 2015-11-05 | 2017-05-11 | CENX, Inc. | Data augmentation pipeline for augmenting events and/or data associated with events |
US10395331B2 (en) | 2015-12-04 | 2019-08-27 | International Business Machines Corporation | Selective retention of forensic information |
US10409817B1 (en) * | 2016-03-25 | 2019-09-10 | Emc Corporation | Database system and methods for domain-tailored detection of outliers, patterns, and events in data streams |
US11055303B2 (en) * | 2016-06-29 | 2021-07-06 | EMC IP Holding Company LLC | Ingestion manager for analytics platform |
JP6181247B1 (en) | 2016-07-01 | 2017-08-16 | 株式会社東芝 | Database management apparatus, database management method, and database management program |
US20180069925A1 (en) * | 2016-09-08 | 2018-03-08 | BigStream Solutions, Inc. | Systems and methods for automatic transferring of big data computations from centralized systems to at least one of messaging systems and data collection systems |
US10776355B1 (en) * | 2016-09-26 | 2020-09-15 | Splunk Inc. | Managing, storing, and caching query results and partial query results for combination with additional query results |
US11200246B2 (en) | 2016-09-26 | 2021-12-14 | Splunk Inc. | Hash bucketing of data |
US10331507B2 (en) * | 2016-12-21 | 2019-06-25 | Mastercard International Incorporated | Systems and methods for real time computer fault evaluation |
US10791134B2 (en) * | 2016-12-21 | 2020-09-29 | Threat Stack, Inc. | System and method for cloud-based operating system event and data access monitoring |
US20180246924A1 (en) * | 2017-02-27 | 2018-08-30 | International Business Machines Corporation | Data maturity management |
US11036690B2 (en) * | 2017-07-11 | 2021-06-15 | International Business Machines Corporation | Global namespace in a heterogeneous storage system environment |
US10997244B2 (en) * | 2017-07-14 | 2021-05-04 | Phylot Inc. | Method and system for identifying and discovering relationships between disparate datasets from multiple sources |
US20190073615A1 (en) * | 2017-09-05 | 2019-03-07 | PagerDuty, Inc. | Operations health management |
US20190095478A1 (en) * | 2017-09-23 | 2019-03-28 | Splunk Inc. | Information technology networked entity monitoring with automatic reliability scoring |
US10643002B1 (en) * | 2017-09-28 | 2020-05-05 | Amazon Technologies, Inc. | Provision and execution of customized security assessments of resources in a virtual computing environment |
US11461290B2 (en) * | 2018-04-12 | 2022-10-04 | Vmware, Inc. | System and method for run-time adaptable policy engine for heterogeneous managed entities |
-
2018
- 2018-11-21 US US16/198,344 patent/US11163737B2/en active Active
-
2019
- 2019-09-26 JP JP2021528341A patent/JP7133714B2/en active Active
- 2019-09-26 EP EP19786707.0A patent/EP3884398A1/en not_active Withdrawn
- 2019-09-26 KR KR1020217015245A patent/KR20210074383A/en not_active Application Discontinuation
- 2019-09-26 CN CN201980076506.1A patent/CN113168411A/en active Pending
- 2019-09-26 WO PCT/US2019/053073 patent/WO2020106363A1/en unknown
-
2021
- 2021-10-20 US US17/451,579 patent/US20220035783A1/en active Pending
-
2022
- 2022-08-29 JP JP2022135855A patent/JP7402943B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US11163737B2 (en) | 2021-11-02 |
JP2022507846A (en) | 2022-01-18 |
KR20210074383A (en) | 2021-06-21 |
WO2020106363A1 (en) | 2020-05-28 |
US20200159842A1 (en) | 2020-05-21 |
US20220035783A1 (en) | 2022-02-03 |
EP3884398A1 (en) | 2021-09-29 |
JP2022162162A (en) | 2022-10-21 |
JP7133714B2 (en) | 2022-09-08 |
JP7402943B2 (en) | 2023-12-21 |
WO2020106363A8 (en) | 2021-06-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10891371B2 (en) | Detecting malicious user activity | |
US11848760B2 (en) | Malware data clustering | |
EP3537325B1 (en) | Interactive user interfaces | |
EP2963578B1 (en) | Malware data item analysis | |
US9021260B1 (en) | Malware data item analysis | |
JP6077472B2 (en) | User interface and workflow for machine learning | |
WO2016150313A1 (en) | Method and apparatus for detecting suspicious process | |
US11755585B2 (en) | Generating enriched events using enriched data and extracted features | |
RU2702269C1 (en) | Intelligent control system for cyberthreats | |
WO2018080942A1 (en) | Change monitoring spanning graph queries | |
US20220342866A1 (en) | File analytics systems and methods including receiving and processing file system event data in order | |
JP7402943B2 (en) | Historical security data storage and structured retrieval | |
GB2559314A (en) | Data retrieval system | |
JP2021056921A (en) | Database management system and database processing method | |
CN117044163A (en) | Selectively triggering security alarms using weighted peer groups | |
Pawling | This page is NOT part of the dissertation/thesis, but MUST be turned in to the proofreader (s) or the reviwer (s)! |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |