CN114223175A - Generating a sequence of network data while preventing acquisition or manipulation of time data - Google Patents
Generating a sequence of network data while preventing acquisition or manipulation of time data Download PDFInfo
- Publication number
- CN114223175A CN114223175A CN202080056658.8A CN202080056658A CN114223175A CN 114223175 A CN114223175 A CN 114223175A CN 202080056658 A CN202080056658 A CN 202080056658A CN 114223175 A CN114223175 A CN 114223175A
- Authority
- CN
- China
- Prior art keywords
- data
- aggregation server
- encrypted
- presentation
- key
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000004220 aggregation Methods 0.000 claims abstract description 559
- 230000002776 aggregation Effects 0.000 claims abstract description 556
- 238000000034 method Methods 0.000 claims abstract description 190
- 230000008569 process Effects 0.000 claims abstract description 114
- 238000006243 chemical reaction Methods 0.000 claims description 318
- 230000009466 transformation Effects 0.000 claims description 84
- 230000007704 transition Effects 0.000 claims description 50
- 238000003860 storage Methods 0.000 claims description 23
- 238000012545 processing Methods 0.000 claims description 16
- 239000000654 additive Substances 0.000 claims description 15
- 230000000996 additive effect Effects 0.000 claims description 15
- 238000004590 computer program Methods 0.000 claims description 13
- 238000001914 filtration Methods 0.000 claims description 11
- 238000005259 measurement Methods 0.000 abstract description 26
- 238000001514 detection method Methods 0.000 description 60
- 238000013519 translation Methods 0.000 description 40
- 238000009826 distribution Methods 0.000 description 23
- 238000010586 diagram Methods 0.000 description 20
- 230000003993 interaction Effects 0.000 description 17
- 230000000694 effects Effects 0.000 description 14
- 230000009471 action Effects 0.000 description 10
- 238000004891 communication Methods 0.000 description 10
- 230000006870 function Effects 0.000 description 10
- 238000004422 calculation algorithm Methods 0.000 description 5
- 238000005516 engineering process Methods 0.000 description 5
- 238000005304 joining Methods 0.000 description 5
- 238000013515 script Methods 0.000 description 5
- 230000008901 benefit Effects 0.000 description 4
- 238000012544 monitoring process Methods 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- 238000012546 transfer Methods 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 238000004364 calculation method Methods 0.000 description 3
- 238000009795 derivation Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 239000000047 product Substances 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 230000004931 aggregating effect Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 238000000844 transformation Methods 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- VYZAMTAEIAYCRO-UHFFFAOYSA-N Chromium Chemical compound [Cr] VYZAMTAEIAYCRO-UHFFFAOYSA-N 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000013475 authorization Methods 0.000 description 1
- 238000010923 batch production Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000008030 elimination Effects 0.000 description 1
- 238000003379 elimination reaction Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000007562 laser obscuration time method Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000011084 recovery Methods 0.000 description 1
- 238000005070 sampling Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 230000001131 transforming effect Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/606—Protecting data by securing the transmission between two devices or processes
- G06F21/608—Secure printing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/008—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols involving homomorphic encryption
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3247—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures
- H04L9/3257—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures using blind signatures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3297—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving time stamps, e.g. generation of time stamps
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/42—Anonymization, e.g. involving pseudonyms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
Methods, systems, and apparatus, including methods for determining network measurements. In some aspects, a method includes receiving, by a first aggregation server, encrypted presentation data from each of a plurality of client devices. The second aggregation server receives transcrypted data from each of at least a portion of the plurality of client devices. The first aggregation server and the second aggregation server perform a multiparty computation process to generate a chronological sequence of encrypted presentation data and transcrypted data, and to decrypt the encrypted presentation data and transcrypted data.
Description
Background
Client devices transmit data over a public network, such as the internet. These communications may be intercepted and/or altered by entities other than the intended recipient. In addition, entities can forge network identifications and send data that appears to originate from these forged network identifications. An example of such forgery is a sibil (Sybil) attack in which an entity creates a network identity to corrupt the reputation system of a peer-to-peer network.
Disclosure of Invention
This specification describes technologies relating to determining network measurements in a manner that prevents fraud and protects user privacy.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include: receiving, by a first aggregation server (aggregation server), exposure data from each of a plurality of client devices, wherein the exposure data comprises, for each exposure of a digital component (digital component) recorded by a client device: (i) a first join key (join key) based on a first unique identifier (unique identifier) of a client device or an application on the client device for a presentation to occur, (ii) encrypted presentation data that has been encrypted using a first public key of a first aggregation server and using a second public key of a second aggregation server different from the first aggregation server, and (iii) encrypted presentation time data that indicates a time at which the presentation occurred; receiving, by the second aggregation server, conversion (conversion) data from each of at least a portion of the plurality of client devices, wherein the conversion data comprises, for each conversion recorded by a client device: (i) a second connection key based on a second unique identifier of the client device or an application on the client device for which the transition occurred, and (ii) a second value comprising transcryption data that has been encrypted using the first encryption key and the second encryption key, and (iii) transcryption time data that indicates a time at which the transition occurred; performing, by the first aggregation server and the second aggregation server, a multiparty computation process to generate a chronological sequence of encrypted presentation data and encrypted conversion data (chronological sequence) and decrypt the encrypted presentation data and the encrypted conversion data, including: identifying a group (group) of the transcrypted data and the corresponding encrypted presentation data based on the first key and the second key; and for each chronological sequence, ordering the encrypted conversion data and the corresponding encrypted display data based on the encrypted display time data and the encrypted conversion time data; and decrypting the presentation data and the conversion data for each sequence of the encrypted presentation data and the encrypted conversion data in a plurality of stages using a first private key corresponding to the first public key and a second private key corresponding to the second public key. Other embodiments of this aspect include corresponding apparatuses, systems, and computer programs configured to perform aspects of the methods encoded on computer storage devices. Advantageously, this provides a method (means) of attributing (be attached to) the transformation data to the presentation data whilst maintaining user privacy, thereby providing a more secure system/method. As described herein, the conversion data corresponds to user interaction with the digital component, while the presentation data corresponds to providing the digital component to the user. Thus, it is beneficial to monitor the interaction of digital components provided to a user with the user by coordinating presentation data and conversion data by attributing the conversion to a corresponding presentation. It is often important in monitoring such interactions to provide a security system that maintains the privacy of the user so that the user cannot be identified or tracked based on the transformed data or the presented data. The disclosed technology provides a technical effect by enabling user privacy to be maintained when coordinating presentation data and transformation data, and also provides a technical effect of preventing fraudulent activity when coordinating presentation data and transformation data. In particular, the encryption techniques detailed above may prevent third parties from intercepting sensitive presentation data or transformation data that may introduce a principal back to the user. In addition, these encryption techniques also prevent all entities involved in the above methods from learning information about the user (e.g., by matching presentation data and transformation data for a particular user), thereby preventing tracking of the user based on the presentation data or transformation data. For example, as detailed above, the presentation data and the transformation data have been twice encrypted using a first public key of the first aggregation server and a second public key of the second aggregation server, respectively. This particular feature is used to increase security and protect user privacy, as the encrypted presentation data and the transcrypted data require two aggregation servers to decrypt (i.e., use their respective private keys to decrypt). In this way, a single server (or intercepting party) cannot obtain the presentation data or the conversion data of the plaintext, thereby improving the security. Accordingly, the disclosed technology addresses the technical problem of providing a security system for monitoring user interaction with digital components that enables user privacy to be maintained.
It is also often important to prevent fraud (e.g., simulating false user interactions with digital components) when monitoring user interactions with digital components and when coordinating presentation data and conversion data. The use of multiple aggregation servers to form multi-party computing (MPC) enables each server to check whether another server is showing signs of fraudulent activity (e.g., whether one of the server(s) has been hacked or colluded with other entities) and to prevent fraud at the time of measurement. Thus, further technical effects are achieved by the disclosed techniques of preventing fraudulent activity while maintaining user privacy when coordinating presentation data and transformation data.
Furthermore, the disclosed technology allows greater flexibility in user interaction with the digital component. In particular, using a join key based on a unique identifier of a client device or application as detailed above enables monitoring of user interactions (i.e., presentations and conversions occurring via the same or different web browsers or other applications on user devices) on the same platform or across platforms.
Further, the feature of generating a chronological sequence by identifying a group of the encrypted conversion data and the corresponding encrypted presentation data, and sorting the encrypted conversion data and the corresponding encrypted presentation data (for each chronological sequence) based on the encrypted presentation time data and the encrypted conversion time data enables an improvement in the accuracy of attributing the conversion to the corresponding presentation. This is because the conversion is attributed to the presentation based on the corresponding time data for the conversion and presentation, which means that the user's interaction with the digital component can be monitored more accurately.
These and other embodiments may each optionally include one or more of the following features. In some aspects, the encrypted presentation time data is encrypted using a first public key and a second public key. The encrypted presentation time data may include an encrypted version of the sum of the time at which the presentation occurred and the clock offset of the client device at which the presentation occurred. The sum of the time at which the presentation occurs and the clock bias of the client device at which the presentation occurs may be encrypted using homomorphic additive probabilistic public key encryption.
In some aspects, the transcryption time data is encrypted using a first public key and a second public key. The encrypted transition time data includes an encrypted version of the sum of the time at which the transition occurred and the clock skew of the client device at which the transition occurred. The sum of the time at which the transition occurs and the clock bias of the client device at which the transition occurs may be encrypted using homomorphic additive probabilistic public key encryption. Similar to the secondary encryption of the date of presentation and/or conversion, the secondary encryption of the presentation time data and/or the conversion time data is advantageous because it improves security. The secondary encryption time data requires the private keys of the two aggregation servers to be decrypted. Therefore, a single server (or an intercepting party) cannot obtain the time data of the plaintext, the risk of attack based on the time interval is reduced, and the safety is improved. The use of clock skew in the encrypted presentation time data and/or the transition time data is particularly useful for distinguishing between identical device transitions and cross device transitions. As described herein, if the translation and presentation occur on the same device, the clock skew is the same for each translated and presented device, but is unknown to the aggregation server because it is encrypted. If the conversion and presentation occurs on different devices, the clock skew is different for each device. In either case, encryption of the sum of the time at which the presentation/conversion occurs and the clock bias of the client device at which the presentation/conversion occurs provides a technical effect of increasing security, as these features make it more difficult to launch an interval-based attack to obtain user information or to implement fraud.
Some aspects may include: for each chronological sequence of encrypted presentation data and transcrypted data, credits (credits) for the conversion in the transcrypted data are attributed to each presentation of the encrypted presentation data based at least in part on the chronological sequence of the encrypted presentation data and the transcrypted data.
In some aspects, performing a multi-party computing process includes: for each presentation, encrypting, by the first aggregation server, the first join key, sending, by the first aggregation server to the second aggregation server, a tuple comprising the encrypted first join key, the encrypted presentation data, and the encrypted presentation time data; and for each conversion, encrypting, by the second aggregation server, the second join key, and sending, by the second aggregation server to the first aggregation server, a tuple comprising the encrypted second join key, the transcryption data, and the transcryption time data.
In some aspects, performing a multi-party computing process includes: decrypting, by the first aggregation server, each of the transcrypting time data; determining, by the first aggregation server, a first time offset value; generating second transcrypted time data by summing up the time at which the transcryption occurs, the clock skew of the client device at which the transcryption occurs, and the first time skew value; determining, by the first aggregation server, for each unique transcryption data, a number of unique second join keys; and filtering each transcrypted data for which the number of unique second join keys is less than a threshold from the set of transcrypted data received by the first aggregation server; and for each remaining transcrypted data of the set of transcrypted data, providing a data tuple comprising the second join key for the transcrypted data, the transcrypted data and the second transcrypted time data. The filtering step detailed above provides the technical effect of increasing data security because each transcrypted data requires a threshold number of unique second join keys, otherwise the data will be filtered out. This serves to improve the protection of user privacy as it makes it difficult to trace back to a particular user based on the transformed data (as the remaining unfiltered transformed data is associated with at least a threshold number of join keys), thereby improving the anonymity associated with the transformed data.
In some aspects, performing a multi-party computing process includes: decrypting, by the second aggregation server, each encrypted presentation time data; determining, by the second aggregation server, a second time offset value; generating second encrypted presentation time data by encrypting a sum of a time at which the presentation occurred, a clock bias of the client device at which the presentation occurred, and a second time bias value; determining, by the second aggregation server, for each unique encrypted presentation data, a number of unique first join keys; filtering each encrypted presentation data for which the number of unique first join keys is less than a threshold from the set of encrypted presentation data received by the second aggregation server; and for each remaining encrypted presentation data in the set of encrypted presentation data, providing a data tuple comprising the first join key for the encrypted presentation data, and the second encrypted presentation time data. The filtering step detailed above provides the technical effect of increasing the security of the data, since each encrypted presentation data requires a threshold number of unique first join keys, otherwise the data will be filtered out. This serves to improve the protection of user privacy as it makes it difficult to trace back to a particular user based on the presentation data (as the remaining unfiltered presentation data is associated with at least a threshold number of join keys), thereby improving the anonymity associated with the presentation data.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. The cryptographic techniques described in this document enable the calculation of measurements on various types of data, while protecting user privacy and preventing fraudulent manipulation of data. For example, the techniques may enable calculation of measurements for presentations, various types of conversions, and aggregate values of conversions, while protecting user privacy and preventing fraud in converting reports and presenting reports. For example, the techniques may be used to compute click-to-click conversions, browse conversions, application download conversions, cross-device conversions (where the conversion occurs on a different device than the presentation occurs), and conversions applied to a network (where the presentation occurs in the application and the conversion occurs in the browser (or vice versa)) while protecting user privacy and preventing fraud. The technology also supports multiple attribute models (attribute models) that provide the same protection, such as recent click attribution, data driven attribution, and multi-touch attribution.
The use of multiple aggregation servers to form a multi-party computing (MPC) enables each server to check the other for signs of fraudulent activity and ensures that no single server can access any user data in the clear at any time. Using the MPC described in this document in combination with k-anonymization techniques, differential privacy techniques, public key encryption, and additive/exchange homomorphic encryption techniques protects user privacy and prevents fraud at the time of measurement even if one of the server(s) is hacked or colluded with other entities. Blind signing of network data using blind signing techniques enables checking such data for fraud while protecting user privacy by not passing non-blind (unblinded) data to other entities. Portions of the data elements comprising the network data may be blindly signed and/or encrypted by multiple entities to prevent fraud or collusion by the multiple entities. As described herein, blind data (e.g., presentation data or translation data) is data that is blindly processed using cryptographic techniques. The blind data is camouflaged such that the entity cannot ascertain the plaintext data from the blind data. The entity may blindly sign the data (e.g., a fraud detection system that determines that the presentation is valid may sign the blindly presented data) to verify the legitimacy of the data, but the entity providing the signature may sign the data without actually seeing the plaintext data. Thus, the fraud detection server can be used to check for the presence of fraud without compromising the privacy of the user, as the fraud detection server or any other intercepting party cannot see the plaintext presentation data.
Various features and advantages of the foregoing subject matter will be described with reference to the drawings. Additional features and advantages will be apparent from the subject matter described herein and the claims.
Drawings
Fig. 1 is a block diagram of an example environment in which an aggregation server determines aggregated network measurements.
Fig. 2 is a block diagram illustrating an example process flow for determining aggregated network measurements.
FIG. 3 is a flow diagram illustrating an example process for determining aggregated data.
FIG. 4 is a flow diagram illustrating another example process for determining aggregated data.
FIG. 5 is a flow diagram illustrating an example process for verifying the integrity of data.
FIG. 6 is a flow diagram illustrating an example process for generating a temporal sequence of events while protecting user privacy.
FIG. 7 is a flow diagram illustrating an example process for attributing transitions to an illustration using data driven attribution.
FIG. 8 is a flow diagram illustrating an example process for determining an aggregate transition value.
FIG. 9 is a flow diagram illustrating an example process for determining aggregate transformation data.
FIG. 10 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes cryptographic techniques for preventing fraud in determining event levels and aggregating network measurements. For example, the techniques described in this document may prevent fraud in determining event levels and aggregate exposure and conversion measurements for digital components for various types of conversions. The cryptographic techniques described in this document may also protect user privacy, for example, by preventing all entities from being able to track or aggregate user data received from a user's client device.
Overview of the System
Fig. 1 is a block diagram of an example environment 100 in which an aggregation server 180 determines aggregated network measurements. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. Network 105 connects client device 110, publisher 130, website 140, digital component distribution system 150, fraud detection system 170, conversion system 172, aggregation server 180, reporting system 190, and time server 192. The example environment 100 may include many different client devices 110, publishers 130, and websites 140. In some implementations, the environment 100 can also include a plurality of digital component distribution systems 150, a fraud detection system 170, a conversion system 172, and a reporting system 190. Although there are two aggregation servers 180-A and 180-B in this example, aggregation servers of more than two aggregation servers 180-A and 180-B may also be used, as described below.
The website 140 is one or more resources 145 associated with a domain name and hosted by one or more servers. An example website is a collection of web pages in HTML format, where a web page may contain text, images, multimedia content, and programming elements (such as scripts). Each website 140 is maintained by a publisher 130, wherein the publisher 130 is an entity that controls, manages, and/or owns the website 140.
A resource 145 is any data that may be provided over the network 105. The resource 145 is identified by a resource address (e.g., a Universal Resource Locator (URL)) associated with the resource 145. Resources include HTML pages, word processing documents, and Portable Document Format (PDF) documents, images, videos, and feed sources, to name a few. These resources may include content such as words, phrases, images, and sounds, which may include embedded information (such as meta information in hyperlinks) and/or embedded instructions (such as scripts).
The web browser can request the resource 145 from a web server hosting the website 140 of the publisher 130 (e.g., in response to a user of the client device 110 entering a resource address for the resource 145 in an address bar of the web browser or selecting a link referencing the resource address). Similarly, the native application may request application content from a remote server of the publisher 130.
Some resources 145, application pages, or other application content may include a digital component slot (slot) for presenting digital components with the resource 145 or application page. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components may be electronically stored in the physical memory device as a single file or collection of files, and the digital components may be in the form of video files, audio files, multimedia files, image files, or text files, and include advertising information such that the advertisement is one type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource presented by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may relate to the same subject matter as the web page content, or may relate to related subject matter). Thus, the digital components provided by the digital component distribution system 150 can supplement and generally improve web page or application content.
When application 112 loads resource 145 (or application content) that includes one or more digital component slots, application 112 may request a digital component for each slot from digital component distribution system 150. The digital component distribution system 150, in turn, can request digital components from the digital component provider 160. The digital component provider 160 is an entity that provides digital components for presentation with the resource 145.
In some cases, the digital component distribution system 150 may also request digital components from one or more digital component partners (partners) 157. The digital component partner 157 is an entity that selects a digital component on behalf of the digital component provider 160 in response to a digital component request.
Digital component distribution system 150 may select digital components for each digital component slot based on various criteria. For example, among the digital components received from the digital component providers 160 and/or digital component partners 157, the digital component distribution system 150 can select a digital component based on relevance to the resource 145 (or application content), performance of the digital component (e.g., rate of user interaction with the digital component), and so forth. The digital component distribution system 150 can then provide the selected digital component(s) to the client device 110 for presentation with the resource 145 or other application content.
When the application 112 renders the digital component, the application 112 (which may be a browser) may store presentation data 114 for the rendering of the digital component. Presentation data 114 for a particular presentation of a digital component may include a URL or field for a landing page of the digital component (e.g., a page linked to the digital component and presented to the user by the application/browser when the user clicks on or interacts with the digital component), one or more identifiers for the digital component, event level data associated with the presentation, an expiration time specifying when the presentation data is deleted from the client device 110, and/or a reporting URL or field to which a conversion report for the digital component is to be sent. The data may be provided by the digital component, for example, as metadata of the digital component or an anchor tag of the digital component. As described in more detail below, rather than or in addition to storing raw presentation data for each presentation of the digital component, the application 112 may store presentation data blindly signed by the fraud detection system 170.
The application 112 may also store the translation data 116 in response to the detected translation. The conversion to a digital component is the completion of a specified user action after the digital component is presented to and/or interacted with by the user. The transformation data 116 for the transformation may include data indicating the type of transformation, as there are multiple types of transformations needed for various transformation measurements. The type of conversion may specify a follow-up action after the conversion is complete. For example, the conversion may be adding an item to an online shopping cart. In this example, the first type of conversion may be to add an item but not check out (e.g., not complete a purchase), while the second type of conversion may be to add an item and check out. As described in more detail below, the conversion data for the conversion may be a set of one or more bits indicating the type of conversion, and the application may store the conversion data blindly signed by the digital component distribution system 150 (or the conversion system where the conversion actually occurred).
The fraud detection system 170, which may be implemented as one or more servers, may evaluate fraud signals received from the client device 110 and/or the application 112 to determine whether the presentation is valid or fraudulent. As described below, the fraud detection system 170 may also determine whether the conversion is valid or fraudulent based on a fraud signal received from the conversion system 172. The fraud signal may depend on the application and may vary in different embodiments.
At the presentation time, the application 112 (or the operating system on the client device 110) may collect the fraud detection signal and provide the fraud detection signal to the fraud detection system 170. In addition to the fraud detection signal, the application 112 may also send blind demonstration data for demonstration to the fraud detection system 170. Blind presentation data is presentation data that has been blinded (e.g., camouflaged) using cryptographic techniques. If the fraud detection system 170 determines that the presentation is valid, the fraud detection system 170 may sign the blind presentation data and provide the signed blind presentation data to the application 112. In the following, example techniques for generating and signing blind presentation data will be described.
The fraud detection system 170 may be operated by the digital component distribution system 150. In some implementations, the fraud detection system 170 is operated by one or more third parties. For example, an application provider (e.g., an entity that develops and provides a web browser or native application, and/or a digital component distributor that operates the digital component distribution system 150) may authenticate one or more third parties to operate the fraud detection system 170 to detect fraud and blindly sign blind data received from multiple different developer's applications (e.g., web browsers and/or native applications).
The conversion system 172, which may be implemented as one or more servers, may determine whether a conversion occurred. For example, each digital component provider 160 may operate a conversion system 172 that determines whether conversion of its digital components has occurred. In a particular example, the conversion may be to obtain the product on a website. In this example, the conversion system 172 and the website may be maintained by the distributor of the product. Conversion system 172 may receive data from a web server hosting a website that specifies that a product was obtained and determine that a conversion occurred based on the data.
In another example, the conversion may be to download an application. In this example, when an application is downloaded to the client device 110, the application store may provide data to the application developer's conversion system 172 specifying that the application was downloaded to the client device 110. In some embodiments, the app store also operates the conversion system 172.
The conversion system 172 may also interact with the fraud detection system 170 to determine whether the conversion is valid or fraudulent. For example, the conversion system 172 may provide the blind conversion data and the fraud detection signal to the fraud detection system 170. Blind translation data is translation data that has been blinded (e.g., camouflaged) using cryptographic techniques. If the fraud detection system 170 determines that the conversion is valid and/or that the user interaction is authentic, the fraud detection system 172 may sign the blind conversion data and provide the signed blind conversion data to the application 112. In the following, example techniques for generating and signing blind translation data will be described.
Click-to-click conversions are conversions where a user interacts with a digital component and the user then completes a particular action. A browsable transition is one in which the digital component is presented to the user and the user then completes a particular action. An application download conversion is a conversion that presents a digital component to a user and the user then downloads the application referenced (e.g., promoted) by the presented digital component. In this example, downloading the application is a specific action. Cross-device conversion is a conversion where a particular action occurs on a different device than the device on which the digital component is presented. A transition applied to a network is a transition where a presentation occurs (e.g., a digital component is presented) in an application and a particular event occurs in a browser.
The environment 100 may also include a time server 192. The time server 192 may be used in some of the techniques described below. As described below, timeserver 192 may be used to decrypt some data that is encrypted using the public key of timeserver 192. Time server 192 may keep a private key corresponding to the public key secret and use the private key to decrypt the data.
Example Process flow for determining network measurements
Fig. 2 is a block diagram of an example process flow 200 for determining aggregated network measurements. Process flow 200 is shown as being performed by some of the components of FIG. 1, including one or more of client device 110, fraud detection system 170, transition detection system 172, aggregation server 180-A and aggregation server 180-B, and reporting system 190.
Each instance of the application 112 (which may be a web browser or a native application) may have a unique identifier for converting measurements. In other words, an instance of a particular web browser on one client device will be different from another instance of the particular web browser executing on a different client device and have a different unique identifier. The unique identifier for the application 112 may be randomly or pseudo-randomly generated, and the application 112 may be configured to never leak the unique identifier outside of the application 112. As described below, the characteristics and use of the unique identifier may vary depending on the type of conversion that is measured. In some implementations that support cross-device measurements, all application(s) 112 on all client devices 110 owned by the same user may have the same unique identifier for converting measurements.
When the digital component is rendered on client device 110 by application 112, application 112 may record presentation data (m)i) A destination (dc _ destination), a conversion measurement deadline, and a report field (report _ domain) that will receive a conversion report for the digital component. The presentation data may be in the form of an opaque array of bytes and may include, for example, one or more identifiers for the digital components and/or event level data associated with the presentation of the digital components at the application 112.
The destination may include a Universal Resource Identifier (URI), URL, or field for a landing page for the digital component (e.g., a page linked to the digital component and presented to the user by the application/browser when the user clicks on or interacts with the digital component). Examples of URIs include links to app stores for downloading applications, and deep links to locations within applications purchased within the applications. Therefore, the destination may also be referred to as a destination zone. The conversion measurement expiration date may be the time (or period) at which the presentation data will be deleted from the client device 110. The reporting domain may be a reporting URL or domain to which the conversion report for the digital component is sent, e.g., a reporting URL or domain for the reporting system 190 to which the digital component provider 160 wishes to send the conversion report.
In some implementations, the application 112 can also record click data (clicked), wherein the click data specifies whether the user interacted with (e.g., selected or clicked on) the digital component when the digital component was presented by the application 112. The click data may be a boolean variable, e.g., a value of 1 if interacted with and a value of 0 if not interacted with. In some other implementations, application(s) 112 may also record other types of metadata that indicates how the user interacted with the digital component, e.g., the user filled in a survey or muted the digital component (mute). For example, the user may mute the digital component to indicate that the user does not want to see the same (or similar) digital component in the future.
As described above, the application 112 may also interact with the fraud detection system 170 to determine whether the presentation of the digital component is valid or fraudulent. In the event that the presentation is valid, the application 112 may also request that the fraud detection system 170 blindly sign the information related to the presentation.
In some implementations, the digital component may invoke (invoke) computer-readable code (e.g., a script) that collects fraud detection signal 202 and sends fraud detection signal 202 to fraud detection system 170 for evaluation. In the event that the presentation is valid, the application 112 may piggyback (e.g., add data to) the call to the fraud detection system 170 by requesting the fraud detection system 170 to blindly sign the information related to the presentation.
In some implementations, the application 112 can send the blind presentation data 201 to the fraud detection system 170. Blind presentation data 201 may include two blind presentation data elements that are to be blind signed by fraud detection system 170. Binding and/or encrypting these data elements protects user privacy by preventing fraud detection system 170 from receiving unencrypted user data and from tracking users.
The first encrypted data element is an encrypted cryptographically hashed version (encrypted-hashed version) of a combination (e.g., concatenation) or some other combination) of a unique Identifier (ID), a destination (dc _ destination), and a report domain (report _ domain) for the application. The first encrypted data element may be defined as a CryptoHash (ID, dc _ destination, report _ domain). The cryptographic hash (hash) in this example may be a one-way cryptographic hash (hash) function that maps tuples (ID, dc _ destination, report _ domain) to hash values.
In one example, the cryptographic hash function is a hash-based message authentication code (HMAC), e.g., HMACSHA256A message code. For example, the first encrypted data element may be: HMAC using ID as key and nesting HMACSHA256(HMACSHA256(ID, dc _ destination), report _ domain). In another example, the first encrypted data element may be: SHA256(ID | | dc _ destination | | | report _ domain). For the purposes of this document, the symbol | | | represents a method of composing a complex message from a simple message, where such a combination is invertible, i.e., a simple message can be extracted back from the complex message. One example approach is to have a serialized/deserialized protocol buffer. Other examples include JavaTMSerialization, JavaScript object notation (JSON), and the like.
The second encrypted data element is presentation data (m)i) And an encrypted version of a combination of data that specifies whether the digital component was clicked (clicked) or otherwise interacted with. For example, the application 112 may generate a complex message (m)iClicked), andand encrypts the complex message using a public key obtained (e.g., extracted (fetch)) from the reporting system 190. The complex message indicates the presentation data, and whether the digital component was clicked on or otherwise interacted with. The application 112 may encrypt the complex message using the public key of the reporting system 190 such that only the reporting system 190 may decrypt the presentation data and the click data using the private key corresponding to (e.g., mathematically linked to) the public key. The reporting system 190 may keep the private key secret so that other entities cannot access the information. The second encrypted data element may be defined as: PubKeyEncrypt (m)i| clicked, report _ domain). In this representation, the inclusion of "report _ domain" after the comma indicates that the public key used to encrypt the complex message is the public key of reporting system 190.
The VOPRF blind signature protocol is particularly advantageous because the amount of information exposed to the fraud detection system 170 should be limited and the application 112 needs to ensure that the signature is valid and does not contain any more information than the signature, wherein the additional information may be used to track the user. For the techniques described in this document, the VOPRF protocol is considered deterministic because it applies functions and does not add arguments to the functions. The application 112 may be aware of the signature scheme to allow signature verification and blinding of the presentation data.
The fraud detection system 170 may send the blind signature presentation data 203 to the application 112. The blind signature presentation data 203 comprises a first encrypted data element and a second encrypted data element, and their respective blind signatures.
The application 112 may generate a key using the first encrypted data element and the blind signature for the first encrypted data element. This key may be referred to as a blind signature join key and may be defined as a blindysignandinedckey (ID, dc _ destination, report _ domain), which in turn represents a CryptoHash (ID, dc _ destination, report _ domain) combined with the blind signature of the first encrypted data element received from fraud detection system 170.
The application 112 may also generate multiple times of encrypted presentation data using the second encrypted data element received from the fraud detection system 170 and the blind signature of the second encrypted data element. For example, the application 112 may encrypt the data element by including a second encrypted data element (PubKeyEncrypt (m))iLroclicked, report _ domain)) and a blind signature of the second encrypted data element, generating twice encrypted presentation data (imprisondata)2). Making Impressondata1Representing single-pass encrypted data (second encrypted data element). The twice encrypted presentation data may be defined as ImpressionData2＝PubKeyEncrypt(ImpressionData1||blind_signature,Si) Wherein blind _ signature represents the blind signature of the second encrypted data element, SiRepresenting the public key of aggregation server 180-a that collected the presentation data. That is, the application 112 may encrypt data (ImpersationData) by one time according to1) And single encrypted presentation data (Impactor data)1) Generates a complex message and encrypts the complex message using the public key of the aggregation server 180-a, generating twice encrypted exposure data (imprisondata)2)。
ImpressionData3p＝PubKeyEncryptProbabilistic(ImpressionData2,Sc)。
at this point, the presentation data is encrypted three times using the public keys from reporting system 190, aggregation server 180-A, and aggregation server 180-B in that order. In this way, the application 112 can securely present the data (ImpersationData) encrypted three times3p) Sent to the aggregation server 180-a with sufficient privacy protection because of the single encrypted exposure data (PubKeyEncrypt (m) of the innermost layeriClick, report _ domain)) protects presentation data m during transmission from application 112 to reporting system 190i. Outmost probabilistic public key encryption using the public key of aggregation server 180-B prevents collusion between reporting system 190, aggregation server 180-a, and digital component distribution system 150, where a colluding party may use a stable blind signature show join key (ID, dc _ destination, report _ domain) and reconfigurable one-time encrypted show data (PubKeyEncrypt)iClick, report _ domain)) to track users across publisher domains. As described below, only if the two aggregation servers 180-A and 180-B are confident (PubKeyEncrypt (m)iRendezvous), aggregate server 180-a and aggregate server 180-B cooperatively decrypt the three encrypted presentation data to discover (PubKeyEncrypt (m)) to be sent independently by each of aggregate server 180-a and aggregate server 180-B to reporting system 190 when all applicable thresholds are reachedi||clicked,report_domain))。
In some embodiments, fraud detection system 170 blindly signs a first encrypted data element using two different keys to generate a blind signature reveal join key (ID, dc _ destination, report _ domain), and a second encrypted data element (impressondata)1) Blind signatures are made. This may prevent a malicious application (e.g., a malicious browser) from requesting a blind signature for exposing data and then claiming itIs a signature for blind signatures to reveal join keys and vice versa.
For each presentation for which presentation data has been recorded, application 112 may upload presentation data (e.g., three times the encrypted presentation data) to aggregation server 180-a. For example, the application 112 may periodically upload multiple encrypted presentation data in bulk (e.g., three times encrypted presentation data). In some implementations, for each presentation, the application 112 uploads a key value pair (key value pair) M i205, wherein the key-value pair M i205 includes a blind signature presentation join key (ID, dc _ destination, report _ domain) for presentation as a key and triple encrypted presentation data (impressontata) as a value3p)。
And uploading the key-value pairs M for each presentation as the presentation occursiThis batch upload has several advantages over other batch uploads. For example, the bulk upload may hide the actual exposure time from aggregation server 180-a to avoid timing-based attacks. This may also reduce the load, e.g., the Query Per Second (QPS) load on aggregation server 180-a. This may also reduce bandwidth and battery consumption of the client device 110 (e.g., if a bulk upload occurs while the mobile device is connected to Wi-Fi and charging). This also allows keys to be selected for each bulk protocol instance that manages cryptographic keys, e.g., if the communication between client device 110 and aggregation server 180-a is over hypertext transfer protocol secure (HTTPS), the same encryption key may be used for the entire bulk.
When the conversion system 172 determines that a true conversion for the client device 110 has occurred, the conversion system 172 can interact with the fraud detection system 170 to determine whether the conversion is valid or fraudulent. For example, the conversion system 172 may obtain the fraud detection signal 211 from the client device 110 and send the fraud detection signal 211 to the fraud detection system 170. The fraud detection system 170 may evaluate the fraud detection signal 211 to determine the following items: whether the conversion is valid or fraudulent, whether the client device 110 is trustworthy (with respect to root rights (rooted), an emulator in the data center, or subject to other intrusion), and/or whether the user's interaction is real.
In the case of a fraud detection signal, the conversion system 172 may also send a third encrypted data element to be blindly signed by the fraud detection system 170 if the conversion is valid. The third encrypted data element may include an encrypted version of a combination of a unique Identifier (ID) for the application 112 and a conversion domain (conversion _ domain) where the conversion occurred. The conversion domain may be a web site where the conversion occurs. Similar to the way the first encrypted data element of the presentation data is encrypted, the data may be encrypted using the public key of the reporting system 190 for conversion. For example, the third encrypted data element may be defined as a CryptoHash (ID, conversion _ domain, report _ domain), and may be encrypted using the same cryptographic hash function as that used to generate the first encrypted data element.
The fraud detection system 170 may blindly sign the third encrypted data element using the same protocol used to blindly sign the presented first encrypted data element. The fraud detection system 170 may then send the blind signature conversion data 212 to the conversion system 172. The blind signature conversion data 212 may include a blind signature of the third encrypted data element and a blind signature of the third encrypted data element. The transformation system 172 may use the blind signature transformation data 212 to generate blind signature transformation keys. The blind signature conversion key (blindysignandiekey) is a combination of the third encrypted data element and the blind signature of the third encrypted data element received from the fraud detection system 170. Thus, if the transition is indeed triggered by a show, dc _ destination at show time and conversion _ domain at transition time will be the same. Thus, the blind signature presentation key will match the blind signature conversion key.
The transformation system 172 may also use transformation metadata m for the transformationcAnd the private key of the conversion system 172 to generate signature conversion data. Conversion metadata mcData related to the transform may be included such as transform type, label, and quantized transform values. The signature conversion data may be defined as PrivateKeySign (m)cConversion _ domain). Based on numberThe word signing algorithm, generating signature transformation data, may include using a private key and a public key to append a digital signature to the transformation metadata. The conversion system 172 may provide the blind signature conversion key and signature conversion data 213 to the application 112.
Encrypted usage protection translation data m in combination with digital signaturescTo avoid tampering and eavesdropping during transmission from conversion system 172 to reporting system 190 through multiple intermediaries (e.g., aggregation server 180-a and aggregation server 180-B). ConversionData to facilitate aggregation and to enforce k-anonymity (k-anonymity) at a later stage1The encryption and digital signature in (1) should be deterministic within the time/batch processing time window in order to map the same plaintext to the same ciphertext.
In some cases, the conversion metadata mcThere may not be much entropy. Thus, single pass transcryption data (ConversionData)1) May have a limited cardinality and may be easily guessed. In this case, by converting the metadata m according tocAnd cryptographic hashes of a conversion domain (conversion _ domain) and a reporting domain (report _ domain) to compose and encrypt the complex message, pseudo entropy (e.g., a cryptographic key based on randomness) may be added to the conversion metadata mc. In this example, single pass transcryption data (ConversionData)1) Can be defined as:
PubKeyEncrypt(PrivateKeySign(mc||HMACSHA256(conversion _ domain, report _ domain), conversion _ domain), report _ domain), wherein, HMACSHA256(conversion _ domain, report _ domain) is a cryptographic hash of the conversion domain and the reporting domain, and adds pseudo entropy. In this example, the private key of the transform domain is used to sign the complex message, and the public key of the report domain is used to encrypt the signed complex message.
For each transformation for which transformation data has been recorded, application 112 may upload the transformation data to aggregation server 180-B. For example, the application 112 may periodically bulk upload multiple times of transcrypted data (e.g., three times of transcrypted data). In some implementations, for each transformation, the application 112 uploads the key-value pair M c215, wherein the key-value pair M c215 includes a blind signature conversion key (ID, conversion _ domain, report _ domain) for conversion as a key and cubic encryption conversion data (conversion data) as a value3Or ConversionData3p). The third (outermost) encryption may use a stable blind signature transfer key and secondary encryption transfer data (C)onversionData2) To prevent aggregation server 180-B from tracking users across multiple domains reporting transitions.
Example MPC Process for decrypting presentation and conversion data
Aggregation server 180-a and aggregation server 180-B may use a multi-step MPC process to aggregate and subsequently decrypt the subset of received data that meets a threshold and/or other privacy preserving criteria and send the report to reporting system 190. This process is illustrated in fig. 3, where fig. 3 is a flow diagram illustrating an example process 300 for determining aggregated transformed data. Process 300 may be implemented, for example, by multiple aggregation servers (e.g., aggregation server 180-a and aggregation server 180-B of fig. 1 and 2).
Aggregation server a and aggregation server B may use exchange encryption technique "H" with exchange attributes. In other words, given an arbitrary message m and two distinct encryption keys K1And K2The exchange encryption technique has the following properties: h (H (m, K)1),K2)＝H(H(m,K2),K1). In other words, exchange encryption involves double encryption using distinct encryption keys, where the order of encryption (which key is used first to encrypt the data) does not matter, as the same result can be achieved in either way.
Each of aggregation server 180-A and aggregation server 180-B may separately select a secret encryption Key pair Keyi(which represents a Key pair) and Keyc(which represents a key pair). Key, as described belowiiOne of them can be used for encrypting the connection Keyi2One of which may be used to encrypt/decrypt the presentation data. Similarly, Keyc1One of which can be used to encrypt the connection Key, and the Keyc2One of which may be used to encrypt/decrypt the converted data. Aggregation server 180-a and aggregation server 180-B may periodically select new key pairs based on a specified time period, per batch of presentation data or conversion data, or based on other suitable criteria.
Aggregation server 180-a receives presentation data (302). For example, aggregation server 180-A may receive batches of presentation data from multiple client devices. As described above, each client device may periodically send batches of presentation data to aggregation server 180-a.
For each presentation, presentation data may be sent in the form of key-value pairs. Each key-value pair may include a blind signature exhibition key (ID, dc _ destination, report _ domain) for exhibition as a key and triple encrypted exhibition data (imprisondata) as a value3p)。
Aggregation server 180-B receives the translation data (304). For example, aggregation server 180-B may receive batches of transformation data from multiple client devices. As described above, each client device may periodically send batches of transformation data to aggregation server 180-B.
For each transformation, the transformation data may be sent in the form of key-value pairs. Each key-value pair may include a blind signature conversion key (ID, conversion _ domain, report _ domain) for conversion as a key and cubic encryption conversion data (conversion data) as a value3p)。
For each show, aggregation server 180-A encrypts the selected encryption Key Key using exchange encryption and exchange encryptioni1The join key (306) is encrypted. In this example, the join key used for the presentation is a blind signed join presentation key (blindysignandkey (ID, dc _ destination, report _ domain)) used for the presentation. Aggregation server 180-a may then provide the encrypted join key and the three times encrypted presentation data to aggregation server 180-B for each presentation. In other words, for each presentation, aggregation server 180-a may send the pair: { H (BlindySignedKey, Key)i1),ImpressionData3p}. The pairs may be transmitted in a random or pseudo-random order.
For each translation, aggregation server 180-B encrypts the selected encryption Key Key using the exchange encryption and the exchangec1The join key (308) is encrypted. In this example, the join key used for the conversion is a blind signature for the conversionA conversion key (blindysignanedckey (ID, conversion _ domain, report _ domain)). Aggregation server 180-B may then provide the encrypted join key and the tertiary encrypted transformation data to aggregation server 180-a for each transformation. In other words, for each presentation, aggregation server 180-B may send the pair: { H (BlindySignedKey, Key)c),ConversionData3p}. The pairs may be transmitted in a random or pseudo-random order.
For each pair of received encrypted join Key and cubic cryptographically transformed data { H (BlindySigneKey, Key)c1),ConversionData3pThe aggregation server 180-a re-encrypts the join key and the translation data (310). In some embodiments, aggregation server 180-A may use its private key (along with public key S)iCorresponding private key) to decrypt the three times encrypted transition data (ConversionData)3p) To recover twice encrypted converted data (ConversionData)2). Aggregation server 180-A may then use its selected encryption Key Keyi2To re-encrypt the twice encrypted converted data (ConversionData)2). For this encryption, a deterministic symmetric encryption technique may be used. The transcryption data may be referred to as ConversionData3’Because the transformed data has been encrypted three times in order deterministically using keys from three domains (reporting system 190, aggregation server 180-B, and aggregation server 180-a).
The aggregation server 180-A may also use its selected encryption Key Keyi2Displaying keys (H (BlindySigneKey, Key) on encrypted blind signatures that have been exchangedc) Exchange encryption is applied above. The result of this step is
For each pair of received encrypted join Key and encrypted triple encrypted reveal data { H (BlindySigneKey, Key)i1),ImpressionData3pThe aggregation server 180-B re-encrypts the join key and the presentation data (312). In some embodiments, aggregation server 180-B may use its private key (along with public key S)cCorresponding private key) to decrypt the three times encrypted presentation data (imprisondata)3p) To recover twice encrypted presentation data (Impactor data)2). Aggregation server 180-B may then use its selected encryption Key Keyc2To re-encrypt the twice-encrypted presentation data (Impressondata)2). For this encryption, a deterministic symmetric encryption technique may be used. This encrypted presentation data may be referred to as Impressondata3’Because the presentation data has been encrypted three times in order deterministically using keys from three domains (reporting system 190, aggregation server 180-a, and aggregation server 180-B).
Aggregation server 180-B may also use its selected encryption Key Keyc2Displaying keys (H (BlindySigneKey, Key) on encrypted blind signatures that have been exchangedi1) Exchange encryption is applied above. The result of this step is
Aggregation server 180-A joins (join) and filters the encrypted exposure and the cryptographically transformed data (314). After receiving the results from aggregation server 180-B, for each presentation, aggregation server 180-A has a result pairing
Since the blind signature key has already been passed through aggregation server 180-A and aggregation server 180-BAre encrypted once using exchange encryption and are thus used to encrypt blind signature keysapplication 112, the domain of the reporting system 190, and the domain of the landing page for the digital component. Thus, aggregation server 180-A may use encrypted blind signature keys
TABLE 1
Aggregation server 180-a may then filter the data to satisfy the k-anonymity criteria. Aggregation server 180-A may determine a unique encrypted blind signature key associated with each of the three times encrypted presentation data
Aggregation server 180-A may associate a distinct encrypted blind signature key with each unique presentation data
Aggregation server 180-A may also determine a unique encrypted blind signature key associated with each of the three transcrypted data
Aggregation server 180-A may associate a distinct encrypted blind signature key with each unique translation data
Aggregation server 180-A may also determine each of the presentation data and the transcryption data associated with the three-time encryptionUnique encrypted blind signature key associated with each combination
Aggregation server 180-a may compare the number of each occurrence of presentation and translation crossing data to a k-anonymity threshold. If the number is below a threshold, aggregation server 180-A may filter the occurrence of exposure and conversion cross data from a table or other data structure.
Aggregation server 180-a may then use the filtered remaining data to generate a new table or data structure, as shown in table 2 below. Each row of Table 2 corresponds to a combination of an occurrence of impressionData3 'and a corresponding occurrence of ConversionData 3'. The table records the number of occurrences of each combination, e.g., a unique encrypted blind signature key associated with each combination
TABLE 2
Presentation and conversion cross-data generation | Triple encrypted presentation data | Triple cryptographically transforming data |
… | ImpressionData3’ | ConversionData3’ |
… | … | … |
Aggregation server 180-B concatenates and filters the encrypted presentation data and the encrypted transformation data (316). After receiving the results from aggregation server 180-A, for each presentation, aggregation server 180-B has a result pairing
Aggregation server 180-B may use the same data to perform the same calculations and filtering as aggregation server 180-a to obtain the same results. That is, aggregation server 180-B may generate a table that matches table 2 generated by aggregation server 180-A.
In some embodiments, both aggregation server 180-a and aggregation server 180-B may perform some optional operation (such as using downsampling) to ensure differential privacy. Differential privacy is a technique for sharing data about a data set by describing group patterns (patterns) within the data set without providing separate data in the data set. To do so, each aggregation server may first sample the data with some probability β (probability beta) (e.g., a row in table 1). The aggregation server then only processes the sampled dataThe k-anonymity generalization (k-anonymity generalization) described above is applied. That is, for each type of occurrence, the aggregation server may determine a unique cryptographic blind signature key
For downsampling (subsampling), to ensure that two aggregation servers duplicate the exact same sample and perform the same differential privacy technique, the aggregation servers may use a pseudorandom-based sample. The randomization of the samples may be determined based on a common seed (common seed) cooperatively determined by the two servers (e.g., using Diffie-Hellman key exchange). The result of the exchange is a seed for the same pseudo-random generator (e.g., a pseudo-random generator based on the Advanced Encryption Standard (AES) algorithm). This ensures that the same subset is sampled in both aggregation servers and the same result will be calculated, since the rest of the process is deterministic once the pseudo-randomness is the same.
After joining and filtering, aggregation server 180-A and aggregation server 180-B both have the same data, e.g., each of which includes { count, ImpersationData }3’,ConversionData3’A table or list of tuples of. The count (count) is the number of the data with the value represented by ImpersationData3’The number of transitions representing presentations of the same presentation data.
For each tuple, the aggregation server 180-A decrypts the triple encrypted transformation data (ConversionData)3’)(318). The aggregation server 180-A may use its selected encryption Key Keyi2To decrypt the three-time encrypted converted data (ConversionData)3’) To obtain { count, ImpedentionData3’,ConversionData2’}. Aggregation server 180-a may send these result tuples to aggregation server 180-B.
Similarly, for each tuple, aggregation server 180-B decrypts the encrypted exposure data (ImpressionData) three times3’)(320). Aggregation server 180-B mayTo use the selected encryption Key Keyc2To decrypt the three times encrypted presentation data (imprisondata)3’) To obtain { count, ImpedentionData2,ConversiodData3’}. Aggregation server 180-B may send these result tuples to aggregation server 180-a.
Aggregation server 180-A decrypts each received result tuple { count, Impactor Data2,ConversionData3’The quadratic encryption of the exhibit data (Impressondata)2) And triple transcrypted data (ConversionData)3’)(322). Aggregation server 180-A may use public key S with aggregation server 180-AiDecrypting twice-encrypted presentation data (Impactor data) with a corresponding private key2) And triple transcrypted data (ConversionData)3’). For each received tuple, the decryption yields the tuple { count, ImpersationData }1,ConversionData2}. Aggregation server 180-A may aggregate these tuples { count, ImppressionData1,ConversionData2Each of which is sent to aggregation server 180-B.
Aggregation server 180-B decrypts each received result tuple { count, Impactor Data3’,ConversionData2Triple-encrypted presentation data (Impressondata)3’) And secondary encryption transformation data (ConversionData)2)(324). Aggregation server 180-B may use public key S with aggregation server 180-BcDecrypting three times of encrypted presentation data (ImpressionData) by corresponding private key3’) And secondary encryption transformation data (ConversionData)2). For each received tuple, the decryption yields the tuple { count, ImpersationData }2,ConversionData1}. Aggregation server 180-B may aggregate these tuples { count, ImppressionData2,ConversionData1Each of which is sent to aggregation server 180-a.
Aggregation server 180-A decrypts each received tuple { count, ImpersationData2,ConversionData1Shows data (326). Aggregation server 180-A uses public key S with aggregation server 180-AiCorrespond toTo decrypt each received tuple count, imprisondata2,ConversionData1The display data of. For each received tuple, the decryption yields the tuple { count, ImpersationData }1,ConversionData1}。
In this tuple, the presentation data (Impactor data)1) Is (PubKeyEncrypt (m)iA click, report _ domain) a blind _ signature), and thus includes presentation data encrypted using the public key of reporting system 190 and the blind signature of the second data element generated at the time of presentation. Conversion data (ConversionData)1) Is PubKeyEncrypt (PrivateKeySign (m)cConversion _ domain), and thus includes conversion data encrypted using the public key of the reporting system 190.
Aggregation server 180-B decrypts each received tuple { count, ImpersationData1,ConversionData 2328. Aggregation server 180-B uses public key S with aggregation server 180-BcThe corresponding private key decrypts each received tuple { count, ImpersationData }1,ConversionData2The converted data of. For each received tuple, the decryption yields the tuple { count, ImpersationData }1,ConversionData1}。
Similar to the tuple decrypted by aggregation server 180-A, in the tuple, the exposure data (Impressondata)1) Is (PubKeyEncrypt (m)iA click, report _ domain) a blind _ signature), and thus includes presentation data encrypted using the public key of reporting system 190 and the blind signature of the second data element generated at the time of presentation. Conversion data (ConversionData)1) Is PubKeyEncrypt (PrivateKeySign (m)cConversion _ domain), and thus includes conversion data encrypted using the public key of the reporting system 190.
For each decrypted tuple, aggregation server 180-a sends a conversion report to reporting system 190(330) for the tuple. Similarly, for each decrypted tuple, aggregation server 180-B sends a conversion report to reporting system 190 for the tuple (332). The conversion report may include the decrypted tuple or data included in the decrypted tuple.
Aggregation server 180-A and aggregation server 180-B may obtain the URL for the reporting system for each tuple, and thus each transformation, in various ways. In one example, the application 112 where the exposure occurs may send a report _ domain (e.g., a URL for the reporting system 190) in clear text to the aggregation server 180-a (e.g., at the time of the exposure and as a key-value pair M)iSection (1). Similarly, the application 112 where the translation occurs may send the report _ domain in the clear to the aggregation server 180-B (e.g., at translation time and as a key-value pair M)cPart(s).
In another example, a browser developer (or application developer) may publish a whitelist of allowed reporting systems 190 and their report _ domains. The browser (or application) may download the whitelist periodically and apply the whitelist to send the conversion report.
In another example, the browser or application may encrypt the report-domain using (t, n) -threshold encryption techniques and send the encrypted report-domain to aggregation server 180-A and aggregation server 180-B. In this example, aggregation server 180-A and aggregation server 180-B can recover a clear text report-domain only if at least t browsers or applications report the same report-domain. In another example, the derivation of the report-domain (derivation) may be used in (t, n) -threshold encryption techniques, for example, if the report-domain does not have sufficient entropy. For example, the derivation may be a combination of report-domain and a cryptographic hash of the landing page for the digital component.
Returning to fig. 2, for each pair of single encryption transformation data (imprisondata)1) And PubKeyEncrypt (PrivateKeySign (m)cConversion _ domain), report _ domain), reporting system 190 receives two conversion reports 127 and 128 from aggregation server 180-a and aggregation server 180-B. For each combination of presentation and conversion, each of conversion report 127 and conversion report 128 may include the number of combinations in the filtered data, e.g., as derived from the tables described above. For the same batch of presentation data and transformation data, clusteringThe data in the conversion report 127 received by the rendezvous server 180-A should match the data in the conversion report 128 received from the aggregation server 180-B. The reporting system 190 may compare the two quantities to identify differences to look for potential signs of malicious behavior.
The reporting system 190 may also invoke the fraud detection system 170 to verify the blind signature on the presentation data. The reporting system 190 may then decrypt the transcrypted data using its own private key. The reporting system 190 may then verify the digital signature on the converted data using the public key of the conversion system. If both verifications are successful, the reporting system 190 can be confident that the transformed measurement data is valid.
The recipient of the conversion report should be able to trust the data in the conversion report. The above-described technique of comparing the conversion reports received from the two aggregation servers 180-a and 180-B and verifying the blind signature may prevent most fraud in the conversion report route (pipeline). However, two aggregation servers may collude to modify the transition count. To prevent such collusion, transformation server 172 may encrypt and digitally sign the transformation data prior to providing the transformation data to client device 110. For example, the transformation system 172 may encrypt and digitally sign the transformed data using asymmetric additive homomorphic encryption of the preserved signature or another signature technique of the preserved structure. In this manner, the digital signature is preserved after three encryptions (or otherwise multiple encryptions) are performed, as described above. This encryption prevents aggregation server 180-A and aggregation server 180-B from accessing the translation data and enables the recipient to verify the digital signature to verify that the translation data has not been modified. As described below, when the converted values are included in the converted data, each of the converted values may be encrypted and signed in a similar manner.
The transition reporting techniques described above may support various types of transition events. To support click-to-click and browse-to-browse conversions for the same browser (or the same application), the browser or application may select a unique Identifier (ID) randomly generated within the browser (or within the application) that is dedicated to the conversion measurements.The browser (or application) can calculate the blindysignanedckey (ID, conversion _ domain, report _ domain) at the time of presentation and conversion. To distinguish between click-to-click and browse-to-browse conversions, a browser or application may use both the Boolean variable clicked and the show data m at the time of the showiTo encode whether the user interacts with the digital component. In other implementations, the browser or application may encode the type of user interaction with the digital component, e.g., muting the digital component, filling out a survey, etc.
To support the same device translation between an application and a web browser, both the browser and the application may report the presentation and translation using a device-level randomly generated unique Identifier (ID) (e.g., generated by the operating system of the device). Further, if the conversion occurs in an application, rather than a web browser, conversion _ domain may be the name of the application or an application developer certificate identifying the application.
To support cross-device translation (e.g., presentation occurs on one device of a user and translation occurs on a different device of the user), the unique Identifier (ID) may be or be based on information about the user. For example, the unique Identifier (ID) may be a cryptographic hash of the user's login credentials, a phone number or email address provided by the user, or other personally identifiable information provided by the user. For example, a user may log into a mobile application. The same user may log into the publisher's website using the mobile application's login credentials. The same login credentials may be used as a user Identifier (ID) for cross-device conversions that occur between the website and the mobile application.
FIG. 4 is a flow diagram illustrating another example process 400 for determining aggregate transformation data. For example, process 400 may be implemented by multiple aggregation servers (e.g., aggregation server 180-a and aggregation server 180-B of fig. 1 and 2).
First aggregation server 180-a receives presentation data from a plurality of client devices (402). For each presentation of a digital component recorded by a client device, the presentation data may include a first key-value pair. The first key-value pair for the presentation may comprise a first key based on a unique identifier of the client device or an application on the client device for which the presentation occurred. For example, the first key for presentation may be a blind signature presentation key and may be defined as a blindysignanedjey (ID, dc _ destination, report _ domain) received from the client device, as described above.
The first key-value pair for the presentation may further comprise a first value, wherein the first value comprises encrypted presentation data that has been encrypted using a first public key of a first aggregation server and using a second public key of a second aggregation server different from the first aggregation server. For example, the first value may be three times encrypted presentation data (imprisondata) received from the client device3)。
The second aggregation server receives translation data from at least a portion of the plurality of client devices (404). For each transformation recorded by the client device, the transformation data may include a second key-value pair, where the second key-value pair includes a second key based on a second unique identifier of the client device or an application on the client device for which the transformation occurred. For example, the second key used for conversion may be a blind signature conversion key (blindysignanedckey) received from the client device.
The second key-value pair for conversion may include a second value, wherein the second value includes transcrypted data that has been encrypted using the first encryption key and the second encryption key. For example, the second value may be three times cryptographically transformed data (ConversionData) received from the client device3)。
Aggregation server 180-a and aggregation server 180-B perform an MPC process to concatenate the encrypted presentation data and the transcrypted data, filter the concatenation results, and then decrypt the subset of the encrypted presentation data and transcrypted data that meet the privacy protection criteria (406). The MPC process may comprise: based on the first key and the second key, the cryptographically transformed data and the corresponding cryptographically presented data pair are identified. Then, for each pair of encrypted presentation data and transformation data, the presentation data and transformation data may be decrypted in multiple stages using a first private key corresponding to the first public key and a second private key corresponding to the second public key. Each stage may include: one of the first aggregation server and the second aggregation server decrypts one of the encrypted presentation data and the transcrypted data in each pair of the encrypted presentation data and the corresponding encrypted presentation data, and transmits the resultant data to the other of the first aggregation server and the second aggregation server. The MPC process may be the same as or similar to the process 300 shown in fig. 3 and described above.
Each portion of the decrypted presentation data and each portion of the decrypted translation data are sent to a respective reporting system (408). For example, each of aggregation server 180-A and aggregation server 180-B may send the conversion report to a respective reporting system, as described above.
Verifying the integrity of data for each aggregation server
As described above, at the start of process 300, for each presentation, aggregation server 180-A receives presentation data (M) in the form of key-value pairsi). Presentation data for triple encryption (Impactor data)3p) Each key-value pair may include a blind signature reveal key (blindysignanedckey (ID, dc _ destination, report _ domain)) for the reveal. Triple-encrypted presentation data (Impactor data)3p) Is probabilistic encryption using the public key of aggregation server 180-B. Thus, no other party than aggregation server 180-B can decrypt the triple encrypted presentation data (Impressondata)3p) Wherein the triple encrypted presentation data may be a cryptographic random number for all servers except aggregation server 180-B.
Further, no other party, other than the application 112, knows the plaintext value of the user Identifier (ID). The only information that a colluding party can recover is that anonymous users behind a blind signature show key (blindysignedkey) have a number of shows whose characteristics are unknown. The colluding party cannot infer the total number of impressions that the application 112/client device 110/user has seen, since the appearance of the entire digital component is fragmented (shard) by the destination (dc _ destination) and the reporting domain (report _ domain).
If a problem is known with the number of presentations displayed to the user in association with the blind signature presentation key (ID, dc _ destination, report _ domain), the application 112 may repeatedly send out presentation data (M) for a presentation in a random or pseudo-random timei). Suppose that the encrypted presentation data (Impressondata) is generated three times3p) When probabilistic encryption is applied, aggregation server 180-a and any colluding parties cannot duplicate data cancellation (duplicate) of the received exposure data. However, aggregation server 180-B may encrypt the presentation data three times after decryption (ImpressionData)3p) Then, the repeated data elimination is carried out on the exhibition so as to recover the twice encrypted exhibition data (Impresensitiondata)2)。
As described above with reference to process 300, at the beginning of step 310 of process 300, aggregation server 180-A receives the pair { H (BlindySigneKey, Key) from aggregation server 180-Bc),ConversionData3pWherein the pair cannot match the content the aggregation server 180-a has in step 302, i.e., the key-value pair { (blindiysignanedjkey (ID, dc _ destination, report _ domain)), ImpressionData3pAnd (5) connecting. In addition, the blind signature Key H (BlindySigneKey, Key)c) May only be valid for each execution of the MPC process and the aggregation server 180-B may discard the selected Key after each executionc1Key of harmony Keyc2. Aggregation server 180-A may use its public key to decrypt the thrice cryptographically transformed data (ConversionData)3p) To recover twice encrypted converted data (ConversionData)2). At this time, the aggregation server 180-A has H (BlindySigneKey, Key)c) And secondary encryption transformation data (ConversionData)2) Both of which are encrypted and only aggregation server 180-B has the decryption key. In the case where aggregation server 180-B is honest, aggregation server 180-A cannot do things that compromise user privacy.
At the beginning of step 314 of process 300, for each presentation, aggregation server 180-A receives a twice-encrypted blind signature join key from aggregation server 180-B
Fig. 5 is a flow diagram illustrating an example process 500 for verifying the integrity of data. In particular, the process 500 may be performed by one of the aggregation server 180-A and the aggregation server 180-B to verify the integrity of data received from the other of the aggregation server 180-A and the aggregation server 180-B during an MPC process described in this document (e.g., the MPC process of FIGS. 3 and 4 or an MPC process described below). For ease of description, process 500 is described in terms of aggregation server 180-B verifying the integrity of data received from aggregation server 180-A. However, aggregation server 180-A may perform a similar process to verify the integrity of the data received from aggregation server 180-B.
This process 500 may be used to prevent various types of fraud, including the following: one of aggregation server 180-A and aggregation server 180-B is in communication with fraud detection system 172, conversion system 172, and reporting system 190.
Aggregation server 180-B validates the data received from aggregation server 180-a (502). Aggregation server 180-B may perform step 502 as part of step 324 of process 300. As described above with reference to step 318 of FIG. 3, aggregation server 180-A may be of the form { count, ImpersationData }3’,ConversionData2’The tuple of { is sent to aggregation server 180-B. Aggregation server 180-B may encrypt the transcenderdata of the secondary encryption transformation in each tuple2’To generate three times of cryptographically transformed data Conv for each tupleersionData2’. Because the data ConversionData is converted by three times of encryption3Made possible by the definition of (1), which converts data ConversionData for three encryptions using the public key of the aggregation server 180-a3The result of the deterministic public key encryption is performed.
Aggregation server 180-B may send each received tuple { count, ImpersationData }3’,ConversionData2’The { count, Impressondata } transform is transformed into { count, Impressondata3’,ConversionData3’And after applying thresholding and downsampling to achieve k-anonymity and differential privacy, the resultant data set generated by the aggregation server 180-B in step 316 of fig. 3 is compared. For example, aggregation server 180-B may aggregate the tuple { count, ImpersationData3’,ConversionData3’Compare with the rows of table 2. If the two data sets match, aggregation server 180-B may be confident that aggregation server 180-A has honestly performed the cryptographic protocol until step 322 of FIG. 3. Otherwise, aggregation server 180-B may prematurely end the MPC process and/or report a possible failure of aggregation server 180-A.
As described above with reference to process 300, at the beginning of step 322, aggregation server 180-A receives data from aggregation server 180-B in the form of a { count, Impactor data }2,ConversiodData3’The tuple of. After applying thresholding and downsampling, aggregation server 180-A may obtain its own data set generated in step 314 of process 300. The data set includes data of the form { count, ImpersationData }3’,ConversiodData3’The row (e.g., the row in table 2) or tuple. Aggregation server 180-A may use these data to infer triple encrypted exposure data (Impressondata) for both data sets3’) And twice encrypted presentation data (Impactor data)2) To be mapped between.
Similar to aggregation server 180-B, aggregation server 180-A may verify the triple encrypted exposure data (ImpressionData) using the public key of aggregation server 180-B3’) It is true that the presentation data (Impresensitiondata) is presented for the second encryption2) Performing deterministic public key encryptionThe result of (1). However, due to the design of the public key encryption algorithm, triple encrypted exposure data (imprisondata) is given3’) And twice encrypted presentation data (Impactor data)2) In the case of a mapping between aggregation server 180-a, the private key of aggregation server 180-B cannot be recovered by aggregation server 180-a. The worst thing aggregation server 180-A can do is to send a dummy data tuple { count', ImpressonData ] to aggregation server 180-B1’,ConversionData2', instead of the actual data tuple { count, Impactor data }1,ConversionData2}。
Aggregation server 180-B verifies the integrity of the data received from aggregation server 180-a (504). Aggregation server 180-B may encrypt the exposure data (Impressondata) using a deterministic public key algorithm and the public key of aggregation server 180-A1) Re-encryption into twice-encrypted presentation data (ImpressionData)2). The aggregation server 180-B may convert the secondary encrypted data (ConversionData) using a deterministic public key algorithm and the public key of the aggregation server 180-A2) Re-encryption is triple-encrypted presentation data (ConversionData)3). Aggregation server 180-B may then use the encryption result to encrypt each tuple { count, ImpersationData, received from aggregation server 180-A in step 322 of process 3001,ConversionData2The transform is of the form of a tuple { count, Impactor data }1,ConversionData2The tuple of.
Aggregation server 180-B may then compare the resultant dataset for the tuple with the dataset that aggregation server 180-B generated in step 320 of process 300 and sent to aggregation server 180-a. If the two data sets match, aggregation server 180-B may be confident that aggregation server 180-A has honestly performed cryptographic protocols so far in the MPC process of process 300. Otherwise, aggregation server 180-B may prematurely end the MPC process and/or report a possible failure of aggregation server 180-A.
As described above with reference to process 300, at the beginning of step 326 of process 300, aggregation server 180-A receives tuples from aggregation server 180-B{count,ImpressionData2,ConversionData1}. If the aggregation server 180-A did not honestly encrypt the twice-encrypted presentation data (ImpressionData) in step 326 of process 3002) Decryption into single-pass encrypted presentation data (Impresensitiondata)1) And will correct tuple { count, Impactor Data1,ConversionData1Sent to reporting system 190, reporting system 190 will find a difference between the two converted reports received from aggregation server 180-a and aggregation server 180-B. Reporting system 190 can report the discrepancy to at least one of aggregation server 180-a and aggregation server 180-B. In the event that aggregation server 180-A is not in collusion with reporting system 190, the most important information that aggregation server 180-A may reveal to reporting system 190 (which is able to understand the leaked information) includes the histogram of the counts and the translation data for each tuple. However, the user privacy of this data is protected by the threshold requirements and differential privacy downsampling applied in steps 314 and 316 of process 300.
Generating a sequence of presentations and conversions
FIG. 6 is a flow diagram illustrating an example process 600 for generating a chronological sequence of events while protecting user privacy. The process 600 may be used to generate a chronological sequence of presentations and/or conversions, where the chronological sequence may be used to support different conversion attribution models, such as last click attribution or rule-based attribution. Process 600 may be performed by aggregation server 180-A and aggregation server 180-B.
Similar to process 300, each of aggregation server 180-A and aggregation server 180-B may separately select a secret cryptographic Key pair Keyi(which represents a Key pair) and Keyc(which represents a key pair). Aggregation server 180-A may also select a secret Keyi,skew. Similarly, aggregation server 180-B may select a secret Key Keyc,skew. Aggregation server 180-a and aggregation server 180-B may periodically select new keys based on a specified time period, each batch of presentation data or conversion data, or based on other suitable criteria.
Aggregation server 180-a receives presentation data (602). In this example, the presentation data for each presentation may include a blind signature presentation key (ID), triple encrypted presentation data (impressedata), and a blind signature presentation key (ID)3p) And presentation time data (Impressontime)2). The blind signature presentation key and the triple encrypted presentation data may be the same as or similar to the blind signature presentation key and the triple encrypted presentation data of process 300. The presentation time data represents the time at which the presentation occurred and may be encrypted.
Presentation time data (Impressontime)2) The public key S of aggregation server 180-A may be usediAnd the public key of aggregation server 180-B. For example, presentation time data (Impressontime)2) Can be defined as (PubKeyEncrypt (T (T))m+tdevice),Si),Sc). In this example, tmIs the time of the presentation or click (e.g., the time of presentation or interaction with the digital component), and tdeviceIs the clock skew of the client device 110 on which the application 112 rendering the digital component is installed. In this example, the sum of the two times uses the encryption technique T and the public key S of the aggregation server 180-AiTo be encrypted. The encryption technique T may be a homomorphic additive probabilistic public key encryption technique (e.g., pailier (Paillier) cryptography system). The encrypted value then uses the public key S of the aggregation server 180-BcTo be encrypted. The second encryption may be a deterministic or probabilistic encryption technique.
Aggregation server 180-B receives the translation data (604). In this example, the conversion data may include a blind signature conversion key (ID, conversion _ domain, report _ domain), triple encryption conversion data (conversion data)3p) And conversion time data (ConversionTime)2). The blind signature transformation key and the tertiary transcryption data may be the same as or similar to the blind signature transformation key and the tertiary transcryption data of process 300. The conversion time data indicates the time when the conversion occurred and may be encrypted.
Converting time data(ConversionTime2) The public key S of aggregation server 180-A may be usediAnd public key S of aggregation server 180-BcTo encrypt twice. For example, conversion time data (ConversionTime)2) Can be composed of (PubKeyEncrypt (T (z)n+tdevice),Sc),Si) And (4) showing. In this example, znIs the conversion time (e.g., the time at which the conversion is complete), and tdeviceIs the clock skew of the client device 110 on which the application 112 rendering the digital component is installed. In this example, the sum of the two times uses the encryption technique T and the public key S of the aggregation server 180-BcTo be encrypted. The encryption technique T may be a homomorphic additive probabilistic public key encryption technique (e.g., Paillier cryptosystem). The encrypted value then uses the public key S of the aggregation server 180-AiTo be encrypted. The second encryption may be a deterministic or probabilistic encryption technique.
For each show, aggregation server 180-A uses the exchange encryption and its selected encryption Key Keyi1The join key is encrypted (606). Similar to process 300, the join key used for the presentation may be a blind signed join presentation key (blindysignanedckey (ID, dc _ destination, report _ domain)) used for the presentation. Aggregation server 180-A may then concatenate the encrypted join key, triple encrypted presentation data (Impressondata), for each presentation3p) And twice-encrypted presentation time data (imprisontime)2) To aggregation server 180-B. In other words, for each presentation, aggregation server 180-a may send a tuple: { H (BlindySignedKey, Key)i1),ImpressionData3p,ImpressionTime2}. The tuples may be sent in a random or pseudo-random order.
For each translation, aggregation server 180-B uses the exchange encryption and its selected encryption Key Keyc1The join key is encrypted (608). Similar to process 300, the join key used for the conversion is a blind signature conversion key (blindysignanedckey (ID) used for the conversion). Aggregation server 180-B may then concatenate the encryption with the key three times for each translationCryptographic conversion data (ConversionData)3p) And secondary transcryption time data (ConversionTime)2) Is provided to aggregation server 180-a. In other words, for each transformation, aggregation server 180-B may send a tuple: { H (BlindySignedKey, Key)c),ConversionData3p,ConversionTime2}. The tuples may be sent in a random or pseudo-random order.
For each received tuple, aggregation server 180-A decrypts the translation time data (610). Aggregation server 180-A may use public key S with aggregation server 180-AiCorresponding private key to decrypt transition time data (ConversionTime)2). The decryption recovers (T (z)n+tdevice),Sc)。
The aggregation server 180-A may also use its selected encryption Key Keyi2Key H (BlindySignedKey) is shown on encrypted blind signatures that have been exchangedc) The exchange encryption is applied. The result is to encrypt the blind signature key
Aggregation server 180-A may calculate a time skew value (time _ skew)i). For example, aggregation server 180-A may compute a secret Keyi,skewAnd an HMAC (e.g., HMAC) that encrypts the blind signature translation keySHA256(Keyi,skew,
Aggregation server 180-A may then generate a single-pass transcryption time data (ConversionTime) for each received tuple1). In some embodiments, single-pass transcryption time data (ConversionTime)1) Is to use a homomorphic additive probabilistic public key encryption technique T (e.g., T (z)n+tdevice+time_skewi,Sc) Generated. In this example, the time of transition (z)n) Clock skew (t) of client devicedevice) And a time offset value (time _ skew)i) Using the public key S of the aggregation server 180-BcTo be encrypted.
Aggregation server 180-A may also decrypt and re-encrypt the thrice encrypted transformation data (ConversionData), as described above with reference to step 310 of process 3003p). That is, aggregation server 180-A may use its private key (along with public key S)iCorresponding private key) to decrypt the three times encrypted transition data (ConversionData)3p) To recover twice encrypted converted data (ConversionData)2). Aggregation server 180-A may then use its selected encryption Key Keyi2To re-encrypt the twice encrypted converted data (ConversionData)2) To obtain triple encrypted converted data (ConversionData)3p)。
For each unique cubic encrypted converted data (ConversionData)3p) Aggregation server 180-A may determine the data to be converted from the third encryption (ConversionData)3p) Associated unique encrypted blind signature conversion key
For each received tuple, aggregation server 180-B decrypts the presentation time data (612). Aggregation server 180-B may use public key S with aggregation server 180-BcDecrypting presentation time data (Impressontime) with a corresponding private key2). The decryption recovers (T (T)m+tdevice),Si)。
Aggregation server 180-B may also use its selected encryption Key Keyc2In the exchange of encrypted blind signature conversion keys H (BlindySigneKey, Key)i) The exchange encryption is applied. The result is to encrypt the blind signature key
Aggregation server 180-B may calculate a time skew value (time _ skew)c). For example, aggregation server 180-B may compute a secret Keyc,skewAnd an HMAC (e.g., HMAC) that encrypts the blind signature translation keySHA256(Keyc,skew,
Aggregation server 180-B may then generate a single-pass encrypted showtime data (ImpressionTime) for each received tuple1). In some embodiments, the single encryption converts time data (imprisontime)1) Using homomorphic additive probabilistic public key encryption technique T (e.g., T (T)m+tdevice+time_skewc,Si) ) is generated. In this example, time (t) is presentedm) Clock skew (t) of client devicedevice) And a time offset value (time _ skew)c) Using the public key S of the aggregation server 180-AiTo be encrypted.
Aggregation server 180-B may also decrypt and re-encrypt the three times encrypted presentation data (ImpressionData), as described above with reference to step 312 of process 3003p). That is, aggregation server 180-B may use its private key (along with public key S)cCorresponding private key) to decrypt the three times encrypted presentation data (imprisondata)3p) To recover twice encrypted presentation data (Impactor data)2). Aggregation server 180-B may then use its selected encryption Key Keyc2To re-encrypt the twice-encrypted presentation data (Impressondata)2) To obtain triple encrypted presentation data (Impactor data)3p)。
Presentation data (Impactor data) encrypted for each unique three times3p) Aggregation server 180-B may determine to encrypt the presentation data (ImpersationData) three times3p) Associated unique encrypted blind signature conversion key
Aggregation server 180-a concatenates and filters the encrypted presentation and transcrypted data received from aggregation server 180-B (614). Aggregation server 180-A may curl tuples received from aggregation server 180-Bstep 610
Since the application 112 may report multiple shows for the same digital component, the blind signature key is used for each encryption
Aggregated servicesThe device 180-A may present a time (ImpressionTime)0) Is determined as tm+tdevice+time_skewc+time_skewi. Presentation data for joins (Impactor data)3p) And conversion data (ConversionData)3p) For each combination of (a), aggregation server 180-a may determine a unique cryptographic blind signature keyprocess 300.
Aggregation server 180-B also couples to and filters the encrypted presentation data and the encrypted transformation data received from aggregation server 180-a (616). Aggregation server 180-B may curl tuples received from aggregation server 180-A
For a key with the same encrypted blind signature key (c: (b))
Aggregation server 180-B may convert time (ConversionTime)0) Is determined as zn+tdevice+time_skewi+time_skewc. Presentation data for joins (Impactor data)3p) And conversion data (ConversionData)3p) For each combination of (a), aggregation server 180-B may determine a unique cryptographic blind signature keyprocess 300.
At this point, both aggregation server 180-A and aggregation server 180-B may use the encrypted blind signature key
Aggregation server 180-a generates a presentation and a converted time sequence (618). For each unique encrypted blind signature key
Aggregation server 180-B generates a presentation and a time order for the conversion (620). For each unique encrypted blind signature key
Since each unique encryption blind signature key
These time sequences enable aggregation server 180-A and aggregation server 180-B to independently perform the attribution process to attribute the conversion to the presentation. For example, in the last click attribution model, aggregation server 180-A and aggregation server 180-B may identify the last impression of the click before the conversion included in the sequence and attribute the conversion to the last impression. Aggregation server 180-a and aggregation server 180-B may also verify each other's results (e.g., by comparing their results to the results of the other aggregation server). Although not shown in FIG. 6, aggregation server 180-A and aggregation server 180-B may work together to decrypt the presentation and transform data, as described above with reference to steps 318-332 of FIG. 3. Aggregation server 180-a and aggregation server 180-B may report the attribution along with other data in a conversion report.
Some additional steps may be taken to prevent or detect time interval based attacks. For the same encrypted blind signature key
One option to thwart these time interval based attacks is to use a monotonically increasing function Γ, where the monotonically increasing function has the following properties. Given two arbitrary numbers a and b, the two values a-b and Γ (a) - Γ (b) are uncorrelated. That is, knowing a-b does not help predict Γ (a) - Γ (b), and vice versa.
By means of the function Γ, presentation time data (imprisontime) may be presented2) Defined as PubKeyEncrypt (T (T)m+tdevice),Si),Sc). In this example, δ'm＝Γ(tm+1+tdevice+skew)-Γ(tm+tdevice+ skew). Thus δ'm≠δmAnd time interval based attacks are corrupted.
Another option for thwarting time interval based attacks is to modify the process 600 to include a dedicated time server 192. At the start of process 600, aggregation server 180-A receives a message of the form { BlindlysignedKey (ID, dc _ destination, report _ domain), ImpersationData3p,T(tm+tdevice,Stime) The display data of. In this example, the presentation/click time tmClock skew t of sum devicedeviceThe sum of (a) uses the public key S of the time server 192timeTo be encrypted. For example, application 112 or client device 110 may use public key StimeTo encrypt the time data. Similarly, aggregation server 180-B receives a message in the form of a { BlindlysignedKey (ID, conversion _ domain, report _ domain), conversion data3p,T(zn+tdevice,Stime) The converted data of. In this example, the transition time znClock skew t of sum devicedeviceThe sum of (a) uses the public key S of the time server 192timeTo be encrypted. For example, application 112 or client device 110 may use public key StimeTo encrypt the time data.
In a modified step 606, aggregation server 180-A may instead take the form of { H (BlindySigneDoKey, S)i),ImpressionData3p,T(tm+tdevice,Stime) The tuple of { is sent to aggregation server 180-B. That is, aggregation server 180-A may use secret key SiThe blind signature key is encrypted and the presentation and time data is passed as is.
Similarly, in modified step 608, aggregation server 180-B may instead be of the form { H (BlindySignedKey, S)c),ImpressionData3p,T(zn+tdevice,Stime) The tuple of { is sent to aggregation server 180-a. That is, aggregation server 180-B may use secret key ScThe blind signature key is encrypted and the presentation and time data is passed as is.
In a modified step 610, aggregation server 180-A may generate a message of the form { H (BlindySignedKey), ConversionData3,T(zn+tdevice+time_skewi,Stime) And sends it to aggregation server 180-B. In this example, the conversion data (ConversionData) is paired3p) Probabilistic encryption of applications is replaced with deterministic encryption to create (ConversionData)3). In addition, aggregation server 180-A may add random noise to the encrypted presentation time, where the noise is according to H (BlindySignedKey) and secret key SiTo be obtained. Similarly, in step 612, aggregation server 180-B may generate an InpresidentData of the form { H (BlindlysignedKey) }3,T(tm+tdevice+time_skewc,Stime) And sends it to aggregation server 180-a.
In modified step 614, aggregation server 180-A may join and filter the data sets as described above with reference to original step 614 of process 600. Aggregation server 180-A may determine an encrypted exposure time value (Impressontime)3_skew) Rather than to show the time (ImpressionTime)0) Is determined as tm+tdevice+time_skewc+time_skewi. For example, the encryption shows a time value (imprisontime)3_skew) Can be defined as T (T)m+tdevice+time_skewc+time_skewi,Stime). That is, the encryption shows a time value (ImpressionTime)3_skew) Is a public key S using homomorphic additive probabilistic public key cryptography T and a time server 192timeThe sum of the encrypted time values.
Presentation data for joins (Impactor data)3) And conversion data (ConversionData)3) For each combination of (a), aggregation server 180-a may determine a unique cryptographic blind signature key
In modified step 616, aggregation server 180-B may join and filter the data sets as described above with reference to original step 616 of original process 600. Aggregation server 180-B may determine a crypto conversion time value (ConversionTime)3_skew) Rather than converting time (Conversio)nTime0) Is determined as zn+tdevice+time_skewc+time_skewi. For example, a crypto conversion time value (ConversionTime)3_skew) Can be defined as T (z)n+tdevice+time_skewc+time_skewi,Stime). That is, the crypto conversion time value (ConversionTime)3_skew) Is a public key S using homomorphic additive probabilistic public key cryptography T and a time server 192timeThe sum of the encrypted time values.
Presentation data for joins (Impactor data)3p) And conversion data (ConversionData)3) For each combination of (a), aggregation server 180-B may determine a unique cryptographic blind signature key
At this point, both aggregation server 180-A and aggregation server 180-B may use the encrypted blind signature key
By blindly signing the key with the same or multiple encryption
As such, the time server 192 cannot access any user data. Time server 192 may not even have access to the purpose of the triple skew time value, or whether the set of triple skew time values is the same as the encrypted blind signature key
For each record, aggregation server 180-A may pair the exposure data (ImpressionData) using an index to the encryption time value corresponding to the data3) And conversion data (ConversionData)3) And (6) sorting. With this ordering, aggregation server 180-A may perform an attribution process to attribute the transformation to the presentation, as described above. Aggregation server 180-B may perform the same process to assign an index to the encrypted time value and interact with time server 192 to sort the data for attribution. When aggregation server 180-A and aggregation server 180-B have both completed the process, aggregation server 180-A and aggregation server 180-B may compare the results.
Data driven attribution
The MPC process described in this document (e.g., the process 300 of fig. 3) may be adapted to support Data Driven Attribution (DDA). The data-driven attribution provides credit to the digital component, the activity, and/or the search keyword for conversion based on the user's actions. For example, the DDA may use the conversion data to calculate the actual contribution of each key over the conversion path that resulted in the conversion. This works by reporting the complete path that reached the aggregation threshold to the reporting system 190 for subsequent processing to apply credits.
FIG. 7 is a flow diagram illustrating an example process 700 for attributing a transition to a presentation using data driven attribution. Process 700 may be performed by aggregation server 180-a and aggregation server 180-B of fig. 1 and 2.
To track the DDA, the digital component and/or conversion system 190 may notify the application 112 of the client device 110 to enable the DDA (702). When DDA is enabled, the application 112 may modify the definition of the blind signature join key to account for whether the digital component is clicked or otherwise interacted with. For clicked impressions of a digital component, the application 112 may modify the definition of a blind signature impression key (BlindlySignedKey (ID, dc _ destination, report _ domain)) for each impression to BlindlySignedKey (ID | | | clicked, dc _ destination, report _ domain). In this definition, the blind signature reveal key is a complex message that includes a one-way cryptographic hash function that maps the complex message (ID) clicked, dc _ destination, report _ domain) to a blind signature (blind _ single) and hash value for the blind signature reveal key. In case the DDA only considers clicked (or interacted with) impressions, the parameter clicked will always be true (true) or have a value of 1.
Presentation data and transformation data are received (704). For example, as described above, aggregation server 180-A may receive presentation data and aggregation server 180-B may receive conversion data (e.g., in bulk). When application 112 reports a presentation as described above, application 112 may include a blind signed joining key (BlindySigneDoKey) and triple encrypted presentation data (ImpressonData)3p) Display data MiTo the aggregation server 180-A. Similarly, when the application 112 reports the conversion as described above, the application 112 may include a blind signed joining key (blinsignedkey) and cubic encrypted conversion data (ConversionData)3p) Is converted into data McTo aggregation server 180-B. In this example, the blind signature key is a modified version that takes into account the parameter clicked.
A sequence of presentations and conversions is generated (706). Before generating the sequence, each of aggregation server 180-A and aggregation server 180-B may join and filter the data, as described above with reference to steps 306-316 of process 300. After completion of the join and filtering, each aggregation server has a record of the form: { ImpersationData3,1,ImpressionData3,2,ImpressionData3,i…,ConversionData3}. In this form, presentation and conversion may be ordered chronologically. This chronological Sequence for the blind signature join key (blindysiignedkey) may be referred to as Sequence.
For each unique Sequence, aggregation server 180-A and aggregation server 180-B both determine the number of blind signature join keys (BlindlysignedKey) with unique sequences (708). For example, multiple users may have clicked on the same numeric component in the same order before the transition event. In this case, the Sequence of presentation and translation will have a unique blind signature join key (blindysignanedjey) for each user.
Sequences are filtered (710). For example, each of aggregation server 180-A and aggregation server 180-B may filter Sequences based on privacy or other threshold processing requirements. In a particular example, aggregation server 180-a and aggregation server 180-B may filter each Sequence from the Sequences that does not have at least a threshold number of unique blind signature join keys (blindysignanedkey). The result is a result of { Occurrencem,SequencemList of pairs, where M is 1,2, … M.
The presentation data and the conversion data are decrypted (712). Presentation data and conversion numbersMay be decrypted using the MPC process of steps 318 through 328 of process 300. Decryption yields tuples of the form: { Occurrence1,ImpressionData1,1,…ImpressionData1,？,ConversionData1,1}，{Occurrence2,ImpressionData1,2,…ImpressionData1,？,ConversionData1,2}. Each tuple comprises a sequence of presentation data and transformation data that it has been single-encrypted using the public key of the reporting domain 190.
The presentation and conversion data is sent to its respective reporting system (714). The reporting system 190 may then apply its DDA technique (e.g., sharey value) to the final set of sequences to assign credits.
Since DDA is a cross-site report between multiple domains, the number of different sequences that can meet the threshold requirement may be small, particularly if a large amount of information is encoded in the presentation data and/or the translation data, resulting in each presentation data (impressationdata)3p) Many different occurrences of and transformation data (ConversionData)3p) Many different occurrences of. In this case, differential privacy noise may be added to the number of occurrences of each Sequence in the final measurement report to protect user privacy, which may be of low utility (utity) to the digital component provider.
The utility can be improved by reducing the presentation data (Impresensitiondata)3p) And/or converting data (ConversionData)3p) Or by enlarging the reporting window, while still protecting user privacy. If the order of the presentation data is not important, or duplicate presentation data can be ignored, the digital component provider can notify aggregation server 180-A and aggregation server 180-B at the conversion site. In this case, aggregation server 180-a and aggregation server 180-B will count the number of unique blind signature join keys (blindysignanedkey) associated with each set (sequence) and apply thresholding and downsampling accordingly.
Determining an aggregate transition value
Described in this documentThe MPC process (e.g., process 300 of fig. 3) may be adapted to support the reported transformed values in addition to the number of transforms and exhibits. For each conversion, the advertiser may append a digital conversion value, such as an amount spent on the digital component provider's website. Suppose that for a particular show and transform pair, there are n transforms { V with corresponding digital transform values appended1,V2,…Vn}. The number of conversions is
To enable aggregation server 180-A and aggregation server 180-B to securely compute a conversion value (A)1) A switched encryption technique H supporting digital addition operations may be used. That is, for two arbitrary integer values x and y, H (x + y) ═ homomorphic discrimination (H (x), H (y)). Given reporting system 190 calculates the number of transitions A0It is the plaintext (in the clear) that obtains the total transformed value A1And calculate the safe way of the average.
Fig. 8 is a flow diagram illustrating an example process 800 for determining an aggregate transition value. Process 800 may be performed by aggregation server 180-a and aggregation server 180-B of fig. 1 and 2.
Receiving and displayingData and transformation data (802). For example, as described above, aggregation server 180-a may receive presentation data (e.g., in bulk) from a client device, and aggregation server 180-B may receive conversion data (e.g., in bulk) from a client device. When application 112 reports a presentation as described above, application 112 may include a blind signed joining key (BlindySignedKey) and triple encrypted presentation data (ImpressonData)3p) Display data MiTo aggregation server 180-a.
Similarly, when application 112 reports conversions as described above, application 112 may include a blind signed joining key (blinsignedkey) and cubic encrypted conversion data (ConversionData)3p) Is converted into data McTo aggregation server 180-B. In this example, the blind signature key is a modified version that takes into account the parameter clicked. However, in this example, for the conversion, the data M is convertedcMay also include a converted value (V) and/or a converted value squared (V)2). Generally speaking, the conversion data McMay include a combination of V andispecified arbitrary number of converted values V1,V2,…Vn. These ViOne of which may be another VjSquare of (d).
The blind signature join key is encrypted (804). For example, aggregation server 180-A may use exchange encryption and its selected encryption Key Keyi1To encrypt a blind signature join key (blindysignanedkey) in the received presentation data, as described above with reference to step 306 of process 300. Then, for each presentation, aggregation server 180-a may pair: { H (BlindySignedKey, Key)i1),ImpressionData3pIt is sent to aggregation server 180-B.
Similarly, aggregation server 180-B may use the exchange encryption and its selected encryption Key Keyc1To encrypt the blind signature join key (blindysignanedkey) in the received translation data as described above with reference to step 308 of process 300. Then, for each transformation, aggregation server 180-B may: { H (BlindySignedKey, Key)c1),ConversionData3p,ConversionValue3pIt is sent to aggregation server 180-a.
Decryption conversion value (ConversionValue)3p)(806). For example, aggregation server 180-A may use a public key SiDecrypting the converted value (ConversionValue) with the corresponding private key3p). This results in recovery from PubKeyEncrypt (H (V)i,report_domain),Sc) Defined secondary encryption transition value (ConversionData)2). Aggregation server 180-B may locally retain the twice-encrypted conversion value (ConversionData)2)。
The encrypted presentation data and the encrypted transformed data are concatenated and filtered (808). For example, each of aggregation servers 180-B may join and filter data. In this example, aggregation server 180-A may use a blind signing keyprocess 300, but with an additional conversion value (ConversionValue)2). Aggregation server 180-a may then filter the joined records based on the threshold, similar to step 314 of process 300. For example, aggregation server 180-A may filter unique blind signature keys from the dataset
For each remaining join record, aggregation server 180-a may generate a key/value pair. In this example, the key may be a blind signature key
Aggregation server 180-B may perform the same filtering on its data to generate tuples { H (Key), ImpedentonData, that include the same set remaining after filtering3,ConversionData3The data set of. Aggregation server 180-B may perform the same cryptographic hash (e.g., CrytpoHash (H (Key), ImpressonData) on the tuple3,ConversionData3) To obtain the key for each tuple. Aggregation server 180-B may concatenate the data with the key/value pair received from aggregation server 180-a by matching the generated key with the key of the key/value pair.
Decrypting twice encrypted conversion value (ConversionValue)2)(810). Aggregation server 180-B may use itWith a public key ScDecrypting the twice encrypted converted value (ConversionValue) with the corresponding private key2) To recover the one-time encryption transformation value (ConversionValue)1) Wherein the single-encrypted conversion value is single-encrypted using the public key of the reporting system 190 as described above. Aggregation server 180-B may forward each single encryption transformation value (ConversionValue)1) And its key (CrytpoHash (H (Key), ImpressonData)3,ConversionData3) To aggregation server 180-a.
A total conversion value is determined (812). For data with the same presentation (Impactor data)3) And conversion data (ConversionData)3) Each of aggregation server 180-a and aggregation server 180-B may determine an overall conversion value. That is, for Impactor data3And Conversiondata3Aggregation server 180-A and aggregation server 180-B may independently determine a conversion value (ConversionValue) for each join combination of1) The sum of (a) and (b). Since the converted values are encrypted, the sum can be determined by H (Σ V, report _ domain).
Presentation data and conversion data, including the total conversion value, are sent to a reporting system (814). For example, aggregation server 180-A and aggregation server 180-B may decrypt the presentation data and transform the data using the MPC process described in steps 318 through 328. Each of aggregation servers 180-A may then generate and send a report to reporting system 190 for each presentation and conversion pair, where the report includes presentation data (Impactor data)1) Converting data (ConversionData)1) A count of the number of conversions (count) and a conversion value (H (Σ V, report _ domain)) … (H (Σ Vn, report _ domain)). For example, there may be a plurality of sum values, one sum value for summing the converted values and another sum value for summing the squares of the converted values, e.g., sum (V)1) And sum (V)2) Wherein V is2＝V1 2。
Differential privacy
Similar to process 300, downsampling may be used in process 800 to achieve differential privacy. In step 808 of process 800, aggregation server 180-A and aggregation server 180-B may use a similar down-sampling technique as in steps 314 and 316 of process 300 to convert to the total conversion value ∑ ViNoise is introduced. In addition, aggregation server 180-A and aggregation server 180-B may add random noise to each conversion value (H (Σ V, report _ domain)) before sending the conversion report. For each converted value (H (Σ V, report _ domain)), each of aggregation server 180-A and aggregation server 180-B may instead generate (H (noise)kV, report domain)). Aggregation server 180-A and aggregation server 180-B may both generate consistent noise (noise) by initializing the random number generator using a common seed jointly derived by aggregation server 180-A and aggregation server 180-B (e.g., using the Diffie-Hellman protocol)k)。
Additional user privacy protection for cross device measurements
As described above, when the count of impressions and conversions and the conversion value are determined across multiple devices, the unique Identifier (ID) may be information about the user or based on such information, e.g., a cryptographic hash of the user's email address. Use of the above for presentation data (ImpressionData)3p) And conversion data (Conversi)onData3p) The described probabilistic encryption, aggregation server 180-A and aggregation server 180-B may determine some number of conversions for a user, but may not involve the presentation or the conversions themselves. However, aggregation server 180-A and aggregation server 180-B may detect that the user has some online activity.
FIG. 9 is a flow diagram illustrating an example process 900 for determining aggregate transformation data. Process 900 may be performed by aggregation server 180-A and aggregation server 180-B.
Presentation data and transformation data are received (902). For example, as described above, aggregation server 180-a may receive presentation data (e.g., in bulk) from a client device, and aggregation server 180-B may receive conversion data (e.g., in bulk) from a client device.
In this example, for each presentation of the digital component, the presentation data may be in the form { H (CryptoHash, ID, dc _ destination, report _ domain), Stime),ImpressionData3p}. In this example, the cryptographic hash of the unique Identifier (ID), destination (dc _ destination), and reporting domain is the public key S of the time server 192 and using additive homomorphic public key encryption technique HtimeTo be encrypted. The cryptographic hash is used as the presentation join key. The presentation data also includes triple encrypted presentation data (imprisondata) that may be encrypted as described above with reference to FIG. 23p)。
For each conversion of a digital component, the form of the conversion data may be { H (CryptoHash (ID, dc _ destination, report _ domain), Stime),ConversionData3p}. In this example, the cryptographic hash of the unique Identifier (ID), destination (dc _ destination), and reporting domain is the public key S of the time server 192 and using additive homomorphic public key encryption technique HtimeTo be encrypted. The cryptographic hash is used as a transform join key. The translation data also includes triple encrypted translation data (ConversionData) that may be encrypted as described above with reference to fig. 23p). Because of the probabilistic nature of encryption technique H, neither aggregation server 180-A nor aggregation server 180-B can communicate with time server 192It makes sense to restore CryptoHash (ID, dc _ destination, report _ domain) or to make H (CryptoHash (…)).
A random number is selected (904). Aggregation server 180-a and aggregation server 180-B may each select a random number before performing the MPC process to decrypt the presentation data and transform the data. Aggregation server 180-A may select a random number nonceiAnd aggregation server 180-B may select a random number noncec. Both aggregation server 180-a and aggregation server 180-B may keep their respective random numbers secret.
The join key is encrypted (906). For example, aggregation server 180-A may use exchange encryption and its selected encryption Key Keyi1To encrypt the join key H (CryptoHash (…)) in the received presentation data, as described above with reference to step 306 of process 300. Then, for each presentation, aggregation server 180-a may pair: { H (CryptoHash (ID, dc _ destination, report _ domain) + noncei,Stime),ImpressionData3pIt is sent to aggregation server 180-B.
Similarly, aggregation server 180-B may use exchange encryption and its selected encryption Key Keyc1To encrypt the join key H (CryptoHash (…)) in the received transformed data, as described above with reference to step 308 of process 300. Then, for each translation, aggregation server 180-B may pair: { H (CryptoHash (ID, dc _ destination, report _ domain) + noncec,Stime),ConversionData3pIt is sent to aggregation server 180-a.
An updated join key is generated (908). For each pair of received cryptographically concatenated key and cubic transcrypted data { H (ID, dc _ destination, report _ domain) + noncei,Stime),ImpressionData3pThe aggregation server 180-a re-encrypts the join key and the translation data. Aggregation server 180-A may use its private key (along with public key S) as described above with reference to step 310 of process 300iCorresponding private key) to decrypt the three times encrypted transition data (ConversionData)3p) To recover twice encrypted converted data (ConversionData)2). Then, the user can use the device to perform the operation,the aggregation server 180-A may use its selected encryption Key Keyi2To re-encrypt the twice encrypted converted data (ConversionData)2)。
Aggregation server 180-A may also generate an updated join key H (CryptoHash (ID, dc _ destination, report _ domain) + nonce for each pair of received encrypted join key and tertiary transcrypted datac,Stime). For example, aggregation server 180-A may generate an updated join key H (CryptoHash (ID, dc _ destination, report _ domain) + noncec+noncei,Stime). Aggregation server 180-A may then send the pair { H (CryptoHash (ID, dc _ destination, report _ domain) + noncec+noncei,Stime),ConversionData3pIt is sent to aggregation server 180-B.
Similarly, aggregation server 180-B may use its private key (along with public key S) as described above with reference to step 312 of process 300cCorresponding private key) to decrypt the three times encrypted presentation data (imprisondata)3p) To recover twice encrypted presentation data (Impactor data)2). Aggregation server 180-B may then use its selected encryption Key Keyc2To re-encrypt the twice-encrypted presentation data (Impressondata)2)。
Aggregation server 180-B may also generate an updated join key H (CryptoHash (ID, dc _ destination, report _ domain) + nonce for each pair of received encrypted join key and three times encrypted exposure datai,Stime). For example, aggregation server 180-B may generate an updated join key H (CryptoHash (ID, dc _ destination, report _ domain) + noncei+noncec,Stime). Aggregation server 180-B may then send the pair { H (CryptoHash (ID, dc _ destination, report _ domain) + noncei+noncec,Stime),ImpressionData3pIt is sent to aggregation server 180-a.
A join key is obtained (910). For example, each of aggregation server 180-A and aggregation server 180-B may interact with time server 192 to obtain data for each presentation and each turnAnd exchanging the connection key of the data. For each presentation data and each conversion data, aggregation server 180-A may convert H (CryptoHash (ID, dc _ destination, report _ domain) + noncei+noncec,Stime) To the time server 192. Timeserver 192 can decrypt and re-encrypt H (CryptoHash ID, dc _ destination, report _ domain) + nonce using deterministic symmetric key encryption techniques and the encryption key selected for the current batch process (process)i+noncec,Stime). The result of the re-encryption is for the presentation data (ImpressionData)3p) And corresponding conversion data (ConversionData)3p) A join key to join. Aggregation server 180-B may interact with time server 192 in a similar manner to obtain the same join key.
The presentation data and the conversion data are decrypted (912). With the join key obtained, aggregation server 180-A and aggregation server 180-B may perform the remainder of the MPC process to decrypt the presentation data and transform the data, as described above with reference to steps 314 through 328 of process 300.
The decrypted presentation data and the conversion data are sent to a reporting system (914). For example, each of aggregation server 180-A and aggregation server 180-B may send the conversion report to a respective reporting system, as described above with reference to steps 330 and 332 of process 300.
To provide more privacy protection, in some embodiments, a random number or pseudo-random number may be used on the unique Identifier (ID). The random or pseudo-random number may be based on a unique Identifier (ID). For example, the random number may be based on HMACSHA256(e-mail address, email _ provider _ private _ key). In this example, the random number for the unique Identifier (ID) in the key described above may be the HMAC of the user's email address (or other user information) using the private key of the email provider (or other user authorized entity). The e-mail provider (or user authorization entity) may then synchronize the random number for the unique Identifier (ID) to all devices and applications of the user. The presentation data and the conversion data are then reported to the aggregationServer 180-a may use the random number instead of a unique Identifier (ID) when aggregating server 180-B.
FIG. 10 is a block diagram of an example computer system 1000 that may be used to perform the operations described above. The system 1000 includes a processor 1010, a memory 1020, a storage device 1030, and an input/output device 1040. Each of component 1010, component 1020, component 1030, and component 1040 may be interconnected, for example, using a system bus 1050. Processor 1010 is capable of processing instructions for execution within system 1000. In some implementations, the processor 1010 is a single-threaded processor. In another implementation, the processor 1010 is a multi-threaded processor. The processor 1010 is capable of processing instructions stored in the memory 1020 or on the storage device 1030.
The storage 1030 is capable of providing mass storage for the system 1000. In some implementations, the storage device 1030 is a computer-readable medium. In various different implementations, the storage 1030 may comprise, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
Input/output device 1040 provides input/output operations for system 1000. In some implementations, the input/output devices 1040 can include one or more network interface devices, such as an ethernet card, a serial communication device (e.g., an RS-232 port), and/or a wireless interface device (e.g., an 802.11 card). In another embodiment, the input/output devices may include driver devices configured to receive input data and transmit output data to external devices 1060 (e.g., keyboard, printer, and display devices). However, other embodiments may be used, such as a mobile computing device, a mobile communication device, a set-top television client device, and so forth.
Although FIG. 10 has described an example processing system, embodiments of the subject matter and functional operations described in this specification can be implemented in one of the following: other types of digital electronic circuitry, computer software, firmware, and hardware including the structures disclosed in this specification and their structural equivalents, as well as combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in one of the following: digital electronic circuitry, computer software, firmware, and hardware including the structures disclosed in this specification and their structural equivalents, as well as combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs (i.e., one or more modules of computer program instructions) encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be (or be included in), a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of the foregoing. Furthermore, although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. A computer storage medium may also be (or be included in) one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" includes all types of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of the foregoing. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may (but need not) correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, a computer may be embedded in another device, e.g., a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example: semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM disks and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display)) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. In addition, other types of devices may be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and, input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user (e.g., by sending web pages to a web browser on the user's client device in response to requests received from the web browser).
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), inter-networks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., HTML pages) to the client device, for example, for displaying data to and receiving user input from a user interacting with the client device. Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. In this specification, particular features that are described in the context of separate embodiments may also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain situations, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain embodiments, multitasking and parallel processing may be advantageous.
Claims (14)
1. A computer-implemented method, comprising:
receiving, by a first aggregation server, presentation data from each of a plurality of client devices, the presentation data comprising, for each presentation of a digital component recorded by a client device: (i) a first join key based on a first unique identifier of a client device or an application on the client device used for the presentation to take place, (ii) encrypted presentation data that has been encrypted using a first public key of a first aggregation server and using a second public key of a second aggregation server different from the first aggregation server, and (iii) encrypted presentation time data that indicates a time at which the presentation takes place;
receiving, by the second aggregation server, transformation data from each of at least a portion of a plurality of client devices, the transformation data comprising, for each transformation recorded by the client device: (i) a second join key based on a second unique identifier of the client device or an application on the client device for which the transition occurred, and (ii) a second value comprising transcryption data that has been encrypted using the first public key and the second public key, and (iii) transcryption time data that indicates a time at which the transition occurred;
performing, by the first aggregation server and the second aggregation server, a multi-party computation process to generate a chronological sequence of the encrypted presentation data and the transcrypted data and to decrypt the encrypted presentation data and the transcrypted data, including:
identifying a set of transcrypted data and corresponding encrypted presentation data based on the first join key and the second join key; and is
For each chronological sequence, sorting the encrypted conversion data and the corresponding encrypted presentation data based on the encrypted presentation time data and the encrypted conversion time data; and
the presentation data and the transformation data are decrypted in a plurality of stages for each sequence of encrypted presentation data and encrypted transformation data using a first private key corresponding to the first public key and a second private key corresponding to the second public key.
2. The computer-implemented method of claim 1, wherein the encrypted show time data is encrypted using the first public key and the second public key.
3. The computer-implemented method of claim 2, wherein the encrypted presentation time data comprises an encrypted version of a sum of a time at which the presentation occurred and a clock offset of the client device at which the presentation occurred.
4. The method of claim 3, wherein the sum of the time at which the presentation occurred and the clock bias of the client device at which the presentation occurred is encrypted using homomorphic additive probabilistic public key encryption.
5. The computer-implemented method of any of the preceding claims, wherein the transcryption time data is encrypted using the first public key and the second public key.
6. The computer-implemented method of claim 5, wherein the encrypted transition time data comprises an encrypted version of a sum of a time at which the transition occurred and a clock skew of the client device at which the transition occurred.
7. The method of claim 6, wherein the sum of the time at which the transition occurs and the clock bias of the client device at which the transition occurs is encrypted using homomorphic additive probabilistic public key encryption.
8. The method of any of the preceding claims, further comprising: for each chronological sequence of encrypted presentation data and transcrypted data, credits for conversion in the transcrypted data are attributed to each presentation of the encrypted presentation data based at least in part on the chronological sequence of the encrypted presentation data and the transcrypted data.
9. The method according to any of the preceding claims, wherein performing a multi-party computation process comprises:
for each presentation:
encrypting, by the first aggregation server, a first join key;
sending, by the first aggregation server to the second aggregation server, a tuple comprising an encrypted first join key, encrypted presentation data, and encrypted presentation time data;
for each conversion:
encrypting, by the second aggregation server, a second join key;
sending, by the second aggregation server to the first aggregation server, a tuple comprising an encrypted second join key, transcryption data, and transcryption time data.
10. The method of claim 9, wherein performing a multi-party computing process comprises:
decrypting, by the first aggregation server, each transcrypted time data;
determining, by the first aggregation server, a first time offset value;
generating second transcrypted time data by summing up the time at which the transcryption occurs, the clock skew of the client device at which the transcryption occurs, and the first time skew value;
determining, by the first aggregation server, for each unique transcryption data, a number of unique second join keys; and is
Filtering each transcrypting data for which a number of unique second join keys is less than a threshold from the set of transcrypting data received by the first aggregation server; and
for each remaining transcrypted data of the set of transcrypted data, a data tuple is provided that includes a second join key for the transcrypted data, and second transcrypted time data.
11. The method of claim 10, wherein performing a multi-party computing process comprises:
decrypting, by the second aggregation server, each encrypted presentation time data;
determining, by the second aggregation server, a second time offset value;
generating second encrypted presentation time data by encrypting a sum of a time at which the presentation occurred, a clock bias of the client device at which the presentation occurred, and a second time bias value;
determining, by the second aggregation server, for each unique transcryption data, a number of unique first join keys;
filtering each encrypted presentation data for which the number of unique first join keys is less than a threshold from the set of encrypted presentation data received by the second aggregation server; and
for each remaining cryptographically transformed data of the set of cryptographically presented data, a data tuple is provided comprising a first join key for the cryptographically presented data, the cryptographically transformed data and a second cryptographically presented time data.
12. One or more computer-readable storage media comprising instructions which, when executed by a computer, cause the computer to perform the steps of the method according to any one of claims 1 to 11.
13. A computer program product comprising instructions which, when executed by a computer, cause the computer to perform the steps of the method according to any one of claims 1 to 11.
14. A system for preventing fraud, the system comprising:
the data processing system having one or more processors and one or more computer-readable storage media according to claim 12, wherein the one or more processors are configured to perform the steps of any one of claims 1 to 11.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL272521 | 2020-02-06 | ||
IL272521A IL272521B2 (en) | 2020-02-06 | 2020-02-06 | Generating sequences of network data while preventing acquisition or manipulation of time data |
PCT/US2020/064806 WO2021158287A1 (en) | 2020-02-06 | 2020-12-14 | Generating sequences of network data while preventing acquisition or manipulation of time data |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114223175A true CN114223175A (en) | 2022-03-22 |
Family
ID=77199396
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080056658.8A Pending CN114223175A (en) | 2020-02-06 | 2020-12-14 | Generating a sequence of network data while preventing acquisition or manipulation of time data |
Country Status (7)
Country | Link |
---|---|
US (2) | US11757619B2 (en) |
EP (2) | EP3966988B1 (en) |
JP (1) | JP7201848B2 (en) |
KR (1) | KR102639227B1 (en) |
CN (1) | CN114223175A (en) |
IL (1) | IL272521B2 (en) |
WO (1) | WO2021158287A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115544579A (en) * | 2022-11-24 | 2022-12-30 | 北京融数联智科技有限公司 | Double-random data confusion query method, device and system |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR102525981B1 (en) * | 2020-10-06 | 2023-04-26 | 주식회사 카카오 | Method and apparatus for tracking conversion of advertisements provided through application |
CN114840867B (en) * | 2022-07-01 | 2022-09-20 | 北京融数联智科技有限公司 | Data query method, device and system based on exchangeable encrypted data confusion |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107864677A (en) * | 2015-07-22 | 2018-03-30 | 爱维士软件私人有限公司 | Access to content verifies system and method |
EP3506550A1 (en) * | 2017-12-28 | 2019-07-03 | Flytxt B.V. | Providing security against user collusion in data analytics using random group selection |
CN110637441A (en) * | 2017-05-19 | 2019-12-31 | 国际商业机器公司 | Encryption key generation for data deduplication |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2004095771A1 (en) * | 2003-04-24 | 2004-11-04 | Matsushita Electric Industrial Co., Ltd. | Parameter generation apparatus, encryption system, decryption system, encryption apparatus, decryption apparatus, encryption method, decryption method, and program thereof |
US8001055B2 (en) * | 2006-02-21 | 2011-08-16 | Weiss Kenneth P | Method, system and apparatus for secure access, payment and identification |
KR100870027B1 (en) * | 2007-03-12 | 2008-11-24 | 권요한 | System and method of storing log for decrypting the encrypted geo-spatial data |
EA201300061A1 (en) * | 2010-06-30 | 2013-05-30 | Антонио Пуханте Куадрупани | METHOD, DEVICE AND NETWORK FOR CONFIRMATION OF THE NAVIGATION RECEIVER POSITION |
US9461876B2 (en) * | 2012-08-29 | 2016-10-04 | Loci | System and method for fuzzy concept mapping, voting ontology crowd sourcing, and technology prediction |
JP2017156996A (en) | 2016-03-02 | 2017-09-07 | 株式会社日立製作所 | Data totalization system, data totalization method, and data totalization device |
WO2018031597A1 (en) * | 2016-08-08 | 2018-02-15 | Google Llc | Systems and methods for data aggregation based on one-time pad based sharing |
US11368318B2 (en) * | 2018-07-31 | 2022-06-21 | Massachusetts Institute Of Technology | Group identification system |
DE102020105051A1 (en) * | 2020-02-26 | 2021-08-26 | Bayerische Motoren Werke Aktiengesellschaft | Method and device for anonymizing vehicle-related data for analysis purposes |
-
2020
- 2020-02-06 IL IL272521A patent/IL272521B2/en unknown
- 2020-12-14 EP EP20838825.6A patent/EP3966988B1/en active Active
- 2020-12-14 WO PCT/US2020/064806 patent/WO2021158287A1/en unknown
- 2020-12-14 JP JP2021573237A patent/JP7201848B2/en active Active
- 2020-12-14 EP EP23207035.9A patent/EP4293557A3/en active Pending
- 2020-12-14 KR KR1020217040459A patent/KR102639227B1/en active IP Right Grant
- 2020-12-14 US US17/617,075 patent/US11757619B2/en active Active
- 2020-12-14 CN CN202080056658.8A patent/CN114223175A/en active Pending
-
2023
- 2023-07-28 US US18/361,303 patent/US20230421353A1/en active Pending
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107864677A (en) * | 2015-07-22 | 2018-03-30 | 爱维士软件私人有限公司 | Access to content verifies system and method |
CN110637441A (en) * | 2017-05-19 | 2019-12-31 | 国际商业机器公司 | Encryption key generation for data deduplication |
EP3506550A1 (en) * | 2017-12-28 | 2019-07-03 | Flytxt B.V. | Providing security against user collusion in data analytics using random group selection |
Non-Patent Citations (2)
Title |
---|
ARVIND ARASU 等: "A secure coprocessor for database applications", 《 2013 23RD INTERNATIONAL CONFERENCE ON FIELD PROGRAMMABLE LOGIC AND APPLICATIONS》, 4 September 2013 (2013-09-04), pages 1 - 8, XP032514432, DOI: 10.1109/FPL.2013.6645524 * |
DAVID W ARCHER 等: "From Keys to Databases—Real-World Applications of Secure Multi-Party Computation", 《THE COMPUTER JOURNAL》, 12 December 2018 (2018-12-12), pages 1749 * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115544579A (en) * | 2022-11-24 | 2022-12-30 | 北京融数联智科技有限公司 | Double-random data confusion query method, device and system |
Also Published As
Publication number | Publication date |
---|---|
JP2022532950A (en) | 2022-07-20 |
US20220239464A1 (en) | 2022-07-28 |
EP4293557A3 (en) | 2024-03-13 |
WO2021158287A1 (en) | 2021-08-12 |
KR102639227B1 (en) | 2024-02-21 |
IL272521A (en) | 2021-08-31 |
JP7201848B2 (en) | 2023-01-10 |
EP4293557A2 (en) | 2023-12-20 |
IL272521B1 (en) | 2023-01-01 |
US11757619B2 (en) | 2023-09-12 |
EP3966988A1 (en) | 2022-03-16 |
EP3966988B1 (en) | 2023-11-01 |
US20230421353A1 (en) | 2023-12-28 |
IL272521B2 (en) | 2023-05-01 |
KR20220006616A (en) | 2022-01-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9202079B2 (en) | Privacy preserving data querying | |
CN113498602B (en) | Computer-implemented method, storage medium, apparatus and system for preventing fraud | |
JP7201848B2 (en) | Generating sequences of network data while preventing acquisition or manipulation of time data | |
US20220166780A1 (en) | Securing browser cookies | |
US20230421544A1 (en) | Preventing fraud in aggregated network measurements | |
JP7399236B2 (en) | Using multiple aggregation servers to prevent data manipulation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |