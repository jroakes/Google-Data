CN115088005A - Securing access to information in content distribution using secure MPC and vector computation - Google Patents
Securing access to information in content distribution using secure MPC and vector computation Download PDFInfo
- Publication number
- CN115088005A CN115088005A CN202280002639.6A CN202280002639A CN115088005A CN 115088005 A CN115088005 A CN 115088005A CN 202280002639 A CN202280002639 A CN 202280002639A CN 115088005 A CN115088005 A CN 115088005A
- Authority
- CN
- China
- Prior art keywords
- digital component
- mpc
- user
- selection
- vector
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/0838—Key agreement, i.e. key establishment technique in which a shared key is derived by parties as a function of information contributed by, or associated with, each of these
- H04L9/0841—Key agreement, i.e. key establishment technique in which a shared key is derived by parties as a function of information contributed by, or associated with, each of these involving Diffie-Hellman or related key agreement protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/06—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols the encryption apparatus using shift registers or memories for block-wise or stream coding, e.g. DES systems or RC4; Hash functions; Pseudorandom sequence generators
- H04L9/0643—Hash functions, e.g. MD5, SHA, HMAC or f9 MAC
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q2220/00—Business processing using cryptography
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
The present disclosure relates to securing information in content selection and distribution. In one aspect, a method comprises: a digital component request is received from a client device and by a first computing system in a multi-party computing (MPC) system, the digital component request including a first share of secret identifying data of a user group that includes a user of the client device as a member. The first computing system transmits a context-numeral component request to the content platform. The first computing system receives selection data for a plurality of digital components from a content platform. The selection data includes first vector data defining a context-based vector of values selected based in part on the set of context signals. The first computing system obtains, for each digital component, second vector data defining a user-group-based vector based in part on values selected by a respective user group corresponding to the digital component.
Description
Technical Field
This specification relates to cryptography and data security.
Background
Secure multi-party computing (MPC) is a family of cryptographic protocols that prevent access to data by distributing the computing across multiple parties so that no individual party can access the other party's data or intermediate computed values while outputting only that is released to the designated party. MPC computing systems typically perform computations using secret shares of data, and sometimes on encrypted data.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include: receiving, from a client device and by a first computing system in a multi-party computing (MPC) system, a digital component request comprising a first secret share and a set of context signals identifying data of a user group that includes a user of the client device as a member; transmitting, by the first computing system, a context-numeral component request to the content platform; receiving, by the first computing system and from the content platform, selection data for the plurality of digital components, wherein the selection data includes first vector data defining a context-based vector of values selected based at least in part on the set of context signals; obtaining, by the first computing system and for each of the digital components, second vector data defining a user-group-based vector based at least in part on values selected by respective user groups corresponding to the digital components; determining, by the first computing system, a selection value for each digital component based on the first vector data and the second vector data; for each digital component, determining a candidate parameter indicating whether a respective user group identifier corresponding to the digital component matches a user group that includes the user as a member; generating a first secret share of a selection result based on the selection value and a candidate parameter, the selection result identifying a given digital component having a highest selection value from among a plurality of candidate digital components, wherein each candidate digital component is a digital component for which the candidate parameter of the selection value corresponding to the digital component indicates that a second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and transmitting a first secret share to the client device that identifies the selection result for the given digital component. Other implementations of this aspect include corresponding apparatuses, systems, and computer programs, encoded on computer storage devices, configured to perform various aspects of the methods.
These and other implementations can each optionally include one or more of the following features. In some aspects, determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data comprises determining a dot product of a context-based vector of values and a user-group-based vector of values for the digital component.
In some aspects, the first vector data comprises a first secret share of a context-based vector of values and the second vector data comprises a first secret share of a user-group-based vector of values. Determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data can include determining, in cooperation with one or more second computing systems of the plurality of MPC systems, a dot product of a context-based vector of values and a user-group-based vector of values of the digital component to perform a secure MPC process.
In some aspects, the selection value for each digital component is based on a user profile of the user. Determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data can include determining a dot product of a context-based vector of the digital component, a user-group-based vector of the digital component, and a user-profile vector of a user profile of the user.
In some aspects, determining the candidate parameter for each selection value includes determining a first secret share of the candidate parameter for each selection value. In some aspects, generating the first secret share of the selection result comprises: generating an order of selection values based on the magnitude of each selection value; determining a first secret share of an accumulated value for each selection value based on the order of the selection values and the candidate parameter for each selection value; for each selection value, determining a first share of secret for the winner parameter based on (i) a candidate parameter for the selection value and (ii) a result of an equality test that indicates whether the cumulative value of the selection values is the specified value; and for each selection value, determining a first secret share of a sum of products of a winner parameter of the selection value and a digital component information element of the selection value as a first secret share of the selection result.
In some aspects, determining the first secret share of the accumulated value for each of the selection values comprises: for each individual selection value, an amount of selection values between the highest selection value and the individual selection value, including the highest selection value and the individual selection value, is determined, the amount of selection values having a candidate parameter indicating that the second user group identifier corresponding to the selection value matches at least one of the one or more first user group identifiers.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. Using a secure MPC process performed by two or more MPC servers operated by different parties to select a digital component based on a secret share of user information ensures that the user information cannot be accessed in the clear by the MPC server or another party in the absence of unauthorized collusion between MPC servers.
In the digital component selection process, the MPC server can select from qualified digital components that meet one or more qualifying conditions while preventing parties from accessing user information in the clear. Qualification conditions can include limitations and guidance on the manner or frequency of distribution of the digital components, as well as other factors. These conditions can include user group membership, frequency control, muting, budgeting, k-anonymity, and/or pacing constraints.
The user's client device is capable of generating a probabilistic data structure, such as a cuckoo filter, representing the user group that includes the user as a member, and generating distributed point functions, one for each user group that includes the user as a member. The distributed point function is a secret share that cryptographically represents whether a user is a member of a user group. Using the probabilistic data structure and/or the distributed point function in this manner protects user privacy and reduces the size of information provided to the MPC cluster by preventing access to the user's group membership. This reduction in data size reduces the amount of bandwidth consumed to transmit information, reduces latency in transmitting information, and reduces the amount of processing power and associated battery power required by a device (e.g., a mobile device) running on a battery to transmit information.
The MPC cluster can transmit a secret share that identifies the result of the MPC cluster selecting the digital component selected using the secure MPC process. By sending only a secret share of the result of selecting a digital component, rather than sending information for all or a large set of digital components, bandwidth, latency, processing power, and battery power consumed in transmitting and receiving the result are similarly reduced. This also reduces the potential leakage of confidential information that submits select values of digital components to the content platform of the MPC cluster by limiting the number of digital components that provide information to the client device.
The selection values and information about their corresponding digital components can be stored in a data structure that uses a set of context signals as keys for each selection value. However, this can produce a large number of keys for selection values that are only eligible in a very specific context. For example, a content platform may want to use different selection values for each of many different contexts. Using a vector of values generated based on the context signals and a vector of values generated for a group of users to determine the selection values for the digital components, vector calculations can be used to substantially reduce the amount of data stored in the data structure, thereby reducing the data storage requirements for storing many different selection values for many different contexts. Vector computation also enables more flexibility in presenting contextually accurately specified selection values for various digital components, while also enabling enforcement of publisher controls on which digital components can be presented along with the publisher's content. Vector calculations can be performed using secret sharing so that a vector of values based on a user profile can be used to determine the selection value without exposing user information to the MPC cluster or other party.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an environment in which an MPC cluster performs a secure MPC process to select digital components for distribution to client devices.
FIG. 2 illustrates an example data flow within the environment of FIG. 1.
FIG. 3 is a swim lane diagram of an example process for selecting a digital component for presentation at a client device.
FIG. 4 is a swim lane diagram of an example process for selecting a digital component for distribution to a client device.
FIG. 5 is a flow diagram illustrating an example process for selecting digital components for distribution to client devices.
FIG. 6 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes systems and techniques for securing information in content selection and distribution. The MPC cluster of server computers is able to perform secure MPC processes to select digital components based on user information without requiring any MPC server to be able to access the user information in the clear in the absence of unauthorized collusion. Probabilistic data structures (e.g., cuckoo filters) can be used to send user information to the MPC cluster to reduce the data size of information transmitted over the network and to keep the information secure during transmission.
The MPC cluster can use vector calculations (e.g., vector dot product calculations) to determine the selection values for the digital components. For example, the MPC cluster can determine the selection value of the digital component by determining a dot product between a vector of values generated for the user group for the digital component and a vector of values generated based on the context signal for the digital component presentation environment. The selection value can indicate an amount of money that the digital component provider is willing to provide for presentation or user interaction with the digital component.
Fig. 1 is a block diagram of an environment 100 in which an MPC cluster performs a secure MPC process to select digital components for distribution to client devices 110. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, secure MPC cluster 130, publishers 140, websites 142, content platforms, such as provider platform (SSP)170 and demand platform DSP (150). Example environment 100 may include many different client devices 110, secure MPC clusters 130, publishers 140, web sites 142, DSPs 150, and SSPs 170.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices such as smart phones, and other devices capable of sending and receiving data over the network 105. The client device can also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hot word" or "hot phrase" that activates the microphone to accept audio input, the digital assistant can be placed in a listening mode (e.g., ready to accept audio input). The digital assistant device can also include a camera and/or a display to capture images and visually present information. The digital assistant can be implemented in different forms of hardware devices, including a wearable device (e.g., a watch or glasses), a smartphone, a speaker device, a tablet device, or another hardware device. The client device can also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to a television, gaming system, or virtual reality system.
The client device 110 typically includes an application 112, such as a web browser and/or a native application, to facilitate sending and receiving data over the network 105. A native application is an application developed for a particular platform or a particular device (e.g., a mobile device with a particular operating system). The publisher 140 can develop and provide (e.g., make available for download) native applications to the client device 110. For example, in response to a user of the client device 110 entering a resource address of the resource 145 in an address bar of a web browser or selecting a link referencing the resource address, the web browser can request the resource 145 from a web server hosting the publisher's 140 website 142. Similarly, the native application can request application content from a publisher's remote server.
Some resources, application pages, or other application content can include a digital component slot for presenting digital components with the resource 145 or application page. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components can be electronically stored in the physical memory device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files, and include advertising information such that the advertisement is one type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource presented by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may relate to the same subject matter as the web page content, or related subject matter). Thus, the provision of digital components can supplement and generally enhance web page or application content.
When application 112 loads a resource (or application content) that includes one or more slots for digital components, application 112 can request the digital components for each slot. In some implementations, the digital component slot can include code (e.g., script) that causes the application 112 to request the digital component from a digital component distribution system that selects the digital component and provides the digital component to the application 112 for presentation to a user of the client device 110. As described below, the application 112 can request digital components from the MPC cluster 130 and/or one or more SSPs 170.
Some publishers 140 use SSP 170 to manage the process of obtaining digital components for digital component slots of their resources and/or applications. The SSP 170 is a hardware and/or software implemented technology platform that automates the process of obtaining digital components of resources and/or applications. Each publisher 140 can have a corresponding SSP 170 or SSPs 170. Some publishers 140 may use the same SSP 170.
The digital component provider 160 can create (or otherwise publish) digital components that are presented in digital component slots of publishers' resources and applications. The digital component provider 160 can use the DSP 150 to manage the provision of its digital components for presentation in the digital component slots. DSP 150 is a hardware and/or software implemented technology platform that automates the process of distributing digital components for presentation with resources and/or applications. The DSP 150 is capable of interacting with multiple vendor platforms SSP on behalf of a digital component provider 160 to provide digital components for presentation with resources and/or applications of multiple different publishers 140. In general, the DSP 150 is capable of receiving a request for a digital component (e.g., from an SSP), generating (or selecting) a selection value for one or more digital components created by one or more digital component providers based on the request, and providing data related to the digital component (e.g., the digital component itself) and a selection parameter to the SSP. The selection value can indicate an amount of money that the digital component provider 160 is willing to provide for presentation or user interaction with the digital component. The SSP is then able to select a digital component for presentation at the client device 110 and provide the client device 110 with data that causes the client device 110 to present the digital component.
In some cases, it may be beneficial for a user to receive digital components related to web pages, application pages, or other electronic resources that the user previously accessed and/or interacted with. To distribute such digital components to users, users can be assigned to groups of users, e.g., groups of user interests, groups of similar users, or other group types involving similar user data, when the users access a particular resource or perform a particular action on the resource (e.g., interact with a particular item presented on a web page or add the item to a virtual shopping cart). The user group can be generated by the digital component provider 160. That is, each digital component provider 160 is able to assign users to their group of users when they access electronic resources of the digital component provider 160. The user group can also be created by the content platform, for example by the DSP 150 and/or the SSP 170.
To protect user privacy, user group membership can be maintained at the user's client device 110, e.g., by one of the applications 112 or the operating system of the client device 110, rather than by a digital component provider, content platform, or other party. In a particular example, a trusted program (e.g., a web browser or operating system can maintain a list of user group identifiers ("user group list") for users using a web browser or another application (e.g., users logged into the browser, application, or client device 110).
When the application 112 presents a resource or application content associated with the digital component provider 160 or a web page on the website 142, the resource can request that the application 112 add one or more user group identifiers to the user group list. In response, the application 112 can add one or more user group identifiers to the user group list and securely store the user group list.
The MPC cluster 130 can use the user group membership of the user to select digital components or other content that may be of interest to the user or otherwise beneficial to the user/user device. For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or user device in some other manner. However, a user group identifier of the user's user group list can be provided and used to prevent computing system MPCs in MPC cluster 130 1 And MPC 2 The digital components are selected in a way that the user group identifier of the user is accessed in clear text, thereby protecting the privacy of the user when the user group membership data is used to select the digital components. Plaintext is text that is computationally untagged, specially formatted, or written in code or data (including binary files) in a form that can be viewed or used without the need for a key or other decryption device or other decryption process.
Computing system MPC 1 And MPC 2 Can be operated by different entities. In this way, each entity may not have access to the full user profile in the clear. For example, a computing system MPC 1 Or MPC 2 Can be operated by a different trusted party than the user, the publisher 140, the DSP 150, the SSP 170, and the digital component provider 160. For example,industry group, government group, or browser developer may maintain and operate a computing system MPC 1 And MPC 2 Of the above. Other computing systems may be operated by different ones of these groups, such that different trusted parties operate each computing system MPC 1 And MPC 2 . Preferably, the MPC of the different computing systems is operated 1 And MPC 2 There is no incentive to collude to compromise user privacy. In some embodiments, a computing system MPC 1 And MPC 2 Are architecturally separate and are monitored so as not to communicate with each other except to perform the secure MPC processes described herein.
MPC for each computing system 1 And MPC 2 A vector of values can be stored that is used to determine the selection values of the digital components. For example, as part of a previous digital component selection process, the computing system MPC 1 And MPC 2 Vectors previously received from the SSP 170 and/or DSP 150 can be cached. In this manner, MPC cluster 130 is able to use the vector to select digital components for distribution to client devices 110 in response to future user-group-based digital component requests received from client devices 110.
Computing system MPC 1 And MPC 2 User group-based vector V capable of storing values of digital components (e.g., digital components to be provided to a user who is a member of a user group) ug . The values may be floating point values or values in different computer digital formats. Such a user group-based vector V ug Can be used to determine a selection value for a digital component for use in a digital component selection process to select a digital component to be distributed for presentation to a user of a group of users. Vector V based on user groups ug Multiple elements can be included across two or more dimensions and each element can represent a particular feature of the digital component presentation opportunity. For example, a user group-based vector V of values ug Elements that can include: geographic location or region, spoken language, age or age range, specific URL of a Web page or other electronic resource, specific product or service, whether digital component slot is above or below home screenA type of digital component slot, a size of a digital component slot, a number of digital component slots on an electronic resource, a time of day, a Web attribute identifier, and/or other suitable characteristics of a digital component presentation opportunity. In some implementations (e.g., implementations employing neural networks), the vector V is based on a group of users ug Can be an embedding of user groups in some abstract vector space.
The value of each element can reflect an amount by which the selected value of the digital component is to be increased or decreased based on the current digital component presentation opportunity having a characteristic corresponding to the element. For example, if the DSP 150 wants to present digital components to users of atlanta, rather than users of dallas, the values for the elements of atlanta can be positive values above the value one, while the values for the elements of dallas can be positive (e.g., zero) or negative values below one. As described in more detail below, these values can be part of a vector dot product calculation that determines the selection values of the digital components.
In some embodiments, each computing MPC 1 And MPC 2 User group-based vector V using a two-level look-up table (LUT) to store values of digital components ug . The use of a two-stage LUT can provide some performance advantages, but other suitable data structures can also be used. The first level can be keyed by a user group Request Key (UG _ Request _ Key). The UG _ Request _ Key can be a composite message based on a set of context signals, such as a set of context signals (e.g., URL, location, language, etc.) requested by the digital component or a set of context signals for which the digital component is qualified for distribution. That is, the first level LUT can be keyed based on a set of context signals. The Key of the first level can be a hash of the UG _ Request _ Key, for example using a hash function such as SHA 256. The key may be truncated to a specified number of bits, such as 16 bits, 32 bits, or other suitable number of bits. The value of each Key UG _ Request _ Key in the first level LUT can indicate a row of the second level LUT that includes data of the digital component that is eligible for a digital component Request of the context signal that includes the UG _ Request _ Key. An example first-level LUT is shown in table 1 below.
Key with a key body | Value of |
SHA256(UG_Request_Key) | Line … |
… | Line … |
TABLE 1
The second level LUT can be keyed based on a combination of the subscriber group Request Key UG _ Request _ Key and the subscriber group identifier in the first level LUT. Each row in the second level LUT can be used for a particular select value for a particular digital component. For example, the DSP 150 can submit different selection values for the same digital component, where each selection value is for a different set of context signals and/or a different user group identifier. Thus, the selection value of the digital component can vary based on context and other factors.
The DSP 150 or digital component provider 160 can associate (e.g., link or map) the digital component to a group of users to which the DSP 150 or digital component provider wants to present the digital component. For example, DSP 150 may want to present digital components associated with a man's basketball shoe to a man who has shown an interest in basketball and/or shoes. In this example, DSP 150 can provide data to MPC cluster 130 indicating that the digital components correspond to a user group identifier that includes a user group that has shown males interested in basketball and/or shoes.
In some embodiments, the Key of a row in the second level LUT can be a hash or code generated based on a combination of the user group Request Key UG _ Request _ Key and the user group identifier of the digital component of the row. For example,the key can be the combined hash-based message authentication code (HMAC), which can be represented as HMAC SHA256 (UG _ Request _ Key, UG _ id). The user group identifier ug id can be based on a combination of the internal user group identifier of the user group and the domain of the owner of the user group (e.g. the DSP, SSP or digital component provider owning the user group). For example, the user group identifier ug _ id can be the HMAC of the tld +1 of the owner domain and the internal user group identifier of the owner of the user group. eTLD +1 is the valid top level field (eTLD) plus one level more than the common suffix. Com "where" com "is the top level domain. The ug id can be truncated to 16 bytes or other suitable data size.
Continuing with the previous example of a men's basketball shoe, the second level lookup Key of a row that includes information of the digital components to be presented to a user in the men's basketball shoe set can be a combination of the user group Request Key UG _ Request _ Key and the user group identifier UG _ id of the men's basketball shoe set. Since the digital components can be presented in different contexts, the second level lookup table can include multiple rows of digital components associated with the user group identifier UG _ id of the men's basketball shoe set, each row having a different user group Request Key UG _ Request _ Key and a different value.
The values of each row of the second level LUT can be a user group-based vector V of digital components ug And other data of the digital component, such as metadata identifying the digital component or a network location from which the digital component can be downloaded, and the like. An example second level LUT is shown in table 2 below.
Key with a key body | Value of |
HMAC(UG_Request_Key,UG_ID) | {V ug Metadata } |
… | … |
TABLE 2
Second level LUT will be based on vector V of user groups ug To a specific numeric component, to a specific user group identifier UG _ id, and to a specific set of context signals defined by a first level lookup Key UG _ Request _ Key. By doing so, the second stage LUT indicates a user group-based vector V of digital components ug The specific context of the digital component slot for which it is eligible. Due to the vector V based on the user group ug The selection value is defined based on a combination of potentially large number of features of the digital component presentation opportunity, so the number of context signals of the first level lookup Key UG _ Request _ Key can be minimized, for example, to specify a particular resource with which the digital component can be presented. This reduces the number of rows in the table required to specify a particular selection value for a particular context.
When a digital component request is received indicating that the user to which the digital component is to be presented is a member of a particular user group identified by a particular user group identifier ug ig and that the digital component is to be presented in a particular context defined by the context signal of the first level lookup key, any digital component having a matching user group identifier and matching first level lookup key is a candidate to be selected for distribution in response to the request. Although a two-level LUT is used in this example, other suitable data structures can be used.
In addition to the description throughout this document, a user may be provided with controls (e.g., user interface elements with which the user can interact) to allow the user to select whether and when the systems, programs, or features described herein may enable the collection of user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current location), and whether to send content or communications from a server to the user. Further, certain data may be disposed of in one or more ways before it is stored or used, such that personally identifiable information is removed. For example, the identity of the user may be disposed of such that personally identifiable information of the user cannot be determined, or the geographic location of the user may be generalized (e.g., city, zip code, or state level) if location information is obtained such that a specific location of the user cannot be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user.
FIG. 2 illustrates an example data flow 200 within the environment of FIG. 1. In phase a, the application 112 transmits a digital component request to the MPC cluster 130. The digital component request may be for a digital component to be rendered in a digital component slot of content to be rendered by application 112.
The request can include data regarding user group membership of the user using the application 112, such as in secret shares as described below, as well as context signals for the digital component slots. The context signal can describe the digital component presentation opportunity by including signals such as: a geographic location of client device 110, a spoken language used by application 112, a URL of content including a digital component slot, whether a digital component is above or below the top screen, a type and/or size of a digital component slot, a current time of day at the location of client device 110, a Web attribute identifier of the content, and/or other suitable characteristics.
If the application 112 supports cookies, the request can also include a first party cookie for the publisher of the content that includes the digital component slot. This can enable SSP 170 and/or DSP 150 to use additional user data in selecting digital components to consider for presentation in the digital component slots.
If supported by the application 112, the request can also include a group identifier for a user group that includes the user of the application 112 as a member. This group identifier is a low entropy (e.g., 16-20 bit) identifier of a group of users determined to have similar cross-domain browsing modes, for example, without sharing information from the devices at each device. This can enable SSP 170 and/or DSP 150 to infer additional information about the user of application 112.
In phase B, MPC cluster 130 transmits a context digital component request to SSP 170 for the publisher that includes the content of the digital component slot. This request can include a context signal, a first-party cookie, and/or a group identifier. This request does not include user group membership data.
In phase C, SSP 170 sends a context-digital component request to one or more DSPs 150. In stage D, DSP 150 generates and transmits digital component selection data to SSP 170. This selection data can include a context-based vector V generated by the DSP 150 based on information included in the contextual digital component request (e.g., based on a context signal) and using information obtained or inferred based on the first party cookie and/or the group identifier context 。
For each DSP 150, it is a context-based vector V context Can have its user group-based vector V stored by the MPC cluster 130 ug The structure of (1). This enables MPC cluster 130 to perform dot product calculations to each user-group-based vector V for DSP 150 ug A selection value of a digital component corresponding to the user group is determined. For example, a context-based vector V for the DSP 150 context Can have a vector V based on user groups therewith ug Each of the same dimensions and characteristics. However, DSP 150 is able to determine context-based vector V based on information in the context-numeric component request context To generate a custom selection value for the digital component request. Each DSP 150 can provide a single context-based vector V for a given context-numeral component request context For determining a user group-based vector V ug The selection values of each of its digital components stored at the MPC cluster 130.
Except for providing context-based vectors V context In addition, DSP 150 can provide one or more conditional selection values or vectors to be stored at MPC cluster 130 for current or future digital component requests. For example, DSP 150 can use the new for storage at MPC cluster 130Or updated user group-based vector V ug Piggy-backing onto the response. Using vectors V per user group ug DSP 150 can provide other data for storage at MPC cluster 130, such as the user group Request Key UG _ Request _ Key of the vector and/or metadata of the vector. The vector can be split into secret shares and/or digital signatures by DSP 150 before being sent to SSP 170 to protect user privacy, protect business confidential information, prevent computing system MPC 1 And MPC 2 Access information in the clear, and/or prevent man-in-the-middle attacks or eavesdropping (e.g., between DSP 150 and SSP 170 or between other collaborators interposed therebetween, but not shown in fig. 2).
In stage E, SSP 170 transmits the vector and/or selection values received from DSP 150 to MPC cluster 130. As described in more detail below, SSP 170 can apply a publisher control to the vector and/or selection value prior to transmitting the vector and/or selection value to MPC cluster 130. In some implementations, SSP 170 can modify the vector and/or selection values to account for the sharing arrangement prior to sending the vector and/or selection values to MPC cluster 130.
In phase F, the MPC cluster 130 performs the digital component selection process and transmits the selection results to the application 112. An example selection process is illustrated in fig. 4 and described below. MPC cluster 130 is also capable of storing a user group-based vector V ug And associated metadata/keys associated with the corresponding digital component for use in a subsequent digital component selection process.
In stage G, the application 112 transmits a notification to the MPC cluster 130. The notification can identify the digital component presented by the application and/or include data indicating whether the digital component was interacted with (e.g., selected by) a user of the application 112. In some implementations, the notification in phase G can be piggybacked onto the digital component request in phase a in the near future. This piggybacking reduces the number of requests sent by application 112 and may reduce the network and battery consumption of application 112.
FIG. 3 is a swim lane diagram of an example process 300 for selecting a digital component for presentation at a client device. The operation of the process 300 can be performed, for example, by a client device 110, a computing system MPC in an MPC cluster 130 1 And MPC 2 And DSP 150. The operations of process 300 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and the instructions of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 300. Although the process 300 and the other processes below are described in terms of two computing system MPC clusters 130, MPC clusters having more than two computing systems can also be used to perform similar processes. Additionally, the operations of process 300 can be implemented by SSP 170.
For each digital component, the DSP 150 can also upload additional data, such as metadata, for the digital component. The additional data of the digital component can include a user group identifier of a user group corresponding to the digital component. The data of the digital component can also include a user group Request Key UG _ Request _ Key based on a set of context selection signals indicating a context for which the digital component is eligible (e.g., a location of the client device 110, a spoken language selected for the application 112, a Universal Resource Locator (URL) with which the resource of the digital component can be presented). The MPC cluster 130 caches or otherwise stores user-group-based vectors V of digital components provided to the MPC cluster 130 for future digital component requests ug . As described above, the data can be stored in a two-level LUT or other suitable data structure.
The client device 110 identifies a set of user group identifiers (306). The set of user group identifiers can be user group identifiers of user groups that include the user as a member. For example, the set of subscriber group identifiers can be subscriber group identifiers in a subscriber group list. The application 112 presenting the content or the trusted program can identify the set of user group identifiers, for example, by accessing the user group list from a secure store of the client device 110.
To protect the privacy of the user so that the computing systems of the MPC cluster 130 cannot access the user group identifier of the user, the application 112 can send a respective secret share of the user group identifier to each computing system of the MPC cluster 130. In this example, the application 112 sends a distributed point function representing the secret share of the user identifier. However, other suitable secret sharing techniques can be used, including sending cuckoo filters to the MPC cluster 130 as described below.
The application 112 or trusted program can use the set of user group identifiers to generate a probabilistic data structure (308). In some embodiments, the probabilistic data structure is a cuckoo filter with a table using two hash functions F1 and F2. Cuckoo hashing is a hashing method that uses two (or more) tables with a total of (1+ \ epsilon) N entries to store N items, such as user group identifiers, so that each entry will contain at most one item. In addition, each item, such as a user group identifier, will appear in one of the two entries defined by one of the two hash functions F1 and F2, the output of which is the set [ (1+ \ ε) N ]. The entry associated with key k will appear at position F1(k) in the first table or position F2(k) in the second table. For a fairly large number N of entries (e.g., N ≧ 1000), it is sufficient to use ε ═ 0.1, which means that the N entries can be hashed using the cuckoo hashing method, with the combined table size being 1.1N. In these expressions, ε may be referred to as a load factor.
To construct a sparse private information retrieval data structure using cuckoo filters, up to N user group identifiers are hashed into two (or more) tables using cuckoo hashing, the tables having a combined size of 1.1N or another suitable size. All empty entries can be replaced with a 0-bit string. To query the user group identifier associated with key k, the user group identifier (if it exists in the data structure) will appear at entry F1(k) in the first table or F2(k) in the second table. Using table size C1.1N will yield 1 ≦ F1(ug _ id), F2(ug _ id) ≦ C.
The client device 110 can generate the cuckoo filter by computing two possible locations of the subscriber group identifier for each subscriber group identifier in the set of subscriber group identifiers using both hash functions F1 and F2. If at least one of the two possible positions is empty, the client device 110 can insert an element into the empty position, which can be in either table, to complete the insertion process for the subscriber group identifier. If both locations are occupied, the client device 110 randomly picks one location and exchanges the item currently in that location with the item to be inserted. The client device 110 can then recalculate the two hash functions F1 and F2 and attempt insertion again. This process is repeated until the insertion is successful or too many attempts fail for each subscriber group identifier in the set of subscriber group identifiers. After the cuckoo filter is built, each user group identifier ug _ id is stored in a specific index of the table.
The client device 110 generates a distributed point function (310). The application 112 or trusted program can generate a distributed point function using the point function and the cuckoo filter table. The distributed point function represents a secret share of the point function. In general, the point function is a function f i :[N][N]Wherein when x! When i and f (i) is 1, f (x) is 0. Point function f i Is two functions g i :[N]->[N]And h i :[N]->[N]So that for the set [ N ]]All of x, f in (1) i (x)＝g i (x)+h i (x) In that respect Furthermore, function h is given i Or g i (but not both) detailed description, it is not possible to recover the original function f i 。
For each ug _ id, a point function G is required ug_id Which can be split into distributed point functions g ug_id,1 And g ug_id,2 So as to be directed to
If i ═ F 1 (ug _ id), then G ug_id (i)＝g ug_id，1 (i)+g ug_id，2 (i)＝ug_id， (1)
Otherwise G ug_id (i)＝g ug_id，1 (i)+g ug_id，2 (i)＝0， (2)
Similarly, a point function H is required ug_id Which can be split into distributed point functions h ug_id,1 And h ug_id,2 To makeGet to
If i ═ F 2 (ug _ id), then H ug_id (i)＝h ug_id，1 (i)+h ug_id，2 (i)＝ug_id (3)
Otherwise H ug_id (i)＝h ug_id，1 (i)+h ug_id，2 (i)＝0 (4)
That is, the distributed point function of a particular point function can be evaluated over a number of possible points (e.g. a number of possible user group identifiers), but the result is always zero except for the user group identifier ug _ id of the user group for which the user is a member and for which the distributed point function is generated. The distributed point function has a very small data size that can be transmitted over the network without using too much bandwidth and with lower latency than sending subscriber group identifiers in other encrypted forms.
For a given user group identifier ug _ id, a point function F 1 And a corresponding first table of cuckoo filters, the client device 110 generates MPCs for the computing system 1 Distributed point function g of ug_id,1 And for computing systems MPC 2 Distributed function g of ug_id,2 . Similarly, for a given user group identifier ug _ id, the point function F 2 And a corresponding second table of cuckoo filters, the client device 110 generates MPCs for the computing system 1 Distributed point function h of ug_id,1 And for computing systems MPC 2 Distributed point function h of ug_id,2 。
The client device 110 transmits a digital component request to the MPC cluster 130 (312). The digital component request can include a distributed point function. Client device 110 is capable of providing a computing system MPC with 1 The transmission includes each distributed point function g ug_id,1 And each distributed point function h ug_id,1 The digital component request. The numeric component Request can include a first level lookup Key, such as SHA256(UG _ Request _ Key). The client device 110 can generate the context signal based on the digital component requestFirst level lookup keys. For example, the client device 110 can generate the first level lookup key by generating a composite message that includes a context signal, such as a URL of a resource with which the selected numeric component is to be presented, a location of the client device 110 that submitted the numeric component request, a spoken language of the application 112 that is to present the selected numeric component, and so forth. Client device 110 can then apply a hash function, such as a SHA256 function, to the composite message to generate a first level lookup key.
Similarly, the client device 110 can send a computing system MPC 2 The transmission includes each distributed point function g ug_id,2 And each distributed point function h ug_id,2 The digital component request. The numeric component Request can also include a first level lookup Key, such as SHA256(UG _ Request _ Key). Since the context signals are the same, MPC is to be sent to both computing systems in MPC cluster 130 1 And MPC 2 The first level lookup key can be the same.
Computing system MPC 1 Vector M capable of creating additive secret shares 1 ]＝[m 1,1 ,…m C,1 ]Wherein for 1. ltoreq. i.ltoreq.C, m i，1 ＝g ug_id，1 (i) In that respect Brackets are used herein to denote secret shares of a secret. Similarly, computing system MPC 2 Vector M capable of creating additive secret shares 2 ]＝[m 1,2 ,…m C,2 ]Wherein for 1. ltoreq. i.ltoreq.C, m i，2 ＝g ug_id，2 (i) .1. the In this example, secret shares [ m ] i,1 ]And [ m ] i,2 ]Is G ug_id (i) Additive secret shares of, and [ M ] 1 ]And [ M 2 ]Is a vector of two additive secret shares of M, i.e. dimension C, where M i ＝G ug_id (i) In that respect The secret shares may be generated using Shamir's secret sharing or another suitable secret sharing technique. Computing system MPC 1 And MPC 2 Can be a point function h ug_id,1 (i) And h ug_id,1 (i) Similar vectors are generated.
Sending to a computing System MPC 1 And/or MPC 2 At least one ofThe numeric component request of (a) can include a contextual numeric component request. As described above, the context-digital-component request can include a context signal for the digital-component presentation opportunity, the first-party cookie, and/or the group identifier. In this case, the context signal can include a URL of the electronic resource containing the content, a location of the client device 110, a spoken language of the application 112, and the like.
The MPC cluster 130 transmits a context digital component request to the SSP 170 (314). The SSP 170 transmits a context-numeral component request to one or more DSPs 150 (316). DSP 150 can generate a context-based vector V based on information included in the contextual digital component request context And transmits a vector V including context-based to the SSP 170 context Is sent (318). As described above, DSP 150 can also provide new or updated user group-based vectors V ug For the current digital component selection process and/or to be stored at the MPC cluster 130 for future digital component selection processes.
In some implementations, the response from the DSP 150 can include an unconditional selection value for a digital component selected based on the context signal and/or other information included in the contextual digital component request. This can be for a context-based vector V context In addition to or instead of. For example, these digital components can be selected for the current digital component request rather than for caching at the MPC cluster 130.
In some implementations, SSP 170 can also adjust the vector and/or selection values based on a shared protocol between the issuer, SSP 170, and/or DSP 150 before sending the vector and/or selection values to MPC cluster 130. This is achieved byThe result of doing so is a final amount to be provided to the publisher from the digital component provider 160 for the overall selection value provided for the presentation or user interaction with the digital component. In one example, the SSP 170 can convert a user group-based vector V ug Multiplying by the value (1-share) to obtain a resultant vector V ug '. The parameter share can represent the use of a vector V to be provided to SSP 170 and/or DSP 150 ug Percentage of the calculated selection value. The parameter share can vary across digital components based on the provider's protocol with SSP 170 and/or DSP 150. In this example, the result vector V ug ' enabling a computing system MPC 1 And MPC 2 Stored and used multiple times as long as the stored vector and its digital component remain active on the digital component selection process.
In another example, SSP 170 can vector a context V context Multiplying by (1-share) to obtain a resultant vector V context '. In this example, the result vector can be computed by the computing system MPC 1 And MPC 2 Stored and used in the current digital component selection process. However, since the context vector is specific to the current digital component selection process, it may not be used for future digital component selection processes. In another example, the parameter share of each digital component can be computed by the computing system MPC 1 And MPC 2 Stored and reused for future digital component selection processes, e.g. to calculate a result vector V ug ' and V context ’。
The MPC cluster 130 performs a digital component selection process in response to the digital component request to select a digital component to distribute to the client device 110 (322). This can include using a first level lookup key to MPC at a computing system 1 And MPC 2 Identifies qualified digital components in the two-level lookup table. This can also include identifying a numeric component as a candidate for selection based on the numeric component having a user group identifier that matches one of the user group identifiers of the users. This can also include selecting a digital component from the candidate digital components based on the selection value of the digital component. This can be entirely within the computing system MPC 1 Or MPC 2 Inability to access user groups in clear textIdentifiers and/or other user data. An example process for selecting digital components using a secure MPC process is illustrated in fig. 4 and described below.
When using two tables of cuckoo filters, the MPC cluster 130 can provide a secret share of the two selection results, one for each table. However, retrieving two user group list selection values for two digital components facilitates selecting value obsolete. To reduce this risk, the MPC cluster 130 can use another secure MPC technique to return at most one selection result with the highest selection value, as described below.
The client device 110 determines the digital component corresponding to the selection result (326). Slave computing system MPC for client device 110 1 And MPC 2 Receiving each selection result of two secret shares, the client device 110 can determine the selection result from the two secret shares. For example, using an additive secret share library as described in more detail below, the client device 110 can add together two secret shares of the selection result to obtain the selection result in the clear. This enables the client device 110 toThe selection value of the digital component and metadata of the digital component, such as the identity of the digital component, the location from which the client device 110 can download the digital component, etc., can be accessed.
If the resource includes multiple digital component slots, client device 110 can request the respective digital component of each slot from MPC cluster 130 and from SSP 170. To reduce the consumed bandwidth and latency, the client device 110 can transmit a distributed point function of subscriber group identifiers for all digital component slots at once.
Although the steps for generating the cuckoo filter and the distributed point function are shown in fig. 3 as being performed after receiving the content, the client device 110 can generate the cuckoo filter and the distributed point function prior to receiving the content. For example, the client device 110 can generate and cache the cuckoo filter and the distributed point function periodically or in response to the user group membership of the user being updated.
FIG. 4 is a swim lane diagram of an example process 400 for selecting digital components for distribution to client devices. The operation of the process 400 can be performed, for example, by a computing system MPC in an MPC cluster 130 1 And MPC 2 To be implemented. The operations of process 400 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 400.
Computing system MPC 1 And MPC 2 Using user group-based vectors V associated with each cached digital component ug And responding to the slave client device110 received digital component request and received context vector V context To determine a selection value for the digital component (402). Computing system MPC 1 And MPC 2 Computing system MPC capable of determining vector 1 And MPC 2 The selection values for each digital component stored, for example, in the two-level LUT, and any vectors received from the SSP 170 in response to a digital component request received from the client device 110, as described above with reference to fig. 3.
To determine a selection value of a digital component, a computing system MPC 1 And MPC 2 Enabling determination of a stored vector V associated with a digital component ug And a context-based vector V received from the DSP 150 for the digital component (and other digital components of the DSP 150) in response to the digital component request context The dot product of (a). In some implementations, a computing system MPC 1 And MPC 2 Determining one of the vectors (e.g., V) depending on the manner in which sharing is being handled context ) And the result (e.g., V) of another vector after sharing (e.g., after multiplication by (1-share)) ug ') is used. The result of the dot product is a selection value of the digital component requested for the corresponding digital component. If a parameter share is provided to the MPC cluster 130 for a digital component, the value resulting from the dot product calculation can be multiplied by (1-share).
In some implementations, a computing system MPC 1 And MPC 2 Three vectors (context vector V of digital component) can be determined context User group-based vector V of digital component ug And a user vector V representing a user profile of a user of the client device 110 from which the digital component request was received user ) The dot product of (a) is used as the selection value of the digital component. Each vector can have the same dimensions and the same elements representing the same features. However, each vector can have a different element value, depending on the weight of the feature represented by that element. For example, the value of the location element for austin in the user profile vector can have a positive value if the user is in austin or a negative or zero value if the user is not in austin; identity in context vectorsThe value of the location element can have a positive value if the publisher content currently shown to the user is highly correlated with austin; the values of the same-position elements in the user-group-based vector of the digital component are positive in the case where the digital component is related to austin. To calculate the dot product of three vectors, the system MPC is calculated 1 And MPC 2 First an element-by-element multiplication is performed between corresponding elements (one for each of the three vectors) and then the results are summed. For example, assume that the three vectors are each V 1 ＝{v 1，1 ...v 1，n }、V 2 ＝{v 2，1 ...v 2，n H and V 3 ＝{v 3，1 ...v 3，n The dot product between the three vectors will be
The application 112 can generate a user profile for the user, for example, based on the feature vectors received from the SSP 170 or the DSP 150. Application 112 can accumulate user profiles over time and MPC to each computing system 1 And MPC 2 A corresponding secret share of the user profile is provided.
In some implementations, a computing system MPC 1 And MPC 2 The selection values determined using two (or three) vectors can be restricted. In this way, the resulting selection value is not higher than the first threshold value or lower than the second threshold value. For example, a computing system MPC 1 And MPC 2 The cap function can be used to output a selected value ranging between a specified minimum value and a specified maximum value for a digital component, e.g., as specified by the DSP 150 for the digital component.
In some implementations, for example, if a user profile is not used, the system MPC is calculated 1 And MPC 2 The selection value is calculated in the clear using the clear vector. In some implementations, a computing system MPC 1 And MPC 2 A secure MPC process is used to compute a selection value using the secret shares of each vector. For example, SSP 170 or DSP 150 can split a vector derived from sensitive user information into secret shares and corresponding secrets of the vectorSecret shares are provided to each computing system MPC 1 And MPC 2 . In a computing system MPC 1 And MPC 2 After calculating the secret share of each selected value, the system MPC is calculated 1 And MPC 2 The selection value can be reconstructed in plaintext, for example by adding together secret shares of the selection value (if the secret shares are additive secret shares). In implementations that include a user profile vector in the dot product calculation, as described below, a secure MPC process is used to prevent the computing system MPC from being used 1 Or MPC 2 The user profile is accessed in clear text to protect user privacy.
Computing system MPC 1 A qualified number component is identified (404). As described above, for each user interface group that includes a user of a client device as a member, the digital component request can include the use of a hash function F by the client device 110 1 Distributed point function g generated for user interface group identifier ug _ id ug_id,1 . If a two-table cuckoo filter is used, the digital component request can also include the use of a hash function F by the client device 110 2 Distributed point function h generated for user interface group identifier ug _ id ug_id,1 . The digital component Request can also include a first level lookup Key, such as a SHA256(UG _ Request _ Key), generated based on the context signal of the digital component Request.
Computing system MPC 1 Qualified user-group-based vectors for digital components can be identified using the first-level lookup key of the digital component request. Computing system MPC 1 Information that can access the first level LUT and use the first level lookup key to identify a user group-based vector of the second level LUT that includes digital components that are eligible for presentation for the set of context signals represented by the first level lookup key (e.g., for which the user group-based vector has been received). For example, as described above, each row of the second level LUT includes information for a digital component and a second level lookup key based on a set of context signals. Thus, computing system MPC 1 Identifying second level LUTs using first level lookup keys having a match to a set of context signals defined by the first level lookup keys received in a digital component requestA row of a context signal set. These rows include information of digital components that are eligible to be presented or have eligible user-group-based vectors for the context defined by the first level lookup key received in the digital component request.
Computing system MPC 2 Qualified user group-based vectors are identified (406). Computing system MPC 2 Qualified user-group-based vectors can be identified for digital component requests received from client devices 110. The digital component request can include, for each user interface group that includes as members a user of the client device, use of a hash function F by the client device 110 1 Distributed point function g generated for user interface group identifier ug _ id ug_id,2 . If a two-table cuckoo filter is used, the digital component request can also include the use of a hash function F by the client device 110 2 Distributed point function h generated for user interface group identifier ug _ id ug_id,2 . The digital component Request can also include a first level lookup Key, such as SHA256(UG _ Request _ Key), generated based on the context signal of the digital component Request.
By a computing system MPC 2 The first level lookup key of a received digital component request can be associated with a first level lookup key requested by a computing system MPC 1 The received first level lookup keys are the same. Each distributed point function g ug_id,2 Can be based on and calculated by a system MPC 1 Received distributed point function G with same corresponding distributed point function ud_id To generate. That is, the client device 110 can use the hash function F for the user group identifier ud _ id of the user group comprising the user as a member 1 Generating a distributed function g of a digital component request ug_id,1 And g ug_id,2 . Similarly, the client device 110 can use a hash function F for the user group identifier ud _ id of the user group comprising the user as a member 2 Distributed function h for generating digital component requests ug_id,1 And h ug_id,2 。
For simplicity, the remaining steps of process 400 are based on responses according to a hash function F 1 The digital component of the distributed point function ofDigital components for distribution to client devices 110 are selected for description. However, it is possible to match the hash function F 2 The distributed point function of (2) performs the same steps. This can result in two selected digital components, and the MPC cluster 130 can perform additional operations to select one of the two digital components, as described below.
Computing system MPC 2 Qualified user-group-based vectors can be identified using the first-level lookup key requested by the numeric component. Computing system MPC 2 A first level LUT can be accessed and a first level lookup key used to identify a row of a second level LUT that includes information for a digital component (e.g., for which a selection value has been received) that is eligible to be presented for the set of context signals represented by the first level lookup key. As described above, each computing system MPC 1 And MPC 2 A corresponding two-level LUT can be maintained that includes the same information.
For each qualified selection value, calculate the system MPC 1 And MPC 2 A determination is made in response to the digital component request whether the selection value and its digital component are candidates for selection for distribution to the client device 110 (408). The candidate user group-based vector is a qualified user group-based vector having a numeric component of a user group identifier that matches the user group identifier of the user (e.g., a user group identifier of a user group that includes the user as a member). As described above, each digital component can be mapped to one or more user groups that include members to which the DSP 150 or digital component provider 160 indicates that the digital component should be presented. As described above, this information is part of the second level lookup key of the second level LUT.
The numeric component of a row in the second level LUT is a candidate for selection if its subscriber group identifier ug _ id, which is part of the second level lookup key for that row, matches one of the subscriber group identifiers of the subscriber. Conceptually, to determine whether a digital component is a candidate to represent group membership of a user using a cuckoo filter that allows insertion of an element into one of two (or more) possible locations, the computing system can determine whether the user group identifier ug _ id of the second level lookup key matches one of the two (or more) tags in one of the two (or more) cuckoo filter locations.
In addition to this user group based condition, the MPC cluster 130 can apply other conditions, frequency control, muting, budgeting, k-anonymity, and/or pacing constraints. For example, to be a candidate for a digital component selection process, the digital component can be required to meet one or more conditions of eligibility in the digital component selection process. These conditions can include, for example, whether a user group associated with the digital component matches a user group of users to which the digital component is to be provided; whether a digital component satisfies a frequency control condition that prevents the same user from being exposed to the same digital component more than a specified number of times within a period of time; whether the digital component satisfies a mute condition that prevents the digital component from being presented to a user who has selected to mute; whether the digital component satisfies a k-anonymity condition; and/or whether an activity that includes the digital component satisfies a pacing eligibility condition for pacing distribution of the digital component in the activity.
Computing system MPC 1 And MPC 2 Enabling computing system MPC using secure MPC techniques with secret shares to identify candidate user group-based vectors 1 And MPC 2 Neither is it known which digital components are candidates or include groups of users that are members of the user. To do so, the computing system MPC 1 A first share of the candidate parameter is _ dc _ a _ candidate is calculated for each cached digital component associated with the user group identifier ug _ id. Similarly, computing system MPC 2 A second share of the candidate parameter is _ dc _ a _ candidate is calculated for each cached digital component associated with the user group identifier ug _ id. The candidate parameter is _ dc _ a _ candidate can be a boolean value (e.g., zero or one) indicating whether a user group based vector of digital components linked to the cache is a candidate. If the user group-based vector of the digital component is a candidate, its corresponding selection value calculated using the user group-based vector is a candidate and the corresponding digital component.
The first share of the candidate parameter is _ dc _ a _ candidate can be denoted as [ is _ dc _ a _ candidate [ ] dc,1 ]And a second contribution of the candidate parameter is _ dc _ a _ candidate can be represented as [ is _ dc _ a _ candidate [ ] dc,2 ]. The first secret share of the candidate parameters of the cached digital component dc associated with the user group identifier ug _ id is equivalent to ug _ id ═ g ug_id，1 (F 1 (ug_id))]In a cell
Computing system MPC 1 And MPC 2 Enabling MPC in a computing system 1 And MPC 2 Using secure MPC techniques for hash function F in one or more round-trips between 1 Computing the secret share [ is _ dc _ a _ secret [ ] dc,1 ]And [ is _ dc _ a _ candidate dc,2 ]To evaluate ug _ id ═ g ug_id，1 (F 1 (ug_id))]And ug _ id ═ g ug_id，2 (F 1 (ug_id))]Is used as the equality expression. That is, computing system MPC 1 And MPC 2 Being able to be based on a distributed point function g for each user group identifier received from the client device 110 as part of a digital component request ug_id,1 And g ug_id,2 To determine the secret share of each cached digital component dc associated with the user group identifier ug id is dc a candidate dc,1 ]And [ is _ dc _ a _ candidate dc,2 ]。
Computing system MPC 1 And MPC 2 A secret sharing technique or secret sharing library that supports the operations shown in table 3 below can be used. One example secret sharing technique that supports these operations is security through private information aggregation (SEPIA).
TABLE 3
Computing system MPC 1 An order of selection values calculated based on the user group-based vector and the context vector is determined (410). Similarly, computing system MPC 2 An order of selecting values is determined based on the user group-based vector and the context vector (412). MPC for each computing system 1 And MPC 2 The order of the select values associated with the cached digital components in their second level LUTs that match the UG _ Request _ keys can be determined. This order can include all of the select values computed for all digital components cached in the second level LUT that match the UG _ Request _ Key, including select values for candidate digital components that are eligible for the digital component selection process and select values for digital components that are not candidates and therefore are ineligible. The order can be from the highest selection value calculated to the lowest selection value calculated. In some implementations, the selection value for the order can be a value that will be provided to the publisher of the resource with which the selected digital component will be presented, e.g., after any sharing with DSP 150 and/or SSP 170. Since the selection values are in plain text, the computing system MPC is calculated 1 And MPC 2 No round trip calculations need to be performed to order the selection values. Alternatively, each computing system MPC 1 And MPC 2 The select values of their second level LUTs can be independently ordered. If the selection value is stored as a secret share in each computing system MPC 1 And MPC 2 Where each computing system MPC 1 And MPC 2 Having a respective secret share for each selected value, the system MPC is calculated 1 And MPC 2 A secure MPC process can be performed using round-trip calculations to order selected values.
Computing system MPC 1 And MPC 2 A secret share of the accumulated value for each candidate selection value associated with the cached digital component is determined (414). Conceptually, of a given selected value of the digital componentThe accumulated value represents the total number of candidate selection values from the top of the order to the given selection value (including the given selection value if it is a candidate). This concept is shown in table 4 below.
Sorted selection values | is_dc_a_candidate | Cumulative value (acc) | Is the cumulative value equal to 1? |
Highest point of the design | 0 | 0 | 0 |
Second highest | 1 | 1 | 1 |
Third highest | 0 | 1 | 1 |
Height four | 1 | 2 | 0 |
… | … | … | … |
TABLE 4
In some implementations, the cumulative value of a given selection value for a digital component represents the total number of candidate selection values from the top of the order to the given selection value (excluding the given selection value if it is a candidate). In this example, the fourth column would indicate whether the accumulated value is equal to zero instead of one. In either case, the accumulated value of each selection value indicates a position of the selection value in a ranked order of candidate selection values, the candidate selection values being candidates for selection based on the selection values being associated with user group identifiers matching the user's user group identifier.
In table 4, for each selection value having a candidate parameter is _ dc _ a _ candidate equal to one, the cumulative value (acc) increases as it progresses from the top of the order to the bottom of the order. For example, the accumulated value acc of the highest selection value associated with the digital component of the cache is zero, because the candidate parameter is _ dc _ a _ candidate of the digital component with the highest selection value is equal to zero. The accumulated value acc of the digital component having the second highest selection value is one because the candidate parameter is _ dc _ a _ candidate of the digital component having the second highest selection value is equal to one and no digital component higher than the digital component having the second highest selection value has the candidate parameter is _ dc _ a _ candidate equal to one. Moving downwards in order, the candidate parameter is _ dc _ a _ candidate for the digital component having the third highest selection value is zero, so the accumulated value acc of the digital component having the third highest selection value is not incremented from the accumulated value acc of the digital component having the second highest selection value. Since the candidate parameter is _ dc _ a _ candidate of the digital component having the fourth high selection value is one, the accumulated value acc of the digital component having the fourth high selection value is incremented by one from the accumulated value acc of the digital component having the third high selection value. Therefore, the cumulative value acc of the digital component having the fourth highest selection value is equal to two because there are two selection values having the candidate parameter is _ dc _ a _ candidate from the highest selection value to the fourth highest selection value (including the highest selection value and the fourth highest selection value).
In some implementations, the cumulative value for a given numerical component represents the total number of candidate numerical components from the top of the order to the given numerical component (excluding the given numerical component). In this example, the fourth column would indicate whether the accumulated value is equal to zero instead of one. In either case, the cumulative value for each numeric component indicates the position of the numeric component in the ranked order of candidate numeric components, which are candidates for selection based on the numeric component being associated with a user group identifier that matches the user's user group identifier.
Using Table 4, the System MPC is calculated 1 And MPC 2 The digital component corresponding to the selected parameter having the value of one for the candidate parameter is _ dc _ a _ candidate and the value of one for the accumulated value acc is selected for distribution to the client device 110, as indicated in the fourth column of table 4. This represents the digital component with the highest ranking selection value for which the candidate parameter is _ dc _ a _ candidate has a value of one. Since the candidate parameter is _ dc _ a _ candidate is in secret share in order to compute the system MPC 1 And MPC 2 Maintaining user privacy and ensuring that user data is not compromised, therefore computing system MPC 1 And MPC 2 A secret share of the accumulated value acc of each selection value is determined and a round trip calculation is used to determine which selection value has an accumulated value acc equal to one and a candidate parameter is _ dc _ a _ candidate equal to one.
Computing system MPC 1 And MPC 2 The secret shares of the accumulated value acc of each of their digital components can be determined independently without any round trip computation. For example, a computing system MPC 1 The first contribution [ acc ] of the accumulated value acc can be determined for each digital component dc by traversing all the selection values in order from highest to lowest and summing the candidate parameters is _ dc _ a _ candidate of the digital component in order along the way dc,1 ]As described above with reference to table 4. Similarly, computing system MPC 2 The candidate parameter is of the digital component can be determined for each digital component dc by traversing all the selection values in order from highest to lowest and ordering the digital component along the wayA dc _ a _ candidate is summed to determine a second contribution [ acc ] of the accumulated value acc dc,2 ]。
Computing system MPC 1 And MPC 2 For each selected value associated with the digital component dc, a secret share is determined (416) indicating whether the accumulated value acc has a result of a specified value. The specified value may be a value of one, as shown in columns 3 and 4 of table 4, or zero in other implementations. As described above, the digital component whose accumulated value is one and whose candidate parameter is _ dc _ a _ candidate is one is the digital component having the highest selection value among the candidate selection values.
Computing system MPC 1 And MPC 2 Capable of participating in multiple rounds of computations as part of a secure MPC process, e.g., multiple Remote Procedure Calls (RPCs), to compute an equality operation acc from secret shares of each digital component dc 1. At the end of this process, the system MPC is calculated 1 Having a result [ acc ] for each digital component dc dc,1 ]Computing a secret share of 1, and calculating the system MPC 2 Having a result [ acc ] for each digital component dc dc,2 ]Another secret share of 1.
Computing system MPC 1 And MPC 2 The selection result is determined (418). Computing system MPC 1 And MPC 2 Being able to dc-base on acc for each digital component dc Secret share and candidate parameter is _ dc _ a _ candidate of 1 dc The secret share of the selection result. To do so, the computing system MPC 1 And MPC 2 The winner parameter is _ dc _ the _ winner of each digital component dc can be calculated from the secret shares dc . Winner parameter is _ dc _ the _ winner dc Can be a boolean value (e.g., zero or one, or true or false) indicating whether the digital component dc is the winner of the selection process (e.g., whether the corresponding digital component was selected for distribution to the client device 110 in response to the digital component request).
Winner parameter is _ dc _ the _ winner of digital component dc The candidate parameter is _ dc _ a _ candidate can be based on a digital component dc And whether the accumulated value acc of the digital component is equal to the specified value, e.g., depending on how such asThe fourth column of table 4 is identified above as being equal to one or zero. In the following example, the MPC cluster 130 can determine the product of these two parameters for each digital component. Other techniques can also be used to determine the candidate parameter is _ dc _ a _ candidate dc Whether true or one and whether the accumulated value is equal to the specified value, for example using a truth table as described below.
MPC for each computing system 1 And MPC 2 A secret share multiplication protocol can be executed to calculate a winner parameter is _ dc _ the _ winner from the secret shares for each digital component dc dc ＝＝(is_dc_a_candidate dc ×(acc dc 1)). Depending on the secure MPC process used, this may require the computing system MPC to be 1 And MPC 2 One RPC in between multiplies the two secret shares. At the end of this MPC process, the system MPC is calculated 1 Having a result is _ dc _ the _ winner for each digital component dc dc Is denoted as [ is _ dc _ the _ winner [ ] dc,1 ]＝[is_dc_a_candidate dc,1 ]x([acc dc,1 ]1). Similarly, computing system MPC 2 Having a result is _ dc _ the _ winner for each digital component dc dc Is denoted as [ is _ dc _ the _ winner [ ] dc,2 ]＝[is_dc_a_candidate dc,2 ]x([acc dc,2 ]1). Note that for all digital components, at most one digital component has a winner parameter is _ dc _ the _ winner equal to one dc Which corresponds to the digital component selected for distribution to the client device 110. All other digital components will equal zero.
Computing system MPC 1 And MPC 2 The selection result can be calculated based on the winner parameter of the digital component and the digital component information element dc _ information _ element of the digital component. As described above, the digital component information element dc _ information _ element of the digital component can include a selection value of the digital component and other data of the digital component, for example, in the form of a byte array having a sequence of numbers.
Computing system MPC 1 And MPC 2 Can be calculated as r using the following relation 5esult F1 The result of the selection.
In this example, result is selected F1 Will have a value of zero if there is no cached numerical component with a subscriber group identifier matching that of the subscriber or will have a value equal to one with a winner parameter is _ dc _ the _ winner dc The value of the digital component information element dc _ information _ element of the selected digital component.
To perform calculations in secret shares, a computing system MPC is calculated 1 All cached digital component information elements are fetched and for each digital component dc, the digital component information element dc _ information _ element that can be in plaintext is fetched dc Multiplying a first secret share [ is _ dc _ the _ winner ] of the winner parameter dc,1 ]. Computing system MPC 1 The sum of these products can then be determined and returned to the client device 110 that submitted the digital component request. That is, computing system MPC 1 It is possible to determine the first share as a result of the summation using the following relational expression 6
Computing system MPC 2 Similar calculations can be performed to determine a second fraction of the result using the relationship 7 below
Computing system MPC 1 Can select the first share of the resultclient device 110. Similarly, computing system MPC 2 Can select the second share of the resultclient device 110. Application 112 can then use both secret sharesMPC cluster 130 does not identify a digital component for any group of users that includes the user as a member. Otherwise, result is selected F1 Having a value equal to the digital component information element dc _ information _ element, the application 112 is able to parse the digital component information element dc _ information _ element to obtain a selection value and metadata of the digital component. As described above, the application 112 can then display the digital component or perform a selection process using the digital component and other digital components received from the SSP 170.
In a dual-table cuckoo filter implementation, application 112 can receive two selection results, each hash function F 1 And F 2 One. In this example, the application 112 can select digital components from a collection of digital components that includes both these digital components and any digital components received from the SSP 170.
In some implementations, the application 112 can perform a final verification that the user group of digital components selected by the MPC cluster 130 matches the user group that includes the user as a member. For example, the digital component information element dc _ information _ element of each digital component can include a user group identifier of the digital component. The application 112 is able to compare the user group identifier of the digital component information element dc _ information _ element with the user group list of the user. If there is no match, the application 112 can exclude the digital component from the selection process. If there is a match, the application 112 can include the digital component in the selection process.
As described above, receiving two selection results from the MPC cluster 130 can facilitate selection value fighting. To reduce this risk, the MPC cluster 130 can perform a process that returns only one selection result.
In a single table cuckoo filter implementation, each subscriber group identifier ug _ id can appear at its index F 1 (ug _ id) and F 2 Two (or more) places of (ug _ id). Let M denote a single-table cuckoo filter and M i Representing the value of the ith element in the table. If it is notMPC cluster 130 can use the following relation 8 or 9 to calculate the candidate parameter is _ dc _ a _ candidate of the digital component dc associated with the user group identifier ug _ id for the selection value dc 。
Relation 8 can relate to two equality tests that can be performed in parallel. Relation 9 can involve one equality test and one multiplication. When using a secure MPC process to perform these operations on secret shares, the multiplication requires fewer computations and one round trip but the equality test can require more computations and four round trips in the probability solution. Therefore, relational expression 8 can require fewer round trips but more computations than relational expression 9.
Computing system MPC 1 The candidate parameter is _ dc _ a _ candidate of the digital component dc associated with the user group identifier ug _ id can be calculated for the selection value on the secret share using the following relation 10 based on relation 8 dc 。
[is_dc_a_candidate dc，1 ]＝(ug_id＝＝[g ug_id，1 (F 1 (ug_id))])+(ug_id＝＝[g ug_id，1 (F 2 (ug_id))]) (10)
Similarly, computing system MPC 2 The candidate parameter is _ dc _ a _ candidate of the digital component dc associated with the user group identifier ug _ id can be calculated on the secret share using the following relation 11 based on relation 9 dc 。
[is_dc_a_candidate dc，2 ]＝(ug_id＝＝[gu g_id，2 (F 1 (ug_id))])+(ug_id＝＝[g ug_id，2 (F 2 (ug_id))]) (11)
Computing system MPC 1 The candidate parameter is _ dc _ a _ candidate of the digital component dc associated with the user group identifier ug _ id can be calculated on the secret share using the following relation 12 based on relation 9 dc 。
[is_dc_a_candidate dc，1 ]＝(ug_id-[g ug_id，1 (F 1 (ug_id))])×(ug_id-[g ug_id，1 (F 2 (ug_id))]) (12)
Computing system MPC 2 The candidate parameter is _ dc _ a _ candidate of the digital component dc associated with the user group identifier ug _ id can be calculated on the secret share based on relation 10 using relation 13 below dc 。
[is_dc_a_candidate dc，2 ]＝(ug_id-[g ug_id，2 (F 1 (ug_id))])×(ug_id-[g ug_id，2 (F 2 (ug_id))]) (13)
The MPC cluster 130 can then calculate the secret share of the selection result using a process similar to the process 300 of fig. 3.In particular, a computing system MPC 1 And MPC 2 The secret share [ acc ] of the accumulated value acc can be calculated for each digital component dc based on the order of the selected values of the digital component and the candidate parameters of the digital component, respectively dc，1 ]And [ acc ] an dc，2 ]。
Computing system MPC 1 And MPC 2 The secret contribution [ is _ dc _ the _ winner ] of the winner parameter is _ dc _ the _ winner can be calculated for each digital component dc based on the candidate parameters of the digital component dc and whether the accumulated value of the digital component dc is equal to one, respectively dc,1 ]And [ is _ dc _ the _ winner dc,2 ]。
Computing system MPC 1 And MPC 2 The secret share [ result ] of the selection result can be calculated using the following relations 14 and 15 1 ]And [ result 2 ]。
[result 1 ]＝∑ dc ([is_dc_the_winner dc，1 ]×dc_information_element dc ) (14)
[result 2 ]＝∑ dc ([is_dc_the_winner dc，2 ]×dc_information_element dc ) (15)
Computing system MPC 1 Can select the result [ result 1 ]Is returned to the application 112 and the computing system MPC is calculated 2 Can select the result [ result 2 ]Is returned to the application 112. As described above, the application 112 can then use the two secret shares to reconstruct the selection result.
In some implementations, rather than using a distributed point function, the cuckoo filters themselves can be sent to the MPC cluster 130. In this example, the application 112 can use a pseudo-random function (PRF) parameterized by a user group identifier or an identifier from a lockout identifier set and either of two random variables generated by the application 112. For example, assume that the three random variables generated by the application 112 are rand _ var1a, rand _ var1b, and rand _ var 2. It is also assumed that each entry in the bucket is a k-bit integer. In some implementations, the application 112 and MPC cluster 130 agree on the PRF in advance, where k is the number of bits in each entry in the bucket of the cuckoo filter. Each item in the bucket of the cuckoo filter can be occupied by a user group identifier or a lockout identifier, or empty. For example, the application 112 can generate a cuckoo filter table with the entries PRF (ug _ id, rand _ var1a), PRF (blocked _ id, rand _ var1b), or 0, where ug _ id is an identifier of the user group generated by applying HMAC on a label of the user group (e.g., user group identifier) based on the domain of the content provider and 0 represents an empty entry. The procedure is repeated for all subscriber group identifiers and blocking identifiers.
The application 112 can generate a vector B based on a cuckoo filter table generated for the user group identifier and the lockout identifier. Each value B in the vector B can be divided into i Is represented as B i ＝(A i PRF (rand _ var2, i)) modp, where a is the cuckoo filter table and i is the index of the vector B and the cuckoo filter table a. When the application 112 initiates a request for a digital component slot, the application transmits rand _ var1a, rand _ var1b and rand _ var2 as parameters of the request to the computing system MPC 1 . The application 112 also transmits the vectors B, rand _ var1a and rand _ var1b as parameters of the request to the computing system MPC 2 . PRF (rand _ var2, i) and B i Is A i At Z p Are respectively calculated by the computing system MPC 1 And MPC 2 And (4) maintaining. Because of the computing system MPC 1 And MPC 2 Neither of these secret shares is accessible, so neither computing system is able to reproduce the cuckoo filter table, thereby preserving user privacy.
Computing system MPC 1 It is determined whether each candidate selection value is associated with the user group specified in the request. Computing system MPC 1 Receiving an equivalent of an array of secret shares of a cuckoo filter table M, from [ M 1 ]And (4) showing. Each subscriber group identifier present in M will be located in one of N possible locations.
Computing system MPC 1 The user group-based candidate parameter [ is _ dc _ a _ candidate is calculated according to the following relation 16 x，1 ]：
Where Π represents the multiplication of multiple terms. Here, ug _ id (x) is a function for retrieving the user group identifier ug _ id associated with the selection value x, { F 1 ,…F N Is the set of hash functions used to compute the possible indices of the entries in the cuckoo filter table a, and rand _ val1a is the random value received in the digital component request. [ M ] A x,1 ]Is a number group [ M 1 ]The xth element of (1). Is an equality test between a plaintext integer and a secret share of a secret integer. The result is a secret share of a secret integer that is either 0 (not equal) or 1 (equal). Here, [ M ] i,1 ]Is [ PRF (rand _ val2a, i) 1 ]。
Similarly, computing system MPC 2 The user group-based candidate parameter [ is _ dc _ a _ candidate is calculated according to the following relation 17 x，2 ]：
Here, [ M ] i,2 ]Value of (A) is B i 。
The above description relates the multiplication between secret shares of secret integers whose values are 0 or 1 to a computer logical AND. The above description also relates to the computer logic NOT to secret shares of 1 minus a secret integer whose value is 0 or 1. In some implementations, alternative solutions can be employed to evaluate logical expressions with respect to secret shares. For example, to compute a logical AND of additive secret shares of a secret integer whose value is 0 or 1, the MPC server can compare the sum of those additive secret shares with the number of secret shares. For yet another example, to compute an arbitrary logical expression with secret shares as input, the MPC server can employ a truth table approach, i.e., computing the system MPC 1 Can construct a model including MPC 2 A truth table for one row for each possible combination of held input secret shares. Computing system MPC 1 Is represented as [ result 1 ]The result of (2) randomly selects secret shares. For each row, computing system MPC 1 Can combine its input secret shares and be processed by the MPC 2 The held speculation inputs secret shares to reconstruct the inputs of the logical expression in the clear, and then evaluates the results of the logical expression. For each row, computing system MPC 1 The result is split into two secret shares, one of which is [ result 1 ]And the other is [ result 2 ]. Computing system MPC 1 Then [ result ] will 2 ]To the rows in the truth table. In a computing system MPC 1 After completing the construction of the truth table, the system MPC is calculated 2 An inadvertent propagation extension (OTe) can be initiated to extract truth tables from the MPC 2 The row corresponding to the held input secret share. The extraction result is [ result 2 ]. At the end of the above process, the system MPC is calculated 1 And MPC 2 Respectively maintain [ result 1 ]And [ result 2 ]They are secret shares of the logic expression result. Computing system MPC 1 Not knowing [ result 2 ]And calculating the value of the system MPC 2 Not knowing [ result 1 ]The value of (c). In some implementations, a computing system MPC 1 And MPC 2 The is _ dc _ a _ candidate can be determined by constructing a garbled circuit to evaluate a logic expression sv,1 And is _ dc _ a _ candidate sv,2 。
Fig. 5 is a flow diagram illustrating an example process 500 for selecting digital components for distribution to client devices. The operation of the process 500 can be performed, for example, by a computing system MPC of an MPC cluster 130 1 Or a computing system MPC 2 And (5) realizing. The operations of process 500 can also be implemented as instructions stored on one or more computer-readable media, which can be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 500. For simplicity, process 500 is described as being performed by a computing system MPC 1 And (6) executing.
Computing system MPC 1 A digital component request is received from a client device 110 (502). The digital component request can include identifying the user that includes the client device 110A secret share of data of one or more first user groups of which the user is a member. For example, the digital component request can include one or more cuckoo filters or other suitable probabilistic data structures and/or distributed point functions. Each distributed point function can represent a secret share of the point function that indicates whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier. E.g. by a computing system MPC 1 The received digital component request can include a distributed point function g for each user group that includes the user of the client device 110 as a member ug_id,1 . As described above, the digital component request can also include a context signal, a first party cookie, and/or a group identifier.
The numeric component request can also include a lookup key. For example, the digital component Request can include a UG _ Request _ Key, which can be a composite message based on a set of context signals (e.g., the set of context signals requested by the digital component). Capable of adding MPC systems (e.g. computing system MPC) to one or more 2 ) Sending similar digital component requests, the additional computing system will be in a secure MPC process with the computing system MPC 1 Cooperate to select a digital component to be provided to the client device 110 in response to a digital component request. For each distributed point function of a digital component request, each other digital component request can include a corresponding distributed point function generated for the same user group identifier using the same point function. For example, a computing system MPC 2 Will be for MPC by computing system 1 Each distributed point function g received ug_id,1 Receiving a corresponding distributed point function g ug_id,2 。
Computing system MPC 1 A context-numeral component request is transmitted to the content platform (504). For example, a computing system MPC 1 A context-digital component request can be transmitted to the SSP 170. The context digital component request can include a context signal, a first-party cookie, and a group identifier of the received digital component request.
Computing system MPC 1 Receiving a selection number for each of a plurality of digital componentsAccordingly (506). The selection data for the digital component can include first vector data defining a context-based vector V of values selected based at least in part on the set of context signals context . For example, the selection data for the digital component can include a context-based vector or an array of first secret shares of values of the context-based vector.
Computing system MPC 1 Obtaining, for each of the plurality of digital components, second vector data defining a user group-based vector V based at least in part on values selected for respective user groups corresponding to the digital component ug (508). For example, a computing system MPC 1 Capable of storing user group-based vectors V ug Of a first secret share of (a) a user group-based vector V ug 。
Computing system MPC 1 A selection value for each digital component is determined based on the first vector data and the second vector data (510). For example, a computing system MPC 1 Capable of determining two vectors V ug And V context The dot product of (c). Computing system MPC if vectors are transmitted and stored in secret shares 1 Capable of interacting with a computing system MPC 2 Cooperate to determine vector V ug And V context Is calculated as the secret share of the dot product of (a). In some implementations, as described above, a computing system MPC 1 Using vector V ug 、V context And a user profile vector of a user profile of the user to determine a selection value of the digital component.
Computing system MPC 1 A candidate parameter is determined for each digital component using a secure MPC process in cooperation with one or more second computing systems in the plurality of MPC systems (512). The candidate parameter is _ dc _ a _ candidate can indicate whether the digital component satisfies one or more conditions of eligibility in the digital component selection process. These conditions can include, for example, whether a user group associated with the digital component matches a user group of users to which the digital component is to be provided; whether a digital component satisfies a frequency control condition that prevents the same user from being exposed to the same digital component more than a specified number of times within a period of time; the digital component isWhether a mute condition is satisfied that prevents the digital component from being presented to a user who has selected to mute; whether the digital component satisfies a k-anonymity condition; and/or whether an activity that includes the digital component satisfies a pacing eligibility condition that paces distribution of the digital component in the activity.
For example, the candidate parameter is _ dc _ a _ candidate can indicate whether the second user group identifier corresponding to the numeric component matches at least one of the one or more first user group identifiers. That is, in this example, the candidate parameter is _ dc _ a _ candidate for the digital component indicates whether the user group identifier of the digital component matches the user group identifier of the user group that includes the user of the client device 110 as a member. If so, the digital component is a candidate digital component for selection. As described above, computing system MPC 1 Enabling secure MPC processes to be used with MPC including computing systems 2 The one or more additional MPC systems of (a) cooperate to obtain a first secret share of the candidate parameter is _ dc _ a _ candidate for each selected value.
Such determination of candidate parameters for a digital component can be performed after filtering the digital component based on context, for example, using the user group Request Key UG _ Request _ Key. For example, the MPC cluster 130 can use the candidate parameter is _ dc _ a _ candidate to perform two sequential phase filtering operations, one based on the request key and the other based on one or more conditions.
Computing system MPC 1 A first secret share of the selection result is generated (514). Computing system MPC 1 Capable of being associated with, and including, a computing system MPC 2 The one or more additional MPC systems of (a) cooperate to generate a selection result. Typically, the selection result identifies the candidate digital component having the highest selection value. As described above, the MPC system is able to rank the selection values, determine a cumulative value for each selection value, and determine the secret share of the winner parameter is _ dc _ the _ winner for each digital component associated with the selection value. The MPC system can then cooperate to determine, for each selection value, a secret share of the sum of the product of the winner parameter of the selection value and the digital component information element of the selection value as the secret share of the selection result. For example, MPC systemThe secret share of the sum of products can be determined using relation 5 shown above.
Computing system MPC 1 A first secret share identifying the selection result of the given digital component is provided to client device 110 (516). As described above, the selection result identifies the selected digital component and the selected value of the digital component. The client device 110 is also capable of receiving a respective secret share of the selection result from each of the one or more additional MPC systems. As described above, the client device 110 can use the secret shares to reconstruct the selection result.
In some cases, context vector V can be used context Considered as sensitive information for the DSP. In such a case, the DSP can provide the context vector V, e.g. in secret shares context An encrypted version of (a). For example, DSP 150 can send a MPC to a computing system 1 Providing a context vector V context And to the MPC 2 Providing a context vector V context The second secret share of (a). In this example, a computing system MPC 1 And MPC 2 The digital component with the highest selection value can be determined and is therefore the digital component of choice using the secure MPC process so that the computing system cannot access the vector or selection value in the clear. This procedure can be used instead of the cumulative value based sorting described above.
Computing system MPC 1 And MPC 2 The secure MPC process can then be performed to compute a dot product of vectors (e.g., user group vectors, context vectors, and user vectors). The result of this calculation is two secret share arrays V 1 ]＝{[v 1,1 ],…[v N,1 ]And [ V ] 2 ]＝{[v 1,2 ],…[v N,2 ]}. In these representations, N is the dimension of the array and the second subscript represents the secret share of the element, e.g., first 1 and second 2.
Each element in the array can correspond to a selection value of a digital component. For example, [ v ] 1,1 ]And [ v ] 1,2 ]Can be two secret shares of an element of a selection value for a digital component. In some implementations, each element in the array includes a digital componentCompound messages (e.g., byte arrays). As described above, the byte array can include information for the digital components and selection values resulting from the dot product calculations.
Assume computing system MPC 1 And MPC 2 Both can access the plaintext Item { Item } corresponding to the element array 1 ,…Item N The same list of. The function recornstruct can be used to reconstruct the secret share [ v ] i,1 ]And [ v ] i,2 ]Value v of an item in an array of representations i . That is, v i ＝reconstruct([v i,1 ],[v i,2 ])。
Computing system MPC 1 And MPC 2 It is possible to return the maximum value and the corresponding term in the array with the maximum value without sending it in the clear to the computing system MPC 1 Or MPC 2 Any information is leaked. To do so, the computing system MPC 1 Secret share pair { [ max _ v ] should be returned 1 ],[max_element 1 ]And computing the system MPC 2 Secret share pair { [ max _ v ] should be returned 2 ],[max_element 2 ]Cause recornstruct ([ max _ v) } 1 ],[max_v 2 ])＝reconstruct([v max_i,1 ],[v max_i,1 ]) And recornstruct ([ max _ element ] 1 ],[max_element 2 ])＝Item max_i . In this example, the maximum value corresponds to the highest selected value and the largest element corresponds to the numerical component having the maximum value. The largest element can include a composite message, such as a byte array of digital components.
One way to determine the maximum value and the element with the maximum value in the secret shares is to make a pairwise secret share comparison between any pair of secret shares. For example, for any i ≦ i < j ≦ N, the computing system MPC 1 And MPC 2 Can cooperate to perform secret share comparisons. Computing system MPC 1 To obtain [ m ] i,j,1 ]＝[v i,1 ]>[v j,1 ]And computing a system MPC 2 To obtain [ m ] i,j,2 ]＝[v i,2 ]>[v j,2 ]. Comparison of the parameter m i,j ＝reconstruct([m i,j,1 ],[m i,j,2 ]) At v i >v j In the case of (a) is one,otherwise it is zero. Parameter m i,j Secret shares of [ m ] i,j,1 ]And [ m ] i,j,2 ]Can be Z M Wherein M is greater than or equal to N.
To find the largest element, the system MPC is calculated 1 Locally for each i e [1, N]How many other values are greater than v i The counting is performed, that is,
Computing system MPC 1 Can pass through [ max _ v 1 ]＝∑ i [v i，1 ]×[is_max_element i，1 ]To calculate [ max _ v ] 1 ]. Computing system MPC 1 Can also pass through [ max _ element ] 1 ]＝∑ i ([element i，1 ]×[is_max_element i，1 ]) To calculate [ max _ element ] 1 ]。
Similarly, computing system MPC 2 Can pass through [ max _ v ] 2 ]＝∑ i [v i，2 ]×[is_max_element i，2 ]To calculate [ max _ v ] 1 ]. Computing system MPC 2 Can also pass through [ max _ element ] 2 ]＝∑ i ([element i，2 ]×[is_max_element i，2 ]) To calculate [ max _ element ] 2 ]。
To improve the efficiency of these comparison operations, the MPC cluster 130 can use a scoreThe median-and-conquer algorithm. To do so, the MPC cluster 130 can divide the elements of the array into groups, e.g., into
Use is provided with
As described above, it is possible to base on three vectors: context vector V of digital component context User group-based vector V of digital component ug And a user vector V representing a user profile of the user user To determine a selection value for the digital component. The group identifier can be computed by the application 112 using an algorithm chosen by an application developer (e.g., a browser developer) for the entire digital component distribution industry. The group identifier algorithm is not customizable by individual content platforms or digital component providers. In this example, the MPC cluster 130 can use three vectors to compute a selection value for a digital component, such as the selection value Cap (V) ug ·V context ·V user ，max sv ，min sv ) Where max sv Is the maximum selected value, min sv Is the minimum selected value, such that the resulting selected value is between the maximum and minimum values. The dot product between the three vectors can be calculated as Σ i (V ug，i1 ×V context，i ×V user，i ) Where i is the index of the vector.
In some cases, the publisher amount after sharing is considered privacy sensitive, e.g., if the amount is using user vector V user Derived from the cross-domain user profile as described above. In such cases, it may be desirable to prevent each server of the MPC cluster 130 from accessing the publisher amount in the clear. Without the amount of plaintext, the MPC cluster 130 may not be able to order the selection values, as described above. In this example, to determine whether a digital component is a candidate, a computing system MPC is calculated 1 Can receive the message from 1 ]The equivalent of an array of secret shares of the cuckoo filter table M is represented. Each user group identifier ug id, if present in M, would be located in one of N possible locations.
Ug _ id (dc) is defined as a function for retrieving the user group identifier ug _ id corresponding to the digital component dc whose information is stored by the MPC cluster 130. Will also be { F 1 ，...F N Defined as a function for calculating the possible indices of the entries in the cuckoo filter table a.
Computing system MPC 1 Will [ match _ ug dc,1,i ]Is calculated asclient device 110, via a computing system MPC 2 Is encrypted. Secret shares match _ ug dc,1,i ]And [ match _ ug dc,1,i ]Is 0 or 1, where match _ ug dc，i ＝[match_ug dc，1，i ]bitwise_xor[match_ug dc，2，i ]A one in case the user group identifier of the digital component dc matches the i-th possible position in the valley filter, and a zero otherwise. In addition, note that match _ ug if and only if the digital component dc corresponds to the user interest group identifier of the user group that includes the user as a member dc ＝match_ug dc,1 Or match _ ug dc,2… Or match _ ug dc,N Is true (with a high probability depending on the length of the tag in the cuckoo filter).
The above techniques can also be modified to support recency and other per-user group level signals. The group of interest recency, i.e. how close the user is added to the group of users, can be an important signal for deciding on the selection value. For example, if a user was added to the remarketing list more than eight hours ago, the value of distributing digital components using user group membership can be reduced by half. To achieve accurate selection of values based on recency without compromising security and privacy guarantees, the above-described cryptographic techniques can be modified such that each content platform buckets recency into a small number of buckets, e.g., four time-period-based buckets. For each bucket, the content platform can compute a definition vector for the dot product described above.
When generating a digital component request for the MPC cluster 130, the application 112 can combine the recency bucket information with a user group identifier to create an augmented user group identifier, e.g., an HMAC (ug id), for each user group that includes the user as a member, where recency bucket id is an identifier of a recency bucket corresponding to when the user was added to the user group ug id. For example, if a user was added to a user group two hours ago, the augmented user group identifier can be an identifier based on a recency bucket for a time period of 1-3 hours before the current time. The application then inserts the augmented user group identifier into the cuckoo filter instead of the original user group identifier. The application 112 then divides the cuckoo filter into two secret shares for each of the two servers in the MPC cluster 130.
Upon receiving the context response, the MPC cluster 130 uses the dot-product technique described above to calculate the publisher amount in the clear for each cached numeric component and each valid recency bucket identifier. The MPC cluster 130 then inserts the digital components and the calculated issuer amount into the list. The MPC cluster 130 also inserts any selection values received with the context response in the same list and orders the list from highest to lowest based on the issuer amount. The list size is proportional to the average cardinality of the recency bucket. For example, if there are 1,000 cached digital components, then on average each cached digital component has four recency buckets, which will create a publisher amount list of 4,000 in size.
The MPC cluster 130 calculates the corresponding augmented user group identifier and then relies on a secret share equality test algorithm to check whether the augmented user group identifier is in a cuckoo filter to determine that the cached digital component and the corresponding selection value (e.g., publisher amount) are eligible for the selection process.
Similarly, the same approach can support other low-entropy per-user group user-level signals. For example, if the user group is a user who has the electronic device left in a shopping cart, the user level signal can be a barreled value of the electronic device, such as a low/medium/high amount.
FIG. 6 is a block diagram of an example computer system 600 that can be used to perform the operations described above. The system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 can be interconnected, for example, using a system bus 650. The processor 610 is capable of processing instructions for execution within the system 600. In some implementations, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor. The processor 610 is capable of processing instructions stored in the memory 620 or the storage device 630.
The storage device 630 is capable of providing mass storage for the system 600. In some implementations, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 can include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
Input/output device 640 provides input/output operations for system 600. In some implementations, the input/output devices 640 can include one or more of the following: a network interface device, such as an ethernet card, a serial communication device, such as an RS-232 port, and/or a wireless interface device, such as an 802.11 card. In another embodiment, the input/output devices can include driver devices configured to receive input data and transmit output data to external devices 660 (e.g., keyboard, printer, and display devices). However, other implementations can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system has been described in fig. 6, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium can be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment are capable of implementing a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, the computer can be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. Further, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., an HTML page) to the client device (e.g., for displaying data to a user interacting with the client device and receiving user input from the user). Data generated at the client device (e.g., a result of the user interaction) can be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (12)
1. A computer-implemented method, comprising:
receiving, from a client device and by a first computing system of a plurality of multi-party computing MPC systems, a digital component request comprising a first share of secret and a set of context signals identifying data of a user group that includes a user of the client device as a member;
transmitting, by the first computing system, a context-digital component request to a content platform;
receiving, by the first computing system and from the content platform, selection data for a plurality of digital components, wherein the selection data includes first vector data defining a context-based vector of values selected based at least in part on the set of context signals;
obtaining, by the first computing system and for each of the plurality of digital components, second vector data defining a user-group-based vector of values selected based at least in part on a respective user group corresponding to the digital component;
determining, by the first computing system, a selection value for each digital component based on the first vector data and the second vector data;
for each digital component, determining a candidate parameter indicating whether a respective user group identifier corresponding to the digital component matches a user group that includes the user as a member;
generating a first secret share of a selection result based on the selection value and the candidate parameter, the selection result identifying a given digital component having a highest selection value from a plurality of candidate digital components, wherein each candidate digital component is a digital component for which the selection value corresponding to the digital component indicates that the second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and
transmitting the first secret share identifying the selection result of the given digital component to the client device.
2. The computer-implemented method of claim 1, wherein determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data comprises determining a dot product of the context-based vector of values and a user-group-based vector of values for the digital component.
3. The computer-implemented method of claim 1 or 2, wherein the first vector data comprises a first secret share of a context-based vector of values and the second vector data comprises a first secret share of a user-group-based vector of values.
4. The computer-implemented method of claim 3, wherein determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data comprises cooperating with one or more second computing systems of the plurality of MPC systems to perform a secure MPC process to determine a dot product of a context-based vector of values and a user-group-based vector of values for the digital component.
5. The computer-implemented method of any preceding claim, wherein the selection value for each digital component is based on a user profile of the user.
6. The computer-implemented method of claim 5, wherein determining, by the first computing system, the selection value for each digital component based on the first vector data and the second vector data comprises determining a dot product of the context-based vector of the digital component, the user-group-based vector of the digital component, and a user-profile vector of the user profile of the user.
7. The computer-implemented method of any preceding claim, wherein determining the candidate parameter for each selection value comprises determining a first secret share of the candidate parameter for each selection value.
8. The computer-implemented method of any preceding claim, wherein generating the first secret share of the selection result comprises:
generating an order of the selection values based on the magnitude of each selection value;
determining a first secret share of an accumulated value for each selection value based on the order of the selection values and the candidate parameter for each selection value;
for each selection value, determining a first secret share of a winner parameter based on (i) the candidate parameter for the selection value and (ii) a result of an equality test that indicates whether the accumulated value for the selection value is a specified value;
for each selection value, determining a product of the winner parameter of the selection value and a digital component information element of the selection value, and determining a first secret share of a sum of the products as the first secret share of the selection result.
9. The computer-implemented method of claim 8, wherein determining the first secret share of the accumulated value for each selection value comprises:
for each individual selection value, determining an amount of selection values between a highest selection value and the individual selection value, including the highest selection value and the individual selection value, the amount of selection values having a candidate parameter indicating that the second user group identifier corresponding to the selection value matches at least one of the one or more first user group identifiers.
10. A system, comprising:
one or more processors; and
one or more storage devices storing instructions that, when executed by the one or more processors, cause the one or more processors to perform the method of any preceding claim.
11. A computer-readable storage medium carrying instructions that, when executed by one or more processors, cause the one or more processors to perform the method of any one of claims 1-9.
12. A computer program product comprising instructions which, when executed by a computer, cause the computer to perform the steps of the method according to any one of claims 1 to 9.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL280056A IL280056A (en) | 2021-01-10 | 2021-01-10 | Using secure mpc and vector computations to protect access to information in content distribution |
IL280056 | 2021-01-10 | ||
PCT/US2022/011372 WO2022150428A1 (en) | 2021-01-10 | 2022-01-06 | Using secure mpc and vector computations to protect access to information in content distribution |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115088005A true CN115088005A (en) | 2022-09-20 |
Family
ID=80218401
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280002639.6A Pending CN115088005A (en) | 2021-01-10 | 2022-01-06 | Securing access to information in content distribution using secure MPC and vector computation |
Country Status (7)
Country | Link |
---|---|
US (1) | US20230076256A1 (en) |
EP (1) | EP4081971B1 (en) |
JP (1) | JP7397212B2 (en) |
KR (1) | KR20220126767A (en) |
CN (1) | CN115088005A (en) |
IL (1) | IL280056A (en) |
WO (1) | WO2022150428A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
IL295204A (en) * | 2022-07-31 | 2024-02-01 | Google Llc | Single request architecture for increasing efficiency of secure multi-party computations |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN102473183A (en) | 2009-07-14 | 2012-05-23 | 索尼公司 | Content recommendation system, content recommendation method, content recommendation device, and information recording medium |
EP2688264B1 (en) | 2012-07-16 | 2016-08-24 | Alcatel Lucent | Method and apparatus for privacy protected clustering of user interest profiles |
JP2016510913A (en) | 2013-08-09 | 2016-04-11 | トムソン ライセンシングＴｈｏｍｓｏｎ Ｌｉｃｅｎｓｉｎｇ | Privacy protection recommendation method and system based on matrix factorization and ridge regression |
US10068247B2 (en) * | 2014-12-17 | 2018-09-04 | Excalibur Ip, Llc | Pacing control for online ad campaigns |
WO2018135334A1 (en) | 2017-01-19 | 2018-07-26 | ソニー株式会社 | Information processing device and information processing method, and computer program |
EP3688921B1 (en) | 2017-09-29 | 2021-07-14 | Robert Bosch GmbH | Method for faster secure multiparty inner product computation with spdz |
CN110325996B (en) | 2018-10-17 | 2022-12-20 | 创新先进技术有限公司 | Sharing secrets with a trusted initializer |
US11245536B2 (en) * | 2019-04-16 | 2022-02-08 | Meta Platforms, Inc. | Secure multi-party computation attribution |
-
2021
- 2021-01-10 IL IL280056A patent/IL280056A/en unknown
-
2022
- 2022-01-06 EP EP22702813.1A patent/EP4081971B1/en active Active
- 2022-01-06 KR KR1020227028251A patent/KR20220126767A/en unknown
- 2022-01-06 WO PCT/US2022/011372 patent/WO2022150428A1/en unknown
- 2022-01-06 US US17/793,831 patent/US20230076256A1/en active Pending
- 2022-01-06 CN CN202280002639.6A patent/CN115088005A/en active Pending
- 2022-01-06 JP JP2022549741A patent/JP7397212B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
KR20220126767A (en) | 2022-09-16 |
WO2022150428A1 (en) | 2022-07-14 |
US20230076256A1 (en) | 2023-03-09 |
EP4081971B1 (en) | 2024-03-06 |
JP2023521542A (en) | 2023-05-25 |
IL280056A (en) | 2022-08-01 |
EP4081971A1 (en) | 2022-11-02 |
JP7397212B2 (en) | 2023-12-12 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230188329A1 (en) | Using secure multi-party computation and probabilistic data structures to protect access to information | |
JP2023067928A (en) | Using secure multi-party computation to improve content selection process integrity | |
US20230077152A1 (en) | Feedback controller using secret sharing | |
EP4081971B1 (en) | Using secure mpc and vector computations to protect access to information in content distribution | |
WO2023027982A1 (en) | Cryptographically secure control using secure multi-party computation | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
JP7440667B2 (en) | Flexible content selection process using secure multiparty calculations | |
JP7425222B2 (en) | Privacy Preserving Measurements Using Secure Multiparty Computation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |