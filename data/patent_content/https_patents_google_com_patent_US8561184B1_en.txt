US8561184B1 - System, method and computer program product for comprehensive collusion detection and network traffic quality prediction - Google Patents
System, method and computer program product for comprehensive collusion detection and network traffic quality prediction Download PDFInfo
- Publication number
- US8561184B1 US8561184B1 US12/797,904 US79790410A US8561184B1 US 8561184 B1 US8561184 B1 US 8561184B1 US 79790410 A US79790410 A US 79790410A US 8561184 B1 US8561184 B1 US 8561184B1
- Authority
- US
- United States
- Prior art keywords
- entities
- heuristics
- collusion
- modeling module
- vector space
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/535—Tracking the activity of the user
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/14—Network analysis or design
- H04L41/145—Network analysis or design involving simulating, designing, planning or modelling of a network
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/08—Configuration management of networks or network elements
- H04L41/0893—Assignment of logical groups to network elements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/22—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks comprising specially adapted graphical user interfaces [GUI]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/16—Implementing security features at a particular protocol layer
- H04L63/168—Implementing security features at a particular protocol layer above the transport layer
Definitions
- the present disclosure relates generally to network traffic quality. More particularly, the present disclosure relates to a system, method, and computer program product for comprehensive collusion detection and network traffic quality prediction.
- Pay per click advertising is an arrangement in which operators of Web sites, acting as publishers, display clickable links from advertisers in exchange for a charge per click.
- Cost per click (CPC) advertising is a growing part of the online advertising market. Advertisers using the CPC model pay for each ad click. If the ad clicks are fraudulent, they can lose a substantial amount of money.
- Click fraud can occur in various ways and can be broadly classified into two types: 1) publisher fraud and 2) competitor fraud.
- Publisher fraud is when an online publisher or someone associated with the publisher generates as many clicks as possible on a Web site operated by the publisher. This is motivated by the fact that the publisher gets paid each time someone clicks on an ad, whether that click is valid or not.
- Competitor fraud is not motivated by making money on the clicks but rather in making the competitor pay for clicks that are useless to them. Clicking on a competitor's ads can cause their budget to be exhausted so there are no ads left to serve to legitimate users.
- botnets are a group of computers running a computer application—a software robot—controlled and manipulated by the owner or the software source. Botnets can be programmed to run autonomously and automatically to click on online ads. In the case of click farms, humans are enlisted to click on ads.
- Detecting collusion fraud is much more difficult than detecting click fraud by a single entity for several reasons.
- the fraudulent clicks may be spread across dozens or hundreds of sites and may be generated from numerous different IP addresses, making any possible detection computationally expensive and time consuming.
- Embodiments disclosed herein provide a collusion detection and traffic quality prediction system that combines various components together in a novel way to detect and block bad traffic in real time and improve traffic quality.
- Embodiments disclosed herein can be distributed, modular, extensible, scalable, and useful for servicing a large number of high volume clients, offering a complete, comprehensive solution to click fraud detection and network traffic quality prediction.
- collusion refers to an organized activity in which groups of visitors click on groups of ads. Examples may include, but are not limited to: botnets, a group of referrers or publishers involved in a scheme, auto-clicking, clicking on competitors' sites, etc.
- a collusion detection and traffic quality prediction system may comprise the following main components.
- collusion detection may involve exploring a large number of subgroups.
- this highly flexible and easily extendable modeling module is operable to model the detection of collusion and prediction of traffic quality (TQ) as graph (network) partitioning and vector space (pattern) clustering problems.
- TQ traffic quality
- graph network partitioning
- pattern vector space
- Examples disclosed herein show how to model various types of collusion in the frameworks of a network analysis or a vector space analysis. Specifically, examples disclosed herein show:
- Graphs and vectors are abstract mathematical objects. Analyzing these objects amounts to identifying groups of entities that are related to each other. The modeling module models these relationships as the edges in graphs or some metrics (e.g., Euclidean) in vectors. Since these objects are highly generic, they can be used to represent a wide range of collusion detection problems and TQ prediction issues. Some examples may include, but are not limited to:
- the modeling module can model the detection of collusion between a subset of IPs (i.e., IP addresses associated with human or non-human clickers) and a subset of referrers (i.e., domain based addresses where the clickers visited prior to reaching a destination such as a Web page or file in a publisher's domain) as finding high dense subgraphs in a bipartite graph where each the weight of each edge is the number of clicks from an IP to a referrer.
- IPs i.e., IP addresses associated with human or non-human clickers
- referrers i.e., domain based addresses where the clickers visited prior to reaching a destination such as a Web page or file in a publisher's domain
- Modeling the collusion detection problem as a clustering problem on networks or vector spaces can provide many advantages, including generality, flexibility and simplicity to click fraud detection.
- the modeling module can address many types of click fraud detection problems and operate in a plug-and-play environment.
- the modeling module can simultaneously construct several graphs or several sets of vectors, each representing a different piece of information. Different patterns can then be extracted from the graphs or vectors thus constructed.
- the modeling module may include a filtering feature or function for eliminating IPs with fewer than a predetermined threshold on the number of clicks.
- the system integrates a toolkit comprising various highly scalable and highly accurate graph partitioning/clustering (network analysis) and high dimensional vector space clustering (pattern analysis) methods, also referred to herein as heuristics or algorithms.
- Some of the network analysis techniques may include graph partitioning or graph clustering.
- the toolkit is highly optimized to take advantage of the underlying properties of the data.
- the networks (or graphs) generated by the modeling module can include groups of highly dense connected nodes sparsely connected to each other. Since many of the underlying graphs are sparse, some embodiments of the toolkit may include sparse graph partitioning algorithms.
- clustering can provide highly accurate results, minimizing false positives and false negatives.
- Clustering in general is known to be computationally difficult to solve.
- the networks corresponding to end users, online publishers, online referrers, etc. have special properties: they are very similar to social networks.
- vector space representations can offer powerful tools to analyze data.
- some embodiments disclosed herein integrate highly accurate, efficient, and scalable heuristics, including heuristics developed for social networks as well as heuristics developed for general clustering methods. For example, dimensionality reduction techniques such as principal component analysis (PCA) and singular value decomposition (SVD) may be utilized to reduce the dimensions and increase the speed, thus improving the run of clustering.
- PCA principal component analysis
- SVD singular value decomposition
- All the algorithms of the toolkit may take advantage of the underlying characteristics of the networks and vectors and are designed to be input/output (I/O) efficient.
- the toolkit utilizes input/output formats that are well defined for easy extensibility. In some cases, several types of analysis can be performed on each client at the same time. Thus, in some embodiments, the toolkit may run in a distributed environment with job scheduling mechanisms that optimize the running time.
- the post processor component may generate lists of entities such as IPs, cookie IDs, user IDs, publishers, subpublishers (referrers), keywords, etc. that are involved in collusion or low quality traffic. In some embodiments, this component is configurable for each client.
- the global block lists may be updated continuously with the new lists coming from individual clients.
- entities on these lists may be blocked from entering an individual client's domain or from reaching a destination in the client's domain. In some embodiments, entities on these lists may be blocked globally across multiple clients.
- a real time traffic scoring engine may have access to the latest global block lists and may utilize the global block lists to score, in real time, incoming click data.
- a job scheduler may schedule individual jobs to be performed by these computers based on the job sizes and the number available jobs.
- the job scheduler is operable to minimize or otherwise optimize the job completion time while balancing the load based on CPU speed and main memory of these distributed computers.
- the system is rapidly growing with an increasing number of clients, each having a very large amount (e.g., several millions of clicks in a week) of traffic. Processing such a large number of clients with high volume traffic requires a solid distributed environment. As the number of clients reaching from hundreds to thousands, the job scheduler can play a significant role in scaling.
- Embodiments disclosed herein can provide many advantages. For example, modeling collusion detection and TQ prediction as graph partitioning and high dimensional clustering problems provides a more robust, flexible, scalable, efficient, and accurate solution over ad hoc methods.
- the toolkit includes a wide range of heuristics: from highly accurate (but not necessarily scalable) to highly scalable (but not necessarily accurate).
- the system can be easily configured to choose a particular heuristic (from a suite of heuristics) depending on the type of client and their traffic distributions.
- the post processor can generate or modify global block lists in near real time, enabling the system to have real time impact on improving a client's traffic quality.
- the system can be distributed to take advantage of the processing power and resources of multiple CPUs (both homogeneous and heterogeneous).
- the job scheduler module can address the fast growth and enhance the scalability of the overall system.
- Each system component can be configured to run in a plug-and-play environment, which makes the system easily extensible. For example, updating the system to detect a new type of collusion may be as easy as adding a new heuristic or algorithm.
- the concept of vector spaces can be generalized to create signatures of various entities (multidimensional). These signatures can be monitored to see changing trends, enabling the system to continuously detect click fraud.
- FIG. 1 depicts a diagrammatic representation of an example click transaction in a network environment
- FIG. 2 depicts a diagrammatic representation of an example network architecture comprising a client and an embodiment of a collusion detection system.
- FIG. 3 depicts a flow diagram illustrating one example embodiment of a collusion detection process
- FIG. 4 depicts a diagrammatic representation of one example embodiment of a collusion detection system
- FIG. 5 depicts a flow diagram illustrating one example embodiment of a network modeling approach for collusion detection
- FIG. 6 depicts a diagrammatic representation of one example of a bipartite graph
- FIG. 7A depicts a diagrammatic representation of an example graph constructed from a bipartite graph
- FIG. 7B depicts a diagrammatic representation of the graph of FIG. 7A after the network analysis of FIG. 5 ;
- FIG. 8 depicts a diagrammatic representation of another example bipartite graph, showing high density subgraphs
- FIG. 9 depicts a flow diagram illustrating one example embodiment of a high dimensional vector space clustering modeling approach for collusion detection
- FIG. 10 depicts a plot diagram that exemplifies entities having similar frequency patterns in a given period of time
- FIG. 11 depicts a plot diagram that exemplifies entities having similar time or frequency patterns in a given period of time
- FIG. 12 depicts a diagrammatic representation of an example vector space with many proximal points
- FIG. 13 depicts a diagrammatic representation of an example embodiment of a collusion detection and traffic quality prediction system
- FIG. 14 depicts a diagrammatic representation of an example embodiment of a collusion detection flow between system components
- FIG. 15 depicts a diagrammatic representation of an example embodiment of a collusion detection and traffic quality prediction system operating in a scalable and distributed environment
- FIGS. 16 and 17 are plot diagrams that exemplify potentially high traffic quality.
- FIGS. 18 and 19 are plot diagrams that exemplify poor traffic quality.
- Computer-readable storage medium encompasses all types of data storage medium that can be read by a processor. Examples of computer-readable storage media can include random access memories, read-only memories, hard drives, data cartridges, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices.
- the terms “comprises,” “comprising,” “includes,” “including,” “has,” “having” or any other variation thereof, are intended to cover a non-exclusive inclusion.
- a process, product, article, or apparatus that comprises a list of elements is not necessarily limited only those elements but may include other elements not expressly listed or inherent to such process, product, article, or apparatus.
- “or” refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).
- any examples or illustrations given herein are not to be regarded in any way as restrictions on, limits to, or express definitions of, any term or terms with which they are utilized. Instead these examples or illustrations are to be regarded as being described with respect to one particular embodiment and as illustrative only. Those of ordinary skill in the art will appreciate that any term or terms with which these examples or illustrations are utilized encompass other embodiments as well as implementations and adaptations thereof which may or may not be given therewith or elsewhere in the specification and all such embodiments are intended to be included within the scope of that term or terms. Language designating such non-limiting examples and illustrations includes, but is not limited to: “for example,” “for instance,” “e.g.,” “in one embodiment,” and the like.
- FIG. 1 is a diagrammatic representation of an example click transaction in a network environment.
- IP Internet Protocol
- FIG. 1 is a diagrammatic representation of an example click transaction in a network environment.
- the beginning of the chain is IP (user) and the end of the chain is an advertiser. All the remaining entities make money, except advertisers who pay for their ads.
- click transaction 100 may begin with user 101 clicking on online ad 102 via user device 110 at a particular Internet Protocol (IP) address and may end with advertiser 190 paying for that click via ad payment 195 .
- Intermediaries 120 such as referrers 130 , publishers and sub-publishers 140 , and Ad networks 150 may make money from click 105 —by charging a fee and/or sharing ad payment 195 for ad 102 .
- Ad 102 may be a clickable link displayed on a Web page in the domain owned by referrer 130 . Clicking on ad 102 may redirect a browser application running on user device 110 to an URL referencing a Web page published by publisher 140 . Publisher 140 may be in Ad network 150 , of which advertiser 190 may also be a member. The publisher's Web page residing at the particular URL may contain promotional information on a product mentioned in ad 102 .
- Various techniques exist to track the identity of user 101 For example, in addition to redirecting the user's browser application to a publisher's server, a referrer's server may also send the publisher's server timestamps, cookies, user agents, or other information from user device 110 and/or user 101 .
- TQ prediction In addition to collusion detection, traffic quality (TQ) prediction is an important issue for Ad networks, since they use this information to optimize their traffic to maximize the profits.
- the current methodology of TQ prediction looks at each click independent of other clicks. However, each click may look very normal.
- FIG. 2 depicts a diagrammatic representation of an example network architecture comprising a client and an embodiment of a collusion detection system.
- Architecture 200 may comprise client site 210 and server site 220 .
- Server site 220 may represent a computing environment comprising one or more server machines.
- Each server machine may include a central processing unit (CPU), read-only memory (ROM), random access memory (RAM), hard drive (HD) or non-volatile memory, and input/output (I/O) device(s).
- An I/O device may be a keyboard, monitor, printer, electronic pointing device (e.g., mouse, trackball, etc.), or the like.
- the hardware configuration of this server machine can be representative to other devices and computers alike at server site 220 as well as client site 210 .
- Embodiments disclosed herein may be implemented in suitable software code (i.e., computer instructions translatable by a processor).
- suitable software code i.e., computer instructions translatable by a processor.
- computer instructions and data implementing embodiments disclosed herein may be carried on various types of computer-readable storage media, including volatile and non-volatile computer memories and storage devices. Examples of computer-readable storage media may include ROM, RAM, HD, direct access storage device arrays, magnetic tapes, floppy diskettes, optical storage devices, etc.
- the computer instructions may be written in Java® or any appropriate computer language.
- some or all of the software components may reside on a single server computer or on any combination of separate server computers. Communications between any of the computers described above may be accomplished in various ways, including wired and wireless. As one skilled in the art can appreciate, network communications can include electronic signals, optical signals, radio-frequency signals, and other signals as well as combinations thereof.
- a method for modeling collusion detection may be implemented at a server computer in an enterprise computing environment.
- Embodiments disclosed herein include a system and a computer program product implementing the method.
- the method may comprise receiving historical click data from a client computer connected to the enterprise computing environment over a network.
- the historical click data may comprise a plurality of clicks generated over a period of time and information associated with the plurality of clicks.
- the historical click data may be collected by the client computer.
- the client computer may be a server machine residing at the client site, in the client's computing environment or network.
- the client computer may collect click streams associated with visitors to one or more Web sites owned and/or operated by the client.
- the collected information may be stored in one or more log files.
- the client's one or more log files may contain the historical click data.
- the information associated with the plurality of clicks may comprise visitor Internet Protocol (IP) address information, date and time information, publisher information, referrer information, user-agent information, searched keywords, cookie, and so on.
- IP Internet Protocol
- software running on a server computer may extract entities from the historical click data.
- the extracted entities are utilized to formulate potential collusion among the entities as a network problem, a vector space problem, or a combination thereof.
- architecture 200 may comprise a computer program product having one or more computer readable storage media storing computer instructions translatable by a processor to perform an embodiment of fraud detection 400 .
- server site 220 and client site 210 may represent enterprise computing environments owned and operated by different entities.
- company A at server site 220 may provide click fraud detection services to company B at client site 210 .
- these entities may communicate over a network.
- these entities may communicate over a secure channel in a public network such as the Internet.
- Fraud detection software 400 running on one or more server machines (referred to herein as fraud detection system 400 ) at server site 220 may receive client file 215 from client site 210 .
- the client may be an online retailer and may collect click stream data from visitors to a Web site own and/or operated by the online retailer.
- client file 215 may be a Web log file or a file containing historical click data that can provide a detailed look at how each visitor got to the Web site, what pages were viewed by the visitor, what products and/or services the visitor clicked on, the date and time of each visit and click, and so on.
- the specific click stream data that can be collected from each click stream may include a variety of entities such as the Internet Protocol (IP) address associated with a visitor (which can be a human or a bot), timestamps indicating the date and time at which each request is made or click is generated, target URL or page and network address of a server associated therewith, user-agent (which shows what browser the visitor was using), query strings (which may include keywords searched by the visitor), and cookie data.
- IP Internet Protocol
- the corresponding click stream would generally contain the referrer page of the search engine and the search words entered by the visitor.
- Click stream data is generally created using a corporate information infrastructure that supports a Web-based enterprise computing environment. A skilled artisan can appreciate what typical click streams may contain and how they are generated and stored. Embodiments disclosed herein may extract one or more types of entities for further processing.
- fraud detection system 400 may receive client file 215 at a scheduled interval.
- client file 215 may contain one million clicks within a given time period of one day, which, on average, may take about half an hour or less to process and generate block list 220 .
- fraud detection system 400 may operate to analyze client file 215 , construct representations of entities contained in client file 215 , perform clustering on the representations thus constructed, identify IP addresses that might indicate potential collusion, and send block list 220 containing the identified IP addresses to client site 210 .
- fraud detection system 400 may operate to apply one or more filters to further optimize block list 220 such as removing known false positives, etc.
- database 280 which is accessible by fraud detection system 400 may maintain a list of verified or legitimate IP addresses. Fraud detection system 400 may utilize that list to validate the identified IP addresses, thus removing false positives and making the final list more accurate.
- FIG. 3 depicts a flow diagram illustrating one example embodiment of collusion detection process 300 and FIG. 4 depicts a diagrammatic representation of one example embodiment of collusion detection system 400 implementing process 300 .
- formulating potential collusion among entities extracted from historical click data as a network problem may comprise constructing network representations of the entities and their relationships, partitioning the network representations into subgroups of nodes to maximize a number of connections between the nodes in each subgroup, and forwarding the subgroups to a network analyzer for producing a first set of potentially colluding entities.
- constructing network representations of the entities and their relationships may further comprise utilizing nodes to represent the entities and utilizing connections between the nodes to represent the relationships between the entities.
- the network representations are constructed in accordance with a set of rules that include definitions of entity relationships with respect to collusion detection.
- historical click data may be received or obtained from a client (step 301 ).
- client file 215 may contain historical click data.
- fraud detection system 400 may comprise collusion modeling 401 for processing the historical click data received from client site 210 and generating clusters and/or high density subgraphs (step 303 ).
- collusion modeling 401 may be implemented as a software module or system. Further details on collusion modeling 401 are described below.
- fraud detection system 400 may further comprise heuristics 402 .
- Heuristics 402 may be applied to results from collusion modeling 401 to produce high density subgraphs and/or high dimensional clusters (step 305 ).
- results from heuristics 402 may be provided to collusion modeling 401 in an iterative process.
- collusion modeling 401 and heuristics 402 may operate on a daily basis as part of daily batch processing 420 .
- fraud detection system 400 may further comprise post processor 440 for processing the high density subgraphs and/or high dimensional clusters from daily batch processing 420 .
- post processor 440 may apply post process rules to each cluster and/or group of entities of interest (step 307 ).
- An example of a primary function of post processor 440 would be to produce block lists while minimizing false positives (step 309 ).
- these block lists may be client-specific.
- An example of a post process rule may filter out known legitimate IP addresses.
- fraud detection system 400 may further comprise storage location or database 460 for storing block lists, including block list 220 for client 210 , generated by post processor 440 .
- block list storage location 460 is accessible by real time click scoring engine 410 .
- real time click scoring engine 410 may score each click in real time utilizing information stored on block list storage location 460 .
- fraud detection system 400 may operate to build a framework based on the historical click data to capture the underlying information for collusion detection.
- graphs and/or vector spaces that represent useful pieces of information may be built or otherwise constructed for a given client.
- each of these representations (a graph or a vector space) may be examined and analyzed as an optimization problem (a computational problem).
- collusion detection may be modeled as a clustering problem with certain metrics, heuristics that are highly accurate and highly scalable for large data sets (clusters) may be developed and/or applied to identify IP addresses that indicate potential collusion.
- certain types of patterns in the representations of information pertaining to collusion can be useful to mine.
- a subgroup of referrers possibly hundreds
- a subgroup of users or visitors possibly several thousand
- the general traffic may look very normal
- certain users may visit certain referrers more frequently than other referrers, their time or frequency of visits may be very similar (which is a characteristic of a click farm), and the type of search keywords may also appear to be very similar, etc.
- One approach to detect these patterns is to enumerate all the possible combinations. This approach is computationally infeasible, since there can be millions of visitors and thousands or hundreds of thousands of referrers.
- collusion modeling 401 may utilize a plurality of collusion modeling approaches, including a network modeling approach (see FIGS. 5-8 ) and a high dimensional vector space clustering modeling approach (see FIGS. 9-10 ), to capture the right information that is relevant to detect collusion and/or predict traffic quality (TQ).
- collusion modeling 401 is operable to formulate (or model) various collusion detection and traffic quality prediction problems as network analysis or clustering problems.
- collusion modeling 401 is operable to formulate, for each client, the analysis of groups of entities as graph partitioning or high dimensional vector space clustering problems to capture the groups of entities that look “abnormal.”
- the notion of “abnormality” may be captured by densities, which, in some embodiments, can be defined by the number of edges and/or the number of nodes.
- the notion of “abnormality” may be captured by grouping entities with similar patterns—with respect to time, frequency, gaps between clicks, keywords, etc.
- FIG. 5 depicts a flow diagram illustrating one example embodiment of network modeling approach 500 for collusion detection.
- collusion modeling 401 may first construct various networks of nodes representing relationships among entities (step 501 ). Collusion modeling 401 may then operate to analyze the relationships to partition these nodes into high density subgraphs (step 503 ) and find a subset of nodes that have the highest density (step 505 ).
- nodes correspond to entities and edges correspond to the relationships between pairs of entities.
- weights are attached to these edges to denote the strength of connections.
- This network modeling approach can be easily generalized to any type of entities, allowing various types of relationships be examined to extract useful patterns, examples of which are briefly outlined as follows.
- IPs IP addresses
- a graph representing an IP to IP network may be constructed such that two nodes are connected if they visit the same referrers or use the same keywords, etc.
- FIG. 6 depicts a diagrammatic representation of one example of a bipartite graph.
- nodes in V1 correspond to visitors (entities of a first type) and nodes in V2 correspond to referrers (entities of a second type).
- Each edge E between a node in V1 and a node in V2 indicates a visitor, represented by the corresponding node in V1, visiting a particular referrer, represented by the corresponding node in V2.
- the edges are weighted.
- weights can be the number of clicks.
- an edge may connect a visitor node with a referrer node if an IP address associated with the visitor node visits the same referrer at least five times during a certain defined period of time.
- area 606 in bipartite graph 600 shows that of all the nodes in V1 and V2, a certain subset of visitors appear to visit a certain subset of referrers frequently.
- FIG. 7A is a diagrammatic representation of one embodiment of an example graph constructed from a bipartite graph.
- nodes in V correspond to referrers.
- Each edge E between two nodes indicates that the corresponding referrers share a number of visitors.
- the edges can be weighted.
- weights may correspond to a number of visits.
- weights may correspond to a number of common visitors.
- weights may correspond to the amount of ad revenue.
- an edge may connect two nodes if they share at least ten distinct visitors' IP addresses.
- FIG. 7B is a diagrammatic representation of one embodiment of an example graph having anomalous patterns.
- anomalous patterns in graph 700 are represented by subgraphs 702 , 704 , 706 , 708 , each of which may have a significantly higher number of connections than other subgraphs of same size.
- certain connections (edges) and/or nodes may be filtered out as they may be statistically insignificant (represented by dotted lines). For example, IP addresses with low volumes of clicks may be removed from further consideration.
- FIG. 8 depicts a diagrammatic representation of another example bipartite graph, showing high density subgraphs.
- entities 802 may comprise IP addresses and entities 804 may comprise domains.
- Each connection 806 may represent a link or association, perhaps weighted, between an IP address and a domain.
- High density subgraphs may be generated from bipartite graph 800 in a similar manner as described above with reference to FIGS. 7A and 7B .
- a graph may be partitioned into k subgraphs to maximize the number of connections in each subgraph.
- Various metrics can be used to perform partitioning and produce high density subgraphs.
- Example metrics may include: density, total weight, low cost cuts (a set of edges that disconnect the graph into subgraphs), sparse cuts, min-cuts, etc.
- Min-k cut, ratio cuts that aim at partitioning the graph into high density subgraphs.
- K-dense subgraphs find the densest subgraph of k nodes.
- vector spaces may be generalized to create signatures of various entities (multidimensional). These signatures can be monitored to see changing trends to detect collusion.
- FIG. 9 depicts a flow diagram illustrating one example embodiment of high dimensional vector space clustering modeling approach 900 for collusion detection.
- collusion modeling 401 may construct various types of vectors representing click patterns of entities (step 901 ). Collusion modeling 401 may then operate to analyze these vectors to find similar patterns with respect to time, frequency, gaps between clicks, keywords selected, etc. (step 903 ) and generate clusters by grouping entities with similar patterns (step 905 ). Examples of anomalous patterns may include:
- collusion modeling 401 may construct time series vectors for each referrer and IP combination (in the vector space model).
- the time series vectors represent clicking patterns, so if a subset of these entities have similar time series, it may represent referrer and IP collusion. Collusion modeling 401 may then formulate this as a high dimensional clustering problem.
- a vector is an array of real numbers—a signature of some sort.
- the length of the array is the dimensionality of the vector.
- each vector can be thought of as a point in some high dimensional space.
- similarity of two vectors can be measured using distance norms, and L 1 , L 2 and L_inf are the most useful norms.
- the number of dimensions is huge.
- vector spaces may be a more suitable representation than graphs, since they preserve more information. For example, in click farms, humans are employed to click on the ads. Assuming certain types of click farms exhibit similar clicking behavior, this type of fraud may be detected by analyzing time patterns associated with the clicks.
- T denote the time period of the data.
- T is divided into buckets Bi, representing a time slot.
- buckets Bi For each visitor (or referrer or publisher), measure the volume of traffic coming into Bi. Thus, for each IP there corresponds a time series vector of high dimensions.
- the probability of a group of IP addresses having very similar clicking patterns across a given time period is usually very small and is an indication of anomalous activity. Detection of groups of IP addresses that have similar clicking patterns in the time domain can be modeled as a clustering problem. Many well known clustering methods can then be used to identify “interesting” IP addresses.
- An example method for detecting visitors or referrers that have similar anomalous patterns may comprise dividing a time period into time slots (T). This time period may represent a defined length of time during which network traffic is monitored by a system implementing an embodiment disclosed herein.
- a frequency analysis may identify anomalous frequency patterns even if they are shifted in time. For example, bots may start at different times but may have very similar frequency of clicking in a given period of time. In some embodiments, this type of fraud may be detected by analyzing frequency patterns associated with the clicks.
- FIG. 10 depicts a plot diagram exemplifying one example of two entities having similar frequency patterns in a given period of time.
- frequency series 1002 and 1004 each corresponding to a particular IP address, share a number of frequency slots and have very similar frequency patterns, indicating potential collusion.
- the frequencies of clicks from individual IP addresses may be obtained by performing Fast Fourier Transformation on each time slot T. Thresholds may be used to filter out some frequencies.
- post processor 440 may remove from consideration IP addresses with fewer than five clicks in a given period of time. This step may be optional.
- a subgraph containing a large number of connections represents IP addresses with very similar frequency patterns may be identified as an indication of potential collusion.
- FIG. 11 depicts a plot diagram that exemplifies entities 1100 having similar time or frequency patterns in a given period of time. Again, the probability of a group of IP addresses having very similar frequency patterns is very low—in fact, it reduces as the number of dimensions increases—and is an indication of anomalous activity.
- gaps between consecutive clicks can be divided into gap slots and analyzed as described above. Similar to time buckets, vectors of gaps can also be constructed. First, find the maximum possible gap between clicks and divide a given time period into buckets. For each IP address and for each bucket, measure the volume of clicks. This results in a multidimensional vector for each IP address. Perform clustering on these vectors to find IP addresses that have similar gap vectors. As a specific example, for each visitor at a particular IP address (or referrer or publisher), divide a given time period of, say, two weeks, into time buckets of, say, 1 hour. This results in a 128 dimensional vector for each IP address.
- FIG. 12 depicts a diagrammatic representation of example vector space 1200 with many proximal points 1002 , 1004 , 1006 , 1008 , etc. in cluster 1110 , an indication of interesting activity.
- Cluster 1110 may correspond to a bot activity if these points represent IPs or keywords with very similar time or frequency patterns. For example, as illustrated in FIG. 10 , points 1002 and 1004 have very similar click frequency patterns over the same period of time, indicating potential collusion between entities represented by points 1002 and 1004 .
- collusion modeling 401 can provide a powerful tool that can generate various types of models relevant for detecting collusion.
- collusion modeling disclosed herein are not limited to the aforementioned models. It is designed in a flexible and plug-and-play environment and can be easily updated to include new models to capture the new types of collusion. Furthermore, it can be tuned (or parameterized for each client).
- collusion modeling 401 may comprise a client specific configuration file containing various features which may include (1) types of networks; (2) types of vectors; (3) tuning parameters; and (4) formulations of network analysis and/or vector analysis problems.
- FIG. 13 depicts a diagrammatic representation of an example embodiment of collusion detection and traffic quality prediction system 1300 communicatively coupled to clients 1301 , 1303 , 1305 , 1307 .
- System 1300 may receive files containing historical click data from these clients or obtain the historical click data from click data warehouse(s) 1415 maintained by the clients.
- Fraud detection 400 may process the historical click data and generate/update global block lists 460 as described above.
- Real time click scoring engine 410 may utilize global block lists 460 to score real time click data 1405 and generate click score reports accordingly.
- real time click data 1405 may be directed to real time click scoring engine 410 by clients 1301 , 1303 , 1305 , 1307 .
- the generated reports may be sent to clients 1301 , 1303 , 1305 , 1307 and/or stored in reporting database 1480 .
- clients 1301 , 1303 , 1305 , 1307 may have access to reporting database 1480 .
- System 1300 employs various modules to generate lists of IPs, publishers, referrers, cookies, etc. that the clients of system 1300 (e.g., publishers, ad networks and advertisers) can use them in real time to block unwanted traffic and maximize their profits.
- FIG. 14 depicts a diagrammatic representation of an example embodiment of collusion detection flow 1400 between components (also referred to herein as modules) of system 1300 .
- FIG. 15 depicts a diagrammatic representation of an example embodiment of collusion detection and traffic quality prediction system 1300 operating in scalable and distributed environment 1500 .
- main components of system 1300 may include a modeling module (e.g., collusion modeling 401 ), a toolkit (e.g., toolkit 1540 ), a post processor (e.g., post processor 440 ), and a job scheduler (job scheduler 1520 ).
- a modeling module e.g., collusion modeling 401
- toolkit e.g., toolkit 1540
- post processor e.g., post processor 440
- job scheduler 1520 job scheduler
- the modeling module formulates (or models) various collusion detection and TQ prediction problems as network analysis (graph partitioning in particular) or high dimensional clustering problems.
- the modeling module is operable to process historical click data, extract entities that may be involved in click fraud, and analyze groups of entities thus extracted.
- entities may be involved in a click fraud: end users, referrers, publishers and sub-publishers, Ad networks, and advertisers.
- the modeling module may extract the following types of entities.
- the modeling module may formulate the analysis of groups as graph partitioning or high dimensional vector space clustering problems to capture the groups of entities that look “abnormal.”
- the notion of “abnormality” can be captured by densities (number of edges/number of nodes).
- the module first constructs various networks and various types of vectors that capture the right information that is relevant to capture type of collusion or TQ prediction.
- the modeling module is embedded with a client specific configuration file containing various features: (1) types of networks; (2) types of vectors; (3) tuning parameters; and (4) formulations of network analysis or vector analysis problems.
- the modeling module implements the network modeling and vector space clustering modeling approaches described above.
- the modeling module may detect publisher collusion as follows: each node of a network corresponds to a publisher where two nodes are connected if the corresponding publishers share at least a given number (using threshold) of IPs. Given such a network, a high a dense subgraph (using thresholds) corresponds to potential publisher collusion, since these publishers are being visited by the same IPs which is highly unusual.
- the modeling module may formulate the collusion detection in several ways. For example, the modeling module may partition the network in to high dense subgraphs or find a subset of k nodes that have the highest density etc. As another example of detecting botnets, the modeling module may construct IP to IP network based on whether IPs visit the same referrers or use the same keywords, etc.
- the modeling module may construct time series vectors for each referrer and IP combination in a vector space model.
- the time series vectors represent clicking patterns, so if a subset of these entities have similar time series, it may indicate a potential referrer and IP collusion.
- the modeling module may then formulate this as a high dimensional clustering problem.
- the prediction of TQ for a given ad network depends on various factors, including keywords.
- various click rules have been developed to score each click or a small group of clicks separately and then aggregate them over the entire traffic to predict the TQ of a given feed of an ad network.
- This approach works very well in general, there are various cases where prediction of TQ requires analyzing the entire traffic rather than individual clicks.
- the modeling module models the analysis of user behavior as network analysis problem to predict TQ.
- the module first constructs a keyword network and then models it as dispersion analysis on networks.
- each node corresponds to a keyword and two nodes are connected if the corresponding keywords share an IP (or several IPs depending on the threshold).
- the modeling module models it as a problem of identifying a large subgraph with large dispersion. Since this subgraph corresponds to IPs that are randomly clicking on many keywords, it may be an indication that they are less likely to convert and hence low TQ.
- the modeling module utilizes various metrics that include sparse cuts, min-cuts, to partition a graph (network) into high dense subgraphs, etc.
- the modeling module utilizes high dimensional vector clustering methods that can be performed on multidimensional vectors, including k-means (minimizes the maximum standard deviation of each cluster), k-center (minimizes the maximum radius of each cluster), k-median, and different metrics of hierarchical (single linkage, double linkage, etc).
- the modeling module is a powerful tool that can generate various types of models relevant for detecting TQ.
- the module includes, but not limited to the aforementioned network and clustering models. It is designed in a flexible and plug-and-play environment, so it can be easily updated to include new models to capture the new types of collusions. Furthermore, it can be tuned (or parameterized for each client).
- the toolkit may include heuristics developed for general clustering methods, including various heuristics for sparse cuts, k-cuts, high dense subgraph partition, etc. These heuristics may range from spectral graph partitioning methods to greedy approaches to such randomized algorithms as simulated annealing.
- Suitable heuristics may include:
- PCA principal component analysis
- the toolkit may include heuristics developed for social networks.
- the underlying networks are special types of networks and hence we exploit the underlying characteristics to improve accuracy and efficiency.
- the underlying networks have low average density and the corresponding matrices are sparse. Accordingly, some embodiments may have sparse matrix implementations.
- some embodiments of the toolkit are equipped with dimensionality reduction techniques, including PCA and SVD.
- the toolkit may include heuristics for solving graph clustering problems in the vector space model (using spectral methods) by computing the second eigen values of the corresponding Laplacian matrices or using SVD (similar to latent semantic indexing for document classification) model on bipartite graphs.
- flow 1400 may comprise receiving historical click data from warehouse 1415 , processing the historical click data at collusion modeling 401 to create various network and/or clustering models for detecting potential collusions.
- flow 1400 is client specific (i.e., the potential collusions thus modeled may be specific to a particular client based on the historical click data specific to that client).
- collusion modeling 401 may transform potential collusions hidden in the historical click data into network and/or clustering problems that can be solved and analyzed via appropriate heuristics.
- flow 1400 may further comprise applying appropriate heuristics to the network and/or clustering problems generated by collusion modeling 401 . In some embodiments, these heuristics may be collectively referred to as toolkit 1540 .
- toolkit 1540 may comprise network generator 1410 and pattern generator 1420 .
- network generator 1410 may generate, based on modeled networks produced by collusion modeling 401 , various types of networks, including keyword to IP network 1412 , IP to publisher network 1414 , keyword to user ID network 1418 , etc. Other types of networks are also possible. Further, as described above, network generator 1410 may be easily adapted to generate new types of networks.
- pattern generator 1420 may generate various types of clusters or groups, identifiable through keyword time series 1422 , keyword frequency series 1424 , publisher-IP time series 1428 , etc. Other types of clusters and groups are also possible.
- toolkit 1540 may further comprise network analyzer 1430 and pattern analyzer 1440 .
- network analyzer 1430 may operate to analyze high density subgraphs as described above with reference to FIGS. 5-8 .
- network analyzer 1430 may operate to detect anomalous subgraphs.
- network analyzer 1430 may operate to identify different types of collusions. For example, network analyzer 1430 may operate to distinguish collusion among IPs or referrers from collusion between IPs and referrers, both types indicating unusual behavior between a subset of IPs and a subset of referrers.
- pattern analyzer 1400 may operate to analyze high dimensional clusters or groups of entities as described above with reference to FIGS. 9-12 .
- network analyzer 1430 may operate to detect anomalous clusters or groups of entities.
- pattern analyzer 1400 may operate to identify different types of collusions.
- flow 1400 may comprise forwarding results (i.e., subgraphs meeting a certain density requirement) from network analyzer 1430 back to collusion modeling 401 for updating an existing network model.
- flow 1400 may comprise forwarding results (i.e., clusters or groups meeting a certain patterning requirement) from pattern generator 1420 back to collusion modeling 401 for updating an existing clustering model.
- flow 1400 may further comprise forwarding updated results from collusion modeling 401 to post processor 440 .
- the post processor comprises a suite of rules applicable to the resulting high density subgraphs as well as high dimensional clusters or groups of entities for further analysis.
- a primary function of this module is to extract block lists while minimizing false positives. More specifically, the post processor may first filter out certain data that is not suspicious based on various rules. The post processor may then process the remaining data through rigorous checking based on various additional pieces of information.
- collusion modeling 401 may model a network in which nodes that represent IPs are connected if the IPs share the same keywords.
- Network generator 1410 may partition this modeled network into subgraphs.
- Network analyzer 1430 may analyze these subgraphs and produce high density subgraphs, each containing nodes or points representing entities of interest.
- Post processor 440 may go through each of the high density subgraphs from network analyzer 1430 to first filter out the subgraphs that have density less than some threshold. Post processor 440 may then use several pieces of information to check each of the remaining subgraphs and determine whether any of them is suspicious.
- Post processor 440 may next place entities in suspicious subgraphs on global block lists 460 .
- global block lists 460 are utilize by real time click scoring engine 410 to perform real time scoring on incoming real time click data.
- real time click scoring engine 410 may generate click data scoring reports which may then be stored on reporting database 1480 .
- post processor 440 may utilize the following pieces of information in determining whether any subgraph, cluster, or group of IPs may be suspicious:
- the modeling module may generate several networks and several sets of vectors, each corresponding to a particular model. Each of these models becomes a job. Thus, at any given time, there may be several tasks for each client.
- Example clients of system 1300 may include, but are not limited to, publishers, ad networks, and advertisers, etc.
- the system may have a large number of clients.
- the number of jobs on a daily basis may be in the hundreds.
- the number of jobs on a daily basis may be in the thousands. Since each job can be highly resource intensive, particularly with respect to memory and CPU, some embodiments disclosed herein may be implemented in a distributed computing environment.
- a job scheduler is utilized to assign jobs in a queue in a manner that minimizes the completion time while balancing the load.
- the job scheduler is operable to schedule individual jobs in homogeneous as well as heterogeneous distributed systems.
- FIG. 15 illustrates a heterogeneous system comprising clusters of CPUs 1511 , 1512 , 1513 , 1515 , 1531 , 1532 , 1533 , 1535 that have access to main memories 1502 , 1504 and click data repositories or warehouse (represented by I/O 1501 and I/O 1503 in FIG. 15 ).
- the system may have additional features, including caches, to eliminate or minimize the need to frequently accessing the databases.
- job scheduler 1520 is operable to monitor the capacity and workload of individual resource in environment 1500 and schedule individual jobs from collusion modeling 401 that are to be performed by toolkit 1540 accordingly to minimize the completion time while balancing the load among these resources.
- job scheduler 1520 is able to process historical click data for each client on a daily basis.
- a daily batch for a client may comprise past few weeks traffic for that client.
- TQ prediction looks at each click independent of other clicks. However, each click may look very normal. The accuracy of TQ prediction can be significantly improved if the clicks are analyzed as groups over a period of time. In some embodiments, clicks are aggregated over a period of time and analyzed to identify low TQ. In some embodiments, system 1300 may operate to predict TQ by detecting underlying botnet activities that cause low TQ.
- system 1300 may operate to model TQ prediction as network analysis (graph analysis) and high dimensional clustering (pattern analysis) problems as described above with respect to fraud detection.
- Network analysis and clustering analysis problems have been studied in computer science and machine learning communities extensively. Embodiments disclosed here take advantage of this extensive knowledge and leverage the work done in this area. For example, having identified entities such as IPs, users, publishers, etc. that are involved in fraudulent activities, they can be placed on global block lists so they can be blocked in real time for all clients of system 1300 .
- system 1300 may process a few weeks of historical click or traffic data of each client and generate blocked lists on a daily basis. In some embodiments, these blocked lists may be generated on an hourly basis.
- FIGS. 16 and 17 are plot diagrams that exemplify high quality TQ that may be achieved on client networks utilizing embodiments disclosed herein to detect potential collusions and block suspicious entities associated therewith.
- FIGS. 18 and 19 are plot diagrams depicting client networks that are bombarded by suspicious activities, causing poor traffic quality. As FIGS. 16-19 illustrate, there is a strong coordination between collusion and TQ—the less potential collusions, the higher traffic quality.
- Embodiments of a comprehensive collusion detection and traffic quality prediction system disclosed herein can be run everyday on each of a plurality of high volume clients on large sets of data (e.g., past few weeks of click or traffic data) to detect and generate lists of entities (e.g., IPs, publishers, referrers, etc.) that may be involved in collusions or otherwise suspicious activities. Entities thus listed can be blocked in real time to eliminate or otherwise minimize bad traffic and improve traffic quality, providing an accurate TQ prediction.
- entities e.g., IPs, publishers, referrers, etc.
Abstract
Description
-
- 1. How to construct representations that preserve important information relevant to click fraud: (i) graphs or networks and (ii) vectors (arrays of real numbers) that capture the right information necessary for various types of fraud.
- 2. How to model the detection of collusion in publisher fraud and competitor fraud as clustering problems, including the detection of botnets or click farms.
- 3. Type of clustering methods that are highly efficient and scalable for detecting collusion.
-
- 1. High dense subgraphs of networks between IPs and publishers can be used to represent IP to publisher collusion.
- 2. High dense subgraphs of IP to IP network where nodes are IPs and edges correspond to two IPs having shared keywords, shared publishers or clicking times, etc. may correspond to potential collusions.
- 3. Clusters of vectors where each vector corresponds to time series of publishers or referrer domains, etc. may represent potential collusions or time programmed botnets.
-
- Click activity times (usually exhibited by humans);
- Frequency of clicks in a given period of time (usually exhibited by bots); and
- The gaps between consecutive clicks (usually exhibited by humans).
-
- IPs
- Referrers
- Publishers and subpublishers
- Ad networks
- Advertisers
-
- Combinatorial approaches such as greedy approaches.
- Linear programming approaches.
- Spectral methods that convert the graphs into vector space models. First, the Laplacian of the graph is constructed. Then, the eigen vectors of these Laplacians are determined, one eigen vector corresponding to each node. Clustering on these Eigen vectors is a good approximation of clustering on the corresponding graphs—since it is a relaxation of the integer quadratic program. Various well-known clustering algorithms can be applied on these eigen vectors where for each node there corresponds an eigen vector using the Laplacian of the graph.
- Singular value decomposition (SVD) may be utilized to significantly reduce the data size via low rank approximation. More specifically, SVD also converts a bipartite graph into a vector space model. Consider a bipartite graph G=(V1, V2, E), where V1 corresponds to referrers and V2 corresponds to visitors with distinct IP addresses. In this case, there are no edges between any pair of referrers or any pair of IP addresses. The SVD technique is used in latent semantic indexing (LSI) of document classification in which two documents are considered similar if they share a lot of keywords. Here, the bipartite graph between documents and terms is decomposed into three matrices, D, T and S, where D is the document concept matrix, T is the term concept matrix, and S is a diagonal matrix of singular values. Clustering on D provides document classification and clustering on T provides term classification. Utilizing this technique, in some embodiments, two referrers are considered similar if they share a lot of visitors (IP addresses). Similarly, two IP addresses are similar if they share a lot of referrers. Referrer and visitor matrices can then be obtained by decomposing the bipartite graph between them. Using any standard k-means, k-center clustering methods on these matrices can generate clusters of highly related items. Further analysis on these clusters can be done to detect potential collusions.
-
- 1. If the IPs have any similarities in time patterns.
- 2. If the IPs visited the same referrers or have the same user agents.
- 3. If the IPs have been identified as suspicious by third party vendor databases, etc.
Job Scheduler
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/797,904 US8561184B1 (en) | 2010-02-04 | 2010-06-10 | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/700,053 US8533825B1 (en) | 2010-02-04 | 2010-02-04 | System, method and computer program product for collusion detection |
US12/797,904 US8561184B1 (en) | 2010-02-04 | 2010-06-10 | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/700,053 Continuation-In-Part US8533825B1 (en) | 2010-02-04 | 2010-02-04 | System, method and computer program product for collusion detection |
Publications (1)
Publication Number | Publication Date |
---|---|
US8561184B1 true US8561184B1 (en) | 2013-10-15 |
Family
ID=49321667
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/797,904 Active 2031-12-07 US8561184B1 (en) | 2010-02-04 | 2010-06-10 | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
Country Status (1)
Country | Link |
---|---|
US (1) | US8561184B1 (en) |
Cited By (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130031470A1 (en) * | 2011-07-29 | 2013-01-31 | Yahoo! Inc. | Method and system for personalizing web page layout |
US20130325591A1 (en) * | 2012-06-01 | 2013-12-05 | Airpush, Inc. | Methods and systems for click-fraud detection in online advertising |
US20140037227A1 (en) * | 2012-07-31 | 2014-02-06 | Bin Zhang | Hierarchical cluster determination based on subgraph density |
CN103744994A (en) * | 2014-01-22 | 2014-04-23 | 中国科学院信息工程研究所 | Communication-network-oriented user behavior pattern mining method and system |
CN105187383A (en) * | 2015-08-06 | 2015-12-23 | 电子科技大学 | Abnormal behaviour detection method based on communication network |
WO2016032485A1 (en) * | 2014-08-28 | 2016-03-03 | Hewlett Packard Enterprise Development Lp | Identify server cluster by applying social group analysis |
US20160179827A1 (en) * | 2014-12-19 | 2016-06-23 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
USD765726S1 (en) * | 2014-07-29 | 2016-09-06 | Secugraph Inc. | Display screen with icon |
US20160261533A1 (en) * | 2015-03-03 | 2016-09-08 | International Business Machines Corporation | Moderating online discussion using graphical text analysis |
USD766322S1 (en) * | 2014-07-29 | 2016-09-13 | Secugraph Inc. | Display screen with icon |
USD766321S1 (en) * | 2014-07-29 | 2016-09-13 | Secugraph Inc. | Display screen with icon |
US20160292258A1 (en) * | 2013-11-22 | 2016-10-06 | Beijing Qihoo Technology Company Limited | Method and apparatus for filtering out low-frequency click, computer program, and computer readable medium |
US20160350815A1 (en) * | 2015-05-29 | 2016-12-01 | Yahoo! Inc. | Representing entities relationships in online advertising |
USD778949S1 (en) * | 2014-07-29 | 2017-02-14 | Secugraph Inc. | Display screen with icon |
US20170109397A1 (en) * | 2014-12-19 | 2017-04-20 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
CN106919380A (en) * | 2015-12-24 | 2017-07-04 | 英特尔公司 | Programmed using the data flow of the computing device of the figure segmentation estimated based on vector |
US20180077227A1 (en) * | 2016-08-24 | 2018-03-15 | Oleg Yeshaya RYABOY | High Volume Traffic Handling for Ordering High Demand Products |
US10068188B2 (en) | 2016-06-29 | 2018-09-04 | Visual Iq, Inc. | Machine learning techniques that identify attribution of small signal stimulus in noisy response channels |
US20190057009A1 (en) * | 2017-08-15 | 2019-02-21 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US20190158520A1 (en) * | 2017-11-17 | 2019-05-23 | Accenture Global Solutions Limited | Malicious Domain Scoping Recommendation System |
CN109919191A (en) * | 2019-01-30 | 2019-06-21 | 华东师范大学 | A kind of application market brush list collusion group detection method based on cluster |
CN110069691A (en) * | 2019-04-29 | 2019-07-30 | 百度在线网络技术（北京）有限公司 | For handling the method and apparatus for clicking behavioral data |
US10425434B2 (en) * | 2017-01-19 | 2019-09-24 | Cisco Technology, Inc. | Statistical fingerprinting of network traffic |
US10645111B1 (en) * | 2018-04-23 | 2020-05-05 | Facebook, Inc. | Browsing identity |
US10673719B2 (en) * | 2016-02-25 | 2020-06-02 | Imperva, Inc. | Techniques for botnet detection and member identification |
US10679260B2 (en) | 2016-04-19 | 2020-06-09 | Visual Iq, Inc. | Cross-device message touchpoint attribution |
US10789246B2 (en) * | 2016-12-22 | 2020-09-29 | Target Brands, Inc. | Data clustering to reduce database footprint and processing time |
US10789357B2 (en) | 2017-09-29 | 2020-09-29 | Cognant Llc | System and method for detecting fraudulent software installation activity |
US10878309B2 (en) * | 2017-01-03 | 2020-12-29 | International Business Machines Corporation | Determining context-aware distances using deep neural networks |
US20210124780A1 (en) * | 2019-10-28 | 2021-04-29 | Feedzai - Consultadoria e Inovação Tecnólogica, S.A. | Graph search and visualization for fraudulent transaction analysis |
US11108795B2 (en) | 2018-05-25 | 2021-08-31 | At&T Intellectual Property I, L.P. | Intrusion detection using robust singular value decomposition |
US11288684B2 (en) | 2013-12-31 | 2022-03-29 | The Nielsen Company (Us), Llc | Performing interactive updates to a precalculated cross-channel predictive model |
CN114693317A (en) * | 2022-04-08 | 2022-07-01 | 重庆邮电大学 | Telecommunication fraud security federation detection method fusing homogeneous graph and bipartite graph |
US11386349B1 (en) * | 2017-05-16 | 2022-07-12 | Meta Platforms, Inc. | Systems and methods for distinguishing human users from bots |
US11416912B2 (en) * | 2016-05-13 | 2022-08-16 | Digital River, Inc. | High volume transaction queueing with machine learning |
US11855866B1 (en) | 2022-09-29 | 2023-12-26 | The Mitre Corporation | Systems and methods for assessing a computing network's physical robustness |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6381628B1 (en) | 1998-10-02 | 2002-04-30 | Microsoft Corporation | Summarized application profiling and quick network profiling |
US6714975B1 (en) | 1997-03-31 | 2004-03-30 | International Business Machines Corporation | Method for targeted advertising on the web based on accumulated self-learning data, clustering users and semantic node graph techniques |
US20060212350A1 (en) * | 2005-03-07 | 2006-09-21 | Ellis John R | Enhanced online advertising system |
US20080243637A1 (en) | 2007-03-30 | 2008-10-02 | Chan James D | Recommendation system with cluster-based filtering of recommendations |
US20080270154A1 (en) * | 2007-04-25 | 2008-10-30 | Boris Klots | System for scoring click traffic |
US20090157417A1 (en) * | 2007-12-18 | 2009-06-18 | Changingworlds Ltd. | Systems and methods for detecting click fraud |
US20090299967A1 (en) | 2008-06-02 | 2009-12-03 | Microsoft Corporation | User advertisement click behavior modeling |
US7657626B1 (en) | 2006-09-19 | 2010-02-02 | Enquisite, Inc. | Click fraud detection |
US8015190B1 (en) | 2007-03-30 | 2011-09-06 | Google Inc. | Similarity-based searching |
-
2010
- 2010-06-10 US US12/797,904 patent/US8561184B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6714975B1 (en) | 1997-03-31 | 2004-03-30 | International Business Machines Corporation | Method for targeted advertising on the web based on accumulated self-learning data, clustering users and semantic node graph techniques |
US6381628B1 (en) | 1998-10-02 | 2002-04-30 | Microsoft Corporation | Summarized application profiling and quick network profiling |
US20060212350A1 (en) * | 2005-03-07 | 2006-09-21 | Ellis John R | Enhanced online advertising system |
US7657626B1 (en) | 2006-09-19 | 2010-02-02 | Enquisite, Inc. | Click fraud detection |
US20080243637A1 (en) | 2007-03-30 | 2008-10-02 | Chan James D | Recommendation system with cluster-based filtering of recommendations |
US8015190B1 (en) | 2007-03-30 | 2011-09-06 | Google Inc. | Similarity-based searching |
US8190592B1 (en) | 2007-03-30 | 2012-05-29 | Google Inc. | Similarity-based searching |
US20080270154A1 (en) * | 2007-04-25 | 2008-10-30 | Boris Klots | System for scoring click traffic |
US20090157417A1 (en) * | 2007-12-18 | 2009-06-18 | Changingworlds Ltd. | Systems and methods for detecting click fraud |
US20090299967A1 (en) | 2008-06-02 | 2009-12-03 | Microsoft Corporation | User advertisement click behavior modeling |
Non-Patent Citations (8)
Title |
---|
Abramson, Craig and Kistler, Kenny, "Managing Click-Stream Data," Syncsort Incorporated, Woodcliff Lake, NJ, printed on Jan. 14, 2010 from URL://http://www.syncsort.com, 16 pgs. |
Conrad et al.-University of Heinrich-Heine Pub 2008-Partitioning Massive Graphs for Content Oriented Social Network Analysis. * |
Kantardzic, Mehmed et al., Collaborative Click Fraud Detection and Prevention System (CCFDP) Improves Monitoring of Software-Based Click Fraud, University of Louisville Publication 2005, ISBN No. 972-8924-06-2, pp. 34-41. |
Kantardzic, Mehmed et al., Improving Click Fraud Detection by Real Time Data Fusion, 2008, IEEE Publication No. 978-1-4244-3555-5/08, pp. 69-74. |
Metwally et al. Pub IEEE 2007-On Hit Inflation Techniques and Detection in Streams of Web Advertising Networks. * |
Notice of Allowance for U.S. Appl. No. 12/700,053, mailed Jan. 30, 2013, 8 pgs. |
Notice of Allowance for U.S. Appl. No. 12/700,053, mailed May 8, 2013, 8 pgs. |
Office Action for U.S. Appl. No. 12/700,053, mailed May 22, 2012, 15 pgs. |
Cited By (53)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130031470A1 (en) * | 2011-07-29 | 2013-01-31 | Yahoo! Inc. | Method and system for personalizing web page layout |
US10061860B2 (en) * | 2011-07-29 | 2018-08-28 | Oath Inc. | Method and system for personalizing web page layout |
US20130325591A1 (en) * | 2012-06-01 | 2013-12-05 | Airpush, Inc. | Methods and systems for click-fraud detection in online advertising |
US20140037227A1 (en) * | 2012-07-31 | 2014-02-06 | Bin Zhang | Hierarchical cluster determination based on subgraph density |
US8971665B2 (en) * | 2012-07-31 | 2015-03-03 | Hewlett-Packard Development Company, L.P. | Hierarchical cluster determination based on subgraph density |
US20160292258A1 (en) * | 2013-11-22 | 2016-10-06 | Beijing Qihoo Technology Company Limited | Method and apparatus for filtering out low-frequency click, computer program, and computer readable medium |
US11288684B2 (en) | 2013-12-31 | 2022-03-29 | The Nielsen Company (Us), Llc | Performing interactive updates to a precalculated cross-channel predictive model |
CN103744994A (en) * | 2014-01-22 | 2014-04-23 | 中国科学院信息工程研究所 | Communication-network-oriented user behavior pattern mining method and system |
CN103744994B (en) * | 2014-01-22 | 2016-11-16 | 中国科学院信息工程研究所 | A kind of user's behavior pattern mining method and system towards communication network |
USD765726S1 (en) * | 2014-07-29 | 2016-09-06 | Secugraph Inc. | Display screen with icon |
USD778949S1 (en) * | 2014-07-29 | 2017-02-14 | Secugraph Inc. | Display screen with icon |
USD766322S1 (en) * | 2014-07-29 | 2016-09-13 | Secugraph Inc. | Display screen with icon |
USD766321S1 (en) * | 2014-07-29 | 2016-09-13 | Secugraph Inc. | Display screen with icon |
US10749769B2 (en) | 2014-08-28 | 2020-08-18 | Ent. Services Development Corporation Lp | Identify server cluster by applying social group analysis |
WO2016032485A1 (en) * | 2014-08-28 | 2016-03-03 | Hewlett Packard Enterprise Development Lp | Identify server cluster by applying social group analysis |
US9922071B2 (en) * | 2014-12-19 | 2018-03-20 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
US20160179827A1 (en) * | 2014-12-19 | 2016-06-23 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
US20170109397A1 (en) * | 2014-12-19 | 2017-04-20 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
US10649977B2 (en) | 2014-12-19 | 2020-05-12 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
US9910882B2 (en) * | 2014-12-19 | 2018-03-06 | International Business Machines Corporation | Isolation anomaly quantification through heuristical pattern detection |
US20160261533A1 (en) * | 2015-03-03 | 2016-09-08 | International Business Machines Corporation | Moderating online discussion using graphical text analysis |
US20160261530A1 (en) * | 2015-03-03 | 2016-09-08 | International Business Machines Corporation | Moderating online discussion using graphical text analysis |
US9985916B2 (en) * | 2015-03-03 | 2018-05-29 | International Business Machines Corporation | Moderating online discussion using graphical text analysis |
CN107077498A (en) * | 2015-05-29 | 2017-08-18 | 埃克斯凯利博Ip有限责任公司 | The presentation-entity relation in online advertisement |
US20160350815A1 (en) * | 2015-05-29 | 2016-12-01 | Yahoo! Inc. | Representing entities relationships in online advertising |
CN105187383A (en) * | 2015-08-06 | 2015-12-23 | 电子科技大学 | Abnormal behaviour detection method based on communication network |
CN106919380B (en) * | 2015-12-24 | 2020-06-16 | 英特尔公司 | Data flow programming of computing devices with vector estimation based graph partitioning |
CN106919380A (en) * | 2015-12-24 | 2017-07-04 | 英特尔公司 | Programmed using the data flow of the computing device of the figure segmentation estimated based on vector |
US10911472B2 (en) | 2016-02-25 | 2021-02-02 | Imperva, Inc. | Techniques for targeted botnet protection |
US10673719B2 (en) * | 2016-02-25 | 2020-06-02 | Imperva, Inc. | Techniques for botnet detection and member identification |
US10679260B2 (en) | 2016-04-19 | 2020-06-09 | Visual Iq, Inc. | Cross-device message touchpoint attribution |
US11416912B2 (en) * | 2016-05-13 | 2022-08-16 | Digital River, Inc. | High volume transaction queueing with machine learning |
US10068188B2 (en) | 2016-06-29 | 2018-09-04 | Visual Iq, Inc. | Machine learning techniques that identify attribution of small signal stimulus in noisy response channels |
US20180077227A1 (en) * | 2016-08-24 | 2018-03-15 | Oleg Yeshaya RYABOY | High Volume Traffic Handling for Ordering High Demand Products |
US10789246B2 (en) * | 2016-12-22 | 2020-09-29 | Target Brands, Inc. | Data clustering to reduce database footprint and processing time |
US10878309B2 (en) * | 2017-01-03 | 2020-12-29 | International Business Machines Corporation | Determining context-aware distances using deep neural networks |
US10425434B2 (en) * | 2017-01-19 | 2019-09-24 | Cisco Technology, Inc. | Statistical fingerprinting of network traffic |
US11386349B1 (en) * | 2017-05-16 | 2022-07-12 | Meta Platforms, Inc. | Systems and methods for distinguishing human users from bots |
US20190057009A1 (en) * | 2017-08-15 | 2019-02-21 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US11360875B2 (en) * | 2017-08-15 | 2022-06-14 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US10789357B2 (en) | 2017-09-29 | 2020-09-29 | Cognant Llc | System and method for detecting fraudulent software installation activity |
US20190158520A1 (en) * | 2017-11-17 | 2019-05-23 | Accenture Global Solutions Limited | Malicious Domain Scoping Recommendation System |
US11122063B2 (en) * | 2017-11-17 | 2021-09-14 | Accenture Global Solutions Limited | Malicious domain scoping recommendation system |
US10645111B1 (en) * | 2018-04-23 | 2020-05-05 | Facebook, Inc. | Browsing identity |
US11140188B1 (en) | 2018-04-23 | 2021-10-05 | Facebook, Inc. | Browsing identity |
US11108795B2 (en) | 2018-05-25 | 2021-08-31 | At&T Intellectual Property I, L.P. | Intrusion detection using robust singular value decomposition |
CN109919191A (en) * | 2019-01-30 | 2019-06-21 | 华东师范大学 | A kind of application market brush list collusion group detection method based on cluster |
CN109919191B (en) * | 2019-01-30 | 2023-05-02 | 华东师范大学 | Clustering-based application market brush list collusion group detection method |
CN110069691B (en) * | 2019-04-29 | 2021-05-28 | 百度在线网络技术（北京）有限公司 | Method and device for processing click behavior data |
CN110069691A (en) * | 2019-04-29 | 2019-07-30 | 百度在线网络技术（北京）有限公司 | For handling the method and apparatus for clicking behavioral data |
US20210124780A1 (en) * | 2019-10-28 | 2021-04-29 | Feedzai - Consultadoria e Inovação Tecnólogica, S.A. | Graph search and visualization for fraudulent transaction analysis |
CN114693317A (en) * | 2022-04-08 | 2022-07-01 | 重庆邮电大学 | Telecommunication fraud security federation detection method fusing homogeneous graph and bipartite graph |
US11855866B1 (en) | 2022-09-29 | 2023-12-26 | The Mitre Corporation | Systems and methods for assessing a computing network's physical robustness |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8561184B1 (en) | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction | |
US8533825B1 (en) | System, method and computer program product for collusion detection | |
Banerjee et al. | ComBIM: A community-based solution approach for the Budgeted Influence Maximization Problem | |
Ahmed et al. | Network sampling: From static to streaming graphs | |
US9294576B2 (en) | Social media impact assessment | |
US20160065534A1 (en) | System for correlation of domain names | |
Elsayed et al. | Differential evolution framework for big data optimization | |
Bordin et al. | DSPBench: A suite of benchmark applications for distributed data stream processing systems | |
US20160350294A1 (en) | Method and system for peer detection | |
Bouyer et al. | FIP: A fast overlapping community-based Influence Maximization Algorithm using probability coefficient of global diffusion in social networks | |
Mikavicaa et al. | Big data: challenges and opportunities in logistics systems | |
Zhan et al. | Identification of top-K influential communities in big networks | |
Herrera-Semenets et al. | A data reduction strategy and its application on scan and backscatter detection using rule-based classifiers | |
Marchal et al. | Detecting organized eCommerce fraud using scalable categorical clustering | |
Yoon et al. | Multiple dynamic outlier-detection from a data stream by exploiting duality of data and queries | |
Zheng et al. | Analysis and modeling of social influence in high performance computing workloads | |
Ramachandran et al. | GAEA: Graph augmentation for equitable access via reinforcement learning | |
Zhang et al. | Temporal link prediction via adjusted sigmoid function and 2-simplex structure | |
Heine | Outlier detection in data streams using OLAP cubes | |
Jin et al. | Graph neural networks for detecting anomalies in scientific workflows | |
Fang et al. | Active exploration: simultaneous sampling and labeling for large graphs | |
Behera et al. | Centrality approach for community detection in large scale network | |
Eberle et al. | Identifying anomalies in graph streams using change detection | |
Alipour et al. | Learning the relation between mobile encounters and web traffic patterns: A data-driven study | |
Kpiebaareh et al. | User-connection behaviour analysis in service management using bipartite labelled property graph |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: CLICK FORENSICS, INC., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MARSA, ROBERT LEE;DODDI, SRINIVAS RAO;SIGNING DATES FROM 20100820 TO 20100902;REEL/FRAME:024941/0119 |
|
AS | Assignment |
Owner name: ADOMETRY, INC., TEXASFree format text: CHANGE OF NAME;ASSIGNOR:CLICK FORENSICS, INC.;REEL/FRAME:026296/0517Effective date: 20110228 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ADOMETRY, INC.;REEL/FRAME:033947/0033Effective date: 20141007 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |