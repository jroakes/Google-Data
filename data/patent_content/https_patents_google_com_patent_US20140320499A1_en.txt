US20140320499A1 - Data object visualization using graphs - Google Patents
Data object visualization using graphs Download PDFInfo
- Publication number
- US20140320499A1 US20140320499A1 US14/223,959 US201414223959A US2014320499A1 US 20140320499 A1 US20140320499 A1 US 20140320499A1 US 201414223959 A US201414223959 A US 201414223959A US 2014320499 A1 US2014320499 A1 US 2014320499A1
- Authority
- US
- United States
- Prior art keywords
- fact
- facts
- user
- graph
- objects
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/20—Drawing from basic elements, e.g. lines or circles
- G06T11/206—Drawing of charts or graphs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/248—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
-
- G06F17/30675—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/103—Formatting, i.e. changing of presentation of documents
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/912—Applications of a database
- Y10S707/918—Location
- Y10S707/919—Geographic
Definitions
- This invention pertains in general to data visualization on a computer and, in particular, to ways of representing data obtained from web pages and other sources.
- the World Wide Web and other information storage and retrieval systems contain a great deal of information. With the advent of search engines and other similar tools it has become relatively easy for an end-user to locate particular information. For example, one can obtain a wealth of information about the atomic elements by simply searching for the terms “atomic elements” on the Web.
- a web site that describes the atomic elements might display the periodic table and provide information like the atomic weights, melting points, and densities of the elements, but the site is unlikely to provide a graph of, say, atomic weights versus melting points. As a result, a person who desires to view such a graph must manually copy the information into another program that provides graphing capabilities.
- Some web sites like sites providing stock prices and other financial information, provide limited amounts of dynamic content. For example, a person can interact with such sites to create and manipulate graphs showing stock prices over time. Even on these sites, however, the person is restricted to a limited set of graphing options. Further, there is no way for a person to graphically manipulate data contained on multiple web sites short of copying the desired information into separate graphing program.
- a system, method, and computer program product for graphically presenting facts.
- a set of facts is established, where each fact has an attribute and a corresponding value.
- a graph type that facilitates understanding of the facts are determined, and the facts are displayed in a graph of the determined type.
- FIG. 1 shows a network, in accordance with a preferred embodiment of the invention.
- FIGS. 2( a )- 2 ( d ) are block diagrams illustrating a data structure for facts within a repository of FIG. 1 in accordance with preferred embodiments of the invention.
- FIG. 2( e ) is a block diagram illustrating an alternate data structure for facts and objects in accordance with preferred embodiments of the invention.
- FIG. 3 is a high-level block diagram illustrating modules within a presentation engine according to one embodiment.
- FIG. 4 illustrates a user interface (UI) contained on a web page generated by the UI generation module according to one embodiment.
- UI user interface
- FIG. 5 illustrates a UI including a tabular view of objects and facts according to one embodiment.
- FIG. 6 illustrates a UI including a graphical view of objects and facts according to one embodiment.
- FIG. 7 illustrates an example of a map produced by the graphical presentation module and map presentation module according to one embodiment.
- FIG. 8 illustrates an example of a timeline produced by the graphical presentation module according to one embodiment.
- FIG. 9 is a flow chart illustrating steps performed by the presentation engine according to one embodiment.
- FIG. 1 shows a system architecture 100 adapted to support one embodiment of the invention.
- FIG. 1 shows components used to add facts into, and retrieve facts from a repository 115 .
- the system architecture 100 includes a network 104 , through which any number of document hosts 102 communicate with a data processing system 106 , along with any number of object requesters 152 , 154 .
- Document hosts 102 store documents and provide access to documents.
- a document is comprised of any machine-readable data including any combination of text, graphics, multimedia content, etc.
- a document may be encoded in an markup language, such as Hypertext Markup Language (HTML), i.e., a web page, in a interpreted language (e.g., JavaScript) or in any other computer readable or executable format.
- HTML Hypertext Markup Language
- a document can include one or more hyperlinks to other documents.
- a typical document will include one or more facts within its content.
- a document stored in a document host 102 may be located and/or identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location.
- URL Uniform Resource Locator
- a document host 102 is implemented by a computer system, and typically includes a server adapted to communicate over the network 104 via networking protocols (e.g., TCP/IP), as well as application and presentation protocols (e.g., HTTP, HTML, SOAP, D-HTML, Java).
- networking protocols e.g., TCP/IP
- application and presentation protocols e.g., HTTP, HTML, SOAP, D-HTML, Java.
- the documents stored by a host 102 are typically held in a file directory, a database, or other data repository.
- a host 102 can be implemented in any computing device (e.g., from a PDA or personal computer, a workstation, mini-computer, or mainframe, to a cluster or grid of computers), as well as in any processor architecture or operating system.
- FIG. 1 shows components used to manage facts in a fact repository 115 .
- Data processing system 106 includes one or more importers 108 , one or more janitors 110 , a build engine 112 , a service engine 114 , and a fact repository 115 (also called simply a “repository”).
- Importers 108 operate to process documents received from the document hosts, read the data content of documents, and extract facts (as operationally and programmatically defined within the data processing system 106 ) from such documents.
- the importers 108 also determine the subject or subjects with which the facts are associated, and extract such facts into individual items of data, for storage in the fact repository 115 .
- there are different types of importers 108 for different types of documents for example, dependent on the format or document type.
- Janitors 110 operate to process facts extracted by importer 108 .
- This processing can include but is not limited to, data cleansing, object merging, and fact induction.
- Other types of janitors 110 may be implemented, depending on the types of data management functions desired, such as translation, compression, spelling or grammar correction, and the like.
- Various janitors 110 act on facts to normalize attribute names, and values and delete duplicate and near-duplicate facts so an object does not have redundant information. For example, we might find on one page that Britney Spears' birthday is “Dec. 2, 1981” while on another page that her date of birth is “Dec. 2, 1981.” Birthday and Date of Birth might both be rewritten as Birthdate by one janitor and then another janitor might notice that Dec. 2, 1981 and Dec. 2, 1981 are different forms of the same date. It would choose the preferred form, remove the other fact and combine the source lists for the two facts. As a result when you look at the source pages for this fact, on some you'll find an exact match of the fact and on others text that is considered to be synonymous with the fact.
- Build engine 112 builds and manages the repository 115 .
- Service engine 114 is an interface for querying the repository 115 .
- Service engine 114 's main function is to process queries, score matching objects, and return them to the caller but it is also used by janitor 110 .
- Repository 115 stores factual information extracted from a plurality of documents that are located on document hosts 102 .
- a document from which a particular fact may be extracted is a source document (or “source”) of that particular fact.
- source a source of a fact includes that fact (or a synonymous fact) within its contents.
- Repository 115 contains one or more facts.
- each fact is associated with exactly one object.
- One implementation for this association includes in each fact an object ID that uniquely identifies the object of the association.
- any number of facts may be associated with an individual object, by including the object ID for that object in the facts.
- objects themselves are not physically stored in the repository 115 , but rather are defined by the set or group of facts with the same associated object ID, as described below. Further details about facts in repository 115 are described below, in relation to FIGS. 2( a )- 2 ( d ).
- the components of the data processing system 106 will be distributed over multiple computers, communicating over a network.
- repository 115 may be deployed over multiple servers.
- the janitors 110 may be located on any number of different computers. For convenience of explanation, however, the components of the data processing system 106 are discussed as though they were implemented on a single computer.
- document hosts 102 are located on data processing system 106 instead of being coupled to data processing system 106 by a network.
- importer 108 may import facts from a database that is a part of or associated with data processing system 106 .
- FIG. 1 also includes components to access repository 115 on behalf of one or more object requesters 152 , 154 .
- Object requesters are entities that request objects from repository 115 .
- Object requesters 152 , 154 may be understood as clients of the system 106 , and can be implemented in any computer device or architecture.
- a first object requester 152 is located remotely from system 106
- a second object requester 154 is located in data processing system 106 .
- the blog may include a reference to an object whose facts are in repository 115 .
- An object requester 152 such as a browser displaying the blog will access data processing system 106 so that the information of the facts associated with the object can be displayed as part of the blog web page.
- janitor 110 or other entity considered to be part of data processing system 106 can function as object requester 154 , requesting the facts of objects from repository 115 .
- FIG. 1 shows that data processing system 106 includes a memory 107 and one or more processors 116 .
- Memory 107 includes importers 108 , janitors 110 , build engine 112 , service engine 114 , and requester 154 , each of which are preferably implemented as instructions stored in memory 107 and executable by processor 116 .
- Memory 107 also includes repository 115 .
- Repository 115 can be stored in a memory of one or more computer systems or in a type of memory such as a disk.
- FIG. 1 also includes a computer readable medium 118 containing, for example, at least one of importers 108 , janitors 110 , build engine 112 , service engine 114 , requester 154 , and at least some portions of repository 115 .
- FIG. 1 also includes a computer readable medium 118 containing, for example, at least one of importers 108 , janitors 110 , build engine 112 , service engine 114 , requester 154 ,
- data processing system 106 also includes one or more input/output devices 120 that allow data to be input and output to and from data processing system 106 .
- data processing system 106 preferably also includes standard software components such as operating systems and the like and further preferably includes standard hardware components not shown in the figure for clarity of example.
- FIG. 2( a ) shows an example format of a data structure for facts within repository 115 , according to some embodiments of the invention.
- the repository 115 includes facts 204 .
- Each fact 204 includes a unique identifier for that fact, such as a fact ID 210 .
- Each fact 204 includes at least an attribute 212 and a value 214 .
- a fact associated with an object representing George Washington may include an attribute of “date of birth” and a value of “Feb. 22, 1732.”
- all facts are stored as alphanumeric characters since they are extracted from web pages.
- facts also can store binary data values.
- Other embodiments, however, may store fact values as mixed types, or in encoded formats.
- each fact is associated with an object ID 209 that identifies the object that the fact describes.
- object ID 209 identifies the object that the fact describes.
- objects are not stored as separate data entities in memory.
- the facts associated with an object contain the same object ID, but no physical object exists.
- objects are stored as data entities in memory, and include references (for example, pointers or IDs) to the facts associated with the object.
- the logical data structure of a fact can take various forms; in general, a fact is represented by a tuple that includes a fact ID, an attribute, a value, and an object ID.
- the storage implementation of a fact can be in any underlying physical data structure.
- FIG. 2( b ) shows an example of facts having respective fact IDs of 10, 20, and 30 in repository 115 .
- Facts 10 and 20 are associated with an object identified by object ID “1.”
- Fact 10 has an attribute of “Name” and a value of “China.”
- Fact 20 has an attribute of “Category” and a value of “Country.”
- the object identified by object ID “1” has a name fact 205 with a value of “China” and a category fact 206 with a value of “Country.”
- Fact 30 208 has an attribute of “Property” and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- the object identified by object ID “2” has a property fact with a fact ID of 30 and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- each fact has one attribute and one value.
- the number of facts associated with an object is not limited; thus while only two facts are shown for the “China” object, in practice there may be dozens, even hundreds of facts associated with a given object.
- the value fields of a fact need not be limited in size or content. For example, a fact about the economy of “China” with an attribute of “Economy” would have a value including several paragraphs of text, numbers, perhaps even tables of figures. This content can be formatted, for example, in a markup language. For example, a fact having an attribute “original html” might have a value of the original html text taken from the source web page.
- FIG. 2( b ) shows the explicit coding of object ID, fact ID, attribute, and value
- content of the fact can be implicitly coded as well (e.g., the first field being the object ID, the second field being the fact ID, the third field being the attribute, and the fourth field being the value).
- Other fields include but are not limited to: the language used to state the fact (English, etc.), how important the fact is, the source of the fact, a confidence value for the fact, and so on.
- FIG. 2( c ) shows an example object reference table 210 that is used in some embodiments. Not all embodiments include an object reference table.
- the object reference table 210 functions to efficiently maintain the associations between object IDs and fact IDs. In the absence of an object reference table 210 , it is also possible to find all facts for a given object ID by querying the repository to find all facts with a particular object ID. While FIGS. 2( b ) and 2 ( c ) illustrate the object reference table 210 with explicit coding of object and fact IDs, the table also may contain just the ID values themselves in column or pair-wise arrangements.
- FIG. 2( d ) shows an example of a data structure for facts within repository 115 , according to some embodiments of the invention showing an extended format of facts.
- the fields include an object reference link 216 to another object.
- the object reference link 216 can be an object ID of another object in the repository 115 , or a reference to the location (e.g., table row) for the object in the object reference table 210 .
- the object reference link 216 allows facts to have as values other objects. For example, for an object “United States,” there may be a fact with the attribute of “president” and the value of “George W. Bush,” with “George W. Bush” being an object having its own facts in repository 115 .
- the value field 214 stores the name of the linked object and the link 216 stores the object identifier of the linked object.
- this “president” fact would include the value 214 of “George W. Bush”, and object reference link 216 that contains the object ID for the for “George W. Bush” object.
- facts 204 do not include a link field 216 because the value 214 of a fact 204 may store a link to another object.
- Each fact 204 also may include one or more metrics 218 .
- a metric provides an indication of the some quality of the fact.
- the metrics include a confidence level and an importance level.
- the confidence level indicates the likelihood that the fact is correct.
- the importance level indicates the relevance of the fact to the object, compared to other facts for the same object.
- the importance level may optionally be viewed as a measure of how vital a fact is to an understanding of the entity or concept represented by the object.
- Each fact 204 includes a list of one or more sources 220 that include the fact and from which the fact was extracted.
- Each source may be identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location, such as a unique document identifier.
- URL Uniform Resource Locator
- the facts illustrated in FIG. 2( d ) include an agent field 222 that identifies the importer 108 that extracted the fact.
- the importer 108 may be a specialized importer that extracts facts from a specific source (e.g., the pages of a particular web site, or family of web sites) or type of source (e.g., web pages that present factual information in tabular form), or an importer 108 that extracts facts from free text in documents throughout the Web, and so forth.
- a name fact 207 is a fact that conveys a name for the entity or concept represented by the object ID.
- a name fact 207 includes an attribute 224 of “name” and a value, which is the name of the object. For example, for an object representing the country Spain, a name fact would have the value “Spain.”
- a name fact 207 being a special instance of a general fact 204 , includes the same fields as any other fact 204 ; it has an attribute, a value, a fact ID, metrics, sources, etc.
- the attribute 224 of a name fact 207 indicates that the fact is a name fact, and the value is the actual name.
- the name may be a string of characters.
- An object ID may have one or more associated name facts, as many entities or concepts can have more than one name. For example, an object ID representing Spain may have associated name facts conveying the country's common name “Spain” and the official name “Kingdom of Spain.” As another example, an object ID representing the U.S. Patent and Trademark Office may have associated name facts conveying the agency's acronyms “PTO” and “USPTO” as well as the official name “United States Patent and Trademark Office.” If an object does have more than one associated name fact, one of the name facts may be designated as a primary name and other name facts may be designated as secondary names, either implicitly or explicitly.
- a property fact 208 is a fact that conveys a statement about the entity or concept represented by the object ID.
- Property facts are generally used for summary information about an object.
- a property fact 208 being a special instance of a general fact 204 , also includes the same parameters (such as attribute, value, fact ID, etc.) as other facts 204 .
- the attribute field 226 of a property fact 208 indicates that the fact is a property fact (e.g., attribute is “property”) and the value is a string of text that conveys the statement of interest.
- the value of a property fact may be the text string “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- Some object IDs may have one or more associated property facts while other objects may have no associated property facts.
- the data structure of the repository 115 may take on other forms. Other fields may be included in facts and some of the fields described above may be omitted.
- each object ID may have additional special facts aside from name facts and property facts, such as facts conveying a type or category (for example, person, place, movie, actor, organization, etc.) for categorizing the entity or concept represented by the object ID.
- an object's name(s) and/or properties may be represented by special records that have a different format than the general facts records 204 .
- null object As described previously, a collection of facts is associated with an object ID of an object.
- An object may become a null or empty object when facts are disassociated from the object.
- a null object can arise in a number of different ways.
- One type of null object is an object that has had all of its facts (including name facts) removed, leaving no facts associated with its object ID.
- Another type of null object is an object that has all of its associated facts other than name facts removed, leaving only its name fact(s).
- the object may be a null object only if all of its associated name facts are removed.
- a null object represents an entity or concept for which the data processing system 106 has no factual information and, as far as the data processing system 106 is concerned, does not exist.
- facts of a null object may be left in the repository 115 , but have their object ID values cleared (or have their importance to a negative value). However, the facts of the null object are treated as if they were removed from the repository 115 . In some other embodiments, facts of null objects are physically removed from repository 115 .
- FIG. 2( e ) is a block diagram illustrating an alternate data structure 290 for facts and objects in accordance with preferred embodiments of the invention.
- an object 290 contains an object ID 292 and references or points to facts 294 .
- Each fact includes a fact ID 295 , an attribute 297 , and a value 299 .
- an object 290 actually exists in memory 107 .
- FIG. 3 is a high-level block diagram illustrating modules within a presentation engine 300 according to one embodiment.
- module refers to computer program logic and/or data for providing the specified functionality.
- a module can be implemented in hardware, firmware, and/or software. Some embodiments have different and/or additional modules than those shown in FIG. 3 . Moreover, the functionalities can be distributed among the modules in a different manner than described here.
- a presentation engine 300 presents objects and facts in a customizable manner. That is, the presentation engine 300 provides flexible tools that enable an end-user to view the facts of one or more objects in ways desired by the end-user. The presentation engine 300 thus allows the end-user to view information in a way that is more comprehensible to the end-user.
- the modules of the presentation engine 300 are implemented as a JavaScript program that executes on client devices such as personal computers, cellular telephones, personal digital assistants (PDAs), etc.
- the JavaScript program interfaces with the data processing system 106 to access data and functionalities provided by it.
- the JavaScript program itself is controlled by a web browser, operating system, or other entity executing on the client device.
- the presentation engine 300 is implemented using different coding techniques, relies solely on client-side data, and/or executes on the server.
- An object access module 310 receives objects from the fact repository 115 and/or another source.
- the objects are received in response to end-user interactions with a search engine or other object requestor 152 that provides access to the fact repository 115 .
- a search engine or other object requestor 152 that provides access to the fact repository 115 .
- an end-user can utilize a search engine to search the fact repository 115 for objects matching a particular query.
- the object requestor 152 returns a set of matching objects.
- a user interface provided by the object access module 310 and/or another module allows the end-user to select particular objects and designate the objects for further analysis. In this manner, the end-user can execute multiple different searches on the fact repository 115 and designate objects from the different searches for further analysis.
- the fact repository 115 stores a set of objects of type “atomic element,” including at least one object for each of the atomic elements.
- the end-user executes a query for objects that match the phrase “atomic elements.”
- the results of this query include all of the objects of type “atomic element” may also produce other objects depending upon the information in the objects and/or the search algorithms.
- the end-user can select one or more of these objects and designate the selected object for further analysis. For purposes of this example, assume that the end-user designates each one object for each atomic element.
- the object access module 310 receives the objects from the end-user.
- the end-user can supply user defined objects for use with the presentation engine 300 .
- the end-user can encounter objects on the network 104 at locations other than the fact repository 115 , such as on web pages not associated with the repository, and cause the object access module 310 to supply those objects to the presentation engine 300 .
- a collection module 312 receives the objects designated for further analysis by the end-user.
- the collection module 312 stores multiple collections, and each collection stores zero or more objects.
- the end-user specifies the collection in which the collection module 312 stores the designated objects.
- the collection module 312 stores designated objects in a default collection if the end-user does not specify a particular collection.
- the collection module 312 provides an interface allowing the end-user to manipulate the collections and the objects within the collections. For example, the end-user can view the objects within different collections, and add and remove objects.
- a collection can hold arbitrary and heterogeneous objects.
- a collection can contain objects for the atomic elements, the actor M. Emmet Walsh, and the country China.
- Some heterogeneous objects may have attributes in common, while other objects might not have any common attributes.
- a storage module 314 stores the collections and/or other data utilized by the presentation engine 300 for its operation.
- the storage module 314 acts as a place where other modules in the presentation engine 300 can store and retrieve information.
- the storage module 314 is a logical construct that uses storage allocated from virtual memory on the client device on which the presentation engine 300 is executing.
- some or all of the storage provided by the storage module 314 is located on a server connected to the client via the network 104 .
- the collection module 312 can store collections in the storage module 314 .
- the storage module 314 stores the data describing the collections and references to the objects within the collections in a memory on the client. However, the objects themselves are stored on a server accessible via the network 104 and retrieved from the server when necessary or desired.
- a user interface (UI) generation module 316 generates a UI for the end-user.
- the UI allows the end-user to view and manipulate the objects and the facts within the objects.
- the UI allows the end-user to control other aspects of the presentation engine 300 , such as executing a search for new objects and designating objects for storage in a collection.
- the UI is displayed on a display device of the client and contains buttons, list boxes, text boxes, images, hyperlinks, and/or other tools with which the end-user can control the presentation engine.
- the UI generation module 316 includes other modules for generating specific UI elements. These modules include a tabular presentation module 318 that generates UI elements displaying objects and facts in tables. Further, the UI generation module 316 includes a graphical presentation module 320 for displaying objects and facts in graphs. Additionally, the UI generation module includes a map presentation module 322 that displays objects and facts in combination with maps. The UI elements provided by these modules are described in more detail below.
- a scoring module 324 evaluates objects, attributes, and values and outputs corresponding scores. These scores can be used to produce ranked lists of objects and/or facts. The factors utilized for the evaluations and scores depend upon the embodiment and the objects, attributes, and/or values being evaluated. In one embodiment, the presentation engine 300 uses the scores produced by the scoring module 324 to establish facts to show in certain UIs. The operation of the scoring module 324 is described in more detail below.
- FIG. 4 illustrates a UI 400 contained on a web page generated by the UI generation module 316 according to one embodiment.
- User interfaces generated by other embodiments have different and/or additional elements than the interface of FIG. 4 .
- the UI elements can be arranged in a different manner than is shown in the figure.
- many of the elements of the UI are hyperlinks that the end-user can select to access additional information.
- FIG. 4 and the other figures illustrating UIs show exemplary interfaces where the end-user has searched for, and is viewing, objects for the atomic elements.
- the UI 400 of FIG. 4 is utilized by the end-user to search for facts and/or objects matching a particular search query and to save designated objects in a collection.
- the end-user can use the UI 400 to view facts about the objects.
- the top of the UI 400 contains a text input box in which the end-user can provide a textual description of the search query (e.g., keywords to search) and a button 412 the end-user can select to execute the search.
- a results area 414 below the search text input box 410 displays objects that match the search query.
- the results area 414 displays the names of the objects and a few facts about each object.
- the UI 400 includes a scroll bar 416 with which the end-user can view objects that are lower on the page.
- the results area 414 shows the objects for the elements Actinium, Polonium, and Chromium.
- the names 418 of the elements are displayed, along with images 420 that illustrate the respective elements. Beneath each name 418 is a set of facts 422 about the element.
- the illustrated UI shows four facts 422 about each element, although other embodiments can show fewer or more facts. For example, for the element Actinium the displayed facts 422 are:
- each displayed fact includes a URL that links to the source page from which the fact was derived.
- the initial facts displayed for an object are determined based on scores produced by the scoring module 324 .
- the scoring module 324 calculates scores for the facts of the object based on the metric (e.g., the importance and confidence levels) and outputs a ranked list. Facts having high importance and confidence are generally ranked higher than facts having low importance and/or confidence.
- the rankings produced by the scoring module 324 are influenced by the search query utilized to produce the list of objects.
- the scoring module 324 can increase the importance component of a fact if that fact matches a search term. For example, a search query for “atomic element weight” will produce an increased importance for the “atomic weight” fact of an object, and likely result in the atomic weight fact being ranked high enough to appear on the UI 400 .
- Each displayed object 418 includes a button 424 that the end-user can select to save the object to a collection.
- buttons 426 on the UI 400 provide the end-user with the options of saving all search results to a collection or saving only visible results to the collection.
- the collection 428 itself is displayed in a column on the left side of the UI 400 .
- the names of the objects 430 in the collection are displayed, along with a check box with which the end-user can remove the objects from the collection 428 .
- the illustrated UI 400 includes a “table” button 434 near the collection display.
- this button 434 is selected by the end-user, the UI 400 presents a tabular view of the objects in the collection. This tabular view is produced by the tabular presentation module 318 .
- Other embodiments of the presentation engine 300 provide other ways to access the table functionality.
- FIG. 5 illustrates a UI 500 including a tabular view 510 of objects and facts according to one embodiment.
- the illustrated table 510 contains four columns and a row for every object.
- the leftmost column 512 lists the names of the objects, which in this case are the atomic elements (Actinium, Polonium, Chromium . . . ).
- the columns to the right 514 display attributes of the objects.
- the attributes displayed are the atomic masses, densities, and boiling points of the respective elements.
- the tabular presentation module 318 uses the scoring module 324 to select the initial attributes for the right-side columns 514 of the table 510 .
- the scoring module 324 identifies the most common attributes of the objects in the collection 428 , and produces a list of the attributes sorted by commonality. Thus, an attribute shared by all of the objects in the collection 428 is ranked first in the list, while an attribute possessed by only one of the objects is ranked last.
- the metrics associated with the attributes' facts are used to break ties.
- the tabular presentation module 318 shows the highest ranked attributes in the initial columns 514 of the table 510 .
- a drop down selection box 516 displayed near the top of the table 510 allows the end-user to select additional facts to include in the table.
- the selection box 516 contains every unique attribute from the objects in the collection 428 .
- the end-user can select one of the attributes, and in response the UI 500 adds a column to the table showing the values of the objects for the selected attribute.
- the new column is made the rightmost column of the table 510 . If an object lacks the attribute displayed in the table 510 , one embodiment displays a blank space, text indicating that the attribute is not applicable, or another indicator that the object lacks the attribute.
- the columns 514 of the table 500 displaying facts contain additional buttons allowing the end-user to manipulate the table.
- each column contains buttons 518 labeled “Remove,” “Sort,” and “Graph.”
- the “Remove” button when selected, removes the specified column from the table 510 . If the “Sort” button is selected, the table is resorted based on the values of the attribute represented by the specified column. For example, choosing the “Sort” button of the “Density” column causes the table 510 to resort the atomic elements based on their densities.
- the UI 500 presents a graphical view of the objects in the collection. This graphical view is produced by the graphical presentation module 320 . Specifically, the UI 500 presents a graph showing the objects' values for the attribute of the column selected by the end-user.
- the graphical presentation module 320 determines the type of graph that best facilitates interpretation of the facts by the end-user and automatically generates a graph of that type. In one embodiment, graphical presentation module 320 considers the type of facts being graphed in determining the initial graph type. One consideration is the format of the value for the fact being graphed, e.g., whether the value is represented by a number, text, graphic, sound, etc. Another consideration is the meaning of the fact, e.g., is it a date, name, location, quantity, temperature, etc. In one embodiment, the graphical presentation module 320 determines the meaning of a fact from data within the object. For example, the meaning can be explicitly specified by meta-data within the object or can be derived from the name of the attribute associated with the fact.
- the specific types of graphs that the graphical presentation module 320 produces can vary depending upon the embodiment and/or the values being graphed.
- the module 320 graphs facts that are dates on a timeline.
- a timeline facilitates the interpretation of dates such as dates of births, deaths, disasters, discoveries and the like.
- the graphical presentation module 320 uses maps to graph facts that are locations because maps represent a good way to facilitate the understanding of such facts.
- the graphical presentation module 320 interacts with a map presentation module 322 to produce the maps.
- the map presentation module 322 holds maps of geographic regions.
- the facts of objects specify geographic locations, such as countries, places of births and death, etc. either explicitly (e.g., latitude/longitude) or implicitly (e.g., by name).
- the graphical presentation module 320 uses the maps and facts to produce maps that illustrate the locations specified by the facts. For example, an end-user can execute a search on “volcanoes” and create a collection that stores objects representing volcanoes.
- Each of these volcano objects includes a fact that describes the volcano's location.
- the end-user can use the graphical presentation module 320 and map presentation module 322 to create a map that shows the locations of the volcanoes using push pins or other icons.
- the end-user can create a collection of NBA basketball players, and then create a map showing the place of birth of each one.
- the graphical presentation module 320 graph other types of facts using other specialized graphs.
- the graphical presentation module 320 if the values of the attributes are numeric and are not of a type having a specialized graph, the graphical presentation module 320 produces a bar graph showing the value of the attribute for each object. If the values are not numeric, the graphical presentation module 320 produces a histogram grouping objects having the same value for the attribute. In either case, the graph shows the attribute along the X-axis. In one embodiment, the graphical presentation module 320 shows the graph as a scatter plot if two attributes are being graphed simultaneously.
- FIG. 6 illustrates a UI 600 including a graphical view 610 of objects and facts according to one embodiment. Specifically, FIG. 6 illustrates the graph 610 produced by the graphical presentation module 320 when the end-user selects the “graph” button for the “Atomic Mass” attribute.
- the graph 610 is a bar graph, with each bar representing one object (i.e., atomic element) and the height of the bar representing the value of that object's “Atomic Mass” attribute.
- the UI 600 illustrates the table 510 of objects in addition to the graph 610 .
- the end-user can use the “Sort” and “Graph” buttons to update the graph. If the end-user selects the “Sort” button for a column, the graphical presentation module 320 resorts the graph (if necessary), based on the selected attribute. The end-user can sort the graph based on an attribute that is not displayed in the graph. For example, the end-user can select the “Sort” button for the “Density” field and sort the graph of atomic masses by the objects' densities, so that the leftmost bar on the X-axis of the graph shows the atomic mass of the element having the lowest (or highest) density.
- the end-user can use the “Graph” buttons to add or remove attributes from the graph 610 .
- “Graph” button When an attribute is shown in the graph 610 , its corresponding “Graph” button becomes a “No Graph” button. The end-user selects the “No Graph” button to remove the attribute from the graph. If an attribute shown in the table 510 is not displayed on the graph 610 , the end-user can select that attribute's “Graph” button and cause the attribute to be graphed.
- FIG. 7 illustrates an example of a map 700 produced by the graphical presentation module 320 and map presentation module 322 according to one embodiment.
- the map 700 shows potentially active volcanoes in the state of Oregon.
- the map illustrates the border 710 of the state, and shows five push pins 712 representing the locations of the volcanoes within Oregon.
- the end-user can obtain additional information about a graphed object by using a mouse or other pointing device to move a cursor over the graphical representation of the object. For example, if the end-user moves the cursor over a particular bar of a bar graph, the graphical presentation module 320 displays additional facts about the object. Similarly, the end-user can move the cursor over a push pin icon on a map to view additional facts about the object having the location identified by the push pin.
- FIG. 8 illustrates an example of a timeline 800 produced by the graphical presentation module 320 according to one embodiment.
- the timeline 800 illustrates the period between 1775 and 1785 and shows the atomic elements discovered within that period.
- the timeline 800 shows that molybdenum was discovered in 1778, tungsten was discovered in 1783, and tellurium was discovered in 1782.
- FIG. 9 is a flow chart illustrating steps performed by the presentation engine 300 according to one embodiment. Other embodiments perform the steps in different orders and/or perform different or additional steps than the ones shown in FIG. 9 . This description describes the steps as occurring through interactions with an end-user. In other embodiments, the steps can be performed through automated processes.
- the presentation engine 300 establishes 910 a collection of objects. This collection is typically established when an end-user interacts with the presentation engine 300 , a search engine, and/or other entities to view a list of objects. The end-user selects certain objects and designates them for further analysis.
- the presentation engine 300 stores the designated objects in a collection or other logical grouping.
- the end-user interacts with the presentation engine 300 to generate 912 a visual representation of the designated objects.
- the end-user can use a UI presented by the presentation engine 300 to generate a table showing facts of the objects.
- the end-user can cause the presentation engine 300 to generate graphs, timelines, and maps showing facts of the objects.
- the end-user can manipulate 914 the visual representation by adding columns to a table, sorting the values shown by a graph, moving a cursor over a push pin icon on a map, etc.
- the end-user can thus view the facts of the objects in a manner that is beneficial to the end-user, rather than being forced to use the presentation selected by the entity that initially provided the objects and/or facts.
Abstract
Description
- This application is a continuation of U.S. application Ser. No. 11/342,277, filed Jan. 27, 2006, and entitled “Data Object Visualization Using Graphs,” incorporated herewith by reference in its entirety.
- This application is related to the following U.S. Applications, all of which are incorporated by reference herein:
- U.S. application Ser. No. 11/342,290, entitled “Data Object Visualization”, filed on Jan. 27, 2006;
- U.S. application Ser. No. 11/342,293, entitled “Data Object Visualization Using Maps”, filed on Jan. 27, 2006;
- U.S. application Ser. No. 11/341,069, entitled “Object Categorization for Information Extraction”, filed on Jan. 27, 2006;
- U.S. application Ser. No. 11/341,907, entitled “Designating Data Objects for Analysis”, filed concurrently on Jan. 27, 2006.
- 1. Field of the Invention
- This invention pertains in general to data visualization on a computer and, in particular, to ways of representing data obtained from web pages and other sources.
- 2. Description of the Related Art
- The World Wide Web and other information storage and retrieval systems contain a great deal of information. With the advent of search engines and other similar tools it has become relatively easy for an end-user to locate particular information. For example, one can obtain a wealth of information about the atomic elements by simply searching for the terms “atomic elements” on the Web.
- It is generally acknowledged that certain types of information are easier to comprehend when presented in some formats rather than in other formats. For example, an end-user might find it easier to understand the relationships between the atomic masses of the atomic elements if the masses are presented graphically instead of listed as numeric values. Similarly, trends in stock prices are easier to understand when the prices are presented on a graph rather than as a list of dates and prices.
- Information on the web is not always in a format that is easy for the end-user to comprehend. A web site that describes the atomic elements might display the periodic table and provide information like the atomic weights, melting points, and densities of the elements, but the site is unlikely to provide a graph of, say, atomic weights versus melting points. As a result, a person who desires to view such a graph must manually copy the information into another program that provides graphing capabilities.
- Some web sites, like sites providing stock prices and other financial information, provide limited amounts of dynamic content. For example, a person can interact with such sites to create and manipulate graphs showing stock prices over time. Even on these sites, however, the person is restricted to a limited set of graphing options. Further, there is no way for a person to graphically manipulate data contained on multiple web sites short of copying the desired information into separate graphing program.
- Therefore, there is a need in the art for a way to enable the end-user to organize and view structured information on web pages in a way that makes it easier to comprehend.
- The above need is met by a system, method, and computer program product for graphically presenting facts. In one embodiment, a set of facts is established, where each fact has an attribute and a corresponding value. A graph type that facilitates understanding of the facts are determined, and the facts are displayed in a graph of the determined type.
-
FIG. 1 shows a network, in accordance with a preferred embodiment of the invention. -
FIGS. 2( a)-2(d) are block diagrams illustrating a data structure for facts within a repository ofFIG. 1 in accordance with preferred embodiments of the invention. -
FIG. 2( e) is a block diagram illustrating an alternate data structure for facts and objects in accordance with preferred embodiments of the invention. -
FIG. 3 is a high-level block diagram illustrating modules within a presentation engine according to one embodiment. -
FIG. 4 illustrates a user interface (UI) contained on a web page generated by the UI generation module according to one embodiment. -
FIG. 5 illustrates a UI including a tabular view of objects and facts according to one embodiment. -
FIG. 6 illustrates a UI including a graphical view of objects and facts according to one embodiment. -
FIG. 7 illustrates an example of a map produced by the graphical presentation module and map presentation module according to one embodiment. -
FIG. 8 illustrates an example of a timeline produced by the graphical presentation module according to one embodiment. -
FIG. 9 is a flow chart illustrating steps performed by the presentation engine according to one embodiment. - The figures depict an embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.
-
FIG. 1 shows asystem architecture 100 adapted to support one embodiment of the invention.FIG. 1 shows components used to add facts into, and retrieve facts from arepository 115. Thesystem architecture 100 includes anetwork 104, through which any number ofdocument hosts 102 communicate with adata processing system 106, along with any number ofobject requesters - Document hosts 102 store documents and provide access to documents. A document is comprised of any machine-readable data including any combination of text, graphics, multimedia content, etc. A document may be encoded in an markup language, such as Hypertext Markup Language (HTML), i.e., a web page, in a interpreted language (e.g., JavaScript) or in any other computer readable or executable format. A document can include one or more hyperlinks to other documents. A typical document will include one or more facts within its content. A document stored in a
document host 102 may be located and/or identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location. Adocument host 102 is implemented by a computer system, and typically includes a server adapted to communicate over thenetwork 104 via networking protocols (e.g., TCP/IP), as well as application and presentation protocols (e.g., HTTP, HTML, SOAP, D-HTML, Java). The documents stored by ahost 102 are typically held in a file directory, a database, or other data repository. Ahost 102 can be implemented in any computing device (e.g., from a PDA or personal computer, a workstation, mini-computer, or mainframe, to a cluster or grid of computers), as well as in any processor architecture or operating system. -
FIG. 1 shows components used to manage facts in afact repository 115.Data processing system 106 includes one ormore importers 108, one ormore janitors 110, abuild engine 112, aservice engine 114, and a fact repository 115 (also called simply a “repository”). Each of the foregoing are implemented, in one embodiment, as software modules (or programs) executed byprocessor 116.Importers 108 operate to process documents received from the document hosts, read the data content of documents, and extract facts (as operationally and programmatically defined within the data processing system 106) from such documents. Theimporters 108 also determine the subject or subjects with which the facts are associated, and extract such facts into individual items of data, for storage in thefact repository 115. In one embodiment, there are different types ofimporters 108 for different types of documents, for example, dependent on the format or document type. -
Janitors 110 operate to process facts extracted byimporter 108. This processing can include but is not limited to, data cleansing, object merging, and fact induction. In one embodiment, there are a number ofdifferent janitors 110 that perform different types of data management operations on the facts. For example, onejanitor 110 may traverse some set of facts in therepository 115 to find duplicate facts (that is, facts that convey the same factual information) and merge them. Anotherjanitor 110 may also normalize facts into standard formats. Anotherjanitor 110 may also remove unwanted facts fromrepository 115, such as facts related to pornographic content. Other types ofjanitors 110 may be implemented, depending on the types of data management functions desired, such as translation, compression, spelling or grammar correction, and the like. -
Various janitors 110 act on facts to normalize attribute names, and values and delete duplicate and near-duplicate facts so an object does not have redundant information. For example, we might find on one page that Britney Spears' birthday is “Dec. 2, 1981” while on another page that her date of birth is “Dec. 2, 1981.” Birthday and Date of Birth might both be rewritten as Birthdate by one janitor and then another janitor might notice that Dec. 2, 1981 and Dec. 2, 1981 are different forms of the same date. It would choose the preferred form, remove the other fact and combine the source lists for the two facts. As a result when you look at the source pages for this fact, on some you'll find an exact match of the fact and on others text that is considered to be synonymous with the fact. -
Build engine 112 builds and manages therepository 115.Service engine 114 is an interface for querying therepository 115.Service engine 114's main function is to process queries, score matching objects, and return them to the caller but it is also used byjanitor 110. -
Repository 115 stores factual information extracted from a plurality of documents that are located on document hosts 102. A document from which a particular fact may be extracted is a source document (or “source”) of that particular fact. In other words, a source of a fact includes that fact (or a synonymous fact) within its contents. -
Repository 115 contains one or more facts. In one embodiment, each fact is associated with exactly one object. One implementation for this association includes in each fact an object ID that uniquely identifies the object of the association. In this manner, any number of facts may be associated with an individual object, by including the object ID for that object in the facts. In one embodiment, objects themselves are not physically stored in therepository 115, but rather are defined by the set or group of facts with the same associated object ID, as described below. Further details about facts inrepository 115 are described below, in relation toFIGS. 2( a)-2(d). - It should be appreciated that in practice at least some of the components of the
data processing system 106 will be distributed over multiple computers, communicating over a network. For example,repository 115 may be deployed over multiple servers. As another example, thejanitors 110 may be located on any number of different computers. For convenience of explanation, however, the components of thedata processing system 106 are discussed as though they were implemented on a single computer. - In another embodiment, some or all of document hosts 102 are located on
data processing system 106 instead of being coupled todata processing system 106 by a network. For example,importer 108 may import facts from a database that is a part of or associated withdata processing system 106. -
FIG. 1 also includes components to accessrepository 115 on behalf of one ormore object requesters repository 115.Object requesters system 106, and can be implemented in any computer device or architecture. As shown inFIG. 1 , afirst object requester 152 is located remotely fromsystem 106, while asecond object requester 154 is located indata processing system 106. For example, in a computer system hosting a blog, the blog may include a reference to an object whose facts are inrepository 115. An object requester 152, such as a browser displaying the blog will accessdata processing system 106 so that the information of the facts associated with the object can be displayed as part of the blog web page. As a second example,janitor 110 or other entity considered to be part ofdata processing system 106 can function as object requester 154, requesting the facts of objects fromrepository 115. -
FIG. 1 shows thatdata processing system 106 includes amemory 107 and one ormore processors 116.Memory 107 includesimporters 108,janitors 110, buildengine 112,service engine 114, andrequester 154, each of which are preferably implemented as instructions stored inmemory 107 and executable byprocessor 116.Memory 107 also includesrepository 115.Repository 115 can be stored in a memory of one or more computer systems or in a type of memory such as a disk.FIG. 1 also includes a computerreadable medium 118 containing, for example, at least one ofimporters 108,janitors 110, buildengine 112,service engine 114,requester 154, and at least some portions ofrepository 115.FIG. 1 also includes one or more input/output devices 120 that allow data to be input and output to and fromdata processing system 106. It will be understood thatdata processing system 106 preferably also includes standard software components such as operating systems and the like and further preferably includes standard hardware components not shown in the figure for clarity of example. -
FIG. 2( a) shows an example format of a data structure for facts withinrepository 115, according to some embodiments of the invention. As described above, therepository 115 includesfacts 204. Eachfact 204 includes a unique identifier for that fact, such as afact ID 210. Eachfact 204 includes at least anattribute 212 and avalue 214. For example, a fact associated with an object representing George Washington may include an attribute of “date of birth” and a value of “Feb. 22, 1732.” In one embodiment, all facts are stored as alphanumeric characters since they are extracted from web pages. In another embodiment, facts also can store binary data values. Other embodiments, however, may store fact values as mixed types, or in encoded formats. - As described above, each fact is associated with an
object ID 209 that identifies the object that the fact describes. Thus, each fact that is associated with a same entity (such as George Washington), will have thesame object ID 209. In one embodiment, objects are not stored as separate data entities in memory. In this embodiment, the facts associated with an object contain the same object ID, but no physical object exists. In another embodiment, objects are stored as data entities in memory, and include references (for example, pointers or IDs) to the facts associated with the object. The logical data structure of a fact can take various forms; in general, a fact is represented by a tuple that includes a fact ID, an attribute, a value, and an object ID. The storage implementation of a fact can be in any underlying physical data structure. -
FIG. 2( b) shows an example of facts having respective fact IDs of 10, 20, and 30 inrepository 115.Facts Fact 10 has an attribute of “Name” and a value of “China.”Fact 20 has an attribute of “Category” and a value of “Country.” Thus, the object identified by object ID “1” has aname fact 205 with a value of “China” and acategory fact 206 with a value of “Country.”Fact 30 208 has an attribute of “Property” and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” Thus, the object identified by object ID “2” has a property fact with a fact ID of 30 and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” In the illustrated embodiment, each fact has one attribute and one value. The number of facts associated with an object is not limited; thus while only two facts are shown for the “China” object, in practice there may be dozens, even hundreds of facts associated with a given object. Also, the value fields of a fact need not be limited in size or content. For example, a fact about the economy of “China” with an attribute of “Economy” would have a value including several paragraphs of text, numbers, perhaps even tables of figures. This content can be formatted, for example, in a markup language. For example, a fact having an attribute “original html” might have a value of the original html text taken from the source web page. - Also, while the illustration of
FIG. 2( b) shows the explicit coding of object ID, fact ID, attribute, and value, in practice the content of the fact can be implicitly coded as well (e.g., the first field being the object ID, the second field being the fact ID, the third field being the attribute, and the fourth field being the value). Other fields include but are not limited to: the language used to state the fact (English, etc.), how important the fact is, the source of the fact, a confidence value for the fact, and so on. -
FIG. 2( c) shows an example object reference table 210 that is used in some embodiments. Not all embodiments include an object reference table. The object reference table 210 functions to efficiently maintain the associations between object IDs and fact IDs. In the absence of an object reference table 210, it is also possible to find all facts for a given object ID by querying the repository to find all facts with a particular object ID. WhileFIGS. 2( b) and 2(c) illustrate the object reference table 210 with explicit coding of object and fact IDs, the table also may contain just the ID values themselves in column or pair-wise arrangements. -
FIG. 2( d) shows an example of a data structure for facts withinrepository 115, according to some embodiments of the invention showing an extended format of facts. In this example, the fields include anobject reference link 216 to another object. Theobject reference link 216 can be an object ID of another object in therepository 115, or a reference to the location (e.g., table row) for the object in the object reference table 210. Theobject reference link 216 allows facts to have as values other objects. For example, for an object “United States,” there may be a fact with the attribute of “president” and the value of “George W. Bush,” with “George W. Bush” being an object having its own facts inrepository 115. In some embodiments, thevalue field 214 stores the name of the linked object and thelink 216 stores the object identifier of the linked object. Thus, this “president” fact would include thevalue 214 of “George W. Bush”, and objectreference link 216 that contains the object ID for the for “George W. Bush” object. In some other embodiments,facts 204 do not include alink field 216 because thevalue 214 of afact 204 may store a link to another object. - Each
fact 204 also may include one ormore metrics 218. A metric provides an indication of the some quality of the fact. In some embodiments, the metrics include a confidence level and an importance level. The confidence level indicates the likelihood that the fact is correct. The importance level indicates the relevance of the fact to the object, compared to other facts for the same object. The importance level may optionally be viewed as a measure of how vital a fact is to an understanding of the entity or concept represented by the object. - Each
fact 204 includes a list of one ormore sources 220 that include the fact and from which the fact was extracted. Each source may be identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location, such as a unique document identifier. - The facts illustrated in
FIG. 2( d) include anagent field 222 that identifies theimporter 108 that extracted the fact. For example, theimporter 108 may be a specialized importer that extracts facts from a specific source (e.g., the pages of a particular web site, or family of web sites) or type of source (e.g., web pages that present factual information in tabular form), or animporter 108 that extracts facts from free text in documents throughout the Web, and so forth. - Some embodiments include one or more specialized facts, such as a
name fact 207 and aproperty fact 208. Aname fact 207 is a fact that conveys a name for the entity or concept represented by the object ID. Aname fact 207 includes anattribute 224 of “name” and a value, which is the name of the object. For example, for an object representing the country Spain, a name fact would have the value “Spain.” Aname fact 207, being a special instance of ageneral fact 204, includes the same fields as anyother fact 204; it has an attribute, a value, a fact ID, metrics, sources, etc. Theattribute 224 of aname fact 207 indicates that the fact is a name fact, and the value is the actual name. The name may be a string of characters. An object ID may have one or more associated name facts, as many entities or concepts can have more than one name. For example, an object ID representing Spain may have associated name facts conveying the country's common name “Spain” and the official name “Kingdom of Spain.” As another example, an object ID representing the U.S. Patent and Trademark Office may have associated name facts conveying the agency's acronyms “PTO” and “USPTO” as well as the official name “United States Patent and Trademark Office.” If an object does have more than one associated name fact, one of the name facts may be designated as a primary name and other name facts may be designated as secondary names, either implicitly or explicitly. - A
property fact 208 is a fact that conveys a statement about the entity or concept represented by the object ID. Property facts are generally used for summary information about an object. Aproperty fact 208, being a special instance of ageneral fact 204, also includes the same parameters (such as attribute, value, fact ID, etc.) asother facts 204. Theattribute field 226 of aproperty fact 208 indicates that the fact is a property fact (e.g., attribute is “property”) and the value is a string of text that conveys the statement of interest. For example, for the object ID representing Bill Clinton, the value of a property fact may be the text string “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” Some object IDs may have one or more associated property facts while other objects may have no associated property facts. It should be appreciated that the data structures shown inFIGS. 2( a)-2(d) and described above are merely exemplary. The data structure of therepository 115 may take on other forms. Other fields may be included in facts and some of the fields described above may be omitted. Additionally, each object ID may have additional special facts aside from name facts and property facts, such as facts conveying a type or category (for example, person, place, movie, actor, organization, etc.) for categorizing the entity or concept represented by the object ID. In some embodiments, an object's name(s) and/or properties may be represented by special records that have a different format than the general facts records 204. - As described previously, a collection of facts is associated with an object ID of an object. An object may become a null or empty object when facts are disassociated from the object. A null object can arise in a number of different ways. One type of null object is an object that has had all of its facts (including name facts) removed, leaving no facts associated with its object ID. Another type of null object is an object that has all of its associated facts other than name facts removed, leaving only its name fact(s). Alternatively, the object may be a null object only if all of its associated name facts are removed. A null object represents an entity or concept for which the
data processing system 106 has no factual information and, as far as thedata processing system 106 is concerned, does not exist. In some embodiments, facts of a null object may be left in therepository 115, but have their object ID values cleared (or have their importance to a negative value). However, the facts of the null object are treated as if they were removed from therepository 115. In some other embodiments, facts of null objects are physically removed fromrepository 115. -
FIG. 2( e) is a block diagram illustrating analternate data structure 290 for facts and objects in accordance with preferred embodiments of the invention. In this data structure, anobject 290 contains anobject ID 292 and references or points tofacts 294. Each fact includes afact ID 295, anattribute 297, and avalue 299. In this embodiment, anobject 290 actually exists inmemory 107. -
FIG. 3 is a high-level block diagram illustrating modules within apresentation engine 300 according to one embodiment. As used herein, the term “module” refers to computer program logic and/or data for providing the specified functionality. A module can be implemented in hardware, firmware, and/or software. Some embodiments have different and/or additional modules than those shown inFIG. 3 . Moreover, the functionalities can be distributed among the modules in a different manner than described here. - A
presentation engine 300 presents objects and facts in a customizable manner. That is, thepresentation engine 300 provides flexible tools that enable an end-user to view the facts of one or more objects in ways desired by the end-user. Thepresentation engine 300 thus allows the end-user to view information in a way that is more comprehensible to the end-user. - In one embodiment, the modules of the
presentation engine 300 are implemented as a JavaScript program that executes on client devices such as personal computers, cellular telephones, personal digital assistants (PDAs), etc. The JavaScript program interfaces with thedata processing system 106 to access data and functionalities provided by it. The JavaScript program itself is controlled by a web browser, operating system, or other entity executing on the client device. In other embodiments, thepresentation engine 300 is implemented using different coding techniques, relies solely on client-side data, and/or executes on the server. - An
object access module 310 receives objects from thefact repository 115 and/or another source. In one embodiment, the objects are received in response to end-user interactions with a search engine or other object requestor 152 that provides access to thefact repository 115. For example, an end-user can utilize a search engine to search thefact repository 115 for objects matching a particular query. The object requestor 152 returns a set of matching objects. A user interface provided by theobject access module 310 and/or another module allows the end-user to select particular objects and designate the objects for further analysis. In this manner, the end-user can execute multiple different searches on thefact repository 115 and designate objects from the different searches for further analysis. - For example, assume that the
fact repository 115 stores a set of objects of type “atomic element,” including at least one object for each of the atomic elements. Also assume that the end-user executes a query for objects that match the phrase “atomic elements.” The results of this query include all of the objects of type “atomic element” may also produce other objects depending upon the information in the objects and/or the search algorithms. The end-user can select one or more of these objects and designate the selected object for further analysis. For purposes of this example, assume that the end-user designates each one object for each atomic element. - In another embodiment, the
object access module 310 receives the objects from the end-user. For example, the end-user can supply user defined objects for use with thepresentation engine 300. Further, the end-user can encounter objects on thenetwork 104 at locations other than thefact repository 115, such as on web pages not associated with the repository, and cause theobject access module 310 to supply those objects to thepresentation engine 300. - In one embodiment, a
collection module 312 receives the objects designated for further analysis by the end-user. Thecollection module 312 stores multiple collections, and each collection stores zero or more objects. In one embodiment, the end-user specifies the collection in which thecollection module 312 stores the designated objects. In other embodiments, thecollection module 312 stores designated objects in a default collection if the end-user does not specify a particular collection. Thecollection module 312 provides an interface allowing the end-user to manipulate the collections and the objects within the collections. For example, the end-user can view the objects within different collections, and add and remove objects. - Although most of this discussion focuses on a collection containing objects for the atomic elements, a collection can hold arbitrary and heterogeneous objects. For example, a collection can contain objects for the atomic elements, the actor M. Emmet Walsh, and the country China. Some heterogeneous objects may have attributes in common, while other objects might not have any common attributes.
- A
storage module 314 stores the collections and/or other data utilized by thepresentation engine 300 for its operation. Thestorage module 314 acts as a place where other modules in thepresentation engine 300 can store and retrieve information. In one embodiment, thestorage module 314 is a logical construct that uses storage allocated from virtual memory on the client device on which thepresentation engine 300 is executing. In other embodiments, some or all of the storage provided by thestorage module 314 is located on a server connected to the client via thenetwork 104. For example, thecollection module 312 can store collections in thestorage module 314. Thestorage module 314 stores the data describing the collections and references to the objects within the collections in a memory on the client. However, the objects themselves are stored on a server accessible via thenetwork 104 and retrieved from the server when necessary or desired. - A user interface (UI)
generation module 316 generates a UI for the end-user. Generally, the UI allows the end-user to view and manipulate the objects and the facts within the objects. In addition, the UI allows the end-user to control other aspects of thepresentation engine 300, such as executing a search for new objects and designating objects for storage in a collection. In one embodiment, the UI is displayed on a display device of the client and contains buttons, list boxes, text boxes, images, hyperlinks, and/or other tools with which the end-user can control the presentation engine. - In one embodiment, the
UI generation module 316 includes other modules for generating specific UI elements. These modules include atabular presentation module 318 that generates UI elements displaying objects and facts in tables. Further, theUI generation module 316 includes agraphical presentation module 320 for displaying objects and facts in graphs. Additionally, the UI generation module includes amap presentation module 322 that displays objects and facts in combination with maps. The UI elements provided by these modules are described in more detail below. - A
scoring module 324 evaluates objects, attributes, and values and outputs corresponding scores. These scores can be used to produce ranked lists of objects and/or facts. The factors utilized for the evaluations and scores depend upon the embodiment and the objects, attributes, and/or values being evaluated. In one embodiment, thepresentation engine 300 uses the scores produced by thescoring module 324 to establish facts to show in certain UIs. The operation of thescoring module 324 is described in more detail below. -
FIG. 4 illustrates aUI 400 contained on a web page generated by theUI generation module 316 according to one embodiment. User interfaces generated by other embodiments have different and/or additional elements than the interface ofFIG. 4 . Moreover, the UI elements can be arranged in a different manner than is shown in the figure. Although not specifically discussed below, many of the elements of the UI are hyperlinks that the end-user can select to access additional information.FIG. 4 and the other figures illustrating UIs show exemplary interfaces where the end-user has searched for, and is viewing, objects for the atomic elements. - The
UI 400 ofFIG. 4 is utilized by the end-user to search for facts and/or objects matching a particular search query and to save designated objects in a collection. In addition, the end-user can use theUI 400 to view facts about the objects. To this end, the top of theUI 400 contains a text input box in which the end-user can provide a textual description of the search query (e.g., keywords to search) and abutton 412 the end-user can select to execute the search. - A
results area 414 below the searchtext input box 410 displays objects that match the search query. In the illustrated embodiment, theresults area 414 displays the names of the objects and a few facts about each object. TheUI 400 includes ascroll bar 416 with which the end-user can view objects that are lower on the page. - In the illustrated
UI 400, theresults area 414 shows the objects for the elements Actinium, Polonium, and Chromium. Thenames 418 of the elements are displayed, along withimages 420 that illustrate the respective elements. Beneath eachname 418 is a set offacts 422 about the element. The illustrated UI shows fourfacts 422 about each element, although other embodiments can show fewer or more facts. For example, for the element Actinium the displayedfacts 422 are: - Obtained From: extremely rare
Uses: No uses known - In addition, each displayed fact includes a URL that links to the source page from which the fact was derived.
- The initial facts displayed for an object are determined based on scores produced by the
scoring module 324. Thescoring module 324 calculates scores for the facts of the object based on the metric (e.g., the importance and confidence levels) and outputs a ranked list. Facts having high importance and confidence are generally ranked higher than facts having low importance and/or confidence. In one embodiment, the rankings produced by thescoring module 324 are influenced by the search query utilized to produce the list of objects. Thescoring module 324 can increase the importance component of a fact if that fact matches a search term. For example, a search query for “atomic element weight” will produce an increased importance for the “atomic weight” fact of an object, and likely result in the atomic weight fact being ranked high enough to appear on theUI 400. - Each displayed
object 418 includes a button 424 that the end-user can select to save the object to a collection. In addition,other buttons 426 on theUI 400 provide the end-user with the options of saving all search results to a collection or saving only visible results to the collection. Thecollection 428 itself is displayed in a column on the left side of theUI 400. The names of theobjects 430 in the collection are displayed, along with a check box with which the end-user can remove the objects from thecollection 428. - The illustrated
UI 400 includes a “table” button 434 near the collection display. When this button 434 is selected by the end-user, theUI 400 presents a tabular view of the objects in the collection. This tabular view is produced by thetabular presentation module 318. Other embodiments of thepresentation engine 300 provide other ways to access the table functionality. -
FIG. 5 illustrates aUI 500 including atabular view 510 of objects and facts according to one embodiment. The illustrated table 510 contains four columns and a row for every object. Theleftmost column 512 lists the names of the objects, which in this case are the atomic elements (Actinium, Polonium, Chromium . . . ). The columns to the right 514 display attributes of the objects. InFIG. 5 , the attributes displayed are the atomic masses, densities, and boiling points of the respective elements. - The
tabular presentation module 318 uses thescoring module 324 to select the initial attributes for the right-side columns 514 of the table 510. In one embodiment, thescoring module 324 identifies the most common attributes of the objects in thecollection 428, and produces a list of the attributes sorted by commonality. Thus, an attribute shared by all of the objects in thecollection 428 is ranked first in the list, while an attribute possessed by only one of the objects is ranked last. In one embodiment, the metrics associated with the attributes' facts are used to break ties. Thetabular presentation module 318 shows the highest ranked attributes in theinitial columns 514 of the table 510. - A drop down
selection box 516 displayed near the top of the table 510 allows the end-user to select additional facts to include in the table. In one embodiment, theselection box 516 contains every unique attribute from the objects in thecollection 428. The end-user can select one of the attributes, and in response theUI 500 adds a column to the table showing the values of the objects for the selected attribute. In one embodiment, the new column is made the rightmost column of the table 510. If an object lacks the attribute displayed in the table 510, one embodiment displays a blank space, text indicating that the attribute is not applicable, or another indicator that the object lacks the attribute. - The
columns 514 of the table 500 displaying facts contain additional buttons allowing the end-user to manipulate the table. In one embodiment, each column contains buttons 518 labeled “Remove,” “Sort,” and “Graph.” The “Remove” button, when selected, removes the specified column from the table 510. If the “Sort” button is selected, the table is resorted based on the values of the attribute represented by the specified column. For example, choosing the “Sort” button of the “Density” column causes the table 510 to resort the atomic elements based on their densities. - When the “Graph” button is selected by the end-user, the
UI 500 presents a graphical view of the objects in the collection. This graphical view is produced by thegraphical presentation module 320. Specifically, theUI 500 presents a graph showing the objects' values for the attribute of the column selected by the end-user. - The
graphical presentation module 320 determines the type of graph that best facilitates interpretation of the facts by the end-user and automatically generates a graph of that type. In one embodiment,graphical presentation module 320 considers the type of facts being graphed in determining the initial graph type. One consideration is the format of the value for the fact being graphed, e.g., whether the value is represented by a number, text, graphic, sound, etc. Another consideration is the meaning of the fact, e.g., is it a date, name, location, quantity, temperature, etc. In one embodiment, thegraphical presentation module 320 determines the meaning of a fact from data within the object. For example, the meaning can be explicitly specified by meta-data within the object or can be derived from the name of the attribute associated with the fact. - The specific types of graphs that the
graphical presentation module 320 produces can vary depending upon the embodiment and/or the values being graphed. In one embodiment, themodule 320 graphs facts that are dates on a timeline. A timeline facilitates the interpretation of dates such as dates of births, deaths, disasters, discoveries and the like. - In one embodiment, the
graphical presentation module 320 uses maps to graph facts that are locations because maps represent a good way to facilitate the understanding of such facts. Thegraphical presentation module 320 interacts with amap presentation module 322 to produce the maps. In one embodiment, themap presentation module 322 holds maps of geographic regions. The facts of objects specify geographic locations, such as countries, places of births and death, etc. either explicitly (e.g., latitude/longitude) or implicitly (e.g., by name). Thegraphical presentation module 320 uses the maps and facts to produce maps that illustrate the locations specified by the facts. For example, an end-user can execute a search on “volcanoes” and create a collection that stores objects representing volcanoes. Each of these volcano objects includes a fact that describes the volcano's location. The end-user can use thegraphical presentation module 320 andmap presentation module 322 to create a map that shows the locations of the volcanoes using push pins or other icons. Similarly, the end-user can create a collection of NBA basketball players, and then create a map showing the place of birth of each one. - Other embodiments of the
graphical presentation module 320 graph other types of facts using other specialized graphs. In one embodiment, if the values of the attributes are numeric and are not of a type having a specialized graph, thegraphical presentation module 320 produces a bar graph showing the value of the attribute for each object. If the values are not numeric, thegraphical presentation module 320 produces a histogram grouping objects having the same value for the attribute. In either case, the graph shows the attribute along the X-axis. In one embodiment, thegraphical presentation module 320 shows the graph as a scatter plot if two attributes are being graphed simultaneously. -
FIG. 6 illustrates a UI 600 including agraphical view 610 of objects and facts according to one embodiment. Specifically,FIG. 6 illustrates thegraph 610 produced by thegraphical presentation module 320 when the end-user selects the “graph” button for the “Atomic Mass” attribute. Thegraph 610 is a bar graph, with each bar representing one object (i.e., atomic element) and the height of the bar representing the value of that object's “Atomic Mass” attribute. - As shown in
FIG. 6 , the UI 600 illustrates the table 510 of objects in addition to thegraph 610. In one embodiment, the end-user can use the “Sort” and “Graph” buttons to update the graph. If the end-user selects the “Sort” button for a column, thegraphical presentation module 320 resorts the graph (if necessary), based on the selected attribute. The end-user can sort the graph based on an attribute that is not displayed in the graph. For example, the end-user can select the “Sort” button for the “Density” field and sort the graph of atomic masses by the objects' densities, so that the leftmost bar on the X-axis of the graph shows the atomic mass of the element having the lowest (or highest) density. - The end-user can use the “Graph” buttons to add or remove attributes from the
graph 610. When an attribute is shown in thegraph 610, its corresponding “Graph” button becomes a “No Graph” button. The end-user selects the “No Graph” button to remove the attribute from the graph. If an attribute shown in the table 510 is not displayed on thegraph 610, the end-user can select that attribute's “Graph” button and cause the attribute to be graphed. -
FIG. 7 illustrates an example of amap 700 produced by thegraphical presentation module 320 andmap presentation module 322 according to one embodiment. Themap 700 shows potentially active volcanoes in the state of Oregon. The map illustrates theborder 710 of the state, and shows fivepush pins 712 representing the locations of the volcanoes within Oregon. - In one embodiment, the end-user can obtain additional information about a graphed object by using a mouse or other pointing device to move a cursor over the graphical representation of the object. For example, if the end-user moves the cursor over a particular bar of a bar graph, the
graphical presentation module 320 displays additional facts about the object. Similarly, the end-user can move the cursor over a push pin icon on a map to view additional facts about the object having the location identified by the push pin. -
FIG. 8 illustrates an example of atimeline 800 produced by thegraphical presentation module 320 according to one embodiment. Thetimeline 800 illustrates the period between 1775 and 1785 and shows the atomic elements discovered within that period. Thus, thetimeline 800 shows that molybdenum was discovered in 1778, tungsten was discovered in 1783, and tellurium was discovered in 1782. -
FIG. 9 is a flow chart illustrating steps performed by thepresentation engine 300 according to one embodiment. Other embodiments perform the steps in different orders and/or perform different or additional steps than the ones shown inFIG. 9 . This description describes the steps as occurring through interactions with an end-user. In other embodiments, the steps can be performed through automated processes. - Initially, the
presentation engine 300 establishes 910 a collection of objects. This collection is typically established when an end-user interacts with thepresentation engine 300, a search engine, and/or other entities to view a list of objects. The end-user selects certain objects and designates them for further analysis. Thepresentation engine 300 stores the designated objects in a collection or other logical grouping. - The end-user interacts with the
presentation engine 300 to generate 912 a visual representation of the designated objects. For example, the end-user can use a UI presented by thepresentation engine 300 to generate a table showing facts of the objects. Likewise, the end-user can cause thepresentation engine 300 to generate graphs, timelines, and maps showing facts of the objects. Further, the end-user can manipulate 914 the visual representation by adding columns to a table, sorting the values shown by a graph, moving a cursor over a push pin icon on a map, etc. Using thepresentation engine 300, the end-user can thus view the facts of the objects in a manner that is beneficial to the end-user, rather than being forced to use the presentation selected by the entity that initially provided the objects and/or facts. - The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/223,959 US9530229B2 (en) | 2006-01-27 | 2014-03-24 | Data object visualization using graphs |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/342,277 US20070185870A1 (en) | 2006-01-27 | 2006-01-27 | Data object visualization using graphs |
US14/223,959 US9530229B2 (en) | 2006-01-27 | 2014-03-24 | Data object visualization using graphs |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/342,277 Continuation US20070185870A1 (en) | 2006-01-27 | 2006-01-27 | Data object visualization using graphs |
Publications (2)
Publication Number | Publication Date |
---|---|
US20140320499A1 true US20140320499A1 (en) | 2014-10-30 |
US9530229B2 US9530229B2 (en) | 2016-12-27 |
Family
ID=38323325
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/342,277 Abandoned US20070185870A1 (en) | 2006-01-27 | 2006-01-27 | Data object visualization using graphs |
US14/223,959 Active US9530229B2 (en) | 2006-01-27 | 2014-03-24 | Data object visualization using graphs |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/342,277 Abandoned US20070185870A1 (en) | 2006-01-27 | 2006-01-27 | Data object visualization using graphs |
Country Status (1)
Country | Link |
---|---|
US (2) | US20070185870A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11455361B2 (en) * | 2019-08-09 | 2022-09-27 | Microsoft Technology Licensing, Llc | Query entity-experience classification |
US11487801B2 (en) | 2018-11-29 | 2022-11-01 | International Business Machines Corporation | Dynamic data visualization from factual statements in text |
Families Citing this family (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080082578A1 (en) | 2006-09-29 | 2008-04-03 | Andrew Hogue | Displaying search results on a one or two dimensional graph |
US20080086679A1 (en) * | 2006-10-05 | 2008-04-10 | Educational Testing Service | Data structure for defining a chart |
US8108777B2 (en) | 2008-08-11 | 2012-01-31 | Microsoft Corporation | Sections of a presentation having user-definable properties |
US10127524B2 (en) | 2009-05-26 | 2018-11-13 | Microsoft Technology Licensing, Llc | Shared collaboration canvas |
US8756229B2 (en) * | 2009-06-26 | 2014-06-17 | Quantifind, Inc. | System and methods for units-based numeric information retrieval |
US9118612B2 (en) | 2010-12-15 | 2015-08-25 | Microsoft Technology Licensing, Llc | Meeting-specific state indicators |
US9383888B2 (en) | 2010-12-15 | 2016-07-05 | Microsoft Technology Licensing, Llc | Optimized joint document review |
US9864612B2 (en) | 2010-12-23 | 2018-01-09 | Microsoft Technology Licensing, Llc | Techniques to customize a user interface for different displays |
US9544158B2 (en) | 2011-10-05 | 2017-01-10 | Microsoft Technology Licensing, Llc | Workspace collaboration via a wall-type computing device |
US8682973B2 (en) | 2011-10-05 | 2014-03-25 | Microsoft Corporation | Multi-user and multi-device collaboration |
US9996241B2 (en) | 2011-10-11 | 2018-06-12 | Microsoft Technology Licensing, Llc | Interactive visualization of multiple software functionality content items |
US10198485B2 (en) | 2011-10-13 | 2019-02-05 | Microsoft Technology Licensing, Llc | Authoring of data visualizations and maps |
US20140025691A1 (en) * | 2012-07-20 | 2014-01-23 | Adobe Systems Inc. | Method and apparatus for dynamic filtering of an object graph in a content repository |
US9436661B2 (en) * | 2014-01-31 | 2016-09-06 | Dayco Ip Holdings, Llc | System and method for generating an interactive endless belt routing diagram |
US20170052669A1 (en) * | 2015-08-20 | 2017-02-23 | Sap Se | Navigation and visualization of multi-dimensional data |
CN110046185A (en) * | 2019-04-12 | 2019-07-23 | 成都四方伟业软件股份有限公司 | Chart method for pushing and device |
Family Cites Families (163)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4888690A (en) * | 1985-01-11 | 1989-12-19 | Wang Laboratories, Inc. | Interactive error handling means in database management |
US5010478A (en) | 1986-04-11 | 1991-04-23 | Deran Roger L | Entity-attribute value database system with inverse attribute for selectively relating two different entities |
US4899292A (en) * | 1988-03-02 | 1990-02-06 | Image Storage/Retrieval Systems, Inc. | System for storing and retrieving text and associated graphics |
US5202982A (en) | 1990-03-27 | 1993-04-13 | Sun Microsystems, Inc. | Method and apparatus for the naming of database component files to avoid duplication of files |
CA2048306A1 (en) * | 1990-10-02 | 1992-04-03 | Steven P. Miller | Distributed configuration profile for computing system |
US5649183A (en) | 1992-12-08 | 1997-07-15 | Microsoft Corporation | Method for compressing full text indexes with document identifiers and location offsets |
US5574898A (en) * | 1993-01-08 | 1996-11-12 | Atria Software, Inc. | Dynamic software version auditor which monitors a process to provide a list of objects that are accessed |
US5528550A (en) | 1993-05-28 | 1996-06-18 | Texas Instruments Incorporated | Apparatus, systems and methods for implementing memory embedded search arithmetic logic unit |
US5528549A (en) | 1993-05-28 | 1996-06-18 | Texas Instruments Incorporated | Apparatus, systems and methods for distributed signal processing |
US5544051A (en) | 1993-09-17 | 1996-08-06 | Digital Equipment Corporation | Document management system using multiple threaded processes and having asynchronous repository responses and no busy cursor |
US5560005A (en) * | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US6216138B1 (en) * | 1994-04-22 | 2001-04-10 | Brooks Automation Inc. | Computer interface system for automatically generating graphical representations of computer operations linked together according to functional relationships |
US6029195A (en) | 1994-11-29 | 2000-02-22 | Herz; Frederick S. M. | System for customized electronic identification of desirable objects |
US5664109A (en) | 1995-06-07 | 1997-09-02 | E-Systems, Inc. | Method for extracting pre-defined data items from medical service records generated by health care providers |
US5724571A (en) | 1995-07-07 | 1998-03-03 | Sun Microsystems, Inc. | Method and apparatus for generating query responses in a computer-based document retrieval system |
US5963940A (en) | 1995-08-16 | 1999-10-05 | Syracuse University | Natural language information retrieval system and method |
US6026388A (en) | 1995-08-16 | 2000-02-15 | Textwise, Llc | User interface and other enhancements for natural language information retrieval system and method |
US6006221A (en) | 1995-08-16 | 1999-12-21 | Syracuse University | Multilingual document retrieval system and method using semantic vector matching |
US5815415A (en) | 1996-01-19 | 1998-09-29 | Bentley Systems, Incorporated | Computer system for portable persistent modeling |
US6076088A (en) | 1996-02-09 | 2000-06-13 | Paik; Woojin | Information extraction system and method using concept relation concept (CRC) triples |
US5938717A (en) | 1996-03-04 | 1999-08-17 | Laser Technology, Inc. | Speed detection and image capture system for moving vehicles |
US5778378A (en) * | 1996-04-30 | 1998-07-07 | International Business Machines Corporation | Object oriented information retrieval framework mechanism |
US6014661A (en) * | 1996-05-06 | 2000-01-11 | Ivee Development Ab | System and method for automatic analysis of data bases and for user-controlled dynamic querying |
US6101515A (en) | 1996-05-31 | 2000-08-08 | Oracle Corporation | Learning system for classification of terminology |
US5870739A (en) | 1996-09-20 | 1999-02-09 | Novell, Inc. | Hybrid query apparatus and method |
JP3099756B2 (en) | 1996-10-31 | 2000-10-16 | 富士ゼロックス株式会社 | Document processing device, word extraction device, and word extraction method |
US6480194B1 (en) | 1996-11-12 | 2002-11-12 | Silicon Graphics, Inc. | Computer-related method, system, and program product for controlling data visualization in external dimension(s) |
US6498921B1 (en) | 1999-09-01 | 2002-12-24 | Chi Fai Ho | Method and system to answer a natural-language question |
US5966126A (en) * | 1996-12-23 | 1999-10-12 | Szabo; Andrew J. | Graphic user interface for database system |
US5946692A (en) | 1997-05-08 | 1999-08-31 | At & T Corp | Compressed representation of a data base that permits AD HOC querying |
US6038560A (en) | 1997-05-21 | 2000-03-14 | Oracle Corporation | Concept knowledge base search and retrieval system |
CA2242158C (en) | 1997-07-01 | 2004-06-01 | Hitachi, Ltd. | Method and apparatus for searching and displaying structured document |
US5987448A (en) | 1997-07-25 | 1999-11-16 | Claritech Corporation | Methodology for displaying search results using character recognition |
US6188403B1 (en) * | 1997-11-21 | 2001-02-13 | Portola Dimensional Systems, Inc. | User-friendly graphics generator using direct manipulation |
US6105030A (en) | 1998-02-27 | 2000-08-15 | Oracle Corporation | Method and apparatus for copying data that resides in a database |
US6643624B2 (en) | 1998-03-09 | 2003-11-04 | Yan Philippe | Method and system for integrating transaction mechanisms over multiple internet sites |
US6173287B1 (en) | 1998-03-11 | 2001-01-09 | Digital Equipment Corporation | Technique for ranking multimedia annotations of interest |
JPH11265400A (en) | 1998-03-13 | 1999-09-28 | Omron Corp | Information processor, its method, network system, and recording medium |
US6327574B1 (en) * | 1998-07-07 | 2001-12-04 | Encirq Corporation | Hierarchical models of consumer attributes for targeting content in a privacy-preserving manner |
US6192357B1 (en) | 1998-11-03 | 2001-02-20 | Platinum Technology, Inc. | Method and apparatus for optimizing query generation by selectively utilizing attributes or key values |
US6529900B1 (en) | 1999-01-14 | 2003-03-04 | International Business Machines Corporation | Method and apparatus for data visualization |
US6377943B1 (en) * | 1999-01-20 | 2002-04-23 | Oracle Corp. | Initial ordering of tables for database queries |
GB9903451D0 (en) | 1999-02-16 | 1999-04-07 | Hewlett Packard Co | Similarity searching for documents |
US6584464B1 (en) | 1999-03-19 | 2003-06-24 | Ask Jeeves, Inc. | Grammar template query system |
US6263328B1 (en) * | 1999-04-09 | 2001-07-17 | International Business Machines Corporation | Object oriented query model and process for complex heterogeneous database queries |
US20030195872A1 (en) | 1999-04-12 | 2003-10-16 | Paul Senn | Web-based information content analyzer and information dimension dictionary |
US6304864B1 (en) | 1999-04-20 | 2001-10-16 | Textwise Llc | System for retrieving multimedia information from the internet using multiple evolving intelligent agents |
US6629097B1 (en) | 1999-04-28 | 2003-09-30 | Douglas K. Keith | Displaying implicit associations among items in loosely-structured data sets |
US6249784B1 (en) | 1999-05-19 | 2001-06-19 | Nanogen, Inc. | System and method for searching and processing databases comprising named annotated text strings |
US6721713B1 (en) * | 1999-05-27 | 2004-04-13 | Andersen Consulting Llp | Business alliance identification in a web architecture framework |
US6885990B1 (en) | 1999-05-31 | 2005-04-26 | Nippon Telegraph And Telephone Company | Speech recognition based on interactive information retrieval scheme using dialogue control to reduce user stress |
US6873982B1 (en) | 1999-07-16 | 2005-03-29 | International Business Machines Corporation | Ordering of database search results based on user feedback |
US6341306B1 (en) | 1999-08-13 | 2002-01-22 | Atomica Corporation | Web-based information retrieval responsive to displayed word identified by a text-grabbing algorithm |
CA2281331A1 (en) * | 1999-09-03 | 2001-03-03 | Cognos Incorporated | Database management system |
US6976243B2 (en) | 1999-10-05 | 2005-12-13 | Borland Software Coporation | Method and system for developing source code and displaying linked elements found within the source code |
US6105020A (en) | 1999-10-11 | 2000-08-15 | International Business Machines Corporation | System and method for identifying and constructing star joins for execution by bitmap ANDing |
US6850896B1 (en) | 1999-10-28 | 2005-02-01 | Market-Touch Corporation | Method and system for managing and providing sales data using world wide web |
US6772150B1 (en) | 1999-12-10 | 2004-08-03 | Amazon.Com, Inc. | Search query refinement using related search phrases |
US7421432B1 (en) | 1999-12-15 | 2008-09-02 | Google Inc. | Hypertext browser assistant |
US6546388B1 (en) | 2000-01-14 | 2003-04-08 | International Business Machines Corporation | Metadata search results ranking system |
US6606659B1 (en) * | 2000-01-28 | 2003-08-12 | Websense, Inc. | System and method for controlling access to internet sites |
US20030120659A1 (en) | 2000-03-20 | 2003-06-26 | Sridhar Mandayam Anandampillai | Systems for developing websites and methods therefor |
US6643641B1 (en) | 2000-04-27 | 2003-11-04 | Russell Snyder | Web search engine with graphic snapshots |
US7325201B2 (en) | 2000-05-18 | 2008-01-29 | Endeca Technologies, Inc. | System and method for manipulating content in a hierarchical data-driven search and navigation system |
US7401131B2 (en) | 2000-05-22 | 2008-07-15 | Verizon Business Global Llc | Method and system for implementing improved containers in a global ecosystem of interrelated services |
US6754677B1 (en) | 2000-05-30 | 2004-06-22 | Outlooksoft Corporation | Method and system for facilitating information exchange |
US6801548B1 (en) | 2000-06-15 | 2004-10-05 | Cisco Technology, Inc. | Channel ordering for communication signals split for matrix switching |
US7328349B2 (en) | 2001-12-14 | 2008-02-05 | Bbn Technologies Corp. | Hash-based systems and methods for detecting, preventing, and tracing network worms and viruses |
US7640489B2 (en) | 2000-08-01 | 2009-12-29 | Sun Microsystems, Inc. | Methods and systems for inputting data into spreadsheet documents |
US7100083B2 (en) | 2000-08-04 | 2006-08-29 | Sun Microsystems, Inc. | Checks for product knowledge management |
US20030217052A1 (en) | 2000-08-24 | 2003-11-20 | Celebros Ltd. | Search engine method and apparatus |
US6968343B2 (en) * | 2000-09-01 | 2005-11-22 | Borland Software Corporation | Methods and systems for integrating process modeling and project planning |
US6832218B1 (en) | 2000-09-22 | 2004-12-14 | International Business Machines Corporation | System and method for associating search results |
US20020065815A1 (en) * | 2000-10-04 | 2002-05-30 | Xcelerix, Inc. | Systems and methods for searching a database |
JP2002157276A (en) | 2000-11-16 | 2002-05-31 | Hitachi Software Eng Co Ltd | Method and system for supporting solution of problem |
US7013308B1 (en) | 2000-11-28 | 2006-03-14 | Semscript Ltd. | Knowledge storage and retrieval system and method |
US6781599B2 (en) * | 2001-01-04 | 2004-08-24 | At&T | System and method for visualizing massive multi-digraphs |
US6920477B2 (en) | 2001-04-06 | 2005-07-19 | President And Fellows Of Harvard College | Distributed, compressed Bloom filter Web cache server |
US7031955B1 (en) | 2001-04-27 | 2006-04-18 | I2 Technologies Us, Inc. | Optimization using a multi-dimensional data model |
US6961723B2 (en) | 2001-05-04 | 2005-11-01 | Sun Microsystems, Inc. | System and method for determining relevancy of query responses in a distributed network search mechanism |
US7398201B2 (en) | 2001-08-14 | 2008-07-08 | Evri Inc. | Method and system for enhanced data searching |
US6938037B2 (en) | 2001-08-31 | 2005-08-30 | Goldman Sachs & Co. | Method and apparatus for data storage and retrieval |
US7403938B2 (en) | 2001-09-24 | 2008-07-22 | Iac Search & Media, Inc. | Natural language query processing |
US6826572B2 (en) | 2001-11-13 | 2004-11-30 | Overture Services, Inc. | System and method allowing advertisers to manage search listings in a pay for placement search system using grouping |
JP3931214B2 (en) * | 2001-12-17 | 2007-06-13 | 日本アイ・ビー・エム株式会社 | Data analysis apparatus and program |
US6988018B2 (en) * | 2001-12-26 | 2006-01-17 | Eames John D | System and method for analyzing controlling forming sections of a paper machine in operation |
US20030154071A1 (en) * | 2002-02-11 | 2003-08-14 | Shreve Gregory M. | Process for the document management and computer-assisted translation of documents utilizing document corpora constructed by intelligent agents |
US7343365B2 (en) * | 2002-02-20 | 2008-03-11 | Microsoft Corporation | Computer system architecture for automatic context associations |
US6928436B2 (en) | 2002-02-28 | 2005-08-09 | Ilog Sa | Interactive generation of graphical visualizations of large data structures |
US7424438B2 (en) | 2002-03-19 | 2008-09-09 | Marc Vianello | Apparatus and methods for providing career and employment services |
US7043521B2 (en) | 2002-03-21 | 2006-05-09 | Rockwell Electronic Commerce Technologies, Llc | Search agent for searching the internet |
JP3896014B2 (en) | 2002-03-22 | 2007-03-22 | 株式会社東芝 | Information collection system, information collection method, and program causing computer to collect information |
US20040030731A1 (en) | 2002-04-03 | 2004-02-12 | Liviu Iftode | System and method for accessing files in a network |
US6928431B2 (en) | 2002-04-25 | 2005-08-09 | International Business Machines Corporation | Dynamic end user specific customization of an application's physical data layer through a data repository abstraction layer |
US20030208665A1 (en) | 2002-05-01 | 2003-11-06 | Jih-Kwon Peir | Reducing data speculation penalty with early cache hit/miss prediction |
US8015143B2 (en) | 2002-05-22 | 2011-09-06 | Estes Timothy W | Knowledge discovery agent system and method |
US7379978B2 (en) | 2002-07-19 | 2008-05-27 | Fiserv Incorporated | Electronic item management and archival system and method of operating the same |
US7158983B2 (en) | 2002-09-23 | 2007-01-02 | Battelle Memorial Institute | Text analysis technique |
DE10245900A1 (en) | 2002-09-30 | 2004-04-08 | Neven jun., Hartmut, Prof.Dr. | Image based query system for search engines or databases of mobile telephone, portable computer uses image recognition to access more information about objects in image |
EP1588277A4 (en) | 2002-12-06 | 2007-04-25 | Attensity Corp | Systems and methods for providing a mixed data integration service |
US7181450B2 (en) * | 2002-12-18 | 2007-02-20 | International Business Machines Corporation | Method, system, and program for use of metadata to create multidimensional cubes in a relational database |
US20040122846A1 (en) | 2002-12-19 | 2004-06-24 | Ibm Corporation | Fact verification system |
US7107528B2 (en) | 2002-12-20 | 2006-09-12 | International Business Machines Corporation | Automatic completion of dates |
US7278111B2 (en) | 2002-12-26 | 2007-10-02 | Yahoo! Inc. | Systems and methods for selecting a date or range of dates |
US7146538B2 (en) | 2003-03-28 | 2006-12-05 | Hewlett-Packard Development Company, L.P. | Bus interface module |
US7111025B2 (en) | 2003-04-30 | 2006-09-19 | International Business Machines Corporation | Information retrieval system and method using index ANDing for improving performance |
US7853508B2 (en) * | 2003-05-19 | 2010-12-14 | Serena Software, Inc. | Method and system for object-oriented management of multi-dimensional data |
US7926103B2 (en) | 2003-06-05 | 2011-04-12 | Hewlett-Packard Development Company, L.P. | System and method for preventing replay attacks |
US7836391B2 (en) | 2003-06-10 | 2010-11-16 | Google Inc. | Document search engine including highlighting of confident results |
US8321470B2 (en) | 2003-06-20 | 2012-11-27 | International Business Machines Corporation | Heterogeneous multi-level extendable indexing for general purpose annotation systems |
US20040260714A1 (en) | 2003-06-20 | 2004-12-23 | Avijit Chatterjee | Universal annotation management system |
US9026901B2 (en) * | 2003-06-20 | 2015-05-05 | International Business Machines Corporation | Viewing annotations across multiple applications |
US7162473B2 (en) | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7565425B2 (en) | 2003-07-02 | 2009-07-21 | Amazon Technologies, Inc. | Server architecture and methods for persistently storing and serving event data |
US7814093B2 (en) | 2003-07-25 | 2010-10-12 | Microsoft Corporation | Method and system for building a report for execution against a data store |
US7444515B2 (en) | 2003-08-14 | 2008-10-28 | Washington University | Method and apparatus for detecting predefined signatures in packet payload using Bloom filters |
US7174328B2 (en) | 2003-09-02 | 2007-02-06 | International Business Machines Corp. | Selective path signatures for query processing over a hierarchical tagged data structure |
US7409406B2 (en) | 2003-09-08 | 2008-08-05 | International Business Machines Corporation | Uniform search system and method for selectively sharing distributed access-controlled documents |
US20050057566A1 (en) * | 2003-09-11 | 2005-03-17 | International Business Machines Corporation | Rich graphic visualization generation from abstract data representation |
US7236982B2 (en) | 2003-09-15 | 2007-06-26 | Pic Web Services, Inc. | Computer systems and methods for platform independent presentation design |
US7496560B2 (en) * | 2003-09-23 | 2009-02-24 | Amazon Technologies, Inc. | Personalized searchable library with highlighting capabilities |
KR100533810B1 (en) | 2003-10-16 | 2005-12-07 | 한국전자통신연구원 | Semi-Automatic Construction Method for Knowledge of Encyclopedia Question Answering System |
US7620624B2 (en) | 2003-10-17 | 2009-11-17 | Yahoo! Inc. | Systems and methods for indexing content for fast and scalable retrieval |
US20050083413A1 (en) | 2003-10-20 | 2005-04-21 | Logicalis | Method, system, apparatus, and machine-readable medium for use in connection with a server that uses images or audio for initiating remote function calls |
US20050108630A1 (en) | 2003-11-19 | 2005-05-19 | Wasson Mark D. | Extraction of facts from text |
US20050187898A1 (en) | 2004-02-05 | 2005-08-25 | Nec Laboratories America, Inc. | Data Lookup architecture |
US20050198761A1 (en) | 2004-03-11 | 2005-09-15 | Baskerville Taurris D. | Rear wiper bracket assembly |
US20050216464A1 (en) * | 2004-03-27 | 2005-09-29 | Microsoft Corporation | Automated authoring tool and method to facilitate inclusion of maps and other geographical data into travelogues |
US20050219929A1 (en) | 2004-03-30 | 2005-10-06 | Navas Julio C | Method and apparatus achieving memory and transmission overhead reductions in a content routing network |
US20050268212A1 (en) | 2004-05-28 | 2005-12-01 | Michael Dagel | System, apparatus, and method for desktop-based creation and publication of a periodic community newsletter |
US7685112B2 (en) | 2004-06-17 | 2010-03-23 | The Regents Of The University Of California | Method and apparatus for retrieving and indexing hidden pages |
US8051207B2 (en) | 2004-06-25 | 2011-11-01 | Citrix Systems, Inc. | Inferring server state in s stateless communication protocol |
US7493335B2 (en) * | 2004-07-02 | 2009-02-17 | Graphlogic Inc. | Object process graph relational database interface |
US20060020582A1 (en) | 2004-07-22 | 2006-01-26 | International Business Machines Corporation | Method and system for processing abstract derived entities defined in a data abstraction model |
US20060053175A1 (en) | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for creating, editing, and utilizing one or more rules for multi-relational ontology creation and maintenance |
US20060064429A1 (en) | 2004-09-18 | 2006-03-23 | Chi Yao | Method and apparatus for providing assets reports categorized by attribute |
US7809763B2 (en) * | 2004-10-15 | 2010-10-05 | Oracle International Corporation | Method(s) for updating database object metadata |
US20060085386A1 (en) | 2004-10-19 | 2006-04-20 | Microsoft Corporation | Two pass calculation to optimize formula calculations for a spreadsheet |
US20060149700A1 (en) | 2004-11-11 | 2006-07-06 | Gladish Randolph J | System and method for automatic geospatial web network generation via metadata transformation |
US7822768B2 (en) | 2004-11-23 | 2010-10-26 | International Business Machines Corporation | System and method for automating data normalization using text analytics |
US9137115B2 (en) | 2004-12-06 | 2015-09-15 | Bmc Software, Inc. | System and method for resource reconciliation in an enterprise management system |
US7464090B2 (en) * | 2006-01-27 | 2008-12-09 | Google Inc. | Object categorization for information extraction |
US20060173824A1 (en) * | 2005-02-01 | 2006-08-03 | Metalincs Corporation | Electronic communication analysis and visualization |
US7917299B2 (en) | 2005-03-03 | 2011-03-29 | Washington University | Method and apparatus for performing similarity searching on a data stream with respect to a query string |
US7953720B1 (en) | 2005-03-31 | 2011-05-31 | Google Inc. | Selecting the best answer to a fact query from among a set of potential answers |
US7587387B2 (en) | 2005-03-31 | 2009-09-08 | Google Inc. | User interface for facts query engine with snippets from information sources that include query terms and answer terms |
US20060248456A1 (en) | 2005-05-02 | 2006-11-02 | Ibm Corporation | Assigning a publication date for at least one electronic document |
US7809722B2 (en) | 2005-05-09 | 2010-10-05 | Like.Com | System and method for enabling search and retrieval from image files based on recognized information |
US20080005064A1 (en) | 2005-06-28 | 2008-01-03 | Yahoo! Inc. | Apparatus and method for content annotation and conditional annotation retrieval in a search context |
CA2928051C (en) | 2005-07-15 | 2018-07-24 | Indxit Systems, Inc. | Systems and methods for data indexing and processing |
US20070022085A1 (en) | 2005-07-22 | 2007-01-25 | Parashuram Kulkarni | Techniques for unsupervised web content discovery and automated query generation for crawling the hidden web |
US8666928B2 (en) | 2005-08-01 | 2014-03-04 | Evi Technologies Limited | Knowledge repository |
US20070073663A1 (en) | 2005-09-26 | 2007-03-29 | Bea Systems, Inc. | System and method for providing full-text searching of managed content |
US8046557B2 (en) | 2005-12-05 | 2011-10-25 | Intelitrac Inc. | Apparatus and method for on-demand in-memory database management platform |
US7555471B2 (en) * | 2006-01-27 | 2009-06-30 | Google Inc. | Data object visualization |
US20070179965A1 (en) * | 2006-01-27 | 2007-08-02 | Hogue Andrew W | Designating data objects for analysis |
US8024329B1 (en) | 2006-06-01 | 2011-09-20 | Monster Worldwide, Inc. | Using inverted indexes for contextual personalized information retrieval |
US9176984B2 (en) | 2006-07-31 | 2015-11-03 | Ricoh Co., Ltd | Mixed media reality retrieval of differentially-weighted links |
US8510321B2 (en) | 2006-08-03 | 2013-08-13 | International Business Machines Corporation | Information retrieval from relational databases using semantic queries |
US7698336B2 (en) | 2006-10-26 | 2010-04-13 | Microsoft Corporation | Associating geographic-related information with objects |
KR100865973B1 (en) | 2007-02-08 | 2008-10-30 | (주)올라웍스 | Method for searching certain person and method and system for generating copyright report for the certain person |
US9058370B2 (en) | 2007-02-27 | 2015-06-16 | International Business Machines Corporation | Method, system and program product for defining imports into and exports out from a database system using spread sheets by use of a control language |
US20080267504A1 (en) | 2007-04-24 | 2008-10-30 | Nokia Corporation | Method, device and computer program product for integrating code-based and optical character recognition technologies into a mobile visual search |
-
2006
- 2006-01-27 US US11/342,277 patent/US20070185870A1/en not_active Abandoned
-
2014
- 2014-03-24 US US14/223,959 patent/US9530229B2/en active Active
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11487801B2 (en) | 2018-11-29 | 2022-11-01 | International Business Machines Corporation | Dynamic data visualization from factual statements in text |
US11455361B2 (en) * | 2019-08-09 | 2022-09-27 | Microsoft Technology Licensing, Llc | Query entity-experience classification |
Also Published As
Publication number | Publication date |
---|---|
US9530229B2 (en) | 2016-12-27 |
US20070185870A1 (en) | 2007-08-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7555471B2 (en) | Data object visualization | |
US9530229B2 (en) | Data object visualization using graphs | |
US7925676B2 (en) | Data object visualization using maps | |
US20070179965A1 (en) | Designating data objects for analysis | |
US7778952B2 (en) | Displaying facts on a linear graph | |
US10223406B2 (en) | Entity normalization via name normalization | |
US8055674B2 (en) | Annotation framework | |
US9558186B2 (en) | Unsupervised extraction of facts | |
US8954426B2 (en) | Query language | |
US7774328B2 (en) | Browseable fact repository | |
US8280878B2 (en) | Method and apparatus for real time text analysis and text navigation | |
US7454398B2 (en) | Support for object search | |
US20070198597A1 (en) | Attribute entropy as a signal in object normalization | |
US20070198481A1 (en) | Automatic object reference identification and linking in a browseable fact repository | |
US7590628B2 (en) | Determining document subject by using title and anchor text of related documents | |
US7991797B2 (en) | ID persistence through normalization | |
JP5187313B2 (en) | Document importance calculation system, document importance calculation method, and program | |
US8954412B1 (en) | Corroborating facts in electronic documents | |
US8065605B2 (en) | Indexing structured documents | |
US11151168B2 (en) | Hierarchical search folders for a document repository | |
Scime | Web page extension of data warehouses |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HOGUE, ANDREW W.;VESPE, DAVID J.;KEHLENBECK, ALEXANDER;AND OTHERS;SIGNING DATES FROM 20060313 TO 20060328;REEL/FRAME:040203/0863 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044097/0658Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |