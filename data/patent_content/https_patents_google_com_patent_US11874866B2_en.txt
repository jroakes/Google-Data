US11874866B2 - Multiscale quantization for fast similarity search - Google Patents
Multiscale quantization for fast similarity search Download PDFInfo
- Publication number
- US11874866B2 US11874866B2 US18/081,376 US202218081376A US11874866B2 US 11874866 B2 US11874866 B2 US 11874866B2 US 202218081376 A US202218081376 A US 202218081376A US 11874866 B2 US11874866 B2 US 11874866B2
- Authority
- US
- United States
- Prior art keywords
- rotated
- quantization
- residual
- residuals
- dataset
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013139 quantization Methods 0.000 title claims abstract description 229
- 239000013598 vector Substances 0.000 claims abstract description 86
- 238000000034 method Methods 0.000 claims abstract description 72
- 239000011159 matrix material Substances 0.000 claims abstract description 24
- 239000000047 product Substances 0.000 description 71
- 238000012549 training Methods 0.000 description 42
- 238000005192 partition Methods 0.000 description 29
- 238000013459 approach Methods 0.000 description 9
- 238000010586 diagram Methods 0.000 description 8
- 238000005457 optimization Methods 0.000 description 8
- 230000006872 improvement Effects 0.000 description 7
- 230000009467 reduction Effects 0.000 description 7
- 239000000654 additive Substances 0.000 description 6
- 230000000996 additive effect Effects 0.000 description 6
- 230000008901 benefit Effects 0.000 description 6
- 230000000694 effects Effects 0.000 description 6
- 230000009466 transformation Effects 0.000 description 5
- 238000002474 experimental method Methods 0.000 description 4
- 230000006870 function Effects 0.000 description 4
- 238000004891 communication Methods 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 239000000203 mixture Substances 0.000 description 3
- 238000012545 processing Methods 0.000 description 3
- 101100153586 Caenorhabditis elegans top-1 gene Proteins 0.000 description 2
- 101100370075 Mus musculus Top1 gene Proteins 0.000 description 2
- 238000002679 ablation Methods 0.000 description 2
- 230000004075 alteration Effects 0.000 description 2
- 230000008569 process Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- ORILYTVJVMAKLC-UHFFFAOYSA-N Adamantane Natural products C1C(C2)CC3CC1CC2C3 ORILYTVJVMAKLC-UHFFFAOYSA-N 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 238000001994 activation Methods 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 239000006227 byproduct Substances 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000012512 characterization method Methods 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 230000007812 deficiency Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 238000009472 formulation Methods 0.000 description 1
- 201000011243 gastrointestinal stromal tumor Diseases 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000007781 pre-processing Methods 0.000 description 1
- 238000013138 pruning Methods 0.000 description 1
- 238000011160 research Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000005070 sampling Methods 0.000 description 1
- 238000000638 solvent extraction Methods 0.000 description 1
- 238000000844 transformation Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
- G06F16/3347—Query execution using vector based model
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/313—Selection or weighting of terms for indexing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/319—Inverted lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
Definitions
- the present disclosure relates generally to machine learning. More particularly, the present disclosure relates to performing multiscale quantization on a dataset using a multiscale quantization model, and training the multiscale quantization model with machine learning.
- VQ Vector quantization
- VQ ( x ; C ) arg min c ⁇ ⁇ C j ⁇ ⁇ x - c ⁇ 2
- the multiscale quantization may be of a first dataset and may be to generate an encoding of the first dataset.
- the method includes performing a vector quantization of a first dataset.
- the method includes generating a residual dataset based at least in part on a result of the vector quantization.
- the method includes applying a rotation matrix to the residual dataset to generate a rotated residual dataset that includes a plurality of rotated residuals.
- the method includes performing reparameterization of each rotated residual in the rotated residual dataset into a direction component and a scale component.
- the method includes performing product quantization of the direction components of the plurality of rotated residuals, and performing scalar quantization of the scale components of the plurality of rotated residuals.
- the encoding of the first dataset may comprise searchable data representing the first data set.
- the method may comprise performing, by the computing system, an approximate nearest neighbor search for a query relative to at least some of the quantized rotated residuals.
- Data representing the query may be received.
- a user may input a data item as a query.
- the data item may be of a corresponding type to data items of the first dataset such that the user input data may be used to perform a search for one or more data items of the first dataset that correspond to the input data item, for example one or more data items that are most similar to the query data item.
- Performing, by the computing system, the approximate nearest neighbor search may comprise performing, by the computing system, an asymmetric search, and wherein performing, by the computing system, an asymmetric search comprises performing, by the computing system, scalar multiplication of a product quantizer codebook once per scalar quantizer.
- the multiscale quantization may therefore generate an encoding of the first dataset that can be more readily searched than the unencoded first dataset.
- the first dataset may comprise a plurality of first data items.
- Each first data item may be associated with data selected from the group consisting of: an image, a text portion, a web document, audio, and video.
- each data item may have an associated type selected from the group consisting of: an image, a text portion, a web document, audio, and video.
- each data item in the first dataset has the same type and the first dataset may therefore represent a plurality of data items of a particular type for which it is desirable to perform a search.
- Performing, by the computing system, reparameterization of each rotated residual comprises unit normalizing, by the computing system, each rotated residual to form the direction component for such rotated residual.
- Unit normalizing, by the computing system, each rotated residual to form the direction component for such rotated residual may comprise dividing, by the computing system, each rotated residual by its norm, and wherein the scale component for each rotated residual comprises its norm.
- the product quantization may be given by a concatenation of codewords obtained by dividing the normalized residuals into one or more subvectors that are independently quantized by a plurality of vector quantizers.
- the quantized rotated residuals may be organized into blocks such that within a block all rotated residuals have the same quantized norm.
- a diameter of the residual dataset may be smaller than a diameter of the first dataset.
- the vector quantization of the first dataset may be based at least in part on a vector quantization codebook.
- the product quantization of the direction component may be based at least in part on a product quantization codebook.
- the scalar quantization may be based at least in part on a scalar quantization codebook.
- the method includes obtaining a quantization model that includes a vector quantizer, a rotation matrix, a product quantizer that employs one or more product quantization codebooks, and a scalar quantizer that employs a scalar quantizer codebook.
- the method includes determining a gradient of an objective function for one or more examples.
- the method includes jointly training the vector quantizer, the rotation matrix, the product quantizer, and the scalar quantizer based at least in part on the gradient of the objective function.
- the product quantization codebook may be learned on unit-normalized residuals of a vector quantization.
- the method may further comprise initializing a vector quantization codebook using random samples from a dataset; and initializing the one or more product quantization codebooks using residuals of a vector quantized and rotated set of independent samples.
- Jointly training, by the computing system, the vector quantizer, the rotation matrix, the product quantizer, and the scalar quantizer based at least in part on the gradient of the objective function comprises: performing a number of first training iterations to train the vector quantizer; and after performing the number of first training iterations, performing a number of second training iterations to jointly train vector quantizer, the rotation matrix, the product quantizer, and the scalar quantizer.
- the computer system includes one or more processors, and one or more non-transitory computer-readable media that, when executed by the one or more processors, cause the computer system to perform operations.
- the operations include obtaining a dataset that includes a plurality of datapoints.
- the operations include performing reparameterization of each datapoint in the dataset into a direction component and a scale component.
- the operations include performing product quantization of the direction components of the datapoints, and performing scalar quantization of the scale components of the datapoints.
- Obtaining the dataset that includes the plurality of datapoints may comprise: obtaining an original dataset; performing a vector quantization of the original dataset; generating a residual dataset based at least in part on a result of the vector quantization of the original dataset; applying, by the computing system, a rotation matrix to the residual dataset to generate a rotated residual dataset that includes a plurality of rotated residuals; and performing reparameterization of each datapoint in the dataset comprises performing reparameterization of each rotated residual included in the rotated residual dataset.
- the operations may further comprise performing an approximate nearest neighbor search for a query relative to the at least some of the quantized datapoints.
- aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices. It will be appreciated that aspects may be combined such that features described in the context of one aspect may be implemented in the context of a further aspect.
- the data may be associated with real-world data such as an image, a text portion, a web document, audio, and video.
- FIG. 1 depicts a block diagram of an example computing system, according to example embodiments of the present disclosure.
- FIG. 2 depicts an example workflow, according to example embodiments of the present disclosure.
- FIG. 3 depicts an example multiscale quantization model, according to example embodiments of the present disclosure.
- FIG. 4 A depicts how PQ quantization error on a synthetic dataset X ⁇ d ⁇ N grows as the standard deviation of data point norms ⁇ ( ⁇ x ⁇ 2 ) increases, where the mean of the dataset is zero
- FIG. 4 B depicts the standard deviation of vector (coarse) quantization residual norms on the realistic dataset of SIFT-1M, when the residual vectors are scaled so that the average squared norms is fixed to be
- FIG. 5 A depicts a break down by contribution to MSE reduction from each component in a multiscale quantization model on SIFT-1M and DEEP-10M datasets with different bitrates, where the baseline is the original IVFADC setup with no rotation or residual norm quantization, according to example embodiments of the present disclosure.
- FIG. 5 B depicts time spent per query by different distance computation methods on linear search of a database of size
- 2 7 , 2 8 , 2 9 , . . . 2 16 under 128 bits, where lower curves indicate faster search time, according to example embodiments of the present disclosure.
- FIG. 8 depicts a flow diagram of an example method for multiscale quantization, in accordance with some implementations of the present disclosure
- FIG. 9 depicts a flow diagram of an example method for performing a fast similarity search using a multiscale quantization model, in accordance with some implementations of the present disclosure.
- FIG. 10 depicts a flow diagram of an example method for training a multiscale quantization model, in accordance with some implementations of the present disclosure.
- the present disclosure is directed to systems and methods for performing multiscale quantization on a dataset (e.g., large, high-dimensional datasets).
- Quantization methods e.g., product quantization
- Quantization methods can be used for fast similarity search on large, high-dimensional datasets, but perform poorly when there is variance in a norm of the datapoints in the dataset. This is a common scenario for real-world datasets, especially when performing product quantization of residuals obtained from coarse vector quantization.
- the present disclosure enables a multiscale quantization model that can learn a separate scalar quantizer of the residual norms.
- the parameters of the multiscale quantization model can be learned jointly in a stochastic gradient descent framework. In this way, an overall quantization error can be minimized, and substantial improvements in recall can be realized.
- the multiscale quantization may therefore generate an encoding of a dataset that can be searched in an improved manner relative to the original dataset.
- the present disclosure provides a complete end-to-end training algorithm to learn coarse quantizers, a rotation matrix, and product quantization codebooks, together with scalar quantizers to capture coarse quantization residual norms.
- coarse quantizers can be included as part of the optimization
- stochastic gradient descent can be used to perform end-to-end training, which leads to a significant improvement in quantization error compared to previous methods using alternating optimization.
- the original vector space is decomposed into a Cartesian product of lower dimensional subspaces, and vector quantization is performed in each subspace independently.
- product quantization works best when the variance in each subspace is balanced.
- a rotation matrix is often applied to the data prior to performing quantization. This rotation can be either random or learned.
- the quality of the product quantization codebook also degenerates when there is variance in the norms of the datapoints being encoded—even when the variance is relatively moderate.
- one or more synthetic datasets can be generated such that: (1) the dataset mean is zero; (2) datapoint direction is chosen uniformly at random; and (3) the average squared norm of the datapoints is fixed.
- FIG. 4 A shows a plot of quantization error (MSE) of product quantization against the standard deviation of the norms of the datapoints in the synthetic datasets. As shown in FIG. 4 A , quantization error increases with the variance of the datapoint norms.
- FIG. 4 B in realistic settings, the residuals of a coarse vector quantization of the data also have highly varying norms.
- the formulation of product quantization can be modified by separately scalar quantizing datapoint norms, and then unit-normalizing the datapoints before applying product quantization.
- this simply requires a scalar multiplication of the PQ codebook once per scalar quantizer, which has negligible computational cost in practice.
- a coarse quantizer learns a vector quantization of the data points via clustering, using the cluster indices to form an inverted index storing all data points corresponding to a given cluster index consecutively.
- a data point is encoded via PQ codes associated with the residual (offset) of the data point from its closet cluster center. This design enables non-exhaustive search by searching only a subset of the M clusters/partitions in the inverted index.
- previous works have learned coarse quantizers as a separate preprocessing step, without training the coarse quantizers jointly with the PQ codebooks.
- a rotation matrix can be applied to reduce the intra-subspace statistical dependence.
- researchers have proposed multiple ways to estimate such a rotation matrix (e.g., ITQ style alternating quantization, Optimized PQ, Locally Optimized PQ, etc.). While learning such orthogonal transformations is a good strategy in general, it does not change the norm of data points. Thus, it still suffers from norm variance.
- additive codebooks instead of subspace codebooks. This includes additive quantization, composite quantization, and stacked quantization. Since they do not work in subspaces, additive codebooks do not require rotation, although they are harder to learn and more expensive to encode. Empirically, such additive codebooks are more expressive, and outperform OPQ at lower bitrates. However, OPQ achieves similar performance at higher bitrates. Since additive codebooks do not address the variance of data point norms, the proposed multiscale approach could also be applied to additive codebooks.
- Tree based methods, and locality sensitive hashing style algorithms focus on non-exhaustive search by partitioning the search space. In engineering practice, these often lead to random memory accesses, and are often combined with exhaustive methods in ways similar to IVFADC.
- Binary embedding based approaches focus on learning short binary codes, and can be searched efficiently in Hamming space. However, there is typically a large gap between the precision of distance computations in Hamming vs. product codes under the same bitrate, and ADC can be computed with similar speed.
- the present disclosure provides a complete end-to-end training algorithm to learn coarse quantizers, a rotation matrix, and product quantization codebooks, together with scalar quantizers to capture coarse quantization residual norms.
- scalar quantizers to capture coarse quantization residual norms.
- stochastic gradient descent can be used to perform end-to-end training, which leads to a significant improvement in quantization error compared to previous methods using alternating optimization.
- aspects of the present disclosure focus on minimizing a quantization error ⁇ x ⁇ tilde over (x) ⁇ , where x is a datapoint and ⁇ tilde over (x) ⁇ is its quantized approximation, as a proxy for minimizing query-database distance approximation error
- quantization techniques can take a hierarchical approach. For example, one or more “coarse” quantization stages (VQ) can be followed by product quantization (PQ) of the vector quantization residuals. A learned rotation can be applied to the residuals prior to product quantization to further reduce quantization error.
- the multiscale quantization model and associated techniques can include extending the ‘VQ-PQ’ strategy by explicitly representing the norm of VQ residuals, learning a PQ codebook only on the unit-normalized rotated VQ residuals, and separately scalar quantizing the residual norms. In this way, the variance of datapoint norms as an additional source of quantization error when performing product quantization can be addressed.
- the multiscale quantization model can include: (1) vector quantization of the dataset; (2) learned rotation of the vector quantization residuals; (3) reparameterization of the rotated residuals into direction and scale components; (4) product quantization of the direction component; and (5) scalar quantization of the scale component.
- C ⁇ d ⁇ m is a vector quantization codebook with m codewords
- C j is its j-th codeword (i.e.
- ⁇ SQ returns the nearest scalar quantizer from a scalar quantization codebook w ⁇ p with p codewords (equivalent to one-dimensional vector quantization); and the matrix R ⁇ d ⁇ d is a learned rotation, applied to the residuals of vector quantization.
- the product quantizer ⁇ PQ (r x ) is given by
- S (k) ⁇ d (k) ⁇ l is the vector quantization codebook for the k-th subspace (with l codewords). Frequently, d (k) , the dimension of the k-th subvector, is simply
- the quantized, normalized residuals are represented by the K indices of
- This representation has an overall bitrate of K log 2 l, where l is the number of product quantizers in each subspace, and K is the number of subspaces.
- the residual norms are maintained by organizing the residuals associated with a VQ partition into blocks, where within a block all residuals have the same quantized norm. The blocks are ordered by quantized norm, and thus only the indices of block boundaries must be maintained.
- the total storage cost is thus O(mp), where m is number of vector quantizers and p is the number of scalar quantizers. For example, if p is set to 8, the total storage cost O(mp) has a negligible effect on recall compared with using unquantized norms.
- the multiscale quantization model of the present disclosure can enable a nearest neighbor search to be carried out efficiently.
- Performing the search can include computing the squared l 2 distance of query q with each codeword in the vector quantization codebook C, and searching further within the nearest VQ partition.
- ⁇ VQ (x) c q * ⁇
- the approximate squared l 2 distance between the query and database points in P q * are computed using a lookup table.
- the final prediction can be made by taking the database point with the lowest approximate distance, e.g.
- x q pred arg min x ⁇ P q * ⁇ ( ⁇ q - c q * ⁇ 2 - 2 [ R ⁇ ( q - c q * ) ] ⁇ [ ⁇ S ⁇ Q ( ⁇ r x ⁇ ) ⁇ ⁇ P ⁇ Q ( r ⁇ x ) ] + ⁇ ⁇ S ⁇ Q ( ⁇ r x ⁇ ) ⁇ ⁇ P ⁇ Q ( r ⁇ x ) ⁇ 2 ) .
- Performing the search can then include computing:
- performing the search can include using soft vector quantization and searching the t vector quantization partitions with the lowest ⁇ q ⁇ C j ⁇ 2 , instead of searching only one vector quantization partition.
- the final complexity of the search can be
- all of the datapoints with the same quantized residual norm can be stored in consecutive blocks.
- performing the search can include creating a new lookup table at the beginning of a new block, by combining weight independent lookup tables of ⁇ 2 q (k) ⁇ S j (k) and ⁇ S j (k) ⁇ 2 (weighted by w x and w x 2 , respectively) using hardware optimized fused multiply-add instructions.
- Training the multiscale quantization model of the present disclosure can include using a stochastic gradient descent to jointly train the parameters of the model (e.g., codebooks, orthogonal transformation, and residual norm quantizers).
- the transformation can be parameterized via the Cayley characterization of orthogonal matrices:
- equation (3) can be differentiable with respect to the
- the gradient can be computed by performing d ⁇ d matrix inversions at each iteration.
- the number of parameters of A can be restricted to trade off capacity and computational cost, when training on high-dimensional datasets.
- Training the model can include initializing the codebook for vector quantization using random samples from the dataset, and initializing the codebook for product quantization using the residuals (after vector quantization and rotation) of a set of independent samples.
- the vector quantization error can be optimized for several epochs before initializing the product codes and doing full joint training.
- the parameters of the skew-symmetric matrix A can be initialized by sampling from (0, 1e ⁇ 3).
- Training the model can include fixing all optimization parameters for all datasets. In some implementations, more extensive per-dataset turning can be performed to improve results.
- the Adam optimization algorithm can be used with suggested parameters, minibatch sizes of 2000, and a learning rate of 1e ⁇ 4 during joint training. In some implementations, the learning rate can be set to 1e ⁇ 3 when training only the vector quantizers.
- Training the model can include jointly optimizing the assignment of PQ codes and the scalar quantization of residual norms for all datapoints within a VQ partition. In this way, the model can learn the quantizer for residual norms and capture their local distribution within the VQ partition. Leaving the PQ codebook and rotation fixed, the training can include alternating between the following two steps until convergence:
- Systems and methods described herein provide a number of technical effects and benefits.
- Systems and methods for enabling the multiscale quantization model of the present disclosure can have a technical effect of minimizing quantization error and substantially improving the recall of a fast similarity search using the model.
- To scale quantization based search techniques to massive datasets one strategy is to first vector quantize the input vectors in the original space (coarse quantization), and then apply product quantization on the vector quantization residuals.
- VQ-PQ’ style approach the norms of the residuals exhibit significant variance. Accordingly, the multiscale quantization model of the present disclosure can provide significant gains for massive search even when the original data is fully normalized.
- the vector quantization can thus be used to obtain a “residual dataset” with much smaller diameter, yielding significant reductions in quantization error when quantized with only a product code.
- systems and methods for enabling complete end-to-end training to learn the parameters of the multiscale quantization model can have a technical effect of significantly reducing quantization error, as compared to previous training methods that use alternating optimization. For example, by learning a rotation of the VQ residuals, the variance within each PQ subspace can be significantly reduced for many real world datasets such as image datasets, text, web documents, audio, or other forms of data or data structures, yielding substantially lower quantization error and correspondingly higher recall when performing a fast similarity search.
- the systems and methods of the present disclosure also provide an improvement to computing technology, such as data matching and retrieval computing technology.
- computing technology such as data matching and retrieval computing technology.
- the systems and methods herein enables nearest neighbor search to be carried out efficiently, and with substantial improvements in recall.
- FIG. 1 A depicts a block diagram of an example computing system 100 according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more multiscale quantization models 120 .
- the multiscale quantization models 120 can be or otherwise include multiple quantizers of different types.
- the multiscale quantization models 120 can include a vector quantizer, product quantizer, and scalar quantizer.
- the vector quantizer can quantize a dataset and determine vector quantization residuals. The residuals can be rotated and reparameterized into a direction component and a scale component.
- the product quantizer can quantize the direction component, and the scalar quantizer can quantize the scale component.
- the product quantizer and the scalar quantizer can be jointly trained via end to end training process.
- the one or more multiscale quantization models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- one or more multiscale quantization models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the multiscale quantization models 140 can be implemented by the server computing system 140 as a portion of a web service (e.g., a similarity search service).
- a web service e.g., a similarity search service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input components 122 that receive user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, a traditional mouse, a camera, a microphone, or other components by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise includes one or more machine-learned multiscale quantization models 140 .
- the multiscale quantization models 140 can be or otherwise include multiple quantizers of different types.
- the multiscale quantization models 140 can include a vector quantizer, product quantizer, and scalar quantizer.
- the vector quantizer can quantize a dataset and determine vector quantization residuals. The residuals can be rotated and reparameterized into a direction component and a scale component.
- the product quantizer can quantize the direction component, and the scalar quantizer can quantize the scale component.
- the product quantizer and the scalar quantizer can be jointly trained via end-to-end training.
- the multiscale quantization models 140 can include other forms of machine-learned models. Example multiscale quantization models 140 and training schemes therefore are discussed with reference to FIGS. 2 - 5 B .
- the server computing system 130 can include a search tool 142 that can perform a search based on a quantized dataset and a query. For example, given a query q, the search tool 142 can perform a fast similarity search on a quantized dataset, based on the query, and determine one or more search result(s).
- the server computing system 130 can train the multiscale quantization models 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 / 140 using various training or learning techniques, such as, for example, a stochastic gradient descent framework to minimize the overall quantization error.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train a multiscale quantization model 120 / 140 based on a set of training data 162 .
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory, and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 1 illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the multiscale quantization models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the multiscale quantization models 120 based on user-specific data.
- FIG. 2 depicts an example workflow according to example embodiments of the present disclosure.
- FIG. 2 illustrates a multiscale quantization model 202 that is configured to provide a quantized dataset 206 .
- the multiscale quantization model 202 can receive an input dataset 204 and, in response, provide a quantized dataset 206 that encodes information descriptive of the input dataset 204 .
- an image 206 is provided as an example type of data that can be quantized using the multiscale quantization model 202
- other data types can be quantized as well, including, for example, text, web documents, audio, or other forms of data or data structures.
- FIG. 3 depicts an example multiscale quantization model 300 according to example embodiments of the present disclosure.
- FIG. 3 depicts one example model structure. Other structures can be used in addition or alternatively to the structure illustrated in FIG. 3 .
- the multiscale quantization model 300 includes a vector quantizer 302 , a rotation matrix 304 , a reparameterizer 306 , a product quantizer 308 , a scalar quantizer 309 , and a scaler 310 .
- the vector quantizer 302 can perform vector quantization on the input dataset 204 to generate a residual dataset.
- the rotation matrix 304 can be a learned rotation of the vector quantized residuals in the residual dataset, and the multiscale quantization model 300 can apply the rotation matrix 304 to the residual dataset to generate a rotated residual dataset that includes a plurality of rotated residuals.
- the reparameterizer 306 performs reparameterization of each rotated residual in the rotated residual dataset into a direction component and a scale component.
- the product quantizer 308 performs product quantization of the direction components of the plurality of rotated residuals.
- the scalar quantizer 309 performs scalar quantization of the scale components of the plurality of rotated residuals.
- adding the scalar quantizer 309 further increases the recall when the norms of the residuals have large variability.
- the l 2 error is
- the proposed vector and product quantization is analyzed when the data is generated by a K-subspace mixture model that captures two properties observed in many real-world datasets: samples belong to one of several underlying categories, also referred to as components, and within each component the residuals are generated independently in K subspaces.
- x q * be the sample that minimizes ⁇ q ⁇ x ⁇ 2 .
- x q VQ be the output of the hierarchical nearest neighbor algorithm that first finds the nearest cluster center and then searches within that cluster. If q is generated independently of x, then with high probability it returns an x q VQ that is near-optimal.
- SIFT-1M contains 1 million, 128 dimensional SIFT descriptors extracted from Flickr images.
- DEEP-10M contains 96 PCA components extracted from the final hidden layer activations of GoogLeNet.
- each dataset is indexed with 1024 VQ coarse quantizers.
- quantized residuals from the 8 partitions closest to the query are further searched using ADC to generate the final nearest neighbors.
- FIG. 5 A depicts a plot of the MSE reduction relative to IVFADC for several ablation tests, to show the effect of each component.
- the proposed multiscale approach and the end-to-end learning contribute an additional 5-10% MSE reduction on top of learned rotation, while they contribute 10-15% on SIFT-1M. It is important to note that on SIFT-1M, multiscale quantization and end-to-end training have a bigger impact than learned rotation, which is itself often considered to yield a significant improvement.
- Example implementations of the end-to-end trained multiscale quantization technique described herein have been compared with three baselines techniques: product quantization (PQ), optimized product quantization (OPQ) and stacked quantizers (SQ).
- PQ product quantization
- OPQ optimized product quantization
- SQL stacked quantizers
- Ground-truth results were generated using brute force search, and the results of each technique can be compared against ground-truth in fixed-bitrate settings.
- recall curves for varying numbers of PQ codebooks from can range ⁇ 8,16,32 ⁇ for the SIFT1M dataset and ⁇ 6,12,24 ⁇ for the DEEP10M dataset.
- FIG. 5 B depicts the time on distance computation at the same bitrate.
- the VPSHUFB based LUT16 has almost the same speed compared to POPCNT based Hamming, and they are both 5 ⁇ faster than in-memory based ADC.
- Recall1@N of LUT256 and LUT16 is often comparable at same bitrate in practice, and LUT16 with 5 ⁇ speed up is almost always preferred.
- the end-to-end trainable multiscale quantization model minimizes overall quantization loss.
- a novel scalar quantization approach to account for the variances in datapoint norms is introduced, which is both empirically and theoretically motivated. Together with the end-to-end training, this contributes to large reduction in quantization error over existing competing methods that already employ optimized rotation and coarse quantization.
- comprehensive nearest neighbor search retrieval experiments on two large-scale, publicly available benchmark datasets show considerable improvement over state-of-the-art.
- FIG. 8 depicts a flow chart diagram of an example method 800 to obtain a quantized dataset according to example embodiments of the present disclosure.
- a computing system can obtain and vector quantizes a first dataset.
- the vector quantizer 302 can vector quantize an input dataset (e.g., first dataset).
- the computing system can generate a residual dataset from the vector quantized first dataset.
- the vector quantizer 302 can generate the residual dataset.
- the computing system can generate a rotated residual dataset.
- the rotation matrix 304 can be learned and applied to the residual dataset to generate the rotated residual dataset.
- the rotated residuals can be reparameterized into a direction component and a scale component.
- the reparameterizer 306 can reparameterize the rotated residual dataset into a direction component and a scale component.
- the direction component can be product quantized.
- the product quantizer 308 can obtain the direction component from the reparameterizer 306 , and perform product quantization on the direction component.
- the scale component can be scalar quantized.
- the scalar quantizer 309 can obtain the scale component from the reparameterizer 306 , and perform scalar quantization on the scale component.
- FIG. 9 depicts a flow chart diagram of an example method 900 to perform a search using a multiscale quantization model.
- a computing system can receive a query.
- the computing system can perform a nearest neighbor search based on the query.
- ⁇ VQ (x) c q * ⁇ , then the approximate squared l 2 distance between the query and database points in P q * can be computed using a lookup table. The final prediction can be made by taking the database point with the lowest approximate distance, e.g.
- x q pred arg min x ⁇ P q * ⁇ ( ⁇ q - c q * ⁇ 2 - 2 [ R ⁇ ( q - c q * ) ] ⁇ [ ⁇ S ⁇ Q ( ⁇ r x ⁇ ) ⁇ ⁇ P ⁇ Q ( r ⁇ x ) ] + ⁇ ⁇ S ⁇ Q ⁇ ( ⁇ r x ⁇ ) ⁇ ⁇ P ⁇ Q ( r ⁇ x ) ⁇ 2 ) .
- the computing system can then compute
- the query is not quantized and the search can be performed based on the query without quantization of the query.
- the computing system can perform the search using soft vector quantization and searching the t vector quantization partitions with the lowest ⁇ q ⁇ C j ⁇ 2 , instead of searching only one vector quantization partition, or based on the unquantized query.
- the computing system can obtain the search results. For example, the computing system can obtain one or more nearest neighbors of the query represented in the multiscale quantized database.
- FIG. 10 depicts a flow chart diagram of an example method 1000 to train a multiscale quantization model according to example embodiments of the present disclosure.
- a computing system can obtain a quantization model.
- the computing system can determine a gradient of an objective function. For example, a stochastic gradient descent can be used to jointly train the parameters of the quantization model (e.g., codebooks, orthogonal transformation, and residual norm quantizers).
- a stochastic gradient descent can be used to jointly train the parameters of the quantization model (e.g., codebooks, orthogonal transformation, and residual norm quantizers).
- the computing system can jointly train parameters of the quantization model based on the gradient. For example, to learn the quantizer for residual norms and capture their local distribution with a VQ partition, the assignment of PQ codes and the scalar quantization of residual norms for all datapoints within a VQ partition can be jointly optimized. Leaving the PQ codebook and rotation fixed, the training can include alternating between 1) fixing all assigned PQ codes and scalar quantizing the residual norms only within the partition, and 2) fixing all quantized residual norms within the partition and reassigning PQ codes, until convergence.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Description
where x(k) denotes the subvector of x in k-th subspace, and S(k)∈
and the average squared norms is fixed
according to example embodiments of the present disclosure.
according to example embodiments of the present disclosure.
where ϕVQ(X)=argminc∈{C
the concatenation of codewords obtained by dividing the rotated and normalized residuals {circumflex over (r)}x into K subvectors {circumflex over (r)}x (k), k=1, 2, . . . , K, and quantizing the subvectors independently by vector quantizers ϕPQ (k)(·) to minimize quantization error:
although subvectors of varying size are also possible.
This representation has an overall bitrate of K log2 l, where l is the number of product quantizers in each subspace, and K is the number of subspaces. The residual norms are maintained by organizing the residuals associated with a VQ partition into blocks, where within a block all residuals have the same quantized norm. The blocks are ordered by quantized norm, and thus only the indices of block boundaries must be maintained. The total storage cost is thus O(mp), where m is number of vector quantizers and p is the number of scalar quantizers. For example, if p is set to 8, the total storage cost O(mp) has a negligible effect on recall compared with using unquantized norms.
where A is a skew-symmetric matrix, i.e. A=−AT. In some implementations, equation (3) can be differentiable with respect to the
parameters of A. The gradient can be computed by performing d×d matrix inversions at each iteration. In some implementations, the number of parameters of A can be restricted to trade off capacity and computational cost, when training on high-dimensional datasets.
-
- 1. Fix all assigned PQ codes and scalar quantize the residual norms only within the partition.
- 2. Fix all quantized residual norms within the partition and reassign PQ codes.
However, in some implementations, the query is not quantized and the search can be performed based on the query without quantization of the query.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/081,376 US11874866B2 (en) | 2017-08-23 | 2022-12-14 | Multiscale quantization for fast similarity search |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762549094P | 2017-08-23 | 2017-08-23 | |
PCT/US2018/032550 WO2019040136A1 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
US16/638,802 US11531695B2 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
US18/081,376 US11874866B2 (en) | 2017-08-23 | 2022-12-14 | Multiscale quantization for fast similarity search |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2018/032550 Continuation WO2019040136A1 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
US16/638,802 Continuation US11531695B2 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
Publications (2)
Publication Number | Publication Date |
---|---|
US20230123941A1 US20230123941A1 (en) | 2023-04-20 |
US11874866B2 true US11874866B2 (en) | 2024-01-16 |
Family
ID=62455851
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/638,802 Active 2039-05-04 US11531695B2 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
US18/081,376 Active US11874866B2 (en) | 2017-08-23 | 2022-12-14 | Multiscale quantization for fast similarity search |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/638,802 Active 2039-05-04 US11531695B2 (en) | 2017-08-23 | 2018-05-14 | Multiscale quantization for fast similarity search |
Country Status (4)
Country | Link |
---|---|
US (2) | US11531695B2 (en) |
EP (2) | EP4357940A2 (en) |
CN (1) | CN111033495A (en) |
WO (1) | WO2019040136A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11308152B2 (en) * | 2018-06-07 | 2022-04-19 | Canon Kabushiki Kaisha | Quantization method for feature vector, search method, apparatus and storage medium |
EP3747718B1 (en) * | 2019-06-04 | 2021-11-03 | Zenuity AB | Method of adapting tuning parameter settings of a system functionality for road vehicle speed adjustment control |
CN112508199A (en) * | 2020-11-30 | 2021-03-16 | 同盾控股有限公司 | Feature selection method, device and related equipment for cross-feature federated learning |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5297170A (en) | 1990-08-21 | 1994-03-22 | Codex Corporation | Lattice and trellis-coded quantization |
US5903676A (en) * | 1994-11-10 | 1999-05-11 | The Chinese University Of Hong Kong | Context-based, adaptive, lossless image codec |
US20170132511A1 (en) * | 2015-11-10 | 2017-05-11 | Facebook, Inc. | Systems and methods for utilizing compressed convolutional neural networks to perform media content processing |
US20180192066A1 (en) * | 2017-01-05 | 2018-07-05 | Alcatel-Lucent Usa Inc. | Compressive sensing with joint signal compression and quality control |
US10131052B1 (en) * | 2014-10-02 | 2018-11-20 | Brain Corporation | Persistent predictor apparatus and methods for task switching |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100114871A1 (en) * | 2008-10-31 | 2010-05-06 | University Of Southern California | Distance Quantization in Computing Distance in High Dimensional Space |
US20120029926A1 (en) * | 2010-07-30 | 2012-02-02 | Qualcomm Incorporated | Systems, methods, apparatus, and computer-readable media for dependent-mode coding of audio signals |
CN101937680B (en) * | 2010-08-27 | 2011-12-21 | 太原理工大学 | Vector quantization method for sorting and rearranging code book and vector quantizer thereof |
US8891878B2 (en) * | 2012-06-15 | 2014-11-18 | Mitsubishi Electric Research Laboratories, Inc. | Method for representing images using quantized embeddings of scale-invariant image features |
JPWO2013129580A1 (en) * | 2012-02-28 | 2015-07-30 | 公立大学法人大阪府立大学 | Approximate nearest neighbor search device, approximate nearest neighbor search method and program thereof |
US20150169644A1 (en) * | 2013-01-03 | 2015-06-18 | Google Inc. | Shape-Gain Sketches for Fast Image Similarity Search |
US9940100B2 (en) * | 2014-08-29 | 2018-04-10 | Adobe Systems Incorporated | Shortlist computation for searching high-dimensional spaces |
EP3115908A1 (en) * | 2015-07-08 | 2017-01-11 | Thomson Licensing | Method and apparatus for multimedia content indexing and retrieval based on product quantization |
-
2018
- 2018-05-14 US US16/638,802 patent/US11531695B2/en active Active
- 2018-05-14 EP EP23219401.9A patent/EP4357940A2/en active Pending
- 2018-05-14 EP EP18728294.2A patent/EP3655862B1/en active Active
- 2018-05-14 CN CN201880054859.7A patent/CN111033495A/en active Pending
- 2018-05-14 WO PCT/US2018/032550 patent/WO2019040136A1/en unknown
-
2022
- 2022-12-14 US US18/081,376 patent/US11874866B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5297170A (en) | 1990-08-21 | 1994-03-22 | Codex Corporation | Lattice and trellis-coded quantization |
US5903676A (en) * | 1994-11-10 | 1999-05-11 | The Chinese University Of Hong Kong | Context-based, adaptive, lossless image codec |
US10131052B1 (en) * | 2014-10-02 | 2018-11-20 | Brain Corporation | Persistent predictor apparatus and methods for task switching |
US20170132511A1 (en) * | 2015-11-10 | 2017-05-11 | Facebook, Inc. | Systems and methods for utilizing compressed convolutional neural networks to perform media content processing |
US20180192066A1 (en) * | 2017-01-05 | 2018-07-05 | Alcatel-Lucent Usa Inc. | Compressive sensing with joint signal compression and quality control |
Non-Patent Citations (39)
Title |
---|
Andoni et al., "Practical and Optimal LSH for Angular Distance", arXiv:2509v1, Sep. 9, 2015, 21 pages. |
Andre et al., "Cache Locality is Not Enough: High Performance Nearest Neighbor Search with Product Quantization Fast Scan", Very Large Data Base Endowment, vol. 9, No. 4, pp. 288-299. |
Babenko et al., "Additive Quantization for Extreme Vector Compression", Conference on Computer Vision and Pattern Recognition, Columbus, Ohio, Jun. 23-28, 2014, pp. 931-938. |
Babenko et al., "Efficient Indexing of Billion-Scale Datasets of Deep Descriptors", Conference on Computer Vision and Pattern Recognition, 2016, pp. 2055-2063. |
Babenko et al., "The Inverted Multi-Index", Conference on Computer Vision and Pattern Recognition, 2014, 14 pages. |
Babenko et al., "Tree Quantization for Large-Scale Similarity Search and Classification", Conference on Computer Vision and Pattern Recognition, Boston, Massachusetts, Jun. 7-12, 2015, pp. 4240-4248. |
Bentley, "Multidimensional Binary Search Trees Used for Associative Searching", Communications of the Association for Computing Machinery, 1975, pp. 509-517. |
Dasgupta et al., "Random Projection Trees and Low Dimensional Manifolds", Technical Report, Department of Computer Science and Engineering, University of California, 29 pages. |
Douze et al., "Polysemous Codes", arXiv:1609v2, Oct. 10, 2016, 18 pages. |
Ge et al., "Optimized Product Quantization", Institute of Electrical and Electronics Engineers Transactions on Pattern Analysis and Machine Intelligence, vol. 36, No. 4, Apr. 2014, 12 pages. |
Gong et al., "Iterative Quantization: A Procrustean Approach to Learning Binary Codes for Large-Scale Image Retrieval", Institute of Electrical and Electronics Engineers Transactions on Pattern Analysis and Machine Intelligence, vol. 35, No. 12, Dec. 2013, 15 pages. |
Gray, "Vector Quantization", American Society of Safety Provisionals Magazine, vol. 1, No. 2, 1984, 26 pages. |
Guo et al., "Quantization based Fast Inner Product Search", International Conference on Artificial Intelligence and Statistics, May 7-11, 2016, Cadiz, Spain, pp. 482-490. |
He et al., "K-means Hashing: An Affinity-Preserving Quantization Method for Learning Binary Compact Codes", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 23-28, 2013, Portland, OR, pp. 2938-2945. |
Heo et al., "Spherical Hashing", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 16-21, 2012, Providence, Rhode Island, 8 pages. |
Indyk et al., "Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality", Proceedings of the Thirtieth Annual ACM Symposium on Theory of Computing, May 1998, 20 pages. |
International Search Report and on Patentability for PCT/US2018/032550, dated Mar. 5, 2020, 11 pages. |
International Search Report and Written Opinion for PCT/US2018/032550, dated Sep. 18, 2018, 16 pages. |
International Search Report for PCT/US2018/032550, dated Sep. 18, 2018, 4 pages. |
Jegou et al., "Product Quantization for Nearest Neighbor Search", Institute of Electrical and Electronics Engineers Transactions on Pattern Analysis and Machine Learning. Volume 33, No. 1, 2011, 14 pages. |
Johnson et al., "Billion-Scale Similarity Search with GPUs", arXiv:1702.08734v1, Feb. 28, 2017, 12 pages. |
Kalantidis et al. "Locally Optimized Product Quantization for Approximate Nearest Neighbor Search", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 24-27, 2014, Columbus, Ohio, 8 pages (Year: 2014). * |
Kalantidis et al., "Locally Optimized Product Quantization for Approximate Nearest Neighbor Search", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 23, 2014, 8 pages. |
Kingma et al., "Adam: A Method for Stochastic Optimization", arXiv:1412.6980v1. Dec. 22, 2014, 9 pages. |
Kulis et al., "Learning to Hash with Binary Reconstructive Embeddings", Twenty-third Conference on Neural Information Processing Systems, Dec. 7-12, 2009, British Columbia, Canada, 9 pages. |
Liu et al., "Hashing with Graphs", International Conference on Machine Learning, Jun. 28-Jul. 2, 2011, Bellevue, Washington, 8 pages. |
Martinez et al., "Revisiting Additive Quantization", European Conference on Computer Vision,, Oct. 8-16, 2016, Amsterdam, The Netherlands, pp. 137-153. |
Martinez et al., "Stacked Quantizers for Compositional Vector Compression", arXiv:1411.2173v1, Nov. 8, 2014, 8 pages. |
Matsui et al., "PQTable: Fast Exact Asymmetric Distance Neighbor Search for Product Quantization using Hash Tables", Institute of Electrical and Electronics Engineers International Conference on Computer Vision, Dec. 7-13, 2015, Santiago, Chile, pp. 1940-1948. |
Muja et al., "Scalable Nearest Neighbor Algorithms for High Dimensional Data", Institute of Electrical and Electronics Engineers Transactions on Pattern Analysis and Machine Intelligence, vol. 36, No. 11, Nov. 2014, pp. 2227-2240. |
Norouzi et al., "Cartesian k-means", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 23-28, 2013, Portland, Oregon, pp. 3017-3024. |
Norouzi et al., "Fast Search in Hamming Space with Multi-Index Hashing", Institute of Electrical and Electronics Engineers Transactions on Pattern Analysis and Machine Intelligence, vol. 36, No. 6, Jun. 2014, 8 pages. |
Shrivastava et al., "Asymmetric LSH (ALSH) for Sublinear Time Maximum Inner Product Search (MIPS)", Twenty-eighth Conference on Neural Information Processing Systems, Dec. 8-13, 2014, Montreal, Canada, 9 pages. |
Szegedy et al., "Going Deeper with Convolutions", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 8-12, 2015, Boston, Massachusetts, 9 pages. |
Wang et al., "Hashing for Similarity Search: A Survey", arXiv:1408.2927v1, Aug. 13, 2014, 29 pages. |
Wang et al., "Learning to Hash for Indexing Big Data—A Survey", arXiv:1509.05472v1, Sep. 17, 2015, 22 pages. |
Weiss et al., "Spectral Hashing", Thirty-second Conference on Neural Information Processing Systems, Dec. 2-8, 2018, Montreal, Canada, 8 pages. |
Zhang et al., "Composite Quantization for Approximate Nearest Neighbor Search", International Conference on Machine Learning, Jun. 21-26, 2014, Beijing, China, 9 pages. |
Zhang et al., "Sparse Composite Quantization", Institute of Electrical and Electronics Engineers Conference on Computer Vision and Pattern Recognition, Jun. 8-12, 2015, Boston, Massachusetts, pp. 4548-4556. |
Also Published As
Publication number | Publication date |
---|---|
US20230123941A1 (en) | 2023-04-20 |
US20200183964A1 (en) | 2020-06-11 |
EP3655862A1 (en) | 2020-05-27 |
EP4357940A2 (en) | 2024-04-24 |
US11531695B2 (en) | 2022-12-20 |
EP3655862B1 (en) | 2023-12-27 |
CN111033495A (en) | 2020-04-17 |
WO2019040136A1 (en) | 2019-02-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11874866B2 (en) | Multiscale quantization for fast similarity search | |
Wu et al. | Multiscale quantization for fast similarity search | |
Guo et al. | Quantization based fast inner product search | |
US10354182B2 (en) | Identifying relevant content items using a deep-structured neural network | |
US10311096B2 (en) | Online image analysis | |
US8428397B1 (en) | Systems and methods for large scale, high-dimensional searches | |
CN112368697A (en) | System and method for evaluating a loss function or a gradient of a loss function via dual decomposition | |
JP7006966B2 (en) | Coding method based on mixed vector quantization and nearest neighbor search (NNS) method using this | |
Pan et al. | Product quantization with dual codebooks for approximate nearest neighbor search | |
CN110046660B (en) | Product quantization method based on semi-supervised learning | |
US10394777B2 (en) | Fast orthogonal projection | |
US11892998B2 (en) | Efficient embedding table storage and lookup | |
EP3278238A1 (en) | Fast orthogonal projection | |
US20240061889A1 (en) | Systems and Methods for Weighted Quantization | |
WO2016142285A1 (en) | Method and apparatus for image search using sparsifying analysis operators | |
CN113656373A (en) | Method, device, equipment and storage medium for constructing retrieval database | |
CN108229358B (en) | Index establishing method and device, electronic equipment and computer storage medium | |
US20200257668A1 (en) | Local orthogonal decomposition for maximum inner product search | |
CN116796038A (en) | Remote sensing data retrieval method, remote sensing data retrieval device, edge processing equipment and storage medium | |
CN109299260B (en) | Data classification method, device and computer readable storage medium | |
CN111984800A (en) | Hash cross-modal information retrieval method based on dictionary pair learning | |
US20230112862A1 (en) | Leveraging Redundancy in Attention with Reuse Transformers | |
Liu et al. | Image retrieval based on optimized visual dictionary and adaptive soft assignment | |
CN117349518A (en) | Method, device, computer equipment and storage medium for determining furthest adjacent candidate point | |
CN117851597A (en) | Clause data processing method, device, equipment and computer readable storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WU, XIANG;SIMCHA, DAVID;HOLTMANN-RICE, DANIEL;AND OTHERS;SIGNING DATES FROM 20170907 TO 20170917;REEL/FRAME:062617/0961 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:062698/0846Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |