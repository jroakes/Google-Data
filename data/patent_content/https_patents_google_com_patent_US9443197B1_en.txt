CROSS-REFERENCE TO RELATED APPLICATIONS
The present application is a continuation of U.S. patent application Ser. No. 13/233,314 filed Sep. 15, 2011, the disclosure of which is incorporated herein by reference.
BACKGROUND
The advent of the World Wide Web has placed more information at the fingertips of today's users than ever before. Various websites cater to nearly every need and interest, providing access to reference information, business and financial documents, social networking, and more. Widespread broadband Internet access provides faster access to these sites than ever before.
However, as fast as current high-speed Internet services are, the act of browsing the web is not instantaneous. When a user selects a link on a page or enters a uniform resource locator (URL) in a text field, there is a delay while data is requested from the host, sent to the client, and rendered in the browser. The user may be idle while waiting for their requested site to load. While high-speed Internet access may limit this delay to a few seconds, even this short delay can add up to thousands of man-hours of lost productivity each year.
BRIEF SUMMARY
A method and system for predicting user navigation events are described. Aspects of the disclosure minimize the delay in accessing web content by predicting a user navigation event on a web page. The navigation event may be predicted by various indicators, including but not limited to a user's navigation history, aggregate navigation history, text entry within a data entry field, or a mouse cursor position. Users can be provided with an opportunity to opt in or out of functionality that may collect personal information about them. In addition, certain data can be anonymized and aggregated before it is stored or used, such that personally identifiable information is removed.
Aspects of the disclosure provide a computer-implemented method for predicting a user navigation event. The method may include storing a set of navigation data, the navigation data including one or more navigation events and one or more selection counts associated with each navigation event, the navigation events and selection counts indexed by chronological data, and a value of the chronological data indicating when a navigation event was selected, determining a current chronological value, the current chronological value representing a present time, and determining, using a processor, a probability of selection of a given navigation event by comparing the current chronological value to the set of navigation data, such that the probability may be used by a web browser to assist with network navigation. The method may also include identifying the given navigation event as a likely navigation event based upon the probability of selection. The method may further include determining a probability of selection of a plurality of navigation events, and identifying one of the navigation events of the plurality of navigation events with the highest probability of selection as a likely navigation event. In some aspects, the method includes determining a probability of selection of a plurality of navigation events, and identifying any navigation event with a probability of selection that exceeds a threshold value as a likely navigation event. The method may also include prerendering the likely navigation event. The chronological data may be at least one of a day of week, a minute of an hour, a day of month, a time of day, a month of year, and a weekday or weekend. The method may also include identifying a subset of the navigation data corresponding to the current chronological value, determining a ratio of a selection count of a particular navigation event contained within the subset of the navigation data to a count of all selection counts contained within the subset of the navigation data, and determining a probability of selection of the particular navigation event using the ratio. In some aspects, the method includes identifying a plurality of subsets of the navigation data, each subset corresponding to a particular type of chronological data and to the current chronological value, determining a plurality of probabilities of the given navigation event, with a probability associated with each of the subsets, and each probability associated with a different type of chronological data, and determining an overall probability of the given navigation event by averaging the plurality of probabilities. The averaging may be done using a weighted average. A weight for a particular probability may be determined by at least one of a number of counts used to calculate the probability and a standard deviation value associated with both the navigation event and the chronological data used to calculate the probability.
Aspects of the disclosure also provide a non-transitory computer-readable storage medium including instructions that, when executed by a processor, cause the processor to perform a method. The method may include storing a set of navigation data, the navigation data comprising one or more navigation events and one or more selection counts associated with each navigation event, the navigation events and selection counts indexed by chronological data, and a value of the chronological data indicating when a navigation event was selected, determining a current chronological value, the current chronological value representing a present time, and determining, using a processor, a probability of selection of a given navigation event by comparing the current chronological value to the set of navigation data, such that the probability may be used by a web browser to assist with network navigation. The non-transitory computer readable medium may also include instructions including identifying the given navigation event as a likely navigation event based upon the probability of selection. The non-transitory computer readable medium may also include instructions including determining a probability of selection of a plurality of navigation events, and identifying a navigation event with the highest probability of selection as a likely navigation event. The non-transitory computer readable medium may further include instructions including determining a probability of selection of a plurality of navigation events, and identifying one of the navigation events of the plurality of navigation events with the highest probability of selection as a likely navigation event. In some aspects, the non-transitory computer readable medium may include instructions including prerendering of the likely navigation event. The chronological data may be at least one of a day of week, a minute of an hour, a day of month, a time of day, a month of year, and a weekday or weekend.
Aspects of the disclosure may also provide a processing system for predicting a user navigation event. The processing system may include at least one processor, and a memory, coupled to the processor, for storing a set of navigation data, the navigation data comprising one or more navigation events and one or more selection counts associated with each navigation event, the navigation events and selection counts indexed by chronological data, and a value of the chronological data indicating when a navigation event was selected. The processor may be configured to determine a current chronological value, the current chronological value representing a present time, and determine, using a processor, a probability of selection of a given navigation event by comparing the current chronological value to the set of navigation data, such that the probability may be used by a web browser to assist with network navigation. The processor may be further configured to identify the given navigation event as a likely navigation event based upon the probability of selection. The processor may be further configured to execute the web browser to prerender the most likely network navigation destination. The chronological data may be at least one of a day of week, a day of month, a minute of an hour, a time of day, a month of year, and a weekday or weekend. The navigation events may be uniform resource locator pairs, the pairs representing a source uniform resource locator and a destination uniform resource locator pair.
BRIEF DESCRIPTION OF THE DRAWINGS
FIG. 1 is a system diagram depicting an example of a server in communication with example client devices in accordance with aspects of the disclosure.
FIG. 2 is block diagram depicting an example of a computing device in accordance with aspects of the disclosure.
FIG. 3 is a flow diagram depicting an example of a method for prerendering a web page based upon a predicted navigation event in accordance with aspects of the disclosure.
FIG. 4 is a flow diagram depicting an example of a method for predicting a navigation event based on a client navigation history in accordance with aspects of the disclosure.
FIG. 5 is a flow diagram depicting an example of a method for computing a confidence value for a URL using a client navigation history in accordance with aspects of the disclosure.
FIG. 6 is a flow diagram depicting an example of a method for predicting a navigation event based on an aggregate navigation history in accordance with aspects of the disclosure.
FIG. 7 is a flow diagram depicting an example of a method for computing a confidence value for a URL using an aggregate navigation history in accordance with aspects of the disclosure.
FIG. 8A is a flow diagram depicting an example of a method for predicting a navigation event based on an aggregate navigation history using hash values to anonymously manage link data in accordance with aspects of the disclosure.
FIG. 8B is an illustration of an example of a web browser employing an example method for predicting a user navigation event based on an aggregate navigation history in accordance with aspects of the disclosure.
FIGS. 9A and B are an illustration of an example of a set of arrays for storing navigation events indexed by chronological data.
FIG. 10 is an illustration of an example of a method for predicting a navigation event in accordance with aspects of the disclosure.
FIG. 11 is an illustration of an example of a method for constructing a chronological data array of navigation events in accordance with aspects of the disclosure.
FIG. 12 is an illustration of an example of a method for identifying a likely navigation event using chronological data in accordance with aspects of the disclosure.
DETAILED DESCRIPTION
Embodiments of a system and method for predicting user navigation events are described herein. Aspects of this disclosure minimize the delay between a navigation event and a network response by predicting the next navigation event. The system and method may prerender content associated with the next navigation event. For example, the method and system may predict a likely next uniform resource locator during web browsing to preemptively request content from the network before the user selects the corresponding link, thus reducing or eliminating the wait time when a user selects a hyperlink on a web page. Various methods describing a variety of manners of predicting the next navigation event, including examining individual and aggregate historical data, text entry prediction, and cursor input monitoring, are described. Aspects of the disclosure also relate to the prediction of the immediate user navigation (e.g., the next link the user is likely to select when viewing a particular web page, such as within the next 30 seconds, the next minute, or the next 5 minutes).
As shown in FIG. 1, an example system 102 in accordance with one embodiment includes a server 104 in communication (via a network 112) with one or more client devices 106, 108, 110 displaying web browser interfaces 114, 116, 118, respectively.
The client devices 106, 108, 110 are configured to perform prerendering operations during the execution of a web browser application. The server 104 may transmit navigation history data to the client devices 106, 108, 110, to enable prediction of a next navigation event. In some aspects, the client devices 106, 108, 110 determine a next navigation event using a local navigation history and generate a web request to the server 104 to prerender the content associated with the next navigation event. For example, the user of the client device 106 may browse to a web page located at “www.a.com” as displayed on the web browser interface 112. That page includes content selectable by the user. Based on the user's navigation history, the client device 106 may determine which of the selectable content the user is likely to select, and then prerender the content associated with the selectable content by requesting the content from the server 104.
As another example, the client device 108 may display www.a.com within a browser 114. The client device 108 may receive an aggregate set of navigation statistics from the server 104, and then determine which selectable content the user is likely to select based upon the aggregate set of navigation statistics. As yet another example, the client device 110 may display www.a.com within a browser 116. The client device 108 may determine which selectable content the user is likely to select based upon a cursor position within the browser 114.
While the concepts described herein are generally discussed with respect to a web browser, aspects of the disclosure can be applied to any computing node capable of managing navigation events over a network, including a server 104.
The client devices 106, 108, 110 may be any device capable managing data requests via a network 112. Examples of such client devices include personal computers, personal digital assistants (“PDA”): tablet PCs, netbooks, laptops, etc. Indeed, client devices in accordance with the systems and methods described herein may comprise any device operative to process instructions and transmit data to and from humans and other computers including general purpose computers, network computers lacking local storage capability, etc.
The client devices 106, 108, 110 are operable to predict navigation events to assist in data access via the network 112. For example, the client devices may predict a likely navigation event to facilitate prerendering of a web page in order to improve the user's browsing experience. In some aspects, the server 104 provides navigation data that may be used by the client devices 106, 108, 110 to predict a likely navigation event (see FIGS. 6-8). In some aspects, the client devices 106, 108, 110 predict a likely navigation event using local data. (see FIGS. 3-5, 9-12).
The network 112, and the intervening nodes between the server 104 and the client devices 106, 108, 110, may comprise various configurations and use various protocols including the Internet, World Wide Web, intranets, virtual private networks, local Ethernet networks, private networks using communication protocols proprietary to one or more companies, cellular and wireless networks (e.g., Wi-Fi), instant messaging, hypertext transfer protocol (“HTTP”) and simple mail transfer protocol (“SMTP”), and various combinations of the foregoing. It should be appreciated that a typical system may include a large number of connected computers.
Although certain advantages are obtained when information is transmitted or received as noted above, other aspects of the system and method are not limited to any particular manner of transmission of information. For example, in some aspects, information may be sent via a medium such as an optical disk or portable drive. In other aspects, the information may be transmitted in a non-electronic format and manually entered into the system.
Although some functions are indicated as taking place on the server 104 and other functions are indicated as taking place on the client devices 106, 108, 110, various aspects of the system and method may be implemented by a single computer having a single processor. It should be appreciated that aspects of the system and method described with respect to the client device may be implemented on the server, and vice-versa.
FIG. 2 is a block diagram depicting an example of a computing device 200, such as one of the client devices 106, 108, 110 described with respect to FIG. 1. The computing device 200 may include a processor 204, a memory 202 and other components typically present in general purpose computers. The memory 202 may store instructions and data that are accessible by the processor 204. The processor 204 may execute the instructions and access the data to control the operations of the computing device 200.
The memory 202 may be any type of memory operative to store information accessible by the processor 120, including a computer-readable medium, or other medium that stores data that may be read with the aid of an electronic device, such as a hard-drive, memory card, read-only memory (“ROM”), random access memory (“RAM”), digital versatile disc (“DVD”) or other optical disks, as well as other write-capable and read-only memories. The system and method may include different combinations of the foregoing, whereby different portions of the instructions and data are stored on different types of media.
The instructions may be any set of instructions to be executed directly (such as machine code) or indirectly (such as scripts) by the processor 204. For example, the instructions may be stored as computer code on a computer-readable medium. In that regard, the terms “instructions” and “programs” may be used interchangeably herein. The instructions may be stored in object code format for direct processing by the processor 204, or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance. Functions, methods and routines of the instructions are explained in more detail below (see FIGS. 3-12).
Data may be retrieved, stored or modified by processor in accordance with the instructions. For instance, although the architecture is not limited by any particular data structure, the data may be stored in computer registers, in a relational database as a table having a plurality of different fields and records, Extensible Markup Language (“XML”) documents or flat files. The data may also be formatted in any computer readable format such as, but not limited to, binary values or Unicode. By further way of example only, image data may be stored as bitmaps comprised of grids of pixels that are stored in accordance with formats that are compressed or uncompressed, lossless (e.g., BMP) or lossy (e.g., JPEG), and bitmap or vector-based (e.g., SVG), as well as computer instructions for drawing graphics. The data may comprise any information sufficient to identify the relevant information, such as numbers, descriptive text, proprietary codes, references to data stored in other areas of the same memory or different memories (including other network locations) or information that is used by a function to calculate the relevant data.
The processor 204 may be any suitable processor, such as various commercially available general purpose processors. Alternatively, the processor may be a dedicated controller such as an application-specific integrated circuit (“ASIC”).
Although FIG. 2 functionally illustrates the processor and memory as being within a single block, it should be understood that the processor 204 and memory 202 may comprise multiple processors and memories that may or may not be stored within the same physical housing. Accordingly, references to a processor, computer or memory will be understood to include references to a collection of processors, computers or memories that may or may not operate in parallel.
The computing device 200 may be at one node of the network and be operative to directly and indirectly communicate with other nodes of the network. For example, the computing device 200 may comprise a web server that is operative to communicate with client devices via the network such that the computing device 200 uses the network to transmit and display information to a user on a display of the client device.
In some examples, the system provides privacy protections for the client data including, for example, anonymization of personally identifiable information, aggregation of data, filtering of sensitive information, encryption, hashing or filtering of sensitive information to remove personal attributes, time limitations on storage of information, and/or limitations on data use or sharing. Data can be anonymized and aggregated such that individual client data is not revealed.
In order to facilitate the navigation event prediction operations of the computing device 200, the memory 202 may further comprise a browser 206, a navigation prediction module 208, a prerender module 210, a client navigation history 212, and an aggregate navigation history 214. Although a number of discrete modules (e.g., 206, 208, 210, 212 and 214) are identified in connection with FIG. 2, the functionality of these modules can overlap and/or exist in a fewer or greater number of modules than what is shown, with such modules residing at one or more processing devices, which may be geographically dispersed. The browser 206 provides for the display of network content, such as a web page 216, a set of search results, or any other type of network data, to a user of the client device by sending and receiving data across a computer network. The web page 216 may be received in response to a network request, such as a Hypertext Transfer Protocol (HTTP) GET request. The web page 216 may be provided in a markup language, such as Hypertext Markup Language (HTML). The web page 216 may also include various scripts, data, forms, and the like, including interactive and executable content such as ADOBE FLASH content, JAVASCRIPT content, and the like.
The browser 206 may further comprise a prerendered web page 218. The prerendered web page 218 represents a web page that was requested and accessed by the prerender module 210 in response to a predicted navigation event provided by the navigation prediction module 208. In the event the user inputs a navigation event as predicted by the prediction module 208, the browser 206 may swap the prerendered web page 218 with the web page 216, thus providing the content associated with the navigation event without the need to send another network request. In some aspects, the swap may occur before the prerendered web page 218 has finished loading. In such cases, the partially loaded prerendered web page 218 may be swapped in to continue loading as the active page.
The memory 202 may further comprise a prerender module 210 to perform fetching of a next web page as identified by the navigation prediction module 208. The prerender module 210 sends a network request for the web page identified to be the likely next navigation destination that the user will select. The web page received in response to this request is then stored in the browser 206 as the prerendered web page 218. In some aspects, the web page request generated by the prerender module 210 is identical to a standard web page request. In some aspects, the web page request generated by the prerender module 210 comprises certain features to facilitate the prerender process.
The memory 202 may also store a client navigation history 212 and an aggregate navigation history 214. The client navigation history 212 comprises a set of navigation events associated with past activity of the browser 206. The client navigation history 212 may track a set of visited URLs, also known as a “clickstream,” which tracks an order in which the user typically visits URLs (e.g., when the user visits a news website, they tend to next select a URL corresponding to the top story of the day), a set of access times associated with the URLs, and the like. In some aspects, the client navigation history 212 comprises a set of URLs and a frequency with which the user has visited each URL. In some aspects, the client navigation history comprises a set of URL pairs, representing a source URL and a destination URL. The aggregate navigation history 214 may comprise similar data as the client navigation history 212, but keyed to multiple users rather than a single user. As with the client navigation history 212, the aggregate navigation history 214 may be stored as a set of URLs and a frequency for each, or a set of URL pairs representing a transition from a source URL to a destination URL.
The client navigation history 212 and aggregate navigation history 214 may represent data collected using one or more browser add-ons, scripts, or toolbars. In some aspects, the client navigation history 212 and/or aggregate navigation history 214 are maintained on a remote server, such as the server 104, and provided to the computing device 200. The computing device 200 may maintain separate records to facilitate the predicting of a next likely navigation event, or it may act in concert with remotely stored data. In some aspects, only aggregate navigation history 214 pertaining to the particular web page the user is currently viewing is provided to the computing device 200 (see FIGS. 6 and 8).
As described above, the aggregate navigation history data 214 can be maintained in an anonymous fashion, with privacy protections for the individual client data that comprises the aggregate navigation history, including, for example, anonymization of personally identifiable information, aggregation of data, filtering of sensitive information, encryption, hashing or filtering of sensitive information to remove personal attributes, time limitations on storage of information, and/or limitations on data use or sharing. The aggregate navigation history 214 data can be anonymized and aggregated such that individual client data is not revealed.
FIG. 3 is a flow diagram depicting an example method 300 for prerendering a web page based upon a predicted navigation event in accordance with aspects of the disclosure. Aspects of the method 300 operate to identify one or more likely navigation destinations from a set of navigation indicators, and then prerender the identified navigation destinations. The method 300 may be performed by a computing device, such as the computing device 200, to eliminate delays in the user web browsing experience by prerendering web pages that are identified as likely navigation targets by the user. For example, the method 300 may be performed by elements of the browser 206, the navigation prediction module 208, and the prerender module 210 acting together. While aspects of the method 300 are described with respect to the computing device 200, the method 300 may also be performed by the server 104, or any device with hardware and/or software designed to accept instructions.
At stage 302, the computing device 200 receives one or more indicators of navigational intent. Navigational intent may be any action that would tend to indicate that the user will generate a particular network request, such as a request for a particular web page. For example, the indicators may provide metrics by which to determine what the particular request will be, such as a confidence value. For example, the user may navigate to a certain web page, from which they generally navigate to another certain web page based upon their browsing history, or the user may move his mouse cursor towards a particular hyperlink embedded within a web page. In some aspects, the indicator is received from a remote server, such as a search engine that embeds an indicator within search results, indicating that most users that submit a particular search query select a particular search result.
At stage 304, after receiving the indicator of navigational intent, the computing device 200 attempts to predict the most likely navigation event. In short, the computing device 200 makes a best guess of to where the user is likely to navigate next, based upon the indicator. Methods of performing this prediction are described below (see FIGS. 4-12).
At stage 306, the computing device 200 prerenders the content from the predicted next navigation event as determined at stage 304. The prerendering process may include storing a prerendered web page within a browser, such as the prerendered web page 218. The computing device 200 may prerender a single web page predicted as the most likely navigation event, or the computing device 200 may prerender multiple pages. In some aspects, the computing device 200 determines the number of pages to prerender based upon one or more system capabilities of the computing device 200, such as available system resources, available network bandwidth, processor speed, installed memory, and the like. In some aspects, the number of pages to prerender may be configurable in one or more user settings. After prerendering the content associated with the navigation event(s), the method 300 ends.
Multiple methods for predicting a next navigation event are provided below. While each method is described separately, it should be appreciated that aspects of the methods may be combined to improve navigation prediction operations.
FIG. 4 is a flow diagram depicting an example method 400 for predicting a navigation event based on a client navigation history in accordance with aspects of the disclosure. The method 400 provides for storing a navigation history for a user, and predicting a next navigation event based upon a navigation history of a particular user. As above, the method 400 may be performed by a computing device such as the computing device 200. In particular, the method 400 may be performed by a navigation prediction module executing on a processor, such as the navigation prediction module 208.
At stage 402, the computing device 200 tracks a user navigation history. For example, the computing device 200 may store records of web pages visited by the user, such as the browsing history commonly maintained in web browsers. The browsing history may comprise the URLs of the web pages visited by the user, the order in which the URLs were visited, and the manner in which the user selected the URL (e.g., whether the URL was a clicked hyperlink, typed into an address bar, a redirect operation from another web page, etc.).
At stage 404, the computing device 200 determines a most likely navigation event or events based upon the user navigation history. The most likely navigation events may be determined by identifying the globally most visited pages for the user, or the navigation events may be associated with one or more current criteria. For example, the computing device 200 may examine the user's navigation history to determine that, when the user is viewing a particular news web page, they almost always select a link to the top news story on that page, or that when the user first opens the browser in the morning, they are likely to navigate to their bank account page to check their daily balance. The computing device 200 may employ various rules, heuristics, and filters to determine the most likely navigation event from the user history. The computing device 200 may associate each navigation event with a particular confidence value, indicating the likelihood that the user will select each navigation event. These confidence values may then be used to sort the navigation events to determine the most likely navigation event. A method to determine a confidence value for a given navigation event is described further below (see FIG. 5).
At stage 406, the computing device 200 reports the most likely navigation event as the predicted navigation event. For example, these predicted most likely navigation event may then be employed by the method described above (see FIG. 3) to facilitate prerendering of the web pages associated with the most likely navigation event.
FIG. 5 is a flow diagram depicting an example method 500 for computing a confidence value for a URL using a user navigation history in accordance with aspects of the disclosure. The method 500 is operable to track navigation events input by the user and to maintain a frequency value for each stored event. The method 500 may be employed to build a client navigation history as used by the method 400, and stored on the computing device 200 as the client navigation history 212.
At stage 502, the computing device 200 tracks the selection of a particular URL. For example, the user may type a URL for a news site into the browser, or click a link on a page. The computing device 200 may monitor the navigation events using functionality built into the browser 206, through a browser extension such as a plug-in or toolbar, or via a third party application executing in tandem with the browser.
At stage 504, the computing device 200 increments a frequency value associated with the URL selected at stage 502. For example, the computing device 200 may track a frequency value associated with each URL selected by a user. The frequency value is a data metric used to rank a number of visits to a particular web site or the number of times a particular navigation event is selected. In response to a selection operation, the computing device 200 may increment the frequency value associated with the URL, for example by 1.0, 5.0, 10.0, 0.5, or any other value. The frequency value associated with the URL represents how often the user has selected the particular URL, and thus is an indicator of how likely the user is to select the URL in the future.
At stage 506, the computing device 200 time decays the stored frequency values for the URLs after a given “sweep interval”. Decaying the URL frequency values in this manner allows for current browsing habits to be more heavily weighted than previous browsing habits. As an example, the computing device 200 may execute the sweep every 30 seconds, every minute, or every 5 minutes during which the user has selected at least one URL. The sweep interval may be conducted in response to the selection of at least one URL during a particular sweep interval to ensure that the navigation history values are not decayed below a threshold value during periods where the user is inactive. The sweep may decay the stored frequency value associated with the URL by a particular value, such as 0.99, 0.5, or 1.0, or by a percentage value, such as 5%, 10%, or 50%. Once the value associated with the URL drops below a given threshold, for example, 0.3, 1.0, or 5.0, the URL may be removed from the list of possible navigation destinations to avoid the list growing too large. After conducting the decay process, the frequency values for the URLs may be persisted to a local storage on the computing device 200, or sent to a remote storage such as provided by the server 104.
At stage 508, the stored frequency values may be used to determine the relative frequency with which the user visits particular web sites. The frequency value thus provides a basis from which a confidence value associated with a navigation event leading to each web site may be derived. In some aspects, the frequency value itself may be provided as the confidence value. In some aspects, the confidence value is determined by comparing a frequency value for a particular web page with the entire user navigation history. For example, the navigation event with the higher frequency value may be associated with a particular percentage confidence value, the second highest frequency value a lower percentage, and the like. In some aspects, the confidence value is determined by frequency value by the total number of logged navigation events. For example, the frequency value of a particular URL may be divided by the sum of all frequency values to determine a confidence value.
For example, a user may be in the process of buying a home, and thus regularly checking financial and banking websites for mortgage rates. During this time, these financial and banking sites would have high values and thus be more likely to be prerendered, thus improving the user experience while searching for a mortgage rate. After completing the home purchase process, the user is likely to lose interest in day to day rate fluctuations, and thus it is no longer optimal to prerender these websites, since the user is unlikely to visit them. As such, providing for a time decay value allows these sites to fall off of the list over time.
FIG. 6 is a flow diagram depicting an example method 600 for predicting a navigation event based on an aggregate navigation history in accordance with aspects of the disclosure. The method 600 is operable to track navigation events voluntarily submitted by users to determine likely navigation patterns. The navigation patterns are then analyzed, such as by a server 104, and supplied to the user to facilitate navigation event prediction during the browsing process. For example, a server, such as the server 104, may send updates to a computing device, such as the computing device 200, as the user browses to different pages, to provide information on which link displayed on a given page is most likely to be selected based on the aggregate navigation history.
At stage 602, the server 104 receives a set of navigation information comprising a browsing history. The browsing history is preferably provided by using an “opt-in/out” method, where the user specifically enables (or disables) reporting functionality to provide elements of their browsing history to the server 104. In addition, personally identifying data can be anonymized and aggregated before it is stored or used, such that no personal information is stored or accessible. A browsing history may be tracked and provided to the server 104 via a browser plug-in or toolbar installed on the user's computing device which tracks the user's browsing history, or by the web browser itself. The browsing history may be combined with other received browsing histories to create a set of aggregate data used in a similar manner as the client navigation history described with respect to FIG. 4, to predict a likely navigation event. The received navigation history may be anonymized to remove any personally identifying information. In some aspects, the received navigation history is received with individual URLs and/or transitional URL pairs provided in a hashed data format to remove any personally identifying information prior to transmission to the server 104.
At stage 604, the server 104 determines a confidence value for each URL on a particular web page, based on the navigation information received at stage 602. For example, the server may employ a method similar to that disclosed above with respect to FIG. 5 for generating confidence values for URLs on a page, except the navigation events are determined based upon aggregated data instead of specific user data. As above, the server 104 may compute confidence values based upon the frequency values derived from the navigation information. In some aspects, confidence values are determined by the percentage of the time that users selected a particular navigation event when they were presented with the choice to select the particular navigation event. The transitional URL pairs provide for the determination of a confidence value by dividing a frequency value of a source/destination URL pair by a total number of appearances of the source URL. In some aspects, the server may determine navigation events based upon transitions from a first page to a second page, rather than from a pure visit frequency metric. The server 104 may maintain an index of web pages and associated URLs and confidence values for each link on the web page, such as in a database. For example, a news site may have five URLs pointing to different news stories. The server 104 may receive aggregate data indicating that one of the five news stories is selected 60% of the time, with the other four being selected 10% of the time each. As such, the server 104 would index the page in a database with a 60% likelihood for the first story link, and 10% likelihoods for each of the other four story links.
In some aspects, the server 104 maintains history data in a confidential manner, such as by converting each URL to a hash value at stage 606. In this manner, the server 104 may provide predicted URL data to a client device without disclosing any personal user data. For example, a user may visit a banking web page that has a particular user name and password login. Depending upon the user, the banking web page may provide URLs to each account the user possesses. Each user accessing the page may have a different set of links provided, depending upon the accounts the user has with the bank. By converting the links on the page to non-reversible hash values, the server 104 may provide confidence values that are not associable to links on the page unless the user also possesses access to the same links (e.g., the client can apply the hash function to links they already possess on the currently viewed page to determine if the confidence values apply). As described above, in some aspects, the hash value is computed by the computing device 200 prior to sending navigation history data to the server 104. In this manner, the server 104 may receive the navigation history data in the hashed format, without the need to compute a hash value.
At stage 608, the server 104 transmits the hash values and confidence values associated with the hash values to a client device, such as the computing device 200. The transmittal may be in response to a request from the computing device 200 for a particular URL. In some aspects, the server 104 may transmit the hash values and confidence values in response to a request for such values from a service executing on the client device 200. For example, when the computing device 200 requests the news web page described above, the server 104 provides the hash values and confidence values for the five story links present on that page. The computing device 200 may also request data for particular link hash values by first generating a hash value on the client side, then requesting a confidence value for the particular hash value from the server 104.
FIG. 7 is a flow diagram depicting an example method 700 for computing a confidence value for navigation events associated with a URL using an aggregate navigation history in accordance with aspects of the disclosure. The method 700 serves to compare navigation events from a given URL received from a plurality of users, in order to determine how likely each individual navigation event is. The confidence values may be determined in relation to a particular “source” web page, with different confidence values for each URL depending upon the page the user is currently viewing. For example, the confidence values may be used above as described with respect to stage 604 of the method 600 (see FIG. 6).
At stage 702, the server 104 examines received browsing histories and computes a number of instances for each navigation event as associated with a particular URL. As described above, the instance value may be a percentage or a raw number.
At stage 704, the server 104 may determine if the number of visits to the URL exceeds a minimum threshold of statistical significance. For example, five visits to a particular URL may not provide statistically significant data sufficient to reasonably predict a likely navigation event away from the URL. For example, if the number of instances of the event is less than 1000, the server 104 may proceed to stage 710, and not calculate a probability for the event because the sample size is insufficient.
At stage 706, the server 104 may determine if a minimum number of users have submitted data regarding the URL to provide statistically significant data. For example, the method 700 may require that at least 50 users have provided data in order to compute and store a confidence value for the navigation event. Otherwise the method 700 may proceed to stage 710 and disregard the event until a sufficient number of users have provided data. As above, the threshold value may fluctuate depending upon the size of the dataset.
At stage 708, the server 104 determines a window size of recent instances. The window size refers to the number of latest visits to the URL that will be examined to determine the confidence value, or a length of time to search back through the instances. The window size may be determined based on the amount of traffic the URL receives, how often the content of the URL changes. For example, a news website that has constantly changing content might require a small instance window, because links from the regularly changing URL would grow stale. A website with a small amount of traffic would typically require a longer window size in order to gather enough results for statistical significance. The window size might be set at 50 instances, 100 instances, 1000 instances, all instances within the last hour, within the last day, within the last week, or the like.
At stage 712, the server 104 computes the number of times each particular navigation event, such as the next URL visited for the current URL, occurs within the instances defined by the window size determined at stage 710. For example, out of 1000 visits to a news website, a particular article might be selected 600 times, resulting in a confidence value of 60% for navigating to that article from the URL. While the present example primarily relates to determination of a navigation event based upon a number of accesses as a percentage of total navigation events, additional heuristics may also be used to derive the likely event based upon information supplied by the user, such as the previous navigation event (e.g., the website that led to the currently analyzed URL), the time of day (e.g., users are more likely to check news sites when in the morning when they arrive at work), the user's location (e.g., users in a particular geographic region are likely to check sports scores for local teams), or other demographic information.
At stage 714, the server 104 optionally compares the confidence values for the navigations events from the URL with a threshold value. If the confidence values do not meet the threshold value, the server 104 may identify a subset of available navigation events, as possible predicted likely navigation events. In this manner the server 104 avoids predicting navigation events when the event does not have a statistically significant likelihood of occurring, thus potentially saving bandwidth on prerender operations on pages that are unlikely to be visited. The threshold may be set at a variety of different values, such as 5%, 25%, 50%, or 75%. In some aspects, the threshold may be dynamically altered based upon the number of navigation links present at the URL, the type of URL, the traffic of the URL, the speed at which content changes at the URL, and the like. If the confidence values do not meet the minimum threshold, the server 104 may filter out the possible events that do not meet the minimum threshold.
If the navigation event or events meet the minimum threshold, or the method 700 does not check for a minimum threshold, the most likely navigation event or events and the likelihood for each event are stored along with the URL at stage 716. The navigation events and confidence values may be supplied in response to a request to the user, such as occurs at stage 608 described with respect to FIG. 6. The method 700 ends after computing and storing the confidence values for the navigation events associated with the URL.
FIG. 8A is a flow diagram depicting an example method 800 for predicting a navigation event based on an aggregate navigation history using hash values to anonymously manage link data in accordance with aspects of the disclosure. The method 800 provides logic by which a computing device 200 may predict a navigation event based upon data received from a server 104, such as the data generated by the method 700 described with respect to FIG. 7.
At stage 802, the computing device 200 receives a set of data from a remote server 104, the set of data comprising information associated with an aggregate browsing history of a web page. This aggregate data may be received in response to a request made by the computing device 200 in response to navigating to a particular web page. The aggregate data may represent a collection of data received by a remote server from a plurality of users. For example, a web browser plug-in may allow the user to “opt-in/out” of functionality that may send their anonymized navigation history to a remote server. The remote server may then collect navigation histories from a plurality of users, stored as an aggregate navigation history, such as described above (see FIG. 7). For example, the navigation prediction module 208 may generate a request to the server 104 every time the user navigates to a web page, for the aggregate browsing data associated with that web page. The navigation prediction module 208 may then predict a likely next navigation event using the received data, so as to supply the prerender module with a next page to prerender to improve the browsing experience.
Due to the data's aggregate nature, it can be provided as a series of hash values to protect individual user information, as described above with respect to FIG. 6. As such, the computing device 200 associates the received hash values and confidence values with the links present on the current URL. To begin this process, at stage 804, the computing device computes a hash value for each link on the current page using the same hash function as used by the server 104 to anonymize the link data. As described above, in some aspects the hash value is computed on the computing device prior to sending navigation history data to the server. In such cases, the hash value would match the original computed value determined by the computing device prior to the navigation event being transmitted to the server, rather than a value computed on the server.
At stage 806, the computing device 200 compares the computed hash values with the received hash values from the server 104. In this manner, the computing device 200 may match the confidence values and hash values received from the server 104 with the links available for the user to select on the currently viewed web page. The confidence values indicate a likelihood that a particular navigation event associated with the hash value will be selected. The computing device 200 may thus map the currently viewable links with the received confidence values.
At stage 808, the computing device 200 identifies the link or links with the highest confidence value or values as the predicted next navigation event. The method 800 ends after predicting the next navigation event.
FIG. 8B is an illustration of an example interface 810 of a web browser employing an example method for predicting a user navigation event based on a navigation history in accordance with aspects of the disclosure. The illustration depicts a web browser interface 810 displaying a web site and a set of navigation history data 812. The web page 810 comprises one or more links 814, 816, 818, 820. These links 814, 816, 818, 820 may be URLs that, when selected by a user, direct the web browser to display a set of content associated with the selected link.
The navigation history data 812 comprises data associated with the links 814, 816, 818, and two other links, Link E and Link F that are not present for the current user viewing the page. The navigation history data 812 may represent an analysis of the individual user's navigation history (See FIGS. 4-5), or an aggregate navigation history (See FIGS. 6-8). The navigation history 812 comprises information about the links 814, 816, 818, and a confidence value associated with each link.
The navigation history 812 may be used by other aspects of a computing device 200, such as the navigation prediction module 208, to predict the next navigation event. For example, in the present illustration, according to the navigation history 812, there is a 30% chance the user will select Link A 814, a 60% chance the user will select Link B 816, and a 5% chance the user will select Link C 818. Link D 820 does not have any associated data stored in the navigation history 812. The lack of data for Link D 820 may be explained in a variety of manners, such as that the chance of selection of Link D 820 is below a threshold value, or that no data has been submitted for Link D 820. The navigation history 812 also displays a non-zero chance of selecting two links that are not present, Link E and Link F. These links may have been removed from the web page in an update, or they may not be visible to all users, such as the user currently accessing the page. In accordance with aspects of the disclosure, the navigation prediction module 208 identifies Link B 814 as a predicted next navigation event because the confidence value of Link B 814 is greater than the values for Link A 812 and Link C 818.
FIGS. 9A and 9B illustrate an example of a set of arrays for storing navigation events indexed by chronological data. These arrays show one possible implementation of the client navigation history 212 as described above (see FIG. 2). The array depicted in FIG. 9A shows a listing of days of the week, along with the number of times each navigation event was accessed on that particular day. The array depicted in FIG. 9B shows a listing of days of a month, along with the number of times each navigation event was accessed on that particular day of the month. In other aspects, the navigation data may be indexed by additional criteria, such as hours of a day, weeks of a month, months of a year, minutes of an hour, weekdays and weekends, or any other division of chronological data. The navigation history data may be stored on a client device (e.g., a computer executing a web browser), or on a server (e.g., a server maintaining user account data). As the user selects navigation events, the count for the selected navigation event is updated. Although the present example depicts count values associated with particular URLs, the count values could also be stored for URL source/destination pairs.
FIG. 10 is an illustration of an example of a method 1000 for predicting a navigation event in accordance with aspects of the disclosure. The method 1000 provides for tracking of navigation events organized by chronological data. The stored navigation events and chronological data may be used to inform prediction of a likely navigation event, such as by comparing a current set of chronological data (e.g., a current time, the current day of the week), with events that previously occurred at similar chronological values (e.g., the same time, the same day of the week). For example, a user may check a daily news site every morning upon arriving at work at 8:30 a.m. As such, the chronological data would indicate that the navigation event associated with the news site is regularly selected at 8:30 a.m. Therefore, if the user is browsing the web at 8:30 a.m., the method may identify the news website as a likely navigation event, and prerender the news page so that the page loads instantly when selected by the user.
At stage 1002, an array or arrays of navigation events indexed by chronological data are constructed. For example, the array or arrays may have a structure similar to the example arrays described above (see FIG. 9). Each array may be indexed based upon a different set of chronological data (e.g., an array for navigation events sorted by days of the week, an array for navigation events sorted by hours of the day, an array for navigation events stored by weekday vs. weekend, etc.), or the data may be stored in a single, multi-dimensional array. As navigation events are selected, the URL counts stored within the array or arrays may be updated, where the index of the array to be updated may be determined by the current chronological data when the navigation event was selected.
At stage 1004, the current chronological value is determined. The current chronological value represents the present time when the query is performed, such as the current hour, the current hour and minute, the current day of the week, the current time of day, the current month of the year, whether the current day is a weekday or weekend, or the like. For example, the method may query a system clock of the client device executing the method to obtain a current day, time, calendar date, or the like.
At stage 1006, the probability of one or more navigation events is determined using the current chronological data and the array of navigation events. For example, if the current day is a Monday, navigation events accessed on other Mondays may be analyzed to identify the probability of each navigation event. More than one set of data may be combined to determine the probabilities of each event. For example, a weighted average may be taken between multiple probabilities, such as the probability based on the day of the week and the probability based on the hour of the day. An example of a method for determining a probability based on the chronological data is described further below (see FIG. 12).
At stage 1008, the navigation event with the highest probability is selected as the likely navigation event. More than one navigation event may be selected. For example, all navigation events with greater than a threshold probability (e.g., 50%, 75%, or 80%) may be selected as likely navigation events.
At stage 1010, the likely navigation event or events are prerendered. Although the present example describes the use of likely navigation events for prerendering, other actions may also be taken to assist the user with accessing the content associated with the likely navigation event. For example, the likely navigation events may be presented to the user in a separate interface window for selection, or various prefetching processes may be enabled based upon the probability of each navigation event. In some aspects, increasingly aggressive processes are performed in response to the probability of selection of the navigation event. For example, a given navigation event may be prerendered at greater than 90% probability, but only domain name services (DNS) information precached at 60% probability, and no action taken at all at below 10% probability.
FIG. 11 is an illustration of an example of a method 1100 for constructing a chronological data array of navigation events in accordance with aspects of the disclosure. As navigation events are selected, chronological data associated with those events is stored in a chronological data array (see FIG. 9). Elements of the array may correspond to times, days, dates, months, and the like to organize user behavior based on different chronological divisions.
At stage 1102, a navigation event is selected. As described above, the navigation event may be, for example, the selection of a website URL.
At stage 1104, the current chronological data associated with the navigation event is determined. For example, the current day, time, day of the week, day of the month, or the like when the user selected the navigation event may be identified, such as by querying a computer system clock.
At stage 1106, the count associated with the navigation event is updated in each array corresponding to the current chronological data. For example, if a website URL is selected at 8:30 a.m. on Wednesday, Sep. 7, 2011, then the count for the URL may be incremented in arrays corresponding to the time 8:00-9:00 a.m., the day of the week Wednesday, the month of September, the 7th day of the month, and the year 2011. Data stored in each array may be decayed over time. For example, every so often (such as once a day) counts in each entries may be reduced by a fixed percentage, such as reducing the count of the values associated with each URL by a fixed percentage, such that the new percentage is equal to the old percentage multiplied by a weight value (e.g., 40%, 60%, or 90%).
FIG. 12 is an illustration of an example of a method 1200 for identifying a likely navigation event using chronological data in accordance with aspects of the disclosure. Likely navigation events may be predicted by comparing a current set of chronological data (e.g., a current time, calendar day, day of the week, etc.) with a set of navigation events indexed by historical chronological data. As described above with respect to FIG. 12, a user may visit a particular news page when arriving at work every day, thus establishing a pattern of behavior of selection of the navigation event associated with the news page at a particular time of day (e.g., between 8:00 a.m. and 9:00 a.m.) or on particular days of the week (e.g., Monday through Friday). Using the set of historical chronological data, a probability for a given navigation event may be determined. This probability may be compared with probabilities for other navigation events to determine the most likely navigation event.
At stage 1202, a current set of chronological data is determined. This current set of chronological data drives the identification of the likely navigation event, as past user behavior at similar days, times, etc. may be used to predict future behavior.
At stage 1204, a representative sample of navigation events and chronological data is selected from the chronological data, and a probability of the selection of a given navigation event is determined. The probability may be determined by identifying a probability for a given navigation event for each chronological index value, and then taking a weighted average of the probability for the given navigation event across each chronological index. The probability for each index may be determined based upon the ratio of counts for the current URL versus the counts for the other URLs contained within the same index of the array. For example, if the current day is Wednesday, the count for the given navigation event as contained within a “Wednesday” index of the chronological data may be compared against all navigation events contained within the Wednesday index. As such, if the Wednesday bucket contains a count of 75 for URL A, a count of for URL B, and a count of 10 for URL C, then the probability of URL A may be identified as 75%.
It may not be appropriate to examine all data associated with a particular set of chronological data. For example, the date Wednesday Sep. 7, 2011, could conceivably be associated with the day of the week, Wednesday; the type of day, a weekday; the day of the month, the 7th; the month of the year, September; and the year, 2011. While data may exist for each of these separate chronological index values, a certain granularity of data may have too much or too little data to be useful. This problem may be addressed in multiple ways. For example, the method may require a certain threshold number of navigation events to occur across a given set of chronological data before considering that set of data (e.g., the day of the week) for the purposes of probability calculation.
Another method of normalizing data across multiple data sets is to calculate the overall probability using a weighted average of probabilities for particular sets of data. A particular chronological data set may only contain a few values, such that the sample size is not likely to be statistically significant, or the user behavior may not be closely linked to the particular subset of chronological data examined (e.g., the user selects the same pages every day of the week, thus resulting in the day of the week not being a good predictor of future behavior). In some aspects, the weight assigned to a particular probability value may be determined based upon the sample size of the data examined to generate the probability, with more weight being given to values that are generated using at least a threshold number of navigation events.
Other methods of determining the weight of each value may also be employed. For example, the statistical significance of a particular navigation event may be determined by examining the number of standard deviations of the data for a particular URL compared to the data for that URL (or all URLs) contained within other indices of the same array (e.g., if a user visits a particular page much more frequently on a Wednesday than any other day, and today is Wednesday, then it may be correspondingly more likely that the user will visit the particular URL, and thus the day of the week should be given additional weight).
The stages of the illustrated methods described above are not intended to be limiting. The functionality of the methods may exist in a fewer or greater number of stages than what is shown and, even with the depicted methods, the particular order of events may be different from what is shown in the figures.
The systems and methods described above advantageously provide for an improved browsing experience. By predicting the next navigation event, the browser can perform prerender operations to minimize the amount of time users wait for web pages to load. Multiple methods to perform the prerender operations provide a flexible and robust system for determining the next navigation event.
As these and other variations and combinations of the features discussed above can be utilized without departing from the disclosure as defined by the claims, the foregoing description of the embodiments should be taken by way of illustration rather than by way of limitation of the disclosure as defined by the claims. It will also be understood that the provision of examples of the disclosure (as well as clauses phrased as “such as,” “e.g.”, “including” and the like) should not be interpreted as limiting the disclosure to the specific examples; rather, the examples are intended to illustrate only some of many possible embodiments.