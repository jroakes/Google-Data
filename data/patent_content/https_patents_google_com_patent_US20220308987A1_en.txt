US20220308987A1 - Debugging applications for delivery via an application delivery server - Google Patents
Debugging applications for delivery via an application delivery server Download PDFInfo
- Publication number
- US20220308987A1 US20220308987A1 US17/840,328 US202217840328A US2022308987A1 US 20220308987 A1 US20220308987 A1 US 20220308987A1 US 202217840328 A US202217840328 A US 202217840328A US 2022308987 A1 US2022308987 A1 US 2022308987A1
- Authority
- US
- United States
- Prior art keywords
- application
- data processing
- processing system
- delivery
- action
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012384 transportation and delivery Methods 0.000 title claims abstract description 233
- 230000009471 action Effects 0.000 claims abstract description 451
- 238000012545 processing Methods 0.000 claims description 530
- 238000000034 method Methods 0.000 claims description 172
- 230000008569 process Effects 0.000 claims description 104
- 238000001514 detection method Methods 0.000 claims description 5
- 238000009434 installation Methods 0.000 claims description 3
- 238000012552 review Methods 0.000 description 75
- 238000003058 natural language processing Methods 0.000 description 37
- 230000005236 sound signal Effects 0.000 description 37
- 238000003860 storage Methods 0.000 description 18
- 230000000875 corresponding effect Effects 0.000 description 16
- 230000004044 response Effects 0.000 description 14
- 238000004590 computer program Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 12
- 238000004891 communication Methods 0.000 description 8
- 230000000694 effects Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 6
- 230000000007 visual effect Effects 0.000 description 6
- 230000003287 optical effect Effects 0.000 description 5
- 238000013515 script Methods 0.000 description 5
- 230000002730 additional effect Effects 0.000 description 4
- 238000004458 analytical method Methods 0.000 description 4
- 230000000670 limiting effect Effects 0.000 description 4
- 230000000903 blocking effect Effects 0.000 description 3
- 238000006243 chemical reaction Methods 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 238000013475 authorization Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 239000003795 chemical substances by application Substances 0.000 description 2
- 230000001276 controlling effect Effects 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000010801 machine learning Methods 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000004904 shortening Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- IRLPACMLTUPBCL-KQYNXXCUSA-N 5'-adenylyl sulfate Chemical compound C1=NC=2C(N)=NC=NC=2N1[C@@H]1O[C@H](COP(O)(=O)OS(O)(=O)=O)[C@@H](O)[C@H]1O IRLPACMLTUPBCL-KQYNXXCUSA-N 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 235000013305 food Nutrition 0.000 description 1
- 239000000446 fuel Substances 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000000877 morphologic effect Effects 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000008439 repair process Effects 0.000 description 1
- 238000013468 resource allocation Methods 0.000 description 1
- 230000011218 segmentation Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000011524 similarity measure Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/362—Software debugging
- G06F11/366—Software debugging using diagnostics
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3604—Software analysis for verifying properties of programs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/362—Software debugging
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3664—Environments for testing or debugging software
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3692—Test management for test results analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9035—Filtering based on additional data, e.g. user or group profiles
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/906—Clustering; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/907—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/546—Message passing systems or structures, e.g. queues
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/81—Threshold
Definitions
- Applications can be installed on a computing device.
- the computing device can execute the application.
- the present disclosure is generally directed to analyzing or debugging applications for delivery via an application delivery server. Responsive to a request or trigger, applications may perform malicious actions or perform incorrect actions. Performance of malicious or incorrect actions can result in wasted computing resource utilization, bandwidth utilization, and battery utilization on a mobile device. Further, performance of malicious or incorrect actions can cause an increase in remote procedure calls due to repeated requests before the correct action is performed. Cyber security issues may result from the provision of applications that perform malicious actions, and timely identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications that are provided for delivery via an application delivery server, it can be challenging to efficiently and reliably detect applications that perform malicious or incorrect actions, e.g.
- Systems and methods of the present technical solution allow for an application to be reviewed based on historical execution information, simulated actions, or a matched application. Based on the review, the present technical solution can prevent delivery of the application or disable a particular action of the application that is determined to be fraudulent or incorrect.
- At least one aspect is directed to a system to analyze or debug applications for delivery via an application delivery server.
- the system can include a data processing system having one or more processors and memory.
- the data processing system can identify, for an application, a messaging object configured with an action by the application developer.
- the application can be submitted by an application developer.
- the data processing system can determine a first classification score based on historical execution of the action of the messaging object provided by the application developer.
- the data processing system can generate a machine generated action for the application based on metadata associated with the application.
- the data processing system can determine a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action.
- the data processing system can select, via a matching program, a second application that matches the application.
- the data processing system can determine a third classification score based on a comparison of an action approved for the second application with the action of the messaging object provided by the application developer.
- the data processing system can update a delivery control parameter based on one, or more or each of: the first classification score, the second classification score and/or the third classification score.
- the data processing system can control, responsive to the delivery control parameter updated by the data processing system, delivery of the application by the application delivery server.
- the data processing system may be configured to receive the application from an application developer device.
- the data processing system may be configured to receive a data file associated with the application comprising a plurality of actions established by the application developer for the application.
- the data processing system may be configured to receive an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server.
- the data processing system may be configured to trigger, responsive to the indication of the new application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score.
- the data processing system may be configured to receive an indication that the application is an updated version of the application uploaded by the application developer for delivery by the application delivery server.
- the data processing system may be configured to trigger, responsive to the indication of the updated version of the application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score.
- the data processing system may be configured to receive an indication of negative feedback for the application from a client computing device on which the application is installed.
- the data processing system may be configured to trigger, responsive to the indication of the negative feedback for the application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score.
- the data processing system may be configured to determine to trigger a debugging process comprising determination of the first classification score, the second classification score and/or the third classification score prior to delivery of the application for installation on a client computing device.
- the first classification score may indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score with a threshold.
- the data processing system may be configured to determine that the application matches the second application based on a similarity score between the application and the second application greater than a similarity threshold.
- the data processing system may be configured to determine to authorize delivery of the application based on the first classification score, the second classification score and the third classification score.
- the data processing system may be configured to update the delivery control parameter to cause delivery of the application by the application delivery server.
- the data processing system may be configured to determine a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold.
- the data processing system may be configured to determine a classification failure based on the first classification score, the second classification score and the third classification score.
- the data processing system may be configured to update, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server.
- the data processing system may be configured to transmit a notification to the application developer of the classification failure.
- the data processing system may be configured to request, responsive to the classification failure, an updated version of the application from the application developer.
- the data processing system may be configured to determine, for the action of the messaging object, a classification failure based on the first classification score, the second classification score and/or the third classification score.
- the data processing system may be configured to disable, responsive to the classification failure, the action of the messaging object for execution via the application.
- the data processing system may be configured to authorize the application for delivery by the application delivery server.
- the data processing system may be configured to identify a plurality of actions established for the application.
- the data processing system may be configured to determine, via a debugging process for each of the plurality of actions, a first classification score, a second classification score and/or a third classification score.
- the data processing system may be configured to update the delivery control parameter to disable one or more of the plurality of actions based on the debugging process.
- the data processing system may be configured to identify a plurality of digital surfaces for execution of the action of the messaging object of the application.
- the data processing system may be configured to update the delivery control parameter to disable execution of the action of the messaging object of the application on a digital surface of the plurality of digital surfaces.
- the data processing system may be configured to trigger a debugging process for a third application.
- the data processing system may be configured to determine, via the debugging process for the third application, a first classification score for the third application.
- the data processing system may be configured to detect a first classification failure based on a comparison of the first classification score for the third application with a first classification threshold.
- the data processing system may be configured to exit, responsive to detection of the first classification failure, the debugging process for the third application prior to determining a second classification score for the third application and/or a third classification score for the third application.
- the data processing system may be configured to transmit a notification of the first classification failure to an administrator device.
- At least one aspect is directed to a method of analyzing or debugging applications for delivery via an application delivery server.
- the method can be performed by a data processing system having a processor and memory.
- the method can include the data processing system identifying, for an application, a messaging object configured with an action by the application developer.
- the application can be submitted by an application developer.
- the method can include the data processing system determining a first classification score based on historical execution of the action of the messaging object provided by the application developer.
- the method can include the data processing system generating a machine generated action for the application based on metadata associated with the application.
- the method can include data processing system determining a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action.
- the method can include the data processing system selecting, via a matching program, a second application that matches the application.
- the method can include the data processing system determining a third classification score based on a comparison of an action approved for the second application with the action of the messaging object provided by the application developer.
- the method can include the data processing system updating a delivery control parameter based on the first classification score, the second classification score and the third classification score.
- the method can include the data processing system controlling, responsive to the delivery control parameter updated by the data processing system, delivery of the application by the application delivery server.
- the method may comprise receiving, by the data processing system, the application from an application developer device.
- the method may comprise receiving, by the data processing system, a data file associated with the application comprising a plurality of actions established by the application developer for the application.
- the method may comprise determining to authorize delivery of the application based on the first classification score, the second classification score and/or the third classification score.
- the method may comprise updating the delivery control parameter to cause delivery of the application by the application delivery server.
- the method may comprise determining a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold.
- the method may comprise updating, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server.
- At least one aspect is directed to a computer program product that, when implemented on a data processing system of an application delivery server, is configured to cause the data processing system to perform the method of analyzing or debugging applications for delivery via the application delivery server.
- the present invention is intended to cover apparatus configured to perform any feature described herein in relation to a method and/or a method of using or producing, using or manufacturing any apparatus feature described herein.
- FIG. 1 is an illustration of an example system to debug applications
- FIG. 2 is an illustration of an example operation of a system to debug applications
- FIG. 3 is an illustration of an example method of debugging applications.
- FIG. 4 is a block diagram illustrating a general architecture for a computer system that can be employed to implement elements of the systems and methods described and illustrated herein, including, for example, the systems depicted in FIGS. 1 and 2 , and the method depicted in FIG. 3 .
- the present disclosure is generally directed to analyzing or debugging applications for delivery via an application delivery server.
- systems and methods of the present technical solution can analyze or debug actions configured in an application.
- An action can refer to or include a mechanism used by an application developer to surface their application and their content.
- An application developer can specify the actions their application supports.
- the application developer can submit their application, as well as an indication of the actions the application supports, to a data processing system.
- the data processing system upon receiving the application and the indication of the actions provided by the application developer, can debug or review the application.
- the data processing system can debug or review the application before or after making the application available for download or use by end user client devices.
- the data processing system can debug or review the application to determine whether a deep link for the application causes the application to perform a function or provide a content item that is responsive to the requested action. For example, the data processing system can debug the application to determine whether the deep link for the application actually directs a user to a proper screen or state in the application based on the desired action.
- a deep link can refer to a hyperlink or other reference or pointer that links to a specific piece of content, such as a specific state or screen in an application, as opposed to a home page or initial state or screen of the application. Deep linking can refer to a link that points to a page or content that is beyond the highest-level home page or screen or state.
- the data processing system can perform an analysis or debugging process for the application.
- the analysis or debugging process can include fraud detection and quality review. Fraud detection can refer to detecting whether the application is deliberately trying to mislead a user. For example, the user may request to book a ride to a specific destination, but the deep link into the application may take the user to a page that does not wish to fulfill the intent of the user. Instead, the deep link into the application may direct the user to malicious or abusive content.
- Quality review can refer to determining if the deep links directs the user to the desired action and helps fulfill the intent of the user.
- the data processing system can determine whether the intent allegedly being provided by the application is actually provided by the application. For example, a developer of a music streaming service can provide an application with entities for an artist and song. The user may request a song by the artist, which might cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ends up directing the user to a page of a different artist or a different type of page (e.g., audio books), then the deep link may be erroneous or bad.
- applications may perform malicious actions or perform incorrect actions.
- Performance of malicious or incorrect actions can result in wasted computing resource utilization, bandwidth utilization, and battery utilization on a computing device. Further, performance of malicious or incorrect actions can cause an increase in remote procedure calls due to repeated requests before the correct action is performed.
- Cyber security issues may result from the provision of applications that perform malicious actions, and timely automatic identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications that are provided for delivery via an application delivery server, it can be challenging to efficiently and reliably detect malicious or fraudulent applications or perform a quality review on applications without causing delay in the review process.
- Systems and methods of the present technical solution allow for an application to be reviewed based on historical execution information, simulated actions, or a matched application. Based on the review, the present technical solution can prevent delivery of the application or disable a particular action of the application that is determined to be malicious, fraudulent or incorrect.
- a data processing system can include an application review system.
- the data processing system can receive, from an application developer, application metadata.
- Application metadata can include, for example, a title of the application, description of the application, screenshots of the application, an inventory of entities supported by the application, a web site or web corpus indicated entities supported by the application, an intent or action that corresponds to the entities supported by the application, and a mechanism or instruction as to how to construct a deep link for the entities of the application.
- an application for a music streaming surface can provide a name, description, list of artists, songs as entities, and play music as the intent or action to be performed with the entities.
- the data processing system can apply a filter to identify a list of the entities and then sort the entities to identify the top entities.
- the data processing system can construct an application deep link that can trigger the application using a deep link building engine.
- the data processing system can perform a review including crawling the application or website to compare entities that show up via the deep link as compared to entities indicated by the application metadata if the results of the review indicate that the quality of the deep link for the application action is below a threshold.
- the data processing system can then block results of the review that indicate that the quality of the deep link for the application is below a threshold.
- the data processing system can block submission of the application or the action if the quality is below a threshold.
- the data processing system can use or include one or more classifiers to review the application.
- the data processing system can include or be configured with a first classifier that can use feedback from users. For example, “Can Application_A book a ride for you?”.
- the data processing system can collect feedback from the user and if a certain percentage of the users answer “yes” within a predetermined time frame, then the data processing system can determine that the application can perform the desired intent or action.
- the data processing system can include or be configured with a second classifier.
- the second classifier can create a vector based on expanding entities and intents or actions associated with the application to then determine the most relevant intents associated with the application.
- the data processing can parse or process the name of an application, a short description of the application, a long description of the application, and other sources such as user reviews to extract nouns and verbs.
- the data processing system can map the nouns and verbs (e.g., artist name, play music) and map them to actual intents or actions, such as play a song.
- the data processing system can then use a classification technique to determine a level of similarity between the automatically generated or detected intents or actions with the actions registered or provided by the application developer. If the actions are below a threshold level of similarity, then the data processing system can block the application.
- the data processing system can include or be configured with a third classifier.
- the third classifier can determine a classification score for the application based on a similar application.
- the first application can be a ride sharing application.
- the data processing system can identify a second application that is also a ride sharing application and has already passed the review process. If the first application is undergoing a debugging or review process, the data processing system can leverage the results of the second application that is similar to determine if the actions being submitted with the first application are satisfactory. The data processing system can perform this review process responsive to submission of the first application, or on an on-going basis.
- the data processing by using or being configured with one or more classifiers, can improve the quality and reliability of the analysis or debugging process, while also shortening the review process.
- the data processing system via the one or more classifiers, can improve the efficiency of the application review process while also improving the results of the application review process.
- data processing system via the one or more classifiers, can review or debug applications without having to download each application, install the application, set up an account for the application, and then test the application.
- the data processing system can provide an improvement to an application delivery server.
- the data processing system can further provide a reduction in resource consumption or resource utilization by, for example, reducing the number of remote procedure calls or fraudulent remote procedure calls or processing as a result of blocking or preventing delivery of fraudulent or malicious application.
- a fraudulent or malicious application can provide misleading, fraudulent, or erroneous content items responsive to user queries or requests.
- the data processing system can further provide enhanced device security against malicious applications.
- FIG. 1 illustrates an example system 100 to synchronize access controls between computing devices.
- the system 100 can include content selection infrastructure.
- the system 100 can include application delivery infrastructure.
- the system 100 can include an online application store or marketplace.
- the system 100 can include a data processing system 102 .
- the data processing system 102 can communicate with one or more of an application developer device 160 or a client computing device 140 via network 105 .
- the system 100 can also communicate with other devices, such as third-party devices, content provider devices, or digital surface devices.
- the network 105 can include computer networks such as the Internet, local, wide, metro, or other area networks, intranets, satellite networks, and other communication networks such as voice or data mobile telephone networks.
- the network 105 can be used to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed on at least one client computing device 140 , such as a laptop, desktop, tablet, digital assistant device, smart phone, wearable device, portable computers, or speaker.
- client computing device 140 such as a laptop, desktop, tablet, digital assistant device, smart phone, wearable device, portable computers, or speaker.
- a user of the client computing device 140 can access information or data provided by the data processing system 102 or application developer device 160 .
- the network 105 can include or constitute a display network, e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system, or that are eligible to include third party digital components as part of a digital component placement campaign.
- the network 105 can be used by the data processing system 102 to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by the client computing device 140 .
- information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by the client computing device 140 .
- a user of the client computing device 140 can access information or data provided by the data processing system 102 or the application developer device 160 .
- the network 105 may be any type or form of network and may include any of the following: a point-to-point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network.
- the network 105 may include a wireless link, such as an infrared channel or satellite band.
- the topology of the network 105 may include a bus, star, or ring network topology.
- the network may include mobile telephone networks using any protocol or protocols used to communicate among mobile devices, including advanced mobile phone protocol (“AMPS”), time division multiple access (“TDMA”), code-division multiple access (“CDMA”), global system for mobile communication (“GSM”), general packet radio services (“GPRS”) or universal mobile telecommunications system (“UMTS”).
- AMPS advanced mobile phone protocol
- TDMA time division multiple access
- CDMA code-division multiple access
- GSM global system for mobile communication
- GPRS general packet radio services
- UMTS universal mobile telecommunications system
- Different types of data may be transmitted via different protocols, or the same types of data may be transmitted via different protocols.
- the system 100 can include at least one data processing system 102 .
- the data processing system 102 can include at least one logic device such as a computing device having a processor to communicate via the network 105 , for example with the client computing device 140 or the application developer device 160 or other networked device or third-party device.
- the data processing system 102 can include at least one computation resource, server, processor or memory.
- the data processing system 102 can include a plurality of computation resources or servers located in at least one data center.
- the data processing system 102 can include multiple, logically-grouped servers and facilitate distributed computing techniques.
- the logical group of servers may be referred to as a data center, server farm or a machine farm.
- the servers can also be geographically dispersed.
- a data center or machine farm may be administered as a single entity, or the machine farm can include a plurality of machine farms.
- the servers within each machine farm can be heterogeneous—one or more of the servers or machines can operate according to one or more type of operating system platform
- Servers in the machine farm can be stored in high-density rack systems, along with associated storage systems, and located in an enterprise data center. For example, consolidating the servers in this way may improve system manageability, data security, the physical security of the system, and system performance by locating servers and high performance storage systems on localized high performance networks. Centralization of all or some of the data processing system 102 components, including servers and storage systems, and coupling them with advanced system management tools allows more efficient use of server resources, which saves power and processing requirements and reduces bandwidth usage.
- the system 100 can include, access, or otherwise interact with at least one third-party device 162 .
- the third-party device 162 can include at least one logic device such as a computing device having a processor to communicate via the network 105 , for example with the computing device 140 , the data processing system 102 , or the application developer device 160 .
- the third-party device 162 can include at least one computation resource, server, processor or memory.
- third-party device 162 can include a plurality of computation resources or servers located in at least one data center.
- the third-party device 162 can provide audio based digital components for presentation or display by the client computing device 140 as an audio output digital component.
- the digital component can include an offer for a good or service, such as a voice based message that states: “Would you like me to order you a taxi?”
- the third-party device 162 can include memory to store a series of audio digital components that can be provided in response to a voice based query.
- the third-party device 162 can also provide audio based digital components (or other digital components) to the data processing system 102 where they can be stored in the data repository 128 .
- the data processing system 102 can select the audio digital components and provide (or instruct the third-party device 162 to provide) the audio digital components to the client computing device 140 .
- the audio based digital components can be exclusively audio or can be combined with text, image, or video data.
- the third-party device 162 can include, interface with, or otherwise communicate with the data processing system 102 .
- the third-party device 162 can include, interface, or otherwise communicate with the client computing device 140 .
- the third-party device 162 can include, interface, or otherwise communicate with the computing device 140 , which can be a mobile computing device.
- the third-party device 162 can include, interface, or otherwise communicate with the application developer device 160 .
- the third-party device 162 can provide a digital component to the client computing device 140 for execution by the client computing device 140 .
- the third-party device 162 can provide the digital component to the data processing system 102 for storage by the data processing system 102 .
- the third-party device 162 can provide rules or parameters relating to the digital component to the data processing system 102 .
- the client computing device 140 can download an application developed by the application developer device 160 .
- the client computing device 140 can download the application from the data processing system 102 via the network 105 .
- the client computing device can download the application from the application delivery server 110 .
- the client computing device 140 can install the application.
- the client computing device 140 can execute the application.
- the client computing device 140 can execute, launch, trigger or otherwise access or use the application responsive to a user input or trigger event or condition.
- the application can include a front-end component and a back-end component.
- the client computing device 140 can execute or provide the front-end component of the application, while the data processing system 102 or application developer device 160 provides a back-end component of the application.
- the client computing device 140 can include, interface, or otherwise communicate with at least one sensor 144 , transducer 146 , audio driver 148 , or pre-processor 150 .
- the client computing device 140 can include a light source 142 or display device 152 , such as a light indicator, light emitting diode (“LED”), organic light emitting diode (“OLED”), or other visual indicator configured to provide a visual or optic output.
- the sensor 144 can include, for example, an ambient light sensor, proximity sensor, temperature sensor, accelerometer, gyroscope, motion detector, GPS sensor, location sensor, microphone, or touch sensor.
- the transducer 146 can include a speaker or a microphone.
- the audio driver 148 can provide a software interface to the hardware transducer 146 .
- the audio driver can execute the audio file or other instructions provided by the data processing system 102 to control the transducer 146 to generate a corresponding acoustic wave or sound wave.
- the pre-processor 150 can include a processing unit having hardware configured to detect a keyword and perform an action based on the keyword.
- the pre-processor 150 can filter out one or more terms or modify the terms prior to transmitting the terms to the data processing system 102 for further processing.
- the pre-processor 150 can convert the analog audio signals detected by the microphone into a digital audio signal, and transmit one or more data packets carrying the digital audio signal to the data processing system 102 via the network 105 .
- the pre-processor 150 can transmit data packets carrying some or all of the input audio signal responsive to detecting an instruction to perform such transmission.
- the instruction can include, for example, a trigger keyword or other keyword or approval to transmit data packets comprising the input audio signal to the data processing system 102 .
- the client computing device 140 can be associated with an end user that enters voice queries as audio input into the client computing device 140 (via the sensor 144 ) and receives audio output in the form of a computer generated voice that can be provided from the data processing system 102 (or the application developer device 160 or the third-party device 162 ) to the client computing device 140 , output from the transducer 146 (e.g., a speaker).
- the computer generated voice can include recordings from a real person or computer generated language.
- the client computing device 140 may or may not include a display.
- the computing device may include limited types of user interfaces, such as a microphone and speaker.
- the primary user interface of the computing device 140 may be a microphone and speaker, or voice interface.
- the primary user interface of the client computing device 140 can include a voice-based or audio-based user interface.
- the client computing device 140 can include a display and have the primary user interface be voice-based or audio-based.
- the primary user interface of the client computing device 140 can be conversational.
- a conversational user interface can refer to a user interface that is at least in part driven or facilitated by a natural language processor component 106 of the data processing system 102 .
- the data processing system 102 can include a content placement system having at least one computation resource or server.
- the data processing system 102 can include, interface, or otherwise communicate with at least one interface 104 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one natural language processor component 106 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one direct action application programming interface (“API”) 108 .
- API application programming interface
- the interface 104 , natural language processing component 106 and direct action API 108 can provide a conversational API or digital assistant functionality.
- the conversational API or digital assistant can communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces in order to provide data or receive data or perform other functionality.
- the data processing system 102 can include, interface, or otherwise communicate with at least one application delivery server 110 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one delivery controller component 112 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one deep link builder component 114 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one first classifier component 116 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one second classifier component 118 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one third classifier component 120 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one matching engine component 122 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one action generator 124 .
- the data processing system 102 can include, interface, or otherwise communicate with at least one data repository 128 .
- the interface 104 , natural language processor component 106 , direct action API 108 , application delivery server 110 , delivery controller component 112 , deep link builder component 114 , first classifier component 116 , second classifier component 118 , third classifier component 120 , matching engine component 122 , and action generator 124 can each include at least one processing unit or other logic device such as programmable logic array engine, or module configured to communicate with the database repository 128 or database.
- the interface 104 , natural language processor component 106 , direct action API 108 , application delivery server 110 , delivery controller component 112 , deep link builder component 114 , first classifier component 116 , second classifier component 118 , third classifier component 120 , matching engine component 122 , action generator 124 and data repository 128 can be separate components, a single component, or part of the data processing system 102 .
- the system 100 and its components, such as a data processing system 102 can include hardware elements, such as one or more processors, logic devices, or circuits.
- the data processing system 102 can obtain anonymous computer network activity information associated with a plurality of client computing devices 140 (or computing device or digital assistant device).
- a user of a client computing device 140 or mobile computing device can affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the client computing device 140 or mobile computing device.
- the data processing system 102 can prompt the user of the computing device 140 for consent to obtain one or more types of network activity information.
- the client computing device 140 can include a mobile computing device, such as a smartphone, tablet, smartwatch, or wearable device.
- the identity of the user of the client computing device 140 can remain anonymous and the computing device 140 can be associated with a unique identifier (e.g., a unique identifier for the user or the computing device provided by the data processing system or a user of the computing device).
- the data processing system can associate each observation with a corresponding unique identifier.
- the data processing system 102 can interface with a third-party device 162 .
- the third-party device 162 can include or refer to a device of a content provider.
- the content provider can establish an electronic content campaign.
- the electronic content campaign can be stored as content data in the data repository 128 .
- An electronic content campaign can refer to one or more content groups that correspond to a common theme.
- a content campaign can include a hierarchical data structure that includes content groups, digital component data objects, and content selection criteria. To create a content campaign, the content provider can specify values for campaign level parameters of the content campaign.
- the campaign level parameters can include, for example, a campaign name, a preferred content network for placing digital component objects, a value of resources to be used for the content campaign, start and end dates for the content campaign, a duration for the content campaign, a schedule for digital component object placements, language, geographical locations, type of computing devices on which to provide digital component objects.
- an impression can refer to when a digital component object is fetched from its source (e.g., data processing system 102 or content provider), and is countable.
- robotic activity can be filtered and excluded, as an impression.
- an impression can refer to a measurement of responses from a Web server to a page request from a browser, which is filtered from robotic activity and error codes, and is recorded at a point as close as possible to opportunity to render the digital component object for display on the computing device 140 .
- an impression can refer to a viewable or audible impression; e.g., the digital component object is at least partially (e.g., 20%, 30%, 30%, 40%, 50%, 60%, 70%, or more) viewable on a display device 152 of the client computing device 140 , or audible via a speaker 136 of the computing device 140 .
- a click or selection can refer to a user interaction with the digital component object, such as a voice response to an audible impression, a mouse-click, touch interaction, gesture, shake, audio interaction, or keyboard click.
- a conversion can refer to a user taking a desired action with respect to the digital component objection; e.g., purchasing a product or service, completing a survey, visiting a physical store corresponding to the digital component, or completing an electronic transaction.
- the content provider can further establish one or more content groups for a content campaign.
- a content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interest, topic, or vertical.
- Content groups under the same content campaign can share the same campaign level parameters, but may have tailored specifications for particular content group level parameters, such as keywords, negative keywords (e.g., that block placement of the digital component in the presence of the negative keyword on main content), bids for keywords, or parameters associated with the bid or content campaign.
- the content provider can provide values for the content group level parameters of the content group.
- the content group level parameters include, for example, a content group name or content group theme, and bids for different content placement opportunities (e.g., automatic placement or managed placement) or outcomes (e.g., clicks, impressions, or conversions).
- a content group name or content group theme can be one or more terms that the content provider can use to capture a topic or subject matter for which digital component objects of the content group is to be selected for display. For example, a car dealership can create a different content group for each brand of vehicle it carries, and may further create a different content group for each model of vehicle it carries.
- Examples of the content group themes that the car dealership can use include, for example, “Make A sports car” “Make B sports car,” “Make C sedan,” “Make C truck,” “Make C hybrid,” or “Make D hybrid.”
- An example content campaign theme can be “hybrid” and include content groups for both “Make C hybrid” and “Make D hybrid”, for example.
- the content provider can provide one or more keywords and digital component objects to each content group. Keywords can include terms that are relevant to the product or services of associated with or identified by the digital component objects.
- a keyword can include one or more terms or phrases.
- the car dealership can include “sports car,” “V-6 engine,” “four-wheel drive,” “fuel efficiency,” as keywords for a content group or content campaign.
- negative keywords can be specified by the content provider to avoid, prevent, block, or disable content placement on certain terms or keywords.
- the content provider can specify a type of matching, such as exact match, phrase match, or broad match, used to select digital component objects.
- the content provider can provide one or more keywords to be used by the data processing system 102 to select a digital component object provided by the content provider.
- the content provider can identify one or more keywords to bid on, and further provide bid amounts for various keywords.
- the content provider can provide additional content selection criteria to be used by the data processing system 102 to select digital component objects. Multiple content providers can bid on the same or different keywords, and the data processing system 102 can run a content selection process or ad auction responsive to receiving an indication of a keyword of an electronic message.
- the content provider can provide one or more digital component objects for selection by the data processing system 102 .
- the data processing system 102 can select the digital component objects when a content placement opportunity becomes available that matches the resource allocation, content schedule, maximum bids, keywords, and other selection criteria specified for the content group.
- Different types of digital component objects can be included in a content group, such as a voice digital component, audio digital component, a text digital component, an image digital component, video digital component, multimedia digital component, or digital component link.
- a digital component object (or digital component) can include, for example, a content item, an online document, audio, images, video, multimedia content, or sponsored content.
- the data processing system 102 can transmit the digital component object for rendering on a computing device 140 or display device 152 of the computing device 140 .
- Rendering can include displaying the digital component on a display device, or playing the digital component via a speaker of the computing device 140 .
- the data processing system 102 can provide instructions to a computing device 140 to render the digital component object.
- the data processing system 102 can instruct the computing device 140 , or an audio driver 148 of the computing device 140 , to generate audio signals or acoustic waves.
- the data repository 124 can include one or more local or distributed databases, and can include a database management system.
- the data repository 128 can include computer data storage or memory and can store one or more of application (“app”) data 130 , scores 132 , historical data 134 , parameters 136 , or thresholds 138 , among other data.
- the data repository 128 can store the one or more of application (“app”) data 130 , scores 132 , historical data 134 , parameters 136 , or thresholds 138 in one or more data structures, databases, data files, indexes, or other type of data storage.
- the app data 130 can include information about an application.
- the app data 130 can include information about an application submitted by an application developer device 160 .
- the app data 130 can include metadata associated with an application.
- App data 130 can include, for example, a title of an application, short description, detail description, version identifier, entities, actions, intents, compatibility information, size, type of application, category of the application, among other information.
- App data 130 can include a unique identifier of the application, such as an alphanumeric identifier.
- App data 130 can include information about the application developer that provided or submitted the application.
- Scores 132 can refer to a classification score of the application. Scores 132 can include a first classification score, second classification score, third classification score or combined classification score for an application.
- the data processing system 102 can review or process an application to determine the one or more scores, and store the scores for the application in the scores 132 data structure. Scores can be numerical, alphanumeric, letter grade, rank, symbol, text, binary, or otherwise provide an indication of a result of a review process of the application. For example, the score can include a numeric score in the range of 0 to 100, where 0 represents the lowest level or likelihood of fraud, and 100 represent the highest level or likelihood of fraud. The score can indicate whether the application passes the review process.
- a score of 100 can indicate that the application passed the review process, whereas a score of 0 can indicate that the application failed the review process.
- the score can be a letter grade, such as “A”, “B”, “C”, “D”, or “F”, where the letter grade of A can indicate that the application passed the review process, and a letter grade of F indicates that the application failed the review process.
- the score can be a keyword or text, such as “Pass” or “Fail”.
- the score can be binary, such as “0” or “1”.
- Historical data 134 can include data related to an application. Historical data 134 can include data related to execution or use of an application. Historical data 134 can include data related to a previous use or execution of the application by a client computing device 140 . Historical data 134 can include feedback related to a previous use or execution of the application.
- a client computing device 140 can execute the application.
- the client computing device 140 can include a monitor or agent executing on the client computing device 140 that can identify aspects related to the application, such as the number of remote procedure calls, repeated requests made to the application, indications of erroneous responses or content data provided by the application, or indications of fraudulent or misleading content data or responses provided by the application.
- the client computing device 140 can provide feedback from a user regarding the execution of the application.
- the client computing device 140 can provide a prompt to a user of the application as to whether the application provided a satisfactory response or performed the requested or desired action.
- the prompt can include “Did Application_A satisfactorily perform the requested action?”
- the historical data 134 can include or store such feedback from the monitor or agent executing on the client computing device 140 , as well as feedback to prompts or surveys provided by a user of the client computing device 140 or application.
- the data repository 128 can store a parameter 136 .
- Parameter 136 can refer to or include a parameter data structure.
- Parameter 136 can refer to or include a delivery control parameter.
- a delivery control parameter is a parameter that can cause the application delivery server 110 to deliver an application, block delivery of an application, authorize an action of an application, or disable an action of an application.
- Each application that has been reviewed or processed by the data processing system 102 can be associated with a delivery control parameter.
- the delivery control parameter can be an instruction, numeric parameter, alphanumeric value, flag, tag, or other indicator that can cause the application delivery server 110 to adjust whether or how an application is delivered to a client computing device 140 .
- the data repository 128 can include or store a threshold 138 .
- the threshold 138 can refer to or include a threshold data structure.
- the data processing system 102 can compare a score 132 (e.g., a classification score) of an application with the threshold 138 in order to determine whether the application passes or fails a classification.
- the thresholds 138 can be the same or different for each type of classification.
- Thresholds 138 can be absolute thresholds (e.g., an absolute or fixed value), a percentage threshold, a ratio threshold.
- the threshold 138 can be a dynamic threshold that can vary based on metadata associated with an application.
- the threshold 138 can vary based on feedback, real-time information, or other factors.
- the threshold 138 can vary based on the type of application or version of the application (e.g., new application being submitted, or a new version of the application).
- the threshold 138 can be set for a specific application and vary based on, for example, the number of times the application has been installed (e.g., lower threshold for an application with more than 100,000 downloads because a high download count may indicate that the application is less likely to be fraudulent or provide erroneous content). In some cases, the threshold may be higher for an application with a high download count so the data processing system 102 can prevent a large number of erroneous responses or wasted remote procedure calls or other computing resource utilization.
- the data processing system 102 can include an interface 104 (or interface component) designed, configured, constructed, or operational to receive and transmit information using, for example, data packets.
- the interface 104 can receive and transmit information using one or more protocols, such as a network protocol.
- the interface 104 can include a hardware interface, software interface, wired interface, or wireless interface.
- the interface 104 can facilitate translating or formatting data from one format to another format.
- the interface 104 can include an application programming interface that includes definitions for communicating between various components, such as software components.
- the interface 104 can communicate with one or more of the client computing device 140 , application developer device 160 , or third-party device 162 via network 105 .
- the data processing system 102 can interface with an application, script or program installed at the client computing device 140 , such as an app to communicate input audio signals to the interface 104 of the data processing system 102 and to drive components of the local client computing device to render output audio signals.
- the data processing system 102 can receive data packets or other signal that includes or identifies an audio input signal.
- the data processing system 102 can include a natural language processor (“NLP”) component 106 .
- NLP natural language processor
- the data processing system 102 can execute or run the NLP component 106 to receive or obtain the audio signal and parse the audio signal.
- the NLP component 106 can provide for interactions between a human and a computer.
- the NLP component 106 can be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input.
- the NLP component 106 can include or be configured with technique based on machine learning, such as statistical machine learning.
- the NLP component 106 can utilize decision trees, statistical models, or probabilistic models to parse the input audio signal.
- the NLP component 106 can perform, for example, functions such as named entity recognition (e.g., given a stream of text, determine which items in the text map to proper names, such as people or places, and what the type of each such name is, such as person, location, or organization), natural language generation (e.g., convert information from computer databases or semantic intents into understandable human language), natural language understanding (e.g., convert text into more formal representations such as first-order logic structures that a computer module can manipulate), machine translation (e.g., automatically translate text from one human language to another), morphological segmentation (e.g., separating words into individual morphemes and identify the class of the morphemes, which can be challenging based on the complexity of the morphology or structure of the words of the language being considered), question answering (e.g., determining an answer to a human-language question, which can be specific or open-ended), semantic processing (e.g., processing that can occur after identifying a word and encoding its meaning in order to relate the
- the NLP component 106 can convert the audio input signal into recognized text by comparing the input signal against a stored, representative set of audio waveforms (e.g., in the data repository 128 ) and choosing the closest matches.
- the set of audio waveforms can be stored in data repository 128 or other database accessible to the data processing system 102 .
- the representative waveforms are generated across a large set of users, and then may be augmented with speech samples from the user.
- the NLP component 106 matches the text to words that are associated, for example via training across users or through manual specification, with actions that the data processing system 102 can serve.
- Aspects or functionality of the NLP component 106 can be performed by the data processing system 102 or the client computing device 140 .
- a local NLP component can execute on the client computing device 140 to perform aspects of converting the input audio signal to text and transmitting the text via data packets to the data processing system 102 for further natural language processing.
- the audio input signal can be detected by the sensor 144 or transducer 146 (e.g., a microphone) of the client computing device 140 . Via the transducer 146 , the audio driver 148 , or other components the client computing device 140 can provide the audio input signal to the data processing system 102 (e.g., via the network 105 ) where it can be received (e.g., by the interface 104 ) and provided to the NLP component 106 or stored in the data repository 128 .
- the data processing system 102 e.g., via the network 105
- the client computing device 140 can include an audio driver 148 , a transducer 146 , a sensor 144 and a pre-processor component 150 .
- the sensor 144 can receive or detect an input audio signal (e.g., voice input).
- the pre-processor component 150 can be coupled to the audio driver, the transducer, and the sensor.
- the pre-processor component 150 can filter the input audio signal to create a filtered input audio signal (e.g., by removing certain frequencies or suppressing noise).
- the pre-processor component 150 can convert the filtered input audio signal to data packets (e.g., using a software or hardware digital-to-analog converter).
- the pre-processor component 150 can convert the unfiltered input audio signal to data packets and transmit the data packets to the data processing system 102 .
- the pre-processor component 150 can transmit the data packets to a data processing system 102 comprising one or more processors and memory that execute a natural language processor component, an interface, a speaker recognition component, and a direct action application programming interface.
- the data processing system 102 can receive, via the interface, from the pre-processor component, the data packets comprising the filtered (or unfiltered) input audio signal detected by the sensor.
- the data processing system 102 can identify an acoustic signature from the input audio signal.
- the data processing system 102 can identify, based on a lookup in a data repository (e.g., querying a database), an electronic account corresponding to the acoustic signature.
- the data processing system 102 can establish, responsive to identification of the electronic account, a session and an account for use in the session.
- the account can include a profile having one or more policies.
- the data processing system 102 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request.
- the data processing system 102 can provide, to the pre-processor component 150 of the client computing device 140 , a status.
- the client computing device 140 can receive the indication of the status.
- the audio driver can receive the indication of the status of the profile, and generate an output signal based on the indication.
- the audio driver can convert the indication to an output signal, such as sound signal, or acoustic output signal.
- the audio driver can drive the transducer 146 (e.g., speaker) to generate sound based on the output signal generated by the audio drive.
- the client computing device 140 can include a light source 142 .
- the light source can include one or more LEDs, lights, display, or other component or device configured to provide an optical or visual output.
- the pre-processor component 150 can cause the light source to provide a visual indication corresponding to the status.
- the visual indication can be a status indicator light that turns on, a change in color of the light, a light pattern with one or more colors, or a visual display of text or images.
- the NLP component 106 can obtain the input audio signal. From the input audio signal, the NLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request.
- the request can indicate intent or subject matter of the input audio signal.
- the trigger keyword can indicate a type of action likely to be taken.
- the trigger keyword can be a wakeup signal or hotword that indicates to the client computing device 140 to convert the subsequent audio input into text and transmit the text to data processing system 102 for further processing.
- the NLP component 106 can parse the input audio signal to identify at least one request to leave home for the evening to attend dinner and a movie.
- the trigger keyword can include at least one word, phrase, root or partial word, or derivative indicating an action to be taken.
- the trigger keyword “go” or “to go to” from the input audio signal can indicate a need for transport.
- the input audio signal (or the identified request) does not directly express an intent for transport, however the trigger keyword indicates that transport is an ancillary action to at least one other action that is indicated by the request.
- the NLP component 106 can parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and the trigger keyword. For instance, the NLP component 106 can apply a semantic processing technique to the input audio signal to identify the trigger keyword or the request. The NLP component 106 can apply the semantic processing technique to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal can include the sentence “I want a ride to the airport.” The NLP component 106 can apply a semantic processing technique, or other natural language processing technique, to the data packets comprising the sentence to identify the request or trigger phrases “want a ride” and “airport”. The NLP component 106 can further identify multiple trigger keywords, such as want and ride. For example, the NLP component 106 can determine that the trigger phrase includes the trigger keyword and a second trigger keyword.
- the NLP component 106 can filter the input audio signal to identify the trigger keyword.
- the data packets carrying the input audio signal can include “It would be great if I could get someone that could help me go to the airport”, in which case the NLP component 106 can filter out one or more terms as follows: “it”, “would”, “be”, “great”, “if”, “I”, “could”, “get”, “someone”, “that”, “could”, or “help”. By filtering out these terms, the NLP component 106 may more accurately and reliably identify the trigger keywords, such as “go to the airport” and determine that this is a request for a taxi or a ride sharing service.
- the NLP component 106 can determine that the data packets carrying the input audio signal includes one or more requests.
- the input audio signal can include the sentence “I want to purchase an audiobook and monthly subscription to movies.”
- the NLP component 106 can determine this is a request for an audio book and a streaming multimedia service.
- the NLP component 106 can determine this is a single request or multiple requests.
- the NLP component 106 can determine that this is two requests: a first request for a service provider that provides audiobooks, and a second request for a service provider that provides movie streaming.
- the NLP component 106 can combine the multiple determined requests into a single request, and transmit the single request to a third-party device 162 .
- the NLP component 106 can transmit the individual requests to another service provider device, or separately transmit both requests to the same third-party device 162 .
- the data processing system 102 can include a direct action API 108 designed and constructed to generate, based on the trigger keyword, an action data structure responsive to the request.
- the direct action API 108 can generate the action data structure to cause an application to perform the corresponding action.
- the direct action API 108 can transmit the action data structure to the application installed on the client computing device 140 to cause the client computing device 140 to perform the corresponding action or initiate an action.
- the action data structure generated by the direct action API 108 can include a deep link for an application installed on the client computing device 140 .
- the application installed on the client computing device 140 can then perform the action or communicate with the application developer device 160 or a third-party device 162 to perform the action.
- Processors of the data processing system 102 can invoke the direct action API 108 to execute scripts that generate a data structure to provide to an application installed on the client computing device 140 , an application developer device 160 , or a third-party device 162 or other service provider to obtain a digital component, order a service or product, such as a car from a car share service or an audiobook.
- the direct action API 108 can obtain data from the data repository 128 , as well as data received with end user consent from the client computing device 140 to determine location, time, user accounts, logistical or other information to allow the third-party device 162 to perform an operation, such as reserve a car from the car share service.
- the data processing system 102 can also communicate with the third-party device 162 to complete the conversion by in this example making the car share pick up reservation.
- the direct action API 108 can execute a specified action to satisfy the end user's intention, as determined by the data processing system 102 .
- the direct action API 108 can execute code or a dialog script that identifies the parameters required to fulfill a user request.
- the direct action API 108 can execute an application to satisfy or fulfill the end user's intention.
- Such code can look-up additional information, e.g., in the data repository 128 , such as the name of a home automation service, or third-party service, or it can provide audio output for rendering at the client computing device 140 to ask the end user questions such as the intended destination of a requested taxi.
- the direct action API 108 can determine parameters and can package the information into an action data structure, which can then be sent to another component such as the application delivery server 110 to be fulfilled.
- the direct action API 108 can receive an instruction or command from the NLP component 106 , or other component of the data processing system 102 , to generate or construct the action data structure.
- the direct action API 108 can determine a type of action in order to select a template stored in the data repository 128 .
- the actions can be fulfilled by application provided by the application delivery server 110 and submitted by an application developer device 160 .
- the application can perform or facilitate the performance of the action.
- Example types of actions can include, for example, watch action, listen action, read action, navigation action, or weather action.
- Types of actions can include or be configured to provide, for example, services, products, reservations, tickets, multimedia content, audiobook, manage subscriptions, adjust subscriptions, transfer digital currency, make purchases, or music.
- Types of actions can further include types of services or products.
- types of services can include car share service, food delivery service, laundry service, maid service, repair services, household services, device automation services, or media streaming services.
- Types of products can include, for example, clothes, shoes, toys, electronics, computers, books, or jewelry.
- Types of reservations can include, for example, dinner reservations or hair salon appointments.
- Types of tickets can include, for example, movie tickets, sports venue tickets, or flight tickets. In some cases, the types of services, products, reservations or tickets can be categorized based on price, location, type of shipping, availability, or other attributes.
- the NLP component 106 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request, and provide the request and trigger keyword to the direct action API 108 to cause the direct action API to generate, based on the trigger keyword, a first action data structure responsive to the request.
- the direct action API 108 upon identifying the type of request, can access the corresponding template from a template repository (e.g., data repository 128 ). Templates can include fields in a structured data set that can be populated by the direct action API 108 to further the operation that is requested via input audio detected by the client computing device 140 (such as the operation of sending a taxi to pick up an end user at a pickup location and transport the end user to a destination location).
- the direct action API 108 can launch or trigger an application to fulfill the request in the input audio.
- a car sharing service application can include one or more of the following fields: device identifier, pick up location, destination location, number of passengers, or type of service.
- the direct action API 108 can populate the fields with values.
- the direct action API 108 can ping, poll or otherwise obtain information from one or more sensors 144 of the computing device 140 or a user interface of the device 140 .
- the direct action API 108 can detect the source location using a location sensor, such as a GPS sensor.
- the direct action API 108 can obtain further information by submitting a survey, prompt, or query to the end of user of the computing device 140 .
- the direct action API can submit the survey, prompt, or query via interface 104 of the data processing system 102 and a user interface of the computing device 140 (e.g., audio interface, voice-based user interface, display, or touch screen).
- the direct action API 108 can select a template for the action data structure based on the trigger keyword or the request, populate one or more fields in the template with information detected by one or more sensors 144 or obtained via a user interface, and generate, create or otherwise construct the action data structure to facilitate performance of an operation by the third-party device 162 .
- the data processing system 102 can include, interface with or otherwise access an application delivery server 110 .
- the data processing system 102 can include an application delivery server 110 .
- the application delivery server 110 can be separate from the data processing system 102 .
- the application delivery server 110 can be a separate system or server from the data processing system 102 .
- the data processing system 102 can communicate with the application delivery server 110 via network 105 .
- the application delivery server 110 can receive an application submitted by an application developer device 160 .
- the application delivery server 110 can maintain one or more versions of an application.
- the application delivery server 110 can transmit the application to a client computing device 140 .
- the application delivery server 110 can download the application onto a client computing device 140 .
- the application delivery server 110 can maintain an online application store or marketplace.
- the application delivery server 110 can manage or maintain accounts for application developer devices 160 or client computing devices 140 .
- the application delivery server 110 can maintain profiles for the accounts.
- the accounts or profiles can be associated with a unique identifier.
- the account can include a financial account or token account that can be used to purchase or subscribe to application.
- the application delivery server 110 can prompt a user of a client computing device 140 to pay for an application by providing electronic account information, such as an electronic financial account.
- the application delivery server 110 can provide authentication and authorization services for the accounts of the client computing device 140 or application developer device 160 .
- the application delivery server 110 can authenticate and authorize an application developer device 160 prior to submission of the application.
- the application delivery server 110 can authenticate and authorize a client computing device 140 prior to allowing the client computing device 140 to download the application.
- the data processing system 102 (e.g., via application delivery server 110 ) can receive an application submitted by the application developer device 160 .
- the data processing system 102 can receive a new application, or an updated version of an application previously submitted.
- the application can be associated with one or more actions or intents.
- An action can refer to a messaging object.
- the messaging object can be configured with an action.
- the application developer 160 can establish the application with the messaging object and action to cause the application to fulfill the action or perform an action.
- the action can refer to an intent.
- the action can be performed on an entity.
- the application can be configured to perform the action on an inventory of entities. For example, the action can refer to “playing a song” and an entity can be a specific song.
- the application can be for a music streaming service and can be configured to fulfill a request to play a song by an artist.
- the data processing system 102 can receive a data file associated with the application.
- the data file can include multiple actions established by the application developer device 160 for the application.
- the application developer device 160 can provide the data file along with the application submission to the data processing system 102 .
- the data file can be in a format, such as a markup language, a metalanguage, a custom markup language, an extensible markup language, text, or other format.
- the data file can indicate actions that the application is configured to perform or fulfill.
- the data file can provide an indication of an inventory of entities on which the application is configured to perform the action, or configured to access to otherwise fulfill the request or desired intent of the user.
- the inventory of entities can be provided as a list in the data file.
- the data file can include a pointer, reference, uniform resource locator, or other indicator that points to a data repository or entities.
- the data processing system 102 can access the link to a webpage containing entities.
- the data processing system 102 can parse or otherwise process the webpage to identify the entities accessible to the application.
- the data processing system 102 can perform a debugging process for the application.
- the data processing system 102 can perform a review process on the application.
- the data processing system 102 can perform the review or debugging process responsive to an event, trigger condition, request, or instruction.
- the data processing system 102 can perform the debugging or review process based on a time interval (e.g., periodically every 6 hours, 12 hours, 24 hours, 48 hours, 1 week, 30 days or some other time interval).
- the data processing system 102 can perform the debugging or review process based on a number of downloads of the application (e.g., after 100 downloads, 500 downloads, 1,000 downloads, 5,000 downloads, 10,000 downloads, or some other number of downloads).
- the data processing system 102 can perform the debugging or review process responsive to a negative user feedback or negative rating or negative review of the application.
- the data processing system 102 can perform the debugging or review process responsive to a request from a user to perform the review process.
- the data processing system 102 can perform the debugging or review process responsive to receiving a new application or an update to an application.
- the data processing system 102 can receive an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server.
- the indication that the application is a new application can include, for example, the application developer 160 providing an indication that this is the first version of the application, providing a new name for the application that is not previously recognized or stored in the data processing system 102 , or selecting a button in a user interface to indicate that the application is a new application.
- the data processing system 102 can determine that the application is a new version or an update to the application based on the application developer device 160 indicating that the application is the next version (e.g., sequence of version numbers), the data processing system 102 determining that an application with the same name from the same application developer device 160 already exists with the data processing system 102 .
- the data processing system 102 can trigger, responsive to the indication of the new application or a new version of the application, a debugging process. In some cases, the data processing system 102 may determine not to trigger the debugging process for a new version of the application if the data processing system 102 had determining that the previous version of the application previously satisfied the review process, thereby reducing computing resource utilization.
- the data processing system 102 can determine to perform the debugging process based on the type of application or a functionality of the application. For example, the data processing system 102 can identify, for an application submitted by an application developer, a messaging object configured with an action by the application developer. Responsive to determining that the application is configured with actions, the data processing system 102 can initiate a debugging process in order to determine whether the actions are fraudulent, misleading, or erroneous.
- the data processing system 102 can determine to trigger the debugging process prior to delivery of the application for installation on any client computing device 140 . In some cases, the data processing system 102 can determine to trigger the debugging process after the application has already been installed on at least one client computing device 140 . For example, the data processing system 102 can determine to perform the debugging process responsive to negative feedback associated with the installed application. The data processing system 102 can receive an indication of negative feedback for the application from a client computing device 140 on which the application is installed. The data processing system 102 can trigger, responsive to the indication of the negative feedback for the application, the debugging process.
- the debugging process can include determining one or more classification scores, such as a first classification score, a second classification score and a third classification score.
- the data processing system 102 can include, interface with or otherwise access a first classifier component 116 .
- the data processing system 102 can include a first classifier component 116 designed, constructed and operational to determine a first classification score.
- the first classifier component 116 can determine the first classification score.
- the data processing system 102 (e.g., via the first classifier component 116 ) can determine the first classification score based on historical execution of the action of the messaging object provided by the application developer.
- the data processing system 102 can determine the first classification score based on whether previous calls to the application to perform the action resulted in fulfillment of the action.
- the data processing system 102 can determine the first classification score based on user feedback based on previous executions of the action by the application.
- multiple client computing devices 140 may have installed the application. Users of the client computing devices 140 may have requested the application to perform an action, such as play a particular song. The application may or may not have played the song responsive to the request from the user. The user of the client computing device 140 , based on their previous interactions with the applications and previous execution of an action with the application, can provide feedback on the application. For example, the application delivery server 110 can provide a prompt or other graphical user interface via which the user of the client computing device 140 can provide an indication as to whether the application fulfilled the action the user requested of the application.
- the rating system can include a score.
- the score can be stored in the score data structure 132 in data repository 128 .
- the data processing system 102 can determine the first classification score based on feedback from users that made requests to the application. For example, users can rate the application on a scale of 1 to 5, where 5 indicates that the application fulfills requests well, and 1 indicates that the application does not fulfill requests well.
- the data processing system 102 can provide a prompt or query to a user of the client computing device 140 to obtain information about the application.
- the data processing system 102 (e.g., via first classifier component 116 ) can construct a prompt or query to obtain information about the application and whether the application can fulfill certain types of actions or requests.
- the data processing system 102 can determine, from application data 130 , a category of the application or a type of the application (e.g., ridesharing, music service, news, or weather).
- the data processing system 102 can determine types of actions configured for the application from a data file submitted with the application that lists actions configured or established by the application developer device 160 for the application.
- the data processing system 102 can construct a query or survey.
- the application data 130 can indicate that the application is a ridesharing application.
- the data processing system 102 can determine that an action of the application may be to provide a ride to a user.
- the data processing system 102 can generate a query such as “Does Application_A provide rides?”
- the data processing system 102 can transmit the query to a client computing device 140 that has installed the application.
- the data processing system 102 can provide the query to a client computing device 140 that has executed the action for the application.
- the data processing system 102 can determine whether the client computing device 140 has downloaded, installed, or executed the action for the application based on account information stored in the data repository 128 , or information stored on the client computing device 140 .
- the data processing system 102 can obtain feedback from users of the client computing device 140 as to whether the application is configured to fulfill the actions the application developer 160 indicates that the application is configured to fulfill.
- the first classification score can indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score with a threshold (e.g., threshold 138 stored in data repository 128 ).
- the first classifier component 116 can obtain feedback from users of client computing devices 140 in various forms, including, for example, written reviews, scores, responses to surveys, responses to queries, users uninstalling the application after trying to execute an action, or other types of feedback.
- the first classifier component 116 using one or more types of feedback, can generate the first classification score.
- the first classifier component 116 can determine an average score from the individual ratings, and use the average score as the first classification score.
- the first classifier component 116 can combine two or more different types of feedback scores to generate a single feedback score as the first classification score.
- the first classifier component 116 can combine the different types of feedback scores by multiplying the scores, adding the scores, taking a dot product of the scores, inputting the scores into a function, or otherwise combining the scores.
- the first classifier component 116 can combine the scores by taking an average of the different scores.
- the first classifier component 116 can combine the scores by applying a weight to the different scores before combining the scores.
- the first classifier component 116 can generate the first classification score as a weighted average of the different scores.
- the first classification component 116 to generate the first classification score, can reformat, translate, transform or otherwise manipulate the individual feedback scores from the different feedback sources.
- the data processing system 102 can generate a first feedback score from parsing reviews of the application, a second feedback score based on user ratings of the application in an online application delivery marketplace managed by the application delivery server 110 , and a third feedback score based on survey results from users.
- the data processing system 102 can convert each of these different feedback scores into a normalized feedback score, and then combine the normalized scores (e.g., via an average) in order to generate the first classification score.
- the first classification component 116 can store the first classification score in the score data structure 132 for further processing by the data processing system 102 .
- the data processing system 102 can include, interface with or otherwise access an action generator 124 designed, constructed and operative to generate a machine generated action for the application based on metadata associated with the application.
- the data processing system 102 can generate an action based on application data 130 , including, for example, a title of the application, short description, long description, metadata, entities, content, or user reviews.
- the action generator 124 can take, as input, the name, short description, long description, user reviews or other sources to extract nouns and verbs.
- the action generator 124 can map the nouns and verbs (e.g., artist name, or play music) to actions or intents such as “play a song.”
- the action generator 124 can map application information to a machine generated action.
- the action generator 124 can map the application information absent the list of actions provided by the application developer device 160 along with the submission of the application.
- the action generator 124 can generate the machine generated action without using the actions listed or identified in the data file provided by the application developer device 160 .
- the action generator 124 can generate a machine generated action independent of information about actions provided by the application developer device 160 .
- Generating machine generated actions independent of using the actions listed in the data file by the application developer the data processing system 102 can review the actions identified by the developer as being configured for the application.
- the action generator 124 can map application data 130 to a predetermined list of actions in order to create the machine generated action for the application.
- the predetermined list of actions can be provided by an administrator of the data processing system 102 or an administrator of the application delivery server 110 .
- the predetermined list of actions can include or refer to a list of actions that the direct action API 108 of the data processing system 102 is configured to execute or perform.
- the predetermined list of actions can be categorized.
- the predetermined list of actions can be categorized based on different types of actions. Types of actions can include, for example, music actions, ridesharing actions, navigation actions, news actions, ticket purchase actions, or other types of actions.
- the action generator 124 can identify the machine generated action by mapping application data 130 to the predetermined list of actions.
- the predetermined list of actions for a music application can include: play a song, play an album, next song, replay, pause, start a radio station, or create a playlist.
- the predetermined list of actions for a ridesharing application can include: order a ride to [destination]; what is the estimate to go to [destination]; how far away is my ride?; cancel ride; or what type of car is picking me up?
- the action generator 124 based on one of these predetermined actions, can identify the machine generated action that maps to an application.
- the action generator 124 can convert entities to intents or actions to generate the machine generated actions.
- the data file submitted along with the application can include both intents and entities.
- the data processing system 102 can parse the entities to generate machine generated actions that can be performed on the entities.
- the data processing system 102 can generate the machine generated actions based on metadata or descriptions provided for the application.
- the data processing system 102 can identify discrete objects and combine them into a cluster of text, and input the cluster of text to a mapping technique that can output nouns and verbs.
- the data processing system 102 can then convert the nouns and verbs to intents using a hierarchical graph.
- the data processing system 102 can traverse the graph to identify the intent or action.
- the data processing system 102 can perform a lookup using the entities submitted by the application developer.
- the lookup table can map entities to intents or actions.
- the data processing system 102 can perform a lookup to determine what actions are typically associated with the entities.
- the data processing system 102 using the intents typically associated with the entities and other techniques, can generate the machine generated action.
- the data processing system 102 can include, interface with or otherwise access a second classifier component 118 designed, constructed and operative to determine a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action.
- the second classifier component 118 can compare the actions to determine whether there is a match.
- the second classifier component 118 can compare the one or more actions provided by the application developer device 160 with the one or more machine generated actions generated by the action generator 124 .
- the second classification score can be based on different types of matching or comparison techniques.
- the second classifier component 118 can determine how many of the actions are a match, the level of match, the level of overlap, or otherwise compare the two sets of actions. For example, the application developer device 160 can submit, along with the application, five different actions.
- the action generator 124 can identify five machine generated actions based on the application data 130 , and absent the list of actions submitted by the application developer device 160 .
- the second classifier component 118 can compare the five actions provided by the application developer device 160 with the five actions generated by the action generator 124 to determine the number of actions that match, if any.
- the second classifier component 118 can generate the second classification score based on the level of matching.
- the second classification score can be a percentage based on the ratio of machine generated actions to developer provided actions (e.g., # of machine generated actions that match the developer provided actions divided by the number of developer provided actions).
- the data processing system 102 can determine the second classification score is a 100% match; if four of the machine generated actions match out of the five developer provided actions, then the data processing system 102 can determine the second classification score is 80% match; if three out of five actions match, then the data processing system 102 can determine the second classification score is 60%; if two out of five, then 40% match; if one out of five, then 20% match; if 0 out of five, then 0% match.
- the data processing system 102 can store the second classification score in the scores 132 data structure for further processing.
- the data processing system 102 can include, interface with or otherwise access a matching engine component 122 designed, constructed and operative to select a second application that matches the application.
- the matching engine component 122 can use a matching program to select the second application that matches the application.
- the matching engine component 122 can match applications based on application data 130 .
- the matching engine component 122 can match applications based on, for example, the short description, detailed description, category, user reviews, or other information.
- the matching engine component 122 can match applications based on previous version of the application.
- the data processing system 102 can determine that the application matches the second application based on a similarity score between the application and the second application greater than a similarity threshold.
- the similarity score can be generated using the matching program.
- the matching engine component 122 can match a first application with a second application based on the category of the application or a description of the application. For example, the description of the first application can be “ridesharing” and the description of the second application can be “ridesharing” or “carpool” or “taxi service” or “ride service”.
- the data processing system 102 based on the descriptions, can determine that the first application is a match with the second application.
- the matching engine component 122 can generate a similarity score based on comparing keywords associated with metadata or application data 130 between the application and the second application.
- the data processing system 102 can determine the similarity score by determining a distance between the keywords associated with the two applications using a statistical similarity measure or similarity function.
- the similarity function can be a real-valued function that quantifies the similarity between two objects.
- the similarity function can output a similarity score.
- the similarity function can output a distance metric that can be based on coordinates.
- the similarity score can correspond to a Euclidean distance between two points, where the two points are mapped onto a Euclidean space based on keywords or features associated with the two applications. Other similarity distances can include, e.g., Manhattan distance.
- the data processing system 102 can determine the two applications are a match if their similarity scores are greater than a threshold.
- the threshold can refer to a score threshold (e.g., 80% match).
- the data processing system 102 can first determine the two applications with the highest level of similarity. The data processing system 102 , in some cases, determine to use the selected matching application without further checking the similarity score. In some cases, however, the data processing system 102 can further determine the similarity score and determine to select the second application as the matching application for debugging purposes if the similarity score is also greater than a threshold (e.g., 70% similarity, 80% similarity, 90% similarity).
- a threshold e.g., 70% similarity, 80% similarity, 90% similarity
- the categories of the first and second applications can both be “music”.
- the matching program can be configured to perform a first level match of applications based on the applications being in the same category.
- the matching program can further be configured to determine a second level of match based on the description of the applications (e.g., both descriptions indicating online music streaming service).
- the matching engine component 122 can select the second application that matches the application undergoing the debugging process.
- the matching engine component 122 can provide the indication of the matching second application to the third classifier component 120 in order to generate the third classification score.
- the data processing system 102 can include, interface with or otherwise access a third classifier component 120 designed, constructed and operative to determine a third classification score.
- the third classifier component 120 can determine the third classification score based on a comparison of an action approved for the second matching application with the action of the messaging object provided by the application developer for the application undergoing the debugging or review process.
- the third classifier component 120 can compare the level of match between the actions to generate the third classification score.
- the third classifier component 120 can compare the actions provided by the application developer device 160 with the actions associated with the second matching application to determine the number of actions that match, if any.
- the third classifier component 120 can generate the third classification score based on the level of matching.
- the third classification score can be a percentage based on the ratio of the actions of the second matching application to developer provided actions (e.g., # of second application actions that match the developer provided actions divided by the number of developer provided actions). If all actions match each other, then the data processing system 102 can determine the second classification score is a 100% match. If not all of the actions match one another, then the third classification score can be less than 100%. For example, there may be five actions provided by the application developer device 160 for the application undergoing the debugging or review process. There may be five actions associated with the second matching application identified by the matching engine component 122 .
- the data processing system 102 can determine the second classification score is 80% match; if three out of five actions match, then the data processing system 102 can determine the second classification score is 60%; if two out of five, then 40% match; if one out of five, then 20% match; if 0 out of five, then 0% match.
- the data processing system 102 can store the third classification score in the scores 132 data structure for further processing.
- the data processing system 102 can determine the score using various matching techniques, scoring techniques, labels, or classifications.
- the data processing system 102 can include, interface with or otherwise access a delivery controller component 112 designed, constructed and operative to update a delivery control parameter based on the first classification score, the second classification score and the third classification score.
- the delivery controller component 112 can combine the first classification score, second classification score, and third classification score to generate a combined classification score. However, in other examples, the delivery controller component 112 can combine any of the first classification score, second classification score, and/or third classification score and optionally other classification scores to generate a combined classification score.
- the delivery controller component 112 can determine whether to block delivery of the application or authorize delivery of the application based on the combined classification score.
- the delivery controller component 112 can determine whether to block an action associated with the application, or authorize the action, based on the combined classification score.
- the delivery controller component 112 can update a delivery control parameter based on the combined classification score.
- the delivery control parameter can include a value, a flag, a binary value, or a switch.
- the delivery control parameter can instruct the application delivery server 110 to block or prevent delivery of the application, or disable an action associated with the application.
- the delivery control parameter can block delivery of the application, or disable the action, in order to prevent malicious, fraudulent, misleading or erroneous remote procedure calls or content delivery responsive to user requests for an action.
- the data processing system 102 can control, responsive to the delivery control parameter updated by the data processing system, delivery of the application by the application delivery server 110 .
- the delivery controller component 112 can determine to authorize delivery of the application based on the first classification score, the second classification score and the third classification score.
- the delivery controller component 112 can determine to authorize delivery based on each of the scores individually satisfying a threshold (or respective threshold stored in threshold 138 data structure).
- the delivery controller component 112 can determine to authorize delivery based on a sum of the three scores satisfying a threshold.
- the delivery controller component can determine to authorize delivery based on an average of the three scores satisfying a threshold.
- the data processing system 102 can update the delivery control parameter to cause delivery of the application by the application delivery server 110 .
- the delivery controller component 112 can determine a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold.
- the data processing system 102 can retrieve the failure threshold from the threshold data structure 138 .
- the data processing system 102 can compare each of the first, second and third classification scores with the failure threshold (or a respective failure threshold). If any one of the classification scores does not satisfy the failure threshold, then the data processing system 102 can determine to block delivery of the application. For example, the data processing system 102 can update, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server 110 .
- the data processing system 102 can prevent fraudulent or erroneous applications from being delivered. For example, the data processing system 102 can determine that the first classification score, which can be based on user feedback, may not satisfy the failure threshold, whereas the second and third classification scores may satisfy the failure threshold. However, the data processing system 102 may nonetheless determine to block delivery of the application because the feedback-related classification score does not satisfy the failure threshold, thereby indicated that the application may be fraudulent or erroneous or otherwise not be suitable for delivery to client computing devices 140 .
- the data processing system 102 can determine a classification failure based on the first classification score, the second classification score and the third classification score.
- the data processing system 102 can determine the classification failure based on a combination of the three scores, or each of the scores individually.
- the data processing system 102 can automatically update, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server 110 .
- the data processing system 102 transmit a notification to the application developer device 160 of the classification failure.
- the application developer device 160 upon receiving the notification, can debug their application to fix or correct the issues causing the classification failure.
- the data processing system 102 can request, responsive to the classification failure, an updated version of the application from the application developer device 160 .
- the data processing system 102 can transmit a request (e.g., message, electronic message, notification, push message, or prompt) to the application developer device 160 stating that the application failed the review or debugging process.
- the data processing system 102 can provide additional information as to which action of the application resulted in failure of the review or debugging process.
- the data processing system 102 can provide additional information as to which classifier in the review process resulted in the application failing the review or debugging process.
- the data processing system 102 can determine to authorize the application for delivery even if one or more of the actions associated with the application fails the review or debugging process.
- the delivery controller component 112 can determine, for an action of the messaging object, a classification failure based on the first classification score, the second classification score and the third classification score.
- the delivery controller component 112 can automatically disable, responsive to the classification failure, the action of the messaging object for execution via the application.
- the data processing system 102 can authorize the application for delivery by the application delivery server 110 such that when the application is delivered to a client computing device 140 , the action is disabled and not executable on the client computing device 140 .
- the data processing system 102 can provide the application for delivery to the client computing device 140 without causing a waste in computing resource utilization because the data processing system 102 can pre-emptively disable the action of the application, thereby preventing the fraudulent, misleading or erroneous action from being performed.
- the application delivery server 110 can determine to disable one or more actions based on the delivery control parameter stored in parameter data structure 136 for the application.
- the delivery control parameter can include a data structure listing authorized actions for the application.
- the data processing system 102 can prevent the application from being triggered responsive to the action.
- the data processing system 102 can remove the unauthorized action from a data file associated with the application.
- the data file can be the data file submitted by the application developer device 160 along with the submission of the application.
- the data processing system 102 can identify actions established for the application via the data file.
- the data processing system 102 can determine, via a debugging process for each of the actions, a first classification score, a second classification score and a third classification score.
- the data processing system 102 can update the delivery control parameter to disable one or more of the actions based on the debugging process.
- the data processing system 102 can authorize or disable actions for an application.
- the data processing system 102 an authorize or disable actions from being executed on particular digital surfaces.
- Digital surfaces can include, for example, mobile computing device surface, smart speaker surface, voice-only interface, display surface, chatbot surface, webpages, navigation application, or other types of digital surfaces.
- the data processing system 102 can identify digital surfaces for execution of the action of the messaging object of the application.
- the data processing system 102 update the delivery control parameter to disable execution of the action of the messaging object of the application on a digital surface of the multiple digital surfaces.
- the data processing system 102 can determine to exit the debugging process prior to determining each of the first, second and third classification scores for the application or an action of the application.
- the data processing system 102 can determine to exit the debugging process without executing each of the first classifier component 116 , second classifier component 118 and third classifier component 120 for the application or an action of the application.
- the data processing system 102 can determine that one of the first classification score or the second classification score does not satisfy a failure threshold. Responsive to determining that one of the first classification score or second classification score does not satisfy the failure threshold, the data processing system 102 can determine to skip determining the third classification score in order to reduce computing resource utilization of the data processing system 102 .
- the data processing system 102 can trigger a debugging process for an application.
- the data processing system 102 can determine, via the debugging process for the application, a first classification score for the application.
- the data processing system 102 can detect a first classification failure based on a comparison of the first classification score for the application with a first classification threshold.
- the first classification threshold can be retrieved from threshold data structure 138 stored in data repository 128 .
- the data processing system 102 can exit, responsive to detection of the first classification failure, the debugging process for the application prior to determining a second classification score for the application or a third classification score for the application.
- the data processing system 102 can transmit a notification of the first classification failure to an administrator device of the data processing system 102 or the application developer device 160 . By exiting the debugging process subsequent to detecting the classification failure, the data processing system 102 can both reduce computing resource utilization and also expedite completing the application review and providing the results of the review to the application developer device 160 .
- the data processing system 102 can include, interface with or otherwise access a deep link builder component 114 designed, constructed and operative to generate a deep link for an application.
- the data processing system 102 can debug or review the application to determine whether the deep link for the application causes the application to perform a function or provide a content item that is responsive to the requested action. For example, the data processing system 102 can debug the application to determine whether the deep link for the application actually directs a user to a proper screen or state in the application based on the desired action.
- the deep link builder component 114 can generate the deep link based on actions, entities, and a template provided for the application.
- a deep link can refer to a hyperlink or other reference or pointer that links to a specific piece of content, such as a specific state or screen in an application, as opposed to a home page or initial state or screen of the application. Deep linking can refer to a link that points to a page or content that is beyond the highest-level home page or screen or state.
- the data processing system 102 (e.g., via deep link builder component 114 ) can generate a deep link for the application.
- the data processing system 102 can build a deep link for to book a ride to a specific destination, for example.
- the data processing system 102 can determine that the deep link into the application may take the user to a page that does not wish to fulfill the intent of the user. Instead, the deep link into the application may direct the user to malicious or abusive content.
- the deep link builder component 114 can determine whether the deep link constructed pursuant to the template, actions and entities of the application would fulfill a user's intent. The data processing system 102 can therefore perform quality review by determining if the deep links directs the user to the desired action and helps fulfill the intent of the user.
- the data processing system can determine whether the intent allegedly being provided by the application is actually provided by the application. For example, a developer of a music streaming service can provide an application with entities for an artist and song. The user may request a song by the artist, which might cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ends up directing the user to a page of a different artist or a different type of page (e.g., audio books), then the data processing system 102 can determine that the deep link may be erroneous.
- a developer of a music streaming service can provide an application with entities for an artist and song. The user may request a song by the artist, which might cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ends up directing the user to a page of a different artist or a different type of page (e.g., audio books), then the data processing system
- FIG. 2 is an illustration of the operation of system 200 to debug applications.
- the system 200 can include one or more component of system 100 depicted in FIG. 1 or system 400 depicted in FIG. 4 .
- System 200 can include a data processing system 102 .
- the data processing system 102 can communicate, interface with, or otherwise interact with an application developer device 160 .
- the data processing system 102 receive an application.
- the data processing system 102 can receive the application from the application developer device 160 .
- the application developer device 160 can be associated with a unique developer account, such as a username and authentication credentials.
- the application developer device 160 can submit the application to the data processing system 102 for delivery via an application delivery server or online application marketplace.
- the data processing system 102 can receive the application along with application data, such as metadata, a data file, list of actions, inventory of entities, or other information.
- the data processing system 102 can determine whether the application is configured with an action.
- the data processing system 102 can determine whether the application is associated with an action.
- the data processing system 102 can determine whether the application developer has established an action for the application.
- the developer can submit actions along with the application using a data file, such as an XML file.
- the actions can be established or configured by the developer for execution by the application.
- Actions can include or trigger deep links into specific screens, webpages or states in the application.
- the deep link can be created by a deep link builder of the data processing system 102 responsive to a request from a user trigging an action established for the application.
- the data processing system 102 can determine whether the application is configured with an action based on parsing an application data file or other information provided by the application developer device 160 .
- the data processing system 102 determines that the application is not configured with an action at ACT 202 , then the data processing system 102 can proceed to ACT 234 to authorize the application for delivery. If, however, the data processing system 102 determines at ACT 202 that the application is configured with an action, then the data processing system 102 can proceed to ACT 204 to trigger a debugging process for the action.
- the data processing system 102 can trigger the debugging process.
- the data processing system 102 can trigger the debugging responsive to submission of an application by the application developer or on an on-going basis.
- the data processing system 102 can trigger the debugging process responsive to determining that there is sufficient historical execution information available at ACT 206 to generate a first classification score at ACT 208 . For example, if there is insufficient historical execution information (e.g., limited user feedback such as less than 10, 20, 30, 50, 100, 150, 200, 300, or 500 user ratings, reviews, or responses to survey prompts), then the data processing system 102 can determine not to trigger the debugging process and continue to authorize the application at ACT 234 until there is sufficient user feedback.
- limited user feedback e.g., limited user feedback such as less than 10, 20, 30, 50, 100, 150, 200, 300, or 500 user ratings, reviews, or responses to survey prompts
- the data processing system 102 can determine, at ACT 206 , whether there is historical execution information available for the application. Historical execution information can refer to or include user feedback associated with the application or the action of the application being debugged.
- the data processing system 102 can access a data repository storing historical information to determine if there is historical execution information available for the application at ACT 206 .
- the data processing system 102 can query the data repository 128 , or historical data data structure 134 at ACT 206 .
- the data processing system 102 in some cases, can determine whether historical execution information exists based on whether the application being submitted is a new application that has not been previously submitted. If the application is a new application that has not been previously submitted, then historical execution information may not exist.
- the data processing system 102 can determine to proceed to a second classifier and skip a first classifier. If historical execution information does not exist, the data processing system 102 can determine to insert a delay or wait until historical execution information exists. For example, the data processing system 102 can temporarily authorize the application for delivery in order to cause the application and action thereof to be installed and executed on client computing devices 140 . The application, upon being installed and executed, can generate historical execution information that the data processing system 102 can then use to determine a first classification score.
- the data processing system 102 can proceed to ACT 208 to generate a first classification score.
- the data processing system 102 (e.g., via a first classifier component 116 ) can generate the first classification score using a first classifier component of the data processing system 102 .
- the first classification score can be based on the historical execution or feedback data thereof.
- the first classification score can indicate whether the actions provided for the applications fulfilled an intent of a user triggering the action.
- the first classification score can be a feedback rating provided by users, user responses to a survey, user reviews or other feedback provided by users.
- the data processing system 102 can then determine whether there is a classification failure based on the first classification score at ACT 210 .
- the classification failure can be based on a threshold. If the data processing system 102 determines, at ACT 210 , a classification failure based on the first classification score, the data processing system 102 can proceed to ACT 236 to update a parameter (e.g., delivery control parameter) to block the application for delivery or disable the action of the application.
- the data processing system 102 can then determine at ACT 214 whether the application is configured with additional actions. If the application is configured with additional actions, then the data processing system 102 can debug the next action by triggering the debugging process at ACT 204 with the next action.
- the data processing system 102 can exit the debugging process at 230 .
- the data processing system 102 can then control the application delivery server based on the parameter at ACT 232 .
- the data processing system 102 can proceed to ACT 212 .
- the data processing system 102 can generate a machine action.
- a machine action can refer to a machine generated action.
- a machine action can refer to a simulate action or action generated by the data processing system 102 based on application data or metadata.
- a machine action or machine generated action can refer to an action generated or identified by the data processing system 102 absent using the list of actions provided by the application.
- a machine action can refer to an action generated by the data processing system 102 independent of the list of actions provided by the application developer device 160 .
- the data processing system 102 can proceed to ACT 216 to generate a second classification score based on the machine action.
- the data processing system 102 (e.g., via a second classifier component 118 ) can determine the second classification score based on a comparison of the machine generated action with an action provided by the application developer device 160 .
- the data processing system 102 can determine at ACT 218 whether a classification failure occurs as a result of the second score.
- the classification failure can refer to or include the second score being a null value or not satisfying a minimum failure threshold.
- the classification failure can cause the data processing system 102 to exit the debugging process.
- the data processing system 102 can exit the debugging process responsive to classification failure so as to reduce or prevent wasted computing resource consumption.
- the data processing system 102 determines that there is a classification failure based on the second score, the data processing system can proceed to ACT 236 to update the delivery control parameter and block the application or action.
- the data processing system 102 can proceed to ACT 220 to execute a matching program.
- the data processing system 102 can use a matching engine component 122 to execute the matching program.
- the matching program can be executed to identify a second application that is similar to the application. Similarity can be determined using various techniques, including, for example, a statistical technique. Similarity can be based on applications being in the same category, the same type of application, providing similar functions, providing similar services, or using similar functions or tools.
- the data processing system 102 can select a similar application based on titles, descriptions, metadata, categories, users, reviews, or other data sources (e.g., external data sources, third-party devices 162 , search engine results). For example, the data processing system 102 can leverage or utilize a search engine to identify similar applications.
- the data processing system 102 can input information about the application into a search engine and parse the search results to identify a similar application.
- the data processing system 102 can determine whether there is a similar application. If the data processing system 102 is unable to identify a similar application, then the data processing system can proceed to ACT 236 to update the delivery control parameter without generating a third classification score. The data processing system 102 can update the delivery control parameter using the first classification score and the second classification score. The data processing system 102 may not find a similar application because similar application may not yet have been submitted to the data processing system 102 for application delivery. The data processing system 102 can select a similar application as being configured with actions. The data processing system 102 may not find a similar application if the applications that are otherwise similar are not configured with actions.
- the data processing system 102 determines that there is a similar application configured with actions at ACT 222 , then the data processing system 102 can proceed to ACT 224 to generate a third classification score.
- the data processing system 102 can use a third classifier component to generate the third classification score.
- the data processing system 102 can compare the action configured for the application with actions configured for the similar application to determine a level of similarity between the actions. For example, the data processing system 102 can determine that the action of the application that is undergoing the debugging process either matches or does not match with any action established for the similar application.
- the data processing system 102 determines that the action undergoing the debugging process does not match with any action of the similar application, then the data processing system 102 can assign the action a low classification score (e.g., 0). If the data processing system 102 determines that the action of the application undergoing the debugging process matches with one of the actions established for the similar application, then the data processing system 102 can assign the action a high third classification score (e.g., 1). Thus, the data processing system 102 set a higher classification score if the action matches an action established for a similar application that has already been vetted or approved by the data processing system 102 .
- the data processing system 102 can determine whether there is a classification failure based on the third classification score. If the data processing system 102 determines a classification failure based on the third classification score, then the data processing system 102 can proceed to ACT 236 to update the delivery control parameter to block authorization of the application for delivery, or disable the action for the application.
- the data processing system 102 determines that the third classification score does not result in a classification failure at ACT 226 , then the data processing system 102 can proceed to generate a combined classification score at ACT 228 .
- the data processing system 102 can generate a combined classification score based on the first classification score, second classification score and third classification score.
- the data processing system 102 can combine the classification scores using any technique, including, for example, addition, multiplication, division, dot product, function, average, or a statistical technique.
- the data processing system 102 can update the delivery control parameter at ACT 236 based on the combined score generated at ACT 228 .
- the data processing system 102 can update the parameter to block delivery of the application, disable the action, or authorize delivery or authorize the action.
- the data processing system 102 can then determine, at ACT 214 , whether the application is configured with additional actions. If the data processing system 102 determines that there are additional actions to be reviewed, the data processing system 102 can proceed to ACT 204 to debug or review the next action. If, at ACT 214 , the data processing system determines that there are no remaining actions to be input into the debugging process, then the data processing system 102 can proceed to ACT 230 to exit the debugging process.
- the data processing system 102 can control the application delivery server 110 at ACT 232 based on the parameter.
- the parameter can instruct the application delivery server 110 to authorize delivery of the application or block delivery of the application.
- the parameter can instruct the application delivery server 110 to disable one or more action of the application, but otherwise authorize delivery of the application.
- the data processing system 102 can notify the application developer device 160 of the status or result of the debugging process.
- the data processing system 102 can request the application developer device 160 to resolve low classification scores identified by the data processing system 102 by improving corresponding aspects of the application.
- FIG. 3 is an illustration of an example method of debugging applications.
- the method 300 can be performed by one or more component, system or element of system 100 depicted in FIG. 1 , system 200 depicted in FIG. 2 , or system 400 depicted in FIG. 4 .
- the method 300 can be performed by a data processing system.
- the data processing system can identify an action of an application.
- the application can be submitted by an application developer.
- the action can be a message object configured by the application developer to perform an action associated with the application.
- the action can include, for example, a watch action, a listen action, a content request action, a navigation action, or other type of action.
- the action can be performed by the application.
- the action can be performed on an entity associated with the application (e.g., play Song_A by Artist_1).
- the data processing system can determine a first classification score.
- the data processing system can determine a first classification score based on historical execution of the action of the messaging object provided by the application developer.
- the data processing system can determine the first classification score based on user feedback.
- the data processing system can determine the first classification score based on user reviews.
- the data processing system can determine the first classification score based on semantic analysis of user reviews or feedback.
- the data processing system can determine the first classification score based on a survey or user responses to a survey.
- the data processing system can determine the first classification score based on user responses to a prompt, such as “can the application perform ⁇ action>?”
- the action can correspond to the action the application developer indicates the application is configured to perform.
- the data processing system can determine that the application does not have historical execution information.
- the data processing system can determine to skip the generation of the first generation score, or assign a default value for the first classification score.
- the data processing system can provide a default value for the first classification score such that the application can pass a classification failure test.
- the data processing system can determine to pause the debugging process and authorize the application for delivery in order to obtain user feedback on the application.
- the data processing system can determine a second classification score.
- the data processing system can determine the second classification score based on a comparison of the action provided by the application developer with the machine generated action. If the action provided by the developer matches the machine generated action, the data processing system can assign the action a high second classification score (e.g., a 1 ). If the action provided by the developer does not match the machine generated action, then the data processing system can assign the action a low second classification score (e.g., 0 ). If the action does not exactly match the machine generated action, but is similar, then the data processing system can assign a medium second classification score to the action (e.g., 0 . 5 ). The action provided by the developer may be similar to the machine generated action if the actions are in a similar domain or category or vertical. For example, the data processing system can consider the listen action to be similar to a watch action.
- the data processing system can select a second application.
- the second action can be a similar application.
- the data processing system can select the similar action using a matching program.
- the second application can match, or be considered similar to, the application undergoing the debugging process.
- the data processing system can select or identify the similar application based on metadata associated with the application.
- the data processing system may identify multiple similar applications.
- the data processing system can select the application that is the most similar based on a similarity ranking of similarity scores (e.g., statistical similarity scores).
- the data processing system can select the similar application that is configured with actions.
- the data processing system can determine to select the similar application for further processing if it contains or is configured with actions. For example, if the data processing system identifies to similar applications, but only one of the applications is configured with actions, then the data processing system can select the application configured with actions as the similar application (or second application) to be used for the debugging process.
- the data processing system can update a delivery control parameter.
- the data processing system can update the delivery control parameter based on the first classification score, the second classification score and the third classification score.
- the data processing system can update the delivery control parameter for a particular action or the entire application.
- the data processing system can update the delivery control parameter based on one of the classification scores, or a combination of the classification scores. For example, if one of the classification scores is below a minimum threshold (e.g., a failure threshold), then the data processing system can determine to block delivery of the application or disable the action regardless of whether the other classification scores are satisfactory.
- the data processing system can combine the three classification scores to determine whether the action or application is satisfactory or passes the review process. If the action or application passes the review process, the data processing system can update the delivery control parameter to authorize the application or action for delivery.
- the data processing system can control delivery of the application.
- the data processing system can control delivery of the application by the application delivery server.
- the data processing system can control delivery responsive to the delivery control parameter updated by the data processing system.
- the data processing system can instruct an application delivery server that can be internal or remote from the data processing system.
- the data processing system can instruct an online application marketplace to disable the action or block delivery of the application.
- Blocking delivery of the application can include removing the application from the application store.
- Blocking delivery of the application can include reverting the application to a previous version that passed the review process.
- the data processing system can provide a notification to the application developer regarding the results of the debugging process.
- developers can provide an XML file as part of an application packet kit for an application.
- the XML file can include intents and entities for the application, where intents can refer to actions the application can perform and entities can include or refer to content on which the action can be performed.
- the developer can indicate a large number of entities for an application (e.g., millions of songs for a music streaming application).
- a request or trigger for an action on an entity can cause the generation of a deep link to the application.
- a client computing device can detect the request and generate a deep link for the action and the entity.
- the deep link can direct the application to a particular state or a particular web page.
- the deep link can direct the application to a particular state or a particular web page.
- the data processing system of the present technical solution can determine whether the application can actually perform the action, whether the application can actually access the entity, or whether the actually can perform the action on the entity.
- the data processing system can use one or more classifiers that generate one or more scores indicating whether the application can fulfill the intent.
- the data processing system can be configured to use all three classifiers in order to improve reliability. For example, if any one classifier fails, then the data processing system can determine to remove the application or disable the action.
- the data processing system can perform the review process on a per action basis, or for the entire application.
- the data processing system can automatically disable the action based on any one of the classifiers failing.
- the data processing system can automatically disable the action for a particular digital surface (e.g., voice-based digital assistant, search, or content request).
- the data processing system can provide, to the application developer, a log or error log indicating any failures or other results of the debugging process.
- FIG. 4 is a block diagram of an example computer system 400 .
- the computer system or computing device 400 can include or be used to implement the system 100 , or its components such as the data processing system 102 .
- the data processing system 102 can include an intelligent personal assistant or voice-based digital assistant.
- the computing system 400 includes a bus 405 or other communication component for communicating information and a processor 410 or processing circuit coupled to the bus 405 for processing information.
- the computing system 400 can also include one or more processors 410 or processing circuits coupled to the bus for processing information.
- the computing system 400 also includes main memory 415 , such as a random access memory (RAM) or other dynamic storage device, coupled to the bus 405 for storing information, and instructions to be executed by the processor 410 .
- main memory 415 such as a random access memory (RAM) or other dynamic storage device
- the main memory 415 can be or include the data repository 145 .
- the main memory 415 can also be used for storing position information, temporary variables, or other intermediate information during execution of instructions by the processor 410 .
- the computing system 400 may further include a read only memory (ROM) 420 or other static storage device coupled to the bus 405 for storing static information and instructions for the processor 410 .
- ROM read only memory
- a storage device 425 such as a solid state device, magnetic disk or optical disk, can be coupled to the bus 405 to persistently store information and instructions.
- the storage device 425 can include or be part of the data repository 145 .
- the computing system 400 may be coupled via the bus 405 to a display 435 , such as a liquid crystal display, or active matrix display, for displaying information to a user.
- a display 435 such as a liquid crystal display, or active matrix display, for displaying information to a user.
- An input device 430 such as a keyboard including alphanumeric and other keys, may be coupled to the bus 405 for communicating information and command selections to the processor 410 .
- the input device 430 can include a touch screen display 435 .
- the input device 430 can also include a cursor control, such as a mouse, a trackball, or cursor direction keys, for communicating direction information and command selections to the processor 410 and for controlling cursor movement on the display 435 .
- the display 435 can be part of the data processing system 102 , the client computing device 140 or other component of FIG. 1 , for example.
- the processes, systems and methods described herein can be implemented by the computing system 400 in response to the processor 410 executing an arrangement of instructions contained in main memory 415 . Such instructions can be read into main memory 415 from another computer-readable medium, such as the storage device 425 . Execution of the arrangement of instructions contained in main memory 415 causes the computing system 400 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 415 . Hard-wired circuitry can be used in place of or in combination with software instructions together with the systems and methods described herein. Systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
- FIG. 4 Although an example computing system has been described in FIG. 4 , the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user.
- personal information e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location
- certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters.
- a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, postal code, or state level
- the user may have control over how information is collected about him or her and used by the content server.
- the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatuses.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing system “computing device” “component” or “data processing apparatus” encompass various apparatuses, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the direct action API 108 or NLP component 106 and other data processing system 102 components can include or share one or more data processing apparatuses, systems, computing devices, or processors.
- a computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program can correspond to a file in a file system.
- a computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 102 ) to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- the subject matter described herein can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system such as system 100 or system 400 can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network (e.g., the network 105 ).
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., data packets representing a digital component) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device can be received from the client device at the server (e.g., received by the data processing system 102 from the client computing device 140 or the application developer device 160 or the third-party device 162 ).
- the NLP component 106 or the direct action API 108 can be a single component, app, or program, or a logic device having one or more processing circuits, or part of one or more servers of the data processing system 102 .
- any implementation disclosed herein may be combined with any other implementation or embodiment, and references to “an implementation,” “some implementations,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation or embodiment. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- references to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
- a reference to “at least one of ‘A’ and ‘B’” can include only ‘A’, only ‘B’, as well as both ‘A’ and ‘B’.
- Such references used in conjunction with “comprising” or other open terminology can include additional items.
Abstract
Description
- Applications can be installed on a computing device. The computing device can execute the application.
- The present disclosure is generally directed to analyzing or debugging applications for delivery via an application delivery server. Responsive to a request or trigger, applications may perform malicious actions or perform incorrect actions. Performance of malicious or incorrect actions can result in wasted computing resource utilization, bandwidth utilization, and battery utilization on a mobile device. Further, performance of malicious or incorrect actions can cause an increase in remote procedure calls due to repeated requests before the correct action is performed. Cyber security issues may result from the provision of applications that perform malicious actions, and timely identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications that are provided for delivery via an application delivery server, it can be challenging to efficiently and reliably detect applications that perform malicious or incorrect actions, e.g. to detect fraudulent applications or to perform a quality or other review on applications without causing delay in the review process. Systems and methods of the present technical solution allow for an application to be reviewed based on historical execution information, simulated actions, or a matched application. Based on the review, the present technical solution can prevent delivery of the application or disable a particular action of the application that is determined to be fraudulent or incorrect.
- At least one aspect is directed to a system to analyze or debug applications for delivery via an application delivery server. The system can include a data processing system having one or more processors and memory. The data processing system can identify, for an application, a messaging object configured with an action by the application developer. The application can be submitted by an application developer. The data processing system can determine a first classification score based on historical execution of the action of the messaging object provided by the application developer. The data processing system can generate a machine generated action for the application based on metadata associated with the application. The data processing system can determine a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action. The data processing system can select, via a matching program, a second application that matches the application. The data processing system can determine a third classification score based on a comparison of an action approved for the second application with the action of the messaging object provided by the application developer. The data processing system can update a delivery control parameter based on one, or more or each of: the first classification score, the second classification score and/or the third classification score. The data processing system can control, responsive to the delivery control parameter updated by the data processing system, delivery of the application by the application delivery server.
- Exemplary optional features of the system may be as follows. The data processing system may be configured to receive the application from an application developer device. The data processing system may be configured to receive a data file associated with the application comprising a plurality of actions established by the application developer for the application. The data processing system may be configured to receive an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server. The data processing system may be configured to trigger, responsive to the indication of the new application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score. The data processing system may be configured to receive an indication that the application is an updated version of the application uploaded by the application developer for delivery by the application delivery server. The data processing system may be configured to trigger, responsive to the indication of the updated version of the application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score. The data processing system may be configured to receive an indication of negative feedback for the application from a client computing device on which the application is installed. The data processing system may be configured to trigger, responsive to the indication of the negative feedback for the application, a debugging process comprising determination of the first classification score, the second classification score and the third classification score. The data processing system may be configured to determine to trigger a debugging process comprising determination of the first classification score, the second classification score and/or the third classification score prior to delivery of the application for installation on a client computing device. The first classification score may indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score with a threshold. The data processing system may be configured to determine that the application matches the second application based on a similarity score between the application and the second application greater than a similarity threshold. The data processing system may be configured to determine to authorize delivery of the application based on the first classification score, the second classification score and the third classification score. The data processing system may be configured to update the delivery control parameter to cause delivery of the application by the application delivery server. The data processing system may be configured to determine a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold. The data processing system may be configured to determine a classification failure based on the first classification score, the second classification score and the third classification score. The data processing system may be configured to update, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server. The data processing system may be configured to transmit a notification to the application developer of the classification failure. The data processing system may be configured to request, responsive to the classification failure, an updated version of the application from the application developer. The data processing system may be configured to determine, for the action of the messaging object, a classification failure based on the first classification score, the second classification score and/or the third classification score. The data processing system may be configured to disable, responsive to the classification failure, the action of the messaging object for execution via the application. The data processing system may be configured to authorize the application for delivery by the application delivery server. The data processing system may be configured to identify a plurality of actions established for the application. The data processing system may be configured to determine, via a debugging process for each of the plurality of actions, a first classification score, a second classification score and/or a third classification score. The data processing system may be configured to update the delivery control parameter to disable one or more of the plurality of actions based on the debugging process. The data processing system may be configured to identify a plurality of digital surfaces for execution of the action of the messaging object of the application. The data processing system may be configured to update the delivery control parameter to disable execution of the action of the messaging object of the application on a digital surface of the plurality of digital surfaces. The data processing system may be configured to trigger a debugging process for a third application. The data processing system may be configured to determine, via the debugging process for the third application, a first classification score for the third application. The data processing system may be configured to detect a first classification failure based on a comparison of the first classification score for the third application with a first classification threshold. The data processing system may be configured to exit, responsive to detection of the first classification failure, the debugging process for the third application prior to determining a second classification score for the third application and/or a third classification score for the third application. The data processing system may be configured to transmit a notification of the first classification failure to an administrator device.
- At least one aspect is directed to a method of analyzing or debugging applications for delivery via an application delivery server. The method can be performed by a data processing system having a processor and memory. The method can include the data processing system identifying, for an application, a messaging object configured with an action by the application developer. The application can be submitted by an application developer. The method can include the data processing system determining a first classification score based on historical execution of the action of the messaging object provided by the application developer. The method can include the data processing system generating a machine generated action for the application based on metadata associated with the application. The method can include data processing system determining a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action. The method can include the data processing system selecting, via a matching program, a second application that matches the application. The method can include the data processing system determining a third classification score based on a comparison of an action approved for the second application with the action of the messaging object provided by the application developer. The method can include the data processing system updating a delivery control parameter based on the first classification score, the second classification score and the third classification score. The method can include the data processing system controlling, responsive to the delivery control parameter updated by the data processing system, delivery of the application by the application delivery server.
- The method may comprise receiving, by the data processing system, the application from an application developer device. The method may comprise receiving, by the data processing system, a data file associated with the application comprising a plurality of actions established by the application developer for the application. The method may comprise determining to authorize delivery of the application based on the first classification score, the second classification score and/or the third classification score. The method may comprise updating the delivery control parameter to cause delivery of the application by the application delivery server. The method may comprise determining a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold. The method may comprise updating, responsive to the classification failure, the delivery control parameter to block delivery of the application by the application delivery server.
- At least one aspect is directed to a computer program product that, when implemented on a data processing system of an application delivery server, is configured to cause the data processing system to perform the method of analyzing or debugging applications for delivery via the application delivery server.
- The individual features and/or combinations of features defined above in accordance with any aspect of the present invention or below in relation to any specific embodiment of the invention may be utilized, either separately and individually, alone or in combination with any other defined feature, in any other aspect or embodiment of the invention.
- Furthermore, the present invention is intended to cover apparatus configured to perform any feature described herein in relation to a method and/or a method of using or producing, using or manufacturing any apparatus feature described herein.
- These and other aspects and implementations are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and implementations, and provide an overview or framework for understanding the nature and character of the claimed aspects and implementations. The drawings provide illustration and a further understanding of the various aspects and implementations, and are incorporated in and constitute a part of this specification.
- The accompanying drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
-
FIG. 1 is an illustration of an example system to debug applications; -
FIG. 2 is an illustration of an example operation of a system to debug applications; -
FIG. 3 is an illustration of an example method of debugging applications; and -
FIG. 4 is a block diagram illustrating a general architecture for a computer system that can be employed to implement elements of the systems and methods described and illustrated herein, including, for example, the systems depicted inFIGS. 1 and 2 , and the method depicted inFIG. 3 . - Following below are more detailed descriptions of various concepts related to, and implementations of, methods, apparatuses, and systems of analyzing or debugging applications. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways.
- The present disclosure is generally directed to analyzing or debugging applications for delivery via an application delivery server. For example, systems and methods of the present technical solution can analyze or debug actions configured in an application. An action can refer to or include a mechanism used by an application developer to surface their application and their content. An application developer can specify the actions their application supports. The application developer can submit their application, as well as an indication of the actions the application supports, to a data processing system. The data processing system, upon receiving the application and the indication of the actions provided by the application developer, can debug or review the application. The data processing system can debug or review the application before or after making the application available for download or use by end user client devices. The data processing system can debug or review the application to determine whether a deep link for the application causes the application to perform a function or provide a content item that is responsive to the requested action. For example, the data processing system can debug the application to determine whether the deep link for the application actually directs a user to a proper screen or state in the application based on the desired action. A deep link can refer to a hyperlink or other reference or pointer that links to a specific piece of content, such as a specific state or screen in an application, as opposed to a home page or initial state or screen of the application. Deep linking can refer to a link that points to a page or content that is beyond the highest-level home page or screen or state.
- The data processing system can perform an analysis or debugging process for the application. The analysis or debugging process can include fraud detection and quality review. Fraud detection can refer to detecting whether the application is deliberately trying to mislead a user. For example, the user may request to book a ride to a specific destination, but the deep link into the application may take the user to a page that does not wish to fulfill the intent of the user. Instead, the deep link into the application may direct the user to malicious or abusive content.
- Quality review can refer to determining if the deep links directs the user to the desired action and helps fulfill the intent of the user. To perform quality review, the data processing system can determine whether the intent allegedly being provided by the application is actually provided by the application. For example, a developer of a music streaming service can provide an application with entities for an artist and song. The user may request a song by the artist, which might cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ends up directing the user to a page of a different artist or a different type of page (e.g., audio books), then the deep link may be erroneous or bad.
- Thus, responsive to a request or trigger, applications may perform malicious actions or perform incorrect actions. Performance of malicious or incorrect actions can result in wasted computing resource utilization, bandwidth utilization, and battery utilization on a computing device. Further, performance of malicious or incorrect actions can cause an increase in remote procedure calls due to repeated requests before the correct action is performed. Cyber security issues may result from the provision of applications that perform malicious actions, and timely automatic identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications that are provided for delivery via an application delivery server, it can be challenging to efficiently and reliably detect malicious or fraudulent applications or perform a quality review on applications without causing delay in the review process. Systems and methods of the present technical solution allow for an application to be reviewed based on historical execution information, simulated actions, or a matched application. Based on the review, the present technical solution can prevent delivery of the application or disable a particular action of the application that is determined to be malicious, fraudulent or incorrect.
- For example, a data processing system can include an application review system. The data processing system can receive, from an application developer, application metadata. Application metadata can include, for example, a title of the application, description of the application, screenshots of the application, an inventory of entities supported by the application, a web site or web corpus indicated entities supported by the application, an intent or action that corresponds to the entities supported by the application, and a mechanism or instruction as to how to construct a deep link for the entities of the application. For example, an application for a music streaming surface can provide a name, description, list of artists, songs as entities, and play music as the intent or action to be performed with the entities. The data processing system can apply a filter to identify a list of the entities and then sort the entities to identify the top entities. The data processing system can construct an application deep link that can trigger the application using a deep link building engine. The data processing system can perform a review including crawling the application or website to compare entities that show up via the deep link as compared to entities indicated by the application metadata if the results of the review indicate that the quality of the deep link for the application action is below a threshold. The data processing system can then block results of the review that indicate that the quality of the deep link for the application is below a threshold. The data processing system can block submission of the application or the action if the quality is below a threshold.
- The data processing system can use or include one or more classifiers to review the application. The data processing system can include or be configured with a first classifier that can use feedback from users. For example, “Can Application_A book a ride for you?”. The data processing system can collect feedback from the user and if a certain percentage of the users answer “yes” within a predetermined time frame, then the data processing system can determine that the application can perform the desired intent or action.
- The data processing system can include or be configured with a second classifier. The second classifier can create a vector based on expanding entities and intents or actions associated with the application to then determine the most relevant intents associated with the application. For example, the data processing can parse or process the name of an application, a short description of the application, a long description of the application, and other sources such as user reviews to extract nouns and verbs. The data processing system can map the nouns and verbs (e.g., artist name, play music) and map them to actual intents or actions, such as play a song. The data processing system can then use a classification technique to determine a level of similarity between the automatically generated or detected intents or actions with the actions registered or provided by the application developer. If the actions are below a threshold level of similarity, then the data processing system can block the application.
- The data processing system can include or be configured with a third classifier. The third classifier can determine a classification score for the application based on a similar application. For example, the first application can be a ride sharing application. The data processing system can identify a second application that is also a ride sharing application and has already passed the review process. If the first application is undergoing a debugging or review process, the data processing system can leverage the results of the second application that is similar to determine if the actions being submitted with the first application are satisfactory. The data processing system can perform this review process responsive to submission of the first application, or on an on-going basis.
- The data processing, by using or being configured with one or more classifiers, can improve the quality and reliability of the analysis or debugging process, while also shortening the review process. The data processing system, via the one or more classifiers, can improve the efficiency of the application review process while also improving the results of the application review process. For example, data processing system, via the one or more classifiers, can review or debug applications without having to download each application, install the application, set up an account for the application, and then test the application.
- Thus, by shortening the review process while also improving the results of the review process, the data processing system can provide an improvement to an application delivery server. The data processing system can further provide a reduction in resource consumption or resource utilization by, for example, reducing the number of remote procedure calls or fraudulent remote procedure calls or processing as a result of blocking or preventing delivery of fraudulent or malicious application. For example, a fraudulent or malicious application can provide misleading, fraudulent, or erroneous content items responsive to user queries or requests. The data processing system can further provide enhanced device security against malicious applications.
-
FIG. 1 illustrates anexample system 100 to synchronize access controls between computing devices. Thesystem 100 can include content selection infrastructure. Thesystem 100 can include application delivery infrastructure. Thesystem 100 can include an online application store or marketplace. Thesystem 100 can include adata processing system 102. Thedata processing system 102 can communicate with one or more of anapplication developer device 160 or aclient computing device 140 vianetwork 105. Thesystem 100 can also communicate with other devices, such as third-party devices, content provider devices, or digital surface devices. - The
network 105 can include computer networks such as the Internet, local, wide, metro, or other area networks, intranets, satellite networks, and other communication networks such as voice or data mobile telephone networks. Thenetwork 105 can be used to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed on at least oneclient computing device 140, such as a laptop, desktop, tablet, digital assistant device, smart phone, wearable device, portable computers, or speaker. For example, via the network 105 a user of theclient computing device 140 can access information or data provided by thedata processing system 102 orapplication developer device 160. - The
network 105 can include or constitute a display network, e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system, or that are eligible to include third party digital components as part of a digital component placement campaign. Thenetwork 105 can be used by thedata processing system 102 to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by theclient computing device 140. For example, via the network 105 a user of theclient computing device 140 can access information or data provided by thedata processing system 102 or theapplication developer device 160. - The
network 105 may be any type or form of network and may include any of the following: a point-to-point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. Thenetwork 105 may include a wireless link, such as an infrared channel or satellite band. The topology of thenetwork 105 may include a bus, star, or ring network topology. The network may include mobile telephone networks using any protocol or protocols used to communicate among mobile devices, including advanced mobile phone protocol (“AMPS”), time division multiple access (“TDMA”), code-division multiple access (“CDMA”), global system for mobile communication (“GSM”), general packet radio services (“GPRS”) or universal mobile telecommunications system (“UMTS”). Different types of data may be transmitted via different protocols, or the same types of data may be transmitted via different protocols. - The
system 100 can include at least onedata processing system 102. Thedata processing system 102 can include at least one logic device such as a computing device having a processor to communicate via thenetwork 105, for example with theclient computing device 140 or theapplication developer device 160 or other networked device or third-party device. Thedata processing system 102 can include at least one computation resource, server, processor or memory. For example, thedata processing system 102 can include a plurality of computation resources or servers located in at least one data center. Thedata processing system 102 can include multiple, logically-grouped servers and facilitate distributed computing techniques. The logical group of servers may be referred to as a data center, server farm or a machine farm. The servers can also be geographically dispersed. A data center or machine farm may be administered as a single entity, or the machine farm can include a plurality of machine farms. The servers within each machine farm can be heterogeneous—one or more of the servers or machines can operate according to one or more type of operating system platform. - Servers in the machine farm can be stored in high-density rack systems, along with associated storage systems, and located in an enterprise data center. For example, consolidating the servers in this way may improve system manageability, data security, the physical security of the system, and system performance by locating servers and high performance storage systems on localized high performance networks. Centralization of all or some of the
data processing system 102 components, including servers and storage systems, and coupling them with advanced system management tools allows more efficient use of server resources, which saves power and processing requirements and reduces bandwidth usage. - The
system 100 can include, access, or otherwise interact with at least one third-party device 162. The third-party device 162 can include at least one logic device such as a computing device having a processor to communicate via thenetwork 105, for example with thecomputing device 140, thedata processing system 102, or theapplication developer device 160. The third-party device 162 can include at least one computation resource, server, processor or memory. For example, third-party device 162 can include a plurality of computation resources or servers located in at least one data center. - The third-
party device 162 can provide audio based digital components for presentation or display by theclient computing device 140 as an audio output digital component. The digital component can include an offer for a good or service, such as a voice based message that states: “Would you like me to order you a taxi?” For example, the third-party device 162 can include memory to store a series of audio digital components that can be provided in response to a voice based query. The third-party device 162 can also provide audio based digital components (or other digital components) to thedata processing system 102 where they can be stored in thedata repository 128. Thedata processing system 102 can select the audio digital components and provide (or instruct the third-party device 162 to provide) the audio digital components to theclient computing device 140. The audio based digital components can be exclusively audio or can be combined with text, image, or video data. - The third-
party device 162 can include, interface with, or otherwise communicate with thedata processing system 102. The third-party device 162 can include, interface, or otherwise communicate with theclient computing device 140. The third-party device 162 can include, interface, or otherwise communicate with thecomputing device 140, which can be a mobile computing device. The third-party device 162 can include, interface, or otherwise communicate with theapplication developer device 160. For example, the third-party device 162 can provide a digital component to theclient computing device 140 for execution by theclient computing device 140. The third-party device 162 can provide the digital component to thedata processing system 102 for storage by thedata processing system 102. The third-party device 162 can provide rules or parameters relating to the digital component to thedata processing system 102. - The
client computing device 140 can download an application developed by theapplication developer device 160. Theclient computing device 140 can download the application from thedata processing system 102 via thenetwork 105. The client computing device can download the application from theapplication delivery server 110. Theclient computing device 140 can install the application. Theclient computing device 140 can execute the application. Theclient computing device 140 can execute, launch, trigger or otherwise access or use the application responsive to a user input or trigger event or condition. The application can include a front-end component and a back-end component. Theclient computing device 140 can execute or provide the front-end component of the application, while thedata processing system 102 orapplication developer device 160 provides a back-end component of the application. - The
client computing device 140 can include, interface, or otherwise communicate with at least onesensor 144,transducer 146,audio driver 148, orpre-processor 150. Theclient computing device 140 can include alight source 142 ordisplay device 152, such as a light indicator, light emitting diode (“LED”), organic light emitting diode (“OLED”), or other visual indicator configured to provide a visual or optic output. Thesensor 144 can include, for example, an ambient light sensor, proximity sensor, temperature sensor, accelerometer, gyroscope, motion detector, GPS sensor, location sensor, microphone, or touch sensor. Thetransducer 146 can include a speaker or a microphone. Theaudio driver 148 can provide a software interface to thehardware transducer 146. The audio driver can execute the audio file or other instructions provided by thedata processing system 102 to control thetransducer 146 to generate a corresponding acoustic wave or sound wave. The pre-processor 150 can include a processing unit having hardware configured to detect a keyword and perform an action based on the keyword. The pre-processor 150 can filter out one or more terms or modify the terms prior to transmitting the terms to thedata processing system 102 for further processing. The pre-processor 150 can convert the analog audio signals detected by the microphone into a digital audio signal, and transmit one or more data packets carrying the digital audio signal to thedata processing system 102 via thenetwork 105. In some cases, the pre-processor 150 can transmit data packets carrying some or all of the input audio signal responsive to detecting an instruction to perform such transmission. The instruction can include, for example, a trigger keyword or other keyword or approval to transmit data packets comprising the input audio signal to thedata processing system 102. - The
client computing device 140 can be associated with an end user that enters voice queries as audio input into the client computing device 140 (via the sensor 144) and receives audio output in the form of a computer generated voice that can be provided from the data processing system 102 (or theapplication developer device 160 or the third-party device 162) to theclient computing device 140, output from the transducer 146 (e.g., a speaker). The computer generated voice can include recordings from a real person or computer generated language. - The client computing device 140 (or computing device, or client device, or digital device) may or may not include a display. For example, the computing device may include limited types of user interfaces, such as a microphone and speaker. In some cases, the primary user interface of the
computing device 140 may be a microphone and speaker, or voice interface. For example, the primary user interface of theclient computing device 140 can include a voice-based or audio-based user interface. Theclient computing device 140 can include a display and have the primary user interface be voice-based or audio-based. The primary user interface of theclient computing device 140 can be conversational. A conversational user interface can refer to a user interface that is at least in part driven or facilitated by a naturallanguage processor component 106 of thedata processing system 102. - The
data processing system 102 can include a content placement system having at least one computation resource or server. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneinterface 104. Thedata processing system 102 can include, interface, or otherwise communicate with at least one naturallanguage processor component 106. Thedata processing system 102 can include, interface, or otherwise communicate with at least one direct action application programming interface (“API”) 108. Theinterface 104, naturallanguage processing component 106 anddirect action API 108 can provide a conversational API or digital assistant functionality. The conversational API or digital assistant can communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces in order to provide data or receive data or perform other functionality. - The
data processing system 102 can include, interface, or otherwise communicate with at least oneapplication delivery server 110. Thedata processing system 102 can include, interface, or otherwise communicate with at least onedelivery controller component 112. Thedata processing system 102 can include, interface, or otherwise communicate with at least one deep link builder component 114. Thedata processing system 102 can include, interface, or otherwise communicate with at least onefirst classifier component 116. Thedata processing system 102 can include, interface, or otherwise communicate with at least onesecond classifier component 118. Thedata processing system 102 can include, interface, or otherwise communicate with at least onethird classifier component 120. Thedata processing system 102 can include, interface, or otherwise communicate with at least onematching engine component 122. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneaction generator 124. Thedata processing system 102 can include, interface, or otherwise communicate with at least onedata repository 128. - The
interface 104, naturallanguage processor component 106,direct action API 108,application delivery server 110,delivery controller component 112, deep link builder component 114,first classifier component 116,second classifier component 118,third classifier component 120, matchingengine component 122, andaction generator 124 can each include at least one processing unit or other logic device such as programmable logic array engine, or module configured to communicate with thedatabase repository 128 or database. Theinterface 104, naturallanguage processor component 106,direct action API 108,application delivery server 110,delivery controller component 112, deep link builder component 114,first classifier component 116,second classifier component 118,third classifier component 120, matchingengine component 122,action generator 124 anddata repository 128 can be separate components, a single component, or part of thedata processing system 102. Thesystem 100 and its components, such as adata processing system 102, can include hardware elements, such as one or more processors, logic devices, or circuits. - The
data processing system 102 can obtain anonymous computer network activity information associated with a plurality of client computing devices 140 (or computing device or digital assistant device). A user of aclient computing device 140 or mobile computing device can affirmatively authorize thedata processing system 102 to obtain network activity information corresponding to theclient computing device 140 or mobile computing device. For example, thedata processing system 102 can prompt the user of thecomputing device 140 for consent to obtain one or more types of network activity information. Theclient computing device 140 can include a mobile computing device, such as a smartphone, tablet, smartwatch, or wearable device. The identity of the user of theclient computing device 140 can remain anonymous and thecomputing device 140 can be associated with a unique identifier (e.g., a unique identifier for the user or the computing device provided by the data processing system or a user of the computing device). The data processing system can associate each observation with a corresponding unique identifier. - The
data processing system 102 can interface with a third-party device 162. The third-party device 162 can include or refer to a device of a content provider. The content provider can establish an electronic content campaign. The electronic content campaign can be stored as content data in thedata repository 128. An electronic content campaign can refer to one or more content groups that correspond to a common theme. A content campaign can include a hierarchical data structure that includes content groups, digital component data objects, and content selection criteria. To create a content campaign, the content provider can specify values for campaign level parameters of the content campaign. The campaign level parameters can include, for example, a campaign name, a preferred content network for placing digital component objects, a value of resources to be used for the content campaign, start and end dates for the content campaign, a duration for the content campaign, a schedule for digital component object placements, language, geographical locations, type of computing devices on which to provide digital component objects. In some cases, an impression can refer to when a digital component object is fetched from its source (e.g.,data processing system 102 or content provider), and is countable. In some cases, due to the possibility of click fraud, robotic activity can be filtered and excluded, as an impression. Thus, in some cases, an impression can refer to a measurement of responses from a Web server to a page request from a browser, which is filtered from robotic activity and error codes, and is recorded at a point as close as possible to opportunity to render the digital component object for display on thecomputing device 140. In some cases, an impression can refer to a viewable or audible impression; e.g., the digital component object is at least partially (e.g., 20%, 30%, 30%, 40%, 50%, 60%, 70%, or more) viewable on adisplay device 152 of theclient computing device 140, or audible via aspeaker 136 of thecomputing device 140. A click or selection can refer to a user interaction with the digital component object, such as a voice response to an audible impression, a mouse-click, touch interaction, gesture, shake, audio interaction, or keyboard click. A conversion can refer to a user taking a desired action with respect to the digital component objection; e.g., purchasing a product or service, completing a survey, visiting a physical store corresponding to the digital component, or completing an electronic transaction. - The content provider can further establish one or more content groups for a content campaign. A content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interest, topic, or vertical. Content groups under the same content campaign can share the same campaign level parameters, but may have tailored specifications for particular content group level parameters, such as keywords, negative keywords (e.g., that block placement of the digital component in the presence of the negative keyword on main content), bids for keywords, or parameters associated with the bid or content campaign.
- To create a new content group, the content provider can provide values for the content group level parameters of the content group. The content group level parameters include, for example, a content group name or content group theme, and bids for different content placement opportunities (e.g., automatic placement or managed placement) or outcomes (e.g., clicks, impressions, or conversions). A content group name or content group theme can be one or more terms that the content provider can use to capture a topic or subject matter for which digital component objects of the content group is to be selected for display. For example, a car dealership can create a different content group for each brand of vehicle it carries, and may further create a different content group for each model of vehicle it carries. Examples of the content group themes that the car dealership can use include, for example, “Make A sports car” “Make B sports car,” “Make C sedan,” “Make C truck,” “Make C hybrid,” or “Make D hybrid.” An example content campaign theme can be “hybrid” and include content groups for both “Make C hybrid” and “Make D hybrid”, for example.
- The content provider can provide one or more keywords and digital component objects to each content group. Keywords can include terms that are relevant to the product or services of associated with or identified by the digital component objects. A keyword can include one or more terms or phrases. For example, the car dealership can include “sports car,” “V-6 engine,” “four-wheel drive,” “fuel efficiency,” as keywords for a content group or content campaign. In some cases, negative keywords can be specified by the content provider to avoid, prevent, block, or disable content placement on certain terms or keywords. The content provider can specify a type of matching, such as exact match, phrase match, or broad match, used to select digital component objects.
- The content provider can provide one or more keywords to be used by the
data processing system 102 to select a digital component object provided by the content provider. The content provider can identify one or more keywords to bid on, and further provide bid amounts for various keywords. The content provider can provide additional content selection criteria to be used by thedata processing system 102 to select digital component objects. Multiple content providers can bid on the same or different keywords, and thedata processing system 102 can run a content selection process or ad auction responsive to receiving an indication of a keyword of an electronic message. - The content provider can provide one or more digital component objects for selection by the
data processing system 102. Thedata processing system 102 can select the digital component objects when a content placement opportunity becomes available that matches the resource allocation, content schedule, maximum bids, keywords, and other selection criteria specified for the content group. Different types of digital component objects can be included in a content group, such as a voice digital component, audio digital component, a text digital component, an image digital component, video digital component, multimedia digital component, or digital component link. A digital component object (or digital component) can include, for example, a content item, an online document, audio, images, video, multimedia content, or sponsored content. Upon selecting a digital component, thedata processing system 102 can transmit the digital component object for rendering on acomputing device 140 ordisplay device 152 of thecomputing device 140. Rendering can include displaying the digital component on a display device, or playing the digital component via a speaker of thecomputing device 140. Thedata processing system 102 can provide instructions to acomputing device 140 to render the digital component object. Thedata processing system 102 can instruct thecomputing device 140, or anaudio driver 148 of thecomputing device 140, to generate audio signals or acoustic waves. - The
data repository 124 can include one or more local or distributed databases, and can include a database management system. Thedata repository 128 can include computer data storage or memory and can store one or more of application (“app”)data 130,scores 132,historical data 134,parameters 136, orthresholds 138, among other data. Thedata repository 128 can store the one or more of application (“app”)data 130,scores 132,historical data 134,parameters 136, orthresholds 138 in one or more data structures, databases, data files, indexes, or other type of data storage. - The
app data 130 can include information about an application. Theapp data 130 can include information about an application submitted by anapplication developer device 160. Theapp data 130 can include metadata associated with an application.App data 130 can include, for example, a title of an application, short description, detail description, version identifier, entities, actions, intents, compatibility information, size, type of application, category of the application, among other information.App data 130 can include a unique identifier of the application, such as an alphanumeric identifier.App data 130 can include information about the application developer that provided or submitted the application. -
Scores 132 can refer to a classification score of the application.Scores 132 can include a first classification score, second classification score, third classification score or combined classification score for an application. Thedata processing system 102 can review or process an application to determine the one or more scores, and store the scores for the application in thescores 132 data structure. Scores can be numerical, alphanumeric, letter grade, rank, symbol, text, binary, or otherwise provide an indication of a result of a review process of the application. For example, the score can include a numeric score in the range of 0 to 100, where 0 represents the lowest level or likelihood of fraud, and 100 represent the highest level or likelihood of fraud. The score can indicate whether the application passes the review process. For example, a score of 100 can indicate that the application passed the review process, whereas a score of 0 can indicate that the application failed the review process. The score can be a letter grade, such as “A”, “B”, “C”, “D”, or “F”, where the letter grade of A can indicate that the application passed the review process, and a letter grade of F indicates that the application failed the review process. The score can be a keyword or text, such as “Pass” or “Fail”. The score can be binary, such as “0” or “1”. -
Historical data 134 can include data related to an application.Historical data 134 can include data related to execution or use of an application.Historical data 134 can include data related to a previous use or execution of the application by aclient computing device 140.Historical data 134 can include feedback related to a previous use or execution of the application. For example, aclient computing device 140 can execute the application. Theclient computing device 140 can include a monitor or agent executing on theclient computing device 140 that can identify aspects related to the application, such as the number of remote procedure calls, repeated requests made to the application, indications of erroneous responses or content data provided by the application, or indications of fraudulent or misleading content data or responses provided by the application. Theclient computing device 140 can provide feedback from a user regarding the execution of the application. For example, theclient computing device 140 can provide a prompt to a user of the application as to whether the application provided a satisfactory response or performed the requested or desired action. For example, the prompt can include “Did Application_A satisfactorily perform the requested action?” Thehistorical data 134 can include or store such feedback from the monitor or agent executing on theclient computing device 140, as well as feedback to prompts or surveys provided by a user of theclient computing device 140 or application. - The
data repository 128 can store aparameter 136.Parameter 136 can refer to or include a parameter data structure.Parameter 136 can refer to or include a delivery control parameter. A delivery control parameter is a parameter that can cause theapplication delivery server 110 to deliver an application, block delivery of an application, authorize an action of an application, or disable an action of an application. Each application that has been reviewed or processed by thedata processing system 102 can be associated with a delivery control parameter. The delivery control parameter can be an instruction, numeric parameter, alphanumeric value, flag, tag, or other indicator that can cause theapplication delivery server 110 to adjust whether or how an application is delivered to aclient computing device 140. - The
data repository 128 can include or store athreshold 138. Thethreshold 138 can refer to or include a threshold data structure. Thedata processing system 102 can compare a score 132 (e.g., a classification score) of an application with thethreshold 138 in order to determine whether the application passes or fails a classification. Thethresholds 138 can be the same or different for each type of classification.Thresholds 138 can be absolute thresholds (e.g., an absolute or fixed value), a percentage threshold, a ratio threshold. Thethreshold 138 can be a dynamic threshold that can vary based on metadata associated with an application. Thethreshold 138 can vary based on feedback, real-time information, or other factors. Thethreshold 138 can vary based on the type of application or version of the application (e.g., new application being submitted, or a new version of the application). Thethreshold 138 can be set for a specific application and vary based on, for example, the number of times the application has been installed (e.g., lower threshold for an application with more than 100,000 downloads because a high download count may indicate that the application is less likely to be fraudulent or provide erroneous content). In some cases, the threshold may be higher for an application with a high download count so thedata processing system 102 can prevent a large number of erroneous responses or wasted remote procedure calls or other computing resource utilization. - The
data processing system 102 can include an interface 104 (or interface component) designed, configured, constructed, or operational to receive and transmit information using, for example, data packets. Theinterface 104 can receive and transmit information using one or more protocols, such as a network protocol. Theinterface 104 can include a hardware interface, software interface, wired interface, or wireless interface. Theinterface 104 can facilitate translating or formatting data from one format to another format. For example, theinterface 104 can include an application programming interface that includes definitions for communicating between various components, such as software components. Theinterface 104 can communicate with one or more of theclient computing device 140,application developer device 160, or third-party device 162 vianetwork 105. - The
data processing system 102 can interface with an application, script or program installed at theclient computing device 140, such as an app to communicate input audio signals to theinterface 104 of thedata processing system 102 and to drive components of the local client computing device to render output audio signals. Thedata processing system 102 can receive data packets or other signal that includes or identifies an audio input signal. - The
data processing system 102 can include a natural language processor (“NLP”)component 106. For example, thedata processing system 102 can execute or run theNLP component 106 to receive or obtain the audio signal and parse the audio signal. For example, theNLP component 106 can provide for interactions between a human and a computer. TheNLP component 106 can be configured with techniques for understanding natural language and allowing thedata processing system 102 to derive meaning from human or natural language input. TheNLP component 106 can include or be configured with technique based on machine learning, such as statistical machine learning. TheNLP component 106 can utilize decision trees, statistical models, or probabilistic models to parse the input audio signal. TheNLP component 106 can perform, for example, functions such as named entity recognition (e.g., given a stream of text, determine which items in the text map to proper names, such as people or places, and what the type of each such name is, such as person, location, or organization), natural language generation (e.g., convert information from computer databases or semantic intents into understandable human language), natural language understanding (e.g., convert text into more formal representations such as first-order logic structures that a computer module can manipulate), machine translation (e.g., automatically translate text from one human language to another), morphological segmentation (e.g., separating words into individual morphemes and identify the class of the morphemes, which can be challenging based on the complexity of the morphology or structure of the words of the language being considered), question answering (e.g., determining an answer to a human-language question, which can be specific or open-ended), semantic processing (e.g., processing that can occur after identifying a word and encoding its meaning in order to relate the identified word to other words with similar meanings). - The
NLP component 106 can convert the audio input signal into recognized text by comparing the input signal against a stored, representative set of audio waveforms (e.g., in the data repository 128) and choosing the closest matches. The set of audio waveforms can be stored indata repository 128 or other database accessible to thedata processing system 102. The representative waveforms are generated across a large set of users, and then may be augmented with speech samples from the user. After the audio signal is converted into recognized text, theNLP component 106 matches the text to words that are associated, for example via training across users or through manual specification, with actions that thedata processing system 102 can serve. Aspects or functionality of theNLP component 106 can be performed by thedata processing system 102 or theclient computing device 140. For example, a local NLP component can execute on theclient computing device 140 to perform aspects of converting the input audio signal to text and transmitting the text via data packets to thedata processing system 102 for further natural language processing. - The audio input signal can be detected by the
sensor 144 or transducer 146 (e.g., a microphone) of theclient computing device 140. Via thetransducer 146, theaudio driver 148, or other components theclient computing device 140 can provide the audio input signal to the data processing system 102 (e.g., via the network 105) where it can be received (e.g., by the interface 104) and provided to theNLP component 106 or stored in thedata repository 128. - The
client computing device 140 can include anaudio driver 148, atransducer 146, asensor 144 and apre-processor component 150. Thesensor 144 can receive or detect an input audio signal (e.g., voice input). Thepre-processor component 150 can be coupled to the audio driver, the transducer, and the sensor. Thepre-processor component 150 can filter the input audio signal to create a filtered input audio signal (e.g., by removing certain frequencies or suppressing noise). Thepre-processor component 150 can convert the filtered input audio signal to data packets (e.g., using a software or hardware digital-to-analog converter). In some cases, thepre-processor component 150 can convert the unfiltered input audio signal to data packets and transmit the data packets to thedata processing system 102. Thepre-processor component 150 can transmit the data packets to adata processing system 102 comprising one or more processors and memory that execute a natural language processor component, an interface, a speaker recognition component, and a direct action application programming interface. - The
data processing system 102 can receive, via the interface, from the pre-processor component, the data packets comprising the filtered (or unfiltered) input audio signal detected by the sensor. Thedata processing system 102 can identify an acoustic signature from the input audio signal. Thedata processing system 102 can identify, based on a lookup in a data repository (e.g., querying a database), an electronic account corresponding to the acoustic signature. Thedata processing system 102 can establish, responsive to identification of the electronic account, a session and an account for use in the session. The account can include a profile having one or more policies. Thedata processing system 102 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request. - The
data processing system 102 can provide, to thepre-processor component 150 of theclient computing device 140, a status. Theclient computing device 140 can receive the indication of the status. The audio driver can receive the indication of the status of the profile, and generate an output signal based on the indication. The audio driver can convert the indication to an output signal, such as sound signal, or acoustic output signal. The audio driver can drive the transducer 146 (e.g., speaker) to generate sound based on the output signal generated by the audio drive. - In some cases, the
client computing device 140 can include alight source 142. The light source can include one or more LEDs, lights, display, or other component or device configured to provide an optical or visual output. Thepre-processor component 150 can cause the light source to provide a visual indication corresponding to the status. For example, the visual indication can be a status indicator light that turns on, a change in color of the light, a light pattern with one or more colors, or a visual display of text or images. - The
NLP component 106 can obtain the input audio signal. From the input audio signal, theNLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request. The request can indicate intent or subject matter of the input audio signal. The trigger keyword can indicate a type of action likely to be taken. The trigger keyword can be a wakeup signal or hotword that indicates to theclient computing device 140 to convert the subsequent audio input into text and transmit the text todata processing system 102 for further processing. For example, theNLP component 106 can parse the input audio signal to identify at least one request to leave home for the evening to attend dinner and a movie. The trigger keyword can include at least one word, phrase, root or partial word, or derivative indicating an action to be taken. For example, the trigger keyword “go” or “to go to” from the input audio signal can indicate a need for transport. In this example, the input audio signal (or the identified request) does not directly express an intent for transport, however the trigger keyword indicates that transport is an ancillary action to at least one other action that is indicated by the request. - The
NLP component 106 can parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and the trigger keyword. For instance, theNLP component 106 can apply a semantic processing technique to the input audio signal to identify the trigger keyword or the request. TheNLP component 106 can apply the semantic processing technique to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal can include the sentence “I want a ride to the airport.” TheNLP component 106 can apply a semantic processing technique, or other natural language processing technique, to the data packets comprising the sentence to identify the request or trigger phrases “want a ride” and “airport”. TheNLP component 106 can further identify multiple trigger keywords, such as want and ride. For example, theNLP component 106 can determine that the trigger phrase includes the trigger keyword and a second trigger keyword. - The
NLP component 106 can filter the input audio signal to identify the trigger keyword. For example, the data packets carrying the input audio signal can include “It would be great if I could get someone that could help me go to the airport”, in which case theNLP component 106 can filter out one or more terms as follows: “it”, “would”, “be”, “great”, “if”, “I”, “could”, “get”, “someone”, “that”, “could”, or “help”. By filtering out these terms, theNLP component 106 may more accurately and reliably identify the trigger keywords, such as “go to the airport” and determine that this is a request for a taxi or a ride sharing service. - In some cases, the
NLP component 106 can determine that the data packets carrying the input audio signal includes one or more requests. For example, the input audio signal can include the sentence “I want to purchase an audiobook and monthly subscription to movies.” TheNLP component 106 can determine this is a request for an audio book and a streaming multimedia service. TheNLP component 106 can determine this is a single request or multiple requests. TheNLP component 106 can determine that this is two requests: a first request for a service provider that provides audiobooks, and a second request for a service provider that provides movie streaming. In some cases, theNLP component 106 can combine the multiple determined requests into a single request, and transmit the single request to a third-party device 162. In some cases, theNLP component 106 can transmit the individual requests to another service provider device, or separately transmit both requests to the same third-party device 162. - The
data processing system 102 can include adirect action API 108 designed and constructed to generate, based on the trigger keyword, an action data structure responsive to the request. Thedirect action API 108 can generate the action data structure to cause an application to perform the corresponding action. Thedirect action API 108 can transmit the action data structure to the application installed on theclient computing device 140 to cause theclient computing device 140 to perform the corresponding action or initiate an action. The action data structure generated by thedirect action API 108 can include a deep link for an application installed on theclient computing device 140. The application installed on theclient computing device 140 can then perform the action or communicate with theapplication developer device 160 or a third-party device 162 to perform the action. - Processors of the
data processing system 102 can invoke thedirect action API 108 to execute scripts that generate a data structure to provide to an application installed on theclient computing device 140, anapplication developer device 160, or a third-party device 162 or other service provider to obtain a digital component, order a service or product, such as a car from a car share service or an audiobook. Thedirect action API 108 can obtain data from thedata repository 128, as well as data received with end user consent from theclient computing device 140 to determine location, time, user accounts, logistical or other information to allow the third-party device 162 to perform an operation, such as reserve a car from the car share service. Using thedirect action API 108, thedata processing system 102 can also communicate with the third-party device 162 to complete the conversion by in this example making the car share pick up reservation. - The
direct action API 108 can execute a specified action to satisfy the end user's intention, as determined by thedata processing system 102. Depending on the action specified in its inputs and the parameters or rules in thedata repository 128, thedirect action API 108 can execute code or a dialog script that identifies the parameters required to fulfill a user request. Thedirect action API 108 can execute an application to satisfy or fulfill the end user's intention. Such code can look-up additional information, e.g., in thedata repository 128, such as the name of a home automation service, or third-party service, or it can provide audio output for rendering at theclient computing device 140 to ask the end user questions such as the intended destination of a requested taxi. Thedirect action API 108 can determine parameters and can package the information into an action data structure, which can then be sent to another component such as theapplication delivery server 110 to be fulfilled. - The
direct action API 108 can receive an instruction or command from theNLP component 106, or other component of thedata processing system 102, to generate or construct the action data structure. Thedirect action API 108 can determine a type of action in order to select a template stored in thedata repository 128. The actions can be fulfilled by application provided by theapplication delivery server 110 and submitted by anapplication developer device 160. The application can perform or facilitate the performance of the action. Example types of actions can include, for example, watch action, listen action, read action, navigation action, or weather action. Types of actions can include or be configured to provide, for example, services, products, reservations, tickets, multimedia content, audiobook, manage subscriptions, adjust subscriptions, transfer digital currency, make purchases, or music. Types of actions can further include types of services or products. For example, types of services can include car share service, food delivery service, laundry service, maid service, repair services, household services, device automation services, or media streaming services. Types of products can include, for example, clothes, shoes, toys, electronics, computers, books, or jewelry. Types of reservations can include, for example, dinner reservations or hair salon appointments. Types of tickets can include, for example, movie tickets, sports venue tickets, or flight tickets. In some cases, the types of services, products, reservations or tickets can be categorized based on price, location, type of shipping, availability, or other attributes. - The
NLP component 106 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request, and provide the request and trigger keyword to thedirect action API 108 to cause the direct action API to generate, based on the trigger keyword, a first action data structure responsive to the request. Thedirect action API 108, upon identifying the type of request, can access the corresponding template from a template repository (e.g., data repository 128). Templates can include fields in a structured data set that can be populated by thedirect action API 108 to further the operation that is requested via input audio detected by the client computing device 140 (such as the operation of sending a taxi to pick up an end user at a pickup location and transport the end user to a destination location). Thedirect action API 108, orclient computing device 140, can launch or trigger an application to fulfill the request in the input audio. For example, a car sharing service application can include one or more of the following fields: device identifier, pick up location, destination location, number of passengers, or type of service. Thedirect action API 108 can populate the fields with values. To populate the fields with values, thedirect action API 108 can ping, poll or otherwise obtain information from one ormore sensors 144 of thecomputing device 140 or a user interface of thedevice 140. For example, thedirect action API 108 can detect the source location using a location sensor, such as a GPS sensor. Thedirect action API 108 can obtain further information by submitting a survey, prompt, or query to the end of user of thecomputing device 140. The direct action API can submit the survey, prompt, or query viainterface 104 of thedata processing system 102 and a user interface of the computing device 140 (e.g., audio interface, voice-based user interface, display, or touch screen). Thus, thedirect action API 108 can select a template for the action data structure based on the trigger keyword or the request, populate one or more fields in the template with information detected by one ormore sensors 144 or obtained via a user interface, and generate, create or otherwise construct the action data structure to facilitate performance of an operation by the third-party device 162. - The
data processing system 102 can include, interface with or otherwise access anapplication delivery server 110. Thedata processing system 102 can include anapplication delivery server 110. Theapplication delivery server 110 can be separate from thedata processing system 102. For example, theapplication delivery server 110 can be a separate system or server from thedata processing system 102. Thedata processing system 102 can communicate with theapplication delivery server 110 vianetwork 105. - The
application delivery server 110 can receive an application submitted by anapplication developer device 160. Theapplication delivery server 110 can maintain one or more versions of an application. Theapplication delivery server 110 can transmit the application to aclient computing device 140. Theapplication delivery server 110 can download the application onto aclient computing device 140. Theapplication delivery server 110 can maintain an online application store or marketplace. Theapplication delivery server 110 can manage or maintain accounts forapplication developer devices 160 orclient computing devices 140. Theapplication delivery server 110 can maintain profiles for the accounts. The accounts or profiles can be associated with a unique identifier. The account can include a financial account or token account that can be used to purchase or subscribe to application. Theapplication delivery server 110 can prompt a user of aclient computing device 140 to pay for an application by providing electronic account information, such as an electronic financial account. - The
application delivery server 110 can provide authentication and authorization services for the accounts of theclient computing device 140 orapplication developer device 160. For example, theapplication delivery server 110 can authenticate and authorize anapplication developer device 160 prior to submission of the application. Theapplication delivery server 110 can authenticate and authorize aclient computing device 140 prior to allowing theclient computing device 140 to download the application. - The data processing system 102 (e.g., via application delivery server 110) can receive an application submitted by the
application developer device 160. Thedata processing system 102 can receive a new application, or an updated version of an application previously submitted. The application can be associated with one or more actions or intents. An action can refer to a messaging object. The messaging object can be configured with an action. Theapplication developer 160 can establish the application with the messaging object and action to cause the application to fulfill the action or perform an action. The action can refer to an intent. The action can be performed on an entity. The application can be configured to perform the action on an inventory of entities. For example, the action can refer to “playing a song” and an entity can be a specific song. The application can be for a music streaming service and can be configured to fulfill a request to play a song by an artist. - The
data processing system 102 can receive a data file associated with the application. The data file can include multiple actions established by theapplication developer device 160 for the application. Theapplication developer device 160 can provide the data file along with the application submission to thedata processing system 102. The data file can be in a format, such as a markup language, a metalanguage, a custom markup language, an extensible markup language, text, or other format. - The data file can indicate actions that the application is configured to perform or fulfill. The data file can provide an indication of an inventory of entities on which the application is configured to perform the action, or configured to access to otherwise fulfill the request or desired intent of the user. The inventory of entities can be provided as a list in the data file. The data file can include a pointer, reference, uniform resource locator, or other indicator that points to a data repository or entities. In some cases, the
data processing system 102 can access the link to a webpage containing entities. Thedata processing system 102 can parse or otherwise process the webpage to identify the entities accessible to the application. - The
data processing system 102 can perform a debugging process for the application. Thedata processing system 102 can perform a review process on the application. Thedata processing system 102 can perform the review or debugging process responsive to an event, trigger condition, request, or instruction. Thedata processing system 102 can perform the debugging or review process based on a time interval (e.g., periodically every 6 hours, 12 hours, 24 hours, 48 hours, 1 week, 30 days or some other time interval). Thedata processing system 102 can perform the debugging or review process based on a number of downloads of the application (e.g., after 100 downloads, 500 downloads, 1,000 downloads, 5,000 downloads, 10,000 downloads, or some other number of downloads). Thedata processing system 102 can perform the debugging or review process responsive to a negative user feedback or negative rating or negative review of the application. Thedata processing system 102 can perform the debugging or review process responsive to a request from a user to perform the review process. - The
data processing system 102 can perform the debugging or review process responsive to receiving a new application or an update to an application. For example, thedata processing system 102 can receive an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server. The indication that the application is a new application can include, for example, theapplication developer 160 providing an indication that this is the first version of the application, providing a new name for the application that is not previously recognized or stored in thedata processing system 102, or selecting a button in a user interface to indicate that the application is a new application. Thedata processing system 102 can determine that the application is a new version or an update to the application based on theapplication developer device 160 indicating that the application is the next version (e.g., sequence of version numbers), thedata processing system 102 determining that an application with the same name from the sameapplication developer device 160 already exists with thedata processing system 102. Thedata processing system 102 can trigger, responsive to the indication of the new application or a new version of the application, a debugging process. In some cases, thedata processing system 102 may determine not to trigger the debugging process for a new version of the application if thedata processing system 102 had determining that the previous version of the application previously satisfied the review process, thereby reducing computing resource utilization. - The
data processing system 102 can determine to perform the debugging process based on the type of application or a functionality of the application. For example, thedata processing system 102 can identify, for an application submitted by an application developer, a messaging object configured with an action by the application developer. Responsive to determining that the application is configured with actions, thedata processing system 102 can initiate a debugging process in order to determine whether the actions are fraudulent, misleading, or erroneous. - The
data processing system 102 can determine to trigger the debugging process prior to delivery of the application for installation on anyclient computing device 140. In some cases, thedata processing system 102 can determine to trigger the debugging process after the application has already been installed on at least oneclient computing device 140. For example, thedata processing system 102 can determine to perform the debugging process responsive to negative feedback associated with the installed application. Thedata processing system 102 can receive an indication of negative feedback for the application from aclient computing device 140 on which the application is installed. Thedata processing system 102 can trigger, responsive to the indication of the negative feedback for the application, the debugging process. - The debugging process can include determining one or more classification scores, such as a first classification score, a second classification score and a third classification score. The
data processing system 102 can include, interface with or otherwise access afirst classifier component 116. Thedata processing system 102 can include afirst classifier component 116 designed, constructed and operational to determine a first classification score. Thefirst classifier component 116 can determine the first classification score. The data processing system 102 (e.g., via the first classifier component 116) can determine the first classification score based on historical execution of the action of the messaging object provided by the application developer. Thedata processing system 102 can determine the first classification score based on whether previous calls to the application to perform the action resulted in fulfillment of the action. Thedata processing system 102 can determine the first classification score based on user feedback based on previous executions of the action by the application. - For example, multiple
client computing devices 140 may have installed the application. Users of theclient computing devices 140 may have requested the application to perform an action, such as play a particular song. The application may or may not have played the song responsive to the request from the user. The user of theclient computing device 140, based on their previous interactions with the applications and previous execution of an action with the application, can provide feedback on the application. For example, theapplication delivery server 110 can provide a prompt or other graphical user interface via which the user of theclient computing device 140 can provide an indication as to whether the application fulfilled the action the user requested of the application. - The rating system can include a score. The score can be stored in the
score data structure 132 indata repository 128. Thedata processing system 102 can determine the first classification score based on feedback from users that made requests to the application. For example, users can rate the application on a scale of 1 to 5, where 5 indicates that the application fulfills requests well, and 1 indicates that the application does not fulfill requests well. - In some cases, the
data processing system 102 can provide a prompt or query to a user of theclient computing device 140 to obtain information about the application. The data processing system 102 (e.g., via first classifier component 116) can construct a prompt or query to obtain information about the application and whether the application can fulfill certain types of actions or requests. Thedata processing system 102 can determine, fromapplication data 130, a category of the application or a type of the application (e.g., ridesharing, music service, news, or weather). Thedata processing system 102 can determine types of actions configured for the application from a data file submitted with the application that lists actions configured or established by theapplication developer device 160 for the application. Using theapplication data 130, thedata processing system 102 can construct a query or survey. For example, theapplication data 130 can indicate that the application is a ridesharing application. Thedata processing system 102 can determine that an action of the application may be to provide a ride to a user. Thedata processing system 102 can generate a query such as “Does Application_A provide rides?” Thedata processing system 102 can transmit the query to aclient computing device 140 that has installed the application. Thedata processing system 102 can provide the query to aclient computing device 140 that has executed the action for the application. Thedata processing system 102 can determine whether theclient computing device 140 has downloaded, installed, or executed the action for the application based on account information stored in thedata repository 128, or information stored on theclient computing device 140. - The
data processing system 102 can obtain feedback from users of theclient computing device 140 as to whether the application is configured to fulfill the actions theapplication developer 160 indicates that the application is configured to fulfill. The first classification score can indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score with a threshold (e.g.,threshold 138 stored in data repository 128). - The
first classifier component 116 can obtain feedback from users ofclient computing devices 140 in various forms, including, for example, written reviews, scores, responses to surveys, responses to queries, users uninstalling the application after trying to execute an action, or other types of feedback. Thefirst classifier component 116, using one or more types of feedback, can generate the first classification score. For example, thefirst classifier component 116 can determine an average score from the individual ratings, and use the average score as the first classification score. Thefirst classifier component 116 can combine two or more different types of feedback scores to generate a single feedback score as the first classification score. To generate the first classification score, thefirst classifier component 116 can combine the different types of feedback scores by multiplying the scores, adding the scores, taking a dot product of the scores, inputting the scores into a function, or otherwise combining the scores. Thefirst classifier component 116 can combine the scores by taking an average of the different scores. Thefirst classifier component 116 can combine the scores by applying a weight to the different scores before combining the scores. Thefirst classifier component 116 can generate the first classification score as a weighted average of the different scores. Thefirst classification component 116, to generate the first classification score, can reformat, translate, transform or otherwise manipulate the individual feedback scores from the different feedback sources. For example, thedata processing system 102 can generate a first feedback score from parsing reviews of the application, a second feedback score based on user ratings of the application in an online application delivery marketplace managed by theapplication delivery server 110, and a third feedback score based on survey results from users. Thedata processing system 102 can convert each of these different feedback scores into a normalized feedback score, and then combine the normalized scores (e.g., via an average) in order to generate the first classification score. Thefirst classification component 116 can store the first classification score in thescore data structure 132 for further processing by thedata processing system 102. - The
data processing system 102 can include, interface with or otherwise access anaction generator 124 designed, constructed and operative to generate a machine generated action for the application based on metadata associated with the application. Thedata processing system 102 can generate an action based onapplication data 130, including, for example, a title of the application, short description, long description, metadata, entities, content, or user reviews. Theaction generator 124 can take, as input, the name, short description, long description, user reviews or other sources to extract nouns and verbs. Theaction generator 124 can map the nouns and verbs (e.g., artist name, or play music) to actions or intents such as “play a song.” Thus, theaction generator 124 can map application information to a machine generated action. Theaction generator 124 can map the application information absent the list of actions provided by theapplication developer device 160 along with the submission of the application. Theaction generator 124 can generate the machine generated action without using the actions listed or identified in the data file provided by theapplication developer device 160. By using metadata such as the title, description or user reviews for the application, theaction generator 124 can generate a machine generated action independent of information about actions provided by theapplication developer device 160. Generating machine generated actions independent of using the actions listed in the data file by the application developer, thedata processing system 102 can review the actions identified by the developer as being configured for the application. - The
action generator 124 can mapapplication data 130 to a predetermined list of actions in order to create the machine generated action for the application. The predetermined list of actions can be provided by an administrator of thedata processing system 102 or an administrator of theapplication delivery server 110. The predetermined list of actions can include or refer to a list of actions that thedirect action API 108 of thedata processing system 102 is configured to execute or perform. The predetermined list of actions can be categorized. The predetermined list of actions can be categorized based on different types of actions. Types of actions can include, for example, music actions, ridesharing actions, navigation actions, news actions, ticket purchase actions, or other types of actions. - The
action generator 124 can identify the machine generated action by mappingapplication data 130 to the predetermined list of actions. For example, the predetermined list of actions for a music application can include: play a song, play an album, next song, replay, pause, start a radio station, or create a playlist. In another example, the predetermined list of actions for a ridesharing application can include: order a ride to [destination]; what is the estimate to go to [destination]; how far away is my ride?; cancel ride; or what type of car is picking me up? Theaction generator 124, based on one of these predetermined actions, can identify the machine generated action that maps to an application. - The
action generator 124 can convert entities to intents or actions to generate the machine generated actions. For example, the data file submitted along with the application can include both intents and entities. Thedata processing system 102 can parse the entities to generate machine generated actions that can be performed on the entities. - The
data processing system 102 can generate the machine generated actions based on metadata or descriptions provided for the application. Thedata processing system 102 can identify discrete objects and combine them into a cluster of text, and input the cluster of text to a mapping technique that can output nouns and verbs. Thedata processing system 102 can then convert the nouns and verbs to intents using a hierarchical graph. Thedata processing system 102 can traverse the graph to identify the intent or action. - The
data processing system 102 can perform a lookup using the entities submitted by the application developer. The lookup table can map entities to intents or actions. Thedata processing system 102 can perform a lookup to determine what actions are typically associated with the entities. Thedata processing system 102, using the intents typically associated with the entities and other techniques, can generate the machine generated action. - The
data processing system 102 can include, interface with or otherwise access asecond classifier component 118 designed, constructed and operative to determine a second classification score based on a comparison of the action of the messaging object provided by the application developer with the machine generated action. Thesecond classifier component 118 can compare the actions to determine whether there is a match. Thesecond classifier component 118 can compare the one or more actions provided by theapplication developer device 160 with the one or more machine generated actions generated by theaction generator 124. The second classification score can be based on different types of matching or comparison techniques. Thesecond classifier component 118 can determine how many of the actions are a match, the level of match, the level of overlap, or otherwise compare the two sets of actions. For example, theapplication developer device 160 can submit, along with the application, five different actions. Theaction generator 124 can identify five machine generated actions based on theapplication data 130, and absent the list of actions submitted by theapplication developer device 160. Thesecond classifier component 118 can compare the five actions provided by theapplication developer device 160 with the five actions generated by theaction generator 124 to determine the number of actions that match, if any. Thesecond classifier component 118 can generate the second classification score based on the level of matching. The second classification score can be a percentage based on the ratio of machine generated actions to developer provided actions (e.g., # of machine generated actions that match the developer provided actions divided by the number of developer provided actions). If all five actions match each other, then thedata processing system 102 can determine the second classification score is a 100% match; if four of the machine generated actions match out of the five developer provided actions, then thedata processing system 102 can determine the second classification score is 80% match; if three out of five actions match, then thedata processing system 102 can determine the second classification score is 60%; if two out of five, then 40% match; if one out of five, then 20% match; if 0 out of five, then 0% match. Thedata processing system 102 can store the second classification score in thescores 132 data structure for further processing. - The
data processing system 102 can include, interface with or otherwise access amatching engine component 122 designed, constructed and operative to select a second application that matches the application. Thematching engine component 122 can use a matching program to select the second application that matches the application. Thematching engine component 122 can match applications based onapplication data 130. Thematching engine component 122 can match applications based on, for example, the short description, detailed description, category, user reviews, or other information. Thematching engine component 122 can match applications based on previous version of the application. - The
data processing system 102 can determine that the application matches the second application based on a similarity score between the application and the second application greater than a similarity threshold. The similarity score can be generated using the matching program. Thematching engine component 122 can match a first application with a second application based on the category of the application or a description of the application. For example, the description of the first application can be “ridesharing” and the description of the second application can be “ridesharing” or “carpool” or “taxi service” or “ride service”. Thedata processing system 102, based on the descriptions, can determine that the first application is a match with the second application. Thematching engine component 122 can generate a similarity score based on comparing keywords associated with metadata orapplication data 130 between the application and the second application. Thedata processing system 102 can determine the similarity score by determining a distance between the keywords associated with the two applications using a statistical similarity measure or similarity function. The similarity function can be a real-valued function that quantifies the similarity between two objects. The similarity function can output a similarity score. The similarity function can output a distance metric that can be based on coordinates. The similarity score can correspond to a Euclidean distance between two points, where the two points are mapped onto a Euclidean space based on keywords or features associated with the two applications. Other similarity distances can include, e.g., Manhattan distance. - The
data processing system 102 can determine the two applications are a match if their similarity scores are greater than a threshold. The threshold can refer to a score threshold (e.g., 80% match). For example, thedata processing system 102 can first determine the two applications with the highest level of similarity. Thedata processing system 102, in some cases, determine to use the selected matching application without further checking the similarity score. In some cases, however, thedata processing system 102 can further determine the similarity score and determine to select the second application as the matching application for debugging purposes if the similarity score is also greater than a threshold (e.g., 70% similarity, 80% similarity, 90% similarity). - In another example, the categories of the first and second applications can both be “music”. The matching program can be configured to perform a first level match of applications based on the applications being in the same category. The matching program can further be configured to determine a second level of match based on the description of the applications (e.g., both descriptions indicating online music streaming service).
- The
matching engine component 122 can select the second application that matches the application undergoing the debugging process. Thematching engine component 122 can provide the indication of the matching second application to thethird classifier component 120 in order to generate the third classification score. - The
data processing system 102 can include, interface with or otherwise access athird classifier component 120 designed, constructed and operative to determine a third classification score. Thethird classifier component 120 can determine the third classification score based on a comparison of an action approved for the second matching application with the action of the messaging object provided by the application developer for the application undergoing the debugging or review process. Thethird classifier component 120 can compare the level of match between the actions to generate the third classification score. Thethird classifier component 120 can compare the actions provided by theapplication developer device 160 with the actions associated with the second matching application to determine the number of actions that match, if any. Thethird classifier component 120 can generate the third classification score based on the level of matching. The third classification score can be a percentage based on the ratio of the actions of the second matching application to developer provided actions (e.g., # of second application actions that match the developer provided actions divided by the number of developer provided actions). If all actions match each other, then thedata processing system 102 can determine the second classification score is a 100% match. If not all of the actions match one another, then the third classification score can be less than 100%. For example, there may be five actions provided by theapplication developer device 160 for the application undergoing the debugging or review process. There may be five actions associated with the second matching application identified by thematching engine component 122. If four of the second application actions match out of the five developer provided actions, then thedata processing system 102 can determine the second classification score is 80% match; if three out of five actions match, then thedata processing system 102 can determine the second classification score is 60%; if two out of five, then 40% match; if one out of five, then 20% match; if 0 out of five, then 0% match. Thedata processing system 102 can store the third classification score in thescores 132 data structure for further processing. Thedata processing system 102 can determine the score using various matching techniques, scoring techniques, labels, or classifications. - The
data processing system 102 can include, interface with or otherwise access adelivery controller component 112 designed, constructed and operative to update a delivery control parameter based on the first classification score, the second classification score and the third classification score. Thedelivery controller component 112 can combine the first classification score, second classification score, and third classification score to generate a combined classification score. However, in other examples, thedelivery controller component 112 can combine any of the first classification score, second classification score, and/or third classification score and optionally other classification scores to generate a combined classification score. Thedelivery controller component 112 can determine whether to block delivery of the application or authorize delivery of the application based on the combined classification score. Thedelivery controller component 112 can determine whether to block an action associated with the application, or authorize the action, based on the combined classification score. Thedelivery controller component 112 can update a delivery control parameter based on the combined classification score. For example, the delivery control parameter can include a value, a flag, a binary value, or a switch. The delivery control parameter can instruct theapplication delivery server 110 to block or prevent delivery of the application, or disable an action associated with the application. The delivery control parameter can block delivery of the application, or disable the action, in order to prevent malicious, fraudulent, misleading or erroneous remote procedure calls or content delivery responsive to user requests for an action. Thedata processing system 102 can control, responsive to the delivery control parameter updated by the data processing system, delivery of the application by theapplication delivery server 110. - The
delivery controller component 112 can determine to authorize delivery of the application based on the first classification score, the second classification score and the third classification score. Thedelivery controller component 112 can determine to authorize delivery based on each of the scores individually satisfying a threshold (or respective threshold stored inthreshold 138 data structure). Thedelivery controller component 112 can determine to authorize delivery based on a sum of the three scores satisfying a threshold. The delivery controller component can determine to authorize delivery based on an average of the three scores satisfying a threshold. Thedata processing system 102 can update the delivery control parameter to cause delivery of the application by theapplication delivery server 110. - The
delivery controller component 112 can determine a classification failure based on at least one of the first classification score, the second classification score or the third classification score being less than a failure threshold. Thedata processing system 102 can retrieve the failure threshold from thethreshold data structure 138. Thedata processing system 102 can compare each of the first, second and third classification scores with the failure threshold (or a respective failure threshold). If any one of the classification scores does not satisfy the failure threshold, then thedata processing system 102 can determine to block delivery of the application. For example, thedata processing system 102 can update, responsive to the classification failure, the delivery control parameter to block delivery of the application by theapplication delivery server 110. By disabling or preventing delivery of the application if any one of the classification scores fails, thedata processing system 102 can prevent fraudulent or erroneous applications from being delivered. For example, thedata processing system 102 can determine that the first classification score, which can be based on user feedback, may not satisfy the failure threshold, whereas the second and third classification scores may satisfy the failure threshold. However, thedata processing system 102 may nonetheless determine to block delivery of the application because the feedback-related classification score does not satisfy the failure threshold, thereby indicated that the application may be fraudulent or erroneous or otherwise not be suitable for delivery toclient computing devices 140. - The
data processing system 102 can determine a classification failure based on the first classification score, the second classification score and the third classification score. Thedata processing system 102 can determine the classification failure based on a combination of the three scores, or each of the scores individually. Thedata processing system 102 can automatically update, responsive to the classification failure, the delivery control parameter to block delivery of the application by theapplication delivery server 110. Thedata processing system 102 transmit a notification to theapplication developer device 160 of the classification failure. Theapplication developer device 160, upon receiving the notification, can debug their application to fix or correct the issues causing the classification failure. Thedata processing system 102 can request, responsive to the classification failure, an updated version of the application from theapplication developer device 160. Thedata processing system 102 can transmit a request (e.g., message, electronic message, notification, push message, or prompt) to theapplication developer device 160 stating that the application failed the review or debugging process. Thedata processing system 102 can provide additional information as to which action of the application resulted in failure of the review or debugging process. Thedata processing system 102 can provide additional information as to which classifier in the review process resulted in the application failing the review or debugging process. - The
data processing system 102 can determine to authorize the application for delivery even if one or more of the actions associated with the application fails the review or debugging process. Thedelivery controller component 112 can determine, for an action of the messaging object, a classification failure based on the first classification score, the second classification score and the third classification score. Thedelivery controller component 112 can automatically disable, responsive to the classification failure, the action of the messaging object for execution via the application. Thedata processing system 102 can authorize the application for delivery by theapplication delivery server 110 such that when the application is delivered to aclient computing device 140, the action is disabled and not executable on theclient computing device 140. Thus, even though the application may have been initially configured by theapplication developer 160 with an action that may be fraudulent, misleading or erroneous in some manner, thedata processing system 102 can provide the application for delivery to theclient computing device 140 without causing a waste in computing resource utilization because thedata processing system 102 can pre-emptively disable the action of the application, thereby preventing the fraudulent, misleading or erroneous action from being performed. Theapplication delivery server 110 can determine to disable one or more actions based on the delivery control parameter stored inparameter data structure 136 for the application. The delivery control parameter can include a data structure listing authorized actions for the application. By removing a fraudulent action, then thedata processing system 102 can prevent the application from being triggered responsive to the action. In another example of disabling an action, thedata processing system 102 can remove the unauthorized action from a data file associated with the application. The data file can be the data file submitted by theapplication developer device 160 along with the submission of the application. - For example, the
data processing system 102 can identify actions established for the application via the data file. Thedata processing system 102 can determine, via a debugging process for each of the actions, a first classification score, a second classification score and a third classification score. Thedata processing system 102 can update the delivery control parameter to disable one or more of the actions based on the debugging process. - The
data processing system 102 can authorize or disable actions for an application. Thedata processing system 102 an authorize or disable actions from being executed on particular digital surfaces. Digital surfaces can include, for example, mobile computing device surface, smart speaker surface, voice-only interface, display surface, chatbot surface, webpages, navigation application, or other types of digital surfaces. Thedata processing system 102 can identify digital surfaces for execution of the action of the messaging object of the application. Thedata processing system 102 update the delivery control parameter to disable execution of the action of the messaging object of the application on a digital surface of the multiple digital surfaces. - The
data processing system 102 can determine to exit the debugging process prior to determining each of the first, second and third classification scores for the application or an action of the application. Thedata processing system 102 can determine to exit the debugging process without executing each of thefirst classifier component 116,second classifier component 118 andthird classifier component 120 for the application or an action of the application. For example, thedata processing system 102 can determine that one of the first classification score or the second classification score does not satisfy a failure threshold. Responsive to determining that one of the first classification score or second classification score does not satisfy the failure threshold, thedata processing system 102 can determine to skip determining the third classification score in order to reduce computing resource utilization of thedata processing system 102. - For example, the
data processing system 102 can trigger a debugging process for an application. Thedata processing system 102 can determine, via the debugging process for the application, a first classification score for the application. Thedata processing system 102 can detect a first classification failure based on a comparison of the first classification score for the application with a first classification threshold. The first classification threshold can be retrieved fromthreshold data structure 138 stored indata repository 128. Thedata processing system 102 can exit, responsive to detection of the first classification failure, the debugging process for the application prior to determining a second classification score for the application or a third classification score for the application. Thedata processing system 102 can transmit a notification of the first classification failure to an administrator device of thedata processing system 102 or theapplication developer device 160. By exiting the debugging process subsequent to detecting the classification failure, thedata processing system 102 can both reduce computing resource utilization and also expedite completing the application review and providing the results of the review to theapplication developer device 160. - The
data processing system 102 can include, interface with or otherwise access a deep link builder component 114 designed, constructed and operative to generate a deep link for an application. Thedata processing system 102 can debug or review the application to determine whether the deep link for the application causes the application to perform a function or provide a content item that is responsive to the requested action. For example, thedata processing system 102 can debug the application to determine whether the deep link for the application actually directs a user to a proper screen or state in the application based on the desired action. The deep link builder component 114 can generate the deep link based on actions, entities, and a template provided for the application. A deep link can refer to a hyperlink or other reference or pointer that links to a specific piece of content, such as a specific state or screen in an application, as opposed to a home page or initial state or screen of the application. Deep linking can refer to a link that points to a page or content that is beyond the highest-level home page or screen or state. - The data processing system 102 (e.g., via deep link builder component 114) can generate a deep link for the application. The
data processing system 102 can build a deep link for to book a ride to a specific destination, for example. However, thedata processing system 102 can determine that the deep link into the application may take the user to a page that does not wish to fulfill the intent of the user. Instead, the deep link into the application may direct the user to malicious or abusive content. Thus, the deep link builder component 114 can determine whether the deep link constructed pursuant to the template, actions and entities of the application would fulfill a user's intent. Thedata processing system 102 can therefore perform quality review by determining if the deep links directs the user to the desired action and helps fulfill the intent of the user. To perform quality review, the data processing system can determine whether the intent allegedly being provided by the application is actually provided by the application. For example, a developer of a music streaming service can provide an application with entities for an artist and song. The user may request a song by the artist, which might cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ends up directing the user to a page of a different artist or a different type of page (e.g., audio books), then thedata processing system 102 can determine that the deep link may be erroneous. -
FIG. 2 is an illustration of the operation ofsystem 200 to debug applications. Thesystem 200 can include one or more component ofsystem 100 depicted inFIG. 1 orsystem 400 depicted inFIG. 4 .System 200 can include adata processing system 102. Thedata processing system 102 can communicate, interface with, or otherwise interact with anapplication developer device 160. - At
ACT 201, thedata processing system 102 receive an application. Thedata processing system 102 can receive the application from theapplication developer device 160. Theapplication developer device 160 can be associated with a unique developer account, such as a username and authentication credentials. Theapplication developer device 160 can submit the application to thedata processing system 102 for delivery via an application delivery server or online application marketplace. Thedata processing system 102 can receive the application along with application data, such as metadata, a data file, list of actions, inventory of entities, or other information. - At
ACT 202, thedata processing system 102 can determine whether the application is configured with an action. Thedata processing system 102 can determine whether the application is associated with an action. Thedata processing system 102 can determine whether the application developer has established an action for the application. The developer can submit actions along with the application using a data file, such as an XML file. The actions can be established or configured by the developer for execution by the application. Actions can include or trigger deep links into specific screens, webpages or states in the application. The deep link can be created by a deep link builder of thedata processing system 102 responsive to a request from a user trigging an action established for the application. - The
data processing system 102 can determine whether the application is configured with an action based on parsing an application data file or other information provided by theapplication developer device 160. - If the
data processing system 102 determines that the application is not configured with an action atACT 202, then thedata processing system 102 can proceed toACT 234 to authorize the application for delivery. If, however, thedata processing system 102 determines atACT 202 that the application is configured with an action, then thedata processing system 102 can proceed toACT 204 to trigger a debugging process for the action. - At
ACT 204, thedata processing system 102 can trigger the debugging process. Thedata processing system 102 can trigger the debugging responsive to submission of an application by the application developer or on an on-going basis. Thedata processing system 102 can trigger the debugging process responsive to determining that there is sufficient historical execution information available atACT 206 to generate a first classification score atACT 208. For example, if there is insufficient historical execution information (e.g., limited user feedback such as less than 10, 20, 30, 50, 100, 150, 200, 300, or 500 user ratings, reviews, or responses to survey prompts), then thedata processing system 102 can determine not to trigger the debugging process and continue to authorize the application atACT 234 until there is sufficient user feedback. - The
data processing system 102 can determine, atACT 206, whether there is historical execution information available for the application. Historical execution information can refer to or include user feedback associated with the application or the action of the application being debugged. Thedata processing system 102 can access a data repository storing historical information to determine if there is historical execution information available for the application atACT 206. Thedata processing system 102 can query thedata repository 128, or historicaldata data structure 134 atACT 206. Thedata processing system 102, in some cases, can determine whether historical execution information exists based on whether the application being submitted is a new application that has not been previously submitted. If the application is a new application that has not been previously submitted, then historical execution information may not exist. - If historical execution information does not exist, the
data processing system 102 can determine to proceed to a second classifier and skip a first classifier. If historical execution information does not exist, thedata processing system 102 can determine to insert a delay or wait until historical execution information exists. For example, thedata processing system 102 can temporarily authorize the application for delivery in order to cause the application and action thereof to be installed and executed onclient computing devices 140. The application, upon being installed and executed, can generate historical execution information that thedata processing system 102 can then use to determine a first classification score. - If, at
ACT 206, thedata processing system 102 determines that historical execution information is available, thedata processing system 102 can proceed toACT 208 to generate a first classification score. The data processing system 102 (e.g., via a first classifier component 116) can generate the first classification score using a first classifier component of thedata processing system 102. The first classification score can be based on the historical execution or feedback data thereof. The first classification score can indicate whether the actions provided for the applications fulfilled an intent of a user triggering the action. The first classification score can be a feedback rating provided by users, user responses to a survey, user reviews or other feedback provided by users. - The
data processing system 102 can then determine whether there is a classification failure based on the first classification score atACT 210. The classification failure can be based on a threshold. If thedata processing system 102 determines, atACT 210, a classification failure based on the first classification score, thedata processing system 102 can proceed toACT 236 to update a parameter (e.g., delivery control parameter) to block the application for delivery or disable the action of the application. Thedata processing system 102 can then determine atACT 214 whether the application is configured with additional actions. If the application is configured with additional actions, then thedata processing system 102 can debug the next action by triggering the debugging process atACT 204 with the next action. If thedata processing system 102 determines that there are no further actions to review or debug for the application, thedata processing system 102 can exit the debugging process at 230. Thedata processing system 102 can then control the application delivery server based on the parameter atACT 232. - If, at
ACT 210, thedata processing system 102 determines that the first classification does not result in classification failure, thedata processing system 102 can proceed toACT 212. AtACT 212, thedata processing system 102 can generate a machine action. A machine action can refer to a machine generated action. A machine action can refer to a simulate action or action generated by thedata processing system 102 based on application data or metadata. A machine action or machine generated action can refer to an action generated or identified by thedata processing system 102 absent using the list of actions provided by the application. A machine action can refer to an action generated by thedata processing system 102 independent of the list of actions provided by theapplication developer device 160. - Upon generating the machine action at
ACT 212, thedata processing system 102 can proceed toACT 216 to generate a second classification score based on the machine action. The data processing system 102 (e.g., via a second classifier component 118) can determine the second classification score based on a comparison of the machine generated action with an action provided by theapplication developer device 160. Thedata processing system 102 can determine atACT 218 whether a classification failure occurs as a result of the second score. The classification failure can refer to or include the second score being a null value or not satisfying a minimum failure threshold. The classification failure can cause thedata processing system 102 to exit the debugging process. Thedata processing system 102 can exit the debugging process responsive to classification failure so as to reduce or prevent wasted computing resource consumption. - If, at
ACT 218, thedata processing system 102 determines that there is a classification failure based on the second score, the data processing system can proceed toACT 236 to update the delivery control parameter and block the application or action. - If, however, at
ACT 218 thedata processing system 102 determines that there is no classification failure, then thedata processing system 102 can proceed toACT 220 to execute a matching program. Thedata processing system 102 can use amatching engine component 122 to execute the matching program. The matching program can be executed to identify a second application that is similar to the application. Similarity can be determined using various techniques, including, for example, a statistical technique. Similarity can be based on applications being in the same category, the same type of application, providing similar functions, providing similar services, or using similar functions or tools. Thedata processing system 102 can select a similar application based on titles, descriptions, metadata, categories, users, reviews, or other data sources (e.g., external data sources, third-party devices 162, search engine results). For example, thedata processing system 102 can leverage or utilize a search engine to identify similar applications. Thedata processing system 102 can input information about the application into a search engine and parse the search results to identify a similar application. - At
ACT 222, thedata processing system 102 can determine whether there is a similar application. If thedata processing system 102 is unable to identify a similar application, then the data processing system can proceed toACT 236 to update the delivery control parameter without generating a third classification score. Thedata processing system 102 can update the delivery control parameter using the first classification score and the second classification score. Thedata processing system 102 may not find a similar application because similar application may not yet have been submitted to thedata processing system 102 for application delivery. Thedata processing system 102 can select a similar application as being configured with actions. Thedata processing system 102 may not find a similar application if the applications that are otherwise similar are not configured with actions. - If the
data processing system 102 determines that there is a similar application configured with actions atACT 222, then thedata processing system 102 can proceed toACT 224 to generate a third classification score. Thedata processing system 102 can use a third classifier component to generate the third classification score. Thedata processing system 102 can compare the action configured for the application with actions configured for the similar application to determine a level of similarity between the actions. For example, thedata processing system 102 can determine that the action of the application that is undergoing the debugging process either matches or does not match with any action established for the similar application. If thedata processing system 102 determines that the action undergoing the debugging process does not match with any action of the similar application, then thedata processing system 102 can assign the action a low classification score (e.g., 0). If thedata processing system 102 determines that the action of the application undergoing the debugging process matches with one of the actions established for the similar application, then thedata processing system 102 can assign the action a high third classification score (e.g., 1). Thus, thedata processing system 102 set a higher classification score if the action matches an action established for a similar application that has already been vetted or approved by thedata processing system 102. - At
ACT 226, thedata processing system 102 can determine whether there is a classification failure based on the third classification score. If thedata processing system 102 determines a classification failure based on the third classification score, then thedata processing system 102 can proceed toACT 236 to update the delivery control parameter to block authorization of the application for delivery, or disable the action for the application. - If the
data processing system 102 determines that the third classification score does not result in a classification failure atACT 226, then thedata processing system 102 can proceed to generate a combined classification score atACT 228. Thedata processing system 102 can generate a combined classification score based on the first classification score, second classification score and third classification score. Thedata processing system 102 can combine the classification scores using any technique, including, for example, addition, multiplication, division, dot product, function, average, or a statistical technique. - The
data processing system 102 can update the delivery control parameter atACT 236 based on the combined score generated atACT 228. Thedata processing system 102 can update the parameter to block delivery of the application, disable the action, or authorize delivery or authorize the action. Thedata processing system 102 can then determine, atACT 214, whether the application is configured with additional actions. If thedata processing system 102 determines that there are additional actions to be reviewed, thedata processing system 102 can proceed toACT 204 to debug or review the next action. If, atACT 214, the data processing system determines that there are no remaining actions to be input into the debugging process, then thedata processing system 102 can proceed toACT 230 to exit the debugging process. - The
data processing system 102 can control theapplication delivery server 110 atACT 232 based on the parameter. For example, the parameter can instruct theapplication delivery server 110 to authorize delivery of the application or block delivery of the application. The parameter can instruct theapplication delivery server 110 to disable one or more action of the application, but otherwise authorize delivery of the application. Thedata processing system 102 can notify theapplication developer device 160 of the status or result of the debugging process. Thedata processing system 102 can request theapplication developer device 160 to resolve low classification scores identified by thedata processing system 102 by improving corresponding aspects of the application. -
FIG. 3 is an illustration of an example method of debugging applications. Themethod 300 can be performed by one or more component, system or element ofsystem 100 depicted inFIG. 1 ,system 200 depicted inFIG. 2 , orsystem 400 depicted inFIG. 4 . For example, themethod 300 can be performed by a data processing system. AtACT 302, the data processing system can identify an action of an application. The application can be submitted by an application developer. The action can be a message object configured by the application developer to perform an action associated with the application. The action can include, for example, a watch action, a listen action, a content request action, a navigation action, or other type of action. The action can be performed by the application. The action can be performed on an entity associated with the application (e.g., play Song_A by Artist_1). - At
ACT 304, the data processing system can determine a first classification score. The data processing system can determine a first classification score based on historical execution of the action of the messaging object provided by the application developer. The data processing system can determine the first classification score based on user feedback. The data processing system can determine the first classification score based on user reviews. The data processing system can determine the first classification score based on semantic analysis of user reviews or feedback. The data processing system can determine the first classification score based on a survey or user responses to a survey. The data processing system can determine the first classification score based on user responses to a prompt, such as “can the application perform <action>?” The action can correspond to the action the application developer indicates the application is configured to perform. - In some cases, the data processing system can determine that the application does not have historical execution information. The data processing system can determine to skip the generation of the first generation score, or assign a default value for the first classification score. For example, the data processing system can provide a default value for the first classification score such that the application can pass a classification failure test. In some cases, the data processing system can determine to pause the debugging process and authorize the application for delivery in order to obtain user feedback on the application.
- At
ACT 306, the data processing system can generate machine generated actions. The data processing system can a machine generated action for the application based on metadata associated with the application. The data processing system can generate the machine generated action without using the actions submitted by the application developer. The data processing system can generate the machine generated actions independent of the actions submitted by the application developer. The data processing system can generate the machine generated actions based on a description of the application or other metadata associated with the application. - At
ACT 308, the data processing system can determine a second classification score. The data processing system can determine the second classification score based on a comparison of the action provided by the application developer with the machine generated action. If the action provided by the developer matches the machine generated action, the data processing system can assign the action a high second classification score (e.g., a 1). If the action provided by the developer does not match the machine generated action, then the data processing system can assign the action a low second classification score (e.g., 0). If the action does not exactly match the machine generated action, but is similar, then the data processing system can assign a medium second classification score to the action (e.g., 0.5). The action provided by the developer may be similar to the machine generated action if the actions are in a similar domain or category or vertical. For example, the data processing system can consider the listen action to be similar to a watch action. - At
ACT 310, the data processing system can select a second application. The second action can be a similar application. The data processing system can select the similar action using a matching program. The second application can match, or be considered similar to, the application undergoing the debugging process. The data processing system can select or identify the similar application based on metadata associated with the application. The data processing system may identify multiple similar applications. The data processing system can select the application that is the most similar based on a similarity ranking of similarity scores (e.g., statistical similarity scores). The data processing system can select the similar application that is configured with actions. The data processing system can determine to select the similar application for further processing if it contains or is configured with actions. For example, if the data processing system identifies to similar applications, but only one of the applications is configured with actions, then the data processing system can select the application configured with actions as the similar application (or second application) to be used for the debugging process. - At
ACT 312, the data processing system can determine a third classification score. The data processing system can determine the third classification score based on a comparison of an action approved for the second application (e.g., selected similar application) with the action of the application by the application developer. If the action provided by the application developer matches an action configured for the similar application, then the data processing system can set a high third classification score (e.g., 1). If the action provided by the developer does not match any action configured for the similar application, then the data processing system can set a low third classification score (e.g., 0). If the action does not exactly match any action of the second application, but is similar, then the data processing system can assign a medium second classification score to the action (e.g., 0.5). The action provided by the developer may be similar to an action of the second application if the actions are in a similar domain or category or vertical. For example, the data processing system can consider the listen action to be similar to a watch action. - At
ACT 314, the data processing system can update a delivery control parameter. The data processing system can update the delivery control parameter based on the first classification score, the second classification score and the third classification score. The data processing system can update the delivery control parameter for a particular action or the entire application. The data processing system can update the delivery control parameter based on one of the classification scores, or a combination of the classification scores. For example, if one of the classification scores is below a minimum threshold (e.g., a failure threshold), then the data processing system can determine to block delivery of the application or disable the action regardless of whether the other classification scores are satisfactory. In some cases, the data processing system can combine the three classification scores to determine whether the action or application is satisfactory or passes the review process. If the action or application passes the review process, the data processing system can update the delivery control parameter to authorize the application or action for delivery. - At
ACT 316, the data processing system can control delivery of the application. The data processing system can control delivery of the application by the application delivery server. The data processing system can control delivery responsive to the delivery control parameter updated by the data processing system. The data processing system can instruct an application delivery server that can be internal or remote from the data processing system. The data processing system can instruct an online application marketplace to disable the action or block delivery of the application. Blocking delivery of the application can include removing the application from the application store. Blocking delivery of the application can include reverting the application to a previous version that passed the review process. - The data processing system can provide a notification to the application developer regarding the results of the debugging process.
- Thus, the systems and methods of the present technical solution can debug applications or improve the application debugging process in order to prevent the delivery of fraudulent or erroneous applications. For example, developers can provide an XML file as part of an application packet kit for an application. The XML file can include intents and entities for the application, where intents can refer to actions the application can perform and entities can include or refer to content on which the action can be performed. The developer can indicate a large number of entities for an application (e.g., millions of songs for a music streaming application). A request or trigger for an action on an entity can cause the generation of a deep link to the application. For example, a client computing device can detect the request and generate a deep link for the action and the entity. The deep link can direct the application to a particular state or a particular web page. Thus, due to the number of intents or large number of entities, it can be challenging to review or debug applications to determine whether the deep links generated for the application are fraudulent, erroneous, or otherwise misleading or incorrect.
- The data processing system of the present technical solution can determine whether the application can actually perform the action, whether the application can actually access the entity, or whether the actually can perform the action on the entity.
- The data processing system can use one or more classifiers that generate one or more scores indicating whether the application can fulfill the intent. The data processing system can be configured to use all three classifiers in order to improve reliability. For example, if any one classifier fails, then the data processing system can determine to remove the application or disable the action. The data processing system can perform the review process on a per action basis, or for the entire application. The data processing system can automatically disable the action based on any one of the classifiers failing. The data processing system can automatically disable the action for a particular digital surface (e.g., voice-based digital assistant, search, or content request). The data processing system can provide, to the application developer, a log or error log indicating any failures or other results of the debugging process.
-
FIG. 4 is a block diagram of anexample computer system 400. The computer system orcomputing device 400 can include or be used to implement thesystem 100, or its components such as thedata processing system 102. Thedata processing system 102 can include an intelligent personal assistant or voice-based digital assistant. Thecomputing system 400 includes a bus 405 or other communication component for communicating information and aprocessor 410 or processing circuit coupled to the bus 405 for processing information. Thecomputing system 400 can also include one ormore processors 410 or processing circuits coupled to the bus for processing information. Thecomputing system 400 also includesmain memory 415, such as a random access memory (RAM) or other dynamic storage device, coupled to the bus 405 for storing information, and instructions to be executed by theprocessor 410. Themain memory 415 can be or include the data repository 145. Themain memory 415 can also be used for storing position information, temporary variables, or other intermediate information during execution of instructions by theprocessor 410. Thecomputing system 400 may further include a read only memory (ROM) 420 or other static storage device coupled to the bus 405 for storing static information and instructions for theprocessor 410. Astorage device 425, such as a solid state device, magnetic disk or optical disk, can be coupled to the bus 405 to persistently store information and instructions. Thestorage device 425 can include or be part of the data repository 145. - The
computing system 400 may be coupled via the bus 405 to adisplay 435, such as a liquid crystal display, or active matrix display, for displaying information to a user. An input device 430, such as a keyboard including alphanumeric and other keys, may be coupled to the bus 405 for communicating information and command selections to theprocessor 410. The input device 430 can include atouch screen display 435. The input device 430 can also include a cursor control, such as a mouse, a trackball, or cursor direction keys, for communicating direction information and command selections to theprocessor 410 and for controlling cursor movement on thedisplay 435. Thedisplay 435 can be part of thedata processing system 102, theclient computing device 140 or other component ofFIG. 1 , for example. - The processes, systems and methods described herein can be implemented by the
computing system 400 in response to theprocessor 410 executing an arrangement of instructions contained inmain memory 415. Such instructions can be read intomain memory 415 from another computer-readable medium, such as thestorage device 425. Execution of the arrangement of instructions contained inmain memory 415 causes thecomputing system 400 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained inmain memory 415. Hard-wired circuitry can be used in place of or in combination with software instructions together with the systems and methods described herein. Systems and methods described herein are not limited to any specific combination of hardware circuitry and software. - Although an example computing system has been described in
FIG. 4 , the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. - For situations in which the systems discussed herein collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters. For example, a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about him or her and used by the content server.
- The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatuses. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The terms “data processing system” “computing device” “component” or “data processing apparatus” encompass various apparatuses, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures. For example, the
direct action API 108 orNLP component 106 and otherdata processing system 102 components can include or share one or more data processing apparatuses, systems, computing devices, or processors. - A computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program can correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 102) to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- The subject matter described herein can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system such as
system 100 orsystem 400 can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network (e.g., the network 105). The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, a server transmits data (e.g., data packets representing a digital component) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server (e.g., received by thedata processing system 102 from theclient computing device 140 or theapplication developer device 160 or the third-party device 162). - While operations are depicted in the drawings in a particular order, such operations are not required to be performed in the particular order shown or in sequential order, and all illustrated operations are not required to be performed. Actions described herein can be performed in a different order.
- The separation of various system components does not require separation in all implementations, and the described program components can be included in a single hardware or software product. For example, the
NLP component 106 or thedirect action API 108, can be a single component, app, or program, or a logic device having one or more processing circuits, or part of one or more servers of thedata processing system 102. - Having now described some illustrative implementations, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one implementation are not intended to be excluded from a similar role in other implementations or implementations.
- The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of “including” “comprising” “having” “containing” “involving” “characterized by” “characterized in that” and variations thereof herein, is meant to encompass the items listed thereafter, equivalents thereof, and additional items, as well as alternate implementations consisting of the items listed thereafter exclusively. In one implementation, the systems and methods described herein consist of one, each combination of more than one, or all of the described elements, acts, or components.
- Any references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations. References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- Any implementation disclosed herein may be combined with any other implementation or embodiment, and references to “an implementation,” “some implementations,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation or embodiment. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- References to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms. A reference to “at least one of ‘A’ and ‘B’” can include only ‘A’, only ‘B’, as well as both ‘A’ and ‘B’. Such references used in conjunction with “comprising” or other open terminology can include additional items.
- Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, neither the reference signs nor their absence have any limiting effect on the scope of any claim elements.
- The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing implementations are illustrative rather than limiting of the described systems and methods. Scope of the systems and methods described herein is thus indicated by the appended claims, rather than the foregoing description, and changes that come within the meaning and range of equivalency of the claims are embraced therein.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/840,328 US20220308987A1 (en) | 2019-03-13 | 2022-06-14 | Debugging applications for delivery via an application delivery server |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/022051 WO2020185224A1 (en) | 2019-03-13 | 2019-03-13 | Assessing applications for delivery via an application delivery server |
US16/333,535 US11385990B2 (en) | 2019-03-13 | 2019-03-13 | Debugging applications for delivery via an application delivery server |
US17/840,328 US20220308987A1 (en) | 2019-03-13 | 2022-06-14 | Debugging applications for delivery via an application delivery server |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2019/022051 Continuation WO2020185224A1 (en) | 2019-03-13 | 2019-03-13 | Assessing applications for delivery via an application delivery server |
US16/333,535 Continuation US11385990B2 (en) | 2019-03-13 | 2019-03-13 | Debugging applications for delivery via an application delivery server |
Publications (1)
Publication Number | Publication Date |
---|---|
US20220308987A1 true US20220308987A1 (en) | 2022-09-29 |
Family
ID=72516351
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/894,101 Active 2039-11-17 US11416229B2 (en) | 2019-03-13 | 2020-06-05 | Debugging applications for delivery via an application delivery server |
US17/840,328 Pending US20220308987A1 (en) | 2019-03-13 | 2022-06-14 | Debugging applications for delivery via an application delivery server |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/894,101 Active 2039-11-17 US11416229B2 (en) | 2019-03-13 | 2020-06-05 | Debugging applications for delivery via an application delivery server |
Country Status (1)
Country | Link |
---|---|
US (2) | US11416229B2 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2022174517A (en) * | 2021-05-11 | 2022-11-24 | 富士通株式会社 | Machine learning program, machine learning method, and information processing apparatus |
US20220398247A1 (en) * | 2021-06-15 | 2022-12-15 | Microsoft Technology Licensing, Llc | Natural language triggering for search answer extensibility |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150199515A1 (en) * | 2014-01-14 | 2015-07-16 | Citrix Systems, Inc. | Evaluating application integrity |
US20190391798A1 (en) * | 2018-06-25 | 2019-12-26 | Microsoft Technology Licensing, Llc | Reducing overhead of software deployment based on existing deployment occurrences |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8135775B1 (en) * | 2007-08-31 | 2012-03-13 | Crimson Corporation | Systems and methods for staged deployment of software |
US8713684B2 (en) | 2012-02-24 | 2014-04-29 | Appthority, Inc. | Quantifying the risks of applications for mobile devices |
WO2014137321A1 (en) | 2013-03-05 | 2014-09-12 | Mcafee, Inc. | Modification of application store output |
US9098707B2 (en) | 2013-10-14 | 2015-08-04 | International Business Machines Corporation | Mobile device application interaction reputation risk assessment |
US10789509B2 (en) * | 2018-01-24 | 2020-09-29 | WeR.AI, Inc. | Systems and methods for generating machine learning applications |
US10423403B1 (en) * | 2018-11-29 | 2019-09-24 | Capital One Services, Llc | Utilizing a machine learning model to predict metrics for an application development process |
-
2020
- 2020-06-05 US US16/894,101 patent/US11416229B2/en active Active
-
2022
- 2022-06-14 US US17/840,328 patent/US20220308987A1/en active Pending
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150199515A1 (en) * | 2014-01-14 | 2015-07-16 | Citrix Systems, Inc. | Evaluating application integrity |
US20190391798A1 (en) * | 2018-06-25 | 2019-12-26 | Microsoft Technology Licensing, Llc | Reducing overhead of software deployment based on existing deployment occurrences |
Also Published As
Publication number | Publication date |
---|---|
US20200301968A1 (en) | 2020-09-24 |
US11416229B2 (en) | 2022-08-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6704937B2 (en) | Modulate packetized audio signal | |
US11086959B2 (en) | Secure digital assistant integration in web pages | |
US11599336B2 (en) | Generating and updating voice-based software applications using application templates | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11514896B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
WO2020226616A1 (en) | Secure digital assistant integration in web pages | |
US20230016967A1 (en) | Action validation for digital assistant-based applications | |
US20240144928A1 (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications | |
US11385990B2 (en) | Debugging applications for delivery via an application delivery server | |
WO2023282890A1 (en) | Real-time micro-profile generation using a dynamic tree structure |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HUANG, YAN;RAO, NIKHIL;LIN, OWEN;AND OTHERS;REEL/FRAME:060210/0954Effective date: 20190910 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |