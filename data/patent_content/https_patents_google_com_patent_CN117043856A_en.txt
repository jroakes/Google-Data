CN117043856A - End-to-end model on high-efficiency streaming non-recursive devices - Google Patents
End-to-end model on high-efficiency streaming non-recursive devices Download PDFInfo
- Publication number
- CN117043856A CN117043856A CN202180096175.5A CN202180096175A CN117043856A CN 117043856 A CN117043856 A CN 117043856A CN 202180096175 A CN202180096175 A CN 202180096175A CN 117043856 A CN117043856 A CN 117043856A
- Authority
- CN
- China
- Prior art keywords
- encoder
- speech recognition
- model
- order feature
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000009826 distribution Methods 0.000 claims abstract description 34
- 238000000034 method Methods 0.000 claims description 57
- 238000012545 processing Methods 0.000 claims description 20
- 238000013518 transcription Methods 0.000 claims description 16
- 230000035897 transcription Effects 0.000 claims description 16
- 230000001364 causal effect Effects 0.000 claims description 15
- 238000000354 decomposition reaction Methods 0.000 claims description 7
- 230000010354 integration Effects 0.000 claims description 7
- 238000012935 Averaging Methods 0.000 claims description 4
- 238000012549 training Methods 0.000 description 48
- 230000015654 memory Effects 0.000 description 29
- 230000008569 process Effects 0.000 description 24
- 238000004590 computer program Methods 0.000 description 8
- 238000004891 communication Methods 0.000 description 6
- 238000010586 diagram Methods 0.000 description 5
- 238000003058 natural language processing Methods 0.000 description 5
- 238000013528 artificial neural network Methods 0.000 description 4
- 238000012217 deletion Methods 0.000 description 4
- 230000037430 deletion Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 239000012634 fragment Substances 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000004927 fusion Effects 0.000 description 3
- 230000001934 delay Effects 0.000 description 2
- 230000003111 delayed effect Effects 0.000 description 2
- 230000001419 dependent effect Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 230000001960 triggered effect Effects 0.000 description 2
- 241001155643 Acalles Species 0.000 description 1
- 239000004783 Serene Substances 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007787 long-term memory Effects 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000001537 neural effect Effects 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 238000005070 sampling Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- MTCFGRXMJLQNBG-UHFFFAOYSA-N serine Chemical compound OCC(N)C(O)=O MTCFGRXMJLQNBG-UHFFFAOYSA-N 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/02—Feature extraction for speech recognition; Selection of recognition unit
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/047—Probabilistic or stochastic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/30—Distributed recognition, e.g. in client-server systems, for mobile phones or network applications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/32—Multiple recognisers used in sequence or in parallel; Score combination systems therefor, e.g. voting systems
Abstract
An ASR system (109) includes a first encoder (210), the first encoder (210) configured to receive a sequence of acoustic frames (110) and generate a first higher-order feature representation of a corresponding acoustic frame in the sequence. The ASR system further includes a second encoder (220), the second encoder (220) being configured to receive the first high-order feature representation generated by the first encoder at each of the plurality of output steps and to generate a second high-order feature representation corresponding to the first high-order feature frame. The ASR system further includes a decoder (204), the decoder (204) being configured to receive the second high-order feature representation generated by the second encoder at each of the plurality of output steps and to generate a first probability distribution over possible speech recognition hypotheses. The ASR system also includes a language model (206), the language model (206) configured to receive a first probability distribution over possible speech recognition hypotheses and to generate a re-scoring probability distribution (120).
Description
Technical Field
The present disclosure relates to an end-to-end model on a high-efficiency streaming non-recursive device.
Background
Automatic Speech Recognition (ASR) systems have evolved from multiple models, where each model has a specific purpose for an integrated model, where a single neural network is used to map audio waveforms (i.e., input sequences) directly to output sequences (i.e., output sequences). This integration produces a sequence-to-sequence approach that generates a sequence of words (or graphemes) when given a sequence of audio features. With an integrated architecture, all components of the model can be co-trained as a single end-to-end (E2E) neural network. Here, the E2E model refers to a model in which an architecture is entirely composed of a neural network. The full neural network operates without external and/or manual design components (e.g., finite state transducers, dictionaries, or text normalization modules). In addition, when training E2E models, these models typically do not need to be bootstrapped from the decision tree or time aligned from a separate system. These E2E Automatic Speech Recognition (ASR) systems have made tremendous progress over traditional ASR systems on several common benchmarks including Word Error Rate (WER). The architecture of the E2EASR model is largely application dependent. For example, multiple applications involving user interaction, such as voice search or dictation on a device, require a model to perform recognition in a streaming manner. Other applications, such as offline video captioning, do not require the model to be streaming, and future contexts can be used to improve performance. In addition, existing E2E models train on only a small portion of the audio-text pairs, as compared to over 1000 hundred million text utterances that traditional models use to train.
Disclosure of Invention
One aspect of the present disclosure provides an Automatic Speech Recognition (ASR) model that includes a first encoder configured to receive a sequence of acoustic frames as input and to generate, at each of a plurality of output steps, a first high-order feature representation of a corresponding acoustic frame in the sequence of acoustic frames. The ASR model also includes a second encoder configured to receive as input the first high-order feature representation generated by the first encoder at each of the plurality of output steps, and to generate a second high-order feature representation corresponding to the first high-order feature frame at each of the plurality of output steps. The ASR model further includes a decoder configured to receive as input a second high-order feature representation generated by the second encoder at each of the plurality of output steps and to generate a first probability distribution over possible speech recognition hypotheses at each of the plurality of time steps. The ASR model further includes a language model configured to receive as input a first probability distribution over the possible speech hypotheses and to generate a re-scoring probability distribution over the possible speech recognition hypotheses at each of a plurality of time steps.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the second encoder generates the second high-order feature representation without receiving any acoustic frames as input. In some examples, the decoder is further configured to receive as input a first higher-order feature representation generated by the first encoder at each of the plurality of output steps, and to generate a second probability distribution over possible speech recognition hypotheses at each of the plurality of time steps. In these examples, the decoder may include a prediction network configured to, at each of a plurality of time steps: receiving as input N previous non-blank symbol sequences output by the final softmax layer; generating a respective insert for each non-blank symbol in the N previous non-blank symbol sequences; and generates an average embedding by averaging the corresponding embeddings. Here, the decoder further comprises a joint network configured to receive as input one of an average embedding generated by the prediction network at each of the plurality of output steps and a first high-order feature representation generated by the first encoder at each of the plurality of output steps when the ASR model is operating in the streaming mode or a second high-order feature representation generated by the second encoder at each of the plurality of output steps when the ASR model is operating in the non-streaming mode. The federated network is further configured to generate, at each of the plurality of output steps, one of: a second probability distribution over possible speech recognition hypotheses when the ASR model operates in a streaming mode or a first probability distribution over possible speech recognition hypotheses when the ASR model operates in a non-streaming mode.
The prediction network may include a V2 embedded look-up table. Alternatively, the first encoder may comprise a causal encoder comprising an initial stack of a configurator layer. In some examples, the second encoder includes a non-causal encoder including a final stack of Conformer layers overlaid on an initial stack of Conformer layers. In some implementations, the language model includes a neuro-language model. In these embodiments, the neuro-language model may include a stack of Conformer layers or a stack of transducer layers. The first encoder and the second encoder may be trained using hybrid autoregressive transducer decomposition to facilitate integration of a language model trained based on plain text data.
Another aspect of the present disclosure provides a computer-implemented method that, when executed on data processing hardware, causes the data processing hardware to perform operations. The operations include receiving a sequence of acoustic frames as input to an ASR model. The operations further include performing streaming speech recognition and non-streaming speech recognition on the sequence of acoustic frames using the ASR model by: generating, by the first encoder, a first high-order feature representation of a corresponding acoustic frame in the sequence of acoustic frames at each of a plurality of output steps; receiving as input to the second encoder a first higher-order feature representation generated by the first encoder at each of a plurality of output steps; generating, by a second decoder, a second high-order feature representation of the corresponding first high-order feature frame at each of a plurality of output steps; receiving as input to the decoder a second high order feature representation generated by the second encoder at each of the plurality of output steps; and generating a first probability distribution over possible speech recognition hypotheses at each of a plurality of time steps. The operations also include re-scoring the first probability distribution over the possible speech recognition hypotheses using the external language model to generate a transcription of the utterance.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the second encoder generates the second high-order feature representation without receiving any acoustic frames as input. In some examples, performing the operations of streaming speech recognition and non-streaming speech recognition on the sequence of acoustic frames further comprises: a first high-order feature representation generated by the first encoder at each of a plurality of output steps is received as an input to the decoder, and a second probability distribution over possible speech recognition hypotheses is generated at each of a plurality of time steps. In these examples, at each of the plurality of time steps, the operations may further comprise: receiving as input to the prediction network N previous non-blank symbol sequences output by the final softmax layer; generating a respective embedding for each non-blank symbol in the N previous non-blank symbol sequences through the prediction network; and generating, by the prediction network, an average embedding by averaging the corresponding embeddings. Here, the operations further include: receiving as input to the federated network an average embedding generated by the predictive network at each of the plurality of output steps and one of a first high-order feature representation generated by the first encoder at each of the plurality of output steps when the ASR model is operating in a streaming mode or a second high-order feature representation generated by the second encoder at each of the plurality of output steps when the ASR model is operating in a non-streaming mode; and generating one of the following at each of the plurality of output steps: a second probability distribution over possible speech recognition hypotheses when the ASR model operates in a streaming mode or a first probability distribution over possible speech recognition hypotheses when the ASR model operates in a non-streaming mode.
The prediction network may include a V2 embedded look-up table. Alternatively, the first encoder may comprise a causal encoder comprising an initial stack of a configurator layer. In some examples, the second encoder includes a non-causal encoder including a final stack of Conformer layers overlaid on an initial stack of Conformer layers. In some implementations, the language model includes a neuro-language model. In these embodiments, the neuro-language model may include a stack of Conformer layers or a stack of transducer layers. The first encoder and the second encoder may be trained using hybrid autoregressive transducer decomposition to facilitate integration of a language model trained based on plain text data.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIGS. 1A and 1B are schematic diagrams of an example speech environment using a concatenated encoder and language model architecture for automatic speech recognition.
Fig. 2A-2C are schematic diagrams of a tandem encoder and language model architecture.
FIG. 3 is a schematic diagram of an example training process for facilitating cascading encoder model learning consistent predictions and facilitating language model learning consistent re-scores.
FIG. 4 is a flow chart of an example arrangement of operations of a method of implementing tandem encoders and language models for streaming and non-streaming automatic speech recognition.
FIG. 5 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
End-to-end (E2E) Automatic Speech Recognition (ASR) models are traditionally structured to operate in either a streaming or non-streaming mode. Conventionally, the E2E ASR model includes an encoder and a decoder as main components. Applications involving end user interactions, such as voice searches or (on-device) dictation on devices, may require models to perform recognition in a streaming manner, where the desired word is output with as little delay as possible while being spoken. This prevents the use of models, such as bi-directional LSTM, that use future contexts to improve accuracy. In contrast, applications such as offline video captioning do not require streaming identification, and any available future context can be leveraged to improve performance. Furthermore, traditional E2E ASR models train on a small portion of the audio-text pairs and thus perform poorly on long-tailed proper nouns and rare words, as compared to over 1000 hundred million text utterances that traditional models use to train on.
Embodiments herein relate to a single E2E ASR model that uses a concatenated encoder that can operate in both streaming and non-streaming modes in combination with a neuro-language model on a device trained based on text-only data. The tandem encoder includes a streaming encoder and a non-streaming encoder, and a single decoder of the ASR model is configured to learn to decode an output of the streaming encoder or an output of the non-streaming decoder. In addition to ASR models, the architecture may also be applied to other models, such as machine translation that implements both streaming and non-streaming modes.
FIGS. 1A and 1B are examples of speech environments 100, 100 a-B. In the speech environment 100, the manner in which the user 104 interacts with a computing device, such as the user device 10, may be through speech input. The user device 10 (also commonly referred to as device 10) is configured to capture sound (e.g., streaming audio data) from one or more users 104 in the speech environment 100. Here, the streaming audio data may refer to the spoken utterance 106 of the user 104 as an audible query, a command for the device 10, or an audible communication captured by the device 10. The voice-enabled system of device 10 may input a query or command by answering the query and/or causing execution/completion of the command by one or more downstream applications.
User device 10 may correspond to any computing device associated with user 104 and capable of receiving audio data. Some examples of user devices 10 include, but are not limited to, mobile devices (e.g., cell phones, tablet computers, laptops, etc.), computers, wearable devices (e.g., smartwatches), smart appliances, internet of things (IoT) devices, in-vehicle infotainment systems, smart displays, smart speakers, etc. The user device 10 includes data processing hardware 12 and memory hardware 14 in communication with the data processing hardware 12 and stores instructions that, when executed by the data processing hardware 12, cause the data processing hardware 12 to perform one or more operations. The user device 10 further comprises an audio system 16 having an audio capturing device (e.g. microphone) 16, 16a for capturing and converting spoken utterances 106 in the speech environment 100 into electrical signals and a speech output device (e.g. speaker) 16, 16b for delivering audible audio signals (e.g. as output audio data of the device 10). When the user device 10 implements a single audio capture device 16a in the illustrated example, the user device 10 may implement an array of audio capture devices 16a without departing from the scope of the present disclosure, such that one or more capture devices 16a in the array may not physically reside on the user device 10, but instead communicate with the audio system 16.
In the speech environment 100, an Automatic Speech Recognition (ASR) system 109 implementing an ASR model 200 (also referred to as model 200) integrated with a Language Model (LM) 206 resides on a user device 10 of a user 104 and/or a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud computing environment) in communication with the user device 10 via a network 40. The user device 10 and/or the remote computing device 60 also includes an audio subsystem 108 configured to receive the utterance 106 spoken by the user 104 and captured by the audio capture device 16a, and to convert the utterance 106 into a corresponding digital format associated with the input acoustic frames 110 that can be processed by the ASR system 109. In the example shown in fig. 1A, the user 104 speaks a respective utterance 106, and the audio subsystem 108 converts the utterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to the ASR system 109. Thereafter, the model 200 receives as input the audio data 110 corresponding to the utterance 106 and generates/predicts as output a corresponding transcription 120 (also referred to as recognition result/hypothesis 120) of the utterance 106. As described in more detail below (e.g., fig. 3), model 200 may be trained in a single training phase to simplify the process of training model 200 to operate in both streaming and non-streaming modes. Model 200 also includes a decoder 204 (also referred to as a shared decoder 204) shared between its encoders that enables model 200 to be a single model that can operate in both streaming and non-streaming modes (e.g., as opposed to two separate models where each model is dedicated to either streaming or non-streaming modes). For example, as shown in FIG. 1A, a digital assistant application 50 executing on a user device 10 may require speech recognition to be streamed so that words, word fragments, and/or individual characters appear on the screen once they are spoken. In addition, it is also possible that the user 104 of the user device 10 has a low tolerance for delay when issuing a query for execution by the digital assistant application 50. In a scenario where these applications require minimal delay, the model 200 operates in a streaming mode, where the model 200 may provide streaming transcription capabilities in real-time as the user 104 speaks the utterance 106. On the other hand, when the user has a higher tolerance to speech recognition delays and/or the utterance 106 to be recognized is associated with long format speech (i.e., speech consisting of a complete paragraph or multiple sentences), the same model 200 may operate in a non-streaming mode and may provide accurate transcription 120 using the predictive network, but resulting in increased delays. In addition, the user 104 needs the ASR system 109 of the user device 10 to be able to accurately identify rare words or long-tailed proper nouns, which can be accomplished by using the LM 206 with the model 200 to help the model 200 bias the output of the model 200 when detecting rare words or proper nouns. Thus, the ASR system 109 can implement a single ASR model that includes tandem encoders 210, 220 for a variety of different speech recognition tasks to provide both streaming and non-streaming transcription capabilities without having to utilize separately trained ASR models on a task-by-task basis, while also using the LM 206 to increase the accuracy of the transcription 120 when the utterance 106 includes long-tail proper nouns.
In some implementations, the model 200 first performs streaming encoding on the audio data 110 and then performs non-streaming encoding on the output of the streaming encoder. For example, in the illustrated example, the model 200 uses a first encoder (i.e., a low-delay encoder (fig. 2B)) to stream speech recognition of the audio data 110 to produce partial speech recognition results 120, 120a, and a second encoder (i.e., a high-delay encoder (fig. 2C)) to non-stream speech recognition of the encoded audio data 110 to produce final speech recognition results 120, 120B. It will be apparent that the first encoder produces a portion of the speech recognition result 120a, while the second encoder waits for the output of the first encoder to produce the final speech recognition result 120b. Thus, the final speech recognition result 120b of the input utterance 106 may be delayed for a period of time from the partial speech recognition result 120a of the input utterance.
The user device 10 and/or the remote computing device 60 also executes a user interface generator 107 configured to present a representation of the transcription 120 of the utterance 106 to the user 104 of the user device 10. As described in more detail below, the user interface generator 107 may stream the partial speech recognition result 120a during time 1 and then display the final speech recognition result 120b during time 2. In some configurations, the transcription 120 output from the ASR system 109 is processed, for example, by a Natural Language Understanding (NLU) module executing on the user device 10 or the remote computing device 60, to execute the user command/query specified by the utterance 106. Additionally or alternatively, a text-to-speech system (not shown) (e.g., executing on any combination of user device 10 or remote computing device 60) may convert transcription 120 into synthesized speech for audible output by user device 10 and/or another device.
In the example of FIG. 1A, a user 104 in a speech environment 100a interacts with a program or application 50 (e.g., a digital assistant application 50 a) of a user device 10 using an ASR system 109. For example, fig. 1A depicts user 104 in communication with digital assistant application 50a, and digital assistant application 50a displays digital assistant interface 18 on a screen of user device 10 to depict a conversation between user 10 and a digital assistant of digital assistant application 50 a. In this example, user 104 asks digital assistant application 50a: "What year was Serendipity released? (what year the sendprofile was published. In this example, the audio system 16 receives the spoken utterance 106 and converts it into an acoustic frame 110 for input to the ASR system 109.
Continuing with this example, while the model 200 receives the acoustic frame 110 corresponding to the utterance 106 while the user 104 speaks, the acoustic frame 110 is encoded using the first encoder 210 (i.e., fig. 2A), and then the encoded representation of the acoustic frame 110 is decoded into the partial speech recognition result 120a using the decoder 204 (fig. 2A). During time 1, user interface generator 107 presents a representation of the partial speech recognition result 120a of utterance 106 to user 104 of user device 10 via digital assistant interface 18 in a streaming manner such that words, word fragments, and/or individual characters appear on the screen once spoken.
After all (or a certain number) of the acoustic frames 110 corresponding to the utterance 106 are received and the first encoder 210 has encoded these acoustic frames 110, the second encoder 220 (i.e., fig. 2A) encodes the encoded output from the first encoder 210 to generate an encoding of a set of acoustic frames 110 corresponding to the utterance 106 that has been encoded by the first encoder 210. The decoder 204 then decodes the acoustic frame 110 that has been encoded by the second encoder 220 and processes the decoded acoustic frame 110 using the LM 206 that re-scores the decoded acoustic frame and generates the final speech recognition result 120b. For example, when the first encoder 210 encodes all acoustic frames 110 corresponding to the utterance 106 (e.g., when the acoustic frames 110 are received), the second encoder 220 encodes all acoustic frames 110 that have been encoded by the first encoder 210. In this regard, by encoding the plurality of encoded acoustic frames 110, the second encoder 210 can provide greater context awareness in a non-streaming manner (e.g., by receiving representations of all acoustic frames 110 of the utterance 106), which can potentially coordinate or correct aspects of the utterance 106 that were missed or misinterpreted due to the streaming nature of the first encoder 210. In some examples, an indication, such as an endpoint, that the user 104 has completed speaking the utterance 106 is identified, which is used to trigger the second encoder 220 of the model 200 to encode all of the acoustic frames 110. In other examples, the second encoder 220 encodes the acoustic frame 110 in parallel with the first encoder 210, and the first encoder 210 identifies an endpoint at the end of the utterance 106, triggering the second encoder 220 to emit the final speech recognition result 120b. The endpoint identified by the first encoder 210 may trigger a microphone off event at the same time. During time 2, user interface generator 107 presents a representation of final speech recognition result 120b of utterance 106 to user 104 of user device 10 via digital assistant interface 18. In some implementations, the user interface generator 107 replaces (or modifies) the representation of the partial speech recognition result 120a with a representation of the final speech recognition result 120b. In this example, utterance 106 of user 104 contains the rare word "serendeptity" which model 200 has not trained. Thus, the partial speech recognition results output by model 200 and displayed on the screen at time 1 incorrectly predicts that utterance 106 of user 104 is "What year was serene released? (what year the service was released. However, since the user interface generator 107 displays a portion of the speech recognition results when the user speaks the utterance 106, the higher latency associated with generating and ultimately displaying the final recognition results 120b is less apparent to the user 104.
In some implementations, the model 200 utilizes pre-fetching techniques to reduce latency by fetching the speech recognition results before the final speech recognition results 120b are available. Here, if the partial speech recognition result 120a matches the final speech recognition result, a response to the partial speech recognition result acquisition may be immediately issued to save the execution delay that typically occurs after the final speech recognition result is completed.
In the example shown in fig. 1A, digital assistant application 50a may use natural language processing to respond to questions posed by user 104. Natural language processing generally refers to the process of interpreting a written language (e.g., partial speech recognition results 120a and/or final speech recognition results 120 b) and determining whether the written language suggests any actions. In this example, the digital assistant application 50a uses natural language processing to identify that the problem from the user 10 relates to the user's environment, and in particular to songs played in the vicinity of the user. By identifying these details using natural language processing, the automated assistant returns a response 19 to the user's query, where the response 19 says "Serendipity was released in 2001 (serendeptity was published in 2001)". In some configurations, natural language processing occurs on a remote computing device 60 in communication with the data processing hardware 12 of the user device 10.
FIG. 1B is another example of speech recognition by the ASR system 109 using the speech environment 100B. As shown in the example, the user 104 interacts with a voicemail application 50, 50b, which voicemail application 50, 50b displays a voicemail interface 18, 18b on a screen of the user device 10 to transcribe Jane Doe's voicemail left to the user 104. In this example, the delay is not important, but the accuracy of transcription is important when dealing with long tail proper nouns or rare words. The models 200 and LM 206 of the ASR system 109 can take advantage of the full context of audio by waiting to generate all acoustic frames 110 corresponding to the voicemail. This voicemail scenario also illustrates how the model 200 can handle long format speech, as voicemails are typically multiple sentences, even a few paragraphs. The ability to handle long format speech is particularly advantageous over other ASR models, such as two-segment models with LAS decoders, because these two-segment models tend to suffer from long format problems when applied to long format conditions (e.g., higher word deletion rates on long format speech). For example, by using an RNN-T decoder as the decoder 204 in combination with the concatenated encoder 202 (e.g., the first encoder 210 and the second encoder 220), the model 200 operates for both long format speech and short format speech without long format frustration.
Referring to fig. 1B, as discussed with respect to fig. 1A, the model 200 encodes the acoustic frame 110 using the first encoder 210 upon receipt of the acoustic frame 110. After the model 200 receives all acoustic frames 110 and encodes all acoustic frames 110 with the first encoder 210, the model 200 provides a first encoder output as an input to the second encoder 220. The second encoder 220 encodes the first encoder output before the decoder 204 generates the embedding and the LM 206 re-scores the decoder 204 output to generate the final speech recognition result 120b. During time 3, user interface generator 107 presents a representation of final speech recognition result 120b via digital assistant interface 18b, rather than first displaying a portion of speech recognition result 120a. For example, the final speech recognition result 120b is a transcription of long format voice mail from Jane Doe, where the trace: "Do you want to watch Serendipity tonightGive me acall back when you get this (do you want to see serendeptity in the evening?
Fig. 2A-2C include example models 200a-C that operate in various combinations of streaming and non-streaming modes. Specifically, each of models 200a-c includes a concatenated encoder 202, decoder 204, and LM 206. The concatenated encoder 202 refers to a model structure in which the encoding path includes two encoders 210, 220 that are concatenated such that the output of one encoder 210 feeds the input of the other encoder 220 prior to decoding. Here, the encoders 210, 220 may be cascaded regardless of the underlying architecture of each encoder. In some examples, the encoders 210, 220 include a stack of 512-dimensional Conformer layers. Causal convolution layers and left context attention layers may be used for each of the custom layers to severely limit the model from using future inputs. A multi-headed (e.g., 8-headed) attention mechanism may be used in the self-attention layer. The concatenated encoder 210, 220 may include 17 Conformer layers. Here, the causal encoder 210 may include 15 configurator layers, while the non-causal encoder 210 may include two configurator layers that employ an additional right context (e.g., 5.04 seconds). Alternatively, a transducer layer may be used instead of the transducer layer.
In other embodiments, one encoder is constructed using an LSTM structure, while the other encoder is constructed using a bi-directional LSTM layer or a shaper layer (e.g., a shaper-transducer). In other words, the encoders 210, 220 may have different architectures or similar architectures. For example, the cascade encoder 202 may be substantially similar to an Acoustic Model (AM) in a conventional ASR system, and may include a recursive network of stacked Long and Short Term Memory (LSTM) layers. Here, the first encoder 210 is a streaming encoder including a one-way long short-term memory (LSTM) layer, and the second encoder 220 is a non-streaming encoder including a two-way LSTM layer or a consumer layer. In the concatenated encoder 202, where both encoders 210, 230 include LSTM layers, the second encoder 220 receiving the output of the first encoder 210 may utilize the LSTM layers of the first encoder 210 such that the second encoder 220 includes fewer LSTM layers than the first encoder 210 (and fewer LSTM layers than the completely non-streaming model). By having fewer LSTM layers, the concatenated encoder 202 may reduce the number of bi-directional layers that are more computationally expensive, making the model 200 more compact than simply combining a traditional streaming model with a traditional non-streaming model.
Referring to fig. 2A, the first encoder 210 reads a d-dimensional feature vector sequence (e.g., the acoustic frame 110 shown in fig. 1A and 1B) x= (x 1 ,x 2 ,…,x T ) Wherein, the method comprises the steps of, wherein,and a first higher-order feature representation is generated at each time step. The first higher order feature representation is expressed as e S . Similarly, the second encoder 220 is cascade connected to the first encoder 210 and trained to receive the first higher order feature e S As input and outputting a second higher order feature representation. The second higher order feature representation is expressed as e a . Both the first encoder 210 and the second encoder 220 are directly connected to the decoder 204 and are shared by the decoder 204. Thus, the decoder 204 receives the first higher order feature representation e S And the second higher-order feature representation e a As input.
The decoder 204 may include a recurrent neural network-transducer (RNN-T) with a joint layer 230 and a prediction network 240. The prediction network 240 may be a non-recursive prediction network 240. In some implementations, the predictive network includes a V2 embedded lookup table 240. Given N previous non-blank sub-word unit predictions y i-1 ,…,y i-N V2 embedding lookup table 240 computes the embedding of each of these outputs as { d } 1 ,d 2 ,…d n }. In some examples, the N previous non-blank sub-word unit predictions are equal to the last 5 non-blank sub-word unit predictions. V2 embedding lookup table 240 then calculates the embedding { d } 1 ,d 2 ,…d n The average value d and output to projection layer 242 with SWISH activation to produce output l provided to union layer 230. It is apparent that the federation layer 230 and the embedded lookup table 240 share the same dimensions, and thus, parameters may be shared between the federation layer 230 and the table 240 such that the federation layer 230 is represented as the inverse of the lookup table 240. In non-streaming mode, the decoder 204 uses the joint layer 230 to represent e by the first higher order features output by the concatenated encoder 202 S And the second higher-order feature representation e a And the average embedded d combinations from the V2 embedded look-up table 240 to produce the decoder output. Given N previous non-blank symbol cells y i-1 ,…,y i-N Sequence of } and input x, the decoder output may be the current sub-word unit y i Probability distribution P (y) i |y i-1 ，...，y 0 X). In the non-streaming mode, the decoder output is then passed to an external Language Model (LM) 206 that re-scores/refines the initial output from decoder 204 using techniques such as lattice re-scoring or n-best re-ranking. In other words, decoder 204 generates the prediction and LM 206 eventually completes the prediction.
In some implementations, LM 206 includes a one-way former that reviews a predetermined number of tokens (tokens) (e.g., 31 tokens) for each output word segment model prediction. Conformer LM 206 may have a stack of layers (e.g., 12 layers), where each layer includes a model dimension of 768, a feed-forward layer dimension of 2048, and 6-head attention. In these embodiments, the conformation LM 206 is trained to predict 4,096 word segments.
The integration of ASR models with external LM typically requires shallow fusion. However, excessive confidence in the concatenated encoder 202 and decoder 204 may make weighting difficult and often results in a large number of word deletions. Thus, a Hybrid Autoregressive Transducer (HAT) model may be used to separate out the internal loss fractions of the tandem encoder 202 and decoder 204 to facilitate integration with LM 206.
Although not shown, the model 200 may include a Softmax layer that receives the output of the decoder 204. In some implementations, the Softmax layer is separate from the decoder 204 and processes the output y from the decoder 204 r . The output of the Softmax layer is then used in the beam search process to select the orthogonal elements. In some implementations, the Softmax layer is integrated with the decoder 204 such that the output y of the decoder 204 r Representing the output of the Softmax layer.
The decoder 204 is configured to generate a probability distribution over possible speech recognition hypotheses at each output step. In other words, the federation layer 230 generates a probability distribution over possible speech recognition hypotheses at each output step (e.g., time step). Herein, a "possible speech recognition hypothesis" corresponds to a set of output tags/symbols (also referred to as "phonetic units"), each representing a grapheme (e.g., symbol/character) or word segment in a particular natural language. For example, when the natural language is english, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26 letters of the english alphabet and one label for specifying a space. Accordingly, the federated network 230 may output a set of values indicating the likelihood that each tag in the predetermined set of output tags occurs. This set of values may be a vector (e.g., a one-hot vector) and may indicate a probability distribution over the output set of labels. In some cases, the output tag is a grapheme (e.g., a single character, possibly with punctuation and other symbols), but the output tag set is not so limited. For example, the output tag set may include word segments and/or entire words in addition to or instead of graphemes. The output tag may also be other types of phonetic units such as phonemes or sub-phonemes. The output profile of the federated network 230 may include a posterior probability value for each of the different output labels. Thus, if there are 100 output labels representing different graphemes or other symbols, the output of the federated network 230 may include 100 different probability values, one for each output label. The probability distribution may then be used to select and assign scores (e.g., by Softmax layers) to candidate orthogonal elements (e.g., graphemes, word fragments, and/or words) during the beam search process to determine the transcription 120.
In some examples, the tandem encoder 202 consists of a stack of Conformer layers. For example, the first causal encoder 210 may include an initial stack of 15 Conformer layers, while the second non-causal encoder 220 may include two additional Conformer layers at the top of the initial stack of 15 Conformer layers. Two non-causal Conformer layers require an additional predefined duration (e.g., 5.04 seconds) for the right context. The custom layers of the concatenated encoder may include a 512-dimensional custom layer and use causal convolution and a left context attention layer to severely limit the model from using future inputs. 8-head attention may be used in the self-attention layer and the convolution kernel size may be equal to 15.
In decoder 204, V2 embedded lookup table 240 may be a non-recursive embedded prediction network with approximately 200 tens of thousands of parameters. In contrast, an LSTM-based predictive network includes approximately 2340 tens of thousands of parameters. In some examples, predictive network 240 includes an LSTM-based predictive network. Finally, the federated network 230 may include a single feed-forward layer with 640 hidden units. The Softmax layer may be comprised of a unified word segment or grapheme set generated using all unique word segments or graphemes in the plurality of training data sets 132, 132a-n (fig. 3).
The external LM 206 may include using a unidirectional former LM in which a retrospective attention field of 31 tokens is predicted for each output word segment model. Here, LM 20 may include 12 layers, with each layer having a model dimension of 768 and a feed-forward layer dimension of 2048. The number of attention heads may be six (6). Conformer LM 206 may be trained to predict 4,096 word segments.
Continuing with the example in FIG. 2A, in some implementations, model 200a operates in parallel in both streaming and non-streaming modes. When operating in both streaming and non-streaming modes simultaneously, the model 200a first performs streaming speech recognition on the audio data 110 using the first encoder 210 to generate a first higher-order representation e for both the second encoder 220 and the decoder 204 S . The decoder 204 then generates partial speech recognition results 120, 120a. Model 200b also performs non-streaming speech recognition on the encoded audio data 110, wherein the second encoder 220 uses the first higher-order representation e received from the first encoder 210 S To generate a second higher order representation e a . Decoder 204 then produces a speech recognition result, which is then re-scored by LM 206 to produce final speech recognition results 120, 120b. As shown in time, the first encoder 210 generates a partial speech recognition result 120a while the second encoder 220 waits for the output of the first encoder 210 to generate a final speech recognition result 120b. Thus, the final speech recognition result 120b of the input utterance 106 may be delayed from the partial speech recognition result 120a of the input utterance. As previously described, the first encoder 210 may identify an endpoint of the utterance 106 that triggered the microphone off event and triggered the final speech recognition result 120b to be emitted.
Referring to FIG. 2B, inIn some embodiments, model 200b operates only in streaming mode. This may occur, for example, when the user 104 uses applications such as voice searches or dictations on the device, which require as little delay as possible. Here, the model 200b performs streaming speech recognition on the audio data 110 using only the first encoder 210 to generate a first higher order representation e of the decoder 204 S . Decoder 204 then produces speech recognition results, which are then re-scored by LM 206 to produce partial speech recognition results 120, 120a. Because the streaming mode of the concatenated encoder model 200b quickly produces partial speech recognition results 120, 120a, the inaccuracy of the term "play" is generally accepted by the user 104.
Referring to fig. 2C, in some embodiments, the model 200C operates only in a non-streaming mode. For example, the non-streaming mode may occur when the user 104 is viewing a transcription of a voicemail left on his/her phone (e.g., FIG. 1B). As mentioned above, this type of application benefits from using future contexts to improve performance in exchange for increased processing time. Here, the concatenated encoder model 200c first uses the first encoder 210 to generate a first higher order representation e of the second encoder 220 S But decoder 204 does not represent e for the first higher order S Decoding is performed. The concatenated encoder model 200 then performs non-streaming speech recognition on the encoded audio data 110, wherein the second encoder 220 uses the first higher order representation e received from the first encoder 210 S To generate a second higher order representation e a . Decoder 204 then produces a speech recognition result, which is then re-scored by LM 206 to produce final speech recognition results 120, 120b. Because the non-streaming mode of the model 200c accurately produces partial speech recognition results 120, 120b, the time delay for displaying accurate transcription is generally acceptable to the user 104.
Fig. 3 illustrates an example of a training process 300 for training a concatenated encoder and language model 200 to fit both streaming and/or non-streaming. In some configurations, the training process 300 is performed on the remote computing device 60 of fig. 1A and 1B. Training process 300 obtains a sample database 130A plurality of training utterances 132, 132a-n are stored and the model 200 is trained on the training utterances 132. Training process 300 also obtains a plurality of plain text training samples 142, 142a-n stored in sample database 140 to train LM 206 of model 200. The sample databases 130, 140 may reside on memory hardware of the remote computing device 60. As discussed above with respect to fig. 2A, the first encoder 210 and the second encoder 220 share the same decoder 204 and may be trained in a single stage to simplify the training process 300. This means that the non-streaming encoder 220 can be directly dependent on the output of the streaming encoder 210 (e.g., the first higher order representation e S ) Rather than training based on input acoustic features (e.g., input acoustic features 110).
As shown in FIG. 3, model 200 has two processing paths, one for the streaming mode of model 200B (as shown in FIG. 2B) and one for the non-streaming mode of model 200C (as shown in FIG. 2C). Because there are two input processing paths within the training process 300, the loss of the concatenated encoder model includes two loss functions. In particular, the loss of streaming mode of model 200b is generally defined as the sum of negative logarithmic probabilities corresponding to probability distributions over the possible speech recognition hypotheses for a given input training utterance 132. That is, the concatenated encoder model loss from the first encoder 210 to the decoder 204 may be represented as follows.
The concatenated encoder model loss for the non-streaming mode is also typically defined as the sum of negative log probabilities corresponding to probability distributions over the possible speech recognition hypotheses for a given input training utterance 132. Thus, the concatenated encoder model loss from the second encoder 220 to the decoder 204 may be represented as follows.
Based on these representations of equations (1) and (2), the total loss between the two input paths is calculated as a weighted sum of the losses of each input path, as follows.
Where λ is the weighted term. In training process 300, joint training of the concatenated encoder includes minimizing a weighted sum of losses between the two input processing paths.
At each step time of training process 300, training may occur in streaming or non-streaming for each training utterance 132. In other words, the input processing path is randomly selected as either training the tandem encoder model 200b or the tandem encoder model 200c. By sampling the training utterances 132, the training process only needs to calculate a loss for each training utterance 132 at each training step, which greatly speeds up the training process 300. In some implementations, where longer training times are tolerated, an alternative training process is employed to train each input processing path for each training utterance, and the loss of the concatenated encoder model 200b and the concatenated encoder model 200c for each training utterance 132 is calculated at each training step.
In the example shown, the training utterances 132b, 132c are selected to train a first processing path represented by the concatenated encoder model 200 b. The concatenated encoder model 200b receives the training utterances 132b, 132c, and the first encoder 210 converts the training utterances 132b, 132c into a first higher-order feature representation (e.g., audio embedding) as output. The decoder 204 then receives as input the first higher-order feature representations of the training utterances 132b, 132c and generates an output whose accuracy is tested. Similarly, the training utterances 132a, 132d are selected to train a second processing path represented by the concatenated encoder model 200c. The concatenated encoder model 200c receives the training utterances 132a, 132d and the first encoder converts the training utterances 132a, 132d into a first higher-order feature representation (e.g., audio embedding) as output. The second encoder 220 receives as input the first higher-order feature representations of the training utterances 132a, 132d and generates as output the second higher-order feature representations of the training utterances 132a, 132 d. The decoder 204 then receives as input the second higher-order feature representations of the training utterances 132a, 132d and generates an output whose accuracy is tested. This ensures that model 200 learns to operate in either streaming or non-streaming mode during the inference process.
As described above, integrating the training of tandem encoder 202 and decoder 204 with LM 206 in training process 300 may result in high deletions when shallow fusion is performed using the following equations.
y * ＝arg max y [log p(y|x)+λ 1 log plm(y)] (4)
Wherein lambda is 1 Including the weights assigned to LM 206, and plm (y) expresses the external LM 206. To avoid high deletions caused by shallow fusion, techniques such as coverage penalty and blank scaling are used. Furthermore, HAT decomposition proposes a method of separating the internal language model score plm (y) of the model 200 so that the effective score of the model 200 can be represented as follows.
log p(x|y)≈log p(y|x)-log plm(y) (5)
Therefore, HAT decomposition allows model 200 to be integrated with external LM 206 without the need for a coverage penalty, as shown below.
y * ＝arg max y [λ 1 log p(y|x)-λ 2 log pilm(y)+logplm(y)] (6)
Wherein lambda is 1 And lambda (lambda) 2 The weights assigned to the external LM 206 and the internal language model are expressed, respectively. By using HAT decomposition in training process 300, LM 206 is better integrated with concatenated encoder 202 and decoder 204.
LM 206 can be trained on plain text data that includes over 1000 hundred million utterances across multiple domains. Rare words in plain text data may be identified. For example, words that occur five or less times may be identified as rare words. In addition, words that are pronounciated with a given spelling may be identified. These rare words and odds words may be synthesized to form audio-text pairs of long tail sets for training the ASR model 200.
Fig. 4 includes a flow chart of an example arrangement of operations of a method 400 of performing both streaming and non-streaming speech recognition using a concatenated encoder model 200. In operation 402, the method 400 includes receiving a sequence of acoustic frames 110 as input to the concatenated encoder model 200. In operation 404, the method 400 further includes performing streaming speech recognition and non-streaming speech recognition on the sequence of acoustic frames 110 using the concatenated encoder model.
In operation 406, the method 400 includes generating, at each of a plurality of output steps, a first high-order feature representation of a corresponding acoustic frame 110 in the sequence of acoustic frames 110 by the first encoder 210. The method 400 further comprises: in operation 408, the first high-order feature representation generated by the first encoder 210 at each of the plurality of output steps is received as an input to the second encoder 220. In operation 410, the method 400 further includes generating, at each of the plurality of output steps, a second high-order feature representation corresponding to the first high-order feature frame by the second encoder 220. The method 400 further comprises: in operation 412, the second high-order feature representation generated by the second encoder 220 at each of the plurality of output steps is received as an input to the decoder 204. In operation 414, the method 400 further includes generating a first probability distribution over the possible speech recognition hypotheses at each of the plurality of time steps, and then rescaling the first probability distribution over the possible speech recognition hypotheses using the external language model 206 to generate the transcription 120 of the utterance 106.
FIG. 5 is a schematic diagram of an example computing device 500 that may be used to implement the systems (e.g., the audio subsystem 108, the ASR system 109, the user interface generator 107, and/or the method 200) and methods (e.g., the method 400) described in this document. Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown herein, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the invention described and/or claimed in this document.
Computing device 500 includes a processor 510 (e.g., data processing hardware), a memory 520 (e.g., memory hardware), a storage device 530, a high-speed interface/controller 540 connected to memory 520 and high-speed expansion ports 550, and a low-speed interface/controller 560 connected to low-speed bus 570 and storage device 530. Each of the components 510, 520, 530, 540, 550, and 560 are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 510 may process instructions executing in the computing device 500, including instructions stored in the memory 520 or on the storage device 530 for displaying graphical information of a Graphical User Interface (GUI) on an external input/output device, such as a display 580 coupled to the high-speed interface 540. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Further, multiple computing devices 500 may be connected with each device providing portions of the necessary operations (e.g., as a server bank, a set of blade servers, or a multiprocessor system).
Memory 520 non-transitory stores information in computing device 500. Memory 520 may be a computer-readable medium, a volatile memory unit, or a non-volatile memory unit. Non-transitory memory 520 may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 500. Examples of non-volatile memory include, but are not limited to, flash memory and Read Only Memory (ROM)/Programmable Read Only Memory (PROM)/Erasable Programmable Read Only Memory (EPROM)/Electrically Erasable Programmable Read Only Memory (EEPROM) (e.g., commonly used for firmware such as boot up programs). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
The storage device 530 is capable of providing mass storage for the computing device 500. In some implementations, the storage device 530 is a computer-readable medium. In various embodiments, storage device 530 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory, or other similar solid state memory device or array of devices, including devices in a storage area network or other configurations. In additional embodiments, the computer program product is tangibly embodied as an information carrier. The computer program product contains instructions that when executed perform one or more methods, such as the methods described above. The information carrier is a computer-or machine-readable medium, such as the memory 520, the storage device 530, or memory on processor 510.
The high speed controller 540 manages bandwidth-intensive operations of the computing device 500, while the low speed controller 560 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some implementations, the high-speed controller 540 is coupled to the memory 520, the display 580 (e.g., via a graphics processor or accelerator), and to a high-speed expansion port 550 that can accept various expansion cards (not shown). In some implementations, a low speed controller 560 is coupled to the storage device 530 and the low speed expansion port 590. The low-speed expansion port 590, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, pointing device, scanner, or networking device, such as a switch or router, for example, through a network adapter.
Computing device 500 may be implemented in a number of different forms, as shown. For example, it may be implemented as a standard server 500a or multiple times in a group of such servers 500a, or as a laptop computer 500b or as part of a rack server system 500 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments may include embodiments in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit instructions to, a storage system, at least one input device, and at least one output device.
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," app, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
These computer programs (also known as programs, software applications or code) include machine instructions of a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). By way of example, processors suitable for the execution of a computer program include both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks, CD-ROM disks, and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure may be implemented on a computer having: a display device such as a CRT (cathode ray tube), an LCD (liquid crystal display) monitor or a touch screen for displaying information to a user; and optionally a keyboard and a pointing device, such as a mouse or a trackball, by which a user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with the user, for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback, and input from the user may be received in any form including acoustic, speech, or tactile input. In addition, the computer may send and receive documents to and from the device used by the user; for example, by sending a web page to a web browser on a user's client device in response to a request received from the web browser.
Many embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
1. An automatic speech recognition, ASR, system (109), comprising:
a first encoder (210), the first encoder (210) configured to:
receiving as input a sequence of acoustic frames (110); and
generating a first high-order feature representation of a corresponding acoustic frame (110) in the sequence of acoustic frames (110) at each of a plurality of output steps;
a second encoder (220), the second encoder (220) being configured to:
receiving as input the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps; and
generating a second high-order feature representation of the corresponding first high-order feature frame at each of the plurality of output steps;
a decoder (204), the decoder (204) being configured to:
receiving as input the second high-order feature representation generated by the second encoder (220) at each of the plurality of output steps; and
generating a first probability distribution over possible speech recognition hypotheses at each of the plurality of time steps (120 b); and
a language model (206), the language model (206) configured to:
receiving as input said first probability distribution (120 b) over possible speech hypotheses; and
A re-scoring probability distribution over possible speech recognition hypotheses is generated at each of the plurality of time steps (120).
2. The ASR system (109) according to claim 1, wherein the second encoder (220) generates the second high-order feature representation without receiving any of the acoustic frames (110) as input.
3. The ASR system (109) according to claim 1 or 2, wherein the decoder (204) is further configured to:
receiving as input the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps; and
a second probability distribution over possible speech recognition hypotheses is generated at each of the plurality of time steps (120 a).
4. An ASR system (109) according to claim 3, wherein the decoder (204) comprises:
a predictive network (240), the predictive network (240) being configured to, at each of the plurality of time steps:
receiving as input a sequence of N previous non-blank symbols output by the final softmax layer;
generating a respective insert for each non-blank symbol of the sequence of N previous non-blank symbols; and
Generating an average embedding d by averaging the respective embeddings avg The method comprises the steps of carrying out a first treatment on the surface of the And a federated network (230), the federated network (230) configured to:
receiving the average embedded d generated by the prediction network (240) at each of the plurality of output steps avg As input, one of the following:
when the ASR system (109) is operating in a streaming mode, the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps; or (b)
When the ASR system (109) is operating in a non-streaming mode, the second high-order feature representation generated by the second encoder (220) at each of the plurality of output steps; and
generating one of the following at each of the plurality of output steps:
-the second probability distribution (120 a) over possible speech recognition hypotheses when the ASR system (109) is operating in the streaming mode; or (b)
When the ASR system (109) operates in the non-streaming mode, the first probability distribution (120 b) over a hypothesis of possible speech recognition.
5. The ASR system (109) according to claim 4, wherein the predictive network (240) includes a V2 embedded look-up table (240).
6. The ASR system (109) according to any one of claims 1 to 5, wherein the first encoder (210) comprises a causal encoder (210) comprising an initial stack of a configurator layer.
7. The ASR system (109) according to claim 6, wherein the second encoder (220) comprises a non-causal encoder (210) comprising a final stack of a con layer overlaid on an initial stack of the con layer.
8. The ASR system (109) according to any one of claims 1 to 7, wherein the language model (206) comprises a neuro-language model (206).
9. The ASR system (109) according to claim 8, wherein the neuro-linguistic model (206) comprises a transducer layer or a stack of transducer layers.
10. The ASR system (109) according to any one of claims 1 to 9, wherein:
the language model (206) is trained on plain text data; and
the first encoder (210) and the second encoder (220) are trained using hybrid autoregressive transducer decomposition to facilitate integration of the language model (206) trained on the plain text data.
11. A computer-implemented method (400) that, when executed on data processing hardware (12), causes the data processing hardware (12) to perform operations comprising:
Receiving a sequence of acoustic frames (110) as input to an automatic speech recognition, ASR, model (200);
using the ASR model (200), performing streaming and non-streaming speech recognition on the sequence of acoustic frames (110) by:
generating, at each of a plurality of output steps, a first high-order feature representation of a corresponding acoustic frame in the sequence of acoustic frames (110) by a first encoder (210);
receiving the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps as an input to a second encoder (220);
generating, at each of the plurality of output steps, a second high-order feature representation corresponding to the first high-order feature frame by the second encoder (220);
receiving the second high order feature representation generated by the second encoder (220) at each of the plurality of output steps as an input to a decoder (204); and
generating a first probability distribution over possible speech recognition hypotheses at each of the plurality of time steps;
re-scoring the first probability distribution over possible speech recognition hypotheses using an external language model (206) to generate a transcription (120) of the utterance (106).
12. The computer-implemented method (400) of claim 11, wherein the second encoder (220) generates the second high-order feature representation without receiving any of the acoustic frames (110) as input.
13. The computer-implemented method (400) of claim 11 or 12, wherein the operations further comprise, when performing streaming and non-streaming speech recognition on the sequence of acoustic frames (110):
receiving the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps as an input to the decoder (204); and
a second probability distribution over possible speech recognition hypotheses is generated at each of the plurality of time steps.
14. The computer-implemented method (400) of claim 13, wherein the operations further comprise, at each of the plurality of time steps:
receiving as input to the prediction network (240) a sequence of N previous non-blank symbols output by the final softmax layer;
generating, by the prediction network (240), a respective embedding for each non-blank symbol of the sequence of N previous non-blank symbols;
Generating an average embedding d by the prediction network (240) by averaging the respective embeddings avg ；
Receiving the average embedded d generated by the prediction network (240) at each of the plurality of output steps avg And one of the following as input to the federated network (230):
when the ASR model (200) operates in a streaming mode, the first high-order feature representation generated by the first encoder (210) at each of the plurality of output steps; or (b)
When the ASR model (200) operates in a non-streaming mode, the second high-order feature representation generated by the second encoder (220) at each of the plurality of output steps; and
generating one of the following at each of the plurality of output steps:
-said second probability distribution over possible speech recognition hypotheses when said ASR model (200) is operating in said streaming mode; or (b)
The first probability distribution over possible speech recognition hypotheses when the ASR model is operating in the non-streaming mode.
15. The computer-implemented method (400) of claim 14, wherein the predictive network (240) includes a V2 embedded lookup table (240).
16. The computer-implemented method (400) of any of claims 11-15, wherein the first encoder (210) comprises a causal encoder (210) comprising an initial stack of a configurator layer.
17. The computer-implemented method (400) of claim 16, wherein the second encoder (220) comprises a non-causal encoder (210) comprising a final stack of con layers overlaid on an initial stack of the con layers.
18. The computer-implemented method (400) of any of claims 11-17, wherein the language model (206) comprises a neuro-language model (206).
19. The computer-implemented method (400) of claim 18, wherein the neuro-language model (206) comprises a transducer layer or stack of transducer layers.
20. The computer-implemented method (400) of any of claims 11-19, wherein:
the language model (206) is trained on plain text data; and
the first encoder (210) and the second encoder (220) are trained using hybrid autoregressive transducer decomposition to facilitate integration of the language model (206) trained on the plain text data.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163165068P | 2021-03-23 | 2021-03-23 | |
US63/165,068 | 2021-03-23 | ||
PCT/US2021/031785 WO2022203698A1 (en) | 2021-03-23 | 2021-05-11 | Efficient streaming non-recurrent on-device end-to-end model |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117043856A true CN117043856A (en) | 2023-11-10 |
Family
ID=76250460
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180096175.5A Pending CN117043856A (en) | 2021-03-23 | 2021-05-11 | End-to-end model on high-efficiency streaming non-recursive devices |
Country Status (6)
Country | Link |
---|---|
US (2) | US11715458B2 (en) |
EP (1) | EP4295355A1 (en) |
JP (1) | JP2024510817A (en) |
KR (1) | KR20230158107A (en) |
CN (1) | CN117043856A (en) |
WO (1) | WO2022203698A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11853381B2 (en) * | 2020-11-13 | 2023-12-26 | Google Llc | Hybrid fetching using a on-device cache |
US11715458B2 (en) * | 2021-03-23 | 2023-08-01 | Google Llc | Efficient streaming non-recurrent on-device end-to-end model |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2020153736A1 (en) * | 2019-01-23 | 2020-07-30 | Samsung Electronics Co., Ltd. | Method and device for speech recognition |
US11322148B2 (en) * | 2019-04-30 | 2022-05-03 | Microsoft Technology Licensing, Llc | Speaker attributed transcript generation |
US11138980B2 (en) * | 2019-04-30 | 2021-10-05 | Microsoft Technology Licensing, Llc | Processing overlapping speech from distributed devices |
US11715458B2 (en) * | 2021-03-23 | 2023-08-01 | Google Llc | Efficient streaming non-recurrent on-device end-to-end model |
-
2021
- 2021-05-10 US US17/316,198 patent/US11715458B2/en active Active
- 2021-05-11 KR KR1020237035781A patent/KR20230158107A/en unknown
- 2021-05-11 JP JP2023558609A patent/JP2024510817A/en active Pending
- 2021-05-11 CN CN202180096175.5A patent/CN117043856A/en active Pending
- 2021-05-11 WO PCT/US2021/031785 patent/WO2022203698A1/en active Application Filing
- 2021-05-11 EP EP21729721.7A patent/EP4295355A1/en active Pending
-
2023
- 2023-06-16 US US18/336,211 patent/US20230343328A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
JP2024510817A (en) | 2024-03-11 |
WO2022203698A1 (en) | 2022-09-29 |
US11715458B2 (en) | 2023-08-01 |
EP4295355A1 (en) | 2023-12-27 |
US20230343328A1 (en) | 2023-10-26 |
US20220310062A1 (en) | 2022-09-29 |
KR20230158107A (en) | 2023-11-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20220122622A1 (en) | Cascaded Encoders for Simplified Streaming and Non-Streaming ASR | |
US11741947B2 (en) | Transformer transducer: one model unifying streaming and non-streaming speech recognition | |
JP7436760B1 (en) | Learning word-level confidence for subword end-to-end automatic speech recognition | |
JP7351018B2 (en) | Proper noun recognition in end-to-end speech recognition | |
US20230343328A1 (en) | Efficient streaming non-recurrent on-device end-to-end model | |
US20220310073A1 (en) | Mixture Model Attention for Flexible Streaming and Non-Streaming Automatic Speech Recognition | |
JP2023175029A (en) | Attention-based joint acoustic and text on-device end-to-end model | |
US20230096821A1 (en) | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition | |
US20230326461A1 (en) | Unified Cascaded Encoder ASR model for Dynamic Model Sizes | |
US20230343332A1 (en) | Joint Segmenting and Automatic Speech Recognition | |
US20220310081A1 (en) | Multilingual Re-Scoring Models for Automatic Speech Recognition | |
US20220310061A1 (en) | Regularizing Word Segmentation | |
KR20240065125A (en) | Large-scale language model data selection for rare word speech recognition. | |
US20230107695A1 (en) | Fusion of Acoustic and Text Representations in RNN-T | |
WO2023205367A1 (en) | Joint segmenting and automatic speech recognition | |
WO2023060002A1 (en) | Training for long-form speech recognition | |
KR20240068723A (en) | Convergence of sound and text expression in an automatic speech recognition system implemented with Rnn-T | |
WO2023059980A1 (en) | Transducer-based streaming deliberation for cascaded encoders |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |