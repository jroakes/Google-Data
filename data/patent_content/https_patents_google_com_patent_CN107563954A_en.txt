CN107563954A - The core processing of blocks operation on channel array and the image processor of two-dimensional shift register is performed with two dimension - Google Patents
The core processing of blocks operation on channel array and the image processor of two-dimensional shift register is performed with two dimension Download PDFInfo
- Publication number
- CN107563954A CN107563954A CN201710534983.0A CN201710534983A CN107563954A CN 107563954 A CN107563954 A CN 107563954A CN 201710534983 A CN201710534983 A CN 201710534983A CN 107563954 A CN107563954 A CN 107563954A
- Authority
- CN
- China
- Prior art keywords
- row
- array
- data
- column
- storage medium
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000012545 processing Methods 0.000 title claims description 68
- 238000000034 method Methods 0.000 claims abstract description 47
- 238000006073 displacement reaction Methods 0.000 claims abstract description 37
- 230000015654 memory Effects 0.000 claims description 84
- 239000011159 matrix material Substances 0.000 claims description 65
- 238000003860 storage Methods 0.000 claims description 63
- 238000004422 calculation algorithm Methods 0.000 claims description 16
- 238000005070 sampling Methods 0.000 claims description 10
- 238000012805 post-processing Methods 0.000 claims description 5
- 238000004148 unit process Methods 0.000 claims 1
- 230000006870 function Effects 0.000 description 36
- 238000011161 development Methods 0.000 description 17
- 238000013461 design Methods 0.000 description 12
- 238000005516 engineering process Methods 0.000 description 9
- 230000008859 change Effects 0.000 description 8
- 230000009471 action Effects 0.000 description 6
- 150000001875 compounds Chemical class 0.000 description 6
- 238000003384 imaging method Methods 0.000 description 5
- 238000007726 management method Methods 0.000 description 5
- 230000008569 process Effects 0.000 description 5
- 239000000758 substrate Substances 0.000 description 5
- 230000009466 transformation Effects 0.000 description 5
- 238000012800 visualization Methods 0.000 description 5
- 238000009825 accumulation Methods 0.000 description 4
- 238000003491 array Methods 0.000 description 4
- 230000006399 behavior Effects 0.000 description 4
- 238000013500 data storage Methods 0.000 description 4
- 235000013399 edible fruits Nutrition 0.000 description 4
- 238000006243 chemical reaction Methods 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 230000004927 fusion Effects 0.000 description 3
- 238000005192 partition Methods 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 238000004891 communication Methods 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000010276 construction Methods 0.000 description 2
- 238000000151 deposition Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000001965 increasing effect Effects 0.000 description 2
- 238000004519 manufacturing process Methods 0.000 description 2
- 238000010008 shearing Methods 0.000 description 2
- 238000004088 simulation Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- XLYOFNOQVPJJNP-UHFFFAOYSA-N water Substances O XLYOFNOQVPJJNP-UHFFFAOYSA-N 0.000 description 2
- PCTMTFRHKVHKIS-BMFZQQSSSA-N (1s,3r,4e,6e,8e,10e,12e,14e,16e,18s,19r,20r,21s,25r,27r,30r,31r,33s,35r,37s,38r)-3-[(2r,3s,4s,5s,6r)-4-amino-3,5-dihydroxy-6-methyloxan-2-yl]oxy-19,25,27,30,31,33,35,37-octahydroxy-18,20,21-trimethyl-23-oxo-22,39-dioxabicyclo[33.3.1]nonatriaconta-4,6,8,10 Chemical compound C1C=C2C[C@@H](OS(O)(=O)=O)CC[C@]2(C)[C@@H]2[C@@H]1[C@@H]1CC[C@H]([C@H](C)CCCC(C)C)[C@@]1(C)CC2.O[C@H]1[C@@H](N)[C@H](O)[C@@H](C)O[C@H]1O[C@H]1/C=C/C=C/C=C/C=C/C=C/C=C/C=C/[C@H](C)[C@@H](O)[C@@H](C)[C@H](C)OC(=O)C[C@H](O)C[C@H](O)CC[C@@H](O)[C@H](O)C[C@H](O)C[C@](O)(C[C@H](O)[C@H]2C(O)=O)O[C@H]2C1 PCTMTFRHKVHKIS-BMFZQQSSSA-N 0.000 description 1
- 241000255777 Lepidoptera Species 0.000 description 1
- 230000003466 anti-cipated effect Effects 0.000 description 1
- 230000000712 assembly Effects 0.000 description 1
- 238000000429 assembly Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000003139 buffering effect Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000001427 coherent effect Effects 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 239000004020 conductor Substances 0.000 description 1
- 238000012937 correction Methods 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 238000011143 downstream manufacturing Methods 0.000 description 1
- 238000005538 encapsulation Methods 0.000 description 1
- 230000002708 enhancing effect Effects 0.000 description 1
- 238000011065 in-situ storage Methods 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 230000014759 maintenance of location Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000007620 mathematical function Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 238000005096 rolling process Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 241000894007 species Species 0.000 description 1
- 230000006641 stabilisation Effects 0.000 description 1
- 238000011105 stabilization Methods 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000005945 translocation Effects 0.000 description 1
- 239000011800 void material Substances 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/16—Constructional details or arrangements
- G06F1/20—Cooling means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/3001—Arithmetic instructions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/76—Architectures of general purpose stored program computers
- G06F15/80—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors
- G06F15/8007—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors single instruction multiple data [SIMD] multiprocessors
- G06F15/8023—Two dimensional arrays, e.g. mesh, torus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/30032—Movement instructions, e.g. MOVE, SHIFT, ROTATE, SHUFFLE
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/30036—Instructions to perform operations on packed data, e.g. vector, tile or matrix operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/20—Processor architectures; Processor configuration, e.g. pipelining
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/94—Hardware or software architectures specially adapted for image or video understanding
- G06V10/955—Hardware or software architectures specially adapted for image or video understanding using specific electronic processors
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C19/00—Digital stores in which the information is moved stepwise, e.g. shift registers
- G11C19/28—Digital stores in which the information is moved stepwise, e.g. shift registers using semiconductor elements
Abstract
A kind of method is described, it is included on the image processor that channel array and two-dimensional shift register array are performed with two dimension, as each iteration next time doubles shift amount while multiple row or column of the two-dimensional shift register array.This method performs in the two dimension also between the displacement of iteration and one or more instructions is performed in the corresponding passage of channel array.Describe another method, it is included on the image processor that channel array and two-dimensional shift register array are performed with two dimension, one or more instructions are repeatedly carried out in the respective channel for performing channel array, the instruction is selected between the content in the different registers of identical array position, while the repetition of multiple row or column of data of the identical array position in two-dimensional shift register array between displacement.
Description
Technical field
Field of the invention generally relates to image procossing, is that there is two dimension to perform channel array and two dimension more specifically
The core processing of blocks operation on the image processor of shift register.
Background technology
Image procossing typically comprises the processing for the pixel value for being organized into array.Here, the two-dimentional battle array of spatial organization
(additional dimension can include time (for example, sequence of two dimensional image) and data type (example to the two-dimensional nature of row capture images
Such as, color).In a typical case, provided into the pixel value of array by the camera for having produced rest image or frame sequence, with
The image of capture action.Conventional image processor is generally fallen in two extreme either sides.
First extremely using image processing tasks as the general processor of general processor or class (for example, with to
The general processor of amount instruction enhancing) on the software program that performs carry out.Although the first extreme height that typically provides is led to
Application software development platform, but the data structure of its more fine granularity is combined with associated overhead (for example, instruction obtains
With decoding, on piece and outside piece, the processing of data, predictive perform) use ultimately result in during configuration processor code, per single
The energy of metadata consumption is bigger.
Second opposite extreme hard-wired circuitry by fixing function is applied to bigger data block.It is bigger
The data block of (relative to thinner granularity) directly applies to the fixing function circuit of custom design, greatly reduces
Power consumption per data cell.But the use of the fixing function circuit of custom design, which typically results in processor, to enter
The limited group task of row.In this way, it is scarce during omnipotent (extremely associated with first) programmed environment is extreme second extensively
Weary.
There is provided what the power efficiency of the developing engine meeting and improvement of the application software of highly versatile per data cell was combined
Technology platform is still the solution it is expected but also lacked.
The content of the invention
A kind of method is described, it is included in the figure that channel array and two-dimensional shift register array are performed with two dimension
As on processor, as each iteration next time is by shift amount while multiple row or column of two-dimensional shift register array
Double.This method also included in iteration displacement between two dimension perform channel array corresponding passage in perform one or
Multiple instruction.Another method is described, it, which is included in, has two-dimentional execution channel array and two-dimensional shift register array
On image processor, one or more instructions are repeatedly carried out in the respective channel for performing channel array, the instruction is identical
Array position different registers in content between selected, the identical array position two-dimensional shift deposit
Between being shifted while the repetition of multiple row or column of data in device array.
A kind of equipment is described, it includes component, for performing channel array and two-dimensional shift register with two dimension
On the image processor of array, as each iteration next time is by multiple row or column of the two-dimensional shift register array
While shift amount double.The equipment performs the corresponding of channel array also between the displacement of iteration in the two dimension
The component of one or more instructions is performed in passage.Another equipment is described, it includes component, for being held with two dimension
On the image processor of row of channels array and two-dimensional shift register array, repeated in the respective channel for performing channel array
Ground performs one or more instructions, and the instruction is selected between the content in the different registers of identical array position,
Shifted while the repetition of multiple row or column of data of the identical array position in two-dimensional shift register array
Between.
Brief description of the drawings
The following description and drawings are used to illustrate various embodiments of the present invention.In the accompanying drawings：
Fig. 1 shows the various assemblies of technology platform；
Fig. 2 a show the embodiment of the application software built with kernel；
Fig. 2 b show the embodiment of the structure of kernel；
Fig. 3 shows the embodiment of the operation of kernel；
Fig. 4 a, 4b and 4c depict the virtual place of the developing kernel thread in the applied software development environment of higher level
Manage the various aspects of the memory model of device；
Fig. 5 a are shown with the embodiment of the thread of the loading instruction write-in with position relative format；
Fig. 5 b show the image with different pixels density；
Fig. 6 shows the embodiment of applied software development and simulated environment；
Fig. 7 shows the embodiment of image processor hardware structure；
Fig. 8 a, 8b, 8c, 8d and 8e are depicted image data analyzing into line group, by line group resolve to list and with
The operation carried out on the list of overlapping template；
Fig. 9 a show the embodiment of template processor；
Fig. 9 b show the embodiment of the coding line of template processor；
Figure 10 shows the embodiment of the Data Computation Unit in template processor；
Figure 11 a, 11b, 11c, 11d, 11e, 11f, 11g, 11h, 11i, 11j and 11k are depicted using two-dimensional shift array
With perform channel array with the example for a pair of adjacent output pixel values for determining there is overlapping template；
Figure 12 shows the embodiment for the integrated cell for performing channel array and two-dimensional shift array；
Figure 13 shows the sum operation of two-dimentional row/column；
Figure 14 a, 14b, 14c and 14d show the low-level operation of the sum operation for realizing two-dimentional row；
Figure 15 shows the sum operation of two-dimentional prefix；
Figure 16 a, 16b, 16c and 16d show the low-level operation of the sum operation for realizing two-dimentional prefix；
Figure 17 is related to two dimension and searches minimum Value Operations；
Figure 18 a, 18b, 18c and 18d are shown for realizing that two dimension searches the low-level operation of minimum Value Operations；
Figure 19 a and 19b show matrix multiplication operation；
Figure 20 a, 20b, 20c, 20d and 20e are shown realizes the rudimentary of matrix multiplication operation by two-dimensional shift register
Do not operate；
Figure 21 shows that DFT is operated；
Figure 22 a, 22b, 22c, 22d, 22e and 22f are shown realizes the rudimentary of DFT operations by two-dimensional shift register
Do not operate；
Figure 23 shows butterfly operation；
Figure 24 a, 24b and 24c show the butterfly operation realized by two-dimensional shift register；
Figure 25 shows substrate image and alternate image with tile images；
Figure 26 a, 26b, 26c and 26d show the low-level operation for carrying out block matching algorithm；
Figure 27 shows that for producing target be to perform the hard of channel array and two-dimensional shift register array with two dimension
The environment of the program code of part platform；
Figure 28 shows the embodiment of computing system.
Embodiment
Introduction
Following description describes numerous embodiments on new image processing techniques platform, the technology platform provides
Opened using the extensive general application software of bigger data block (for example, line line group and list for being described further below)
Hair ring border, to provide improved power efficiency.
1.0 applied software development environment
A. the application of kernel and structure
Fig. 1 shows the high level view of image processor technology platform, and it includes virtual image processing environment 101, reality
Border image processing hardware 103 and compiler 102, the encoder are used for the higher level that will be write for virtual processing environment 101
Code translation is the object identification code that the physics of actual hardware 103 performs.As described in more detail below, virtual processing environment 101 exists
Developable application aspect is general extensively, and is customized the easily visualization of the composition processing in order to application.
After program code development being completed by developer 104, code that compiler 102 will be write in virtual processing environment 101
Translate into the object identification code that target is actual hardware 103.
Fig. 2 a show the structure of the application software write in virtual environment and the example of form.As shown in Figure 2 a, journey
Sequence code is it can be desirable to be the one or more frames for handling input image data 201, to influence some in input image data
Global transformation on 201.Conversion realizes that program code operation exists with the operation of one or more kernels of program code 201
By on the input image data in the layout sequence of developer's statement.
For example, as shown in Figure 2 a, global transformation is first by using each input picture of the first kernel K1 processing and by shadow
Ring.As caused by kernel K1 then output image is operated by kernel K2.Each output image is then logical as caused by kernel K2
Cross kernel K3_1 or K3_2 operation.As caused by (one or more) kernel K3_1/K3_2 then output image passes through kernel K4
Operation.Kernel K3_1 and K3_2 can be designed as accelerating overall process by using the parallel processing at the K3 stages
Identical kernel, or, can be different kernels (for example, input picture of the kernel K3_1 operations in the first given category
Upper and kernel K3_2 operations are on second different types of input picture).
In this way, larger overview image processing sequence can use image processing pipeline or oriented aperiodic figure (DAG)
Form, and development environment can be equipped with by the representative for the program code developed, exploitation is presented to actual
Person.Kernel can individually be developed by developer, and/or can be by any Floor layer Technology (such as at its actual signal
Reason device hardware and/or design) entity and/or by third party (for example, being development environment the confession of kernel software that writes
Answer business) provide.So, it is contemplated that nominal development environment will include " storehouse (library) " of a kernel, open
Hair personnel " can be freely engaged " by various modes to produce the overall procedure of its more great development effort.It is expected to turn into and be somebody's turn to do
Some basic kernels of a storehouse part can include kernel, to provide any one that following primary image handles task
It is or multiple：Convolution, denoising, color notation conversion space, edge and Corner Detection, sharpening, white balance, gamma correction, tone mapping,
Matrix multiplication, image registration, pyramid construction, wavelet transformation, block discrete cosine and Fourier transformation.
Fig. 2 b show that the exemplary of structure for the kernel 203 that can be contemplated by developer illustrates.As shown in Figure 2 b, it is interior
Core 203 can be counted as each of multiple parallel threads, the program code of program code (" thread ") 204 at corresponding bottom
Operated on layer processor 205, wherein each processor 205, which is oriented to output array 206, (is such as producing the output image of kernel
In the location of pixels specified) in special position.For simplicity, only three processors and corresponding thread are being schemed
Shown in 2b.In various embodiments, the output array position each illustrated is by with its own special processor and correspondingly
Thread.In other words, processor and thread respectively can be assigned to each pixel in output array.In replacement
In method, identical thread can produce the data more than output pixel, and/or two different threads (for example, a certain
In the case of limitation) can cooperation produce the data of identical output pixel.
As will be described in more detail, in various embodiments, in the hardware of actual bottom, the battle array of passage is performed
Row and corresponding thread as one man operate (for example, with single-instruction multiple-data (SIMD) similar mode), are handled with producing
Frame " line group " a part output image data.Line group is continuous, sizable area of picture frame.In various realities
Apply in example, developer it is to be appreciated that hardware operation group is upper online or development environment can present it is abstract, in this is abstract
In the presence of processor respectively and thread for each pixel for example in output frame (for example, special by its own
Manage each pixel in output frame caused by device and thread).Anyway, in various embodiments, developer understands kernel
Include the individual threads for each output pixel (whether output array is visualized as whole output frame or wherein area).
As will be described in more detail, in embodiment, the processor of developer is presented in virtual environment
205 have instruction set architecture (ISA), and the instruction set architecture not only supports standard (for example, RISC) command code, also comprising special
The data access command of form, the instruction allow developer easily to visualize pixel by ongoing processes pixel.
It is combined with the mathematics of routine and the whole ISA of program control operations code, easily defines/visualize any input array position
The ability put allow for extremely omnipotent programmed environment, and the programmed environment substantially allows application developer any big
On small imaging surface, pending any desired function is ideally defined.For example, it is desirable that any mathematical operations can be with
Easily it is programmed to the size applied to any template.
On data access command, in embodiment, the ISA (" virtual " ISA) of virtual processor includes specific data
Loading instruction and the instruction of specific data storage.Data load instruction can be from any position in the input array of view data
Put middle reading.Data storage instruction can be written in any position in the output array of view data.The instruction of the latter is permitted
Perhaps multiple examples of same processor being advantageously used in different output pixel positions, (each processor, which is written to, to be exported
Different pixels in array).In this way, for example, template size itself is (for example, be expressed as the width of pixel and the height of pixel
Degree) it can be made into being convenient to the characteristic of programming.The visualization of processing operation passes through with each of specific instruction format
Specific loading and storage instruction, is further simplified, thus Target Aerial Array position is designated simply as X and Y coordinates.
Anyway, by instantiating the processor of each multipoint difference in output array, processor can be with
Its corresponding thread is performed in parallel, for example to produce the analog value of all positions in output array simultaneously.It is worth note
Meaning, typically, many image procossing routines carry out same operation in the different pixels of identical output image.In this way,
In one embodiment of development environment, each processor is assumed identical and performs identical multi-threaded program code.Cause
This, virtual environment can be counted as by 2D arrays --- the same processor of same code is performed for example in lock step
Two dimension (2D) SIMD processor of 2D arrays --- composition.
Fig. 3 shows the more detailed example of the processing environment for two virtual processors, and the virtual processor is for defeated
The two different processes pixel identical codes gone out in array.Fig. 3 is shown corresponding to the defeated of caused output image
Go out array 304.Here, the first virtual processor is handling the code of thread 301, with the position X1 of output array 304
Output valve is produced, and the second virtual processor is handling the code of thread 302, with the position X2 of output array 304
Produce output valve.Again, in various embodiments, developer will be understood that, (for simplicity, Fig. 3 is only in output array 304
Show two therein) each location of pixels exist difference processor and thread.But opening in various embodiments
Originator only needs exploitation to be used for code (because the similar SIMD of machine property) of the processor with thread.
As being known in the art, output pixel value includes often through processing and surrounds corresponding output pixel position
The pixel of input array determine.For example, as seen from Figure 3, the position X1 of output array 304 corresponds to input array 303
Position E.Therefore the template for the pixel value of input array 303 for being processed to determine output valve X1 will be corresponded into input value
ABCDEFGHI.Similarly, will be processed to determine the template of output valve X2 input array pixel will correspond to input value
DEFGHIJKL。
Fig. 3 shows the example of the virtual environment program code corresponding to a pair of threads 301,302, and a pair of threads can
Be used to correspondingly calculate output valve X1 and X2.In the example of fig. 3, two pairs of codes are identicals, and nine are inputted
The template of array of values is average with output valve corresponding to determination.Between two threads is not both uniquely to be called from input array
Variable and write-in output array position.Specifically, outgoing position X1 thread is write on template ABCDEFGHI
Operation, and the thread for writing outgoing position X2 operates on template DEFGHIJKL.
As can be seen that each virtual processor at least wraps from from the corresponding program code to thread 301,302
R1 containing internal register and R2, and at least support to give an order：1) LOAD instruction, entered from input array in R1；2)
LOAD instruction, entered from input array in R2；3) ADD instruction, add R1 and R2 content and result is placed in R2；4)
DIV is instructed, by the value in R2 divided by operand 9 at once；Instructed with 5) STORE, R2 content storage is special to thread
Output array position.Again, although only two output array positions and only two threads and corresponding processor are being schemed
Shown in 3, it is contemplated that each position in output array can be assigned to virtual processor and carry out these
The corresponding thread of function.In various embodiments, SIMD properties similar with processing environment are consistent, multiple thread phases
Mutually isolator perform.In other words, in the absence of the communication of the thread to thread between virtual processor, (a SIMD passage is hindered
Only it is crossed into another SIMD passages).
B. virtual processor memory model
In various embodiments, the correlation properties of virtual processor are its memory models.As understood in this area
, processor reads data from memory, is operated on the data, and new data is write back in memory.Deposit
Reservoir model is the perspective view or view that processor has the mode being organized in data in memory.Fig. 4 a-4c, which are related to, to be used for
The embodiment of the memory model of the virtual processor of development environment.For illustrative purposes, used only virtual comprising three
The simplification environment of processor and corresponding thread 401.As described in more detail below, the memory model of virtual processor pays attention to
Retain SIMD semanteme, but simultaneously, the storage that scalar operations and privately owned median are provided for each virtual processor is empty
Between.
As shown in fig. 4 a, in one embodiment, the storage region 420 that each virtual processor operates out, based on storage
The type of information be organized into six different subregions.Specifically, exist：1) privately owned buffer region 402；2)
Global input data array region 403；3) global output data array region 404；4) global look-up table information area 405；5)
Global atom statistical regions 406；With 6) global constant table information area 407.
It is shared consistent with the similar SIMD of the processing environment of totality property that subregion as shown in fig. 4 a attempts visualization
Shared among virtual processor or " global " those memory areas.Similarly, Fig. 4 a also attempt visualization not virtual
Shared or to specific virtual processor for the memory of " privately owned " other regions between processor.Specifically, such as Fig. 4 a
Shown, all memory partitions are all global, in addition to being privately owned staging area 402 to each virtual processor.
Multiple different memory regions also have memory addressing schemes different as described further below.
On staging area 402, processing is performed (for example, the information and slightly of then reading back in the image processing algorithm of complexity
It is used afterwards) in, the interim average information that stores is not uncommon for.In addition, these information are different (different between thread
Input value can influence different medians) phenomenon be not uncommon for.Memory model is therefore privately owned comprising each processor
Staging area 402, for storing these average informations by the corresponding thread of each virtual processor.In a reality
Apply in example, the temporary region of par-ticular processor is deposited by using typical (for example, linear) random access memory address
409 are taken, and is that (that is, virtual processor can both read the letter from privately owned memory for the read/write region of memory
Breath writes information into privately owned memory again).Access staging area virtual processor ISA instruction formats embodiment will with
Under further discuss in more detail.
One group of input data is contained in input array part 403, this group of input data be called in 408 this group of threads with
Just output data is produced.In the case of a typical case, input array is corresponding to each thread thereon or its built-in function
Image (for example, frame) or parts of images.Input picture can be the true defeated of the Pixel Information such as by camera offer
Enter, or some form of intermediate image --- such as being carried by kernel before in bigger overview image processing sequence
The information of confession.Virtual processor generally will not be that identical input data project competes, because they are during the identical cycle
Operated on the different pixels position of input image data.
In one embodiment, new memory addressing scheme is used to define calls from input array 403 by which spy
Fixed input value.Specifically, " position is relative " addressing scheme is used, it uses X, Y coordinate rather than the linear memory of routine
Device address defines desired input data.In this way, virtual processor ISA loading instruction includes instruction format, the instruction lattice
Formula defines the designated memory position in input array using X-component and Y-component, in this way, two-dimensional coordinate system be used for be from
The input value addressing memory that input array 403 is read.
The region for the image that the use permission virtual processor of position facing memory addressing method is operating is for opening
Originator more easily identifies.As described above, it is combined with the mathematics of routine and the whole ISA of program control operations code, easily
The ability of any input array position of definition/visualization allow for extremely omnipotent programmed environment, and the programmed environment substantially permits
Perhaps application developer ideally defines pending any desired function on the imaging surface of any size.For
Take the embodiment of the various instruction formats of the instruction of position relative addressing scheme, and the ISA supported other characteristics
Embodiment is being more fully described further below.
Output array 404 is responsible for caused output image data containing thread.Output image data can be final image
Data --- such as actual image data over the display is presented after overview image handles sequence, or can be
Between view data --- overview image processing sequence follow-up kernel as its input image data information use.Again,
Typically, virtual processor will not be identical output data project compete because its be written to during the identical cycle it is defeated
Go out the different pixels position of view data.
In embodiment, relative addressing scheme in position also be used to write output array.In this way, each virtual processor
ISA include storage and instruct, the instruction format of storage instruction define target writing position in memory for two-dimentional X,
The random access memory of Y-coordinate rather than routine.More details on the embodiment of virtual ISA position relative instruction
Further provide for below.
Fig. 4 a also show each virtual processor and enter the look-up table 411 being maintained in lookup table memories region 405
In carry out lookup 410.Look-up table is usually used for by image processing tasks, such as obtains wave filter or the change of different array positions
Change coefficient, realize sophisticated functions (for example, gamma curve, sine, cosine), wherein look-up table provides the function of input index value
Output etc..Herein, it is anticipated that during the identical clock cycle, SIMN image processing sequences will usually enter identical
Look-up table in searched.In this way, similar to input and output array memory area 403,404, table section 405 is searched
Being can be all global accessible by any virtual processor.Fig. 4 a are similarly shown from being maintained at lookup table memories region
Each virtual processor in three virtual processors of information is effectively searched in identical look-up table 411 in 405.
In embodiment, desired lookup table entries are defined because index value is typically used in, so using normal linear
Access plan enters line access to look-up table information area.In embodiment, the lookup region of memory is read-only (that is, handles
Device cannot change the information in look-up table, and only allow to be read from information).For simplicity, Fig. 4 a are shown only
One look-up table, which resides in, to be searched in table section 405, but virtual environment allows multiple different look-up tables during dry run
It is resident.The embodiment for the virtual ISA instruction formats for entering in look-up table the instruction searched is provided further below.
Fig. 4 b show each virtual processor in three virtual processors of 413 atom statistical regions 406 of write-in.
Image procossing " renewal " output information is not uncommon for output information progress appropriateness change.Then the information of renewal can be used
In other downstream processes using fresh information.The fixation that the example of these renewals or moderate change is included to output data is inclined
Simple addition, multiplicand and the simple multiplication of output data or the minimum value by output data compared with some threshold values moved
Or maximum.
In these sequences, as shown in Figure 4 b, it can be grasped in the output data just calculated by single thread 401
Make, and the result is written into 413 atom statistical regions 406.It is semantic according to realizing, the output number operated by atomic action
According to can internally be kept by processor, or 412 are called from output array, as Fig. 4 b are shown later.In various implementations
In example, the atomic action that can be operated in output data includes addition, multiplication, minimum and maximization.In embodiment,
Atom statistical regions 406 enter line access using position relative addressing scheme (such as being accessed by input and output array), because defeated
Go out the renewal of data will be logically organized with output data itself identical two-dimensional array.More detailed further below
Carefully describe for carrying out atomic action in output data and writing the result into the virtual ISA instruction lattice of statistical regions 406
The embodiment of formula.
Fig. 4 c are shown reads 414 steady state values from the constant look-up table 415 in constant memory area 407
Each virtual processor.Here, for example, it may be desirable to, different threads 401 may be needed in identical clock week
Identical constant or other values (for example, specific multiplier to whole image application) on phase.Therefore, into constant look-up table
415 access by identical scalar value return to as the virtual processor described in Fig. 4 c each.Because look-up table allusion quotation
Accessed by index value type, in embodiment, storage address is accessed to constant lookup table memories by linear random
Line access is entered in region.In embodiment, the constant region domains of memory are that read-only (that is, processor cannot change constant table
In information, and only allow to be read from information).For simplicity, Fig. 4 c illustrate only in constant storage region 407
Single constant look-up table 415.Because thread can use the memory area 407 of more than one such table, the memory
Region be configured as it is sufficiently large, to accommodate many constant tables of needs/use.
C. virtual processor ISA
As mentioned above in multiple examples, virtual processor ISA can include multiple correlation properties.Therein one
It is discussed in more detail below at once a bit.
In various embodiments, the ISA of each virtual processor instruction format is determined using relative positioning for the following
Adopted X, Y-coordinate：1) the LOAD instructions of input image data are read from input array memory area；2) by output image data
Write the STORE instructions of output array；With 3) by the statistical regions of atomic update to memory.
It is combined, easily defines any with the whole ISA of the data access of routine, mathematics and program control operations code
The ability of input array position allow for extremely omnipotent programmed environment, and the programmed environment substantially allows application development
Person ideally defines pending any desired function on the imaging surface of any size.For example, it is desirable that any number
Learn the size that operation can easily be programmed to be applied to any template.
It is following for having from input/output array loading/storage to the instruction of input/output array in embodiment
Form
[OPCODE]LINEGROUP_(name)[(((X*XS+X0)/XD)；((Y*YS+Y0) /YD)；Z]
Wherein, [OPCODE] is the specified type (LOAD, STORE to output array from input array) of operation, and
LINEGROUP_ (name) is assigned to the specific part (example of the specific image in input or output array memory area
Such as, the line group of the frame of view data) title.Here, because not collinear group operate respectively, not collinear group be given it is different
Title, so it can be uniquely identified/access (for example, LINEGROUP_1, LINEGROUP_2 etc.).Deposited in input array
In reservoir region and output array memory area, the line group of same names can be present.The origin of any line group can be with
It is, for example, the lower left corner in its appropriate memory area.
In the case of the instruction being updated on atomic summary table, in embodiment, instruction format use is similar below
Structure：
[OPCODE]STATS_(name)[(((X*XS+X0)/XD)；((Y*YS+Y0)/YD)； Z]
Wherein significant is not both position of the input operand information definition in specific statistical form (STATS_ (name))
Put, rather than the specific line group in input or output array.As line group, different titles is given different systems
Table is counted, so that thread can uniquely be operated in its operation processing on different statistical forms.[OPCODE] is specified and treated
The specific atomic action carried out is (for example, STAT_ADD；STAT_MUL；STAT_MIN；STAT_MAX).
Accessed for input/output array access or atomic summary table, the Z operands of instruction define the line which is named
The passage of group or statistical form, which is commanded, is set to target.Here, typically, single image will have multiple passages.For example,
For the same number of frames of video flowing, video image typically has red channel (R), green channel (G) and blue channel (B).
In some sense, complete image can be counted as being stacked on R, G and channel B image of the difference of top of each other.Z is operated
Number definition wherein which be commanded that (for example, Z=0 corresponds to red channel, Z=1 corresponds to blue channel, Z=2 correspondences
In green channel) it is set to target.Therefore each line group and statistical form are configured to comprising each of the specific image handled
The content of passage.
(X*XS+X0)/XD operands define the X positions in the line group named for being set to target or statistical form is commanded
Put, (Y*YS+Y0)/YD operands define the Y location in the line group named for being set to target or statistical form is commanded.X positions
XS the and XD items and YS the and YD items of Y location put are used between the input with different pixels density and output image
Zoom in and out.Scaling (scaling) is being more fully described further below.
In the simplest case, do not scaled between input and output image, and the X of instruction format and Y-component are only
Only with X+X0 and Y+Y0 form, wherein X0 and Y0 are offset relative to the positional of thread slot.Thread is considered as being divided
Position of the dispensing in the output array line group that its output valve is written into.Corresponding same position is in input array line group and appoints
What easily recognized in statistical form.
For example, if thread is assigned to specified X, Y location in output array LINEGROUP_1, instruct
LOAD LINEGROUP_1[(X-1)；(Y-1)；Z]
To load a value from LINEGROUP_1, the value be located at identical X in input array, Y location to the first from left picture
Plain position and a downward location of pixels.
Therefore the pixel value of X, Y location simply fuzzy kernel average together with the neighbour of its left and right can be write
Enter false code, as shown in Figure 5 a.As shown in Figure 5 a, position ((X)；(Y) the virtual processing for being currently written into output array) is corresponded to
The position of device.In above-mentioned false code, LOAD corresponds to the command code of the load from input array, and STORE corresponds to storage
To the command code of output array.Exist it is noted that LINEGROUP_1 in input array be present and export in array
LINEGROUP_1。
Fig. 5 b show the scaling of the purpose of the load for explaining relative positioning and the zoom feature of storage instruction format
Image.Down-sampling refers to by providing the pixel less than all pixels being present in input picture in the output image,
The image of high-resolution is transformed to the image of low resolution.Up-sampling refers to by creating in the output image than depositing
In the more pixels of pixel in input picture, the image of low resolution is transformed to the image of high-resolution.
For example, with reference to figure 5b, if representing input images of image 501 and image 502 represents output image, will carry out
Down-sampling, because pixel ratio in the output image lacking in the input image.It is here, each in the output image
Pixel, relevant pixel in the input image are moved along any one axle in the output image, and the relevant pixel is determined from defeated
Go out the output valve of the output pixel of " remote " traveling of location of pixels.For example, for 3:1 down-sampling ratio, in the output image edge
The first pixel for any axle corresponds in the input image along first, second, and third pixel of same axis, output image
In the second pixel correspond to the four, the 5th and the 6th pixel in the input image etc..Therefore, the first output pixel is
Three opening positions have related pixel, while the second output pixel has related pixel in the 6th opening position.
In this way, XS the and YS multiplicand items in relative positioning instruction format be used to realize down-sampling.If Fig. 5 a's
Fuzzy false code, wherein in order to carry out 3 along two axles：1 down-sampling and be written over, then code will be rewritten as：
R1<=LOAD LINEGROUP_1 [((3X) -1)；3(Y)；0]
R2<=LOAD LINEGROUP_1 [3 (X)；3(Y)；0]
R3<=LOAD LINEGROUP_1 [((3X)+1)；3(Y)；0]
R2<=ADD R1, R2
R2<=ADD R2, R3
R2<=DIV R2,3
STORE LINEGROUP_1[(X)；(Y)；(0)]；R2.
By contrast, 1：3 in the case of up-sampling (for example, image 502 is input picture and image 501 is defeated
Go out image), XD and YD divisors by for for along each input pixel of any axle create three output pixels.It is in this way, fuzzy
Code will be rewritten as：
R1<=LOAD LINEGROUP_1 [(X-1)/3；(Y)/3；0]
R2<=LOAD LINEGROUP_1 [(X)/3；(Y)/3；0]
R3<=LOAD LINEGROUP_1 [(X+1)/3；(Y)/3；0]
R2<=ADD R1, R2
R2<=ADD R2, R3
R2<=DIV R2,3
STORE LINEGROUP_1[(X)；(Y)；(0)]；R2
In various embodiments, the instruction format of the instruction of privately owned, constant and lookup the part of memory is accessed
Comprising operand, the operand also uses a*b+c form, and wherein a is home position, and b is scaling item, and c is skew.
But the linear directory applied to object table is corresponded essentially to using linear addressing method, wherein a*b+c items herein.This refers to
Each of order also includes the identifier of command code and the memory area being accessed.For example, enter from lookup table memories region
The instruction that row is searched can be expressed as：
LOAD LKUP_(name)[(A*B+C)]
Wherein, LOAD is the command code of identification loading operation, and LKUP_ (name) specifies the look-up table being accessed to deposit
The title of look-up table in reservoir region.Again, multiple look-up tables can be used by thread, and therefore nomenclature scheme is used for
The appropriate look-up table that identification is present in the more than one look-up table in lookup table memories region.
Similar form with the similar command code being intended to can be used for using constant and privately owned memory area as mesh
Target is instructed (for example, LOAD CNST_ (name) [(A*B+C)]；LOAD PRVT_ (name)[(A*B+C)]).In embodiment
In, the access of look-up table and constant table is read-only (processor can not change the data having been placed at that).In this way,
There is no STORE instructions to be present in these memory areas.In embodiment, the home zone of memory is read/write.
In this way, storage instruction is present in the memory area (for example, STORE PRVT [(A*B+C)]).
In various embodiments, each virtual processor includes general register, and the general register can contain whole
Number, floating-point or fixed-point values.In addition, general register can contain the configurable bit width of such as 8,16 or 32 place values
Data value.Therefore, the view data of each pixel position in input array or output array can have 8,16 or
The size of data of 32.Here, virtual processor is configurable to execution pattern, the execution pattern is established in general register
The size of the position of interior value and the form of numerical value.Instruction can also specify at once that (it is input operand to operand, the input
The input value of operand itself is directly expressed with instructing, without being found in specified register).At once operand also may be used
With with the bit width of configurable 8,16 or 32.
In the embodiment of extension, each virtual processor can also be in therein with scalar mode or SIMD moulds
Formula operates.In other words, the data in specified arrays position can be considered as scalar value or the vector with multielement.Example
Such as, the first configuration can establish the scalar operations of 8, wherein 8 place values of scalar are held in each pattern matrix position.Compared to it
Under, another configuration can establish the parallel/SIMD operation of 32, wherein for the total data size of every array position 32,
Assuming that each pattern matrix holds 48 place values.
In various embodiments, each virtual processor also includes the register for being used for holding predicate value.Single predicate
Value is often one and the expression of results from command code in length, and the command code carries out correct/error in available data
Or more than the/test that is less than.Predicate value is used for, for example, during execution by code determine branch direction (and because
This is used as operand in conditional branch instructions).Predicate value can also be expressed as the operand at once in instruction.
In various embodiments, each virtual processor includes the register for being used for holding scalar value.Here, scalar value
It is stored into the partition space of memory model and is read from the partition space of memory model, the memory model is
Constant and retain (such as above with respect to Fig. 4 c discussion).Here, one group of virtual processor of processing identical image is each virtual
Processor uses the same scalar value from constant memory space.In the embodiment of extension, there is also scalar predicate.This
It is a little to be held in the value met in both register spaces of the definition of predicate and scalar.
In various embodiments, each virtual processor is designed to PEGlike structures instruction set, its arithmetic instruction supported behaviour
Make code and include following any feasible combination：1) ADD (operand A is added with B's)；2) SUB (operand A's and B subtracts each other)；
3) MOV (from a register moving operation number to another register)；4) MUL (operand A is multiplied with B)；5) MAD (behaviour
The A that counts is multiplied with B, and by C phases to result)；6) ABS (absolute value for returning to operand A)；7) DIV (operand A divided by operation
Number B)；8) SHL (shifting function number A to left side)；9) SHR (shifting function number A to right side)；10) MIN/MAX (returns to operand
Larger one in A and B)；11) SEL (selection operation number A specified bytes)；12) AND (returns to operand A and B logic
With)；13) OR (return operand A and B logic or)；14) XOR (the logic XOR for returning to operator A and B)；15) NOT (is returned
Return operand A logic NOT).
Instruction set also operates comprising standard predicate, such as：1) 1) SEQ (if A equals B, is returned；2) SNE is (if A
Not equal to B, then return 1)；3) 1) SLT (if A is less than B, is returned；4) 1) SLE (if A is less than or equal to B, is returned.
Controlling stream instruction also includes such as JMP (jump) and BRANCH, and each of which can include nominal variable or meaning
Language is as operator.
D. applied software development and simulated environment
Fig. 6 shows applied software development and simulated environment 601.Such as above with respect to Fig. 2 discussion, by with totality
Intentional image converts in consistent tactic sequence and arranges kernel, and developer can develop comprehensive image processing function (example
Such as, image processing pipeline, wherein each stage in a pipeline carry out special image processing tasks, it is some other
Routine group as defined in DAG).Kernel can call from storehouse 602, and/or developer can develop the interior of one or more customizations
Core.
Kernel in storehouse 602 can be by the third-party vendor of kernel and/or supplier's (example of any basic technology
Such as, the supplier of the hardware platform comprising target hardware image processor or supplier's (example of target hardware image processor
Such as, provided as design therein or actual hardware)) provide.
In the case of customized development kernel, in many cases, developer only needs to write for single thread 603
Program code.In other words, developer only needs to write program code, and the program code is by reference to relative to output pixel position
The input pixel value (for example, by the relative memory access instruction form in above-mentioned position) put determines single output pixel value.
When meeting the operation of single thread 603, then development environment automatically can instantiate line on corresponding virtual processor
Multiple examples of range code, to influence the kernel in operation on the array of the processor in imaging surface region.Imaging surface area
Domain can be the part (such as line group) of picture frame.
In various embodiments, the multi-threaded program code of customization be written in virtual processor ISA object identification code (or
Person is compiled to the higher level language of virtual processor ISA object identification code) in.Customize the execution of the program code of kernel
Emulation can be carried out in simulation running environment, the simulation running environment include access depositing according to memory model tissue
The virtual processor of reservoir.Here, the software model (object-oriented or otherwise) of virtual processor 604 and comprising
The memory 605 of model is instantiated.
The execution of virtual processor model 604 and then emulation thread code 603.When meeting the performance of thread, it is bigger
Kernel and kernel belonging to any bigger function, its entirety is compiled into the practical object code of bottom hardware.Emulation
The whole of environment 601 can be implemented as the software run in computer system (for example, work station) 606.
The embodiment of 2.0 hardware structures
A. image processor hardware structure and operation
Fig. 7 shows the embodiment for the framework 700 for realizing image processor within hardware.For example, image processor can
With as target, for example, by will be in simulated environment code transitions that virtual processor is write be can be by hardware
Manage the compiler of the actual program code performed of device.As shown in Figure 7, framework 700 arrives comprising multiple line buffer cell 701_1
701_M (being below " line buffering ", " line buffer cell " or such), the plurality of line buffer cell 701_1 to 701_M
By network 704 (for example, including the network-on-chip of loop network or other type networks on exchange network on piece, piece
(NOC)), being mutually coupled to multiple template processor unit 702_1 to 702_N, (following is " template processor ", " template processor list
Member " or it is such) and corresponding list generator unit 703_1 to 703_N (below is " list generator ", " list
Generator unit " is such).In embodiment, any line buffer cell can be connected to any by network 704
List generator and corresponding template processor.
In embodiment, program code is compiled and loaded in corresponding template processor 702, to carry out earlier
(program code can also be loaded in the list of the association of template processor the image processing operations defined by software developer
Generator 703, for example, according to design and realizing).In at least some examples, image processing pipeline can be by with lower section
Formula is realized：First kernel program of the first flow line stage is loaded into the first template processor 702_1, by the second flowing water
Second kernel program in line stage is loaded into the second template processor 702_2 etc., wherein the first kernel carries out streamline
The function of first stage, the second kernel carries out function of second stage of streamline etc., and installs additional controlling stream
Method is so that output image data to be transferred to next stage of streamline from a stage of streamline.
In other configurations, image processor may be implemented as with operation two of same kernel program code or
The parallel machine of more template processors 702_1,702_2.For example, the high density and high data rate stream of view data can lead to
Cross on multiple template processor to deploy frame, each in the template processor carries out identical function.
In other configurations, it can be configured by using the corresponding kernel of the processor itself of program code corresponding
Template processor, and appropriate controlling stream hook is configured to hardware any DAG of substantially kernel is loaded at hardware
Manage on device, so that the output image from a kernel to be directed to in being designed in DAG the input of next kernel.
As common flow, the frame of view data is received by grand I/O units 705, and frame by frame is transferred to one
Or multiple line buffer cells 701.Specific line buffer cell resolves to the frame of view data the smaller area of view data
Domain, it is referred to as " line group ", then passes through the transfer line group of network 704 to specific list generator.Complete or " complete " odd number
Line group can be with for example, be made up of that (for brevity, this specification will be main the data of multiple continuous complete row or columns of frame
It is related to continuous row).The line group that list generator further parses view data is the smaller area of view data, is claimed
For " list ", and list is presented to corresponding template processor.
In the case where image processing pipeline or DAG streams have single input, commonly enter frame and be directed into phase
Image procossing is resolved to line group and line group will be directed into list by collinear buffer cell 701_1, the line buffer cell
Device 703_1, the corresponding template processor 702_1 of the list generator perform the code of the first kernel in streamline/DAG.
When the template processor 702_1 in the line group by managing at which completes operation, list generator 703_1 is by output line group
Being sent to " downstream " line buffer cell 701_2, (in some service conditions, output line group can be transmitted back to and pass more already
The identical line buffer cell 701_1 of input line group is sent).
Corresponding other list generators and template processor in their own are represented (for example, list generator 703_2
With template processor 702_2) on next stage/operation in streamline/DAG for performing one or more " consumer " in
Core and then line buffer cell 701_2 receptions view data as caused by the first template processor 702_1 from downstream.In this way,
" producer " kernel for being operated in first template processor outputs it data forwarding to being operated in the second template processor
" consumer " kernel, wherein in the case where consumer's kernel is carried out after producer's kernel is consistent with overall pipeline or DAG design
Group task.
Template processor 702 is designed as in multiple overlapping templates of view data while operated.Template processor
Multiple overlapping templates the size of list is effectively determined with internal hardware processing capability.Here, in template processor
In 702, the array for performing passage as one man operates, simultaneously to handle the image data table covered by multiple overlapping templates
Face region.
As described in more detail below, in various embodiments, the list of view data is loaded into template processor
The array structure of two-dimentional register in 702.By the way that mass data is moved in a large amount of register spaces, as example single
One loading operation, wherein directly carry out processing task in data by execution channel array at once behind, the use of list and
The array structure of two-dimentional register is considered as effectively providing the improvement of power consumption.In addition, perform the use of channel array
The different template sizes that easily may be programmed/can configure are provided with corresponding register array.
Fig. 8 a to 8e illustrate the parsing activity of line buffer cell 701, list generator unit 703 it is more fine-grained
Parsing activity and coupled to list generator unit 703 template processor 702 template processing activity both height
Horizontal embodiment.
Fig. 8 a depict the embodiment of the input frame of view data 801.Fig. 8 a also illustrate template processor be designed with
The profile of three overlapping templates 802 (each template has the size of the pixel of 3 pixels × 3) of operation.Each template is correspondingly
The output pixel used in output image data is produced to highlight with filled black.For brevity, three overlapping templates
802 be depicted as it is overlapping only in vertical direction.Relevantly to recognize, in fact, template processor can be designed to hanging down
All there is overlapping template in straight and horizontal direction.
Because, as shown in Figure 8 a, there is single template in the vertical overlapping template 802 in template processor in frame
The manipulable wideband image data of processor.As by following more details discussion, in embodiment, template processor
By from left to right across view data in a manner of in its overlapping template processing data (and then with order from top to bottom, under
One group of line repeats).Therefore, as template processor continues their operations with, the number of the output pixel block of filled black will be in water
Square to increasing to the right.As described above, be responsible for will be to extend quantity from enough template processors for line buffer cell 701
The line group of the incoming frame parsing input image data operated on the cycle come.The example plot of line group is elucidated with as shade
Region 803.In embodiment, as described further below, line buffer cell 701 can include different dynamics with by line
Group is sent to list generator or receives line group from list generator.For example, according to a pattern, it is referred to as " complete group ", schemes
As data the online buffer cell of complete full duration line and list generator between transmit.According to second pattern, it is referred to as
" virtually high ", the initial subset transfer line group for using full duration row.Then it is suitable in the form of the section of smaller (being less than full duration)
Transmit to sequence remaining row.
As the line group 803 of input image data is defined by line buffer cell and passes to list generator unit, list
Generator unit further resolves to line group finer form processor, and the form processor is more accurately suitable for mould
The hardware limitation of sheet processor.More specifically, such as below will further in greater detail, in embodiment, each template
Processor is made up of two-dimensional shift register array.Two-dimensional shift register array is substantially by image data shift to execution
" lower section " of the array of passage, wherein the pattern shifted causes data of each execution passage in the corresponding target of their own
On operated (in other words, each perform passage handled in the template of the their own of information, to for the template produce
Raw output).In embodiment, list is the surface area of input image data, and the input image data " filling " is otherwise added
It is loaded into two-dimensional shift register array.
Therefore, such as from Fig. 8 b, list generator parses initial list 804 from line group 803, and is carried
Being supplied to template processor, (here, the exemplary list of data corresponds to 5 × 5 shadow region, the shadow region is generally logical
Cross reference numeral 804 to identify).Such as from Fig. 8 c and 8d, template processor on list in the form of from left to right by having
Imitate the mobile overlapping template 802 in ground and operated on the list of input image data.As shown in figure 8d, out of list
The number of the pixel for the output valve (9 3 × 3 arrays deepened) that data can calculate is depleted (without other location of pixels
There can be the output valve that the information out of list determines).For simplicity, the borderline region of image is ignored.
Such as next list 805 is provided to continue to operate from Fig. 8 e, list generator and then for template processor.Note
Anticipate and arrive, when it starts operating on next list, the initial position of template is from exhausting a little to the right on the first list
Next ordered series of numbers (described before such as Fig. 8 d).By new table 805, template processor in new table with the first list
Processing identical mode when being operated, template will continue to be simply moved to the right.
It is noted that due to the borderline region of the template around output pixel position, in the data of the first list 804 and
It is overlapping to there are some between the data of two lists 805.Overlapping number can be resend twice simply by list generator
According to overlapping to handle.In the implementation of replacement, in order to which next list is fed into template processor, list generator can be after
It is continuous that new data is only sent to template processor, and template processor reuses the overlapped data from list before.
B. the design and operation of template processor
Fig. 9 a show the embodiment of template processor unit structure 900.Such as included from Fig. 9 a, template processor
Data Computation Unit 901, scalar processor 902 and the memory 903 and I/O units 904 associated.Data Computation Unit 901
Include array, two-dimensional shift array structure 906 and the difference associated with the specified row or column of array for performing passage 905
Corresponding random access memory 907.
I/O units 904 are responsible for " input " list of the data received from list generator being loaded into Data Computation Unit
901, and " output " list of the data of self-template processor in future is stored into list generator.In embodiment, by table
Forms data, which is loaded into, needs the row/column that the list of reception is resolved to view data in Data Computation Unit 901, and by image
The row/column of data is loaded into two-dimensional shift register structure 906 or performs the corresponding arbitrary access of the row/column of channel array
(being described more particularly below) in memory 907.If list is initially loaded in memory 907, passage is being performed
Single execution passage in array 905 then can be appropriate (for example, when loading is instructed only in the data in list
Before operation) when be loaded onto from random access memory 907 by form data in two-dimensional shift register structure 906.When complete
Into the list of data being loaded into register architecture 906 (either directly from list generator still from memory 907)
When, the execution passage for performing channel array 905 is operated in data, and the data most completed at last are straight as list
Connect " writing back " and arrive list generator, or " writing back " into random access memory 907.If perform passage to write back at random
Memory 907 is accessed, I/O units 904 take out data from random access memory 907, are then forward it to be formed
The output list of list generator.
Scalar processor 902 includes cyclelog 909, and the cyclelog reads template from scalar memory 903
The instruction of the program code of processor, and the execution passage for being published to and performing in channel array 905 will be instructed.In embodiment,
Single identical instruction is broadcast to all execution passages in array 905, to influence to come from Data Computation Unit 901
Class single-instruction multiple-data (SIMD) behavior.In embodiment, read from scalar memory 903 and be published to execution passage battle array
The instruction format of the instruction of the execution passage of row 905 includes very long coding line (VLIW) type format, and the form each refers to
Order includes more than one command code.In other embodiments, VLIW forms are both comprising ALU operation code and storage operation code (pipe
Both manage the storage operation that array or one group of execution array are performed for specifying), the ALU operation code management is by each holding
(it is as described below, and more than one conventional ALU behaviour can be specified in embodiment for the mathematical function that the ALU of row of channels is carried out
Make).
The group that term " execution passage " refers to be able to carry out one or more execution units of instruction is (for example, can perform
The logic circuit of instruction).But in various embodiments, execution passage can include more in addition to only execution unit
The function of class processor.For example, except one or more execution units, the instruction that decoding receives can also be included by performing passage
Logic circuit, or in the case of the design of multiple class multiple-instruction multiple-datas (MIMD), include to take out and conciliate code instruction
Logic circuit.On class MIMD method, although centralized program control method is described in large quantities herein,
More distributed method can be in various alternative embodiments (for example, the journey in each execution passage included in array 905
Sequence code and cyclelog) in realize.
Perform channel array 905, cyclelog 909 and two-dimensional shift register structure 906 are combined as wide scope
Programmable functions, which provide, can widely be adapted to/hardware platform that can configure.For example, in applied software development person can program
Core, the kernel have the ability and size (for example, template size) of the different functionalities of wide scope, it is contemplated that individually hold
Row of channels can carry out various functions and can be easily to the input picture number close to any output array position
According to entering line access.
In addition to the data storage as the view data operated by performing channel array 905, arbitrary access is deposited
Reservoir 907 can also keep one or more look-up tables, such as virtually processing memory (as described in Section 1.0 above)
Any look-up table preserved in look-up table component.In various embodiments, one or more scalar look-up tables can also be in scalar
Instantiated in memory 903.One or more scalar look-up tables can be held in memory model (such as Section of 1.0 institute above
State) scalar look-up table component in any scalar look-up table.
It is logical to performing that scalar look-up table is related to the transmission identical data value from the identical look-up table from same index
Each execution passage in channel array 905.In various embodiments, above-mentioned VLIW instruction form is extended to also comprising mark
Measure command code, the search operation that the scalar operations code management is carried out by scalar processor.Specify the index used with command code
It can be operand, or taken out from some other data storage positions at once.Anyway, in embodiment, from scalar
The lookup in scalar look-up table in memory essentially relates to broadcast identical data value during the identical clock cycle
To all execution passages in execution channel array 905.The additional detail for using and operating about look-up table is below
Further provide for.
Fig. 9 b summarize (one or more) VLIW instruction word embodiment discussed above.From Fig. 9 b, VLIW instruction
Word format includes the field of the instruction of three difference：1) scalar instruction 951 performed by scalar processor；2) by execution passage
The ALU instruction 952 that corresponding ALU in array is broadcasted and performed in a manner of SIMD；And 3) broadcasted in a manner of the SIMD of part
With the memory instructions 953 of execution (if for example, perform in channel array along the execution channels share identical mutually gone together with
Machine accesses memory, then from each execution passage actual execute instruction (lattice for memory instructions 953 do not gone together
Formula can include operand, which execution passage execute instruction of the operand identification from each row)).
Also the field 954 for being used for one or more operands at once is included.Can be identified in instruction format instruction 951,
952nd, which of 953 which operand information at once used.Each instruction 951,952,953 also includes their own
Corresponding input operand and object information (for example, the local register for ALU operations, and refer to for memory access
The local register and memory address of order).In embodiment, other two are performed performing the execution passage in channel array
Before 952,953 one of both of individual instruction, scalar instruction 951 is performed by scalar processor.In other words, the execution bag of VLIW words
Containing perform scalar instruction 951 period 1, followed by can perform it is other instruction 952,953 second round (pay attention to,
In various embodiments, instruction 952 and 953 can be performed in parallel).
In embodiment, the scalar instruction that is performed by scalar processor 902 includes and is published on list generator 703
Order, for loading/storage list from memory either the 2D shift registers 906 of Data Computation Unit 901 or add
In the 2D shift registers 906 of load/storage list to memory or Data Computation Unit 901.Here, list generator
Operation can depend on the operation of line buffer cell 701 or other variables, and the variable prevents so that list generator 703 is used
The understanding of the prerun time of the number in the cycle required for any order of the issue of scalar processor 902 is completed.Such as
This, in embodiment, (its scalar instruction 951 corresponds to list generator 703 to any VLIW words, otherwise make it that order is sent out
It is distributed in list generator 703) it is also contained in being instructed without operation (NOOP) in other two instruction fields 952,953.Program generation
The circulation that code instructs subsequently into the NOOP of instruction field 952,953, complete it until list generator and be loaded into data calculating
Unit/from the storage of Data Computation Unit.Here, when that will issue order to list generator, scalar processor can work as
Complete the position of interlock register for setting list generator to reset during order.During NOOP is circulated, scalar processor monitoring
The position of mutual lock-bit.When scalar processor detects that list generator has completed its order, normal perform starts again at.
Figure 10 shows the embodiment of Data Computation Unit 1001.As seen from Figure 10, Data Computation Unit 1001 is included and held
The array of row of channels 1005, the top of two-dimensional shift register array structure 1006 is located on the execution channel logic.As above institute
State, in various embodiments, the view data provided by list generator is loaded into two-dimensional shift register 1006
In.Then passage is performed to be operated on the form data from register architecture 1006.
Perform channel array 1005 and shift register structure 1006 is fixed with position relative to each other.But shift
Data in register array 1006 are shifted in a manner of strategic and coordinate, every in channel array is performed to cause
The individual different templates for performing passage and going in processing data.In this way, passage is each performed in caused output list, for difference
Pixel output image values are determined.It is noted that being hung down because performing channel array 1005 and including from Figure 10 framework
Straight adjacent execution passage and horizontally adjacent execution passage, are not only vertically arranged and flatly arrange overlapping
Template.
Some significant architectural features of Data Computation Unit 1001 are included with more broader than performing channel array 1005
The shift register structure 1006 of size.In other words, " the light that register 1009 outside channel array 1005 be present is being performed
Ring ".Although the ring of light 1009 is illustrated as being present in the both sides for performing channel array, implementation is depended on, the ring of light can be deposited
It is to perform on less (one) of channel array 1005 or more the side of (three or four).The ring of light 1005 is to for data
" spilling " space is provided, the data perform passage 1005 " lower section " as the data are displaced to and spill into execution channel array
Outside 1005 border.As a simple situation, in the leftmost pixel of processing template, to perform channel array
Four ring of light register positions of 5 × 5 templates by needs more to the right centered on 1005 right hand edge.For the ease of drawing,
In a nominal embodiment, when the register on either side (right side, bottom side) will have horizontal and vertical connection concurrently
When, the register on the right side of the ring of light is shown as only there is horizontal shift to connect by Figure 10, and the register on the left of the ring of light is shown
Only to have vertical movement connection.
Additional overflow space is provided by random access memory 1007, and the random access memory 1007 is coupled in
Each row in an array and/or each row or part thereof (for example, random access memory can be assigned on line direction across
Cross 4 and perform passages and column direction across " regions " of the execution channel array of 2 execution passages).For simplicity, should
Remainder is by Primary Reference based on row and/or the allocative decision arranged).Here, if performing the kernel operation of passage needs
It is wanted to handle pixel value (some image procossing routines may need) outside two-dimensional shift register array 1006, image
The plane of data can further overflow, for example, from ring of light region 1009 into random access memory 1007.For example, examine
Consider 6X6 templates, wherein hardware is included on the right hand edge for performing channel array and is only performing four on the right of passage storage members
The ring of light region of part.In this case, data will need further to be displaced to the right side of the right hand edge of the ring of light 1009, use
With complete processing template.Then, the data shifted outside ring of light region 1009 will spill into random access memory 1007.
The other application of random access memory 1007 and Fig. 3 template processor further provide for below.
Figure 11 a to 11k illustrate a kind of Working Examples of mode, and view data is performing as described above in which
It is shifted in the two-dimensional shift register array of channel array " following ".From Figure 11 a, in the data of two-dimensional shift array
Appearance is described in the first array 1107, and performs channel array and described by frame 1105.In addition, perform two in channel array
Individual adjacent execution passage 1110 is simply described.In the description 1110 of the simplification, each passage that performs includes register
R1, the register can receive data from shift register, receive data (for example, being shown as on the cycle from ALU outputs
Accumulator), or output data is written in output destination.
It is each perform passage also have in local register R2 in two-dimensional shift array the execution route " under
The content of side ".Therefore, R1 is the physical register for performing passage, and R2 is the physics deposit of two-dimensional shift register array
Device.Perform passage and include the ALU that can be operated on by the operand of R1 and/or R2 offers.Such as will be further below
It is more fully described, in embodiment, shift register is actually with multiple (" depth ") storages of each array position
Device/register element realizes, but shift action be limited to storage element plane (for example, storage element only
One plane can shift in each cycle).Figure 11 a to 11k depict one in these deeper register positions
It is used for storage from the corresponding result X for performing passage.For the ease of illustrating, deeper result register is plotted in side
Side rather than its pairing register R2 lower section.
Figure 11 a to 11k focus on the calculating of two templates, and the center of the template is with performing in channel array 1105
A pair described perform channel position 1111 and aligned.For convenience of description, when according to the example below, it is actually vertical phase
When adjacent, this is plotted as to execution passage 1110 horizontally adjacent.
Such as initial finding in fig. 11 a, passage 1111 is performed centered on its center template position.Figure 11 b are shown by two
The individual object code for performing passage 1111 and performing.From Figure 11 b, the program code of two execution passages 1111 to shift
Data in register array 1107 shift downwards one position in a position and right shift.This performs passage by two
The upper left corner alignment of 1111 its corresponding moulds.Then, then program code causes in its corresponding position (in R2)
Data be loaded into R1.
From Figure 11 c, next program code make it that a pair of execution passages 1111 will be in shift register array 1107
Interior one unit of data shifted left, this causes the value on the right side of the corresponding position of each execution passage to be displaced to often
The individual position for performing passage.Value (value before) in R1 and then the position with being moved into execution passage (in R2)
New value be added.As a result it is written into R1.From Figure 11 d, repeat to handle with above-mentioned Figure 11 c identicals that are used for, it to tie
Fruit R1 is included in the value A+B+C performed in passage and the F+G+H in the execution passage of bottom on top now.At this
On point, the row that passage 1111 has been processed by the top of its corresponding template is performed.Pay attention to being spilled over to and perform channel array 1105
Left side ring of light region in (if left-hand side exist one), or if ring of light region is performing channel array 1105
Left-hand side be not present, then be spilled in random access memory.
From Figure 11 e, then program code causes one unit of data upward displacement in shift register array,
It causes the right hand edge of the center row of two execution 1111 its corresponding templates of passage to align.Two execution passages 1111
Register R1 at present comprising template top row and center row rightmost value summation.Figure 11 f and 11g are illustrated to the left
Across the continuous processing that the center row for the template that two perform passage moves.Accumulate addition to continue, so as to Figure 11 g's
At the end of processing, two perform top row and the summation of the value of center row that passage 1111 includes its corresponding template.
Figure 11 h show another displacement, and the most descending of template corresponding with its of each execution passage is aligned.
Figure 11 i and 11j show continuous displacement, are handled with performing completion in the processing of the template of passage at two.Figure 11 k are shown
Additional displacement, each execution passage is aligned and write the result into its correct position in a data array
Its.
In Figure 11 a-11k example, it is noted that the object identification code of shifting function can include instruction format, the instruction lattice
The direction for the displacement that formula identification is expressed in (X, Y) coordinate and amplitude.For example, the object identification code of one position of upward displacement can
To be expressed as SHIFT 0 ,+1 in object identification code.Such as another example, one position of right shift can be in object identification code
It is expressed as SHIFT+1,0.In various embodiments, displacement by a larger margin can also be specified in object identification code (for example,
SHIFT 0 ,+2).Here, if two-dimensional shift register only supports each cycle to shift a position, instruction can pass through machine
Understand to require that multiple cycles perform, or, two-dimensional shift register hardware can be designed as supporting the more than one position of each cycle
The displacement put.Subsequent embodiment is being more fully described further below.
Figure 12 shows the description of another more details of the cell that passage and shift register structure are performed to array
(register in ring of light region does not include corresponding execution passage).It is associated with each position in channel array is performed
Perform passage and register space in embodiment by instantiating the visible each section for performing channel array in fig. 12
Circuit at point is realized.As seen from Figure 12, cell includes the register text for being coupled in and being made up of four register R2 to R5
The execution passage 1201 of part.During any cycle, read in any one that execution passage 1201 can be from register R1 to R5
Take, or write-in register R1 to R5 any one.Due to instruction need two input operands, perform passage can from appoint
The two operands are fetched in what R1 to R5.
In embodiment, two-dimensional shift register structure is accomplished by the following way：Allow to deposit during single cycle
The content of any (only) one in device R2 to R4 is shifted " going out " to its adjacent register text by output multiplexer 1203
One of part, also, if its adjacent register is then moved by input multiplexer 1204 with from a corresponding register
The content of position " entering " replaces the content of any (only) one in register R2 to R4 so that between adjunct register
Shift as identical direction (for example, all execution passage shifted lefts, all execution passage right shifts etc.).Although for
Identical register so that its content remove or the content by being shifted in same period replace be probably it is universal, still
During the identical cycle, multiplexer arrange 1203,1204 allow different displacement source in identical register file and
Shifted target register.
As shown in figure 12, it is noted that during shift sequence, performing passage will be from its register file 1202 by
Hold be moved to its left side, the right, bottom and upper segment neighbour each.With reference to identical shift sequence, perform passage and also will
Content from its left side, the right, bottom and upper segment neighbour in specific one move into its register file.Again, remove
Target and immigration source should be made up of (if for example, it is to the adjacent right side to remove the identical direction of displacement of all execution passages
Side, immigration should be from adjacent left-hand).
Although in one embodiment, each cycle each perform passage only have the content of a register be allowed into
Row displacement, other embodiments can allow the content of more than one register be shifted into/be shifted out.If for example, in Figure 12
Second example of visible multiplexer circuit 1203,1204 is incorporated into Figure 12 design, during same period, two
The content of register can shift into/be shifted out.Certainly, in embodiment, wherein each cycle only has the interior of register
Appearance is allowed to shift, and being shifted from multiple registers can be occurred by consuming more clock cycle between mathematical operations,
For being shifted between mathematical operations (for example, the content of two registers can be by consuming between mathematical operations (ops)
Two shifting functions shifted between mathematical operations).
It is moved out of if fewer than all the elements for the register file for performing passage during shift sequence, it is noted that every
The individual content for not moving out register for performing passage is kept (not shifting) in situ.In this way, do not replaced with the content being moved into
Any content not shifted adheres to performing the local of passage on shift cycle.It is visible in each execution passage to deposit
Storage unit (" M ") be used to load data from RAM space or store data into random access memory
Device space, the RAM space are associated with the row and/or row that perform the execution passage in channel array.Here,
M units are used as standard M units because its be frequently utilized for loading/storage can not from perform passage the register space of oneself
The data of loading/storage.In various embodiments, the primary operational of M units is that data are written into storage from local register
In device, and from memory read data and it is written into local register.
On the ISA operation code of the ALU units support by hardware execution paths 1201, in various embodiments, by hardware
Mathematical operations code that mathematical operations code and the virtual execution passage that ALU is supported are supported (such as ADD, SUB, MOV, MUL, MAD,
ABS, DIV, SHL, SHR, MIN/MAX, SEL, AND, OR, XOR, NOT) be integrally attached to (for example, substantially with its phase
Together).As described above, memory access instruction can be performed by performing passage 1201, associated random to be deposited from its
Access to memory takes out/store data.In addition, hardware execution paths 1201 support shifting function instruction (right, left, upper and lower), with
Shift the data in two-dimensional shift register structure.As described above, program control instruction is largely by template processor
Scalar processor performs.
3.0 blocks operations realized on image processor
A. the sum operation of row/column
Figure 13 and Figure 14 a, b are related to the sum operation of row/column.Row/and row operation for statistics calculate, noise suppressed and
Large-scale down-sampling is particularly useful.Channel array and corresponding two-dimensional shift register array can be being performed with two dimension
Image processor on realize the operation of row summation and/or row summation, at the image described in all parts as mentioned above
Manage the embodiment of device.
As seen from Figure 13, all values in same a line of array are added by the operation of row summation, arrange the operation of summation by battle array
All values in the same row of row are added.In addition, as illustrated, the operation summed by row, the value of all rows can be in its phase
In the row answered while it is added.Similarly, by arranging the operation of summation, the values of all row can in its corresponding row same phase
Add.But because the versatility of shift register array, it is not necessary to which all row or columns are summed.In other words, can be with
To being summed all or fewer than row in array simultaneously, or can be to being summed all or fewer than row in array simultaneously.
Figure 14 a to 14d show the embodiment of the machine level operations of the operation for realizing row sum.For simplicity,
It illustrate only single row.It will be appreciate that the operation shown in Figure 14 a to 14d can also be applied to row.In addition, for row
Or the operation of both row, Figure 14 a to 14d sequence can also perform simultaneously to multiple row or columns in array.In addition,
Capable size is only illustrated as that 8 positions are wide (and in actual implementation, to be performed channel array and shift register array can
To be 16 × 16 or even more big).
In implementation, from Figure 14 a, two-dimensional shift register array is designed to support in array 1401
It is relative it is extreme between direct loic displacement.In other words, when entering the displacement of row along row axle, shift register can be most
" rolling " or " circulation " or " parcel " its content between the row of the row of the array on the right and leftmost array, and/or when edge row
Axle carry out displacement when, the array of the top row and bottom array row between roll or circulate its content.This
Outside, in various embodiments, shift register can support the position of multiple registers in single instruction jump (for example,
The command code associated with shift instruction and/or variable specify shift amount whether be along horizontal and/or vertical axis +/- 1,
+/- 2, +/- 3 or +/- 4 register position).The translocation distance do not supported in hardware can be simulated by compiler.
From Figure 14 a, initially, the data value in the corresponding R0 and R1 register positions of each execution passage
A0 to A7 loading rows.From Figure 14 b, in the first time iteration of machine operation, the locus of R1 registers and then to the left
A position is shifted, and R1 and the R0 content for each performing passage are summed, and wherein result is written back to R0 and R1.This production
The sum of the part of raw the first accumulation in R1, such as will in the following discussion will be clearer, as generally sum operation
Accumulator.
In the next iteration of machine operation, as shown in figure 14 c, the locus shifted left of R1 registers two
Position, and R1 the and R0 contents for each performing passage are summed.As a result it is stored in again in R0 and R1.Finally, in machine
In the third time iteration of operation, as shown in Figure 14 d, four positions of locus shifted left of R1 registers, and result quilt
Write one or two in register position R0 and R1.Therefore, changing referring to the sum operation in Figure 14 b, 14c and Figure 14 d
Generation, it is noted that shift amount doubles with each iteration, and only after iteration three times, complete result is presented in all logical
In road (i.e. as shown in figure 14 c).In the case of 16 line width, for the 4th iteration, shift amount will be eight positions, and
It will complete to operate after the 4th iteration.
A. the sum operation of row/column prefix
Figure 15 and Figure 16 a to 16d are related to the sum operation of row/column prefix, and the sum operation can also be held with two dimension
Performed on row of channels array and the image processor of corresponding two-dimensional shift register.The sum operation of row/column prefix is for complete
Whole image, accelerate box filter and particularly useful for the calculating of the address of squeeze operation.Referring to Figure 15, for simplification
For the sake of, it illustrate only single row.But it is also possible to row are operated.In addition, although there was only a line quilt in various implementations
Show, but as the sum operation of row/column discussed above, any number in register array (including all row/columns)
The row (or row) of amount can be summed simultaneously.In addition, to be only illustrated as 8 positions wide for the size of row in fig.15, and
In actual implementation, it can be 16 × 16 or even more big to perform passage and shift register array.
As seen from Figure 15, the result of the operation of the row prefix of any position in row is the summation for the value for leading to the position.
Similarly, the value of the operation of the row prefix of any position in row is the summation for the value for leading to the position.
Figure 16 a to 16d show the embodiment of the machine level operations for row prefix operation.With in preceding sections in detail
The sum operation of the row carefully discussed is the same, row prefix operate with can between array edges position 1601 barrel shift
Two-dimensional shift register.
From Figure 16 a, the data value A0 to A7 in the corresponding R0 register positions of each execution passage is initial
Ground loading row.In addition, null value (" 0 ") is loaded into the R2 register spaces of each execution passage.
In the first time iteration of machine level operations, as shown in fig 16b, R0 register spaces position right shift one
Individual position, into the R1 register spaces of destination locations.Position of the follow-up ADD operation according to passage relative to iteration count
Put, R0 contents are added with perhaps R2 contents in R1.Specifically, null value of the position selection of the first row in R2 (is not
Content is shifted in R1) because its position (0) is equal to or less than 2N- 1, wherein N are iteration counts (20- 1=0), null value is added to
Content in R0, and result is stored back in R0.The position of the first row, thus by keep R0 in A0 value.
By contrast, because its position is more than 2N- 1, each in the position of other rows will be selected in displacement in R1
Hold (rather than null value in R2), the content being added into R0, and result is stored in R0.Therefore, except the first row
The summation of its original contents and its Far Left adjacent position is maintained in R0 by the position of each row outside position, and first
Capable position will simply just keep its original contents in R0.
In second of iteration of machine level operations, as shown in figure 16 c, the content of R0 register spaces position is to the right
Two positions are shifted, into the R1 register spaces of destination.Therefore, as the operation of the row/column described at once more than,
With each next iteration that machine operates, shift amount doubles.As first time iteration, follow-up ADD operation is according to logical
R0 contents are added by road relative to the position of present iteration count with perhaps R2 contents in R1.In this case, because
Its position (0,1) is less than or equal to 2N-1(21- 1=1), it (is not R1 that the position of the first and second rows, which selects the null value in R2,
In displacement content).Therefore content that these passages add to the value of null value in R0, and result is stored back in R0.First
Capable position is therefore by the A0 maintained in R0 its value, and the A0+A1 value that the position of the second row will be maintained in R0.
By contrast, because its position is more than 2N- 1, each in the position of other rows will be selected in displacement in R1
Hold (rather than null value in R2), content R1 content being added in R0, and result is stored in R0.Therefore, except
The position of each row outside the position of first and second rows will be based on its original contents with its in the content total displacement in R0
Keep accumulation summation.
In the third time iteration of machine level operations, as shown in figure 16d, R0 register spaces position right shift four
Individual position, into the R1 register spaces of destination.Therefore, again, with each next iteration that machine operates, displacement
Amount doubles.As iteration earlier, position of the follow-up ADD operation according to passage relative to present iteration count, by R0
Content is added with perhaps R2 contents in R1.In this case, because its position is less than or equal to 2N-1(22- 1=3), first
The null value (being not the displacement content in R1) that will be selected to the position (0 to 3) of fourth line in R2.It is each in these passages
Content that the is individual therefore value of null value will being added in R0, and result is stored back in R0.The position of the first row, therefore will dimension
Hold its original value of the A0 in R0, by the A0+A1 maintained in R0 value, the position of the third line will maintain R0 for the position of the second row
In A0+A1+A2 value, and the position of fourth line by maintain R0 in A0+A1+A2+A3 value.
By contrast, because its position is remained above 2N- 1, each in the position of other rows will select shifting in R1
Position content (rather than null value in R2), content R1 content being added in R0, and result is stored in R0.Therefore,
It is total in the content with it that the position of each row in addition to the position of first, second, and third row will be based on its original contents
Displacement keeps accumulation summation.
After third time iteration, the sum operation of prefix is completed.If the size of row is 16, it is only necessary to deposits R1
The content of device shifts more one group of operation of eight positions, by institute of the summation unique cumulative in passage is performed at 16
There are 16 different positions.
C. row/column searches the operation of minimum value
Figure 17 and Figure 18 a to 18d are related to the operation that row/column searches minimum value, and the operation can also perform with two dimension
Performed on channel array and the image processor of corresponding two-dimensional shift register.Row/column searches the operation of minimum value for system
Meter calculates and the post processing of block matching is particularly useful.
Referring to Figure 17, for simplicity, single row illustrate only.But in the implementation of reality, row is searched most
Small Value Operations can be realized realizing row to search on the identical processor of minimum Value Operations.Furthermore, it is possible to for register battle array
Any number of row (or row) (comprising until all row/columns) while the minimum value of row (or row) is searched in row.In addition, row/column
Size to be only illustrated as 8 positions wide, and in actual implementation, it can be 16 to perform passage and shift register array
× 16 or even more big.
As seen from Figure 17, the result of the minimum Value Operations of row lookup corresponds among all values in identical row most
Small value, and its location/position (also referred to as its index) in being expert at.Similarly, row search the result of minimum Value Operations
Corresponding to the minimum value among all values in being arranged in identical, and its location/position in row.With preceding sections
In the row that is discussed in detail and as the operation of prefix, row/column searches minimum Value Operations using can be in array edges position
The use of the two-dimensional shift register of barrel shift between 1701.
Figure 18 a to 18d show the embodiment of the machine level operations for row prefix operation.Initially, can by Figure 18 a
See, row is loaded with the data value A0 to A7 in the corresponding R0 register positions of each execution passage.In addition, the position of each row
The index put is loaded into the R1 register spaces of each execution passage.
In the first time iteration of machine level operations, it describes in Figure 18 b, the content of R0 and R1 register positions
A unit is shifted into R2 the and R3 register spaces of the register space of adjacent execution passage.Then held each
Compare the corresponding value of R0 and R2 registers in row of channels.Index corresponding to the minimum value compared and its is stored into R0 and R1
In register space.In other words, if R0 value is less than R2 value, R0 and R1 registers maintain its original contents.And if R2
Value be less than R0 value, R2 value is written into R0 and R3 value is written into R1.This has the minimum for keeping comparing in R0
Value and the influence that index is kept in R1.
In second of iteration of machine level operations, it describes in Figure 18 c, the content of R0 and R1 register positions
Two units are shifted into R2 the and R3 register spaces of the execution passage in downstream.Therefore, again, shift amount is with next
Secondary iteration doubles.Then the corresponding value of R0 and R2 registers is compared in each execution passage.By the minimum value compared and its
Corresponding index is stored into R0 and R1 register spaces.This has two will carried out from each execution passage
Compare the minimum value observed and be maintained in R0 and indexed the influence being maintained in R1.
It is visible in Figure 18 d in the third time iteration of machine level operations, the content quilt of R0 and R1 register positions
Four units are shifted into R2 the and R3 register spaces of the execution passage in downstream.Then R0 is compared in each execution passage
With the corresponding value of R2 registers.Index corresponding to the minimum value compared and its is stored into R0 and R1 register spaces.This
With by from it is each execution passage in carried out all three relatively in observe minimum value be maintained in R0 and
Indexed the influence being maintained in R1.
After third time iteration, search minimum Value Operations and complete, there will be its R0 register empty because each performing passage
Between in the minimum value index corresponding with its in its R1 register space of full line (position of the initial row for providing minimum value will
The position of the row of oneself is searched in its R1 register space).If the size of row is 16, would only need to be based on by R0 and
The content of R1 registers downstream shifts more one group of operation of eight positions in a shift register, to provide all ten
Six minimum values for performing all 16 diverse locations in passage.
Pay attention to, searching maxima operation can also be realized using above-mentioned identical principle, be wrapped except core mathematics operates
The maximum containing lookup is without being to look for minimum value.
D. matrix multiplication
Figure 19 a, b and 20 are related to matrix multiplication.To discrete fourier or cosine transform, (it is compression and filter to matrix multiplication
Conventional primitive in ripple) and the bigger matrix of expression/multiplication operation (it is usually used in image recognition) it is particularly useful.Two
Matrix A and B matrix multiplication are by the position for each matrix coordinate in the result by the member in the row of coordinate position
The summation of the product of element and their corresponding elements in the row of coordinate position is carried out.Figure 19 b are shown for figure
Matrix A in 19a and the matrix X obtained by B matrix multiplication.Here, particularly illustrate two in obtained Matrix C
The matrix A of coordinate position 1901, the 1902 partial product item related to B's.
Especially, for example, product obtained by coordinate position c12 in Matrix C obtained by Figure 19 b：
(a11*b11)+(a12*b21)+(a13*b31)+(a14*b41)
The element of its row 1901 corresponded in matrix A and the corresponding member of the row 1902 in the matrix B in Figure 19 a
Element is multiplied.
Similarly, the product obtained by the coordinate position c22 in the Matrix C obtained by Figure 19 b：
(a21*b12)+(a22*b22)+(a23*b32)+(a24*b42)
The element of its row 1903 corresponded in matrix A and the corresponding member of the row 1902 in the matrix B in Figure 19 a
Element is multiplied.It can be expressed as from the result of arbitrary coordinate position x, y in the two examples, obtained Matrix C：
∑K=1to4(aX, k)*(bK, y).
Figure 20 a to 20e show that the matrix multiplication operation that channel array is performed using two dimension is posted with corresponding two-dimensional shift
The embodiment of unique displacement advantage of storage array.
From Figure 20 a, initially, two matrix As and B are loaded into two-dimensional shift register array.For example, matrix A
Value can be loaded into the R0 register spaces of two-dimensional shift register, and the value of matrix B can be loaded into two dimension
In the R1 register spaces of shift register array so that each matrix coordinate corresponds to and is associated from different execution passages
Register space.Again, it is simple in order to what is illustrated, 4 × 4 matrixes are depicted, although square bigger in actual implementation
Battle array can be multiplied with corresponding larger sized shift register array.
From Figure 20 b, the displacement of rotational shear algorithm is applied to two matrixes, wherein rotational shear algorithm moves line by line
Bit sequence is applied to matrix A, and rotational shear algorithm shift sequence is applied to matrix B by column.Such as it is known in the art
, shift amount is increased N-1 by rotational shear algorithm, and wherein N is the position in matrix.
Therefore, do not shifted completely from Figure 20 b, the first row of matrix A, the second row of matrix A is shifted a list
Member, the third line of matrix A are shifted two units, and the fourth line of matrix A is shifted three units.Similarly, the of matrix B
One row do not shift completely, and the secondary series of matrix B is shifted a unit, and the 3rd row of matrix B are shifted two units, square
Battle array B the 4th row are shifted three units.Here, two-dimensional shift register array be understood to for towards capable displacement and
Both displacements towards row can at array edges rollover elements.
It is noted that due to two-dimensional shift register array and the corresponding universal property for performing channel array, wherein passing through
Each corresponding shift instruction for performing passage execution can specify the data of different input operands, two-dimensional shift deposit
Device array can shift different rows different horizontal shift amounts, and different row are shifted into different vertical displacements
Amount, meanwhile, perform shift instruction (in various embodiments, it is necessary to be simultaneously on all execution passages of identical array
Passage in mutually going together specifies the horizontal amount of movement of identical, and the passage being necessary in mutually going together specifies identical vertical
Amount of movement).It is therefore contemplated that the shearing on both ground, A and B matrixes can complete (that is, one in only two cycles
All displacements of individual matrix are carried out in one cycle, it is assumed that shift register can realize multi-hop in the single cycle
Displacement).
Rearranged by the data in matrix A and B from shearing algorithm, from Figure 20 b, carry out multiplication operation, its
In each passage that performs the A in the space of its corresponding two-dimensional shift register is multiplied with B value.Here, review to,
For example, A values are maintained in R0 spaces and B values are maintained in R1 spaces.The result of multiplication stores in local R2 spaces.It is empty
The value of value can be loaded onto in R3 spaces as initial condition, and the result of the multiplication in R2 is added to R3 content.Will
The result of summation is stored back in R3.It is evident that, R3 assume responsibility for the role of accumulator in following teaching, and this is tired
Add device to accumulate partial product item in the processing of matrix multiplication operation to sum.
In order to make it easy to understand, Figure 20 b explicitly show the seat in the obtained Matrix C described originally in Figure 19 b
After cursor position c11 and c22 the first iteration, the content in obtained R3 spaces.Here, in Figure 20 b first time iteration
Afterwards, partial product item a11*b11, and the R3 registers at the C22 of position are contained in the R3 register spaces of C11 opening positions
Contain partial product item (a21 * b12) in space.
From Figure 20 c, in next iteration, the R0 registers and then horizontal shift of the data containing matrix A one
Individual unit, and one unit of the R1 register vertical movements of the data containing matrix B.Then repeat as retouched just above
The mathematical operations on Figure 20 b stated.But here, portion of the R3 register spaces of each passage initially containing the first iteration
Divide product term (for example, a11*b11 in the position c11 R3 and a21*b12 in position c22 R3).In this way, repeatedly
At the end of generation, register R3 sums the accumulation containing two partial products calculated at present.In other words, in position
R3 in c11 will have summation (a11*b11)+(a12*b21), and the R3 in the c22 of position will have summation (a21*
b12)+(a22*b22)。
From Figure 20 d and 20e, shift two again of the single unit to two matrixes after then multiply-add
After iteration, matrix multiplication will be complete, wherein the position of each register array has in its local R3 register space
The correct summation of partial product.
E. two dimensional discrete Fourier transform (2D DFT)
Figure 21 depicts two-dimentional DFT (2D DFT).2D DFT are to reducing noise and accelerating convolution highly useful.By Figure 21
It can be seen that 2D DFT can be expressed as the two-dimensional space summation to the product of two compound term 2101,2102.First compound term
2101 correspond to the phasor that its amplitude and phase are the functions of time and frequency.In implementation, the quilt of the first compound term 2102
Clearly it is calculated as the first matrix of coefficient.Second compound term 2102 corresponds to from the signal that space field transformation is frequency domain.
For simplicity, the first compound term 2101 is expressed as Re1+jIm1 by Figure 21, and by the table of the second compound term 2102
It is shown as Re2+jIm2.As being known in the art, (Re1+jIm1) * (Re2+jIm2) real part can be expressed as (Re1*
Re2)-(Im1*Im2), and imaginary part can be expressed as j ((Re1*Im2)+(Re2*Im1)).In asking for the 2D DFT of 2D spatially
With it is as matrix multiplication just discussed in detail above, the element in the row of coordinate position is corresponding with the row of coordinate position
Element product addition.
Therefore, the real part of DFT results can be calculated in the following manner：Carry out the array and Re2 values in Re1 values
Array on matrix multiplication, and subtract from obtained array the enterprising row matrix multiplication of array in Im1 values and Im2 values
Result.Similarly, the imaginary part of DFT results can be calculated in the following manner：In the array and the battle array of Im2 values of Re1 values
Enterprising row matrix multiplication is arranged, and obtained array is added to the knot in the enterprising row matrix multiplication of array of Re2 values and Im1 values
Fruit.
Figure 22 a show the machine operation of the real part for calculating DFT.From Figure 22 a, the array of Re1 values is loaded
Into the R0 register spaces of two-dimensional shift register array, the array of Re2 values is loaded into two-dimensional shift register array
In R1 register spaces, the array of Im1 values is loaded into the R2 register spaces of two-dimensional shift register array, and Im2
The array of value is loaded into the R3 register spaces of two-dimensional shift register array.From Figure 22 b, then rotation is cut
Cut algorithm and be applied to each array of values, wherein Re1 and Im1 values are by horizontal shear and Re2 and Im2 values are by vertical shear.
From Figure 22 c, Re1*Re2 matrix multiplication and Im1*Im2 matrix multiplication are then carried out, its result is corresponding
Ground is maintained in R0 and R2 register spaces.Then the content of R2 register spaces is subtracted from R0 register spaces, subtraction
As a result the real part of the DFT conversion in R0 register spaces is left, from Figure 22 d.
In embodiment, the real part of the result in R0 register spaces is moved to R4 register spaces (if it is present)
Or it is written out to the local storage for being coupled in shift register array.Then, by original Re1 and Im1 values write back again R0 and
(for example, from identical local storage) and horizontal shear in R1 register space so that Figure 22 a content of registers exists
Rebuild in two-dimensional shift register array.
Then carry out Re1*Im2 matrix multiplication and Re2*Im1 matrix multiplication, its result be accordingly held in R0 and
In R2 register space.In other words, matrix multiplication is carried out to R0 and R3 content, as a result writes back to R0, also, to R2 and
R1 content carries out matrix multiplication, and content is write in R2.The matrix obtained in R0 and R2 is as shown in Figure 22 e.Then R0 is posted
The content in storage space is added to the content of R2 register spaces, and writes back to R0.This leaves in R0 register spaces
The imaginary part of DFT transform, as shown in Figure 22 f.
F.FFT butterfly operation
As being known in the art, Fast Fourier Transform (FFT) (FFT) be than DFT faster, the less side of computational intensity
Method.FFT depends on special effective algorithm, the data of time domain or spatial domain to be converted very quickly to the data of frequency domain.
The key components of such a algorithm are butterfly algorithms.Figure 23 shows exemplary butterfly algorithm.Here, butterfly operation by
Stage of exchange capacity that wherein moment determines to occur between the element of identical row or column defines.Such as in this area
Know, the enterprising line number of content for the exchange that the butterfly that complete FFT includes multiple different phases between being operated to butterfly operates
Learn operation.
Figure 23 shows the butterfly operation in the stage of each 1,2 and 4.In the case of the butterfly operation in 1 stage, exchange adjacent
Near element.In the case of the butterfly operation in 2 stages, neighbouring multipair element is exchanged.Operated in the butterfly in 4 stages
In the case of, exchange multigroup 4 neighbouring elements.In the case of Two-dimensional FFT, by the member in the first array of signal data
Each of element in multiple butterfly operational phases is handed over the element mathematical operations carried out on the signal data exchanged
Change.
Figure 24 a show the other shifting function of machine level, and the shifting function can be used for influenceing posting being stored in two-dimentional R0
1 butterfly operation in 1 stage on the array of the signal data in storage space.For simplicity, it illustrate only a line.
It is necessary to recognize, multiple (for example, all) row or columns of the array in two-dimensional shift register can simultaneously basis
It was observed that specific row handle.
Here, A0 is loaded with to A7 on each of the shift register initially row in its R0 register space.
Register each performs passage storage and is just moved into it then by one unit of content right shift of R0 registers
The data of its position in R1 register spaces.Then, shift register by the content shifted left of R0 registers two lists
First (its result is marked as R0 ').It is each to perform passage and then perform selection operation, wherein its local R0 content or its
The position that any one of local R1 content depends on passage is stored in R0 (if i.e., selection R0, R0 content is kept
It is constant).In Figure 24 a specific embodiment, the channel selecting R0 of even number, while the channel selecting R1 of odd number.After selection,
The value properly switched (is labeled as R0 ") in each R0 register spaces for performing passage.
Figure 24 b and Figure 24 c depict the butterfly operation in 2 stages and 4 stages.Processing and 1 stage butterfly described immediately above
Butterfly operation is similar, and in the case of being operated in 2 stage butterflies, shift register array moves right the content of R0 registers
The unit of position two and then four units of shifted left.Every an even-numbered channels and its rightmost side neighbour from one of R1 and R0 "
Middle selection, and the neighbour of the passage of other even numbers and its rightmost side selects from another R1 and R0 ".In the butterfly in 4 stages
In the case of operation, as shown in Figure 24 c, shift register array is by R0 four units of content right shift, then when it
All values are selected when being present in R0 (being labeled as R0 ').
G. block matches
Figure 25 shows the description to block matching.Block matching for dynamic prediction (for example, being used for video compress),
Image stabilization and Image Fusion (for example, exposure fusion and temporal noise fusion) are particularly useful.Here, substituting (example
Such as, afterwards the characteristic specified in first substrate (for example, before) image is found in image).In Figure 26 example
In, the block ABCD presented in substrate image needs to find in the image of replacement.
Figure 26 a to 26d, which are shown, is performing the image procossing of channel array and two-dimensional shift register array with two dimension
The method that block matching is carried out on device.Here, the pixel of the image substituted is maintained at the R0 registers of two-dimensional shift register
In space.The first pixel (for example, " A ") of characteristic in the substrate image found is broadcasted to all execution passages, and
Take absolute difference to the content in R0 register spaces and value " A ", and result be stored in R1 (for the sake of simplicity it is assumed that
There is no the value (A, B, C, D) that other pixels have any lookup characteristic in alternate image).If the pixel in alternate image
Value and the pixel value A of broadcast match (or substantially matching), and then the result in R1 should be (or close) zero.In R1
All other result should substantially be not zero.
A unit, the characteristic being look for are shifted with reference to figure 26b, alternate image and then in two-dimensional shift register
In next pixel value " B " be broadcast to all execution passages, and take absolute difference again, and be stored in R1.
This, the specific execution channel array 2601 with two coherent pixel matchings should be with the minimum knot in R1
Fruit value.The specific execution channel position is in the particular order for the pixel value broadcasted and the R0 of shift register array
Alternate image the position that aligns of specific scanning/shift movement.
From Figure 26 c and 26d, as each iteration next time broadcasts next pixel value and specifically to sweep
The data of sequential shifts alternate image are retouched, processing will continue.The image pixel of all searchings is fully broadcasted in multiple iteration,
And the replacement image in the R0 on the region corresponding to the size for the image found accordingly is shifted, it is desirable that
Matching will be undergone on each iteration cycle by performing an only position 2601 in channel array.In this way, having completed
After having iteration, the specific array position 2601 should be able to be maintained zero in its R1 register space or close to null value
(or value at least smaller than other execution passages).
Search and performed in the R1 register spaces on all rows of minimum Value Operations in an array as described above.So
Afterwards, minimum corresponding value will remain in each opening position of the row in often going.Then, minimum Value Operations are searched across array
In all row on R1 register spaces on perform.As a result should match being identified each time in iteration with substrate image
Pixel, it then can be used for identifying the exact position of image searched in substitute array.
The construction of 4.0 low level program codes
Figure 27 shows prerun development environment, and the wherein high level image processing function of programmers design and application is opened
Hair ring border (it can include the virtual ISA environment discussed in detail above on Fig. 1 to Fig. 6), the prerun development environment carries
Any/all above-mentioned special operation is supplied, so that from the beginning developer is without being written into.
Here, developer can clearly recall any operation discussed in detail above, and/or development environment is automatically
Response is provided them as from storehouse 2701.Either-or be combined with each other, and can imply that or derive developer to such
The demand (matrix multiplication such as in 2D DFT situations) of operation, and development environment is automatically from carrying out these functions
Program code (for example, part as process of compilation) is inserted in storehouse 2701.
Therefore, carry out aforesaid operations or alternate embodiment program code therein can higher level (for example,
Virtual ISA) program code or the other object identification code of lower level in express.In various embodiments, higher level is virtual
ISA code, which can specify, reads operated data value as the memory with x, y address coordinate, although object identification code can
With alternatively by these data accesses be interpreted as two-dimensional shift register operation (such as, above-mentioned arbitrary shifting function or
Example is similarly effected).X, y in development environment can be read and be transformed to corresponding to two-dimensional shift register by compiler
Displacement, the displacement of the two-dimensional shift register are the object identification code specified (for example, can be in object identification code with to moving to left
Position two spaces and downwards displacement two spaces have x, y-coordinate (+2 ,+2) reading to realize in development environment).According to ring
Border, developer can see the two ranks (or for example, there was only higher VISA ranks).Or in other embodiments
In, can operationally (for example, passing through instant compiler) rather than pre-write routine as calling during prerun.
5.0 conclusive statements
It is necessary to recognize from preceding sections, the above-mentioned void in Section 1.0 can be instantiated on the computer systems
Near-ring border.Similarly, (example is embodied in the hardware that the image processor as described in 2.0 sections more than can be on the computer systems
Such as, as processing the camera from hand-held device data hand-held device on-chip system (SOC) part).
It is necessary to note that the unnecessary image being limited on conventional meaning of the characteristic of above-mentioned various image processor architectures
Processing, therefore can apply to can (or cannot) other application for causing image processor to be characterized again.For example, such as
Fruit is handled on the contrary, the characteristic of any of the above described various image processor architectures is used in the wound of animation with actual camera image
Build and/or produce and/or show, then image processor can be characterized as being graphics processing unit.In addition, above-mentioned image procossing
The characteristic of device framework can apply to other technologies of such as Video processing, visual processes, image recognition and/or machine learning
Using.Apply by this way, image processor can with more general processor (for example, its be computing system CPU or
It is the CPU of a computing system part) integrated (for example, as coprocessor), or can be in independent computing system
Processor.
The embodiment of hardware design discussed above can be in semiconductor chip and/or as using target as half
The description of the circuit design of conductor manufacture processing embodies.In the case of then, the description of such circuit can use (example
Such as, VHDL or Verilog) description of Method at Register Transfer Level (RTL) circuit, the description of gate level circuit, transistor level circuitry retouch
State the form of the either description of mask or various combinations therein.The description of circuit is typically situated between in computer-readable storage
(such as CD-ROM or other types of storing technology) is embodied in matter.
It is necessary to recognize from preceding sections, what image processor as described above can be on the computer systems is hard
Embodied in part (for example, the portion of the on-chip system (SOC) as the hand-held device of the data of camera of the processing from hand-held device
Point).In the case where image processor is embodied as hardware circuit, it is noted that the view data handled by image processor can
Directly to be received from camera.Here, image processor can be a part for discrete camera, or with integrated camera
Computing system a part.In the case of later, system that view data can be directly from camera or from computing system
(for example, its view data is sent to system storage rather than image processor by camera) is received in memory.Also to note
Anticipate and arrive, the numerous characteristics described in above-mentioned part can apply to image processor units (it shows animation).
Figure 28 provides the example plot of computing system.Many components of following computing systems can be applied to have
Integrated video camera is with the computing system of image processor associated (for example, the hand-held dress of such as smart phone or tablet personal computer
Put).These common technical ability easily can be described therebetween.
As seen from Figure 28, basic computing system can (it can include for example multiple comprising CPU 2801
General procedure core 2815_1 to 2815_N and the main memory controller being arranged on polycaryon processor or application processor
2817), system storage 2802, display 2803 (for example, touch-screen, flat board), local wired point-to-point link (for example,
USB) interface 2804, various network I/O functions 2805 (such as Ethernet interface and/or cellular modem subsystem), nothing
Line LAN (for example, WiFi) interface 2806, wireless point-to-point link (for example, bluetooth) interface 2807 and global positioning system
Interface 2808, various sensor 2809_1 to 2809_N, one or more cameras 2810, battery 2811, power management control are single
Member 2824, loudspeaker and microphone 2813 and audio encoder/decoder 2814.
Application processor or polycaryon processor 2850 can include one or more general procedure cores in its CPU 2801
2815th, one or more graphics processing units 2816, memory management functions 2817 (for example, Memory Controller), I/O controls
Function 2818 processed and graphics processing unit 2819.General procedure core 2815 typically performs the operating system of computing system and answered
Use software.Graphics processing unit 2816 typically performs the intensive function of image, for example to produce what is presented on display 2803
Image information.Memory control function 2817 and the interface of system storage 2802, for write to/from system storage 2802/
Read data.The power consumption of the usual control system 2800 of power supply management control unit 2824.
Graphics processing unit 2819 can be according to arbitrary graphics processing unit described above in detail in preceding sections
Embodiment is realized.Either-or be combined with each other, and IPU 2819 can be coupled to GPU as coprocessor therein
One or both in 2816 and CPU 2801.In addition, in various embodiments, GPU 2816 can be used and retouched in detail above
The characteristic of any image processor stated is realized.
Touch-screen shows 2803, communication interface 2804-2807, GPS interface 2808, sensor 2809, camera 2810 and raised
Each in sound device/microphone codec 2813,2814 can be viewed as relative to the various of overall computing system
The I/O (input and/or output) of form, the computing system is in the appropriate case also comprising integrated ancillary equipment (for example, one
Individual or multiple cameras 2810).Depending on implementation, various in these I/O components can be integrated in application processor/more
On core processor 2850, or it can be located at outside naked core or outside the encapsulation of application processor/polycaryon processor 2850.
In one embodiment, one or more cameras 2810 include can be measured in its visual field camera and object it
Between depth depth camera.In the general-purpose CPU of application processor or other processors (or with configuration processor code
Other mac functions of instruction execution pipeline) on perform application software, operating system software, device driver software
And/or firmware can carry out any of the above described function.
Embodiments of the invention can include such as various processing set forth above.Processing can be in machine-executable instruction
Middle embodiment.Instruction can be used for causing universal or special processor to carry out a certain processing.Or these processing can by containing
For the specified nextport hardware component NextPort of the firmware hardwired logic handled, or the computer module by programming and the hardware group of customization
Any combinations of part are carried out.
The element of the present invention can also provide as storing the machine readable media of machine-executable instruction.Machine
Device computer-readable recording medium can including but not limited to floppy disk, CD, CD-ROM and magneto-optic disk, flash memory, ROM, RAM, EPROM,
Medium/machine readable media of EEPROM, magnetically or optically card, propagation medium or other species suitable for stored electrons instruction.Example
Such as, element can be downloaded as computer program, the computer program via in carrier wave or other extending mediums via logical
Believe the data-signal that link (for example, modem or network connection) embodies, passed from remote computer (for example, server)
It is handed to the computer (for example, client) of request.
In foregoing specification, it has been described that clear and definite exemplary embodiment.However, it is clear that, it is various
Modifications and changes can be completed, without departing from the broader spirit and scope of the invention illustrated in such as appended claims
's.The specification and drawings, correspondingly, it will be considered as illustrative and not restrictive.
Claims (25)
1. a kind of machine-readable storage medium containing program code, described program code including two dimension by performing passage battle array
During the processing of the image processor of row and two-dimensional shift register array, described image processor is caused to carry out a kind of method, it is described
Method includes：
With each iteration next time, shift amount while multiple row or column of the two-dimensional shift register array is added
Times；
Performed between the displacement of iteration in the two dimension and one or more instructions are performed in the corresponding passage of channel array.
2. machine-readable storage medium according to claim 1, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out row or column sum operation.
3. machine-readable storage medium according to claim 1, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out row or column prefix sum operation.
4. machine-readable storage medium according to claim 1, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out lookup minimum value or search maxima operation, it is described operation corresponding row or column it
The upper index value for repeating minimum value or maximum.
5. machine-readable storage medium according to claim 1, wrapped wherein the two-dimensional shift register array is shifted
Include the relative edge that the content of the two-dimentional register array is centered around to the two-dimensional shift register array.
6. machine-readable storage medium according to claim 1, wherein methods described are following any for carrying out：
A) counting statistics；
B) noise is suppressed；
C) down-sampling；
D) complete image is determined；
E) box filter is accelerated；
F) post processing zone block matching algorithm.
7. a kind of machine-readable storage medium containing program code, described program code including two dimension by performing passage battle array
During the processing of the image processor of row and two-dimensional shift register array, described image processor is caused to carry out a kind of method, it is described
Method includes：
One or more instructions are repeatedly carried out in the respective channel of the execution channel array, the instruction is in identical array
Selected between content in the different registers of position, the identical array position is in the two-dimensional shift register battle array
Between being shifted while the repetition of multiple row or column of data in row.
8. machine-readable storage medium according to claim 7, wherein methods described are also included the same shift
Distance repeatedly doubles.
9. machine-readable storage medium according to claim 8, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out row or column prefix sum operation.
10. machine-readable storage medium according to claim 8, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out lookup minimum value or search maxima operation, it is described operation corresponding row or column it
The upper index value for repeating minimum value or maximum.
11. machine-readable storage medium according to claim 7, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out row or column prefix sum operation.
12. machine-readable storage medium according to claim 7, wherein methods described are in the multiple corresponding of data array
Row or column on simultaneously carry out lookup minimum value or search maxima operation, it is described operation corresponding row or column it
The upper index value for repeating minimum value or maximum.
13. machine-readable storage medium according to claim 7, wherein methods described are for Fast Fourier Transform (FFT)
Butterfly operates.
14. machine-readable storage medium according to claim 7 is wherein, methods described is following any for carrying out：
A) complete image is determined；
B) box filter is accelerated；
C) counting statistics；
D) post processing zone block matching algorithm.
15. a kind of machine-readable storage medium containing program code, described program code draws when being carried out by processing unit
Rise and carry out a kind of method, methods described includes：
The method stated in the form of the program code of higher level, described program code pass through the memory with instruction format
Read and write instruction accesses to data, the instruction format specifies the memory location in x, y-coordinate, the higher level
Other program code is compiled as on the image processor for performing channel array and two-dimensional shift register array with two dimension
Executable object identification code, the object identification code cause image processor to carry out：
With each iteration next time, shift amount while multiple row or column of the two-dimensional shift register array is added
Times；
Performed between the displacement of iteration in the two dimension and one or more instructions are performed in the corresponding passage of channel array.
16. machine-readable storage medium according to claim 15, wherein the object identification code is used to realize in data matrix
The row or column sum operation carried out simultaneously in multiple corresponding row or columns of row.
17. machine-readable storage medium according to claim 15, wherein the object identification code is used to realize in data matrix
The row or column prefix sum operation carried out simultaneously in multiple corresponding row or columns of row.
18. machine-readable storage medium according to claim 15, wherein the object identification code is used to realize in data matrix
The lookup minimum value or lookup maxima operation carried out simultaneously in multiple corresponding row or columns of row, the operation is corresponding
Row or column on repeat the index value of minimum value or maximum.
19. machine-readable storage medium according to claim 15, wherein the object identification code is following any for carrying out：
A) counting statistics；
B) noise is suppressed；
C) down-sampling；
D) complete image is determined；
E) box filter is accelerated；
F) post processing zone block matching algorithm.
20. a kind of machine-readable storage medium containing program code, described program code draw when passing through processing unit processes
Rise and carry out a kind of method, methods described includes：
The method stated in the form of the program code of higher level, described program code pass through the memory with instruction format
Read and write instruction accesses to data, the instruction format specifies the memory location in x, y-coordinate, the higher level
Other program code is compiled as on the image processor for performing channel array and two-dimensional shift register array with two dimension
Executable object identification code, the object identification code cause image processor to carry out：
One or more instructions are repeatedly carried out in the respective channel of the execution channel array, the instruction is in identical array
Selected between content in the different registers of position, the identical array position is in the two-dimensional shift register battle array
Between being shifted while the repetition of multiple row or column of data in row.
21. machine-readable storage medium according to claim 20, wherein the object identification code is used for the same time shift
The distance of position repeatedly doubles.
22. machine-readable storage medium according to claim 20, wherein the object identification code is used to realize in data matrix
The row or column prefix sum operation carried out simultaneously in multiple corresponding row or columns of row.
23. machine-readable storage medium according to claim 20, wherein the object identification code is used to realize in data matrix
The lookup minimum value or lookup maxima operation carried out simultaneously in multiple corresponding row or columns of row, the operation is corresponding
Row or column on repeat the index value of minimum value or maximum.
24. machine-readable storage medium according to claim 20, the object identification code is used to realize that fast Fourier becomes
The butterfly operation changed.
25. machine-readable storage medium according to claim 20 is wherein, the object identification code is following any for carrying out：
A) complete image is determined；
B) box filter is accelerated；
C) counting statistics；
D) post processing zone block matching algorithm.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/201,269 US20180005346A1 (en) | 2016-07-01 | 2016-07-01 | Core Processes For Block Operations On An Image Processor Having A Two-Dimensional Execution Lane Array and A Two-Dimensional Shift Register |
US15/201,269 | 2016-07-01 |
Publications (2)
Publication Number | Publication Date |
---|---|
CN107563954A true CN107563954A (en) | 2018-01-09 |
CN107563954B CN107563954B (en) | 2021-04-20 |
Family
ID=59258352
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201710534983.0A Active CN107563954B (en) | 2016-07-01 | 2017-07-03 | Kernel processing for block operations on an image processor with two-dimensional execution channel array and two-dimensional shift register |
Country Status (9)
Country | Link |
---|---|
US (2) | US20180005346A1 (en) |
EP (1) | EP3479341B1 (en) |
JP (1) | JP6837084B2 (en) |
KR (1) | KR102232723B1 (en) |
CN (1) | CN107563954B (en) |
DE (2) | DE102017113867A1 (en) |
GB (2) | GB2576278B (en) |
TW (2) | TWI690896B (en) |
WO (1) | WO2018005037A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112784977A (en) * | 2021-01-15 | 2021-05-11 | 北方工业大学 | Target detection convolutional neural network accelerator |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180007302A1 (en) | 2016-07-01 | 2018-01-04 | Google Inc. | Block Operations For An Image Processor Having A Two-Dimensional Execution Lane Array and A Two-Dimensional Shift Register |
CN112005213A (en) | 2018-02-27 | 2020-11-27 | 谷歌有限责任公司 | Large lookup tables for image processors |
JP7035751B2 (en) * | 2018-04-12 | 2022-03-15 | 富士通株式会社 | Code conversion device, code conversion method, and code conversion program |
US10776110B2 (en) * | 2018-09-29 | 2020-09-15 | Intel Corporation | Apparatus and method for adaptable and efficient lane-wise tensor processing |
US10552939B1 (en) * | 2019-02-12 | 2020-02-04 | Google Llc | Image processor complex transfer functions |
US20210081691A1 (en) * | 2019-09-16 | 2021-03-18 | SambaNova Systems, Inc. | Efficient Execution of Operation Unit Graphs on Reconfigurable Architectures Based on User Specification |
US11410027B2 (en) | 2019-09-16 | 2022-08-09 | SambaNova Systems, Inc. | Performance estimation-based resource allocation for reconfigurable architectures |
CN113536220A (en) * | 2020-04-21 | 2021-10-22 | 中科寒武纪科技股份有限公司 | Operation method, processor and related product |
GB2595696B (en) * | 2020-06-04 | 2022-12-28 | Envisics Ltd | Forming a hologram of a target image for projection using data streaming |
WO2023089610A1 (en) * | 2021-11-18 | 2023-05-25 | Deci.Ai Ltd. | System and method for optimizing calculation of butterfly transforms by a processing unit |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6148111A (en) * | 1998-04-27 | 2000-11-14 | The United States Of America As Represented By The Secretary Of The Navy | Parallel digital image compression system for exploiting zerotree redundancies in wavelet coefficients |
US20050216700A1 (en) * | 2004-03-26 | 2005-09-29 | Hooman Honary | Reconfigurable parallelism architecture |
Family Cites Families (85)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4445177A (en) | 1981-05-22 | 1984-04-24 | Data General Corporation | Digital data processing system utilizing a unique arithmetic logic unit for handling uniquely identifiable addresses for operands and instructions |
DE3851005T2 (en) | 1987-06-01 | 1995-04-20 | Applied Intelligent Syst Inc | Parallel neighboring processing system and method. |
US4935894A (en) | 1987-08-31 | 1990-06-19 | Motorola, Inc. | Multi-processor, multi-bus system with bus interface comprising FIFO register stocks for receiving and transmitting data and control information |
US5253308A (en) | 1989-06-21 | 1993-10-12 | Amber Engineering, Inc. | Massively parallel digital image data processor using pixel-mapped input/output and relative indexed addressing |
US5173947A (en) * | 1989-08-01 | 1992-12-22 | Martin Marietta Corporation | Conformal image processing apparatus and method |
IL94232A0 (en) * | 1990-04-27 | 1991-01-31 | Israel Defence | Electrical apparatus particularly useful as an electromagnetic pulse simulator |
WO1994009595A1 (en) | 1991-09-20 | 1994-04-28 | Shaw Venson M | Method and apparatus including system architecture for multimedia communications |
JP3482660B2 (en) | 1993-09-08 | 2003-12-22 | ソニー株式会社 | Image data processing apparatus and image data processing method |
US5848286A (en) | 1994-03-29 | 1998-12-08 | Cray Research, Inc. | Vector word shift by vo shift count in vector supercomputer processor |
US5606707A (en) * | 1994-09-30 | 1997-02-25 | Martin Marietta Corporation | Real-time image processor |
US5612693A (en) | 1994-12-14 | 1997-03-18 | International Business Machines Corporation | Sliding window data compression using a toroidal bit shift register |
JPH08194679A (en) * | 1995-01-19 | 1996-07-30 | Texas Instr Japan Ltd | Method and device for processing digital signal and memory cell reading method |
JP3573755B2 (en) * | 1996-01-15 | 2004-10-06 | シーメンス アクチエンゲゼルシヤフト | Image processing processor |
US6016395A (en) * | 1996-10-18 | 2000-01-18 | Samsung Electronics Co., Ltd. | Programming a vector processor and parallel programming of an asymmetric dual multiprocessor comprised of a vector processor and a risc processor |
US5892962A (en) | 1996-11-12 | 1999-04-06 | Lucent Technologies Inc. | FPGA-based processor |
US6366289B1 (en) | 1998-07-17 | 2002-04-02 | Microsoft Corporation | Method and system for managing a display image in compressed and uncompressed blocks |
US6587158B1 (en) | 1998-07-23 | 2003-07-01 | Dvdo, Inc. | Method and apparatus for reducing on-chip memory in vertical video processing |
US7010177B1 (en) | 1998-08-27 | 2006-03-07 | Intel Corporation | Portability of digital images |
EP1164544B1 (en) | 1999-03-16 | 2011-11-02 | Hamamatsu Photonics K.K. | High-speed vision sensor |
JP3922859B2 (en) | 1999-12-28 | 2007-05-30 | 株式会社リコー | Image processing apparatus, image processing method, and computer-readable recording medium storing program for causing computer to execute the method |
US6745319B1 (en) | 2000-02-18 | 2004-06-01 | Texas Instruments Incorporated | Microprocessor with instructions for shuffling and dealing data |
US6728862B1 (en) | 2000-05-22 | 2004-04-27 | Gazelle Technology Corporation | Processor array and parallel data processing methods |
US6728722B1 (en) | 2000-08-28 | 2004-04-27 | Sun Microsystems, Inc. | General data structure for describing logical data spaces |
US7286717B2 (en) | 2001-10-31 | 2007-10-23 | Ricoh Company, Ltd. | Image data processing device processing a plurality of series of data items simultaneously in parallel |
JP4146654B2 (en) | 2002-02-28 | 2008-09-10 | 株式会社リコー | Image processing circuit, composite image processing circuit, and image forming apparatus |
US9170812B2 (en) | 2002-03-21 | 2015-10-27 | Pact Xpp Technologies Ag | Data processing system having integrated pipelined array data processor |
WO2003088033A1 (en) | 2002-04-09 | 2003-10-23 | University Of Rochester | Multiplier-based processor-in-memory architectures for image and graphics processing |
AU2003286131A1 (en) | 2002-08-07 | 2004-03-19 | Pact Xpp Technologies Ag | Method and device for processing data |
US20060044576A1 (en) | 2004-07-30 | 2006-03-02 | Kabushiki Kaisha Toshiba | Apparatus for image processing |
KR20070039490A (en) * | 2004-05-03 | 2007-04-12 | 실리콘 옵틱스 인코포레이션 | A bit serial processing element for a simd array processor |
US7667764B2 (en) | 2004-06-04 | 2010-02-23 | Konica Minolta Holdings, Inc. | Image sensing apparatus |
JP4219887B2 (en) | 2004-12-28 | 2009-02-04 | 富士通マイクロエレクトロニクス株式会社 | Image processing apparatus and image processing method |
ATE504043T1 (en) | 2005-04-28 | 2011-04-15 | Univ Edinburgh | RECONFIGURABLE INSTRUCTION CELL ARRAY |
US7882339B2 (en) | 2005-06-23 | 2011-02-01 | Intel Corporation | Primitives to enhance thread-level speculation |
JP2007067917A (en) | 2005-08-31 | 2007-03-15 | Matsushita Electric Ind Co Ltd | Image data processing apparatus |
US7602974B2 (en) | 2005-10-21 | 2009-10-13 | Mobilic Technology (Cayman) Corp. | Universal fixed-pixel-size ISP scheme |
FR2895103B1 (en) | 2005-12-19 | 2008-02-22 | Dxo Labs Sa | METHOD AND SYSTEM FOR PROCESSING DIGITAL DATA |
US7991817B2 (en) * | 2006-01-23 | 2011-08-02 | California Institute Of Technology | Method and a circuit using an associative calculator for calculating a sequence of non-associative operations |
GB2436377B (en) * | 2006-03-23 | 2011-02-23 | Cambridge Display Tech Ltd | Data processing hardware |
US7802073B1 (en) | 2006-03-29 | 2010-09-21 | Oracle America, Inc. | Virtual core management |
US7933940B2 (en) * | 2006-04-20 | 2011-04-26 | International Business Machines Corporation | Cyclic segmented prefix circuits for mesh networks |
US20080111823A1 (en) | 2006-11-13 | 2008-05-15 | Faraday Technology Corp. | Graphics processing system |
EP1927950A1 (en) | 2006-12-01 | 2008-06-04 | Thomson Licensing | Array of processing elements with local registers |
EP1927949A1 (en) * | 2006-12-01 | 2008-06-04 | Thomson Licensing | Array of processing elements with local registers |
US8321849B2 (en) | 2007-01-26 | 2012-11-27 | Nvidia Corporation | Virtual architecture and instruction set for parallel thread computing |
US20080244222A1 (en) | 2007-03-30 | 2008-10-02 | Intel Corporation | Many-core processing using virtual processors |
JP4389976B2 (en) | 2007-06-29 | 2009-12-24 | ブラザー工業株式会社 | Image processing apparatus and image processing program |
JP4844853B2 (en) | 2007-09-05 | 2011-12-28 | 国立大学法人東北大学 | Solid-state imaging device and driving method thereof |
US8661226B2 (en) * | 2007-11-15 | 2014-02-25 | Nvidia Corporation | System, method, and computer program product for performing a scan operation on a sequence of single-bit values using a parallel processor architecture |
CN102047241B (en) | 2008-05-30 | 2014-03-12 | 先进微装置公司 | Local and global data share |
US8225325B2 (en) * | 2008-06-06 | 2012-07-17 | Apple Inc. | Multi-dimensional thread grouping for multiple processors |
JP4999791B2 (en) | 2008-06-30 | 2012-08-15 | キヤノン株式会社 | Information processing apparatus, control method thereof, and program |
US8456480B2 (en) | 2009-01-14 | 2013-06-04 | Calos Fund Limited Liability Company | Method for chaining image-processing functions on a SIMD processor |
KR101572879B1 (en) | 2009-04-29 | 2015-12-01 | 삼성전자주식회사 | Dynamic parallel system and method for parallel application program |
US20110055495A1 (en) | 2009-08-28 | 2011-03-03 | Qualcomm Incorporated | Memory Controller Page Management Devices, Systems, and Methods |
US8976195B1 (en) | 2009-10-14 | 2015-03-10 | Nvidia Corporation | Generating clip state for a batch of vertices |
US8436857B2 (en) | 2009-10-20 | 2013-05-07 | Oracle America, Inc. | System and method for applying level of detail schemes |
US8595428B2 (en) | 2009-12-22 | 2013-11-26 | Intel Corporation | Memory controller functionalities to support data swizzling |
GB201007406D0 (en) | 2010-05-04 | 2010-06-16 | Aspex Semiconductor Ltd | Block motion estimation |
US8749667B2 (en) | 2010-08-02 | 2014-06-10 | Texas Instruments Incorporated | System and method for maintaining maximum input rate while up-scaling an image vertically |
US8508612B2 (en) | 2010-09-30 | 2013-08-13 | Apple Inc. | Image signal processor line buffer configuration for processing ram image data |
US8797323B2 (en) | 2011-01-18 | 2014-08-05 | Intel Corporation | Shadowing dynamic volumetric media |
WO2012105174A1 (en) | 2011-01-31 | 2012-08-09 | パナソニック株式会社 | Program generation device, program generation method, processor device, and multiprocessor system |
US9092267B2 (en) | 2011-06-20 | 2015-07-28 | Qualcomm Incorporated | Memory sharing in graphics processing unit |
US20130027416A1 (en) | 2011-07-25 | 2013-01-31 | Karthikeyan Vaithianathan | Gather method and apparatus for media processing accelerators |
JP5742651B2 (en) | 2011-10-15 | 2015-07-01 | コニカミノルタ株式会社 | Image processing apparatus, linkage method, and linkage program |
JP5746100B2 (en) | 2011-12-27 | 2015-07-08 | 京セラドキュメントソリューションズ株式会社 | Image forming apparatus |
US8823736B2 (en) | 2012-01-20 | 2014-09-02 | Intel Corporation | Graphics tiling architecture with bounding volume hierarchies |
US10244246B2 (en) | 2012-02-02 | 2019-03-26 | Texas Instruments Incorporated | Sub-pictures for pixel rate balancing on multi-core platforms |
US9235769B2 (en) | 2012-03-15 | 2016-01-12 | Herta Security, S.L. | Parallel object detection method for heterogeneous multithreaded microarchitectures |
TWI520598B (en) | 2012-05-23 | 2016-02-01 | 晨星半導體股份有限公司 | Image processing apparatus and image processing method |
US9232139B2 (en) | 2012-07-24 | 2016-01-05 | Apple Inc. | Image stabilization using striped output transformation unit |
US9319254B2 (en) * | 2012-08-03 | 2016-04-19 | Ati Technologies Ulc | Methods and systems for processing network messages in an accelerated processing device |
US9378181B2 (en) | 2012-11-09 | 2016-06-28 | Intel Corporation | Scalable computing array |
US8954992B2 (en) | 2013-03-15 | 2015-02-10 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Distributed and scaled-out network switch and packet processing |
US10996959B2 (en) * | 2015-01-08 | 2021-05-04 | Technion Research And Development Foundation Ltd. | Hybrid processor |
US9749548B2 (en) | 2015-01-22 | 2017-08-29 | Google Inc. | Virtual linebuffers for image signal processors |
US9769356B2 (en) | 2015-04-23 | 2017-09-19 | Google Inc. | Two dimensional shift array for image processor |
US10095479B2 (en) | 2015-04-23 | 2018-10-09 | Google Llc | Virtual image processor instruction set architecture (ISA) and memory model and exemplary target hardware having a two-dimensional shift array structure |
US9756268B2 (en) | 2015-04-23 | 2017-09-05 | Google Inc. | Line buffer unit for image processor |
US9785423B2 (en) | 2015-04-23 | 2017-10-10 | Google Inc. | Compiler for translating between a virtual image processor instruction set architecture (ISA) and target hardware having a two-dimensional shift array structure |
US10291813B2 (en) | 2015-04-23 | 2019-05-14 | Google Llc | Sheet generator for image processor |
US9965824B2 (en) | 2015-04-23 | 2018-05-08 | Google Llc | Architecture for high performance, power efficient, programmable image processing |
US9772852B2 (en) | 2015-04-23 | 2017-09-26 | Google Inc. | Energy efficient processor core architecture for image processor |
US9632979B2 (en) * | 2015-06-01 | 2017-04-25 | Intel Corporation | Apparatus and method for efficient prefix sum operation |
-
2016
- 2016-07-01 US US15/201,269 patent/US20180005346A1/en not_active Abandoned
-
2017
- 2017-05-17 US US15/598,082 patent/US9978116B2/en active Active
- 2017-06-08 JP JP2018568290A patent/JP6837084B2/en active Active
- 2017-06-08 EP EP17734557.6A patent/EP3479341B1/en active Active
- 2017-06-08 KR KR1020197003054A patent/KR102232723B1/en active IP Right Grant
- 2017-06-08 WO PCT/US2017/036565 patent/WO2018005037A1/en unknown
- 2017-06-20 GB GB1916257.7A patent/GB2576278B/en active Active
- 2017-06-20 GB GB201709788A patent/GB2553632B/en active Active
- 2017-06-22 DE DE102017113867.6A patent/DE102017113867A1/en active Pending
- 2017-06-22 DE DE202017103727.4U patent/DE202017103727U1/en active Active
- 2017-06-30 TW TW107141459A patent/TWI690896B/en active
- 2017-06-30 TW TW106121883A patent/TWI646501B/en active
- 2017-07-03 CN CN201710534983.0A patent/CN107563954B/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6148111A (en) * | 1998-04-27 | 2000-11-14 | The United States Of America As Represented By The Secretary Of The Navy | Parallel digital image compression system for exploiting zerotree redundancies in wavelet coefficients |
US20050216700A1 (en) * | 2004-03-26 | 2005-09-29 | Hooman Honary | Reconfigurable parallelism architecture |
Non-Patent Citations (2)
Title |
---|
MARK HARRIS: "optimizing parallel reduction in cuda contents", 《OPTIMIZING PARALLEL REDUCTION IN CUDA CONTENTS》 * |
QADEER等: "convolution engine:balancingefficiency & flexibility in specialized computing", 《CONVOLUTION ENGINE:BALANCINGEFFICIENCY & FLEXIBILITY IN SPECIALIZED COMPUTING》 * |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112784977A (en) * | 2021-01-15 | 2021-05-11 | 北方工业大学 | Target detection convolutional neural network accelerator |
CN112784977B (en) * | 2021-01-15 | 2023-09-08 | 北方工业大学 | Target detection convolutional neural network accelerator |
Also Published As
Publication number | Publication date |
---|---|
KR20190028454A (en) | 2019-03-18 |
GB2553632B (en) | 2019-12-25 |
US9978116B2 (en) | 2018-05-22 |
EP3479341A1 (en) | 2019-05-08 |
JP6837084B2 (en) | 2021-03-03 |
GB201916257D0 (en) | 2019-12-25 |
TW201810180A (en) | 2018-03-16 |
GB2576278A (en) | 2020-02-12 |
JP2019519863A (en) | 2019-07-11 |
US20180005347A1 (en) | 2018-01-04 |
GB2553632A (en) | 2018-03-14 |
CN107563954B (en) | 2021-04-20 |
GB2576278B (en) | 2020-09-16 |
TWI690896B (en) | 2020-04-11 |
GB201709788D0 (en) | 2017-08-02 |
KR102232723B1 (en) | 2021-03-26 |
WO2018005037A1 (en) | 2018-01-04 |
TW201921314A (en) | 2019-06-01 |
US20180005346A1 (en) | 2018-01-04 |
TWI646501B (en) | 2019-01-01 |
EP3479341B1 (en) | 2023-11-29 |
DE202017103727U1 (en) | 2017-11-02 |
DE102017113867A1 (en) | 2018-01-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN107563953A (en) | The blocks operation of channel array and the image processor of two-dimensional shift register is performed with two dimension | |
CN107563954A (en) | The core processing of blocks operation on channel array and the image processor of two-dimensional shift register is performed with two dimension | |
CN107533750A (en) | Virtual Image Processor instruction set architecture（ISA）With memory model and the exemplary goal hardware with two-dimensional shift array structure | |
CN110149802A (en) | Compiler for being translated between the target hardware with two-dimensional shift array structure in Virtual Image Processor instruction set architecture (ISA) | |
CN107563952A (en) | Convolutional neural networks on programmable two dimensional image processor | |
CN107533751A (en) | Line buffer unit for image processor | |
CN107438861A (en) | Data slice maker for image composer | |
CN107133908A (en) | Compiler for image processor manages memory | |
TWI752343B (en) | Execution unit circuits, image processors, and methods for performing a sum of absolute difference computation | |
TWI794423B (en) | Large lookup tables for an image processor |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
CB02 | Change of applicant information |
Address after: American CaliforniaApplicant after: Google limited liability companyAddress before: American CaliforniaApplicant before: Google Inc. |
|
CB02 | Change of applicant information | ||
GR01 | Patent grant | ||
GR01 | Patent grant |