CN113486226A - Method and system for search result annotation - Google Patents
Method and system for search result annotation Download PDFInfo
- Publication number
- CN113486226A CN113486226A CN202110704878.3A CN202110704878A CN113486226A CN 113486226 A CN113486226 A CN 113486226A CN 202110704878 A CN202110704878 A CN 202110704878A CN 113486226 A CN113486226 A CN 113486226A
- Authority
- CN
- China
- Prior art keywords
- annotation
- annotations
- item
- search results
- query
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 31
- 230000015654 memory Effects 0.000 claims description 50
- 238000012552 review Methods 0.000 claims description 21
- 230000004044 response Effects 0.000 claims description 7
- 230000001419 dependent effect Effects 0.000 claims description 5
- 238000004891 communication Methods 0.000 description 16
- 230000008859 change Effects 0.000 description 9
- 230000008569 process Effects 0.000 description 8
- 230000009471 action Effects 0.000 description 6
- 238000004590 computer program Methods 0.000 description 6
- 230000003287 optical effect Effects 0.000 description 6
- 238000010586 diagram Methods 0.000 description 5
- 239000012634 fragment Substances 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 239000003086 colorant Substances 0.000 description 2
- 230000010006 flight Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 238000005259 measurement Methods 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 239000007787 solid Substances 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 125000000174 L-prolyl group Chemical group [H]N1C([H])([H])C([H])([H])C([H])([H])[C@@]1([H])C(*)=O 0.000 description 1
- 238000013528 artificial neural network Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 230000033001 locomotion Effects 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 238000010079 rubber tapping Methods 0.000 description 1
- 238000012163 sequencing technique Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24573—Query processing with adaptation to user needs using data annotations, e.g. user-defined metadata
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/169—Annotation, e.g. comment data or footnotes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
Abstract
The flexible annotation framework normalizes auxiliary information from different sources, ranks the information for a single search result, and provides a lightweight or complete display of the auxiliary information in annotations for the search result. Thus, the annotation displays information that is not typically part of the details included in the search results. One example method includes, for at least one item in a search results page, identifying at least one annotation of a first annotation type in an annotation data store referencing the item, identifying at least one annotation of a second annotation type in the annotation data store referencing the item, ranking the annotations of the first annotation type and the annotations of the second annotation type, and providing the highest ranked annotation as part of a search result for the item in the search results page.
Description
Cross Reference to Related Applications
This application claims priority to U.S. provisional application No. 62/705,413 entitled "search results annotation" filed on 25/6/2020, the disclosure of which is incorporated herein by reference in its entirety.
Technical Field
The application relates to search result annotation.
Background
Search engines typically search a repository of items for items that satisfy the query terms. The search engine aggregates information about the response terms and provides search results to the query requester. The search engine may search a primary item repository (e.g., documents available through the internet, application programs provided in an application store, items offered for sale in the marketplace, etc.) or a combination of primary repositories. Each search result typically includes links and snippets (snippets) that describe basic details about the responsive item. The link may take the user to a page with more details about the project, original document, etc. The search engine ranks the responsive terms and provides a search results page that lists several, typically the highest ranked responsive terms and some basic details about the terms included in the search results page.
Disclosure of Invention
Embodiments provide annotations (annotations) for search results in a search results page. The annotations represent auxiliary (auxiliary) data about the search results that is not part of the basic item details typically included in the search results. The annotations may connect the item to a secondary (secondary) store and/or data source that helps to give context to the item's location in the search results page. In other words, some annotations may provide reasons or insights into the ordering of responsive search terms. Some annotations may also provide tangential data, for example, from secondary or primary sources, which may enable a user to more effectively evaluate items in a search results page. Some implementations may include a framework that makes annotations available from one or more external sources. Embodiments handle various types of annotations representing different auxiliary data. The disclosed framework may enable scoring of annotations from various sources and of various types. The machine-learned scoring algorithm ranks all of the obtained annotations for the project and provides one or more annotations for display as part of the search results for the project. Thus, embodiments may display annotations from multiple secondary sources. Embodiments may support various interfaces that provide less detail (i.e., "lightweight annotations") for typical space constrained displays of smart phones or wearable devices, and more detail (i.e., "full annotations") for conventional displays (e.g., laptop computers, smart televisions, or personal computers). In some implementations, the user interface may initially display lightweight annotations and be configured to display full annotations in response to gestures or other commands from a user. In some implementations, the full annotation can be provided in the highlighted result (e.g., in the entity view).
Embodiments provide a framework that enables secondary systems/teams (e.g., for different information repositories) to contribute annotations. Embodiments provide flexibility in annotating content. Embodiments handle various annotation data sources, and the data sources can expand or contract with little change in code. Further, embodiments may provide a fair scoring mechanism that depends on the quality of the annotations produced and prevents particular annotation sources from unfairly exaggerating the annotation score. Embodiments provide a solution for scoring different types of annotations, so that the different types of annotations can be mixed and ordered on a search results page as well as an entity view (e.g., knowledge panel, knowledge box, etc.). Some search engines use entity views in the following cases: when the top search result corresponds to an entity, for example, when the top result corresponds to a single entity with sufficient confidence. Embodiments provide useful information, i.e., ancillary information, to a user browsing search results. Utilizing the annotations disclosed herein results in a more intelligent electrode, saving computational resources and user time. Utilizing the annotations disclosed herein may also result in fewer subsequent queries. The annotations may be contextual, adjusted according to a particular query. Regardless of the particular query, annotations can be universally useful. The annotations may be configured to be meaningful at rest, e.g., without requiring click-through access, thereby further conserving computing resources. Some annotations may have click targets to enable the user to understand the reason more deeply.
One or more of the embodiments of the subject matter described herein can be implemented to realize one or more of the following advantages. As one example, embodiments may integrate different types of annotations from different systems, thereby providing a flexible, dynamic environment for providing assistance data. Embodiments also conserve computing resources by increasing the user's confidence in the presented search results, thereby reducing the likelihood that the user will submit multiple queries to obtain the answer sought. For example, embodiments may provide auxiliary information from different sources that support the ordering of particular items in a search result list, which may increase a user's confidence in the presented results. Thus, embodiments relate to a framework for providing a novel interface for associating items in a primary repository with a secondary repository that provides insight into the location of the items in a search results page.
Drawings
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
FIG. 1 illustrates an example system according to some embodiments.
FIG. 2 illustrates an example data diagram of a diversified annotation ordering pipeline, according to an embodiment.
FIG. 3 illustrates an example annotation framework data structure, according to some embodiments.
4A-4D illustrate example mentions and comment annotation types for a search results page, according to some embodiments.
Fig. 5A and 5B illustrate another review annotation type for a search results page in accordance with some embodiments.
6A-6C illustrate example top-picks and description annotation types for a search results page, according to some embodiments.
FIGS. 7A and 7B illustrate a version change annotation type for a search results page, according to some embodiments.
8A-8C illustrate example multimedia and edit rating (editorial rating) annotation types for a search results page, according to some embodiments.
FIG. 9 illustrates query context annotation types for a search results page, according to some embodiments.
FIG. 10 illustrates a flow diagram of a process for generating dynamic annotations for a search results page, according to some embodiments.
FIG. 11 shows an example of a computer device that may be used to implement the described techniques.
FIG. 12 illustrates an example of a distributed computer device that may be used to implement the described techniques.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Embodiments include a flexible annotation framework that normalizes auxiliary information from different sources, scores and orders annotations for individual search results, and provides the option of a lightweight or complete display of the information in the annotations. The disclosed embodiments operate in a search engine environment in which a query engine generates a search results page. In some implementations, the search engine environment can be a marketplace environment, such as one that provides for the sale, download, ordering, etc. of items (e.g., applications, services, products), etc. However, the disclosed techniques may be applied to any search domain that identifies terms responsive to queries from a primary corpus or repository and provides annotations from other (i.e., secondary) sources. Examples of other search environments include travel-related searches, media searches, newsletter searches, entity searches, and the like. Embodiments provide a common framework for retrieving auxiliary information from other sources and/or from a primary repository. The auxiliary information may be any information related to the item, but does not include information typically provided in search results for the item. For example, market search engines typically display images, titles, prices, general reviews (star rating), and/or shipping information in the search results. The auxiliary information displayed in the annotation does not include such primary information. The disclosed annotation framework is configured to accept annotations from external systems and generate annotations from internal system sources. Embodiments enable the display of lightweight and complete annotations in a user interface. Embodiments may provide zero, one, or multiple annotations for a search term.
Fig. 1 is a block diagram of a search service system 100 according to an example embodiment. The system 100 may be used to implement a search service that provides annotations for some of the search results in a search results page. For simplicity, the depiction of system 100 in fig. 1 is described as a marketplace search service, although embodiments are not so limited and the disclosed techniques may be applied to other settings.
The search service system 100 may include a search engine 110. The search engine 110 may be a computing device in the form of a number of different devices, such as a standard server, a group of such servers, or a rack server system. In some implementations, the search engine 110 can be a single system that shares components (e.g., a processor and a memory). Further, the search engine 110 may be implemented in a personal computer (e.g., a laptop computer). The search engine 110 may be an example of a computer device 1200, as shown in FIG. 12. The search engine 110 may include one or more servers that receive queries from requesters (e.g., clients 170) and provide search results to the requesters.
The search engine 110 may include one or more processors 113, an operating system (not shown), and one or more computer memories 114 formed in a substrate. Computer memory 114 may represent any kind of memory (e.g., RAM, flash memory, cache, disk, tape, etc.). The memory 114 may represent a variety of memories. In some implementations (not shown), the memory 114 may include an external storage device, such as a memory that is physically remote but accessible by the search engine 110. The search engine 110 may include one or more modules or engines representing specially programmed software. For example, the search engine may include a query system 120 that enables the search engine 110 to receive and respond to queries.
The query system 120 itself may include modules. For example, the query system 120 may include a query engine 125 and an indexing engine (indexing engine) 129. The index engine 129 may be configured to update the index 140. For example, the index engine 129 may add items to the index 140, update items in the index 140, and delete items from the index 140. In some embodiments, the indexing engine 129 may work with one or more web crawlers (crawlers). The crawler searches for items accessible via the Internet (Internet) and returns the content of the items (including metadata). In some implementations, the crawler can be configured to crawl only certain kinds of content or crawl certain domains. The index engine 129 may use content and/or metadata to generate and update an index 140.
The query system 120 may also include a query engine 125. The query engine 125 may receive a query from a requestor (e.g., the client 170), analyze the query to determine how to search the index 140, and initiate a search of the index 140. A user may submit a query, e.g., a word, phrase, word list, image, voice recording, etc., to search engine 110. Search engine 110, and in particular query engine 125, uses one or more indexes (e.g., index 140) to identify items returned in response to a query. Items returned to the query engine 125 in response to a query may also be referred to as responsive items. The query engine 125 may generate search results for some or all of the responsive terms. As used herein, a search result is summary (summary) data related to a responsive item. Data provided as part of the search results themselves is considered the primary data for the item. The primary data comes from a primary repository, such as index 140, and typically represents less than all of the data available in the repository for the item. The search results may include links. The link may initiate some action related to the responsive item. For example, the search results link may take the user to a web page, such as a web page that provides the item for purchase or download, may take the user to an interface, file, or web page that provides other details about the item, and so forth. The search results for an item may also include a small image or icon associated with the item. The search results for the item may include a brief description of the item or information extracted from the item, also referred to as snippets. The search results may include a summary of the ratings (e.g., number of starts, rate, etc.) of the items. An item such as a product, service, or hotel may include a price for the item. The search results may include other summary information related to the item and/or describing the item as part of the primary information included in the search results.
The query engine 125 can rank the responsive items. Ranking may include applying one or more ranking signals to the responsive items. The sequencing signal may include a number of factors. Once ranked, many search engines collate responsive items into pages. Each page may have a preset number of responsive items. Thus, for example, the first ten responsive items may be returned as the first page, the next ten responsive items may be on the second page, and so on. The user may use links, controls, or over-scrolling to move between pages, e.g., to request the last page, next page, previous page, etc. The number of responsive items returned in the first page may depend on the size of the viewable area. For example, a mobile device with a screen of 6 inches may contain fewer responsive items in the first page than a laptop with a screen of 17 inches.
In looking up responsive items, the query system 120 may be responsible for searching one or more indexes, collectively referred to as indexes 140. The index 140 may be, for example, an inverted index (inverted index) that associates terms, phrases, and/or n-grams with items. The items may be files, including files describing the product. The items may be products, books, applications and/or services offered in the store. The items may be hotels, restaurants, flights, etc. related to the trip. The items may be entities. Terms, phrases, and/or n-grams may be from the item description. Terms, phrases, and/or n-grams may come from comments about the item. The terms, phrases, and/or n-grams may be from a file (web page, PDF, etc.) that describes or refers to the item. The index 140 may also include a knowledge base or knowledge graph. In a knowledge graph, entities (items) are modeled as nodes, and facts about the entities are modeled as attributes or labeled relationships between the entities. For example, an item may be linked to one or more comments in a chart relationship. The index 140 may also include an index of products, attributes, flights, applications, etc. Where index 140 represents several different repositories, one repository may be considered the primary repository searched by query engine 125 and index engine 129. The remaining repository may be a secondary repository used by the query system 120, for example, to rank or service additional details about responsive items selected by the user.
The index 140 may be stored on a tangible computer readable storage device, such as a disk, flash memory, cache, or a combination, configured to store data in a semi-permanent or non-transitory form. In some implementations, the index 140 can be stored in a combination of various memories. The query engine 125 may obtain responsive items from the index 140, rank the responsive items, generate search results for at least some of the responsive items, and provide the search results to a query requestor, e.g., the client 170.
In addition to looking up responsive items, the query system 120 can also obtain annotations for one or more of the responsive items. The responsive item annotation represents auxiliary data related to the item. Some annotations are query independent. Some annotations are query dependent. Some annotations may be provided by the query system 120. Some annotations may be provided by other systems. The annotations may be of different types. For example, the annotation may be a mention annotation (annotation) based on an article or other file that mentions the item, e.g., an article that reviews the product or a news article about the product. References to annotations may be in the form of segments, for example, selecting certain text from an article. The reference annotation may be in the form of a summary, for example, with the title of the article. As another example, the annotation may be based on an edit rating. Such ratings may be collected from certain domains, organizations, or publications. An edit rating annotation (editorial rating annotation) may include one rating from one source or may include multiple ratings from multiple sources. As another example, the annotation may be a top ranked (top ranked) annotation. The top ranked annotation indicates that the item is ranked in a list of "top X" items of a certain category, such as "hit smartphone", "hit beach vacation resort" or "hit father festival gifts". As another example, the annotation may be a review annotation (review annotation). Comment annotations are generated from user comments on the item. The comment annotation may be a positive/negative annotation that lists the most commonly mentioned positive aspects of the item and/or the most commonly mentioned negative aspects of the item. The comment annotations may be query-based segment comments. Most queries, especially for market searches, include terms that are not parsed and/or used to find matching items. Query-based comment annotations may find and display matches to those words in the user comment. Query-based comment annotations may highlight (e.g., bold, underline, italics, use of different colors, etc.) the matching words in full form.
As another example, the annotations may be new version annotations. The new version annotation may indicate that the item is new, which may give the item higher importance and thus higher relevance. As another example, the annotation may be a query context annotation (query context annotation). Query context annotations use query terms related to measurements and emphasize product attributes that satisfy those terms. In some implementations, the query context annotation can display a graphical distribution of all terms in the same category and indicate where the results appear in that space. As another example, the comment may be a description comment (description annotation). Although most search result pages do not include long descriptions of items, description annotations include such descriptions. In some implementations, the annotation can highlight or select (if the description is too long) a portion that is particularly relevant to the query. As another example, the annotation may be a multimedia annotation (multimedia annotation). The multimedia annotation may point to a video or audio file from an authoritative source (a reputable publisher) associated with the project. The multimedia file may be a review of the item, a presentation of the item, and the like. As another example, the annotation may be a prior query annotation (prior query annotation). If the user has agreed to retain historical data, the previous query annotation is an indication that the user has previously studied the project.
Some annotation types may be pre-computed offline and stored, for example, in offline annotation (offline annotation) 130. Offline annotations may be indexed by item (e.g., by item identifier). The annotations may be pushed from other systems to the query system 120. Thus, for example, annotation types such as mentions, top-ranked, editorial comments, etc. may be pushed from the internet or news search system to the product query system and stored in offline annotations 130. In some implementations, query-dependent annotation types can be computed offline and stored in offline annotations 130. In some implementations, query-dependent annotation types, such as query-based comment fragments, descriptions, or contextual annotations, may be generated at the time of a query. In some implementations, all annotations from other systems are stored in offline annotations 130. In some implementations, some of the annotation types generated by the query system 120 can be computed offline and stored in the offline annotations 130. In some implementations, some of the annotation types generated by the query system 120 can be computed at the time of the query. Although illustrated as part of the search system 110, in some implementations, one or more of the annotation types stored in the offline annotations 130 are remote from the search engine 110 but accessible through the search engine 110.
In some implementations, the query system 120 can include a search record (not shown). The search records may include aggregated search logs, aggregated data collected from queries, or other aggregated data about previously processed queries. In some implementations, the search record can be generated by the search engine 110 in the normal course of generating search results. In some implementations, the search record can be used as a source of annotation types.
The query system 120 includes an annotator engine 127. The annotator engine 127 obtains annotations for the items from the annotators 135 and aggregates the annotations. The annotator engine 127 comprises a machine-learned model, such as NG 3. The annotator engine 127 is configured to take each of the scored annotations (or scoring features) produced by the annotators 135 that created the annotations and rank the different annotations with respect to each other. The machine-learned model may be trained by presenting items with multiple different types of annotations to a human rater and having the human rater rank the annotation types. This labeled data may be used to train the model. If a new type of annotation is added to the system, the model may be retrained to include the new type of annotation. Thus, new annotation types may be added to the query system 120 by retraining the annotator engine 127. In some implementations, if annotator 135 is found to exaggerate annotation scores or otherwise play with the system, or if new information indicates that a particular annotation type is not useful, annotator engine 127 can be trained to penalize annotations (penalties) for that annotation type.
Once the annotator engine 127 orders the annotations for the items, the annotations can be provided for presentation. The query system 120 may provide top ranked annotations. The query system 120 may provide a set of x top-ranked annotations. The query system 120 may provide all annotations ranked for the item. The query system may provide lightweight or complete annotations for initial display. Lightweight annotations may be selected when screen space is at a premium. The annotation may be displayed in a carousel (carousel), a slide-and-grow interface (swipe-and-grow interface), an expandable row (expandable row), and the like. Not every search result in the search results page may have annotations. In some embodiments, only the top ranked responsive items may have annotations. In some implementations, if the item lacks the lowest scoring/ranking annotation, then no annotations may be displayed for the query. The query system 120 may provide the information needed to display the annotation as part of the search results page of the query.
The query system l20 may communicate with the client(s) 170 over the network 160. For example, the network 160 may be the internet, a cellular network, a wired or wireless Local Area Network (LAN), a Wide Area Network (WAN), or the like. Network 160 may represent a variety of network types. The query system 120 may communicate with clients 170 and other domains (not shown) over the network 160 to send data thereto/therefrom.
The client 170 may be an example of a computer device 100, as shown in FIG. 11. For example, client l70 may be a personal computer, mobile phone, tablet device, laptop computer, wearable device, smart television, and the like. The client 170 may include one or more processors l73 formed on a substrate, the one or more processors 173 configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof. Processor l73 may be semiconductor-based, that is, the processor may comprise semiconductor material capable of executing digital logic. The client 170 may also include one or more computer memories 174. The memory l74 (e.g., primary memory) may be configured to store one or more pieces of data temporarily, permanently, semi-permanently, or a combination thereof. The memory 174 may include any type of storage device that stores information in a format that can be read and/or executed by the one or more processors 173. The memory 174 may store applications, modules, and/or engines that perform certain operations when executed by the one or more processors 173. In some implementations, the applications, modules, or engines can be stored in an external storage device and loaded into memory 174.
The applications may include any number of applications configured to execute on the client 170, such as an operating system, a messaging application, a shopping application, an editing application, a search assistant, a map, and so forth. Specifically, the application includes a browser 175. Browser 175 is operable to receive web page code (e.g., HTNEL, JavaScript, etc.) and render the web page for presentation to a user of client 170. Thus, the client 170 comprises a display device provided with a viewport (viewport). As used herein, a viewport is a polygonal area that displays content rendered by a browser. Conventionally, the view port is rectangular. The size of the viewport depends on the device, e.g., a viewport on a smartphone is smaller than a viewport of a personal computer or tablet device. The content of the rendered web page may not fit completely within the viewport. In this case, the user can scroll, e.g., perform a scrolling action, to bring content into the viewport and move content out of the viewport. A scroll action is any input that browser 175 (possibly in conjunction with the operating system of client 170) recognizes as performing scrolling to move content into the viewport. Example scroll actions are driving a scroll wheel on a mouse, tapping and dragging actions, sliding actions (e.g., using a finger or stylus), driving a scroll bar in a browser window, and so forth. Browser 175 thus displays scrollable content (e.g., a rendered web page) and the viewport decides which part of the content the user of client 170 is actually able to see, or in other words, which part of the content is visible. Deploying the lightweight annotation can scroll content previously displayed in the viewport outside of the viewport.
The client 170 may include one or more input devices, such as a touch screen, a keyboard, a mouse, a pointer, a microphone, a camera, one or more physical buttons, and the like. The input device may initiate input events such as scrolling, link selection, cursor movement. The client 170 may also include a communication device operable to send and receive data from other computing devices (e.g., another client, a server, the search engine 110, etc.) over one or more networks (e.g., network 160). The configuration in fig. 1 represents one example configuration and embodiments may include other configurations as well.
In addition to the above description, a user of the client device 170 may be provided with controls to allow the user to select: whether and when the system, program, or feature described herein may enable the collection of user information (e.g., information about the user's activities, user preferences, or the user's current location), and whether to send content or communications to the user from a server (e.g., search engine 110). In addition, some data may be processed in one or more ways before being stored or used in order to remove personally identifiable information. For example, the user's identity may be processed so that personally identifiable information of the user cannot be determined, or the user's geographic location may be generalized (e.g., at the city, zip code, or state level) when location information is obtained so that a particular location of the user cannot be determined. Thus, the user of the client 170 may control which information is collected about the user, how the information is used, and which information is provided to the user and/or to the search engine 110.
FIG. 2 illustrates an example data diagram of a diversified annotation ordering pipeline, according to an embodiment. In the example shown in FIG. 2, the system includes five different types of annotations. Annotator 135(a) generates edit segment annotations. Annotator 135(b) generates positive/negative comment (review pro/con) annotations. Annotator 135(c) generates description annotations. Annotator 135(d) generates edit rating annotations. Annotator 135(e) generates top-ranked annotations. Annotator 135(f) generates query-based comment segment annotations. Each annotator 135 can generate annotations in a normalized format. FIG. 3 illustrates an example normalized annotation format 300 according to some embodiments. The annotations may identify objects to which they are to be applied, such as file identifiers, product identifiers, entity representations, and so forth. The identifier may match an identifier of an item in the primary index. The annotation may also include an indication of the type of annotation. The payload includes data to be included in the type annotation. The payload depends on the annotation type. In some implementations, the payload can include a lightweight annotated data item as well as a fully annotated additional data item. In some implementations, the payload can include an indication (e.g., code) of how to display the data item. In some embodiments, the payload may include a target. The target may be a file from which annotations are generated. The annotation may include a score. The score is the annotator setting that generated the annotation. The annotations may include feature sets. The feature set can be used to score annotations of the same type and/or other types.
In the example in fig. 2, each annotator 135 provides a score for an annotation. The annotator engine 127 takes all the annotations and uses a machine-learned ranking algorithm to rank the annotations relative to each other. The output of the annotator engine 127 is a list of already ordered annotations 250. The example system may select one, two, three of the annotations in the sorted list 150 to display as part of the search results.
4A-4D illustrate example mentions and comment annotation types for a search results page 400 according to some embodiments. In the example in fig. 4A, the user has entered the query 405 "headphones". Search results 400 of query 405 include results 410 and results 420. Both results 410 and 420 include annotations in the form of expandable lines. A control 415 may be selected to expand the annotation of the search result 410 and a control 425 may be selected to expand the annotation of the search result 420. In FIG. 4B, the user has selected control 415. Selection of control 415 causes annotation 430 to be displayed within a carousel (carousel) that includes annotation 435. Both annotation 430 and annotation 435 are associated with the item of search results 410. Comments 430 are examples of references to comments. Specifically, annotation 430 is in the form of a segment, e.g., some text of an editorial review that selects this item. Comments 435 are another mention of items in summary form, e.g., titles of articles containing comments from different editorials.
Fig. 4C is the result of the user selecting control 425. Selection of the control 425 results in an expanded row that displays the annotations 440 and 445 within the horizontally scrollable carousel. In some implementations, only the annotations 440 may be displayed within the expanded row. In some implementations, the annotations 440 may display complete annotations. Other annotations may be included in the carousel region and accessed by scrolling. The annotations 440 are examples of positive/negative comment annotation types. Positive/negative reviews may be generated from user reviews of a product. The positive/negative comment comments may list the most commonly mentioned positive aspects of the item and/or the most commonly mentioned negative aspects of the item. In some implementations, the positive/negative annotations can include one or more click targets. Clicking on a target may trigger a query. This query may search for reviews of the item. Clicking on the target may open a review view. The comment 445 is a comment fragment. The review section may list reviews that include one of the most commonly mentioned advantages (or disadvantages) of the product. The annotation 450 shown in fig. 4D is another example of a comment fragment annotation.
Fig. 5A and 5B illustrate another comment annotation type for search results 500 according to some implementations. In the example shown in FIG. 5A, the user has entered a query 505 for "running headphones". Search results 500 of query 505 include results 510 and results 520. Both results 510 and 520 include annotations in the form of expandable lines. Control 515 may be selected to expand the annotation of search results 510 and control 525 may be selected to expand the annotation of search results 420. In fig. 5A, the user selects control 525, causing annotation 530 and annotation 535 to be displayed in the carousel region. Annotation 530 is an example of a query-based comment annotation. In the example in fig. 5A, the annotation includes a snippet that mentions the user's comment of running with the headset. The user mentions running in the product review may cause a higher ranking for a particular product. The annotations provide reasons for ranking the search results 520 and may cause subsequent queries to be reduced because the user has a confidence that the results match the intent. Rare/uncommon query terms in the primary repository (e.g., not many items related to running or running versus the number related to headphones) may be used to identify appropriate review snippets. Determining query terms for describing entities (adjectives of items) can be used to identify appropriate segments. A portion of the snippet that references the query-specific context may be highlighted (bold, italic, underlined, different font colors, etc.). Comment segment annotations may include click targets. Clicking on a target may initiate a query for user comments. Fig. 5B shows a horizontal scroll of the carousel region that brings annotation 535 completely into the viewport and brings annotation 540 partially into the viewport. Comment 535 is another example of a review mention summary.
6A-6C illustrate example preferred and descriptive annotation types for search results 600, according to some embodiments. In the example in fig. 6A, the user has entered the query 605 "headphones". Search results 600 of query 605 include results 610 and results 620. Results 610 and 620 each include annotations in the form of slide-out interface elements. In a sliding expansion interface, a user may select an annotation, then slide and drag down to expand the annotation interface. Sliding of the annotation 615 results in an expansion interface as shown in fig. 6B. Comments 615 represent an example of the top ranked comment types. The top ranked annotation indicates that this item is ranked in the "top X" list of items in a certain category, such as "hit smart phone", "hit beach vacation resort" or "hit father festival gifts". The annotations 615 represent lightweight versions of the annotations. Annotation 615' in fig. 6 shows a complete annotation that may correspond to annotation 615. The full annotation 615' may include additional context and information not included in the lightweight version of the annotation 615.
The expansion interface also includes comments 630 and annotations 635 that are partially displayed within the viewport. The annotation 30 is an example of a type of annotation mentioned for a segment. Notes 635 are examples of mentioning summaries. These additional annotations are optional and may not be displayed with the annotation 615'. Additional annotations may also be included in the scrollable carousel. Comment 625 of FIG. 6A illustrates an example description comment. The description annotation includes a full/expanded description of the item. In the case where the item description is not included in the primary search result information, a description annotation may be used. The description may be annotated with contextualization (contextalize) to select appropriate segments from a longer description. The descriptive annotation may include a click target. The click target may link to a file with a complete description of the item, such as a product order page, a hotel reservation page, a page providing a source of the description, and so forth. Annotation 635 is an example of a lightweight description annotation. Fig. 6C shows an example of a full description annotation 635' that may correspond to annotation 635. Annotation 635' may be displayed after a sliding or short dragging of annotation 635. In some implementations, the annotation 635' can be the only annotation displayed within the viewport. In the example of fig. 6C, the viewport includes a carousel region with additional annotations 640 and 645.
FIGS. 7A and 7B illustrate a version change annotation type for search results 700, according to some embodiments. In the example in fig. 7A, the user has entered the query 705 "iPhone 10". The search results 700 of the query 705 include results 710 and may include other results. The result 710 includes an annotation 715. Comments 715 are examples of version change comment types. The version change annotation type provides an indication to the user that the item has been replaced/updated to an updated version. The version change annotation may include a name or other indication of the subsequent version. The version change annotation may include a release date of the updated version. The version change annotation may include a click target. The click target may link to a file describing the replacement. Clicking on the target may initiate a query for an updated version of the item. Annotations 715 represent examples of lightweight versions of version change annotations. FIG. 7B shows an expanded annotation interface, e.g., resulting from a sliding of the annotation 715. Annotation 715' represents an example of a complete updated version annotation. Comments 725 and 730 may also be displayed in the expand comments interface shown in FIG. 7B. Annotation 725 is an example of an edit rating annotation. Annotation 730 is an example of top-ranked annotations.
8A-8C illustrate example multimedia and edit rating annotation types for search results 800 according to some embodiments. In the example in FIG. 8A, the user has entered the query 805, "most recent iPhone". The search results 800 of the query 805 include results 810 and results 820. The results 810 include an annotation 815. The annotation 815 is an example of a new release annotation type. The new item release annotation type may provide an annotation that a product is a new item, giving it a higher importance and thus a higher relevance. The annotation 815 may represent a lightweight annotation. Annotation 825 is an example of a media annotation. Media annotation refers to a video that explains, rates, or otherwise relates to an item. In some implementations, the media annotation may be associated with a curated source (cured source), such as a company or news organization that sells the item. The media annotation may include a media thumbnail or title. The media annotation may include a click target. The click target may be linked to a media file.
FIG. 8B is an example of an expanded annotation interface resulting from performing a sliding expansion on annotation 815. The expand notes interface includes notes 8l5', which may be an example of a full version of notes 8l 5. The new item release annotation may include a release date. The new item release annotation may include a click target. The click target may be a document (e.g., a web page, a newsfeed, etc.) announcing the release of the new item. The expansion interface also includes a partial view of annotation 83O. The annotation 830 is partially displayed within the viewport and is an example of an edit rating annotation. The edit rating annotation may include a rating from one source, or may include ratings from multiple sources. In some embodiments, the source may be curated. If more than one annotation is displayed in the expand annotations interface, the user may scroll through the annotations. Fig. 8C shows the expand annotations interface when the annotations 830 have scrolled completely into view. As shown, the edit rating annotation can provide a rating for the item as well as a source of the rating. The edit rating annotation may include a product score as well as a highest score. The edit rating annotation may include a source of the rating. The edit rating annotation may include a click target. The click target may be the source of the rating, e.g., a web page with details behind the rating.
FIG. 9 illustrates query-context annotation (query-context annotation) types for search results 900, according to some embodiments. In the example in FIG. 9, the user has entered the query 905 "Long skateboard". Search results 900 of query 905 include results 910 and results 920. Results 910 include annotations 915. Annotation 915 is an example of a query context annotation type. The query context annotation type may use query terms related to the measurement and emphasize product attributes that satisfy those terms. In the example of FIG. 9, annotation 915 includes a product attribute indicating a board length and an item type, both of which match the description "Long" in query 905. In some implementations, the query context annotation can display a graphical distribution. The graphical distribution may illustrate the distribution of the measured attribute across the category and may indicate where the item falls in the distribution.
Embodiments are not limited to the example interfaces, annotations, user interactions, or availabilities described. Annotations may be presented in other interfaces, and may include other annotation types not specifically disclosed.
FIG. 10 illustrates a flow diagram of a process 1000 for generating dynamic annotations for a search results page, according to some embodiments. Process 1000 may be performed by a search service system, such as system 100 of FIG. 1. Process 1000 may be one process performed during a browsing session. Process 1000 may begin in response to receiving a query from a requestor, such as from a client device (1005). The system may retrieve and rank items from a primary repository that is considered responsive to the query, or in other words, a set of responsive items and rank them (1010). The system may assign responsive items to pages, e.g., a first page, a second page. The search system may generate search results for each responsive item assigned to the first page. The search system may also obtain annotations assigned to at least some of the responsive items of the first page (1015). The responsive item assigned to the first page may not have suggested content, for example, if the item is not associated with any pre-computed annotations or any dynamically generated annotations. The annotations may have an annotation type score (1020). The score is generated by an annotator that generates annotations. The scores may be pushed using annotations from an external system. Such annotations are pre-computed for the project. The score may be dynamically generated by the search system, for example, from information in the primary repository using auxiliary information for the item. Dynamic annotations are still scored by the annotator. In some implementations, rather than generating a score (1020'), the annotator extracts features for scoring. The annotation(s) associated with the responsive item are ordered using the annotation score and the annotation type (1025). Alternatively, the annotation(s) associated with the responsive item are ordered (1025') using the extracted annotation characteristics and annotation type. The system uses the ranking to provide one or more of the annotations for the responsive item (1030). In some implementations, if the top ranked annotations do not meet the lowest score, no annotations are provided. In some embodiments, only the top ranked annotations are provided. In some embodiments, all annotations that meet the lowest score are provided. In some implementations, all annotations are provided and the ordering is used only to determine the order of the annotations. Process 1000 then ends.
FIG. 11 illustrates an example of a general purpose computer device 1100 that may operate as the search engine and/or client 170 of FIG. 1, and that may be used with the techniques described herein. Computer device 1100 is intended to provide various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smartphones, tablets, televisions, servers, and other computing devices, including wearable devices. The components shown herein, the connections and relationships between the components, and the functions of the components are meant to be exemplary only, and are not meant to limit embodiments of the inventions described and/or claimed herein.
The processor 1102 may process instructions for execution within the computing device 1100, including instructions stored in the memory 1104 or storage device 1106 to display graphical information for a GUI on an external input/output device (e.g., display 1116). The display 1116 may be a monitor or a flat touch screen display. In some embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Moreover, multiple computing devices 1100 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
The memory 1104 stores information within the computing device 1100. In one implementation, the memory 1104 is a volatile memory unit or units. In another implementation, the memory 1104 is a non-volatile memory unit or units. The memory 1104 may also be another form of computer-readable medium, such as a magnetic or optical disk. In some implementations, the memory 1104 may include expansion memory provided through an expansion interface.
The storage device 1106 can provide mass storage for the computing device 1100. In one implementation, the storage device 1106 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product may be tangibly embodied in these computer-readable media. The computer program product may also include instructions that, when executed, perform one or more methods, such as those described above. The computer-or machine-readable medium is a storage device, such as the memory 1104, the storage device 1106, or memory on the processor 1102.
The interface 1108 may be a high speed controller that manages bandwidth-intensive operations for the computing device 1100, or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers. An external interface 1140 may be provided to enable near area communication between device 1100 and other devices. In some implementations, the controller 408 can be coupled to a storage device 1106 and expansion ports 1114. An expansion port, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, one or more cameras, or devices networked, such as through a network adapter, such as a switch or router.
FIG. 11 illustrates an example of a general purpose computer device 1100, which may be the search engine 110 of FIG. 1, that may be used with the techniques described herein. Computing device 1100 is intended to represent various example forms of large data processing devices, such as servers, blade servers, data centers, mainframes, and other large computing devices. The computing device 1100 may be a distributed system with multiple processors, possibly including network attached storage nodes interconnected by one or more communication networks. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed herein.
The distributed computing system 1100 may include any number of computing devices 1180. Computing device 1180 may include a server or rack server, mainframe, etc. that communicates over a local or wide area network, dedicated optical link, modem, bridge, router, switch, wired or wireless network, etc.
In some implementations, each computing device may include multiple racks. For example, computing device 1180a includes multiple racks 1158a-1158 n. Each chassis may include one or more processors, such as processors 1152a-1152n and 1162a-1162 n. The processors may include data processors, network attached storage devices, and other computer controlled devices. In some embodiments, one processor may run as a main processor and control scheduling and data distribution tasks. The processors may be interconnected through one or more rack switches 1158, and the one or more racks may be connected through a switch 1178. Switch 1178 can handle communications between multiple connected computing devices 1100.
Each chassis may include memory, such as memory 1154 and memory 1164, and storage devices, such as 1156 and 1166. Storage devices 1156 and 1166 may provide mass storage and may include volatile or non-volatile storage such as a network attached disk, floppy disk, hard disk, optical disk, magnetic tape, flash memory or other similar solid state storage device, or an array of devices, including devices in a storage area network or other configurations. Memory 1156 or 1166 may be shared among multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more processors. The memories 1154 and 1164 may include, for example, one or more volatile memory units, one or more non-volatile memory units, and/or other forms of computer-readable media such as magnetic or optical disks, flash memory, cache memory, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory (e.g., memory 1154) may also be shared among the processors 1152a-1152 n. A data structure (e.g., an index) may be stored, for example, between memory 1156 and memory 1154. Computing device 1100 may include other components not shown, such as controllers, buses, input/output devices, communication modules, and so forth.
The overall system may be made up of multiple computing devices 1100 in communication with each other. For example, device 1180a may communicate with devices 1180b, 1180c, and 1180d, and these devices may be collectively referred to as search engine 110. As another example, the search engine 110 of fig. 1 may include two or more computing devices 1100. Some computing devices may be geographically close to each other, while other computing devices may be geographically distant. The layout of system 1100 is merely exemplary, and the system may assume other layouts or configurations.
According to some aspects of the present disclosure, a method includes, for at least one item in a search results page, identifying at least one annotation of a first annotation type in an annotation data store referencing the item; identifying at least one annotation of a second annotation type in an annotation data store referencing the item; ranking the annotations of the first annotation type and the annotations of the second annotation type; and providing the highest ranked annotation as part of the search result for this item in the search results page.
These and other aspects may include one or more of the following, alone or in combination. For example, the first annotation type can be a query-dependent annotation. As another example, the first annotation type can be received from an external system. As another example, the annotation data store can receive annotations from an external system in a normalized format. In some such implementations, the normalized format may include a project identifier, a payload, and a score or feature for ordering different types of annotations. As another example, the first annotation type may relate to a user comment on the item. As another example, the first annotation may include information that is not available in the repository used to generate the first search result. In some such implementations, the first annotation can be pushed from a system remote from the system that generated the search results page to the system that generated the search results page. As another example, a machine-learned scoring algorithm may be trained to rank different types of annotations, thereby performing the ranking.
According to certain aspects, a system includes at least one processor and an offline annotation data store that stores annotations in a normalized format, each annotation being one of a plurality of annotation types, the normalized format including an item identifier. The system may also include a memory storing instructions that, when executed by the at least one processor, cause the system to perform operations. The operations may include identifying, in an offline annotation data store, annotations corresponding to items in a search results page; the identified annotations are ranked, and at least the highest ranked annotation is provided as part of a search results page.
These and other aspects may include one or more of the following, alone or in combination. For example, the highest ranked annotations may be initially displayed as lightweight annotations. As another example, the annotation may be associated with an edit file that references the item. As another example, the item may be a product and the at least one annotation relates to a newer version of the product. As another example, at least one annotation may be related to positive content and negative content from user reviews of the item. As another example, the operations may further include determining that a term in the query for which the search results page was generated is an adjective of the term; identifying user reviews of the items related to the adjective; and generating at least one annotation comprising at least one of the identified user comments. At least one annotation may be included in the ranking.
In another aspect, a tangible computer-readable storage medium has recorded and implemented thereon instructions that, when executed by one or more processors of a computer system, cause the computer system to perform any of the above-described aspects or operations.
Various embodiments may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including: at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system; at least one input device; and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium," "computer-readable medium" refers to any non-transitory computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory (including read-access memory), Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor.
The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), and the Internet (Internet).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Several embodiments have been described herein. Nevertheless, various modifications may be made without departing from the spirit and scope of the invention. Moreover, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be added to, or certain steps may be eliminated, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A method for search result annotation, comprising: for items in the search results page:
identifying at least one annotation of a first annotation type in an annotation data store referencing the item;
identifying at least one annotation of a second annotation type in an annotation data store referencing the item;
ranking the annotations of the first annotation type and the annotations of the second annotation type; and
providing the highest ranked annotation as part of a search result for the item in the search results page.
2. The method of claim 1, wherein the first annotation type is a query-dependent annotation.
3. The method of claim 1, wherein the first annotation type is received from an external system.
4. The method of claim 1, wherein the annotation data store receives annotations from an external system in a normalized format.
5. The method of claim 4, wherein the normalized format comprises an item identifier, a payload, and a score.
6. The method of claim 4, wherein the normalized format includes an item identifier, a payload, and features for ordering different types of annotations.
7. The method of claim 1, wherein the first annotation type is related to a user comment of the item.
8. The method of claim 1, wherein annotations of the first annotation type comprise information that is not available in a repository used to generate search results.
9. The method of claim 8, wherein annotations of the first annotation type are pushed from a system remote from a system that generated the search results page to a system that generated the search results page.
10. The method of claim 1, wherein a machine-learned scoring algorithm trained to rank different types of annotations performs the ranking.
11. A system for search result annotation, comprising:
at least one processor;
an offline annotation data store that stores annotations in a normalized format, each annotation being one of a plurality of annotation types, the normalized format including an item identifier; and
a memory storing instructions that, when executed by the at least one processor, cause the system to:
identifying annotations from the offline annotation data store that correspond to items in a search results page;
sorting the identified annotations; and
providing at least one highest ranked annotation as part of the search results page.
12. The system of claim 11, wherein the highest ranked annotations are initially displayed as lightweight annotations.
13. The system of claim 12, wherein the lightweight annotations are configured to display full annotations in response to gestures or other intentions from a user.
14. The system of claim 11, wherein the item is a product and at least one annotation is related to an updated version of the product.
15. The system of claim 11, wherein the at least one annotation relates to positive content and negative content from user reviews of the item.
16. The system of claim 11, wherein the instructions further comprise instructions that when executed by the at least one processor cause the system to:
determining that a term in a query for which the search results page was generated is an adjective of the item;
identifying user reviews of items related to the adjective; and
generating at least one annotation comprising at least one of the identified user comments,
wherein at least one annotation is included in the ranking.
17. The system of claim 11, wherein at least one annotation corresponding to the item is associated with an edit file that references the item.
18. The system of claim 11, wherein the normalized format comprises a score pushed with the annotation from an external system.
19. The system of claim 11, wherein the normalized format includes annotation features for sorting.
20. A non-transitory computer-readable medium storing instructions that, when executed by a processor, cause a computing system to perform operations comprising:
identifying an item in response to the query;
generating a search results page including search results for a plurality of terms;
identifying at least one annotation referencing an item of the plurality of items, the annotation comprising a link to a file in which the item is ordered in a top-ordered list of items in a category; and
providing annotations associated with the search results for the item in the search results page.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062705413P | 2020-06-25 | 2020-06-25 | |
US62/705,413 | 2020-06-25 | ||
US17/303,206 | 2021-05-24 | ||
US17/303,206 US20210406268A1 (en) | 2020-06-25 | 2021-05-24 | Search result annotations |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113486226A true CN113486226A (en) | 2021-10-08 |
Family
ID=77936111
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202110704878.3A Pending CN113486226A (en) | 2020-06-25 | 2021-06-24 | Method and system for search result annotation |
Country Status (2)
Country | Link |
---|---|
US (1) | US20210406268A1 (en) |
CN (1) | CN113486226A (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220414168A1 (en) * | 2021-06-24 | 2022-12-29 | Kyndryl, Inc. | Semantics based search result optimization |
US20230195745A1 (en) * | 2021-12-22 | 2023-06-22 | Microsoft Technology Licensing, Llc | Unified search for dual domains |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080005064A1 (en) * | 2005-06-28 | 2008-01-03 | Yahoo! Inc. | Apparatus and method for content annotation and conditional annotation retrieval in a search context |
US20100153318A1 (en) * | 2008-11-19 | 2010-06-17 | Massachusetts Institute Of Technology | Methods and systems for automatically summarizing semantic properties from documents with freeform textual annotations |
US20100223261A1 (en) * | 2005-09-27 | 2010-09-02 | Devajyoti Sarkar | System for Communication and Collaboration |
US20110035406A1 (en) * | 2009-08-07 | 2011-02-10 | David Petrou | User Interface for Presenting Search Results for Multiple Regions of a Visual Query |
US20110035350A1 (en) * | 2009-08-06 | 2011-02-10 | Yahoo! Inc. | System for Personalized Term Expansion and Recommendation |
CN102298612A (en) * | 2010-06-25 | 2011-12-28 | 微软公司 | Adjusting search results based on user social profiles |
US20150066646A1 (en) * | 2013-08-27 | 2015-03-05 | Yahoo! Inc. | Spark satellite clusters to hadoop data stores |
US20150112981A1 (en) * | 2009-12-14 | 2015-04-23 | Google Inc. | Entity Review Extraction |
CN105144165A (en) * | 2013-03-08 | 2015-12-09 | 谷歌公司 | Social annotations for enhanced search results |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7743045B2 (en) * | 2005-08-10 | 2010-06-22 | Google Inc. | Detecting spam related and biased contexts for programmable search engines |
US7941428B2 (en) * | 2007-06-15 | 2011-05-10 | Huston Jan W | Method for enhancing search results |
US8280783B1 (en) * | 2007-09-27 | 2012-10-02 | Amazon Technologies, Inc. | Method and system for providing multi-level text cloud navigation |
US20130097143A1 (en) * | 2011-10-12 | 2013-04-18 | Microsoft Corporation | Presenting aggregately endorsed search results |
US9239865B1 (en) * | 2013-01-18 | 2016-01-19 | Google Inc. | Systems, methods, and computer-readable media for providing recommended entities based on a query-specific subset of a user's social graph |
US20170249668A1 (en) * | 2015-07-15 | 2017-08-31 | Google Inc. | Systems and methods for automatically inserting annotations in online advertisements |
-
2021
- 2021-05-24 US US17/303,206 patent/US20210406268A1/en active Pending
- 2021-06-24 CN CN202110704878.3A patent/CN113486226A/en active Pending
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080005064A1 (en) * | 2005-06-28 | 2008-01-03 | Yahoo! Inc. | Apparatus and method for content annotation and conditional annotation retrieval in a search context |
US20100223261A1 (en) * | 2005-09-27 | 2010-09-02 | Devajyoti Sarkar | System for Communication and Collaboration |
US20100153318A1 (en) * | 2008-11-19 | 2010-06-17 | Massachusetts Institute Of Technology | Methods and systems for automatically summarizing semantic properties from documents with freeform textual annotations |
US20110035350A1 (en) * | 2009-08-06 | 2011-02-10 | Yahoo! Inc. | System for Personalized Term Expansion and Recommendation |
US20110035406A1 (en) * | 2009-08-07 | 2011-02-10 | David Petrou | User Interface for Presenting Search Results for Multiple Regions of a Visual Query |
US20150112981A1 (en) * | 2009-12-14 | 2015-04-23 | Google Inc. | Entity Review Extraction |
CN102298612A (en) * | 2010-06-25 | 2011-12-28 | 微软公司 | Adjusting search results based on user social profiles |
CN105144165A (en) * | 2013-03-08 | 2015-12-09 | 谷歌公司 | Social annotations for enhanced search results |
US20150066646A1 (en) * | 2013-08-27 | 2015-03-05 | Yahoo! Inc. | Spark satellite clusters to hadoop data stores |
Non-Patent Citations (2)
Title |
---|
ALBERTO BARRÓN-CEDEÑO 等: "On the Use of an Intermediate Class in Boolean Crowdsourced Relevance Annotations for Learning to Rank Comments", 《SIGIR \'17: PROCEEDINGS OF THE 40TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL》, 7 August 2017 (2017-08-07), pages 1209, XP058451298, DOI: 10.1145/3077136.3080763 * |
吴星和: "图像情感语义注释与检索研究", 《中国优秀硕士学位论文全文数据库 信息科技辑》, no. 01, 15 January 2014 (2014-01-15), pages 138 - 1749 * |
Also Published As
Publication number | Publication date |
---|---|
US20210406268A1 (en) | 2021-12-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10261954B2 (en) | Optimizing search result snippet selection | |
JP6266080B2 (en) | Method and system for evaluating matching between content item and image based on similarity score | |
US10289700B2 (en) | Method for dynamically matching images with content items based on keywords in response to search queries | |
US10204121B1 (en) | System and method for providing query recommendations based on search activity of a user base | |
TWI482037B (en) | Search suggestion clustering and presentation | |
JP5661200B2 (en) | Providing search information | |
US8255819B2 (en) | Web notebook tools | |
US10296538B2 (en) | Method for matching images with content based on representations of keywords associated with the content in response to a search query | |
US20140280113A1 (en) | Context based systems and methods for presenting media file annotation recommendations | |
US9268880B2 (en) | Using recent media consumption to select query suggestions | |
US20130191414A1 (en) | Method and apparatus for performing a data search on multiple user devices | |
JP2012501499A (en) | System and method for supporting search request by vertical proposal | |
US8006197B1 (en) | Method and apparatus for output of search results | |
US20190205465A1 (en) | Determining document snippets for search results based on implicit user interactions | |
US10275472B2 (en) | Method for categorizing images to be associated with content items based on keywords of search queries | |
US10262060B1 (en) | Systems and methods for facilitating searching, labeling, and/or filtering of digital media items | |
CN113486226A (en) | Method and system for search result annotation | |
US11055335B2 (en) | Contextual based image search results | |
EP2354975B1 (en) | Automatic association of informational entities | |
JP2009500764A (en) | Information retrieval method and apparatus reflecting information value | |
US8140525B2 (en) | Information processing apparatus, information processing method and computer readable information recording medium | |
TWI507902B (en) | A retrieval system, a retrieval condition setting device, a control method of a search condition setting device, a computer program product, and an information memory medium | |
US20230350955A1 (en) | Comparative search within user-generated content | |
US10546029B2 (en) | Method and system of recursive search process of selectable web-page elements of composite web page elements with an annotating proxy server | |
AU2014101081A4 (en) | System, method and graphical user interface for facilitating a search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |