US20070204010A1 - Remote Module Syndication System and Method - Google Patents
Remote Module Syndication System and Method Download PDFInfo
- Publication number
- US20070204010A1 US20070204010A1 US11/381,575 US38157506A US2007204010A1 US 20070204010 A1 US20070204010 A1 US 20070204010A1 US 38157506 A US38157506 A US 38157506A US 2007204010 A1 US2007204010 A1 US 2007204010A1
- Authority
- US
- United States
- Prior art keywords
- module
- server
- modules
- container
- syndication
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
Definitions
- Embodiments of the present invention relate to the syndication of remote modules.
- various exemplary embodiments may be directed to a system and method for syndication of remote modules.
- the system and method comprise a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules.
- the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
- the system and method may comprise a directory for searching one or more modules and a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules.
- the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
- FIG. 1 depicts an overall system architecture according to various embodiments of the present invention.
- FIG. 2 depicts an illustrative container document according to an embodiment of the present invention.
- FIG. 3 depicts an illustrative process for adding a module into a container document according to an embodiment of the present invention.
- FIG. 4 depicts an illustrative interface for identifying a module according to an embodiment of the present invention.
- FIG. 5 depicts an illustrative module specification format according to an embodiment of the present invention.
- FIG. 6 depicts an example of data containing a module specification according to an embodiment of the present invention.
- FIG. 6 ( b ) depicts an example of data containing an altered module specification according to an embodiment of the present invention.
- FIG. 7 depicts an illustrative process for incorporating data from a module into a container document according to an embodiment of the present invention.
- FIG. 8 depicts an illustrative process for generating data from a module according to an embodiment of the present invention.
- FIG. 9 depicts an illustrative process for enabling a module to be inlined in a container document according to an embodiment of the present invention.
- FIG. 10 depicts an illustrative listing of the types of preference information that may be stored according to an embodiment of the present invention.
- FIG. 11 depicts an illustrative system architecture according to an embodiment of the present invention.
- FIG. 12 depicts an illustrative process for delivering target server data from a module to a container document according to an embodiment of the present invention.
- FIG. 13 depicts an illustrative container document containing modules with output generated through a proxy server module according to an embodiment of the present invention.
- FIG. 14 depicts an illustrative embodiment of a third party web site incorporating a module through syndication with an advertisement included therewith according to an embodiment of the present invention.
- FIG. 15 ( a ) depicts a sample syndication output of rendered HTML for a module according to an embodiment of the present invention.
- FIG. 15 ( b ) depicts a sample syndication output of “raw XML” for a module according to an embodiment of the present invention.
- FIG. 15 ( c ) depicts a sample syndication output of ⁇ UserPrefs> for a module according to an embodiment of the present invention.
- FIG. 15 ( d ) depicts a sample syndication output of a rendered user interface of a module from host according to an embodiment of the present invention.
- FIG. 15 ( e ) depicts a sample RSS feed for viewing a module directory according to an embodiment of the present invention.
- FIG. 16 depicts an illustrative embodiment of a method for syndicating remote modules by a host according to an embodiment of the present invention.
- FIG. 17 depicts an illustrative architecture according to an embodiment of the present invention.
- a personalized portal site may allow the user to select only content (e.g., interactive, read-only, updating, data feeds, etc.) to display on a personalized page, such as a new email alerts, current weather and/or traffic conditions, movie showtimes, horoscopes, etc.
- content e.g., interactive, read-only, updating, data feeds, etc.
- a personalized page such as a new email alerts, current weather and/or traffic conditions, movie showtimes, horoscopes, etc.
- these various modules that may be incorporated into a personalized portal page (one example of a container document) along with modules developed (e.g., by a third party developer) for inclusion in the container.
- a protocol for communication between a hosting site e.g., container server system
- a module server e.g., one operated by an entity other than the user or the hosting site
- process instructions that describe the functionality of a module (wherever hosted)
- a structured repository system for module data and code may include fixed module data and code as well as per-user configuration information or user preferences (e.g., in a weather mapping module, the postal codes in which the user is interested)
- a proxy system that enables use of target site data in a site.
- the system may comprise a number of components.
- the system may comprise a container server that serves a container document (e.g., a personalized page).
- the container document “contains” one or more modules, including one or more remote modules.
- the term “container document” or “container” should be understood to include a personalized homepage of a website, a sidebar, toolbar element that incorporates one or more such modules, a page hosted by a site, a document capable of rendering modules (e.g., any document capable of rendering HTML code or XML code) in the format of the module (e.g., XML).
- the container may be a website of another entity that incorporates the modules when the modules are supplied through a syndication system.
- module may be understood to refer to a piece of software and/or hardware that renders data for use in a container document. Modules may be personalized to user preferences, preferences of the container, preferences of the environment or other inputs. A module specification may be understood to include a set of instructions used to render data for the container document using elements that have been predefined.
- syndication or “syndicating” may be understood to refer to a remote module being incorporated into a container operated from a container server that is not affiliated with the module server (i.e., a remote container server or a syndication recipient server). Syndication may allow hosting remote modules on third party containers to promote web content intercompatibility support and control.
- FIG. 1 depicts an overall system diagram according to one embodiment of the present invention.
- FIG. 1 may comprise a host server system 10 with a plurality of modules that may be associated therewith.
- modules may comprise a container server 12 , a module server 14 , a specification server 16 , a back end server 18 , an analysis module 28 , a module creation server 32 , a syndication server 34 , an advertisement server 36 , a geocode server 37 and a map server 39 .
- personalized container server 10 may connect over a network 26 to a plurality of systems.
- Other systems connected to the network may comprise one or more user systems 22 , one or more remote source systems 24 , one or more module developer systems 30 and one or more syndication recipient servers 38 .
- one or more database systems 20 may operate in conjunction with the various modules of host server system 10 .
- Container server 12 may serve the container document to user systems 22 over network 26 .
- Container server 12 may comprise a web server or related server systems that takes data and/or instructions and formulates a container for transmission over the network to the user system 22 . It should be appreciated, however, that container server 12 may reside on user system 22 as well so that a network connection may not be used.
- container server 12 may comprise a word processing module.
- Module server 14 may provide data from modules to container server 12 for incorporation into a container document. It should be appreciated that in one embodiment, container server 12 and module server 14 may comprise a single unit performing both functions. Module server 14 may provide data for the container document by interpreting and/or parsing instructions in the module specification associated with the module. According to one embodiment, module server 14 may serve the module content to the container document through the use of a browser IFRAME. An IFRAME may be generally understood to be an independently operated browser window instance inside the container document.
- IFRAME is protects the container document from the FRAME's content and vice versa, e.g., JavaScript on the container document may not be permitted to access any JavaScript code in the inner IFRAME (same for CSS, DOM, or cookie objects).
- modules may be displayed inline within the container document.
- Inline display may be understood as referring to display with other document elements.
- One example is a display generated from code for HTML in the body according to HTML standards.
- module server 14 or some other component may determine whether the module is deemed trusted prior to including it in the container document inline due to the risks of various security issues an inline module could create.
- the module may incorporate an indicia of approval (e.g., digital certificate) issued by the container module or an entity associated with the container module as described in detail below. If the indicial of approval is present, module server 14 may render the data from a module for inline presentation in the container document.
- Specification server 16 provides the module specification file to module server 14 .
- the module specification may be cached and stored in a database accessible to the module server 14 and/or specification server 16 or may be retrieved from a location associated with the specification as detailed later.
- specification server 16 may reside on a remote source system 24 .
- specification server 16 may be connected to module server over a network with the module specification located at another location on the network accessible to specification server 16 .
- Backend server 18 may be provided for interacting with one or more databases (e.g., large or dynamic databases of information). For example, for a news module that obtains frequent updates and demands a flow of data, (e.g., from an RSS feed), backend server 18 may format the data into HTML for the container.
- databases e.g., large or dynamic databases of information.
- backend server 18 may format the data into HTML for the container.
- a person may create a module (e.g., a maps module), such as one that uses an application program interface (API) to an existing mapping program to create a module to display a map of downtown Mountain View, Calif.
- the module may comprise an XML specification file or module specification file stored on a specification server.
- the specification server may comprise any server, including one on the site from which the container page is hosted or any other site.
- the user or another person may then include this new module on a personalized homepage (container document).
- the server that serves the container document may operate as the module server and the server that generates the mapping data through an inquiry from its API may be considered to be the backend server.
- analysis module 28 may analyze modules at various times (e.g., when the module is first selected by a user, each time the module is called by a container for inclusion or at any other time determined to be advantageous for safety and security and other times). Analysis module 28 may perform a number of actions, including comparing the module with a list of disapproved or dangerous modules or a list of approved modules. The comparison may involve exact or substring (e.g., prefixes, suffixes and regular expressions) matching by name or location (e.g., URL), contents of the specification, contents of the location where the specification resides, or information that may be ascertainable about the module.
- exact or substring e.g., prefixes, suffixes and regular expressions
- Analysis module 28 may take one or more actions in response to a determination that the module is disapproved or dangerous, including, for example, silently blocking the request, (i.e. providing a generic error), blocking the request with an error that explains the reason it was blocked or redirecting the request to a different module specification that has been determined to be safe and related to the disapproved module (e.g., another module that relates to maps, if the first one was a disapproved mapping site or a module that includes the keyword “basketball” if the disapproved module was a basketball module). For example, through redirection, the URL of the original module may be passed to the “safe” module. The safe module may then use a proxy server, as described below, to retrieve the original URL's content.
- silently blocking the request i.e. providing a generic error
- blocking the request with an error that explains the reason it was blocked or redirecting the request to a different module specification that has been determined to be safe and related to the disapproved module e.g., another module that relates to
- analysis module 28 may parse the module content to determine whether it is safe, such as by compiling JavaScript or other scripts contained in the module to try to identify unsafe or undesired actions the module may perform.
- module creation servers 32 may be provided. This server may operate as a “wizard” to enable module creators to create a module through an interactive process controlled by module creation server 32 .
- module creation server 32 may provide a series of user interfaces that enable the module creator to provide inputs that are then used by the module creator to automatically generate a module specification.
- various module specification templates may be provided with corresponding inputs.
- Module creation server 32 may then take inputs supplied by a module creator, insert them into the template and then generate the module specification for the module.
- a preview, testing and debugging function may also be offered as part of this “wizard.” This module may be downloadable as well so it may be installed and operated at any node on the network.
- a syndication server 34 may prepare data for transmission to one or more syndication recipient servers 38 related to modules.
- Syndication server 34 may receive a request for a module and/or module content and deliver that module or content to a syndication recipient server 38 over network 26 .
- Syndication server 34 may reside at host server system 10 or at another location on the network. For example, if an operator of a sports web site (an example of a syndication recipient system 38 ) desired to include a maps module created by a remote source system 24 , it may do so through a request to syndication server 34 .
- Syndication server 34 may then cooperate with module server 14 to generate data for the container document (here the sports web site page of the syndication recipient system 38 ).
- Syndication server 34 may thus syndicate modules accessible to it. It may do so based on requests for specific modules or other criteria it determines (e.g., content matches, keyword matches, monetary values associated with modules and/or syndication requesters, etc.)
- Ad server 36 may provide advertisements associated with modules to containers. For example, an advertisement may be incorporated with module data when data is delivered to a container document. Ad server 36 may operate with syndication server 34 to deliver advertisements to syndication recipient servers 38 based on a syndication request for a module. The advertisements may be selected by ad server 36 based on a wide variety of criteria, including, but not limited to, the relationship between the content of or information about the container, module, other modules in the container, syndication recipient server information, monetary elements/relationships related to any of the foregoing and/or combinations thereof. Ad server 36 may comprise the Google AdSense system, according to one embodiment of the present invention.
- Ad server 36 may operate as described in one or more of the following patent applications, the subject matter of which is hereby incorporated by reference in their entirety. Specifically, ad server 36 may manage online advertising by associating two or more concepts related to a module with an advertisement and associating a bid, collectively, with the two or more keywords in the manner discussed in the context of serving advertisements with electronic documents in U.S. patent application Ser. No. 10/340,193, filed on Jan. 10, 2003, entitled “Pricing Across Keywords Associated with One or More Advertisements,” which is incorporated by reference herein in its entirety. Additional examples of presenting advertisements and managing advertising costs are discussed in U.S. patent application Ser. No. 10/340,543, filed on Jan.
- a geocode server 37 may be provided to generate geocode information from location descriptions as is known in the art.
- a geocode server 37 may generate latitude and longitude numeric values from geographic locations.
- a map server 39 may generate map output. Mapping systems, such as Google Maps and Google Earth, may be used to generate this data.
- One or more database systems 20 may be provided that store, in any number of ways, container information, module specifications and/or related information, formatting data, per-user and per-module preference data, remote module ID data, remote module location reference data, advertisement data, advertiser data, content/monetary data, syndication recipient data, templates for modules, inputs for modules, lists of trusted and untrusted modules, approval criteria and related information and/or any other information used by the modules to operate as described herein. While a single database structure is shown, it is well understood that the data may be stored at a number of locations and in one or more systems.
- FIG. 1 While one configuration is shown in FIG. 1 , it should be appreciated by one of ordinary skill in the art that other configurations of these various modules may also be possible.
- the various modules depicted within host server system 10 may be disposed at various locations around network 26 or at various points on several networks.
- a single host server system 10 is depicted, it should be appreciated that any number of each of the modules depicted on FIG. 1 may be provided including network 26 .
- network 26 may comprise the Internet. Other networks may also be utilized for connecting each of the various systems and/or servers.
- user system 22 may also operate as a remote source system 24 and/or a module developer system 30 .
- one computer system may operate in different capacities: as a user system, as a remote source system, as a syndication server, as a target content server, and/or a module developer system.
- each of the modules depicted within host server system 10 may also be disposed at a user system 22 , a remote source system 24 , or a module developer system 30 .
- databases 20 may be associated with each of the modules depicted within FIG. 1 depending upon the configuration desired.
- a container document would be a personalized home page, such as the Google Personalized Homepage currently available to users of the Google services on the Internet.
- a personalized home page such as the Google Personalized Homepage currently available to users of the Google services on the Internet.
- one or more embodiments of the present invention enable users to select modules from sources other than the source of the container document. So, for example, a user may elect to include a module in his or her personalized Google home page from a source not associated with Google.
- FIG. 2 depicts a container page 100 with a plurality of modules that have been incorporated into the container document.
- a plurality of methods of incorporation are possible including the use of the IFRAME and inline HTML techniques. These issues will be discussed in greater detail below.
- FIG. 2 depicts a plurality of modules including a photo remote module 101 , a task list module 102 , a game module 104 , a stock module 105 , a maps module 106 , a remote module 108 , a remote module 210 , a remote module 312 , and a remote module 114 .
- modules may provide scroll bars, and others may not. Some modules may be different sizes or shapes than other modules.
- some modules may offer the opportunity for the user to edit the display preferences and/or per-use data associated with the module. (See, for example, modules 102 , 104 , 105 , 106 and 110 that provide an edit link.) For example, if the module relates to a maps module 106 , the user may be provided the opportunity to edit an address or addresses that are mapped in that module.
- inlined modules may be automatically sized by a container document so no scrolling, height or scaling information may be provided.
- an inlined module may be wrapped with a fixed size ⁇ DIV> tag and content placed in the tag.
- the scroll bar, height and other characteristics may be then specified for the inlined content.
- One of the functions provided with this example container document 100 is the opportunity to add content to the container page through selecting the add content element 103 .
- the system may offer the user the opportunity to interactively indicate an additional element to be included in the container page.
- Various forms of an interface to receive that input may be provided.
- One illustrative form is presented in FIG. 2 toward the bottom of the page in section 120 .
- the user may be presented with an interface element to select from a browsable list of modules that may be arranged into a categorization structure.
- Another section of input section 120 may enable the user to specify a reference to a location for a module to be incorporated into the container document.
- Such a section may be such as that depicted through an input box 126 with a submit element 128 .
- the user may specify a location reference (e.g., the uniform resource locator (URL)) where data exists related to a module to be incorporated.
- a location reference e.g., the uniform resource locator (URL)
- URL uniform resource locator
- one example of the data is an XML-based file that meets the scripting preferences of the operator of the container document system 10 .
- FIG. 4 Another option is depicted in FIG. 4 wherein the user may interact with an interface that allows the user to browse through modules by category in section 402 with a plurality of indicated available modules in section 403 or for the user to utilize a search functionality 404 where the user may put in information into a search box 406 , select the search button 408 and have results displayed in section 410 .
- the results of these searches and displays may provide the location reference (e.g., URL) of data (e.g., an XML file) for use in incorporating the module and the container document as described below with reference to FIG. 3 and other descriptions provided.
- location reference e.g., URL
- data e.g., an XML file
- a preview of a module, author name, author affiliation and/or author email may be provided.
- an anonymized email forwarding feature may be used to help protect against spammer-crawlers.
- the display may also provide information about what a module requires or works best with using a May-Require attribute from a module preference (as described in detail below).
- the module works only with the Firefox browser and so that information is provided. Locality information may also be provided.
- this module is designed for the Untied States and for English and Spanish.
- AJAX AJAX
- a module may be added to a container document without a refresh of the container document page (perhaps only a refresh of the IFRAME in which the new container is presented), or use of AJAX to remove a module without the container document being refreshed or when a developer is developing a module, being able to change modules without the container document in which they are populated having to have a page refresh in order to incorporate the changed module.
- FIG. 14 depicts another illustrative example of a container.
- This container may be operated from a container server that is not affiliated with the module server.
- the container 1400 may be a third party website (here Joe's Real Estate Web Page) that lists real estate listing information.
- a remote module 1401 may be incorporated through syndication from a module server.
- the container document may be operated from a container server that is not affiliated with the remote server.
- the remote module may comprise a mortgage calculator that Joe's Real Estate Web Page may find useful for visitors to its site.
- one or more advertisements 1403 may also be provided, as illustrated.
- FIG. 17 depicts an illustrative embodiment for remote module syndication.
- FIG. 17 is a simplification of FIG. 1 , it should be understood in relation to FIG. 1 in that the placement and relationship between elements as described in relation to FIG. 1 should apply to FIG. 17 as well.
- a user system 22 may connect to the Internet network to locate a website or container having modules which may be hosted on a third party syndication recipient server 38 .
- the syndication recipient server 38 may send a module request to the syndication server 34 in the host server system 10 so that it may cooperate with the module server 14 to retrieve a module specification based on the module request.
- the host server system 10 may also have a container server 12 to host the website or container having modules for a third party by sending a module request to itself in a syndicated environment.
- the module specification may be retrieved from the host server system 10 itself or a remote source system 24 .
- the module specification which may comprise a content element and optional preferences based on the module request, may be outputted back to the syndication recipient server 38 for the user system 22 to view and interact.
- Modules may be rendered by the remote module server in several modes.
- the primary mode is the “HTML” render mode, which is depicted in FIG. 15 ( a ).
- Other render modes include a “raw XML” mode and a “UserPrefs Editor” mode.”
- the “raw XML” mode may provide a host server the ability to inspect a module specification.
- the “UserPrefs Editor” mode may provide, and ultimately present, an HTML fragment that is generated by the remote module server to the end-user's browser by the host server in a variety of ways.
- the module author may control which container(s) are to be supported for the module, for example, to indicate compatibility as well as for distribution control.
- FIGS. 15 ( a )-( d ) depict sample syndication outputs.
- FIG. 15 ( a ) illustrates an example of a syndicated remote module output resulting from one URL that is depicted in the HTML render mode.
- the module may comprise an entertainment search module, such as “www.entertainmentsearchsite.com” with “famous actress” being the search topic with scroll bars (IFRAME).
- the module output may comprise “raw XML.”
- the XML may include the module specification, e.g., ⁇ ModulePrefs . . . >, ⁇ UserPrefs . . . >, and ⁇ Content . .
- FIG. 15 ( c ) an example set of userprefs are illustrated. The importance of the this is that “live” (or default) values (in this case, “famous actress”) come into play at the syndication site.
- the host may be a repository for all or some of the modules.
- userprefs data may be stored on a syndication server, such that a third party may copy the XML and host it a server local to the third party. In this case, there may be one userpref per user, per module, per syndication site.
- Remote modules may be employed beyond a personalized web page.
- Remote module syndication may form the basis for creating a “componentized web” that allows the sharing of blocks of content with various sites, pages, servers, etc., through remote modules.
- Remote module syndication may be provided through infrastructure, module discovery, and technical services. Examples of infrastructure may include hosting, providing bandwidth and storage, other APIs such as Maps API and UDP servers, performance, tracking, and internationalization (il8n) message catalogs.
- Module discovery may include providing information through user traffic, search and browse engines, and relevance rankings.
- Other technical services may include documentation, examples, technical support, developer communities, legal support, and trust and safety.
- Inlining may also be a valuable addition to remote module syndication. While IFRAME may be limited to fitting the content within a predetermined height and width area, which is difficult to predict accuracy, e.g., font sizes, etc., inlined modules may be auto-sized to exactly fit the content. For example, the horoscope module of FIG. 13 may employ this addition because readings may vary significantly in length.
- Inlined modules may be faster to load than IFRAME modules.
- Inline-only modules may also be easier to write than modules that work with both inline and IFRAME construction.
- Syndicators may prefer inline-only modules as well. By lifting the restriction that syndication forces IFRAMEs, module authors may have extra incentive to use inline techniques.
- FIG. 3 depicts an example of a method 300 used to add a module to a container document.
- a container document may be opened into which a new module is to be added. This may be performed by presenting the container document to a user or by a computer software element opening the container document to determine its contents, for example.
- a selection of content to be added is received. This content selection may be received from a user such as through the inputs described with reference to FIG. 2 or FIG. 4 or through some other mechanism by which the user may provide an indication of a module to be added to the container.
- modules may be provided through an automated process whereby the system determines a module to be added based upon various inputs.
- a user input of, for example, a request to add content through module 103 of container page 100 in block 308 it may be determined whether the user is requesting the addition of a module through a list of available modules or through a reference. If the user is providing an input from a list, the content from a menu selection may be received in block 310 . That may be achieved by interaction of the user with an interface such as that depicted in FIG. 2 or FIG. 4 by selecting one or more modules presented such as that in 124 or 403 for example. Other methods of receiving a selection of a module may also be provided. If the user is providing a selection of a module from a reference, then in block 312 , a location reference may be received.
- an optional block 313 and 315 may also be provided.
- Block 313 if the user's remote location identifier ends with a slash, for example, or other indicator that the user is asking for files at the location to be retrieved, then in block 315 , a list of possible modules may be displayed.
- Block 315 may involve taking the remote location identifier provided by the user and quering that location for a listing of files or data representing module specifications, and presenting the received response to that query in a list for the user to choose. For example, the user may be provided a list of files of module specifications at the location provided whereby the user may select in block 317 one of those presented files.
- the system may in block 315 retrieve a listing of all files containing module specifications at the location of the URL whereby the user may choose one of the files, such as one of the XML files in block 317 .
- the system may automatically guess from the content or provide a directory listing or object listing (e.g., through a database query) using web server resources, such as an Apache webserver directory call or IIS directory call.
- the list may be formatted in a way to make it easy to select such as by highlighting more likely choices.
- the system may optionally enable the user to confirm the selection of the module to be added before the container page is updated.
- an optional approval block 318 may occur after blocks 310 and/or 312 and/or 317 .
- the operator of the container document may desire to protect the security of the container as well as the security of the user systems interacting with the container. Accordingly, one or more actions may be taken to determine whether the module is approved prior to enabling the content to be incorporated in the container. For example, an evaluation of the content may occur to determine whether a module is trustworthy, for example if there are not HTML tags or other characteristics determined to be trusted. These actions are described in greater detail below. If the approval is not met, then in block 320 , one or more unapproved responses may occur as described above with reference to analysis module 28 .
- the updated container document may be presented to the user or to whomever has provided the input of the module to add to the container.
- FIG. 5 depicts a module specification according to one embodiment of the present invention.
- the specification may comprise a plurality of elements including the XML version information, module preferences, which may be optional, user preferences, which may be optional, a content type designator and then a content element that is used to populate the portion of the container allocated for the module.
- the content may be specified in various forms of code, typically code that is interpretable by a user system when generating the container for presentation. Such code may include HTML, JavaScript, or other forms of code that may be used to depict the format of a web page.
- the module specification may be embedded in one or more other files or computer instructions.
- the module server 14 may, when provided with the identification of data for generating a module, look for a module specification within the data.
- One of the forms of data may be another HTML file, as depicted in an illustrative example of FIG. 6 .
- a document specification may be provided as shown for example in FIG. 6 .
- This example is a simple form of a module that would depict the words, “Hello world!”, within the portion of the container to which it has been allocated.
- the document specification is contained within another HTML page and accordingly the file in which the document specification is located likely would have the suffix of .htm or .html.
- a computer instruction such as “debut,” “about” or some other instruction may be identified that provides the specification.
- the document specification may comprise an XML type file
- the source of the module specification may actually be another form of data or file type from which the module specification may be identified.
- a repository of data may alter, modify, change, or corrupt a module specification.
- many data repositories “escape” HTML or XML content when it is stored and used as a source. Some system may then unescape the source code for presentation. Accordingly, if a module specification is included in data that has been escaped, a module server or specification server may detect that the code has been escaped, determine the manner of unescaping to be used (e.g., based on the source, based on the type of codes used or other techniques) and then unescape the data to return it to its original form.
- FIG. 6 ( b ) illustrates an example of the file of FIG. 6 after it has been escaped. In this example, the symbol “ ⁇ ” has been changed to “<” and the symbol “>” has been changed to “>” and several other changes have been made.
- the module server or specification server may detect the alteration or modification, determine how to reverse the alteration or modification or otherwise output the module specification to its intended form.
- a method may be performed to generate the data from the module for inclusion in the container.
- One illustrative method of doing so may be depicted in FIG. 7 in process 700 .
- a module reference may be received from the container.
- the container for a user may specify a plurality of different modules that are to be incorporated. It may indicate those modules by a reference to the location of the module. If the module is specified as type URL, then the module is located at a place potentially remote from the server of the container.
- block 704 and 706 may be provided.
- the status of the remote module may be determined, for example, by an analysis module 28 . If the remote module is approved in block 706 , then processing may proceed to block 710 . If it is not approved, then one or more unapproved responses may be taken in block 708 .
- block 710 the server associated with the remote module reference may be called and the data received may be evaluated.
- block 710 may involve retrieving the remote module from a cache associated with the container server.
- one or more of the activities associated with block 704 may be performed to determine whether the remote module is approved. This may be desired because as remote modules are under the control of another party, they are subject to possible change on a frequent basis. Accordingly, in between the time that a module is included into a container the first time and the time which it is displayed a second time changes may have been made to the remote module that would render it unapproved.
- the data that has been retrieved from the remote module reference is parsed to identify a module specification.
- the data may comprise a file that merely includes the module specification and therefore step 714 is used to extract the module specification from the data provided.
- the module specification is parsed to determine how to generate data and in block 718 , data is returned to the container whereby the container when accessed by a user system or other system opening the container may be able to view the contents of the remote module.
- the various activities associated with parsing the module specification 716 are provided in greater detail herein.
- FIG. 8 depicts more details regarding the activities involved in block 716 .
- the parsing operation may identify the content type specified in the module specification and take action appropriate based upon the content type. For example, for an HTML content type, the module data is resident on the server.
- module preferences may be applied if available. Greater detail regarding module preferences and how they may be applied are provided below.
- user preferences may be applied if available. Greater detail about user preferences are provided in greater detail below.
- data may be generated for delivery to the container.
- the modules may be created according to a specification.
- the module specification may specify elements that are required and those that are optional.
- content type and content may be required and user preferences and module preferences optional.
- Other embodiments may have no required elements.
- a module may be specified by an XML file, placed somewhere on the Internet where it can be found by a module server.
- the XML file that specifies a module may contain instructions on how to process and render the module that in turn may then be interpreted by the module server to render the data.
- the XML file may contain all of the data and code for the module or it can have references (e.g., URLS) for where to find the rest of the elements.
- HTML HyperText Markup Language
- URL Uniform Resource Identifier
- XSLT XSLT
- the container may embed untrusted HTML within an IFRAME for safety. Implementations may also parse the HTML content and determine that it is safe to display without a surrounding IFRAME.
- This may be a useful content type for server-side dynamic content generation.
- a url type may be served in an IFRAME. This enables the container system to obtain cookies from the site serving the data at the URL, parse user preferences correctly and other advantages.
- the default for this type of module may be IFRAME presentation as one way to protect against malicious HTML/JavaScript.
- a module may have a content section as shown below.
- ⁇ Content type “html”> ⁇ ![CDATA[ ... place where module create places HTML (or other browser recognizable code) ]]> ⁇ /Content>
- Module preferences may be optional per-module configuration information, such as preferred sizing, title, author, and so.
- An example table of module preference attribute ⁇ ModulePrefs . . . > names may include: Name Description title Optional string that provides the title of the module. This title is displayed in the module title bar on the user's personalized home page. title_url Optional string that indicates where the module resides. description Optional string that describes the module. author Optional string that lists the author of the module. author_email Optional string that provides the module author's email address. author_affiliation Optional string that specifies one or more affiliations for the author (e.g., Google or Joe's Module Developer, Inc.). height Optional positive integer that specifies the height of the area in which the module runs.
- scaling Optional boolean that specifies whether the aspect ratio (height-to-width ratio) of the module is maintained when the browser is resized. Modules that can automatically scale vertically may elect to set this to true, but modules which have a fixed height should set this to false. The default may be true.
- Scrolling Optional boolean that provides a vertical and/or horizontal scrollbars if the content exceeds the space provided. If false, then the content is clipped to the height and width provided. The default may be false.
- render_inline Optional string that indicates whether module may be displayed inline
- a ⁇ MayRequire . . . > element may specify information for compatibility and may be displayed in the directory. This information may also be used for attribute searches of modules. It may be used to provide information or validated by software within the analysis module for accuracy. In one embodiment, this attribute may be used in presenting modules in search results or browsing to enable users to understand what the module may need to operate in the way the module creator intended.
- one module that requires QuickTime, a WINDOWS platform and a Firefox browser may provide the following module preference attribute values.
- Predefined values for type and value attributes may be specified, which may be updated over time to include additional possible values.
- a logical OR may be used to interpret multiple attributes of the same type and a logical AND may be used to interpret multiple attributes of a different type. For example, multiple browsers may be specified and the interpreter understands that any of the specified browsers may be used. If a browser attribute and a plugin attribute are provided, the interpreter understands that both may be expected (the logical AND). It is also possible to use an attribute that specifies what a module will not operate with.
- it may be possible to provide an optional attribute for a code which may allow specification of a standardized code, such as an ISO 3166 code. In this variation, specification of such a specific code may override language and country attributes if present.
- Providing values for “lang” and “country” values may be optional. If one is missing, it may be interpreted as an ALL value (i.e., all languages for a specified country or all countries for a specified language).
- the interpreter may assume one country and language (e.g., US and English) or a predefined set of countries and languages.
- Shorthand values may be used as well, such as known two-digit values for countries (e.g., NZ for New Zealand, MX for Mexico, etc.).
- the list of countries may also be determined, such as by scanning content for certain words, strings, characters, etc. that are characteristic of certain locales, looking at the author information or other possible choices.
- Shorthand values may be used as well, such as known ISO two-character representations of countries (e.g., NZ for New Zealand, MX for Mexico, etc.).
- the reader_inline attribute may be an optional preference.
- predetermined values may be provided including “required” which means the module must be inlined to work properly; “never” which means the module will not work properly if inlined, and “optional” which means it will work either way.
- module specifications may be desirable to cache module specifications that would ordinarily be available from a specification server remotely located over a network from the module server. For example, if a specification server is operating on a slower connection its transmission of the module specification may cause the generation of data for the container document to be slow or unavailable
- a caching element in the module preferences may set one or more attributes that indicates the caching rule to be applied.
- a cache rule preference may specify attributes including a size element (e.g., cache the module content only when the screen size is identical, otherwise reload). This may be a default caching behavior for modules that do not want the user identification to be specified.
- Another attribute may be based on a “user” value (e.g., cache the content per-user only, for any rendering dimensions).
- Another attribute may be based on a “user,size” value combination (e.g., cache the content for a given user and given screen dimensions only). This may be the default caching behavior for modules of a url type and that accept a user identification.
- an age attribute may be specified such that modules may be cached for a certain period of time.
- the value of this attribute may be the maximum number of seconds to cache the content. This number may be suffixed with “s” for seconds, “m” for minutes, “h” for hours or “d” for days. For example,
- Modules may comprise “small” versions of applications suitable for containers such as personalized home page(s), HTML emails, portable digital devices (PDA's), telephones, cell-phones, interactive media devices, video game consoles, television overlays, etc. or any other device configured to display content based on a format (e.g., HTML).
- a format e.g., HTML
- the application may be adapted to be more concise and less cluttered with promotions and ads, etc.
- Sizing may be achieved through module preferences, with different output devices having different preferences, for example or the module specifying how to behave on different output devices that render the data for display.
- Module preferences may thus be used to enable module creators to specify screen dimensions, visibility state—e.g., full, minimized-titlebar-only, minimized-visible (e.g., visible icon on bottom or in a toolbar), minimized-invisible (e.g. only available from a menu) or closed.
- visibility state e.g., full, minimized-titlebar-only, minimized-visible (e.g., visible icon on bottom or in a toolbar), minimized-invisible (e.g. only available from a menu) or closed.
- visibility state e.g., full, minimized-titlebar-only
- minimized-visible e.g., visible icon on bottom or in a toolbar
- minimized-invisible e.g. only available from a menu
- closed closed.
- the module may be still “on” the user's page in the sense of able to response to events (including timed events) and able to interact with the system (e.g. including changing its state).
- states such as “active.”
- Illustrative examples include a weather module that remains minimized (for some definition) until there is unusual or extreme weather.
- a traffic module could remain minimized until a relevant traffic alert occurs.
- a stock module may display only stocks with changes greater than a predetermined percentage.
- a fantasy football module may be only active on weekends or within a predetermined period of time of the first game. The user may have the option to manually override these preferences from a menu, for example.
- an email module may size itself to reflect emails deemed important by some criteria.
- modules may elect to access large databases and dynamic services hosted elsewhere on the Internet.
- a weather module may expect to receive the postal code(s) the user wants to watch.
- any previous user values may get out-of-sync with the new module spec.
- the server may choose to pass preference values anyway. Old user preferences may be deleted, ignored or also passed along where the specification server may ignore them.
- An example table of user preference attribute names includes the following: Name Description name “Symbolic” name of the field; displayed to the end user during editing if no display_name is defined.
- the name field may use only letters, number and underscores, i.e. the regular expression ⁇ circumflex over ( ) ⁇ [a-zA-Z0-9_]+$.
- other designators may also be used.
- the options may include “string,” “bool” and “enum” required Optional boolean argument (“true” or “false”) indicating whether this user pref is required.
- default_value Optional string value to provide as this user pref's default value.
- num_minval Optional numeric value that indicates the minimum allowed value for this user pref.
- num_maxval Optional numeric value that indicates the maximum allowed value for this user pref.
- str_maxlen Optional numeric value that specifies a maximum string length for this user pref.
- modules may have logins and other authentications to obtain the data. This information may be passed to the specification server through the preferences.
- Other techniques may also be used to facilitate these systems, including creating special user preferences for certain module creators, anonymous user identifications passed to the specification server, placing cookies in an IFRAME for the specification server, per-user login screens and other such techniques.
- a JavaScript preferences interface may be included with a JavaScript-based module to obtain user preference passed in.
- getModuleWidth( ) retrieve the current module width in pixels.
- getUserId( ) retrieves a unique userId for the user.
- dump( ) For debugging, uses document.writeln( ) to display all of the available preferences.
- container preferences, module preferences, user preferences, syndication recipient system preferences and users of the syndication recipient system may specify preferences that might apply to a module.
- a protocol may be established that determines which preferences take precedence over others if a conflict exists. For example, if a container limits a module to 100 ⁇ 120 pixels and a module preference indicates that the module should be larger than that, the container preference may override the module preference. Or, if different time zones apply to the container, the user system and the syndication server, the time zone of the syndication server might override a user preference.
- Other protocols are also possible.
- the content section can also contain pure HTML.
- An example table of module preference attribute names is shown below: Name Description type Optional string that gives the type of the content. The possible values may be “html,” “javascript,” “xslt,” and “url” for example. The default is “html.” href Optional string that provides a destination URL. The default value is “”. cdata Optional string that indicates that the data generation portion of the specification follows.
- modules may be CGI-based front-ends to other services.
- the user may create a directory, copy an example CGI script into it, and test the CGI script.
- Scalable Vector Graphics objects e.g., Macromedia FLASH, MPEG4, etc.
- video players e.g., video players, audio players, and the like
- the module server may check for this information and determine a module to be untrusted based on inclusion of a flash object and thus serve it in an IFRAME. It is also possible that such modules may be deemed safe and rendered inline.
- Module creators may update modules. Accordingly, the module creator may have several options for users to learn about and/or begin using the newer version of a module. For example, the module creator may provide a new version of a module in the same location, thus forcing users to upgrade to the new version when the container includes a reference to that location. When a call is made to retrieve a module specification at that location reference, the specification of the new version may be retrieved. If a module creator and/or user does not want to have new versions mandatory for the users, then a new version may be made available at a different location reference in the Module Prefs.
- a new version may be notified through various mechanisms that a new version is available and provide them with the new location reference (e.g., URL) to use in identifying the newer version of the module in a container document.
- the module creator may publish to a new version to a new reference locator (e.g., URL), then modify the old location reference (e.g., URL) to provide notice to users of the upgrade.
- a new reference locator e.g., URL
- the module specification may include a field or a preference that enables a module creator to indicate that a new version of the module has been created.
- the module server may then identify an indication that a new version is available during the parsing process and modify the module data output (e.g., annotating the module titlebar with an indication such as “upgrade available,” with a link to a confirmation window, which upon confirmation updates the user's module location reference in the container document to the newer version).
- module 105 in FIG. 2 includes a selection “upgrade available” 105 a .
- module server may automatically (or based on an input in a module specification) present an option to a user to return to a previous version.
- module 106 has been provided with an “undo upgrade” selection 106 a . This may be done for a predetermined period of time, until another upgrade is available or indefinitely. Indeed, repetitive selection of “undo upgrade” may return the selection to several versions earlier of a module.
- Information related to location references of earlier versions may then be stored and accessible to the module server and/or be stored in the module specification to enable those location references to be used.
- specification server 16 may thus run a local web server (e.g., Apache server) or use a managed hosting facility which typically provides faster connection responses.
- module content may be presented in an IFRAME hosted on a domain separate from the domain of the container server.
- the IFRAME may be hosted by the same or different container server but served from a different host name (or IP address) in the URL. This may help protect users from malicious modules that might (for example) attempt to “steal” any cookies associated with the domain of the container server.
- a host server system may not want to include untrusted HTML inline without precautions.
- a malicious module if rendered inline may read or modify cookies, including authentication credentials, set by the host server system.
- the malicious module may also read or modify the container (e.g., personalized homepage associated with the host server system). It may also utilize phishing (e.g., imitating a login box) or code that replaces the entire page (via document.location) with a phishing site that looks like the personalized homepage. It may also utilize undesired pop-ups, dialog boxes or infinite looping codes.
- a malicious module could also pass information to IFRAMEs, which may then generate any of the foregoing problems in the IFRAME.
- the content may be placed in IFRAMEs.
- the content in the IFRAME may be served on numeric IP addresses.
- Another level of protection may involve HTML type modules utilizing a library of scripts that hide user preferences from being generated in the output HTML in the container.
- IFRAMEs In addition to use of IFRAMEs to render data of modules, other security features may be utilized. For example, users of the container page may be requested to acknowledge risks when adding untrusted modules to the container page. Also, untrusted models may be indicated in some manner (e.g., visual demarcation, such as a colored border).
- various functions may be disabled in the IFRAME, such as the JavaScript alert( ), confirm( ), and prompt( ) functions, which may be accomplished, in one embodiment by inserting dummy function definitions (e.g. function alert( ) ⁇ ; ⁇ ) before the actual content. Because an additional IFRAME in the content could be used to circumvent this disabling, the container may refuse to include a module that includes an IFRAME or uses the JavaScript eval( ) function.
- a module may be desired to enable a module to become inlined a container upon becoming “trusted” by the system.
- a module may be deemed trusted according to various techniques including if the module uses HTML and other codes that have been statically proven to be safe through various known techniques.
- FIG. 9 Another method of achieving sufficient level of trust for the system might involve a methodology based upon digital signatures.
- One illustrative example methodology may be depicted in FIG. 9 .
- This process 900 may involve a number of one or more blocks.
- a digital signature may be created.
- Various functions and techniques for creating digital signals are known and may be used herein.
- One such system takes various data as an input and randomly generates based upon those input a series of numbers that are unique for the particular purpose (i.e., no two people have the same digital signature).
- the digital signature may be provided by the container server and/or host server system based on a validation of the module.
- it may be manually inspected by a person associated with the container server and/or host server system or a person approved by those operators.
- the creator of a module may incorporate that digital signal into the module.
- the creator of the module may update that module design specification with code that indicates that the module supports inline generation. When this occurs, the module when rendered by the container server is presented inline with the container.
- all _MODULE_ID_strings in the module content are replaced at runtime with a unique id for that module, even for untrusted modules.
- User preferences may be accessed from an IFRAMEd or inlined module using a preferences interface described below.
- ⁇ script> // May be constructed using the —— MODULE_ID —— token. It may get replaced // at runtime with the actual ID of the remote module.
- both inlined and IFRAMEd modules may be placed in an artificial ⁇ div>.
- one of the elements of data stored in databases 20 may comprise preferences.
- preferences may be stored for each user of the system that has a personalized container document.
- preferences may be stored in association with one or more modules in the personalized container of the user.
- the system may allocate a large volume of storage for preferences for users.
- FIG. 10 illustrates an example of preferences for two users.
- one user Bob Brown, which may be a username rather than a real name, has three modules designated for inclusion in his container.
- Each module may be identified by an identifier (e.g., a numeric identifier or index to a database where the data is stored) and a location reference.
- the location reference is a URL of an XML file located at a website on the Internet.
- various preferences may be stored. In this instance, the preferences have been stored as follows: his name which equals Bob, his favorite color which equals blue, and his favorite sandwich which equals reuben. These preferences may be stored based upon the module specification for the module at www.smith.com.
- the smith.com module may specify that preferences may include the name, address, and age.
- preferences may include the name, address, and age.
- only the preferences specified in the module specification may be stored in the preferences database.
- all preferences that the user has provided may be stored in association with this module entry in the preferences database. For example, if the Smith.com module specification only calls for name and color preference information but used to also call for sandwich information, it is possible that the preference entry for this module may save the age information. When that information is passed to the module, the module may simply ignore that preference information because it is not used by the module. Also the system may track the preferences associated with the module and delete any preferences that have been stored in association with that module from the preference database that are no longer relevant.
- entries may be provided for each user that accesses the system to receive a personalized container.
- preferences may be duplicated for each module (e.g., name equals Bob is stored in association with each of the three modules for Mr. Bob Brown) it is also possible that preferences may be stored in a global table associated with the user with references made to the modules to which they apply. Any other techniques for storing preferences in association with the various modules to be included in the container for the user may also be used within the scope of the present invention.
- another security feature may be implemented with relationship to preference storage.
- preference values for users may be stored for various modules, it is important that one module not be able to modify preferences to be used for other modules, unless that is desired by the users and/or module creators (e.g., two modules that operate together, such as a maps module and weather module that show a weather map imposed on a street map based on a commonly supplied user zip code preference).
- the module server may include a token in the IFRAME or code of a module in HTML.
- the token may comprise a digital signature since the module and user may already have been deemed to be trusted. Inlined modules may then modify other modules, the container or itself.
- the IFRAME may be served on a numeric IP address without cookies associated with the container server and any associated credentials that may be included in the cookies (in contrast to an inline presentation where any cookies set by the container are accessible to the module running inline on that page, including cookies that might include a container user identification and/or module identification).
- a token may be generated that includes information about the container and/or module and/or user.
- the IFRAME may be provided with a module identification (e.g., the index of the module being displayed) and/or a container user identification (which may be encrypted).
- a token may be passed to the IFRAME and the module may then be expected to pass back that token with any request to modify, add or remove preferences.
- the token may be generated according to known token techniques, but one illustrative example is calculated as follows: Here K1 and K2 may be secret alphanumeric characters to the server.
- the module server may decrypt the data, validate that the timestamp is within a predetermined period of time of issuance (e.g., 15 minutes), look up the container user identification and module identification, calculate the signature and encrypted data and then use the module identification to update the preferences if everything matches and all requested update parameters refer to the correct module identification.
- a module identification may be generated for each version of a module as well.
- the module location reference may not be passed in the token, but may be used in the calculation to generate the encryption (e.g., HMAC encryption).
- the timestamp may be used to provide additional security. It may serve to limit the damage that could be done if an unauthorized user was able to decode the token on a particular instance. Everything in the token may be encrypted for additional safety, although lesser levels of security may also be used.
- JavaScript in a module may be created to programmatically store preference information for the user/module through use of the token system.
- a module may, with a valid token (e.g., within the time stamp range accepted), pass data to the preference storage without the user having to indicate.
- a module that provides tasks for a user may automatically upload newly added tasks to the preference storage upon entry of the new task through the module. The task list then may be stored at the preference storage.
- preference information may be used to generate data from one or more remote modules and that information may then be supplied to another remote module.
- preference information related to one or more geographic locations may be stored. Those one or more geographic locations may be provided to remote modules to generate information that may be supplied to map server 39 .
- Map server 39 may then generate a map overlayed with data based on the geographic location information, including locations of places, images of places and the like. Also, map server 39 may obtain this information and provide it to another remote module that may generate mapping output or other output.
- a string such as San Francisco, Calif. may be provided in preference information. That string may be converted to a geocode location using geocode server 37 and passed to a remote module.
- the geocode location may comprise a latitude and longitude value.
- the remote module may generate data for a map server to display a world map highlighting San Francisco, Calif. on the map. If other preference information, such as “restaurants”, is provided, then restaurant locations near San Francisco may be shown on the map. Many other examples are certainly possible within the scope of the present invention.
- a method for collecting data from a target site and reformatting it in a manner desired for display by the user may be realized.
- a module may be designed with a script that collects data from the golf site applying code that modifies and manipulates the data collected from the golf website to generate the data for presentation in the container.
- the code used by the module to collect the data from the golf website may be viewed by the golf website as a robot or other unapproved access method. This may be true particularly if the request would have been originated from a source that is unfamiliar to the golf website. For example, if the creator of such a module were a unknown operator of a website, this request may be blocked or otherwise precluded by the golf website.
- the operator of the host server system may be a known entity to the individual golf site or to the community at large. Accordingly, requests for data from this site would not ordinarily be precluded.
- a proxy server may be used to act on behalf of the module creator system to request the information from the golf site (e.g., the target collection site) by using a server associated with the host server system (the proxy server address).
- the information from the golf site may then be received by the module creator system, manipulated into a format desired by that module creator, e.g., removing all articles on a page related to the PGA tournament, highlighting information about amateur golfing, replacing names of terms in the text to suit the module creator (replacing 7 iron for mashie niblik), rearranging the content in the page to suit the module creator or any other modification, replacement, substitution, deletion, addition or action the module creator wants to apply to the data from the target collection site.
- a format desired by that module creator e.g., removing all articles on a page related to the PGA tournament, highlighting information about amateur golfing, replacing names of terms in the text to suit the module creator (replacing 7 iron for mashie niblik), rearranging the content in the page to suit the module creator or any other modification, replacement, substitution, deletion, addition or action the module creator wants to apply to the data from the target collection site.
- FIG. 11 One illustrative embodiment of such a system is depicted in FIG. 11 .
- FIG. 11 should be understood in relation to FIG. 1 in that the placement and relationship between elements as described in relation to FIG. 1 should apply to FIG. 11 as well.
- a proxy server 52 may be provided that may operate in conjunction with module server 32 and container server 12 .
- a specification server 24 may operate as the module creator system 54 as well.
- a target content server 56 is depicted.
- a module specification may be stored in a place accessible to specification server 24 .
- a target collection module may be identified.
- Module server 32 may then be called to provide the data for the module.
- Module server 32 may determine that the specification server is located at a location of specification server 24 on the network.
- the code for the target collection module may be retrieved by module server 32 from specification server 24 . That code may then be delivered to container server 12 to display to the user.
- User system 22 may open the module and, based on code in the module data, transmit a request for data from proxy server 52 to retrieve data from target content server 56 .
- the data from target content server 56 may be provided to proxy server 52 and then provided to the user system, where additional code in the module may modify and/or manipulate that data based on the code in the module. Any modifications or manipulation to that data may occur at specification server 24 and then the data may be provided to module server 32 to provide to container server 12 to generate data to the user.
- proxy server 52 and the browser systems may employ an authentication technique, such as the use of a token, as described above related to updating preferences.
- Proxy server 52 may perform requests when a specified and valid token is passed from the user system, because it was part of the module code provided to the user system.
- caching both on the proxy server and the user system may be used to expedite delivery of data and reduce the number of calls made to the target site server.
- proxy server 52 may also connect to other systems over the Internet.
- proxy server 52 may utilize an address associated with and/or approved or authorized or certified by host server system 10 to leverage the reputation of host server system 10 so that target content server 56 may respond with data.
- FIG. 12 An illustrative proxy method 1200 is depicted in FIG. 12 .
- a container document may be opened.
- a module may be identified that includes code to collect data from a target site.
- module content is transmitted in HTML to user by module server 32 .
- a user system e.g., a browser
- interprets the HTML including the code e.g., the JavaScript to collect and manipulate data
- the user system passes a request for collection of target site data to the proxy server.
- the proxy server collects data from the target site and transmits it to the user system.
- a program referred to as trawler may be used to collect data from the target site.
- Such a service typically respects the so-called robot exclusion information and host load issues, similar to techniques used to cache web page data used by web search engines.
- the user system manipulates data collected from the target site based on code in the module specification and generates display data based on the manipulated target site data.
- the user system displays a container document with manipulated (optional—the data could be the target site data without manipulation) target site data in format specified by the module.
- proxy server 52 may be operatively connected or include an analysis module 26 that performs the functionality described above in the context of proxy requests.
- proxy server 52 and analysis module 26 may analyze requests against a list of disapproved sites, disapproved actions, disapproved content, etc.
- the requests may be compared against approved site, actions, contents.
- the evaluation may be based on the location reference (e.g., URL) or the target site, the format of the request, the preference values to be provided to the target site, time, user information, module specification source, requesting system or any other input.
- the module specification may provide instructions that may control the proxy server.
- Proxy server 52 may use those instructions for operation.
- One instruction may indicate how the proxy server should obtain the data from a target site, such as by serving a fresh copy rather than using a cached version.
- Another instruction may control the cache and its operation, including indicating when the clean the cache or update the cache.
- the target sites may be able to control the proxy server operations or at least provide indications as to how it would prefer that the proxy server operate.
- a robot exclusion file (e.g., robots.txt) may be included indicating how proxy server may operate or that the proxy server may not collect data at all.
- Proxy server 52 may respect instructions provided by the target site. Mega tags may also be provided by the target sites. Other manners of providing instructions may also be provided.
- the instructions provided may indicate to proxy server 52 a number of things, including a refresh rate, attributes as to when or for whom proxy server 52 may collect content (e.g., a list of users, module specifications (by URL or otherwise denoted), types of data to be collected, etc.).
- the modification to the data may include taking data from multiple target site sources to merge results into a module output.
- a module may take a data feed from a news source and merge it with content from a blog into a single output.
- Examples may include formatting, transforming and/or reformatting RSS/Atom data feeds into an HTML output; collecting webpage HTML to create a module, e.g., for prototyping, “mashing up” content from multiple web pages and/or data feeds, applying internationalization to content, transcoding content, cleaning up “busy” content for easier presentation, including multimedia content with other forms and the like.
- Specific illustrative examples might include taking a RSS feed from a newspaper source, changing the font and adding the newspaper's logo; bolding headlines that mention a specific key word or phrase, including a fictional article periodically, turn place-names into mouse-over maps in data feeds, take data from a relatively active web site and create a module that contains essential links and/or features that a user selects and many more.
- FIG. 13 One illustrative example of a container document that includes data generated through modification of proxy data is depicted in FIG. 13 .
- a horoscope module is included in the container document that includes data collected from a horoscope RSS and then modified with text specific to the user.
- Another proxy server example is depicted in the “news” module in which news, weather and maps may be included.
- text from a news source has been collected with the term “George Bush” highlighted in the resulting information collected.
- the modules may be generated for users in a way that it is readily usable by user systems, such as browsers, without a download being required (although a download of software is certainly possible within the scope of the present invention). Users may be able to discovery content through distribution of modules that incorporate them and promotion of them on various locations. Creating a module using proxy techniques may be readily done through a set of tools that the system may publish. Further, providing a scalable back-end server for proxying and storing user preferences also provides users with the benefits of these modules.
- FIG. 16 depicts an illustrative method for syndication.
- the method may include a block 1602 for receiving a module request from a syndication recipient server.
- Module requests may comprise information for a specific module or information determined from content matches, keyword matches, or monetary values associated with a module or a syndication recipient. In another embodiment, this is particularly useful for providing a module directory service, where third parties may search for modules to incorporate to their containers.
- the syndication server may then identify one or more modules based on the module request.
- data may then be outputted by the syndication server based on one or more module specifications associated with the one or more modules.
- the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
- Syndication of remote modules may be supported by modules hard-coded into the server, inlined modules, IFRAME modules, or a combination thereof. This may provide a variety of hosting capabilities: (1) directories (including 3 rd party directories) to offer modules, (2) add-to-personalized-homepage buttons to work for modules, and (3) the ability to render such modules for use in third party sites.
- a RESTful protocol may be employed.
- REST stands for Representational State Transfer and is a software architectural style for distributed hypermedia systems like the world wide web. Systems following REST principles are often referred to as RESTful. Some key design principles of REST include stateless client/server protocol, well-defined operations, universal syntax, and use of hypermedia.
- One of most important REST concepts is the existence of resources (or pieces of information) that may be referred to by using a global identifier, such as a URL.
- FIGS. 15 ( a )-( d ) there may be various ways to view a module.
- the rendering-specific options may include: “urlparam,” “description,” “values/default,” and “examples.”
- One example of a syndicated value is:
- the height (h) and width (w) of the surrounding container is 400 and 410 respectively.
- Other variables may include “.lang” and “.country.” “.lang” is the language that the module may be rendered for and “.country” is the is the country that the country may be rendered for. These codes may also be passed to the module.
- a syndicated user added module to a container e.g., a third party website
- the URL for the module may be obtained and stored into the syndicated server database.
- a rendered module may be stored.
- a module's userprefs may be rendered before rendering the entire module.
- HTML render mode which is a rendered HTML fragment and not a complete page, may be provided by the host for container hosting.
- JavaScript and CSS may be provided by syndicators themselves to wrap the received HTML fragment as one way of incorporating the module in their container. This technique may provide syndicators the option of offering userprefs editing.
- the userprefs system may further include new datatypes, features, and widgets wherever such inclusion is possible and convenient.
- an option to provide a complete HTML page may also be possible.
- it may be suitable in a situation for IFRAMing with parameters for controlling CSS and form-submit URLs.
- One advantage of the HTML render mode versus raw XML is that it may add new edit options. In this case, these options would be the userprefs—one per user per module.
- the HTML render mode may comprise code as well as data.
- Another advantage is form validation, where logic code may be used to indicate that form fields are valid, e.g., numeric fields containing only numbers.
- some syndicators may prefer to receive “raw XML” that is unescapfified from hosting services.
- FIG. 15 ( b ) for an illustrative screenshot.
- Receiving raw XML may comprise a default action to render a remote module.
- the XML may provide syndicators the option of hosting by copying the XML and storing it locally for hosting.
- the rendered user interface is illustrated. This interface may be served by the host, providing a hosted frame or where a syndicator may choose to host.
- an encrypted protocol may be used to access userprefs such as HTTPS/SSL.
- remote module syndication may be supported with inlining modules. How this works is by taking, for example, the
- JavaScript code may be returned when executing prints of the module content into the page.
- script parameters may be included to the src URL, which when running, using AJAX techniques, for example, may fill an arbitrary object, e.g., DIV, on the screen with the content.
- Other techniques for writing the content may include document.write where filling any DOM object (not just DIVs), such as the eval( ) method. Additional methods to communicate how to do the fill may include different URLs, URL parameters, and actual values on the page itself (e.g. values buried in HTML elements such as hidden form fields and DIVs).
- Modules may support both IFRAME and inlining.
- IFRAME provides high security.
- Inlining provides many options, in terms of modifying a container page, e.g., dynamic module sizing and logo changing, which are useful, for example, in news and horoscope modules.
- the syndication design does not cover rules affecting containers since it is up to each container (hosted by the syndicator) to implement its own rules system, e.g., which modules may be allowed to be displayed and which modules may not. Modules may also control which containers they are compatible with (or allowed to be rendered in) via a new repeated element in the XML specification:
- remote module syndication Various embodiments for remote module syndication are available.
- the simplest application would include syndicating a module without any preferences (i.e., a clock module).
- the syndication server for the third party container only needs to know the URL of the module specification it wants to include.
- syndication would be for a third party who manages its own database, such as a site having list of various events (i.e., a concert listing).
- the third party may desire to have a maps module to be shown when a user wants to a view a particular event.
- the syndication recipient server would construct a query or a module request (e.g., for a maps module) to the syndication server and provide the necessary content and preference parameters.
- the syndication server finds the module and returns data based on the module specification to the syndication recipient server, for example, in the form of an HTML fragment.
- Another application would be for a third party host who may not know or may not desire to know information to include when sending a module request. This would be relevant for modules that provide greater interactivity, i.e., a maps module that also provides driving directions.
- the syndication server would need more information from the syndication recipient server in order to provide this particular module for the user.
- the syndication system may provide the space and tools for a user to create a “modularized” website.
- This application would provide users who have little or no software programming skills to be able to create a site with syndicated modules.
- the site may be hosted by the syndication host or any other desired server, and the services provided by the syndication host would be similar to that of bloggers and personal homepage creators.
- various embodiments of the present invention enable third parties to a host server system to create modules that are used on containers served by one or more host server systems or syndicated by one or more host server systems.
- These modules are created according to a specification that may be easy to understand and apply.
- Complex modules may be possible, e.g., https, authentication, support for resizing, access to built-in libraries, etc. and remote content creators may be able to develop and debug modules without downloading or learning a software development kit (SDK).
- SDK software development kit
- a standardized platform such as XML, may be used and thus, the actual code used may be any that may be interpreted by the user systems that eventually will display data related to the module.
- support for JavaScript and other languages, including more and richer libraries, documentation and example modules, and better debugging facilities may be provided.
- code may be generated for modules that performs custom rendering for RSS/Atom feeds.
- RSS/Atom is a technique to publish read-only content to the web, and many modules used on container pages are often read-only with links to pages offering richer interactivity.
- host server system 10 may maintain data about modules to enable reporting on their use. This may include information about each individual use of the module, history of the module, modifications to the module, syndication of the module, accounting information related to monetary values and agreements related to the module and many other types of information that may be useful for reporting on the module.
- Additional module types may be created as well, including an XHTML type or modules from other systems may be possible. Additional example modules that may be created include a module that takes RSS information and renders it into a format for inclusion in a container, including data from photoblogs, for example. Other modules may include an email reader for popular web-based email systems, such as Gmail, AOL Mail, MSN Hotmail and Yahoo! Mail. A module may be created to incorporate chat data and instant messaging data. Simple applets may be incorporated into modules such as clocks, calculators, notepads and the like. Other modules may be created that operate as an interface to online marketplaces for buyers and sellers of goods, such as eBay, Amazon and other online marketplaces. Modules may also be created for internal data for various entities. For example, intranet services of an entity may be rendered into modules for inclusion in a container.
- modules may involve users trading the URLs of module specs, e.g. through search engines, email, etc.
- an interface may be possible that allows various features to be added to a container through input of a request on another page. For example, on a golf site, there may be a link or button that says “add as a module to a container.” The container may be specified in advance or may be input from the user. That link or button would be operated based on code included by the creator of the underlying page as a way to have users include that content on their container, such as their personalized home page.
- an index of modules may be created through providing of module information to a search system, such as when the container document retrieves a module specification, it may be passed by the container server to the search system.
- a feedback module may be provided to collect feedback, statistics, and other data regarding modules, including information provided by users of modules, container document providers, target site operators and other parties involved in the system and/or network. This information and data may be presented to users through a ranking module or other module.
- a ranking module may rank modules based on feedback, approval, use, statistics or other criteria and may include a ranking based on user or editorial commentary.
- modules may be proposed based on input about the user or container page, including search history, keywords in documents viewed, etc. Other techniques may be used to promote modules for syndication as well.
- a module may be created that, based on a determination that it is trusted, modify the container document to allow the user to personalize certain elements of the container document (e.g., adding the user's name, image, features, logos, etc.).
- Another illustrative example module may obtain a list of other modules on the container page through interaction with the container page and obtain metadata about them, including, for example, the ability to modify the module(s), obtain user preferences for them.
- a developer module may be developed to inline or IFRAME other modules for testing purposes, refresh modules (e.g., flush or renew caches) and other actions.
Abstract
A syndication system and method for the syndication of remote modules. The system comprises a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules. The module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
Description
- This application is a continuation-in-part (CIP) of U.S. application Ser. No. 11/298,930 entitled “Remote Module Incorporation Into a Container Document,” filed Dec. 12, 2005, which is incorporated herein by reference in its entirety.
- Embodiments of the present invention relate to the syndication of remote modules.
- Many websites offer users the capability to personalize a homepage. Such websites have typically offered the user the opportunity to include predefined sections of information or data in a predefined presentation format selected from choices designed and incorporated by the website operator. The user of such systems typically may personalize the content within the sections, such as selecting specific stocks to include in a section showing stock prices. These personalized home pages provide very limited flexibility.
- This and other drawbacks exist with current systems.
- Accordingly, various exemplary embodiments may be directed to a system and method for syndication of remote modules. The system and method comprise a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules. The module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
- According to another embodiment, the system and method may comprise a directory for searching one or more modules and a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules. The module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
- Other embodiments may be considered.
-
FIG. 1 depicts an overall system architecture according to various embodiments of the present invention. -
FIG. 2 depicts an illustrative container document according to an embodiment of the present invention. -
FIG. 3 depicts an illustrative process for adding a module into a container document according to an embodiment of the present invention. -
FIG. 4 depicts an illustrative interface for identifying a module according to an embodiment of the present invention. -
FIG. 5 depicts an illustrative module specification format according to an embodiment of the present invention. -
FIG. 6 depicts an example of data containing a module specification according to an embodiment of the present invention. -
FIG. 6 (b) depicts an example of data containing an altered module specification according to an embodiment of the present invention. -
FIG. 7 depicts an illustrative process for incorporating data from a module into a container document according to an embodiment of the present invention. -
FIG. 8 depicts an illustrative process for generating data from a module according to an embodiment of the present invention. -
FIG. 9 depicts an illustrative process for enabling a module to be inlined in a container document according to an embodiment of the present invention. -
FIG. 10 depicts an illustrative listing of the types of preference information that may be stored according to an embodiment of the present invention. -
FIG. 11 depicts an illustrative system architecture according to an embodiment of the present invention. -
FIG. 12 depicts an illustrative process for delivering target server data from a module to a container document according to an embodiment of the present invention. -
FIG. 13 depicts an illustrative container document containing modules with output generated through a proxy server module according to an embodiment of the present invention. -
FIG. 14 depicts an illustrative embodiment of a third party web site incorporating a module through syndication with an advertisement included therewith according to an embodiment of the present invention. -
FIG. 15 (a) depicts a sample syndication output of rendered HTML for a module according to an embodiment of the present invention. -
FIG. 15 (b) depicts a sample syndication output of “raw XML” for a module according to an embodiment of the present invention. -
FIG. 15 (c) depicts a sample syndication output of <UserPrefs> for a module according to an embodiment of the present invention. -
FIG. 15 (d) depicts a sample syndication output of a rendered user interface of a module from host according to an embodiment of the present invention. -
FIG. 15 (e) depicts a sample RSS feed for viewing a module directory according to an embodiment of the present invention. -
FIG. 16 depicts an illustrative embodiment of a method for syndicating remote modules by a host according to an embodiment of the present invention. -
FIG. 17 depicts an illustrative architecture according to an embodiment of the present invention. - Exemplary embodiments of the invention are discussed in detail below. While specific exemplary embodiments are discussed, it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configuration can be used without departing from the spirit and scope of the invention.
- A personalized portal site (e.g. My Yahoo!, start.com, or Google Personalized Homepage) may allow the user to select only content (e.g., interactive, read-only, updating, data feeds, etc.) to display on a personalized page, such as a new email alerts, current weather and/or traffic conditions, movie showtimes, horoscopes, etc. According to one embodiment of the present invention, these various modules that may be incorporated into a personalized portal page (one example of a container document) along with modules developed (e.g., by a third party developer) for inclusion in the container.
- Various embodiments provide a protocol for communication between a hosting site (e.g., container server system) and a module server (e.g., one operated by an entity other than the user or the hosting site), process instructions that describe the functionality of a module (wherever hosted), a structured repository system for module data and code that may include fixed module data and code as well as per-user configuration information or user preferences (e.g., in a weather mapping module, the postal codes in which the user is interested), and a proxy system that enables use of target site data in a site.
- The system may comprise a number of components. The system may comprise a container server that serves a container document (e.g., a personalized page). The container document “contains” one or more modules, including one or more remote modules. As used herein, the term “container document” or “container” should be understood to include a personalized homepage of a website, a sidebar, toolbar element that incorporates one or more such modules, a page hosted by a site, a document capable of rendering modules (e.g., any document capable of rendering HTML code or XML code) in the format of the module (e.g., XML). Also, the container may be a website of another entity that incorporates the modules when the modules are supplied through a syndication system.
- As used herein, the term “module” may be understood to refer to a piece of software and/or hardware that renders data for use in a container document. Modules may be personalized to user preferences, preferences of the container, preferences of the environment or other inputs. A module specification may be understood to include a set of instructions used to render data for the container document using elements that have been predefined.
- As used herein, the term “syndication” or “syndicating” may be understood to refer to a remote module being incorporated into a container operated from a container server that is not affiliated with the module server (i.e., a remote container server or a syndication recipient server). Syndication may allow hosting remote modules on third party containers to promote web content intercompatibility support and control.
- Overview and System Architecture
-
FIG. 1 depicts an overall system diagram according to one embodiment of the present invention. As illustrated,FIG. 1 may comprise ahost server system 10 with a plurality of modules that may be associated therewith. Such modules may comprise acontainer server 12, amodule server 14, aspecification server 16, aback end server 18, ananalysis module 28, amodule creation server 32, asyndication server 34, anadvertisement server 36, ageocode server 37 and amap server 39. As illustrated, personalizedcontainer server 10 may connect over anetwork 26 to a plurality of systems. - Other systems connected to the network may comprise one or
more user systems 22, one or moreremote source systems 24, one or moremodule developer systems 30 and one or moresyndication recipient servers 38. In addition, one ormore database systems 20 may operate in conjunction with the various modules ofhost server system 10. -
Container server 12 may serve the container document touser systems 22 overnetwork 26.Container server 12 may comprise a web server or related server systems that takes data and/or instructions and formulates a container for transmission over the network to theuser system 22. It should be appreciated, however, thatcontainer server 12 may reside onuser system 22 as well so that a network connection may not be used. In the example in which the container document comprises a word processing document, for example,container server 12 may comprise a word processing module. -
Module server 14 may provide data from modules tocontainer server 12 for incorporation into a container document. It should be appreciated that in one embodiment,container server 12 andmodule server 14 may comprise a single unit performing both functions.Module server 14 may provide data for the container document by interpreting and/or parsing instructions in the module specification associated with the module. According to one embodiment,module server 14 may serve the module content to the container document through the use of a browser IFRAME. An IFRAME may be generally understood to be an independently operated browser window instance inside the container document. One advantage of an IFRAME is that is protects the container document from the FRAME's content and vice versa, e.g., JavaScript on the container document may not be permitted to access any JavaScript code in the inner IFRAME (same for CSS, DOM, or cookie objects). - To expedite display of container documents, modules may be displayed inline within the container document. Inline display may be understood as referring to display with other document elements. One example is a display generated from code for HTML in the body according to HTML standards. In one embodiment,
module server 14 or some other component may determine whether the module is deemed trusted prior to including it in the container document inline due to the risks of various security issues an inline module could create. According to one embodiment, the module may incorporate an indicia of approval (e.g., digital certificate) issued by the container module or an entity associated with the container module as described in detail below. If the indicial of approval is present,module server 14 may render the data from a module for inline presentation in the container document. -
Specification server 16 provides the module specification file tomodule server 14. The module specification may be cached and stored in a database accessible to themodule server 14 and/orspecification server 16 or may be retrieved from a location associated with the specification as detailed later. For example,specification server 16 may reside on aremote source system 24. In addition,specification server 16 may be connected to module server over a network with the module specification located at another location on the network accessible tospecification server 16. -
Backend server 18 may be provided for interacting with one or more databases (e.g., large or dynamic databases of information). For example, for a news module that obtains frequent updates and demands a flow of data, (e.g., from an RSS feed),backend server 18 may format the data into HTML for the container. - In one specific example, a person may create a module (e.g., a maps module), such as one that uses an application program interface (API) to an existing mapping program to create a module to display a map of downtown Mountain View, Calif. The module may comprise an XML specification file or module specification file stored on a specification server. The specification server may comprise any server, including one on the site from which the container page is hosted or any other site. The user or another person may then include this new module on a personalized homepage (container document). The server that serves the container document may operate as the module server and the server that generates the mapping data through an inquiry from its API may be considered to be the backend server.
- According to one embodiment of the present invention,
analysis module 28 may analyze modules at various times (e.g., when the module is first selected by a user, each time the module is called by a container for inclusion or at any other time determined to be advantageous for safety and security and other times).Analysis module 28 may perform a number of actions, including comparing the module with a list of disapproved or dangerous modules or a list of approved modules. The comparison may involve exact or substring (e.g., prefixes, suffixes and regular expressions) matching by name or location (e.g., URL), contents of the specification, contents of the location where the specification resides, or information that may be ascertainable about the module.Analysis module 28 may take one or more actions in response to a determination that the module is disapproved or dangerous, including, for example, silently blocking the request, (i.e. providing a generic error), blocking the request with an error that explains the reason it was blocked or redirecting the request to a different module specification that has been determined to be safe and related to the disapproved module (e.g., another module that relates to maps, if the first one was a disapproved mapping site or a module that includes the keyword “basketball” if the disapproved module was a basketball module). For example, through redirection, the URL of the original module may be passed to the “safe” module. The safe module may then use a proxy server, as described below, to retrieve the original URL's content. Developers may then replace the error handler to fix small bugs in the original module to be able to display the content of the original module. In another embodiment,analysis module 28 may parse the module content to determine whether it is safe, such as by compiling JavaScript or other scripts contained in the module to try to identify unsafe or undesired actions the module may perform. - One or more
module creation servers 32 may be provided. This server may operate as a “wizard” to enable module creators to create a module through an interactive process controlled bymodule creation server 32. For example,module creation server 32 may provide a series of user interfaces that enable the module creator to provide inputs that are then used by the module creator to automatically generate a module specification. For example, various module specification templates may be provided with corresponding inputs.Module creation server 32 may then take inputs supplied by a module creator, insert them into the template and then generate the module specification for the module. A preview, testing and debugging function may also be offered as part of this “wizard.” This module may be downloadable as well so it may be installed and operated at any node on the network. - A
syndication server 34 may prepare data for transmission to one or moresyndication recipient servers 38 related to modules.Syndication server 34 may receive a request for a module and/or module content and deliver that module or content to asyndication recipient server 38 overnetwork 26.Syndication server 34 may reside athost server system 10 or at another location on the network. For example, if an operator of a sports web site (an example of a syndication recipient system 38) desired to include a maps module created by aremote source system 24, it may do so through a request tosyndication server 34.Syndication server 34 may then cooperate withmodule server 14 to generate data for the container document (here the sports web site page of the syndication recipient system 38). That may involve retrieving the module specification fromremote source system 24, supplying preferences received from the syndication recipient server 38 (e.g., city information for the sports team of a page being displayed) and/or generating data for the container. It is also possible that the data may be rendered atsyndication recipient server 38 into its container document in either an IFRAME or inline.Syndication server 34 may thus syndicate modules accessible to it. It may do so based on requests for specific modules or other criteria it determines (e.g., content matches, keyword matches, monetary values associated with modules and/or syndication requesters, etc.) -
Ad server 36 may provide advertisements associated with modules to containers. For example, an advertisement may be incorporated with module data when data is delivered to a container document.Ad server 36 may operate withsyndication server 34 to deliver advertisements tosyndication recipient servers 38 based on a syndication request for a module. The advertisements may be selected byad server 36 based on a wide variety of criteria, including, but not limited to, the relationship between the content of or information about the container, module, other modules in the container, syndication recipient server information, monetary elements/relationships related to any of the foregoing and/or combinations thereof.Ad server 36 may comprise the Google AdSense system, according to one embodiment of the present invention.Ad server 36 may operate as described in one or more of the following patent applications, the subject matter of which is hereby incorporated by reference in their entirety. Specifically,ad server 36 may manage online advertising by associating two or more concepts related to a module with an advertisement and associating a bid, collectively, with the two or more keywords in the manner discussed in the context of serving advertisements with electronic documents in U.S. patent application Ser. No. 10/340,193, filed on Jan. 10, 2003, entitled “Pricing Across Keywords Associated with One or More Advertisements,” which is incorporated by reference herein in its entirety. Additional examples of presenting advertisements and managing advertising costs are discussed in U.S. patent application Ser. No. 10/340,543, filed on Jan. 10, 2003, entitled “Automated Price Maintenance for Use With a System in which Advertisements are Rendered with Relative Preferences” and U.S. patent application Ser. No. 10/340,542, filed Jan. 10, 2003, entitled “Automated Price Maintenance for Use With a System in Which Advertisements are Rendered with Relative Preference Based on Performance Information and Price Information,” which are incorporated by reference herein in their entirety. - A
geocode server 37 may be provided to generate geocode information from location descriptions as is known in the art. Ageocode server 37 may generate latitude and longitude numeric values from geographic locations. - A
map server 39 may generate map output. Mapping systems, such as Google Maps and Google Earth, may be used to generate this data. - One or
more database systems 20 may be provided that store, in any number of ways, container information, module specifications and/or related information, formatting data, per-user and per-module preference data, remote module ID data, remote module location reference data, advertisement data, advertiser data, content/monetary data, syndication recipient data, templates for modules, inputs for modules, lists of trusted and untrusted modules, approval criteria and related information and/or any other information used by the modules to operate as described herein. While a single database structure is shown, it is well understood that the data may be stored at a number of locations and in one or more systems. - While one configuration is shown in
FIG. 1 , it should be appreciated by one of ordinary skill in the art that other configurations of these various modules may also be possible. For example, the various modules depicted withinhost server system 10 may be disposed at various locations aroundnetwork 26 or at various points on several networks. In addition, whereas a singlehost server system 10 is depicted, it should be appreciated that any number of each of the modules depicted onFIG. 1 may be provided includingnetwork 26. - In one embodiment,
network 26 may comprise the Internet. Other networks may also be utilized for connecting each of the various systems and/or servers. - In addition, what is shown as
user system 22 may also operate as aremote source system 24 and/or amodule developer system 30. In other words, one computer system may operate in different capacities: as a user system, as a remote source system, as a syndication server, as a target content server, and/or a module developer system. In addition, as explained in greater detail below, each of the modules depicted withinhost server system 10 may also be disposed at auser system 22, aremote source system 24, or amodule developer system 30. Similarly,databases 20 may be associated with each of the modules depicted withinFIG. 1 depending upon the configuration desired. - Illustrative Container Document Including Modules
- According to one embodiment of the present invention, systems and method are provided to incorporate modules into a container document. One example of a container document would be a personalized home page, such as the Google Personalized Homepage currently available to users of the Google services on the Internet. Instead of restricting the types of content that a user is able to include in a container document such as a personalized home page, one or more embodiments of the present invention enable users to select modules from sources other than the source of the container document. So, for example, a user may elect to include a module in his or her personalized Google home page from a source not associated with Google.
- It should be appreciated that various forms of the container document may exist but one such illustrative example is depicted in
FIG. 2 .FIG. 2 depicts acontainer page 100 with a plurality of modules that have been incorporated into the container document. A plurality of methods of incorporation are possible including the use of the IFRAME and inline HTML techniques. These issues will be discussed in greater detail below.FIG. 2 depicts a plurality of modules including a photoremote module 101, atask list module 102, agame module 104, astock module 105, amaps module 106, aremote module 108, a remote module 210, aremote module 312, and aremote module 114. Different formats for the various modules may exist depending upon the specifications provided by the creator of the module. As depicted, some modules may provide scroll bars, and others may not. Some modules may be different sizes or shapes than other modules. In addition, some modules may offer the opportunity for the user to edit the display preferences and/or per-use data associated with the module. (See, for example,modules maps module 106, the user may be provided the opportunity to edit an address or addresses that are mapped in that module. In one embodiment, inlined modules may be automatically sized by a container document so no scrolling, height or scaling information may be provided. If a module developer wants the module to have these properties in this embodiment, an inlined module may be wrapped with a fixed size <DIV> tag and content placed in the tag. The scroll bar, height and other characteristics may be then specified for the inlined content. One of the attributes allows specifying scaling=“ . . . ” to let the developer indicate how a module may be scaled up or down for different sizes of placements in the container documents. - One of the functions provided with this
example container document 100 is the opportunity to add content to the container page through selecting theadd content element 103. Upon selecting “add content”element 103, the system may offer the user the opportunity to interactively indicate an additional element to be included in the container page. Various forms of an interface to receive that input may be provided. One illustrative form is presented inFIG. 2 toward the bottom of the page insection 120. In that section, the user may be presented with an interface element to select from a browsable list of modules that may be arranged into a categorization structure. Another section ofinput section 120 may enable the user to specify a reference to a location for a module to be incorporated into the container document. Such a section may be such as that depicted through aninput box 126 with a submitelement 128. In one illustrative example, the user may specify a location reference (e.g., the uniform resource locator (URL)) where data exists related to a module to be incorporated. As explained in greater detail below, one example of the data is an XML-based file that meets the scripting preferences of the operator of thecontainer document system 10. - Another option is depicted in
FIG. 4 wherein the user may interact with an interface that allows the user to browse through modules by category insection 402 with a plurality of indicated available modules insection 403 or for the user to utilize asearch functionality 404 where the user may put in information into asearch box 406, select thesearch button 408 and have results displayed insection 410. The results of these searches and displays may provide the location reference (e.g., URL) of data (e.g., an XML file) for use in incorporating the module and the container document as described below with reference toFIG. 3 and other descriptions provided. - In
FIG. 2 or 4, a preview of a module, author name, author affiliation and/or author email may be provided. To provide protection for email, an anonymized email forwarding feature may be used to help protect against spammer-crawlers. The display may also provide information about what a module requires or works best with using a May-Require attribute from a module preference (as described in detail below). Here the module works only with the Firefox browser and so that information is provided. Locality information may also be provided. Here, this module is designed for the Untied States and for English and Spanish. - In addition, in adding, editing or deleting modules, it may be desired to have those activities occur without a refresh of the container document. One illustrative technique for achieving this may involve use of AJAX so a module may be added to a container document without a refresh of the container document page (perhaps only a refresh of the IFRAME in which the new container is presented), or use of AJAX to remove a module without the container document being refreshed or when a developer is developing a module, being able to change modules without the container document in which they are populated having to have a page refresh in order to incorporate the changed module.
- Illustrative Container Document with Syndicated Remote Module
-
FIG. 14 depicts another illustrative example of a container. This container may be operated from a container server that is not affiliated with the module server. Thecontainer 1400 may be a third party website (here Joe's Real Estate Web Page) that lists real estate listing information. Aremote module 1401 may be incorporated through syndication from a module server. Here, the container document may be operated from a container server that is not affiliated with the remote server. For example, the remote module may comprise a mortgage calculator that Joe's Real Estate Web Page may find useful for visitors to its site. With the module, one ormore advertisements 1403 may also be provided, as illustrated. -
FIG. 17 depicts an illustrative embodiment for remote module syndication. AlthoughFIG. 17 is a simplification ofFIG. 1 , it should be understood in relation toFIG. 1 in that the placement and relationship between elements as described in relation toFIG. 1 should apply toFIG. 17 as well. - Here, a
user system 22 may connect to the Internet network to locate a website or container having modules which may be hosted on a third partysyndication recipient server 38. Thesyndication recipient server 38 may send a module request to thesyndication server 34 in thehost server system 10 so that it may cooperate with themodule server 14 to retrieve a module specification based on the module request. In another embodiment, thehost server system 10 may also have acontainer server 12 to host the website or container having modules for a third party by sending a module request to itself in a syndicated environment. The module specification may be retrieved from thehost server system 10 itself or aremote source system 24. The module specification, which may comprise a content element and optional preferences based on the module request, may be outputted back to thesyndication recipient server 38 for theuser system 22 to view and interact. - Modules may be rendered by the remote module server in several modes. The primary mode is the “HTML” render mode, which is depicted in
FIG. 15 (a). Other render modes include a “raw XML” mode and a “UserPrefs Editor” mode.” The “raw XML” mode may provide a host server the ability to inspect a module specification. The “UserPrefs Editor” mode may provide, and ultimately present, an HTML fragment that is generated by the remote module server to the end-user's browser by the host server in a variety of ways. Within the syndication framework, the module author may control which container(s) are to be supported for the module, for example, to indicate compatibility as well as for distribution control. - FIGS. 15(a)-(d) depict sample syndication outputs. As discussed above,
FIG. 15 (a) illustrates an example of a syndicated remote module output resulting from one URL that is depicted in the HTML render mode. In this example, the module may comprise an entertainment search module, such as “www.entertainmentsearchsite.com” with “famous actress” being the search topic with scroll bars (IFRAME). InFIG. 15 (b), the module output may comprise “raw XML.” Here, the XML may include the module specification, e.g., <ModulePrefs . . . >, <UserPrefs . . . >, and <Content . . . >. InFIG. 15 (c), an example set of userprefs are illustrated. The importance of the this is that “live” (or default) values (in this case, “famous actress”) come into play at the syndication site. The host may be a repository for all or some of the modules. In another embodiment, userprefs data may be stored on a syndication server, such that a third party may copy the XML and host it a server local to the third party. In this case, there may be one userpref per user, per module, per syndication site. - With syndication, remote modules may be employed beyond a personalized web page. Remote module syndication may form the basis for creating a “componentized web” that allows the sharing of blocks of content with various sites, pages, servers, etc., through remote modules. Remote module syndication may be provided through infrastructure, module discovery, and technical services. Examples of infrastructure may include hosting, providing bandwidth and storage, other APIs such as Maps API and UDP servers, performance, tracking, and internationalization (il8n) message catalogs. Module discovery may include providing information through user traffic, search and browse engines, and relevance rankings. Other technical services may include documentation, examples, technical support, developer communities, legal support, and trust and safety.
- Inlining may also be a valuable addition to remote module syndication. While IFRAME may be limited to fitting the content within a predetermined height and width area, which is difficult to predict accuracy, e.g., font sizes, etc., inlined modules may be auto-sized to exactly fit the content. For example, the horoscope module of
FIG. 13 may employ this addition because readings may vary significantly in length. - There are also several other benefits of such inlined modules used in syndication. Inlined modules may be faster to load than IFRAME modules. Inline-only modules may also be easier to write than modules that work with both inline and IFRAME construction. Syndicators may prefer inline-only modules as well. By lifting the restriction that syndication forces IFRAMEs, module authors may have extra incentive to use inline techniques.
- Illustrative Methods
-
FIG. 3 depicts an example of amethod 300 used to add a module to a container document. According to one embodiment, inblock 302, a container document may be opened into which a new module is to be added. This may be performed by presenting the container document to a user or by a computer software element opening the container document to determine its contents, for example. Inblock 304, a selection of content to be added is received. This content selection may be received from a user such as through the inputs described with reference toFIG. 2 orFIG. 4 or through some other mechanism by which the user may provide an indication of a module to be added to the container. In addition, inblock 304 modules may be provided through an automated process whereby the system determines a module to be added based upon various inputs. - In the case of a user input of, for example, a request to add content through
module 103 ofcontainer page 100, inblock 308 it may be determined whether the user is requesting the addition of a module through a list of available modules or through a reference. If the user is providing an input from a list, the content from a menu selection may be received inblock 310. That may be achieved by interaction of the user with an interface such as that depicted inFIG. 2 orFIG. 4 by selecting one or more modules presented such as that in 124 or 403 for example. Other methods of receiving a selection of a module may also be provided. If the user is providing a selection of a module from a reference, then inblock 312, a location reference may be received. To facilitate the user's ability to identify the data for the module, anoptional block block 313, if the user's remote location identifier ends with a slash, for example, or other indicator that the user is asking for files at the location to be retrieved, then inblock 315, a list of possible modules may be displayed.Block 315 may involve taking the remote location identifier provided by the user and quering that location for a listing of files or data representing module specifications, and presenting the received response to that query in a list for the user to choose. For example, the user may be provided a list of files of module specifications at the location provided whereby the user may select inblock 317 one of those presented files. For example, if the user provides a URL that ends in a slash or provides some other incomplete location reference, the system may inblock 315 retrieve a listing of all files containing module specifications at the location of the URL whereby the user may choose one of the files, such as one of the XML files inblock 317. In another example, the system may automatically guess from the content or provide a directory listing or object listing (e.g., through a database query) using web server resources, such as an Apache webserver directory call or IIS directory call. The list may be formatted in a way to make it easy to select such as by highlighting more likely choices. - In
block 314, the system may optionally enable the user to confirm the selection of the module to be added before the container page is updated. Upon performance ofblock 314 or if a confirmation action is not included in the process, afterblocks 310 and/or 312 and/or 317, anoptional approval block 318 may occur. - According to various embodiments of the present invention, the operator of the container document may desire to protect the security of the container as well as the security of the user systems interacting with the container. Accordingly, one or more actions may be taken to determine whether the module is approved prior to enabling the content to be incorporated in the container. For example, an evaluation of the content may occur to determine whether a module is trustworthy, for example if there are not HTML tags or other characteristics determined to be trusted. These actions are described in greater detail below. If the approval is not met, then in
block 320, one or more unapproved responses may occur as described above with reference toanalysis module 28. - If approval occurs, in
block 322, the updated container document may be presented to the user or to whomever has provided the input of the module to add to the container. - As described in greater detail below, according to the present invention, a specification may be provided for modules to utilize in order to be incorporated into a container document by the
host server system 10.FIG. 5 depicts a module specification according to one embodiment of the present invention. At its base level, the specification may comprise a plurality of elements including the XML version information, module preferences, which may be optional, user preferences, which may be optional, a content type designator and then a content element that is used to populate the portion of the container allocated for the module. It should be appreciated that the content may be specified in various forms of code, typically code that is interpretable by a user system when generating the container for presentation. Such code may include HTML, JavaScript, or other forms of code that may be used to depict the format of a web page. - According to another embodiment of the present invention, the module specification may be embedded in one or more other files or computer instructions. According to this embodiment, the
module server 14 may, when provided with the identification of data for generating a module, look for a module specification within the data. One of the forms of data may be another HTML file, as depicted in an illustrative example ofFIG. 6 . In this example, amongst other codes of an HTML document, a document specification may be provided as shown for example inFIG. 6 . This example is a simple form of a module that would depict the words, “Hello world!”, within the portion of the container to which it has been allocated. As is shown, the document specification is contained within another HTML page and accordingly the file in which the document specification is located likely would have the suffix of .htm or .html. - In another example, a computer instruction, such as “debut,” “about” or some other instruction may be identified that provides the specification. Thus, according to one embodiment of the present invention, although the document specification may comprise an XML type file, the source of the module specification may actually be another form of data or file type from which the module specification may be identified.
- In addition, a repository of data may alter, modify, change, or corrupt a module specification. For example, many data repositories “escape” HTML or XML content when it is stored and used as a source. Some system may then unescape the source code for presentation. Accordingly, if a module specification is included in data that has been escaped, a module server or specification server may detect that the code has been escaped, determine the manner of unescaping to be used (e.g., based on the source, based on the type of codes used or other techniques) and then unescape the data to return it to its original form.
FIG. 6 (b) illustrates an example of the file ofFIG. 6 after it has been escaped. In this example, the symbol “<” has been changed to “<” and the symbol “>” has been changed to “>” and several other changes have been made. - Similarly, with other alterations or modifications to the module specification, the module server or specification server may detect the alteration or modification, determine how to reverse the alteration or modification or otherwise output the module specification to its intended form.
- Illustrative Method of Module Handling
- Once a module has been incorporated into a container, when the container is opened or refreshed, a method may be performed to generate the data from the module for inclusion in the container. One illustrative method of doing so may be depicted in
FIG. 7 inprocess 700. - In
block 702, a module reference may be received from the container. For example, the container for a user may specify a plurality of different modules that are to be incorporated. It may indicate those modules by a reference to the location of the module. If the module is specified as type URL, then the module is located at a place potentially remote from the server of the container. According to one embodiment of the present invention, block 704 and 706 may be provided. Inblock 704, the status of the remote module may be determined, for example, by ananalysis module 28. If the remote module is approved inblock 706, then processing may proceed to block 710. If it is not approved, then one or more unapproved responses may be taken inblock 708. Inblock 710, the server associated with the remote module reference may be called and the data received may be evaluated. According to another embodiment of the present invention, block 710 may involve retrieving the remote module from a cache associated with the container server. Inoptional block 712, one or more of the activities associated withblock 704 may be performed to determine whether the remote module is approved. This may be desired because as remote modules are under the control of another party, they are subject to possible change on a frequent basis. Accordingly, in between the time that a module is included into a container the first time and the time which it is displayed a second time changes may have been made to the remote module that would render it unapproved. - In
block 714, the data that has been retrieved from the remote module reference is parsed to identify a module specification. As discussed above, the data may comprise a file that merely includes the module specification and therefore step 714 is used to extract the module specification from the data provided. Inblock 716, the module specification is parsed to determine how to generate data and inblock 718, data is returned to the container whereby the container when accessed by a user system or other system opening the container may be able to view the contents of the remote module. The various activities associated with parsing themodule specification 716 are provided in greater detail herein. -
FIG. 8 depicts more details regarding the activities involved inblock 716. Particularly inblock 802, the parsing operation may identify the content type specified in the module specification and take action appropriate based upon the content type. For example, for an HTML content type, the module data is resident on the server. Inblock 802, module preferences may be applied if available. Greater detail regarding module preferences and how they may be applied are provided below. In block 807, user preferences may be applied if available. Greater detail about user preferences are provided in greater detail below. Inblock 810, based upon module preferences if available, user preferences if available and the content and content type of the module specification, data may be generated for delivery to the container. - According to one embodiment, the modules may be created according to a specification. The module specification may specify elements that are required and those that are optional. In one embodiment, content type and content may be required and user preferences and module preferences optional. Other embodiments may have no required elements.
- According to one embodiment of the present invention, a module may be specified by an XML file, placed somewhere on the Internet where it can be found by a module server. The XML file that specifies a module may contain instructions on how to process and render the module that in turn may then be interpreted by the module server to render the data. The XML file may contain all of the data and code for the module or it can have references (e.g., URLS) for where to find the rest of the elements.
- There may be a plurality of different types of remote modules: HTML, URL, and XSLT, for example, or a smaller list of predefined types as well, such as HTML and URL.
- For <Content type=“html”>—the body of the <Content> is html and may be hosted by the
host server system 10. This may be useful for modules that incorporate JavaScript. - In one embodiment, as described herein, the container may embed untrusted HTML within an IFRAME for safety. Implementations may also parse the HTML content and determine that it is safe to display without a surrounding IFRAME.
- For <Content type=“url” href= . . . >—the body of the <Content> may be ignored, and the IFRAME src=points to the url specified in the href attribute. This may be a useful content type for server-side dynamic content generation. In one embodiment, a url type may be served in an IFRAME. This enables the container system to obtain cookies from the site serving the data at the URL, parse user preferences correctly and other advantages.
- For <Content type=“xslt” frame=yes|no href= . . . >—body of the <Content> may be an XSLT stylesheet which is applied to the content located at the URL specified in the href=attribute. Again, the default for this type of module may be IFRAME presentation as one way to protect against malicious HTML/JavaScript.
- One example HTML module is shown below:
Line Explanation <?xml version=“1.0” standard way to start XML files encoding=“UTF-8”?> <Module> indicates that this XML file contains a module for use with a container document <Content type=“html”><![CDATA[ indicates that the body of the <Content section contains HTML Hello, world! the actual HTML ]]></Content> end of the Content section - According to one embodiment, a module may have a content section as shown below.
<Content type=“html”> <![CDATA[ ... place where module create places HTML (or other browser recognizable code) ]]> </Content> - Module preferences may be optional per-module configuration information, such as preferred sizing, title, author, and so. For example,
<Module> <ModulePrefs title=“Today's place on the Internet Traffic” title_url=“http://www.placeoninternet.com/stats/” height=“200” author=“Robert Smith” author_email=“rsmith@placeoninternet.com” /> <Content ...> ... content ... </Content> </Module> - An example table of module preference attribute <ModulePrefs . . . > names may include:
Name Description title Optional string that provides the title of the module. This title is displayed in the module title bar on the user's personalized home page. title_url Optional string that indicates where the module resides. description Optional string that describes the module. author Optional string that lists the author of the module. author_email Optional string that provides the module author's email address. author_affiliation Optional string that specifies one or more affiliations for the author (e.g., Google or Joe's Module Developer, Inc.). height Optional positive integer that specifies the height of the area in which the module runs. scaling Optional boolean that specifies whether the aspect ratio (height-to-width ratio) of the module is maintained when the browser is resized. Modules that can automatically scale vertically may elect to set this to true, but modules which have a fixed height should set this to false. The default may be true. scrolling Optional boolean that provides a vertical and/or horizontal scrollbars if the content exceeds the space provided. If false, then the content is clipped to the height and width provided. The default may be false. render_inline Optional string that indicates whether module may be displayed inline - Also within the <ModulePrefs> preference attribute, a <MayRequire . . . > element may specify information for compatibility and may be displayed in the directory. This information may also be used for attribute searches of modules. It may be used to provide information or validated by software within the analysis module for accuracy. In one embodiment, this attribute may be used in presenting modules in search results or browsing to enable users to understand what the module may need to operate in the way the module creator intended.
- For example, one module that requires QuickTime, a WINDOWS platform and a Firefox browser may provide the following module preference attribute values.
<ModulePrefs ...> <MayRequire type=“plugin” value=“quicktime” /> <MayRequire type=“browser” value =“firefox” min_version=“1.06” /> <MayRequire type=“platform” value=“windows” /> this is a detailed explanation of windows </MayRequire> </ModulePrefs> - Predefined values for type and value attributes may be specified, which may be updated over time to include additional possible values. A type=other may be provided as a catch-all.
- If multiple MayRequire elements are provided, a logical OR may be used to interpret multiple attributes of the same type and a logical AND may be used to interpret multiple attributes of a different type. For example, multiple browsers may be specified and the interpreter understands that any of the specified browsers may be used. If a browser attribute and a plugin attribute are provided, the interpreter understands that both may be expected (the logical AND). It is also possible to use an attribute that specifies what a module will not operate with.
- Also within the <ModulePrefs> attribute, a <Locale . . . > element may allow a developer to specify a country and/or language for which the module is designed. It may be specified as <Locale lang=“ . . . ” country=“ . . . ”>. Semantically, this may be interpreted to indicate that the module is acceptable for users who have specified that they prefer this language and/or are located in the specified country. This may assist a container server in complying with legal restrictions. For example, if a country precludes certain types of information from being offered for sale, a sale module may detect the locale preference to present those items for sale only in countries where it is legal. It may also be used for directories and searches to hide or rank modules based on user detected or specified locale. In addition, it may be possible to provide an optional attribute for a code, which may allow specification of a standardized code, such as an ISO 3166 code. In this variation, specification of such a specific code may override language and country attributes if present.
- Providing values for “lang” and “country” values may be optional. If one is missing, it may be interpreted as an ALL value (i.e., all languages for a specified country or all countries for a specified language).
- In one embodiment, if no locale data is specified, then the interpreter may assume one country and language (e.g., US and English) or a predefined set of countries and languages. Shorthand values may be used as well, such as known two-digit values for countries (e.g., NZ for New Zealand, MX for Mexico, etc.). The list of countries may also be determined, such as by scanning content for certain words, strings, characters, etc. that are characteristic of certain locales, looking at the author information or other possible choices. Shorthand values may be used as well, such as known ISO two-character representations of countries (e.g., NZ for New Zealand, MX for Mexico, etc.).
- The reader_inline attribute may be an optional preference. In one embodiment, predetermined values may be provided including “required” which means the module must be inlined to work properly; “never” which means the module will not work properly if inlined, and “optional” which means it will work either way.
- In other embodiments, it may be desirable to cache module specifications that would ordinarily be available from a specification server remotely located over a network from the module server. For example, if a specification server is operating on a slower connection its transmission of the module specification may cause the generation of data for the container document to be slow or unavailable
- Thus, a caching element in the module preferences may set one or more attributes that indicates the caching rule to be applied. For example, for modules of url type, a cache rule preference may specify attributes including a size element (e.g., cache the module content only when the screen size is identical, otherwise reload). This may be a default caching behavior for modules that do not want the user identification to be specified. Another attribute may be based on a “user” value (e.g., cache the content per-user only, for any rendering dimensions). Another attribute may be based on a “user,size” value combination (e.g., cache the content for a given user and given screen dimensions only). This may be the default caching behavior for modules of a url type and that accept a user identification. Also, an age attribute may be specified such that modules may be cached for a certain period of time. The value of this attribute may be the maximum number of seconds to cache the content. This number may be suffixed with “s” for seconds, “m” for minutes, “h” for hours or “d” for days. For example,
- <ModulePrefs CacheMaxAge=45d> would allow caching for 45 days. For example
- <ModulePrefs CacheMaxAge=0> effectively disables caching. The default value may be infinity, which can be explicitly specified with “CacheMaxAge=infinite.”
- Modules may comprise “small” versions of applications suitable for containers such as personalized home page(s), HTML emails, portable digital devices (PDA's), telephones, cell-phones, interactive media devices, video game consoles, television overlays, etc. or any other device configured to display content based on a format (e.g., HTML). With a small screen size, the application may be adapted to be more concise and less cluttered with promotions and ads, etc. Sizing may be achieved through module preferences, with different output devices having different preferences, for example or the module specifying how to behave on different output devices that render the data for display.
- For example, to fit a module to the size of the window it is given, the module may specify a height (in pixels) using <ModulePrefs . . . height=“200”>. Also, if a module does not fit in the size provided, scrollbars may be automatically added if <ModulePrefs . . . scrolling=“true”>.
- Module preferences may thus be used to enable module creators to specify screen dimensions, visibility state—e.g., full, minimized-titlebar-only, minimized-visible (e.g., visible icon on bottom or in a toolbar), minimized-invisible (e.g. only available from a menu) or closed. In all visibility states, the module may be still “on” the user's page in the sense of able to response to events (including timed events) and able to interact with the system (e.g. including changing its state). Also, the system, end user or module may control the visibility of the module, either the “default” visibility, or the visibility under a variety of circumstances, e.g. define states such as “active.” Illustrative examples include a weather module that remains minimized (for some definition) until there is unusual or extreme weather. A traffic module could remain minimized until a relevant traffic alert occurs. A stock module may display only stocks with changes greater than a predetermined percentage. A fantasy football module may be only active on weekends or within a predetermined period of time of the first game. The user may have the option to manually override these preferences from a menu, for example. Also, as another example, an email module may size itself to reflect emails deemed important by some criteria.
- Many modules may elect to access large databases and dynamic services hosted elsewhere on the Internet. For security purposes, browsers typically require that any JavaScript “come from” (<script src= . . . >) the same host as the content it retrieves. Therefore, a module using such a technique may co-locate the JavaScript source files and the services the JavaScript code accesses. For example, here is a working Google Maps module, which uses the Maps API:
<Module> <ModulePrefs title=”Map of ——UP_loc——” height=”300” author=”John Doe” author_email=”jdoe@emailaddresse.com” /> <UserPref name=”loc” display_name=”Location” datatype=”location” required=”true” /> − <Content type=”html”> − <![CDATA[ <script src=”http://maps.google.com/maps?file=js” type=”text/javascript”></script> <div id=”map” style=”width: 100%; height: 100%;”></div> <script type=”text/javascript”> var prefs = new _IG_Prefs(——MODULE_ID——); var map = new GMap(document.getElementById(“map”)); map.addControl(new GSmallMapControl( )); map.addControl(new GMapTypeControl( )); //alert(prefs.getString(“loc.lat”) + “ “ + prefs.getString(“loc.long”)); map.centerAndZoom(new GPoint(prefs.getString(“loc.long”), prefs.getString(“loc.lat”)), 6); </script> ]]> </Content> </Module> - In connection with this example, a userpref datatype=location should geocode (i.e., turn a string into latitude and longitude).
- Many modules may accept user preference information—for example, a weather module may expect to receive the postal code(s) the user wants to watch. An example module with user preferences expected is shown below.
<?xml version=”1.0” encoding=”UTF-8” ?> <Module> <ModulePrefs title=”Weather Map” title_url= “http://www.internetplace.com/weather- map.html” height=”260” /> <UserPref name=”loc” display_name=”Location” datatype=”location” /> <Content type=”url” href=”http://www.internetplace.com/weather-map.html /> </Module> - If either the user changes the module URL, or the module specification changes, any previous user values may get out-of-sync with the new module spec. To resolve this, the server may choose to pass preference values anyway. Old user preferences may be deleted, ignored or also passed along where the specification server may ignore them.
- An example table of user preference attribute names includes the following:
Name Description name “Symbolic” name of the field; displayed to the end user during editing if no display_name is defined. In one embodiment, the name field may use only letters, number and underscores, i.e. the regular expression {circumflex over ( )}[a-zA-Z0-9_]+$. In other embodiments, other designators may also be used. display_name Optional string to display alongside the user prefs in the edit window urlparam Optional string name to pass as the param name for content type=url datatype Optional string type name (defaults to “string”) that indicates the data type of this field. The options may include “string,” “bool” and “enum” required Optional boolean argument (“true” or “false”) indicating whether this user pref is required. default_value Optional string value to provide as this user pref's default value. num_minval Optional numeric value that indicates the minimum allowed value for this user pref. num_maxval Optional numeric value that indicates the maximum allowed value for this user pref. cdata Repeated string value, in which each string is HTML. It may represent the optional data between preference tags. str_maxlen Optional numeric value that specifies a maximum string length for this user pref. - Among these preferences, some modules may have logins and other authentications to obtain the data. This information may be passed to the specification server through the preferences. Other techniques may also be used to facilitate these systems, including creating special user preferences for certain module creators, anonymous user identifications passed to the specification server, placing cookies in an IFRAME for the specification server, per-user login screens and other such techniques.
- A JavaScript preferences interface may be included with a JavaScript-based module to obtain user preference passed in. This interface may comprise a plurality of JavaScript functions including the following:
Name Description _Container_Prefs(moduleId) The preference constructor. It takes a module ID as an argument. E.g.: var prefs = new _Container_Prefs(MODULE_ID); getString(name) Retrieve the user preference identified by name as a String value. getInt(name) Retrieve the user preference identified by name as an Integer value. getBool(name) Retrieve the user preference identified by name as a Boolean value. getModuleHeight( ) Retrieve the current module height in pixels. getModuleWidth( ) Retrieve the current module width in pixels. getUserId( ) Retrieves a unique userId for the user. dump( ) For debugging, uses document.writeln( ) to display all of the available preferences. - In addition, information related to preference protocols may be used as well. For example, container preferences, module preferences, user preferences, syndication recipient system preferences and users of the syndication recipient system may specify preferences that might apply to a module. A protocol may be established that determines which preferences take precedence over others if a conflict exists. For example, if a container limits a module to 100×120 pixels and a module preference indicates that the module should be larger than that, the container preference may override the module preference. Or, if different time zones apply to the container, the user system and the syndication server, the time zone of the syndication server might override a user preference. Other protocols are also possible.
- The content section in the remote module XML file contains information about the module's content type. For example:
<Module> <ModulePrefs ... /> <Content type=“url” href=“http://www.placeontheinternet.com/cgi- bin/asah/modules/igstats.cgi” /> </Module> JavaScript example: <Module> <ModulePrefs ... /> <Content type=“html”> <![CDATA[ <script language=“JavaScript” src=“http://www.placeontheinternet.com/igoogle/modules/clock/clock.js”></script> ]]> </Content> </Module> - The content section can also contain pure HTML. An example table of module preference attribute names is shown below:
Name Description type Optional string that gives the type of the content. The possible values may be “html,” “javascript,” “xslt,” and “url” for example. The default is “html.” href Optional string that provides a destination URL. The default value is “”. cdata Optional string that indicates that the data generation portion of the specification follows. - Many modules may be CGI-based front-ends to other services. To set up a CGI script, the user may create a directory, copy an example CGI script into it, and test the CGI script.
- Scalable Vector Graphics objects (e.g., Macromedia FLASH, MPEG4, etc.), video players, audio players, and the like may be part of a module by wrapping the code for the object with HTML that refers to and invokes it. The module server may check for this information and determine a module to be untrusted based on inclusion of a flash object and thus serve it in an IFRAME. It is also possible that such modules may be deemed safe and rendered inline.
- Module creators may update modules. Accordingly, the module creator may have several options for users to learn about and/or begin using the newer version of a module. For example, the module creator may provide a new version of a module in the same location, thus forcing users to upgrade to the new version when the container includes a reference to that location. When a call is made to retrieve a module specification at that location reference, the specification of the new version may be retrieved. If a module creator and/or user does not want to have new versions mandatory for the users, then a new version may be made available at a different location reference in the Module Prefs. Users may then be notified through various mechanisms that a new version is available and provide them with the new location reference (e.g., URL) to use in identifying the newer version of the module in a container document. For example, the module creator may publish to a new version to a new reference locator (e.g., URL), then modify the old location reference (e.g., URL) to provide notice to users of the upgrade.
- In addition, in various embodiments, the module specification may include a field or a preference that enables a module creator to indicate that a new version of the module has been created. The module server may then identify an indication that a new version is available during the parsing process and modify the module data output (e.g., annotating the module titlebar with an indication such as “upgrade available,” with a link to a confirmation window, which upon confirmation updates the user's module location reference in the container document to the newer version). For illustrative purposes,
module 105 inFIG. 2 includes a selection “upgrade available” 105 a. Other methods of modifying the module data output to notify and/or accept input related to a user selection to upgrade to the newer version may also be possible based upon the inclusion of information in the module specification. In addition, it may be possible to provide a selection to enable the user to return to a previous version. For example, some users may not like an upgrade or the upgrade may have performance issues (e.g., bugs, etc.). Thus, the module server may automatically (or based on an input in a module specification) present an option to a user to return to a previous version. For illustrative purposes,module 106 has been provided with an “undo upgrade”selection 106 a. This may be done for a predetermined period of time, until another upgrade is available or indefinitely. Indeed, repetitive selection of “undo upgrade” may return the selection to several versions earlier of a module. - Information related to location references of earlier versions may then be stored and accessible to the module server and/or be stored in the module specification to enable those location references to be used.
- In various embodiments,
specification server 16 may thus run a local web server (e.g., Apache server) or use a managed hosting facility which typically provides faster connection responses. By default, module content may be presented in an IFRAME hosted on a domain separate from the domain of the container server. For example, the IFRAME may be hosted by the same or different container server but served from a different host name (or IP address) in the URL. This may help protect users from malicious modules that might (for example) attempt to “steal” any cookies associated with the domain of the container server. - A host server system may not want to include untrusted HTML inline without precautions. A malicious module if rendered inline may read or modify cookies, including authentication credentials, set by the host server system. The malicious module may also read or modify the container (e.g., personalized homepage associated with the host server system). It may also utilize phishing (e.g., imitating a login box) or code that replaces the entire page (via document.location) with a phishing site that looks like the personalized homepage. It may also utilize undesired pop-ups, dialog boxes or infinite looping codes. A malicious module could also pass information to IFRAMEs, which may then generate any of the foregoing problems in the IFRAME.
- Thus, according to various embodiments, the content may be placed in IFRAMEs. As an additional level of security, the content in the IFRAME may be served on numeric IP addresses.
- Another level of protection may involve HTML type modules utilizing a library of scripts that hide user preferences from being generated in the output HTML in the container.
- In addition to use of IFRAMEs to render data of modules, other security features may be utilized. For example, users of the container page may be requested to acknowledge risks when adding untrusted modules to the container page. Also, untrusted models may be indicated in some manner (e.g., visual demarcation, such as a colored border). In addition, various functions may be disabled in the IFRAME, such as the JavaScript alert( ), confirm( ), and prompt( ) functions, which may be accomplished, in one embodiment by inserting dummy function definitions (e.g. function alert( ) {;}) before the actual content. Because an additional IFRAME in the content could be used to circumvent this disabling, the container may refuse to include a module that includes an IFRAME or uses the JavaScript eval( ) function.
- Illustrative Inline Generation Process
- According to various embodiments of the present invention, it may be desired to present the content of a module inline of the container. There are risks associated with inlining content into the container as discussed herein. Accordingly, it may be desired to enable a module to become inlined a container upon becoming “trusted” by the system.
- A module may be deemed trusted according to various techniques including if the module uses HTML and other codes that have been statically proven to be safe through various known techniques.
- Another method of achieving sufficient level of trust for the system might involve a methodology based upon digital signatures. One illustrative example methodology may be depicted in
FIG. 9 . Thisprocess 900 may involve a number of one or more blocks. Inblock 902, a digital signature may be created. Various functions and techniques for creating digital signals are known and may be used herein. One such system takes various data as an input and randomly generates based upon those input a series of numbers that are unique for the particular purpose (i.e., no two people have the same digital signature). - The digital signature may be provided by the container server and/or host server system based on a validation of the module. In one embodiment, content of a module may be validated only if it does not include any external content such as IFRAMEs or javascript “src=” statements. In validating or certifying a module, it may be manually inspected by a person associated with the container server and/or host server system or a person approved by those operators.
- In
block 904, the creator of a module may incorporate that digital signal into the module. Inblock 906, the creator of the module may update that module design specification with code that indicates that the module supports inline generation. When this occurs, the module when rendered by the container server is presented inline with the container. - To avoid conflicts with other instances of the module on the user's screen, _MODULE_ID_ may be added to all HTML names/IDs and to all JavaScript functions and global variables. For example, var myvariable=5; becomes var myvariable_MODULE_ID—=5. At runtime, all _MODULE_ID_strings in the module content are replaced at runtime with a unique id for that module, even for untrusted modules.
- User preferences may be accessed from an IFRAMEd or inlined module using a preferences interface described below.
<script> // May be constructed using the ——MODULE_ID—— token. It may get replaced // at runtime with the actual ID of the remote module. var prefs = new _Container_Prefs(__MODULE_ID__); var someStringPref = prefs.getString(“StringPrefName”); var someIntPref = prefs.getInt(“IntPrefName”); var someBoolPref = prefs.getBool(“BoolPrefName”); </script> - To allow both inlined and IFRAMEd modules to use the same interface to get their container dimensions (for resize events), both may be placed in an artificial <div>.
- Illustrative Preference Storage
- According to another embodiment of the present invention one of the elements of data stored in
databases 20 may comprise preferences. In particular, for each user of the system that has a personalized container document, preferences may be stored. In addition, preferences may be stored in association with one or more modules in the personalized container of the user. According to one embodiment, the system may allocate a large volume of storage for preferences for users. -
FIG. 10 illustrates an example of preferences for two users. In this example, one user, Bob Brown, which may be a username rather than a real name, has three modules designated for inclusion in his container. Each module may be identified by an identifier (e.g., a numeric identifier or index to a database where the data is stored) and a location reference. In this instance, the location reference is a URL of an XML file located at a website on the Internet. In addition, for this particular module, various preferences may be stored. In this instance, the preferences have been stored as follows: his name which equals Bob, his favorite color which equals blue, and his favorite sandwich which equals reuben. These preferences may be stored based upon the module specification for the module at www.smith.com. Specifically, the smith.com module may specify that preferences may include the name, address, and age. In one embodiment, only the preferences specified in the module specification may be stored in the preferences database. In another embodiment, all preferences that the user has provided may be stored in association with this module entry in the preferences database. For example, if the Smith.com module specification only calls for name and color preference information but used to also call for sandwich information, it is possible that the preference entry for this module may save the age information. When that information is passed to the module, the module may simply ignore that preference information because it is not used by the module. Also the system may track the preferences associated with the module and delete any preferences that have been stored in association with that module from the preference database that are no longer relevant. - As
FIG. 10 illustrates, entries may be provided for each user that accesses the system to receive a personalized container. In addition, whereas thisFIG. 10 illustrates that the preferences may be duplicated for each module (e.g., name equals Bob is stored in association with each of the three modules for Mr. Bob Brown) it is also possible that preferences may be stored in a global table associated with the user with references made to the modules to which they apply. Any other techniques for storing preferences in association with the various modules to be included in the container for the user may also be used within the scope of the present invention. - According to one embodiment, another security feature may be implemented with relationship to preference storage. In particular, because preference values for users may be stored for various modules, it is important that one module not be able to modify preferences to be used for other modules, unless that is desired by the users and/or module creators (e.g., two modules that operate together, such as a maps module and weather module that show a weather map imposed on a street map based on a commonly supplied user zip code preference).
- Accordingly, to set preferences, in one embodiment, the module server may include a token in the IFRAME or code of a module in HTML. For an inline system, the token may comprise a digital signature since the module and user may already have been deemed to be trusted. Inlined modules may then modify other modules, the container or itself.
- For IFRAMEs that may be provided on less trusted modules, the IFRAME may be served on a numeric IP address without cookies associated with the container server and any associated credentials that may be included in the cookies (in contrast to an inline presentation where any cookies set by the container are accessible to the module running inline on that page, including cookies that might include a container user identification and/or module identification).
- Thus, for an IFRAME presented module, a token may be generated that includes information about the container and/or module and/or user. Thus, the IFRAME may be provided with a module identification (e.g., the index of the module being displayed) and/or a container user identification (which may be encrypted).
- A token may be passed to the IFRAME and the module may then be expected to pass back that token with any request to modify, add or remove preferences. The token may be generated according to known token techniques, but one illustrative example is calculated as follows: Here K1 and K2 may be secret alphanumeric characters to the server.
Data=EncryptK1(Compress(ContainerUserId+ModuleId+Timestamp))
Signature=HMAC K2(Data+ModuleUrl)
Token=Data+Signature - When a request to modify, add or remove a preference is received, the module server may decrypt the data, validate that the timestamp is within a predetermined period of time of issuance (e.g., 15 minutes), look up the container user identification and module identification, calculate the signature and encrypted data and then use the module identification to update the preferences if everything matches and all requested update parameters refer to the correct module identification. A module identification may be generated for each version of a module as well. Thus, the module location reference may not be passed in the token, but may be used in the calculation to generate the encryption (e.g., HMAC encryption).
- The timestamp may be used to provide additional security. It may serve to limit the damage that could be done if an unauthorized user was able to decode the token on a particular instance. Everything in the token may be encrypted for additional safety, although lesser levels of security may also be used.
- For example, JavaScript in a module may be created to programmatically store preference information for the user/module through use of the token system. Such a module may, with a valid token (e.g., within the time stamp range accepted), pass data to the preference storage without the user having to indicate. For example, a module that provides tasks for a user may automatically upload newly added tasks to the preference storage upon entry of the new task through the module. The task list then may be stored at the preference storage.
- According to another illustrative example, preference information may be used to generate data from one or more remote modules and that information may then be supplied to another remote module. For example, preference information related to one or more geographic locations may be stored. Those one or more geographic locations may be provided to remote modules to generate information that may be supplied to map
server 39.Map server 39 may then generate a map overlayed with data based on the geographic location information, including locations of places, images of places and the like. Also,map server 39 may obtain this information and provide it to another remote module that may generate mapping output or other output. - In one specific example, a string such as San Francisco, Calif. may be provided in preference information. That string may be converted to a geocode location using
geocode server 37 and passed to a remote module. The geocode location may comprise a latitude and longitude value. The remote module may generate data for a map server to display a world map highlighting San Francisco, Calif. on the map. If other preference information, such as “restaurants”, is provided, then restaurant locations near San Francisco may be shown on the map. Many other examples are certainly possible within the scope of the present invention. - Illustrative Proxy Server Collection System
- According to another embodiment of the present invention, through utilizing a module that is incorporated into a container document a method for collecting data from a target site and reformatting it in a manner desired for display by the user may be realized. For example, suppose a user is an avid fan of golf and frequents a golf website regularly. But the golfer is only interested in articles and information about how to play golf and not about events related to the PGA tour and other professional golfing events. A module may be designed with a script that collects data from the golf site applying code that modifies and manipulates the data collected from the golf website to generate the data for presentation in the container. The code used by the module to collect the data from the golf website may be viewed by the golf website as a robot or other unapproved access method. This may be true particularly if the request would have been originated from a source that is unfamiliar to the golf website. For example, if the creator of such a module were a unknown operator of a website, this request may be blocked or otherwise precluded by the golf website.
- The operator of the host server system may be a known entity to the individual golf site or to the community at large. Accordingly, requests for data from this site would not ordinarily be precluded. To utilize the trust associated with the container site a proxy server may be used to act on behalf of the module creator system to request the information from the golf site (e.g., the target collection site) by using a server associated with the host server system (the proxy server address). The information from the golf site may then be received by the module creator system, manipulated into a format desired by that module creator, e.g., removing all articles on a page related to the PGA tournament, highlighting information about amateur golfing, replacing names of terms in the text to suit the module creator (replacing 7 iron for mashie niblik), rearranging the content in the page to suit the module creator or any other modification, replacement, substitution, deletion, addition or action the module creator wants to apply to the data from the target collection site.
- One illustrative embodiment of such a system is depicted in
FIG. 11 .FIG. 11 should be understood in relation toFIG. 1 in that the placement and relationship between elements as described in relation toFIG. 1 should apply toFIG. 11 as well. As shown inFIG. 11 , aproxy server 52 may be provided that may operate in conjunction withmodule server 32 andcontainer server 12. - A
specification server 24 may operate as the module creator system 54 as well. In addition, atarget content server 56 is depicted. As discussed above, in one embodiment, a module specification may be stored in a place accessible tospecification server 24. When a container is opened bycontainer server 12, a target collection module may be identified.Module server 32 may then be called to provide the data for the module.Module server 32 may determine that the specification server is located at a location ofspecification server 24 on the network. The code for the target collection module may be retrieved bymodule server 32 fromspecification server 24. That code may then be delivered tocontainer server 12 to display to the user.User system 22 may open the module and, based on code in the module data, transmit a request for data fromproxy server 52 to retrieve data fromtarget content server 56. The data fromtarget content server 56 may be provided toproxy server 52 and then provided to the user system, where additional code in the module may modify and/or manipulate that data based on the code in the module. Any modifications or manipulation to that data may occur atspecification server 24 and then the data may be provided tomodule server 32 to provide tocontainer server 12 to generate data to the user. - To avoid the proxy being used as an open proxy, which many systems on the Internet disfavor,
proxy server 52 and the browser systems may employ an authentication technique, such as the use of a token, as described above related to updating preferences.Proxy server 52 may perform requests when a specified and valid token is passed from the user system, because it was part of the module code provided to the user system. In addition, caching both on the proxy server and the user system may be used to expedite delivery of data and reduce the number of calls made to the target site server. - It should be appreciated that
proxy server 52 may also connect to other systems over the Internet. In one embodiment,proxy server 52 may utilize an address associated with and/or approved or authorized or certified byhost server system 10 to leverage the reputation ofhost server system 10 so thattarget content server 56 may respond with data. - An
illustrative proxy method 1200 is depicted inFIG. 12 . Inblock 1202, a container document may be opened. Inblock 1204, a module may be identified that includes code to collect data from a target site. Inblock 1206, module content is transmitted in HTML to user bymodule server 32. In block 1208, a user system (e.g., a browser) interprets the HTML including the code (e.g., the JavaScript to collect and manipulate data) to collect data from the target collection site. Inblock 1210, the user system passes a request for collection of target site data to the proxy server. It should be noted that many browsers will not act on scripting language (e.g., JavaScript) that calls a server that is different from the server that sends the underlying HTML. Thus, because the proxy server and container server may be associated with a common source, the browser proceeds with the request. - In
block 1212, the proxy server collects data from the target site and transmits it to the user system. According to one illustrative embodiment, a program referred to as trawler may be used to collect data from the target site. Such a service typically respects the so-called robot exclusion information and host load issues, similar to techniques used to cache web page data used by web search engines. Inblock 1214, the user system manipulates data collected from the target site based on code in the module specification and generates display data based on the manipulated target site data. Inblock 1216, the user system displays a container document with manipulated (optional—the data could be the target site data without manipulation) target site data in format specified by the module. - According to another embodiment,
proxy server 52 may be operatively connected or include ananalysis module 26 that performs the functionality described above in the context of proxy requests. For example,proxy server 52 andanalysis module 26 may analyze requests against a list of disapproved sites, disapproved actions, disapproved content, etc. In addition, the requests may be compared against approved site, actions, contents. The evaluation may be based on the location reference (e.g., URL) or the target site, the format of the request, the preference values to be provided to the target site, time, user information, module specification source, requesting system or any other input. - According to other embodiments, the module specification may provide instructions that may control the proxy server.
Proxy server 52 may use those instructions for operation. One instruction may indicate how the proxy server should obtain the data from a target site, such as by serving a fresh copy rather than using a cached version. Another instruction may control the cache and its operation, including indicating when the clean the cache or update the cache. - According to another embodiment, the target sites may be able to control the proxy server operations or at least provide indications as to how it would prefer that the proxy server operate. A robot exclusion file (e.g., robots.txt) may be included indicating how proxy server may operate or that the proxy server may not collect data at all.
Proxy server 52 may respect instructions provided by the target site. Mega tags may also be provided by the target sites. Other manners of providing instructions may also be provided. - The instructions provided may indicate to proxy server 52 a number of things, including a refresh rate, attributes as to when or for whom
proxy server 52 may collect content (e.g., a list of users, module specifications (by URL or otherwise denoted), types of data to be collected, etc.). - According to various embodiments, the modification to the data may include taking data from multiple target site sources to merge results into a module output. For example, a module may take a data feed from a news source and merge it with content from a blog into a single output. Examples may include formatting, transforming and/or reformatting RSS/Atom data feeds into an HTML output; collecting webpage HTML to create a module, e.g., for prototyping, “mashing up” content from multiple web pages and/or data feeds, applying internationalization to content, transcoding content, cleaning up “busy” content for easier presentation, including multimedia content with other forms and the like. Specific illustrative examples might include taking a RSS feed from a newspaper source, changing the font and adding the newspaper's logo; bolding headlines that mention a specific key word or phrase, including a fictional article periodically, turn place-names into mouse-over maps in data feeds, take data from a relatively active web site and create a module that contains essential links and/or features that a user selects and many more.
- One illustrative example of a container document that includes data generated through modification of proxy data is depicted in
FIG. 13 . There, a horoscope module is included in the container document that includes data collected from a horoscope RSS and then modified with text specific to the user. Another proxy server example is depicted in the “news” module in which news, weather and maps may be included. Here, text from a news source has been collected with the term “George Bush” highlighted in the resulting information collected. - Through the use of a proxy server and/or process as described, various advantages may be realized. The modules may be generated for users in a way that it is readily usable by user systems, such as browsers, without a download being required (although a download of software is certainly possible within the scope of the present invention). Users may be able to discovery content through distribution of modules that incorporate them and promotion of them on various locations. Creating a module using proxy techniques may be readily done through a set of tools that the system may publish. Further, providing a scalable back-end server for proxying and storing user preferences also provides users with the benefits of these modules.
- Illustrative Method for Syndicating Remote Modules
-
FIG. 16 depicts an illustrative method for syndication. The method may include ablock 1602 for receiving a module request from a syndication recipient server. Module requests may comprise information for a specific module or information determined from content matches, keyword matches, or monetary values associated with a module or a syndication recipient. In another embodiment, this is particularly useful for providing a module directory service, where third parties may search for modules to incorporate to their containers. Inblock 1604, the syndication server may then identify one or more modules based on the module request. Inblock 1606, data may then be outputted by the syndication server based on one or more module specifications associated with the one or more modules. Here, the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module. - Syndication of remote modules may be supported by modules hard-coded into the server, inlined modules, IFRAME modules, or a combination thereof. This may provide a variety of hosting capabilities: (1) directories (including 3rd party directories) to offer modules, (2) add-to-personalized-homepage buttons to work for modules, and (3) the ability to render such modules for use in third party sites.
- In one embodiment, a RESTful protocol may be employed. REST stands for Representational State Transfer and is a software architectural style for distributed hypermedia systems like the world wide web. Systems following REST principles are often referred to as RESTful. Some key design principles of REST include stateless client/server protocol, well-defined operations, universal syntax, and use of hypermedia. One of most important REST concepts is the existence of resources (or pieces of information) that may be referred to by using a global identifier, such as a URL. In this case, the container page may add an IFRAME whose src=points to, e.g., a personalized homepage. For simplicity, a single URL may be used for all REST access.
- As illustrated in FIGS. 15(a)-(d), there may be various ways to view a module.
-
FIG. 15 (a) refers to an illustrative screenshot of rendered HTML, where the default action (output=html) is to render a remote module. The rendering-specific options may include: “urlparam,” “description,” “values/default,” and “examples.” One example of a syndicated value is: - http://www.entertainmentsearchsite.com_search.xml&nocache=0&up default=famous+actress&.lang=en&.country=us&w=410&h=400
- Here, the height (h) and width (w) of the surrounding container is 400 and 410 respectively. Other variables may include “.lang” and “.country.” “.lang” is the language that the module may be rendered for and “.country” is the is the country that the country may be rendered for. These codes may also be passed to the module. One advantage of a syndicated user added module to a container, e.g., a third party website, is that the URL for the module may be obtained and stored into the syndicated server database. Also, a rendered module may be stored.
- Rendering userprefs (output=edithtml) and reading userprefs (output=userprefs) may also be possible. In one embodiment, a module's userprefs may be rendered before rendering the entire module. For example, HTML render mode, which is a rendered HTML fragment and not a complete page, may be provided by the host for container hosting. In this framework, JavaScript and CSS may be provided by syndicators themselves to wrap the received HTML fragment as one way of incorporating the module in their container. This technique may provide syndicators the option of offering userprefs editing. The userprefs system may further include new datatypes, features, and widgets wherever such inclusion is possible and convenient.
- In another embodiment, an option to provide a complete HTML page may also be possible. For example, it may be suitable in a situation for IFRAMing with parameters for controlling CSS and form-submit URLs. One advantage of the HTML render mode versus raw XML is that it may add new edit options. In this case, these options would be the userprefs—one per user per module. As a result, the HTML render mode may comprise code as well as data. Another advantage is form validation, where logic code may be used to indicate that form fields are valid, e.g., numeric fields containing only numbers.
- Despite the benefits of the HTML render mode, some syndicators may prefer to receive “raw XML” that is unescapfified from hosting services. Refer to
FIG. 15 (b) for an illustrative screenshot. Using “&output=rawxml” may accomplish this. Receiving raw XML may comprise a default action to render a remote module. As discussed above, the XML may provide syndicators the option of hosting by copying the XML and storing it locally for hosting. - In
FIG. 15 (d), the rendered user interface is illustrated. This interface may be served by the host, providing a hosted frame or where a syndicator may choose to host. In another embodiment, an encrypted protocol may be used to access userprefs such as HTTPS/SSL. - In another embodiment, remote module syndication may be supported with inlining modules. How this works is by taking, for example, the
-
- <iframe src=http://www.host-site.com/syndication?module= . . . >
- and including instead
-
- <script src=http://www.host-site.com/syndication?module= . . . >.
- In addition, instead of returning HTML, JavaScript code may be returned when executing prints of the module content into the page. For asynchronous loading, script parameters may be included to the src URL, which when running, using AJAX techniques, for example, may fill an arbitrary object, e.g., DIV, on the screen with the content. Other techniques for writing the content may include document.write where filling any DOM object (not just DIVs), such as the eval( ) method. Additional methods to communicate how to do the fill may include different URLs, URL parameters, and actual values on the page itself (e.g. values buried in HTML elements such as hidden form fields and DIVs).
- Modules may support both IFRAME and inlining. IFRAME provides high security. Inlining provides many options, in terms of modifying a container page, e.g., dynamic module sizing and logo changing, which are useful, for example, in news and horoscope modules.
- The syndication design does not cover rules affecting containers since it is up to each container (hosted by the syndicator) to implement its own rules system, e.g., which modules may be allowed to be displayed and which modules may not. Modules may also control which containers they are compatible with (or allowed to be rendered in) via a new repeated element in the XML specification:
- <Syndication site=“***” allow=“<true|false>”/>
- If site=“***”, then the rule applies to all sites, such as for whitelisting or blacklisting. Rules may be applied in order, where the default rule is site=“***”, whose allow is the opposite of the first rule. For easier readability, developers may want to include this rule explicitly. If no syndication element is present, the default is to allow everywhere. Some examples include:
- <Syndication site=“bobs_site” allow=“false”/>[This allows everywhere except Bob's site]
- <Syndication site=“bobs_site” allow=“true”/>[This allows only Bob's site]
- If a large number of sites are employed within this syndication framework, scalable syntax may be provided to accommodate these rules. Sample syntax may include <Syndication href= . . . url to large ruleset . . . > or a comma-separated lists of site names.
- Various embodiments for remote module syndication are available. The simplest application would include syndicating a module without any preferences (i.e., a clock module). In this example, the syndication server for the third party container only needs to know the URL of the module specification it wants to include.
- Another application provided by syndication would be for a third party who manages its own database, such as a site having list of various events (i.e., a concert listing). The third party may desire to have a maps module to be shown when a user wants to a view a particular event. In this scenario, the syndication recipient server would construct a query or a module request (e.g., for a maps module) to the syndication server and provide the necessary content and preference parameters. Upon receipt of the module request, the syndication server finds the module and returns data based on the module specification to the syndication recipient server, for example, in the form of an HTML fragment.
- Another application, for example, would be for a third party host who may not know or may not desire to know information to include when sending a module request. This would be relevant for modules that provide greater interactivity, i.e., a maps module that also provides driving directions. Here, the syndication server would need more information from the syndication recipient server in order to provide this particular module for the user.
- In yet another application, the syndication system may provide the space and tools for a user to create a “modularized” website. This application would provide users who have little or no software programming skills to be able to create a site with syndicated modules. Here, the site may be hosted by the syndication host or any other desired server, and the services provided by the syndication host would be similar to that of bloggers and personal homepage creators.
- Other Illustrative Examples
- Accordingly, various embodiments of the present invention enable third parties to a host server system to create modules that are used on containers served by one or more host server systems or syndicated by one or more host server systems. These modules are created according to a specification that may be easy to understand and apply. Complex modules may be possible, e.g., https, authentication, support for resizing, access to built-in libraries, etc. and remote content creators may be able to develop and debug modules without downloading or learning a software development kit (SDK). In some embodiments, a standardized platform, such as XML, may be used and thus, the actual code used may be any that may be interpreted by the user systems that eventually will display data related to the module. For example, support for JavaScript and other languages, including more and richer libraries, documentation and example modules, and better debugging facilities may be provided.
- For example, code may be generated for modules that performs custom rendering for RSS/Atom feeds. RSS/Atom is a technique to publish read-only content to the web, and many modules used on container pages are often read-only with links to pages offering richer interactivity. Moreover,
host server system 10 may maintain data about modules to enable reporting on their use. This may include information about each individual use of the module, history of the module, modifications to the module, syndication of the module, accounting information related to monetary values and agreements related to the module and many other types of information that may be useful for reporting on the module. - Additional module types may be created as well, including an XHTML type or modules from other systems may be possible. Additional example modules that may be created include a module that takes RSS information and renders it into a format for inclusion in a container, including data from photoblogs, for example. Other modules may include an email reader for popular web-based email systems, such as Gmail, AOL Mail, MSN Hotmail and Yahoo! Mail. A module may be created to incorporate chat data and instant messaging data. Simple applets may be incorporated into modules such as clocks, calculators, notepads and the like. Other modules may be created that operate as an interface to online marketplaces for buyers and sellers of goods, such as eBay, Amazon and other online marketplaces. Modules may also be created for internal data for various entities. For example, intranet services of an entity may be rendered into modules for inclusion in a container.
- The use of these modules may involve users trading the URLs of module specs, e.g. through search engines, email, etc. In addition, an interface may be possible that allows various features to be added to a container through input of a request on another page. For example, on a golf site, there may be a link or button that says “add as a module to a container.” The container may be specified in advance or may be input from the user. That link or button would be operated based on code included by the creator of the underlying page as a way to have users include that content on their container, such as their personalized home page.
- In addition, an index of modules may be created through providing of module information to a search system, such as when the container document retrieves a module specification, it may be passed by the container server to the search system.
- Further, a feedback module may be provided to collect feedback, statistics, and other data regarding modules, including information provided by users of modules, container document providers, target site operators and other parties involved in the system and/or network. This information and data may be presented to users through a ranking module or other module. A ranking module may rank modules based on feedback, approval, use, statistics or other criteria and may include a ranking based on user or editorial commentary.
- Also, modules may be proposed based on input about the user or container page, including search history, keywords in documents viewed, etc. Other techniques may be used to promote modules for syndication as well.
- In another illustrative example, a module may be created that, based on a determination that it is trusted, modify the container document to allow the user to personalize certain elements of the container document (e.g., adding the user's name, image, features, logos, etc.). Another illustrative example module may obtain a list of other modules on the container page through interaction with the container page and obtain metadata about them, including, for example, the ability to modify the module(s), obtain user preferences for them. A developer module may be developed to inline or IFRAME other modules for testing purposes, refresh modules (e.g., flush or renew caches) and other actions.
- The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed, other various embodiments of and modifications to the present disclosure, in addition to those described herein, will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus, such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further, although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose, those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly, the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.
Claims (44)
1. A syndication system comprising:
a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules; and
wherein the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
2. The system of claim 1 wherein the module request comprises information for a specific module.
3. The system of claim 1 wherein the module request comprises information determined from content matches.
4. The system of claim 1 wherein the module request comprises information determined from keyword matches.
5. The system of claim 1 wherein the module request comprises information determined from one or more monetary values.
6. The system of claim 5 wherein the one or more monetary values are associated with one or more modules.
7. The system of claim 5 wherein the one or more monetary values are associated with one or more syndication recipient servers.
8. The system of claim 1 wherein the content element for one of the modules has a value that identifies a content location reference where code may be found to generate data for the module.
9. The system of claim 8 wherein the content element for another module has a value that provides code to generate data for the module.
10. The system of claim 8 wherein the content location reference comprises a URL.
11. The system of claim 1 wherein the syndication server identifies modules based on a module specification location reference associated with a container document.
12. The system of claim 11 wherein the module specification location reference comprises a URL.
13. The system of claim 1 wherein the module specification comprises a markup language document.
14. The system of claim 13 wherein the markup language document comprises an XML document.
15. The system of claim 13 wherein the markup language document comprises an HTML file.
16. The system of claim 1 wherein the module specification is embedded within other data.
17. The system of claim 16 wherein the other data comprises a web page.
18. The system of claim 1 wherein the module specification has been altered within other data.
19. The system of claim 18 wherein the module specification has been escaped within other data.
20. The system of claim 18 wherein the module specification XML-based coding has been modified within other data.
21. The system of claim 18 wherein the alteration is detected by the container server.
22. The system of claim 21 wherein the syndication server generates the module specification to its intended form.
23. The system of claim 21 wherein the alteration is an escaping of XML-based code and the syndication recipient server unescapes the XML-based code.
24. The system of claim 1 wherein the syndication recipient server and syndication server connect over the Internet.
25. The system of claim 1 further comprising a container document provided by the syndication recipient server.
26. The system of claim 25 wherein the container document comprises a web page.
27. The system of claim 25 wherein the container document comprises a personalized home page of a user.
28. The system of claim 25 wherein the container document comprises a portion of a web page.
29. The system of claim 25 wherein the container document comprises a toolbar element.
30. The system of claim 25 wherein the container document comprises a word processing document.
31. The system of claim 25 wherein the container document comprises a document that interprets markup language.
32. The system of claim 25 wherein the container document displays the module data inline.
33. The system of claim 25 wherein the container document displays the module data in an IFRAME.
34. The system of claim 25 wherein the container document comprises an interactive media device display.
35. The system of claim 25 wherein the container document comprises a system that displays television content.
36. The system of claim 25 wherein the container document comprises a system that enables telephony communication.
37. The system of claim 25 wherein the container server delivers the container document to a second remote server.
38. The system of claim 1 wherein the second remote server comprises a web server serving the container document to a web user.
39. The system of claim 1 wherein the syndication system further comprises a container server.
40. The system of claim 39 wherein the container server comprises a container document.
41. A method for syndication comprising:
receiving a module request from a syndication recipient server;
identifying one or more modules based on the module request;
outputting data based on one or more module specification associated with the one or more modules; and
wherein the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
42. A method for syndication comprising:
receiving a module request;
identifying one or more modules;
outputting data based on a module specification; and
wherein the module specification comprises a content element and one or more optional preference elements.
43. A system comprising:
a directory for searching one or more modules;
a syndication server that receives a module request from a syndication recipient server, identifies one or more modules based on the module request, and outputs data based on one or more module specifications associated with the one or more modules; and
wherein the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
44. A method comprising:
providing a directory for searching one or more modules;
receiving a module request from a syndication recipient server;
identifying one or more modules based on the module request;
outputting data based on one or more module specification associated with the one or more modules; and
wherein the module specification comprises a content element and one or more optional preference elements that enable a server to provide preferences to the module.
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/381,575 US20070204010A1 (en) | 2005-12-12 | 2006-05-04 | Remote Module Syndication System and Method |
PCT/US2007/010788 WO2007130547A2 (en) | 2006-05-04 | 2007-05-04 | Remote module syndication system and method |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/298,930 US7730082B2 (en) | 2005-12-12 | 2005-12-12 | Remote module incorporation into a container document |
US11/381,575 US20070204010A1 (en) | 2005-12-12 | 2006-05-04 | Remote Module Syndication System and Method |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/298,930 Continuation-In-Part US7730082B2 (en) | 2005-12-12 | 2005-12-12 | Remote module incorporation into a container document |
Publications (1)
Publication Number | Publication Date |
---|---|
US20070204010A1 true US20070204010A1 (en) | 2007-08-30 |
Family
ID=38668321
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/381,575 Abandoned US20070204010A1 (en) | 2005-12-12 | 2006-05-04 | Remote Module Syndication System and Method |
Country Status (2)
Country | Link |
---|---|
US (1) | US20070204010A1 (en) |
WO (1) | WO2007130547A2 (en) |
Cited By (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070055748A1 (en) * | 2005-09-06 | 2007-03-08 | Interpols Network Incorporated | Systems and methods for integrating xml syndication feeds into online advertisement |
US20070136337A1 (en) * | 2005-12-12 | 2007-06-14 | Google Inc. | Module specification for a module to be incorporated into a container document |
US20070136201A1 (en) * | 2005-12-12 | 2007-06-14 | Google Inc. | Customized container document modules using preferences |
US20070220488A1 (en) * | 2006-03-15 | 2007-09-20 | Business Objects, S.A. | Apparatus and method for automatically sizing fields within reports |
US20080034441A1 (en) * | 2006-08-07 | 2008-02-07 | Shoumen Saha | Updating content within a container document for user groups |
US20090037935A1 (en) * | 2006-08-07 | 2009-02-05 | Shoumen Saha | Updating The Configuration of Container Documents |
US20090055405A1 (en) * | 2007-08-20 | 2009-02-26 | Tinbu, Llc | Increasing Website Revenue Generation Through Distribution of Interactive Web Content |
US20090055400A1 (en) * | 2007-08-20 | 2009-02-26 | Tinbu, Llc | Interactive presentation and distribution of web content having a search feature |
US20090076916A1 (en) * | 2007-09-17 | 2009-03-19 | Interpols Network Incorporated | Systems and methods for third-party ad serving of internet widgets |
US20090094522A1 (en) * | 2007-10-04 | 2009-04-09 | Tinbu, Llc | Interactive presentation and distribution of web content |
US20090158166A1 (en) * | 2007-12-14 | 2009-06-18 | Dewar Ami H | Method, system, and computer program product for automatic rearrangement of modules based on user interaction |
US20090235349A1 (en) * | 2008-03-12 | 2009-09-17 | Intuit Inc. | Method and apparatus for securely invoking a rest api |
US20090241134A1 (en) * | 2008-03-24 | 2009-09-24 | Microsoft Corporation | Remote storage service api |
US20090276713A1 (en) * | 2008-05-01 | 2009-11-05 | Eddy Michael P | Network accessible content management methods, systems and apparatuses |
US20090300143A1 (en) * | 2008-05-28 | 2009-12-03 | Musa Segal B H | Method and apparatus for interacting with media programming in real-time using a mobile telephone device |
US20100005001A1 (en) * | 2008-06-30 | 2010-01-07 | Aizen Jonathan | Systems and methods for advertising |
WO2010116311A1 (en) * | 2009-04-05 | 2010-10-14 | Baruch Bouzaglo | Hyperlink to computer generated content |
US20110066977A1 (en) * | 2009-09-16 | 2011-03-17 | International Business Machines Corporation | Analyzing an interaction history to generate a customized webpage |
CN102298597A (en) * | 2010-06-23 | 2011-12-28 | 腾讯科技（北京）有限公司 | System and method for broadcasting webpage advertisements by using advertisement space carriers |
US20120278243A1 (en) * | 2011-04-29 | 2012-11-01 | LPS IP Holding Company LLC | Determination of Appraisal Accuracy |
US20120284607A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Content flow through containers |
US8407250B2 (en) | 2006-08-07 | 2013-03-26 | Google Inc. | Distribution of content document to varying users with security customization and scalability |
US8706757B1 (en) * | 2007-02-14 | 2014-04-22 | Yahoo! Inc. | Device, method and computer program product for generating web feeds |
US8954861B1 (en) | 2006-08-07 | 2015-02-10 | Google Inc. | Administrator configurable gadget directory for personalized start pages |
US9021447B2 (en) * | 2013-02-12 | 2015-04-28 | Concurix Corporation | Application tracing by distributed objectives |
US9575874B2 (en) | 2013-04-20 | 2017-02-21 | Microsoft Technology Licensing, Llc | Error list and bug report analysis for configuring an application tracer |
US9658936B2 (en) | 2013-02-12 | 2017-05-23 | Microsoft Technology Licensing, Llc | Optimization analysis using similar frequencies |
US9665474B2 (en) | 2013-03-15 | 2017-05-30 | Microsoft Technology Licensing, Llc | Relationships derived from trace data |
US9686304B1 (en) * | 2013-06-25 | 2017-06-20 | Symantec Corporation | Systems and methods for healing infected document files |
US9767006B2 (en) | 2013-02-12 | 2017-09-19 | Microsoft Technology Licensing, Llc | Deploying trace objectives using cost analyses |
US9772927B2 (en) | 2013-11-13 | 2017-09-26 | Microsoft Technology Licensing, Llc | User interface for selecting tracing origins for aggregating classes of trace data |
US9804949B2 (en) | 2013-02-12 | 2017-10-31 | Microsoft Technology Licensing, Llc | Periodicity optimization in an automated tracing system |
US9864672B2 (en) | 2013-09-04 | 2018-01-09 | Microsoft Technology Licensing, Llc | Module specific tracing in a shared module environment |
US10178031B2 (en) | 2013-01-25 | 2019-01-08 | Microsoft Technology Licensing, Llc | Tracing with a workload distributor |
US10353761B2 (en) | 2011-04-29 | 2019-07-16 | Black Knight Ip Holding Company, Llc | Asynchronous sensors |
US10423707B2 (en) * | 2010-09-08 | 2019-09-24 | Imdb.Com, Inc. | Techniques for displaying third party content |
US10678933B2 (en) * | 2015-10-13 | 2020-06-09 | International Business Machines Corporation | Security systems GUI application framework |
US11669816B2 (en) * | 2009-01-08 | 2023-06-06 | Visa Europe Limited | Payment system |
Citations (94)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5537526A (en) * | 1993-11-12 | 1996-07-16 | Taugent, Inc. | Method and apparatus for processing a display document utilizing a system level document framework |
US5613058A (en) * | 1992-12-01 | 1997-03-18 | Microsoft Corporation | Method and system for in-place interaction with contained objects |
US5636346A (en) * | 1994-05-09 | 1997-06-03 | The Electronic Address, Inc. | Method and system for selectively targeting advertisements and programming |
US5640579A (en) * | 1995-07-24 | 1997-06-17 | Microsoft Corporation | Method and system for logically partitioning a view of a document object from a frame in which the document object is displayed |
US5812862A (en) * | 1993-05-10 | 1998-09-22 | Apple Computer, Inc. | Computer-human interface system for compound documents |
US5910804A (en) * | 1995-01-23 | 1999-06-08 | Intergraph Corporation | OLE for design and modeling |
US5918010A (en) * | 1997-02-07 | 1999-06-29 | General Internet, Inc. | Collaborative internet data mining systems |
US5920854A (en) * | 1996-08-14 | 1999-07-06 | Infoseek Corporation | Real-time document collection search engine with phrase indexing |
US5931901A (en) * | 1996-12-09 | 1999-08-03 | Robert L. Wolfe | Programmed music on demand from the internet |
US5974398A (en) * | 1997-04-11 | 1999-10-26 | At&T Corp. | Method and apparatus enabling valuation of user access of advertising carried by interactive information and entertainment services |
US6026368A (en) * | 1995-07-17 | 2000-02-15 | 24/7 Media, Inc. | On-line interactive system and method for providing content and advertising information to a targeted set of viewers |
US6044375A (en) * | 1998-04-30 | 2000-03-28 | Hewlett-Packard Company | Automatic extraction of metadata using a neural network |
US6061659A (en) * | 1997-06-03 | 2000-05-09 | Digital Marketing Communications, Inc. | System and method for integrating a message into a graphical environment |
US6067570A (en) * | 1997-10-20 | 2000-05-23 | The Delfin Project, Inc. | Method and system for displaying and interacting with an informational message based on an information processing system event |
US6078866A (en) * | 1998-09-14 | 2000-06-20 | Searchup, Inc. | Internet site searching and listing service based on monetary ranking of site listings |
US6134552A (en) * | 1997-10-07 | 2000-10-17 | Sap Aktiengesellschaft | Knowledge provider with logical hyperlinks |
US6223163B1 (en) * | 1997-03-21 | 2001-04-24 | Walker Digital, Llc | Method and apparatus for controlling offers that are provided at a point-of-sale terminal |
US6247009B1 (en) * | 1997-03-10 | 2001-06-12 | Canon Kabushiki Kaisha | Image processing with searching of image data |
US6253189B1 (en) * | 1997-09-15 | 2001-06-26 | At&T Corp. | System and method for completing advertising time slot transactions |
US6269361B1 (en) * | 1999-05-28 | 2001-07-31 | Goto.Com | System and method for influencing a position on a search result list generated by a computer network search engine |
US6285987B1 (en) * | 1997-01-22 | 2001-09-04 | Engage, Inc. | Internet advertising system |
US6298348B1 (en) * | 1998-12-03 | 2001-10-02 | Expanse Networks, Inc. | Consumer profiling system |
US20020002509A1 (en) * | 2000-06-30 | 2002-01-03 | Wagorn Paul E. | Custom advertising and trade facilitation system for internet or e-mail implementation |
US20020002525A1 (en) * | 2000-06-30 | 2002-01-03 | Masatoshi Arai | Digital contents advertisement display system using auction |
US20020026359A1 (en) * | 2000-02-22 | 2002-02-28 | Long Kenneth W. | Targeted advertising method and system |
US20020031230A1 (en) * | 2000-08-15 | 2002-03-14 | Sweet William B. | Method and apparatus for a web-based application service model for security management |
US20020035536A1 (en) * | 2000-09-18 | 2002-03-21 | Peter Gellman | Method and system for forming a list-based value discovery network |
US20020038282A1 (en) * | 2000-09-27 | 2002-03-28 | Montgomery Rob R. | Buyer-side auction dynamic pricing agent, system, method and computer program product |
US20020046245A1 (en) * | 2000-09-29 | 2002-04-18 | Hillar Christopher J. | System and method for creating customized web pages |
US20020046104A1 (en) * | 2000-05-09 | 2002-04-18 | Geomicro, Inc. | Method and apparatus for generating targeted impressions to internet clients |
US20020046099A1 (en) * | 2000-09-05 | 2002-04-18 | Renee Frengut | Method for providing customized user interface and targeted marketing forum |
US20020077891A1 (en) * | 2000-12-15 | 2002-06-20 | Castle Daniel C. | Method and apparatus to maximize advertising revenue |
US20020087667A1 (en) * | 2000-05-22 | 2002-07-04 | Andersen Benjamin H. | Multi-level multiplexor system for networked browser |
US20020091736A1 (en) * | 2000-06-23 | 2002-07-11 | Decis E-Direct, Inc. | Component models |
US6421675B1 (en) * | 1998-03-16 | 2002-07-16 | S. L. I. Systems, Inc. | Search engine |
US20020099605A1 (en) * | 2000-10-06 | 2002-07-25 | Searchcactus, Llc | Search engine with demographic-based advertising |
US20020111898A1 (en) * | 2001-01-22 | 2002-08-15 | Chisato Numaoka | Advertisement space auction method, apparatus and storage medium |
US20020123988A1 (en) * | 2001-03-02 | 2002-09-05 | Google, Inc. | Methods and apparatus for employing usage statistics in document retrieval |
US20020143819A1 (en) * | 2000-05-31 | 2002-10-03 | Cheng Han | Web service syndication system |
US20020152197A1 (en) * | 2001-03-01 | 2002-10-17 | Stocker Jeffrey A. | Automatic generation of personal homepages for a sales force |
US20020156812A1 (en) * | 2000-09-08 | 2002-10-24 | Krasnoiarov Boris Andreyevich | Method and system for assembling concurrently-generated content |
US6473800B1 (en) * | 1998-07-15 | 2002-10-29 | Microsoft Corporation | Declarative permission requests in a computer system |
US20030028896A1 (en) * | 2001-08-03 | 2003-02-06 | Swart William D. | Video and digital multimedia aggregator remote content crawler |
US20030037334A1 (en) * | 2000-01-19 | 2003-02-20 | Denis Khoo | Method and system for providing a customized media list |
US20030070167A1 (en) * | 2001-04-18 | 2003-04-10 | Alex Holtz | Advertisement management method, system, and computer program product |
US20030126136A1 (en) * | 2001-06-22 | 2003-07-03 | Nosa Omoigui | System and method for knowledge retrieval, management, delivery and presentation |
US6601057B1 (en) * | 1999-11-05 | 2003-07-29 | Decentrix Inc. | Method and apparatus for generating and modifying multiple instances of an element of a web site |
US6601675B2 (en) * | 2001-05-10 | 2003-08-05 | Donald P. Gulledge | Locking foldable sawhorse |
US20030149618A1 (en) * | 2002-02-01 | 2003-08-07 | Microsoft Corporation | Flexible dynamic advertising |
US6677894B2 (en) * | 1998-04-28 | 2004-01-13 | Snaptrack, Inc | Method and apparatus for providing location-based information via a computer network |
US6681371B1 (en) * | 1998-12-21 | 2004-01-20 | At&T Corp. | System and method for using container documents as multi-user domain clients |
US20040015397A1 (en) * | 2002-07-16 | 2004-01-22 | Barry Christopher J. | Method and system for providing advertising through content specific nodes over the internet |
US20040019523A1 (en) * | 2002-07-25 | 2004-01-29 | Barry Christopher J. | Method and system for providing filtered and/or masked advertisements over the internet |
US20040024812A1 (en) * | 2000-11-08 | 2004-02-05 | Park Chong Mok | Content publication system for supporting real-time integration and processing of multimedia content including dynamic data, and method thereof |
US6691114B1 (en) * | 2000-06-28 | 2004-02-10 | Shobunsha Publications, Inc. | Geographical information distribution system, geographical information distribution method, geographical information distribution server, and user service providing server |
US20040044571A1 (en) * | 2002-08-27 | 2004-03-04 | Bronnimann Eric Robert | Method and system for providing advertising listing variance in distribution feeds over the internet to maximize revenue to the advertising distributor |
US20040054577A1 (en) * | 2001-06-06 | 2004-03-18 | Toshio Inoue | Advertisement selecting apparatus, advertisement selecting method and storage medium |
US20040054589A1 (en) * | 2001-06-14 | 2004-03-18 | Nicholas Frank C. | Method and system for providing network based target advertising and encapsulation |
US20040059708A1 (en) * | 2002-09-24 | 2004-03-25 | Google, Inc. | Methods and apparatus for serving relevant advertisements |
US20040059712A1 (en) * | 2002-09-24 | 2004-03-25 | Dean Jeffrey A. | Serving advertisements using information associated with e-mail |
US20040093327A1 (en) * | 2002-09-24 | 2004-05-13 | Darrell Anderson | Serving advertisements based on content |
US20040093620A1 (en) * | 2002-02-04 | 2004-05-13 | Daisuke Iino | Advertisement program providing system |
US20040119740A1 (en) * | 2002-12-24 | 2004-06-24 | Google, Inc., A Corporation Of The State Of California | Methods and apparatus for displaying and replying to electronic messages |
US20040139049A1 (en) * | 1996-08-22 | 2004-07-15 | Wgrs Licensing Company, Llc | Unified geographic database and method of creating, maintaining and using the same |
US20040143843A1 (en) * | 2000-01-19 | 2004-07-22 | Denis Khoo | Content with customized advertisement |
US20040143499A1 (en) * | 2000-11-01 | 2004-07-22 | Karl-Ludwig Dietsch | System and method for delivering plural advertisement information on a data network |
US20040153508A1 (en) * | 1999-06-30 | 2004-08-05 | Alcorn Robert L. | Internet-based education support system, method and medium providing security attributes in modular, extensible components |
US20040150673A1 (en) * | 1999-08-13 | 2004-08-05 | Oren Dobronsky | System and method for customizing electronic messages |
US20040167928A1 (en) * | 2002-09-24 | 2004-08-26 | Darrell Anderson | Serving content-relevant advertisements with client-side device support |
US20050065806A1 (en) * | 2003-06-30 | 2005-03-24 | Harik Georges R. | Generating information for online advertisements from Internet data and traditional media data |
US20050071224A1 (en) * | 2003-09-30 | 2005-03-31 | Andrew Fikes | System and method for automatically targeting web-based advertisements |
US20050096979A1 (en) * | 2003-11-03 | 2005-05-05 | Ross Koningstein | System and method for enabling an advertisement to follow the user to additional web pages |
US20050131762A1 (en) * | 2003-12-31 | 2005-06-16 | Krishna Bharat | Generating user information for use in targeted advertising |
US20050131758A1 (en) * | 2003-12-11 | 2005-06-16 | Desikan Pavan K. | Systems and methods detecting for providing advertisements in a communications network |
US20050144069A1 (en) * | 2003-12-23 | 2005-06-30 | Wiseman Leora R. | Method and system for providing targeted graphical advertisements |
US20050198120A1 (en) * | 2000-04-12 | 2005-09-08 | Webcollage Inc. | Dynamic integration of Web sites |
US20050216335A1 (en) * | 2004-03-24 | 2005-09-29 | Andrew Fikes | System and method for providing on-line user-assisted Web-based advertising |
US20050222989A1 (en) * | 2003-09-30 | 2005-10-06 | Taher Haveliwala | Results based personalization of advertisements in a search engine |
US20050222903A1 (en) * | 2004-03-31 | 2005-10-06 | Paul Buchheit | Rendering content-targeted ads with e-mail |
US20050222900A1 (en) * | 2004-03-30 | 2005-10-06 | Prashant Fuloria | Selectively delivering advertisements based at least in part on trademark issues |
US20060074913A1 (en) * | 2004-09-30 | 2006-04-06 | O'sullivan Joseph | Variable user interface based on document access privileges |
US20060173985A1 (en) * | 2005-02-01 | 2006-08-03 | Moore James F | Enhanced syndication |
US7089248B1 (en) * | 2002-11-04 | 2006-08-08 | Adobe Systems Incorporated | Group file delivery including user-defined metadata |
US7103642B1 (en) * | 2002-04-30 | 2006-09-05 | Sprint Communications Company L.P. | System and method for personalizing a home page |
US7167903B2 (en) * | 2001-04-25 | 2007-01-23 | Teacherweb, Inc. | System and method for user updateable web sites and web pages |
US20070055748A1 (en) * | 2005-09-06 | 2007-03-08 | Interpols Network Incorporated | Systems and methods for integrating xml syndication feeds into online advertisement |
US20070083670A1 (en) * | 2005-10-11 | 2007-04-12 | International Business Machines Corporation | Method and system for protecting an internet user from fraudulent ip addresses on a dns server |
US20070106803A1 (en) * | 2005-11-07 | 2007-05-10 | Pixelpass Llc | Web site subscription management system |
US7234107B1 (en) * | 1999-01-26 | 2007-06-19 | International Business Machines Corporation | System for customizing web page |
US7257604B1 (en) * | 1997-11-17 | 2007-08-14 | Wolfe Mark A | System and method for communicating information relating to a network resource |
US20080082907A1 (en) * | 2006-10-03 | 2008-04-03 | Adobe Systems Incorporated | Embedding Rendering Interface |
US7376907B2 (en) * | 1999-10-29 | 2008-05-20 | Surfcast, Inc. | System and method for simultaneous display of multiple information sources |
US7395322B2 (en) * | 2000-09-29 | 2008-07-01 | Cisco Technology, Inc. | Method and apparatus for provisioning network devices using instructions in Extensible Markup Language |
US7490295B2 (en) * | 2004-06-25 | 2009-02-10 | Apple Inc. | Layer for accessing user interface elements |
-
2006
- 2006-05-04 US US11/381,575 patent/US20070204010A1/en not_active Abandoned
-
2007
- 2007-05-04 WO PCT/US2007/010788 patent/WO2007130547A2/en active Application Filing
Patent Citations (99)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5754175A (en) * | 1992-12-01 | 1998-05-19 | Microsoft Corporation | Method and system for in-place interaction with contained objects |
US5613058A (en) * | 1992-12-01 | 1997-03-18 | Microsoft Corporation | Method and system for in-place interaction with contained objects |
US5634019A (en) * | 1992-12-01 | 1997-05-27 | Microsoft Corporation | Method and system for in-place interaction with contained objects |
US5801701A (en) * | 1992-12-01 | 1998-09-01 | Microsoft Corporation | Method and system for in-place interaction with contained objects |
US5812862A (en) * | 1993-05-10 | 1998-09-22 | Apple Computer, Inc. | Computer-human interface system for compound documents |
US5537526A (en) * | 1993-11-12 | 1996-07-16 | Taugent, Inc. | Method and apparatus for processing a display document utilizing a system level document framework |
US5636346A (en) * | 1994-05-09 | 1997-06-03 | The Electronic Address, Inc. | Method and system for selectively targeting advertisements and programming |
US5910804A (en) * | 1995-01-23 | 1999-06-08 | Intergraph Corporation | OLE for design and modeling |
US6026368A (en) * | 1995-07-17 | 2000-02-15 | 24/7 Media, Inc. | On-line interactive system and method for providing content and advertising information to a targeted set of viewers |
US5640579A (en) * | 1995-07-24 | 1997-06-17 | Microsoft Corporation | Method and system for logically partitioning a view of a document object from a frame in which the document object is displayed |
US5920854A (en) * | 1996-08-14 | 1999-07-06 | Infoseek Corporation | Real-time document collection search engine with phrase indexing |
US20040139049A1 (en) * | 1996-08-22 | 2004-07-15 | Wgrs Licensing Company, Llc | Unified geographic database and method of creating, maintaining and using the same |
US5931901A (en) * | 1996-12-09 | 1999-08-03 | Robert L. Wolfe | Programmed music on demand from the internet |
US6285987B1 (en) * | 1997-01-22 | 2001-09-04 | Engage, Inc. | Internet advertising system |
US6336132B2 (en) * | 1997-02-07 | 2002-01-01 | About.Com, Inc. | Internet resource location system with identified and approved human guides assigned to specific topics to provide content related to the topic |
US5918010A (en) * | 1997-02-07 | 1999-06-29 | General Internet, Inc. | Collaborative internet data mining systems |
US6247009B1 (en) * | 1997-03-10 | 2001-06-12 | Canon Kabushiki Kaisha | Image processing with searching of image data |
US6223163B1 (en) * | 1997-03-21 | 2001-04-24 | Walker Digital, Llc | Method and apparatus for controlling offers that are provided at a point-of-sale terminal |
US5974398A (en) * | 1997-04-11 | 1999-10-26 | At&T Corp. | Method and apparatus enabling valuation of user access of advertising carried by interactive information and entertainment services |
US6061659A (en) * | 1997-06-03 | 2000-05-09 | Digital Marketing Communications, Inc. | System and method for integrating a message into a graphical environment |
US6253189B1 (en) * | 1997-09-15 | 2001-06-26 | At&T Corp. | System and method for completing advertising time slot transactions |
US6134552A (en) * | 1997-10-07 | 2000-10-17 | Sap Aktiengesellschaft | Knowledge provider with logical hyperlinks |
US6067570A (en) * | 1997-10-20 | 2000-05-23 | The Delfin Project, Inc. | Method and system for displaying and interacting with an informational message based on an information processing system event |
US7257604B1 (en) * | 1997-11-17 | 2007-08-14 | Wolfe Mark A | System and method for communicating information relating to a network resource |
US6421675B1 (en) * | 1998-03-16 | 2002-07-16 | S. L. I. Systems, Inc. | Search engine |
US6677894B2 (en) * | 1998-04-28 | 2004-01-13 | Snaptrack, Inc | Method and apparatus for providing location-based information via a computer network |
US6044375A (en) * | 1998-04-30 | 2000-03-28 | Hewlett-Packard Company | Automatic extraction of metadata using a neural network |
US6473800B1 (en) * | 1998-07-15 | 2002-10-29 | Microsoft Corporation | Declarative permission requests in a computer system |
US6078866A (en) * | 1998-09-14 | 2000-06-20 | Searchup, Inc. | Internet site searching and listing service based on monetary ranking of site listings |
US6298348B1 (en) * | 1998-12-03 | 2001-10-02 | Expanse Networks, Inc. | Consumer profiling system |
US6681371B1 (en) * | 1998-12-21 | 2004-01-20 | At&T Corp. | System and method for using container documents as multi-user domain clients |
US7234107B1 (en) * | 1999-01-26 | 2007-06-19 | International Business Machines Corporation | System for customizing web page |
US6269361B1 (en) * | 1999-05-28 | 2001-07-31 | Goto.Com | System and method for influencing a position on a search result list generated by a computer network search engine |
US20040153508A1 (en) * | 1999-06-30 | 2004-08-05 | Alcorn Robert L. | Internet-based education support system, method and medium providing security attributes in modular, extensible components |
US20040150673A1 (en) * | 1999-08-13 | 2004-08-05 | Oren Dobronsky | System and method for customizing electronic messages |
US7376907B2 (en) * | 1999-10-29 | 2008-05-20 | Surfcast, Inc. | System and method for simultaneous display of multiple information sources |
US6601057B1 (en) * | 1999-11-05 | 2003-07-29 | Decentrix Inc. | Method and apparatus for generating and modifying multiple instances of an element of a web site |
US20030037334A1 (en) * | 2000-01-19 | 2003-02-20 | Denis Khoo | Method and system for providing a customized media list |
US20040143843A1 (en) * | 2000-01-19 | 2004-07-22 | Denis Khoo | Content with customized advertisement |
US20020026359A1 (en) * | 2000-02-22 | 2002-02-28 | Long Kenneth W. | Targeted advertising method and system |
US20050198120A1 (en) * | 2000-04-12 | 2005-09-08 | Webcollage Inc. | Dynamic integration of Web sites |
US20020046104A1 (en) * | 2000-05-09 | 2002-04-18 | Geomicro, Inc. | Method and apparatus for generating targeted impressions to internet clients |
US6912532B2 (en) * | 2000-05-22 | 2005-06-28 | Benjamin H. Andersen | Multi-level multiplexor system for networked browser |
US20020087667A1 (en) * | 2000-05-22 | 2002-07-04 | Andersen Benjamin H. | Multi-level multiplexor system for networked browser |
US20020143819A1 (en) * | 2000-05-31 | 2002-10-03 | Cheng Han | Web service syndication system |
US20020091736A1 (en) * | 2000-06-23 | 2002-07-11 | Decis E-Direct, Inc. | Component models |
US6691114B1 (en) * | 2000-06-28 | 2004-02-10 | Shobunsha Publications, Inc. | Geographical information distribution system, geographical information distribution method, geographical information distribution server, and user service providing server |
US20020002525A1 (en) * | 2000-06-30 | 2002-01-03 | Masatoshi Arai | Digital contents advertisement display system using auction |
US20020002509A1 (en) * | 2000-06-30 | 2002-01-03 | Wagorn Paul E. | Custom advertising and trade facilitation system for internet or e-mail implementation |
US20020031230A1 (en) * | 2000-08-15 | 2002-03-14 | Sweet William B. | Method and apparatus for a web-based application service model for security management |
US20020046099A1 (en) * | 2000-09-05 | 2002-04-18 | Renee Frengut | Method for providing customized user interface and targeted marketing forum |
US20020156812A1 (en) * | 2000-09-08 | 2002-10-24 | Krasnoiarov Boris Andreyevich | Method and system for assembling concurrently-generated content |
US20020035536A1 (en) * | 2000-09-18 | 2002-03-21 | Peter Gellman | Method and system for forming a list-based value discovery network |
US20020038282A1 (en) * | 2000-09-27 | 2002-03-28 | Montgomery Rob R. | Buyer-side auction dynamic pricing agent, system, method and computer program product |
US7395322B2 (en) * | 2000-09-29 | 2008-07-01 | Cisco Technology, Inc. | Method and apparatus for provisioning network devices using instructions in Extensible Markup Language |
US20020046245A1 (en) * | 2000-09-29 | 2002-04-18 | Hillar Christopher J. | System and method for creating customized web pages |
US20020099605A1 (en) * | 2000-10-06 | 2002-07-25 | Searchcactus, Llc | Search engine with demographic-based advertising |
US20040143499A1 (en) * | 2000-11-01 | 2004-07-22 | Karl-Ludwig Dietsch | System and method for delivering plural advertisement information on a data network |
US20040024812A1 (en) * | 2000-11-08 | 2004-02-05 | Park Chong Mok | Content publication system for supporting real-time integration and processing of multimedia content including dynamic data, and method thereof |
US20020077891A1 (en) * | 2000-12-15 | 2002-06-20 | Castle Daniel C. | Method and apparatus to maximize advertising revenue |
US20020111898A1 (en) * | 2001-01-22 | 2002-08-15 | Chisato Numaoka | Advertisement space auction method, apparatus and storage medium |
US20020152197A1 (en) * | 2001-03-01 | 2002-10-17 | Stocker Jeffrey A. | Automatic generation of personal homepages for a sales force |
US20020123988A1 (en) * | 2001-03-02 | 2002-09-05 | Google, Inc. | Methods and apparatus for employing usage statistics in document retrieval |
US20030070167A1 (en) * | 2001-04-18 | 2003-04-10 | Alex Holtz | Advertisement management method, system, and computer program product |
US7167903B2 (en) * | 2001-04-25 | 2007-01-23 | Teacherweb, Inc. | System and method for user updateable web sites and web pages |
US6601675B2 (en) * | 2001-05-10 | 2003-08-05 | Donald P. Gulledge | Locking foldable sawhorse |
US20040054577A1 (en) * | 2001-06-06 | 2004-03-18 | Toshio Inoue | Advertisement selecting apparatus, advertisement selecting method and storage medium |
US20040054589A1 (en) * | 2001-06-14 | 2004-03-18 | Nicholas Frank C. | Method and system for providing network based target advertising and encapsulation |
US20030126136A1 (en) * | 2001-06-22 | 2003-07-03 | Nosa Omoigui | System and method for knowledge retrieval, management, delivery and presentation |
US20030028896A1 (en) * | 2001-08-03 | 2003-02-06 | Swart William D. | Video and digital multimedia aggregator remote content crawler |
US20030149618A1 (en) * | 2002-02-01 | 2003-08-07 | Microsoft Corporation | Flexible dynamic advertising |
US20040093620A1 (en) * | 2002-02-04 | 2004-05-13 | Daisuke Iino | Advertisement program providing system |
US7103642B1 (en) * | 2002-04-30 | 2006-09-05 | Sprint Communications Company L.P. | System and method for personalizing a home page |
US20040015397A1 (en) * | 2002-07-16 | 2004-01-22 | Barry Christopher J. | Method and system for providing advertising through content specific nodes over the internet |
US20040019523A1 (en) * | 2002-07-25 | 2004-01-29 | Barry Christopher J. | Method and system for providing filtered and/or masked advertisements over the internet |
US20040044571A1 (en) * | 2002-08-27 | 2004-03-04 | Bronnimann Eric Robert | Method and system for providing advertising listing variance in distribution feeds over the internet to maximize revenue to the advertising distributor |
US20040059712A1 (en) * | 2002-09-24 | 2004-03-25 | Dean Jeffrey A. | Serving advertisements using information associated with e-mail |
US20040167928A1 (en) * | 2002-09-24 | 2004-08-26 | Darrell Anderson | Serving content-relevant advertisements with client-side device support |
US20040059708A1 (en) * | 2002-09-24 | 2004-03-25 | Google, Inc. | Methods and apparatus for serving relevant advertisements |
US20040093327A1 (en) * | 2002-09-24 | 2004-05-13 | Darrell Anderson | Serving advertisements based on content |
US7089248B1 (en) * | 2002-11-04 | 2006-08-08 | Adobe Systems Incorporated | Group file delivery including user-defined metadata |
US20040119740A1 (en) * | 2002-12-24 | 2004-06-24 | Google, Inc., A Corporation Of The State Of California | Methods and apparatus for displaying and replying to electronic messages |
US20050065806A1 (en) * | 2003-06-30 | 2005-03-24 | Harik Georges R. | Generating information for online advertisements from Internet data and traditional media data |
US20050222989A1 (en) * | 2003-09-30 | 2005-10-06 | Taher Haveliwala | Results based personalization of advertisements in a search engine |
US20050071224A1 (en) * | 2003-09-30 | 2005-03-31 | Andrew Fikes | System and method for automatically targeting web-based advertisements |
US20050096979A1 (en) * | 2003-11-03 | 2005-05-05 | Ross Koningstein | System and method for enabling an advertisement to follow the user to additional web pages |
US20050131758A1 (en) * | 2003-12-11 | 2005-06-16 | Desikan Pavan K. | Systems and methods detecting for providing advertisements in a communications network |
US20050144069A1 (en) * | 2003-12-23 | 2005-06-30 | Wiseman Leora R. | Method and system for providing targeted graphical advertisements |
US20050131762A1 (en) * | 2003-12-31 | 2005-06-16 | Krishna Bharat | Generating user information for use in targeted advertising |
US20050216335A1 (en) * | 2004-03-24 | 2005-09-29 | Andrew Fikes | System and method for providing on-line user-assisted Web-based advertising |
US20050222900A1 (en) * | 2004-03-30 | 2005-10-06 | Prashant Fuloria | Selectively delivering advertisements based at least in part on trademark issues |
US20050222903A1 (en) * | 2004-03-31 | 2005-10-06 | Paul Buchheit | Rendering content-targeted ads with e-mail |
US7490295B2 (en) * | 2004-06-25 | 2009-02-10 | Apple Inc. | Layer for accessing user interface elements |
US20060074913A1 (en) * | 2004-09-30 | 2006-04-06 | O'sullivan Joseph | Variable user interface based on document access privileges |
US20060173985A1 (en) * | 2005-02-01 | 2006-08-03 | Moore James F | Enhanced syndication |
US20070055748A1 (en) * | 2005-09-06 | 2007-03-08 | Interpols Network Incorporated | Systems and methods for integrating xml syndication feeds into online advertisement |
US20070083670A1 (en) * | 2005-10-11 | 2007-04-12 | International Business Machines Corporation | Method and system for protecting an internet user from fraudulent ip addresses on a dns server |
US20070106803A1 (en) * | 2005-11-07 | 2007-05-10 | Pixelpass Llc | Web site subscription management system |
US20080082907A1 (en) * | 2006-10-03 | 2008-04-03 | Adobe Systems Incorporated | Embedding Rendering Interface |
Cited By (59)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8204961B2 (en) | 2005-09-06 | 2012-06-19 | Interpols Network, Inc. | Systems and methods for integrating XML syndication feeds into online advertisement |
US20100223107A1 (en) * | 2005-09-06 | 2010-09-02 | Interpolls Network Inc. | Systems and methods for integrating xml syndication feeds into online advertisement |
US20070055748A1 (en) * | 2005-09-06 | 2007-03-08 | Interpols Network Incorporated | Systems and methods for integrating xml syndication feeds into online advertisement |
US7673017B2 (en) * | 2005-09-06 | 2010-03-02 | Interpolls Network Inc. | Systems and methods for integrating XML syndication feeds into online advertisement |
US10606913B2 (en) | 2005-09-06 | 2020-03-31 | Interpols Network Inc. | Systems and methods for integrating XML syndication feeds into online advertisement |
US9916293B2 (en) | 2005-12-12 | 2018-03-13 | Google Llc | Module specification for a module to be incorporated into a container document |
US20070136337A1 (en) * | 2005-12-12 | 2007-06-14 | Google Inc. | Module specification for a module to be incorporated into a container document |
US20070136201A1 (en) * | 2005-12-12 | 2007-06-14 | Google Inc. | Customized container document modules using preferences |
US8185819B2 (en) | 2005-12-12 | 2012-05-22 | Google Inc. | Module specification for a module to be incorporated into a container document |
US8918713B2 (en) | 2005-12-12 | 2014-12-23 | Google Inc. | Module specification for a module to be incorporated into a container document |
US7757161B2 (en) * | 2006-03-15 | 2010-07-13 | Business Objects Software Ltd | Apparatus and method for automatically sizing fields within reports |
US20070220488A1 (en) * | 2006-03-15 | 2007-09-20 | Business Objects, S.A. | Apparatus and method for automatically sizing fields within reports |
US20090037935A1 (en) * | 2006-08-07 | 2009-02-05 | Shoumen Saha | Updating The Configuration of Container Documents |
US8832151B2 (en) | 2006-08-07 | 2014-09-09 | Google Inc. | Distribution of content document to varying users with security, customization and scalability |
US8185830B2 (en) | 2006-08-07 | 2012-05-22 | Google Inc. | Configuring a content document for users and user groups |
US8954861B1 (en) | 2006-08-07 | 2015-02-10 | Google Inc. | Administrator configurable gadget directory for personalized start pages |
US20080034441A1 (en) * | 2006-08-07 | 2008-02-07 | Shoumen Saha | Updating content within a container document for user groups |
US8407250B2 (en) | 2006-08-07 | 2013-03-26 | Google Inc. | Distribution of content document to varying users with security customization and scalability |
US9754040B2 (en) | 2006-08-07 | 2017-09-05 | Google Inc. | Configuring a content document for users and user groups |
US8706757B1 (en) * | 2007-02-14 | 2014-04-22 | Yahoo! Inc. | Device, method and computer program product for generating web feeds |
US20140181642A1 (en) * | 2007-02-14 | 2014-06-26 | Yahoo! Inc. | Device, method and computer program product for generating web feeds |
US9448983B2 (en) * | 2007-02-14 | 2016-09-20 | Yahoo! Inc. | Device, method and computer program product for generating web feeds |
US20090055405A1 (en) * | 2007-08-20 | 2009-02-26 | Tinbu, Llc | Increasing Website Revenue Generation Through Distribution of Interactive Web Content |
US20090055400A1 (en) * | 2007-08-20 | 2009-02-26 | Tinbu, Llc | Interactive presentation and distribution of web content having a search feature |
US20090076916A1 (en) * | 2007-09-17 | 2009-03-19 | Interpols Network Incorporated | Systems and methods for third-party ad serving of internet widgets |
US20090094522A1 (en) * | 2007-10-04 | 2009-04-09 | Tinbu, Llc | Interactive presentation and distribution of web content |
US20090158166A1 (en) * | 2007-12-14 | 2009-06-18 | Dewar Ami H | Method, system, and computer program product for automatic rearrangement of modules based on user interaction |
US20090235349A1 (en) * | 2008-03-12 | 2009-09-17 | Intuit Inc. | Method and apparatus for securely invoking a rest api |
US8621598B2 (en) | 2008-03-12 | 2013-12-31 | Intuit Inc. | Method and apparatus for securely invoking a rest API |
GB2458365A (en) * | 2008-03-12 | 2009-09-23 | Intuit Inc | Securely invoking a REST API at an application server using Digest Access Authentication |
GB2458365B (en) * | 2008-03-12 | 2012-05-09 | Intuit Inc | Method and apparatus for securely invoking a rest API |
US20090241134A1 (en) * | 2008-03-24 | 2009-09-24 | Microsoft Corporation | Remote storage service api |
US20090276713A1 (en) * | 2008-05-01 | 2009-11-05 | Eddy Michael P | Network accessible content management methods, systems and apparatuses |
US20090300143A1 (en) * | 2008-05-28 | 2009-12-03 | Musa Segal B H | Method and apparatus for interacting with media programming in real-time using a mobile telephone device |
US20100005001A1 (en) * | 2008-06-30 | 2010-01-07 | Aizen Jonathan | Systems and methods for advertising |
US11669816B2 (en) * | 2009-01-08 | 2023-06-06 | Visa Europe Limited | Payment system |
WO2010116311A1 (en) * | 2009-04-05 | 2010-10-14 | Baruch Bouzaglo | Hyperlink to computer generated content |
US20110066977A1 (en) * | 2009-09-16 | 2011-03-17 | International Business Machines Corporation | Analyzing an interaction history to generate a customized webpage |
US10579686B2 (en) * | 2009-09-16 | 2020-03-03 | International Business Machines Corporation | Analyzing an interaction history to generate a customized webpage |
US20120216109A1 (en) * | 2009-09-16 | 2012-08-23 | International Business Machines Corporation | Analyzing an interaction history to generate a customized webpage |
US10235462B2 (en) * | 2009-09-16 | 2019-03-19 | International Business Machines Corporation | Analyzing an interaction history to generate a customized webpage |
CN102298597B (en) * | 2010-06-23 | 2013-04-17 | 腾讯科技（北京）有限公司 | System and method for broadcasting webpage advertisements by using advertisement space carriers |
CN102298597A (en) * | 2010-06-23 | 2011-12-28 | 腾讯科技（北京）有限公司 | System and method for broadcasting webpage advertisements by using advertisement space carriers |
US10423707B2 (en) * | 2010-09-08 | 2019-09-24 | Imdb.Com, Inc. | Techniques for displaying third party content |
US20120278243A1 (en) * | 2011-04-29 | 2012-11-01 | LPS IP Holding Company LLC | Determination of Appraisal Accuracy |
US10353761B2 (en) | 2011-04-29 | 2019-07-16 | Black Knight Ip Holding Company, Llc | Asynchronous sensors |
US20120284607A1 (en) * | 2011-05-06 | 2012-11-08 | Microsoft Corporation | Content flow through containers |
US9015577B2 (en) * | 2011-05-06 | 2015-04-21 | Microsoft Technology Licensing, Llc | Content flow through containers |
US10178031B2 (en) | 2013-01-25 | 2019-01-08 | Microsoft Technology Licensing, Llc | Tracing with a workload distributor |
US9804949B2 (en) | 2013-02-12 | 2017-10-31 | Microsoft Technology Licensing, Llc | Periodicity optimization in an automated tracing system |
US9658936B2 (en) | 2013-02-12 | 2017-05-23 | Microsoft Technology Licensing, Llc | Optimization analysis using similar frequencies |
US9021447B2 (en) * | 2013-02-12 | 2015-04-28 | Concurix Corporation | Application tracing by distributed objectives |
US9767006B2 (en) | 2013-02-12 | 2017-09-19 | Microsoft Technology Licensing, Llc | Deploying trace objectives using cost analyses |
US9665474B2 (en) | 2013-03-15 | 2017-05-30 | Microsoft Technology Licensing, Llc | Relationships derived from trace data |
US9575874B2 (en) | 2013-04-20 | 2017-02-21 | Microsoft Technology Licensing, Llc | Error list and bug report analysis for configuring an application tracer |
US9686304B1 (en) * | 2013-06-25 | 2017-06-20 | Symantec Corporation | Systems and methods for healing infected document files |
US9864672B2 (en) | 2013-09-04 | 2018-01-09 | Microsoft Technology Licensing, Llc | Module specific tracing in a shared module environment |
US9772927B2 (en) | 2013-11-13 | 2017-09-26 | Microsoft Technology Licensing, Llc | User interface for selecting tracing origins for aggregating classes of trace data |
US10678933B2 (en) * | 2015-10-13 | 2020-06-09 | International Business Machines Corporation | Security systems GUI application framework |
Also Published As
Publication number | Publication date |
---|---|
WO2007130547A3 (en) | 2008-10-16 |
WO2007130547A2 (en) | 2007-11-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9916293B2 (en) | Module specification for a module to be incorporated into a container document | |
US7730082B2 (en) | Remote module incorporation into a container document | |
US7725530B2 (en) | Proxy server collection of data for module incorporation into a container document | |
US7730109B2 (en) | Message catalogs for remote modules | |
US20070204010A1 (en) | Remote Module Syndication System and Method | |
US20070136201A1 (en) | Customized container document modules using preferences | |
US9742661B2 (en) | Uniform resource locator mapping and routing system and method | |
EP1320972B1 (en) | Network server | |
US9294334B2 (en) | Controlling communication within a container document | |
US6404445B1 (en) | Method and system for modeling data | |
US7958516B2 (en) | Controlling communication within a container document | |
JP2009531793A (en) | System and method for converting web community and web application data | |
Méndez Lobato | SEO Analysis and its effects on Web Positioning | |
Usmonov | DEVELOPMENT OF WEB-APPLICATIONS FOR THE BUREAU FOR THE REPAIR OF APARTMENTS | |
US10970358B2 (en) | Content generation | |
Wint | Veterinary Web-geographic information systems: what’s the point and what’s involved? | |
KR20090126346A (en) | System and method for processing search result and program recording medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SAH, ADAM;GOLDBERG, STEVEN L.;REEL/FRAME:017690/0825Effective date: 20060524 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |