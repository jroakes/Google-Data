CN117573248A - Facilitating user device and/or proxy device actions during a communication session - Google Patents
Facilitating user device and/or proxy device actions during a communication session Download PDFInfo
- Publication number
- CN117573248A CN117573248A CN202311395663.3A CN202311395663A CN117573248A CN 117573248 A CN117573248 A CN 117573248A CN 202311395663 A CN202311395663 A CN 202311395663A CN 117573248 A CN117573248 A CN 117573248A
- Authority
- CN
- China
- Prior art keywords
- action
- agent
- user
- proxy
- computing device
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000009471 action Effects 0.000 title claims abstract description 323
- 238000004891 communication Methods 0.000 title claims abstract description 194
- 230000004044 response Effects 0.000 claims abstract description 63
- 238000000034 method Methods 0.000 claims abstract description 43
- 230000002452 interceptive effect Effects 0.000 claims description 72
- 230000003993 interaction Effects 0.000 claims description 25
- 238000010801 machine learning Methods 0.000 claims description 11
- 230000015654 memory Effects 0.000 claims description 7
- 238000012545 processing Methods 0.000 claims description 6
- 239000003795 chemical substances by application Substances 0.000 description 232
- 230000000875 corresponding effect Effects 0.000 description 59
- 238000012549 training Methods 0.000 description 11
- 239000003999 initiator Substances 0.000 description 10
- 230000008569 process Effects 0.000 description 9
- 230000008859 change Effects 0.000 description 7
- 230000008439 repair process Effects 0.000 description 7
- 230000006870 function Effects 0.000 description 6
- 238000009434 installation Methods 0.000 description 6
- 239000008186 active pharmaceutical agent Substances 0.000 description 4
- 230000000007 visual effect Effects 0.000 description 4
- 238000012790 confirmation Methods 0.000 description 3
- 238000013507 mapping Methods 0.000 description 3
- 239000003550 marker Substances 0.000 description 3
- 238000005259 measurement Methods 0.000 description 3
- 238000013518 transcription Methods 0.000 description 3
- 230000035897 transcription Effects 0.000 description 3
- XLYOFNOQVPJJNP-UHFFFAOYSA-N water Substances O XLYOFNOQVPJJNP-UHFFFAOYSA-N 0.000 description 3
- 238000013475 authorization Methods 0.000 description 2
- 230000001419 dependent effect Effects 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 239000000945 filler Substances 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000003062 neural network model Methods 0.000 description 2
- 230000002093 peripheral effect Effects 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 239000007858 starting material Substances 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 230000001960 triggered effect Effects 0.000 description 2
- 241000607479 Yersinia pestis Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- CEIPQQODRKXDSB-UHFFFAOYSA-N ethyl 3-(6-hydroxynaphthalen-2-yl)-1H-indazole-5-carboximidate dihydrochloride Chemical compound Cl.Cl.C1=C(O)C=CC2=CC(C3=NNC4=CC=C(C=C43)C(=N)OCC)=CC=C21 CEIPQQODRKXDSB-UHFFFAOYSA-N 0.000 description 1
- 239000011521 glass Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000035755 proliferation Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 238000010079 rubber tapping Methods 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000026676 system process Effects 0.000 description 1
- 230000001755 vocal effect Effects 0.000 description 1
- 239000002023 wood Substances 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
- G06F9/453—Help systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
- G06F16/3329—Natural language query formulation or dialogue systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/16—Sound input; Sound output
- G06F3/167—Audio in a user interface, e.g. using voice commands for navigating, audio feedback
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/60—Scheduling or organising the servicing of application requests, e.g. requests for application data transmissions using the analysis and optimisation of the required network resources
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
Abstract
The present disclosure provides a method implemented by one or more processors, the method comprising: receiving one or more instances of natural language input; generating a confidence score for the current intent of the communication session; selecting a current intent based on the confidence score; determining an action for the selected current intent; parsing an agent for the action; determining whether one or more criteria for sending an action execution element based on the action to the user computing device are met; in response to determining that one or more criteria are met: transmitting an action-based action execution element to the user computing device without any agent computing device that first prompted the agent; and in response to determining that one or more criteria are not satisfied: the method may further include sending a prompt to a proxy computing device of the proxy related to the action, and sending an action execution element to the user computing device only if a positive input is received from the proxy computing device in response to sending the prompt.
Description
The application is 22 days of application of 2018, 08 and 22 months of application number: 201880039265.9, filed application of the invention patent application entitled "facilitating user device and/or proxy device actions during a communication session".
Technical Field
The present application relates to various methods, systems, apparatuses, and computer-readable media for facilitating user device and/or proxy device actions during a communication session.
Background
With the proliferation of smartphones, tablet computers, wearable devices, and other user devices, the use of various digital communication modalities has increased. As a result, direct person-to-person voice calls are being replaced by alternative communication modalities such as rich communication service (rich communication services, RCS) messages, short message service (short message service, SMS) messages, multimedia messaging service (multimedia messaging service, MMS) messages, over-the-top (OTT) chat messages, and the like.
Disclosure of Invention
The present specification is generally directed to various systems, apparatuses, and computer readable media for facilitating user device and/or proxy device actions during a communication session. In various embodiments, the communication session involves user device(s) of the user, proxy device(s) of the proxy, and an interactive communication system. As described herein, the interactive communication system may analyze various communications from the user device(s) and/or the proxy device(s) during a communication session, wherein the user directs (via the user device (s)) the various communications to the proxy, and wherein the proxy optionally directs (via the proxy device (s)) the various communications to the user.
The interactive communication system provides action execution element(s) and/or other output(s) to the user device(s) and/or proxy device(s) each specific to a corresponding current intent and corresponding current action of the communication session. These outputs are customized (tailor) to enhance the functionality of the communication session, reduce the number of conversational "turns" of the communication session and/or otherwise mitigate the consumption of network and/or hardware resources during the communication session. For example, reducing the number of conversational "turns" may reduce the total number of user inputs received by the device during a communication session, thereby reducing the number of times the device must detect and process these inputs during the session. This can have a positive impact on the battery life of these devices. The reduction of the dialog "turns" may additionally reduce display-on (display-on) time and/or use of other output components, such as speakers, by reducing the overall length of the communication session. This may further positively affect the battery life of the device.
Further, in some cases, the interactive communication system may automatically selectively provide various outputs. Such output may be provided on behalf of a user associated with the user device (e.g., the system may cause the output to be rendered on the proxy device, where the output is representative of the user), or may be provided on behalf of a proxy associated with the proxy device (e.g., the system may cause the output to be rendered on the user device, where the output is representative of the proxy); and in some cases such output may be provided automatically without first prompting any device associated with the entity for who is representative to provide such output. This may also ease the use of various computing resources.
In some implementations, the interactive communication system is implemented at least in part in a "cloud" (e.g., via a remote cluster of high-performance computing devices) and communicates with user device(s) and/or proxy device(s) via one or more networks. In some implementations, the interactive communication system is additionally or alternatively implemented at least in part by user device(s) and/or proxy device(s). For example, the user device and the proxy device may each implement an instance of the system, and the instances may interact with each other via one or more networks. In addition, for example, the user device and the proxy device may each implement a corresponding client application that performs some functions of the system and interface with a cloud-based system that performs other functions of the system. For example, a client application may interact with the cloud-based system over one or more networks and via one or more application programming interfaces (application programming interface, APIs).
As one example, the interactive communication system may receive natural language input(s) and/or other input(s) sent from the user device and/or proxy device during the communication session. Based on an analysis of such inputs, the interactive communication system may determine a current intent of the communication session and an action for the determined current intent. For example, the system may process inputs and/or annotations of such inputs to determine a current intent through one or more machine learning models (e.g., deep neural network models trained based on agent domain-specific training data), and may utilize a mapping of intent to actions to determine actions for the current intent. Further, the system may generate an action-specific action execution element, and the action execution element may optionally be customized to parameters for the agent (and/or domain of the agent) and/or parameters for the user of the user device. The action execution element may be rendered (e.g., graphically and/or audibly) at one or more of the user devices and/or at one or more of the proxy devices. The action execution element may be configured such that, in response to a user interface selection (e.g., a "click", "tap" or "verbal" selection) of the action execution element, the corresponding device initiates execution of the (imidate) action with the customized parameters. For example, the corresponding device may perform the entire action with its own customized parameters, or the corresponding device may communicate to a remote interactive communication system and/or other component(s) to cause such component(s) to perform the action with the customized parameters.
In some implementations and/or situations, the generated action-performing elements may be provided during the communication session and/or within an application and/or interface used for the communication session. For example, the generated action execution element may be provided once generated during the communication session and/or may be provided with an ongoing transcription (transcript) of the communication session. In other embodiments and/or situations, the generated action-performing element may be provided after the communication session has ended and/or within an application and/or interface separate from the application and/or interface used for the communication session. For example, the generated action execution element may be "queued" for subsequent provision to the user after the communication session. For example, the generated action execution element may specifically be an application element associated with a given application (which is separate from the application being used for the communication session) and may be provided through an interface of the given application when the given application is subsequently executed and/or exposed (surfaced). In addition, the generated action execution element may be provided as a system "notification card" or through a similar interface separate from the interface used for the communication session, for example. Such notification cards may be provided during or after a communication session.
Some non-limiting examples of action execution elements described herein include: reply content suggestion elements (text reply suggestion elements, graphic reply suggestion elements, etc.), schedule elements, reminder elements, payment elements, arrival notification elements, camera elements, application elements, and/or dialog routing elements.
The reply content suggestion elements each indicate the following: the content is contextually related to the communication session and, when selected, causes a reply communication including the content to be automatically generated and/or automatically sent to one or more other devices in the communication session. The content suggestion elements may include contextually relevant text and/or visual elements (e.g., emoji, GIF, video, etc.). The content suggestion elements may additionally or alternatively include contextually relevant documents or other items of information, such as pictures, audio, contacts, documents in portable document file (Portable Document File, PDF) format, and so forth. Such information items are personal to the corresponding agent and/or user and may optionally be stored locally on the corresponding device rendering the content suggestion element. In some implementations, when the reply content suggestion element is selected at a device, the device generates a corresponding reply communication and transmits the reply communication to another device in the communication session or to an interactive communication system that then routes the reply communication to the other device. In other embodiments, when the reply content suggestion element is selected at the device, an indication of the selection is transmitted to the interactive communication system, and the interactive communication system generates a corresponding reply communication and transmits the reply communication to another device in the communication session. The reply communication may be initiated based on the determined current intent and corresponding actions in the mapping described above with little user input to the device involved in the communication session.
The schedule element may automatically schedule (or reschedule) the at least one meeting when selected, or may initiate an interactive exchange (exchange) to schedule (or reschedule) the at least one meeting. In some implementations, the schedule element can indicate a date and/or time window selected based on the agent and/or user parameters, such as electronic calendar data of the user and/or agent (e.g., when the user and/or agent is "available"), stored preferences of the user and/or agent (e.g., date(s) and/or time(s) of user and/or agent preferences), and the like. Responsive to selection of such a schedule element at the device, a corresponding electronic subscription entry may be created that is personal to the user and/or a corresponding electronic subscription entry may be created that is personal to the agent-optionally after confirmation input in response to one or more prompts. For example, a user may select such a scheduling element at a user device and automatically create a corresponding electronic appointment entry for the user in response to the selection (e.g., through an API interaction with a local or web-based calendar application). Further, in response to the selection, a corresponding electronic subscription entry for the agent may be automatically created-or the corresponding reminder may first be transmitted to the agent device of the agent, and in response to a positive input from the agent device in response to the reminder, an electronic subscription entry for the agent may be created. As described above, some scheduling elements initiate an interactive exchange for scheduling. For example, in response to selection of such elements at the device, an interactive calendar and/or other interactive user interface may be presented via and interacted with by the device to enable selection of appointments. Such interactive exchanges may be driven by an interactive communication system, a local app, and/or a remote action agent. As with the reply communication discussed above, this process may occur with little user input to the device involved in the communication session.
The reminder element may automatically set a reminder or initiate an interactive exchange when selected to schedule a reminder, such as a time-based reminder, a proximity-based reminder, and/or other context-based reminder. The payment element may automatically initiate a transfer of monetary funds upon selection, or an interactive exchange for a transfer of monetary funds. The arrival notification element may, when selected at a given device, cause an estimated arrival time, a real-time location map, and/or other indication of the process of rendering the individual toward a location at another device. The camera element, when selected, may cause a camera interface and/or application to be launched that enables capturing of images (or video) via a camera of the corresponding device. The captured image (or video) may be automatically transmitted to another device and/or transmitted after further confirmation.
In some implementations, the application elements, when selected, may cause execution and/or surfacing of a corresponding local or web-based application at the corresponding device-optionally in a state related to the communication session context and/or with filler content related to the communication session context. In some implementations, the application element may, when selected at the device, cause the local or web-based application to take one or more corresponding actions without having to reveal the application or content from the application at the device. This may facilitate more efficient use of the display and/or other output elements of the device, as at least in this example, the display and/or other output elements are not required to reveal the application or content from the application at the device. For example, an application element, when selected, may cause an application to perform an action by engaging an API of the application, but without causing the application to be exposed at the client device and/or without causing content from the application to be presented at the client device.
In some implementations, the application element, when selected by the user, may cause the application to be activated in a state related to the communication session context and/or with filler content related to the communication session context when subsequently explicitly activated by the user. For example, for a "schedule appointment" action, an application element may be provided that, when selected, does not automatically schedule an appointment via a corresponding application (e.g., a calendar application). Instead, the selection may alternatively cause the corresponding application to be opened (open) and/or opened with content that is based on the communication session and that enables the user to interact with the corresponding application to schedule the reservation when subsequently activated by the user. In this way, the user does not need to immediately divert his/her attention from the communication session to scheduling the reservation. Conversely, the next time the user activates the corresponding application, the user may be alerted to the need to schedule the reservation, and the reservation time(s), reservation date(s), and/or reservation title(s) of the reservation suggestion via the corresponding application suggestion may be based on the communication session. The interactive communication system may interface with the API of the corresponding application and/or otherwise communicate context-related data to the corresponding application to be opened in this state.
The dialog routing element may present context-dependent recommendations for routing all or aspects of the communication(s) of the communication session to a particular proxy device and cause such aspects to be routed to the particular proxy device when selected.
As described herein, in various embodiments, an action execution element for a communication session may be generated based on an action mapped to a current intent of the communication session. Further, the action execution element may optionally be customized to parameters of the agent and/or domain of the agent for the communication session. In some of those embodiments, unless it is determined that an agent-specific parameter is not defined for an action (e.g., in any database used by the system), an action-executing element may be customized to the agent and the agent-specific parameter defined for the action. If it is determined that no agent-specific parameters are defined, an action execution element may optionally be generated based on the stored parameters for the domain of the agent, wherein the domain contains the agent and a plurality of additional agents.
As one example, assume that the agent is an auto repair business, the intent is a "schedule oil change appointment" intent, and the action is a "schedule oil change" action. It is further assumed that for an agent, there are no agent specific parameters defined for the "reservation length" for the "oil change schedule" action. In such an example, a stored parameter of "reservation length" for a "oil change schedule" action for a domain of the proxy may be determined and used instead in generating the action execution element. For example, the stored parameter for the domain may be an average or median "reservation length" defined for the agent of the domain, and an action execution element is generated that, when selected, initiates the scheduling of a reservation having a duration defined by the average or median "reservation length". Such domain parameters may vary from domain to domain and from action to action. For example, the "appointment length" parameters for a general "scheduled" action may vary greatly between the "photography" domain and the "pest control" domain. In addition, for example, the "reservation length" parameter for the "oil change schedule" action of the "auto repair" field may be greatly different from the "reservation length" parameter for the "engine repair schedule" action of the "auto repair" field.
In some implementations, parameters for a domain of an agent may be generated and/or selected for use in a given communication session based on one or more contexts or inferred signals, such as signals related to the given communication session. For example, a plurality of domain parameters may be stored for a given action and a given domain, and each domain parameter associated with one or more dates and/or times. One of the plurality of domain parameters may be selected for use in a given communication session based on a date and/or time of the given communication session corresponding to the date(s) and/or time associated with the selected domain parameter. For example, for the "yard services" field and the "schedule yard clean" action, the "appointment length" parameter for autumn may be stored and may be different from the stored "appointment length" parameter for spring.
As also described herein, in various embodiments, in response to determining that agent-specific parameter(s) are not available for an action (e.g., are not defined in any database used by the system), a prompt may be generated soliciting parameters for the action. In addition, the prompt may be transmitted to the agent device of the corresponding agent, and the response content may be used to parse the agent-specific parameter. Thereafter, the agent-specific parameters may be used for the agent for the action, e.g., instead of domain parameters. In some of those embodiments, the prompt may be transmitted in response to determining that the action has been invoked in association with the agent in at least a threshold number of communication sessions. In this way, computing resources are not wasted on rare and/or erroneous actions for a given agent. Rather, the generation and/or transmission of the hint may depend on an action invoked in association with the agent, at least to a threshold extent, indicating that the action is relevant to the agent.
As described above, in various embodiments, an action execution element is provided on behalf of an entity for presentation. For example, the action execution element may be transmitted to the user device on behalf of the agent. In some of those various embodiments, a prompt representing who presented the action execution element may be selectively presented to the entity (via the corresponding device) before presenting the element on behalf of the entity. For example, if a positive input is received in response to presenting a prompt, the element may be presented only at the user device on behalf of the entity. In some of those embodiments, various criteria may be used to determine whether to automatically provide an action execution element on behalf of an entity for presentation without first prompting the entity; or alternatively, the entity is prompted first and optionally a positive input in response to the prompt is required before providing the action execution element on behalf of the entity for presentation. For example, the various criteria may be based on a confidence score for the current intent (e.g., how confidence score meets a threshold). For example, a confidence score for the current intent may be generated based on natural language input and/or other content of the communication session being processed on one or more trained machine learning models that are each trained to predict a confidence score (e.g., probability) that the intent is the current intent of the communication session for one or more intents.
Some examples provided above describe providing an action execution element that, when selected, causes a corresponding action to be initiated. However, as described herein, in some embodiments and situations, some actions may be initiated automatically without providing an action execution element for the action and without requiring selection of an action execution element for the action. As one example, all or aspects of the communication session may be automatically routed to a particular proxy device based on the determined current intent. For example, the communication may be routed to a particular proxy device stored in association with the determined current intent. Furthermore, the communication may be routed without first presenting the context-dependent routing element to another proxy device that has actively engaged in the communication session. As another example, the contextually relevant reply content may be automatically sent on behalf of the agent without first presenting the reply content suggestion element to the agent device of the agent. For example, reply content may be automatically sent if the proxy device has previously authorized such reply content to be automatically sent and/or has replied with such reply content at least a threshold frequency.
Various embodiments described herein enable a user to interact with any of a plurality of different agents across a plurality of different (distantly) domains using a common communication interface (e.g., an auditory/voice-based interface and/or a graphical interface). For example, the public communication interface may be used to participate in any of a plurality of agents in a "floor" domain, in any of a plurality of agents in a "patent legal services" domain, in any of a plurality of agents in a "piping" domain, etc. This may enable efficient interaction with computing resources of various agents to occur relative to interaction via separate interfaces and/or applications that are each customized to a particular agent and/or a particular domain.
As used herein, an "agent" refers to a specifically identifiable entity, such as a merchant. For example, the first agent may be a first pipe enterprise (businessman), the second agent may be a second pipe enterprise, the third agent may be a first auto repair shop, etc. As used herein, "user" generally refers to an individual that interacts with an agent (e.g., via an interactive communication system and/or agent device(s) of the agent) using one or more corresponding user devices. As used herein, an "agent user" refers to an individual associated with a corresponding agent (e.g., an employee of the agent) and who interacts with the user during a communication session using one or more corresponding agent devices. As used herein, an "entity" refers to one of the agents or users of a corresponding communication session. As used herein, "device" refers to a computing device, such as a smart phone, tablet computer, laptop computer, desktop computer, wearable electronic device (e.g., smart watch, glasses), automotive electronic device, and the like.
Various types of inputs are described herein that may be provided in a communication session via user interface input device(s) of corresponding device(s). In some examples, the input may be a free-form natural language input, such as a text input based on user interface input generated via one or more user interface input devices (e.g., based on typed input provided via a physical or virtual keyboard, or based on voice input provided via a microphone). As used herein, a free form input is the following: the user formulates and is not limited to the set of options presented for user selection (e.g., is not limited to the set of options presented in a drop down menu).
Note that various examples are presented in this summary to provide an overview of various embodiments of the methods, apparatus, and computer-readable media described herein. However, additional and/or alternative embodiments are more fully described in the detailed description presented below.
Additionally, some implementations include one or more processors of one or more computing devices, wherein the one or more processors are operable to execute instructions stored in an associated memory, and wherein the instructions are configured to cause performance of any of the methods described herein. Some implementations also include one or more non-transitory computer-readable storage media storing computer instructions executable by the one or more processors to perform any of the methods described herein.
Some embodiments of the present disclosure provide a method implemented by one or more processors, the method comprising: during a communication session comprising a user computing device implemented by one or more processors and an interactive communication system, receiving one or more instances of natural language input, the instances of natural language input comprising free-form input formulated by a user of the user computing device via a user interface input device of the user computing device; generating a confidence score for a current intent of the communication session, wherein generating the confidence score is based on processing natural language input using one or more intent models, each of the one or more intent models being a corresponding trained machine learning model; selecting a current intent based on the confidence score; determining an action for the selected current intent; parsing an agent for the action; determining whether one or more criteria for sending an action execution element based on the action to the user computing device are met; in response to determining that one or more criteria are met: transmitting an action-based action execution element to the user computing device without any agent computing device that first prompted the agent; and in response to determining that one or more criteria are not satisfied: a prompt related to the action is sent to a proxy computing device of the proxy, wherein the proxy computing device is different from the user computing device, and an action execution element is then sent to the user computing device only if a positive input is received from the proxy computing device in response to sending the prompt.
Some embodiments of the present disclosure provide a non-transitory computer-readable storage medium storing computer-readable instructions that, when executed by at least one computing device, cause the at least one computing device to perform the above-described methods implemented by one or more processors.
Some embodiments of the present disclosure provide a system for facilitating user device and/or proxy device actions during a communication session, comprising: at least one processor; and at least one computer readable memory storing computer readable instructions that, when executed by the at least one processor, cause the at least one processor to perform the method implemented by the one or more processors.
It should be understood that all combinations of the foregoing concepts and additional concepts described in more detail herein are considered a part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are considered part of the subject matter disclosed herein.
Drawings
FIG. 1 is a block diagram of an example environment in which embodiments disclosed herein may be implemented.
FIG. 2 illustrates an example of interactions that may occur between various components of the environment of FIG. 1, in accordance with embodiments disclosed herein.
Fig. 3A, 3B, and 3C present flowcharts illustrating example methods according to embodiments disclosed herein.
Fig. 4A, 4B, 4C, 4D, 4E, and 4F illustrate example devices and graphical interfaces illustrating example communication sessions according to embodiments disclosed herein.
FIG. 5 illustrates an example architecture of a computing device.
Detailed Description
Turning now to fig. 1, an example environment is illustrated in which the techniques disclosed herein may be implemented. Example environments include user device 110, interactive communication system 120, multiple agent devices 140A-N, and multiple action agents 135A-N. The example environment also includes a proxy database 152, one or more intent models 154, and one or more action models 156 that may be used by the interactive communication system 120.
User device 110 is a computing device that interacts with interactive communication system 120 to participate in a user of any one of a plurality of agents. Each of the agents' devices 140A-N is a corresponding computing device that is associated with a corresponding agent with which it may interact via the interactive communication system 120. For example, the agent device 140A may be a computing device of the first agent and may be operated by one or more employees of the first agent. Each agent may be associated with one or more of the agents' devices 140A-N. For example, a first agent may be associated with agent devices 140A and 140B, a second agent may be associated with agent device 140C only, and so on. An association may be established between a given agent and one of the agents 'devices 140A-N, for example, by a given agent's login credentials (credentials) and/or other digital security measures (measures) to ensure that the device is authorized by the given agent.
For example, the user device 110 and the devices 140A-N of the agent may each be a corresponding one of a variety of computing devices, such as a standalone voice-activated speaker device, a desktop computing device, a laptop computing device, a tablet computing device, a mobile phone computing device, a computing device of a user's vehicle (e.g., an in-vehicle communication system, an in-vehicle entertainment system, an in-vehicle navigation system), and/or a wearable apparatus of a user that includes the computing device (e.g., a smart watch). Additional and/or alternative computing devices may be provided.
Although only one user device 110 is shown in fig. 1, in many embodiments all or aspects of the interactive communication system 120 may be remote and may interface with each of a plurality of user devices of a plurality of users. For example, the interactive communication system 120 may manage communication with each of the plurality of devices via different sessions, and may manage the plurality of sessions in parallel. For example, in some embodiments, the interactive communication system 120 may be implemented as a cloud-based service employing a cloud infrastructure, e.g., using a high-performance computer cluster or server farm (server farm) running software suitable for handling large numbers of requests from multiple users. In addition, for example, the interactive communication system 120 may receive input from and/or provide output to multiple user devices of a single user. However, for simplicity, some examples herein are described for a single user device 110.
Although the interactive communication system 120 is shown separate from the user device 110 and separate from the proxy devices 140A-N in fig. 1, in some implementations, all or aspects of the interactive communication system 120 may be implemented by one or more of the user device 110 and/or the proxy devices 140A-N. For example, the user device 110 and the proxy device 140A may each implement an instance of a system, and the instances may interact with each other via one or more networks, such as a wide area network (wide area network, WAN) (e.g., the internet). In addition, for example, the user device 110 and the proxy device 140A device may each implement a corresponding client application that performs some functions of the system and interfaces with a cloud-based system that performs other functions of the system. For example, a client application may interact with a cloud-based system via one or more Application Programming Interfaces (APIs).
User device 110 executes one or more applications (apps) 112 that may be used in the various techniques described herein. For example, one of applications 112 may be an application that implements all or some of the functionality of interactive communication system 120 and/or provides a graphical interface for participating in a communication session with an agent. Such applications may be separate from (e.g., installed "on top of") the operating system of user device 110, or may alternatively be directly implemented by the operating system (e.g., considered an application of, but integrated with, the operating system). In addition, for example, one of apps 112 may be an app that is used in the execution of the currently intended action for the communication session. For example, one of apps 112 may be exposed and/or executed in response to a user selection of an action execution element generated in accordance with the techniques described herein. In addition, for example, one of apps 112 may be automatically executed in the foreground/background based on the determined current intent (without requiring user selection of an action execution element). Action(s) that may be performed by the automatically executed app and mapped to the current intent may then be automatically triggered (i.e., without user confirmation); or may be suggested for triggering (i.e., suggested, then triggered only if a positive user interface input is received in response to the suggestion).
User device 110 may also optionally include local user data 114 on one or more computer-readable media. The local user data 114 may include one or more parameters for the user of the user device 110, such as the user's location(s) (e.g., residence address), the user's calendar, and so forth. Parameters for the user may additionally or alternatively be stored remotely from the user device 110. In some implementations, multiple types of user data are included in the local user data 114 and/or remote storage. For example, the user data may include: user device data (e.g., type of user device, current location of user device); personal data (e.g., user's work and/or home address, user's telephone number, user's email address, user's payment information, user's calendar information); and/or personal preferences (e.g., user preferences for reservation on Saturday, user preferences for receiving calls at his/her mobile number).
One or more of the agents' devices 140A-N may also execute the app and/or may include local data for the corresponding agent. For example, proxy device 140A is shown with application 142A and local proxy data 144A. App142A may be used in various technologies described herein. For example, one of apps 142A may be an application that implements all or some of the functionality of interactive communication system 120 and/or provides a graphical interface for participating in a communication session with a user. Such apps may be separate from the operating system of proxy device 140A, as with user device 110, or may be implemented directly by the operating system. In addition, for example, one of apps 142A may be an app that is used in the execution of the currently intended action for the communication session. For example, one of apps 142A may be exposed and/or executed in response to a user selection of an action execution element generated in accordance with the techniques described herein. The local proxy data 144A may include one or more parameters for the proxy associated with the proxy device 140A, such as a calendar of the proxy, proxy-specific parameters described herein, and the like. Parameters for the agent may additionally or alternatively be stored remotely from the agent device 140A (e.g., in the agent database 152).
Interactive communication system 120 includes a dialog annotator 122, a proxy parsing engine 124, an intent engine 126, an action selection engine 128, an action parameters engine 130, and an interaction engine 132. In some implementations, one or more of the engines of the interactive communication system 120 may be omitted, combined, and/or implemented in a component separate from the interactive communication system 120. Furthermore, for simplicity, the interactive communication system 120 may include additional engines not shown herein.
The interactive communication system 120 receives instances of user input from the user device 110 during a communication session and/or instances of agent input from one or more of the agents' devices 140A-N during a communication session. For example, the interactive communication system 120 may receive free-form natural language speech input in the form of a streaming audio recording and convert the speech input to text using a speech-to-text module. The streaming audio recording may be generated by the device in response to signals received from a microphone of the device that captures speech input of a user of the device. As another example, in some implementations, the interactive communication system 120 may receive free-form natural language typed input and/or even structured (non-free-form) input.
Responsive to receiving an instance of the input (from one of the proxy devices 140A-N or the user device 110) during the communication session, the interactive communication system 120 selectively provides a response output to the user device 110 and/or provides a response output to one or more of the proxy devices 140A-N. When the response output is provided to one or more of the user device 110 and the proxy device 140A-N, a different response output may optionally be provided to each of them. The provided response output may include an action execution element and/or other output specific to the current intent and current action of the communication session. Further, the provided response output may be additional to the content of the input instance, although it may alternatively be displayed or otherwise presented in combination with the content of the input instance (e.g., the provided response content may be provided as additional content presented with the transcription of the communication session). The response output may be, for example, audio to be audibly presented by the device(s) (e.g., output via a speaker of the device), text, and/or graphical content graphically presented by the device(s) (e.g., rendered via a display of the device), etc.
The dialog annotator 122 of the interactive communication system 120 processes natural language input and/or other input received via the user device 110 and/or the proxy device 140A-N during a communication session and generates annotation output for use by one or more other components of the interactive communication system 120. For example, the dialog annotator 122 can process natural language freeform input and generate annotated output including one or more annotations of the natural language input and optionally one or more (e.g., all) of the words (term) of the natural language input. As another example, the dialog annotator 122 can additionally or alternatively include a speech-to-text module that receives an instance of speech input (e.g., in the form of digital audio data) and converts the speech input into text that includes one or more text words or phrases. In some implementations, the speech-to-text module is a streaming speech-to-text engine. The speech-to-text module may rely on one or more stored speech-to-text models (also referred to as language models), each of which may model the relationship between the audio signal and the phonetic units in the language, along with the word sequences in the language.
In some implementations, the dialog annotator 122 is configured to identify and annotate various types of grammar information in natural language input (e.g., typed input and/or text converted from audio input). For example, the dialog annotator 122 may include a part of speech (a part of speech) marker configured to annotate words with their grammatical effect. For example, the part-of-speech tagger may tag each word with its part of speech (such as "noun," "verb," "adjective," "pronoun," etc.). Additionally, for example, in some implementations, the dialog annotator 122 can additionally and/or alternatively include a dependency analyzer (parameter) configured to determine syntactic relationships between words in the natural language input. For example, a dependency analyzer may determine which words modify other words, subject and verbs of sentences, etc. (e.g., parse trees), and may annotate such dependencies.
In some implementations, the dialog annotator 122 can additionally and/or alternatively include an entity marker configured to annotate entity references in one or more segments, such as references to people, organizations, locations, and the like. The entity marker may annotate references to entities at a higher level of granularity (e.g., enabling identification of all references to entity categories such as people) and/or at a lower level of granularity (e.g., enabling identification of all references to specific entities such as specific people). The entity markers may rely on the content of the natural language input to parse a particular entity and/or may optionally communicate with a knowledge graph or other entity database to parse a particular entity.
In some implementations, the conversation annotator 122 can additionally and/or alternatively include a date and/or time module configured to annotate a mention of a time and/or date (e.g., "nine o' clock", "monday") and/or parse a vague mention of a time and/or date into a more specific time and/or date (e.g., "monday" into a specific date, and "8:00" into am and/or eastern time).
In some implementations, the dialog annotator 122 can additionally and/or alternatively include a common reference (coreference) parser configured to group or "cluster" references to the same entity based on one or more contextual cues. For example, the word "it" in an input instance may be parsed using a co-reference parser into the "engine" previously mentioned in the immediately preceding input instance.
In some implementations, one or more components of the conversation annotator 122 can rely on annotations from one or more other components of the conversation annotator 122. For example, in some implementations, in annotating all references to a particular entity, a named (named) entity tagger may rely on annotations from a common reference resolver and/or dependency analyzer. In addition, for example, in some embodiments, the common reference resolver may rely on annotations from the dependency analyzer in clustering references to the same entity. In some implementations, in processing a particular natural language input, one or more components of the dialog annotator 122 can use related prior inputs and/or other related data outside of the particular natural language input to determine one or more annotations.
In some implementations, the dialog annotator 122 can attempt to discern the semantics or meaning of the user input and provide semantic indications to one or more other components of the system 120. The dialog annotator 122 can rely on one or more stored grammar models to map text (or other input) to particular actions and identify attributes that constrain execution of such actions, e.g., input variables for such actions.
Agent resolution engine 124 resolves specific agents for the communication session. In some implementations, the agent resolution engine 124 resolves a particular agent based on input from the user device 110 that explicitly indicates the particular agent. For example, as shown in FIG. 4A (described in more detail below), a user may select an interface element associated with a particular agent to explicitly indicate the particular agent. In addition, for example, the user may provide input and/or voice input that explicitly indicates the typing of a particular agent (e.g., "I want to talk to a hypothetical floor store"). In other implementations, the agent resolution engine 124 resolves a given agent by participating in a conversation with a user via the user device 110 and matches parameters specified by the user in the conversation (and/or parameters otherwise derived) with corresponding parameters for the given agent in the agent database 152. For example, if the user provides an initial input of "I want to talk to a floor store in the vicinity of I," the agent resolution engine 124 may identify three separate "floor stores" in the vicinity of the user from the agent database 152. In addition, the agent resolution engine 124 (through interaction with the interaction engine 132) may provide an indication of three "floor stores" and prompt the user to select one of the three. The indication may be, for example, the names, reviews, ratings, and/or other parameters of the three stores, and the indication may also be identified from the agent database 152. In yet an additional or alternative embodiment, the agent resolution engine 124 resolves a given agent based on: the availability resolution of a given agent, the geographic proximity of the given agent to the user (e.g., routing the request to the closest "pipe" agent), the expertise of the given agent (e.g., routing "water heater maintenance" to a "pipe" agent dedicated to water heaters), the prior experience of the given agent (e.g., how many times the given agent has handled similar requests), the rating of the given agent, the language(s) that the given agent understands (e.g., the agent that detects the language of the given user and routes to the fluency of that language), and/or other criteria. In some implementations, the agent resolution engine 124 additionally or alternatively resolves a given agent and/or determines when to initiate a communication session with the given agent based on one or more additional signals, such as contextual signals related to the user, the user device 110, the current date/time, the user's historical interactions, and so forth.
The agent database 152 stores parameters for each of a plurality of agents for that agent. Parameters for an agent may be provided by one or more agent devices 140A-N of the agent during a registration process, determined based on a response to a prompt from the system 120 described herein, derived from another source (e.g., an entity database, a crawling web page associated with the agent), and/or otherwise obtained. Parameters for the agent may additionally or alternatively be determined based on past communication sessions involving the agent. For example, the "reservation length" parameter may be determined based on an average, median, or other measure of the duration of a reservation manually scheduled by the agent in past communication sessions. The proxy database 152 may also store various parameters for each of the plurality of domains, as described herein. As used herein, a "domain" is a class that encompasses multiple agents that are members of the class.
The intent engine 126 uses the output from the dialog annotator 122 and the one or more intent models 154 to determine one or more current intents for the communication session. For example, the output of the annotation may include an annotation of the received natural language input (e.g., natural language input from multiple rounds) and may include words of the natural language input. The intent engine 126 may process the output of such annotations using one or more of the intent models 154 to determine the current intent(s) for the communication session. For example, the intent engine 126 may process the input using one or more of the intent models 154 to generate a confidence level for each of the plurality of candidate intents, and may determine that one or more of those intents is a "current" intent based on their confidence level meeting a threshold (e.g., a fixed threshold and/or a threshold relative to other confidence levels). In many implementations, the intent model 154 may include a machine learning model, such as a deep neural network model. In some of those implementations, each of the machine learning models can be trained to predict a probability that each of the one or more intents is currently present in the communication session. Predictions may be generated based on a machine learning model by processing one or more inputs of the machine learning model using trained parameters of the machine learning model, such as: inputs received in the communication session, comments of those inputs, parameter(s) of agents involved in the communication session, context parameters (e.g., location, time of day, day of week), etc.
In some implementations, the one or more intent models 154 are each trained using training examples, each training example including: training example inputs based on content of corresponding instances of corresponding historical user-agent communications; and a labeled training example output indicating whether each of the one or more intents exists for the corresponding instance. During training, parameters of a given intent model may be trained based on the back propagation of errors determined using the training examples. For example, training example inputs (of a training example) may be processed using a given intent model to predict outputs. Furthermore, an error may be calculated based on a comparison of the predicted output and the training example output (of the training example), and the error (and optionally other errors) is back-propagated on the given intent model to update the parameters of the given intent model. In various implementations, a plurality of intent models 154 are provided, each intent model 154 being trained for a particular intent (or particular set of intents) and/or for a particular domain (or particular set of domains). In a given example, the intent engine 126 may optionally determine the current intent using only a subset of the intent model 154. In some of those cases, the intent engine 126 may select the subset based on the domain of agents involved in the communication session and/or based on one or more other criteria. In this way, computing resources may be saved by selectively using only a subset of the available intent models.
Various intents may be predicted by the intent engine 126 using the intent model 154. Further, a given intent may apply to both the user and the agent, or may apply to only one of the user and the agent. Some non-limiting examples of intent include "scheduled intent" and/or more granular defined intent, such as "scheduled oil change intent", "scheduled engine change intent", and the like. Some non-limiting examples of intent also include "business hours request" intent, "call customer" intent, "call agent" intent, "price request" intent, "repair pipe problem intent," "repair complex pipe problem intent," "reply user" intent, "reply agent" intent, "take picture" intent, "take water heater picture" intent, and the like.
The action selection engine 128 selects a corresponding action for the determined current intent to implement the current intent. The action selection engine 128 may use one or more action models 156 to select corresponding actions. For example, the action model 156 may include a mapping between intent and actions, and the action selection engine 128 may select an action based on its current intent mapped into the action model 156. The actions selected by the action selection engine 128 define one or more computer-based actions that may be used to implement the corresponding intent. The actions may further define parameters desired and/or necessary for the actions, as well as any computer apps, APIs, and/or other components used in performing the actions. For example, for "scheduling" the current intent, the action selection engine 128 may select a "scheduling" action, where the "scheduling" action defines one or more computer-based actions that may be used to implement the "scheduling" current intent. In some implementations, an action may indicate whether to provide content (e.g., an action execution element) to one or more of user device 110, devices 140A-N for an agent of the agent, or both. In some implementations, an action may additionally or alternatively indicate one or more action agents 135A-N to be used in the execution of the action, one or more apps 112 and/or 142A to be used in the execution of the action, and/or one or more user parameters and/or agent parameters to be used in the execution of the action and/or in the generation of an action execution element for the action.
The action parameters engine 130 determines action parameters for the action selected by the action selection engine 128. In some implementations, the action parameter engine 130 determines one or more of the parameters based on the communication(s) of the communication session. For example, the action parameter engine 130 may use the output from the dialog annotator 122 to select one or more of the parameters. For example, assume that the natural language input from user device 110 is "I want to schedule a reservation for tomorrow," and a "schedule" action for "scheduling" the current intent is determined based on such input. The action parameter engine 130 may use the date annotation for "tomorrow" provided by the dialog annotator 122 to determine a particular date (tomorrow's date) for the scheduled action.
In some implementations, the action parameter engine 130 determines one or more of the parameters that are specific to the agent of the communication session and/or specific to the agent domain based on the parameters stored in the agent database 152. For example, assume that the agent is a floor installer and the action is a "schedule" action. Further assume that the proxy database 152 defines parameters for the floor installer and "schedule" actions that indicate: the dates and/or times available for scheduling, the current availability of those dates and/or times, and two separate appointments should be made on two separate dates for scheduling actions (e.g., one appointment for "measurement/consultation" and the other appointment for "installation"). In such examples, the action parameter engine 130 may determine such stored parameters defined for the agent and for the action.
In some implementations, the action parameter engine 130 determines that one or more desired or necessary parameters for the action are not defined for the agent of the communication session. In some of those embodiments, the action parameter engine 130 may determine those parameters based on parameters of the agent database 152 defined for a domain of the agent, where the domain contains the agent and a plurality of additional agents. For example, assume that for a scheduling action, the action parameter engine 130 determines that the "number of reservations" parameter for the "scheduling" action is not defined in the proxy database 152 for a given floor installer. In this case, in response, the action parameter engine 130 may instead use a defined "reserved quantity" parameter for the "floor installer" field. For example, engine 130 may determine that the "number of reservations" parameter is defined for that domain as "two separate reservations on two separate dates. In some implementations, parameters for a domain may be defined in the proxy database 152 for that domain based on an analysis of parameters defined in the proxy database 152 for members of the domain. For example, the "two separate appointments on two separate dates" may be automatically defined for a domain based on the "number of appointments" parameter, which occurs most frequently in all agents of the domain.
Interaction engine 132 interacts with user device 110, one or more of the proxied devices 140A-N, and/or action proxies 135A-N for the current intent in performing the action, wherein the parameters are determined by action parameters engine 130. In some implementations, the interaction engine 132 generates an action execution element based on the action and the parameters and communicates the action execution element to one of the user device 110 and/or the proxy's devices 140A-N. For example, the interaction engine 132 may generate an action execution element and transmit the action execution element to the user device 110. Selection of an action execution element via user device 110 may initiate execution of an action via further interaction with one or more of interactive communication systems, apps 112, and the like. In some cases, interaction engine 132 may interact with one or more action agents 135A-N when performing actions. For example, assume that a "schedule" action execution element is transmitted to user device 110 and includes a selectable element that, when selected, initiates an interactive scheduling action. System 120 may optionally interact (e.g., over a network and via an API) with one of action agents 135A-N to implement an interactive scheduling action. For example, the action agent may be a separate third-party (3P) agent that is a orchestration agent, and the interactive communication system 120 may act as an intermediary between the user device 110 and the agent. In other embodiments, interactive communication system 120 may instead perform the scheduling function locally (without invoking a separate action proxy). In still other implementations, the arrangement may be performed by the client device 110 interacting directly with the agent (without the system acting as an intermediary), and/or may be performed using one of the apps 112. In some implementations, the interaction engine 132 interacts with one or more of the user device 110, the proxied devices 140A-N, and/or the action proxies 135A-N when performing an action without providing a corresponding action-performing element and/or without selecting an action-performing element. For example, the interaction engine 132 may cause certain actions to be automatically performed on behalf of a given agent without first prompting the given agent.
Turning now to FIG. 2, additional descriptions of the various components of FIG. 1 are provided with reference to example interactions that may occur between those components. In fig. 2, the user device 110 and/or the proxy device 140A of the proxy generates one or more input instances 161 during a communication session involving the user device 110 and the proxy. Each input instance 161 is based on user interface inputs provided at a respective one of the devices 110, 140A. For example, the instances 161 may include one or more natural language input instances.
The dialog annotator 122 receives one or more input instances 161 and generates an output 162 of annotations including the entered annotations and optionally all or part of the input itself. The intent engine 126 uses the annotated output 162 and the one or more intent models 154 to determine at least one current intent 163 of the communication session.
The action selection engine 128 uses the determined at least one current intent 163 to select at least one action 164, the at least one action 164 being mapped to the current intent 163 in the one or more action models 156. The action selection engine 128 provides an action 164 to the action parameters engine 130, which determines one or more parameters of the action.
In some implementations, the action parameters engine 130 accesses the agent database 152 to determine action parameters for the agent for the action 164. For example, the action parameter engine 130 may determine an action parameter for an agent based on the action 164 being an action to be provided to the user device 110 and customized to the agent. As described herein, the action parameters may include one or more parameters specific to the agent and/or may include one or more parameters defined for the domain of the agent. In some implementations, the action parameter engine 130 additionally or alternatively accesses user data 166 (e.g., from local user data 114 and/or remotely stored user data) to determine action parameters for the user for the action 164. For example, the action parameter engine 130 may determine the action parameters for the user based on the action 164 being an action to be provided to the proxy device 140A and customized to the user (e.g., a "contact" customer action that includes content customized based on the user's phone number parameters). In some implementations, the action parameter engine 130 can determine both user parameters and proxy parameters for the action 164. For example, for scheduling actions, it may be desirable to obtain parameters for the current availability of the user and for the current availability of the agent.
The action parameters engine 130 provides actions and action parameters to the interaction engine 132. The interaction engine 132 generates an action execution element 168 based on the action and the action parameters and provides the action execution element 168 to the user device 110 and/or the proxy device 140A. The action may be performed using the action parameters in response to selection of the provided action execution element 168. For example, actions may be performed by user device 110 or proxy device 140A alone through further interactions between the respective devices and interaction engine 132, and/or through interactions between the interaction engine and one or more action agents 135A-N (fig. 1).
Turning now to fig. 3A, 3B, and 3C, one example of a method 300 that may be performed by components of the environment of fig. 1 is described. For convenience, the operations of method 300 are described with reference to a system performing the operations. The system may include various components of various computer systems, such as one or more components of the interactive communication system 120. Furthermore, although the specific operations of method 300 are illustrated and method 300 is illustrated in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted, or added.
At block 300, the system receives user and/or agent input(s) in a communication session. In some implementations, the user input received at block 300 includes free-form natural language input. For example, the system may receive typed user input in text form generated by the user device based on user input sensed by a physical or virtual keyboard of the user device.
At block 302, the system processes the input(s) to generate an annotated output.
At block 304, the system parses the proxy. In some implementations, the system can parse the proxy before the communication session begins. For example, a user may select an interface element and/or provide a command to type or voice to explicitly indicate an agent and cause a communication session to be initiated with a particular agent. In some other implementations, the system parses the agent during the communication session based on matching various parameters specified and/or inferred during the communication session with agent parameters of the agent.
At block 306, the system selects one or more current intents based on the output of the annotations of block 302. For example, the system may select the current intent based on processing the output of the annotations of block 302 on one or more trained machine learning models to generate a confidence level for each of the plurality of intents, and may select the current intent based on it meeting a threshold.
At block 308, the system determines an action for the current intent of the selected current intent(s) of block 306. For example, the system may determine an action based on its current intent mapped into a database entry. In some implementations, at block 308, the system determines a plurality of actions for the current intent and/or determines a plurality of actions based on the plurality of current intents. In some of those embodiments, one or more downstream blocks of method 300 may be performed for each of a plurality of actions. For example, at block 332 (described below), a plurality of action execution elements corresponding to a plurality of different actions may be transmitted.
At block 312, the system determines whether the determined action of block 308 is a proxy action. I.e., is an action that will directly result in the action execution element being transferred to the proxy device of the proxy? If so, the system proceeds to block 340 of FIG. 3B (described in more detail below).
At block 310, the system determines whether the determined action of block 308 is a user action. I.e., is an action that will directly result in the action execution element being transferred to the user's user device? If so, the system proceeds to block 314. In some implementations, the system makes the determination of blocks 310 and 312 based on defined characteristics of the action and/or corresponding intent. For example, each action and/or intent may be indicated as user directed, proxy directed, or both.
At block 314, the system determines whether proxy parameters are available for the action. For example, the system may determine whether proxy parameters are available for all parameters defined as desired and/or necessary actions. If so, the system proceeds to block 316 and generates a user action execution element based on the proxy parameter. If not, the system proceeds to block 318 and identifies one or more domains of the proxy 318. The system proceeds to block 320 and generates a user action execution element based on the domain parameter(s) for the domain or domains identified at block 318. The system may also optionally proceed to block 370 of fig. 3C (described in more detail below). Note that in some implementations, the system may also generate user action execution elements at block 316 or block 320 that are further based on one or more user parameters.
From either block 316 or block 320, the system proceeds to block 322 and determines the confidence level of the action execution element generated at either block 316 or block 320. In some implementations, the confidence level is based on a confidence level for the current intent of block 306. For example, the confidence level may be based on probabilities or other confidence metrics generated for the current intent using one or more machine learning models. In some implementations, the confidence level is also based on one or more other factors. For example, the confidence level may depend on whether an action execution element was generated based on any domain parameters (whether compared to if so, the confidence level would indicate less confidence). Additionally, for example, the confidence level may depend on an amount of times that the agent has previously approved to provide the same and/or similar action performing elements in past communication sessions with other users. For example, if the "schedule" action execution element has been approved by the agent 50 times in the past, the confidence level may indicate more confidence than if only 5 approvals by the agent had occurred. As yet another example, the confidence level may depend on whether the agent has previously approved automatically providing an action execution element for a particular action or current intent.
At block 324, the system determines whether the confidence level meets a threshold. If so, the system proceeds to block 332 and transmits the user action execution element to the user device without first prompting any proxy device for the proxy.
If not, the system first proceeds to block 326 and communicates a prompt to the proxy device to verify the user action execution element. At block 328, the system determines whether the proxy device has authenticated the user action execution element based on the response to the prompt. If so, the system proceeds to block 332. If not, the system proceeds to block 330 and performs some other action. For example, at block 330, the system may prompt the proxy device to modify the action execution element, prompt the proxy device to approve the modified action execution element, and if approved, send the modified action execution element in place of the action execution element. Additionally, for example, at block 330, the system may present an alternate action execution element and if an alternate action execution element is approved via a user interface input at the proxy device, the alternate action execution element may be sent in place of the action execution element.
At block 334, the system monitors the selection of the action execution element. If a selection occurs, the system proceeds to block 336 and initiates execution of the action using the proxy parameter or domain parameter. The system then returns from block 336 to block 300 and awaits further user and/or agent input(s).
If no selection occurs at block 334, the system may return to block 300. For example, if instead of selecting, a further non-selection input (e.g., out-of-band) is received from the user device, the system returns to block 300 and another iteration of the above step(s) is performed based on the newly received non-selection input.
Turning now to FIG. 3B, a description of additional blocks that may occur in response to determining that the action of block 308 is a proxy action is provided. In other words, the blocks downstream of block 310 in FIG. 3A illustrate examples of blocks that may occur for user actions, while the blocks of FIG. 3B illustrate examples of blocks that may occur for proxy actions. In some implementations, the action is only one of a proxy action or a user action; while in other embodiments the actions may be both. Further, it is to be appreciated that in a given iteration, an action that is a user action, a proxy action, and/or both will depend on the current intent of the given iteration, which in turn will depend on the particular communication session, the current input and state of the communication session, and so forth.
At block 340, the system determines whether user parameters are required for the action. If not, the system proceeds to block 354 and generates a proxy action execution element without user parameters. For example, for some "reply to customer" actions, user parameters may not be required. For example, the contextually relevant reply content suggestion element may instead be generated based on natural language input of the communication session, and optionally based on historical proxy responses to similar natural language input.
If the system determines that user parameters are needed at block 340, the system proceeds to block 342. For example, for a "call user" action, user parameters of the user's telephone number may be required. In addition, for example, user parameters may be required for certain "reply to customer" actions. For example, for a user question "whether to deliver to my zip code," a user parameter for the user's zip code may be required.
At block 342, the system determines whether all user parameters for the action are available (e.g., whether they are defined in one or more resources available to the system). If so, the system proceeds to block 352. If not, the system proceeds to block 344.
At block 344, the system generates a prompt for user parameters determined to be unavailable at block 342. At block 346, the system communicates a prompt for a user parameter to the user device. At block 348, the system parses the user parameters based on the response received from the user device in response to the prompt.
At block 352, the system generates an action execution element based on the user parameters determined at block 342 and/or block 348.
At block 356, the system communicates the action execution element (generated at block 352 or 354) to the proxy device of the proxy.
At block 358, the system monitors the selection of the proxy action execution element. If a selection occurs, the system proceeds to block 360 and initiates execution of the action. The system may use the user parameters to initiate performance of the action (e.g., if it is determined at block 340 that the user parameters are needed). The system then returns from block 360 to block 300 and awaits further user and/or agent input(s).
If no selection occurs in block 358, the system may proceed to block 362 and perform some other function. For example, if no selection has occurred within a certain amount of time, the system may notify the user device that the agent is not currently available at block 362. Additionally, for example, if no selection has occurred within a certain amount of time, the system may present an alternate action execution element at the proxy device at block 362.
Turning now to FIG. 3C, a description of additional blocks that may occur in response to determining that proxy parameters for a proxy are not defined for the action at block 314 of FIG. 3A is provided.
At block 370, the system determines whether a threshold metric for the action and the request for the agent has been received. The threshold metric may be, for example: the total number of requests received for the action and the agent (e.g., the threshold may be 5, 10, or 50), the frequency with which requests for the action and the agent are received (e.g., the threshold may be 10 for the last 5 days, 20 every 5 days), and/or other metrics. If the threshold metric for the request has not been received, the system proceeds to block 378 and does not transmit a prompt soliciting proxy parameters. If a threshold metric for the request has been received, the system proceeds to block 372 and generates a prompt soliciting proxy parameters. At block 374, the system communicates the prompt for the agent parameter to the agent device of the agent. At block 376, the system parses the proxy parameters from the response to the prompt generated based on the user interface input at the proxy device. The system may store the parsed proxy parameters in a proxy database for further communication sessions and/or for other purposes.
Turning now to fig. 4A-4F, example devices and graphical interfaces of example communication sessions are shown. Fig. 4A, 4B, 4D, and 4F illustrate a user device 410 and a display 411 of the user device 410. The user of the user device is engaged in a communication session with the agent via the interactive communication system 120. Fig. 4C and 4E show the agent device 440A of the agent and the display screen 441 of the agent device 440. The user device 410 and/or the proxy device 440 may each include an interactive communication system 120 and/or communicate with the interactive communication system 120. Fig. 4A through 4F each show display screens 411 and 441 with corresponding graphical interfaces including: a type interface element 488, wherein a corresponding individual may select the type interface element 488 to generate user input via a corresponding virtual keyboard; and a voice interface element 488, wherein a corresponding individual may select the voice interface element 488 to generate user input via a corresponding microphone.
In FIG. 4A, the user has submitted a search query 470 for "floor store" using either the type interface element 488 or the voice interface element 489 of the user device 410. In response, a plurality of search results are returned, two of which are shown in FIG. 4A: first search result 472A and second search result 472B. The first search result 472A corresponds to a first agent "virtual floor store (Hypothetical Floor Store)", and includes a "click to engage in conversation" link that, if selected by the user, will establish a communication session with the "virtual floor store" agent via the interactive communication system 120. The second search result 472B corresponds to the second agent "theoretical carpet and More (Theoretical Carpet & More)", and includes a "click to engage in conversation" link that, if selected by the user, will establish a communication session with the "theoretical carpet and More" agent via the interactive communication system 120.
In FIG. 4B, the user has selected a "click to engage in a conversation" link for first search result 472A. In response, a communication session is established with the interactive communication system 120 and directed to the "fictitious floor store" agent. The interactive communication system 120 provides an output 480A of "hi, what can help" and indicates it in the interface as originating from the "virtual floor store". In some implementations, the output 480A may be automatically provided by the system 120 based on its assignment as a conversation (conversation) initiator for the agent in the agent database 152. In some of those embodiments, the proxy device for the proxy may explicitly assign output 480A as a session initiator for the proxy. In other implementations, output 480A may be assigned to an agent as a session initiator based on historical use of output 480A by the agent device of the agent and/or by agent devices of other agents sharing the domain(s) with the agent. For example, if the person using the proxy device 410 has used "hi in the past, what can help? "if a session was initiated," system 120 may provide "do it want to use it as a default session initiator? "and if affirmative input is received," hi what can be aided "is used as a conversation initiator for the agent. In addition, for example, if the system 120 determines that the proxy device(s) of the proxy have been used in the past, "hi, what can be assisted? "at least a threshold amount of times as a conversation initiator and/or with a threshold frequency," hi "can be used by the system 120 thereafter, what can be assisted? "as a session initiator for agents.
In yet other implementations, the system 120 may provide the content suggestion element "hi, what may help? "as suggested conversation initiator, and may provide output 480A in response to selection of a content suggestion element at proxy device 440A. In some of these embodiments, content suggestion elements may be suggested via proxy device 440A (and/or other device(s) of the proxy) based on past interactions, where the content suggestion elements are provided as conversation starters. As one example, assume "how can be aided" was previously provided to the proxy device 440A as a suggested conversation initiator, and is edited by the proxy user via the proxy device 440A to instead show "what can be aided? ". Thereafter, based on the agent user's previous edits to the conversation starter, the system 120 may provide the content suggestion element "hi, what may help? "as suggested conversation initiator (or automatically transmit it on behalf of the agent). In this manner, the system 120 can learn from the editing of the content suggestion element by the agent and provide the edited version of the content suggestion element to the agent in future communication sessions (e.g., in lieu of the originally provided content suggestion element).
In response to output 480A, the user provides typed or voice input 482A "i want to schedule installation of a new wood floor". Based on input 482A, interactive communication system 120 determines the current intent to schedule an installation appointment and the actions of schedule. Further, the interactive communication system 120 may determine that there are no parameters defined for the "virtual floor store" agent that are used to "schedule" actions. In response, the interactive communication system 120 may identify stored parameters for the "schedule" action and for the domain of the agent (e.g., the "floor" domain). The stored parameters for the field may indicate that for the scheduling action, two separate appointments should be made on two separate dates (e.g., one appointment for "measurement" and the other appointment for "installation"). Based on the stored parameters for the domain, the interactive communication system 120 may generate the action execution element 480B of fig. 4D and cause it to be visually presented at the graphical user interface of the user device 410 as shown in fig. 4D. The action execution element 480B of fig. 4D indicates that two separate appointments are to be scheduled and includes selectable elements 480B1, 480B2, 480B3 that may be selected (e.g., by tapping or voice selection) to initiate execution of the scheduled actions.
However, before causing the action execution element 480B of fig. 4D to be visually presented at the user device 410, the interactive communication system 120 may first cause an indication of the action execution element 480B to be presented at the proxy device 440A-as shown in fig. 4C. In fig. 4C, the system 120 causes a prompt 484A to be presented at the proxy device 440A. Prompt 484A asks whether the agent can accept an action execution element that provides for the scheduling of two separate appointments. In addition, the system 120 provides a positive user interface element 484A1 that may be selected by an individual associated with the agent to confirm that the provision of the prompt is acceptable. In some implementations, the system 120 provides the action execution element 480B to the user device 410 in fig. 4D only when the affirmative interface element 484A1 is selected. In some of those embodiments, in response to selection of the affirmative interface element 484A1, the system may provide further prompts via the agent device 440A to determine whether the agent desires to use "two separate appointments" for the "schedule" action for the agent in the future. If a positive input is received in response to such a prompt, the "two separate appointments" parameter may be stored as an agent specific parameter for the agent for the "schedule" action. Also shown in fig. 4C is an alternative parameter interface element 484A2 that may be selected by an individual to configure alternative parameters for alternative action execution elements that may be provided to the user device 410 in place of the action execution element 480B.
In some implementations, in response to determining that one or more criteria are met, the interactive communication system 120 provides a prompt 484A to the proxy device 440A. For example, the system 120 may provide the hint 484A based on the action execution element 480B generated from the parameters for the domain (and optionally not provide the hint if the action execution element is generated based only on the agent-specific parameters). Although not shown in fig. 4C, in various embodiments, a transcription of the input from the user device 410 and/or an output to the user device 410 may optionally be displayed along with the prompt 484A.
Referring again to fig. 4D, in response to selection of the affirmative interface element 484A1 (fig. 4C) at the proxy device 440A, an action execution element 480B is presented at the user device 410. The user of the user device 410 may select the selectable element 480B1, 480B2, or 480B3 to interactively schedule both measurement and installation appointments. For example, if the user selects selectable element 480B1, the user will be prompted with a selectable option for "date of installation". One of action agents 135A-N and/or interactive communication system 120 may be used in an interactive arrangement. In some implementations, the dates and times of selectable elements 480B1 and 480B2 may be selected based on availability data for the agent and/or the user, as may any additional interface elements presented when selecting "view more" selectable element 480B 3.
In fig. 4D, after completing the scheduling action (as shown by the four vertical dots), the user provides further typed or voice input 482B: "how long will it take to measure? ". Based on input 482B, interactive communication system 120 determines that the current intent is "proxy text reply" and action is "send message". Further, the interactive communication system 120 may generate proxy action execution elements 484B1, 484B2, and 484B3 (fig. 4E) and cause them to be visually presented at proxy device 440A, as shown in fig. 4E. Proxy action execution elements 484B1, 484B2, and 484B3 are each text suggestion elements and each include text that is contextually relevant to input 482B (fig. 4D). Selection of any of the proxy action execution elements 484B1, 484B2, and 484B3 causes corresponding text to be displayed at the user device as a reply from the proxy. Also shown in FIG. 4E is an indication 484B that summarizes the input 482B and provides a context for proxy action execution elements 484B1, 484B2, and 484B 3. Alternatively, input 482B may itself be presented at proxy device 441A.
In some of those embodiments, in response to selection of one of the proxy action execution elements 484B1, 484B2, and 484B3, the system 120 may provide a further prompt via the proxy device 440A to determine whether the proxy desires to automatically send the selected text response to the proxy for a "send message" action in the future that is a response to the "measure reservation length" query. Additionally or alternatively, the system 120 may employ the response as such a signal: for determining whether an action execution element comprising the selected response should be presented to the agent before sending it to the user for a similar query in the future or alternatively automatically sending the action execution element comprising the selected response.
Fig. 4F illustrates further typed or voice input 482N provided by the user later in the communication session, and an action execution element 480N that may be provided in response and that includes a selectable element 480N 1. In response to selection of selectable element 480N1, user device 410 may expose a camera interface and/or a separate camera application, thereby enabling a user to capture an image. The captured image may then be automatically (or after user interface input) provided to the interactive communication system 120. In some implementations, the interactive communication system 120 may route images to a separate agent device of the agent based on the agent device being associated with an individual more suitable to answer the query of input 482N (e.g., based on parameters in the agent database 152 and/or historical interactions of the agent device (s)). In some implementations, the interactive communication system 120 provides the action execution element 480N without first prompting any proxy devices. For example, as described herein, in response to determining that the confidence level for the action execution meets a threshold, the system 120 can provide an action execution element 480N without first prompting any proxy devices.
Fig. 5 is a block diagram of an example computing device 510, which example computing device 510 may optionally be used to perform one or more aspects of the techniques described herein. In some implementations, one or more components in fig. 1 may include one or more components of an example computing device 510.
The computing device 510 typically includes at least one processor 514 that communicates with a number of peripheral devices over a bus subsystem 512. These peripheral devices may include a storage subsystem 524 including, for example, a memory subsystem 525 and a file storage subsystem 526, a user interface output device 520, a user interface input device 522, and a network interface subsystem 516. Input and output devices allow a user to interact with computing device 510. Network interface subsystem 516 provides an interface to external networks and couples to corresponding interface devices among other computing devices.
User interface input devices 522 may include a keyboard, a pointing device such as a mouse, trackball, touch pad, or tablet, a scanner, a touch screen incorporated into a display, an audio input device such as a voice recognition system, a microphone, and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways of inputting information into computing device 510 or onto a communication network.
The user interface output device 520 may include a display subsystem, printer, facsimile machine, or a non-visual display such as an audio output device. The display subsystem may include a Cathode Ray Tube (CRT), a flat panel device such as a liquid crystal display (liquid crystal display, LCD), a projection device, or some other mechanism for creating visual images. The display subsystem may also provide for non-visual display, such as via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and ways of outputting information from computing device 510 to a user or another machine or computing device.
Storage subsystem 524 stores programming and data structures that provide the functionality of some or all of the modules described herein. For example, the storage subsystem 524 may include logic to perform selected aspects of the methods of fig. 3A, 3B, and 3C.
These software modules are typically executed by processor 514 alone or in combination with other processors. The memory 525 used in the storage subsystem 524 may include a plurality of memories including a main random access memory (random access memory, RAM) 530 for storing instructions and data during program execution and a Read Only Memory (ROM) 532 for storing fixed instructions. File storage subsystem 526 may provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive, and associated removable media, CD-ROM drive, optical drive, or removable media cartridge. Modules implementing the functionality of certain embodiments may be stored by file storage subsystem 526 in storage subsystem 524, or in other machines accessible to processor(s) 514.
Bus subsystem 512 provides a mechanism for letting the various components and subsystems of computing device 510 communicate with each other as intended. Although bus subsystem 512 is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple buses.
Computing device 510 may be of different types including a workstation, a server, a computing cluster, a blade server, a server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computing device 510 depicted in FIG. 5 is intended only as a specific example for purposes of illustrating some embodiments. Many other configurations of computing device 510 are possible with more or fewer components than the computing device depicted in fig. 5.
Where certain embodiments discussed herein may collect or use personal information about a user (e.g., user data extracted from other electronic communications, information about a user's social network, user location, user time, user biometric information, and user activity and demographic information), the user is provided with one or more opportunities to control whether information is collected, whether personal information is stored, whether personal information is used, and how information about the user is collected, stored, and used. That is, the systems and methods discussed herein collect, store, and/or use user personal information only when explicit authorization to collect, store, and/or use the user personal information is received from an associated user. For example, a user is provided with control over whether a program or feature gathers user information about that particular user or other users associated with the program or feature. Each user for whom personal information is to be collected is presented with one or more options to allow control over the collection of information associated with that user, providing permissions or authorizations as to whether and which portions of the information are to be collected. For example, one or more such control options may be provided to the user over a communications network. In addition, certain data may be processed in one or more ways to delete personally identifiable information before it is stored or used. As one example, the identity of the user may be processed such that personally identifiable information cannot be determined. As another example, the geographic location of a user may be generalized to a larger area such that the particular location of the user cannot be determined.
Claims (9)
1. A method implemented by one or more processors, the method comprising:
during a communication session comprising a user computing device implemented by one or more processors and an interactive communication system, receiving one or more instances of natural language input, the instances of natural language input comprising free-form input formulated by a user of the user computing device via a user interface input device of the user computing device;
generating a confidence score for a current intent of the communication session, wherein generating the confidence score is based on processing natural language input using one or more intent models, each of the one or more intent models being a corresponding trained machine learning model;
selecting a current intent based on the confidence score;
determining an action for the selected current intent;
parsing an agent for the action;
determining whether one or more criteria for sending an action execution element based on the action to the user computing device are met;
in response to determining that one or more criteria are met:
transmitting an action-based action execution element to the user computing device without any agent computing device that first prompted the agent; and
In response to determining that one or more criteria are not satisfied:
sending a prompt related to the action to a proxy computing device of the proxy, wherein the proxy computing device is different from the user computing device, and
the action execution element is then sent to the user computing device only if a positive input is received from the proxy computing device in response to sending the prompt.
2. The method of claim 1, wherein the one or more criteria include a confidence score of the current intent meeting a threshold.
3. The method of claim 1, wherein the threshold is a fixed threshold.
4. The method of claim 1, further comprising:
determining whether agent-specific parameters specific to an agent are available for the action;
wherein determining whether the one or more criteria are met is based on whether the agent specific parameter is available for the action.
5. The method of claim 4, wherein determining whether the one or more criteria are met is based on whether the agent-specific parameter is available for the action comprises:
in response to determining that the agent-specific parameter is not available, it is determined that the one or more criteria are not met.
6. The method of claim 1, wherein selection of the action execution element causes the user computing device to initiate execution of the action by causing the computing device to execute a separate application.
7. The method of claim 1, wherein the one or more criteria are based on interactions of the agent in response to prompts associated with the action and are provided to the agent in past communication sessions.
8. A non-transitory computer-readable storage medium storing computer-readable instructions that, when executed by at least one computing device, cause the at least one computing device to perform the method of any of claims 1-7.
9. A system for facilitating user device and/or proxy device actions during a communication session, comprising:
at least one processor; and
at least one computer readable memory storing computer readable instructions that, when executed by at least one processor, cause the at least one processor to perform the method of any one of claims 1 to 7.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762548928P | 2017-08-22 | 2017-08-22 | |
US62/548,928 | 2017-08-22 | ||
PCT/US2018/047474 WO2019040591A1 (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or agent device actions during a communication session |
CN201880039265.9A CN110753908B (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or proxy device actions during a communication session |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880039265.9A Division CN110753908B (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or proxy device actions during a communication session |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117573248A true CN117573248A (en) | 2024-02-20 |
Family
ID=63490707
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880039265.9A Active CN110753908B (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or proxy device actions during a communication session |
CN202311395663.3A Pending CN117573248A (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or proxy device actions during a communication session |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880039265.9A Active CN110753908B (en) | 2017-08-22 | 2018-08-22 | Facilitating user device and/or proxy device actions during a communication session |
Country Status (4)
Country | Link |
---|---|
US (2) | US11269666B2 (en) |
EP (1) | EP3622392A1 (en) |
CN (2) | CN110753908B (en) |
WO (1) | WO2019040591A1 (en) |
Families Citing this family (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110753908B (en) | 2017-08-22 | 2023-11-10 | 谷歌有限责任公司 | Facilitating user device and/or proxy device actions during a communication session |
US11050700B2 (en) * | 2017-11-03 | 2021-06-29 | Salesforce.Com, Inc. | Action response selection based on communication message analysis |
EP3707703A1 (en) * | 2018-11-28 | 2020-09-16 | Google LLC. | Training and/or using a language selection model for automatically determining language for speech recognition of spoken utterance |
USD917522S1 (en) * | 2018-12-13 | 2021-04-27 | Robinhood Markets, Inc | Display screen or portion thereof having a graphical user interface for button menus |
JP7250946B2 (en) * | 2019-02-25 | 2023-04-03 | ライブパーソン， インコーポレイテッド | Intent-driven contact center |
US11544463B2 (en) * | 2019-05-09 | 2023-01-03 | Intel Corporation | Time asynchronous spoken intent detection |
AU2020290470B2 (en) | 2019-06-12 | 2023-03-02 | Liveperson, Inc. | Systems and methods for communication system intent analysis |
US11269599B2 (en) * | 2019-07-23 | 2022-03-08 | Cdw Llc | Visual programming methods and systems for intent dispatch |
US11184298B2 (en) * | 2019-08-28 | 2021-11-23 | International Business Machines Corporation | Methods and systems for improving chatbot intent training by correlating user feedback provided subsequent to a failed response to an initial user intent |
US11748128B2 (en) * | 2019-12-05 | 2023-09-05 | International Business Machines Corporation | Flexible artificial intelligence agent infrastructure for adapting processing of a shell |
US11797820B2 (en) | 2019-12-05 | 2023-10-24 | International Business Machines Corporation | Data augmented training of reinforcement learning software agent |
US11574246B2 (en) * | 2020-01-21 | 2023-02-07 | Microsoft Technology Licensing, Llc | Updating training examples for artificial intelligence |
US20210289006A1 (en) * | 2020-03-10 | 2021-09-16 | SecondBody, Inc. | Modifications to Electronic Communication Protocols to Facilitate Agent-based Communications |
US11768945B2 (en) * | 2020-04-07 | 2023-09-26 | Allstate Insurance Company | Machine learning system for determining a security vulnerability in computer software |
US11748660B2 (en) * | 2020-09-17 | 2023-09-05 | Google Llc | Automated assistant training and/or execution of inter-user procedures |
EP4348494A1 (en) * | 2021-05-24 | 2024-04-10 | Liveperson, Inc. | Data-driven taxonomy for annotation resolution |
WO2024060003A1 (en) * | 2022-09-20 | 2024-03-28 | Citrix Systems, Inc. | Computing device and methods providing input sequence translation for virtual computing sessions |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100235523A1 (en) * | 2009-03-16 | 2010-09-16 | Robert Garcia | Framework for supporting multi-device collaboration |
US9560089B2 (en) * | 2012-12-11 | 2017-01-31 | Nuance Communications, Inc. | Systems and methods for providing input to virtual agent |
KR102030114B1 (en) * | 2013-01-07 | 2019-10-08 | 삼성전자주식회사 | Server and method for comtrolling the server |
US9471390B2 (en) * | 2013-01-16 | 2016-10-18 | International Business Machines Corporation | Scheduling mapreduce jobs in a cluster of dynamically available servers |
US9489625B2 (en) | 2013-05-10 | 2016-11-08 | Sri International | Rapid development of virtual personal assistant applications |
US20150169285A1 (en) * | 2013-12-18 | 2015-06-18 | Microsoft Corporation | Intent-based user experience |
KR102301880B1 (en) | 2014-10-14 | 2021-09-14 | 삼성전자 주식회사 | Electronic apparatus and method for spoken dialog thereof |
US9466297B2 (en) | 2014-12-09 | 2016-10-11 | Microsoft Technology Licensing, Llc | Communication system |
US9508339B2 (en) * | 2015-01-30 | 2016-11-29 | Microsoft Technology Licensing, Llc | Updating language understanding classifier models for a digital personal assistant based on crowd-sourcing |
US20160342955A1 (en) * | 2015-05-08 | 2016-11-24 | Daysaver, Inc. | Multi-entity event coordination server and system |
EP3122001B1 (en) * | 2015-07-24 | 2019-10-23 | Facebook, Inc. | Providing personal assistant service via messaging |
US9699128B1 (en) * | 2016-05-17 | 2017-07-04 | Google Inc. | Automated generation of prompts and analyses of user responses to the prompts to determine an entity for an action and perform one or more computing actions related to the action and the entity |
CN110753908B (en) | 2017-08-22 | 2023-11-10 | 谷歌有限责任公司 | Facilitating user device and/or proxy device actions during a communication session |
-
2018
- 2018-08-22 CN CN201880039265.9A patent/CN110753908B/en active Active
- 2018-08-22 EP EP18765262.3A patent/EP3622392A1/en active Pending
- 2018-08-22 WO PCT/US2018/047474 patent/WO2019040591A1/en unknown
- 2018-08-22 US US16/621,769 patent/US11269666B2/en active Active
- 2018-08-22 CN CN202311395663.3A patent/CN117573248A/en active Pending
-
2022
- 2022-03-04 US US17/687,316 patent/US11941420B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US20200143114A1 (en) | 2020-05-07 |
US11941420B2 (en) | 2024-03-26 |
CN110753908B (en) | 2023-11-10 |
CN110753908A (en) | 2020-02-04 |
US11269666B2 (en) | 2022-03-08 |
EP3622392A1 (en) | 2020-03-18 |
US20220188133A1 (en) | 2022-06-16 |
WO2019040591A1 (en) | 2019-02-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110753908B (en) | Facilitating user device and/or proxy device actions during a communication session | |
US10685187B2 (en) | Providing access to user-controlled resources by automated assistants | |
JP7032504B2 (en) | Automatic assistant with meeting ability | |
KR102424261B1 (en) | User-progammable automated assistant | |
US9990591B2 (en) | Automated assistant invocation of appropriate agent | |
US10063497B2 (en) | Electronic reply message compositor and prioritization apparatus and method of operation | |
US20180285595A1 (en) | Virtual agent for the retrieval and analysis of information | |
US11436417B2 (en) | Providing access to user-controlled resources by automated assistants | |
US10826856B2 (en) | Automated generation of prompts and analyses of user responses to the prompts to determine an entity for an action and perform one or more computing actions related to the action and the entity | |
EP3926625B1 (en) | Voice to text conversion based on third-party agent content | |
CN112136124A (en) | Dependency graph conversation modeling for human-machine conversation sessions with computer-implemented automated assistants | |
CN111316276A (en) | Using distributed state machines with automated assistants for human-machine conversation to protect private data | |
CN110574104A (en) | Automated assistant data flow | |
CN111684438A (en) | Selecting content for rendering on a display of an assistant device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |