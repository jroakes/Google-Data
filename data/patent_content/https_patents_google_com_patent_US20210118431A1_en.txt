US20210118431A1 - Intelligent short text information retrieve based on deep learning - Google Patents
Intelligent short text information retrieve based on deep learning Download PDFInfo
- Publication number
- US20210118431A1 US20210118431A1 US17/138,232 US202017138232A US2021118431A1 US 20210118431 A1 US20210118431 A1 US 20210118431A1 US 202017138232 A US202017138232 A US 202017138232A US 2021118431 A1 US2021118431 A1 US 2021118431A1
- Authority
- US
- United States
- Prior art keywords
- vector
- sentence
- request
- terms
- processors
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/40—Information retrieval; Database structures therefor; File system structures therefor of multimedia data, e.g. slideshows comprising image and additional audio data
- G06F16/48—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/483—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/93—Document management systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/16—Matrix or vector computation, e.g. matrix-matrix or matrix-vector multiplication, matrix factorization
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
Definitions
- Text can be searched using keyword matching.
- the document that is returned can be the document that included the greatest number of keyword matches. For example, the returned document included more instances of the keywords as compared to the documents that were not returned.
- this form of searching requires that the user provide the proper keyword when performing the search.
- the system may not take into account synonyms or semantically related words when selecting the documents to return in response to a search request.
- Text based searching can return results based on the system determining that the searched text includes keywords or search terms.
- the present solution can return results based on a semantic analysis.
- the solutions described herein can provide high accuracy compared against the full-text or keyword-based retrieval algorithms.
- the solution can sort the results by semantic relevance based on the user's input search request.
- the distance of the user's search request and the searched text can be represented by a Pearson Correlation Coefficient, rather than a number of matching words used by keyword-based algorithms.
- the present solution can provide meaningful results to the user even when the search text does not include the exact search keywords or phrases entered by the user.
- the present solution can retrieve text-based data (e.g., electronic documents, text files, website text, email messages, etc.), images, videos, audio files, or other types of content from large data sets based on deep learning.
- the solution can convert the text of the input search request and the text of the searched documents into a high dimension data space.
- the solution can retrieve meaningful results by selecting documents located near the text of the input search result in the high dimension data space.
- a method to retrieve content based on an input can include receiving, by a data processing system, a request that can include a plurality of terms.
- the method can include generating, by a vector generator executed by the data processing system, a sentence vector to map the request to a first vector space.
- the method can include retrieving, from a database by the vector generator, a plurality of trained sentence vectors.
- the trained sentence vectors can correspond to a plurality of candidate electronic documents. Each of the plurality of trained sentence vectors can map a respective sentence to the first vector space.
- the method can include generating, by a scoring engine executed by the data processing system, a similarity score for each of the plurality of trained sentence vectors.
- the similarity score can be based on the respective one of the plurality of trained sentence vectors and the sentence vector.
- the method can include selecting, by the scoring engine, an electronic document from the plurality of candidate electronic documents based on a ranking of the similarity score of each of the plurality of trained sentence vectors.
- the method can include providing, by the data processing system, the electronic document.
- the method can include generating, by the vector generator, a word vector for each of the plurality of terms.
- the word vector can map a respective term of the plurality of terms to the vector space.
- the word vector for each of the plurality of terms can include a vector of weights indicating a probability of one of the plurality of terms occurring.
- the method can include generating, by the vector generator, the word vector for each of the plurality of terms with one of a Continuous Bag-of-Words neural network model or a Skip-Gram neural network model.
- the method can include generating, by the vector generator, a trained sentence vector based on an average of candidate word vectors of terms in a sentence.
- the method can include generating, by the scoring engine, the similarity score for each of the plurality of trained sentence vectors using a Pearson Similarity Calculation.
- the method can include generating, by the scoring engine, a return list.
- the return list can include a subset of the plurality of candidate electronic documents corresponding to one of the plurality of trained sentence vectors having the similarity score above a predetermined threshold.
- the method can include providing, by the data processing system, the return list.
- the method can include calculating, by the vector generator, the sentence vector based on a difference between an inner product of each of a plurality of word vectors in a sentence and a common sentence vector.
- the method can include calculating, by the vector generator, a common sentence vector by averaging each of the plurality of trained sentence vectors.
- the plurality of candidate electronic documents can include web pages, text files, log files, forum questions, or forum answers.
- the method can include one-hot encoding, by the vector generator, each of the plurality of terms to generate a binary array for each of the plurality of terms.
- a system to retrieve content includes a memory storing processor executable instructions and one or more processors.
- the system can receive a request that can include a plurality of terms.
- the system can generate, by a vector generator executed by the one or more processors, a sentence vector to map the request to a first vector space.
- the system can retrieve, from a database by the vector generator, a plurality of trained sentence vectors corresponding to a plurality of candidate electronic documents. Each of the plurality of trained sentence vectors can map a respective sentence to the vector space.
- the system can generate, by a scoring engine executed by the one or more processors, a similarity score for each of the plurality of trained sentence vectors.
- the similarity score can be based on the respective one of the plurality of trained sentence vectors and the sentence vector.
- the system can select, by the scoring engine, an electronic document from the plurality of candidate electronic documents based on a ranking of the similarity score of each of the plurality of trained sentence vectors.
- the system can provide the electronic document.
- the one or more processors can generate, by the vector generator, a word vector for each of the plurality of terms.
- the word vector can map a respective term of the plurality of terms to the vector space.
- the word vector for each of the plurality of terms can include a vector of weights indicating a probability of one of the plurality of terms occurring.
- the system can generate, by the vector generator, the word vector for each of the plurality of terms with one of a Continuous Bag-of-Words neural network model or a Skip-Gram neural network model.
- the system can generate, by the vector generator, a trained sentence vector based on an average of candidate word vectors of terms in a sentence.
- the system can generate, by the scoring engine, the similarity score for each of the plurality of trained sentence vectors using a Pearson Similarity Calculation.
- the system can generate, by the scoring engine, a return list that can include a subset of the plurality of candidate electronic documents corresponding to one of the plurality of trained sentence vectors having the similarity score above a predetermined threshold.
- the system can include provide the return list.
- the system can calculate, by the vector generator, a common sentence vector by averaging each of the plurality of trained sentence vectors.
- the plurality of candidate electronic documents can include web pages, text files, log files, forum questions, or forum answers.
- FIGS. 1A-1D illustrate block diagrams of embodiments of a computing device
- FIG. 2 illustrates a block diagram of an example system to retrieve content based on an input
- FIG. 3 illustrates a block diagram of an example method to retrieve content based on an input using the system illustrated in FIG. 2 ;
- FIG. 4 illustrates a plot comparing the quality of search results using the systems and method described herein to a keyword-based search.
- Section A describes a computing environment which may be useful for practicing embodiments described herein;
- Section B describes systems and methods for information retrieval based on deep learning.
- FIGS. 1A and 1B depict block diagrams of a computing device 100 useful for practicing embodiments of the systems and devices described further below in Section B.
- each computing device 100 includes a central processing unit 101 , and a main memory unit 122 .
- a computing device 100 may include a visual display device 124 , a keyboard 126 and/or a pointing device 127 , such as a mouse.
- Each computing device 100 may also include additional optional elements, such as one or more input/output devices 130 a - 130 b (generally referred to using reference numeral 130 ), and a cache memory 140 in communication with the central processing unit 101 .
- the input/output devices 130 a - 130 b can include audio output devices, such as a speaker, headphones, or an audio output port configured to communicatively couple with an external audio output device.
- the central processing unit 101 is any logic circuitry that responds to and processes instructions fetched from the main memory unit 122 .
- the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Samsung Electronics of Suwon, Korea; those manufactured by Micron Technology of Boise, Id.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif., among others.
- the computing device 100 may be based on any of these processors, or any other processor capable of operating as described herein.
- Main memory unit 122 may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor 101 , such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM).
- SRAM Static random access memory
- BSRAM SynchBurst SRAM
- DRAM Dynamic random access memory
- FPM DRAM Fast Page Mode DRAM
- EDRAM Enhanced D
- the main memory 122 may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein.
- the processor 101 communicates with main memory 122 via a system bus 150 (described in more detail below).
- FIG. 1B depicts an embodiment of a computing device 100 in which the processor communicates directly with main memory 122 via a memory port 103 .
- the main memory 122 may be DRDRAM.
- FIG. 1B depicts an embodiment in which the main processor 101 communicates directly with cache memory 140 via a secondary bus, sometimes referred to as a backside bus.
- the main processor 101 communicates with cache memory 140 using the system bus 150 .
- Cache memory 140 typically has a faster response time than main memory 122 and is typically provided by SRAM, BSRAM, or EDRAM.
- the processor 101 communicates with various I/O devices 130 via a local system bus 150 .
- FIG. 1B depicts an embodiment of a computer 100 in which the main processor 101 communicates directly with I/O device 130 b via HyperTransport, Rapid I/O, or InfiniBand.
- FIG. 1B also depicts an embodiment in which local busses and direct communication are mixed: the processor 101 communicates with I/O device 130 b using a local interconnect bus while communicating with I/O device 130 a directly.
- the computing device 100 may support any suitable installation device 116 , such as a CD-ROM drive, a CD-R/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs.
- the computing device 100 may further comprise a storage device 128 , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs.
- any of the installation devices 116 could also be used as the storage device 128 .
- the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX®, a bootable CD for GNU/Linux that is available as a GNU/Linux distribution from knoppix.net.
- a bootable CD such as KNOPPIX®
- KNOPPIX® a bootable CD for GNU/Linux that is available as a GNU/Linux distribution from knoppix.net.
- the computing device 100 may include a network interface 118 to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above.
- the network interface 118 may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device 100 to any type of network capable of communication and performing the operations described herein.
- I/O devices 130 a - 130 n may be present in the computing device 100 .
- Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets.
- Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers.
- the I/O devices 130 may be controlled by an I/O controller 123 as shown in FIG. 1A .
- the I/O controller may control one or more I/O devices such as a keyboard 126 and a pointing device 127 , e.g., a mouse or optical pen.
- an I/O device may also provide storage 128 and/or an installation medium 116 for the computing device 100 .
- the computing device 100 may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif. or SanDisk Corporation of Milpitas, Calif.
- the computing device 100 may comprise or be connected to multiple display devices 124 a - 124 n , which each may be of the same or different type and/or form.
- any of the I/O devices 130 a - 130 n and/or the I/O controller 123 may comprise any type and/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices 124 a - 124 n by the computing device 100 .
- the computing device 100 may include any type and/or form of video adapter, video card, driver, and/or library to interface, communicate, connect or otherwise use the display devices 124 a - 124 n .
- a video adapter may comprise multiple connectors to interface to multiple display devices 124 a - 124 n .
- the computing device 100 may include multiple video adapters, with each video adapter connected to one or more of the display devices 124 a - 124 n .
- any portion of the operating system of the computing device 100 may be configured for using multiple displays 124 a - 124 n .
- one or more of the display devices 124 a - 124 n may be provided by one or more other computing devices, such as computing devices 100 a and 100 b connected to the computing device 100 , for example, via a network.
- These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device 124 a for the computing device 100 .
- a computing device 100 may be configured to have multiple display devices 124 a - 124 n.
- an I/O device 130 may be a bridge 170 between the system bus 150 and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.
- an external communication bus such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI/LAMP bus, a FibreChannel bus, or
- a computing device 100 of the sort depicted in FIGS. 1A and 1B typically operate under the control of operating systems, which control scheduling of tasks and access to system resources.
- the computing device 100 can be running any operating system such as any of the versions of the Microsoft® Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS® for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein.
- Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3 .
- WINDOWS NT 4 . 0 WINDOWS CE, WINDOWS XP, WINDOWS 7, and WINDOWS 10, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and/or form of a UNIX operating system, among others.
- the computing device 100 may have different processors, operating systems, and input devices consistent with the device.
- the computer 100 may be a smartphone or a tablet, such as those developed by Apple Inc., by Samsung Electronics, by Huawei. Inc., or by Google Inc., among others.
- the smartphone or tablet may be operated under the control of an operating system (such as Android or iOS) and may include a stylus input device as well as a touch sensitive screen.
- the computing device 100 can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.
- the computing device 100 may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data.
- the computing device 100 may comprise a parallel processor with one or more cores.
- the computing device 100 is a shared memory parallel device, with multiple processors and/or multiple processor cores, accessing all available memory as a single global address space.
- the computing device 100 is a distributed memory parallel device with multiple processors each accessing local memory only.
- the computing device 100 has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors.
- the computing device 100 such as a multi-core microprocessor, combines two or more independent processors into a single package, often a single integrated circuit (IC).
- the computing device 100 includes a chip having a Cell Broadband Engine architecture and including a Power processor element and a plurality of synergistic processing elements, the Power processor element and the plurality of synergistic processing elements linked together by an internal high-speed bus, which may be referred to as an element interconnect bus.
- the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data (SIMD). In other embodiments, the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data (MIMD). In still other embodiments, the processor may use any combination of SIMD and MIMD cores in a single device.
- the computing device 100 may comprise a graphics processing unit.
- the computing device 100 includes at least one central processing unit 101 and at least one graphics processing unit.
- the computing device 100 includes at least one parallel processing unit and at least one graphics processing unit.
- the computing device 100 includes a plurality of processing units of any type, one of the plurality of processing units comprising a graphics processing unit.
- a first computing device 100 a executes an application on behalf of a user of a client computing device 100 b .
- a computing device 100 a executes a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing devices 100 b .
- the execution session is a hosted desktop session.
- the computing device 100 executes a terminal services session.
- the terminal services session may provide a hosted desktop environment.
- the execution session provides access to a computing environment, which may comprise one or more of: an application, a plurality of applications, a desktop application, and a desktop session in which one or more applications may execute.
- Text based searching can return results based on the system determining that the searched text includes keywords or search terms.
- the present solution can return results based on a semantic analysis.
- the solutions described herein can provide high accuracy compared against the full-text or keyword-based retrieval algorithms.
- the solution can sort the results by semantic relevance based on the user's input search request.
- the distance between the user's search request and the searched text can be represented by a Pearson Correlation Coefficient, rather than a number of matching words used by keyword-based algorithms.
- the present solution can provide meaningful results to the user even when the search text does not include the exact search keywords or phrases entered by the user.
- the present solution can retrieve text-based data (e.g., electronic documents, text files, website text, email messages, etc.), images, videos, audio files, or other types of content from large data sets based on deep learning.
- the solution can convert the text of the input search request and the text of the searched documents into a high dimension data space.
- the solution can retrieve meaningful results by selecting documents located near the text of the input search result in the high dimension data space.
- FIG. 2 illustrates a block diagram of an example system 200 to retrieve content based on an input.
- the system 200 includes a server 202 , data sources 218 ( 1 )- 218 (N) (collectively referred to as data sources 218 ), and a client device 220 .
- the server 202 executes a vector generator 204 that includes a word vector generator 206 and a sentence vector generator 208 .
- the server 202 also executes a scoring engine 214 and a results generator 216 .
- the server 202 includes memory on which the server 202 stores a word vector database 210 and a sentence vector database 212 .
- the server 202 and the client device 220 can be a computing device 100 , as described above, and can be referred to as a data processing system.
- each of the above-mentioned elements or entities of the system 200 can be implemented in hardware, software, or a combination of hardware and software.
- each component of the system 200 may be implemented using the hardware or a combination of the hardware or software detailed above in connection with FIGS. 1A-1D .
- the vector generator 204 can include any application, program, library, script, task, service, process, or any type and form of executable instructions executing on hardware of the server 202 .
- the hardware can include circuitry such as one or more processors in one or more embodiments.
- Communication between the server 202 , the client device 220 , and the data sources 218 can take place over any type or form of network.
- such communications can be carried out via any type of network capable of supporting communications between the server 202 , the data sources 218 , and the client device 220 .
- the communications can be performed via any of a local-area network (LAN) (e.g., a company Intranet), a metropolitan area network (MAN), or a wide area network (WAN) (e.g., the Internet).
- LAN local-area network
- MAN metropolitan area network
- WAN wide area network
- the client device 220 could execute an instance of the vector generator 204 , the word vector generator 206 , the sentence vector generator 208 , the scoring engine 214 , and the results generator 216 and store (or have access to) the word vector database 210 and the sentence vector database 212 .
- the client device 220 can execute an instance of the vector generator 204 , the word vector generator 206 , the sentence vector generator 208 , the scoring engine 214 , and the results generator 216 to search text-based data stored locally at the client device 220 .
- the server 202 can be configured to receive a request from the client device 220 .
- the client device 220 can transmit the request to the server 202 over a network, for example.
- the request can include a plurality of terms.
- the plurality of terms can form, and be referred to as, a search string.
- the server 202 can receive the request through a web-based interface.
- the client device 220 can access website hosted by the server 202 or corresponding to the server 202 that includes an input field. Text entered into the input field can be transmitted over the HTTP protocol to the server 202 .
- the request can be a text-based search request.
- the request can be in other formats.
- the request can be an audio-based request that the server 202 or the client device 220 can convert into a string of text using natural language processing.
- the server 202 can use the request to perform, as described below, a semantic analysis of candidate electronic documents stored in the data sources 218 and return one or more electronic documents based on the semantic analysis.
- the server 202 can provide the client device 220 with a return list of selected electronic documents or a single electronic document selected from among the candidate electronic documents stored on the data sources 218 .
- the data sources 218 can include databases stored locally on the server 202 or remote from the server 202 .
- the data sources 218 can each include a plurality of candidate electronic documents.
- the candidate electronic documents can include the text that the user wishes to search when submitting a request to the server 202 .
- the candidate electronic documents can include text-based documents, web pages, emails, and other electronic messages, forum posts, help files, log files, or any combination thereof.
- each of the data sources 218 can store a different form of electronic document.
- the data source 218 ( 1 ) may store text-based documents and the data source 218 ( 2 ) can store emails.
- the server 202 can execute the vector generator 204 .
- the vector generator 204 can convert terms or words included in the request or data sources 218 into a high dimensional data space.
- the conversion of the text into the high dimensional space can enable the server 202 to return highly accurate and intelligent responses by determining results based at a semantic level rather than based on keyword matching.
- the server 202 can base the selection of results based on the distance between the input request and the different electronic documents in the high dimensional data space rather than on the number of times the electronic documents match one or more terms in the request.
- the vector generator 204 can perform data pre-processing.
- Data pre-processing can include training the neural network of the word vector generator 206 , extracting text from the data sources 218 and input request, and preparing text from the data sources 218 and the input requests.
- the vector generator 204 can process the electronic documents stored in the data sources 218 to retrieve the text from the electronic documents. For example, the vector generator 204 can extract the text from the electronic documents and parse the text into strings that are stored in association with an identifier of the electronic document from which the text was extracted.
- the electronic document can be a web page and the vector generator 204 can process the content of the web page and identify text between predetermined HTML, tags (e.g., ⁇ p> and ⁇ /p>) to separate the text from formatting and other code included in the web page.
- the vector generator 204 can convert the extracted text into an array of words. For example, for a given electronic document, the vector generator 204 can convert the string of text into the array: [term_1, term_2, . . . , term_n], where term_n is the last term in the electronic document.
- the array can include punctuation.
- the vector generator 204 can convert the extracted text into a data structure that, for each electronic document, includes a plurality of arrays. Each of the arrays in the data structure can correspond to a sentence in the extracted text. For example, the vector generator 204 can process an array that includes all the text and punctuation from the electronic document. The vector generator 204 can parse the array and generate different arrays for each of the sentences when the vector generator 204 identifies a period in the array.
- Pre-processing can also include generating a dictionary of the words included in the electronic documents.
- the vector generator 204 can generate the dictionary by processing the words included in the data sources 218 and assigning a unique integer value to each word that appears in the data sources 218 .
- the server 202 can use the dictionary as a look up table to convert words (a key in the lookup table) into the assigned integer value (a value in the lookup table).
- the vector generator 204 can one-hot encode each entry in the dictionary as a binary array of length l, where l is the number of entries in the dictionary. For example, if “network” is assigned the integer value of 4,392 in the dictionary and the dictionary contains 10,000 entries, the one-hot encoded array for “network” could be an array with a length of 10,000 containing all zeros except for a 1 in position corresponding to 4,392. In some implementations, the vector generator 204 can limit the dictionary to the most commonly occurring 5,000, 10,000, 20,000, 30,000, 40,000, or 50,000 terms. In some implementations, the dictionary can include all the terms included in the data sources 218 .
- the pre-processing performed by the vector generator 204 can also include training the neural networks of the word vector generator 206 and sentence vector generator 208 .
- the vector generator 204 can generate training pairs from the extracted text.
- the training pairs can be used to train the neural network of the word vector generator 206 or sentence vector generator 208 .
- one term in the pair can be used as an input to the neural network and one term can be used as the expected output of the neural network given the input term.
- the training pairs for the term at position n can include the pairs: (t[n], t[n ⁇ 1]), . . . , (t[n], t[n ⁇ w]), where w is the window size.
- the training pairs for the term at position n in the array would include four training pairs: the term at position n paired with the term at n ⁇ 2, n ⁇ 1, n+1, and n+2.
- the training pairs provide the four terms surrounding the input term (e.g., the two terms on either side of the input term).
- the term at position n is used as an input and the terms at n ⁇ 2, n ⁇ 1, n+1, and n+2 are used as outputs.
- the vector generator 204 can process through all the terms in the data sources 218 and generate training pairs for each of the terms in the data sources 218 .
- the server 202 can execute the word vector generator 206 , which can be a component of the vector generator 204 .
- the word vector generator 206 can generate a word vector for each word in the data sources 218 and for the words in the input request the server 202 receives from the client device 220 .
- the word vector for a given word, can include a vector of weights indicating a probability that the given word will occur in a body of text.
- the word vector can represent a given word in a continuous vector space where semantically similar words are mapped to nearby points.
- the word vector generator 206 can generate the word vector, for a give term, using neural networks or principal component analysis.
- the word vector generator 206 can generate the word vector using a neural network that includes an input layer, a hidden layer, and an output layer.
- the input layer and the output layer can include/neurons, where/is the number of unique terms in the dictionary generated by the vector generator 204 .
- the hidden layer can have between about 150 neurons and about 225 neurons, between about 150 neurons and about 325 neurons, between about 150 neurons and about 425 neurons, between about 150 neurons and about 500 neurons.
- the hidden layer can include about 300 neurons.
- the word vector generator 206 can train the neural network using the training pairs generated by the vector generator 204 . For example, for each training pair, the input term is one-hot encoded and used as an input to the neural network and the output terms are one-hot encoded and used as outputs of the neural network for the given input term.
- the word vector generator 206 can use the weights of the hidden layer to generate the word vector for a given term. For example, training the neural network generates a matrix of weights with the size X ⁇ l, wherein X is the number of neurons in the hidden layer and l is the number of terms in the dictionary (and the length of the one-hot encoded vectors).
- the word vector generator 206 can store the matrix in the word vector database 210 .
- the word vector generator 206 can use the matrix as a lookup table for the word vectors. For example, for a given term, the one-hot encoded vector of the term can be multiplied by the matrix to generate a word vector for the given term.
- Multiplying the matrix by the one-hot encoded vector of the term selects a row from the matrix, which server 202 can use as the word vector for the term.
- the word vectors can be stored as a lookup table for each input term rather than a matrix.
- the word vector generator 206 can generate the word vector for each of the plurality of words with one of a continuous Bag-of-Words neural network model or a Skip-Gram neural network model. In some implementations, the word vector generator 206 can used Word2Vec to generate the word vectors. During a search phase, the word vector generator 206 can generate a word vector for each of the words in the request the server 202 receives from the client device 220 .
- the word vector generator 206 can generate word vectors for each of the words of the data sources 218 during a training phase.
- the word vector generator 206 can periodically reprocess the data sources 218 to generate updated word vectors for the words of the data sources 218 to account for terms that were removed or added to the data sources 218 through the addition or removal of electronic documents to the data sources 218 .
- the server 202 can execute the sentence vector generator 208 , which can be a component of the vector generator 204 .
- the sentence vector generator 208 can be configured to generate a sentence vector to map sentences and the input request to the vector space.
- the sentence vector generator 208 can generate a trained sentence vector for each sentence based on an average of the word vectors of the words in the sentence. For example, if a given sentence includes five words, the sentence vector generator 208 can select the word vector that corresponds to each of the five words from the word vector database 210 and average the word vectors to form a trained sentence vector for the sentence. The sentence vector generator 208 can store the trained sentence vector in the sentence vector database 212 in association with an identifier indicating from which electronic document the sentence was extracted. The sentence vector generator 208 can generate a trained sentence vector for each of the sentences identified in the data sources 218 .
- the sentence vector can be based on the weight and frequency of each word vector for the words in the sentence.
- the sentence vector generator 208 can be configured to calculate the sentence vector based on a difference between an inner product of each of a plurality of word vectors in a sentence and a common sentence vector. This process can provide, when averaging the word vectors of the words in a sentence to generate the sentence vector, lower weights to the frequently occurring words and higher weights to the less frequently occurring words.
- the sentence vector generator 208 can generate a sentence vector for the input request.
- the sentence vector generator 208 can combine the word vectors of the words in the input request in the same manner as the word vectors were combined to form the trained sentence vectors.
- the scoring engine 214 can generate a similarity for each of the trained sentence vectors.
- the similarity score for a trained sentence vector can be based on the trained sentence vectors and the sentence vector for the input request. For example, the scoring engine 214 can calculate the similarity score by determining the distance between the trained sentence vector and the sentence vector of the input request. The scoring engine 214 can determine the distance between a trained sentence vector and the sentence vector of the input request using a Pearson similarity calculation to determine a Pearson Correlation Coefficient. In some implementations, the scoring engine 214 can calculate a similarity score for each of the sentences in the data sources 218 that indicates how close the sentence is to the text of the input request in the vector space.
- the results generator 216 can select or compile results (e.g., electronic documents) based on the calculated similarity scores.
- the results generator 216 can be configured to select an electronic document from the data sources 218 to return in response to the input request.
- the electronic documents in the data sources 218 can be referred to as candidate documents.
- the results generator 216 can select an electronic document or a subset of the candidate documents to return in response to the input request.
- the results generator 216 can select the candidate electronic document having the highest similarity score as the electronic document to be returned.
- the results generator 216 can select the top 10, 25, 50, or 100 candidate documents.
- the results generator 216 can be configured to generate a return list that includes a subset of the plurality of candidate electronic documents.
- the return list can include a listing of candidate documents that included a trained sentence vector with a similarity score above a predetermined threshold.
- FIG. 3 illustrates a block diagram of an example method 300 to retrieve content based on an input.
- the method 300 can be, for example, performed with the systems illustrated in FIGS. 1A-2A .
- the method 300 can include receiving a request (BLOCK 302 ).
- the method 300 can include generating a sentence vector (BLOCK 304 ).
- the method 300 can include retrieving trained sentence vectors (BLOCK 306 ).
- the method 300 can include generating similarity scores for the trained sentence vectors (BLOCK 308 ).
- the method 300 can include selecting an electronic document (BLOCK 310 ).
- the method 300 can include providing the electronic document (BLOCK 312 ).
- the method 300 can include receiving a request (BLOCK 302 ).
- the request can include a plurality of terms.
- the plurality of terms can be included in an input string that is received by the server 202 .
- the plurality of terms can be a search request that is received from the client device 220 .
- the client device 220 can access a web page provided by the server 202 .
- the web page can be a search page to search electronic documents made available by the server 202 (or other computing devices).
- the web page can be a search page to search web pages, text files, log files, forum questions, or forum answers provided by the server 202 or other computing devices.
- the web page can be a search page to search help files provided by the server 202 .
- the request can include a plurality of terms that form a question to which the user would like to find an answer by searching, for example, the help files.
- the plurality of terms can be in a sentence form (e.g., “What is the bandwidth of Model XYZ?”) or a string of terms (e.g., “bandwidth Model XYZ”).
- the server 202 can receive the request as an input string.
- the server 202 can pre-process the input string to parse the string into different words. For example, the server 202 can parse the input string to identify spaces or punctuation.
- the server 202 can divide the input string into different words by dividing the input string at the identified spaces or punctuation.
- the request can be a request for other types of content, such as audio-based content, image-based content, or video-based content.
- the request can be a text-based input, an audio-based input, an image-based input, or a video-based input.
- the method 300 can include generating a sentence vector (BLOCK 304 ).
- the vector generator 204 can generate a sentence vector for the request.
- the sentence vector can map the request (or string of terms included therein) to a vector space.
- the vector generator 204 can generate a plurality of word vectors.
- the vector generator 204 can generate a word vector for each of the terms in a dictionary.
- the word vector generator 206 can retrieve the word vector corresponding to each of the terms in the input string of the request.
- the sentence vector generator 208 can convert the plurality of retrieved word vectors into a sentence vector for the input string.
- the sentence vector generator 208 can average or combine the word vectors to form a sentence vector.
- the vector generator 204 can treat the input string of the request as a single sentence and generate a single sentence vector for the request.
- the server 202 can determine if the input string includes multiple sentences and generate a different sentence vector for each of the sentences identified in the input string.
- the method 300 can include retrieving trained sentence vectors (BLOCK 306 ).
- the vector generator 204 can generate a word vector for each word included in the electronic documents of the data sources 218 .
- the sentence vector generator 208 can generate sentence vectors for each of the sentences included in the data sources 218 based on the word vectors.
- the sentence vectors for the sentences in the data sources 218 can be referred to as the trained sentence vectors.
- the trained sentence vectors can be stored in the sentence vector database 212 in association with an identifier of which electronic document the trained sentence vector corresponds. For example, all the sentences from a first electronic document can be converted into sentence vectors and stored in the sentence vector database 212 in association with a unique identifier that identifies the first electronic document.
- Each of the trained sentence vectors may map a respective sentence to the vector space.
- the method 300 can include generating similarity scores (BLOCK 308 ).
- the scoring engine 214 can generate a similarity score for each of the trained sentence vectors.
- the similarity score for the trained sentence vector can be based on the respective trained sentence vector and the sentence vector of the request (e.g., the sentence vector generated at BLOCK 304 ).
- the similarity score can represent a similarity between the respective trained sentence vector and the sentence vector of the request.
- the similarity score can indicate a distance between the respective trained sentence vector and the sentence vector of the request in the vector space.
- the scoring engine 214 can calculate the similarity score between the respective trained sentence vector and the sentence vector of the input request using Pearson Correlation.
- the scoring engine 214 can generate a single similarity score. For example, the scoring engine 214 can combine with an average or a weighted average each of the similarity scores of the candidate document into a single similarity score. In some implementations, the scoring engine 214 can count a number of instances when the similarity scores of sentences of a candidate document cross a predetermined threshold. The number of crossing for the candidate document can indicate the number of sentences within the candidate document that are relevant to the request. In some implementations, the scoring engine 214 can return an array of similarity scores for a candidate document that indicates the similarity score for each sentence in the candidate document. In some implementations, the scoring engine 214 can assign the highest similarity score of the sentences in a candidate document as the similarity score for the candidate document.
- the method 300 can include selecting an electronic document (BLOCK 310 ).
- the results generator 216 can select the electronic document from among the candidate documents stored in the data sources 218 .
- the results generator 216 can select the electronic document based on the similarity scores of the candidate documents (or the similarity scores associated with each of the sentences contained within the respective candidate documents).
- the results generator 216 can select the electronic document based on the number of times sentences within the electronic document have similarity scores that cross the predetermined threshold. For example, the results generator 216 can select the electronic document that includes the greatest number of sentences with a similarity score above the predetermined threshold.
- the selected electronic document can be the candidate document that is most relevant to the request as indicated by a high similarity score.
- the results generator 216 can select a plurality of relevant documents. For example, the results generator 216 can select (or generate a result containing) the top 10, 25, 50, 75, or 100 candidate documents. The ranking and selection of the candidate documents can be based on the individual similarity scores for the sentences within each of the candidate documents or for the single similarity score of the candidate document (which can be based on the similarity scores for each of the sentences within the respective candidate document).
- the method 300 can include providing the selected document (BLOCK 312 ).
- the server 202 can transmit the selected document (or documents) to the client device 220 .
- a results list can be provided to the client device 220 .
- the results list can include a link to the selected document (or documents) that enables the client device 220 to retrieve (or request) the selected document.
- the results list can be provided to the client device 220 as a web page of results.
- the web page can include hyperlinks to each of the selected documents.
- the results list can include excerpts from the selected documents that are presented with the results list.
- the excerpts include the sentence corresponding to the highest trained sentence vector for the electronic document.
- the excerpt can also include one or more sentences before and after the sentence corresponding to the highest trained sentence vector.
- the client device 220 can provide an updated or new request to the server 202 .
- the server 202 can use the updated request to search within the returned electronic document or to perform a new search on each of the candidate documents in the data sources 218 .
- the results generator 216 can provide suggested search terms back to the client device 220 .
- the server 202 can select the suggested search terms by searching the word vectors in the word vector database 210 for one or more word vectors that are located substantially close to one or more of the words in the request in the vector space.
- the word vector generator 206 can convert each of the words of the request into a word vector.
- the word vector generator 206 can use Pearson Correlation to identify words in the dictionary with a word vector that is close in the vector space to the word vector of a word identified in the request.
- the word vector generator 206 can select one or more words from the dictionary with word vectors that have a Pearson Correlation with the word vector of the input word above a predetermined threshold.
- the selected words can be semantically related to the input word without having a keyword match to the input word.
- FIG. 4 illustrates a plot 400 comparing the quality of search results using the systems and method described herein to a keyword-based search.
- the plot 400 includes a first line 402 that illustrates the scores of the keyword-based search and a second line 404 that illustrates the scores of the systems described herein.
- the plot 400 illustrates the score for the two systems when asked 100 , 200 , 300 , 400 , and 500 questions.
- each system was provided a request that included a forum question.
- a system was given 3 points if the respective system returned the correct response (e.g., the web page containing the answer to the question), 1 point if the correct response was within a list of 5 returned web pages, and 0 points if the correct response was not in the list of 5 returned web pages.
- the present solution provided the correct response the majority of the time, while the keyword-based system often failed to include the correct response in its list of 5 responses.
- systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or, in some embodiments, on multiple machines in a distributed system.
- the systems and methods described above may be implemented as a method, apparatus or article of manufacture using programming and/or engineering techniques to produce software, firmware, hardware, or any combination thereof.
- the systems and methods described above may be provided as one or more computer-readable programs embodied on or in one or more articles of manufacture.
- article of manufacture is intended to encompass code or logic accessible from and embedded in one or more computer-readable devices, firmware, programmable logic, memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, SRAMs, etc.), hardware (e.g., integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.), electronic devices, or a computer readable non-volatile storage unit (e.g., CD-ROM, USB Flash memory, hard disk drive, etc.).
- the article of manufacture may be accessible from a file server providing access to the computer-readable programs via a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc.
- the article of manufacture may be a flash memory card or a magnetic tape.
- the article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor.
- the computer-readable programs may be implemented in any programming language, such as LISP, PERL, C, C++, C #, PROLOG, or in any byte code language such as JAVA.
- the software programs may be stored on or in one or more articles of manufacture as object code.
Abstract
Description
- This patent application is a continuation of, and claims priority to and the benefit of U.S. patent application Ser. No. 15/874,119, titled “INTELLIGENT SHORT TEXT INFORMATION RETRIEVE BASED ON DEEP LEARNING,” and filed Jan. 18, 2018, the contents of all of which are hereby incorporated herein by reference in its entirety for all purposes.
- Text can be searched using keyword matching. The document that is returned can be the document that included the greatest number of keyword matches. For example, the returned document included more instances of the keywords as compared to the documents that were not returned. However, this form of searching requires that the user provide the proper keyword when performing the search. For example, the system may not take into account synonyms or semantically related words when selecting the documents to return in response to a search request.
- Text based searching can return results based on the system determining that the searched text includes keywords or search terms. The present solution can return results based on a semantic analysis. The solutions described herein can provide high accuracy compared against the full-text or keyword-based retrieval algorithms. The solution can sort the results by semantic relevance based on the user's input search request. The distance of the user's search request and the searched text can be represented by a Pearson Correlation Coefficient, rather than a number of matching words used by keyword-based algorithms. The present solution can provide meaningful results to the user even when the search text does not include the exact search keywords or phrases entered by the user.
- The present solution can retrieve text-based data (e.g., electronic documents, text files, website text, email messages, etc.), images, videos, audio files, or other types of content from large data sets based on deep learning. The solution can convert the text of the input search request and the text of the searched documents into a high dimension data space. The solution can retrieve meaningful results by selecting documents located near the text of the input search result in the high dimension data space.
- According to an aspect of the disclosure, a method to retrieve content based on an input can include receiving, by a data processing system, a request that can include a plurality of terms. The method can include generating, by a vector generator executed by the data processing system, a sentence vector to map the request to a first vector space. The method can include retrieving, from a database by the vector generator, a plurality of trained sentence vectors. The trained sentence vectors can correspond to a plurality of candidate electronic documents. Each of the plurality of trained sentence vectors can map a respective sentence to the first vector space. The method can include generating, by a scoring engine executed by the data processing system, a similarity score for each of the plurality of trained sentence vectors. The similarity score can be based on the respective one of the plurality of trained sentence vectors and the sentence vector. The method can include selecting, by the scoring engine, an electronic document from the plurality of candidate electronic documents based on a ranking of the similarity score of each of the plurality of trained sentence vectors. The method can include providing, by the data processing system, the electronic document.
- The method can include generating, by the vector generator, a word vector for each of the plurality of terms. The word vector can map a respective term of the plurality of terms to the vector space. The word vector for each of the plurality of terms can include a vector of weights indicating a probability of one of the plurality of terms occurring.
- The method can include generating, by the vector generator, the word vector for each of the plurality of terms with one of a Continuous Bag-of-Words neural network model or a Skip-Gram neural network model. The method can include generating, by the vector generator, a trained sentence vector based on an average of candidate word vectors of terms in a sentence.
- The method can include generating, by the scoring engine, the similarity score for each of the plurality of trained sentence vectors using a Pearson Similarity Calculation.
- In some implementations, the method can include generating, by the scoring engine, a return list. The return list can include a subset of the plurality of candidate electronic documents corresponding to one of the plurality of trained sentence vectors having the similarity score above a predetermined threshold. The method can include providing, by the data processing system, the return list.
- The method can include calculating, by the vector generator, the sentence vector based on a difference between an inner product of each of a plurality of word vectors in a sentence and a common sentence vector. The method can include calculating, by the vector generator, a common sentence vector by averaging each of the plurality of trained sentence vectors.
- In some implementations, the plurality of candidate electronic documents can include web pages, text files, log files, forum questions, or forum answers. In some implementations, the method can include one-hot encoding, by the vector generator, each of the plurality of terms to generate a binary array for each of the plurality of terms.
- According to at least one aspect of the disclosure, a system to retrieve content includes a memory storing processor executable instructions and one or more processors. The system can receive a request that can include a plurality of terms. The system can generate, by a vector generator executed by the one or more processors, a sentence vector to map the request to a first vector space. The system can retrieve, from a database by the vector generator, a plurality of trained sentence vectors corresponding to a plurality of candidate electronic documents. Each of the plurality of trained sentence vectors can map a respective sentence to the vector space. The system can generate, by a scoring engine executed by the one or more processors, a similarity score for each of the plurality of trained sentence vectors. The similarity score can be based on the respective one of the plurality of trained sentence vectors and the sentence vector. The system can select, by the scoring engine, an electronic document from the plurality of candidate electronic documents based on a ranking of the similarity score of each of the plurality of trained sentence vectors. The system can provide the electronic document.
- In some implementations, the one or more processors can generate, by the vector generator, a word vector for each of the plurality of terms. The word vector can map a respective term of the plurality of terms to the vector space. The word vector for each of the plurality of terms can include a vector of weights indicating a probability of one of the plurality of terms occurring.
- The system can generate, by the vector generator, the word vector for each of the plurality of terms with one of a Continuous Bag-of-Words neural network model or a Skip-Gram neural network model. The system can generate, by the vector generator, a trained sentence vector based on an average of candidate word vectors of terms in a sentence.
- In some implementations, the system can generate, by the scoring engine, the similarity score for each of the plurality of trained sentence vectors using a Pearson Similarity Calculation.
- In some implementations, the system can generate, by the scoring engine, a return list that can include a subset of the plurality of candidate electronic documents corresponding to one of the plurality of trained sentence vectors having the similarity score above a predetermined threshold. The system can include provide the return list.
- In some implementations, the system can calculate, by the vector generator, a common sentence vector by averaging each of the plurality of trained sentence vectors. The plurality of candidate electronic documents can include web pages, text files, log files, forum questions, or forum answers.
- The foregoing and other objects, aspects, features, and advantages of the present solution will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:
-
FIGS. 1A-1D illustrate block diagrams of embodiments of a computing device; -
FIG. 2 illustrates a block diagram of an example system to retrieve content based on an input; -
FIG. 3 illustrates a block diagram of an example method to retrieve content based on an input using the system illustrated inFIG. 2 ; and -
FIG. 4 illustrates a plot comparing the quality of search results using the systems and method described herein to a keyword-based search. - The features and advantages of the present solution will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and/or structurally similar elements.
- For purposes of reading the description of the various embodiments below, the following descriptions of the sections of the specification and their respective contents may be helpful:
- Section A describes a computing environment which may be useful for practicing embodiments described herein; and
- Section B describes systems and methods for information retrieval based on deep learning.
- Prior to discussing the specifics of embodiments of the systems and methods of an appliance and/or client, it may be helpful to discuss the computing environments in which such embodiments may be deployed.
FIGS. 1A and 1B depict block diagrams of acomputing device 100 useful for practicing embodiments of the systems and devices described further below in Section B. As shown inFIGS. 1A and 1B , eachcomputing device 100 includes acentral processing unit 101, and amain memory unit 122. As shown inFIG. 1A , acomputing device 100 may include a visual display device 124, akeyboard 126 and/or apointing device 127, such as a mouse. Eachcomputing device 100 may also include additional optional elements, such as one or more input/output devices 130 a-130 b (generally referred to using reference numeral 130), and acache memory 140 in communication with thecentral processing unit 101. In some embodiments, the input/output devices 130 a-130 b can include audio output devices, such as a speaker, headphones, or an audio output port configured to communicatively couple with an external audio output device. - The
central processing unit 101 is any logic circuitry that responds to and processes instructions fetched from themain memory unit 122. In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Samsung Electronics of Suwon, Korea; those manufactured by Micron Technology of Boise, Id.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif., among others. Thecomputing device 100 may be based on any of these processors, or any other processor capable of operating as described herein. -
Main memory unit 122 may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by themicroprocessor 101, such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). Themain memory 122 may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown inFIG. 1A , theprocessor 101 communicates withmain memory 122 via a system bus 150 (described in more detail below).FIG. 1B depicts an embodiment of acomputing device 100 in which the processor communicates directly withmain memory 122 via amemory port 103. For example, inFIG. 1B themain memory 122 may be DRDRAM. -
FIG. 1B depicts an embodiment in which themain processor 101 communicates directly withcache memory 140 via a secondary bus, sometimes referred to as a backside bus. In other embodiments, themain processor 101 communicates withcache memory 140 using thesystem bus 150.Cache memory 140 typically has a faster response time thanmain memory 122 and is typically provided by SRAM, BSRAM, or EDRAM. In the embodiment shown inFIG. 1B , theprocessor 101 communicates with various I/O devices 130 via alocal system bus 150. Various busses may be used to connect thecentral processing unit 101 to any of the I/O devices 130, including a VESA VL bus, an ISA bus, an EISA bus, a MicroChannel Architecture (MCA) bus, a PCI bus, a PCI-X bus, a PCI-Express bus, or a NuBus. For embodiments in which the I/O device is a video display 124, theprocessor 101 may use an Advanced Graphics Port (AGP) to communicate with the display 124.FIG. 1B depicts an embodiment of acomputer 100 in which themain processor 101 communicates directly with I/O device 130 b via HyperTransport, Rapid I/O, or InfiniBand.FIG. 1B also depicts an embodiment in which local busses and direct communication are mixed: theprocessor 101 communicates with I/O device 130 b using a local interconnect bus while communicating with I/O device 130 a directly. - The
computing device 100 may support anysuitable installation device 116, such as a CD-ROM drive, a CD-R/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs. Thecomputing device 100 may further comprise astorage device 128, such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs. Optionally, any of theinstallation devices 116 could also be used as thestorage device 128. Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX®, a bootable CD for GNU/Linux that is available as a GNU/Linux distribution from knoppix.net. - Furthermore, the
computing device 100 may include anetwork interface 118 to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. Thenetwork interface 118 may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing thecomputing device 100 to any type of network capable of communication and performing the operations described herein. - A wide variety of I/O devices 130 a-130 n may be present in the
computing device 100. Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I/O devices 130 may be controlled by an I/O controller 123 as shown inFIG. 1A . The I/O controller may control one or more I/O devices such as akeyboard 126 and apointing device 127, e.g., a mouse or optical pen. Furthermore, an I/O device may also providestorage 128 and/or aninstallation medium 116 for thecomputing device 100. In still other embodiments, thecomputing device 100 may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif. or SanDisk Corporation of Milpitas, Calif. - In some embodiments, the
computing device 100 may comprise or be connected to multiple display devices 124 a-124 n, which each may be of the same or different type and/or form. As such, any of the I/O devices 130 a-130 n and/or the I/O controller 123 may comprise any type and/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices 124 a-124 n by thecomputing device 100. For example, thecomputing device 100 may include any type and/or form of video adapter, video card, driver, and/or library to interface, communicate, connect or otherwise use the display devices 124 a-124 n. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices 124 a-124 n. In other embodiments, thecomputing device 100 may include multiple video adapters, with each video adapter connected to one or more of the display devices 124 a-124 n. In some embodiments, any portion of the operating system of thecomputing device 100 may be configured for using multiple displays 124 a-124 n. In other embodiments, one or more of the display devices 124 a-124 n may be provided by one or more other computing devices, such as computing devices 100 a and 100 b connected to thecomputing device 100, for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as asecond display device 124 a for thecomputing device 100. One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that acomputing device 100 may be configured to have multiple display devices 124 a-124 n. - In further embodiments, an I/O device 130 may be a
bridge 170 between thesystem bus 150 and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus. - A
computing device 100 of the sort depicted inFIGS. 1A and 1B typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. Thecomputing device 100 can be running any operating system such as any of the versions of the Microsoft® Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS® for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98,WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, WINDOWS XP, WINDOWS 7, and WINDOWS 10, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and/or form of a UNIX operating system, among others. - In other embodiments, the
computing device 100 may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment thecomputer 100 may be a smartphone or a tablet, such as those developed by Apple Inc., by Samsung Electronics, by Xiaomi. Inc., or by Google Inc., among others. In this embodiment, the smartphone or tablet may be operated under the control of an operating system (such as Android or iOS) and may include a stylus input device as well as a touch sensitive screen. Moreover, thecomputing device 100 can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. - As shown in
FIG. 1C , thecomputing device 100 may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments, thecomputing device 100 may comprise a parallel processor with one or more cores. In one of these embodiments, thecomputing device 100 is a shared memory parallel device, with multiple processors and/or multiple processor cores, accessing all available memory as a single global address space. In another of these embodiments, thecomputing device 100 is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments, thecomputing device 100 has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments, thecomputing device 100, such as a multi-core microprocessor, combines two or more independent processors into a single package, often a single integrated circuit (IC). In yet another of these embodiments, thecomputing device 100 includes a chip having a Cell Broadband Engine architecture and including a Power processor element and a plurality of synergistic processing elements, the Power processor element and the plurality of synergistic processing elements linked together by an internal high-speed bus, which may be referred to as an element interconnect bus. - In some embodiments, the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data (SIMD). In other embodiments, the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data (MIMD). In still other embodiments, the processor may use any combination of SIMD and MIMD cores in a single device.
- In some embodiments, the
computing device 100 may comprise a graphics processing unit. In one of these embodiments depicted inFIG. 1D , thecomputing device 100 includes at least onecentral processing unit 101 and at least one graphics processing unit. In another of these embodiments, thecomputing device 100 includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments, thecomputing device 100 includes a plurality of processing units of any type, one of the plurality of processing units comprising a graphics processing unit. - In some embodiments, a first computing device 100 a executes an application on behalf of a user of a client computing device 100 b. In other embodiments, a computing device 100 a executes a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing devices 100 b. In one of these embodiments, the execution session is a hosted desktop session. In another of these embodiments, the
computing device 100 executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments, the execution session provides access to a computing environment, which may comprise one or more of: an application, a plurality of applications, a desktop application, and a desktop session in which one or more applications may execute. - Text based searching can return results based on the system determining that the searched text includes keywords or search terms. The present solution can return results based on a semantic analysis. The solutions described herein can provide high accuracy compared against the full-text or keyword-based retrieval algorithms. The solution can sort the results by semantic relevance based on the user's input search request. The distance between the user's search request and the searched text can be represented by a Pearson Correlation Coefficient, rather than a number of matching words used by keyword-based algorithms. The present solution can provide meaningful results to the user even when the search text does not include the exact search keywords or phrases entered by the user.
- The present solution can retrieve text-based data (e.g., electronic documents, text files, website text, email messages, etc.), images, videos, audio files, or other types of content from large data sets based on deep learning. The solution can convert the text of the input search request and the text of the searched documents into a high dimension data space. The solution can retrieve meaningful results by selecting documents located near the text of the input search result in the high dimension data space.
-
FIG. 2 illustrates a block diagram of anexample system 200 to retrieve content based on an input. In brief summary, thesystem 200 includes aserver 202, data sources 218(1)-218(N) (collectively referred to as data sources 218), and aclient device 220. Theserver 202 executes avector generator 204 that includes aword vector generator 206 and asentence vector generator 208. Theserver 202 also executes ascoring engine 214 and aresults generator 216. Theserver 202 includes memory on which theserver 202 stores aword vector database 210 and asentence vector database 212. Theserver 202 and theclient device 220 can be acomputing device 100, as described above, and can be referred to as a data processing system. - As illustrated in
FIG. 2 , theserver 202, thedata sources 218, and theclient device 220 are all capable of communicating with one another. In various embodiments, each of the above-mentioned elements or entities of thesystem 200 can be implemented in hardware, software, or a combination of hardware and software. In some embodiments, each component of thesystem 200 may be implemented using the hardware or a combination of the hardware or software detailed above in connection withFIGS. 1A-1D . For example, in some embodiments, thevector generator 204, theword vector generator 206, thesentence vector generator 208, thescoring engine 214, and theresults generator 216 can include any application, program, library, script, task, service, process, or any type and form of executable instructions executing on hardware of theserver 202. - The hardware can include circuitry such as one or more processors in one or more embodiments. Communication between the
server 202, theclient device 220, and thedata sources 218 can take place over any type or form of network. For example, such communications can be carried out via any type of network capable of supporting communications between theserver 202, thedata sources 218, and theclient device 220. In some embodiments, the communications can be performed via any of a local-area network (LAN) (e.g., a company Intranet), a metropolitan area network (MAN), or a wide area network (WAN) (e.g., the Internet). - In some implementations, certain functionality described below in connection with the
server 202 and theclient device 220 could be combined such that the functionality of the two or more of components depicted inFIG. 2 may be implemented by a single device. For example, theclient device 220 could execute an instance of thevector generator 204, theword vector generator 206, thesentence vector generator 208, thescoring engine 214, and theresults generator 216 and store (or have access to) theword vector database 210 and thesentence vector database 212. For example, theclient device 220 can execute an instance of thevector generator 204, theword vector generator 206, thesentence vector generator 208, thescoring engine 214, and theresults generator 216 to search text-based data stored locally at theclient device 220. - The
server 202 can be configured to receive a request from theclient device 220. Theclient device 220 can transmit the request to theserver 202 over a network, for example. The request can include a plurality of terms. The plurality of terms can form, and be referred to as, a search string. Theserver 202 can receive the request through a web-based interface. For example, theclient device 220 can access website hosted by theserver 202 or corresponding to theserver 202 that includes an input field. Text entered into the input field can be transmitted over the HTTP protocol to theserver 202. - The request can be a text-based search request. In some implementations, the request can be in other formats. For example, the request can be an audio-based request that the
server 202 or theclient device 220 can convert into a string of text using natural language processing. Theserver 202 can use the request to perform, as described below, a semantic analysis of candidate electronic documents stored in thedata sources 218 and return one or more electronic documents based on the semantic analysis. Theserver 202 can provide theclient device 220 with a return list of selected electronic documents or a single electronic document selected from among the candidate electronic documents stored on the data sources 218. - The
data sources 218 can include databases stored locally on theserver 202 or remote from theserver 202. Thedata sources 218 can each include a plurality of candidate electronic documents. The candidate electronic documents can include the text that the user wishes to search when submitting a request to theserver 202. The candidate electronic documents can include text-based documents, web pages, emails, and other electronic messages, forum posts, help files, log files, or any combination thereof. In some implementations, each of thedata sources 218 can store a different form of electronic document. For example, the data source 218(1) may store text-based documents and the data source 218(2) can store emails. - The
server 202 can execute thevector generator 204. As an overview, thevector generator 204 can convert terms or words included in the request ordata sources 218 into a high dimensional data space. The conversion of the text into the high dimensional space can enable theserver 202 to return highly accurate and intelligent responses by determining results based at a semantic level rather than based on keyword matching. For example, theserver 202 can base the selection of results based on the distance between the input request and the different electronic documents in the high dimensional data space rather than on the number of times the electronic documents match one or more terms in the request. - The
vector generator 204 can perform data pre-processing. Data pre-processing can include training the neural network of theword vector generator 206, extracting text from thedata sources 218 and input request, and preparing text from thedata sources 218 and the input requests. - The
vector generator 204 can process the electronic documents stored in thedata sources 218 to retrieve the text from the electronic documents. For example, thevector generator 204 can extract the text from the electronic documents and parse the text into strings that are stored in association with an identifier of the electronic document from which the text was extracted. In one example, the electronic document can be a web page and thevector generator 204 can process the content of the web page and identify text between predetermined HTML, tags (e.g., <p> and </p>) to separate the text from formatting and other code included in the web page. - For each of the electronic documents, the
vector generator 204 can convert the extracted text into an array of words. For example, for a given electronic document, thevector generator 204 can convert the string of text into the array: [term_1, term_2, . . . , term_n], where term_n is the last term in the electronic document. The array can include punctuation. Thevector generator 204 can convert the extracted text into a data structure that, for each electronic document, includes a plurality of arrays. Each of the arrays in the data structure can correspond to a sentence in the extracted text. For example, thevector generator 204 can process an array that includes all the text and punctuation from the electronic document. Thevector generator 204 can parse the array and generate different arrays for each of the sentences when thevector generator 204 identifies a period in the array. - Pre-processing can also include generating a dictionary of the words included in the electronic documents. The
vector generator 204 can generate the dictionary by processing the words included in thedata sources 218 and assigning a unique integer value to each word that appears in the data sources 218. As theserver 202 receives text (e.g., from a search request), theserver 202 can use the dictionary as a look up table to convert words (a key in the lookup table) into the assigned integer value (a value in the lookup table). - The
vector generator 204 can one-hot encode each entry in the dictionary as a binary array of length l, where l is the number of entries in the dictionary. For example, if “network” is assigned the integer value of 4,392 in the dictionary and the dictionary contains 10,000 entries, the one-hot encoded array for “network” could be an array with a length of 10,000 containing all zeros except for a 1 in position corresponding to 4,392. In some implementations, thevector generator 204 can limit the dictionary to the most commonly occurring 5,000, 10,000, 20,000, 30,000, 40,000, or 50,000 terms. In some implementations, the dictionary can include all the terms included in the data sources 218. - The pre-processing performed by the
vector generator 204 can also include training the neural networks of theword vector generator 206 andsentence vector generator 208. When training the neural networks, thevector generator 204 can generate training pairs from the extracted text. The training pairs can be used to train the neural network of theword vector generator 206 orsentence vector generator 208. For example, one term in the pair can be used as an input to the neural network and one term can be used as the expected output of the neural network given the input term. - For a given array of terms t, the training pairs for the term at position n (e.g., the input word) can include the pairs: (t[n], t[n±1]), . . . , (t[n], t[n±w]), where w is the window size. For example, for a window size of 2, the training pairs for the term at position n in the array would include four training pairs: the term at position n paired with the term at n−2, n−1, n+1, and n+2. In this example, given a term, the training pairs provide the four terms surrounding the input term (e.g., the two terms on either side of the input term). In this example, when training a neural network, the term at position n is used as an input and the terms at n−2, n−1, n+1, and n+2 are used as outputs. The
vector generator 204 can process through all the terms in thedata sources 218 and generate training pairs for each of the terms in the data sources 218. - The
server 202 can execute theword vector generator 206, which can be a component of thevector generator 204. Theword vector generator 206 can generate a word vector for each word in thedata sources 218 and for the words in the input request theserver 202 receives from theclient device 220. - The word vector, for a given word, can include a vector of weights indicating a probability that the given word will occur in a body of text. The word vector can represent a given word in a continuous vector space where semantically similar words are mapped to nearby points.
- The
word vector generator 206 can generate the word vector, for a give term, using neural networks or principal component analysis. For example, theword vector generator 206 can generate the word vector using a neural network that includes an input layer, a hidden layer, and an output layer. The input layer and the output layer can include/neurons, where/is the number of unique terms in the dictionary generated by thevector generator 204. The hidden layer can have between about 150 neurons and about 225 neurons, between about 150 neurons and about 325 neurons, between about 150 neurons and about 425 neurons, between about 150 neurons and about 500 neurons. For example, in some implementations, the hidden layer can include about 300 neurons. - The
word vector generator 206 can train the neural network using the training pairs generated by thevector generator 204. For example, for each training pair, the input term is one-hot encoded and used as an input to the neural network and the output terms are one-hot encoded and used as outputs of the neural network for the given input term. - Once trained, the
word vector generator 206 can use the weights of the hidden layer to generate the word vector for a given term. For example, training the neural network generates a matrix of weights with the size X×l, wherein X is the number of neurons in the hidden layer and l is the number of terms in the dictionary (and the length of the one-hot encoded vectors). Theword vector generator 206 can store the matrix in theword vector database 210. Theword vector generator 206 can use the matrix as a lookup table for the word vectors. For example, for a given term, the one-hot encoded vector of the term can be multiplied by the matrix to generate a word vector for the given term. Multiplying the matrix by the one-hot encoded vector of the term selects a row from the matrix, whichserver 202 can use as the word vector for the term. In some implementations, the word vectors can be stored as a lookup table for each input term rather than a matrix. - The
word vector generator 206 can generate the word vector for each of the plurality of words with one of a continuous Bag-of-Words neural network model or a Skip-Gram neural network model. In some implementations, theword vector generator 206 can used Word2Vec to generate the word vectors. During a search phase, theword vector generator 206 can generate a word vector for each of the words in the request theserver 202 receives from theclient device 220. - The
word vector generator 206 can generate word vectors for each of the words of thedata sources 218 during a training phase. Theword vector generator 206 can periodically reprocess thedata sources 218 to generate updated word vectors for the words of thedata sources 218 to account for terms that were removed or added to thedata sources 218 through the addition or removal of electronic documents to the data sources 218. - The
server 202 can execute thesentence vector generator 208, which can be a component of thevector generator 204. Thesentence vector generator 208 can be configured to generate a sentence vector to map sentences and the input request to the vector space. - For each sentence in the
data sources 218, thesentence vector generator 208 can generate a trained sentence vector for each sentence based on an average of the word vectors of the words in the sentence. For example, if a given sentence includes five words, thesentence vector generator 208 can select the word vector that corresponds to each of the five words from theword vector database 210 and average the word vectors to form a trained sentence vector for the sentence. Thesentence vector generator 208 can store the trained sentence vector in thesentence vector database 212 in association with an identifier indicating from which electronic document the sentence was extracted. Thesentence vector generator 208 can generate a trained sentence vector for each of the sentences identified in the data sources 218. - The sentence vector can be based on the weight and frequency of each word vector for the words in the sentence. In some implementations, the
sentence vector generator 208 can be configured to calculate the sentence vector based on a difference between an inner product of each of a plurality of word vectors in a sentence and a common sentence vector. This process can provide, when averaging the word vectors of the words in a sentence to generate the sentence vector, lower weights to the frequently occurring words and higher weights to the less frequently occurring words. - During the searching phase, the
sentence vector generator 208 can generate a sentence vector for the input request. Thesentence vector generator 208 can combine the word vectors of the words in the input request in the same manner as the word vectors were combined to form the trained sentence vectors. - The
scoring engine 214 can generate a similarity for each of the trained sentence vectors. The similarity score for a trained sentence vector can be based on the trained sentence vectors and the sentence vector for the input request. For example, thescoring engine 214 can calculate the similarity score by determining the distance between the trained sentence vector and the sentence vector of the input request. Thescoring engine 214 can determine the distance between a trained sentence vector and the sentence vector of the input request using a Pearson similarity calculation to determine a Pearson Correlation Coefficient. In some implementations, thescoring engine 214 can calculate a similarity score for each of the sentences in thedata sources 218 that indicates how close the sentence is to the text of the input request in the vector space. - The
results generator 216 can select or compile results (e.g., electronic documents) based on the calculated similarity scores. For example, theresults generator 216 can be configured to select an electronic document from thedata sources 218 to return in response to the input request. The electronic documents in thedata sources 218 can be referred to as candidate documents. Theresults generator 216 can select an electronic document or a subset of the candidate documents to return in response to the input request. In some implementations, theresults generator 216 can select the candidate electronic document having the highest similarity score as the electronic document to be returned. In some implementations, theresults generator 216 can select the top 10, 25, 50, or 100 candidate documents. For example, theresults generator 216 can be configured to generate a return list that includes a subset of the plurality of candidate electronic documents. The return list can include a listing of candidate documents that included a trained sentence vector with a similarity score above a predetermined threshold. -
FIG. 3 illustrates a block diagram of anexample method 300 to retrieve content based on an input. Themethod 300 can be, for example, performed with the systems illustrated inFIGS. 1A-2A . Themethod 300 can include receiving a request (BLOCK 302). Themethod 300 can include generating a sentence vector (BLOCK 304). Themethod 300 can include retrieving trained sentence vectors (BLOCK 306). Themethod 300 can include generating similarity scores for the trained sentence vectors (BLOCK 308). Themethod 300 can include selecting an electronic document (BLOCK 310). Themethod 300 can include providing the electronic document (BLOCK 312). - As set forth above, the
method 300 can include receiving a request (BLOCK 302). Also referring toFIG. 2 , among others, the request can include a plurality of terms. The plurality of terms can be included in an input string that is received by theserver 202. The plurality of terms can be a search request that is received from theclient device 220. For example, theclient device 220 can access a web page provided by theserver 202. The web page can be a search page to search electronic documents made available by the server 202 (or other computing devices). For example, the web page can be a search page to search web pages, text files, log files, forum questions, or forum answers provided by theserver 202 or other computing devices. In one example, the web page can be a search page to search help files provided by theserver 202. The request can include a plurality of terms that form a question to which the user would like to find an answer by searching, for example, the help files. The plurality of terms can be in a sentence form (e.g., “What is the bandwidth of Model XYZ?”) or a string of terms (e.g., “bandwidth Model XYZ”). - The
server 202 can receive the request as an input string. Theserver 202 can pre-process the input string to parse the string into different words. For example, theserver 202 can parse the input string to identify spaces or punctuation. Theserver 202 can divide the input string into different words by dividing the input string at the identified spaces or punctuation. - In some implementations, the request can be a request for other types of content, such as audio-based content, image-based content, or video-based content. The request can be a text-based input, an audio-based input, an image-based input, or a video-based input.
- The
method 300 can include generating a sentence vector (BLOCK 304). Thevector generator 204 can generate a sentence vector for the request. The sentence vector can map the request (or string of terms included therein) to a vector space. As described above, during a training phase, thevector generator 204 can generate a plurality of word vectors. Thevector generator 204 can generate a word vector for each of the terms in a dictionary. In some implementations, to generate the sentence vector for the request, theword vector generator 206 can retrieve the word vector corresponding to each of the terms in the input string of the request. Thesentence vector generator 208 can convert the plurality of retrieved word vectors into a sentence vector for the input string. For example, thesentence vector generator 208 can average or combine the word vectors to form a sentence vector. In some implementations, thevector generator 204 can treat the input string of the request as a single sentence and generate a single sentence vector for the request. In some implementations, theserver 202 can determine if the input string includes multiple sentences and generate a different sentence vector for each of the sentences identified in the input string. - The
method 300 can include retrieving trained sentence vectors (BLOCK 306). As described above, during the training phase, thevector generator 204 can generate a word vector for each word included in the electronic documents of the data sources 218. Thesentence vector generator 208 can generate sentence vectors for each of the sentences included in thedata sources 218 based on the word vectors. The sentence vectors for the sentences in thedata sources 218 can be referred to as the trained sentence vectors. The trained sentence vectors can be stored in thesentence vector database 212 in association with an identifier of which electronic document the trained sentence vector corresponds. For example, all the sentences from a first electronic document can be converted into sentence vectors and stored in thesentence vector database 212 in association with a unique identifier that identifies the first electronic document. Each of the trained sentence vectors may map a respective sentence to the vector space. - The
method 300 can include generating similarity scores (BLOCK 308). Thescoring engine 214 can generate a similarity score for each of the trained sentence vectors. The similarity score for the trained sentence vector can be based on the respective trained sentence vector and the sentence vector of the request (e.g., the sentence vector generated at BLOCK 304). The similarity score can represent a similarity between the respective trained sentence vector and the sentence vector of the request. For example, the similarity score can indicate a distance between the respective trained sentence vector and the sentence vector of the request in the vector space. In some implementations, thescoring engine 214 can calculate the similarity score between the respective trained sentence vector and the sentence vector of the input request using Pearson Correlation. - In some implementations, for each of the candidate documents (e.g., the electronic documents contained in
data sources 218 that can be returned responsive to a request), thescoring engine 214 can generate a single similarity score. For example, thescoring engine 214 can combine with an average or a weighted average each of the similarity scores of the candidate document into a single similarity score. In some implementations, thescoring engine 214 can count a number of instances when the similarity scores of sentences of a candidate document cross a predetermined threshold. The number of crossing for the candidate document can indicate the number of sentences within the candidate document that are relevant to the request. In some implementations, thescoring engine 214 can return an array of similarity scores for a candidate document that indicates the similarity score for each sentence in the candidate document. In some implementations, thescoring engine 214 can assign the highest similarity score of the sentences in a candidate document as the similarity score for the candidate document. - The
method 300 can include selecting an electronic document (BLOCK 310). Theresults generator 216 can select the electronic document from among the candidate documents stored in the data sources 218. Theresults generator 216 can select the electronic document based on the similarity scores of the candidate documents (or the similarity scores associated with each of the sentences contained within the respective candidate documents). Theresults generator 216 can select the electronic document based on the number of times sentences within the electronic document have similarity scores that cross the predetermined threshold. For example, theresults generator 216 can select the electronic document that includes the greatest number of sentences with a similarity score above the predetermined threshold. - In some implementations, the selected electronic document can be the candidate document that is most relevant to the request as indicated by a high similarity score. In some implementations, the
results generator 216 can select a plurality of relevant documents. For example, theresults generator 216 can select (or generate a result containing) the top 10, 25, 50, 75, or 100 candidate documents. The ranking and selection of the candidate documents can be based on the individual similarity scores for the sentences within each of the candidate documents or for the single similarity score of the candidate document (which can be based on the similarity scores for each of the sentences within the respective candidate document). - The
method 300 can include providing the selected document (BLOCK 312). In some implementations, theserver 202 can transmit the selected document (or documents) to theclient device 220. In some implementations, a results list can be provided to theclient device 220. The results list, for example, can include a link to the selected document (or documents) that enables theclient device 220 to retrieve (or request) the selected document. For example, the results list can be provided to theclient device 220 as a web page of results. The web page can include hyperlinks to each of the selected documents. The results list can include excerpts from the selected documents that are presented with the results list. In some implementations, the excerpts include the sentence corresponding to the highest trained sentence vector for the electronic document. The excerpt can also include one or more sentences before and after the sentence corresponding to the highest trained sentence vector. - In some implementations, once the electronic document provided, the
client device 220 can provide an updated or new request to theserver 202. Theserver 202 can use the updated request to search within the returned electronic document or to perform a new search on each of the candidate documents in the data sources 218. - In some implementations, the
results generator 216 can provide suggested search terms back to theclient device 220. Theserver 202 can select the suggested search terms by searching the word vectors in theword vector database 210 for one or more word vectors that are located substantially close to one or more of the words in the request in the vector space. For example, theword vector generator 206 can convert each of the words of the request into a word vector. Theword vector generator 206 can use Pearson Correlation to identify words in the dictionary with a word vector that is close in the vector space to the word vector of a word identified in the request. For example, for a given input word in the request, theword vector generator 206 can select one or more words from the dictionary with word vectors that have a Pearson Correlation with the word vector of the input word above a predetermined threshold. The selected words can be semantically related to the input word without having a keyword match to the input word. -
FIG. 4 illustrates aplot 400 comparing the quality of search results using the systems and method described herein to a keyword-based search. Theplot 400 includes afirst line 402 that illustrates the scores of the keyword-based search and asecond line 404 that illustrates the scores of the systems described herein. Theplot 400 illustrates the score for the two systems when asked 100, 200, 300, 400, and 500 questions. - To generate the
first line 402 and thesecond line 404, each system was provided a request that included a forum question. A system was given 3 points if the respective system returned the correct response (e.g., the web page containing the answer to the question), 1 point if the correct response was within a list of 5 returned web pages, and 0 points if the correct response was not in the list of 5 returned web pages. As illustrated in theplot 400, the present solution provided the correct response the majority of the time, while the keyword-based system often failed to include the correct response in its list of 5 responses. - It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or, in some embodiments, on multiple machines in a distributed system. The systems and methods described above may be implemented as a method, apparatus or article of manufacture using programming and/or engineering techniques to produce software, firmware, hardware, or any combination thereof. In addition, the systems and methods described above may be provided as one or more computer-readable programs embodied on or in one or more articles of manufacture. The term “article of manufacture” as used herein is intended to encompass code or logic accessible from and embedded in one or more computer-readable devices, firmware, programmable logic, memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, SRAMs, etc.), hardware (e.g., integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.), electronic devices, or a computer readable non-volatile storage unit (e.g., CD-ROM, USB Flash memory, hard disk drive, etc.). The article of manufacture may be accessible from a file server providing access to the computer-readable programs via a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general, the computer-readable programs may be implemented in any programming language, such as LISP, PERL, C, C++, C #, PROLOG, or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.
- While various embodiments of the methods and systems have been described, these embodiments are illustrative and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus, the scope of the methods and systems described herein should not be limited by any of the illustrative embodiments and should be defined in accordance with the accompanying claims and their equivalents.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/138,232 US20210118431A1 (en) | 2018-01-18 | 2020-12-30 | Intelligent short text information retrieve based on deep learning |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/874,119 US10891943B2 (en) | 2018-01-18 | 2018-01-18 | Intelligent short text information retrieve based on deep learning |
US17/138,232 US20210118431A1 (en) | 2018-01-18 | 2020-12-30 | Intelligent short text information retrieve based on deep learning |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/874,119 Continuation US10891943B2 (en) | 2018-01-18 | 2018-01-18 | Intelligent short text information retrieve based on deep learning |
Publications (1)
Publication Number | Publication Date |
---|---|
US20210118431A1 true US20210118431A1 (en) | 2021-04-22 |
Family
ID=67214157
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/874,119 Active US10891943B2 (en) | 2018-01-18 | 2018-01-18 | Intelligent short text information retrieve based on deep learning |
US17/138,232 Abandoned US20210118431A1 (en) | 2018-01-18 | 2020-12-30 | Intelligent short text information retrieve based on deep learning |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/874,119 Active US10891943B2 (en) | 2018-01-18 | 2018-01-18 | Intelligent short text information retrieve based on deep learning |
Country Status (1)
Country | Link |
---|---|
US (2) | US10891943B2 (en) |
Families Citing this family (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10699062B2 (en) * | 2017-08-01 | 2020-06-30 | Samsung Electronics Co., Ltd. | Apparatus and method for providing summarized information using an artificial intelligence model |
US10891943B2 (en) * | 2018-01-18 | 2021-01-12 | Citrix Systems, Inc. | Intelligent short text information retrieve based on deep learning |
KR20200134265A (en) * | 2018-03-23 | 2020-12-01 | 가부시키가이샤 한도오따이 에네루기 켄큐쇼 | Document retrieval system, document retrieval method, program, and non-transitory computer-readable storage medium |
US11048878B2 (en) * | 2018-05-02 | 2021-06-29 | International Business Machines Corporation | Determining answers to a question that includes multiple foci |
US11972490B2 (en) * | 2018-07-20 | 2024-04-30 | Kbc Groep Nv | Determining a category of a request by word vector representation of a natural language text string with a similarity value |
EP3598377A1 (en) * | 2018-07-20 | 2020-01-22 | KBC Groep NV | Improved claim handling |
US10496924B1 (en) * | 2018-08-07 | 2019-12-03 | Capital One Services, Llc | Dictionary DGA detector model |
US11163777B2 (en) | 2018-10-18 | 2021-11-02 | Oracle International Corporation | Smart content recommendations for content authors |
US11372894B2 (en) * | 2018-12-21 | 2022-06-28 | Atlassian Pty Ltd. | Associating product with document using document linkage data |
US11321312B2 (en) * | 2019-01-14 | 2022-05-03 | ALEX—Alternative Experts, LLC | Vector-based contextual text searching |
US11397776B2 (en) * | 2019-01-31 | 2022-07-26 | At&T Intellectual Property I, L.P. | Systems and methods for automated information retrieval |
CN110674252A (en) * | 2019-08-26 | 2020-01-10 | 银江股份有限公司 | High-precision semantic search system for judicial domain |
US11449559B2 (en) * | 2019-08-27 | 2022-09-20 | Bank Of America Corporation | Identifying similar sentences for machine learning |
CN111125301B (en) * | 2019-11-22 | 2023-07-14 | 泰康保险集团股份有限公司 | Text method and apparatus, electronic device, and computer-readable storage medium |
CN111144112B (en) * | 2019-12-30 | 2023-07-14 | 广州广电运通信息科技有限公司 | Text similarity analysis method, device and storage medium |
CN111241825B (en) * | 2020-01-08 | 2023-03-28 | 广东博智林机器人有限公司 | Training method, detection method and device of advertising word violation detection model |
CN111339261A (en) * | 2020-03-17 | 2020-06-26 | 北京香侬慧语科技有限责任公司 | Document extraction method and system based on pre-training model |
CN111859982B (en) * | 2020-06-19 | 2024-04-26 | 北京百度网讯科技有限公司 | Language model training method and device, electronic equipment and readable storage medium |
US11537918B2 (en) * | 2020-07-21 | 2022-12-27 | Florida Power & Light Company | Systems and methods for document similarity matching |
CN112214984A (en) * | 2020-10-10 | 2021-01-12 | 北京蚂蜂窝网络科技有限公司 | Content plagiarism identification method, device, equipment and storage medium |
CN113254616B (en) * | 2021-06-07 | 2021-10-19 | 佰聆数据股份有限公司 | Intelligent question-answering system-oriented sentence vector generation method and system |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2004005337A (en) * | 2002-03-28 | 2004-01-08 | Nippon Telegr & Teleph Corp <Ntt> | Word relation database constructing method and device, word/document processing method and device using word relation database, explanation expression adequacy verifying method, programs for these, storage medium storing them, word similarity computing method, word grouping method, representive word extracting method, and word concept hierarchial method |
US20040068396A1 (en) * | 2000-11-20 | 2004-04-08 | Takahiko Kawatani | Method of vector analysis for a document |
US20040078363A1 (en) * | 2001-03-02 | 2004-04-22 | Takahiko Kawatani | Document and information retrieval method and apparatus |
US20130013291A1 (en) * | 2011-07-06 | 2013-01-10 | Invertix Corporation | Systems and methods for sentence comparison and sentence-based search |
US20150220833A1 (en) * | 2014-01-31 | 2015-08-06 | Google Inc. | Generating vector representations of documents |
US10803380B2 (en) * | 2015-09-11 | 2020-10-13 | Google Llc | Generating vector representations of documents |
US10891943B2 (en) * | 2018-01-18 | 2021-01-12 | Citrix Systems, Inc. | Intelligent short text information retrieve based on deep learning |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6087333B2 (en) * | 2014-11-26 | 2017-03-01 | 株式会社ユニバーサルエンターテインメント | Information providing system, information providing method, and program |
CN105824797B (en) * | 2015-01-04 | 2019-11-12 | 华为技术有限公司 | A kind of methods, devices and systems for evaluating semantic similarity |
US10339440B2 (en) * | 2015-02-19 | 2019-07-02 | Digital Reasoning Systems, Inc. | Systems and methods for neural language modeling |
US9852337B1 (en) * | 2015-09-30 | 2017-12-26 | Open Text Corporation | Method and system for assessing similarity of documents |
US10460247B2 (en) * | 2015-12-08 | 2019-10-29 | Adobe Inc. | Attribute weighting for media content-based recommendation |
US10515400B2 (en) * | 2016-09-08 | 2019-12-24 | Adobe Inc. | Learning vector-space representations of items for recommendations using word embedding models |
US10614043B2 (en) * | 2016-09-30 | 2020-04-07 | Adobe Inc. | Document replication based on distributional semantics |
US10963789B2 (en) * | 2016-11-28 | 2021-03-30 | Conduent Business Services, Llc | Long-term memory networks for knowledge extraction from text and publications |
US10678816B2 (en) * | 2017-08-23 | 2020-06-09 | Rsvp Technologies Inc. | Single-entity-single-relation question answering systems, and methods |
-
2018
- 2018-01-18 US US15/874,119 patent/US10891943B2/en active Active
-
2020
- 2020-12-30 US US17/138,232 patent/US20210118431A1/en not_active Abandoned
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040068396A1 (en) * | 2000-11-20 | 2004-04-08 | Takahiko Kawatani | Method of vector analysis for a document |
US20040078363A1 (en) * | 2001-03-02 | 2004-04-22 | Takahiko Kawatani | Document and information retrieval method and apparatus |
JP2004005337A (en) * | 2002-03-28 | 2004-01-08 | Nippon Telegr & Teleph Corp <Ntt> | Word relation database constructing method and device, word/document processing method and device using word relation database, explanation expression adequacy verifying method, programs for these, storage medium storing them, word similarity computing method, word grouping method, representive word extracting method, and word concept hierarchial method |
US20130013291A1 (en) * | 2011-07-06 | 2013-01-10 | Invertix Corporation | Systems and methods for sentence comparison and sentence-based search |
US20150220833A1 (en) * | 2014-01-31 | 2015-08-06 | Google Inc. | Generating vector representations of documents |
US10803380B2 (en) * | 2015-09-11 | 2020-10-13 | Google Llc | Generating vector representations of documents |
US10891943B2 (en) * | 2018-01-18 | 2021-01-12 | Citrix Systems, Inc. | Intelligent short text information retrieve based on deep learning |
Also Published As
Publication number | Publication date |
---|---|
US10891943B2 (en) | 2021-01-12 |
US20190221204A1 (en) | 2019-07-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20210118431A1 (en) | Intelligent short text information retrieve based on deep learning | |
US8073877B2 (en) | Scalable semi-structured named entity detection | |
US9286290B2 (en) | Producing insight information from tables using natural language processing | |
CN104899322B (en) | Search engine and implementation method thereof | |
US9715531B2 (en) | Weighting search criteria based on similarities to an ingested corpus in a question and answer (QA) system | |
US20160034512A1 (en) | Context-based metadata generation and automatic annotation of electronic media in a computer network | |
US20130060769A1 (en) | System and method for identifying social media interactions | |
US10157174B2 (en) | Utilizing a dialectical model in a question answering system | |
US11977589B2 (en) | Information search method, device, apparatus and computer-readable medium | |
US11023503B2 (en) | Suggesting text in an electronic document | |
US11651015B2 (en) | Method and apparatus for presenting information | |
CN113204621B (en) | Document warehouse-in and document retrieval method, device, equipment and storage medium | |
US20160188569A1 (en) | Generating a Table of Contents for Unformatted Text | |
US11238050B2 (en) | Method and apparatus for determining response for user input data, and medium | |
US20190155912A1 (en) | Multi-dimensional query based extraction of polarity-aware content | |
US8046361B2 (en) | System and method for classifying tags of content using a hyperlinked corpus of classified web pages | |
CN114742062B (en) | Text keyword extraction processing method and system | |
CN111126073A (en) | Semantic retrieval method and device | |
CN112632232B (en) | Text matching method, device, equipment and medium | |
CN114691850A (en) | Method for generating question-answer pairs, training method and device of neural network model | |
KR20220039075A (en) | Electronic device, contents searching system and searching method thereof | |
CN112445959A (en) | Retrieval method, retrieval device, computer-readable medium and electronic device | |
CN110851560A (en) | Information retrieval method, device and equipment | |
CN113177116B (en) | Information display method and device, electronic equipment, storage medium and program product | |
US11663251B2 (en) | Question answering approach to semantic parsing of mathematical formulas |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: CITRIX SYSTEMS, INC., FLORIDAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHANG, JINREN;XU, KE;FAN, ZHEN;AND OTHERS;REEL/FRAME:054780/0521Effective date: 20180117 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:VANDUYN, ISSAC STERLING;REEL/FRAME:055220/0262Effective date: 20200409 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
AS | Assignment |
Owner name: WILMINGTON TRUST, NATIONAL ASSOCIATION, DELAWAREFree format text: SECURITY INTEREST;ASSIGNOR:CITRIX SYSTEMS, INC.;REEL/FRAME:062079/0001Effective date: 20220930 |
|
AS | Assignment |
Owner name: WILMINGTON TRUST, NATIONAL ASSOCIATION, AS NOTES COLLATERAL AGENT, DELAWAREFree format text: PATENT SECURITY AGREEMENT;ASSIGNORS:TIBCO SOFTWARE INC.;CITRIX SYSTEMS, INC.;REEL/FRAME:062113/0470Effective date: 20220930Owner name: GOLDMAN SACHS BANK USA, AS COLLATERAL AGENT, NEW YORKFree format text: SECOND LIEN PATENT SECURITY AGREEMENT;ASSIGNORS:TIBCO SOFTWARE INC.;CITRIX SYSTEMS, INC.;REEL/FRAME:062113/0001Effective date: 20220930Owner name: BANK OF AMERICA, N.A., AS COLLATERAL AGENT, NORTH CAROLINAFree format text: PATENT SECURITY AGREEMENT;ASSIGNORS:TIBCO SOFTWARE INC.;CITRIX SYSTEMS, INC.;REEL/FRAME:062112/0262Effective date: 20220930 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
AS | Assignment |
Owner name: CLOUD SOFTWARE GROUP, INC. (F/K/A TIBCO SOFTWARE INC.), FLORIDAFree format text: RELEASE AND REASSIGNMENT OF SECURITY INTEREST IN PATENT (REEL/FRAME 062113/0001);ASSIGNOR:GOLDMAN SACHS BANK USA, AS COLLATERAL AGENT;REEL/FRAME:063339/0525Effective date: 20230410Owner name: CITRIX SYSTEMS, INC., FLORIDAFree format text: RELEASE AND REASSIGNMENT OF SECURITY INTEREST IN PATENT (REEL/FRAME 062113/0001);ASSIGNOR:GOLDMAN SACHS BANK USA, AS COLLATERAL AGENT;REEL/FRAME:063339/0525Effective date: 20230410Owner name: WILMINGTON TRUST, NATIONAL ASSOCIATION, AS NOTES COLLATERAL AGENT, DELAWAREFree format text: PATENT SECURITY AGREEMENT;ASSIGNORS:CLOUD SOFTWARE GROUP, INC. (F/K/A TIBCO SOFTWARE INC.);CITRIX SYSTEMS, INC.;REEL/FRAME:063340/0164Effective date: 20230410 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |