CROSS REFERENCE TO RELATED APPLICATIONS
The application claims the benefit of Provisional Application No. 61/556,059, filed on Nov. 4, 2011, which is hereby incorporated herein by reference.
BACKGROUND
1. Field of Art
The present disclosure generally relates to the field of digital video, and more specifically, to creating new digital videos using existing portions of other videos.
2. Background of the Disclosure
Many viewers of online digital videos would like to create their own videos depicting desired objects or events in a manner not readily observable in nature and hence not able to be directly captured by video recording devices. For example, a user might wish to create a composite video that includes footage of a running cat, placing the footage on a visually pleasing background along with accompanying text. However, it may be difficult to create or locate a video depicting the desired objects or events, such as a running cat. Even if a user manages to locate such a video, it is additionally difficult to isolate the specific spatio-temporal portion of the video corresponding to the object or event of interest (e.g., the running cat) within that video and to create and manipulate a new derivative video incorporating the desired portion while excluding unwanted portions (e.g., the background, or foreground objects other than the cat).
SUMMARY
In one embodiment, a computer-implemented method of creating a composite video comprises accessing a database storing volumes from a plurality of digital videos, each volume being a spatio-temporal segment of one of the videos and having a start time and an end time within the video, wherein the spatial extent of each volume is less than an entire frame of the video. The method further comprises providing, to a client device, indicia for a plurality of the volumes, and receiving, from the client device, selections of a subset of the indicia, thereby selecting a corresponding subset of the plurality of the volumes. The method further comprises retrieving, from the database, the volumes of the subset, and compositing the retrieved volumes to form a composite video.
In one embodiment, a computer-implemented method comprises transmitting a search query over a computer network to a video sharing service and receiving indicia of a plurality of volumes of digital videos, the volumes being spatio-temporal segments of the digital videos and matching the search query, at least one of the indicia comprising a user interface element associated with a corresponding one of the volumes. The method further comprises displaying a user interface for specifying a new composite video responsive to a user selection of the user interface element, the user interface comprising a video region representing an area corresponding to a total spatial region of frames of a new composite video, and, within the video region, a visual representation of the volume corresponding to the selected user interface element. The method further comprises monitoring user actions that specify properties of the volume within the new composite video and sending a request to the video sharing service to save the new composite video comprising the specified properties to a video repository of the video sharing service.
In one embodiment, a non-transitory computer-readable storage medium storing executable computer program instructions comprising instructions for accessing a database storing volumes from a plurality of digital videos, each volume being a spatio-temporal segment of one of the videos and having a start time and an end time within the video, wherein the spatial extent of each volume is less than an entire frame of the video; instructions for providing, to a client device, indicia for a plurality of the volumes; instructions for receiving, from the client device, selections of a subset of the indicia, thereby selecting a corresponding subset of the plurality of the volumes; instructions for retrieving, from the database, the volumes of the subset; and instructions for compositing the retrieved volumes to form a composite video.
In one embodiment, a computer-implemented method comprises accessing a database storing volumes from a plurality of digital videos, each volume being a spatio-temporal segment of one of the digital videos and having a start time and an end time within the video, wherein the spatial extent of each volume is less than an entire frame of the video, and wherein each volume is associated with a label descriptive of the volume; receiving, from a client device, a search query; responsive to receiving the search query, identifying a plurality of the volumes having a label matching the search query; and providing indicia of the identified volumes to the client device.
The features and advantages described in the specification are not all inclusive and, in particular, many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings, specification, and claims. Moreover, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter.
BRIEF DESCRIPTION OF DRAWINGS
FIG. 1 is a block diagram of a video hosting service in which video volume labeling takes place, according to one embodiment.
FIG. 2 illustrates an example video and its constituent video volumes.
FIG. 3 is a data flow diagram representing the relationships and derivations of the various types of data analyzed, produced, and/or applied by the volume identification module, according to one embodiment.
FIG. 4 illustrates the various components of the volume identification module of FIG. 1, according to one embodiment.
FIGS. 5A-5D provide different examples of geometric features for characterizing video volumes, according to some embodiments.
FIG. 6 illustrates clustering by features, one technique for volume labeling, according to one embodiment.
FIG. 7 illustrates a machine learning approach for volume labeling, according to one embodiment.
FIG. 8 illustrates a user interface showing search results that include video volumes, as well as videos as a whole, according to one embodiment.
FIGS. 9A-9C illustrate techniques for visually emphasizing the selectable volumes within a video, according to some embodiments.
FIG. 10 illustrates an example user interface for editing a composite video containing a volume, according to one embodiment.
The figures depict embodiments of the present disclosure for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the disclosure described herein.
DETAILED DESCRIPTION
System Architecture
FIG. 1 is a block diagram of an example video hosting service 100 in which video volumes can be analyzed and labeled, according to one embodiment. The video hosting service 100 represents a system such as that of YOUTUBE that stores videos provided by content providers 130 and makes the videos available to clients such as the client device 135. The video hosting service 100 thus communicates with a plurality of content providers 130 and client devices 135 via a network 140 to facilitate sharing of video content between users. Note that for the sake of clarity FIG. 1 depicts only one instance of content provider 130 and client device 135, though there could be any number of each.
The video hosting service 100 additionally includes a front end interface 102, a video serving module 104, a video search module 106, an upload server 108, and a video repository 116. Other conventional features, such as firewalls, load balancers, authentication servers, application servers, failover servers, site management tools, and so forth are not shown so as to more clearly illustrate the features of the video hosting service 100. One example of a suitable service 100 is the YOUTUBE website, found at the URL corresponding to youtube.com. Other video hosting sites are known, as well, and can be adapted to operate according to the teachings disclosed herein. The illustrated components of the video hosting service 100 can be implemented as single or multiple components of software or hardware. In general, functions described in one embodiment as being performed by one component can also be performed by other components in other embodiments, or by a combination of components. Furthermore, functions described in one embodiment as being performed by components of the video hosting service 100 can also be performed by one or more clients 135 in other embodiments if appropriate.
Client devices 135 are computing devices that execute client software, e.g., a web browser or built-in client application, to connect to the front end interface 102 of the video hosting service 100 via a network 140 and to display videos. The client device 135 might be, for example, a personal computer, a personal digital assistant, a smart phone, a laptop computer, a television “set-top box,” and the like.
Conceptually, the content provider 130 provides video content to the video hosting service 100 and the client 135 views that content. In practice, content providers may also be content viewers. Additionally, the content provider 130 may be the same entity that operates the video hosting service 100.
The content provider 130 operates a client device to perform various content provider functions. Content provider functions may include, for example, uploading a video file to the video hosting service 100, editing a video file stored by the video hosting service 100, or editing content provider preferences associated with a video file.
The client 135 operates on a device to view video content stored by the video hosting service 100. Client 135 may also be used to configure viewer preferences related to video content. In some embodiments, the client 135 includes an embedded video player such as, for example, the FLASH player from Adobe Systems, Inc. or any other player adapted for the video file formats used in the video hosting service 100. Note that the terms “client” and “content provider” as used herein may refer to software providing client and content providing functionality, to hardware on which the software executes, or to the entities operating the software and/or hardware, as is apparent from the context in which the terms are used.
The upload server 108 of the video hosting service 100 receives video content from a client 135. Received content is stored in the video repository 116. In response to requests from clients 135, a video serving module 104 provides video data from the video repository 116 to the clients 135. Clients 135 may also search for videos of interest stored in the video repository 116 using a video search module 106, such as by entering textual queries containing keywords of interest. Front end interface 102 provides the interface between client 135 and the various components of the video hosting service 100.
The video repository 116 contains a set of videos 117 submitted by content providers 130. The video repository 116 can contain any number of videos 117, such as tens of thousands or hundreds of millions. Each of the videos 117 has a unique video identifier that distinguishes it from each of the other videos, such as a textual name (e.g., the string “a91qrx8”), an integer, or any other way of uniquely naming a video. The videos 117 can be packaged in various containers such as AVI, MP4, or MOV, and can be encoded using video codecs such as MPEG-2, MPEG-4/H.264, WMV, WebM, and the like. Further, in addition to their audiovisual content, the videos 117 may—but need not—have associated metadata 117A, e.g., textual metadata such as a title, description, and/or tags provided by a content provider 130 who uploaded the video. Various approaches may be used to extract semantically meaningful labels (e.g., “cat”, “dog”, “yarn”, “running”, “running cat”) from the metadata 117, such forming n-grams comprising some number of adjacent words from the metadata.
The video hosting service 100 further comprises a volume identification module 119 that analyzes the videos 117 and assigns labels to “volumes” located within the videos. More specifically, the volume identification module 119 identifies unlabeled volumes in the videos 117, determines features representative of those volumes, and through analysis of these features then assigns semantically meaningful labels to the volumes. This process is depicted in more detail in FIG. 3, described below. Volumes are described with reference to FIG. 2.
FIG. 2 illustrates an example video 117 and some of its constituent video “volumes.” Each video volume corresponds to a spatial extent of pixels extending over a contiguous sequence of frames. Some of the volumes can be associated with a semantically meaningful object or action, such as a face, an animal, a vehicle, a gesture, a movement, an event (e.g., car accident, handshake, kiss), and the like, while other volumes may not correspond to a semantically meaningful object, but rather to a portion thereof. The example video 117 contains a number of frames (not depicted) arranged sequentially in a temporal order illustrated by the timeline 215. The example video 117 contains a first video volume 220A, a second video volume 220B, and a third video volume 220C. These volumes might represent, for example, a cat 220A chasing a ball of yarn 220B, while a dog 220C sits motionless and observes. In each frame, a volume occupies a substantially contiguous region of pixels. The spatial positions of the volumes within the individual video frames can, but need not, change over time. For example, the volumes 220A and 220B move from left to right over the course of the video, e.g., as the cat chases the ball of yarn. Additionally, the size of the spatial portion of a video frame occupied by a given volume may vary over time. For example, the object or action corresponding to the given volume may come closer to the camera over time, in which case the amount of the frames occupied by the volume will become correspondingly larger. Similarly, if an object changes its shape—e.g., the sitting dog 220C stands up—the shape of the volume may change over time, as well. Volumes can start and end at different times within a video. For example, volumes 220A and 220B both start at the first frame t1 and end near frame t4, while volume 220C starts later at frame t2, and ends earlier at around frame t3.
Volumes need not correspond to a rigid object. Rather, a volume may represent an object that can change its shape, such as an articulated creature such as a dog that can move its limbs to shift from a sitting position to a standing position. A volume may also change its shape over time even in the case of a rigid object, such as if the camera changes position to capture a different angle of the same object. Further, a volume need not represent a single physical object, such as an entire human, but can represent an action made up of movements, such as sign language made by the motions of a human hand. A volume for an action may also correspond to the same spatio-temporal region as the volume for an object, such as a volume representing both a physical cat object and an action representing the concept of running, or a volume for a physical ball of yarn object and an action representing the concept of rolling.
The disclosed system provides various methods and means for automatically identifying volumes in videos and automatically assigning semantically meaningful labels, all without direct human selection of the volumes or the labels.
FIG. 3 is a data flow diagram representing the relationships and derivations of the various types of data analyzed, produced, and/or applied by the volume identification module 119, according to one embodiment.
The volume identification module 119 takes, as input, the videos 117 from the video repository 116 of FIG. 1. A typical digital video includes multiple volumes. For example, a video as described in FIG. 2 (depicting a cat playing with a ball of yarn and later being joined by a dog that sits and watches) could be described as containing at least three volumes: one volume corresponding to the cat, another volume corresponding to the ball of yarn, and another volume corresponding to the dog. Each of these volumes occupies a particular temporal portion of the video corresponding to the portion in which the volume's object is shown in the video. Likewise, each of the volumes has, at every frame, a spatial portion that it occupies, and the spatial portion may change in size, shape, and position over time.
The volume identification module 119 extracts from each of the videos 117 a set of volumes 330 based on the visual content of the video. For example, FIG. 3 illustrates three volumes 330A extracted from the first video (e.g., the cat, ball of yarn, and dog of FIG. 2), two volumes 330B extracted from the second video, and three volumes 330C extracted from the third video. At this stage, the extracted volumes are unlabeled, in that although volume identification module 119 has determined that each volume represents a single semantically meaningful object or action, it is not yet determined what those objects or actions are. That is, although a particular volume may in fact visually represent a dog, to the volume identification module 119 the volume is only a set of data, without any semantic meaning yet determined. These unlabeled volumes act as the candidates from which volumes capable of being accurately labeled are later selected, and are hence referred to hereinafter as “candidate volumes.”
The volume identification module 119 then determines, for each candidate volume 330, a set of features 335 that characterize the visual characteristics of the candidate volume as a whole. Different embodiments extract different types of features that are effective for characterizing volumes. In one embodiment, one feature vector is extracted for each volume. Thus, for the three volumes 330A for video V1, there are three corresponding feature vectors v1f1, v1f2, and v1f3. The same applies to the other videos V2 and V3 and their respective volumes 330B and 330C. In other embodiments, each volume may have a number of associated feature vectors, one for each different type of feature.
The volume identification module 119 then analyzes the determined features to select certain ones of the volumes 330 that can be identified with high confidence as having a certain label. A label 340 is then applied to the selected videos based on the identification. In the example of FIG. 3, for instance, only the first one of the volumes of video V2, and the second one of the volumes of the video V3, are able to be identified with sufficiently high certainty and thus assigned a label—namely, L2 and L6, respectively, where L2 and L6 are labels from some previously determined set of possible labels. Again, this assignment happens automatically, without direct human selection of the volumes or of the labels.
Different embodiments apply different approaches to volume identification. For example, in some embodiments volume identification involves analyzing feature vector consistency by clustering the volumes (or, more precisely, their corresponding feature vectors) and determining a degree of consistency of the user-specified labels within each cluster. In other embodiments, volume identification involves training and applying weak volume classifiers based on user-specified labels. These techniques are explained further below with respect to a volume labeling module 415 of FIG. 4.
FIG. 4 illustrates the various components of the volume identification module of FIG. 1, according to one embodiment. More specifically, the volume identification module 119 comprises a volume segmentation module 405 that extracts unlabeled candidate volumes from each of the videos 117 by applying image segmentation algorithms to the video; a feature determination module 410 that determines, for each of these candidate volumes, features that describe the visual characteristics of the volume; and a volume labeling module that uses the determined volume features to label volumes with high confidence. The video identification module 119 generally operates over a large set of videos 117, processing thousands, and potentially millions, of videos.
I. Volume Segmentation
In one embodiment, the volume segmentation module 405 first identifies stable segments of the video and then extracts candidate volumes from the stable segments, and is one means for performing this function. The videos are first stabilized with a video stabilization algorithm, which reduces the effects of camera motion and shake typically found in amateur videos. One approach to video stabilization is described in the article “Auto-Directed Video Stabilization with Robust L1 Optimal Camera Paths”, by Matthias Grundmann, Vivek Kwatra, and Irfan Essa, in “IEEE Conference on Computer Vision and Pattern Recognition (CVPR)”, 2011, which is incorporated by reference herein (including all of the references cited therein).
For a given video, the stabilization algorithm outputs stabilized video as a well as a measure of the degree of background motion in each frame of the video. This measure of the background motion is used to identify series of frames where the background is motionless, thereby indicating that the camera is not moving, and that any motion in the frame is due to motion of a foreground object. Sequences of frames where there is no background motion are identified as stable segments.
Given the stable segment(s) in a video, individual volumes are extracted therefrom. For candidate volume extraction, in one embodiment the volume segmentation module 405 applies hierarchical graph-based video segmentation to the stable regions of a given video. This approach over-segments a volumetric video graph into space-time regions grouped by appearance, constructs a “region graph” over the obtained stable segments, and iteratively repeats the process over multiple levels to create a tree of spatio-temporal segmentations. Additional details on such an approach are described in the article “Efficient Hierarchical Graph-Based Video Segmentation”, by Matthias Grundmann, Vivek Kwatra, Mei Han, and Irfan Essa, in “Computer Vision and Pattern Recognition (CVPR)”, June 2010, pages 2141-2148, which is incorporated by reference herein (including all of the references cited therein).
As a result of the operations of the volume segmentation module 405, a volumes repository 430 contains a set of descriptions of all unlabeled candidate volumes segmented from all videos 117 being processed. Each volume is described by a set of data including: (1) an identifier of the video containing the volume; and (2) the temporal and spatial portion of the video that the volume occupies. The temporal portion of a volume can be described by a list of frame numbers, and the spatial portion can be a list of spatial descriptors, such as one spatial descriptor per frame. Each spatial descriptor indicates the portion of the frame occupied by the volume, and can be (for example), a list of pixels, a bounding box (e.g., the top-left and bottom-right coordinates of a rectangle), or a list of coordinate pairs forming a polygon, that encloses the volume at that frame.
II. Feature Determination
With the candidate volumes identified by the volume segmentation module 405, a feature determination module 410 determines, for each of these volumes, features that describe the visual characteristics of the volume. Different approaches are employed in different embodiments, as is now described.
(A) Volume Average Features
Generally, the feature determination module 410 first generates a codebook of features commonly found in videos, and then uses that codebook as the basis for identifying the features for each video.
(i) Codebook Generation
More specifically, to generate the codebook the feature determination module 410 divides every volume of every video into sequential fixed-length segments, such as segments of one second duration. Thus, for example, if a volume in a given video lasts 30 seconds, then 30 one second segments are created. Each segment will contain the data for some number of frames, depending on the number of frames per second. Alternatively, the segments can be a fixed number of frames, rather than a fixed time duration. For each such segment, the feature determination module 410 extracts a representative feature vector—or a set of feature vectors, one for each of the different types of features—that describes the visual properties of the segment.
The visual property features of the feature vector for the segments may include, for example, features sampled using a Laplacian-of-Gaussian (LoG) or Scale Invariant Feature Transform (SIFT) feature extractor, a color histogram computed using hue and saturation in HSV color space, motion rigidity features, texture features, filter responses (e.g., derived from Gabor wavelets), including 3D filter responses, or edge features using edges detected by a Canny edge detector. Other types of visual features would be known to one of skill in the art and may be used as well, such as feature descriptors including GLOH (Gradient Location and Orientation Histogram), LESH (Local Energy based Shape Histogram), HOG (Histogram of Oriented Gradients), or SURF (Speeded Up Robust Features) features. Regardless of the particular features used, the features are concatenated into a single, compound high dimensional segment feature vector. Thus, for every volume of every video, there will be a set of segment feature vectors, one feature vector per segment.
The feature determination module 410 then clusters the segment feature vectors using an algorithm such as k-means clustering with random initialization of k cluster centers (k≈100), and for each resulting cluster forms a representative feature vector, such as the centroid of the cluster. (In embodiments in which each feature type has a separate feature vector, rather than using a single compound feature vector, a separate codebook can be formed for each type from the feature vectors for that type. Thus, in such embodiments there could be a codebook for pixel color, with entries such as <67, 125, 0> representing a color with a red component of 67, a green component of 125, and a blue component of 0; a separate codebook for texture; a separate codebook for motion rigidity; and the like.) The set of k cluster feature vectors together form the basis of the code book, where each cluster feature vector represents one code vector entry in the codebook, and is referenced using an integer index into the codebook, or a logical “true” in a bit vector at a position corresponding to that code vector. Other variations on the representation of the codebook(s) would be known to one of skill in the art.
There are a number of different ways of representing a given video volume based on the feature codebook(s), as are described in the following sections.
(ii) Determining Volume Average Feature Vectors
The feature determination module 410 represents the features for a volume 330 in terms of the feature codebook, thus providing a form of vector quantization and data dimensionality reduction. Specifically, the feature determination module 410 divides a given volume into one second segments and extracts a feature vector (or set of feature vectors, one per feature type) in the same manner used when creating the codebook. Then, in one embodiment, the feature vector is mapped to a single most similar codebook entry according to some similarity function.
In other embodiments, rather than mapping the feature vector as a whole, individual elements of the feature vector for a segment are mapped to most similar codebook entries according to some similarity function. This results in a histogram of codebook entries for that segment. For example, in one embodiment the feature vector for a segment includes color features for various pixels of interest, such as color values for each pixel; each pixel color value feature is mapped to a most similar codebook entry; and a histogram is created for the different codebook entries. For instance, a pixel color value feature <64, 128, 0> might be mapped to codebook entry <67, 125, 0> with codebook index 3, and a different pixel color value feature <70, 130, 5> might also be mapped to the same codebook entry <67, 125, 0>. A different pixel color value feature <120, 33, 80> might map to a different codebook entry <121, 35, 80> with codebook index 8. Thus, based at least on these three pixel color values, the histogram for pixel color value would contain at least two entries for index 3, and one for index 8. The different resulting histograms could in turn be clustered into a secondary histogram codebook, similar to the codebook creation process described above; thus, different distinct histograms would have different histogram codebook indexes. These codebook entry histograms—e.g., one for pixel color values, one for texture, etc.—then represent the segment, and also conjointly represent the volume of which the segment is a part.
In one embodiment, the codebook entries (whether histograms in one embodiment, or a single non-histogram code vector in another embodiment) for the different types of features are concatenated into a single feature vector for the segment; in other embodiments, each type remains separate and is separately analyzed and processed.
For example, FIG. 5A depicts an example of a volume temporally partitioned into six segments (and having six feature vectors, S1 to S6, one per segment), along with a codebook of N code vectors CV. (In embodiments in which different types of features such as pixel color value features, and texture features, remain separate, for a given segment there is a separate set of feature vectors for each feature type.) In this example, the feature vectors for the first three segments S1, S2, and S3 are most similar to the second code vector (denoted “CV2”), whereas the feature vectors for the fourth and fifth segments S4 and S5 are most similar to the third code vector (“CV3”). The last segment S6 has a feature vector most similar to CV1. As can be observed, in the example of FIG. 5A, a given segment can now be represented as one-hot bit vector (reading down the column from the segment number), with a single bit set corresponding to the code vector that is most similar to the segment's feature vector. Thus, the first segment S1 has a feature vector of [0, 1, 0, . . . , 0], for example.
As an alternative representation, the feature vector for each segment may have its similarity to each code vector computed and stored as a normalized real number (a similarity or correspondence score). This embodiment is depicted in FIG. 5B, in which the first segment S1 has a correspondence of 0.1 (on a scale of 0.0 to 1.0, from least to most similar) to code vector CV1, a correspondence of 0.85 to code vector CV2, a correspondence of 0.0 to code vector CV3, and so on.
Since each volume can have a different length in terms of the number of segments, and hence a different number of feature vectors, the feature vectors are normalized by summing their values and dividing the sum vector by the number of feature vectors, thereby obtaining an averaged feature vector for a given volume.
Referring to the example of FIG. 5A, for instance, the summed feature vector for the volume is
[0, 1, 0, . . . , 0]+
[0, 1, 0, . . . , 0]+
[0, 1, 0, . . . , 0]+
[0, 0, 1, . . . , 0]+
[0, 0, 1, . . . , 0]+
[1, 0, 0, . . . , 0]=
[1, 3, 2, . . . , 0]
and the volume average feature vector is
[1,3,2, . . . ,0]/5=[0.2,0.6,0.4, . . . ,0]
The volume average feature vector for the example of FIG. 5B would be computed in the same way.
(B) Geometric Representation
In another embodiment, the feature determination module 410 calculates geometric features representing the relationships of different code vectors over time and/or space. Such features permit geometric reasoning in both time and space.
(i) Time Relationships
Time relationship features—such as “before”, “after”, and “at the same time”—quantify the degree to which one code vector occurs before another code vector within a given segment. It is understood that saying a code vector appears “before” or “after” another code vector in a given segment means that the underlying feature vectors which were mapped to the corresponding code vectors themselves appeared in a particular temporal order, since the code vectors themselves are being used as proxies for the underlying feature vectors. For example, a “before” binary operator quantifies the total number of times each instance of a first code vector CV, occurs before each instance of a second code vector CVJ in a given segment. Referring back to the example of FIG. 5A, each of the three instances of code vector CV2 (in S1, S2, and S3) occurs before each of the two instances of code vector CV3 (in S4 and S5), and hence the result of the expression “CV2 before CV3” is 3*2=6. Similarly, the result of the expression “CV3 before CV1” is 2, since both occurrences of CV3 occur before the one occurrence of CV1. Hence, for the example of FIG. 5A, the features for the temporal operator “before” form a temporal relationship matrix as shown in FIG. 5C, where the cell at row CVi, column CVj indicates the value of the expression “CVi before CVj”.
Likewise, the operator “after” can be defined in similar fashion to quantify how many times an instance of one code vector occurs after an instance of another code vector, thus producing a corresponding temporal relationship matrix.
(ii) Spatial Relationships
Spatial relationship features—such as “left-of”, “right-of”, “above”, “below”, and “centered-on”—quantify the degree to which one code vector occurs at a given spatial position in a frame relative to another code vector. For example, an “above” binary operator quantifies how many times a first code vector CVi occurs above (closer to the top of the frame) the first occurrence of a second code vector CVj.
In one embodiment, the spatial position of a code vector of a segment is defined to be the spatial position of the centroid of the segment at that moment in time. The centroid of a segment can be further defined in terms of the centroids of the segment portions for each frame within the segment. That is, for each frame within the segment, the spatial portion of the segment is determined, and the centroid of that portion identified, e.g., as the center of a rectangular region bounding the spatial portion. Then, the x coordinates of the centroids are summed and averaged over the frames of the segment, as are the y coordinates, with the average x coordinate and the average y coordinate constituting the location of the centroid of the segment.
As an example, if a given volume has a segment S1 with a centroid at position (10, 10) and a corresponding code vector CV1, and a second segment S2 with a centroid at position (20, 30) and a corresponding code vector CV2, then the relationship “CV1 left-of CV2” holds in that instance, since S1 is located to the left of S2 (x-coordinate 10 of S1 is less than x-coordinate 20 of S2). Other comparisons would be computed in a similar manner, and the values aggregated in a manner similar to that depicted in FIG. 5C, for example.
In another embodiment, the spatial comparisons are not between feature vectors of different segments, but rather between feature vectors corresponding to different points of the same segment. For example, points or regions of interest (e.g., points of color discontinuities) can be selected within a given frame, or different frames of the same segment, and a feature vector selected for each using the same feature selection as described above, and each feature vector mapped to appropriate codebook entries, as also described above. Thus, for example, if a first point had a feature vector CV1 and a second point had a feature vector CV2, and the first point were located to the left of the second point, then “CV1 left-of CV2” would be true for that point, and other point pairs would likewise be compared to achieve the total count for the relationship “CV1 left-of CV2” for that segment, resulting in a matrix similar to that depicted in FIG. 5C.
(iii) Combined Relationships
Spatial and temporal relationships can be combined into spatial-temporal relationships, such as “left-of-and-before”, or “above-and-after.” For example, the “before-and-left-of” relationship quantifies how many times a first code vector CVi occurs both before and to the left of the first occurrence of a second code vector CVj.
Certain additional relationships can be defined when temporal and spatial relationships are combined. For example, an “at the same time” temporal relationship operator can be defined and used in combination with the spatial relationships set forth above. Thus, one combined operator “above-and-at-the-same-time” could indicate whether a particular code vector CVi occurs both above and at the same time as another code vector CVj.
It is appreciated that the above sets forth one example set of different relationships in time and space, and that other sets could be used in different embodiments, including defining fewer or different relationships.
It is further appreciated that each of the relationship feature matrices, such as the “before” matrix of FIG. 5C and the “left-of” matrix of 5D, could be expressed as a vector (e.g., a vector of column vectors), and that all the relationship features could be combined into a single vector by concatenating the feature matrices (equivalently, vectors) for each of the relationships. Thus, for example, each volume can be assigned a compound geometric vector comprising features corresponding to temporal relationships such as “before”, “after”, “at the same time”, spatial relationships such as “left-of”, “right-of”, “above”, “below”, “centered-on”, and all combinations of the temporal and spatial relationships.
(C) Quantization
In one embodiment, a variation of the geometric representation is employed. More specifically, each of the elements in each of the relationship matrices is quantized into a predefined set of value ranges, resulting in a bit vector for each element. For example, the value of each element could be mapped into the three value ranges “0 to 2”, “3 to 12”, and “12 or more.” The results of this quantization for FIG. 5C is illustrated in FIG. 5E, for instance. For example, the element at row CV2, column CV1 has been quantized to the bit vector <0,1,0>, indicating that the value 3 is within the second of the three value ranges.
Reducing the specific values of the matrix elements to binary vectors enhances the ability to do further analysis using algorithms such as frequent item set mining. As a result of the application of further analysis, higher-order conjunctions of geometric representations leading to strong geometric features can be defined. For example, for a volume representing a car, a pattern such as <CV1, CV2, <0,1,0>>, <CV2, CV4, <1,0,0>>, <CV1, CV3, <1,0,0>, <CV1, CV4, <0,0,1>> might be observed to occur with some degree of frequency for the “above” spatial relationship, indicating that (for instance) tires tend to be below windshields and below doors, that windshields tend to be above doors, or the like. The discovery of such higher-order features can make later object-level analysis easier.
Regardless of the particular types of volume features employed, the features for a volume are stored in a volume features repository 435 in association with the unique identifier of the volume to which the features correspond. It is appreciated that the volumes repository 430 and the volume features repository 435, although depicted in FIG. 4 as being logically separate repositories, could be physically combined within a single repository.
III. Volume Labeling
With features—such as volume average features, and/or geometric features—associated with each of the candidate volumes, a volume labeling module 415 applies the features to label with high accuracy certain ones of the candidate volumes stored in the volumes repository 430. (Note that supervised learning cannot be directly employed to do the volume labeling, since individual candidate volumes have not been labeled by users and hence training sets cannot easily be formed. Rather, the applicable labels are discovered by analysis of the relationship between the features characterizing the volumes, and labels previously applied to the videos, e.g., by users as part of the video metadata 117A.) Different approaches are employed in different embodiments, as is now described.
(A) Clustering by Features
In one embodiment, each volume is initially labeled with the label(s) derived from textual metadata of the video of which the volume is a part. For example, if video metadata 117A of the example video of FIG. 2 yielded the labels “dog”, “running”, and “cat”, then each of the three volumes 220A-C is associated with all three of these labels. Volumes of videos lacking any labels are excluded from further processing.
The volume labeling module 415 clusters the volumes in the volumes repository 430 (or equivalently, their corresponding feature vectors) according to the values of their feature vectors assigned by the feature determination module 410. For example, k-means clustering can be employed, with k randomly-selected volume vectors initialized as the k initial volume cluster seeds. This results in k clusters of volumes with similar visual characteristics. Some of the clusters may represent semantically meaningful volumes, but others may not. Which clusters are likely to be related to a semantically meaningful volume is determined by analysis of consistency of the volume labels.
For example, FIG. 6 illustrates an initial set 610 of the videos 117 before clustering. Clustering results in k clusters 620, CL1 to CLk, each having some subset of the videos (equivalently, video feature vectors) in the set 610 that were determined to be similar.
As noted above, each volume is initially labeled with the labels from its parent video. Thus, given a cluster 620 of volumes, there will be a set of all of the labels 630 associated with volumes. For example, the first video of CL1 in FIG. 6 has the associated labels “dog” and “cat,” e.g., because its video metadata 117A contained those labels. Then, in a given cluster, the frequency and/or percentage of occurrence of each label is determined. Then, clusters for which the contained volumes have labels that are not sufficiently consistent with each other are discarded as unreliable. The degree of label consistency may be quantified as, for example, the percentage of volumes that have the most frequently occurring label. For example, if the label “dog” is the most frequently occurring volume label in cluster CL1, being a label for 80% of the volumes in that cluster, and if the threshold percentage for consistency is 75%, then each of the volumes with the label “dog” within CL1 are selected as being representative of “dog” with high probability. By contrast, a cluster (such as CLk in FIG. 6) in which no label applied to more than 20% of volumes would clearly indicate that the volumes were associated with many different concepts. As a result of this step, using a relatively high threshold ensures that only clusters that are most likely representative of meaningful semantic objects are retained.
(B) Clustering within Labels
Another method of feature determination is based on clusters according to labels. Here, a set of labels is created as the union of the labels of all of the volumes in all of the clusters. Then for each label, a list of the volumes having that label is determined. Since a volume can have multiple labels, it will appear in the list of volumes for each such labels. For example, a volume from a video with the labels “dog”, “running”, and “cat” would be added to a set of volumes for the label “dog”, to a set of volumes for the label “running”, and to a set of volumes for the label “cat.” Volumes of videos lacking any labels are excluded from further processing.
The volumes in each of the label sets are then clustered according to the values of its feature vectors assigned by the feature determination module 410, e.g., using k-means clustering. This results—for every label—in a set of clusters of volumes with similar characteristics. For each cluster within a label, a degree of label consistency is quantified as above, and if a cluster is found to be representative of the same label as the label of the set of which it is a member, then the volumes with that label are selected as being representative of the label with high probability.
(C) Classifier Training
Another way of identifying meaningfully labeled volumes uses a machine learning approach, as illustrated in FIG. 7. Here, each volume in the volumes repository 430 is labeled with the labels of its parent video, as above. Then, the union of all labels is formed, resulting in a label set of tens or hundreds of thousands of labels. The set of labels may further be filtered to obtain a more useful set of labels, e.g., by discarding labels lacking some minimum frequency of occurrence in the label set. For each remaining label 705 (indicated in FIG. 7 as L1 through LN), all the volumes 710 (or some subset thereof) with that label are selected as the positive training set, and some (or all) of the volumes without that label are selected as the negative training set. A weak volume classifier 715 is then trained for each label using the positive and negative training sets for that label as input for an ensemble learning algorithm. In one embodiment, the ensemble learning algorithm employed is AdaBoost, with a number of stumps linearly proportional to the number of videos in the positive training set. Other learning algorithms, such as Linear Support Vector Machine (SVC), the details of which are known to those of skill in the art of machine learning, could likewise be used.
The formation of the training sets relies on the accuracy of the labels for the volumes. However, given that the volume labels are merely taken from the labels of the parent video, it is unlikely that any given volume label will be accurate. For example, for the video with labels “dog”, “cat”, and “running”, a volume that in fact depicts a dog will inherit all three labels, and the “cat” label will be incorrect (since the volume represents a dog, not a cat), and the correctness of the “running” label will depend upon whether the dog is, in fact, running. Hence, the accuracy of the volume classifiers will tend to be relatively poor. For example, such classifiers will typically produce an unusually large number of false positives due to the significant number of objects in the positive training set that do not in fact represent the object or action in question—e.g., mistakenly identifying a cat as a dog due to the training set for the label “dog” containing a large number of volumes representing cats. Nonetheless, the classifiers will still tend to produce very high scores for volumes that are in fact properly associated with the objects or actions corresponding to the classifier label—that is, although the classifiers may result in a number of false positives, they will typically not produce many false negatives.
Accordingly, in order to obtain accurate volume labels from the classifiers, each of the weak volume classifiers is applied to each volume 720 in the volumes repository 430, thereby producing a set of classifier scores for every volume. For example, FIG. 7 depicts applying each of the weak volume classifiers to a particular one of the volumes 720A, obtaining a set of scores 725 for that volume; the same would be done for each volume 720. The scores 725 for each volume are then normalized. Then, for each volume, the labels 705 corresponding to some set of the top classifiers scores 725 for that volume—e.g., the top score above some minimum value, and/or at least some threshold number of times as high as the average label score—are selected as the volume labels.
For example, the following table depicts example scores for classifiers for some example set of labels {“cat”, “dog”, “running”, “truck”, “penguin”, . . . } applied to some volume, normalized to the range [0, 1].
|
LABEL | “cat” | “dog” | “running” | “truck” | “penguin” | . . . |
|
SCORE | 0.2 | 0.95 | 0.162 | 0.05 | 0.17 | |
|
The score for the label “dog” is the highest score, considerably higher than the scores for any of the other labels, and is above a minimum score threshold, and hence is selected as a label for the volume. Since classifier scores that are far higher than other scores tend to be accurate, even when obtained from relatively inaccurate, noisy classifiers, the label “dog” can be applied to the volume with a high degree of confidence.
Note that all of the above approaches permit labeling ones of the candidate volumes with high accuracy. As a result, although in some embodiments only a small percentage of the volumes in the volumes repository 430 are labeled, those volumes that are labeled serve as strong exemplars of their respective labels. Further, presuming that the video repository 116 contains a large number of videos 117, there are still likely to be significant number of labeled volumes for the majority of the possible labels. Finally, it should be noted that the above approaches can be used together. For example, all three approaches can be used, and for given video, if the labels from two or more of the methods match, that indicates that the label is very likely to be accurate for the volume.
Applications
As a result of the actions of the volume labeling module 415, some of the volumes 430 have high-confidence labels. These high-confidence labels can be used for a number of applications, such as training more accurate volume classifiers, providing more granular user video search, and enabling users to more easily form composite videos containing volumes of interest.
(A) Classifier Training
The high-confidence labels can be used to train highly accurate volume classifiers for assigning labels to new volumes not already analyzed by the modules 405-415. The classifier training in the embodiment described above with respect to FIG. 7 results in weak classifiers 715 with a relatively low degree of accuracy because of the inaccuracy of the training sets used to train the classifiers. However, using the high-confidence labels, a new set of classifiers of greater accuracy can be trained. That is, for every label, a positive training set is formed comprising the feature vectors of volumes having that label among their high-confidence labels, and a negative training set is formed comprising the feature vectors of volumes not having that label among their high-confidence labels. Then, higher-accuracy volume classifiers are trained, e.g., using the same ensemble learning algorithms mentioned above, such as AdaBoost or linear SVM, or another appropriate classifier algorithm. The result is then a set of classifiers corresponding to the high confidence labels.
(B) Enhanced Labeling
Using the higher-accuracy volume classifiers, the set of volumes with high-confidence labels may be further expanded. That is, the higher-accuracy volume classifiers may then be applied to prior volumes, e.g., to the volumes of the volume repository 430 that are not already labeled with a high-confidence label. Specifically, each of the trained high-accuracy classifiers is applied to the feature vector of the weakly labeled volume. The classifier that provides the highest score above some threshold (and optionally, with a minimum distance to the next highest score) provides the label for the volume.
Additionally, the volume identification module 119 may also label volumes of videos not already analyzed by the modules 405-415, such as videos submitted by users after the high-accuracy classifiers were trained. In this situation, the volume identification module 119 applies the volume segmentation module 405 to these new videos to segment the unlabeled volumes from the videos, applies the feature determination module 410 to obtain feature vectors for features of the same type used to train the classifiers, and finally applies the high-accuracy classifiers to the feature vectors to obtain high-confidence labels for the corresponding volumes. Specifically, each of the trained high-accuracy classifiers is applied to the feature vector of the unlabeled volume. The classifier that provides the highest score above some threshold (and optionally, with a minimum distance to the next highest score) provides the label for the volume. This results in a set of volumes with high-confidence labels that is larger than the set initially determined by the volume labeling module 415 alone.
Further, the metadata 117A of videos may be expanded based on the high-confidence labels of the volumes within a video. For example, assume that the existing metadata 117A of a video comprises the labels “cat” and “yarn” (e.g., due to the video title “Adorable cat chasing after a ball of yarn”), and that the volumes within the video have, as high-confidence labels, the labels “dog” and “running” If the labels “dog” and “running” are not already labels of the existing metadata 117A of the video, then the labels are added, e.g., as individual video tags. This increases the amount of useful information that a user can use to locate videos illustrating concepts of interest, such as dogs and/or things that run.
(C) Improved Video Search
With high-confidence labels applied to video volumes—either the smaller set created by the volume labeling module 415, or the larger set created by the classifier training and application described directly above—users can submit more granular queries for particular video volumes matching concepts of interest, and not merely for entire videos. For example, when a user searches for the term “cat”, the video search module 106 can take into consideration, not only the metadata 117A of a video 117 as a whole, but also the high-confidence labels applied to the volumes within the video. The video search module 106 may thus identify videos that more accurately match the concepts in the user query. For example, the percentage of volumes having a label matching a search query can be used as an information retrieval measure to rank a given video, by increasing the ranking for videos with higher proportions of volumes matching the search query.
Further, the video search module 106 may form result sets including not only videos as a whole, but also individual video volumes that match the user query. FIG. 8 illustrates a user interface showing search results that include video volumes, as well as videos as a whole, according to one embodiment. In response to the user query “running cat” entered in query area 805, the user interface displays a set of search results 810. The search results 810 may include both indicia of videos 811 and indicia of individual video volumes 812. The indicia of a video volume in the search result set may include, for example, a visual thumbnail 812 specific to the volume (e.g., the corresponding spatial portion of a particular frame within the temporal portion of the volume), a duration 815 of the volume (e.g., “0:15”, or 15 seconds), a visual indicator of a temporal portion of the video occupied by the volume (e.g., the highlighted portion 821 on the video timeline 820), etc. Selecting the search result for a volume 812 may cause playback of the video to begin at the start of the volume within the video, rather than at the start of the video as a whole. These features enable the user to both search for, and find, exactly the video content that matches the user's search query, without having to view all of the video. Further, the volume may be visually emphasized during playback, e.g., by adding a visual highlight such as a colored box or polygon around the spatial portion of the volume, or by “blacking out” the portion of a frame not occupied by the selected volume.
(D) Finding Similar Volumes
The user interface produced by the front end interface 102 can be augmented to allow a user to quickly search for volumes similar to a volume being currently displayed. For example, assume a user is watching a video that has been processed in the manner described above, so that the particular volumes for that video are known. The user can then select a volume currently displayed in a video playback area (e.g., clicking on it) and then select an option such as “Find more like this.” In response to the selection of the option, the video search module 106 executes a query for other volumes having one of the same high-confidence labels as the selected volume. Thus, for example, a user enthralled by the sight of a penguin sliding over the surface of an iceberg during playback of a video about life in the Antarctic could click on the volume containing the penguin to gain quick access to other scenes of penguins, either in that same video or in other videos, rather than having to input a text search term for “penguin.”
In order to make it easier for user to determine which volumes are selectable, in one embodiment the user interface includes a “Show volumes” option that visually highlights all selectable volumes within the video, e.g., by adding a colored highlight or outline to the volume, or by “blacking out” non-volume portions of the video frames, as noted above. For example, FIG. 9A illustrates a simple example video with a volume 905 corresponding to the image of a sitting dog watching a cat (represented by volume 910) chasing a ball of yarn (represented by volume 915). FIG. 9B illustrates a visual highlight 920 around each of the selectable volumes, and FIG. 9C illustrates the “blacking out” of all portions of the video frames not representing selectable volumes.
(E) Video Synthesis Using Video Volumes
The ability of the volume identification module 119 to determine the precise temporal and spatial portion of a video occupied by a volume and thereby create a repository of labeled volumes also enables users to easily create a composite video from selected ones of the volumes. For example, referring back to FIG. 8, in one embodiment selecting the “Add to new video” link 825 for a particular volume leads to another user interface 1000 for creating and editing a new composite video containing the volume (and, optionally, one or more other volumes), as illustrated in FIG. 10. The example user interface 1000 of FIG. 10 includes a video area 1005 representing the entire size of the video frames of the selected video(s), and a volume region 1010 representing the portion of the entire video frame occupied by the selected volume(s) (e.g., a volume representing a cat, in this example). For example, the user interface can contain a standard video playback area 1005, a video timeline 1015 for playing back the composite video, and one volume timeline indicator 1020 for each of the selected volumes in the composite video.
The volume timeline indicators 1020 are a mechanism to change the temporal portion of the video occupied by the selected volumes. For example, the user can select a volume timeline indicator 1020A representing the portion of the video timeline 1015 occupied by a first selected volume (e.g., the cat volume depicted in the volume region 1010), dragging its outer edges inward or outward to change the duration or playback speed of the volume. For instance, in some embodiments, dragging the right edge of a volume timeline indicator 1020 inward would shorten the corresponding volume during playback by removing a corresponding portion of the end of the volume. In other embodiments, dragging the right edge inward would instead increase the playback speed of the corresponding volume in order to play the entire video in the shortened time period, rather than removing a portion of the volume. For volumes occupying less than the entire temporal portion of the video, users may also move (e.g., by dragging) the corresponding volume timeline indicator 1020 left or right to alter the portion of the video during which the volume is played. For example, assume that the volume timeline indicator 1020A corresponds to a first volume from a first video, and that the first volume depicts a cat sitting during a portion of the volume and running during another portion of the volume, and that the volume timeline 1020B corresponds to a second volume from a second video, the second volume depicting a rolling ball of wool. In this example, the volume timeline indicator 1020B could be dragged to a portion of the video timeline 1015 for which the cat is running in the first volume, thereby creating the appearance of the cat chasing the rolling ball of wool. The positions and lengths of the various volume timeline indicators 1020 can be thought of as temporal ordering information that orders the corresponding volumes within the composite video.
The user interface 1000 further includes a mechanism to change the spatial portion of the video occupied by the selected volume(s). Continuing the prior example, the user can select the volume timeline indicator 1020A, causing the corresponding volume region 1010 to be displayed as illustrated in FIG. 10, and the user can drag the corners of the volume region 1010 inward or outward to stretch or shrink the volume playback region proportionally in some embodiments, or to crop the region and other embodiments. Additional editing tools as would be useful for editing video can be provided as well, for example for scaling, rotating, or image processing the volume region 1010. The spatial positions of the various volume timeline indicators 1020 can be thought of as spatial ordering information that arranges the volumes in a spatial arrangement within the composite video.
In some embodiments, each volume in the composite video is assigned a single size and position 1010 that does not vary while the composite video is played back. In other embodiments, the user interface 1000 includes a mechanism for specifying changes in the size and/or position over time, allowing (for example) the volume to grow, shrink, or move. In the above example, for instance, the cat volume and the ball of wool volume could both be assigned positions that change over time to signify that the ball of wool is rolling and that the cat is chasing it.
In some embodiments, the user interface 1000 further includes a mechanism for altering other visual properties of the video, such as the “Set background . . . ” link 1022, which leads to a user interface to set a background occupying a region 1012 not occupied by the selected volume. The selected background can be a color, pattern, an image, another video, or the like.
In some embodiments, the user interface 1000 includes a mechanism for adding additional volumes to the video, such as a “Add another video . . . ” link 1024. For example, assuming that the cat volume depicted in region 1010 of FIG. 10 were specified via the “Add to new video . . . ” link of FIG. 8, the link 1024 could be used to further specify that the ball of wool volume should be added, as well. The link 1024 could lead to a separate user interface for specifying a query, such as that of FIG. 8. In other embodiments, the user interface of FIG. 8—or one similar thereto—is displayed as part of the user interface 1000 of FIG. 10, with the links 825 causing the corresponding volume to be added to the currently-displayed composite video.
In some embodiments, when the composite video includes multiple volumes, the user interface 1000 allows a user to specify how the different volumes visually interact with each other. For example, in one embodiment the user interface 1000 includes a control to specify a layer of depth for each volume, such as a text field for entering a numerical value that is associated with a currently selected volume, or a drop-down selection list that appears responsive to a right-click or other contextual selection of one of the volumes and offers a choice of layers (e.g., by specifying a layer number). For instance, if the cat volume in the example were associated with layer 2, and the ball of wool volume were associated with layer 1, with lower layer numbers indicating that the corresponding volume should be displayed in front of volumes with higher layer numbers, then the ball of wool would be displayed in front of the cat at times at they occupy the same spatial portion of the video frames.
As another example, in one embodiment three-dimensional shape information about the volumes is extracted, thereby creating three-dimensional models of the different volumes. The three-dimensional models of the different volumes can then be moved to different portions of the composite video (e.g., by dragging visual representations of the volumes to different portions of different frames of the video, thereby indicating how the volume moves over time). The three-dimensional models can further be applied to determine which of volumes (or portions thereof) should be displayed in front of other volumes. Further, the existence of three-dimensional models of the volumes permits the user to specify a camera angle from which the composite video should be rendered, and the camera angle can change over time.
In one embodiment, the user interface 1000 comprises a playback user interface element 1030 that, when selected, causes the composite video to be played back, such that each volume in the composite video is displayed at the corresponding location, size, and times specified for it. For instance, returning to the prior example, playing back the composite video would cause the cat volume to be displayed for the entire duration of the composite video, and the ball of wool volume to be displayed only in a shorter, later portion of the video, as specified by the volume timeline indicators 1020A and 1020B, respectively. As described above, when two or more volumes overlap at a spatial location for a given frame, positional information such as layering order or three-dimensional modeling can be used to determine which volume—or which portion of a volume—should be displayed in front of the other the volume(s).
Once completed, the final composite video can be saved in the video repository 116 and made available to users of the video sharing service 100, as with any other video of the video repository. In one embodiment, the composite video is dynamically assembled from the different volumes that it contains, each time that it is viewed by users; in other embodiments, it is rendered once into a single new video, and that single video is subsequently displayed to users.
The techniques set forth in this disclosure have been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the techniques may be practiced in other embodiments. First, the particular naming of the components and variables, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the embodiment or its features may have different names, formats, or protocols. Also, the particular division of functionality between the various system components described herein is merely for the sake of example, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead performed by a single component.
Some portions of above description present the features of the disclosure in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations, while described functionally or logically, are understood to be implemented by computer programs. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules or by functional names, without loss of generality.
Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as “determine” refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.
Certain aspects of the present disclosure include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present disclosure could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.
The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer. Such a computer program may be stored in a non-transitory computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of computer-readable storage medium suitable for storing electronic instructions, and each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
The algorithms and operations presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent to those of skill in the art, along with equivalent variations. In addition, the present disclosure is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present disclosure as described herein, and any references to specific languages are provided for disclosure of enablement and best mode of the present disclosure.
The present disclosure is well suited to a wide variety of computer network systems over numerous topologies. Within this field, the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network, such as the Internet.
Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present disclosure is intended to be illustrative, but not limiting, of the scope of the disclosure, which is set forth in the following claims.