EP3161662A1 - Optimized browser render process - Google Patents
Optimized browser render processInfo
- Publication number
- EP3161662A1 EP3161662A1 EP14895657.6A EP14895657A EP3161662A1 EP 3161662 A1 EP3161662 A1 EP 3161662A1 EP 14895657 A EP14895657 A EP 14895657A EP 3161662 A1 EP3161662 A1 EP 3161662A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- url
- content neutral
- rendering result
- web page
- rendering
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 title claims abstract description 63
- 230000008569 process Effects 0.000 title abstract description 34
- 238000009877 rendering Methods 0.000 claims abstract description 224
- 230000007935 neutral effect Effects 0.000 claims abstract description 205
- 230000015654 memory Effects 0.000 claims description 35
- 230000004044 response Effects 0.000 claims description 8
- 238000013515 script Methods 0.000 description 25
- 238000003860 storage Methods 0.000 description 19
- 238000004891 communication Methods 0.000 description 12
- 238000012360 testing method Methods 0.000 description 11
- 238000004590 computer program Methods 0.000 description 6
- 230000003287 optical effect Effects 0.000 description 6
- 238000012545 processing Methods 0.000 description 6
- 238000011143 downstream manufacturing Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 3
- 230000002776 aggregation Effects 0.000 description 2
- 238000004220 aggregation Methods 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 239000007787 solid Substances 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 241000234282 Allium Species 0.000 description 1
- 235000002732 Allium cepa var. cepa Nutrition 0.000 description 1
- VYZAMTAEIAYCRO-UHFFFAOYSA-N Chromium Chemical compound [Cr] VYZAMTAEIAYCRO-UHFFFAOYSA-N 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 230000002730 additional effect Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 229920001296 polysiloxane Polymers 0.000 description 1
- 210000001550 testis Anatomy 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
Definitions
- Embedded objects such as script, images, and style sheets
- script objects such as JavaScript code
- running script objects is processing intensive and often results in downloading other embedded object, which can be burdensome to network bandwidth and can slow the loading of the web page.
- mobile computing device such as smart phones and tablets, such additional activities can drain battery power.
- Implementations identify content neutral web pages, in other words web pages where the script objects do not affect the content of the rendered web page in any significant way.
- Patterns for identifying the content neutral web pages may be stored and provided to browsers. When a browser is ready to render a web page it may check to see if the web page fits one of the patterns. If it does, the browser may render the web page with script turned off. This allows the browser to more efficiently render web pages without affecting the content displayed to a user.
- the patterns may include a browser type, such as mobile vs. full, because some web pages may be content neutral for a mobile browser, for example in a smart phone, but not for other types of browsers.
- a system includes at least one processor and memory storing instructions that, when executed by the at least one processor, cause the system to perform operations.
- the operations include generating a first rendering result of a web page, the first rendering result being rendered with scripting turned on, and generating a second rendering result of the web page, the second rendering result being rendered with scripting turned off.
- the operations also include determining whether differences in the first rendering result and the second rendering result are content neutral and, when the differences are content neutral, identifying a URL for the web page as a content neutral URL.
- determining whether any differences in the first rendering result and the second rendering result are content neutral may includes identifying an outlink in the first rendering result missing from the second rendering result and determining, responsive to identifying the outlink, that the differences are not content neutral.
- determining whether any differences in the first rendering result and the second rendering result are content neutral can include identifying a token in the first rendering result that is missing from the second rendering result and determining, responsive to identifying the token, that the differences are not content neutral.
- determining whether any differences in the first rendering result and the second rendering result are content neutral may include identifying a quantity of tokens in the first rendering result that are missing from the second rendering result, determining that the quantity meets a threshold, and determining, responsive to determining the quantity meets the threshold, that the differences are not content neutral. Stop words may be removed prior to determining differences in the tokens.
- determining whether any differences in the first rendering result and the second rendering result are content neutral may include calculating a similarity score between a major component of the first rendering result and a major component of the second rendering result, determining whether the similarity score meets a similarity threshold, and determining that the differences are content neutral when the similarity score meets the similarity threshold.
- the operations may also include, for each of a plurality of web pages in fetch records, generating a first rendering result of the web page, the first rendering result being rendered with scripting turned on, generating a second rendering result of the web page, the second rendering result being rendered with scripting turned off, and comparing the first rendering result with the second rendering result to determine whether the web page is content neutral.
- the operations may include storing a URL for the web page in a list of content neutral URLs and when the web page is not content neutral, storing a URL for the web page in a list of non-content neutral URLs.
- the operations may also include determining at least one pattern using the list of content neutral URLs and storing the pattern in a content neutral URL data store.
- the operations may also include determining whether the pattern applies to a URL in the list of non-content neutral URLs and storing the pattern in the content neutral URL data store when the pattern fails to apply to a URL in the list of non-content neutral URLs. In some implementations, the operations may include determining a percentage of URLs that match the pattern that are non-content neutral URLs and storing the pattern in the content neutral URL data store when the percentage is less than one percent.
- a computer implemented method includes generating, using at least one processor, a first rendering result of a web page, the first rendering result being rendered with scripting turned on and generating a second rendering result of the web page, the second rendering result being rendered with scripting turned off.
- the method may also include comparing the first rendering result with the second rendering result to determine whether the web page is content neutral and storing a Uniform Resource Locator (URL) for the web page in a list of content neutral URLs when the web page is content neutral.
- URL Uniform Resource Locator
- the method may also include, for each of a plurality of web pages in fetch records, generating a first rendering result of the web page with scripting turned on, generating a second rendering result of the web page with scripting turned off, and comparing the first rendering result with the second rendering result to determine whether the web page is content neutral.
- the method may also include storing a URL for the web page in the list of content neutral URLs when the web page is content neutral and storing a URL for the web page in a list of non-content neutral URLs when the web page is not content neutral.
- the method may further include determining at least one pattern from the list of content neutral URLs and storing the pattern in a content neutral URL data store. In some implementations, the method may also include determining a first quantity of URLs in the list of content neutral URLs that match the pattern, determining a second quantity of URLs in the list of non-content neutral URLs that match the pattern, and storing the pattern in the content neutral URL data store when the second quantity is less than one percent of a sum of the first quantity and the second quantity.
- a method includes receiving a request to render a web page identified by a URL and, prior to rendering, determining that the URL is a content neutral URL.
- the method may also include rendering the web page with scripting turned off, regardless of browser settings for scripting, responsive to determining that the URL is a content neutral URL.
- determining that the URL is a content neutral URL includes determining that the URL matches a predetermined pattern in a data store of content neutral URLs.
- determining that the URL is a content neutral URL includes determining that the URL is content neutral for a type of browser handling the request to render the web page.
- determining that the URL is a content neutral URL includes sending a request to a service, the service determining whether the URL is a content neutral URL, and receiving a response from the service indicating the URL is a content neutral URL.
- a non-transitory computer-readable medium may include instructions executable by at least one processor formed in a substrate that cause a computer system to perform one or more of the methods described above.
- One or more of the implementations of the subject matter described herein can be implemented so as to realize one or more of the following advantages.
- rendering a web page with scripting turned off saves CPU and network bandwidth and battery consumption on mobile devices.
- using a browser setting to always turn scripting off causes the viewer to lose content.
- the data store of content neutral patterns allows the browser to selectively turn scripting off when scripting does not affect content. Turning off scripting for content neutral URLs results in faster load times, reduced CPU usage, reduced RAM usage (because the system does not need to start a scripting engine) and reduced power consumption.
- FIG. 1 illustrates an example system in accordance with the disclosed subject matter.
- FIG. 2 is a block diagram of a rendering result for a rendered web page, according to an implementation.
- FIG. 3 is a flowchart illustrating an example process for identifying content neutral URL patterns, according to an implementation.
- FIG. 4 is a flowchart illustrating an example process for determining whether two rendering results are content neutral, according to an implementation.
- FIG. 5 is a flowchart illustrating an example process for providing information for optimized rendering, according to an implementation.
- FIG. 6 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 7 shows an example of a distributed computer device that can be used to implement the described techniques.
- Disclosed implementations identify content neutral web pages, or pages where the script objects are content neutral to the rendered page, and allow the browser rendering engine to render such web pages without running script. This improves rendering time, often by a factor of three, which is important for computing devices with limited resources, such as smart phones and tablets.
- a web page may be a candidate for optimized rendering when a rendering result of the web page rendered with scripting turned on is similar to a rendering result of the web page rendered with scripting turned off. Similarity may be determined by similarity of tokens in the page, similarity of outlinks, similarity of the page layout, etc. In some implementations, any differences in outlinks or tokens may be considered significant differences.
- the rendering result may be considered similar.
- the system may store the web page in a list of content neutral URLs.
- the system may aggregate content neutral URLs to identify a pattern that can be used to identify other content neutral URLs.
- a browser When a browser begins rendering a web page it may ask a service if the script objects for the web page are content neutral, i.e., if the URL is content neutral.
- the service may match the URL of the requested web page to a data store of content neutral URLs, either by exact match or matching a pattern in the data store. If the service finds a match the service may tell the browser the scripts objects are content neutral and the browser may proceed to render the web page with scripting turned off. Otherwise, (e.g., if the URL for the web page does not match a pattern in the data store), the browser will render the page with script turned on, or use the browser setting to determine whether to run script when rendering the web page.
- Such optimized browser rendering makes the browser rendering process much more resource efficient.
- the content neutral URL data store may distinguish between mobile browsers and desktop browsers.
- FIG. 1 is a block diagram of a system in accordance with an example implementation.
- the system 100 may be used to identify content neutral URLs and content neutral URL patterns and use the patterns to optimize a browser rendering process.
- the system 100 may include computing devices that take the form of a number of different devices.
- the system 100 may include computing devices that are examples of computer device 600, as depicted in FIG. 6, and computer device 700, as depicted in FIG. 7.
- the system 100 may include a batch rendering system 110.
- the batch rendering system 110 may be a standard server, a group of such servers, a client- server system, or a rack server system.
- the batch rendering system 110 may be implemented in a personal computer.
- the batch rendering system 110 may include one or more processors configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof, stored in memory.
- the batch rendering system 110 may include rendering engines 120, fetch service 122, web-crawling engine 124, and content- neutral URL identification engine 126.
- the batch rendering system 110 may produce a rendered web page in batch mode, for example as part of an indexing process, and in the process produce fetch records 132, which the batch rendering system 110 may use to generate content neutral URL patterns 130.
- a downstream process may request that the batch rendering system 110 render a web page in batch mode.
- the batch rendering system 110 may include the downstream process (not shown).
- the downstream process may be an indexing engine or an advertising platform.
- the downstream process may request that one of the batch rendering engines 120 generate a rendering result for a particular web page.
- Each batch rendering engine 120 may be configured to emulate a renderer for personal web browser, but with optimizations for batch rendering.
- the web page may include embedded objects, such as such as style sheets, JavaScript, images, etc.
- the batch rendering engines 120 may request the contents for the embedded objects using the fetch service 122.
- the fetch service 122 may determine which embedded objects need to be fetched from the host server 190, which embedded objects can be returned from a cache, and which objects do not need to be returned.
- Host servers 190 may be any type of computing device accessible over the Internet that hosts one or more web pages or resources embedded in one or more web pages. If an embedded object needs to be fetched, the fetch service 122 may request the content for the embedded object via web-crawling engine 124 using conventional techniques. A downstream process, such as an indexing engine, may also request content from servers 190 via web- crawling engine 124. As a result of the fetch requests, the batch rendering system 110 may generate fetch records 132. Fetch records 132 may include information about which web pages were requested and retrieved from host servers 190.
- the web-crawling engine 124, the batch rendering engines 120, and the fetch service 122 work together to efficiently render a large number of web pages, such as web pages that can be found on the World Wide Web.
- the result of the render of a web page is a rendering result, which includes various data elements useful to and otherwise unavailable to the downstream requesting process.
- the content neutral URL identification engine 126 may use the batch rendering engines 120 to generate content neutral URL patterns 130.
- the content neutral URL identification engine 126 may run periodically (e.g., daily, twice a week, etc.), using the fetch records 132 as input.
- the content neutral URL identification engine 126 may ask the batch rendering engines 120 to generate a first rendering result of a URL from the fetch records 132 with scripting turned on and to generate a second rendering result of the URL with the scripting turned off.
- Script objects such as JavaScript
- JavaScript are code included in web pages that are executed at the time the web page is rendered by the browser. Script objects can manipulate the look and content of the rendered web page, initialize execution of other script objects, download additional content from the Internet, etc.
- script objects are intended to be executed by the browser.
- running script objects consumes a high level of processing resources and often results in additional content fetches, which slows the rendering process, ties up bandwidth, and consumes power resources.
- browsers typically include a setting to turn scripting off, which speeds up the rendering process, the resulting content can be affected and the page may not render correctly or may be missing content.
- the content neutral URL identification engine 126 requests a first rendering result of the URL with scripting turned on and a second rendering result of the URL with scripting turned off. For example, the content neutral URL identification engine 126 may request that one of the batch rendering engines 120 provide the rendering results. The content neutral URL identification engine 126 may compare the first rendering result and the second rendering result to determine whether running script objects affect the content of the rendered web page. In some implementations, if the content is affected, the URL may be added to a list of non- content neutral URLs. If the contents are not significantly affected (e.g., are similar), the content neutral URL identification engine 126 may identify the URL as content neutral.
- the URL may be stored in a data store, such as content neutral URL patterns 130.
- the URL may be stored in a temporary list of content neutral URLs and used at a later time to determine patterns for content neutral URLs.
- the content neutral URL identification engine 126 performs this test over many URLs and determines patterns of URLs that are content neutral. For example, the content neutral URL identification engine 126 may aggregate the content neutral status for all URLs belonging to the same host. If all URLs for the host are content neutral, the host may be included as a pattern in the content neutral URL patterns 130. In some
- the content neutral URL identification engine 126 may include the host as a pattern in the content neutral URL patterns 130. In some implementations, aggregation of the lists of content neutral URLs and non-content neutral URLs may produce other patterns may also be used, e.g., for certain paths within the host.
- the content neutral URL identification engine 126 may also verify that patterns in the content neutral URL patterns 130 are still content neutral. For example, the content neutral URL identification engine 126 may select a sample of URLs matching the pattern, ask the rendering engine to generate a rendering result with scripting turned on and with scripting turned off, and compare the two rendering results. If a URL matching a pattern in the content neutral URL patterns 130 is no longer content neutral, the pattern may be removed.
- the content neutral URL identification engine 126 may determine whether a URL or URL pattern is content neutral for mobile browsers separately from traditional personal browsers. For example, some websites have a mobile version of a web page and a full version, and the mobile version may be content neutral while the full version is not. Thus, the content neutral URL identification engine 126 may render four rendering results for a URL. The first two rendering results may be rendered by a rendering engine that emulates a traditional personal browser, while the last two rendering results may be rendered by a rendering engine that emulates a browser on a mobile device, such as a smart phone or tablet.
- the content neutral URL patterns 130 may, thus, include data indicating whether the pattern is content neutral by browser type, e.g., for a mobile browser or for a traditional browser.
- the batch rendering system 110 may be distributed over two or more separate computing devices.
- one or more of the batch rendering engines 120, the fetch service 122, the web-crawling engine 124, and the content neutral URL identification engine 126 may be distributed across one or more computing devices.
- one or more of the batch rendering engines 120, the fetch service 122, the web-crawling engine 124, and the content neutral URL identification engine 126 may share resources, such as memory or hardware processors with other components of the batch rendering system 110.
- fetch records 132 and content neutral URL patterns 130 may also be stored in memory distributed across multiple computing devices.
- the various components of the batch rendering system 110 may share hardware components of a computing device, or may be logical partitions of the same computing device.
- the batch rendering system 110 may be in communication with the client(s) 180 and servers 190 over network 160.
- Network 160 may be for example, the Internet or the network 160 can be a wired or wireless local area network (LAN), wide area network (WAN), a combination of these, etc., implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the batch rendering system 110 may communicate with and transmit data to/from clients 180 and/or host servers 190.
- the batch rendering system 110 may provide content neutral URL patterns 130 to a client 180, or may receive a request from client 180 asking whether a particular URL is content neutral and may provide a response based on the content neutral URL patterns 130.
- the client 180 may be a personal computing device, such as computing device 600 depicted in FIG. 6, with a personal web browser 140 installed.
- personal web browsers include CHROME, SAFARI, INTERNET EXPLORER, FIREFOX, etc., whether for a mobile device such as a smart phone or tablet, or a personal computer, such as a laptop or desktop.
- the browser 140 may be configured to use a service to determine whether a particular URL can be rendered with scripting turned off.
- the service may push a copy of the content neutral URL patterns 130 to the client 180 for use by the browser 140.
- the browser 140 may be configured to ask the service to determine if a particular URL matches one of the patterns in the content neutral URL patterns 130.
- the browser 140 performs optimized rendering by using the service to determine whether a particular URL can be rendered with scripting turned off and performing the rendering with scripting turned off when the particular URL is content neutral.
- the browser 140 may be configured to selectively turn scripting on and off without action by the user, regardless of a script browser setting, and can do so to conserve resources where the content is not affected.
- FIG. 2 is a block diagram of a rendering result 200 rendered by a batch rendering engine 120, according to an implementation.
- the rendering result 200 may include a variety of components, not all of which are illustrated in FIG. 2.
- the rendering result 200 can include an image 205 of the rendered page.
- the image 205 may be the image that would be displayed via a display device to a user via a web browser.
- the image 205 can be used, for example, to display a thumbnail of the rendered page to a user and to determine where on the display elements of the web page occur (e.g., based on their x and y coordinates).
- the rendering result 200 can also include a Document Object Model (DOM) tree 210.
- the DOM tree 210 represents the HTML structure of the web page.
- the DOM tree 210 includes tokens and outlinks for the web page.
- the rendering result 200 may also include layout 215.
- Layout 215 includes a box for each element of the web page, the box specifying the x and y coordinates of the element in the image 205.
- the layout 215 provides an indication of where on the web page an element occurs, how much space it takes on the web page, etc.
- the layout 215 provides information on how much of the web page is ads, how prominent a paragraph is (e.g., above-the- line or below-the-line), whether the element is visible, etc.
- the layout 215 provides geometric information about the elements of the rendered web page.
- the rendering result 200 may also include errors 220.
- Errors 220 include errors encountered as a result of running script objects, e.g., JavaScript.
- the rendering result 200 may also include a list of embedded resources 225 fetched during the rendering, and can include other elements (not shown) generated as part of the rendering process.
- the rendering result 200 provides information not available solely via a fetch of content from the hosting server.
- Downstream requesting processes such as a content neutral URL identification engine, can use the rendering result information for various purposes, such as to determine whether running script objects significantly changes the content of a rendered web page. For example, content in an advertising portion of a web page may not be considered important, so a URL may still be content neutral even with differences in an advertising portion. In some implementations, only differences in major components of the layout may be considered important.
- the major components may be the largest boxes in the layout 215 (e.g., the boxes with the largest height and width).
- FIG. 3 is a flowchart illustrating an example process 300 for identifying content neutral URL patterns, according to an implementation.
- the process 300 may be performed by a system, such as system 110 of FIG. 1.
- the system may use process 300 to generate a rendering result of a web page with scripting turned on, to render a second rendering result of the web page with scripting turned off, and to compare the rendering results to determine if scripting affects the content in any significant or important manner, or in other words if the scripting is content neutral.
- the system may determine patterns for content neutral URLs based on the rendering results of particular URLs.
- the patterns may be stored in a data store and used as part of a service that allows a personal browser (whether full or mobile) to optimize rendering by turning off scripting when a requested URL is content neutral.
- Process 300 may begin with the system obtaining a web page from a fetch record (305).
- the fetch record may be from a file that logs fetch requests for web pages or embedded objects via a web-crawling engine.
- the fetch records may be generated as part of an indexing process, for example an indexing process for documents available via the Internet.
- the web page may be identified in the fetch record by an identifier, such as a URL.
- a web page may also be referred to as a URL, and it is understood that reference to a web page and a URL are generally synonymous as used herein.
- the system may generate a first rendering result of the web page with scripting turned on (310).
- the system may run JavaScript (or other scripting languages) when generating the first rendering result.
- the system may also generate a second rendering result for the web page with scripting turned off (315).
- the system may then compare the first rendering result and the second rendering result to determine if the rendering results are content neutral (320).
- the system may use a variety of tests to determine whether the rendering results are content neutral, as discussed in more detail with regard to FIG. 4. If the rendering results are content neutral (320, Yes), the system may add the URL of the web page to a list of content neutral URLs (330). This list may be a temporary list used to determine patterns for content neutral URLs. If the rendering results are not similar (320, No), the system may add the URL of the web page to a list of non- content neutral URLs (325). The web pages in this list cannot be rendered with scripting turned off without losing content. The list of non-content neutral URLs may also be a list stored in temporary memory and used to determine patterns for content neutral URLs.
- the system may get the next URL from the fetch records (340) and repeat steps 305 to 330 using the next web page.
- the cycle represented by steps 305 to 340 may continue until all URLs in the fetch records have been examined for content neutrality. In some implementations, only fetch records after a certain date or time may be examined.
- the system may determine patterns for content neutral URLs using the list of content neutral URLs and the list of non-content neutral URLs (345).
- the system may strip off any query strings that are part of the URL with the potential pattern being the remainder of the URL. URLs match the potential pattern if the remaining portion without the query string matches.
- the system may strip off everything but the host portion of the URL. URLs match the pattern if the host portion matches, regardless of what comes after.
- the system may use other forms of aggregation, such as clustering, to determine patterns.
- the pattern may reflect a host (e.g.,
- the system may determine the quantity of URLs in the non-content neutral URL list that match a pattern and the quantity of URLs in the content neutral URL list that match the pattern. In some implementations, if a URL in the non-content neutral URL list matches a potential pattern, the potential pattern is considered non-content neutral. In some implementations, a small percentage, e.g., 1% or less, of URLs matching a potential pattern can be non-content neutral and the pattern may still be considered content neutral. If a potential pattern is content neutral, the system may store the pattern in a data store (350). The data store may be used by a service to allow a browser to optimize the rendering of a web page by turning scripting off when the scripting does not affect the content (e.g., the URL is content neutral).
- the data store may be used by a service to allow a browser to optimize the rendering of a web page by turning scripting off when the scripting does not affect the content (e.g., the URL is content neutral).
- the system may repeat some or all of process 300 with rendering results rendered by a different browser type.
- the browser type may be a full browser or a mobile browser. If the first and second rendering result were rendered by a full browser, the system may repeat steps 305 to 335 using a mobile browser.
- the list of content neutral URLs may include an indication of browser type, and the patterns in the data store may also include an indication of browser type. This allows the system to indicate whether the URL is content neutral for one browser type (e.g., a mobile browser) and not for a different browser type (e.g., a full browser).
- FIG. 4 is a flowchart illustrating an example process 400 for determining whether two rendering results are content neutral, according to an implementation.
- Process 400 may be performed, for example, as part of step 320 of FIG. 3. While process 400 illustrates three testes for determining rendering result similarity, it is understood that implementations may include one, two, or all of the tests illustrated, and may include additional similarity tests not illustrated.
- Process 400 may include comparing the tokens in the two rendering results (405).
- the tokens include the text of a document, e.g., the words visible to a user.
- the tokens may be produced by processing the DOM tree, such as DOM tree 210 of FIG. 2. In some implementations, stop words and numbers may be removed before performing the comparison. If the tokens for the first rendering result differ from the tokens for the second rendering result (410, Yes), the system may optionally determine whether the quantity of unique tokens added by rendering with scripting turned on is less than a token threshold (415). In other words, if rendering with scripting turned on only results in a few unique tokens, the system may consider the differences insignificant. In some implementations the token threshold may be 5.
- the system may consider the rendering results not similar (430). When the rendering results are not similar, the URL used to generate the rendering results is not content neutral. In some implementations, the system may skip test 415 and any differences in tokens may be considered significant and the rendering results not similar. If the quantity fails to meet the token threshold (415, Yes), the system may consider the difference in tokens insignificant. Thus, if the unique tokens for the first rendering result are the same as the tokens in the second rendering result (410, No) or the quantity of unique tokens fails to meet the token threshold (415, Yes), the rendering results may be considered similar, and the system may continue to perform other tests. In implementations that include only the token test, the system may proceed directly to step 445, with a determination that the rendering results are similar.
- the system may compare outlinks (420). Outlinks represent links to other web pages or other documents from the rendered page. The outlinks may also be extracted from anchor tag nodes ( ⁇ a> tags) of the DOM tree of the rendering result. If the system finds a difference in outlinks (425, Yes), the system may consider the difference significant and the rendering results are not similar (430). Thus, the web page is not considered content neutral. If the outlinks in the two rendering results are the same (425, No), the system may consider the rendering results similar (e.g., by proceeding to step 450), or may go on to perform other similarity tests. In some implementations, the system may perform steps 420 and 425 before and
- the system may determine major components of the layout (435).
- the layout of a rendering result is made up of boxes - each box being defined by screen coordinates.
- each box corresponds to a respective element of the web page.
- the layout can include box representations of DOM nodes in the DOM tree (although not every DOM elements may have a corresponding render box).
- the boxes can be organized in a tree structure, also known as a render tree.
- a table may be represented by a box in the layout, and a paragraph may be represented by another box in the layout.
- Major components of a web page are those elements in the layout with the largest boxes, as defined by the screen coordinates.
- the system may put a predetermined quantity of the major components in the set, e.g., so that the set includes the largest of the major components.
- the system may include the major components that make up a percentage of the screen in the set. In such an
- the largest major component may be the only member of the set.
- any components with a box size above a threshold may be included in the set of major components.
- the system may use an onion peeling technique to find the major component. For example, starting at the root box of the render tree, the system may perform a breadth-first search and identify the largest child box of the root box. The system may then select the largest child and go deeper, finding the largest child box of the current box (e.g., the largest child box of the root box). The system may stop going deeper when none of the child boxes are dominating, for example occupying over half of the parent box's area. When the system stops going deeper, the major component is the box that failed to have a dominating child.
- the system may calculate a similarity score between the major components in the set (440). For example, the system may use an overlapping score of the major component boxes. In an overlapping score, the system may calculate an overlap area for the major component, which represents an area of the major component in the first rendering result that overlaps with the area of the
- the system may then calculate a similar score which represents the harmonic average of the overlap are with regard to the total area of each major component. For example, the system may
- the system may use other similarity metrics to calculate the score. Examples of such similarity metrics include, but are not limited to, Katz similarity. If the similarity score meets a similarity threshold (445, Yes), the rendering results are considered similar, and therefore the web page is content neutral (450). In some implementations, the similarity threshold may be high, for example 80% or higher. If the similarity score fails to meet the threshold (445, No), the system may consider the rendering results not similar (430).
- the system may perform additional similarity tests based on the rendering results that are not illustrated in FIG. 4. For example, the system may calculate a longest common sequence (LCS) for the DOM tree or the layout, or another component of the rendering result and use the LCS value to determine whether the rendering results are similar. For example, if the similarity of the LCS meets a threshold, the system may consider the rendering results similar. Once the system has determined whether the rendering results are similar (450) or not similar (430), process 400 ends.
- LCS longest common sequence
- FIG. 5 is a flowchart illustrating an example process 500 for providing information for optimized rendering, according to an implementation.
- Process 500 may be run as a service for a browser.
- the browser can be a client browser, either mobile or full, such as browser 140 of FIG 1, or a batch rendering engine, such as batch rendering engines 120 of FIG. 1.
- the service may be a cloud-based service.
- the browser may send a request via a network to a cloud-based service, which may provide a response to the browser.
- the service may be run on a server, such as batch rendering system 110 of FIG. 1.
- the service may be local to the computing device on which the browser runs.
- Process 500 begins with the service receiving a URL from a browser (505).
- the browser may be a mobile browser, a full browser, and may be run on a client or as a batch rendering engine.
- the service may determine whether the URL from the request matches a content neutral URL pattern (510).
- the pattern may represent a full URL, so that a match is made on the entire requested URL.
- the pattern may represent a partial URL, for example with a query string removed or with various portions replaced by wild-cards. If the requested URL does match at least one pattern in the content neutral data store (510, Yes), the service provides a response that indicates the URL is content neutral and can be rendered with scripting turned off (515). In response to this indication, the browser may render the URL with scripting off, saving processing and bandwidth resources. The browser may do this regardless of whether a browser setting to run script is turned on.
- the service provides a response that indicates that the URL is non-content neutral and content will be lost if rendered with scripting turned off.
- the browser may render the URL in accordance with the browser setting to run script, which is usually set to render with scripting turned on. Process 500 then ends, having provided information that the browser can use to optimize the rendering process.
- FIG. 6 shows an example of a generic computer device 600, which may be operated as batch rendering system 110, and/or client 180 of FIG. 1, which may be used with the techniques described here.
- Computing device 600 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 600 includes a processor 602, e.g., a silicone-based hardware processor, memory 604, a storage device 606, and expansion ports 610 connected via an interface 608.
- computing device 600 may include transceiver 646, communication interface 644, and a GPS (Global Positioning System) receiver module 648, among other components, connected via interface 608.
- Device 600 may communicate wirelessly through communication interface 644, which may include digital signal processing circuitry where necessary.
- Each of the components 602, 604, 606, 608, 610, 640, 644, 646, and 648 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 602 can process instructions for execution within the computing device 600, including instructions stored in the memory 604 or on the storage device 606 to display graphical information for a GUI on an external input/output device, such as display 616.
- Display 616 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 604 stores information within the computing device 600.
- the memory 604 is a volatile memory unit or units.
- the memory 604 is a non-volatile memory unit or units.
- the memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 604 may include expansion memory provided through an expansion interface.
- the storage device 606 is capable of providing mass storage for the computing device 600.
- the storage device 606 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also include instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 604, the storage device 606, or memory on processor 602.
- the interface 608 may be a high speed controller that manages bandwidth-intensive operations for the computing device 600 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 640 may be provided so as to enable near area communication of device 600 with other devices.
- controller 608 may be coupled to storage device 606 and expansion port 614.
- the expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 630, or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a persona computing device, such as laptop computer 632, desktop computer 634, or tablet or smart phone 636. An entire system may be made up of multiple computing devices 600 communicating with each other. Other configurations are possible.
- FIG. 7 shows an example of a generic computer device 700, which may be system 110 of FIG. 1, which may be used with the techniques described here.
- Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, data centers, mainframes, and other large-scale computing devices.
- Computing device 700 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing device 700 may include any number of computing devices 780.
- Computing devices 780 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 780a includes multiple racks 758a - 758n.
- Each rack may include one or more processors, such as processors 752a-752n and 762a-762n.
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 758, and one or more racks may be connected through switch 778. Switch 778 may handle communications between multiple connected computing devices 700.
- Each rack may include memory, such as memory 754 and memory 764, and storage, such as 756 and 766.
- Storage 756 and 766 may provide mass storage and may include volatile or non- volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 756 or 766 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 754 and 764 may include, e.g., volatile memory unit or units, a non- volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 754 may also be shared between processors 752a-752n. Data structures, such as an index, may be stored, for example, across storage 756 and memory 754.
- Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 110 may be made up of multiple computing devices 700 communicating with each other.
- device 780a may communicate with devices 780b, 780c, and 780d, and these may collectively be known as system 100.
- system 100 of FIG. 1 may include one or more computing devices 700. Some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of computing device 700 is an example only and the system may take on other layouts or configurations.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor formed in a substrate, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs also known as programs, software, software applications or code
- machine- readable medium refers to any non-transitory computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory (including Read Access Memory), Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor.
- machine- readable medium e.g., magnetic discs, optical disks, memory (including Read Access Memory), Programmable Logic Devices (PLDs)
- PLDs Programmable Logic Devices
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
Claims
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/CN2014/080820 WO2015196410A1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser render process |
Publications (3)
Publication Number | Publication Date |
---|---|
EP3161662A1 true EP3161662A1 (en) | 2017-05-03 |
EP3161662A4 EP3161662A4 (en) | 2018-02-28 |
EP3161662B1 EP3161662B1 (en) | 2024-01-31 |
Family
ID=54930789
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP14895657.6A Active EP3161662B1 (en) | 2014-06-26 | 2014-06-26 | Optimized browser render process |
Country Status (6)
Country | Link |
---|---|
US (2) | US9785720B2 (en) |
EP (1) | EP3161662B1 (en) |
JP (1) | JP6386089B2 (en) |
CN (1) | CN106462561B (en) |
RU (1) | RU2665920C2 (en) |
WO (1) | WO2015196410A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150227878A1 (en) * | 2014-02-07 | 2015-08-13 | Acxiom Corporation | Interactive Marketing Simulation System and Method |
JP6386089B2 (en) | 2014-06-26 | 2018-09-05 | グーグル エルエルシー | Optimized browser rendering process |
KR101768181B1 (en) | 2014-06-26 | 2017-08-16 | 구글 인코포레이티드 | Optimized browser rendering process |
EP3161668B1 (en) | 2014-06-26 | 2020-08-05 | Google LLC | Batch-optimized render and fetch architecture |
US10956498B2 (en) * | 2017-09-29 | 2021-03-23 | Google Llc | Scanning for bindings in webpage markup |
US20190236121A1 (en) * | 2018-01-29 | 2019-08-01 | Salesforce.Com, Inc. | Virtualized detail panel |
KR102239281B1 (en) * | 2019-04-16 | 2021-04-12 | 구글 엘엘씨 | Aggregated Conversion Measurement |
CN111177606B (en) * | 2019-12-23 | 2023-12-15 | 望海康信(北京)科技股份公司 | Method and device for controlling browser to render webpage |
Family Cites Families (119)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5828879A (en) | 1994-12-22 | 1998-10-27 | Fore Systems, Inc. | Method and a scheduler for controlling when a server provides service to an entity |
JP4025379B2 (en) | 1996-09-17 | 2007-12-19 | 株式会社ニューズウオッチ | Search system |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US6393526B1 (en) | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
JP2987355B2 (en) | 1998-01-21 | 1999-12-06 | 三菱電機株式会社 | Hypertext display system and hypertext display method |
US6173316B1 (en) | 1998-04-08 | 2001-01-09 | Geoworks Corporation | Wireless communication device with markup language based man-machine interface |
US6271840B1 (en) | 1998-09-24 | 2001-08-07 | James Lee Finseth | Graphical search engine visual index |
US6631369B1 (en) | 1999-06-30 | 2003-10-07 | Microsoft Corporation | Method and system for incremental web crawling |
US6665838B1 (en) | 1999-07-30 | 2003-12-16 | International Business Machines Corporation | Web page thumbnails and user configured complementary information provided from a server |
US6321265B1 (en) | 1999-11-02 | 2001-11-20 | Altavista Company | System and method for enforcing politeness while scheduling downloads in a web crawler |
US6643641B1 (en) | 2000-04-27 | 2003-11-04 | Russell Snyder | Web search engine with graphic snapshots |
US7200677B1 (en) | 2000-04-27 | 2007-04-03 | Microsoft Corporation | Web address converter for dynamic web pages |
US8640017B1 (en) | 2000-05-02 | 2014-01-28 | International Business Machines Corporation | Bootstrapping in information access systems |
US6704728B1 (en) | 2000-05-02 | 2004-03-09 | Iphase.Com, Inc. | Accessing information from a collection of data |
US6714905B1 (en) | 2000-05-02 | 2004-03-30 | Iphrase.Com, Inc. | Parsing ambiguous grammar |
JP3703080B2 (en) | 2000-07-27 | 2005-10-05 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Method, system and medium for simplifying web content |
US7231606B2 (en) | 2000-10-31 | 2007-06-12 | Software Research, Inc. | Method and system for testing websites |
US6865192B1 (en) | 2000-12-22 | 2005-03-08 | Sprint Communications Company L.P. | Integrated services hub self configuration |
JP2002297619A (en) | 2001-03-29 | 2002-10-11 | Brother Ind Ltd | Advertisement information providing system, and device, method, and program for browsing advertisement information |
WO2003012576A2 (en) | 2001-07-27 | 2003-02-13 | Quigo Technologies Inc. | System and method for automated tracking and analysis of document usage |
US6763362B2 (en) | 2001-11-30 | 2004-07-13 | Micron Technology, Inc. | Method and system for updating a search engine |
US7200680B2 (en) * | 2002-03-11 | 2007-04-03 | Ericsson Inc. | Method, apparatus and system for providing multimedia messages to incompatible terminals |
US7136875B2 (en) | 2002-09-24 | 2006-11-14 | Google, Inc. | Serving advertisements based on content |
US7231442B2 (en) | 2002-04-03 | 2007-06-12 | Tonic Software, Inc. | Global network monitoring system |
US7441010B2 (en) | 2002-06-06 | 2008-10-21 | International Business Machines Corporation | Method and system for determining the availability of in-line resources within requested web pages |
US7054917B1 (en) | 2002-08-07 | 2006-05-30 | Propel Software Corporation | Method for accelerating delivery of content in a computer network |
US7188359B2 (en) | 2002-12-18 | 2007-03-06 | America Online, Inc. | Optimizing authentication service availability and responsiveness via client-side routing |
US20050132197A1 (en) * | 2003-05-15 | 2005-06-16 | Art Medlar | Method and apparatus for a character-based comparison of documents |
GB0315154D0 (en) | 2003-06-28 | 2003-08-06 | Ibm | Improvements to hypertext integrity |
US7725452B1 (en) | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US7895523B2 (en) | 2003-09-04 | 2011-02-22 | International Business Machines Corporation | Method, system and program product for obscuring supplemental web content |
US7457823B2 (en) | 2004-05-02 | 2008-11-25 | Markmonitor Inc. | Methods and systems for analyzing data related to possible online fraud |
US8353028B2 (en) | 2004-06-21 | 2013-01-08 | Ebay Inc. | Render engine, and method of using the same, to verify data for access and/or publication via a computer system |
US7644107B2 (en) | 2004-09-30 | 2010-01-05 | Microsoft Corporation | System and method for batched indexing of network documents |
EP1821215B1 (en) * | 2004-10-22 | 2011-11-30 | Access Co., Ltd. | Parameter setting and storage method |
WO2006046323A1 (en) | 2004-10-28 | 2006-05-04 | Fujitsu Limited | Internet information collection device, program, and method |
US8812551B2 (en) | 2004-11-18 | 2014-08-19 | International Business Machines Corporation | Client-side manipulation of tables |
US20060129463A1 (en) | 2004-12-15 | 2006-06-15 | Zicherman Amir S | Method and system for automatic product searching, and use thereof |
US7536389B1 (en) | 2005-02-22 | 2009-05-19 | Yahoo ! Inc. | Techniques for crawling dynamic web content |
US20070005652A1 (en) * | 2005-07-02 | 2007-01-04 | Electronics And Telecommunications Research Institute | Apparatus and method for gathering of objectional web sites |
US8527504B1 (en) | 2005-09-01 | 2013-09-03 | At&T Intellectual Property Ii, L.P. | Data network content filtering using categorized filtering parameters |
US7814410B2 (en) * | 2005-09-12 | 2010-10-12 | Workman Nydegger | Initial server-side content rendering for client-script web pages |
US7548915B2 (en) | 2005-09-14 | 2009-06-16 | Jorey Ramer | Contextual mobile content placement on a mobile communication facility |
US8271611B2 (en) * | 2005-09-28 | 2012-09-18 | Telefonaktiebolaget L M Ericsson (Publ) | Method and system of invoking MIDlets from a web browser on a local device |
CN101346634B (en) | 2005-11-04 | 2012-10-24 | 甲骨文国际公司 | System and method for a gatekeeper in a communications network |
CN101075236A (en) | 2006-06-12 | 2007-11-21 | 腾讯科技（深圳）有限公司 | Apparatus and method for accelerating browser webpage display |
US20080010642A1 (en) | 2006-06-30 | 2008-01-10 | Maclellan Scot | Method, system and computer program for scheduling execution of work units with monitoring of progress thereof |
US8015162B2 (en) * | 2006-08-04 | 2011-09-06 | Google Inc. | Detecting duplicate and near-duplicate files |
CN101201827B (en) | 2006-12-14 | 2013-02-20 | 阿里巴巴集团控股有限公司 | Method and system for displaying web page |
US7886042B2 (en) | 2006-12-19 | 2011-02-08 | Yahoo! Inc. | Dynamically constrained, forward scheduling over uncertain workloads |
US7694054B2 (en) | 2007-04-26 | 2010-04-06 | Microsoft Corporation | Governing access to a computing resource |
US9430577B2 (en) * | 2007-05-31 | 2016-08-30 | Microsoft Technology Licensing, Llc | Search ranger system and double-funnel model for search spam analyses and browser protection |
US8578261B1 (en) | 2007-06-22 | 2013-11-05 | Adobe Systems Incorporated | Active preview of hyperlink content in browser supported file-format |
US9906549B2 (en) * | 2007-09-06 | 2018-02-27 | Microsoft Technology Licensing, Llc | Proxy engine for custom handling of web content |
US8751626B2 (en) | 2007-10-23 | 2014-06-10 | Microsoft Corporation | Model-based composite application platform |
US20090164502A1 (en) | 2007-12-24 | 2009-06-25 | Anirban Dasgupta | Systems and methods of universal resource locator normalization |
NZ566291A (en) | 2008-02-27 | 2008-12-24 | Actionthis Ltd | Methods and devices for post processing rendered web pages and handling requests of post processed web pages |
US8131753B2 (en) | 2008-05-18 | 2012-03-06 | Rybak Ilya | Apparatus and method for accessing and indexing dynamic web pages |
US8307431B2 (en) | 2008-05-30 | 2012-11-06 | At&T Intellectual Property I, L.P. | Method and apparatus for identifying phishing websites in network traffic using generated regular expressions |
US8316124B1 (en) | 2008-09-29 | 2012-11-20 | Amazon Technologies, Inc. | Managing network data display |
CN101763357B (en) | 2008-11-13 | 2016-09-14 | 北京搜狗科技发展有限公司 | A kind of method and system for browser to load internet resources |
CN101504648A (en) | 2008-11-14 | 2009-08-12 | 北京搜狗科技发展有限公司 | Method and apparatus for showing web page resources |
US20100131488A1 (en) | 2008-11-26 | 2010-05-27 | Yahoo! Inc. | Digital Images of Web Pages |
US8516080B2 (en) | 2008-12-03 | 2013-08-20 | Mobophiles, Inc. | System and method for providing virtual web access |
US8356247B2 (en) | 2008-12-16 | 2013-01-15 | Rich Media Worldwide, Llc | Content rendering control system and method |
US8543580B2 (en) | 2008-12-23 | 2013-09-24 | Microsoft Corporation | Mining translations of web queries from web click-through data |
US8880498B2 (en) | 2008-12-31 | 2014-11-04 | Fornova Ltd. | System and method for aggregating and ranking data from a plurality of web sites |
US8539359B2 (en) | 2009-02-11 | 2013-09-17 | Jeffrey A. Rapaport | Social network driven indexing system for instantly clustering people with concurrent focus on same topic into on-topic chat rooms and/or for generating on-topic search results tailored to user preferences regarding topic |
US9311425B2 (en) | 2009-03-31 | 2016-04-12 | Qualcomm Incorporated | Rendering a page using a previously stored DOM associated with a different page |
CN101587495A (en) | 2009-07-08 | 2009-11-25 | 伍帝州 | Method and system for downloading and disposing application through browser and providing application entrance |
US8868637B2 (en) | 2009-09-02 | 2014-10-21 | Facebook, Inc. | Page rendering for dynamic web pages |
US20110055683A1 (en) | 2009-09-02 | 2011-03-03 | Facebook Inc. | Page caching for rendering dynamic web pages |
JP2011065488A (en) * | 2009-09-17 | 2011-03-31 | Sony Corp | Information processing apparatus, data acquisition method and program |
US8392748B2 (en) | 2009-10-06 | 2013-03-05 | Microsoft Corporation | Reliable media streaming |
US20110112995A1 (en) * | 2009-10-28 | 2011-05-12 | Industrial Technology Research Institute | Systems and methods for organizing collective social intelligence information using an organic object data model |
US8689117B1 (en) * | 2009-10-30 | 2014-04-01 | Google Inc. | Webpages with conditional content |
JP2011108102A (en) | 2009-11-19 | 2011-06-02 | Sony Corp | Web server, web browser and web system |
US8738686B2 (en) | 2009-12-30 | 2014-05-27 | Teradata Us, Inc. | Dynamic resource management |
US8768926B2 (en) | 2010-01-05 | 2014-07-01 | Yahoo! Inc. | Techniques for categorizing web pages |
US8250478B2 (en) | 2010-01-28 | 2012-08-21 | Microsoft Corporation | State persistence and background initialization for post-back web applications |
KR101122700B1 (en) | 2010-03-08 | 2012-03-12 | (주)이앤비소프트 | URL information transmitting method |
JP2011221616A (en) | 2010-04-05 | 2011-11-04 | Nec Corp | Url filtering system, system control method, and system control program |
US8346755B1 (en) | 2010-05-04 | 2013-01-01 | Google Inc. | Iterative off-line rendering process |
US8446411B2 (en) | 2010-06-11 | 2013-05-21 | Microsoft Corporation | Adaptive image rendering and use of imposter |
US8676978B2 (en) | 2010-08-03 | 2014-03-18 | Facebook, Inc. | Efficient storage and retrieval of resources for rendering structured documents |
JP5279793B2 (en) | 2010-10-25 | 2013-09-04 | 京セラ株式会社 | Mobile terminal, mobile terminal control method and program |
JP5512495B2 (en) | 2010-11-18 | 2014-06-04 | 株式会社Ｎｔｔドコモ | Data download device and data download method |
US8849991B2 (en) | 2010-12-15 | 2014-09-30 | Blue Coat Systems, Inc. | System and method for hypertext transfer protocol layered reconstruction |
WO2012101585A1 (en) | 2011-01-28 | 2012-08-02 | Strangeloop Networks, Inc. | Prioritized image rendering based on position within a web page |
US10204327B2 (en) | 2011-02-05 | 2019-02-12 | Visa International Service Association | Merchant-consumer bridging platform apparatuses, methods and systems |
US8707162B1 (en) * | 2011-03-22 | 2014-04-22 | Google Inc. | Methods and systems for reducing web page transmission bandwidth |
US8799262B2 (en) | 2011-04-11 | 2014-08-05 | Vistaprint Schweiz Gmbh | Configurable web crawler |
US8655865B1 (en) | 2011-05-27 | 2014-02-18 | Adobe Systems Incorporated | Method and apparatus for indexing rich internet content using contextual information |
US8538949B2 (en) * | 2011-06-17 | 2013-09-17 | Microsoft Corporation | Interactive web crawler |
US20130007586A1 (en) | 2011-06-29 | 2013-01-03 | Renjit Tom Thomas | Method and system for creating and using web feed display templates |
US20130117252A1 (en) | 2011-11-09 | 2013-05-09 | Google Inc. | Large-scale real-time fetch service |
WO2013103912A1 (en) | 2012-01-05 | 2013-07-11 | Visa International Service Association | Transaction visual capturing apparatuses, methods and systems |
US8793235B2 (en) | 2012-01-19 | 2014-07-29 | Google Inc. | System and method for improving access to search results |
CN102663002B (en) * | 2012-03-16 | 2014-05-07 | 掌中帷幄（北京）科技有限公司 | Method and system for structured-document rendering |
US20150172228A1 (en) | 2012-04-17 | 2015-06-18 | George Zalepa | Method and system for communicating information over a network |
JP5809099B2 (en) | 2012-04-20 | 2015-11-10 | 日本電信電話株式会社 | Web browsing screen thumbnail generation system |
US8910132B2 (en) | 2012-07-13 | 2014-12-09 | Facebook, Inc. | Client-side script bundle management system |
US20140053056A1 (en) * | 2012-08-16 | 2014-02-20 | Qualcomm Incorporated | Pre-processing of scripts in web browsers |
CN102855318B (en) * | 2012-08-31 | 2015-05-27 | 北京搜狗信息服务有限公司 | Method and system for preloading of webpages |
US8965880B2 (en) | 2012-10-05 | 2015-02-24 | Google Inc. | Transcoding and serving resources |
CN102902805B (en) | 2012-10-15 | 2017-06-27 | 东软集团股份有限公司 | A kind of page access method and apparatus |
CN102917067B (en) | 2012-10-24 | 2015-06-10 | 网宿科技股份有限公司 | Method and device for increasing response speed based on self-adaption concurrency control of client |
EP2728481A1 (en) | 2012-11-04 | 2014-05-07 | Rightware Oy | Evaluation of page load performance of web browser |
CN103034503B (en) * | 2012-12-25 | 2016-07-06 | 北京奇虎科技有限公司 | A kind of script execution, system and browser |
US20140189534A1 (en) | 2012-12-31 | 2014-07-03 | Google Inc. | Customizing shared web resource snapshots |
US9286408B2 (en) | 2013-01-30 | 2016-03-15 | Hewlett-Packard Development Company, L.P. | Analyzing uniform resource locators |
US9256795B1 (en) | 2013-03-15 | 2016-02-09 | A9.Com, Inc. | Text entity recognition |
US8601565B1 (en) * | 2013-06-19 | 2013-12-03 | Edgecast Networks, Inc. | White-list firewall based on the document object model |
EP3063674B1 (en) | 2013-11-01 | 2019-06-19 | Kapow Technologies A/S | Determining web page processing state |
US8924850B1 (en) | 2013-11-21 | 2014-12-30 | Google Inc. | Speeding up document loading |
US9646254B2 (en) | 2014-06-20 | 2017-05-09 | Amazon Technologies, Inc. | Predicting next web pages |
EP3161668B1 (en) | 2014-06-26 | 2020-08-05 | Google LLC | Batch-optimized render and fetch architecture |
KR101768181B1 (en) | 2014-06-26 | 2017-08-16 | 구글 인코포레이티드 | Optimized browser rendering process |
JP6386089B2 (en) | 2014-06-26 | 2018-09-05 | グーグル エルエルシー | Optimized browser rendering process |
-
2014
- 2014-06-26 JP JP2016567202A patent/JP6386089B2/en active Active
- 2014-06-26 WO PCT/CN2014/080820 patent/WO2015196410A1/en active Application Filing
- 2014-06-26 EP EP14895657.6A patent/EP3161662B1/en active Active
- 2014-06-26 CN CN201480078443.0A patent/CN106462561B/en active Active
- 2014-06-26 RU RU2016148864A patent/RU2665920C2/en active
- 2014-10-22 US US14/521,223 patent/US9785720B2/en active Active
-
2017
- 2017-10-03 US US15/723,734 patent/US10713330B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
CN106462561A (en) | 2017-02-22 |
RU2016148864A (en) | 2018-07-31 |
WO2015196410A1 (en) | 2015-12-30 |
RU2665920C2 (en) | 2018-09-04 |
CN106462561B (en) | 2020-06-09 |
JP2017519280A (en) | 2017-07-13 |
EP3161662B1 (en) | 2024-01-31 |
US10713330B2 (en) | 2020-07-14 |
JP6386089B2 (en) | 2018-09-05 |
RU2016148864A3 (en) | 2018-07-31 |
US20180025091A1 (en) | 2018-01-25 |
US9785720B2 (en) | 2017-10-10 |
US20150379155A1 (en) | 2015-12-31 |
EP3161662A4 (en) | 2018-02-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10713330B2 (en) | Optimized browser render process | |
US10284623B2 (en) | Optimized browser rendering service | |
US11328114B2 (en) | Batch-optimized render and fetch architecture | |
CN107273392B (en) | Computer-implemented method, apparatus, and data processing system for searching images | |
TW201220197A (en) | for improving the safety and reliability of data storage in a virtual machine based on cloud calculation and distributed storage environment | |
CN110851757A (en) | Page resource loading method and terminal | |
CN104268229A (en) | Resource obtaining method and device based on multi-process browser | |
CN105745644A (en) | Establishment of state representation of a web page represented in a web browser | |
JP6568985B2 (en) | Batch optimized rendering and fetch architecture | |
US20140337296A1 (en) | Techniques to recover files in a storage network | |
Taneja et al. | AirBits: a web application development using microsoft azure | |
JP6505849B2 (en) | Generation of element identifier | |
JP6397101B2 (en) | Optimized browser rendering process | |
CN116257707A (en) | Application release method and device, electronic equipment and storage medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20161214 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
A4 | Supplementary search report drawn up and despatched |
Effective date: 20180125 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/30 20060101AFI20180119BHEP |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20200114 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602014089426Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: G06F0017210000Ipc: G06F0016957000Ref country code: DEFree format text: PREVIOUS MAIN CLASS: G06F0017210000Ipc: G06F0016957000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 40/14 20200101ALI20230814BHEPIpc: G06F 16/957 20190101AFI20230814BHEP |
|
INTG | Intention to grant announced |
Effective date: 20230901 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4DRef country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602014089426Country of ref document: DE |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20240116 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |