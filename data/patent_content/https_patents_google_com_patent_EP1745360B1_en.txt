EP1745360B1 - Methods and systems for information capture and retrieval - Google Patents
Methods and systems for information capture and retrieval Download PDFInfo
- Publication number
- EP1745360B1 EP1745360B1 EP05731427A EP05731427A EP1745360B1 EP 1745360 B1 EP1745360 B1 EP 1745360B1 EP 05731427 A EP05731427 A EP 05731427A EP 05731427 A EP05731427 A EP 05731427A EP 1745360 B1 EP1745360 B1 EP 1745360B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- event
- article
- events
- indexable
- search
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Not-in-force
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9532—Query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
Definitions
- the invention generally relates to search engines. More particularly, the invention relates to methods and systems for information capture and retrieval.
- ⁇ олователи generate and access a large number of articles, such as emails, web pages, word processing documents, spreadsheet documents, instant messenger messages, and presentation documents, using a client device, such as a personal computer, personal digital assistant, or mobile phone.
- Some articles are stored on one or more storage devices coupled to, accessible by, or otherwise associated with the client device(s). Users sometimes wish to search the storage device(s) for articles.
- client-device search applications may significantly degrade the performance of the client device.
- certain conventional client-device search applications typically use batch processing to index all articles, which can result in noticeably slower performance of the client device during the batch processing.
- batch processing occurs only periodically. Therefore, when a user performs a search, the most recent articles are sometimes not included in the results.
- the index of articles associated with the client device can become outdated.
- Conventional client-device search applications may also need to rebuild the index at each batch processing or build new partial indexes and perform a merge operation that can use significant client-device resources.
- Conventional client-device search applications also sometimes use a great deal of system resources when operational, resulting in slower performance of the client device.
- conventional client-device search applications can require an explicit search query from a user to generate results, and may be limited to examining file names or the contents of a particular application's files.
- the document US 6 532 023 B 1 (SCHUMACHER DANIEL M [US] ET AL published on 11 March 2003 ) discloses a system for recording events resulting from user interactions with applets, and subsequently playing back the recorded events. The system generates event objects for detected events and further generates component index values for the interaction events. The system indexes all the recorded interaction events .
- the document US 6 662 226 B1 (WANG JINSHENG [US] ET AL published on 9 December 2003 ) discloses a system for recording events resulting from user interactions with applets, and subsequently playing back the recorded events.
- the document US 2002/103664 A1 discloses an event tracking server for tracking user interaction with a website.
- the event tracking system determines the event tracking information and retrieves a set of instructions corresponding to the determined information.
- the document " Spector CNE” discloses user software (Spector) that records user activities. Essentially, the Spector software monitors the activities on a specific computer by recording events that occurred on that computer whenever a user logs on to it. None of these documents involve the step of determining whether the event is an indexable event or a non-indexable event and they do not disclose automatically generating an implicit query or producing or displaying a search result.
- Embodiments of the present invention comprise methods and systems for information capture and retrieval.
- a search engine implements a method comprising capturing an event in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, determining if the event should be indexed, and if the event should be indexed, indexing the event and storing the event and at least a portion of content associated with the article.
- a search engine implements a method comprising capturing a plurality of events occurring on a client device, wherein the events are associated with at least one of a plurality of client applications, wherein at least some of the events are captured in real time upon the occurrence of the event, indexing and storing at least some of the events, wherein the events that are indexed and stored have an associated article, receiving a search query, and locating relevant articles from events relevant to the search query.
- Figure 1 is a diagram illustrating an exemplary environment in which one embodiment of the present invention may operate
- Figure 2 is a flow diagram illustrating an exemplary method of capturing and processing event data associated with a client device in one embodiment of the present invention.
- Figure 3 is a flow diagram illustrating an exemplary method of retrieving articles associated with events in one embodiment of the present invention.
- Figure 1 is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown reflects a client-side search engine architecture embodiment, other embodiments are possible.
- the system 100 shown in Figure 1 includes multiple client devices 102a-n that can communicate with a server device 150 over a network 106.
- the network 106 shown comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead.
- methods according to the present invention may operate within a single client device that does not communicate with a server device or a network.
- the client devices 102a-n shown in Figure 1 each include a computer-readable medium 108.
- the embodiment shown in Figure 1 includes a random access memory (RAM) 108 coupled to a processor 110.
- the processor 110 executes computer-executable program instructions stored in memory 108.
- Such processors may include a microprocessor, an ASIC, state machines, or other processor, and can be any of a number of suitable computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois.
- processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein.
- Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as the processor 110 of client 102a, with computer-readable instructions.
- suitable media include, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, all magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions.
- various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless.
- the instructions may comprise code from any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript.
- Client devices 102a-n can be coupled to a network 106, or alternatively, can be stand alone machines. Client devices 102a-n may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display device, or other input or output devices. Examples of client devices 102a-n are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, the client devices 102a-n may be any type of processor-based platform that operates on any suitable operating system, such as Microsoft® Windows® or Linux, capable of supporting one or more client application programs.
- any suitable operating system such as Microsoft® Windows® or Linux
- the client device 102a can comprise a personal computer executing client application programs, also known as client applications 120.
- the client applications 120 can be contained in memory 108 and can include, for example, a word processing application, a spreadsheet application, an email application, an instant messenger application, a presentation application, an Internet browser application, a calendar/organizer application, a video playing application, an audio playing application, an image display application, a file management program, an operating system shell, and other applications capable of being executed by a client device.
- Client applications may also include client-side applications that interact with or access other applications (such as, for example, a web-browser executing on the client device 102a that interacts with a remote email server to access email).
- the user 112a can interact with the various client applications 120 and articles associated with the client applications 120 via various input and output devices of the client device 102a.
- Articles include, for example, word processor documents, spreadsheet documents, presentation documents, emails, instant messenger messages, database entries, calendar entries, appointment entries, task manager entries, source code files, and other client application program content files, messages, items, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and media files, such as image files, audio files, and video files, or any other documents or items or groups of documents or items or information of any suitable type whatsoever.
- PDF Portable Document Format
- event data that may be observed, recorded, analyzed or otherwise used.
- An event can be any occurrence possible associated with an article, client application 120, or client device 102a, such as inputting text in an article, displaying an article on a display device, sending an article, receiving an article; manipulating an input device, opening an article, saving an article, printing an article, closing an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, bringing a client application program to the foreground, changing visual display details of the application (such as resizing or minimizing) and any other suitable occurrence associated with an article, a client application program, or the client device whatsoever.
- event data can be generated when the client device 102a interacts with an article independent of the user 112a, such as when receiving an email or performing a scheduled task.
- the memory 108 of the client device 102a can also contains a capture processor 124, a queue 126, and a search engine 122.
- the client device 102a can also contains or is in communication with a data store 140.
- the capture processor 124 can capture events and pass them to the queue 126.
- the queue 126 can pass the captured events to the search engine 122 or the search engine 122 can retrieve new events from the queue 126.
- the queue 126 notifies the search engine 122 when a new event arrives in the queue 126 and the search engine 122 retrieves the event (or events) from the queue 126 when the search engine 122 is ready to process the event (or events).
- the search engine receives an event it can be processed and can be stored in the data store 140.
- the search engine 122 can receive an explicit query from the user 112a or generate an implicit query and it can retrieve information from the data store 140 in response to the query.
- the queue is located in the search engine 122.
- the client device 102a does not have a queue and the events are passed from the capture processor 124 directly to the search engine 122.
- the event data is transferred using an information exchange protocol.
- the information exchange protocol can comprise, for example, any suitable rule or convention facilitating data exchange, and can include, for example, any one of the following communication mechanisms: Extensible Markup Language - Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- XML/RPC Extensible Markup Language - Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- shared memory sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- the capture processor 124 can capture an event by identifying and compiling event data associated with an event. Examples of events include sending or receiving an email message, a user viewing a web page, saving a word processing document, printing a spreadsheet document, inputting text to compose or edit an email, opening a presentation application, closing an instant messenger application, entering a keystroke, moving the mouse, copying text to the clipboard, and hovering the mouse over a hyperlink.
- An example of event data captured by the capture processor 124 for an event involving the viewing of a web page by a user can comprise the URL of the web page, the time and date the user viewed the web page, the content of the web page in original or processed forms, the size of the original document, a screenshot of the web page as displayed to the user, a thumbnail version of the screenshot, and an icon associated with the web page or website.
- the capture processor 124 comprises multiple capture components.
- the capture processor 124 shown in Figure 1 comprises a separate capture component for each client application in order to capture events associated with each application.
- the capture processor 124 can also comprise a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt or sending of an instant messenger message.
- the capture processor 124 shown in Figure 1 also can comprise a separate client-device capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available.
- the capture processor 124 shown in Figure 1 also comprises a separate capture component to monitor and capture keystrokes input by the user and a separate capture component to monitor and capture items, such as text, displayed on a display device associated with the client device 102a.
- An individual capture component can monitor multiple client application and multiple capture components can monitor different aspects of a single client application.
- the capture processor 124 can monitor activity on the client device and can capture events by a generalized event definition and registration mechanism, such as an event schema.
- Each capture component can define its own event schema or can use a predefined one.
- Event schema can differ depending on the client application or activity the capture component is monitoring.
- the event schema can describe the format for an event, for example, by providing fields for event data associated with the event (such as the time of the event) and fields related to any associated article (such as the title) as well as the content of any associated article (such as the document body).
- An event schema can describe the format for any suitable event data that relates to an event.
- an event schema for an email message event received by the user 112a can include the sender, the recipient or list of recipients, the time sent, the date sent, and the content of the message.
- An event schema for a web page currently being viewed by a user can include the Uniform Resource Locator (URL) of the web page, the time that the web page was viewed, the length of time that the user spent viewing the web page, and the content of the web page.
- An event schema for a word processing document being saved by a user can include the title of the document, the time saved, the format of the document, the text of the document, and the location of the document. More generally, an event schema can describe the state of the system around the time of the event.
- an event schema can contain a URL for a web page event associated with a previous web page that the user navigated from.
- event schema can describe fields with more complicated structure like lists.
- an event schema can contain fields that list multiple recipients.
- An event schema can also contain optional fields so that an application can include additional event data if desired.
- An event can be captured by compiling event data into the fields described by the associated event schema.
- the capture processor 124 can capture events occurring presently (or "real-time events") and can capture events that have occurred in the past (or “historical events”).
- Real-time events can be "indexable” or “non-indexable”.
- the search engine 122 indexes indexable real-time events, but does not index non-indexable real-time events.
- the search engine 122 may determine whether to index an event based on the importance of the event. Indexable real-time events can be more important events associated with an article, such as viewing a web page, loading or saving a file, and receiving or sending an instant message or email. Non-indexable events can be deemed not important enough by the search engine 122 to index and store the event, such as moving the mouse or selecting a portion of text in an article.
- the capture processor 124 may be able to determine that events are not important enough, and not send them to the queue 126. In this embodiment, the load on the queue 126 can be reduced and the system speed can be increased.
- Non-indexable and/or indexable events can be used by the search engine 122 to update the current user state. While all real-time events can relate to what the user is currently doing (or the current user state), indexable real-time events can be indexed and stored in the data store 140. Alternatively, the search engine 122 can index all real-time events.
- Real-time events can include, for example, sending or receiving an article, such as an instant , messenger message, examining a portion of an article, such as selecting a portion of text or moving a mouse over a portion of a web page, changing an article, such as typing a word in an email or pasting a sentence in a word processing document, closing an article, such as closing an instant messenger window or changing an email message being viewed, loading, saving, opening, or viewing an article, such as a word processing document, web page, or email, listening to or saving an MP3 file or other audio/video file, or updating the metadata of an article, such as book-marking a web page, printing a presentation document, deleting a word processing document, or moving a spreadsheet document.
- an article such as an instant , messenger message
- examining a portion of an article such as selecting a portion of text or moving a mouse over a portion of a web page
- changing an article such as typing a word in an email or pasting a sentence in a word processing document
- Historical events are similar to indexable real-time events except that the event occurred before the installation of the search engine 122 or was otherwise not captured, because, for example, the search engine 122 was not operational for a period of time while the client device 102a was operational or because no capture component existed for a specific type of historical event at the time the event took place.
- Examples of historical events include the user's saved word processing documents, media files, presentation documents, calendar entries, and spreadsheet documents, the emails in a user's inbox, web pages in the user's cache, past instant messenger conversations, and the web pages bookmarked by the user.
- the capture processor 124 can capture historical events by periodically crawling the memory 108 and any associated data storage device for events not previously captured by the capture processor 124.
- the capture processor 124 can also capture historical events by requesting certain client applications, such as a web browser or an email application, to retrieve articles and other associated information. For example, the capture processor 124 can request that the web browser application obtain all viewed web pages by the user or request that the email application obtain all email messages associated with the user. These articles may not currently exist in memory 108 or on a storage device of the client device 102a. For example, the email application may have to retrieve emails from a server device. In one embodiment, the search engine 122 indexes historical events.
- the search engine 122 may selectively capture and index historical events.
- article data associated with the article for the event can be used in part to determine whether to capture and index the event.
- Article data can comprise, for example, the location of the article, the file type of the article, and access data for the article.
- article data is used to determine a capture score and the capture score is compared to a threshold value. If the capture score for a particular event is above the threshold value, then the event is captured and indexed. If the capture score for an article is below the threshold value, then the event is not captured or indexed.
- the search engine 122 may selectively capture and index real-time events.
- events captured by the capture processor 124 are sent to the queue 126 in the format described by an event schema.
- the capture processor 124 can also send performance data to the queue 126. Examples of performance data include current processor load, average processor load over a predetermined period of time, idle time, disk access, the client applications in use, and the amount of memory available. Performance data can also be provided by specific performance monitoring components, some of which may be part of the search engine 122, for example. The performance data in the queue 126 can be retrieved by the search engine 122 and the capture components of the capture processor 124.
- capture components can retrieve the performance data to alter how many events are sent to the queue 126 or how detailed the events are that are sent (fewer or smaller events when the system is busy) or how frequently events are sent (events are sent less often when the system is busy or there are too many events waiting to be processed).
- the search engine 122 can use performance data to determine when it indexes various events and when and how often it issues implicit queries.
- the queue 126 holds events until the search engine 122 is ready to process an event or events.
- the queue 126 uses the performance data to help determine how quickly to provide the events to the search engine 122.
- the queue 126 can comprise one or more separate queues - including a user state queue and an index queue.
- the index queue can queue indexable events, for example.
- the queue 126 can have additional queues or comprise a single queue.
- the queue 126 can be implemented as a circular priority queue using memory mapped files.
- the queue can be a multiple priority queue where higher priority events are served before lower priority events, and other components may be able to specify the type of events they are interested in.
- real-time events can be given higher priority than historical events, and indexable events can be given higher priority than non-indexable real-time events.
- Other implementations of the queue 126 are possible.
- the client device 102a does not have a queue 126.
- events are passed directly from the capture processor to the search engine 122.
- events can be transferred between the capture components and the search engine using suitable information exchange mechanisms such as: Extensible Markup Language - Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism.
- XML/RPC Extensible Markup Language - Remote Procedure Calling protocol
- HTTP Hypertext Transfer Protocol
- SOAP Simple Object Access Protocol
- the search engine 122 can contain an indexer 130, a query system 132, and a formatter 134.
- the query system 132 can retrieve real-time events and performance data from the queue 126.
- the query system 132 can use performance data and real-time events to update the current user state and generate an implicit query.
- An implicit query can be an automatically generated query based on the current user state.
- the query system 132 can also receive and process explicit queries from the user 112a.
- Performance data can also be retrieved by the search engine 122 from the queue 126 for use in determining the amount of activity possible by the search engine 122.
- indexable real-time events and historical events are retrieved from the queue 126 by the indexer 130.
- the queue 126 may send the indexable events to the indexer 130.
- the indexer 130 can index the indexable events and can send them to the data store 140 where they are stored.
- the data store 140 can be any type of computer-readable media and can be integrated with the client device 102a, such as a hard drive, or external to the client device 102a, such as an external hard drive or on another data storage device accessed through the network 106.
- the data store can be one or more logical or physical storage areas. In one embodiment, the data store 140 can be in memory 108.
- the data store 140 may use one or a combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs, and may include compression and encryption.
- the data store comprises an index 142, a database 144 and a repository 146.
- the indexer 130 when the indexer 130 receives an event, the indexer 130 can determine, from the event, terms (if any) associated with the event, the time of the event (if available), images (if any) associated with the event, and/or other information defining the event. The indexer 130 can determine if the event is a duplicate of a previously received event. The indexer 130 can also determine if the event relates to other events and associate the event with related events. For example, for a received email event, the indexer 130 can associate the email with other message events from the same conversation. As additional examples, the indexer 130 can associate an event with other events based on text contained in the events or based on the time of the events. The emails from the same conversation can be associated with each other in a related event object, which can be stored in the data store 140.
- the indexer 130 can send and incorporate the terms and location information, associated with the event in the index 142 of the data store 140.
- the event can be sent to the database 144 for storage and the content of the associated article and any associated images can be stored in the repository 146.
- the conversation object associated with email messages can be stored in the database 144.
- a user 112a can input an explicit query into a search engine interface displayed on the client device 102a, which is received by the search engine 122.
- the search engine 122 can also generate an implicit query based on a current user state, which can be determined by the query system 132 from real-time events.
- the query system 132 can locate relevant information in the data store 140 and provide a result set.
- the result set comprises article identifiers for articles associated with the client applications 120 or client articles.
- Client articles include articles associated with the user 112a or client device 102a, such as the user's emails, word processing documents, instant messenger messages, previously viewed web pages and any other article or portion of an article associated with the client device 102a or user 112a.
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or other suitable information that may identify an article.
- the result set also comprises article identifiers for articles located on the network 106 or network articles located by a search engine on a server device.
- Network articles include articles located on the network 106 not previously viewed or otherwise referenced by the user 112a, such as web pages not previously viewed by the user 112a.
- the formatter 134 can receive the search result set from the query system 132 of the search engine 122 and can format the results for output to a display processor 128.
- the formatter 134 can format the results in XML, HTML, or tab delineated text.
- the display processor 128 can be contained in memory 108 and can control the display of the result set on a display device associated with the client device 102a.
- the display processor 128 may comprise various components.
- the display processor 128 comprises a Hypertext Transfer Protocol (HTTP) server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language (HTML) pages.
- the HTTP server comprises a scaled-down version of the Apache Web server.
- the display processor 128 can be associated with a set of APIs to allow various application to receive the results and display them in various formats.
- the display APIs can be implemented in various ways, including, for example, Windows messaging, DLL exports, COM interface, VB, JAVA, or .NET libraries, or a web service.
- a server device 150 can be coupled to the network 106.
- the search engine 122 can transmit a search query comprised of an explicit or implicit query or both to the server device 150.
- the user 112a can also enter a search query in a search engine interface, which can be transmitted to the server device 150 by the client device 102a via the network 106.
- the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal to server device 150.
- a proxy server not shown
- the server device 150 can include a server executing a search engine application program, such as the GoogleTM search engine. In other embodiments, the server device 150 can comprise a related information server or an advertising server. Similar to the client devices 102a-n, the server device 150 can include a processor 160 coupled to a computer-readable memory 162. Server device 150, depicted as a single computer system, may be implemented as a network of computer processors. Examples of a server device 150 are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices.
- the server processor 160 can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois. In another embodiment, the server device 150 may exist on a client-device. In still another embodiment, there can be multiple server devices 150.
- Memory 162 contains the search engine application program, also known as a network search engine 170.
- the search engine 170 can locate relevant information from the network 106 in response to a search query from a client device 102a.
- the search engine 170 then can provide a result set to the client device 102a via the network 106.
- the result set can comprise one or more article identifiers.
- An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article.
- an article identifier can comprise a URL associated with an article.
- the server device 150 has previously performed a crawl of the network 106 to locate articles, such as web pages, stored at other devices or systems coupled to the network 106, and indexed the articles in memory 162 or on another data storage device. It should be appreciated that other methods for indexing articles in lieu of or in combination with crawling may be used, such as manual submission.
- the client device 102a is a stand-alone device that is not permanently coupled to a network.
- the system 100 shown in Figure 1 is merely exemplary, and is used to explain the exemplary methods shown in Figures 2 through 3 .
- a search engine captures an event in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, updates a current user state based at least in part on the event, determines if the event should be indexed, and if the event should be indexed, indexes the event and stores the event and at least a portion of content associated with the article.
- a search engine may capture a plurality of events occurring on a client device, wherein the events are associated with at least one of a plurality of client applications, wherein at least some of the events are captured in real time upon the occurrence of the event, indexes and stores at least some of the events, wherein the events that are indexed and stored have an associated article, receives a search query, and locates relevant articles from events relevant to the search query.
- the search engine can also generate a search result set from the relevant articles.
- the search query is entered by the user.
- the search query is generated by the search engine based on a current user state determined from real-time events.
- a plurality of real-time events are captured in real time upon the occurrence of the real-time events, wherein each real-time event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, a plurality of historical events are captured that occurred in the past, wherein each historical event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, for each event, it is determined if the event should be indexed, and if the event should be indexed, the event is indexed and the event and at least a portion of content associated with the article are stored.
- an event is captured in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, a current user state is updated based at least in part on the event, the event is indexed and the event and at least a portion of content associated with the article are stored.
- the event can be a real-time event or it can be a historical event.
- a plurality of events occurring on a client device are captured, wherein each event is associated with at least one of a plurality of client applications, at least some of the events are indexed and stored, wherein the events that are indexed and stored have an associated client article, a plurality of network articles are indexed, a search query is received, and relevant client articles and network articles are located based at least in part on the search query.
- at least some of the events can be real-time events captured in real-time.
- the search query can be implicitly generated based at least in part on at least one real-time event.
- Figure 2 illustrates an exemplary method 200 that provides a method for capturing and processing an event, in accordance with one embodiment of the invention.
- This exemplary method is provided by way of example, as it will be appreciated from the foregoing description of exemplary embodiments there are a variety of ways to carry out methods in other embodiments of the present invention.
- the method 200 shown in Figure 2 can be executed or otherwise performed by any of various systems.
- the method 200 is described below as carried out by the system 100 shown in Figure 1 by way of example, and various elements of the system 100 are referenced in explaining the example method of Figure 2 .
- the capture processor 124 captures an event.
- the event can be a real-time event or can be a historical event.
- the capture processor 124 can capture a real-time event by identifying and compiling event data associated with the event upon the occurrence of the event.
- the capture processor 124 can capture a historical event, for example, by periodically crawling the memory 108 or associated data storage device of the client device 112a for previously uncaptured articles or receiving articles or data from client applications and identifying and compiling event data associated with the event.
- the capture processor 124 may have separate capture components for each client application, network monitoring, performance data capture, keystroke capture, and display capture.
- the capture component can use a generalized event definition mechanism, such as an event schema that it has previously defined and registered with the client device 102a, to capture or express the event.
- the capture processor 124 determines whether the event captured is an indexable event.
- some real-time events may not be indexed (non-indexable real-time events).
- non-indexable real-time events are used to update the current user state and are, for example, examining a portion of an article, changing an article, and closing an article.
- non-indexable events are not indexed or sent for storage by the indexer 130.
- Indexable events can be indexable real-time events or historical events. Examples of indexable events include the receipt of an email message, the viewing of a web page, the saving of a word processing document, and the sending of an instant messenger message.
- the event can be sent by the capture processor 124 to the queue 126 with an indication that it is an indexable event.
- indexable real-time events are sent to both a user state queue and an index queue within queue 126 and historical events are sent to the index queue within the queue 126.
- indexable real-time events may not be sent to the user state queue to save computational time.
- the capture processor 124 can send the event in a form described by an event schema to the queue 126.
- the non-indexable event can be sent by the capture processor 124 to the user state queue of the queue 126 with an indication that it is not to be indexed.
- block 204 can be performed after and/or before block 206. For example, some events may be determined to be indexable or non-indexable by the capture processor 124 and other events may be determined to be indexable or non-indexable by the indexer 130.
- the queue 126 holds the event until the search engine is ready to receive it. Based on the event data, the event can be prioritized on the queue 126 for handling. For example, historical events are given a lower priority for processing by the queue 126 than real-time events.
- the indexer 130 when the indexer 130 is ready to process another event, it can retrieve an event or events from the index queue in the queue 126.
- the query system 132 can retrieve an event or events from the user state queue of the queue 126, when it is ready to update the user state. Location information from a captured event can be used to update the user state.
- a queue is not used and events are sent directly to the search engine 122 from the capture processor 124.
- the indexer 130 indexes and stores the event.
- the indexer 130 can retrieve an event from the queue 126 when it is ready to process the event.
- the indexer 130 determines if the event is a duplicate event and if not assigns an Event ID to the event.
- the indexer 130 can also associate the event with related events.
- the indexer 130 can determine indexable terms associated with the event, dates and times associated with the event, and other data associated with the event from the event schema.
- the indexer 130 can associate the Event ID with the indexable terms that are contained in the index 142.
- the event can be stored in the database 144 and the content of the event can be stored in the repository 146.
- the capturing of events that are indexed and stored by the search engine 122 allows the user 122a to search for articles on the client device 102a and allows the search engine to automatically search for articles on the client device 102a.
- Figure 3 illustrates an exemplary method 300 that provides a method for locating and retrieving articles on a client device, in accordance with one embodiment.
- This exemplary method is provided by way of example, as there are a variety of ways to carry out methods according to the present invention.
- the method 300 shown in Figure 3 can be executed or otherwise performed by any of various systems.
- the method 300 is described below as carried out by the system 100 shown in Figure 1 by way of example, various elements of the system 100 are referenced in the example method of Figure 3 .
- the query system 132 receives a search query.
- the query can be an explicit query or an implicit query.
- An explicit query can be generated by a user inputting query terms into a search engine interface displayed on the client device 102a.
- An implicit query can be generated by the query system 132 based on a current user state. For example, the user 112a can enter the terms "agenda for monthly budget meeting" into a search engine interface. Alternatively, the user 112a can input the terms "agenda for monthly budget meeting" in an email the user 112a is drafting.
- the capture processor 124 can capture this contextual event and it can be received by the query system 132.
- the query system 132 can generate a search query based on the terms captured in this contextual event.
- the query system 132 locates articles relevant to the search query.
- the query system 132 can locate relevant articles by matching the terms of the search query with terms located in the index 142. For example, the query system 132 can match the terms of the query with terms in the index 142. From the matched terms, the query system 132 can determine events, stored in the database 144, associated with the terms through event IDs associated with the matched terms. From these events, the query system 132 can determine articles associated with the events. The articles can be stored in the repository 146.
- the query system 132 can locate various articles from various client applications that contain the query terms, such as, emails, presentation documents, word processing documents, spreadsheet documents and other articles matched to the terms of the query.
- the query can also designate a time and the query system 132 can locate articles that are relevant to the query time.
- the query can also designate an event-type and the query system 132 can locate articles of a specific type, such as, for example, word processing files or email messages.
- the query system 132 can also retrieve network articles from a search engine 170 that are relevant to the query.
- the query system 132 generates a search result set based on the located articles.
- the query system 132 can sort and rank the located articles based on a variety of signals indicating the user's 112a preference for the articles.
- the search result set can contain a ranked list of article identifiers for articles associated with a variety of different client applications 120 and article identifiers for network articles. Each link can also contain a summary of the article as well as an image associated with the article.
- the search result set is formatted by the formatter 134.
- the formatter 134 can format the result set in XML or HTML.
- the search result set is displayed on the client device 102a by the display processor 128.
- the search result set can be displayed on the display device associated with the client device 102a. If the search result set was generated in response to an implicit query the display processor 128 can determine an appropriate time to display the implicit search result set. The user 112a can then select an article identifier for an article and cause the display of the associated article on the display device.
- the environment shown reflects a client-side search engine architecture embodiment. Other embodiments are possible, such as a stand-alone client device or a network search engine.
Abstract
Description
- The invention generally relates to search engines. More particularly, the invention relates to methods and systems for information capture and retrieval.
- Users generate and access a large number of articles, such as emails, web pages, word processing documents, spreadsheet documents, instant messenger messages, and presentation documents, using a client device, such as a personal computer, personal digital assistant, or mobile phone. Some articles are stored on one or more storage devices coupled to, accessible by, or otherwise associated with the client device(s). Users sometimes wish to search the storage device(s) for articles.
- Conventional client-device search applications may significantly degrade the performance of the client device. For example, certain conventional client-device search applications typically use batch processing to index all articles, which can result in noticeably slower performance of the client device during the batch processing.
Additionally, batch processing occurs only periodically. Therefore, when a user performs a search, the most recent articles are sometimes not included in the results. Moreover, if the batch processing is scheduled for a time when the client device is not operational and is thus not performed for an extended period of time, the index of articles associated with the client device can become outdated. Conventional client-device search applications may also need to rebuild the index at each batch processing or build new partial indexes and perform a merge operation that can use significant client-device resources. Conventional client-device search applications also sometimes use a great deal of system resources when operational, resulting in slower performance of the client device. - Additionally, conventional client-device search applications can require an explicit search query from a user to generate results, and may be limited to examining file names or the contents of a particular application's files.
The documentUS 6 532 023 B 1 (SCHUMACHER DANIEL M [US] ET AL published on 11 March 2003 ) discloses a system for recording events resulting from user interactions with applets, and subsequently playing back the recorded events. The system generates event objects for detected events and further generates component index values for the interaction events. The system indexes all the recorded interaction events .
The documentUS 6 662 226 B1 (WANG JINSHENG [US] ET AL published on 9 December 2003 ) discloses a system for recording events resulting from user interactions with applets, and subsequently playing back the recorded events. It teaches indexing captured information and using such indexed information for playing captured events.
The documentUS 2002/103664 A1 (OLSSON ANDERS [US] ET AL published on 1 August 2002 ) discloses an event tracking server for tracking user interaction with a website. The event tracking system determines the event tracking information and retrieves a set of instructions corresponding to the determined information.
The document "Spector CNE" (XP002332115 published in 2003) discloses user software (Spector) that records user activities. Essentially, the Spector software monitors the activities on a specific computer by recording events that occurred on that computer whenever a user logs on to it.
None of these documents involve the step of determining whether the event is an indexable event or a non-indexable event and they do not disclose automatically generating an implicit query or producing or displaying a search result. - Embodiments of the present invention comprise methods and systems for information capture and retrieval. In one embodiment, a search engine implements a method comprising capturing an event in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, determining if the event should be indexed, and if the event should be indexed, indexing the event and storing the event and at least a portion of content associated with the article. In another embodiment, a search engine implements a method comprising capturing a plurality of events occurring on a client device, wherein the events are associated with at least one of a plurality of client applications, wherein at least some of the events are captured in real time upon the occurrence of the event, indexing and storing at least some of the events, wherein the events that are indexed and stored have an associated article, receiving a search query, and locating relevant articles from events relevant to the search query.
- These exemplary embodiments are mentioned not to limit or define the invention, but to provide examples of embodiments of the invention to aid understanding thereof. Exemplary embodiments are discussed in the Detailed Description, and further description of the invention is provided there. Advantages offered by the various embodiments of the present invention may be further understood by examining this specification.
- These and other features, aspects, and advantages of the present invention are better understood when the following Detailed Description is read with reference to the accompanying drawings, wherein:
-
Figure 1 is a diagram illustrating an exemplary environment in which one embodiment of the present invention may operate; -
Figure 2 is a flow diagram illustrating an exemplary method of capturing and processing event data associated with a client device in one embodiment of the present invention; and -
Figure 3 is a flow diagram illustrating an exemplary method of retrieving articles associated with events in one embodiment of the present invention. - Referring now to the drawings in which like numerals indicate like elements throughout the several figures,
Figure 1 is a block diagram illustrating an exemplary environment for implementation of an embodiment of the present invention. While the environment shown reflects a client-side search engine architecture embodiment, other embodiments are possible. Thesystem 100 shown inFigure 1 includesmultiple client devices 102a-n that can communicate with aserver device 150 over anetwork 106. Thenetwork 106 shown comprises the Internet. In other embodiments, other networks, such as an intranet, may be used instead. Moreover, methods according to the present invention may operate within a single client device that does not communicate with a server device or a network. - The
client devices 102a-n shown inFigure 1 each include a computer-readable medium 108. The embodiment shown inFigure 1 includes a random access memory (RAM) 108 coupled to aprocessor 110. Theprocessor 110 executes computer-executable program instructions stored inmemory 108. Such processors may include a microprocessor, an ASIC, state machines, or other processor, and can be any of a number of suitable computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois. Such processors include, or may be in communication with, media, for example computer-readable media, which stores instructions that, when executed by the processor, cause the processor to perform the steps described herein. Embodiments of computer-readable media include, but are not limited to, an electronic, optical, magnetic, or other storage or transmission device capable of providing a processor, such as theprocessor 110 ofclient 102a, with computer-readable instructions. Other examples of suitable media include, but are not limited to, a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, an ASIC, a configured processor, all optical media, all magnetic tape or other magnetic media, or any other medium from which a computer processor can read instructions. Also, various other forms of computer-readable media may transmit or carry instructions to a computer, including a router, private or public network, or other transmission device or channel, both wired and wireless. The instructions may comprise code from any suitable computer-programming language, including, for example, C, C++, C#, Visual Basic, Java, Python, Perl, and JavaScript. -
Client devices 102a-n can be coupled to anetwork 106, or alternatively, can be stand alone machines.Client devices 102a-n may also include a number of external or internal devices such as a mouse, a CD-ROM, DVD, a keyboard, a display device, or other input or output devices. Examples ofclient devices 102a-n are personal computers, digital assistants, personal digital assistants, cellular phones, mobile phones, smart phones, pagers, digital tablets, laptop computers, Internet appliances, and other processor-based devices. In general, theclient devices 102a-n may be any type of processor-based platform that operates on any suitable operating system, such as Microsoft® Windows® or Linux, capable of supporting one or more client application programs. For example, theclient device 102a can comprise a personal computer executing client application programs, also known asclient applications 120. Theclient applications 120 can be contained inmemory 108 and can include, for example, a word processing application, a spreadsheet application, an email application, an instant messenger application, a presentation application, an Internet browser application, a calendar/organizer application, a video playing application, an audio playing application, an image display application, a file management program, an operating system shell, and other applications capable of being executed by a client device. Client applications may also include client-side applications that interact with or access other applications (such as, for example, a web-browser executing on theclient device 102a that interacts with a remote email server to access email). - The
user 112a can interact with thevarious client applications 120 and articles associated with theclient applications 120 via various input and output devices of theclient device 102a. Articles include, for example, word processor documents, spreadsheet documents, presentation documents, emails, instant messenger messages, database entries, calendar entries, appointment entries, task manager entries, source code files, and other client application program content files, messages, items, web pages of various formats, such as HTML, XML, XHTML, Portable Document Format (PDF) files, and media files, such as image files, audio files, and video files, or any other documents or items or groups of documents or items or information of any suitable type whatsoever. - The user's 112a interaction with articles, the
client applications 120, and theclient device 102a creates event data that may be observed, recorded, analyzed or otherwise used. An event can be any occurrence possible associated with an article,client application 120, orclient device 102a, such as inputting text in an article, displaying an article on a display device, sending an article, receiving an article; manipulating an input device, opening an article, saving an article, printing an article, closing an article, opening a client application program, closing a client application program, idle time, processor load, disk access, memory usage, bringing a client application program to the foreground, changing visual display details of the application (such as resizing or minimizing) and any other suitable occurrence associated with an article, a client application program, or the client device whatsoever. Additionally, event data can be generated when theclient device 102a interacts with an article independent of theuser 112a, such as when receiving an email or performing a scheduled task. - The
memory 108 of theclient device 102a can also contains acapture processor 124, aqueue 126, and asearch engine 122. Theclient device 102a can also contains or is in communication with adata store 140. Thecapture processor 124 can capture events and pass them to thequeue 126. Thequeue 126 can pass the captured events to thesearch engine 122 or thesearch engine 122 can retrieve new events from thequeue 126. In one embodiment, thequeue 126 notifies thesearch engine 122 when a new event arrives in thequeue 126 and thesearch engine 122 retrieves the event (or events) from thequeue 126 when thesearch engine 122 is ready to process the event (or events). When the search engine receives an event it can be processed and can be stored in thedata store 140. Thesearch engine 122 can receive an explicit query from theuser 112a or generate an implicit query and it can retrieve information from thedata store 140 in response to the query. In another embodiment, the queue is located in thesearch engine 122. In still another embodiment, theclient device 102a does not have a queue and the events are passed from thecapture processor 124 directly to thesearch engine 122. According to other embodiments, the event data is transferred using an information exchange protocol. The information exchange protocol can comprise, for example, any suitable rule or convention facilitating data exchange, and can include, for example, any one of the following communication mechanisms: Extensible Markup Language - Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism. - The
capture processor 124 can capture an event by identifying and compiling event data associated with an event. Examples of events include sending or receiving an email message, a user viewing a web page, saving a word processing document, printing a spreadsheet document, inputting text to compose or edit an email, opening a presentation application, closing an instant messenger application, entering a keystroke, moving the mouse, copying text to the clipboard, and hovering the mouse over a hyperlink. An example of event data captured by thecapture processor 124 for an event involving the viewing of a web page by a user can comprise the URL of the web page, the time and date the user viewed the web page, the content of the web page in original or processed forms, the size of the original document, a screenshot of the web page as displayed to the user, a thumbnail version of the screenshot, and an icon associated with the web page or website. - In the embodiment shown in
Figure 1 , thecapture processor 124 comprises multiple capture components. For example, thecapture processor 124 shown inFigure 1 comprises a separate capture component for each client application in order to capture events associated with each application. Thecapture processor 124 can also comprise a separate capture component that monitors overall network activity in order to capture event data associated with network activity, such as the receipt or sending of an instant messenger message. Thecapture processor 124 shown inFigure 1 also can comprise a separate client-device capture component that monitors overall client device performance data, such as processor load, idle time, disk access, the client applications in use, and the amount of memory available. Thecapture processor 124 shown inFigure 1 also comprises a separate capture component to monitor and capture keystrokes input by the user and a separate capture component to monitor and capture items, such as text, displayed on a display device associated with theclient device 102a. An individual capture component can monitor multiple client application and multiple capture components can monitor different aspects of a single client application. - In one embodiment, the
capture processor 124, through the individual capture components, can monitor activity on the client device and can capture events by a generalized event definition and registration mechanism, such as an event schema. Each capture component can define its own event schema or can use a predefined one. Event schema can differ depending on the client application or activity the capture component is monitoring. Generally, the event schema can describe the format for an event, for example, by providing fields for event data associated with the event (such as the time of the event) and fields related to any associated article (such as the title) as well as the content of any associated article (such as the document body). An event schema can describe the format for any suitable event data that relates to an event. For example, an event schema for an email message event received by theuser 112a can include the sender, the recipient or list of recipients, the time sent, the date sent, and the content of the message. An event schema for a web page currently being viewed by a user can include the Uniform Resource Locator (URL) of the web page, the time that the web page was viewed, the length of time that the user spent viewing the web page, and the content of the web page. An event schema for a word processing document being saved by a user can include the title of the document, the time saved, the format of the document, the text of the document, and the location of the document. More generally, an event schema can describe the state of the system around the time of the event. For example, an event schema can contain a URL for a web page event associated with a previous web page that the user navigated from. In addition, event schema can describe fields with more complicated structure like lists. For example, an event schema can contain fields that list multiple recipients. An event schema can also contain optional fields so that an application can include additional event data if desired. An event can be captured by compiling event data into the fields described by the associated event schema. - The
capture processor 124 can capture events occurring presently (or "real-time events") and can capture events that have occurred in the past (or "historical events"). Real-time events can be "indexable" or "non-indexable". In one embodiment, thesearch engine 122 indexes indexable real-time events, but does not index non-indexable real-time events. Thesearch engine 122 may determine whether to index an event based on the importance of the event. Indexable real-time events can be more important events associated with an article, such as viewing a web page, loading or saving a file, and receiving or sending an instant message or email. Non-indexable events can be deemed not important enough by thesearch engine 122 to index and store the event, such as moving the mouse or selecting a portion of text in an article. Alternatively, thecapture processor 124 may be able to determine that events are not important enough, and not send them to thequeue 126. In this embodiment, the load on thequeue 126 can be reduced and the system speed can be increased. Non-indexable and/or indexable events can be used by thesearch engine 122 to update the current user state. While all real-time events can relate to what the user is currently doing (or the current user state), indexable real-time events can be indexed and stored in thedata store 140. Alternatively, thesearch engine 122 can index all real-time events. Real-time events can include, for example, sending or receiving an article, such as an instant , messenger message, examining a portion of an article, such as selecting a portion of text or moving a mouse over a portion of a web page, changing an article, such as typing a word in an email or pasting a sentence in a word processing document, closing an article, such as closing an instant messenger window or changing an email message being viewed, loading, saving, opening, or viewing an article, such as a word processing document, web page, or email, listening to or saving an MP3 file or other audio/video file, or updating the metadata of an article, such as book-marking a web page, printing a presentation document, deleting a word processing document, or moving a spreadsheet document. - Historical events are similar to indexable real-time events except that the event occurred before the installation of the
search engine 122 or was otherwise not captured, because, for example, thesearch engine 122 was not operational for a period of time while theclient device 102a was operational or because no capture component existed for a specific type of historical event at the time the event took place. Examples of historical events include the user's saved word processing documents, media files, presentation documents, calendar entries, and spreadsheet documents, the emails in a user's inbox, web pages in the user's cache, past instant messenger conversations, and the web pages bookmarked by the user. Thecapture processor 124 can capture historical events by periodically crawling thememory 108 and any associated data storage device for events not previously captured by thecapture processor 124. Thecapture processor 124 can also capture historical events by requesting certain client applications, such as a web browser or an email application, to retrieve articles and other associated information. For example, thecapture processor 124 can request that the web browser application obtain all viewed web pages by the user or request that the email application obtain all email messages associated with the user. These articles may not currently exist inmemory 108 or on a storage device of theclient device 102a. For example, the email application may have to retrieve emails from a server device. In one embodiment, thesearch engine 122 indexes historical events. - In one embodiment, the
search engine 122 may selectively capture and index historical events. For example, article data associated with the article for the event can be used in part to determine whether to capture and index the event. Article data can comprise, for example, the location of the article, the file type of the article, and access data for the article. In one embodiment, article data is used to determine a capture score and the capture score is compared to a threshold value. If the capture score for a particular event is above the threshold value, then the event is captured and indexed. If the capture score for an article is below the threshold value, then the event is not captured or indexed. Similarly, thesearch engine 122 may selectively capture and index real-time events. - In one embodiment shown in
Figure 1 , events captured by thecapture processor 124 are sent to thequeue 126 in the format described by an event schema. Thecapture processor 124 can also send performance data to thequeue 126. Examples of performance data include current processor load, average processor load over a predetermined period of time, idle time, disk access, the client applications in use, and the amount of memory available. Performance data can also be provided by specific performance monitoring components, some of which may be part of thesearch engine 122, for example. The performance data in thequeue 126 can be retrieved by thesearch engine 122 and the capture components of thecapture processor 124. For example, capture components can retrieve the performance data to alter how many events are sent to thequeue 126 or how detailed the events are that are sent (fewer or smaller events when the system is busy) or how frequently events are sent (events are sent less often when the system is busy or there are too many events waiting to be processed). Thesearch engine 122 can use performance data to determine when it indexes various events and when and how often it issues implicit queries. - In one embodiment, the
queue 126 holds events until thesearch engine 122 is ready to process an event or events. Alternatively, thequeue 126 uses the performance data to help determine how quickly to provide the events to thesearch engine 122. Thequeue 126 can comprise one or more separate queues - including a user state queue and an index queue. The index queue can queue indexable events, for example. Alternatively, thequeue 126 can have additional queues or comprise a single queue. Thequeue 126 can be implemented as a circular priority queue using memory mapped files. The queue can be a multiple priority queue where higher priority events are served before lower priority events, and other components may be able to specify the type of events they are interested in. Generally, real-time events can be given higher priority than historical events, and indexable events can be given higher priority than non-indexable real-time events. Other implementations of thequeue 126 are possible. In another embodiment, theclient device 102a does not have aqueue 126. In this embodiment, events are passed directly from the capture processor to thesearch engine 122. In other embodiments, events can be transferred between the capture components and the search engine using suitable information exchange mechanisms such as: Extensible Markup Language - Remote Procedure Calling protocol (XML/RPC), Hypertext Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), shared memory, sockets, local or remote procedure calling, or any other suitable information exchange mechanism. - The
search engine 122 can contain anindexer 130, aquery system 132, and aformatter 134. Thequery system 132 can retrieve real-time events and performance data from thequeue 126. Thequery system 132 can use performance data and real-time events to update the current user state and generate an implicit query. An implicit query can be an automatically generated query based on the current user state. Thequery system 132 can also receive and process explicit queries from theuser 112a. Performance data can also be retrieved by thesearch engine 122 from thequeue 126 for use in determining the amount of activity possible by thesearch engine 122. - In the embodiment shown in
Figure 1 , indexable real-time events and historical events (indexable events) are retrieved from thequeue 126 by theindexer 130. Alternatively, thequeue 126 may send the indexable events to theindexer 130. Theindexer 130 can index the indexable events and can send them to thedata store 140 where they are stored. Thedata store 140 can be any type of computer-readable media and can be integrated with theclient device 102a, such as a hard drive, or external to theclient device 102a, such as an external hard drive or on another data storage device accessed through thenetwork 106. The data store can be one or more logical or physical storage areas. In one embodiment, thedata store 140 can be inmemory 108. Thedata store 140 may use one or a combination of methods for storing data, including without limitation, arrays, hash tables, lists, and pairs, and may include compression and encryption. In the embodiment shown inFigure 1 , the data store comprises anindex 142, adatabase 144 and arepository 146. - In one embodiment, when the
indexer 130 receives an event, theindexer 130 can determine, from the event, terms (if any) associated with the event, the time of the event (if available), images (if any) associated with the event, and/or other information defining the event. Theindexer 130 can determine if the event is a duplicate of a previously received event. Theindexer 130 can also determine if the event relates to other events and associate the event with related events. For example, for a received email event, theindexer 130 can associate the email with other message events from the same conversation. As additional examples, theindexer 130 can associate an event with other events based on text contained in the events or based on the time of the events. The emails from the same conversation can be associated with each other in a related event object, which can be stored in thedata store 140. - The
indexer 130 can send and incorporate the terms and location information, associated with the event in theindex 142 of thedata store 140. The event can be sent to thedatabase 144 for storage and the content of the associated article and any associated images can be stored in therepository 146. The conversation object associated with email messages can be stored in thedatabase 144. - In the embodiment shown in
Figure 1 , auser 112a can input an explicit query into a search engine interface displayed on theclient device 102a, which is received by thesearch engine 122. Thesearch engine 122 can also generate an implicit query based on a current user state, which can be determined by thequery system 132 from real-time events. Based on the query, thequery system 132 can locate relevant information in thedata store 140 and provide a result set. In one embodiment, the result set comprises article identifiers for articles associated with theclient applications 120 or client articles. Client articles include articles associated with theuser 112a orclient device 102a, such as the user's emails, word processing documents, instant messenger messages, previously viewed web pages and any other article or portion of an article associated with theclient device 102a oruser 112a. An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or other suitable information that may identify an article. In another embodiment, the result set also comprises article identifiers for articles located on thenetwork 106 or network articles located by a search engine on a server device. Network articles include articles located on thenetwork 106 not previously viewed or otherwise referenced by theuser 112a, such as web pages not previously viewed by theuser 112a. - The
formatter 134 can receive the search result set from thequery system 132 of thesearch engine 122 and can format the results for output to adisplay processor 128. In one embodiment, theformatter 134 can format the results in XML, HTML, or tab delineated text. Thedisplay processor 128 can be contained inmemory 108 and can control the display of the result set on a display device associated with theclient device 102a. Thedisplay processor 128 may comprise various components. For example, in one embodiment, thedisplay processor 128 comprises a Hypertext Transfer Protocol (HTTP) server that receives requests for information and responds by constructing and transmitting Hypertext Markup Language (HTML) pages. In one such embodiment, the HTTP server comprises a scaled-down version of the Apache Web server. Thedisplay processor 128 can be associated with a set of APIs to allow various application to receive the results and display them in various formats. The display APIs can be implemented in various ways, including, for example, Windows messaging, DLL exports, COM interface, VB, JAVA, or .NET libraries, or a web service. - Through the
client devices 102a-n,users 112a-n can communicate over thenetwork 106, with each other and with other systems and devices coupled to thenetwork 106. As shown inFigure 1 , aserver device 150 can be coupled to thenetwork 106. In the embodiment shown inFigure 1 , thesearch engine 122 can transmit a search query comprised of an explicit or implicit query or both to theserver device 150. Theuser 112a can also enter a search query in a search engine interface, which can be transmitted to theserver device 150 by theclient device 102a via thenetwork 106. In another embodiment, the query signal may instead be sent to a proxy server (not shown), which then transmits the query signal toserver device 150. Other configurations are also possible. - The
server device 150 can include a server executing a search engine application program, such as the Google™ search engine. In other embodiments, theserver device 150 can comprise a related information server or an advertising server. Similar to theclient devices 102a-n, theserver device 150 can include aprocessor 160 coupled to a computer-readable memory 162.Server device 150, depicted as a single computer system, may be implemented as a network of computer processors. Examples of aserver device 150 are servers, mainframe computers, networked computers, a processor-based device, and similar types of systems and devices. Theserver processor 160 can be any of a number of computer processors, such as processors from Intel Corporation of Santa Clara, California and Motorola Corporation of Schaumburg, Illinois. In another embodiment, theserver device 150 may exist on a client-device. In still another embodiment, there can bemultiple server devices 150. -
Memory 162 contains the search engine application program, also known as anetwork search engine 170. Thesearch engine 170 can locate relevant information from thenetwork 106 in response to a search query from aclient device 102a. Thesearch engine 170 then can provide a result set to theclient device 102a via thenetwork 106. The result set can comprise one or more article identifiers. An article identifier may be, for example, a Uniform Resource Locator (URL), a file name, a link, an icon, a path for a local file, or anything else that identifies an article. In one embodiment, an article identifier can comprise a URL associated with an article. - In one embodiment, the
server device 150, or related device, has previously performed a crawl of thenetwork 106 to locate articles, such as web pages, stored at other devices or systems coupled to thenetwork 106, and indexed the articles inmemory 162 or on another data storage device. It should be appreciated that other methods for indexing articles in lieu of or in combination with crawling may be used, such as manual submission. - It should be noted that other embodiments of the present invention may comprise systems having different architecture than that which is shown in
Figure 1 . For example, in some other embodiments of the present invention, theclient device 102a is a stand-alone device that is not permanently coupled to a network. Thesystem 100 shown inFigure 1 is merely exemplary, and is used to explain the exemplary methods shown inFigures 2 through 3 . - Various methods in accordance with embodiments of the present invention may be carried out. For example, in one embodiment a search engine captures an event in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, updates a current user state based at least in part on the event, determines if the event should be indexed, and if the event should be indexed, indexes the event and stores the event and at least a portion of content associated with the article.
- In another embodiment, a search engine may capture a plurality of events occurring on a client device, wherein the events are associated with at least one of a plurality of client applications, wherein at least some of the events are captured in real time upon the occurrence of the event, indexes and stores at least some of the events, wherein the events that are indexed and stored have an associated article, receives a search query, and locates relevant articles from events relevant to the search query. The search engine can also generate a search result set from the relevant articles. In one embodiment, the search query is entered by the user. In another embodiment, the search query is generated by the search engine based on a current user state determined from real-time events.
- In another embodiment, a plurality of real-time events are captured in real time upon the occurrence of the real-time events, wherein each real-time event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, a plurality of historical events are captured that occurred in the past, wherein each historical event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, for each event, it is determined if the event should be indexed, and if the event should be indexed, the event is indexed and the event and at least a portion of content associated with the article are stored.
- In another embodiment, an event is captured in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications, a current user state is updated based at least in part on the event, the event is indexed and the event and at least a portion of content associated with the article are stored. In this embodiment, the event can be a real-time event or it can be a historical event.
- In another embodiment, a plurality of events occurring on a client device are captured, wherein each event is associated with at least one of a plurality of client applications, at least some of the events are indexed and stored, wherein the events that are indexed and stored have an associated client article, a plurality of network articles are indexed, a search query is received, and relevant client articles and network articles are located based at least in part on the search query. In this embodiment, at least some of the events can be real-time events captured in real-time. The search query can be implicitly generated based at least in part on at least one real-time event.
-
Figure 2 illustrates anexemplary method 200 that provides a method for capturing and processing an event, in accordance with one embodiment of the invention. This exemplary method is provided by way of example, as it will be appreciated from the foregoing description of exemplary embodiments there are a variety of ways to carry out methods in other embodiments of the present invention. Themethod 200 shown inFigure 2 can be executed or otherwise performed by any of various systems. Themethod 200 is described below as carried out by thesystem 100 shown inFigure 1 by way of example, and various elements of thesystem 100 are referenced in explaining the example method ofFigure 2 . - In 202, the
capture processor 124 captures an event. The event can be a real-time event or can be a historical event. Thecapture processor 124 can capture a real-time event by identifying and compiling event data associated with the event upon the occurrence of the event. Thecapture processor 124 can capture a historical event, for example, by periodically crawling thememory 108 or associated data storage device of theclient device 112a for previously uncaptured articles or receiving articles or data from client applications and identifying and compiling event data associated with the event. Thecapture processor 124 may have separate capture components for each client application, network monitoring, performance data capture, keystroke capture, and display capture. In one embodiment, the capture component can use a generalized event definition mechanism, such as an event schema that it has previously defined and registered with theclient device 102a, to capture or express the event. - In 204, the
capture processor 124 determines whether the event captured is an indexable event. As explained above, some real-time events may not be indexed (non-indexable real-time events). In one embodiment, non-indexable real-time events are used to update the current user state and are, for example, examining a portion of an article, changing an article, and closing an article. In this embodiment, non-indexable events are not indexed or sent for storage by theindexer 130. Indexable events can be indexable real-time events or historical events. Examples of indexable events include the receipt of an email message, the viewing of a web page, the saving of a word processing document, and the sending of an instant messenger message. - If an indexable event is determined, then, in 206, the event can be sent by the
capture processor 124 to thequeue 126 with an indication that it is an indexable event. In the embodiment shown inFigure 2 , indexable real-time events are sent to both a user state queue and an index queue withinqueue 126 and historical events are sent to the index queue within thequeue 126. Alternatively, indexable real-time events may not be sent to the user state queue to save computational time. Thecapture processor 124 can send the event in a form described by an event schema to thequeue 126. If the event is determined to be a non-indexable event, then, in 206, the non-indexable event can be sent by thecapture processor 124 to the user state queue of thequeue 126 with an indication that it is not to be indexed. In an alternate embodiment, block 204 can be performed after and/or beforeblock 206. For example, some events may be determined to be indexable or non-indexable by thecapture processor 124 and other events may be determined to be indexable or non-indexable by theindexer 130. - In one embodiment, the
queue 126 holds the event until the search engine is ready to receive it. Based on the event data, the event can be prioritized on thequeue 126 for handling. For example, historical events are given a lower priority for processing by thequeue 126 than real-time events. In one embodiment, when theindexer 130 is ready to process another event, it can retrieve an event or events from the index queue in thequeue 126. Thequery system 132 can retrieve an event or events from the user state queue of thequeue 126, when it is ready to update the user state. Location information from a captured event can be used to update the user state. In another embodiment, a queue is not used and events are sent directly to thesearch engine 122 from thecapture processor 124. - In 208, the
indexer 130 indexes and stores the event. Theindexer 130 can retrieve an event from thequeue 126 when it is ready to process the event. In one embodiment, theindexer 130 determines if the event is a duplicate event and if not assigns an Event ID to the event. Theindexer 130 can also associate the event with related events. In the embodiment shown inFigure 2 , theindexer 130 can determine indexable terms associated with the event, dates and times associated with the event, and other data associated with the event from the event schema. Theindexer 130 can associate the Event ID with the indexable terms that are contained in theindex 142. The event can be stored in thedatabase 144 and the content of the event can be stored in therepository 146. The capturing of events that are indexed and stored by thesearch engine 122 allows the user 122a to search for articles on theclient device 102a and allows the search engine to automatically search for articles on theclient device 102a. -
Figure 3 illustrates anexemplary method 300 that provides a method for locating and retrieving articles on a client device, in accordance with one embodiment. This exemplary method is provided by way of example, as there are a variety of ways to carry out methods according to the present invention. Themethod 300 shown inFigure 3 can be executed or otherwise performed by any of various systems. Themethod 300 is described below as carried out by thesystem 100 shown inFigure 1 by way of example, various elements of thesystem 100 are referenced in the example method ofFigure 3 . - In 302, the
query system 132 receives a search query. The query can be an explicit query or an implicit query. An explicit query can be generated by a user inputting query terms into a search engine interface displayed on theclient device 102a. An implicit query can be generated by thequery system 132 based on a current user state. For example, theuser 112a can enter the terms "agenda for monthly budget meeting" into a search engine interface. Alternatively, theuser 112a can input the terms "agenda for monthly budget meeting" in an email theuser 112a is drafting. Thecapture processor 124 can capture this contextual event and it can be received by thequery system 132. Thequery system 132 can generate a search query based on the terms captured in this contextual event. - In 304, the
query system 132 locates articles relevant to the search query. Thequery system 132 can locate relevant articles by matching the terms of the search query with terms located in theindex 142. For example, thequery system 132 can match the terms of the query with terms in theindex 142. From the matched terms, thequery system 132 can determine events, stored in thedatabase 144, associated with the terms through event IDs associated with the matched terms. From these events, thequery system 132 can determine articles associated with the events. The articles can be stored in therepository 146. For the search query "agenda for monthly budget meeting," for example, thequery system 132 can locate various articles from various client applications that contain the query terms, such as, emails, presentation documents, word processing documents, spreadsheet documents and other articles matched to the terms of the query. The query can also designate a time and thequery system 132 can locate articles that are relevant to the query time. The query can also designate an event-type and thequery system 132 can locate articles of a specific type, such as, for example, word processing files or email messages. Thequery system 132 can also retrieve network articles from asearch engine 170 that are relevant to the query. - In 306, the
query system 132 generates a search result set based on the located articles. In one embodiment, thequery system 132 can sort and rank the located articles based on a variety of signals indicating the user's 112a preference for the articles. The search result set can contain a ranked list of article identifiers for articles associated with a variety ofdifferent client applications 120 and article identifiers for network articles. Each link can also contain a summary of the article as well as an image associated with the article. - In 308, the search result set is formatted by the
formatter 134. In one embodiment, theformatter 134 can format the result set in XML or HTML. In 310, the search result set is displayed on theclient device 102a by thedisplay processor 128. For example, the search result set can be displayed on the display device associated with theclient device 102a. If the search result set was generated in response to an implicit query thedisplay processor 128 can determine an appropriate time to display the implicit search result set. Theuser 112a can then select an article identifier for an article and cause the display of the associated article on the display device. - The environment shown reflects a client-side search engine architecture embodiment. Other embodiments are possible, such as a stand-alone client device or a network search engine.
- While the above description contains many specifics, these specifics should not be construed as limitations on the scope of the invention, but merely as exemplifications of the disclosed embodiments. For example, the examples of articles and events are illustrative and are not intended to be limiting. Those skilled in the art will envision many other possible variations that are within the scope of the invention.
Claims (20)
- A method, comprising:capturing (202) an event in real time upon the occurrence of the event, wherein the event comprises a user interaction with an article on a client device, wherein the article is capable of being associated with at least one of a plurality of client applications (120);determining (204) if the event should be indexed or if the event is a non-indexable event,if the event should be indexed, indexing (208) the event and storing (208) the event and at least a portion of content associated with the article,responsive to the event being determined a non-indexable event, updating a current user state for the user based on the event;automatically generating an implicit search query based on the current user state to produce a search result containing articles associated with captured events; anddisplaying at least a portion of the search result on the client device.
- The method of claim 1, wherein the article is associated with a client application.
- The method of claim 1 or claim 2, wherein the event is captured in the form of a pre-defined event schema.
- The method of any one of the preceding claims, wherein the user interaction with the article comprises loading the article.
- The method of any one of the preceding claims, wherein user interaction with the article comprises saving the article.
- The method of any one of the preceding claims, wherein the user interaction with the article comprises viewing the article.
- The method of any one of the preceding claims, wherein the user interaction with the article comprises updating the metadata of the article.
- The method of claim 7, wherein updating the metadata of an article comprises book-marking the article.
- The method of claim 7 or claim 8, wherein updating the metadata of the article comprises printing the article.
- The method of any one of claims 7 to 9, wherein updating the metadata of the article comprises deleting the article.
- The method of any one of claims 7 to 9, wherein updating the metadata of the article comprises moving the article.
- A method of any one of the preceding claims, further comprising:responsive to the event being determined an indexable event, indexing the event in an index.
- The method of claim 12. further comprising:receiving a second search query;determining whether the event is associated with the second search query by searching the index; andresponsive to the event being associated with the second search query, generating (306) a second search result based on the article.
- The method of claim 13, wherein the second search query is entered by a user.
- The method of claim 13 or claim 14, further comprising locating network articles relevant to the second search query.
- The method of any one of claims 13 to 15, wherein generating the search result based on the article comprises generating the search result based on the article and the network article.
- A method of any one of the preceding claim, further comprising:(202)capturing (202) a historical event that occurred in the past, wherein the historical event comprises a user interaction with a second article on the client device;determining (204) if the historical event is an indexable event;responsive to the historical event being an indexable event, indexing the event data associated with the historical event in the index, the event data associated with the historical event comprising at least a portion of the second article;determining whether the historical event is associated with the search query by searching the index; andresponsive to the historical event being associated with the search query,generating the search result including the second article.
- A computer-readable medium encoded with an executable computer program, the computer program comprising program code for carrying out the method of any one of the preceding claims.
- A system for automatically generating search queries, the system comprising:a capture processor configured for capturing an event in real time, wherein the event comprises a user interaction with an article on a client device, the capture processor further configured for determining whether the event is a non-indexable event, updating a current user state for the user based on the event responsive to the event being determined a non-indexable event, and automatically generating a search query based on the current user state;a search engine configured for producing a search result for the search query; andthe client device configured for displaying at least a portion of the search result.
- The system of claim 19, wherein the search engine is further configured for indexing the event in an index responsive to the event being determined an indexable event.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/814,773 US7941439B1 (en) | 2004-03-31 | 2004-03-31 | Methods and systems for information capture |
US10/881,584 US7725508B2 (en) | 2004-03-31 | 2004-06-30 | Methods and systems for information capture and retrieval |
PCT/US2005/010985 WO2005098594A2 (en) | 2004-03-31 | 2005-03-30 | Methods and systems for information capture and retrieval |
Publications (3)
Publication Number | Publication Date |
---|---|
EP1745360A2 EP1745360A2 (en) | 2007-01-24 |
EP1745360A4 EP1745360A4 (en) | 2008-04-23 |
EP1745360B1 true EP1745360B1 (en) | 2011-05-11 |
Family
ID=35456163
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP05731427A Not-in-force EP1745360B1 (en) | 2004-03-31 | 2005-03-30 | Methods and systems for information capture and retrieval |
Country Status (6)
Country | Link |
---|---|
US (1) | US7725508B2 (en) |
EP (1) | EP1745360B1 (en) |
JP (1) | JP4812747B2 (en) |
AT (1) | ATE509319T1 (en) |
ES (1) | ES2373297T3 (en) |
WO (1) | WO2005098594A2 (en) |
Families Citing this family (55)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10635723B2 (en) | 2004-02-15 | 2020-04-28 | Google Llc | Search engines and systems with handheld document data capture devices |
US7269621B2 (en) | 2004-03-31 | 2007-09-11 | Google Inc. | Method system and graphical user interface for dynamically updating transmission characteristics in a web mail reply |
US7912904B2 (en) | 2004-03-31 | 2011-03-22 | Google Inc. | Email system with conversation-centric user interface |
US9819624B2 (en) | 2004-03-31 | 2017-11-14 | Google Inc. | Displaying conversations in a conversation-based email system |
US7814155B2 (en) | 2004-03-31 | 2010-10-12 | Google Inc. | Email conversation management system |
US8712986B2 (en) * | 2004-04-07 | 2014-04-29 | Iac Search & Media, Inc. | Methods and systems providing desktop search capability to software application |
US9405751B2 (en) | 2005-08-23 | 2016-08-02 | Ricoh Co., Ltd. | Database for mixed media document system |
US8176054B2 (en) | 2007-07-12 | 2012-05-08 | Ricoh Co. Ltd | Retrieving electronic documents by converting them to synthetic text |
US8965145B2 (en) | 2006-07-31 | 2015-02-24 | Ricoh Co., Ltd. | Mixed media reality recognition using multiple specialized indexes |
US8838591B2 (en) | 2005-08-23 | 2014-09-16 | Ricoh Co., Ltd. | Embedding hot spots in electronic documents |
US9373029B2 (en) | 2007-07-11 | 2016-06-21 | Ricoh Co., Ltd. | Invisible junction feature recognition for document security or annotation |
US8856108B2 (en) | 2006-07-31 | 2014-10-07 | Ricoh Co., Ltd. | Combining results of image retrieval processes |
US9384619B2 (en) | 2006-07-31 | 2016-07-05 | Ricoh Co., Ltd. | Searching media content for objects specified using identifiers |
US8949287B2 (en) | 2005-08-23 | 2015-02-03 | Ricoh Co., Ltd. | Embedding hot spots in imaged documents |
US8868555B2 (en) | 2006-07-31 | 2014-10-21 | Ricoh Co., Ltd. | Computation of a recongnizability score (quality predictor) for image retrieval |
US9530050B1 (en) | 2007-07-11 | 2016-12-27 | Ricoh Co., Ltd. | Document annotation sharing |
US8156116B2 (en) | 2006-07-31 | 2012-04-10 | Ricoh Co., Ltd | Dynamic presentation of targeted information in a mixed media reality recognition system |
US7812986B2 (en) | 2005-08-23 | 2010-10-12 | Ricoh Co. Ltd. | System and methods for use of voice mail and email in a mixed media environment |
US8156115B1 (en) | 2007-07-11 | 2012-04-10 | Ricoh Co. Ltd. | Document-based networking with mixed media reality |
US7702673B2 (en) | 2004-10-01 | 2010-04-20 | Ricoh Co., Ltd. | System and methods for creation and use of a mixed media environment |
US8825682B2 (en) | 2006-07-31 | 2014-09-02 | Ricoh Co., Ltd. | Architecture for mixed media reality retrieval of locations and registration of images |
US9171202B2 (en) | 2005-08-23 | 2015-10-27 | Ricoh Co., Ltd. | Data organization and access for mixed media document system |
US20060259511A1 (en) * | 2005-05-13 | 2006-11-16 | Yahoo! Inc. | Media object organization across information management services |
US8086605B2 (en) * | 2005-06-28 | 2011-12-27 | Yahoo! Inc. | Search engine with augmented relevance ranking by community participation |
US8533199B2 (en) * | 2005-12-14 | 2013-09-10 | Unifi Scientific Advances, Inc | Intelligent bookmarks and information management system based on the same |
ES2303422B1 (en) * | 2005-12-19 | 2009-06-23 | Universidad De Zaragoza | SYSTEM AND PROCEDURE FOR REGISTRATION AND CERTIFICATION OF ACTIVITY AND / OR COMMUNICATION BETWEEN TERMINALS. |
US7680763B2 (en) * | 2005-12-21 | 2010-03-16 | International Business Machines Corporation | Administration of resources in system-wide search systems |
US20070174384A1 (en) * | 2006-01-25 | 2007-07-26 | John Abd-El-Malek | Sidebar communication system and method |
US7478182B2 (en) * | 2006-01-31 | 2009-01-13 | Schweig Marc E | Keyboard, mouse, and video (KVM) session capture system that stores and can playback portions of live KVM session via forensic capture module |
US20080016023A1 (en) * | 2006-07-17 | 2008-01-17 | The Mathworks, Inc. | Storing and loading data in an array-based computing environment |
US20080021902A1 (en) * | 2006-07-18 | 2008-01-24 | Dawkins William P | System and Method for Storage Area Network Search Appliance |
US8201076B2 (en) | 2006-07-31 | 2012-06-12 | Ricoh Co., Ltd. | Capturing symbolic information from documents upon printing |
AU2011253732B2 (en) * | 2006-07-31 | 2012-09-20 | Microsoft Corporation | Temporal ranking of search results |
US9063952B2 (en) | 2006-07-31 | 2015-06-23 | Ricoh Co., Ltd. | Mixed media reality recognition with image tracking |
US7849079B2 (en) * | 2006-07-31 | 2010-12-07 | Microsoft Corporation | Temporal ranking of search results |
US8676810B2 (en) * | 2006-07-31 | 2014-03-18 | Ricoh Co., Ltd. | Multiple index mixed media reality recognition using unequal priority indexes |
US9176984B2 (en) | 2006-07-31 | 2015-11-03 | Ricoh Co., Ltd | Mixed media reality retrieval of differentially-weighted links |
US9020966B2 (en) | 2006-07-31 | 2015-04-28 | Ricoh Co., Ltd. | Client device for interacting with a mixed media reality recognition system |
US8489987B2 (en) | 2006-07-31 | 2013-07-16 | Ricoh Co., Ltd. | Monitoring and analyzing creation and usage of visual content using image and hotspot interaction |
US7945434B2 (en) * | 2007-03-22 | 2011-05-17 | Progress Software Corporation | Non-intrusive event capturing for event processing analysis |
US8429194B2 (en) * | 2008-09-15 | 2013-04-23 | Palantir Technologies, Inc. | Document-based workflows |
US9378472B2 (en) * | 2008-12-22 | 2016-06-28 | Adobe Systems Incorporated | Systems and methods for enabling and configuring tracking of user interactions on computer applications |
US8296276B2 (en) * | 2008-12-22 | 2012-10-23 | Microsoft Corporation | Scope based indexing prioritization |
US8667026B1 (en) | 2009-01-22 | 2014-03-04 | American Express Travel Related Services Company, Inc. | Method and system for ranking multiple data sources |
CN102467365A (en) * | 2010-10-29 | 2012-05-23 | 国际商业机器公司 | Method and device for providing help information |
US9465866B2 (en) * | 2011-06-09 | 2016-10-11 | International Business Machines Corporation | Task context recovery |
CN102880618A (en) * | 2011-07-15 | 2013-01-16 | 国际商业机器公司 | Method and system for searching webpage document |
US9037601B2 (en) | 2011-07-27 | 2015-05-19 | Google Inc. | Conversation system and method for performing both conversation-based queries and message-based queries |
US9058331B2 (en) | 2011-07-27 | 2015-06-16 | Ricoh Co., Ltd. | Generating a conversation in a social network based on visual search results |
CN104220959B (en) * | 2012-04-10 | 2017-05-31 | 英派尔科技开发有限公司 | Extract the fashion information of webpage |
US9805078B2 (en) * | 2012-12-31 | 2017-10-31 | Ebay, Inc. | Next generation near real-time indexing |
US9659043B2 (en) * | 2013-02-07 | 2017-05-23 | Enigma Technologies, Inc. | Data system and method |
US9372898B2 (en) * | 2014-07-17 | 2016-06-21 | Google Inc. | Enabling event prediction as an on-device service for mobile interaction |
CN113626462B (en) * | 2021-07-15 | 2022-11-15 | 北京百度网讯科技有限公司 | Instant messaging object searching method and device, electronic equipment and storage medium |
US11797486B2 (en) | 2022-01-03 | 2023-10-24 | Bank Of America Corporation | File de-duplication for a distributed database |
Family Cites Families (177)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US669738A (en) * | 1898-08-06 | 1901-03-12 | Elihu Thomson | Vapor-generator. |
US4410957A (en) * | 1980-11-20 | 1983-10-18 | International Business Machines Corporation | Keystroke queueing system |
US6978277B2 (en) | 1989-10-26 | 2005-12-20 | Encyclopaedia Britannica, Inc. | Multimedia search system |
US5321838A (en) * | 1991-02-28 | 1994-06-14 | Hensley Billy W | Event capturing for computer software evaluation |
US5555346A (en) | 1991-10-04 | 1996-09-10 | Beyond Corporated | Event-driven rule-based messaging system |
US5280612A (en) | 1991-11-26 | 1994-01-18 | International Business Machines Corporation | Multiple version database concurrency control system |
JPH06237300A (en) * | 1992-12-23 | 1994-08-23 | American Teleph & Telegr Co <Att> | Message service inherent in position in telecommunication network |
JP3147572B2 (en) * | 1993-03-22 | 2001-03-19 | 株式会社日立製作所 | Program generation method |
US5623652A (en) * | 1994-07-25 | 1997-04-22 | Apple Computer, Inc. | Method and apparatus for searching for information in a network and for controlling the display of searchable information on display devices in the network |
US5592378A (en) * | 1994-08-19 | 1997-01-07 | Andersen Consulting Llp | Computerized order entry system and method |
JP2626598B2 (en) * | 1994-11-25 | 1997-07-02 | 日本電気株式会社 | Operability evaluation device for interactive system with graphical user interface |
US5748954A (en) * | 1995-06-05 | 1998-05-05 | Carnegie Mellon University | Method for searching a queued and ranked constructed catalog of files stored on a network |
US5701469A (en) * | 1995-06-07 | 1997-12-23 | Microsoft Corporation | Method and system for generating accurate search results using a content-index |
US5907836A (en) | 1995-07-31 | 1999-05-25 | Kabushiki Kaisha Toshiba | Information filtering apparatus for selecting predetermined article from plural articles to present selected article to user, and method therefore |
US6477585B1 (en) | 1995-08-18 | 2002-11-05 | International Business Machines Corporation | Filter mechanism for an event management service |
US5881315A (en) | 1995-08-18 | 1999-03-09 | International Business Machines Corporation | Queue management for distributed computing environment to deliver events to interested consumers even when events are generated faster than consumers can receive |
US5742816A (en) | 1995-09-15 | 1998-04-21 | Infonautics Corporation | Method and apparatus for identifying textual documents and multi-mediafiles corresponding to a search topic |
DE19547210A1 (en) * | 1995-12-18 | 1997-06-19 | Basf Ag | 1,7-disubstituted perylene-3,4,9-10-tetracarboxylic acids, their dianhydrides and diimides |
US5964839A (en) | 1996-03-29 | 1999-10-12 | At&T Corp | System and method for monitoring information flow and performing data collection |
US6581056B1 (en) * | 1996-06-27 | 2003-06-17 | Xerox Corporation | Information retrieval system providing secondary content analysis on collections of information objects |
US5961610A (en) | 1996-08-13 | 1999-10-05 | General Electric Company | Systems, methods and apparatus for generating and controlling display of medical images |
US6370563B2 (en) * | 1996-09-30 | 2002-04-09 | Fujitsu Limited | Chat system terminal device therefor display method of chat system and recording medium |
GB2331166B (en) | 1997-11-06 | 2002-09-11 | Ibm | Database search engine |
US6199073B1 (en) * | 1997-04-21 | 2001-03-06 | Ricoh Company, Ltd. | Automatic archiving of documents during their transfer between a peripheral device and a processing device |
JP3008872B2 (en) | 1997-01-08 | 2000-02-14 | 日本電気株式会社 | GUI system automatic operation device and operation macro execution device |
US6006222A (en) | 1997-04-25 | 1999-12-21 | Culliss; Gary | Method for organizing information |
US6282548B1 (en) * | 1997-06-21 | 2001-08-28 | Alexa Internet | Automatically generate and displaying metadata as supplemental information concurrently with the web page, there being no link between web page and metadata |
US5893093A (en) * | 1997-07-02 | 1999-04-06 | The Sabre Group, Inc. | Information search and retrieval with geographical coordinates |
US6014665A (en) * | 1997-08-01 | 2000-01-11 | Culliss; Gary | Method for organizing information |
US6078916A (en) * | 1997-08-01 | 2000-06-20 | Culliss; Gary | Method for organizing information |
US6182068B1 (en) * | 1997-08-01 | 2001-01-30 | Ask Jeeves, Inc. | Personalized search methods |
US6865715B2 (en) * | 1997-09-08 | 2005-03-08 | Fujitsu Limited | Statistical method for extracting, and displaying keywords in forum/message board documents |
US5956722A (en) * | 1997-09-23 | 1999-09-21 | At&T Corp. | Method for effective indexing of partially dynamic documents |
US6073130A (en) * | 1997-09-23 | 2000-06-06 | At&T Corp. | Method for improving the results of a search in a structured database |
US6779030B1 (en) | 1997-10-06 | 2004-08-17 | Worldcom, Inc. | Intelligent network |
US5970249A (en) | 1997-10-06 | 1999-10-19 | Sun Microsystems, Inc. | Method and apparatus for performing byte-code optimization during pauses |
US6061678A (en) * | 1997-10-31 | 2000-05-09 | Oracle Corporation | Approach for managing access to large objects in database systems using large object indexes |
SG118132A1 (en) | 1997-11-13 | 2006-01-27 | Hyperspace Communications Inc | File transfer system |
US6055579A (en) * | 1997-11-17 | 2000-04-25 | Silicon Graphics, Inc. | Distributed control and synchronization of multiple data processors using flexible command queues |
US6289342B1 (en) * | 1998-01-05 | 2001-09-11 | Nec Research Institute, Inc. | Autonomous citation indexing and literature browsing using citation context |
US6346952B1 (en) * | 1999-12-01 | 2002-02-12 | Genesys Telecommunications Laboratories, Inc. | Method and apparatus for summarizing previous threads in a communication-center chat session |
US7233948B1 (en) * | 1998-03-16 | 2007-06-19 | Intertrust Technologies Corp. | Methods and apparatus for persistent control and protection of content |
US7372976B2 (en) | 1998-04-16 | 2008-05-13 | Digimarc Corporation | Content indexing and searching using content identifiers and associated metadata |
US6263348B1 (en) * | 1998-07-01 | 2001-07-17 | Serena Software International, Inc. | Method and apparatus for identifying the existence of differences between two files |
US6604236B1 (en) * | 1998-06-30 | 2003-08-05 | Iora, Ltd. | System and method for generating file updates for files stored on read-only media |
US6275820B1 (en) * | 1998-07-16 | 2001-08-14 | Perot Systems Corporation | System and method for integrating search results from heterogeneous information resources |
US6226630B1 (en) * | 1998-07-22 | 2001-05-01 | Compaq Computer Corporation | Method and apparatus for filtering incoming information using a search engine and stored queries defining user folders |
US6119147A (en) | 1998-07-28 | 2000-09-12 | Fuji Xerox Co., Ltd. | Method and system for computer-mediated, multi-modal, asynchronous meetings in a virtual space |
RU2138076C1 (en) | 1998-09-14 | 1999-09-20 | Закрытое акционерное общество "МедиаЛингва" | Data retrieval system in computer network |
US6275957B1 (en) | 1998-09-21 | 2001-08-14 | Microsoft Corporation | Using query language for provider and subscriber registrations |
JP2000099441A (en) * | 1998-09-25 | 2000-04-07 | Fujitsu Ltd | Device and method for controlling and presenting information |
US6363373B1 (en) * | 1998-10-01 | 2002-03-26 | Microsoft Corporation | Method and apparatus for concept searching using a Boolean or keyword search engine |
US6380924B1 (en) * | 1998-10-22 | 2002-04-30 | Young Yee | Mouse/keyboard capture recorder (MCR) apparatus and methodology |
US6446076B1 (en) | 1998-11-12 | 2002-09-03 | Accenture Llp. | Voice interactive web-based agent system responsive to a user location for prioritizing and formatting information |
US6826553B1 (en) | 1998-12-18 | 2004-11-30 | Knowmadic, Inc. | System for providing database functions for multiple internet sources |
US6199067B1 (en) | 1999-01-20 | 2001-03-06 | Mightiest Logicon Unisearch, Inc. | System and method for generating personalized user profiles and for utilizing the generated user profiles to perform adaptive internet searches |
US6341371B1 (en) | 1999-02-23 | 2002-01-22 | International Business Machines Corporation | System and method for optimizing program execution in a computer system |
US6401239B1 (en) * | 1999-03-22 | 2002-06-04 | B.I.S. Advanced Software Systems Ltd. | System and method for quick downloading of electronic files |
US6490577B1 (en) | 1999-04-01 | 2002-12-03 | Polyvista, Inc. | Search engine with user activity memory |
US6175830B1 (en) * | 1999-05-20 | 2001-01-16 | Evresearch, Ltd. | Information management, retrieval and display system and associated method |
US7225182B2 (en) | 1999-05-28 | 2007-05-29 | Overture Services, Inc. | Recommending search terms using collaborative filtering and web spidering |
US6467052B1 (en) * | 1999-06-03 | 2002-10-15 | Microsoft Corporation | Method and apparatus for analyzing performance of data processing system |
US6592627B1 (en) * | 1999-06-10 | 2003-07-15 | International Business Machines Corporation | System and method for organizing repositories of semi-structured documents such as email |
US6560655B1 (en) * | 1999-06-22 | 2003-05-06 | Microsoft Corporation | Synchronization manager for standardized synchronization of separate programs |
US6873982B1 (en) * | 1999-07-16 | 2005-03-29 | International Business Machines Corporation | Ordering of database search results based on user feedback |
JP3791879B2 (en) | 1999-07-19 | 2006-06-28 | 富士通株式会社 | Document summarization apparatus and method |
US6853950B1 (en) | 1999-07-20 | 2005-02-08 | Newsedge Corporation | System for determining changes in the relative interest of subjects |
US6532023B1 (en) | 1999-08-12 | 2003-03-11 | International Business Machines Corporation | Recording selected applet events of a user interaction sequence |
US6631345B1 (en) * | 1999-08-12 | 2003-10-07 | International Business Machines Corporation | Recording, storing, and emulating user interaction events |
US6513036B2 (en) | 1999-08-13 | 2003-01-28 | Mindpass A/S | Method and apparatus for searching and presenting search result from one or more information sources based on context representations selected from the group of other users |
US6321228B1 (en) * | 1999-08-31 | 2001-11-20 | Powercast Media, Inc. | Internet search system for retrieving selected results from a previous search |
US6681247B1 (en) | 1999-10-18 | 2004-01-20 | Hrl Laboratories, Llc | Collaborator discovery method and system |
US6526405B1 (en) | 1999-12-17 | 2003-02-25 | Microsoft Corporation | Determining similarity between event types in sequences |
US6480837B1 (en) | 1999-12-16 | 2002-11-12 | International Business Machines Corporation | Method, system, and program for ordering search results using a popularity weighting |
US6981040B1 (en) | 1999-12-28 | 2005-12-27 | Utopy, Inc. | Automatic, personalized online information and product services |
US6662226B1 (en) * | 2000-01-27 | 2003-12-09 | Inbit, Inc. | Method and system for activating and capturing screen displays associated with predetermined user interface events |
US6834308B1 (en) | 2000-02-17 | 2004-12-21 | Audible Magic Corporation | Method and apparatus for identifying media content presented on a media playing device |
US6877027B1 (en) * | 2000-02-19 | 2005-04-05 | Hewlett-Packard Development Company, L.P. | System and method for providing synchronization verification of multiple applications across remote systems |
US6691175B1 (en) * | 2000-02-25 | 2004-02-10 | Sun Microsystems, Inc. | Method and apparatus for managing data propagation between software modules |
US20020049608A1 (en) * | 2000-03-03 | 2002-04-25 | Hartsell Neal D. | Systems and methods for providing differentiated business services in information management environments |
US6728763B1 (en) * | 2000-03-09 | 2004-04-27 | Ben W. Chen | Adaptive media streaming server for playing live and streaming media content on demand through web client's browser with no additional software or plug-ins |
US6665715B1 (en) * | 2000-04-03 | 2003-12-16 | Infosplit Inc | Method and systems for locating geographical locations of online users |
GB2361555A (en) * | 2000-04-17 | 2001-10-24 | Apama Inc | Method of evaluating queries against received event information |
US7500249B2 (en) * | 2000-05-02 | 2009-03-03 | Sun Microsystems, Inc. | Cluster event service method and system |
US6697838B1 (en) | 2000-05-03 | 2004-02-24 | Software Leader, Llc | Method and system for annotating information resources in connection with browsing, in both connected and disconnected states |
GB0012354D0 (en) * | 2000-05-22 | 2000-07-12 | Nokia Networks Oy | A method and system for providing location dependent information |
EP1316026A2 (en) | 2000-05-30 | 2003-06-04 | Koki Uchiyama | Distributed monitoring system providing knowledge services |
US6711572B2 (en) * | 2000-06-14 | 2004-03-23 | Xosoft Inc. | File system for distributing content in a data network and related methods |
JP2004531780A (en) | 2000-06-22 | 2004-10-14 | マイクロソフト コーポレーション | Distributed computing service platform |
GB0016974D0 (en) | 2000-07-12 | 2000-08-30 | Univ Salford The | Document retrieval system |
US7035852B2 (en) * | 2000-07-21 | 2006-04-25 | International Business Machines Corporation | Implementing a message queuing interface (MQI) indexed queue support that adds a key to the index on put commit |
US7080073B1 (en) | 2000-08-18 | 2006-07-18 | Firstrain, Inc. | Method and apparatus for focused crawling |
US6907577B2 (en) * | 2000-09-06 | 2005-06-14 | Trace Tervo | System and method for accessing screen fields, functions and programs using a simple single key stroke |
US6934740B1 (en) | 2000-09-19 | 2005-08-23 | 3Com Corporation | Method and apparatus for sharing common data objects among multiple applications in a client device |
US6614729B2 (en) * | 2000-09-26 | 2003-09-02 | David D. Griner | System and method of creating digital recordings of live performances |
US20020042789A1 (en) * | 2000-10-04 | 2002-04-11 | Zbigniew Michalewicz | Internet search engine with interactive search criteria construction |
US7680672B2 (en) | 2000-10-20 | 2010-03-16 | Adobe Systems, Incorporated | Event collection architecture |
US20020073076A1 (en) | 2000-12-11 | 2002-06-13 | Yongjie Xu | System and method for enabling off-line database functionality |
US7136881B2 (en) * | 2000-12-15 | 2006-11-14 | International Business Machines Corporation | Method and system for processing directory events |
US7143088B2 (en) | 2000-12-15 | 2006-11-28 | The Johns Hopkins University | Dynamic-content web crawling through traffic monitoring |
US7440943B2 (en) | 2000-12-22 | 2008-10-21 | Xerox Corporation | Recommender system and method |
US6983310B2 (en) * | 2000-12-29 | 2006-01-03 | International Business Machines Corporation | System and method for providing search capabilties on a wireless device |
US6772143B2 (en) * | 2001-01-02 | 2004-08-03 | Sprint Spectrum L.P. | Method and system for managing messages |
US20020091972A1 (en) | 2001-01-05 | 2002-07-11 | Harris David P. | Method for predicting machine or process faults and automated system for implementing same |
US6714939B2 (en) * | 2001-01-08 | 2004-03-30 | Softface, Inc. | Creation of structured data from plain text |
US20020091568A1 (en) | 2001-01-10 | 2002-07-11 | International Business Machines Corporation | Personalized profile based advertising system and method with integration of physical location using GPS |
US6658423B1 (en) | 2001-01-24 | 2003-12-02 | Google, Inc. | Detecting duplicate and near-duplicate files |
US7168093B2 (en) | 2001-01-25 | 2007-01-23 | Solutionary, Inc. | Method and apparatus for verifying the integrity and security of computer networks and implementation of counter measures |
WO2002079993A1 (en) * | 2001-03-29 | 2002-10-10 | Reallegal.Com | Methods for synchronizing on-line and off-line transcript projects |
US7856420B2 (en) * | 2001-04-19 | 2010-12-21 | Hewlett-Packard Development Company, L.P. | Zero latency enterprise enriched publish/subscribe |
US20020184406A1 (en) | 2001-05-29 | 2002-12-05 | International Business Machines Corporation | Method and system for handling window-based graphical events |
US7293014B2 (en) * | 2001-06-18 | 2007-11-06 | Siebel Systems, Inc. | System and method to enable searching across multiple databases and files using a single search |
US20030126136A1 (en) * | 2001-06-22 | 2003-07-03 | Nosa Omoigui | System and method for knowledge retrieval, management, delivery and presentation |
US20040230572A1 (en) | 2001-06-22 | 2004-11-18 | Nosa Omoigui | System and method for semantic knowledge retrieval, management, capture, sharing, discovery, delivery and presentation |
US6802055B2 (en) | 2001-06-27 | 2004-10-05 | Microsoft Corporation | Capturing graphics primitives associated with any display object rendered to a graphical user interface |
US20030028506A1 (en) * | 2001-06-29 | 2003-02-06 | Lin Yu | Deferred index building systems, methods and computer program products for storing temporally spaced apart bursts of data records in a database |
CN1547720A (en) | 2001-07-05 | 2004-11-17 | System and method for generating and propagating business events | |
US20030018521A1 (en) | 2001-07-17 | 2003-01-23 | International Business Machines Corporation | Advertising based upon events reported from a GPS enabled event report system |
US8285701B2 (en) | 2001-08-03 | 2012-10-09 | Comcast Ip Holdings I, Llc | Video and digital multimedia aggregator remote content crawler |
US7082365B2 (en) * | 2001-08-16 | 2006-07-25 | Networks In Motion, Inc. | Point of interest spatial rating search method and system |
JP2003067306A (en) * | 2001-08-24 | 2003-03-07 | Hitachi Ltd | Storage management method for electronic mail |
US7076483B2 (en) | 2001-08-27 | 2006-07-11 | Xyleme Sa | Ranking nodes in a graph |
US7328242B1 (en) * | 2001-11-09 | 2008-02-05 | Mccarthy Software, Inc. | Using multiple simultaneous threads of communication |
IL162008A0 (en) * | 2001-11-15 | 2005-11-20 | Visto Corp | System and methods for asychronous synchronization |
US7363590B2 (en) * | 2001-11-27 | 2008-04-22 | International Business Machines Corporation | Calendar bar interface for electronic mail interaction |
US20030131061A1 (en) * | 2001-11-28 | 2003-07-10 | Active Buddy, Inc. | Transparent proxy server for instant messaging system and methods |
JP2003242176A (en) * | 2001-12-13 | 2003-08-29 | Sony Corp | Information processing device and method, recording medium and program |
US20030123442A1 (en) * | 2001-12-27 | 2003-07-03 | Drucker Benjamin T. | Distributed usage metering of multiple networked devices |
US6947924B2 (en) | 2002-01-07 | 2005-09-20 | International Business Machines Corporation | Group based search engine generating search results ranking based on at least one nomination previously made by member of the user group where nomination system is independent from visitation system |
CN1186737C (en) | 2002-02-05 | 2005-01-26 | 国际商业机器公司 | Method and system for queuing uncalled web based on path |
US20030154071A1 (en) | 2002-02-11 | 2003-08-14 | Shreve Gregory M. | Process for the document management and computer-assisted translation of documents utilizing document corpora constructed by intelligent agents |
US7062592B2 (en) * | 2002-03-25 | 2006-06-13 | Intel Corporation | Selecting a queue for service in a queuing system |
JP4082059B2 (en) * | 2002-03-29 | 2008-04-30 | ソニー株式会社 | Information processing apparatus and method, recording medium, and program |
US7016919B2 (en) | 2002-03-29 | 2006-03-21 | Agilent Technologies, Inc. | Enterprise framework and applications supporting meta-data and data traceability requirements |
US7096255B2 (en) * | 2002-05-21 | 2006-08-22 | Bellsouth Intellectual Property Corp. | System and method for providing a roster list of temporary contacts having expiration periods designated by a user in an instant messaging environment |
US7016914B2 (en) * | 2002-06-05 | 2006-03-21 | Microsoft Corporation | Performant and scalable merge strategy for text indexing |
US6968509B1 (en) | 2002-06-05 | 2005-11-22 | Microsoft Corporation | Recording of user-driven events within a computer application |
US20040002959A1 (en) * | 2002-06-26 | 2004-01-01 | International Business Machines Corporation | Method and system for providing context sensitive support for data processing device user search requests |
US20040003038A1 (en) * | 2002-06-27 | 2004-01-01 | Microsoft Corporation | Live content processing for online presentation |
JP4452012B2 (en) * | 2002-07-04 | 2010-04-21 | ヒューレット・パッカード・カンパニー | Document uniqueness evaluation method |
JP2004062451A (en) * | 2002-07-26 | 2004-02-26 | Sharp Corp | Information presenting method, information presenting device, information presenting program, computer readable recording medium having information presenting program recorded thereon and schedule managing method |
US20040031027A1 (en) | 2002-08-08 | 2004-02-12 | Hiltgen Daniel K. | System for updating diverse file versions |
US7099887B2 (en) | 2002-08-08 | 2006-08-29 | International Business Machines Corporation | Hierarchical environments supporting relational schemas |
US20070022155A1 (en) * | 2002-08-22 | 2007-01-25 | Owens David H | Method and system for integrating enterprise software applications with desktop software applications |
US7370035B2 (en) * | 2002-09-03 | 2008-05-06 | Idealab | Methods and systems for search indexing |
US7933957B2 (en) * | 2002-09-17 | 2011-04-26 | At&T Intellectual Property Ii, L.P. | Tracking email and instant messaging (IM) thread history |
WO2004027649A1 (en) * | 2002-09-18 | 2004-04-01 | Netezza Corporation | Asymmetric streaming record data processor method and apparatus |
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US7254573B2 (en) | 2002-10-02 | 2007-08-07 | Burke Thomas R | System and method for identifying alternate contact information in a database related to entity, query by identifying contact information of a different type than was in query which is related to the same entity |
US7360096B2 (en) * | 2002-11-20 | 2008-04-15 | Microsoft Corporation | Securely processing client credentials used for Web-based access to resources |
GB0228447D0 (en) * | 2002-12-06 | 2003-01-08 | Nicholls Charles M | System for detecting and interpreting transactions events or changes in computer systems |
US20040133560A1 (en) | 2003-01-07 | 2004-07-08 | Simske Steven J. | Methods and systems for organizing electronic documents |
US20040187075A1 (en) | 2003-01-08 | 2004-09-23 | Maxham Jason G. | Document management apparatus, system and method |
US6864901B2 (en) * | 2003-02-11 | 2005-03-08 | Academia Sinica | Real-time screen recording system |
US20040193596A1 (en) * | 2003-02-21 | 2004-09-30 | Rudy Defelice | Multiparameter indexing and searching for documents |
US7930301B2 (en) | 2003-03-31 | 2011-04-19 | Microsoft Corporation | System and method for searching computer files and returning identified files and associated files |
US7467390B2 (en) | 2003-04-01 | 2008-12-16 | International Business Machines Corporation | Enhanced staged event-driven architecture |
US7480716B2 (en) * | 2003-04-28 | 2009-01-20 | International Business Machines Corporation | Non-invasive collection of data |
US7412491B2 (en) * | 2003-04-30 | 2008-08-12 | International Business Machines Corporation | Method and apparatus for enhancing instant messaging systems |
US7694223B2 (en) | 2003-06-04 | 2010-04-06 | Sony Computer Entertainment Inc. | Methods and systems for recording user actions in computer programs |
US7668888B2 (en) | 2003-06-05 | 2010-02-23 | Sap Ag | Converting object structures for search engines |
US20040255301A1 (en) | 2003-06-13 | 2004-12-16 | Andrzej Turski | Context association schema for computer system architecture |
US7162473B2 (en) * | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
US7577939B2 (en) | 2003-06-27 | 2009-08-18 | International Business Machines Corporation | Method, system and program product for sharing source code over a network |
US7565425B2 (en) * | 2003-07-02 | 2009-07-21 | Amazon Technologies, Inc. | Server architecture and methods for persistently storing and serving event data |
US7330536B2 (en) * | 2003-09-05 | 2008-02-12 | Emc Corporation | Message indexing and archiving |
US20050060719A1 (en) * | 2003-09-12 | 2005-03-17 | Useractive, Inc. | Capturing and processing user events on a computer system for recording and playback |
US7454417B2 (en) * | 2003-09-12 | 2008-11-18 | Google Inc. | Methods and systems for improving a search ranking using population information |
US7487235B2 (en) | 2003-09-24 | 2009-02-03 | Dell Products L.P. | Dynamically varying a raid cache policy in order to optimize throughput |
US7499974B2 (en) * | 2003-09-30 | 2009-03-03 | International Business Machines Corporation | Instant message user management |
US20050080866A1 (en) * | 2003-10-14 | 2005-04-14 | Kent Larry G. | Selectively displaying time indications for instant messaging (IM) messages |
US7457872B2 (en) | 2003-10-15 | 2008-11-25 | Microsoft Corporation | On-line service/application monitoring and reporting system |
US8150923B2 (en) * | 2003-10-23 | 2012-04-03 | Microsoft Corporation | Schema hierarchy for electronic messages |
US20050114487A1 (en) | 2003-11-12 | 2005-05-26 | Jin Peng | Notification framework and method of distributing notification |
US7475406B2 (en) * | 2003-12-15 | 2009-01-06 | International Business Machines Corporation | Event notification structure for dynamically aggregated logical components |
US7383307B2 (en) * | 2004-01-07 | 2008-06-03 | International Business Machines Corporation | Instant messaging windowing for topic threads |
US7194451B2 (en) * | 2004-02-26 | 2007-03-20 | Microsoft Corporation | Database monitoring system |
-
2004
- 2004-06-30 US US10/881,584 patent/US7725508B2/en not_active Expired - Fee Related
-
2005
- 2005-03-30 WO PCT/US2005/010985 patent/WO2005098594A2/en active Application Filing
- 2005-03-30 EP EP05731427A patent/EP1745360B1/en not_active Not-in-force
- 2005-03-30 AT AT05731427T patent/ATE509319T1/en not_active IP Right Cessation
- 2005-03-30 JP JP2007506583A patent/JP4812747B2/en active Active
- 2005-03-30 ES ES05731427T patent/ES2373297T3/en active Active
Also Published As
Publication number | Publication date |
---|---|
JP4812747B2 (en) | 2011-11-09 |
JP2007534057A (en) | 2007-11-22 |
EP1745360A2 (en) | 2007-01-24 |
WO2005098594A2 (en) | 2005-10-20 |
ATE509319T1 (en) | 2011-05-15 |
ES2373297T3 (en) | 2012-02-02 |
US7725508B2 (en) | 2010-05-25 |
EP1745360A4 (en) | 2008-04-23 |
US20050234848A1 (en) | 2005-10-20 |
WO2005098594A3 (en) | 2007-06-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP1745360B1 (en) | Methods and systems for information capture and retrieval | |
AU2005231112B2 (en) | Methods and systems for structuring event data in a database for location and retrieval | |
US10180980B2 (en) | Methods and systems for eliminating duplicate events | |
US9836544B2 (en) | Methods and systems for prioritizing a crawl | |
US7941439B1 (en) | Methods and systems for information capture | |
US9672232B1 (en) | Systems and methods for selectively storing event data | |
US7333976B1 (en) | Methods and systems for processing contact information | |
US7707142B1 (en) | Methods and systems for performing an offline search | |
US7580568B1 (en) | Methods and systems for identifying an image as a representative image for an article | |
US7412708B1 (en) | Methods and systems for capturing information | |
US20090276408A1 (en) | Systems And Methods For Generating A User Interface | |
US20080059419A1 (en) | Systems and methods for providing search results | |
US20050234929A1 (en) | Methods and systems for interfacing applications with a search engine | |
US20050223061A1 (en) | Methods and systems for processing email messages | |
US7680888B1 (en) | Methods and systems for processing instant messenger messages | |
US8631076B1 (en) | Methods and systems for associating instant messenger events | |
US7499958B1 (en) | Systems and methods of replicating all or part of a data store | |
US7581227B1 (en) | Systems and methods of synchronizing indexes | |
US9959300B1 (en) | Systems and methods for article location and retrieval |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20061026 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HU IE IS IT LI LT LU MC NL PL PT RO SE SI SK TR |
|
AX | Request for extension of the european patent |
Extension state: AL BA HR LV MK YU |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: WANG, NINIANEInventor name: KHAN, OMAR, HABIBInventor name: IONESCU, MIHAI, FLORINInventor name: MARMAROS, DAVIDInventor name: LAWRENCE, STEPHEN, R. C/O GOOGLE INC |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: LAWRENCE, STEPHEN, R. C/O GOOGLE INCInventor name: IONESCU, MIHAI, FLORINInventor name: KHAN, OMAR, HABIBInventor name: WANG, NINIANEInventor name: MARMAROS, DAVID |
|
DAX | Request for extension of the european patent (deleted) | ||
PUAK | Availability of information related to the publication of the international search report |
Free format text: ORIGINAL CODE: 0009015 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/30 20060101AFI20070713BHEP |
|
A4 | Supplementary search report drawn up and despatched |
Effective date: 20080325 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 11/30 20060101AFI20080318BHEP |
|
17Q | First examination report despatched |
Effective date: 20080728 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/30 20060101AFI20100923BHEP |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HU IE IS IT LI LT LU MC NL PL PT RO SE SI SK TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602005027982Country of ref document: DEEffective date: 20110622 |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: T3 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110912Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110911Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110812Ref country code: BEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: NVRepresentative=s name: SERVOPATENT GMBH |
|
REG | Reference to a national code |
Ref country code: ESRef legal event code: FG2ARef document number: 2373297Country of ref document: ESKind code of ref document: T3Effective date: 20120202 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
26N | No opposition filed |
Effective date: 20120214 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602005027982Country of ref document: DEEffective date: 20120214 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20120331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110811 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20110511 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20120330 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20050330 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 11 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602005027982Country of ref document: DERepresentative=s name: VENNER SHIPLEY LLP, GB |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 12 |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 13 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20170327Year of fee payment: 13Ref country code: CHPayment date: 20170327Year of fee payment: 13Ref country code: NLPayment date: 20170326Year of fee payment: 13 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: IEPayment date: 20170329Year of fee payment: 13Ref country code: GBPayment date: 20170327Year of fee payment: 13 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20170329Year of fee payment: 13 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: ESPayment date: 20170328Year of fee payment: 13 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602005027982Country of ref document: DERepresentative=s name: VENNER SHIPLEY LLP, GBRef country code: DERef legal event code: R081Ref document number: 602005027982Country of ref document: DEOwner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE, INC., MOUNTAIN VIEW, CALIF., US |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: CDOwner name: GOOGLE INC., USEffective date: 20180213Ref country code: FRRef legal event code: CJEffective date: 20180213 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R119Ref document number: 602005027982Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MMEffective date: 20180401 |
|
GBPC | Gb: european patent ceased through non-payment of renewal fee |
Effective date: 20180330 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180401 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181002Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180330 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: GBFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180330Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180331Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FRFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180331 |
|
REG | Reference to a national code |
Ref country code: ESRef legal event code: FD2AEffective date: 20190911 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180331 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |