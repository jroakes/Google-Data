EP3132361A1 - Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource - Google Patents
Methods and systems for generating a stable identifier for nodes likely including primary content within an information resourceInfo
- Publication number
- EP3132361A1 EP3132361A1 EP15719545.4A EP15719545A EP3132361A1 EP 3132361 A1 EP3132361 A1 EP 3132361A1 EP 15719545 A EP15719545 A EP 15719545A EP 3132361 A1 EP3132361 A1 EP 3132361A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- identifier
- content
- nodes
- node
- container
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Ceased
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9558—Details of hyperlinks; Management of linked annotations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
Definitions
- Information resources can include primary content and content slots that serve as placeholders for third-party content items, such as creatives.
- third-party content items are inserted in the content slots and provided for display alongside the primary content.
- the content slots in which third-party content items are inserted are typically defined manually in the web page code.
- At least one aspect is directed to a method of generating a stable identifier for nodes likely to include primary content of an information resource.
- a processor identifies, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules .
- the processor determines one or more container nodes containing one or more of the identified content-related DOM nodes.
- the processor generates, for each of the container nodes, one or more identifiers corresponding to the container node.
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds.
- DOM Document Object Model
- the processor identifies, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node.
- the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name.
- the stable class name includes any class name that does not end in a number.
- selecting one of the identifiers of the subset as the stable identifier includes identifying an identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
- the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- a system for generating a stable identifier for nodes likely to include primary content of an information resource includes a data processing system configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules , determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
- DOM Document Object Model
- the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node.
- the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name.
- the stable class name includes any class name that does not end in a number.
- selecting one of the identifiers of the subset as a stable identifier includes identifying an identifier of the identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
- the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- a computer-readable storage medium has computer- executable instructions, which when executed by a computer, cause the computer to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules , determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
- DOM Document Object Model
- FIG. 1 is a block diagram depicting one implementation of an environment for automatically generating a stable identifier for primary content detected within an information resource, according to an illustrative implementation
- FIG. 2A is a screenshot of a display of an information resource including a plurality of posts.
- FIG. 2B is a screenshot of a display of the information resource shown in FIG. 2A but including a plurality of creatives inserted between the plurality of posts.
- FIG. 3A is a screenshot of a display of an information resource including an article including a plurality of paragraphs.
- FIG. 3B is a screenshot of a display of the information resource shown in FIG. 3 A but including a creative inserted between the plurality of paragraphs.
- FIG. 4 is a flow diagram depicting one implementation of the steps taken to generate a stable identifier for primary content detected within an information resource
- FIG. 5 is a block diagram illustrating an implementation of a general architecture for a computer system that may be employed to implement various elements of the systems and methods described and illustrated herein.
- the present disclosure relates to generating a stable identifier for primary content detected within an information resource.
- a data processing system can generate a stable identifier for the detected primary content.
- the stable identifier can be used to reference primary content on future renderings of the information resource. For example, once the data processing system generates a stable identifier for the primary content included in the information resource, the data processing system can dynamically insert creatives in the information resource when the information resource is rendered at a computing device.
- Information resources are often very complicated. For example, many information resources include numerous images and distinct sections of text.
- the information resources can include menus, headers, sidebars, footers, ads, widgets as well as what might be considered the actual primary content. Although a user viewing the information resource can easily
- Primary content on information resources can often be presented in one of two forms.
- the primary content can be presented as a list of posts. Each post is its own distinct piece of content about a certain subject, but together the posts make up the primary content of the web page.
- the primary content can be presented as a single long form post or article.
- the primary content on an information resource may generally be contained in a container associated with a stable identifier.
- the present disclosure provides methods and systems for automatically generating stable identifiers for the detected primary content of an information resource.
- the generated stable identifiers can be used to insert content slots for serving creatives or third-party content items on the information resource.
- the present disclosure provides methods and systems for automatically detecting these pieces of primary content.
- each of the posts may be identified as a distinct piece of content.
- the whole of the primary content should be detected as a single piece of content.
- identifiers allow the posts or articles on a web page to be very quickly and efficiently accessed by JavaScript once the page has been rendered in a browser. This allows for creatives to be inserted within the primary content of a page dynamically.
- a creative can be inserted after the first paragraph of each post when the web page is presenting the primary content as a list of posts.
- a creative can be inserted after the first three paragraphs of an article when the web page is presenting the primary content as a single piece of content.
- a processor can be configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content based on an identifier associated with the nodes, determine one or more container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier.
- DOM Document Object Model
- FIG. 1 illustrates an system 100 for generating a stable identifier for primary content detected within an information resource via at least one computer network, such as the network 105.
- the network 105 can include computer networks such as the internet, local, wide, metro or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile phone communication networks, and combinations thereof.
- the system 100 can also include at least one data processing system 1 10, e.g., at least one logic device such as a computing device or server having a processor to communicate via the network 105, for instance with at least one content provider computing device 1 15, at least one content publisher computing device 120, or at least one end user computing device 125.
- the data processing system 1 10 can include at least one server.
- the data processing system 110 can include a plurality of servers located in at least one data center or server farm.
- the data processing system 1 10 includes a content placement system, e.g., an ad server or ad placement system.
- the data processing system 1 10 can include at least one primary content detection module 130, at least one stable identifier generation module 132, at least one content insertion module 134 and at least one database 140.
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can each include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with the database 140 and with other computing devices (e.g., the content provider computing device 1 15, the content publisher computing device 120, or the end user computing device 125) via the network 105.
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can include or execute at least one computer program or at least one script.
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can be separate components, a single component, or part of the data processing system 110.
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier, for instance.
- DOM Document Object Model
- the content provider computing devices 1 15 can include servers or other computing devices operated by a content provider entity to provide content items such as advertisements for display on information resources at the end user computing device 125.
- the content provided by the content provider computing device 1 15 can include third party content items or creatives
- the content provider computing device 115 can provide or be the source of ads or other content items for display in content slots of content web pages such as a web page of a company where the primary content of the web page is provided by the company, or for display on a search results landing page provided by a search engine.
- the content items associated with the content provider computing device 1 15 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other end user computing device 125.
- the content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the network 105.
- the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page.
- the primary content can include content other than that provided by the content publisher computing device 120, and the web page can include content slots configured for the display of third party content items (e.g., ads) from the content provider computing devices 115.
- the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website.
- the web pages can include content slots configured for the display of third party content items such as ads of the content provider computing device 115.
- the content publisher computing device 120 includes a search engine computing device (e.g. server) of a search engine operator that operates a search engine website.
- the primary content of search engine web pages e.g., a results or landing web page
- the end user computing devices 125 can include computing devices configured to communicate via the network 105 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 1 15 (e.g., third party content items such as ads configured for display in a content slot of a web page).
- the end user computing device 125, the content provider computing device 1 15, and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, end user computing devices, consumer computing devices, servers, clients, and other computing devices.
- the end user computing device 125, the content provider computing device 115, and the content publisher computing device 120 can include user interfaces such as microphones, speakers, touchscreens, keyboards, pointing devices, a computer mouse, touchpad, or other input or output interfaces.
- the content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 may be any number of different user electronic devices, for example, a laptop computer, a desktop computer, a tablet computer, a smartphone, a digital video recorder, a set-top box for a television, a video game console, or any other computing device configured to communicate via the network 105.
- the content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 can include a processor and a memory, i.e., a processing circuit.
- the memory stores machine instructions that, when executed by processor, cause processor to perform one or more of the operations described herein.
- the processor may include a microprocessor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), etc., or combinations thereof.
- the memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing the processor with program
- the memory may further include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random-access memory (RAM), electrically-erasable ROM (EEPROM), erasable-programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions.
- the instructions may include code from any suitable computer-programming language such as, but not limited to, C, C++, C#, Java, JavaScript, Perl, Python and Visual Basic.
- the content provider computing devices 1 15, the content publisher computing device 120 and the end user computing devices 125 may also include one or more user interface devices.
- a user interface device refers to any electronic device that conveys data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, etc.) and/or converts received sensory information from a user into electronic signals (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.).
- the one or more user interface devices may be internal to a housing of the content provider computing devices 1 15, the content publisher computing device 120 and the end user computing devices 125 (e.g., a built-in display, microphone, etc.) or external to the housing of content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 (e.g., a monitor connected to the user computing device 115, a speaker connected to the user computing device 1 15, etc.), according to various implementations.
- the content provider computing devices 1 15, the content publisher computing device 120 and the end user computing devices 125 may include an electronic display, which visually displays web pages using webpage data received from one or more content sources and/or from the data processing system 110 via the network 105.
- a content placement campaign manager or advertiser can communicate with the data processing system 110 via the content provider computing device 115.
- the advertiser can communicate with the data processing system 110 via the content provider computing device 115.
- the advertiser can communicate with the data processing system 110 via the content provider computing device 115.
- the primary content detection module 130 can be part of, or can include scripts executed by, one or more servers in the data processing system 1 10.
- the primary content detection module 130 can be designed, constructed or configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content.
- Examples of primary content can include posts, articles, or other content items that the web publisher has provided.
- Examples of content that may not be considered primary content can include advertisements, widgets, or links not related to the primary content.
- the primary content detection module 130 can be configured to identify all of the content-related Document Object Model (DOM) nodes included in the information resource.
- DOM Document Object Model
- the primary content detection module 130 can identify content-related DOM nodes by inspecting the DOM tree of the information resource. The primary content detection module 130 can identify each node included within the information resource and determine whether the identified node is a content-related DOM node.
- the primary content detection module 130 can determine that a DOM node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the primary content detection module
- the primary content detection module 130 can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title.
- the primary content detection module 130 can determine that a node is a content-related DOM node if the node contains content corresponding to a post or article, or any other content that the publisher of the information resource considers to be primary content.
- a node can be defined as an effective text node if the node is a text node containing visible text. In some implementations, a node can be defined as an effective text node if all of the children of the node are inline nodes and at least one of the node's children is an effective text node. In some implementations, a node can be defined as an effective link node if the node is an effective text node that is the descendent of an anchor tag, such as an A tag. In some implementations, the node can be defined as an effective link node if the node has at least one child and all of the node's children are effective links.
- a node can be defined as a title if the node is an effective text node and the node, or a descendent of the node is a header tag, such as an HI, H2, H3, H4, H5, or H6 tag.
- a node may be deemed to start with a title if the node is a title.
- the node may be deemed to start with a title if the node is not a paragraph and a title is encountered before a paragraph is encountered when traversing the node's subtree.
- the primary content detection module 130 can be configured to determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes.
- a node of the DOM tree may be identified as a container node if the node meets two criteria. The first criteria is that either the node has a tag type of ARTICLE or the node has a tag type of DIV, INS or TD and the node has at least one stable class name.
- a class name may be considered stable if the class name does not end in a number.
- a class name is considered to be stable if it does not match the following regular expression: / ⁇ .*[09]+$/.
- the second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node is a post.
- CSS Cascading Style Sheet
- Examples of CSS class types that indicate that the node is a post can include 'post' or 'typepost.'
- the primary content detection module 130 can determine, for each of the identified content-related DOM nodes, the container node nearest to the content- related DOM node.
- the container node nearest to a given content- related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node.
- the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes.
- the primary content detection module 130 can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node..
- the primary content detection module 130 can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes.
- a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
- the primary content detection module 130 can maintain a list of container nodes. The primary content detection module 130 can include each of the container nodes determined for each of the content-related DOM nodes in the list.
- the primary content detection module 130 can also include each of the equivalent container ancestor nodes determined for each container node. In some implementations, the primary content detection module 130 can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
- the stable identifier generation module 132 can be part of, or can include scripts executed by, one or more servers in the data processing system 1 10.
- the stable identifier generation module 132 can be designed, constructed or configured to generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node.
- the stable identifier generation module 132 can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
- the stable identifier generation module 132 can generate an identifier based on the type of tag associated with the container node for which the stable identifier generation module 132 is generating the identifier. In some implementations, the stable identifier generation module 132 can generate an identifier based on the class name associated with the container node. In some implementations, the stable identifier generation module 132 can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node, the stable identifier generation module 132 identifies the type of tag associated with the container node and a class name associated with the tag.
- the stable identifier generation module 132 can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type.
- the tag name of the identifier can be ARTICLE.
- the stable identifier generation module 132 can generate an identifier having a tag name and an ID if the ID is stable.
- a stable ID can be any ID that does not end in a number
- the stable identifier generation module 132 can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE.
- the identifier can include the tag type and a single stable class name.
- the stable class name can correspond to a class name that does not end with a number.
- the stable identifier generation module 132 can be configured to maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the stable identifier generation module 132 may remove any duplicates in the list of identifiers generated for the container nodes.
- the stable identifier generation module 132 can be configured to sort the identifiers generated for the container nodes based on a preference policy.
- the preference policy can include one or more rules for sorting the potential identifiers.
- a good identifier generated by the stable identifier generation module 132 should be stable, should reliably identify all container nodes on the information resource that contain the nodes likely to include primary content and should not identify any other nodes included in the information resource.
- the stable identifier generation module 132 can be configured to compare the identifiers included in the list to sort the identifiers in order of preference.
- the stable identifier generation module 132 can compare two or more first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name. As such, if one of the identifiers has only a tag name, that identifier will be ranked higher than the identifier not having only a tag name. If the stable identifier generation module 132 identifies that none of the identifiers includes only a tag name, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and an ID.
- Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID. If the stable identifier generation module 132 identifies that none of the identifiers includes a tag name and an ID, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name.
- the stable identifier generation module 132 determines which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name. As such, if one of the identifiers has a tag name and a more preferred class name, that identifier will be ranked higher than the identifier not having the more preferred class name.
- the class name 'post-container' is more preferred than the class names 'post' and 'type-post' and the class name 'post' is more preferred than the class name 'type-post.
- an identifier having a tag name DIV and class name 'post' is preferred over an identifier having a tag type DIV and a class name 'another- class-name' since the class name 'post' is a preferred class name.
- an identifier having a tag name DIV and class name 'another-class-name' is preferred over an identifier having a tag type DIV and a class name 'class-name' since the class name 'another- class-name' is longer than the class name 'class-name.
- the stable identifier generation module 132 can be configured to associate each of the identifiers generated by the stable identifier generation module 132 to the container nodes determined by the primary content detection module 130.
- the stable identifier generation module 132 can construct a map that maps each generated identifier to all of the container nodes from which the stable identifier generation module 132 was able to generate the identifier.
- the identifiers can serve as keys in the constructed map.
- the stable identifier generation module 132 can be configured to determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds. In some implementations, the stable identifier generation module 132 can be configured to perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that are referenced by the identifier. For each of the identified nodes corresponding to the identifier, the stable identifier generation module 132 can determine that the identified node is either in the list of container nodes maintained by the primary content detection module 130 or that the node meets the criteria for being identified as a container node.
- the stable identifier generation module 132 can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the stable identifier generation module 132 can determine a content identification content identification score for the identifier.
- the content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource. In some implementations, the content identification score can indicate an ability of the identifier to identify primary content.
- the stable identifier generation module 132 can be configured to determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource.
- the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
- the stable identifier generation module 132 can be configured to determine the content identification score based on the following formula: where:
- CPARA is the number of characters in nodes likely to include primary content that are contained in container nodes associated with the potential identifier
- CTOTAL is the total number of characters in container nodes associated with the potential identifier
- PCONTAINED is the number of nodes likely to include primary content that are
- PTOTAL is the total number of nodes likely to include primary content on the
- Ki is a tunable parameter (for example, 0.5).
- K.2 is a tunable parameter (for example, 1).
- the stable identifier generation module 132 can be configured to identify the identifier having the largest content identification score. The stable identifier generation module 132 can then select the identifier from the plurality of generated identifiers as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content.
- the stable identifier generation module 132 can be configured to store the identified potential identifier with the information resource.
- the identified potential identifier can be associated with each of the container nodes including primary content. In this way, when the information resource is accessed for rendering at a later time, the identifiers identifying the container nodes including the primary content can be used to easily identify the container nodes including the primary content. In some implementations, creatives can be inserted near the nodes likely to include primary content, thereby improving conversion rates of the creatives.
- the content insertion module 134 can be part of, or can include scripts executed by, one or more servers in the data processing system 110.
- the content insertion module 134 can be designed, constructed or configured to insert a creative between adjacent container nodes that contain nodes likely to include primary content.
- the content insertion module 134 can identify the container nodes using the stable identifier selected by the stable identifier generation module 132.
- the content insertion module 134 can request access to the information resource, identify the generated stable identifier and identify the container nodes associated with the generated stable identifier. The content insertion module 134 can then insert creatives adjacent to or near these container nodes. As creatives displayed near primary content tend to have a higher conversion rate, the content insertion module 134 can increase the conversion rates of the creatives inserted the content insertion module 134 on the information resource.
- FIG. 2A shows a screenshot 200 of an information resource 202 displayed within a browser window.
- the information resource 202 includes primary content and third-party content 220a-n.
- the primary content comprises a plurality of posts 210a-n, each having an associated image, a headline, and corresponding text.
- the stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 202 and identify container nodes containing each of the plurality of posts 210a-n.
- the content insertion module 134 can be configured to use the stable identifier associated with the information resource 202 to insert creatives in between the plurality of posts 210a-n.
- FIG. 2B shows a screenshot of the information resource shown in FIG. 2A that includes creatives 230a-n between the plurality of posts 210a-n.
- the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent posts of the information resource.
- the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots.
- the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent posts or near one or more posts.
- FIG. 3A shows a screenshot 300 of an information resource 302 displayed within a browser window.
- the information resource 302 includes primary content and third-party content 320a-n.
- the primary content comprises an article 310 having an associated image, a headline, and corresponding text in multiple paragraphs 312a-312n.
- the stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 302 and identify container nodes containing each of the plurality of paragraphs 312a-n.
- the content insertion module 134 can be configured to use the stable identifier associated with the information resource 302 to insert creatives in between or adjacent to the plurality of paragraphs 312a-n.
- FIG. 3B shows a screenshot of the information resource shown in FIG. 3 A that includes a creative 330 between two of the paragraphs 312a-n.
- the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent paragraphs of an article of the information resource.
- the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots.
- the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent paragraphs or near one or more paragraphs.
- the data processing system 110 can also include one or more data stores, such as the database 140.
- the database can be included in the data processing system 1 10. In some implementations, the database may be located remote to the data processing system but accessible by the data processing system.
- the database can store a wide variety of content. For example, the database can store the DOM trees of one or more information resources, lists of container nodes, lists of identifiers associated with the container nodes, maps associating the identifiers with the container nodes, content identification scores of the potential identifiers, as well as the identity of the stable identifier selected to identify the container nodes of the information resource, amongst others. It should be appreciated that the data processing system 110 can include one or more additional modules to provide some or all of the features described herein as well as other additional features.
- FIG. 4 is a flow diagram depicting one implementation of the steps taken to render functional extensions with a landing page of a creative.
- FIG. 4 illustrates a flow diagram depicting a method 400 for generating a stable identifier for nodes likely to include primary content of an information resource.
- a processor identifies, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content (BLOCK 405).
- the processor determines one or more container nodes containing one or more of the identified content-related DOM nodes (BLOCK 410).
- the processor generates, for each of the container nodes, one or more identifiers corresponding to the container node (BLOCK 415).
- DOM Document Object Model
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds (BLOCK 420). The processor then determines, from the generated identifiers, a subset of the identifiers that correspond only to container nodes that contain the content-related DOM nodes (BLOCK 425). The processor then selects one of the identifiers of the subset as a stable identifier (BLOCK 430).
- the processor can identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content (BLOCK 405). Examples of primary content can include posts, articles, or other content items that the web publisher has provided.
- the processor can inspect the DOM tree of an information resource and identify all of the content-related Document Object Model (DOM) nodes included in the information resource.
- the processor can identify each node included within the information resource and determine whether the identified node is a content-related DOM node.
- the processor can identify a node by inspecting the DOM tree for tags. A tag associated with a node can indicate the type of node.
- the processor can determine that a node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the processor can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title.
- the processor can determine one or more container nodes containing one or more of the identified content-related DOM nodes (BLOCK 410). In some implementations, the processor can determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes. In some implementations, a node of the DOM tree may be identified as a container node if the node meets two criteria. The first criteria is that either the node corresponds to an ARTICLE or the node corresponds to one of a DIV, INS or TD and the node has at least one stable class name. In some implementations, a class name may be considered stable if the class name does not end in a number. In some implementations, a class name is considered to be stable if it does not match the following regular expression:
- the second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node includes primary content, such as a post.
- CSS Cascading Style Sheet
- Examples of CSS class types that indicate that the node is a post can include 'post' or 'typepost.'
- the processor can determine, for each of the identified content-related DOM nodes, the container node nearest to the content-related DOM node.
- the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node.
- the processor can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node..
- the processor can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes.
- a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
- the processor can maintain a list of container nodes.
- the primary content detection module can include each of the container nodes determined for each of the content-related DOM nodes in the list.
- the processor can also include each of the equivalent container ancestor nodes determined for each container node.
- the processor can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
- the processor can generate, for each of the container nodes, one or more identifiers corresponding to the container node (BLOCK 415). In some implementations, the processor can generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node. In some implementations, the stable identifier generation module can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
- the processor can generate an identifier based on the tag associated with the container node for which the processor is generating the identifier. In some implementations, the processor can generate an identifier based on the class name associated with the container node. In some implementations, the processor can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node according to the identifier generation policy, the processor identifies the type of tag associated with the container node and a class name associated with the tag. In some implementations, the processor can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type. In some implementations, the tag name of the identifier can be ARTICLE. In some
- the processor can generate an identifier having a tag name and an ID if the ID is stable.
- a stable ID can be any ID that does not end in a number
- the processor can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE.
- the identifier can include the tag type and a single stable class name.
- the stable class name can correspond to a class name that does not end with a number.
- the processor can maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the processor may remove any duplicates in the list of identifiers generated for the container nodes. In some implementations, the processor can sort the identifiers generated for the container nodes based on a preference policy. In some implementations, the preference policy can include one or more rules for sorting the potential identifiers.
- the processor can arrange a plurality of the generated identifiers of the list of identifiers in order of highest preference to lowest preference.
- the processor can compare two or more identifiers at a time and determine which of the identifiers has a higher preference.
- the processor can first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name.
- the processor determines that none of the identifiers being compared includes only a tag name, the processor can determine whether any of the two identifiers includes a tag name and an ID. Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID.
- the processor determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name. As such, if one of the identifiers has a tag name and a class name, the processor will rank that identifier higher than the identifier not having a class name. If the processor identifies that both of the identifiers includes a tag name and a class name, the processor can determine which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name.
- the processor will rank that identifier higher than the identifier not having the more preferred class name.
- the class name 'post-container' is more preferred than the class names 'post' and 'type-post' and the class name 'post' is more preferred than the class name 'type-post.' If the processor identifies that none of the identifiers includes a tag name with a preferred class name, the processor can determine that the identifier with the longer class name is preferred over an identifier with a shorter class name. As such, the identifier having a longer class name will be ranked higher than the identifier having a shorter class name.
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds (BLOCK 420).
- the processor can associate each of the identifiers generated by the processor to the container nodes to determine a subset of identifiers that correspond only to container nodes that contain the content-related DOM nodes,.
- the processor can map each generated identifier to all of the container nodes from which the processor could have possibly generated the identifier. This is because multiple container nodes may have the same tag types or ids or class names, which result in container nodes having the same tag types or ids or class names generating identical identifiers.
- the identifiers can serve as keys in a map constructed to map the identifiers to each of the container nodes.
- the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier.
- the processor can determine, from the generated identifiers, a subset of the identifiers that correspond only to container nodes that contain the content-related DOM nodes (BLOCK 425). In some implementations, the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier. In some implementations, nodes that can be referenced by the identifier include nodes that have characteristics (for example, tag type, id, class name) that would cause the processor to generate the identifier based on the characteristics of the node.
- characteristics for example, tag type, id, class name
- the processor can determine that the identified node is either in a list of container nodes maintained by the processor or that the node meets the criteria for being identified as a container node. In response to determining that the identified node is not on the list of container nodes or does not meet the criteria for being identified as a container node, the processor can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the processor can include the identifier as a potential stable identifier and as such, determine a content
- the content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource.
- the processor can select one of the identifiers of the subset as a stable identifier (BLOCK 430). In some implementations, the processor can determine a content identification score for each of the potential identifiers. In some implementations, the processor can determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content( for example, paragraph nodes) that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier. In some implementations, the processor can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource. In some
- the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
- the processor can identify the identifier having the largest content identification score. The processor can then select the identifier having the highest content identification score as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content.
- the processor can store the identity of the stable identifier with the information resource. In this way, the processor can identify posts or articles or nodes likely to include primary content using the stable identifier, which can identify the container nodes corresponding to the posts or articles or nodes likely to include primary content.
- the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can generate the following identifiers based on the container nodes.
- the processor can generate the following identifier for the container nodes.
- the processor can expand the list of identifiers to the following four identifiers:
- the processor would then discard the ⁇ tagName: 'DIV, className: 'left-align' ⁇ identifier since it is a container node that does not contain a node likely to contain primary content.
- the ⁇ tagName: 'DIV, className: 'left-align' ⁇ identifier references the following container:
- the processor would then arrange the remaining three identifiers according to a preference order and select the ⁇ tagName: 'DIV, className: 'content-entry' ⁇ identifier as the stable identifier as this identifier would have the highest score.
- FIG. 5 shows the general architecture of an illustrative computer system 500 that may be employed to implement any of the computer systems discussed herein (including the system 100 and its components such as the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134) in accordance with some implementations.
- the computer system 500 can be used to provide information via the network 105 for display.
- the computer system 500 of FIG. 5 comprises one or more processors 520 communicatively coupled to memory 525, one or more communications interfaces 505, and one or more output devices 510 (e.g., one or more display units) and one or more input devices 515.
- the processors 520 can be included in the data processing system 110 or the other components of the system 100 such as the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134.
- the memory 525 may comprise any computer- readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present). Referring again to the system 100 of FIG.
- the data processing system 110 can include the memory 525 to store information related to one or more creatives, one or more information resources generated for the creatives and one or more functional extensions generated for rendering with content of landing pages associated with the creatives.
- the memory 525 can include the database 140.
- the processor(s) 520 shown in FIG. 5 may be used to execute instructions stored in the memory 525 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions.
- the processor 520 of the computer system 500 shown in FIG. 5 also may be communicatively coupled to or control the communications interface(s) 505 to transmit or receive various information pursuant to execution of instructions.
- the communications interface(s) 505 may be communicatively coupled to or control the communications interface(s) 505 to transmit or receive various information pursuant to execution of instructions.
- communications interface(s) 505 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow the computer system 500 to transmit information to or receive information from other devices (e.g., other computer systems). While not shown explicitly in the system of FIG. 1, one or more communications interfaces facilitate information flow between the components of the system 100. In some implementations, the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of the computer system 500. Examples of communications interfaces 505 include user interfaces (e.g., web pages), through which the user can communicate with the data processing system 110.
- user interfaces e.g., web pages
- the output devices 510 of the computer system 500 shown in FIG. 5 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions.
- the input device(s) 515 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- a smart television module or connected television module, hybrid television module, etc.
- a processing module configured to integrate internet connectivity with more traditional television
- the smart television module may be physically incorporated into a television set or may include a separate device such as a set-top box, Blu-ray or other digital media player, game console, hotel television system, and other companion device.
- a smart television module may be configured to allow viewers to search and find videos, movies, photos and other content on the web, on a local cable TV channel, on a satellite TV channel, or stored on a local hard drive.
- a set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television set and an external source of signal, turning the signal into content which is then displayed on the television screen or other display device.
- a smart television module may be configured to provide a home screen or top level screen including icons for a plurality of different applications, such as a web browser and a plurality of streaming media services, a connected cable or satellite media source, other web "channels", etc.
- the smart television module may further be configured to provide an electronic programming guide to the user.
- a companion application to the smart television module may be operable on a mobile computing device to provide additional information about available programs to a user, to allow the user to control the smart television module, etc.
- the features may be implemented on a laptop computer or other personal computer, a smartphone, other mobile phone, handheld computer, a tablet PC, or other computing device.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can include or share one or more data processing apparatus, computing devices, or processors.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- special purpose logic circuitry e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), for example.
- Devices suitable for storing computer program instructions and data include all forms of non- volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from
- a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN”) and a wide area network (“WAN”), an internetwork (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- Internet internetwork
- peer-to-peer networks e.g., ad hoc peer-to-pe
- the computing system such as system 500 or system 100 can include clients and servers.
- the data processing system 110 can include one or more servers in one or more data centers or server farms.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device e.g., a result of the user interaction
- the primary content detection module 130, the stable identifier generation module 132 and the content insertion module 134 can be part of the data processing system 110, a single module, a logic device having one or more processing modules, one or more servers, or part of a search engine.
- references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element.
- References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations.
- References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- any implementation disclosed herein may be combined with any other implementation, and references to "an implementation,” “some implementations,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- references to "or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/254,349 US9665617B1 (en) | 2014-04-16 | 2014-04-16 | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource |
PCT/US2015/025326 WO2015160653A1 (en) | 2014-04-16 | 2015-04-10 | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource |
Publications (1)
Publication Number | Publication Date |
---|---|
EP3132361A1 true EP3132361A1 (en) | 2017-02-22 |
Family
ID=53016762
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP15719545.4A Ceased EP3132361A1 (en) | 2014-04-16 | 2015-04-10 | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource |
Country Status (5)
Country | Link |
---|---|
US (1) | US9665617B1 (en) |
EP (1) | EP3132361A1 (en) |
JP (1) | JP6438494B2 (en) |
CN (1) | CN106233284B (en) |
WO (1) | WO2015160653A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170147534A1 (en) * | 2015-11-23 | 2017-05-25 | Microsoft Technology Licensing, Llc | Transformation of third-party content for native inclusion in a page |
US10210144B2 (en) * | 2016-08-16 | 2019-02-19 | Adobe Inc. | Creation and display of a webpage with alternative layouts for different webpage widths |
US10523662B2 (en) * | 2016-09-16 | 2019-12-31 | Sap Se | In-memory database advanced programming model |
CN107818163B (en) * | 2017-11-01 | 2019-03-29 | 平安科技（深圳）有限公司 | Page display method, device, computer equipment and storage medium |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060004858A1 (en) * | 2004-05-04 | 2006-01-05 | International Business Machines Corporation | Self-Adaptive Prefix Encoding for Stable Node Identifiers |
Family Cites Families (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP3982454B2 (en) * | 2003-05-27 | 2007-09-26 | ソニー株式会社 | Portable electronic device, web page processing method and program |
US20050108630A1 (en) * | 2003-11-19 | 2005-05-19 | Wasson Mark D. | Extraction of facts from text |
US20090234861A1 (en) * | 2005-09-14 | 2009-09-17 | Jorey Ramer | Using mobile application data within a monetization platform |
WO2007033468A2 (en) * | 2005-09-26 | 2007-03-29 | Advaliant Inc. | System and method configuring contextual based content with publisher content for display on a user interface |
US8181107B2 (en) * | 2006-12-08 | 2012-05-15 | Bytemobile, Inc. | Content adaptation |
CN101202746B (en) * | 2006-12-15 | 2011-04-20 | 华为技术有限公司 | Method for generating node identifier and method and device of load balancing |
GB0906639D0 (en) * | 2009-04-17 | 2009-06-03 | Contextured Ltd | Apparatus and method for generating advertisements |
WO2011002456A1 (en) * | 2009-06-30 | 2011-01-06 | Hewlett-Packard Development Company, L.P. | Selective content extraction |
JPWO2011013234A1 (en) * | 2009-07-30 | 2013-01-07 | 株式会社東芝 | Receiver |
WO2011123981A1 (en) * | 2010-04-07 | 2011-10-13 | Google Inc. | Detection of boilerplate content |
CA2706743A1 (en) | 2010-06-30 | 2010-09-08 | Ibm Canada Limited - Ibm Canada Limitee | Dom based page uniqueness indentification |
WO2012012916A1 (en) * | 2010-07-30 | 2012-02-02 | Hewlett-Packard Development Company, L.P. | Selection of main content in web pages |
WO2012055067A1 (en) * | 2010-10-26 | 2012-05-03 | Hewlett-Packard Development Company, L.P. | Extraction of content from a web page |
KR20120051419A (en) * | 2010-11-12 | 2012-05-22 | 삼성전자주식회사 | Apparatus and method for extracting cascading style sheet |
CA2802746C (en) * | 2011-03-04 | 2014-08-19 | Scribble Technologies Inc. | System and methods for facilitating the synchronization of data |
US9152730B2 (en) * | 2011-11-10 | 2015-10-06 | Evernote Corporation | Extracting principal content from web pages |
US8612450B1 (en) * | 2012-11-20 | 2013-12-17 | Limelight Networks, Inc. | Content tagging using multi-node hierarchical content assignments |
-
2014
- 2014-04-16 US US14/254,349 patent/US9665617B1/en active Active
-
2015
- 2015-04-10 WO PCT/US2015/025326 patent/WO2015160653A1/en active Application Filing
- 2015-04-10 JP JP2016562919A patent/JP6438494B2/en active Active
- 2015-04-10 CN CN201580019959.2A patent/CN106233284B/en active Active
- 2015-04-10 EP EP15719545.4A patent/EP3132361A1/en not_active Ceased
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060004858A1 (en) * | 2004-05-04 | 2006-01-05 | International Business Machines Corporation | Self-Adaptive Prefix Encoding for Stable Node Identifiers |
Non-Patent Citations (1)
Title |
---|
See also references of WO2015160653A1 * |
Also Published As
Publication number | Publication date |
---|---|
JP2017519273A (en) | 2017-07-13 |
US9665617B1 (en) | 2017-05-30 |
CN106233284A (en) | 2016-12-14 |
WO2015160653A1 (en) | 2015-10-22 |
JP6438494B2 (en) | 2018-12-12 |
CN106233284B (en) | 2019-08-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10354294B2 (en) | Methods and systems for providing third-party content on a web page | |
US11017154B2 (en) | Methods and systems for identifying styles of properties of document object model elements of an information resource | |
US10838609B2 (en) | Systems and methods for dynamically appending supplemental content to an information resource responsive to scroll activity | |
EP3295305B1 (en) | Systems and methods for attributing a scroll event in an infinite scroll graphical user interface | |
US20140033228A1 (en) | Configuring content display dimensions | |
US10120839B2 (en) | Methods and systems for identifying elements of a mobile application | |
US11947377B2 (en) | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources | |
US9158800B2 (en) | Providing content items for non-standard content item slots | |
US11430003B1 (en) | Expansion of high performing placement criteria | |
US20140180796A1 (en) | Selecting and serving content items of different content item types for a content item slot | |
US9665617B1 (en) | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource | |
US10049170B1 (en) | Methods and systems for selectively preventing third-party content from being displayed using undefined publisher identifier | |
US9159067B1 (en) | Providing content |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20161012 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAV | Request for validation of the european patent (deleted) | ||
DAX | Request for extension of the european patent (deleted) | ||
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20190522 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R003 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN REFUSED |
|
18R | Application refused |
Effective date: 20221028 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |