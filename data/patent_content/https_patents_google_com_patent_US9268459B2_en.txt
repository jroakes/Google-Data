US9268459B2 - Auto-completion for user interface design - Google Patents
Auto-completion for user interface design Download PDFInfo
- Publication number
- US9268459B2 US9268459B2 US14/516,912 US201414516912A US9268459B2 US 9268459 B2 US9268459 B2 US 9268459B2 US 201414516912 A US201414516912 A US 201414516912A US 9268459 B2 US9268459 B2 US 9268459B2
- Authority
- US
- United States
- Prior art keywords
- design
- components
- component
- cost associated
- query
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/0485—Scrolling or panning
- G06F3/04855—Interaction with scrollbars
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/36—Software reuse
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/38—Creation or generation of source code for implementing user interfaces
Definitions
- the invention generally relates to the field of user interfaces, in particular to generating content for user interfaces.
- UI design applications have been developed for users to create UI designs.
- Many UI design applications allow the users to edit or customize existing UI examples in order to create their own.
- Due to the large volume of existing design examples e.g., billions of web pages), it is difficult for the users to find desirable UI designs in the design examples.
- Embodiments of the present disclosure include methods (and corresponding systems and computer program products) for automatically completing a partially completed user interface design created by a designer.
- a command is received to automatically generate a complete design from an incomplete UI design that includes a first UI component.
- a plurality of example designs are identified that contain a second UI component similar to the first, and a third UI component from the example design is provided for display in the incomplete UI design.
- Scrollbars are provided for selection of one of the plurality of example designs and the third component is incorporated with the incomplete design upon user confirmation.
- a combination score categorizing similarity between example designs is used to group the example designs.
- the example designs are grouped based on properties including layout style, background style, background color, font size, and font style.
- an incomplete UI includes a first set of UI components.
- a plurality of example designs are identified, each with a second set of UI components that are similar to the first set, and an additional UI component.
- a corresponding transformation cost is calculated for each of the design examples.
- the design examples are presented and user controls provided whereby a user selects and confirms an additional component to incorporate with the incomplete UI design.
- the transformation cost comprises contributions from one or more of the following factors: a cost associated with adding a UI component, a cost associated with deleting a UI component, a cost associated with translating a UI component, and a cost associated with scaling a UI component.
- a related method receives a command to automatically generate a design for an incomplete UI design comprising a user-selected component.
- a design example including a corresponding UI component and a recommended UI component is identified, and the recommended UI component is provided for display in the incomplete UI design.
- differences between text and images in the user-selected and corresponding UI components do not contribute to the transformation cost.
- text and images in the recommended UI component are replaced by default text and images when provided for display.
- Another related method determines attributes of UI components in a plurality of design examples, receives a query for automatically generating a design for the incomplete UI, the query including information about a first set of UI components of the incomplete UI, and identifies a design example that has a second set of UI components, similar to the first set of UI components, and also has a third UI component for proposed inclusion in the incomplete UI design.
- System elements identify and harvest the design examples, and group them based on common characteristics.
- FIG. 1 is a high-level block diagram of a computing environment according to one embodiment.
- FIG. 2 is a high-level block diagram illustrating an example of a computer for use in the computing environment shown in FIG. 1 according to one embodiment.
- FIG. 3A is a high-level block diagram illustrating modules within a UI design application shown in FIG. 1 according to one embodiment.
- FIG. 3B is a high-level block diagram illustrating modules within a server shown in FIG. 1 according to one embodiment.
- FIG. 4 is a diagram illustrating a process for automatically completing a partially completed UI design created by a designer, according to one embodiment.
- FIGS. 5A through 5G are diagrams illustrating displays of the UI design application shown in FIG. 1 , according to one embodiment.
- FIG. 6 is a diagram illustrating a structure of grouped design examples, according to one embodiment.
- FIG. 1 is a high-level block diagram that illustrates a computing environment 100 for enabling a user to efficiently create a UI design by automatically completing a partially completed UI design created by the user using design examples and enabling the user to incorporate desirable designs from the design examples into the UI design.
- the computing environment 100 includes a client 110 , a server 120 , and a web server 130 , all connected through a network 140 . There can be other entities in the computing environment 100 .
- the client 110 is an electronic device that can communicate with the server 120 through the network 140 .
- the client 110 is a conventional computer system executing, for example, a Microsoft Windows-compatible operating system (OS), Apple OS X, and/or a Linux distribution.
- the client 110 is a mobile telephone or a tablet computer executing, for example, a Google Android operating system (OS).
- OS Microsoft Windows-compatible operating system
- OS Google Android operating system
- the client 110 includes a UI design application 115 .
- the UI design application 115 is a software program intended to be used by a user (also called the “designer”) to create UI designs such as web pages.
- a UI design is a visual presentation of digital information.
- a UI design includes one or more components (also called “UI components”) such as regions, texts, images, and buttons.
- a UI component itself may include one or more UI components. The former is called the parent UI component and the latter are called the children UI components. For example, a region (the parent UI component) may include multiple buttons (the children UI components).
- the arrangement of UI components within a UI (or a parent UI component) is called the layout of that UI.
- Each UI component has attributes that collectively define the display of the UI component in the UI design it belongs to. Example attributes include location, length, height, size, type, background color, font, semantic information and layout.
- the UI design application 115 provides an auto-completion feature that automatically completes a partially completed UI design created by a designer. As the designer freely lays out UI components on an editing window (also called a “canvas”), the UI design application 115 automatically suggests the rest of the UI design (also called the “alto-complete suggestions”) by rendering a suggested design on the canvas along with the UI components added by the designer. The designer can either ignore the suggested layout and keep finishing the design, or accept the suggested design as a part of the UI design.
- the auto-completion feature suggests additional alternative designs for the partially completed UI design by enabling the designer to select a region and systematically navigate through design examples for that region and selectively incorporating desirable designs identified by the designer into the UI design.
- the UI design application 115 In order to provide the auto-complete suggestions for a UI design, the UI design application 115 generates a UI query that includes attributes of the existing UI components in the partially completed UI design.
- the existing UI components include the UI components added by the designer and the UI components suggested by the UI design application 115 and accepted by the designer.
- the UI design application 115 submits the UI query to the server 120 and receives a collection of design examples, each of which includes UI components similar to the existing UI components.
- the UI design application 115 fills the partially completed UI design using UI components in one of the received design examples, and enables the user to select regions in the resulting UI design and view alternative designs for the selected regions.
- the user can choose to incorporate the suggested designs for one or more regions in the UI design by accepting (or confirming) the desired suggestions, or ignore the auto-complete suggestions altogether and completing the UI design manually.
- the server 120 is a hardware device and/or software program configured to communicate with the client 110 and the web server 130 through the network 140 .
- the server 120 creates a design example corpus by retrieving contents such as web pages hosted on the web server 130 and indexes the contents in an index against UI components included therein.
- the server 120 receives UI queries from the client 110 regarding UI designs and searches in the index for design examples containing UI components similar (e.g., location, background color, and/or font) to the existing UI components specified in the UI queries.
- the server 120 scores each design example in the search results by calculating a minimum transformation cost for transforming the existing set of UI components specified in the UI query into a corresponding set of UI components in the design example, which may involve operations such as adding, deleting or geometrically transforming (translation and/or scaling) one or more UI components.
- the minimum transformation cost is a value between the range of 0 and 1, with a small value indicating a high degree of similarity (i.e., less transformation operations necessary) and a high value indicating a low degree of similarity.
- the server 120 removes the design examples with minimum transformation costs exceeding a predetermined threshold value from the search results, and returns the remaining design examples to the client 110 .
- the web server 130 is a hardware device and/or software program configured to deliver contents such as web pages over the network 140 .
- a pre-selected number (N) of design examples are returned to the client 110 .
- the server 120 selects the N design examples with the lowest minimum transformation cost, i.e. those with the greatest degree of similarity.
- the network 140 is a system of interconnected computer networks that use standard communications technologies and/or protocols to facilitate data transmission among the computer networks.
- the network 140 can include links using technologies such as Ethernet, 802.11, worldwide interoperability for microwave access (WiMAX), 3 G, digital subscriber line (DSL), asynchronous transfer mode (ATM), InfiniBand, PCI Express Advanced Switching, etc.
- the networking protocols used on the network 140 can include multiprotocol label switching (MPLS), the transmission control protocol/Internet protocol (TCP/IP), the User Datagram Protocol (UDP), the hypertext transport protocol (HTTP), the simple mail transfer protocol (SMTP), the file transfer protocol (FTP), etc.
- MPLS multiprotocol label switching
- TCP/IP transmission control protocol/Internet protocol
- UDP User Datagram Protocol
- HTTP hypertext transport protocol
- SMTP simple mail transfer protocol
- FTP file transfer protocol
- the data exchanged over the network 140 can be represented using technologies and/or formats including the hypertext markup language (HTML), the extensible markup language (XML), JavaScript, VBScript, Flash, PDF, PostScript, etc.
- HTML hypertext markup language
- XML extensible markup language
- JavaScript JavaScript
- VBScript Flash
- PDF PostScript
- all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer (SSL), transport layer security (TLS), virtual private networks (VPNs), Internet Protocol security (IPsec), etc.
- SSL secure sockets layer
- TLS transport layer security
- VPNs virtual private networks
- IPsec Internet Protocol security
- the entities use custom and/or dedicated data communications technologies instead of, or in addition to, the ones described above.
- FIG. 2 is a high-level block diagram illustrating an example computer 200 .
- the computer 200 includes at least one processor 202 coupled to a chipset 204 .
- the chipset 204 includes a memory controller hub 220 and an input/output (I/O) controller hub 222 .
- a memory 206 and a graphics adapter 212 are coupled to the memory controller hub 220 , and a display 218 is coupled to the graphics adapter 212 .
- a storage device 208 , keyboard 210 , pointing device 214 , and network adapter 216 are coupled to the I/O controller hub 222 .
- Other embodiments of the computer 200 have different architectures.
- the storage device 208 is a non-transitory computer-readable storage medium such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device.
- the memory 206 holds instructions and data used by the processor 202 .
- the pointing device 214 is a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard 210 to input data into the computer system 200 .
- the graphics adapter 212 displays images and other information on the display 218 .
- the network adapter 216 couples the computer system 200 to one or more computer networks.
- the computer 200 is adapted to execute computer program modules for providing functionality described herein.
- module refers to computer program logic used to provide the specified functionality.
- a module can be implemented in hardware, firmware, and/or software.
- program modules are stored on the storage device 208 , loaded into the memory 206 , and executed by the processor 202 .
- the types of computers 200 used by the entities of FIG. 1 can vary depending upon the embodiment and the processing power required by the entity.
- the server 120 might comprise multiple blade servers working together to provide the functionality described herein.
- the computers 200 can lack some of the components described above, such as keyboards 210 , graphics adapters 212 , and displays 218 .
- FIG. 3A is a high-level block diagram illustrating a detailed view of modules within the UI design application 115 according to one embodiment. Some embodiments of the UI design application 115 have different and/or other modules than the ones described herein. Similarly, the functions can be distributed among the modules in accordance with other embodiments in a different manner than is described here. As illustrated, the UI design application 115 includes a UI editing module 310 , an auto-completion module 320 , and a data store 330 .
- the UI editing module 310 displays a window on a display of the client 110 .
- the window includes an editing window (also called a “canvas”, a “working area”) along with a component menu listing UI components that the user can add onto a UI design.
- the window also includes an auto-completion menu with commands for the user to accept or erase the auto-completion suggestions.
- An example window 500 is illustrated in FIG. 5A . As shown, the example window 500 includes a canvas 510 , a component menu 530 , and an auto-completion menu 520 .
- the auto-completion menu 520 includes a suggestion selection button 525 and an erase button 527 for erasing a suggested design.
- the auto-completion module 320 automatically completes a partially completed UI design created by the designer and enables the designer to selectively incorporate suggested designs into the UI design.
- the UI editing module 310 receives user inputs creating a partially completed UI design
- the auto-completion module 320 generates a UI query including attributes of existing UI components in the partially completed UI design, transmits the UI query to the server 120 , and retrieves a set of design examples containing suggested designs for completing the partially completed UI design from the server 120 .
- the auto-completion module 320 selects a design example (e.g., the design example with the minimum transformation cost) in the set and fills the partially completed UI design with UI components of the selected design example.
- FIG. 5B illustrates an automatically completed UI design. As shown, the existing UI components and the suggested UI components are visually distinguishable: the existing UI components are in solid lines and the suggested UI components are in dotted lines.
- the UI components in the retrieved design examples are grouped into different regions (e.g., regions 540 and 550 in FIG. 5B ), and the retrieved design examples are grouped (and/or sub-grouped) according to their design similarities in terms of attributes such as layout, color, and font in these regions.
- FIG. 6 illustrates an example organization of the retrieved design examples for one such region. As shown, the design examples are grouped into different layout groups or clusters 610 according to their similarity in the layouts of UI components contained in the region. Additional details about how the design examples are grouped into the layout groups are provided below with regard to the server 120 .
- each layout group the design examples are further grouped into different background groups 620 according to their similarities in the backgrounds (e.g., background color) of said region.
- the design examples are further grouped into different font groups 630 according to their similarities in their text fonts (e.g., size, style) of said region.
- Each group (or subgroup) has one or more representative design examples 640 .
- the auto-completion module 320 enables the designer to systematically navigate through the retrieved design examples according to their groupings by interacting with a vertical scrollbar (also called a “detail slider”) 560 and a horizontal scrollbar (also called an “example slider”) 570 , as illustrated in FIG. 5C .
- the detail slider 560 can be in four detail levels: a layout level, a background level, a font level, and a semantic level.
- the designer can scroll the example slider 570 to view the representative design examples of the different layout groups in the selected region.
- the designer scrolls the detail slider 560 to the background level, as shown in FIG. 5E .
- the designer then scrolls the example slider 570 to view the representative design examples of the different background groups in the selected layout group.
- the designer scrolls the detail slider 560 to the font level, as shown in FIG. 5F .
- the designer views the representative design examples of the font groups in the selected background group and selects one of the presented options.
- the designer scrolls the detail slider 560 to the semantic level as shown in FIG. 5G .
- the designer views the individual design examples of the selected font group and selects a desirable design (layout, background, font, and/or semantic) to incorporate with the partially completed UI design by selecting the suggest selection button 525 .
- the designer can ignore the suggestions all together by selecting the erase button 527 , and add UI components manually through the component menu 530 .
- the UI design application 115 can make further suggestions based on the designer's decision regarding the auto-complete suggestions.
- the data store 330 stores data used by the UI design application 115 . Examples of such data include information about the partially completed UI design (e.g., attributes of UI components included therein), the UI query generated for the partially completed UI design, and the design examples received for the generated UI query.
- the data store 330 may be a relational database or any other type of database, or an in-memory data-structure.
- FIG. 3B is a high-level block diagram illustrating a detailed view of modules within the server 120 according to one embodiment.
- Some embodiments of the server 120 have different and/or other modules than the ones described herein. Similarly, the functions can be distributed among the modules in accordance with other embodiments in a different manner than is described here.
- each module in FIG. 4 may be implemented by a set of computers operating in parallel to further improve efficiency.
- the server 120 includes a crawling module 350 , an indexing module 360 , a search engine module 370 , a grouping module 380 , and a data store 390 .
- the crawling module 350 creates a design example corpus by retrieving UI contents such as web pages, desktop graphical UI, and Android interface designs. For example, the crawling module 350 visits the web server 130 to systematically retrieve web pages hosted thereon. The crawling module 350 analyzes the harvested design examples to identify UI components included therein and determine attributes of the identified UI components. In one embodiment, the crawling module 350 analyzes the design examples based on the specific formats of the design examples. For example, for a web page in hypertext markup language (HTML), the crawling module 350 analyzes the HTML code of the web page according to the data structure and/or grammar of HTML to identify the UI components of the web page and their attributes. Additionally or alternatively, the crawling module 350 may apply a computer vision-based approach to analyze the UI components of each design example.
- HTML hypertext markup language
- the indexing module 360 indexes the design examples retrieved by the crawling module 350 using attributes of UI components included in the design examples.
- a design example includes one or more UI components (e.g., regions, texts, images, and buttons), each of which includes attributes (e.g., location, length, height, background, font, and layout) that collectively define the UI component in the design example it belongs to.
- the background attribute is an integer that represents a color value or a texture identifier of the background of the associated UI component.
- the indexing module 360 instead of indexing all design examples retrieved by the crawling module 350 , the indexing module 360 only indexes a design example if the design example is sufficiently different from any of the already indexed design examples.
- the indexing module 360 measures the differences between a first design example and a second design example by calculating (1) a minimum transformation cost for transforming UI components in the first design example into UI components in the second design example, (2) a minimum transformation cost for transforming UI components in the second design example into UI components in the first design example, and (3) a combination (e.g., average) of the two costs (also called the “combination score”).
- the indexing module 360 For example, if the combination scores for a design example against all indexed design example exceeds a predetermined threshold value, then the indexing module 360 considers the design example sufficiently distinctive and indexes the design example; otherwise the design example is skipped and not indexed. In one example, the indexing module 360 simplifies contents from the design example that are unrelated to the graphical design of the UI components (e.g., replacing the actual texts with phrases such as “text”, and replacing the actual images with blank images or images with phrases such as “image”) before indexing the resulting simplified design examples.
- the search engine module 370 receives UI queries from the client 110 and searches for design examples in the indexing module 360 .
- the search engine module 370 calculates a minimum transformation cost for each indexed design example measuring the similarity between the layout of the UI components specified in the UI query and the layout of the corresponding UI components in the design examples, and retrieves design examples with minimum transformation costs smaller than a predetermined threshold value as the search results for the UI query.
- the grouping module 380 groups the design examples in the search results for common regions among the design examples.
- the grouping module 380 first calculates a combination score for each pair of design examples in the search results, and groups the design example pairs with small combination scores (e.g., comparing to a predetermined threshold value) into a same layout group and separates the design examples in pairs with high combination scores.
- the grouping module 380 quantifies the differences of backgrounds (e.g., color differences) among design examples in a same layout group, and groups the design examples with similar backgrounds into same background groups within that layout group.
- the grouping module 380 quantifies the differences of fonts (e.g., size, style) among design examples in a same background group, and groups the design examples with similar fonts into same font groups within that background group.
- the grouping module 380 returns the grouped design examples to the client 110 as search results of the received UI query.
- the data store 390 stores data used by the server 120 . Examples of such data include the design example corpus, the received UI queries, and the grouped design examples in the search results.
- the data store 390 may be a relational database or any other type of database, or an in-memory data-structure.
- FIG. 4 is a time sequence diagram illustrating a process 400 for the UI design application 115 to automatically generate a design for a partially completed UI design, according to one embodiment.
- Other embodiments can perform the steps of the process 400 in different orders.
- other embodiments can include different and/or additional steps than the ones described herein.
- the server 120 retrieves 410 a large corpus of design examples, for example, by crawling the web server 130 for web pages hosted thereon.
- the server 120 analyzes 415 the design examples in the corpus to identify UI components included therein and determine the attributes of the identified UI components.
- the server 120 then indexes 420 the design examples against their UI components in an index.
- the UI design application 115 executing on the client 110 receives 425 a user input to create a UI design.
- the UI design application 115 may receive subsequent user inputs to add one or more UI components on to the partially completed UI design (the existing UI components).
- An example partially completed UI design is illustrated in FIG. 5A .
- the UI design application 115 generates 430 a UI query with attributes of the existing UI components, and transmits the UI query to the server 120 .
- the server 120 receives the UI query and searches 435 in the index for design examples with UI components similar to the existing UI components specified in the UI query. In one embodiment, the server 120 calculates minimum transformation costs between such UI components, and includes design examples with costs less than a predetermined threshold value in search results for the UI query. The server 120 groups (and/or subgroups) 440 the design examples for designs of common regions according to attributes such as layout, background, and font, and transmits the grouped design examples to the UI design application 115 .
- the UI design application 115 displays 445 the layout of a representative design example in one of the layout groups along with the existing UI components to complete the UI design. On exemplary auto-completed UI design is illustrated in FIG. 5B .
- the UI design application 115 receives 450 a user selection of a region in the automatically completed UI design, and displays a detail slider 560 and an example slider 570 next to the selected region, as illustrated in FIG. 5C .
- the UI design application 115 fills 455 the selected regions with suggested displays based on user interactions with the two scrollbars.
- the user can scroll the detail slider 560 to control the level of groups (e.g., layout groups, background groups, font groups) to view, and scroll the example slider 570 to navigate through the representative design examples.
- FIG. 5D illustrates the designer scrolling the example slider to view suggested layouts for the selected region
- FIG. 5E illustrates the designer scrolling the example slider to view suggested backgrounds for the selected region
- FIG. 5F illustrates the designer scrolling the example slider to view suggested fonts for the selected region
- FIG. 5G illustrates the designer scrolling the example slider to view a specific design example for the selected region.
- the UI design application 115 receives 460 a user acceptance for a currently displayed design for the selected region, and adds 465 the design into the partially complete UI design.
- any reference to “one embodiment” or “an embodiment” means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment.
- the appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment.
- Coupled and “connected” along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example, some embodiments may be described using the term “connected” to indicate that two or more elements are in direct physical or electrical contact with each other. In another example, some embodiments may be described using the term “coupled” to indicate that two or more elements are in direct physical or electrical contact. The term “coupled,” however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.
- the terms “comprises,” “comprising,” “includes,” “including,” “has,” “having” or any other variation thereof, are intended to cover a non-exclusive inclusion.
- a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus.
- “or” refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).
Abstract
Description
Cost=w a ∥additions∥+w d ∥deletions∥+w g geometricCost,
where wa is the weight assigned for each addition operation, ∥additions∥ is the total number of addition operations, wd is the weight assigned for each deletion operation, ∥deletions∥ is the total number of deletion operations, wg is the weight assigned to the geometric costs defined using the following equation:
geometricCost=w translationΣdis+w scaleΣscaling.
where wtranslation is the weight assigned for edits corresponding to each edit distance dis, and wscale is the weight assigned for each scaling operation scaling. In the above example, the weights for addition and deletion are different, and as a result the cost function is not symmetric.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/516,912 US9268459B2 (en) | 2011-10-28 | 2014-10-17 | Auto-completion for user interface design |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/283,807 US8869049B1 (en) | 2011-10-28 | 2011-10-28 | Auto-completion for user interface design |
US14/516,912 US9268459B2 (en) | 2011-10-28 | 2014-10-17 | Auto-completion for user interface design |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/283,807 Division US8869049B1 (en) | 2011-10-28 | 2011-10-28 | Auto-completion for user interface design |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150169140A1 US20150169140A1 (en) | 2015-06-18 |
US9268459B2 true US9268459B2 (en) | 2016-02-23 |
Family
ID=51702473
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/283,807 Active 2032-11-01 US8869049B1 (en) | 2011-10-28 | 2011-10-28 | Auto-completion for user interface design |
US14/516,912 Active US9268459B2 (en) | 2011-10-28 | 2014-10-17 | Auto-completion for user interface design |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/283,807 Active 2032-11-01 US8869049B1 (en) | 2011-10-28 | 2011-10-28 | Auto-completion for user interface design |
Country Status (1)
Country | Link |
---|---|
US (2) | US8869049B1 (en) |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10289658B1 (en) * | 2013-03-13 | 2019-05-14 | Ca, Inc. | Web page design scanner |
US10318586B1 (en) | 2014-08-19 | 2019-06-11 | Google Llc | Systems and methods for editing and replaying natural language queries |
CN104407783A (en) * | 2014-10-30 | 2015-03-11 | 北京思特奇信息技术股份有限公司 | Interface information modularization display method and system |
BR112017026293B1 (en) * | 2015-06-07 | 2023-10-24 | Wix.Com Ltd | SYSTEM FOR A WEBSITE BUILDING SYSTEM IMPLEMENTED ON A SERVER AND METHOD FOR A WEBSITE BUILDING SYSTEM IMPLEMENTED ON A SERVER |
US9946437B2 (en) | 2015-11-05 | 2018-04-17 | International Business Machines Corporation | Modifying an appearance of a GUI to improve GUI usability |
US10467029B1 (en) * | 2017-02-21 | 2019-11-05 | Amazon Technologies, Inc. | Predictive graphical user interfaces |
US10628178B2 (en) * | 2017-04-04 | 2020-04-21 | International Business Machines Corporation | Automated user interface analysis |
US10691429B2 (en) * | 2017-07-11 | 2020-06-23 | International Business Machines Corporation | Converting whiteboard images to personalized wireframes |
US20200073679A1 (en) * | 2018-08-28 | 2020-03-05 | Ca, Inc. | Objectively measuring and changing visual aesthetics of a graphical user interface of an application |
US11650717B2 (en) * | 2019-07-10 | 2023-05-16 | International Business Machines Corporation | Using artificial intelligence to iteratively design a user interface through progressive feedback |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6892169B1 (en) | 2000-09-13 | 2005-05-10 | Metasolv Software, Inc. | System and method for automatically designing communications circuits |
US20080092057A1 (en) | 2006-10-05 | 2008-04-17 | Instrinsyc Software International, Inc | Framework for creation of user interfaces for electronic devices |
US20090094544A1 (en) | 2002-02-01 | 2009-04-09 | Concepts Appsgo Inc. | Method and apparatus for selecting a layout for a user interface to display on an electronic device |
US8375313B2 (en) | 2010-06-01 | 2013-02-12 | Oracle International Corporation | User interface generation with scoring |
US8413062B1 (en) | 2009-11-06 | 2013-04-02 | Infragistics Inc. | Method and system for accessing interface design elements via a wireframe mock-up |
-
2011
- 2011-10-28 US US13/283,807 patent/US8869049B1/en active Active
-
2014
- 2014-10-17 US US14/516,912 patent/US9268459B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6892169B1 (en) | 2000-09-13 | 2005-05-10 | Metasolv Software, Inc. | System and method for automatically designing communications circuits |
US20090094544A1 (en) | 2002-02-01 | 2009-04-09 | Concepts Appsgo Inc. | Method and apparatus for selecting a layout for a user interface to display on an electronic device |
US20080092057A1 (en) | 2006-10-05 | 2008-04-17 | Instrinsyc Software International, Inc | Framework for creation of user interfaces for electronic devices |
US8413062B1 (en) | 2009-11-06 | 2013-04-02 | Infragistics Inc. | Method and system for accessing interface design elements via a wireframe mock-up |
US8375313B2 (en) | 2010-06-01 | 2013-02-12 | Oracle International Corporation | User interface generation with scoring |
Non-Patent Citations (16)
Title |
---|
Buxton, B., "Sketching User Experiences: Getting the Design Right and the Right Design," 2007: Morgan Kaufmann, 8 Pages, Title Page, Cover Page and Table of Contents. |
Cai, D., et al., "Extracting Content Structure for Web Pages based on Visual Representation," in the Fifth Asia Pacific Web Conference (APWeb2003). 2003, pp. 406-417. |
Google, "Google sites" 2011, 2 pages, [online] [retrieved on Mar. 20, 2012] Retrieved from the Internet . |
Google, "Google sites" 2011, 2 pages, [online] [retrieved on Mar. 20, 2012] Retrieved from the Internet <URL:http://www.google.com/sites/help/intl/en/overview.html>. |
Hartmann, B., et al., "d.tools: Visually Prototyping Physical UIs through Statecharts," in Conference Supplement to UIST 2005: ACM Symposium on User Interface Software and Technology: Demonstrations, Oct. 23-27, 2005, 2 Pages. |
Hashimoto, Y., et al., "Retrieving the Web Page Layouts using Sketches to Support Example-based Web Design," Eurographics Workshop on Sketch-Based Interfaces and Modeling, 2005,10 Pages, can be retrieved at . |
Hashimoto, Y., et al., "Retrieving the Web Page Layouts using Sketches to Support Example-based Web Design," Eurographics Workshop on Sketch-Based Interfaces and Modeling, 2005,10 Pages, can be retrieved at <URL:http://www-ui.is.s.u-tokyo.ac.jp/˜takeo/papers/hashimoto-sbm2005-layout.pdf>. |
Kumar, R., et al., "Automatic retargeting of web page content," in CHI'09 Work in Progress, Apr. 4-9, 2009. p. 4237-4242. |
Kumar, R., et al., "Bricolage: Example-Based Retargeting for Web Design," CHI 2011, May 7-12, 2011, 10 Pages, can be retrieved at . |
Kumar, R., et al., "Bricolage: Example-Based Retargeting for Web Design," CHI 2011, May 7-12, 2011, 10 Pages, can be retrieved at <URL:http://hci.stanford.edu/publications/2011/Bricolage/Bricolage-CHI2011.pdf>. |
Lee, B., et al., "Designing with Interactive Example Galleries," in CHI'10: Perspectives on Design, Apr. 10-15, 2010, p. 2257-2266. |
Lin, J., et al., "Damask: A Tool for Early-Stage Design and Prototyping of Multi-Device User Interfaces," in Proceedings of the 8th International Conference on Distributed Multimedia Systems, International Workshop on Visual Computing, 2002, 8 Pages. |
Lin, J., et al., "Employing Patterns and Layers for Early-Stage Design and Prototyping of Cross-Device User Interfaces," in CHI 2008 Proceedings Activity-Based Prototyping and Software, Apr. 5-10, 2008, pp. 1313-1322. |
Ritchie, D., et al., "d.tour: Style-based Exploration of Design Example Galleries," in UIST'11, Paper Session: Social Learning, Oct. 16-19, 2011, pp. 165-173. |
Russell, S., et al., "Artificial Intelligence: A Modern Approach," 2 ed. 2003, 26 Pages, Title Page, Cover Page and Table of Contents. |
Van Duyne, O.K., et al., "The Design of Sites: Patterns, Principles, and Processes for Crafting a Customer-Centered Web Experience," 2002, pp. 16, 19-29, and 107-109, Boston, MA, USA Addison-Wesley Longman Publishing Co., Inc. |
Also Published As
Publication number | Publication date |
---|---|
US20150169140A1 (en) | 2015-06-18 |
US8869049B1 (en) | 2014-10-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9703459B2 (en) | Auto-completion for user interface design | |
US9268459B2 (en) | Auto-completion for user interface design | |
CN106796582B (en) | Dynamic presentation of suggested content | |
JP6293142B2 (en) | Creating variations when converting data to consumer content | |
US20220138404A1 (en) | Browsing images via mined hyperlinked text snippets | |
US10365780B2 (en) | Crowdsourcing for documents and forms | |
US20160350950A1 (en) | Methods and Systems for Dynamic Graph Generating | |
US20160092419A1 (en) | Structured Sample Authoring Content | |
US20160092405A1 (en) | Intent Based Authoring | |
US20160092404A1 (en) | Intent Based Feedback | |
US10255355B2 (en) | Method and system for information retrieval and aggregation from inferred user reasoning | |
US9129024B2 (en) | Graphical user interface in keyword search | |
CN112136127A (en) | Action indicator for search operation output element | |
US9569484B2 (en) | Query generation system for an information retrieval system | |
US10628493B2 (en) | Method and system for generating search query suggestions | |
US20230126022A1 (en) | Automatically determining table locations and table cell types | |
US20170322970A1 (en) | Data organizing and display for dynamic collaboration | |
KR101985014B1 (en) | System and method for exploratory data visualization | |
KR20190011186A (en) | Web-based chart library system for data visualization | |
WO2018212931A1 (en) | Object description | |
JP2010033465A (en) | Information processor, information processing method, information processing program and recording medium |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LI, YANG;CHANG, TSUNG-HSIANG;SIGNING DATES FROM 20111024 TO 20111027;REEL/FRAME:034197/0836 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |