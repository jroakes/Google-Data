US6014671A - Interactive retrieval and caching of multi-dimensional data using view elements - Google Patents
Interactive retrieval and caching of multi-dimensional data using view elements Download PDFInfo
- Publication number
- US6014671A US6014671A US09/079,986 US7998698A US6014671A US 6014671 A US6014671 A US 6014671A US 7998698 A US7998698 A US 7998698A US 6014671 A US6014671 A US 6014671A
- Authority
- US
- United States
- Prior art keywords
- view
- elements
- client
- data structure
- view elements
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/51—Indexing; Data structures therefor; Storage structures
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99942—Manipulating data structure, e.g. compression, compaction, compilation
Definitions
- the present invention is related to co-pending patent application Ser. No. 09/079,662, entitled “Interactive Representation and Retrieval of Multi-dimensional Data Using View Elements,” by Castelli et al., filed of even date herewith, IBM Docket No. YO998111.
- This co-pending application and the present invention are commonly assigned to the International Business Machines Corporation, Armonk, N.Y.
- This co-pending application is hereby incorporated by reference in its entirety into the present application.
- the present invention relates to information handling systems and in particular to the compression and interactive retrieval of multi-dimensional data including but not limited to digital images, audio, video, and multi-dimensional lattice data.
- Computer networks create powerful environments for the search and retrieval of distributed information. However, due to bandwidth limitations, computer networks are often not suited for interactively browsing large amounts of data. As a result, retrieving and displaying large images can be a slow process.
- Image compression is effective in reducing the amount of data for storing and transmitting images, however, most image compression algorithms are optimized for rate and distortion performance rather than to facilitate interactive image retrieval.
- the interactive retrieval of large images is a form of browsing in which the views of portions of the image data are successively retrieved in a drill-down or roll-up fashion.
- Hierarchical data structures such as the wavelet packet tree, as taught by Coifman, et al. [Coifman, et al., 92], and the spatial quad-tree, as taught by Samet [Samet, 84], can be used to decompose the images into a hierarchies of views. They use tree-based data structures to arrange the views of the image data into parent-child dependency relationships. The views of the images can be generated by decomposing the parent elements or by synthesizing together the children elements. Coifman, et al. taught a method for selecting the view elements in the wavelet packet tree in order to represent the image data completely and without information loss. Similar methods can be applied to the spatial quad-tree for representing the image data by a complete set of spatial segments.
- the view elements correspond to various spatial-frequency subbands. In particular, some of these subbands correspond to low-resolution views of the image data. However, none of the view elements in the wavelet packet tree correspond to spatial segments of the image data. On the other hand, the view elements in the spatial quad-tree correspond to various spatial segments of the image data, but only at full resolution.
- the spatial quad-tree and wavelet packet tree can be integrated in a graph data structure as taught by Smith and Chang [Smith and Chang, 97].
- the view elements in the space and frequency graph correspond to the spatial segments of the various spatial-frequency subbands. Some of the view elements in the space and frequency graph correspond to the spatial segments of the low-resolution views of the image data.
- Smith and Chang developed a method for selecting the view elements in the space and frequency graph in order to optimize the compression of the image data in terms of rate-distortion performance. The method decomposes the image data into a redundant set of view elements, assigns each view element a compression cost and selects a complete and non-redundant set of view elements based on the compression costs. The selected view elements can be used to reconstruct the image data.
- the Flashpix image format has been used for progressively retrieving large images over the Internet using the Internet Imaging Protocol.
- the user-applications compose views of the images by retrieving tiles from the Flashpix files at the server [Eastman Kodak Co. 1996].
- the Flashpix-based servers store multiple versions of the image at different scales, which results in a redundancy of information of 133% [Burt and Adelson 1983].
- the Flashpix format is also capable of storing the image non-redundantly, but, it then requires added processing to extract the image views. In both cases, the Flashpix-based systems do not reuse data at the client to reduce data transmission in drill-down or roll-up browsing.
- the present invention is directed towards an apparatus and method for interactively retrieving and caching images and multi-dimensional data such as multi-dimensional lattice data.
- the present invention includes features that enable the following:
- Compression the data is decomposed into view elements, and a set of the view elements is selected, compressed, and stored to generate a compressed representation of the data.
- Server-side view construction the view elements are selectively retrieved from storage, decompressed, and processed to generate the views of the data.
- Client-side progressive view construction the client caches the view elements and processes them in combination with view elements retrieved from the server to generate views of the data.
- images can be stored in forms that can be rapidly browsed and retrieved by remote client applications in a drill-down or roll-up fashion.
- the data can be represented and retrieved using a view element data structure that includes node elements and transition elements between nodes.
- the data is decomposed (in space or spatial-frequency to construct a tree-based or graph-based data structure) into view elements.
- a set of view elements is selected, compressed and stored without adversely impacting image view extraction or generation speed. View elements are placed into the node elements of the data structure and the transition elements indicate the processing to generate other view elements in the data structure.
- the view elements are selectively retrieved from storage, decompressed, and processed to generate the views of the data.
- the client caches the view elements and processes them in combination with view elements retrieved from the server to generate views of the data.
- the data reuse at the client reduces data transmission in drill-down or roll-up browsing.
- Data can be ingested, read and written in units of spatial blocks and decomposed into view elements using the spatial block units.
- the ingestion, decomposition, compression, and view retrieval for large images can be done using computer devices that have limited storage and processing capabilities.
- the methods of the present invention are implemented as software tangibly embodied on a computer program or program storage device for execution on a computer or other processor-based device.
- An example of a method having features of the present invention for constructing one or more views of multi-dimensional data using view elements includes the steps of: constructing a view element data structure which includes view elements connected by transition elements; communicating one or more requests for a view of the data; selecting a set of view elements from a view element data structure by examining the view in accordance with one or more node elements and at least one transition element, in response to the requests; retrieving selected view elements from storage; processing the selected view elements in accordance with the transition elements of the view element data structure; and generating said view of the data, in response to said processing step.
- An example of a method having features of the present invention for interactively retrieving said views of multi-dimensional data includes the additional steps of: constructing a client-side view element cache; storing the selected view elements in the client-side cache; for subsequent view requests, identifying one or more of a client cache source and a server source for obtaining selected view elements; retrieving selected view elements from the one or more sources, including at least one view element stored in the cache; processing said view elements in accordance with the transition elements of the view element data structure in order to generate the requested view, in response to said retrieving step; and delivering the view, in response to the processing step.
- An example of a method having features of the present invention wherein the data includes large satellite images further includes the steps of: the constructing step includes the step of constructing a space and frequency view element data structure which includes view elements connected by transition elements; the communicating step includes the step of communicating a request for a view of a satellite image, the request specifying a region of interest in terms of a spatial dimension and a resolution; and the processing step including the step of processing the view elements in accordance with the transition elements of the space and frequency graph view element data structure.
- FIG. 1 illustrates an example of a networked client-server system having features of the present invention
- FIG. 2 illustrates a an example of a process for ingesting, representing and compressing images using view elements
- FIG. 3 illustrates an example of a process for constructing the image views from the view element representation
- FIG. 4 illustrates an example of a process for interactively retrieving image views using view elements
- FIG. 5 illustrates an example of the commutativity in the spatial segmentation and frequency decomposition
- FIG. 6 illustrates an example of a space and frequency graph view element hierarchy data structure
- FIG. 7 illustrates an example selection of view elements from the space and frequency graph view element hierarchy data structure
- FIG. 8 illustrates an example process for ingesting large satellite images into the space and frequency graph view element hierarchy data structure and representing the images using the tiled-wavelet set of view elements
- FIG. 9 illustrates an example process for interactively retrieving image views using the tiled-wavelet set of view elements.
- FIG. 1 depicts an example of a networked client-server system having features of the present invention.
- one or more clients (110) and servers (111) are interconnected by a network (101).
- networks are local area networks (LAN) or wide area networks, e.g., an intranet or the Internet.
- a server (111) includes a conventional database management system (DBMS) (102) and direct access storage devices (DASD) (103).
- DBMS database management system
- DASD direct access storage devices
- a request is typically prepared on a client machine (110) and is submitted to the server (111) through the network (101).
- a request typically interacts with the database management system (102) for retrieving or updating the data stored in a DASD (103).
- the server (111) includes a view management sub-system (109).
- the view management sub-system (109) includes a view element indexing engine (105), which is responsible for accessing the view elements required to generate the view requested in the query.
- the image data in the DBMS is decomposed into view elements by the view element generation engine (106).
- the view element generation engine (106) constructs a view element data structure.
- the view element selection engine (107) selects a set of view elements from the indexed hierarchy, to be stored by the DBMS (102) in the DASD (103). Examples of view element generation, organization, selection and storage will be discussed in more detail with reference to FIG. 2 and FIGS. 5-8.
- an image view synthesis engine (108) retrieves view elements from the DBMS (102) and synthesizes the view.
- the view is returned to the DBMS (102), the retrieval engine (104) or the client (110).
- the view elements can be returned directly to the client (110) where the views can be synthesized using a client-resident image view synthesis engine (112).
- An example of a process for constructing the image views from a view element representation will be described in more detail with reference to FIG. 3. Examples of processes for interactively retrieving image views using view elements will be described in more detail with reference to FIG. 4 and FIG. 9.
- views may be interactively retrieved by an application (100) in which the client (110) caches the view elements for reuse in efficiently generating subsequent views.
- the present invention includes features which can be implemented as computer instructions ("software") tangibly embodied on a computer program product or program storage device for execution on a processor (not shown) provided with client (110) and/or server (111).
- software implemented in a popular object-oriented computer executable code such as JAVA (a trademark of Sun MicroSystems), provides portability across different platforms.
- object-oriented computer executable code such as JAVA (a trademark of Sun MicroSystems)
- JAVA a trademark of Sun MicroSystems
- methods of the present invention may be implemented as software for execution on a computer or other processor-based device.
- the software may be embodied on a magnetic, electrical, optical, or other persistent program and/or data storage device, including but not limited to: magnetic disks, DASD, bubble memory; tape; optical disks such as CD-ROMs; and other persistent (also called nonvolatile) storage devices such as core, ROM, PROM, flash memory, or battery backed RAM.
- one or more of the components instantiated in the memory of the client (110) or server (111) could be accessed and maintained directly via DASD (103) or disk (not shown), the network (101), another server, or could be distributed across a plurality of servers (111).
- FIG. 2 illustrates an example of a block diagram and process for ingesting (211) and compressing (212) the images using view elements.
- a view element data structure (202), for managing and indexing the view elements is constructed. Examples of the view element data structure (202) will be described with reference to FIGS. 5-9).
- the view element data structure (202) can be constructed from other image decompositions including but not limited to: a spatial quad-tree [Samet 1984]; and a wavelet packet tree [Coifman 1993].
- the view element data structure (202) can be stored in resident computer memory (211) or disk storage such as DASD (210).
- the view element data structure includes node elements (500-503) and transition elements (504-507).
- each node element (500-503) stores lattice point data and meta-data associated with a particular view element and each transition element (504-507) connects an input group of view elements (508) to an output group of view elements (511, 512).
- the transition elements define methods by which the input groups of view elements can be processed to generate the output groups of view elements. Examples of the processing methods include spatial segmentation, frequency decomposition, spatial composition and frequency synthesis.
- the view element data structure construction step (201) can consider the attributes of the input image (200), such as image width, height and color depth, in constructing the view element data structure (202).
- the depth of the view element hierarchy data structure (202) can be determined from the size of the image.
- the image (200) is supplied to the view element ingestion subsystem (211), which uses the view element data structure (202) to represent the image using view elements.
- the image can be decomposed into spatial block units (212), in step (203).
- the spatial block unit extraction process separates the image into a disjoint set of spatial partitions that completely cover the image.
- the spatial block unit extraction process can be used to handle large input images such as satellite images with limited computing and storage resources.
- the image (200), or optionally, the spatial block units (212), are fed into the ingestion subsystem (203).
- step 204 the data is stored into the node elements of the view element data structure (202). Additional view elements are generated and placed into the node elements of the view element data structure (202) in steps 205-6 and 204.
- step 205 the view elements are extracted from the view element data structure (202) and in step 206 are fed into the view element synthesis engine (108).
- the view element synthesis engine (108) synthesizes new view elements by processing the input view elements in accordance with the methods defined by the transition elements in the view element data structure (202). This processing can involve frequency analysis, spatial decomposition, frequency synthesis and spatial composition in generating the view elements.
- the new view elements are then fed back into the ingestion step 204 and are inserted into the node elements of the view element data structure (202).
- the representation and compression of the image using view elements is accomplished by the view element compression subsystem (212).
- the view element selection logic (107) selects a set of view elements from the view element data structure (202).
- the view element sets can be selected on the basis of many factors, including: optimizing the rate-distortion compression performance; minimizing an additive information cost function such as entropy [Coifman and Wickerhauser 1992]; optimizing view extraction speed; minimizing storage space; or satisfying constraints of completeness or non-redundancy [Smith 1998].
- the selected view elements can be compressed using lossy compression (such as JPEG) or lossless compression (such as LZW).
- the selected view elements are fed into the view element storage subsystem (for example DBMS (102)).
- the view element storage subsystem then stores the view elements DASD (210).
- FIG. 3 illustrates an example of a block diagram and process for generating views of an image from the view elements.
- the system is supplied with a view request.
- the view request specifies a region of interest from the image in terms of spatial dimensions and resolution.
- the view request is translated into a selection of view elements, in step 301.
- the view element selection subsystem (107) compares the view elements in storage (305) to the view elements that are needed to satisfy the view request.
- the view element selection subsystem analyzes in concert, the node elements of the view elements in storage, the node elements of the requested view, and the transition nodes between view elements in the view element data structure (302).
- the view element selection subsystem selects a set of view elements from storage (305) and defines a processing program by which the view elements can be retrieved from storage (305) and processed to generate the requested view.
- the selection of view elements and determination of the processing program can be made on the basis of retrieval and processing costs.
- the selected view elements are retrieved from DASD (305) in the view element retrieval step 304.
- the view elements are decompressed (if they were compressed), and then inserted into the view element data structure (302).
- the view elements are extracted as necessary from the view element data structure (302).
- the view elements are synthesized by the view element synthesis engine (108) according to the processing program (identified by the transition nodes).
- the view element engine generates the requested view from the view elements.
- the requested view can be written to disk or transmitted in units of spatial blocks, in step 308, to deliver the image view (309) to the client (110).
- FIG. 4 illustrates an example of a block diagram and process for interactively retrieving views of the image data by a client application (415) in which the client (416) caches the view elements (410) for reuse in generating views.
- the client application (415) initially issues a view request (400) to the server (417) through the network (401).
- the server (417) delivers the view, or view elements back to the client (415).
- step 402 the view request is handled at the server (417) by the view element selection logic which selects the view elements from the server-side view element data structure (403).
- the view element selection procedure follows that described earlier with reference to step 301 in FIG. 3.
- step 404 the selected view elements are retrieved from the DASD (405) by the view element retrieval engine (104) and are inserted into the view element data structure (403) at the server (417).
- step 406 the view elements are extracted from the view element data structure (403) and are delivered to the client (416) through the network (401).
- the client (416) receives the view elements from the server and ingests them into the client-side view element data structure (408).
- the view elements are then stored in the client-side cache (410), for possible reuse, by the view element storage subsystem.
- the requested view can be then generated by the client (416) as follows: the view elements are extracted from the view element data structure, in step 413; and are processed by the view element synthesis engine (108), in step 414, to synthesize the view. The view is then delivered to the client application (415).
- a search is first performed, in step 418, in the client-side view element data structure (408) to examine what view elements are currently stored in the client cache (410). Since the client (416) stores view elements in the client cache (410), some of the view elements can be provided by the client.
- the client application can then indicate to the server in the view request (400) the set of view elements that are in the client cache.
- the server (417) then performs the view element selection and extraction process to select a set of view elements to deliver to the client (416).
- the view element selection logic examines the view element data structure (403) in order to make the selection.
- the view element selection step considers the information sent from the client in step (400) that specifies the set of view elements that are stored in the client cache.
- the view element selection logic may also consider factors such as: client processing; retrieval costs; storage constraints; network transmission costs; server processing; and retrieval costs, in selecting the view elements.
- the view element selection can be performed by the client.
- the client examines what view elements are stored in the client cache (410) and server storage (405), makes a selection of view elements, and issues the view element selection to the server in step (400).
- the client application makes the request (400) to the server (417) through the network (401) to retrieve the view elements.
- the server (417) retrieves the view elements from the server storage (405) and delivers the view elements to the client.
- the client receives these view elements and inserts them into the client-side view element data structure (408).
- the view elements may be retained in a compressed form to reduce the amount of data that needs to be handled.
- the view elements are retrieved in step 411 from the client cache (410).
- the view elements are decompressed (if necessary) in step 412, and are inserted into the view element data structure (408).
- the view elements are extracted from the view element data structure in step 413 and are processed in step 414 to synthesize the view.
- the view is delivered by the view element synthesis engine (414) to the client application (415).
- FIG. 5 illustrates an example of a decomposition of an image into view elements using transition elements.
- the view element data structure is implemented as a space and frequency graph view element hierarchy data structure.
- the view elements (508 . . . 514) correspond to node elements (500 . . . 503), and the space and frequency operators (504 . . . 507) correspond to the transition elements of the space and frequency graph view element hierarchy data structure.
- a spatial segmentation .sup.(S) operator (504) generates segmented view elements (509) and (510). In general, the spatial segmentation can be iterated to perform a quad-tree segmentation of the image [Samet 1984].
- a frequency decomposition .sup.(F) operator (505) generates low-frequency (511) and high-frequency (512) subband view elements, respectively. In general, the frequency decomposition can be iterated to perform a subband decomposition of the image [Woods and O'Neil 1986].
- a segmentation S can be performed on a frequency subband view element (511) (generated by frequency decomposition) to generate space and frequency view elements (513 and 514).
- a frequency decomposition F can be performed on a view element (509) (that was generated by segmentation) to generate space and frequency view elements (513 and 515).
- the frequency decomposition F is performed in a partitionable-form
- the frequency decomposition and segmentation operations are commutative [Smith and Chang 1997]. This allows the construction of a space and frequency graph view element hierarchy data structure for managing the view elements (illustrated in more detail FIG. 6).
- FIG. 6 illustrates an example of a space and frequency graph (SFGraph) view element hierarchy data structure [Smith and Chang 1997].
- the view element nodes are collected in the SFGraph view element hierarchy data structure into node blocks (603, 604, . . . , 612).
- the node blocks are organized hierarchically to provide an overall organization of the view element nodes.
- Each of the node blocks of the SFGraph view element hierarchy collects the view elements that have the same spatial coverage and resolution.
- the spatial coverage can be determined by the number of spatial decomposition operations .sup.(S) used to generate the view elements in the node block.
- the resolution can be determined by the number of frequency decomposition operations .sup.(F) used to generate the view elements in the node block.
- Each spatial decomposition decreases the spatial coverage by one half.
- Each frequency decomposition decreases the resolution by one half.
- the view elements in node block (611) have a spatial coverage of one quarter the image coverage and a resolution of one-half, since there are two spatial decompositions .sup.(S), and one frequency decomposition .sup.(F) required to generate those view elements.
- the SFGraph view element hierarchy data structure can be used to manage the view elements for large satellite images.
- the SFGraph is effective in this application because some of the view elements of the SFGraph correspond directly to views of specific spatial areas of the large images at different resolutions. View elements of this type are of interest to users of satellite image retrieval systems.
- views are represented within the space and frequency graph, it is possible to synthesize the views from any complete and non-redundant set of view elements in the space and frequency graph.
- a number of alternative sets of view elements and transition paths in the space and frequency graph may be used for constructing the views within the space and frequency graph. This allows the space and frequency graph to be used for interactively retrieving views of the image by progressively retrieving and re-using the view elements.
- FIG. 7 illustrates an example of a non-redundant and complete set of view elements selected from the SFGraph view element hierarchy.
- the set of view elements typifies a set that is selected by the view element compression subsystem described with reference to FIG. 2.
- the selected view elements (713) are indicated by the shaded elements.
- these view elements are compressed (in step 208) and are stored (in step 209).
- the remaining view elements, which are not shaded in FIG. 7, can be generated from the selected set of view elements by retrieving, decompressing and processing the view elements as described with reference to FIG. 3, in accordance with the space and frequency transition elements of the space and frequency graph view element data structure.
- FIG. 8 illustrates an example of a process for ingesting large satellite images into the a SFGraph hierarchy view element data structure and representing the large satellite images using a set of view elements from the SFGraph view element data structure.
- the images are represented by the a tiled-wavelet set of view elements.
- the tiled-wavelet set of view elements corresponds to the view elements generated in a wavelet transformation of the image in which the wavelet subbands are partitioned into a disjoint and complete set of files.
- another set of view elements approximates the tiled-wavelet set by alternatively performing the wavelet transform on non-overlapping spatial partitions of the image.
- the ingestion (204), view element extraction (205), and processing (206) can be performed as follows:
- the F decomposition is performed on the view elements belonging to the node block .sup.(D-1, 0) to generate the view elements belonging to the node block .sup.(D-1, 1) as follows:
- the view elements belonging to the tiled-wavelet set of view elements have fixed data size and correspond to various spatial coverages and frequency subbands.
- the only low-frequency view element retained in the tiled-wavelet view element set belongs to node block .sup.(0, D), and corresponds a low resolution view of the entire image.
- the other retained elements correspond to higher frequency subbands of the spatial segments of the image.
- the views of the image that correspond to arbitrary spatial areas of the image at different resolutions can be generated from the tiled-wavelet set of view elements by reversing the previous process of ingestion and view element processing. For example, given a requested image view V (d,x,y,w,h) with a resolution of d and a spatial coverage of .sup.(x,y,w,h), the view is constructed from the tiled-wavelet set of view elements as follows:
- FIG. 9 illustrates an example of a process for the interactive retrieval of views by the client (110).
- the initial view is retrieved from the SFGraph view element hierarchy data structure from the node block .sup.(0, 5) (904).
- This view element corresponds to a low-resolution view of the entire image.
- the view element is returned to the client and is stored in the client cache as view element (900).
- the client application subsequently requests a view that increases the magnification on a specific spatial area of the image view (900).
- the client retrieves additional view elements (905) from the server and combines them with the view element (900) from the client cache to synthesize the requested view (901).
- the client repeats the process of zooming-in on spatial regions of the image two more times.
- the additional view elements (906) are retrieved from the server and are combined with the view element (901) in the client cache to synthesize the requested view (902).
- additional view elements (907) are retrieved from the server and are combined with the view element (902) in the client cache to synthesize the requested view (903).
- this invention can be applied in a client-server system for retrieving views of satellite images for example in precision farming.
- the application represents the images using the tiled-wavelet set of view elements selected from the space and frequency graph view element hierarchy.
- the client application utilizes a client-side cache in which to store the retrieved view elements of the satellite image in order to speed up the process of interactively retrieving views of the satellite images over the Internet.
Abstract
Description
Claims (19)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/079,986 US6014671A (en) | 1998-04-14 | 1998-05-15 | Interactive retrieval and caching of multi-dimensional data using view elements |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US8165498P | 1998-04-14 | 1998-04-14 | |
US09/079,986 US6014671A (en) | 1998-04-14 | 1998-05-15 | Interactive retrieval and caching of multi-dimensional data using view elements |
Publications (1)
Publication Number | Publication Date |
---|---|
US6014671A true US6014671A (en) | 2000-01-11 |
Family
ID=26762653
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/079,986 Expired - Lifetime US6014671A (en) | 1998-04-14 | 1998-05-15 | Interactive retrieval and caching of multi-dimensional data using view elements |
Country Status (1)
Country | Link |
---|---|
US (1) | US6014671A (en) |
Cited By (57)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6223183B1 (en) * | 1999-01-29 | 2001-04-24 | International Business Machines Corporation | System and method for describing views in space, time, frequency, and resolution |
US6226636B1 (en) * | 1998-11-20 | 2001-05-01 | Philips Electronics North America Corp. | System for retrieving images using a database |
WO2001093116A2 (en) * | 2000-05-31 | 2001-12-06 | Mentor Graphics Corporation | Storage of design data |
US6341330B1 (en) * | 1998-07-27 | 2002-01-22 | Oak Technology, Inc. | Method and system for caching a selected viewing angle in a DVD environment |
US20020052866A1 (en) * | 2000-09-02 | 2002-05-02 | Wortmann Joseph P. | Methods and apparatus for streaming DICOM images through data element sources and sinks |
US6389417B1 (en) * | 1999-06-29 | 2002-05-14 | Samsung Electronics Co., Ltd. | Method and apparatus for searching a digital image |
US6393526B1 (en) | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
US20020102028A1 (en) * | 2001-02-01 | 2002-08-01 | KELLER Scott | Image storage and display system |
US6449639B1 (en) * | 1998-12-23 | 2002-09-10 | Doxio, Inc. | Method and system for client-less viewing of scalable documents displayed using internet imaging protocol commands |
US6460044B1 (en) * | 1999-02-02 | 2002-10-01 | Jinbo Wang | Intelligent method for computer file compression |
US20020184238A1 (en) * | 2001-04-03 | 2002-12-05 | Ultravisual Medical System | Method of and system for storing, communicating, and displaying image data |
US6564263B1 (en) * | 1998-12-04 | 2003-05-13 | International Business Machines Corporation | Multimedia content description framework |
US6567814B1 (en) * | 1998-08-26 | 2003-05-20 | Thinkanalytics Ltd | Method and apparatus for knowledge discovery in databases |
US6633682B1 (en) * | 1999-06-21 | 2003-10-14 | New York University | Progressive fractal rendering |
US20030220989A1 (en) * | 2002-05-23 | 2003-11-27 | Michael Tsuji | Method and system for client browser update |
US20030225791A1 (en) * | 2002-05-30 | 2003-12-04 | Jurgen Stauder | Method and device for fragmenting multimedia data |
US6694311B1 (en) | 1999-01-25 | 2004-02-17 | International Business Machines Corporation | Method and apparatus for fast query approximation using adaptive query vector projection |
US20040078300A1 (en) * | 1999-01-25 | 2004-04-22 | Smith John R. | Method and apparatus for progressive information querying on proprietary data and for the progressive selling of information |
US20040088278A1 (en) * | 2002-10-30 | 2004-05-06 | Jp Morgan Chase | Method to measure stored procedure execution statistics |
US20040103199A1 (en) * | 2002-11-22 | 2004-05-27 | Anthony Chao | Method and system for client browser update from a lite cache |
US20040186840A1 (en) * | 2003-03-20 | 2004-09-23 | International Business Machines Corporation | Partial data model exposure through client side caching |
US20040215659A1 (en) * | 2001-08-02 | 2004-10-28 | Singfield Christian Robert Mau | Network image server |
US6868525B1 (en) | 2000-02-01 | 2005-03-15 | Alberti Anemometer Llc | Computer graphic display visualization system and method |
US20050065963A1 (en) * | 2003-09-19 | 2005-03-24 | Ziemann David M. | Processing of tree data structures |
FR2860935A1 (en) * | 2003-10-09 | 2005-04-15 | Canon Kk | Digital data processing method for peer-to-peer computer network, involves storing data structure establishing link between each usable part of signal and single identifier of signal in communication apparatus |
US20050192994A1 (en) * | 1998-12-10 | 2005-09-01 | Caldwell Donald F. | Data compression method and apparatus |
US20060020431A1 (en) * | 2004-05-11 | 2006-01-26 | Peter Gipps | Path determination system for transport system |
US20060020430A1 (en) * | 2004-05-11 | 2006-01-26 | Peter Gipps | Path analysis system with client and server-side applications |
WO2006016782A1 (en) * | 2004-08-13 | 2006-02-16 | Industry Academic Cooperation Foundation Kyunghee University | Method and apparatus to encode image, and method and apparatus to decode image data |
US20060034530A1 (en) * | 2004-08-13 | 2006-02-16 | Samsung Electronics Co., Ltd. | Method and device for making virtual image region for motion estimation and compensation of panorama image |
US20060034367A1 (en) * | 2004-08-13 | 2006-02-16 | Gwang-Hoon Park | Method and apparatus to encode image, and method and apparatus to decode image data |
US20060053369A1 (en) * | 2004-09-03 | 2006-03-09 | Henri Kalajian | System and method for managing template attributes |
US20060059210A1 (en) * | 2004-09-16 | 2006-03-16 | Macdonald Glynne | Generic database structure and related systems and methods for storing data independent of data type |
US20060080255A1 (en) * | 1999-02-09 | 2006-04-13 | The Chase Manhattan Bank | System and method for back office processing of banking transactions using electronic files |
US7069278B2 (en) | 2003-08-08 | 2006-06-27 | Jpmorgan Chase Bank, N.A. | System for archive integrity management and related methods |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US20060206623A1 (en) * | 2005-03-10 | 2006-09-14 | Peter Gipps | Path determination system for vehicle infrastructure paths |
US7181438B1 (en) | 1999-07-21 | 2007-02-20 | Alberti Anemometer, Llc | Database access system |
US20070154926A1 (en) * | 1996-05-03 | 2007-07-05 | Applera Corporation | Methods of analyzing polynucleotides employing energy transfer dyes |
US20070182734A1 (en) * | 2006-02-08 | 2007-08-09 | 3-D-V-U Israel (2000) Ltd. | Adaptive Quadtree-based Scalable Surface Rendering |
US20080016138A1 (en) * | 2006-07-13 | 2008-01-17 | University Of Central Florida Research Foundation, Inc. | Systems and Methods for Graphical Rendering |
US20080018648A1 (en) * | 2006-07-13 | 2008-01-24 | University Of Central Florida Research Foundation, Inc. | Systems and Methods for Graphical Rendering |
US7328211B2 (en) | 2000-09-21 | 2008-02-05 | Jpmorgan Chase Bank, N.A. | System and methods for improved linguistic pattern matching |
US20080198184A1 (en) * | 2005-05-23 | 2008-08-21 | Koninklijke Philips Electronics, N.V. | Fast and Interruptible Drive Scheme For Electrosphoretic Displays |
US20090132466A1 (en) * | 2004-10-13 | 2009-05-21 | Jp Morgan Chase Bank | System and method for archiving data |
US20090198505A1 (en) * | 2008-02-05 | 2009-08-06 | Peter Gipps | Interactive path planning with dynamic costing |
US20090317010A1 (en) * | 2008-06-24 | 2009-12-24 | Microsoft Corporation | Multiple Resolution Image Storage |
US20090317020A1 (en) * | 2008-06-24 | 2009-12-24 | Microsoft Corporation | Variable Resolution Images |
US8019788B1 (en) * | 2002-09-30 | 2011-09-13 | Siemens Product Lifecycle Management Software Inc. | Data compression and file segmentation in directmodel JT datastores |
US8065606B1 (en) | 2005-09-16 | 2011-11-22 | Jpmorgan Chase Bank, N.A. | System and method for automating document generation |
US8104076B1 (en) | 2006-11-13 | 2012-01-24 | Jpmorgan Chase Bank, N.A. | Application access control system |
US20140089241A1 (en) * | 1999-02-01 | 2014-03-27 | Steven M. Hoffberg | System and method for intermachine markup language communications |
US20150095364A1 (en) * | 2013-09-30 | 2015-04-02 | Lexmark International Technology, S.A. | System and Methods for Caching and Querying Objects Stored in Multiple Databases |
US9038177B1 (en) | 2010-11-30 | 2015-05-19 | Jpmorgan Chase Bank, N.A. | Method and system for implementing multi-level data fusion |
US9292588B1 (en) | 2011-07-20 | 2016-03-22 | Jpmorgan Chase Bank, N.A. | Safe storing data for disaster recovery |
CN109299060A (en) * | 2018-11-22 | 2019-02-01 | 华东计算技术研究所（中国电子科技集团公司第三十二研究所） | Distributed file method and system based on image rectangular blocks |
US10540373B1 (en) | 2013-03-04 | 2020-01-21 | Jpmorgan Chase Bank, N.A. | Clause library manager |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5384725A (en) * | 1990-05-18 | 1995-01-24 | Yale University | Method and apparatus for encoding and decoding using wavelet-packets |
US5454371A (en) * | 1993-11-29 | 1995-10-03 | London Health Association | Method and system for constructing and displaying three-dimensional images |
US5555409A (en) * | 1990-12-04 | 1996-09-10 | Applied Technical Sysytem, Inc. | Data management systems and methods including creation of composite views of data |
US5767854A (en) * | 1996-09-27 | 1998-06-16 | Anwar; Mohammed S. | Multidimensional data display and manipulation system and methods for using same |
US5819016A (en) * | 1993-10-05 | 1998-10-06 | Kabushiki Kaisha Toshiba | Apparatus for modeling three dimensional information |
US5821925A (en) * | 1996-01-26 | 1998-10-13 | Silicon Graphics, Inc. | Collaborative work environment supporting three-dimensional objects and multiple remote participants |
US5903271A (en) * | 1997-05-23 | 1999-05-11 | International Business Machines Corporation | Facilitating viewer interaction with three-dimensional objects and two-dimensional images in virtual three-dimensional workspace by drag and drop technique |
-
1998
- 1998-05-15 US US09/079,986 patent/US6014671A/en not_active Expired - Lifetime
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5384725A (en) * | 1990-05-18 | 1995-01-24 | Yale University | Method and apparatus for encoding and decoding using wavelet-packets |
US5555409A (en) * | 1990-12-04 | 1996-09-10 | Applied Technical Sysytem, Inc. | Data management systems and methods including creation of composite views of data |
US5819016A (en) * | 1993-10-05 | 1998-10-06 | Kabushiki Kaisha Toshiba | Apparatus for modeling three dimensional information |
US5454371A (en) * | 1993-11-29 | 1995-10-03 | London Health Association | Method and system for constructing and displaying three-dimensional images |
US5821925A (en) * | 1996-01-26 | 1998-10-13 | Silicon Graphics, Inc. | Collaborative work environment supporting three-dimensional objects and multiple remote participants |
US5767854A (en) * | 1996-09-27 | 1998-06-16 | Anwar; Mohammed S. | Multidimensional data display and manipulation system and methods for using same |
US5903271A (en) * | 1997-05-23 | 1999-05-11 | International Business Machines Corporation | Facilitating viewer interaction with three-dimensional objects and two-dimensional images in virtual three-dimensional workspace by drag and drop technique |
Non-Patent Citations (12)
Title |
---|
FlashPix format and Architecture White Paper, 1996 Eastman Kodak Company, 27 pages. * |
FlashPix™ format and Architecture White Paper, ©1996 Eastman Kodak Company, 27 pages. |
Hanan Samet, "The Wuadtree and Related Hierarchical Data Structures", Computing Surveys, vol. 16, No. 2, pp. 187-257, Jun. 1984. |
Hanan Samet, The Wuadtree and Related Hierarchical Data Structures , Computing Surveys, vol. 16, No. 2, pp. 187 257, Jun. 1984. * |
J.R. Smith et al., "Joint Adaptive Space and Frequency Basis Selection", Copyright 1997 IEEE, Presented at ICIP'97, Oct. 26-29, 1997. |
J.R. Smith et al., Joint Adaptive Space and Frequency Basis Selection , Copyright 1997 IEEE, Presented at ICIP 97, Oct. 26 29, 1997. * |
J.W. Woods et al., "Subband Coding of Images", IEEE Transactions on Acoustics, Speech, and Signal Processing, pp. 1278-1288, Vo. ASSP-34, No. 5, Oct. 1986. |
J.W. Woods et al., Subband Coding of Images , IEEE Transactions on Acoustics, Speech, and Signal Processing, pp. 1278 1288, Vo. ASSP 34, No. 5, Oct. 1986. * |
P.J. Burt et al., "The Laplacian Pyramid as a Compact Image Code", IEEE Transactions on Communications, pp. 532-540, COM-31, No. 4, Apr. 1983. |
P.J. Burt et al., The Laplacian Pyramid as a Compact Image Code , IEEE Transactions on Communications, pp. 532 540, COM 31, No. 4, Apr. 1983. * |
R.C. Coifman et al., "Entropy-Based Algorithms for Best Basis Selection", IEEE Transactions on Information Theory, pp. 713-718, vol. 38, No. 2, Mar. 1992. |
R.C. Coifman et al., Entropy Based Algorithms for Best Basis Selection , IEEE Transactions on Information Theory, pp. 713 718, vol. 38, No. 2, Mar. 1992. * |
Cited By (104)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070154926A1 (en) * | 1996-05-03 | 2007-07-05 | Applera Corporation | Methods of analyzing polynucleotides employing energy transfer dyes |
US6393526B1 (en) | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US6341330B1 (en) * | 1998-07-27 | 2002-01-22 | Oak Technology, Inc. | Method and system for caching a selected viewing angle in a DVD environment |
US6567814B1 (en) * | 1998-08-26 | 2003-05-20 | Thinkanalytics Ltd | Method and apparatus for knowledge discovery in databases |
US6226636B1 (en) * | 1998-11-20 | 2001-05-01 | Philips Electronics North America Corp. | System for retrieving images using a database |
US6564263B1 (en) * | 1998-12-04 | 2003-05-13 | International Business Machines Corporation | Multimedia content description framework |
US6959300B1 (en) * | 1998-12-10 | 2005-10-25 | At&T Corp. | Data compression method and apparatus |
US20050192994A1 (en) * | 1998-12-10 | 2005-09-01 | Caldwell Donald F. | Data compression method and apparatus |
US7720878B2 (en) * | 1998-12-10 | 2010-05-18 | Donald F Caldwell | Data compression method and apparatus |
US6449639B1 (en) * | 1998-12-23 | 2002-09-10 | Doxio, Inc. | Method and system for client-less viewing of scalable documents displayed using internet imaging protocol commands |
US20040078300A1 (en) * | 1999-01-25 | 2004-04-22 | Smith John R. | Method and apparatus for progressive information querying on proprietary data and for the progressive selling of information |
US6694311B1 (en) | 1999-01-25 | 2004-02-17 | International Business Machines Corporation | Method and apparatus for fast query approximation using adaptive query vector projection |
US6223183B1 (en) * | 1999-01-29 | 2001-04-24 | International Business Machines Corporation | System and method for describing views in space, time, frequency, and resolution |
US20140089241A1 (en) * | 1999-02-01 | 2014-03-27 | Steven M. Hoffberg | System and method for intermachine markup language communications |
US6460044B1 (en) * | 1999-02-02 | 2002-10-01 | Jinbo Wang | Intelligent method for computer file compression |
US8600893B2 (en) | 1999-02-09 | 2013-12-03 | Jpmorgan Chase Bank, National Association | System and method for back office processing of banking transactions using electronic files |
US10467688B1 (en) | 1999-02-09 | 2019-11-05 | Jpmorgan Chase Bank, N.A. | System and method for back office processing of banking transactions using electronic files |
US20060080255A1 (en) * | 1999-02-09 | 2006-04-13 | The Chase Manhattan Bank | System and method for back office processing of banking transactions using electronic files |
US8370232B2 (en) | 1999-02-09 | 2013-02-05 | Jpmorgan Chase Bank, National Association | System and method for back office processing of banking transactions using electronic files |
US6633682B1 (en) * | 1999-06-21 | 2003-10-14 | New York University | Progressive fractal rendering |
US6389417B1 (en) * | 1999-06-29 | 2002-05-14 | Samsung Electronics Co., Ltd. | Method and apparatus for searching a digital image |
US20070156677A1 (en) * | 1999-07-21 | 2007-07-05 | Alberti Anemometer Llc | Database access system |
US7181438B1 (en) | 1999-07-21 | 2007-02-20 | Alberti Anemometer, Llc | Database access system |
US8370362B2 (en) | 1999-07-21 | 2013-02-05 | Alberti Anemometer Llc | Database access system |
US7801896B2 (en) | 1999-07-21 | 2010-09-21 | Andrew J Szabo | Database access system |
US20100332583A1 (en) * | 1999-07-21 | 2010-12-30 | Andrew Szabo | Database access system |
US6868525B1 (en) | 2000-02-01 | 2005-03-15 | Alberti Anemometer Llc | Computer graphic display visualization system and method |
US7574659B2 (en) | 2000-02-01 | 2009-08-11 | Andrew Szabo | Computer graphic display visualization system and method |
US6539519B1 (en) | 2000-05-31 | 2003-03-25 | Mark D. Meeker | Spatial characteristic and logical hierarchy based manner for compactly storing IC design data and related operations |
WO2001093116A2 (en) * | 2000-05-31 | 2001-12-06 | Mentor Graphics Corporation | Storage of design data |
WO2001093116A3 (en) * | 2000-05-31 | 2003-01-30 | Mentor Graphics Corp | Storage of design data |
US20020052866A1 (en) * | 2000-09-02 | 2002-05-02 | Wortmann Joseph P. | Methods and apparatus for streaming DICOM images through data element sources and sinks |
US20030149680A9 (en) * | 2000-09-02 | 2003-08-07 | Wortmann Joseph P. | Methods and apparatus for streaming DICOM images through data element sources and sinks |
US7426567B2 (en) | 2000-09-02 | 2008-09-16 | Emageon Inc. | Methods and apparatus for streaming DICOM images through data element sources and sinks |
US7328211B2 (en) | 2000-09-21 | 2008-02-05 | Jpmorgan Chase Bank, N.A. | System and methods for improved linguistic pattern matching |
EP1229457A2 (en) * | 2001-02-01 | 2002-08-07 | Fuji Photo Film Co., Ltd. | Image storage and display system |
US20020102028A1 (en) * | 2001-02-01 | 2002-08-01 | KELLER Scott | Image storage and display system |
US7209592B2 (en) | 2001-02-01 | 2007-04-24 | Fuji Film Corp. | Image storage and display system |
EP1229457A3 (en) * | 2001-02-01 | 2005-06-01 | Fuji Photo Film Co., Ltd. | Image storage and display system |
US20020184238A1 (en) * | 2001-04-03 | 2002-12-05 | Ultravisual Medical System | Method of and system for storing, communicating, and displaying image data |
US7170521B2 (en) | 2001-04-03 | 2007-01-30 | Ultravisual Medical Systems Corporation | Method of and system for storing, communicating, and displaying image data |
US20040215659A1 (en) * | 2001-08-02 | 2004-10-28 | Singfield Christian Robert Mau | Network image server |
US7987246B2 (en) | 2002-05-23 | 2011-07-26 | Jpmorgan Chase Bank | Method and system for client browser update |
US20030220989A1 (en) * | 2002-05-23 | 2003-11-27 | Michael Tsuji | Method and system for client browser update |
US20030225791A1 (en) * | 2002-05-30 | 2003-12-04 | Jurgen Stauder | Method and device for fragmenting multimedia data |
US8019788B1 (en) * | 2002-09-30 | 2011-09-13 | Siemens Product Lifecycle Management Software Inc. | Data compression and file segmentation in directmodel JT datastores |
US8756255B2 (en) | 2002-09-30 | 2014-06-17 | Siemens Product Lifecycle Management Software Inc. | Compression and storage of computer aided design data |
US8370398B2 (en) | 2002-09-30 | 2013-02-05 | Siemens Product Lifecycle Management Software Inc. | Compression and storage of computer aided design data |
US20040088278A1 (en) * | 2002-10-30 | 2004-05-06 | Jp Morgan Chase | Method to measure stored procedure execution statistics |
US7340650B2 (en) | 2002-10-30 | 2008-03-04 | Jp Morgan Chase & Co. | Method to measure stored procedure execution statistics |
US20040103199A1 (en) * | 2002-11-22 | 2004-05-27 | Anthony Chao | Method and system for client browser update from a lite cache |
US20040186840A1 (en) * | 2003-03-20 | 2004-09-23 | International Business Machines Corporation | Partial data model exposure through client side caching |
US7574423B2 (en) * | 2003-03-20 | 2009-08-11 | International Business Machines Corporation | Partial data model exposure through client side caching |
US20090299984A1 (en) * | 2003-03-20 | 2009-12-03 | International Business Machines Corporation | Partial data model exposure through client side caching |
US7069278B2 (en) | 2003-08-08 | 2006-06-27 | Jpmorgan Chase Bank, N.A. | System for archive integrity management and related methods |
US20060200508A1 (en) * | 2003-08-08 | 2006-09-07 | Jp Morgan Chase Bank | System for archive integrity management and related methods |
US7617261B2 (en) | 2003-08-08 | 2009-11-10 | Jp Morgan Chase Bank | System for archive integrity management and related methods |
US7516139B2 (en) | 2003-09-19 | 2009-04-07 | Jp Morgan Chase Bank | Processing of tree data structures |
US20050065963A1 (en) * | 2003-09-19 | 2005-03-24 | Ziemann David M. | Processing of tree data structures |
US20050065964A1 (en) * | 2003-09-19 | 2005-03-24 | Ziemann David M. | Update of a tree-based database |
US20050065965A1 (en) * | 2003-09-19 | 2005-03-24 | Ziemann David M. | Navigation of tree data structures |
US20050114386A1 (en) * | 2003-10-09 | 2005-05-26 | Canon Kabushiki Kaisha | Method and device for processing digital data |
US8782116B2 (en) | 2003-10-09 | 2014-07-15 | Canon Kabushiki Kaisha | Method and device for processing digital data with a unique identifier |
FR2860935A1 (en) * | 2003-10-09 | 2005-04-15 | Canon Kk | Digital data processing method for peer-to-peer computer network, involves storing data structure establishing link between each usable part of signal and single identifier of signal in communication apparatus |
US20060020431A1 (en) * | 2004-05-11 | 2006-01-26 | Peter Gipps | Path determination system for transport system |
US20060020430A1 (en) * | 2004-05-11 | 2006-01-26 | Peter Gipps | Path analysis system with client and server-side applications |
JP2008510357A (en) * | 2004-08-13 | 2008-04-03 | インダストリー・アカデミック・コーオペレーション・ファウンデーション・キョンヒ・ユニヴァーシティ | Image encoding method, encoding device, image decoding method, and decoding device |
US7627194B2 (en) | 2004-08-13 | 2009-12-01 | Samsung Electronics Co., Ltd. | Method and device for making virtual image region for motion estimation and compensation of panorama image |
US20060034530A1 (en) * | 2004-08-13 | 2006-02-16 | Samsung Electronics Co., Ltd. | Method and device for making virtual image region for motion estimation and compensation of panorama image |
WO2006016782A1 (en) * | 2004-08-13 | 2006-02-16 | Industry Academic Cooperation Foundation Kyunghee University | Method and apparatus to encode image, and method and apparatus to decode image data |
WO2006016789A1 (en) * | 2004-08-13 | 2006-02-16 | Industry Academic Cooperation Foundation Kyunghee University | Method and device for making virtual image region for motion estimation and compensation of panorama image |
CN101002471B (en) * | 2004-08-13 | 2010-08-18 | 庆熙大学校产学协力团 | Method and apparatus to encode image, and method and apparatus to decode image data |
US8217988B2 (en) | 2004-08-13 | 2012-07-10 | Samsung Electronics Co., Ltd. | Method and apparatus to encode image, and method and apparatus to decode image data |
US20060034367A1 (en) * | 2004-08-13 | 2006-02-16 | Gwang-Hoon Park | Method and apparatus to encode image, and method and apparatus to decode image data |
US20060053369A1 (en) * | 2004-09-03 | 2006-03-09 | Henri Kalajian | System and method for managing template attributes |
US7366974B2 (en) | 2004-09-03 | 2008-04-29 | Jp Morgan Chase Bank | System and method for managing template attributes |
US20060059210A1 (en) * | 2004-09-16 | 2006-03-16 | Macdonald Glynne | Generic database structure and related systems and methods for storing data independent of data type |
US20090132466A1 (en) * | 2004-10-13 | 2009-05-21 | Jp Morgan Chase Bank | System and method for archiving data |
US20060206623A1 (en) * | 2005-03-10 | 2006-09-14 | Peter Gipps | Path determination system for vehicle infrastructure paths |
US20080198184A1 (en) * | 2005-05-23 | 2008-08-21 | Koninklijke Philips Electronics, N.V. | Fast and Interruptible Drive Scheme For Electrosphoretic Displays |
US8065606B1 (en) | 2005-09-16 | 2011-11-22 | Jpmorgan Chase Bank, N.A. | System and method for automating document generation |
US8732567B1 (en) | 2005-09-16 | 2014-05-20 | Jpmorgan Chase Bank, N.A. | System and method for automating document generation |
US20070182734A1 (en) * | 2006-02-08 | 2007-08-09 | 3-D-V-U Israel (2000) Ltd. | Adaptive Quadtree-based Scalable Surface Rendering |
US7561156B2 (en) | 2006-02-08 | 2009-07-14 | INOVO Limited | Adaptive quadtree-based scalable surface rendering |
US20080018648A1 (en) * | 2006-07-13 | 2008-01-24 | University Of Central Florida Research Foundation, Inc. | Systems and Methods for Graphical Rendering |
US8164592B2 (en) * | 2006-07-13 | 2012-04-24 | University Of Central Florida Research Foundation, Inc. | Systems and methods for graphical rendering |
US8164593B2 (en) * | 2006-07-13 | 2012-04-24 | University Of Central Florida Research Foundation, Inc. | Systems and methods for graphical rendering |
US20080016138A1 (en) * | 2006-07-13 | 2008-01-17 | University Of Central Florida Research Foundation, Inc. | Systems and Methods for Graphical Rendering |
US8104076B1 (en) | 2006-11-13 | 2012-01-24 | Jpmorgan Chase Bank, N.A. | Application access control system |
US20090198505A1 (en) * | 2008-02-05 | 2009-08-06 | Peter Gipps | Interactive path planning with dynamic costing |
US7933473B2 (en) * | 2008-06-24 | 2011-04-26 | Microsoft Corporation | Multiple resolution image storage |
US8213747B2 (en) | 2008-06-24 | 2012-07-03 | Microsoft Corporation | Variable resolution images |
US8064733B2 (en) | 2008-06-24 | 2011-11-22 | Microsoft Corporation | Variable resolution images |
US20090317020A1 (en) * | 2008-06-24 | 2009-12-24 | Microsoft Corporation | Variable Resolution Images |
US20090317010A1 (en) * | 2008-06-24 | 2009-12-24 | Microsoft Corporation | Multiple Resolution Image Storage |
US9038177B1 (en) | 2010-11-30 | 2015-05-19 | Jpmorgan Chase Bank, N.A. | Method and system for implementing multi-level data fusion |
US9292588B1 (en) | 2011-07-20 | 2016-03-22 | Jpmorgan Chase Bank, N.A. | Safe storing data for disaster recovery |
US9971654B2 (en) | 2011-07-20 | 2018-05-15 | Jpmorgan Chase Bank, N.A. | Safe storing data for disaster recovery |
US10540373B1 (en) | 2013-03-04 | 2020-01-21 | Jpmorgan Chase Bank, N.A. | Clause library manager |
US20150095364A1 (en) * | 2013-09-30 | 2015-04-02 | Lexmark International Technology, S.A. | System and Methods for Caching and Querying Objects Stored in Multiple Databases |
US10360218B2 (en) * | 2013-09-30 | 2019-07-23 | Hyland Switzerland Sàrl | System and methods for caching and querying objects stored in multiple databases |
US11416492B2 (en) * | 2013-09-30 | 2022-08-16 | Hyland Switzerland Sàrl | System and methods for caching and querying objects stored in multiple databases |
CN109299060A (en) * | 2018-11-22 | 2019-02-01 | 华东计算技术研究所（中国电子科技集团公司第三十二研究所） | Distributed file method and system based on image rectangular blocks |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6014671A (en) | Interactive retrieval and caching of multi-dimensional data using view elements | |
US6326965B1 (en) | Interactive representation and retrieval of multi-dimensional data using view elements | |
US6535872B1 (en) | Method and apparatus for dynamically representing aggregated and segmented data views using view element sets | |
US5710835A (en) | Storage and retrieval of large digital images | |
JP3378257B2 (en) | System and method for nested split coding of sparse datasets | |
US20070076961A1 (en) | Image compression data processing method, and image compression data processing apparatus | |
JP3378258B2 (en) | System and method for scalable coding of sparse data sets | |
US6925208B1 (en) | Methods and apparatus for partitioning transform data | |
US8086054B2 (en) | Method for locally decoding a bitstream of wavelet coefficients | |
Smith et al. | Adaptive storage and retrieval of large compressed images | |
Lin et al. | Fast browsing of large-scale images using server prefetching and client caching techniques | |
Servetto et al. | A region-based representation of images in mars | |
Kutil | Significance map-based adaptive wavelet zerotree codec (SMAWZ) | |
Idris et al. | Storage and retrieval of compressed images using wavelet vector quantization | |
Li et al. | Web-based distribution of GIS metropolitan maps | |
Wu et al. | Design of distributed interactive online geographic information system viewer using wavelets | |
US20050129322A1 (en) | Method and system for compressing, storing, and retrieving image data | |
Ratnakar | Quality-controlled lossy image compression | |
Xie et al. | Feature representation and compression for content-based retrieval | |
Smith et al. | An adaptive view element framework for multi-dimensional data management | |
Zhu et al. | Data Compression for Network GIS. | |
Kwong et al. | W-transform method for feature-oriented multiresolution image retrieval | |
Franti et al. | Dynamic use of map images in mobile environment | |
CA2236943C (en) | Storage and retrieval of large digital images | |
Yu et al. | Integrated system for image storage, retrieval, and transmission using wavelet transform |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IBM CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CASTELLI, VITTORIO;LI, CHUNG-SHENG;SMITH, JOHN RICHARD;REEL/FRAME:009216/0717Effective date: 19980514 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |