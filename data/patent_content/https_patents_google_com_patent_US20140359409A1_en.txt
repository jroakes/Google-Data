US20140359409A1 - Learning Synonymous Object Names from Anchor Texts - Google Patents
Learning Synonymous Object Names from Anchor Texts Download PDFInfo
- Publication number
- US20140359409A1 US20140359409A1 US14/286,770 US201414286770A US2014359409A1 US 20140359409 A1 US20140359409 A1 US 20140359409A1 US 201414286770 A US201414286770 A US 201414286770A US 2014359409 A1 US2014359409 A1 US 2014359409A1
- Authority
- US
- United States
- Prior art keywords
- entity
- collection
- documents
- anchor
- facts
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G06F17/2235—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the disclosed embodiments relate generally to fact databases. More particularly, the disclosed embodiments relate to determining names of entities with which objects in a repository are associated.
- facts related to an entity can be organized together in an object representing the entity in a repository.
- the object can use an object name to identify the represented entity.
- the object name can be a name of the represented entity.
- People often use different names hereinafter called “synonymous names” to refer to the same entity. For example, when a person speaks about “IBM” or “Big Blue,” the audience understands that the speaker is referring to the International Business Machines Corporation.
- Embodiments of the method comprise identifying a source document from which one or more facts of an entity represented by the object were derived, and identifying a plurality of linking documents having hyperlinks to the source document, each hyperlink having an anchor text.
- the method further processes the anchor texts in the plurality of linking documents to generate a collection of synonym candidates for the entity represented by the object, and selects a synonymous name for the entity represented by the object from the collection of synonym candidates.
- the method stores the synonymous name in the repository in association with the object.
- Embodiments of the systems and the computer program products comprise instructions executable by a processor to implement the methods.
- FIG. 1 shows a system architecture in accordance to one embodiment.
- FIGS. 2( a )- 2 ( d ) are block diagrams illustrating embodiments of a data structure for facts within a repository of FIG. 1 .
- FIG. 2( e ) is a block diagram illustrating an embodiment of an alternate data structure for facts and objects.
- FIG. 3 is a flow diagram illustrating a method for determining synonymous names of an object in accordance to one embodiment.
- FIGS. 4( a )-( e ) illustrate an example process of the method illustrated in FIG. 3 .
- FIG. 1 shows a system architecture 100 adapted to support one embodiment.
- FIG. 1 shows components used to add facts into, and retrieve facts from a repository 115 .
- the system architecture 100 includes a network 104 , through which any number of document hosts 102 communicate with a data processing system 106 , along with any number of object requesters 152 , 154 .
- Document hosts 102 store documents and provide access to documents.
- a document is comprised of any machine-readable data including any combination of text, graphics, multimedia content, etc.
- a document may be encoded in a markup language, such as Hypertext Markup Language (HTML), i.e., a web page, in an interpreted language (e.g., JavaScript) or in any other computer readable or executable format.
- HTML Hypertext Markup Language
- a document can include one or more hyperlinks to other documents.
- a typical document will include one or more facts within its content. The facts describe entities, such as a real-world or fictional people, places, or things.
- a document stored in a document host 102 may be located and/or identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location.
- a document host 102 is implemented by a computer system, and typically includes a server adapted to communicate over the network 104 via networking protocols (e.g., TCP/IP), as well as application and presentation protocols (e.g., HTTP, HTML, SOAP, D-HTML, JAVA®).
- the documents stored by a host 102 are typically held in a file directory, a database, or other data repository.
- a host 102 can be implemented in any computing device (e.g., from a PDA or personal computer, a workstation, mini-computer, or mainframe, to a cluster or grid of computers), as well as in any processor architecture or operating system.
- FIG. 1 shows components used to manage facts in a fact repository 115 .
- the data processing system 106 includes one or more importers 108 , one or more janitors 110 , a build engine 112 , a service engine 114 , and a fact repository 115 (also called simply a “repository”).
- Importers 108 operate to process documents received from the document hosts, read the data content of documents, and extract facts (as operationally and programmatically defined within the data processing system 106 ) from such documents.
- the importers 108 also determine the subject or subjects (i.e., the entity or entities) with which the facts are associated, and extract such facts into individual items of data, for storage in the repository 115 .
- the subject or subjects i.e., the entity or entities
- Janitors 110 operate to process facts extracted by the importer 108 .
- This processing can include but is not limited to, data cleansing, object merging, and fact induction.
- Other types of janitors 110 may be implemented, depending on the types of data management functions desired, such as translation, compression, spelling or grammar correction, and the like.
- Various janitors 110 act on facts to normalize attribute names, and values and delete duplicate and near-duplicate facts so an object does not have redundant information. For example, we might find on one page that Britney Spears' birthday is “Dec. 2, 1981” while on another page that her date of birth is “Dec. 2, 1981.” Birthday and Date of birth might both be rewritten as “Birthdate” by one janitor and then another janitor might notice that Dec. 2, 1981 and Dec. 2, 1981 are different forms of the same date. It would choose the preferred form, remove the other fact and combine the source lists for the two facts. As a result, one source page for this fact will contain an exact match of the fact while another source page will contain text that is considered synonymous with the fact.
- the build engine 112 builds and manages the repository 115 .
- the service engine 114 is an interface for querying the repository 115 .
- the service engine 114 's main function is to process queries, score matching objects, and return them to the caller but it is also used by the janitor 110 .
- the repository 115 stores factual information about entities.
- the information is extracted from a plurality of documents that are located on document hosts 102 .
- a document from which a particular fact may be extracted is a source document (or “source”) of that particular fact.
- source a source of a fact includes that fact (or a synonymous fact) within its contents.
- the repository 115 contains one or more facts.
- the facts are logically organized into “objects,” and each object contains a collection of facts associated with a single entity (i.e., real-world or fictional person, place, or thing). Each fact is associated with exactly one object.
- One implementation for this association includes in each fact an object ID that uniquely identifies the associated object. In this manner, any number of facts may be associated with an individual object, by including the object ID for that object in the facts.
- objects themselves are not physically stored in the repository 115 , but rather are defined by the set or group of facts with the same associated object ID, as described below. Further details about facts in the repository 115 are described below, in relation to FIGS. 2( a )- 2 ( d ).
- the importer 108 provides facts directly to the build engine 112 and/or repository 115 .
- the janitors 110 operate on the facts and/or objects in the repository 115 .
- the repository 115 may be deployed over multiple servers.
- the janitors 110 may be located on any number of different computers. For convenience of explanation, however, the components of the data processing system 106 are discussed as though they were implemented on a single computer.
- document hosts 102 are located on the data processing system 106 instead of being coupled to the data processing system 106 by a network.
- the importer 108 may import facts from a database that is a part of or associated with the data processing system 106 .
- FIG. 1 also includes components to access the repository 115 on behalf of one or more object requesters 152 , 154 .
- Object requesters are entities that request objects from the repository 115 .
- Object requesters 152 , 154 may be understood as clients of the system 106 , and can be implemented in any computer device or architecture.
- a first object requester 152 is located remotely from system 106
- a second object requester 154 is located in the data processing system 106 .
- the blog may include a reference to an object whose facts are in the repository 115 .
- An object requester 152 such as a browser displaying the blog, will access data processing system 106 so that the information of the facts associated with the object can be displayed as part of the blog web page.
- a janitor 110 or other entity considered to be part of data processing system 106 can function as an object requester 154 , requesting the facts of objects from the repository 115 .
- FIG. 1 shows that the data processing system 106 includes a memory 107 and one or more processors 116 .
- the memory 107 includes the importers 108 , janitors 110 , build engine 112 , service engine 114 , and requester 154 , each of which is preferably implemented as instructions stored in memory 107 and executable by processor 116 .
- Memory 107 also includes the repository 115 .
- the repository 115 can be stored in a memory of one or more computer systems or in a type of memory such as a disk.
- FIG. 1 also includes a computer readable storage medium 118 containing, for example, at least one of importers 108 , janitors 110 , the build engine 112 , the service engine 114 , the requester 154 , and at least some portions of the repository 115 .
- FIG. 1 also includes one or more input/output devices 120 that allow data to be input and output to and from the data processing system 106 . It will be understood that embodiments of the data processing system 106 also include standard software components such as operating systems and the like and further include standard hardware components not shown in the figure for clarity of example.
- FIG. 2( a ) shows an example format of a data structure for facts within the repository 115 , according to some embodiments.
- the repository 115 includes facts 204 describing entities such as real-world and fictional people, places, and things.
- Each fact 204 includes a unique identifier for that fact, such as a fact ID 210 .
- Each fact 204 includes at least an attribute 212 and a value 214 .
- a fact associated with the entity George Washington may include an attribute of “date of birth” and a value of “Feb. 22, 1732.”
- all facts are stored as alphanumeric characters since they are extracted from web pages.
- facts also can store binary data values.
- Other embodiments, however, may store fact values as mixed types, or in encoded formats.
- each fact is associated with an object ID 209 that identifies the object with which the fact is associated.
- each fact that describes the same entity will have the same object ID 209 .
- the objects are logical concepts that exist as a collection of facts having the same object ID.
- objects are stored as units of data in memory, and include references (for example, pointers or IDs) to the facts associated with the object.
- the logical data structure of a fact can take various forms; in general, a fact is represented by a tuple that includes a fact ID, an attribute, a value, and an object ID.
- the storage implementation of a fact can be in any underlying physical data structure.
- FIG. 2( b ) shows an example of facts having respective fact IDs of 10, 20, and 30 in the repository 115 .
- Facts 10 and 20 are associated with an object identified by object ID “1.”
- Fact 10 has an attribute of “Name” and a value of “China.”
- Fact 20 has an attribute of “Category” and a value of “Country.”
- the object identified by object ID “1” has a name fact 205 with a value of “China” and a category fact 206 with a value of “Country.”
- Fact 30 208 has an attribute of “Property” and a value of” “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- the object identified by object ID “2” has a property fact with a fact ID of 30 and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- each fact has one attribute and one value.
- the number of facts associated with an object is not limited; thus while only two facts are shown for the “China” object, in practice there may be dozens, even hundreds of facts associated with a given object.
- the value fields of a fact need not be limited in size or content. For example, a fact about the economy of “China” with an attribute of “Economy” would have a value including several paragraphs of text, numbers, and perhaps even tables of figures. This content can be formatted, for example, in a markup language. For example, a fact having an attribute “original html” might have a value of the original html text taken from the source web page.
- FIG. 2( b ) shows the explicit coding of object ID, fact ID, attribute, and value
- content of the fact can be implicitly coded as well (e.g., the first field being the object ID, the second field being the fact ID, the third field being the attribute, and the fourth field being the value).
- Other fields include but are not limited to: the language used to state the fact (English, etc.), how important the fact is, the source of the fact, a confidence value for the fact, and so on.
- FIG. 2( c ) shows an example object reference table 210 that is used in some embodiments. Not all embodiments include an object reference table.
- the object reference table 210 functions to efficiently maintain the associations between object IDs and fact IDs. In the absence of an object reference table 210 , it is also possible to find all facts for a given object ID by querying the repository 115 to find all facts with a particular object ID. While FIGS. 2( b ) and 2 ( c ) illustrate the object reference table 210 with explicit coding of object and fact IDs, the table also may contain just the ID values themselves in column or pair-wise arrangements.
- FIG. 2( d ) shows an example of a data structure for facts within the repository 115 , according to some embodiments, showing an extended format of facts.
- the fields include an object reference link 216 to another object.
- the object reference link 216 can be an object ID of another object in the repository 115 , or a reference to the location (e.g., table row) for the object in the object reference table 210 .
- the object reference link 216 allows facts to have as values other objects. For example, for an object associated with the entity “United States,” there may be a fact with the attribute of “president” and the value of “George W. Bush,” with “George W. Bush” being an object having its own facts in the repository 115 .
- the value field 214 stores the name of the linked object and the link 216 stores the object identifier of the linked object.
- this “president” fact would include the value 214 of “George W. Bush”, and an object reference link 216 that contains the object ID for the “George W. Bush” object.
- facts 204 do not include a link field 216 because the value 214 of a fact 204 may store a link to another object.
- Each fact 204 also may include one or more metrics 218 .
- a metric provides an indication of the quality of the fact.
- the metrics include a confidence level and an importance level.
- the confidence level indicates the likelihood that the fact is correct.
- the importance level indicates the relevance of the fact to the object, compared to other facts for the same object.
- the importance level may optionally be viewed as a measure of how vital a fact is to an understanding of the entity associated with the object.
- Each fact 204 includes a list of one or more sources 220 that include the fact and from which the fact was extracted.
- Each source may be identified by a URL, or Web address, or any other appropriate form of identification and/or location, such as a unique document identifier.
- the facts illustrated in FIG. 2( d ) include an agent field 222 that identifies the importer 108 that extracted the fact.
- the importer 108 may be a specialized importer that extracts facts from a specific source (e.g., the pages of a particular web site, or family of web sites) or type of source (e.g., web pages that present factual information in tabular form), or an importer 108 that extracts facts from free text in documents throughout the Web, and so forth.
- Some embodiments include one or more specialized facts, such as a name fact 207 and a property fact 208 .
- a name fact 207 is a fact that conveys a name for the entity associated with the object in which the fact is included.
- a name fact 207 includes an attribute 224 of “name” and a value, which is the name of the associated entity. For example, for an object associated with country Spain, a name fact would have the value “Spain.”
- a name fact 207 being a special instance of a general fact 204 , includes the same fields as any other fact 204 ; it has an attribute, a value, a fact ID, metrics, sources, etc.
- the attribute 224 of a name fact 207 indicates that the fact is a name fact, and the value is the actual name.
- the name may be a string of characters.
- An object may have one or more associated name facts, as many entities can have more than one name. For example, an object associated with Spain may have associated name facts conveying the country's common name “Spain” and the official name “Kingdom of Spain.” As another example, an object associated with the U.S. Patent and Trademark Office may have associated name facts conveying the agency's acronyms “PTO” and “USPTO” as well as the official name “United States Patent and Trademark Office.” If an object does have more than one associated name fact, one of the name facts may be designated as a primary name and other name facts may be designated as secondary names, either implicitly or explicitly.
- the name facts associated with an object are also called synonymous names of the object.
- a property fact 208 is a fact that conveys a statement about the entity associated with the object.
- Property facts are generally used for summary information about an object.
- a property fact 208 being a special instance of a general fact 204 , also includes the same fields (such as attribute, value, fact ID, etc.) as other facts 204 .
- the attribute field 226 of a property fact 208 indicates that the fact is a property fact (e.g., attribute is “property”) and the value is a string of text that conveys the statement of interest.
- the value of a property fact may be the text string “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- Some objects may have one or more associated property facts while other objects may have no associated property facts.
- the data structure of the repository 115 may take on other forms.
- Other fields may be included in facts and some of the fields described above may be omitted.
- each object may have additional special facts aside from name facts and property facts, such as facts conveying a type or category (for example, person, place, movie, actor, organization, etc.) for categorizing the entity associated with the object.
- an object's name(s) and/or properties may be represented by special records that have a different format than the general fact records 204 .
- null object As described previously, a collection of facts is associated with an object ID of an object.
- An object may become a null or empty object when facts are disassociated from the object.
- a null object can arise in a number of different ways.
- One type of null object is an object that has had all of its facts (including name facts) removed, leaving no facts associated with its object ID.
- Another type of null object is an object that has all of its associated facts other than name facts removed, leaving only its name fact(s).
- the object may be a null object only if all of its associated name facts are removed.
- a null object represents an entity or concept for which the data processing system 106 has no factual information and, as far as the data processing system 106 is concerned, does not exist.
- facts of a null object may be left in the repository 115 , but have their object ID values cleared (or have their importance set to a negative value). However, the facts of the null object are treated as if they were removed from the repository 115 . In some other embodiments, facts of null objects are physically removed from the repository 115 .
- FIG. 2( e ) is a block diagram illustrating an alternate data structure 290 for facts and objects in accordance with embodiments of the invention.
- an object 290 contains an object ID 292 and references or points to facts 294 .
- Each fact includes a fact ID 295 , an attribute 297 , and a value 299 .
- an object 290 actually exists in memory 107 .
- an object may explicitly exist in the repository 115 , or it may exist merely as a collection of facts with a common object ID.
- a fact is associated with an object by sharing a common object ID with other facts. For example, a fact could be associated with an object of a given type by sharing a common object ID at least with a type fact indicating the given type (or as another example, with a category fact indicating a particular category of object).
- facts and objects can be stored in a variety of structures, such as fact and/or object repositories.
- structures such as fact and/or object repositories.
- repository 115 it should be understood that various embodiments may store facts and/or objects in a variety of data structures.
- FIG. 3 there is shown a flow diagram illustrating a method 300 for determining synonymous names of an object in accordance with one embodiment. Other embodiments perform steps of the method 300 in different orders and/or perform different or additional steps than the ones shown in FIG. 3 .
- the steps of the method 300 may be implemented in software, hardware, or a combination of hardware and software.
- the steps of the method 300 may be performed by the data processing system (“system”) 106 as shown in FIG. 1 , although one skilled in the art will recognize that the method 300 could be performed by systems having different architectures as well.
- the system 106 can perform multiple instances of the steps of the method 300 concurrently and/or perform steps in parallel.
- An object representing (or describing) an entity is identified 308 from the repository 115 .
- each object can be identified by a unique object ID and is defined by the collection of facts associated with the object ID.
- the system 106 identifies 310 a list of source documents associated with the object.
- a source document associated with an object is a document from which one or more facts of the object was extracted (or derived).
- a source document can be located and/or identified by a unique identifier such as a URL.
- each fact in the repository 115 includes a field for unique identifiers of associated source documents (hereinafter called the source field).
- the system 106 can retrieve the facts associated with the object from the repository 115 using the object reference table 210 as described above with reference to FIG. 2( c ). After retrieving the facts associated with the object, the system 106 can identify 310 the list of source documents associated with the object based on the source fields of the retrieved facts.
- a fact can have multiple source documents.
- the subject of a source document tends to be the entity represented by the object associated with the source document. This is because the content of the source document includes at least one fact about the entity.
- a source document may have more than one subject.
- a source document may be a BLOG covering a broad range of topics, the entity represented by the associated object being one of them.
- the system 106 removes source documents having multiple subjects from the identified list of source documents.
- the system 106 may construct a list of source documents and their associated objects. If a source document associates with objects representing different entities, the system 106 can remove the source document from the identified list of source documents.
- the system For each of the source documents in the identified list, the system identifies 320 linking documents containing hyperlinks to the source document.
- a document can include one or more hyperlinks to other documents. Therefore, a linking document may also include hyperlinks to documents other than to the source document. However, the hyperlink that is of interest to the system 106 is the hyperlink to the source document.
- a linking document containing a hyperlink to a source document is called a linking document for the source document.
- a hyperlink includes a starting anchor tag, which includes one or more parameters (or markup attributes), and an ending anchor tag.
- the starting and ending anchor tags define the hyperlink.
- a hypertext reference attribute e.g., “HREF”
- the hypertext reference attribute indicates that the associated value is the address of the destination of the hyperlink.
- the text between the starting anchor tag and the ending anchor tag is called the anchor text of the hyperlink.
- the anchor text of a hyperlink in a linking document for a source document tends to reflect the subject of the source document.
- the anchor text of a hyperlink in a linking document for a source document is called the anchor text for the source document in the linking document. It is noted that methods of linking documents other than using hyperlinks can also be used and the described process can be readily applied to these other methods.
- the system 106 processes 330 the anchor texts in the linking documents to generate a collection of synonym candidates (also known as the “anchor synset”) for the object name. This step is designed to remove those anchor texts that are not related to the subject of the associated source document (e.g. “Click here!”) and to clean up the remaining anchor texts (e.g., removing portions of an anchor text unrelated to the subject of the associated source document).
- the results of the processing 330 are the collection of synonym candidates, each of which is intended to describe the entity represented by the object.
- anchor texts for a source document tend to reflect the subject of the source document, which in turn tends to describe the entity represented by the associated object. It follows that the anchor texts for a source document tend to describe the entity represented by the object associated with the source document.
- the system 106 can generate synonym candidates of the object name from anchor texts for the associated source documents.
- authors of linking documents can associate the anchor text “Big Blue” or “IBM” with a hyperlink to a source document about the International Business Machines Corporation, which is a source document of an object representing the International Business Machines Corporation. Because the subject of the source document (the International Business Machines Corporation) correctly describes the entity represented by the object, and the anchor texts for the source document reflect its subject, the anchor texts (“Big Blue” and “IBM”) tend to be valid synonymous names of the object.
- Some anchor texts may be invalid synonymous names of the object.
- Authors of linking documents can use generic language as the anchor text (e.g., “click here,” “see wikipedia article”) or include in the anchor texts language that is not related to the subject of the associated linking document (e.g., “click here for an excellent article about IBM”).
- An anchor text including both information describing the subject of the associated source document and unrelated information e.g., “click here for an excellent article about”
- An anchor text that includes only unrelated information e.g., “Click here!” is called an unrelated anchor text.
- the system 106 processes 330 anchor texts in the identified linking documents to remove unrelated anchor texts and unrelated information from partially-related anchor texts.
- the system 106 removes unrelated information from a partially-related anchor text by extracting a noun phrase (or a noun) from the anchor text. Because the synonym candidates are intended to describe the object, they are either nouns (e.g., “Canada”) or noun phrases (e.g., “the International Business Machines Corporation”). By extracting a noun phrase from the anchor text, the system 106 identifies a portion of the anchor text that tends to be relevant to the object.
- the noun phrase of an anchor text “Learn about Google Inc.” is “Google Inc.”
- the system 106 removes text unrelated to the subject of the associated source document (e.g., “Learn about” in the above example). The system 106 can then add the extracted noun phrase into the anchor synset.
- the system 106 has a collection of texts that are commonly used in anchor texts and unrelated to subjects of the associated destination documents (hereinafter called the “black list”).
- This black list can be compiled by domain experts (e.g., administrators of the system 106 ) or automatically generated by the system 106 .
- the black list can include standard anchor texts such as “here,” “click here,” “download,” and the like.
- the system 106 can remove an unrelated anchor text by matching it with texts in the black list and not adding it into the anchor synset if a match is detected.
- the black list may also contain prefix and suffix texts.
- the system 106 may remove unrelated information from a partially-related anchor text by matching it with the prefix and/or suffix texts and remove the matched prefix and/or suffix from it. For example, “Wikipedia article about” can be a frequently used prefix and included in the black list. The system 106 identifies that an anchor text “Wikipedia article about the King” includes the prefix and removes it from the anchor text. Other popular prefix texts include “See Wikipedia for,” “article for,” and the like. The system 106 can then add the remainder into the anchor synset.
- the system 106 applies normalization rules to an anchor text to standardize its format before processing 330 .
- the normalization rules include removal of punctuation, such as removing commas in a string, conversion of uppercase characters in a string to corresponding lowercase characters, such as from “America” to “america,” and stop word removal, such as removing stop words such as “the,” “a,” and “of” from a string.
- stop word removal such as removing stop words such as “the,” “a,” and “of” from a string.
- an anchor text “Click here!” becomes “click here.”
- the system 106 detects a match in the black list for the normalized anchor text and does not add it to the anchor synset.
- the system 106 applies language-dependent normalization rules based on the language of the linking document. For example, the system 106 can identify Spanish as the language of a linking document, and apply a set of Spanish stop word removal rules to the anchor texts in the linking document.
- the system 106 can have a collection of texts that tend to be valid synonymous names (hereinafter called “white list”).
- This white list can be compiled by authorized personnel or imported from one or more information sources.
- the white list can contain company names extracted from a business-related website or peoples' names from a telephone directory.
- the system 106 can process 330 the anchor texts by matching them with the texts in the white list and add those that match into the anchor synset. By adding the anchor texts that match with an entry in the white list, the system 106 generates synonym candidates that tend to be valid synonymous names.
- the system 106 selects 340 synonymous names of the object from the collection of synonym candidates (the anchor synset).
- the synonym candidates generated may contain identification language that does not qualify as synonymous names. For example, some of the synonym candidates can reflect the author's personal opinion (e.g., “my favorite movie star”), while some others can be descriptive names used exclusively within a small group of people (e.g., “Party Ed”).
- the system selects 340 synonymous names by filtering out these invalid synonym candidates.
- the system 106 selects 340 synonymous names based on the frequency of occurrence of the synonym candidates within the anchor synset.
- the system 106 can be configured to select 340 synonym candidates that occur at a frequency above a minimum threshold.
- the threshold can be user-defined or dynamically modified by the system 106 .
- Rarely occurring synonym candidates tend to be incorrect synonymous names (e.g., containing spelling errors). Further, even if the rarely occurring synonym candidates contain legitimate synonym names, these legitimate synonym names are rarely used and can be omitted with minimal harm. Examples of synonym candidates that occur infrequently include authors' personal opinions and names used only by a small group of people.
- the system 106 can also be configured to select 340 the synonym candidates that occur at a frequency below a maximum threshold. Synonym candidates that occur extremely frequently also tend not to be synonymous names because they can be general phrases unrelated to the subject of the associated source document. Examples of synonym candidates with extremely high occurrence rates include “the company,” “home page,” and “click here.” In some embodiments, the system 106 can add a synonym candidate that occurs frequently into the black list. Alternatively, the system 106 can output the synonym candidates occurring at a frequency exceeding the maximum threshold so that an administrator can review them and select 340 them if they are removed by mistake.
- the system 106 instead of selecting 340 synonymous names based on the frequency of occurrence of the synonym candidates, the system 106 selects 340 synonymous names based on the proportion of the synonym candidates in the collection of synonym candidates. For example, the system 106 can be configured to select 340 only the synonym candidates that constitute more than 5% of the total anchor synset.
- the system 106 selects 340 synonymous names based on the quality of the associated linking documents.
- the quality of a linking document can be user defined or machine generated.
- the system 106 can determine the quality of the linking document based on a page rank of the linking document.
- a page rank is a numerical weight for a document determined by a link analysis algorithm such as the algorithm described in U.S. Pat. No. 6,285,999. Because high quality linking documents tend to have high quality anchor texts (e.g., fewer spelling errors), synonym candidates generated from these documents are more likely to be proper synonymous names of the object.
- the system 106 adds synonymous names generated from high-quality documents into the white list.
- the system 106 assigns a score for each synonym candidate in the anchor synset, and selects 340 synonymous names based on the assigned scores.
- the score for a synonym candidate may be determined based on a score function taking into account one or more of the following factors: the frequency of occurrence or the proportion of the synonym candidate within the anchor synset, the quality of the associated linking documents, whether the synonym candidate has a match in the white list or the black list, and whether the synonym candidate is properly capitalized (e.g., whether the first character of each word in the synonym candidate and only these characters are capitalized).
- the system 106 may select 340 a synonym candidate as a synonymous name if its score above a minimum threshold and/or below a maximum threshold.
- the system 106 can process 330 the anchor texts associated with different source documents separately and generate a collection of synonym candidates for each of the source documents. The system 106 can then select 340 synonymous names from each of the collections. Alternatively, the system 106 can process 330 the anchor texts associated with different source documents together and generate one single anchor synset, and subsequently select 340 synonymous names from the anchor synset.
- the system 106 After selecting 340 the synonymous names, the system 106 adds 350 facts including the selected synonymous names to the object in the repository 115 . For example, the system 106 may create a name fact for each of the selected synonymous names, assign the synonymous names as the values of the name facts, and associate the created facts with the object.
- the system 106 After the system 106 determines the synonymous names of the object, it can process the other objects in the repository 115 and determine their synonymous names. As noted above, the system can determine the synonymous names of multiple objects concurrently and/or in parallel.
- FIGS. 4( a ) through 4 ( e ) illustrate an example process of the method 300 described above with respect to FIG. 3 .
- the system 106 identifies 308 an object 402 representing the rock singer Elvis Presley.
- the object 402 has three associated facts 410 , 412 , and 414 .
- the fact 410 has an attribute of “Name,” a value of “Elvis Aaron Presley,” and a source of “http://www.elvis.com/elvisology/bio/elvis_overview.asp.”
- the fact 412 has an attribute of “Date of birth,” a value of “Jan.
- the fact 414 has an attribute of “Origin,” a value of “East Tupelo, Miss., United States,” and a source of “http://www.history-of-rock.com/elvis — presley.htm.”
- the name of the object 402 is the value of the fact 410 , “Elvis Aaron Presley.”
- the system 106 identifies 310 source documents associated with the object 402 by identifying facts associated with the object 402 , the facts 410 , 412 , and 414 , retrieving these facts from the repository 115 , and identifying 310 the associated source documents by accessing source fields of the retrieved facts.
- the fact 410 is associated with a source document 420 .
- the fact 412 is associated with a source document 422 .
- the fact 414 is associated with a source document 424 . Therefore, the system 106 identifies 310 source documents associated with the object 402 as the source documents 420 , 422 , and 424 . As illustrated in FIG.
- the URLs of the source documents 420 , 422 , and 424 are “http://www.elvis.com/elvisology/bio/elvis_overview.asp,” “http://en.wikipedia.org/wiki/Elvis,” and “http://www.history-of-rock.com/elvis_presley.htm,” respectively.
- the system 106 identifies 320 linking documents for the source documents 420 , 422 , and 424 .
- the system 106 identifies 320 two linking documents 430 and 432 for the source document 420 , three linking documents 432 , 434 , and 436 for the source document 422 , and two linking documents 438 and 440 for the source document 424 .
- the linking document 432 is identified as a linking document for both the source documents 420 and 422 .
- the column labeled “Linking Document ID” (linking document column) contains the document identifiers of linking documents identified 320 by the system 106 .
- the column labeled “Source Document ID” (source document column) contains the document identifier of the source document to which the linking document as identified in the linking document column links.
- the column “Anchor Text” contains the anchor text for the associated source document in the associated linking document. As shown in FIG.
- the anchor text for the source document 420 in the linking document 430 is “An article about the King.”
- the anchor text for the source document 420 in the linking document 432 is “Homepage of The King.”
- the anchor text for the source document 422 in the linking document 432 is “Learn about Elvis.”
- the anchor text for the source document 422 in the linking document 434 is “Wikipedia article about the King.”
- the anchor text for the source document 422 in the linking document 436 is “Click here!”
- the anchor text for the source document 424 in the linking document 438 is “The Best Rock Singer Ever.”
- the anchor text for the source document 424 in the linking document 440 is “Find out more about Elvis.”
- the system 106 processes 330 the anchor texts in the linking documents 430 , 432 , 434 , 436 , 438 , and 440 and generates a collection of synonym candidates for the object 402 .
- the system 106 processes 330 the anchor text in the linking document 430 (“An article about the King”) by removing the common prefix “An article about” and generates a synonym candidate “the King;” processes 330 the anchor text for the source document 420 in the linking document 432 (“Homepage of The King”) by removing the common prefix “Homepage of and generates a synonym candidate “The King;” processes 330 the anchor text for the source document 422 in the linking document 432 (“Learn about Elvis”) by removing the common prefix “Learn about” and generates a synonym candidate “Elvis;” processes 330 the anchor text in the linking document 434 (“Wikipedia article about the King”) by removing the common prefix “Wikipedia article about” and generates a synonym candidate “the
- the system 106 selects 340 synonymous names from the collection of synonym candidates.
- the collection of the synonym candidates includes “the King,” “The King,” “Elvis,” “the King,” “The Best Rock Singer Ever,” and “Elvis.”
- the system 106 selects 340 the synonym candidates occurring no less than twice (minimum threshold) and no more than one hundred times (maximum threshold). Assuming the system 106 is case insensitive, it selects 340 the synonym candidates “the King,” which occurs three times, and “Elvis,” which occurs twice.
- the synonym candidate “The Best Rock Singer Ever” has only one occurrence, smaller than the minimum threshold, and thus is not selected 340 . Therefore, the system 106 correctly identifies the synonymous names “The King” and “Elvis” for the object 402 representing Elvis Presley.
- the system 106 adds 350 two facts to the object 402 . As illustrated in FIG. 4( e ), the system 106 creates a fact 416 for the synonymous name “The King” and a fact 418 for the synonymous name “Elvis.”
- the source field of the facts 416 , 418 shown in FIG. 4( e ) is empty. However, the system 106 may list the URLs of the linking documents from which the synonymous names are derived in the corresponding source field.
- the source field of the name fact 416 may include URLs for the linking documents 430 , 432 , and 434 .
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention can be embodied in software, firmware or hardware, and when embodied in software, can be downloaded to reside on and be operated from different platforms used by a variety of operating systems.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
- the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
Abstract
Description
- This application is a continuation of U.S. patent application Ser. No. 11/833,180, filed Aug. 2, 2007, in which the application is incorporated by reference herein in its entirety.
- The disclosed embodiments relate generally to fact databases. More particularly, the disclosed embodiments relate to determining names of entities with which objects in a repository are associated.
- As computers and networks gain popularity, web-based computer documents (“documents”) become a vast source of factual information. Users may look to these documents to get answers to factual questions, such as “what is the capital of Poland” or “what is the birth date of George Washington.” The factual information included in these documents may be extracted and stored in a fact database.
- When extracting facts from documents, facts related to an entity can be organized together in an object representing the entity in a repository. The object can use an object name to identify the represented entity. The object name can be a name of the represented entity. People often use different names (hereinafter called “synonymous names”) to refer to the same entity. For example, when a person speaks about “IBM” or “Big Blue,” the audience understands that the speaker is referring to the International Business Machines Corporation.
- When searching for answers to factual questions in objects, it is useful to know the synonymous names of the relevant entities. Users may conduct a search for a question about an entity using one of its synonymous names (e.g., “IBM”). Objects containing answers to the question may use a different synonymous name (e.g., “International Business Machines Corporation”) to identify the same entity. Because the name used in the objects may not match with the name used in the search, users may end up not finding the answers.
- One conventional approach to determining synonymous names of an object (the synonymous names of the entity represented by the object) is to consult people familiar with the entity represented by the object. This approach is insufficient because the vast and rapidly increasing number of objects in the repository makes it impractical for any human to perform the task on any meaningful scale. This conventional approach is also expensive and vulnerable to human errors.
- For these reasons, what is needed is a way to determine synonymous names of an object that does not suffer from the drawbacks described above.
- The above and other needs are met by methods, systems, and computer program products that determine synonymous names of an object. Embodiments of the method comprise identifying a source document from which one or more facts of an entity represented by the object were derived, and identifying a plurality of linking documents having hyperlinks to the source document, each hyperlink having an anchor text. The method further processes the anchor texts in the plurality of linking documents to generate a collection of synonym candidates for the entity represented by the object, and selects a synonymous name for the entity represented by the object from the collection of synonym candidates. The method stores the synonymous name in the repository in association with the object. Embodiments of the systems and the computer program products comprise instructions executable by a processor to implement the methods.
-
FIG. 1 shows a system architecture in accordance to one embodiment. -
FIGS. 2( a)-2(d) are block diagrams illustrating embodiments of a data structure for facts within a repository ofFIG. 1 . -
FIG. 2( e) is a block diagram illustrating an embodiment of an alternate data structure for facts and objects. -
FIG. 3 is a flow diagram illustrating a method for determining synonymous names of an object in accordance to one embodiment. -
FIGS. 4( a)-(e) illustrate an example process of the method illustrated inFIG. 3 . - Embodiments are now described with reference to the figures where like reference numbers indicate identical or functionally similar elements.
-
FIG. 1 shows asystem architecture 100 adapted to support one embodiment.FIG. 1 shows components used to add facts into, and retrieve facts from arepository 115. Thesystem architecture 100 includes anetwork 104, through which any number of document hosts 102 communicate with adata processing system 106, along with any number ofobject requesters - Document hosts 102 store documents and provide access to documents. A document is comprised of any machine-readable data including any combination of text, graphics, multimedia content, etc. A document may be encoded in a markup language, such as Hypertext Markup Language (HTML), i.e., a web page, in an interpreted language (e.g., JavaScript) or in any other computer readable or executable format. A document can include one or more hyperlinks to other documents. A typical document will include one or more facts within its content. The facts describe entities, such as a real-world or fictional people, places, or things.
- A document stored in a document host 102 may be located and/or identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location. A document host 102 is implemented by a computer system, and typically includes a server adapted to communicate over the
network 104 via networking protocols (e.g., TCP/IP), as well as application and presentation protocols (e.g., HTTP, HTML, SOAP, D-HTML, JAVA®). The documents stored by a host 102 are typically held in a file directory, a database, or other data repository. A host 102 can be implemented in any computing device (e.g., from a PDA or personal computer, a workstation, mini-computer, or mainframe, to a cluster or grid of computers), as well as in any processor architecture or operating system. -
FIG. 1 shows components used to manage facts in afact repository 115. Thedata processing system 106 includes one ormore importers 108, one ormore janitors 110, abuild engine 112, aservice engine 114, and a fact repository 115 (also called simply a “repository”). Each of the foregoing are implemented, in one embodiment, as software modules (or programs) executed by theprocessor 116.Importers 108 operate to process documents received from the document hosts, read the data content of documents, and extract facts (as operationally and programmatically defined within the data processing system 106) from such documents. Theimporters 108 also determine the subject or subjects (i.e., the entity or entities) with which the facts are associated, and extract such facts into individual items of data, for storage in therepository 115. In one embodiment, there are different types ofimporters 108 for different types of documents, for example, dependent on the format or document type. -
Janitors 110 operate to process facts extracted by theimporter 108. This processing can include but is not limited to, data cleansing, object merging, and fact induction. In one embodiment, there are a number ofdifferent janitors 110 that perform different types of data management operations on the facts. For example, onejanitor 110 may traverse some set of facts in therepository 115 to find duplicate facts (that is, facts that convey the same factual information) and merge them. Anotherjanitor 110 may also normalize facts into standard formats. Anotherjanitor 110 may also remove unwanted facts from therepository 115, such as facts related to pornographic content. Other types ofjanitors 110 may be implemented, depending on the types of data management functions desired, such as translation, compression, spelling or grammar correction, and the like. -
Various janitors 110 act on facts to normalize attribute names, and values and delete duplicate and near-duplicate facts so an object does not have redundant information. For example, we might find on one page that Britney Spears' birthday is “Dec. 2, 1981” while on another page that her date of birth is “Dec. 2, 1981.” Birthday and Date of Birth might both be rewritten as “Birthdate” by one janitor and then another janitor might notice that Dec. 2, 1981 and Dec. 2, 1981 are different forms of the same date. It would choose the preferred form, remove the other fact and combine the source lists for the two facts. As a result, one source page for this fact will contain an exact match of the fact while another source page will contain text that is considered synonymous with the fact. - The
build engine 112 builds and manages therepository 115. Theservice engine 114 is an interface for querying therepository 115. Theservice engine 114's main function is to process queries, score matching objects, and return them to the caller but it is also used by thejanitor 110. - The
repository 115 stores factual information about entities. The information is extracted from a plurality of documents that are located on document hosts 102. A document from which a particular fact may be extracted is a source document (or “source”) of that particular fact. In other words, a source of a fact includes that fact (or a synonymous fact) within its contents. - The
repository 115 contains one or more facts. In one embodiment, the facts are logically organized into “objects,” and each object contains a collection of facts associated with a single entity (i.e., real-world or fictional person, place, or thing). Each fact is associated with exactly one object. One implementation for this association includes in each fact an object ID that uniquely identifies the associated object. In this manner, any number of facts may be associated with an individual object, by including the object ID for that object in the facts. In one embodiment, objects themselves are not physically stored in therepository 115, but rather are defined by the set or group of facts with the same associated object ID, as described below. Further details about facts in therepository 115 are described below, in relation toFIGS. 2( a)-2(d). - Some embodiments operate on the facts and/or objects in different orders than described above. For example, in one embodiment the
importer 108 provides facts directly to thebuild engine 112 and/orrepository 115. Thejanitors 110, in turn, operate on the facts and/or objects in therepository 115. It should also be appreciated that in practice at least some of the components of thedata processing system 106 will be distributed over multiple computers, communicating over a network. For example, therepository 115 may be deployed over multiple servers. As another example, thejanitors 110 may be located on any number of different computers. For convenience of explanation, however, the components of thedata processing system 106 are discussed as though they were implemented on a single computer. - In another embodiment, some or all of document hosts 102 are located on the
data processing system 106 instead of being coupled to thedata processing system 106 by a network. For example, theimporter 108 may import facts from a database that is a part of or associated with thedata processing system 106. -
FIG. 1 also includes components to access therepository 115 on behalf of one ormore object requesters repository 115.Object requesters system 106, and can be implemented in any computer device or architecture. As shown inFIG. 1 , afirst object requester 152 is located remotely fromsystem 106, while asecond object requester 154 is located in thedata processing system 106. For example, in a computer system hosting a blog, the blog may include a reference to an object whose facts are in therepository 115. An object requester 152, such as a browser displaying the blog, will accessdata processing system 106 so that the information of the facts associated with the object can be displayed as part of the blog web page. As a second example, ajanitor 110 or other entity considered to be part ofdata processing system 106 can function as anobject requester 154, requesting the facts of objects from therepository 115. -
FIG. 1 shows that thedata processing system 106 includes amemory 107 and one ormore processors 116. Thememory 107 includes theimporters 108,janitors 110, buildengine 112,service engine 114, andrequester 154, each of which is preferably implemented as instructions stored inmemory 107 and executable byprocessor 116.Memory 107 also includes therepository 115. Therepository 115 can be stored in a memory of one or more computer systems or in a type of memory such as a disk.FIG. 1 also includes a computerreadable storage medium 118 containing, for example, at least one ofimporters 108,janitors 110, thebuild engine 112, theservice engine 114, therequester 154, and at least some portions of therepository 115.FIG. 1 also includes one or more input/output devices 120 that allow data to be input and output to and from thedata processing system 106. It will be understood that embodiments of thedata processing system 106 also include standard software components such as operating systems and the like and further include standard hardware components not shown in the figure for clarity of example. -
FIG. 2( a) shows an example format of a data structure for facts within therepository 115, according to some embodiments. As described above, therepository 115 includesfacts 204 describing entities such as real-world and fictional people, places, and things. Eachfact 204 includes a unique identifier for that fact, such as afact ID 210. Eachfact 204 includes at least anattribute 212 and avalue 214. For example, a fact associated with the entity George Washington may include an attribute of “date of birth” and a value of “Feb. 22, 1732.” In one embodiment, all facts are stored as alphanumeric characters since they are extracted from web pages. In another embodiment, facts also can store binary data values. Other embodiments, however, may store fact values as mixed types, or in encoded formats. - As described above, each fact is associated with an
object ID 209 that identifies the object with which the fact is associated. Thus, each fact that describes the same entity (such as George Washington), will have thesame object ID 209. In one embodiment, the objects are logical concepts that exist as a collection of facts having the same object ID. In another embodiment, objects are stored as units of data in memory, and include references (for example, pointers or IDs) to the facts associated with the object. The logical data structure of a fact can take various forms; in general, a fact is represented by a tuple that includes a fact ID, an attribute, a value, and an object ID. The storage implementation of a fact can be in any underlying physical data structure. -
FIG. 2( b) shows an example of facts having respective fact IDs of 10, 20, and 30 in therepository 115.Facts Fact 10 has an attribute of “Name” and a value of “China.”Fact 20 has an attribute of “Category” and a value of “Country.” Thus, the object identified by object ID “1” has aname fact 205 with a value of “China” and acategory fact 206 with a value of “Country.”Fact 30 208 has an attribute of “Property” and a value of” “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” Thus, the object identified by object ID “2” has a property fact with a fact ID of 30 and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” In the illustrated embodiment, each fact has one attribute and one value. The number of facts associated with an object is not limited; thus while only two facts are shown for the “China” object, in practice there may be dozens, even hundreds of facts associated with a given object. Also, the value fields of a fact need not be limited in size or content. For example, a fact about the economy of “China” with an attribute of “Economy” would have a value including several paragraphs of text, numbers, and perhaps even tables of figures. This content can be formatted, for example, in a markup language. For example, a fact having an attribute “original html” might have a value of the original html text taken from the source web page. - Also, while the illustration of
FIG. 2( b) shows the explicit coding of object ID, fact ID, attribute, and value, in practice the content of the fact can be implicitly coded as well (e.g., the first field being the object ID, the second field being the fact ID, the third field being the attribute, and the fourth field being the value). Other fields include but are not limited to: the language used to state the fact (English, etc.), how important the fact is, the source of the fact, a confidence value for the fact, and so on. -
FIG. 2( c) shows an example object reference table 210 that is used in some embodiments. Not all embodiments include an object reference table. The object reference table 210 functions to efficiently maintain the associations between object IDs and fact IDs. In the absence of an object reference table 210, it is also possible to find all facts for a given object ID by querying therepository 115 to find all facts with a particular object ID. WhileFIGS. 2( b) and 2(c) illustrate the object reference table 210 with explicit coding of object and fact IDs, the table also may contain just the ID values themselves in column or pair-wise arrangements. -
FIG. 2( d) shows an example of a data structure for facts within therepository 115, according to some embodiments, showing an extended format of facts. In this example, the fields include anobject reference link 216 to another object. Theobject reference link 216 can be an object ID of another object in therepository 115, or a reference to the location (e.g., table row) for the object in the object reference table 210. Theobject reference link 216 allows facts to have as values other objects. For example, for an object associated with the entity “United States,” there may be a fact with the attribute of “president” and the value of “George W. Bush,” with “George W. Bush” being an object having its own facts in therepository 115. In some embodiments, thevalue field 214 stores the name of the linked object and thelink 216 stores the object identifier of the linked object. Thus, this “president” fact would include thevalue 214 of “George W. Bush”, and anobject reference link 216 that contains the object ID for the “George W. Bush” object. In some other embodiments,facts 204 do not include alink field 216 because thevalue 214 of afact 204 may store a link to another object. - Each
fact 204 also may include one ormore metrics 218. A metric provides an indication of the quality of the fact. In some embodiments, the metrics include a confidence level and an importance level. The confidence level indicates the likelihood that the fact is correct. The importance level indicates the relevance of the fact to the object, compared to other facts for the same object. The importance level may optionally be viewed as a measure of how vital a fact is to an understanding of the entity associated with the object. - Each
fact 204 includes a list of one ormore sources 220 that include the fact and from which the fact was extracted. Each source may be identified by a URL, or Web address, or any other appropriate form of identification and/or location, such as a unique document identifier. - The facts illustrated in
FIG. 2( d) include anagent field 222 that identifies theimporter 108 that extracted the fact. For example, theimporter 108 may be a specialized importer that extracts facts from a specific source (e.g., the pages of a particular web site, or family of web sites) or type of source (e.g., web pages that present factual information in tabular form), or animporter 108 that extracts facts from free text in documents throughout the Web, and so forth. - Some embodiments include one or more specialized facts, such as a
name fact 207 and aproperty fact 208. Aname fact 207 is a fact that conveys a name for the entity associated with the object in which the fact is included. Aname fact 207 includes anattribute 224 of “name” and a value, which is the name of the associated entity. For example, for an object associated with country Spain, a name fact would have the value “Spain.” Aname fact 207, being a special instance of ageneral fact 204, includes the same fields as anyother fact 204; it has an attribute, a value, a fact ID, metrics, sources, etc. Theattribute 224 of aname fact 207 indicates that the fact is a name fact, and the value is the actual name. The name may be a string of characters. An object may have one or more associated name facts, as many entities can have more than one name. For example, an object associated with Spain may have associated name facts conveying the country's common name “Spain” and the official name “Kingdom of Spain.” As another example, an object associated with the U.S. Patent and Trademark Office may have associated name facts conveying the agency's acronyms “PTO” and “USPTO” as well as the official name “United States Patent and Trademark Office.” If an object does have more than one associated name fact, one of the name facts may be designated as a primary name and other name facts may be designated as secondary names, either implicitly or explicitly. The name facts associated with an object are also called synonymous names of the object. - A
property fact 208 is a fact that conveys a statement about the entity associated with the object. Property facts are generally used for summary information about an object. Aproperty fact 208, being a special instance of ageneral fact 204, also includes the same fields (such as attribute, value, fact ID, etc.) asother facts 204. Theattribute field 226 of aproperty fact 208 indicates that the fact is a property fact (e.g., attribute is “property”) and the value is a string of text that conveys the statement of interest. For example, for the object associated with Bill Clinton, the value of a property fact may be the text string “Bill Clinton was the 42nd President of the United States from 1993 to 2001.” Some objects may have one or more associated property facts while other objects may have no associated property facts. It should be appreciated that the data structures shown inFIGS. 2( a)-2(d) and described above are merely exemplary. The data structure of therepository 115 may take on other forms. Other fields may be included in facts and some of the fields described above may be omitted. Additionally, each object may have additional special facts aside from name facts and property facts, such as facts conveying a type or category (for example, person, place, movie, actor, organization, etc.) for categorizing the entity associated with the object. In some embodiments, an object's name(s) and/or properties may be represented by special records that have a different format than the general fact records 204. - As described previously, a collection of facts is associated with an object ID of an object. An object may become a null or empty object when facts are disassociated from the object. A null object can arise in a number of different ways. One type of null object is an object that has had all of its facts (including name facts) removed, leaving no facts associated with its object ID. Another type of null object is an object that has all of its associated facts other than name facts removed, leaving only its name fact(s). Alternatively, the object may be a null object only if all of its associated name facts are removed. A null object represents an entity or concept for which the
data processing system 106 has no factual information and, as far as thedata processing system 106 is concerned, does not exist. In some embodiments, facts of a null object may be left in therepository 115, but have their object ID values cleared (or have their importance set to a negative value). However, the facts of the null object are treated as if they were removed from therepository 115. In some other embodiments, facts of null objects are physically removed from therepository 115. -
FIG. 2( e) is a block diagram illustrating analternate data structure 290 for facts and objects in accordance with embodiments of the invention. In this data structure, anobject 290 contains anobject ID 292 and references or points tofacts 294. Each fact includes afact ID 295, anattribute 297, and avalue 299. In this embodiment, anobject 290 actually exists inmemory 107. - As described above, an object may explicitly exist in the
repository 115, or it may exist merely as a collection of facts with a common object ID. Reference is made to particular objects for the purposes of illustration; one of skill in the art will recognize that the systems and methods described herein are applicable to a variety of implementations and that such references are not limiting. When reference is made to a fact being associated with an object, it should be understood that in at least one embodiment a fact is associated with an object by sharing a common object ID with other facts. For example, a fact could be associated with an object of a given type by sharing a common object ID at least with a type fact indicating the given type (or as another example, with a category fact indicating a particular category of object). Furthermore, in various embodiments, facts and objects can be stored in a variety of structures, such as fact and/or object repositories. When reference is made herein to therepository 115, it should be understood that various embodiments may store facts and/or objects in a variety of data structures. - Referring now to
FIG. 3 , there is shown a flow diagram illustrating amethod 300 for determining synonymous names of an object in accordance with one embodiment. Other embodiments perform steps of themethod 300 in different orders and/or perform different or additional steps than the ones shown inFIG. 3 . The steps of themethod 300 may be implemented in software, hardware, or a combination of hardware and software. - In one embodiment, the steps of the
method 300 may be performed by the data processing system (“system”) 106 as shown inFIG. 1 , although one skilled in the art will recognize that themethod 300 could be performed by systems having different architectures as well. Thesystem 106 can perform multiple instances of the steps of themethod 300 concurrently and/or perform steps in parallel. - The
method 300 will now be described in detail. An object representing (or describing) an entity is identified 308 from therepository 115. As described above, each object can be identified by a unique object ID and is defined by the collection of facts associated with the object ID. - The
system 106 identifies 310 a list of source documents associated with the object. A source document associated with an object is a document from which one or more facts of the object was extracted (or derived). A source document can be located and/or identified by a unique identifier such as a URL. In one embodiment, each fact in therepository 115 includes a field for unique identifiers of associated source documents (hereinafter called the source field). Thesystem 106 can retrieve the facts associated with the object from therepository 115 using the object reference table 210 as described above with reference toFIG. 2( c). After retrieving the facts associated with the object, thesystem 106 can identify 310 the list of source documents associated with the object based on the source fields of the retrieved facts. A fact can have multiple source documents. - The subject of a source document tends to be the entity represented by the object associated with the source document. This is because the content of the source document includes at least one fact about the entity. However, a source document may have more than one subject. For example, a source document may be a BLOG covering a broad range of topics, the entity represented by the associated object being one of them. In one embodiment, the
system 106 removes source documents having multiple subjects from the identified list of source documents. Thesystem 106 may construct a list of source documents and their associated objects. If a source document associates with objects representing different entities, thesystem 106 can remove the source document from the identified list of source documents. - For each of the source documents in the identified list, the system identifies 320 linking documents containing hyperlinks to the source document. As described above, a document can include one or more hyperlinks to other documents. Therefore, a linking document may also include hyperlinks to documents other than to the source document. However, the hyperlink that is of interest to the
system 106 is the hyperlink to the source document. As used herein, a linking document containing a hyperlink to a source document is called a linking document for the source document. - A hyperlink includes a starting anchor tag, which includes one or more parameters (or markup attributes), and an ending anchor tag. The starting and ending anchor tags define the hyperlink. A hypertext reference attribute (e.g., “HREF”) is one type of markup attribute. The hypertext reference attribute indicates that the associated value is the address of the destination of the hyperlink. The text between the starting anchor tag and the ending anchor tag is called the anchor text of the hyperlink. For example, in the following hyperlink,
- <a href=“http://www.cnn.com/”>CNN</a>
- “<a href=”http://www.cnn.com/“>” is the starting anchor tag, “CNN” is the anchor text, and “</a>” is the ending anchor tag. In the starting anchor tag, “href” is the hypertext reference attribute and “http://www.cnn.com/” is the associated value and the address of the destination of the hyperlink (the destination address). The anchor text, if clicked by a user, triggers a request (e.g., an HTTP request) for a document located at the destination address (the destination document). Because an anchor text is rendered for presentation for the destination document to a user, it tends to reflect the subject of the destination document. Therefore, the anchor text of a hyperlink in a linking document for a source document tends to reflect the subject of the source document. As used herein, the anchor text of a hyperlink in a linking document for a source document is called the anchor text for the source document in the linking document. It is noted that methods of linking documents other than using hyperlinks can also be used and the described process can be readily applied to these other methods.
- The
system 106processes 330 the anchor texts in the linking documents to generate a collection of synonym candidates (also known as the “anchor synset”) for the object name. This step is designed to remove those anchor texts that are not related to the subject of the associated source document (e.g. “Click here!”) and to clean up the remaining anchor texts (e.g., removing portions of an anchor text unrelated to the subject of the associated source document). The results of theprocessing 330 are the collection of synonym candidates, each of which is intended to describe the entity represented by the object. - As discussed above, anchor texts for a source document tend to reflect the subject of the source document, which in turn tends to describe the entity represented by the associated object. It follows that the anchor texts for a source document tend to describe the entity represented by the object associated with the source document. Thus, the
system 106 can generate synonym candidates of the object name from anchor texts for the associated source documents. - For example, authors of linking documents can associate the anchor text “Big Blue” or “IBM” with a hyperlink to a source document about the International Business Machines Corporation, which is a source document of an object representing the International Business Machines Corporation. Because the subject of the source document (the International Business Machines Corporation) correctly describes the entity represented by the object, and the anchor texts for the source document reflect its subject, the anchor texts (“Big Blue” and “IBM”) tend to be valid synonymous names of the object.
- Some anchor texts may be invalid synonymous names of the object. Authors of linking documents can use generic language as the anchor text (e.g., “click here,” “see wikipedia article”) or include in the anchor texts language that is not related to the subject of the associated linking document (e.g., “click here for an excellent article about IBM”). An anchor text including both information describing the subject of the associated source document and unrelated information (e.g., “click here for an excellent article about”) is called a partially-related anchor text. An anchor text that includes only unrelated information (e.g., “Click here!”) is called an unrelated anchor text. The
system 106processes 330 anchor texts in the identified linking documents to remove unrelated anchor texts and unrelated information from partially-related anchor texts. - In one embodiment, the
system 106 removes unrelated information from a partially-related anchor text by extracting a noun phrase (or a noun) from the anchor text. Because the synonym candidates are intended to describe the object, they are either nouns (e.g., “Canada”) or noun phrases (e.g., “the International Business Machines Corporation”). By extracting a noun phrase from the anchor text, thesystem 106 identifies a portion of the anchor text that tends to be relevant to the object. For example, the noun phrase of an anchor text “Learn about Google Inc.” is “Google Inc.” By extracting a noun phrase from an anchor text, thesystem 106 removes text unrelated to the subject of the associated source document (e.g., “Learn about” in the above example). Thesystem 106 can then add the extracted noun phrase into the anchor synset. - In one embodiment, the
system 106 has a collection of texts that are commonly used in anchor texts and unrelated to subjects of the associated destination documents (hereinafter called the “black list”). This black list can be compiled by domain experts (e.g., administrators of the system 106) or automatically generated by thesystem 106. The black list can include standard anchor texts such as “here,” “click here,” “download,” and the like. Thesystem 106 can remove an unrelated anchor text by matching it with texts in the black list and not adding it into the anchor synset if a match is detected. - The black list may also contain prefix and suffix texts. The
system 106 may remove unrelated information from a partially-related anchor text by matching it with the prefix and/or suffix texts and remove the matched prefix and/or suffix from it. For example, “Wikipedia article about” can be a frequently used prefix and included in the black list. Thesystem 106 identifies that an anchor text “Wikipedia article about the King” includes the prefix and removes it from the anchor text. Other popular prefix texts include “See Wikipedia for,” “article for,” and the like. Thesystem 106 can then add the remainder into the anchor synset. - In one embodiment, the
system 106 applies normalization rules to an anchor text to standardize its format before processing 330. Examples of the normalization rules include removal of punctuation, such as removing commas in a string, conversion of uppercase characters in a string to corresponding lowercase characters, such as from “America” to “america,” and stop word removal, such as removing stop words such as “the,” “a,” and “of” from a string. For example, after applying the above normalization rules, an anchor text “Click here!” becomes “click here.” Subsequently, thesystem 106 detects a match in the black list for the normalized anchor text and does not add it to the anchor synset. In one embodiment, thesystem 106 applies language-dependent normalization rules based on the language of the linking document. For example, thesystem 106 can identify Spanish as the language of a linking document, and apply a set of Spanish stop word removal rules to the anchor texts in the linking document. - Similarly, the
system 106 can have a collection of texts that tend to be valid synonymous names (hereinafter called “white list”). This white list can be compiled by authorized personnel or imported from one or more information sources. For example, the white list can contain company names extracted from a business-related website or peoples' names from a telephone directory. Thesystem 106 can process 330 the anchor texts by matching them with the texts in the white list and add those that match into the anchor synset. By adding the anchor texts that match with an entry in the white list, thesystem 106 generates synonym candidates that tend to be valid synonymous names. - The
system 106 selects 340 synonymous names of the object from the collection of synonym candidates (the anchor synset). The synonym candidates generated may contain identification language that does not qualify as synonymous names. For example, some of the synonym candidates can reflect the author's personal opinion (e.g., “my favorite movie star”), while some others can be descriptive names used exclusively within a small group of people (e.g., “Party Ed”). The system selects 340 synonymous names by filtering out these invalid synonym candidates. - In one embodiment, the
system 106 selects 340 synonymous names based on the frequency of occurrence of the synonym candidates within the anchor synset. For example, thesystem 106 can be configured to select 340 synonym candidates that occur at a frequency above a minimum threshold. The threshold can be user-defined or dynamically modified by thesystem 106. Rarely occurring synonym candidates tend to be incorrect synonymous names (e.g., containing spelling errors). Further, even if the rarely occurring synonym candidates contain legitimate synonym names, these legitimate synonym names are rarely used and can be omitted with minimal harm. Examples of synonym candidates that occur infrequently include authors' personal opinions and names used only by a small group of people. - The
system 106 can also be configured to select 340 the synonym candidates that occur at a frequency below a maximum threshold. Synonym candidates that occur extremely frequently also tend not to be synonymous names because they can be general phrases unrelated to the subject of the associated source document. Examples of synonym candidates with extremely high occurrence rates include “the company,” “home page,” and “click here.” In some embodiments, thesystem 106 can add a synonym candidate that occurs frequently into the black list. Alternatively, thesystem 106 can output the synonym candidates occurring at a frequency exceeding the maximum threshold so that an administrator can review them and select 340 them if they are removed by mistake. - In one embodiment, instead of selecting 340 synonymous names based on the frequency of occurrence of the synonym candidates, the
system 106 selects 340 synonymous names based on the proportion of the synonym candidates in the collection of synonym candidates. For example, thesystem 106 can be configured to select 340 only the synonym candidates that constitute more than 5% of the total anchor synset. - In one embodiment, the
system 106 selects 340 synonymous names based on the quality of the associated linking documents. The quality of a linking document can be user defined or machine generated. For example, thesystem 106 can determine the quality of the linking document based on a page rank of the linking document. A page rank is a numerical weight for a document determined by a link analysis algorithm such as the algorithm described in U.S. Pat. No. 6,285,999. Because high quality linking documents tend to have high quality anchor texts (e.g., fewer spelling errors), synonym candidates generated from these documents are more likely to be proper synonymous names of the object. In some embodiments, thesystem 106 adds synonymous names generated from high-quality documents into the white list. - In one embodiment, the
system 106 assigns a score for each synonym candidate in the anchor synset, and selects 340 synonymous names based on the assigned scores. The score for a synonym candidate may be determined based on a score function taking into account one or more of the following factors: the frequency of occurrence or the proportion of the synonym candidate within the anchor synset, the quality of the associated linking documents, whether the synonym candidate has a match in the white list or the black list, and whether the synonym candidate is properly capitalized (e.g., whether the first character of each word in the synonym candidate and only these characters are capitalized). Thesystem 106 may select 340 a synonym candidate as a synonymous name if its score above a minimum threshold and/or below a maximum threshold. - The
system 106 can process 330 the anchor texts associated with different source documents separately and generate a collection of synonym candidates for each of the source documents. Thesystem 106 can then select 340 synonymous names from each of the collections. Alternatively, thesystem 106 can process 330 the anchor texts associated with different source documents together and generate one single anchor synset, and subsequently select 340 synonymous names from the anchor synset. - After selecting 340 the synonymous names, the
system 106 adds 350 facts including the selected synonymous names to the object in therepository 115. For example, thesystem 106 may create a name fact for each of the selected synonymous names, assign the synonymous names as the values of the name facts, and associate the created facts with the object. - After the
system 106 determines the synonymous names of the object, it can process the other objects in therepository 115 and determine their synonymous names. As noted above, the system can determine the synonymous names of multiple objects concurrently and/or in parallel. - It is noted that the process described above is language-neutral and can be used to determine synonymous names in any language.
-
FIGS. 4( a) through 4(e) illustrate an example process of themethod 300 described above with respect toFIG. 3 . Initially, as illustrated inFIG. 4( a), thesystem 106 identifies 308 anobject 402 representing the rock singer Elvis Presley. Theobject 402 has three associatedfacts FIG. 4( b), thefact 410 has an attribute of “Name,” a value of “Elvis Aaron Presley,” and a source of “http://www.elvis.com/elvisology/bio/elvis_overview.asp.” Thefact 412 has an attribute of “Date of Birth,” a value of “Jan. 8, 1935,” and a source of “http://en.wikipedia.org/wiki/Elvis.” Thefact 414 has an attribute of “Origin,” a value of “East Tupelo, Miss., United States,” and a source of “http://www.history-of-rock.com/elvis—presley.htm.” The name of theobject 402 is the value of thefact 410, “Elvis Aaron Presley.” - The
system 106 identifies 310 source documents associated with theobject 402 by identifying facts associated with theobject 402, thefacts repository 115, and identifying 310 the associated source documents by accessing source fields of the retrieved facts. Thefact 410 is associated with asource document 420. Thefact 412 is associated with asource document 422. Thefact 414 is associated with asource document 424. Therefore, thesystem 106 identifies 310 source documents associated with theobject 402 as the source documents 420, 422, and 424. As illustrated inFIG. 4( b), the URLs of the source documents 420, 422, and 424 are “http://www.elvis.com/elvisology/bio/elvis_overview.asp,” “http://en.wikipedia.org/wiki/Elvis,” and “http://www.history-of-rock.com/elvis_presley.htm,” respectively. - The
system 106 identifies 320 linking documents for the source documents 420, 422, and 424. Thesystem 106 identifies 320 two linkingdocuments source document 420, three linkingdocuments source document 422, and two linkingdocuments source document 424. It is noted that the linkingdocument 432 is identified as a linking document for both the source documents 420 and 422. - Referring now to
FIG. 4( c), the column labeled “Linking Document ID” (linking document column) contains the document identifiers of linking documents identified 320 by thesystem 106. The column labeled “Source Document ID” (source document column) contains the document identifier of the source document to which the linking document as identified in the linking document column links. The column “Anchor Text” contains the anchor text for the associated source document in the associated linking document. As shown inFIG. 4( c), the anchor text for thesource document 420 in thelinking document 430 is “An article about the King.” The anchor text for thesource document 420 in thelinking document 432 is “Homepage of The King.” The anchor text for thesource document 422 in thelinking document 432 is “Learn about Elvis.” The anchor text for thesource document 422 in thelinking document 434 is “Wikipedia article about the King.” The anchor text for thesource document 422 in thelinking document 436 is “Click here!” The anchor text for thesource document 424 in thelinking document 438 is “The Best Rock Singer Ever.” The anchor text for thesource document 424 in thelinking document 440 is “Find out more about Elvis.” - The
system 106processes 330 the anchor texts in the linkingdocuments object 402. Referring toFIG. 4( d), thesystem 106processes 330 the anchor text in the linking document 430 (“An article about the King”) by removing the common prefix “An article about” and generates a synonym candidate “the King;” processes 330 the anchor text for thesource document 420 in the linking document 432 (“Homepage of The King”) by removing the common prefix “Homepage of and generates a synonym candidate “The King;” processes 330 the anchor text for thesource document 422 in the linking document 432 (“Learn about Elvis”) by removing the common prefix “Learn about” and generates a synonym candidate “Elvis;” processes 330 the anchor text in the linking document 434 (“Wikipedia article about the King”) by removing the common prefix “Wikipedia article about” and generates a synonym candidate “the King;” processes 330 the anchor text in the linking document 440 (“Find out more about Elvis”) by removing the common prefix “Find out more about” and generates a synonym candidate “Elvis.” Thesystem 106 generates a synonym candidate based on the anchor text in the linking document 438 (“The Best Rock Singer Ever”). Thesystem 106 detects a match in the black list for the anchor text in the linking document 436 (“Click here!”) and does not generate any synonym candidates based on it. - The
system 106 selects 340 synonymous names from the collection of synonym candidates. Referring toFIG. 4( d), the collection of the synonym candidates includes “the King,” “The King,” “Elvis,” “the King,” “The Best Rock Singer Ever,” and “Elvis.” Thesystem 106 selects 340 the synonym candidates occurring no less than twice (minimum threshold) and no more than one hundred times (maximum threshold). Assuming thesystem 106 is case insensitive, it selects 340 the synonym candidates “the King,” which occurs three times, and “Elvis,” which occurs twice. The synonym candidate “The Best Rock Singer Ever” has only one occurrence, smaller than the minimum threshold, and thus is not selected 340. Therefore, thesystem 106 correctly identifies the synonymous names “The King” and “Elvis” for theobject 402 representing Elvis Presley. - The
system 106 adds 350 two facts to theobject 402. As illustrated inFIG. 4( e), thesystem 106 creates afact 416 for the synonymous name “The King” and afact 418 for the synonymous name “Elvis.” The source field of thefacts FIG. 4( e) is empty. However, thesystem 106 may list the URLs of the linking documents from which the synonymous names are derived in the corresponding source field. For example, the source field of thename fact 416 may include URLs for the linkingdocuments - Reference in the specification to “one embodiment” or to “an embodiment” means that a particular feature, structure, or characteristic described in connection with the embodiments is included in at least one embodiment of the invention. The appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment.
- Some portions of the above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps (instructions) leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic or optical signals capable of being stored, transferred, combined, compared and otherwise manipulated. It is convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. Furthermore, it is also convenient at times, to refer to certain arrangements of steps requiring physical manipulations of physical quantities as modules or code devices, without loss of generality.
- It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as “processing” or “computing” or “calculating” or “determining” or “displaying” or “determining” or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention can be embodied in software, firmware or hardware, and when embodied in software, can be downloaded to reside on and be operated from different platforms used by a variety of operating systems.
- The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
- The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references below to specific languages are provided for disclosure of enablement and best mode of the present invention.
- While the invention has been particularly shown and described with reference to a preferred embodiment and several alternate embodiments, it will be understood by persons skilled in the relevant art that various changes in form and details can be made therein without departing from the spirit and scope of the invention.
- Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/286,770 US20140359409A1 (en) | 2007-08-02 | 2014-05-23 | Learning Synonymous Object Names from Anchor Texts |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/833,180 US8738643B1 (en) | 2007-08-02 | 2007-08-02 | Learning synonymous object names from anchor texts |
US14/286,770 US20140359409A1 (en) | 2007-08-02 | 2014-05-23 | Learning Synonymous Object Names from Anchor Texts |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/833,180 Continuation US8738643B1 (en) | 2007-08-02 | 2007-08-02 | Learning synonymous object names from anchor texts |
Publications (1)
Publication Number | Publication Date |
---|---|
US20140359409A1 true US20140359409A1 (en) | 2014-12-04 |
Family
ID=50736617
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/833,180 Active 2031-03-21 US8738643B1 (en) | 2007-08-02 | 2007-08-02 | Learning synonymous object names from anchor texts |
US14/286,770 Abandoned US20140359409A1 (en) | 2007-08-02 | 2014-05-23 | Learning Synonymous Object Names from Anchor Texts |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/833,180 Active 2031-03-21 US8738643B1 (en) | 2007-08-02 | 2007-08-02 | Learning synonymous object names from anchor texts |
Country Status (1)
Country | Link |
---|---|
US (2) | US8738643B1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2020252950A1 (en) * | 2019-06-17 | 2020-12-24 | 五邑大学 | Named entity recognition method for medical texts based on pre-training model and fine turning technology |
US20230087460A1 (en) * | 2016-12-09 | 2023-03-23 | Google Llc | Preventing the distribution of forbidden network content using automatic variant detection |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9916301B2 (en) * | 2012-12-21 | 2018-03-13 | Microsoft Technology Licensing, Llc | Named entity variations for multimodal understanding systems |
US9390166B2 (en) * | 2012-12-31 | 2016-07-12 | Fujitsu Limited | Specific online resource identification and extraction |
CN104317931B (en) * | 2014-10-31 | 2018-04-17 | 北京奇虎科技有限公司 | The definite method and apparatus of web page title |
US10671577B2 (en) | 2016-09-23 | 2020-06-02 | International Business Machines Corporation | Merging synonymous entities from multiple structured sources into a dataset |
US20210326370A1 (en) * | 2020-04-20 | 2021-10-21 | Home Depot Product Authority, Llc | Methods for identifying product variants |
CN111881669B (en) * | 2020-06-24 | 2023-06-09 | 百度在线网络技术（北京）有限公司 | Synonymous text acquisition method and device, electronic equipment and storage medium |
US20220092096A1 (en) * | 2020-09-23 | 2022-03-24 | International Business Machines Corporation | Automatic generation of short names for a named entity |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US20070143282A1 (en) * | 2005-03-31 | 2007-06-21 | Betz Jonathan T | Anchor text summarization for corroboration |
Family Cites Families (173)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5010478A (en) | 1986-04-11 | 1991-04-23 | Deran Roger L | Entity-attribute value database system with inverse attribute for selectively relating two different entities |
US5133075A (en) | 1988-12-19 | 1992-07-21 | Hewlett-Packard Company | Method of monitoring changes in attribute values of object in an object-oriented database |
US5440730A (en) | 1990-08-09 | 1995-08-08 | Bell Communications Research, Inc. | Time index access structure for temporal databases having concurrent multiple versions |
CA2048306A1 (en) | 1990-10-02 | 1992-04-03 | Steven P. Miller | Distributed configuration profile for computing system |
US5347653A (en) | 1991-06-28 | 1994-09-13 | Digital Equipment Corporation | System for reconstructing prior versions of indexes using records indicating changes between successive versions of the indexes |
US5694590A (en) | 1991-09-27 | 1997-12-02 | The Mitre Corporation | Apparatus and method for the detection of security violations in multilevel secure databases |
US5574898A (en) | 1993-01-08 | 1996-11-12 | Atria Software, Inc. | Dynamic software version auditor which monitors a process to provide a list of objects that are accessed |
US7082426B2 (en) | 1993-06-18 | 2006-07-25 | Cnet Networks, Inc. | Content aggregation method and apparatus for an on-line product catalog |
US5519608A (en) | 1993-06-24 | 1996-05-21 | Xerox Corporation | Method for extracting from a text corpus answers to questions stated in natural language by using linguistic analysis and hypothesis generation |
US5560005A (en) | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US5680622A (en) | 1994-06-30 | 1997-10-21 | Borland International, Inc. | System and methods for quickly detecting shareability of symbol and type information in header files |
US5608903A (en) | 1994-12-15 | 1997-03-04 | Novell, Inc. | Method and apparatus for moving subtrees in a distributed network directory |
US5717911A (en) | 1995-01-23 | 1998-02-10 | Tandem Computers, Inc. | Relational database system and method with high availability compliation of SQL programs |
US5793966A (en) | 1995-12-01 | 1998-08-11 | Vermeer Technologies, Inc. | Computer system and computer-implemented process for creation and maintenance of online services |
US5717951A (en) | 1995-08-07 | 1998-02-10 | Yabumoto; Kan W. | Method for storing and retrieving information on a magnetic storage medium via data blocks of variable sizes |
US5838979A (en) | 1995-10-31 | 1998-11-17 | Peritus Software Services, Inc. | Process and tool for scalable automated data field replacement |
US5701470A (en) | 1995-12-08 | 1997-12-23 | Sun Microsystems, Inc. | System and method for space efficient object locking using a data subarray and pointers |
US5815415A (en) | 1996-01-19 | 1998-09-29 | Bentley Systems, Incorporated | Computer system for portable persistent modeling |
US5802299A (en) | 1996-02-13 | 1998-09-01 | Microtouch Systems, Inc. | Interactive system for authoring hypertext document collections |
US5778378A (en) | 1996-04-30 | 1998-07-07 | International Business Machines Corporation | Object oriented information retrieval framework mechanism |
US5920859A (en) | 1997-02-05 | 1999-07-06 | Idd Enterprises, L.P. | Hypertext document retrieval system and method |
US5819210A (en) | 1996-06-21 | 1998-10-06 | Xerox Corporation | Method of lazy contexted copying during unification |
US6052693A (en) | 1996-07-02 | 2000-04-18 | Harlequin Group Plc | System for assembling large databases through information extracted from text sources |
US5987460A (en) | 1996-07-05 | 1999-11-16 | Hitachi, Ltd. | Document retrieval-assisting method and system for the same and document retrieval service using the same with document frequency and term frequency |
US5819265A (en) | 1996-07-12 | 1998-10-06 | International Business Machines Corporation | Processing names in a text |
US5787413A (en) | 1996-07-29 | 1998-07-28 | International Business Machines Corporation | C++ classes for a digital library |
US6820093B2 (en) | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US5826258A (en) | 1996-10-02 | 1998-10-20 | Junglee Corporation | Method and apparatus for structuring the querying and interpretation of semistructured information |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US6134555A (en) | 1997-03-10 | 2000-10-17 | International Business Machines Corporation | Dimension reduction using association rules for data mining application |
US5822743A (en) | 1997-04-08 | 1998-10-13 | 1215627 Ontario Inc. | Knowledge-based information retrieval system |
US5974254A (en) | 1997-06-06 | 1999-10-26 | National Instruments Corporation | Method for detecting differences between graphical programs |
US5909689A (en) | 1997-09-18 | 1999-06-01 | Sony Corporation | Automatic update of file versions for files shared by several computers which record in respective file directories temporal information for indicating when the files have been created |
US6018741A (en) | 1997-10-22 | 2000-01-25 | International Business Machines Corporation | Method and system for managing objects in a dynamic inheritance tree |
US6112210A (en) | 1997-10-31 | 2000-08-29 | Oracle Corporation | Apparatus and method for null representation in database object storage |
US5943670A (en) | 1997-11-21 | 1999-08-24 | International Business Machines Corporation | System and method for categorizing objects in combined categories |
US6349275B1 (en) | 1997-11-24 | 2002-02-19 | International Business Machines Corporation | Multiple concurrent language support system for electronic catalogue using a concept based knowledge representation |
US6212526B1 (en) | 1997-12-02 | 2001-04-03 | Microsoft Corporation | Method for apparatus for efficient mining of classification models from databases |
US6094650A (en) | 1997-12-15 | 2000-07-25 | Manning & Napier Information Services | Database analysis using a probabilistic ontology |
US6044366A (en) | 1998-03-16 | 2000-03-28 | Microsoft Corporation | Use of the UNPIVOT relational operator in the efficient gathering of sufficient statistics for data mining |
US6078918A (en) | 1998-04-02 | 2000-06-20 | Trivada Corporation | Online predictive memory |
US6112203A (en) | 1998-04-09 | 2000-08-29 | Altavista Company | Method for ranking documents in a hyperlinked environment using connectivity and selective content analysis |
US6122647A (en) | 1998-05-19 | 2000-09-19 | Perspecta, Inc. | Dynamic generation of contextual links in hypertext documents |
US6742003B2 (en) | 2001-04-30 | 2004-05-25 | Microsoft Corporation | Apparatus and accompanying methods for visualizing clusters of data and hierarchical cluster classifications |
US6327574B1 (en) | 1998-07-07 | 2001-12-04 | Encirq Corporation | Hierarchical models of consumer attributes for targeting content in a privacy-preserving manner |
US6240546B1 (en) | 1998-07-24 | 2001-05-29 | International Business Machines Corporation | Identifying date fields for runtime year 2000 system solution process, method and article of manufacture |
US6665837B1 (en) | 1998-08-10 | 2003-12-16 | Overture Services, Inc. | Method for identifying related pages in a hyperlinked database |
US6694482B1 (en) | 1998-09-11 | 2004-02-17 | Sbc Technology Resources, Inc. | System and methods for an architectural framework for design of an adaptive, personalized, interactive content delivery system |
US6572661B1 (en) | 1999-01-11 | 2003-06-03 | Cisco Technology, Inc. | System and method for automated annotation of files |
US6377943B1 (en) | 1999-01-20 | 2002-04-23 | Oracle Corp. | Initial ordering of tables for database queries |
US7003719B1 (en) | 1999-01-25 | 2006-02-21 | West Publishing Company, Dba West Group | System, method, and software for inserting hyperlinks into documents |
US6574635B2 (en) | 1999-03-03 | 2003-06-03 | Siebel Systems, Inc. | Application instantiation based upon attributes and values stored in a meta data repository, including tiering of application layers objects and components |
US6584464B1 (en) | 1999-03-19 | 2003-06-24 | Ask Jeeves, Inc. | Grammar template query system |
US6397228B1 (en) | 1999-03-31 | 2002-05-28 | Verizon Laboratories Inc. | Data enhancement techniques |
US6263328B1 (en) | 1999-04-09 | 2001-07-17 | International Business Machines Corporation | Object oriented query model and process for complex heterogeneous database queries |
US6721713B1 (en) | 1999-05-27 | 2004-04-13 | Andersen Consulting Llp | Business alliance identification in a web architecture framework |
US6606625B1 (en) | 1999-06-03 | 2003-08-12 | University Of Southern California | Wrapper induction by hierarchical data analysis |
US6711585B1 (en) | 1999-06-15 | 2004-03-23 | Kanisa Inc. | System and method for implementing a knowledge management system |
US6473898B1 (en) | 1999-07-06 | 2002-10-29 | Pcorder.Com, Inc. | Method for compiling and selecting data attributes |
CA2281331A1 (en) | 1999-09-03 | 2001-03-03 | Cognos Incorporated | Database management system |
US6754873B1 (en) | 1999-09-20 | 2004-06-22 | Google Inc. | Techniques for finding related hyperlinked documents using link-based analysis |
WO2001022285A2 (en) | 1999-09-21 | 2001-03-29 | Borthwick Andrew E | A probabilistic record linkage model derived from training data |
AU2702701A (en) | 1999-10-15 | 2001-04-23 | Milind Kotwal | Method of categorization and indexing of information |
US6665666B1 (en) | 1999-10-26 | 2003-12-16 | International Business Machines Corporation | System, method and program product for answering questions using a search engine |
US6850896B1 (en) | 1999-10-28 | 2005-02-01 | Market-Touch Corporation | Method and system for managing and providing sales data using world wide web |
US6804667B1 (en) | 1999-11-30 | 2004-10-12 | Ncr Corporation | Filter for checking for duplicate entries in database |
US6963867B2 (en) | 1999-12-08 | 2005-11-08 | A9.Com, Inc. | Search query processing to provide category-ranked presentation of search results |
US7305380B1 (en) | 1999-12-15 | 2007-12-04 | Google Inc. | Systems and methods for performing in-context searching |
US6865582B2 (en) | 2000-01-03 | 2005-03-08 | Bechtel Bwxt Idaho, Llc | Systems and methods for knowledge discovery in spatial data |
US6606659B1 (en) | 2000-01-28 | 2003-08-12 | Websense, Inc. | System and method for controlling access to internet sites |
US6665659B1 (en) | 2000-02-01 | 2003-12-16 | James D. Logan | Methods and apparatus for distributing and using metadata via the internet |
US6567936B1 (en) | 2000-02-08 | 2003-05-20 | Microsoft Corporation | Data clustering using error-tolerant frequent item sets |
WO2001061568A2 (en) | 2000-02-17 | 2001-08-23 | E-Numerate Solutions, Inc. | Rdl search engine |
US6901403B1 (en) | 2000-03-02 | 2005-05-31 | Quovadx, Inc. | XML presentation of general-purpose data sources |
US6311194B1 (en) | 2000-03-15 | 2001-10-30 | Taalee, Inc. | System and method for creating a semantic web and its applications in browsing, searching, profiling, personalization and advertising |
US6502102B1 (en) | 2000-03-27 | 2002-12-31 | Accenture Llp | System, method and article of manufacture for a table-driven automated scripting architecture |
US6957213B1 (en) | 2000-05-17 | 2005-10-18 | Inquira, Inc. | Method of utilizing implicit references to answer a query |
EP1156430A2 (en) | 2000-05-17 | 2001-11-21 | Matsushita Electric Industrial Co., Ltd. | Information retrieval system |
US7062483B2 (en) | 2000-05-18 | 2006-06-13 | Endeca Technologies, Inc. | Hierarchical data-driven search and navigation system and method for information retrieval |
US6745189B2 (en) | 2000-06-05 | 2004-06-01 | International Business Machines Corporation | System and method for enabling multi-indexing of objects |
US6963876B2 (en) | 2000-06-05 | 2005-11-08 | International Business Machines Corporation | System and method for searching extended regular expressions |
US20020042707A1 (en) | 2000-06-19 | 2002-04-11 | Gang Zhao | Grammar-packaged parsing |
US7162499B2 (en) | 2000-06-21 | 2007-01-09 | Microsoft Corporation | Linked value replication |
CA2419428A1 (en) | 2000-06-22 | 2001-12-27 | Yaron Mayer | System and method for searching, finding and contacting dates on the internet in instant messaging networks |
US7080085B1 (en) | 2000-07-12 | 2006-07-18 | International Business Machines Corporation | System and method for ensuring referential integrity for heterogeneously scoped references in an information management system |
US6728728B2 (en) | 2000-07-24 | 2004-04-27 | Israel Spiegler | Unified binary model and methodology for knowledge representation and for data and information mining |
US7146536B2 (en) | 2000-08-04 | 2006-12-05 | Sun Microsystems, Inc. | Fact collection for product knowledge management |
US7080073B1 (en) | 2000-08-18 | 2006-07-18 | Firstrain, Inc. | Method and apparatus for focused crawling |
IT1318683B1 (en) | 2000-08-22 | 2003-08-27 | Ausimont Spa | MIXTURES OF FLUORINATED AND ACRYLIC ELASTOMERS. |
US6556991B1 (en) | 2000-09-01 | 2003-04-29 | E-Centives, Inc. | Item name normalization |
US6823495B1 (en) | 2000-09-14 | 2004-11-23 | Microsoft Corporation | Mapping tool graphical user interface |
US7143099B2 (en) | 2001-02-08 | 2006-11-28 | Amdocs Software Systems Limited | Historical data warehousing system |
US6820081B1 (en) | 2001-03-19 | 2004-11-16 | Attenex Corporation | System and method for evaluating a structured message store for message redundancy |
US20020147738A1 (en) | 2001-04-06 | 2002-10-10 | Reader Scot A. | Method and appratus for finding patent-relevant web documents |
CN100409675C (en) | 2001-04-12 | 2008-08-06 | 皇家菲利浦电子有限公司 | Method and system for registering user preference |
US20020169770A1 (en) * | 2001-04-27 | 2002-11-14 | Kim Brian Seong-Gon | Apparatus and method that categorize a collection of documents into a hierarchy of categories that are defined by the collection of documents |
US7020662B2 (en) | 2001-05-29 | 2006-03-28 | Sun Microsystems, Inc. | Method and system for determining a directory entry's class of service based on the value of a specifier in the entry |
US7925616B2 (en) | 2001-06-19 | 2011-04-12 | Microstrategy, Incorporated | Report system and method using context-sensitive prompt objects |
US20030126136A1 (en) | 2001-06-22 | 2003-07-03 | Nosa Omoigui | System and method for knowledge retrieval, management, delivery and presentation |
CA2451083A1 (en) * | 2001-07-26 | 2003-02-13 | International Business Machines Corporation | Data processing method, data processing system, and program |
AU2002326118A1 (en) | 2001-08-14 | 2003-03-03 | Quigo Technologies, Inc. | System and method for extracting content for submission to a search engine |
US7386832B2 (en) | 2001-08-31 | 2008-06-10 | Siebel Systems, Inc. | Configurator using structure to provide a user interface |
US7058653B2 (en) | 2001-09-17 | 2006-06-06 | Ricoh Company, Ltd. | Tree system diagram output method, computer program and recording medium |
US7020641B2 (en) | 2001-10-22 | 2006-03-28 | Sun Microsystems, Inc. | Method, system, and program for maintaining a database of data objects |
US7197449B2 (en) | 2001-10-30 | 2007-03-27 | Intel Corporation | Method for extracting name entities and jargon terms using a suffix tree data structure |
JP3931214B2 (en) | 2001-12-17 | 2007-06-13 | 日本アイ・ビー・エム株式会社 | Data analysis apparatus and program |
US20030149567A1 (en) | 2002-02-04 | 2003-08-07 | Tony Schmitz | Method and system for using natural language in computer resource utilization analysis via a communications network |
US7421660B2 (en) | 2003-02-04 | 2008-09-02 | Cataphora, Inc. | Method and apparatus to visually present discussions for data mining purposes |
EP1481346B1 (en) | 2002-02-04 | 2012-10-10 | Cataphora, Inc. | A method and apparatus to visually present discussions for data mining purposes |
US7436887B2 (en) | 2002-02-06 | 2008-10-14 | Playtex Products, Inc. | Method and apparatus for video frame sequence-based object tracking |
US20030154071A1 (en) | 2002-02-11 | 2003-08-14 | Shreve Gregory M. | Process for the document management and computer-assisted translation of documents utilizing document corpora constructed by intelligent agents |
JP4098539B2 (en) | 2002-03-15 | 2008-06-11 | 富士通株式会社 | Profile information recommendation method, program, and apparatus |
US6857053B2 (en) | 2002-04-10 | 2005-02-15 | International Business Machines Corporation | Method, system, and program for backing up objects by creating groups of objects |
US6963880B1 (en) | 2002-05-10 | 2005-11-08 | Oracle International Corporation | Schema evolution of complex objects |
US7003522B1 (en) | 2002-06-24 | 2006-02-21 | Microsoft Corporation | System and method for incorporating smart tags in online content |
US20040003067A1 (en) | 2002-06-27 | 2004-01-01 | Daniel Ferrin | System and method for enabling a user interface with GUI meta data |
GB0215464D0 (en) | 2002-07-04 | 2002-08-14 | Hewlett Packard Co | Combining data descriptions |
CN1316419C (en) | 2002-08-22 | 2007-05-16 | 新加坡科技研究局 | Prediction by collective likelihood from emerging patterns |
US7096217B2 (en) | 2002-10-31 | 2006-08-22 | International Business Machines Corporation | Global query correlation attributes |
EP1588277A4 (en) | 2002-12-06 | 2007-04-25 | Attensity Corp | Systems and methods for providing a mixed data integration service |
US7277879B2 (en) | 2002-12-17 | 2007-10-02 | Electronic Data Systems Corporation | Concept navigation in data storage systems |
US7181450B2 (en) | 2002-12-18 | 2007-02-20 | International Business Machines Corporation | Method, system, and program for use of metadata to create multidimensional cubes in a relational database |
US7107528B2 (en) | 2002-12-20 | 2006-09-12 | International Business Machines Corporation | Automatic completion of dates |
US7472182B1 (en) | 2002-12-31 | 2008-12-30 | Emc Corporation | Data collection policy for storage devices |
GB0304639D0 (en) | 2003-02-28 | 2003-04-02 | Kiq Ltd | Classification using re-sampling of probability estimates |
US7051023B2 (en) | 2003-04-04 | 2006-05-23 | Yahoo! Inc. | Systems and methods for generating concept units from search queries |
US8856030B2 (en) | 2003-04-07 | 2014-10-07 | Sevenecho, Llc | Method, system and software for associating attributes within digital media presentations |
US7747571B2 (en) | 2003-04-15 | 2010-06-29 | At&T Intellectual Property, I,L.P. | Methods, systems, and computer program products for implementing logical and physical data models |
JP2004362223A (en) * | 2003-06-04 | 2004-12-24 | Hitachi Ltd | Information mining system |
US7836391B2 (en) | 2003-06-10 | 2010-11-16 | Google Inc. | Document search engine including highlighting of confident results |
US9026901B2 (en) | 2003-06-20 | 2015-05-05 | International Business Machines Corporation | Viewing annotations across multiple applications |
US7162473B2 (en) | 2003-06-26 | 2007-01-09 | Microsoft Corporation | Method and system for usage analyzer that determines user accessed sources, indexes data subsets, and associated metadata, processing implicit queries based on potential interest to users |
CA2533167A1 (en) | 2003-07-22 | 2005-01-27 | Kinor Technologies Inc. | Information access using ontologies |
US7496560B2 (en) | 2003-09-23 | 2009-02-24 | Amazon Technologies, Inc. | Personalized searchable library with highlighting capabilities |
AU2003290397A1 (en) | 2003-10-15 | 2005-04-27 | Dharamdas Gautam Goradia | Interactive wisdom system |
KR100533810B1 (en) | 2003-10-16 | 2005-12-07 | 한국전자통신연구원 | Semi-Automatic Construction Method for Knowledge of Encyclopedia Question Answering System |
GB0325626D0 (en) | 2003-11-03 | 2003-12-10 | Infoshare Ltd | Data aggregation |
US7512553B2 (en) | 2003-12-05 | 2009-03-31 | International Business Machines Corporation | System for automated part-number mapping |
US8150824B2 (en) | 2003-12-31 | 2012-04-03 | Google Inc. | Systems and methods for direct navigation to specific portion of target document |
US20050149851A1 (en) | 2003-12-31 | 2005-07-07 | Google Inc. | Generating hyperlinks and anchor text in HTML and non-HTML documents |
US7424467B2 (en) | 2004-01-26 | 2008-09-09 | International Business Machines Corporation | Architecture for an indexer with fixed width sort and variable width sort |
RU2006133549A (en) | 2004-02-20 | 2008-05-20 | ДАУ ДЖОУНС РЕЙТЕРЗ БИЗНЕС ИНТЕРЭКТИВ, Эл Эл Си (US) | SYSTEM AND METHOD OF INTELLECTUAL SEARCH AND SAMPLE |
US7725498B2 (en) | 2004-04-22 | 2010-05-25 | International Business Machines Corporation | Techniques for identifying mergeable data |
US8051207B2 (en) | 2004-06-25 | 2011-11-01 | Citrix Systems, Inc. | Inferring server state in s stateless communication protocol |
US20060036504A1 (en) | 2004-08-11 | 2006-02-16 | Allocca William W | Dynamically classifying items for international delivery |
US7809695B2 (en) | 2004-08-23 | 2010-10-05 | Thomson Reuters Global Resources | Information retrieval systems with duplicate document detection and presentation functions |
US20060053171A1 (en) | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for curating one or more multi-relational ontologies |
US20060053175A1 (en) | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for creating, editing, and utilizing one or more rules for multi-relational ontology creation and maintenance |
US20060074910A1 (en) | 2004-09-17 | 2006-04-06 | Become, Inc. | Systems and methods of retrieving topic specific information |
US7809763B2 (en) | 2004-10-15 | 2010-10-05 | Oracle International Corporation | Method(s) for updating database object metadata |
US9137115B2 (en) | 2004-12-06 | 2015-09-15 | Bmc Software, Inc. | System and method for resource reconciliation in an enterprise management system |
US20060167991A1 (en) | 2004-12-16 | 2006-07-27 | Heikes Brian D | Buddy list filtering |
US20060143227A1 (en) | 2004-12-27 | 2006-06-29 | Helm Martin W | System and method for persisting software objects |
US8719779B2 (en) | 2004-12-28 | 2014-05-06 | Sap Ag | Data object association based on graph theory techniques |
US7769579B2 (en) | 2005-05-31 | 2010-08-03 | Google Inc. | Learning facts from semi-structured text |
US7685136B2 (en) | 2005-01-12 | 2010-03-23 | International Business Machines Corporation | Method, system and program product for managing document summary information |
US20060238919A1 (en) | 2005-04-20 | 2006-10-26 | The Boeing Company | Adaptive data cleaning |
US20060248456A1 (en) | 2005-05-02 | 2006-11-02 | Ibm Corporation | Assigning a publication date for at least one electronic document |
US7590647B2 (en) | 2005-05-27 | 2009-09-15 | Rage Frameworks, Inc | Method for extracting, interpreting and standardizing tabular data from unstructured documents |
US7630977B2 (en) | 2005-06-29 | 2009-12-08 | Xerox Corporation | Categorization including dependencies between different category systems |
US20070005593A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Attribute-based data retrieval and association |
US7797282B1 (en) | 2005-09-29 | 2010-09-14 | Hewlett-Packard Development Company, L.P. | System and method for modifying a training set |
US7493317B2 (en) | 2005-10-20 | 2009-02-17 | Omniture, Inc. | Result-based triggering for presentation of online content |
US7730013B2 (en) | 2005-10-25 | 2010-06-01 | International Business Machines Corporation | System and method for searching dates efficiently in a collection of web documents |
US7574449B2 (en) | 2005-12-02 | 2009-08-11 | Microsoft Corporation | Content matching |
US8260785B2 (en) | 2006-02-17 | 2012-09-04 | Google Inc. | Automatic object reference identification and linking in a browseable fact repository |
US7555471B2 (en) | 2006-01-27 | 2009-06-30 | Google Inc. | Data object visualization |
US8954426B2 (en) | 2006-02-17 | 2015-02-10 | Google Inc. | Query language |
US7590628B2 (en) * | 2006-03-31 | 2009-09-15 | Google, Inc. | Determining document subject by using title and anchor text of related documents |
US7610382B1 (en) * | 2006-06-30 | 2009-10-27 | Amazon Technologies, Inc. | System and method for marking content |
US8458207B2 (en) * | 2006-09-15 | 2013-06-04 | Microsoft Corporation | Using anchor text to provide context |
US8719844B2 (en) | 2006-11-27 | 2014-05-06 | Morgan Stanley | Merging realtime data flows |
US8316007B2 (en) * | 2007-06-28 | 2012-11-20 | Oracle International Corporation | Automatically finding acronyms and synonyms in a corpus |
-
2007
- 2007-08-02 US US11/833,180 patent/US8738643B1/en active Active
-
2014
- 2014-05-23 US US14/286,770 patent/US20140359409A1/en not_active Abandoned
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040064447A1 (en) * | 2002-09-27 | 2004-04-01 | Simske Steven J. | System and method for management of synonymic searching |
US20070143282A1 (en) * | 2005-03-31 | 2007-06-21 | Betz Jonathan T | Anchor text summarization for corroboration |
Non-Patent Citations (1)
Title |
---|
Kumaran et al. "Automatic Extraction of Synonymy Information: An Extended Abstract" Multilingual Systems Research, Microsoft Research India Bangalore, India 09/18/2006 * |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230087460A1 (en) * | 2016-12-09 | 2023-03-23 | Google Llc | Preventing the distribution of forbidden network content using automatic variant detection |
WO2020252950A1 (en) * | 2019-06-17 | 2020-12-24 | 五邑大学 | Named entity recognition method for medical texts based on pre-training model and fine turning technology |
Also Published As
Publication number | Publication date |
---|---|
US8738643B1 (en) | 2014-05-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7792837B1 (en) | Entity name recognition | |
US10223406B2 (en) | Entity normalization via name normalization | |
US9760570B2 (en) | Finding and disambiguating references to entities on web pages | |
US8812435B1 (en) | Learning objects and facts from documents | |
US9558186B2 (en) | Unsupervised extraction of facts | |
US20140359409A1 (en) | Learning Synonymous Object Names from Anchor Texts | |
US8260785B2 (en) | Automatic object reference identification and linking in a browseable fact repository | |
US10459955B1 (en) | Determining geographic locations for place names | |
US9208229B2 (en) | Anchor text summarization for corroboration | |
US7464090B2 (en) | Object categorization for information extraction | |
JP4857075B2 (en) | Method and computer program for efficiently retrieving dates in a collection of web documents | |
US7966291B1 (en) | Fact-based object merging | |
US7774328B2 (en) | Browseable fact repository | |
US7672971B2 (en) | Modular architecture for entity normalization | |
US7590628B2 (en) | Determining document subject by using title and anchor text of related documents | |
US20070198480A1 (en) | Query language | |
US8954412B1 (en) | Corroborating facts in electronic documents | |
Armentano et al. | NLP-based faceted search: Experience in the development of a science and technology search engine | |
US20080033953A1 (en) | Method to search transactional web pages | |
US7739212B1 (en) | System and method for updating facts in a fact repository |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CZUBA, KRZYSZTOF;BETZ, JONATHAN;REYNAR, JEFF;REEL/FRAME:046655/0308Effective date: 20070802 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |