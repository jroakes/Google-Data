US20240053877A1 - Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines - Google Patents
Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines Download PDFInfo
- Publication number
- US20240053877A1 US20240053877A1 US17/818,852 US202217818852A US2024053877A1 US 20240053877 A1 US20240053877 A1 US 20240053877A1 US 202217818852 A US202217818852 A US 202217818852A US 2024053877 A1 US2024053877 A1 US 2024053877A1
- Authority
- US
- United States
- Prior art keywords
- node
- graph
- output
- machine learning
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000002452 interceptive effect Effects 0.000 title claims abstract description 60
- 238000003062 neural network model Methods 0.000 title description 4
- 238000010801 machine learning Methods 0.000 claims abstract description 209
- 238000000034 method Methods 0.000 claims abstract description 68
- 238000012549 training Methods 0.000 claims description 46
- 230000006870 function Effects 0.000 claims description 20
- 238000013500 data storage Methods 0.000 claims description 13
- 238000004519 manufacturing process Methods 0.000 claims description 5
- 230000001360 synchronised effect Effects 0.000 claims description 4
- 238000012790 confirmation Methods 0.000 claims description 3
- 238000004422 calculation algorithm Methods 0.000 description 31
- 238000012545 processing Methods 0.000 description 22
- 230000000694 effects Effects 0.000 description 21
- 238000003491 array Methods 0.000 description 19
- 238000013528 artificial neural network Methods 0.000 description 19
- 238000004891 communication Methods 0.000 description 19
- 238000010586 diagram Methods 0.000 description 19
- 230000011218 segmentation Effects 0.000 description 18
- 230000008569 process Effects 0.000 description 15
- 238000012360 testing method Methods 0.000 description 15
- 238000001514 detection method Methods 0.000 description 14
- 239000011521 glass Substances 0.000 description 10
- 230000005540 biological transmission Effects 0.000 description 6
- 230000008859 change Effects 0.000 description 6
- 238000011161 development Methods 0.000 description 6
- 230000018109 developmental process Effects 0.000 description 6
- 230000004044 response Effects 0.000 description 6
- 238000013461 design Methods 0.000 description 5
- 238000013473 artificial intelligence Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000002787 reinforcement Effects 0.000 description 4
- 238000012800 visualization Methods 0.000 description 4
- 230000003190 augmentative effect Effects 0.000 description 3
- 230000006399 behavior Effects 0.000 description 3
- 238000013136 deep learning model Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000012805 post-processing Methods 0.000 description 3
- 238000013519 translation Methods 0.000 description 3
- 239000008186 active pharmaceutical agent Substances 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 230000001143 conditioned effect Effects 0.000 description 2
- 238000013478 data encryption standard Methods 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 238000007670 refining Methods 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 238000011160 research Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 230000008685 targeting Effects 0.000 description 2
- 238000013526 transfer learning Methods 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 244000132059 Carica parviflora Species 0.000 description 1
- 235000014653 Carica parviflora Nutrition 0.000 description 1
- 238000012356 Product development Methods 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000003416 augmentation Effects 0.000 description 1
- 238000013527 convolutional neural network Methods 0.000 description 1
- 125000004122 cyclic group Chemical group 0.000 description 1
- 238000013434 data augmentation Methods 0.000 description 1
- 238000006073 displacement reaction Methods 0.000 description 1
- 230000005670 electromagnetic radiation Effects 0.000 description 1
- 238000005538 encapsulation Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000007613 environmental effect Effects 0.000 description 1
- 238000009499 grossing Methods 0.000 description 1
- 230000012010 growth Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007477 logistic regression Methods 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000004806 packaging method and process Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000007781 pre-processing Methods 0.000 description 1
- 230000005855 radiation Effects 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 238000012163 sequencing technique Methods 0.000 description 1
- 239000000779 smoke Substances 0.000 description 1
- 238000012706 support-vector machine Methods 0.000 description 1
- 230000001988 toxicity Effects 0.000 description 1
- 231100000419 toxicity Toxicity 0.000 description 1
- 238000013518 transcription Methods 0.000 description 1
- 230000035897 transcription Effects 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000001131 transforming effect Effects 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
- 238000002604 ultrasonography Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/34—Graphical or visual programming
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/04847—Interaction techniques to control parameter settings, e.g. interaction with sliders or dials
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/0482—Interaction with lists of selectable items, e.g. menus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/0486—Drag-and-drop
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
Definitions
- Machine learning models are used for end-user applications.
- Various teams including machine learning engineers, front-end architects, and user experience artists, may be involved in choosing, training, implementing, and deploying such a machine learning model.
- RAPSAI Rapid Application Prototyping System for Artificial Intelligence
- ML machine learning
- a computer-implemented method includes providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats.
- the method also includes generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node.
- the method additionally includes applying the machine learning model to an input associated with the input option to generate an output in the output format.
- the method further includes providing, by the interactive graphical user interface, the output in the output format.
- a computing device in another aspect, includes one or more processors and data storage.
- the data storage has stored thereon computer-executable instructions that, when executed by one or more processors, cause the computing device to carry out functions.
- the functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second no
- a computer program includes instructions that, when executed by a computer, cause the computer to carry out functions.
- the functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; applying the machine
- an article of manufacture includes one or more computer readable media having computer-readable instructions stored thereon that, when executed by one or more processors of a computing device, cause the computing device to carry out functions.
- the functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node
- a system in another aspect, includes means for providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; means for generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; means for applying the machine learning model to an input associated with the input option to generate an output in the output format
- FIG. 1 is a diagram illustrating an example graphical user interface, in accordance with example embodiments.
- FIG. 2 is a diagram illustrating an example graphical user interface for a node-graph editor to compare multiple machine learning models, in accordance with example embodiments.
- FIG. 3 illustrates an example interactive node-graph generation process, in accordance with example embodiments.
- FIG. 4 is a diagram illustrating an example graphical user interface adjusting an input and comparing outputs of multiple machine learning models, in accordance with example embodiments.
- FIG. 5 is a diagram illustrating an example graphical user interface for interactively editing outputs of machine learning models, in accordance with example embodiments.
- FIG. 6 is an example architecture for a rapid application prototyping system for artificial intelligence (RAPSAI), in accordance with example embodiments.
- RAPSAI rapid application prototyping system for artificial intelligence
- FIG. 7 is a diagram illustrating an example graphical user interface for an end-to-end node-graph editor with multiple machine learning models, in accordance with example embodiments.
- FIG. 8 is a schematic diagram illustrating an example unified prototyping platform, in accordance with example embodiments.
- FIG. 9 is a diagram illustrating training and inference phases of a machine learning model, in accordance with example embodiments.
- FIG. 10 depicts a distributed computing architecture, in accordance with example embodiments.
- FIG. 11 is a block diagram of a computing device, in accordance with example embodiments.
- FIG. 12 depicts a network of computing clusters arranged as a cloud-based server system, in accordance with example embodiments.
- FIG. 13 is a flowchart of a method, in accordance with example embodiments.
- refining a neural network model to meet product needs can be a “long tail” of the development timeline. In some cases, this process can take months and may require coordination among the machine learning engineers, front-end architects, graphics designers, and/or user experience (UX) artists.
- UX user experience
- PMs project managers
- Designers may have to design UX for a contemplated application.
- Product engineers may have to integrate the model into the application.
- researchers may have to fine-tune the model according to product requirements.
- the various participants in the production pipeline build custom demos, webpages, apps, etc.
- Some teams may use the MEDIAPIPETM (MediaPipe) graph for deployment of the pipeline; however, these teams may not use the MediaPipe graph for model fine-tuning and/or prototyping. This may require the code to be changed and recompiled.
- the user interface in these platforms is for visualization purposes, and is not a tool for verification or experimentation. In some cases, it may be challenging to debug the pipeline.
- RAPSAI Rapid Application Prototyping System for Artificial Intelligence
- RAPSAI is a no-code ML graph building platform, where different participants (e.g., researchers, PMs, UX, and developers) can all build and interact with ML easily.
- the interactive user interface described herein aims to bridge the gap between model development and model deployment, and enable machine learning engineers and researchers, UX researchers, and/or creative practitioners to independently prototype models and reduce the product development time.
- a deep learning model e.g., an Augmented Reality (AR) Portrait Depth Application Programming Interface (API) to estimate the distance of each pixel in an image to a camera capturing the image.
- AR Augmented Reality
- API Application Programming Interface
- engineers may discover that the model outputs may not be optimal for a real-world application scenario, such as real world images with noisy backgrounds.
- researchers may consider adding a body segmentation to the image processing pipeline for in-the-wild images. This may be achieved by having research teams manually generate new models or graphs to incorporate body segmentation, and by providing production team extra cycles to evaluate the necessity, and commit the development.
- additional time and computation would be needed to accomplish the task.
- RAPSAI would enable users to directly drag and drop an image to the platform, edit an editable node-graph in an interactive interface to add the segmentation model prior to running the depth model, and compare the output results side by side with zoom-in tools.
- RAPSAI can serve as a prototyping system for ad hoc testing with new data and live video streams.
- a PM may seek to understand the robustness of an ML model that is outputting images to a webcam.
- ML engineers would likely record video via the webcam, upload the video to an image and/or video processing system, write code to process individual video frames, wait for the code to be run, and then download from the processing system.
- RAPSAI would enable users to directly drag and drop a webcam node as input, and view the output from the webcam in real-time, thereby eliminating the prototyping dev process.
- fine-tuning and/or debugging a model may be achieved by having engineers write code to preprocess test images, upload to the image and/or video processing system, and run the model to process.
- RAPSAI would enable users to interactively change brightness, contrast, and/or blurriness of the input. Accordingly, robustness of a model may be tested on different types of inputs (e.g., dark/blurry/low-contrast photos in the wild) in real-time.
- RAPSAI can also be used as a real-time testing platform for audio processing. For example, users may test the effectiveness of noise cancellation models on various products, and provide real-time feedback over the platform. Existing methods of testing ML models require programming skills (e.g., developing C ++ and Java apps), deploying the models onto end-user applications. However, RAPSAI enables comparison of multiple models in real-time.
- Such a cross-device pipeline can be effectively managed by an editable node-graph via an interactive interface.
- the pipeline may be manipulated in real-time, various combinations of ML models may be tested simultaneously, and results may be compared in real-time to make optimal model selections.
- RAPSAI may be implemented in various forms, such as, for example, an Editor-as-a-Service (e.g., a central service available online), a Library-as-an-Infra (e.g., a codebase for users to fork and host themselves with changes owned by them), a pluggable ML (e.g., a browser extension template that can load pipeline graphs and run the associated processes), an ML Model Builder Tool (e.g., a collaborative laboratory to provide I/O, post processing etc. during model development), and a Designer Tool (e.g., a plugin that can load a pipeline graph and integrate HTML and JS code during application design).
- an Editor-as-a-Service e.g., a central service available online
- a Library-as-an-Infra e.g., a codebase for users to fork and host themselves with changes owned by them
- a pluggable ML e.g., a browser extension template that can load pipeline graphs
- This application relates to a cross-device interactive platform for testing, refining, deploying, and/or designing multiple machine learning models.
- a new code environment is provided for connecting machine learning models together with user selected input options and output formats.
- the input may be selected as an image from a camera, or an image stored in an image library, an audio, video, and so forth.
- the output format may be selected by the user, and the output may be deployed on a variety of different devices and platforms, such as a web browser on laptop, wearables, etc. Users are not required to write computer code.
- the platform also provides an interactive state augmentation and enables testing robustness of machine learning models. Users may also annotate and comment directly in a note graph editor (e.g., during a development phase).
- one user may comment that there are artifacts around the edges of an output image, and may assign the task to correct these artifacts to an engineer.
- One or more users may share the platform collaboratively to identify an issue, and resolve it within the pipeline, update a machine learning model to improve the pipeline, and so forth.
- a user may generate an interactive graph by inputting a camera node as an input option, a segmentation node to represent a machine learning model, and then select a graphics node to add effects.
- the output may be deployed to an end user application, creating an end-to-end pipeline that does not involve coding.
- the platform described herein enables a machine learning model developer to test robustness of a model on various inputs.
- a portrait enhancement model can be tested on by changing lighting conditions, backgrounds, resizing the image, changing brightness, contrast, and so forth.
- the developer may view results within an interface (e.g., the browser).
- end users such as product managers may compare a performance of two models side by side, annotate with a comment, and view an output as it would appear in an end-user application.
- Existing platforms provide some interactive functionality, such platforms do not support interactive generation of a node-graph that directs and controls background machine learning models, including deployment of multiple models in a node graph editor.
- Existing platforms also fail to seamlessly connect input and output tensors, changing input and/or output formats, and so forth. Also, for example, when the input is an image or a video, existing platforms fail to support changes after compilation of the underlying code.
- the platform described herein enables users to make real-time changes to input among images, URLs, videos, and live cameras with one user selection (e.g., a click of a mouse).
- Existing platforms also fail to support connecting to graphical scenes without additional coding.
- the disclosed pipeline has a built-in point cloud visualizer, and a mesh visualizer that can instantly convert three-dimensional (3D) tensor output into an interactive rendering environment, hence delivering applications such as 3D photos with minimal user selections.
- Existing platforms also fail to support comparing different machine learning models within a single environment. Generally, to compare different ML models, researchers have to open different apps and/or work on different devices to compare the visual quality.
- the platform described herein enables side-by-side comparison with built-in support for zoom-in tools, image enhancement tools (cropping, brightness/contrast), and annotation tools, among others.
- FIG. 1 is a diagram illustrating an example graphical user interface (GUI) 100 , in accordance with example embodiments.
- GUI graphical user interface
- an interactive graphical user interface may be provided that includes a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats.
- one portion of GUI 100 may include a library with a list of nodes grouped by different types that users may use to build a pipeline.
- node as used herein, generally refers to a component of a machine learning based pipeline.
- the nodes may include input/output (I/O) nodes 105 (e.g., image from a camera, image from a library, raw image, etc.), various model types 110 (e.g., pre-trained, custom, etc.), effects 115 , output options 120 (e.g., canvas, keypoints, raw, etc.), and miscellaneous items 125 (e.g., performance, etc.).
- I/O input/output
- model types 110 e.g., pre-trained, custom, etc.
- effects 115 e.g., output options 120 (e.g., canvas, keypoints, raw, etc.)
- miscellaneous items 125 e.g., performance, etc.
- the list may be configurable to add or remove additional and/or alternative nodes.
- a graph may be generated in a portion of interactive graphical user interface 100 .
- a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph.
- one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu may be detected.
- the one or more user selections may include dragging and dropping an item from a menu into the portion of interactive graphical user interface 100 .
- a user may drag-and-drop, or tap-to-add, nodes to connect different inputs, deep learning models, graphical shaders, comparison modes, and so forth, as end-to-end pipelines.
- a first node, image 1 140 may be connected by edge 1 to a second node, custom model 1 145 .
- the generating of the graph further involves detecting another user selection of a second machine learning model from the second menu.
- Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second machine learning model, a third edge of the graph connecting the first node to the fourth node, and a fourth edge of the graph connecting the fourth node to the third node.
- first node, image 1 140 may be connected to second edge 2 to a third node, custom model 2 150 .
- Custom model 1 145 may be connected by a third edge 3 to a fourth node, effect 1 155 .
- Custom model 2 150 may be connected by a fourth edge 4 to a fifth node, keypoint 160 .
- fourth node, effect 1 155 may be connected by fifth edge 5 to a sixth node, canvas 165 .
- Such embodiments also involve applying the second machine learning model to the input to generate a second output in the output format.
- the other user selection may include dragging and dropping the second machine learning model from the second menu into the portion of GUI 100 .
- the other user selection may include uploading the second machine learning model from a library of the user.
- first node, image 1 140 may include an option to edit one or more image characteristics.
- first node, image 1 140 may include a portion (e.g., “drop here”) where a user may upload an image.
- Some embodiments may involve receiving, by a second portion of the interactive graphical user interface, the input associated with the input option.
- the image may be displayed in a portion of GUI 100 as image 130 .
- first node, image 1 140 may include an option to edit an offset in the x-direction (“offset x”), an offset in the y-direction (“offset y”), an option to rotate (“rotate”), an option to scale the image (“scale”), and an option to display a preview of the image (“show preview”).
- offset x is set to “20”
- offset y is set to “50”
- rotate is set to “0”
- scale is set to “2.4.”
- Second node, custom model 1 145 , and third node, custom model 2 150 may include a portion (e.g., “drop here”) where a user may upload a machine learning model, and a number of inputs and outputs may be shown.
- Fourth node, effect 1 155 may include a portion (e.g., “drop here”) where a user may upload a type of effect, and may adjust one or more parameters for the effect, such as a first parameter, “param 1 ” shown to be “0.8”, a second parameter, “param 2 ” shown to be “0.5,” and an option to display a preview based on updated parameter values (“show preview”).
- Fifth node, keypoint 160 may include an output format with an option to overlay an edited version over an input image.
- Some embodiments involve receiving, by a drop-down menu linked to the third node, the output in the output format.
- the nodes including output nodes, may be configured to include editable parameters, drop-down menus for additional user selections, and so forth.
- the graph is an editable graph.
- Such embodiments involve enabling a user to update the graph by performing one or more of adding, removing, or replacing a node, an edge, or both.
- Such embodiments also involve updating the output in substantial real-time based on an update to the graph.
- Canvas 165 may include an option to display a preview based on an updated node-graph (“show preview”).
- show preview For example, output image 135 may be displayed, and real-time changes to output image 135 may be visible to a user of GUI 100 as the node-graph is generated (e.g., nodes and/or edges are added or deleted), and/or edited (e.g., edit each node, change a connecting edge between two nodes, and so forth).
- GUI 100 enables users to connect different input options, different machine learning models, different graphical scenes, and/or different output formats within a node-graph editor. Users do not need to code to obtain the deployed application, and can generate the node-graph with user friendly selections.
- the one or more user selections include dragging and dropping an item from a menu into the portion. For example, users can generate the node-graph by dragging-and-dropping some input nodes and machine learning models in an editable interface for GUI 100 .
- the menu of input options may include input from common formats such as a webcam (e.g., select one from a list of webcams), upload a photo (e.g., with a drag-and-drop operation), provided a URL to fetch an online image, and so forth.
- users may use preset images (e.g., copyright-free images for scene, portrait, object, etc.) as example input.
- users may “batch test” from a batch of images (e.g., up to the first 50 images in a scrolling view), or off-the-shelf datasets (e.g., by providing URLs to fetch a set of online images).
- users may use a microphone as a source for an input for specific machine learning models (e.g., denoising, transcription, and so forth).
- users may input text as an input for language models.
- users may upload a video stream or provide an URL of an online video as input. Additional ways to add an input may include access to datasets via APIs.
- the model node e.g., second node 145
- the image node e.g., first node 140
- a default mode may be set where the model node (e.g., second node 145 ) connected to the image node (e.g., first node 140 ) runs once for a currently selected image.
- a user may have an option to run through an image sequence, and the output node (e.g., canvas 165 ) connected to the input node (e.g., first node 140 ) may display a list of results.
- the scrolling down the vertical scrolling list may be synchronized.
- a user may optionally enter a URL pattern to fetch multiple images in a batch. For example, the user may select a starting index “0,” and an ending index “10,” to dynamically load a subset of eleven images from the entered URL pattern.
- images may be adjusted, including cropping, changing a contrast setting, brightness setting, and so forth.
- effects such as shader effects, custom filters, and so forth may be applied.
- the user may have an option to upload an audio file, or a list of audio files. For example, instead of uploading images, the user may opt to enter a URL pattern to upload multiple audios. Also, for example, the user may have an option to run a model based on selected portions of the audio, and/or when the audio is played at a certain rate.
- the menu of output formats may enable a user to select one or more output formats.
- users may visualize various outputs to fine-tune the model (e.g., identify situations where the model works well, and situations where the model needs improvement).
- output nodes may receive an input from the input nodes, model nodes, effect nodes, and so forth, and serve as end points for the node-graph.
- users may visualize results as labels (e.g., MobileNet), visualize results as landmarks (e.g., MoveNet), and so forth.
- results e.g., object recognition
- images e.g., BodyPix, Geodesic PreServing Feature for Dense Human Correspondences (HumanGPS)).
- output nodes may receive an input from the input nodes, model nodes, effect nodes, and so forth, and may connect to comparison nodes. For example, two or more output nodes may be taken as input, and a side-by-side comparison may be produced.
- Machine learning models may include any model that may be configured to work within the pipeline.
- Machine learning models may include object recognition models (e.g., MobileNet v1, MobileNet v2, Coco SSD), object segmentation models (e.g., DeepLab v3), face landmarks detection models (e.g., BlazeFace), hand pose models (e.g., MediaPipe), body pose detection models (e.g., MoveNet, BlazePose, PoseNet), depth detection models (e.g., portrait depth, face depth), portrait segmentation models (e.g., Meet v1), semantics models (e.g., BodyPix, HumanGPS), text models (e.g., Lamda, Universal Sentence Encoder, Text Toxicity), audio models (e.g., Audio Recorder, Upload Audio), tensor flow (TF) models with type TF.js model, TF Lite model, custom TF model, image-to-image models (e.g., superresolution, stylization, depth estimation),
- GUI 100 may be configured to enable ML researchers to drag-and-drop new inputs and/or models, and interactively change characteristics such as brightness, contrast, hue, saturation, and so forth, and test the model, compared with other model outputs side-by-side.
- GUI 100 may be configured to enable UX designers to directly comment on the ML pipeline, tune parameters (e.g., aspect ratio of input images, hyperparameters in ML models), and share positive and negative examples with recorded video and/or a screenshot.
- tune parameters e.g., aspect ratio of input images, hyperparameters in ML models
- GUI 100 may be configured to enable UX researchers to distribute the application via uniform resource locator (URL) and collect user feedback with survey nodes.
- URL uniform resource locator
- GUI 100 may be configured to enable end users to compile a minimized pipeline to deploy via a URL and run on compatible devices (e.g., Android, iOSTM, WINDOWSTM, MACBOOKTM).
- the pipeline may receive input from an input source (e.g., camera) and output to an end-user application (e.g., augmented reality (AR) glasses, virtual reality (VR) glasses, etc.).
- an end-user application e.g., augmented reality (AR) glasses, virtual reality (VR) glasses, etc.
- the pipeline may be configured to support streaming of rendered results directly from a device (e.g., laptop) to another device (e.g., AR glasses) via various communication interfaces (e.g., WiFi, Bluetooth, etc.).
- the node-graph may be generated by dragging a node from the library, and dropping it into the editable portion of GUI 100 .
- the nodes may be connected together to express dependencies and data flow.
- the computing device may take the inputs, apply the machine learning models, and display the output in a panel of GUI 100 in real time.
- Some embodiments involve enabling a user to edit one or more parameters associated with one or more of the input, the machine learning model, or the output. Edits made in the node-graph may be reflected in the output without a need for code compilation, packaging, and/or redeployment. Accordingly, user may interact with GUI 100 in real time based on the node-graph.
- the node-graph may comprise a path from an input to a model inference to an output.
- more complex node-graphs may be generated.
- the same input may be connected to two different models, and each model may be connected to different outputs. Accordingly, different models may be compared on the same input.
- a demo of the model may be shared across devices. For example, selecting a “share” feature may generate a URL that may be provided to another user. The other user may use the URL to view the generated pipeline.
- GUI 100 may be configured to support debugging edge cases and debugging in general. For example, users may interactively tune parameters on any node, images, video, and/or audio may be interactively adjusted. For example, the input image may be made darker, or an offset may be applied, to visualize an effect on model performance.
- GUI 100 may be configured to support batch input and enable a comparison mode where outputs may be provided in a manner that enables users to easily discover problems in model performance. Also, for example, users may view intermediate results to determine specific steps in the node-graph pipeline that may be causing a problem.
- GUI 100 may be configured so that users may annotate text on a node-graph canvas, or edit inputs and/or outputs. For example, users may annotate with circles and arrows on the node-graph canvas, or may annotate specific input and/or output images. In some embodiments, users may annotate free-line drawings on the node-graph canvas, or specific inputs and/or outputs. Users may also access the output in various formats, such as by downloading a “before/after” pair of images, a WebM of a video, a GIF of the video, and so forth.
- FIG. 2 is a diagram illustrating an example graphical user interface 200 for a node-graph editor to compare multiple machine learning models, in accordance with example embodiments.
- GUI 200 may be configured to provide users with an option to interactively compare different versions of machine learning models in a node-graph editor.
- one portion of GUI 200 may include a library with a list of nodes grouped by different types that users may use to build a pipeline.
- the nodes may include input/output (I/O) nodes 205 (e.g., image from a camera, image from a library, raw image, etc.), various model types 210 (e.g., MobileNet, pose detection, etc.), effects 215 (e.g., shader effects, image/video adjustments, etc.), output options 220 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 225 (e.g., nose position extractor, HTML text, template, etc.).
- I/O input/output
- model types 210 e.g., MobileNet, pose detection, etc.
- effects 215 e.g., shader effects, image/video adjustments, etc.
- output options 220 e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.
- the image/video adjustments may include one or more user adjustable controls for translation, rotation, scaling, cropping, perspective transformation, shear mapping, adding noise, adding a user sketch, controlling brightness, adjusting hue, adjusting saturation, and so forth.
- the list may be configurable to add or remove additional and/or alternative nodes.
- a graph may be generated in a portion of interactive graphical user interface 200 .
- a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph.
- a first node, image 250 may be connected by edge 1 to a second node, first MobileNet model 255 , and by a second edge 2 to a third node, second MobileNet model 260 .
- First MobileNet model 255 may be connected by a third edge 3 to a fourth node, first MobileNet result 265 .
- Some embodiments involve detecting another user selection of a second output format from the third menu.
- Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second output format, and a third edge of the graph connecting the second node to the fourth node.
- first MobileNet model 255 may be connected by a fourth edge 4 to a fifth node, second MobileNet result 270 .
- Second MobileNet model 260 may be connected by a fifth edge 5 to a sixth node, third MobileNet result 275 .
- first MobileNet result 265 may include a drop-down menu 280 providing additional output options such as “MobileNet result,” “JSON viewer,” “HTML text,” and so forth.
- Such embodiments also involve applying the machine learning model to the input to generate a second output in the second output format.
- Images 230 may include a scrollable list of images, and a user may scroll down the list to select an image. For each selection made, input 250 may be reconfigured, and the node-graph may be run on the selected image. Results for each of the models may be displayed.
- the first model, MobileNet v2 235 may identify the dog as a “brittany spaniel” with a confidence score of “39.2%,” as a “golden retriever” with a confidence score of “17.9%,” and a “sussex spaniel” with a confidence score of “4.7%.”
- the second model, MobileNet v4 240 may identify the dog as a “brittany spaniel” with a first confidence score, as a “golden retriever” with a second confidence score, and a “sussex spaniel” with a third confidence score.
- the third model, MobileNet v3 245 may identify the dog as a “brittany spaniel” with a confidence score of “72.7%,” as a “golden retriever” with a confidence score of “14.4%,” and a “sussex spaniel” with a confidence score of “3.7%.”
- a side-by-side comparison of the confidence scores indicates that the third model, MobileNet v3 245 , outperforms the other two models.
- the selected image 230 may be displayed as output image 285 .
- One or more properties 290 of image 285 may be provided, such as, for example, a list of URLs 295 for the output images corresponding to input images 230 .
- GUI 200 may be configured to enable users to compare results across different visualizations and dimensions, an ability to check the same result, and compare across different images.
- comparison nodes may receive input from input nodes, model nodes, and so forth, and may be the end points of the node-graph. Users may have an ability to dynamically map inputs to different models and compare respective outputs. Users may have an ability to upload and/or provide URLs to fetch a set of ground truth images for comparison.
- a comparison node may be configured to generate peak signal-to-noise ratio (PSNR) scores, and/or structural similarity (SSIM) index compared to ground truth images.
- PSNR peak signal-to-noise ratio
- SSIM structural similarity index
- a comparison node may be configured to sort the results based on their PSNR scores and/or SSIM index compared to the ground truth images.
- the PSNR scores and/or SSIM index generally indicate a measure of likeness of an output of a model to a ground truth image. A higher measure of likeness is indicative of a better performance for an image to image machine learning model.
- GUI 200 may be configured to enable users to share a demo via a URL.
- the demo links may be configured to be private, or public.
- FIG. 3 illustrates an example interactive node-graph generation process 300 , in accordance with example embodiments.
- the user may select an input option, such as an image.
- a corresponding node, image node 305 may be generated in a node-graph editor portion of an interactive graphical user interface.
- a linkable edge 1 may be displayed that can be configured to connect image node 305 to a next node.
- the user may select a machine learning model, such as MobileNet.
- a corresponding node, MobileNet node 310 may be generated in the node-graph editor portion of the interactive graphical user interface.
- linkable edge 1 may be transformed to a connected edge 2 that connects image node 305 to MobileNet node 310 .
- the displaying of the first edge is responsive to a user indication connecting the first node to the second node.
- user may provide an indication to connect image node 305 to MobileNet node 310 (e.g., by dragging an end of linkable edge 1 to connect to MobileNet node 310 ), and the transforming of linkable edge 1 to connected edge 2 may occur in response to the user indication.
- Some embodiments involve providing the user with a selectable edge (e.g., linkable edge 1 ) that enables the user to confirm a connection of the first node to the second node.
- the displaying of the first edge (e.g., connected edge 2 ) is performed upon receiving user confirmation to connect the first node to the second node.
- image node 305 may be connected to MobileNet node 320 by connected edge 3
- MobileNet node 310 may be connected to an output node, MobileNet result node 315 , by connected edge 4 , and to another output node, MobileNet result node 320 , by connected edge 5 .
- MobileNet node 320 may have a linkable edge 6 extend to output node 325 .
- output node 325 may be configured to provide a user with an ability to select from various options, such as “MobileNet result,” “JSON viewer,” or “HTML text,” among others.
- the user may select from a drop-down menu of options, and may select an output format to be “JSON viewer.” Accordingly, at step V, a node-graph is generated where output node 325 is replaced with JSON viewer node 330 , and linkable edge 6 is replaced with connected edge 7 .
- node-graph generation process 300 may be configured to generate an error message indicating that the two nodes cannot be connected.
- two nodes may not be connected if their respective underlying executable codes cannot be pieced together for compilation and execution.
- node-graph generation process 300 may be configured to automatically generate a node graph based on an input node, or to provide one or more recommendation nodes and/or edges.
- the generating of the graph further involves predicting, by a trained graph predictive model, one or more of a next node or a next edge of the graph.
- Such embodiments involve recommending the one or more of the next node or the next edge to a user.
- the recommendation may be based on a history of user preferences and/or user behavior.
- the user preferences and/or user behavior may involve a plurality of users using the platform.
- the recommendation may be based on a next node that may be compatible with a current node. For example, if a current node is an image, a next node recommendation may include one or more image processing ML models.
- a next node recommendation may include one or more audio processing ML models.
- Such embodiments may also involve training the graph predictive model based on a plurality of graphs deployed on a plurality of computing devices. For example, a type of machine learning model to be used for a given input may be provided as a recommendation.
- the recommendation may be provided by adding a node in the node-graph editor interface.
- the predicting may be performed by a predictive model that is a logical or mathematical type construct operable to predict a future event or outcome based on historical facts or data.
- a predictive model is a categorical model if its predictive outcomes are categories (e.g., a class of inputs, a class of ML models, etc.).
- a predictive model is considered a regression model if its predictive outcomes are numeric values (e.g., runtime predictions, values for various image characteristics to be used in model comparison).
- output from a number of distinct predictive models can be combined to achieve predictions that can be more accurate to predictions provided by individual models.
- Such predictions can be further improved by selecting a specific subset of predictive models for combination from a set of available models. For example, a subset can include predictive models that are particularly well suited for processing certain types of data (e.g., images, or audio, or video). Subsets of predictive models, however, can be selected based on any number of suitable factors.
- a predictive model can be constructed, or trained, using a training dataset in conjunction with a machine learning algorithm.
- Training datasets can include any number of training examples (e.g., tens, hundreds, thousands, or millions of examples) embodying a patterned occurrence. For example, predictions can be tailored to a particular user, and a training dataset may comprise the plurality of node-graphs generated by the user, user interactions with the interface, user selections of nodes, and so forth. Also, for example, training datasets may include user interactions and user behavior for a plurality of users of the described platform.
- Each training example can include a number of elements (for example, observed features) related to a known outcome (e.g., a category or a numeric value).
- the observed feature(s) for each training example can be considered a feature vector. The dimensionality of a feature vector can be equal to, or less than, the number of observed features included therein.
- FIG. 4 is a diagram illustrating an example graphical user interface 400 adjusting an input and comparing outputs of multiple machine learning models, in accordance with example embodiments.
- One portion of GUI 400 may include a library with a list of nodes grouped by different types that users may use to build a pipeline.
- the nodes may include input/output (I/O) nodes 405 (e.g., image from a camera, image from a library, raw image, etc.), various model types 410 (e.g., MobileNet, pose detection, etc.), effects 415 (e.g., shader effects, image/video adjustments, etc.), output options 420 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 425 (e.g., nose position extractor, HTML text, template, etc.).
- the list may be configurable to add or remove additional and/or alternative nodes.
- a graph may be generated in a portion of interactive graphical user interface 400 .
- a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph.
- one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu may be detected.
- the one or more user selections may include dragging and dropping an item from a menu into the portion of interactive graphical user interface 400 .
- a user may drag-and-drop, or tap-to-add, nodes to connect different inputs, deep learning models, graphical shaders, comparison modes, and so forth, as end-to-end pipelines.
- camera node 465 may be connected to image/video adjustment node 475 , which may be connected to first MobileNet node 480 and second MobileNet model 485 .
- First MobileNet node 480 may be connected to first MobileNet result node 490
- second MobileNet node 485 may be connected to second MobileNet result node 495 .
- Users may also select an input and a corresponding input node 470 may be generated in the node-graph editor.
- Images 430 may include a scrollable list of images from the selected input “camera” as indicated by camera node 465 , and a user may scroll down the list to select an image.
- Results for each of the models may be displayed.
- results of MobileNet v1 435 are displayed for an object detection task.
- MobileNet v1 may correspond to first MobileNet node 480
- the results of MobileNet v1 435 may correspond to first MobileNet result node 490 .
- results of MobileNet v2 440 are displayed for the same object detection task.
- MobileNet v2 may correspond to second MobileNet node 485
- the results of MobileNet v2 440 may correspond to second MobileNet result node 495 .
- a machine learning researcher may apply image/video adjustments 445 (e.g., rotation, scaling, offset) to a live image received from a web camera to test the robustness of the two models side-by-side in real time.
- image/video adjustments 445 e.g., rotation, scaling, offset
- the options for image/video adjustments 445 may be displayed when image/video adjustment node 475 is generated in the node-graph editor.
- the results 450 of the image/video adjustments 445 may be displayed.
- the user may be provided with an indication to “adjust image or video, such as scale, offset, rotate, etc.” and an indication that the input is an “image,” or “video,” and the output is an “image.”
- One or more properties 455 may be displayed, such as horizontal bars with adjustable controls for a translation in the x direction, a translation in they direction, a rotation (in degrees), a selectable option to flip the image, and so forth.
- slider control 460 may be slid along the horizontal bar to adjust pixelate.
- Actual values for the image/video adjustments may be provided, enabling a user to perform side-by-side model comparisons and/or adjustments in real time.
- GUI 400 may be configured to be compatible with a “Colaboratory” (Colab) platform, such as Python colab, so that the processing may take place in the Colab and on the cloud server, and after processing, the results may be displayed in GUI 400 .
- Colab Colaboratory
- FIG. 5 is a diagram illustrating an example graphical user interface 500 for interactively editing outputs of machine learning models, in accordance with example embodiments.
- one portion of GUI 500 may include a library with a list of nodes grouped by different types that users may use to build a pipeline.
- the nodes may include input/output (I/O) nodes 505 (e.g., image from a camera, image from a library, raw image, etc.), various model types 510 (e.g., MobileNet, pose detection, etc.), effects 515 (e.g., shader effects, image/video adjustments, etc.), output options 520 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 525 (e.g., nose position extractor, HTML text, template, etc.).
- the list may be configurable to add or remove additional and/or alternative nodes.
- a graph may be generated in a portion of interactive graphical user interface 500 .
- a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph.
- a camera node 535 may be connected to pose detection node 540 , and to shader effects node 550 .
- Pose detection node 540 may be connected to nose position extractor 545 .
- nose position extractor 545 may be connected to shader effects node 550 and to JSON viewer node 560 .
- Image 530 may be a live image from a webcam.
- a first ML model for pose detection may be applied, followed by a second ML model for a nose position extractor.
- Image 530 and an output of the nose position extractor may be displayed in the shader effects tool as image 555 .
- a window 565 may be displayed corresponding to JSON viewer node 560 .
- window 565 may be used to edit data and/or make dynamic adjustments to the pipeline.
- the results 570 of the nose position extractor node 545 may be displayed.
- the user may be provided with an indication to “extract and normalize nose position (x, y) from pose detector output,” and an indication that the input is a “pose detector result,” and the output is “xy.”
- One or more properties 575 may be displayed, such as a selectable option whether or not to flip the image over the x-axis (“Flip X”).
- the node-graph causes the shader pipeline to receive a tensor output from other machine learning models on the graphical processing unit (GPU), without shipping the data back and forth between CPU and the GPU to accelerate the computation.
- Users can visualize results of unconventional model outputs.
- visual effects (VFX)/JS nodes may receive input from input nodes and model nodes, and may be configured to output to comparison or output nodes.
- VFX nodes users may visualize results with shaders (e.g., Depth)
- JS nodes users may visualize results with shaders and 3D scenes in a self-contained JS module (e.g., 3D photo, point clouds, meshes from depth map, and so forth).
- the JS node may not allow a user to change scripts, but may enable some parameters to be edited interactively.
- low-pass filter JS nodes for smoothing landmarks, and/or for generating bounding boxes in videos may also be used in the node-graph.
- users may interactively crop an input image, change an animation speed of a 3D scene in a video input, and/or deploy an output on other form-factor devices (e.g., wearable glasses, Android phones, and other wearable devices).
- FIG. 6 is an example architecture for rapid application prototyping system for artificial intelligence (RAPSAI) 600 , in accordance with example embodiments.
- RAPSAI artificial intelligence
- FIG. 6 Various system components and a high-level architecture of Rapsai 600 are illustrated.
- Rapsai 600 can be configured to provide developers and researchers input 620 in a variety of data formats 605 , a comprehensive ML model library 610 , for example, to drag-and-drop into node-graph editor 615 , and connect different models and 3D graphics scenes.
- segmentation model 625 can receive input 620
- depth model 630 can receive output of segmentation model 625
- 3D photo scene 635 can receive output from depth model 630
- the output from 3D photo scene 635 can be deployed at 640 to various end-user applications.
- the output may be provided to deployed apps 645 , and/or for model comparison of an output with model A 650 and an output with Model B 655 .
- Data 605 may include a live image from a webcam, an image, video or audio from a library, HTML links to image, video, sound, etc., output of a microphone, a voice input by a user, and so forth.
- Deployed apps 645 can include wearable devices (e.g., watches, wearable glasses, headphones, etc.), computing devices (e.g., smartphone, laptop, desktop, mobile computing device, etc.). Rapsai 600 may directly deploy the app on cross-device applications via web applications, Bluetooth, and/or WiFi-based streaming over the Ethernet.
- Rapsai 600 may be configured.
- devices e.g., Iris, TensorBoard, Coral, etc.
- a depth modeling team can compare two depth models with newly uploaded images using a pre-made Rapsai graph.
- Rapsai 600 may be integrated into random cropping tools, tools for creating better data for testing, and so forth.
- Nodes may be configured to be extensible, allowing custom nodes to be created in a self-contained manner (e.g., no code changes are needed in the core stack for Rapsai 600 ).
- the pipeline editor may be injected into other applications as a web component, with well-defined input/output, and event APIs.
- FIG. 7 is a diagram illustrating an example graphical user interface for an end-to-end node-graph editor 700 with multiple machine learning models, in accordance with example embodiments.
- a 3D portrait generator 705 is shown.
- a caption 710 may be displayed, such as “create a 3D portrait with your own photo.”
- the user may have an option to select from a plurality of available images 715 .
- images 715 may be displayed with a caption, “try with examples (select an image).”
- step-by-step instructions 720 may be provided for creating a 3D portrait, such as, for example, “1. Drag/drop/click to upload a portrait; 2. You can crop the image after upload; 3. Processing will begin automatically after upload; 4. Download your 3D photo (in GIF) and use it in your apps.”
- An image editor interface may be provided with a caption 765 to “drag and drop or click to upload your image.” For example, a user may drag and drop images and select the image source to be a camera feed, or input image from another source.
- One or more machine learning models may be applied to the input image.
- an original image 735 may be input to a segmentation model to generate segmented image 740 .
- Segmented image 740 can be input to a depth estimation model to generate a depth image 745 .
- Depth image 745 can be input into a 3D image generator model to generate 3D image 750 .
- end-to-end node-graph editor 700 may display an end-to-end (E2E) latency 725 , provide one or more controls 730 .
- E2E end-to-end
- end-to-end node-graph editor 700 may provide first virtual button 755 to enable users to measure the E2E latency. For example, when a user clicks first virtual button 755 , end-to-end node-graph editor 700 may measure the E2E latency, and display it as E2E latency 725 . Also, for example, second virtual button 760 may be provided to enable the user to download an animation (e.g., in GIF format).
- an animation e.g., in GIF format
- Rapsai 600 may be for AR glasses.
- Rapsai 600 pipeline can process a real-time selfie segmentation model 625 , a depth estimation model 630 , and then a 3D depth mesh scene 635 , and can directly deploy the end results to AR glasses.
- Rapsai 600 may be configured to enable users to utilize existing ML models (e.g., MoveNet, MobileNet, Selfie Segmentation), and/or new models.
- additional models such as TF.js models (e.g., Selfie Segmentation, MoveNet, MobileNet) may be accessed from various ML sources (e.g., from the TF Hub).
- TF.js models and/or Tensorflow Lite Micro (TFLM) models may be added to node-graph editor 615 as ML nodes. Users may have an option to maintain privacy of the models, or to make them publicly available. Users may have an option to share models with other users.
- a built-in cloud visualizer, or mesh visualizer can convert a 3D tensor output to an interactive rendering environment.
- Rapsai 600 may be configured to have the visualizer to change a view of the mesh, display a grid view, provide zooming in and zooming out features, and so forth.
- RAPSAI 600 automatically connects the respective pieces of executable code, and executes them, in the background. For example, if a first node corresponding to a camera input is selected, RAPSAI 600 applies code that enables RAPSAI 600 to connect to a webcam and retrieve a live image. Next, when a second node corresponding to segmentation model 625 is selected and connected to the first node, RAPSAI 600 automatically selects and applies executable code that enables RAPSAI 600 to receive the image from the webcam and input it to segmentation model 625 . RAPSAI 600 also automatically runs segmentation model 625 on input 620 to generate an output of segmentation model 625 (e.g., segmented image 740 of FIG. 7 ).
- segmentation model 625 e.g., segmented image 740 of FIG. 7
- RAPSAI 600 automatically selects and applies executable code that enables RAPSAI 600 to receive the output of segmentation model 625 (e.g., segmented image 740 of FIG. 7 ), and input it to depth model 630 .
- RAPSAI 600 also automatically runs depth model 630 on the output of segmentation model 625 (e.g., segmented image 740 of FIG. 7 ), to generate an output of depth model 630 (e.g., depth image 745 of FIG. 7 ).
- RAPSAI 600 when a fourth node corresponding to 3D photo scene 635 is selected and connected to the third node, RAPSAI 600 automatically selects and applies executable code that enables RAPSAI 600 to receive the output of depth model 630 (e.g., depth image 745 of FIG. 7 ), and input it to 3D photo scene 635 . RAPSAI 600 also automatically runs 3D photo scene 635 on the output of depth model 630 (e.g., depth image 745 of FIG. 7 ), to generate an output of 3D photo scene 635 (e.g., 3D image 750 of FIG. 7 ).
- executable code that enables RAPSAI 600 to receive the output of depth model 630 (e.g., depth image 745 of FIG. 7 ), and input it to 3D photo scene 635 .
- RAPSAI 600 also automatically runs 3D photo scene 635 on the output of depth model 630 (e.g., depth image 745 of FIG. 7 ), to generate an output of 3D photo scene 635 (e.g.
- RAPSAI 600 may be configured to automatically piece together pieces of executable code as a node-graph is generated in node-graph editor 615 . As an edge is formed to connect two nodes, the respective pieces of underlying executable code are stitched together in real-time, compiled and executed.
- the executable code includes code with instructions to receive an input based on a selection from the menu of input options, instructions to provide the received input to one or more machine learning algorithms based on a selection from the menu of ML models, instructions to run the selected one or more ML models, instructions to generate an output based on a selection from the menu of output formats, and instructions to provide the generated output to an end-user application, or to other ML models, and so forth.
- RAPSAI 600 can be built on a multi-layered web-based system. Multiple web-based applications may be supported as plugins including plugins for graphics editors (e.g., Colab, FigmaTM), custom prototyping apps, standalone apps, and so forth, with a single pipeline. Also, for example, RAPSAI 600 can connect pre-post processing graphics libraries with machine learning models within the computation engine, and deploy to mobile devices (including AR glasses), browsers, node.js, and IoT devices.
- graphics editors e.g., Colab, FigmaTM
- custom prototyping apps e.g., standalone apps, and so forth
- RAPSAI 600 can connect pre-post processing graphics libraries with machine learning models within the computation engine, and deploy to mobile devices (including AR glasses), browsers, node.js, and IoT devices.
- FIG. 8 is a schematic diagram illustrating an example unified prototyping platform 800 , in accordance with example embodiments.
- the RAPSAI system can provide a unifying AI prototyping experience.
- different teams may have different development processes, timelines, and/or deployment targets.
- some teams may be targeting AR glasses, some teams may be targeting mobile phones, other teams may target website integration, and so forth, and each team may have different product life cycles.
- RAPSAI system can be configured to provide a common platform for all the different teams.
- Prototyping platform 800 may be configured to have a multi-layered, flexible and extensible design.
- Prototyping platform 800 may be configured to run with various underlying ML engines and differing runtimes, and may be used as infra to build applications on top.
- ML researchers or developers may use prototyping platform 800 for comparing and performing data augmentation in real time.
- the blurriness may be changed in real-time, or it may be cropped or resized, a brightness setting may be adjusted, and so forth, to test whether the machine learning models under test work for a portrait in bright sunshine.
- output images may be compared side-by-side to determine model performance. For example, a user may hover over an image (from a scrollable list of input images) and compare the respective outputs from a first model and a second model, or a first pipeline and a second pipeline, directly within the node-graph editor interface. As previously described with reference to FIG.
- the pipeline may be tested on images from a live video stream.
- Existing techniques would require programmers to manually write executable code (e.g., Python code) to input a video and then process it using machine learning models.
- executable code e.g., Python code
- prototyping platform 800 enables a user to drag and drop or enable the web camera and select the camera, and view results from the ML models in real-time.
- users may connect or disconnect nodes, create new pipelines, and test different models and/or multiple models with image/video adjustments, and so forth.
- a plurality of user interface (UI) applications 802 may be connected to the RAPSAI system, such as custom prototyping app 804 , Colab embed app 806 , Figma embed app 808 , RAPSAI platform 810 , pipeline editor 812 (e.g., node-graph editor), and standalone app 814 .
- UI components 816 may be provided, such as data source management 818 , pipeline loader 820 , and visualization 828 .
- inputs 824 from data source management 818 may be provided to ML pipeline runtime 832 .
- Pipeline loader 820 may generate serialized pipeline graph 822 which is configured to manage ML pipeline runtime 832 .
- Outputs 826 of ML pipeline runtime 832 are provided to visualization 826 for display.
- Computation engine layer 834 may include components that enable pipeline runtime 830 , such as, for example, extensions 836 (e.g., to connect to various inputs 824 , ML models, etc.). Extensions 836 may be connected to pre- or post-processing library 838 .
- the interactive graphical user interface may be hosted on a platform, and shared across a plurality of computing devices. One or more of the generating of the graph, the applying of the machine learning model, or the providing of the output may be synchronized across the plurality of computing devices.
- additional models that are utilized may include MediaPipe 840 , ML engine 842 , including TJFS 844 , TFLite 846 , and TFMicro 848 .
- Another layer may comprise device platforms 852 that may include one or more end-user application plugins, such as for mobile devices, browser applications, node.js, an internet of things (IoT) device, and so forth.
- end-user application plugins such as for mobile devices, browser applications, node.js, an internet of things (IoT) device, and so forth.
- FIG. 9 shows diagram 900 illustrating a training phase 902 and an inference phase 904 of trained machine learning model(s) 932 , in accordance with example embodiments.
- Some machine learning techniques involve training one or more machine learning algorithms on an input set of training data to recognize patterns in the training data and provide output inferences and/or predictions about (patterns in the) training data.
- the resulting trained machine learning algorithm can be termed as a trained machine learning model.
- FIG. 9 shows training phase 902 where one or more machine learning algorithms 920 are being trained on training data 910 to become trained machine learning model(s) 932 .
- trained machine learning model(s) 932 can receive input data 930 and one or more inference/prediction requests 940 (perhaps as part of input data 930 ) and responsively provide as an output one or more inferences and/or prediction(s) 950 .
- trained machine learning model(s) 932 can include one or more models of one or more machine learning algorithms 920 .
- Machine learning algorithm(s) 920 may include, but are not limited to: an artificial neural network (e.g., a herein-described convolutional neural networks, a recurrent neural network, a Bayesian network, a hidden Markov model, a Markov decision process, a logistic regression function, a support vector machine, a suitable statistical machine learning algorithm, and/or a heuristic machine learning system).
- Machine learning algorithm(s) 920 may be supervised or unsupervised, and may implement any suitable combination of online and offline learning.
- machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can be accelerated using on-device coprocessors, such as graphic processing units (GPUs), tensor processing units (TPUs), digital signal processors (DSPs), and/or application specific integrated circuits (ASICs).
- on-device coprocessors can be used to speed up machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 .
- trained machine learning model(s) 932 can be trained, can reside on, and be executed, to provide inferences on a particular computing device, and/or otherwise can make inferences for the particular computing device.
- machine learning algorithm(s) 920 can be trained by providing at least training data 910 as training input using unsupervised, supervised, semi-supervised, and/or reinforcement learning techniques.
- Unsupervised learning involves providing a portion (or all) of training data 910 to machine learning algorithm(s) 920 and machine learning algorithm(s) 920 determining one or more output inferences based on the provided portion (or all) of training data 910 .
- Supervised learning involves providing a portion of training data 910 to machine learning algorithm(s) 920 , with machine learning algorithm(s) 920 determining one or more output inferences based on the provided portion of training data 910 , and the output inference(s) are either accepted or corrected based on correct results associated with training data 910 .
- supervised learning of machine learning algorithm(s) 920 can be governed by a set of rules and/or a set of labels for the training input, and the set of rules and/or set of labels may be used to correct inferences of machine learning algorithm(s) 920 .
- Semi-supervised learning involves having correct results for part, but not all, of training data 910 .
- semi-supervised learning is used for a portion of training data 910 having correct results
- unsupervised learning is used for a portion of training data 910 not having correct results.
- Reinforcement learning involves machine learning algorithm(s) 920 receiving a reward signal regarding a prior inference, where the reward signal can be a numerical value.
- machine learning algorithm(s) 920 can output an inference and receive a reward signal in response, where machine learning algorithm(s) 920 are configured to try to maximize the numerical value of the reward signal.
- reinforcement learning also utilizes a value function that provides a numerical value representing an expected total of the numerical values provided by the reward signal over time.
- machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can be trained using other machine learning techniques, including but not limited to, incremental learning and curriculum learning.
- machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can use transfer learning techniques.
- transfer learning techniques can involve trained machine learning model(s) 932 being pre-trained on one set of data and additionally trained using training data 910 .
- machine learning algorithm(s) 920 can be pre-trained on data from one or more computing devices and a resulting trained machine learning model provided to computing device CD 1 , where CD 1 is intended to execute the trained machine learning model during inference phase 904 . Then, during training phase 902 , the pre-trained machine learning model can be additionally trained using training data 910 , where training data 910 can be derived from kernel and non-kernel data of computing device CD 1 .
- This further training of the machine learning algorithm(s) 920 and/or the pre-trained machine learning model using training data 910 of CD 1 's data can be performed using either supervised or unsupervised learning.
- training phase 902 can be completed.
- the trained resulting machine learning model can be utilized as at least one of trained machine learning model(s) 932 .
- trained machine learning model(s) 932 can be provided to a computing device, if not already on the computing device.
- Inference phase 904 can begin after trained machine learning model(s) 932 are provided to computing device CD 1 .
- trained machine learning model(s) 932 can receive input data 930 and generate and output one or more corresponding inferences and/or prediction(s) 950 about input data 930 .
- input data 930 can be used as an input to trained machine learning model(s) 932 for providing corresponding inference(s) and/or prediction(s) 950 to kernel components and non-kernel components.
- trained machine learning model(s) 932 can generate inference(s) and/or prediction(s) 950 in response to one or more inference/prediction requests 940 .
- trained machine learning model(s) 932 can be executed by a portion of other software.
- trained machine learning model(s) 932 can be executed by an inference or prediction daemon to be readily available to provide inferences and/or predictions upon request.
- Input data 930 can include data from computing device CD 1 executing trained machine learning model(s) 932 and/or input data from one or more computing devices other than CD 1 .
- Input data 930 can include training data described herein, such as user interaction data with the described interface, including user data from a plurality of users, devices, platforms, inputs, and so forth. Other types of input data are possible as well.
- Inference(s) and/or prediction(s) 950 can include task outputs, numerical values, and/or other output data produced by trained machine learning model(s) 932 operating on input data 930 (and training data 910 ).
- trained machine learning model(s) 932 can use output inference(s) and/or prediction(s) 950 as input feedback 960 .
- Trained machine learning model(s) 932 can also rely on past inferences as inputs for generating new inferences.
- the trained version of the neural network can be an example of trained machine learning model(s) 932 .
- an example of the one or more inference/prediction request(s) 940 can be a request to predict a node, edge, parameter, input, output format, and so forth and a corresponding example of inferences and/or prediction(s) 950 can be a predicted node, edge, parameter, input, output format, and so forth.
- one computing device CD_SOLO can include the trained version of the neural network, perhaps after training. Then, computing device CD_SOLO can receive a request to predict a node, edge, parameter, input, output format, and so forth, and use the trained version of the neural network to predict the node, edge, parameter, input, output format, and so forth.
- two or more computing devices CD_CLI and CD_SRV can be used to provide output; e.g., a first computing device CD_CLI can generate and send requests to predict anode, edge, parameter, input, output format, and so forth to a second computing device CD_SRV. Then, CD_SRV can use the trained version of the neural network, to predict the node, edge, parameter, input, output format, and so forth, and respond to the requests from CD_CLI. Then, upon reception of responses to the requests, CD_CLI can provide the requested output (e.g., using a user interface and/or a display, a printed copy, an electronic communication, etc.).
- FIG. 10 depicts a distributed computing architecture 1000 , in accordance with example embodiments.
- Distributed computing architecture 1000 includes server devices 1008 , 1010 that are configured to communicate, via network 1006 , with programmable devices 1004 a , 1004 b , 1004 c , 1004 d , 1004 e .
- Network 1006 may correspond to a local area network (LAN), a wide area network (WAN), a WLAN, a WWAN, a corporate intranet, the public Internet, or any other type of network configured to provide a communications path between networked computing devices.
- Network 1006 may also correspond to a combination of one or more LANs, WANs, corporate intranets, and/or the public Internet.
- FIG. 10 only shows five programmable devices, distributed application architectures may serve tens, hundreds, or thousands of programmable devices.
- programmable devices 1004 a , 1004 b , 1004 c , 1004 d , 1004 e may be any sort of computing device, such as a mobile computing device, desktop computer, wearable computing device, head-mountable device (HMD), network terminal, a mobile computing device, and so on.
- HMD head-mountable device
- programmable devices can be directly connected to network 1006 .
- programmable devices can be indirectly connected to network 1006 via an associated computing device, such as programmable device 1004 c .
- programmable device 1004 c can act as an associated computing device to pass electronic communications between programmable device 1004 d and network 1006 .
- a computing device can be part of and/or inside a vehicle, such as a car, a truck, a bus, a boat or ship, an airplane, etc.
- a programmable device can be both directly and indirectly connected to network 1006 .
- Server devices 1008 , 1010 can be configured to perform one or more services, as requested by programmable devices 1004 a - 1004 e .
- server device 1008 and/or 1010 can provide content to programmable devices 1004 a - 1004 e .
- the content can include, but is not limited to, web pages, hypertext, scripts, binary data such as compiled software, images, audio, and/or video.
- the content can include compressed and/or uncompressed content.
- the content can be encrypted and/or unencrypted. Other types of content are possible as well.
- server device 1008 and/or 1010 can provide programmable devices 1004 a - 1004 e with access to software for database, search, computation, graphical, audio, video, World Wide Web/Internet utilization, and/or other functions.
- server devices Many other examples are possible as well.
- FIG. 11 is a block diagram of an example computing device 1100 , in accordance with example embodiments.
- computing device 1100 shown in FIG. 11 can be configured to perform at least one function of and/or related to neural network 100 , and/or method 1100 .
- Computing device 1100 may include a user interface module 1101 , a network communications module 1102 , one or more processors 1103 , data storage 1104 , one or more camera(s) 1118 , one or more sensors 1120 , and power system 1122 , all of which may be linked together via a system bus, network, or other connection mechanism 1105 .
- User interface module 1101 can be operable to send data to and/or receive data from external user input/output devices.
- user interface module 1101 can be configured to send and/or receive data to and/or from user input devices such as a touch screen, a computer mouse, a keyboard, a keypad, a touch pad, a trackball, a joystick, a voice recognition module, and/or other similar devices.
- User interface module 1101 can also be configured to provide output to user display devices, such as one or more cathode ray tubes (CRT), liquid crystal displays, light emitting diodes (LEDs), displays using digital light processing (DLP) technology, printers, light bulbs, and/or other similar devices, either now known or later developed.
- CTR cathode ray tubes
- LEDs light emitting diodes
- DLP digital light processing
- User interface module 1101 can also be configured to generate audible outputs, with devices such as a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices. User interface module 1101 can further be configured with one or more haptic devices that can generate haptic outputs, such as vibrations and/or other outputs detectable by touch and/or physical contact with computing device 1100 . In some examples, user interface module 1101 can be used to provide a graphical user interface (GUI) for utilizing computing device 1100 , such as, for example, a graphical user interface of a mobile phone device.
- GUI graphical user interface
- Network communications module 1102 can include one or more devices that provide one or more wireless interface(s) 1107 and/or one or more wireline interface(s) 1108 that are configurable to communicate via a network.
- Wireless interface(s) 1107 can include one or more wireless transmitters, receivers, and/or transceivers, such as a BluetoothTM transceiver, a Zigbee® transceiver, a Wi-FiTM transceiver, a WiMAXTM transceiver, an LTETM transceiver, and/or other type of wireless transceiver configurable to communicate via a wireless network.
- Wireline interface(s) 1108 can include one or more wireline transmitters, receivers, and/or transceivers, such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network.
- wireline transmitters such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network.
- USB Universal Serial Bus
- network communications module 1102 can be configured to provide reliable, secured, and/or authenticated communications.
- information for facilitating reliable communications e.g., guaranteed message delivery
- a message header and/or footer e.g., packet/message sequencing information, encapsulation headers and/or footers, size/time information, and transmission verification information such as cyclic redundancy check (CRC) and/or parity check values.
- CRC cyclic redundancy check
- Communications can be made secure (e.g., be encoded or encrypted) and/or decrypted/decoded using one or more cryptographic protocols and/or algorithms, such as, but not limited to, Data Encryption Standard (DES), Advanced Encryption Standard (AES), a Rivest-Shamir-Adelman (RSA) algorithm, a Diffie-Hellman algorithm, a secure sockets protocol such as Secure Sockets Layer (SSL) or Transport Layer Security (TLS), and/or Digital Signature Algorithm (DSA).
- DES Data Encryption Standard
- AES Advanced Encryption Standard
- RSA Rivest-Shamir-Adelman
- Diffie-Hellman algorithm a secure sockets protocol
- SSL Secure Sockets Layer
- TLS Transport Layer Security
- DSA Digital Signature Algorithm
- Other cryptographic protocols and/or algorithms can be used as well or in addition to those listed herein to secure (and then decrypt/decode) communications.
- One or more processors 1103 can include one or more general purpose processors, and/or one or more special purpose processors (e.g., digital signal processors, tensor processing units (TPUs), graphics processing units (GPUs), application specific integrated circuits, etc.).
- processors 1103 can be configured to execute computer-readable instructions 1106 that are contained in data storage 1104 and/or other instructions as described herein.
- Data storage 1104 can include one or more non-transitory computer-readable storage media that can be read and/or accessed by at least one of one or more processors 1103 .
- the one or more computer-readable storage media can include volatile and/or non-volatile storage components, such as optical, magnetic, organic or other memory or disc storage, which can be integrated in whole or in part with at least one of one or more processors 1103 .
- data storage 1104 can be implemented using a single physical device (e.g., one optical, magnetic, organic or other memory or disc storage unit), while in other examples, data storage 1104 can be implemented using two or more physical devices.
- Data storage 1104 can include computer-readable instructions 1106 and perhaps additional data.
- data storage 1104 can include storage required to perform at least part of the herein-described methods, scenarios, and techniques and/or at least part of the functionality of the herein-described devices and networks.
- data storage 1104 can include storage for a trained neural network model 1112 (e.g., a model of trained neural networks such as neural network 100 ).
- computer-readable instructions 1106 can include instructions that, when executed by one or more processors 1103 , enable computing device 1100 to provide for some or all of the functionality of trained neural network model 1112 .
- computing device 1100 can include one or more camera(s) 1118 .
- Camera(s) 1118 can include one or more image capture devices, such as still and/or video cameras, equipped to capture light and record the captured light in one or more images; that is, camera(s) 1118 can generate image(s) of captured light.
- the one or more images can be one or more still images and/or one or more images utilized in video imagery.
- Camera(s) 1118 can capture light and/or electromagnetic radiation emitted as visible light, infrared radiation, ultraviolet light, and/or as one or more other frequencies of light.
- computing device 1100 can include one or more sensors 1120 .
- Sensors 1120 can be configured to measure conditions within computing device 1100 and/or conditions in an environment of computing device 1100 and provide data about these conditions.
- sensors 1120 can include one or more of: (i) sensors for obtaining data about computing device 1100 , such as, but not limited to, a thermometer for measuring a temperature of computing device 1100 , a battery sensor for measuring power of one or more batteries of power system 1122 , and/or other sensors measuring conditions of computing device 1100 ; (ii) an identification sensor to identify other objects and/or devices, such as, but not limited to, a Radio Frequency Identification (RFID) reader, proximity sensor, one-dimensional barcode reader, two-dimensional barcode (e.g., Quick Response (QR) code) reader, and a laser tracker, where the identification sensors can be configured to read identifiers, such as RFID tags, barcodes, QR codes, and/or other devices and/or object configured to be read and provide at least
- Power system 1122 can include one or more batteries 1124 and/or one or more external power interfaces 1126 for providing electrical power to computing device 1100 .
- Each battery of the one or more batteries 1124 can, when electrically coupled to the computing device 1100 , act as a source of stored electrical power for computing device 1100 .
- One or more batteries 1124 of power system 1122 can be configured to be portable. Some or all of one or more batteries 1124 can be readily removable from computing device 1100 . In other examples, some or all of one or more batteries 1124 can be internal to computing device 1100 , and so may not be readily removable from computing device 1100 . Some or all of one or more batteries 1124 can be rechargeable.
- a rechargeable battery can be recharged via a wired connection between the battery and another power supply, such as by one or more power supplies that are external to computing device 1100 and connected to computing device 1100 via the one or more external power interfaces.
- one or more batteries 1124 can be non-rechargeable batteries.
- One or more external power interfaces 1126 of power system 1122 can include one or more wired-power interfaces, such as a USB cable and/or a power cord, that enable wired electrical power connections to one or more power supplies that are external to computing device 1100 .
- One or more external power interfaces 1126 can include one or more wireless power interfaces, such as a Qi wireless charger, that enable wireless electrical power connections, such as via a Qi wireless charger, to one or more external power supplies. Once an electrical power connection is established to an external power source using one or more external power interfaces 1126 , computing device 1100 can draw electrical power from the external power source the established electrical power connection.
- power system 1122 can include related sensors, such as battery sensors associated with the one or more batteries or other types of electrical power sensors.
- FIG. 12 depicts a cloud-based server system in accordance with an example embodiment.
- functionality of a neural network, and/or a computing device can be distributed among computing clusters 1209 a , 1209 b , 1209 c .
- Computing cluster 1209 a can include one or more computing devices 1200 a , cluster storage arrays 1210 a , and cluster routers 1211 a connected by a local cluster network 1212 a .
- computing cluster 1209 b can include one or more computing devices 1200 b , cluster storage arrays 1210 b , and cluster routers 1211 b connected by a local cluster network 1212 b .
- computing cluster 1209 c can include one or more computing devices 1200 c , cluster storage arrays 1210 c , and cluster routers 1211 c connected by a local cluster network 1212 c.
- computing clusters 1209 a , 1209 b , 1209 c can be a single computing device residing in a single computing center. In other embodiments, computing clusters 1209 a , 1209 b , 1209 c can include multiple computing devices in a single computing center, or even multiple computing devices located in multiple computing centers located in diverse geographic locations. For example, FIG. 12 depicts each of computing clusters 1209 a , 1209 b , 1209 c residing in different physical locations.
- data and services at computing clusters 1209 a , 1209 b , 1209 c can be encoded as computer readable information stored in non-transitory, tangible computer readable media (or computer readable storage media) and accessible by other computing devices.
- computing clusters 1209 a , 1209 b , 1209 c can be stored on a single disk drive or other tangible storage media, or can be implemented on multiple disk drives or other tangible storage media located at one or more diverse geographic locations.
- each of computing clusters 1209 a , 1209 b , and 1209 c can have an equal number of computing devices, an equal number of cluster storage arrays, and an equal number of cluster routers. In other embodiments, however, each computing cluster can have different numbers of computing devices, different numbers of cluster storage arrays, and different numbers of cluster routers. The number of computing devices, cluster storage arrays, and cluster routers in each computing cluster can depend on the computing task or tasks assigned to each computing cluster.
- computing devices 1200 a can be configured to perform various computing tasks of a conditioned, axial self-attention based neural network, and/or a computing device.
- the various functionalities of a neural network, and/or a computing device can be distributed among one or more of computing devices 1200 a , 1200 b , 1200 c .
- Computing devices 1200 b and 1200 c in respective computing clusters 1209 b and 1209 c can be configured similarly to computing devices 1200 a in computing cluster 1209 a .
- computing devices 1200 a , 1200 b , and 1200 c can be configured to perform different functions.
- computing tasks and stored data associated with a neural network, and/or a computing device can be distributed across computing devices 1200 a , 1200 b , and 1200 c based at least in part on the processing requirements of a neural network, and/or a computing device, the processing capabilities of computing devices 1200 a , 1200 b , 1200 c , the latency of the network links between the computing devices in each computing cluster and between the computing clusters themselves, and/or other factors that can contribute to the cost, speed, fault-tolerance, resiliency, efficiency, and/or other design goals of the overall system architecture.
- Cluster storage arrays 1210 a , 1210 b , 1210 c of computing clusters 1209 a , 1209 b , 1209 c can be data storage arrays that include disk array controllers configured to manage read and write access to groups of hard disk drives.
- the disk array controllers alone or in conjunction with their respective computing devices, can also be configured to manage backup or redundant copies of the data stored in the cluster storage arrays to protect against disk drive or other cluster storage array failures and/or network failures that prevent one or more computing devices from accessing one or more cluster storage arrays.
- cluster storage arrays 1210 a , 1210 b , 1210 c can be distributed across cluster storage arrays 1210 a , 1210 b , 1210 c .
- some cluster storage arrays can be configured to store one portion of the data of a first layer of a neural network, and/or a computing device, while other cluster storage arrays can store other portion(s) of data of second layer of a neural network, and/or a computing device.
- some cluster storage arrays can be configured to store the data of an encoder of a neural network, while other cluster storage arrays can store the data of a decoder of a neural network. Additionally, some cluster storage arrays can be configured to store backup versions of data stored in other cluster storage arrays.
- Cluster routers 1211 a , 1211 b , 1211 c in computing clusters 1209 a , 1209 b , 1209 c can include networking equipment configured to provide internal and external communications for the computing clusters.
- cluster routers 1211 a in computing cluster 1209 a can include one or more internet switching and routing devices configured to provide (i) local area network communications between computing devices 1200 a and cluster storage arrays 1210 a via local cluster network 1212 a , and (ii) wide area network communications between computing cluster 1209 a and computing clusters 1209 b and 1209 c via wide area network link 1213 a to network 1006 .
- Cluster routers 1211 b and 1211 c can include network equipment similar to cluster routers 1211 a , and cluster routers 1211 b and 1211 c can perform similar networking functions for computing clusters 1209 b and 1209 b that cluster routers 1211 a perform for computing cluster 1209 a.
- the configuration of cluster routers 1211 a , 1211 b , 1211 c can be based at least in part on the data communication requirements of the computing devices and cluster storage arrays, the data communications capabilities of the network equipment in cluster routers 1211 a , 1211 b , 1211 c , the latency and throughput of local cluster networks 1212 a , 1212 b , 1212 c , the latency, throughput, and cost of wide area network links 1213 a , 1213 b , 1213 c , and/or other factors that can contribute to the cost, speed, fault-tolerance, resiliency, efficiency and/or other design criteria of the moderation system architecture.
- FIG. 13 is a flowchart of a method 1300 , in accordance with example embodiments.
- Method 1300 can be executed by a computing device, such as computing device 1100 .
- Method 1300 can begin at block 1310 , where the method involves providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats.
- the method involves generating a graph in a portion of the interactive graphical user interface.
- the generating of the graph involves detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node.
- the method involves applying the machine learning model to an input associated with the input option to generate an output in the output format.
- the method involves providing, by the interactive graphical user interface, the output in the output format.
- Some embodiments involve receiving, by a second portion of the interactive graphical user interface, the input associated with the input option.
- Some embodiments involve receiving, by a drop-down menu linked to the third node, the output in the output format.
- Some embodiments involve providing, by the interactive graphical user interface, the input.
- the one or more user selections include dragging and dropping an item from a menu into the portion.
- Some embodiments involve enabling a user to edit one or more parameters associated with one or more of the input, the machine learning model, or the output.
- Some embodiments involve detecting another user selection of a second output format from the third menu. Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second output format, and a third edge of the graph connecting the second node to the fourth node. Such embodiments also involve applying the machine learning model to the input to generate a second output in the second output format.
- the generating of the graph further involves detecting another user selection of a second machine learning model from the second menu.
- Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second machine learning model, a third edge of the graph connecting the first node to the fourth node, and a fourth edge of the graph connecting the fourth node to the third node.
- Such embodiments also involve applying the second machine learning model to the input to generate a second output in the output format.
- the other user selection includes dragging and dropping the second machine learning model from the second menu into the portion.
- the other user selection includes uploading the second machine learning model from a library of the user.
- the displaying of the first edge is responsive to a user indication connecting the first node to the second node.
- Some embodiments involve providing the user with a selectable edge that enables the user to confirm a connection of the first node to the second node.
- the displaying of the first edge is performed upon receiving user confirmation to connect the first node to the second node.
- the generating of the graph further involves predicting, by a trained graph predictive model, one or more of a next node or a next edge of the graph.
- Such embodiments involve recommending the one or more of the next node or the next edge to a user.
- Such embodiments may also involve training the graph predictive model based on a plurality of graphs deployed on a plurality of computing devices.
- the graph is an editable graph.
- Such embodiments involve enabling a user to update the graph by performing one or more of adding, removing, or replacing a node, an edge, or both.
- Such embodiments also involve updating the output in substantial real-time based on an update to the graph.
- the providing of the output involves providing the output to an end-user application.
- the input option includes one or more of an image, a video, an audio, or text.
- the interactive graphical user interface may be hosted on a platform, and shared across a plurality of computing devices.
- One or more of the generating of the graph, the applying of the machine learning model, or the providing of the output may be synchronized across the plurality of computing devices.
- each block and/or communication may represent a processing of information and/or a transmission of information in accordance with example embodiments.
- Alternative embodiments are included within the scope of these example embodiments.
- functions described as blocks, transmissions, communications, requests, responses, and/or messages may be executed out of order from that shown or discussed, including substantially concurrent or in reverse order, depending on the functionality involved.
- more or fewer blocks and/or functions may be used with any of the ladder diagrams, scenarios, and flow charts discussed herein, and these ladder diagrams, scenarios, and flow charts may be combined with one another, in part or in whole.
- a block that represents a processing of information may correspond to circuitry that can be configured to perform the specific logical functions of a herein-described method or technique.
- a block that represents a processing of information may correspond to a module, a segment, or a portion of program code (including related data).
- the program code may include one or more instructions executable by a processor for implementing specific logical functions or actions in the method or technique.
- the program code and/or related data may be stored on any type of computer readable medium such as a storage device including a disk or hard drive or other storage medium.
- the computer readable medium may also include non-transitory computer readable media such as non-transitory computer-readable media that stores data for short periods of time like register memory, processor cache, and random access memory (RAM).
- the computer readable media may also include non-transitory computer readable media that stores program code and/or data for longer periods of time, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example.
- the computer readable media may also be any other volatile or non-volatile storage systems.
- a computer readable medium may be considered a computer readable storage medium, for example, or a tangible storage device.
- a block that represents one or more information transmissions may correspond to information transmissions between software and/or hardware modules in the same physical device. However, other information transmissions may be between software modules and/or hardware modules in different physical devices.
Abstract
A method includes providing an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats. The method also includes generating a graph in a portion of the interactive graphical user interface by detecting one or more user selections of an input option, a machine learning model, and an output format, displaying nodes corresponding to the input option, the machine learning model, the output format, and displaying edges connecting the first node to the second node, and the second node to the third node. The method additionally includes applying the machine learning model to an input associated with the input option to generate an output in the output format. The method further includes providing, by the interactive graphical user interface, the output in the output format.
Description
- Machine learning models are used for end-user applications. Various teams, including machine learning engineers, front-end architects, and user experience artists, may be involved in choosing, training, implementing, and deploying such a machine learning model.
- A Rapid Application Prototyping System for Artificial Intelligence (Rapsai or RAPSAI) is described. RAPSAI is a no-code machine learning (ML) graph building platform, where different participants (e.g., researchers, project managers (PMs), user experience (UX) designers, and developers) may build and interact with the ML model.
- In one aspect, a computer-implemented method is provided. The method includes providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats. The method also includes generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node. The method additionally includes applying the machine learning model to an input associated with the input option to generate an output in the output format. The method further includes providing, by the interactive graphical user interface, the output in the output format.
- In another aspect, a computing device is provided. The computing device includes one or more processors and data storage. The data storage has stored thereon computer-executable instructions that, when executed by one or more processors, cause the computing device to carry out functions. The functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; applying the machine learning model to an input associated with the input option to generate an output in the output format; and providing, by the interactive graphical user interface, the output in the output format.
- In another aspect, a computer program is provided. The computer program includes instructions that, when executed by a computer, cause the computer to carry out functions. The functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; applying the machine learning model to an input associated with the input option to generate an output in the output format; and providing, by the interactive graphical user interface, the output in the output format.
- In another aspect, an article of manufacture is provided. The article of manufacture includes one or more computer readable media having computer-readable instructions stored thereon that, when executed by one or more processors of a computing device, cause the computing device to carry out functions. The functions include: providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; applying the machine learning model to an input associated with the input option to generate an output in the output format; and providing, by the interactive graphical user interface, the output in the output format.
- In another aspect, a system is provided. The system includes means for providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats; means for generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises: detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node; means for applying the machine learning model to an input associated with the input option to generate an output in the output format; and means for providing, by the interactive graphical user interface, the output in the output format.
- The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects, embodiments, and features described above, further aspects, embodiments, and features will become apparent by reference to the figures and the following detailed description and the accompanying drawings.
-
FIG. 1 is a diagram illustrating an example graphical user interface, in accordance with example embodiments. -
FIG. 2 is a diagram illustrating an example graphical user interface for a node-graph editor to compare multiple machine learning models, in accordance with example embodiments. -
FIG. 3 illustrates an example interactive node-graph generation process, in accordance with example embodiments. -
FIG. 4 is a diagram illustrating an example graphical user interface adjusting an input and comparing outputs of multiple machine learning models, in accordance with example embodiments. -
FIG. 5 is a diagram illustrating an example graphical user interface for interactively editing outputs of machine learning models, in accordance with example embodiments. -
FIG. 6 is an example architecture for a rapid application prototyping system for artificial intelligence (RAPSAI), in accordance with example embodiments. -
FIG. 7 is a diagram illustrating an example graphical user interface for an end-to-end node-graph editor with multiple machine learning models, in accordance with example embodiments. -
FIG. 8 is a schematic diagram illustrating an example unified prototyping platform, in accordance with example embodiments. -
FIG. 9 is a diagram illustrating training and inference phases of a machine learning model, in accordance with example embodiments. -
FIG. 10 depicts a distributed computing architecture, in accordance with example embodiments. -
FIG. 11 is a block diagram of a computing device, in accordance with example embodiments. -
FIG. 12 depicts a network of computing clusters arranged as a cloud-based server system, in accordance with example embodiments. -
FIG. 13 is a flowchart of a method, in accordance with example embodiments. - A rapid growth of machine learning (ML) modeling has led to a plethora of models that are created for both products and developers. However, it remains challenging to compare and choose an appropriate model. Also, there is a gap between using raw models and creating cross-device end-user applications (e.g., augmented reality (AR) glasses, mobile phones, watches).
- For example, refining a neural network model to meet product needs can be a “long tail” of the development timeline. In some cases, this process can take months and may require coordination among the machine learning engineers, front-end architects, graphics designers, and/or user experience (UX) artists.
- For example, during the lifecycle of an ML project, collecting data and training models is a typical researcher job. From a process point of view, the task owner and the task flow are generally well defined. However, after an ML model has been trained, the model transitions from a research domain to an application domain. Different roles may be performed. For example, project managers (PMs) may have to devise ways in which the model may be deployed. Designers may have to design UX for a contemplated application. Product engineers may have to integrate the model into the application. And researchers may have to fine-tune the model according to product requirements.
- Generally, the various participants in the production pipeline build custom demos, webpages, apps, etc. Some teams may use the MEDIAPIPE™ (MediaPipe) graph for deployment of the pipeline; however, these teams may not use the MediaPipe graph for model fine-tuning and/or prototyping. This may require the code to be changed and recompiled. Also, the user interface in these platforms is for visualization purposes, and is not a tool for verification or experimentation. In some cases, it may be challenging to debug the pipeline.
- Accordingly, as described herein, a Rapid Application Prototyping System for Artificial Intelligence (Rapsai or RAPSAI) may be provided. RAPSAI is a no-code ML graph building platform, where different participants (e.g., researchers, PMs, UX, and developers) can all build and interact with ML easily. The interactive user interface described herein aims to bridge the gap between model development and model deployment, and enable machine learning engineers and researchers, UX researchers, and/or creative practitioners to independently prototype models and reduce the product development time.
- As an illustration of how compute time and/or resources may be saved, consider a deployment of a deep learning model (e.g., an Augmented Reality (AR) Portrait Depth Application Programming Interface (API) to estimate the distance of each pixel in an image to a camera capturing the image. In some instances, during the deployment, engineers may discover that the model outputs may not be optimal for a real-world application scenario, such as real world images with noisy backgrounds. Accordingly, researchers may consider adding a body segmentation to the image processing pipeline for in-the-wild images. This may be achieved by having research teams manually generate new models or graphs to incorporate body segmentation, and by providing production team extra cycles to evaluate the necessity, and commit the development. Thus, additional time and computation would be needed to accomplish the task. However, RAPSAI would enable users to directly drag and drop an image to the platform, edit an editable node-graph in an interactive interface to add the segmentation model prior to running the depth model, and compare the output results side by side with zoom-in tools.
- As another illustration, RAPSAI can serve as a prototyping system for ad hoc testing with new data and live video streams. For example, a PM may seek to understand the robustness of an ML model that is outputting images to a webcam. Traditionally, ML engineers would likely record video via the webcam, upload the video to an image and/or video processing system, write code to process individual video frames, wait for the code to be run, and then download from the processing system. However, RAPSAI would enable users to directly drag and drop a webcam node as input, and view the output from the webcam in real-time, thereby eliminating the prototyping dev process.
- Also, for example, fine-tuning and/or debugging a model may be achieved by having engineers write code to preprocess test images, upload to the image and/or video processing system, and run the model to process. However, RAPSAI would enable users to interactively change brightness, contrast, and/or blurriness of the input. Accordingly, robustness of a model may be tested on different types of inputs (e.g., dark/blurry/low-contrast photos in the wild) in real-time.
- RAPSAI can also be used as a real-time testing platform for audio processing. For example, users may test the effectiveness of noise cancellation models on various products, and provide real-time feedback over the platform. Existing methods of testing ML models require programming skills (e.g., developing C++ and Java apps), deploying the models onto end-user applications. However, RAPSAI enables comparison of multiple models in real-time.
- Such a cross-device pipeline can be effectively managed by an editable node-graph via an interactive interface. The pipeline may be manipulated in real-time, various combinations of ML models may be tested simultaneously, and results may be compared in real-time to make optimal model selections.
- RAPSAI may be implemented in various forms, such as, for example, an Editor-as-a-Service (e.g., a central service available online), a Library-as-an-Infra (e.g., a codebase for users to fork and host themselves with changes owned by them), a pluggable ML (e.g., a browser extension template that can load pipeline graphs and run the associated processes), an ML Model Builder Tool (e.g., a collaborative laboratory to provide I/O, post processing etc. during model development), and a Designer Tool (e.g., a plugin that can load a pipeline graph and integrate HTML and JS code during application design).
- This application relates to a cross-device interactive platform for testing, refining, deploying, and/or designing multiple machine learning models. A new code environment is provided for connecting machine learning models together with user selected input options and output formats. For example, the input may be selected as an image from a camera, or an image stored in an image library, an audio, video, and so forth. Also, for example, the output format may be selected by the user, and the output may be deployed on a variety of different devices and platforms, such as a web browser on laptop, wearables, etc. Users are not required to write computer code. The platform also provides an interactive state augmentation and enables testing robustness of machine learning models. Users may also annotate and comment directly in a note graph editor (e.g., during a development phase). For example, one user may comment that there are artifacts around the edges of an output image, and may assign the task to correct these artifacts to an engineer. One or more users may share the platform collaboratively to identify an issue, and resolve it within the pipeline, update a machine learning model to improve the pipeline, and so forth.
- The platform described herein enables developers to program end user applications. For example, a user may generate an interactive graph by inputting a camera node as an input option, a segmentation node to represent a machine learning model, and then select a graphics node to add effects. The output may be deployed to an end user application, creating an end-to-end pipeline that does not involve coding.
- As another example, the platform described herein enables a machine learning model developer to test robustness of a model on various inputs. For example, a portrait enhancement model can be tested on by changing lighting conditions, backgrounds, resizing the image, changing brightness, contrast, and so forth. The developer may view results within an interface (e.g., the browser). Also, for example, end users such as product managers may compare a performance of two models side by side, annotate with a comment, and view an output as it would appear in an end-user application.
- Although some existing platforms provide some interactive functionality, such platforms do not support interactive generation of a node-graph that directs and controls background machine learning models, including deployment of multiple models in a node graph editor. Existing platforms also fail to seamlessly connect input and output tensors, changing input and/or output formats, and so forth. Also, for example, when the input is an image or a video, existing platforms fail to support changes after compilation of the underlying code. The platform described herein enables users to make real-time changes to input among images, URLs, videos, and live cameras with one user selection (e.g., a click of a mouse). Existing platforms also fail to support connecting to graphical scenes without additional coding. However, the disclosed pipeline has a built-in point cloud visualizer, and a mesh visualizer that can instantly convert three-dimensional (3D) tensor output into an interactive rendering environment, hence delivering applications such as 3D photos with minimal user selections. Existing platforms also fail to support comparing different machine learning models within a single environment. Generally, to compare different ML models, researchers have to open different apps and/or work on different devices to compare the visual quality. However, the platform described herein enables side-by-side comparison with built-in support for zoom-in tools, image enhancement tools (cropping, brightness/contrast), and annotation tools, among others.
-
FIG. 1 is a diagram illustrating an example graphical user interface (GUI) 100, in accordance with example embodiments. In some embodiments, an interactive graphical user interface may be provided that includes a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats. For example, one portion ofGUI 100 may include a library with a list of nodes grouped by different types that users may use to build a pipeline. The term “node” as used herein, generally refers to a component of a machine learning based pipeline. For example, the nodes may include input/output (I/O) nodes 105 (e.g., image from a camera, image from a library, raw image, etc.), various model types 110 (e.g., pre-trained, custom, etc.),effects 115, output options 120 (e.g., canvas, keypoints, raw, etc.), and miscellaneous items 125 (e.g., performance, etc.). The list may be configurable to add or remove additional and/or alternative nodes. - In some embodiments, a graph may be generated in a portion of interactive
graphical user interface 100. For example, a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph. In some implementations, one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu may be detected. In some embodiments, the one or more user selections may include dragging and dropping an item from a menu into the portion of interactivegraphical user interface 100. For example, a user may drag-and-drop, or tap-to-add, nodes to connect different inputs, deep learning models, graphical shaders, comparison modes, and so forth, as end-to-end pipelines. - For example, a first node,
image 1 140, may be connected byedge 1 to a second node,custom model 1 145. In some embodiments, the generating of the graph further involves detecting another user selection of a second machine learning model from the second menu. Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second machine learning model, a third edge of the graph connecting the first node to the fourth node, and a fourth edge of the graph connecting the fourth node to the third node. For example, first node,image 1 140, may be connected tosecond edge 2 to a third node,custom model 2 150.Custom model 1 145 may be connected by athird edge 3 to a fourth node,effect 1 155.Custom model 2 150 may be connected by afourth edge 4 to a fifth node,keypoint 160. Also, for example, fourth node,effect 1 155, may be connected byfifth edge 5 to a sixth node,canvas 165. Such embodiments also involve applying the second machine learning model to the input to generate a second output in the output format. In such embodiments, the other user selection may include dragging and dropping the second machine learning model from the second menu into the portion ofGUI 100. In such embodiments, the other user selection may include uploading the second machine learning model from a library of the user. - In some embodiments, first node,
image 1 140, may include an option to edit one or more image characteristics. For example, first node,image 1 140, may include a portion (e.g., “drop here”) where a user may upload an image. Some embodiments may involve receiving, by a second portion of the interactive graphical user interface, the input associated with the input option. For example, the image may be displayed in a portion ofGUI 100 asimage 130. Also, for example, first node,image 1 140, may include an option to edit an offset in the x-direction (“offset x”), an offset in the y-direction (“offset y”), an option to rotate (“rotate”), an option to scale the image (“scale”), and an option to display a preview of the image (“show preview”). In the example illustration, “offset x” is set to “20,” “offset y” is set to “50,” “rotate” is set to “0,” and “scale” is set to “2.4.” - Second node,
custom model 1 145, and third node,custom model 2 150, may include a portion (e.g., “drop here”) where a user may upload a machine learning model, and a number of inputs and outputs may be shown. Fourth node,effect 1 155, may include a portion (e.g., “drop here”) where a user may upload a type of effect, and may adjust one or more parameters for the effect, such as a first parameter, “param 1” shown to be “0.8”, a second parameter, “param 2” shown to be “0.5,” and an option to display a preview based on updated parameter values (“show preview”). Fifth node,keypoint 160, may include an output format with an option to overlay an edited version over an input image. Some embodiments involve receiving, by a drop-down menu linked to the third node, the output in the output format. For example, one or more of the nodes, including output nodes, may be configured to include editable parameters, drop-down menus for additional user selections, and so forth. - In some embodiments, the graph is an editable graph. Such embodiments involve enabling a user to update the graph by performing one or more of adding, removing, or replacing a node, an edge, or both. Such embodiments also involve updating the output in substantial real-time based on an update to the graph.
Canvas 165 may include an option to display a preview based on an updated node-graph (“show preview”). For example,output image 135 may be displayed, and real-time changes tooutput image 135 may be visible to a user ofGUI 100 as the node-graph is generated (e.g., nodes and/or edges are added or deleted), and/or edited (e.g., edit each node, change a connecting edge between two nodes, and so forth). -
GUI 100 enables users to connect different input options, different machine learning models, different graphical scenes, and/or different output formats within a node-graph editor. Users do not need to code to obtain the deployed application, and can generate the node-graph with user friendly selections. In some embodiments, the one or more user selections include dragging and dropping an item from a menu into the portion. For example, users can generate the node-graph by dragging-and-dropping some input nodes and machine learning models in an editable interface forGUI 100. - In some embodiments, the menu of input options may include input from common formats such as a webcam (e.g., select one from a list of webcams), upload a photo (e.g., with a drag-and-drop operation), provided a URL to fetch an online image, and so forth. In some embodiments, users may use preset images (e.g., copyright-free images for scene, portrait, object, etc.) as example input. Also, for example, users may “batch test” from a batch of images (e.g., up to the first 50 images in a scrolling view), or off-the-shelf datasets (e.g., by providing URLs to fetch a set of online images). As another example, users may use a microphone as a source for an input for specific machine learning models (e.g., denoising, transcription, and so forth). Also, for example, users may input text as an input for language models. In some embodiments, users may upload a video stream or provide an URL of an online video as input. Additional ways to add an input may include access to datasets via APIs.
- Although one image is shown in the first node,
image 1 140, users can optionally upload one or more images. In some displays, multiple images may be presented in a vertical scrolling list, while one image may be selected at a time. In some embodiments, a default mode may be set where the model node (e.g., second node 145) connected to the image node (e.g., first node 140) runs once for a currently selected image. In general, a user may have an option to run through an image sequence, and the output node (e.g., canvas 165) connected to the input node (e.g., first node 140) may display a list of results. In some embodiments, the scrolling down the vertical scrolling list may be synchronized. As indicated previously, as an alternative to uploading images, a user may optionally enter a URL pattern to fetch multiple images in a batch. For example, the user may select a starting index “0,” and an ending index “10,” to dynamically load a subset of eleven images from the entered URL pattern. Also, as described, images may be adjusted, including cropping, changing a contrast setting, brightness setting, and so forth. In some embodiments, effects such as shader effects, custom filters, and so forth may be applied. - In some embodiments, the user may have an option to upload an audio file, or a list of audio files. For example, instead of uploading images, the user may opt to enter a URL pattern to upload multiple audios. Also, for example, the user may have an option to run a model based on selected portions of the audio, and/or when the audio is played at a certain rate.
- In some embodiments, the menu of output formats may enable a user to select one or more output formats. For example, users may visualize various outputs to fine-tune the model (e.g., identify situations where the model works well, and situations where the model needs improvement). In some embodiments, output nodes may receive an input from the input nodes, model nodes, effect nodes, and so forth, and serve as end points for the node-graph. In some embodiments, users may visualize results as labels (e.g., MobileNet), visualize results as landmarks (e.g., MoveNet), and so forth. Also, for example, users may visualize results as bounding boxes (e.g., object recognition), and/or as images (e.g., BodyPix, Geodesic PreServing Feature for Dense Human Correspondences (HumanGPS)).
- In some embodiments, output nodes may receive an input from the input nodes, model nodes, effect nodes, and so forth, and may connect to comparison nodes. For example, two or more output nodes may be taken as input, and a side-by-side comparison may be produced.
- The menu of machine learning models may include any model that may be configured to work within the pipeline. Machine learning models may include object recognition models (e.g., MobileNet v1, MobileNet v2, Coco SSD), object segmentation models (e.g., DeepLab v3), face landmarks detection models (e.g., BlazeFace), hand pose models (e.g., MediaPipe), body pose detection models (e.g., MoveNet, BlazePose, PoseNet), depth detection models (e.g., portrait depth, face depth), portrait segmentation models (e.g., Meet v1), semantics models (e.g., BodyPix, HumanGPS), text models (e.g., Lamda, Universal Sentence Encoder, Text Toxicity), audio models (e.g., Audio Recorder, Upload Audio), tensor flow (TF) models with type TF.js model, TF Lite model, custom TF model, image-to-image models (e.g., superresolution, stylization, depth estimation), image-to-point clouds models (e.g., 3D reconstruction models), and image-to-video models (e.g., animated photo generator), image to text label models (e.g., classification), and so forth.
- In some embodiments,
GUI 100 may be configured to enable ML researchers to drag-and-drop new inputs and/or models, and interactively change characteristics such as brightness, contrast, hue, saturation, and so forth, and test the model, compared with other model outputs side-by-side. - In some embodiments,
GUI 100 may be configured to enable UX designers to directly comment on the ML pipeline, tune parameters (e.g., aspect ratio of input images, hyperparameters in ML models), and share positive and negative examples with recorded video and/or a screenshot. - In some embodiments,
GUI 100 may be configured to enable UX researchers to distribute the application via uniform resource locator (URL) and collect user feedback with survey nodes. - In some embodiments,
GUI 100 may be configured to enable end users to compile a minimized pipeline to deploy via a URL and run on compatible devices (e.g., Android, iOS™, WINDOWS™, MACBOOK™). For example, the pipeline may receive input from an input source (e.g., camera) and output to an end-user application (e.g., augmented reality (AR) glasses, virtual reality (VR) glasses, etc.). Also, for example, the pipeline may be configured to support streaming of rendered results directly from a device (e.g., laptop) to another device (e.g., AR glasses) via various communication interfaces (e.g., WiFi, Bluetooth, etc.). - In some aspects, the node-graph may be generated by dragging a node from the library, and dropping it into the editable portion of
GUI 100. Also, for example, the nodes may be connected together to express dependencies and data flow. Based on the generated node-graph, the computing device may take the inputs, apply the machine learning models, and display the output in a panel ofGUI 100 in real time. Some embodiments involve enabling a user to edit one or more parameters associated with one or more of the input, the machine learning model, or the output. Edits made in the node-graph may be reflected in the output without a need for code compilation, packaging, and/or redeployment. Accordingly, user may interact withGUI 100 in real time based on the node-graph. - In some embodiments, the node-graph may comprise a path from an input to a model inference to an output. However, more complex node-graphs may be generated. For example, the same input may be connected to two different models, and each model may be connected to different outputs. Accordingly, different models may be compared on the same input. After the pipeline has been generated, a demo of the model may be shared across devices. For example, selecting a “share” feature may generate a URL that may be provided to another user. The other user may use the URL to view the generated pipeline.
-
GUI 100 may be configured to support debugging edge cases and debugging in general. For example, users may interactively tune parameters on any node, images, video, and/or audio may be interactively adjusted. For example, the input image may be made darker, or an offset may be applied, to visualize an effect on model performance. -
GUI 100 may be configured to support batch input and enable a comparison mode where outputs may be provided in a manner that enables users to easily discover problems in model performance. Also, for example, users may view intermediate results to determine specific steps in the node-graph pipeline that may be causing a problem. - Also, for example,
GUI 100 may be configured so that users may annotate text on a node-graph canvas, or edit inputs and/or outputs. For example, users may annotate with circles and arrows on the node-graph canvas, or may annotate specific input and/or output images. In some embodiments, users may annotate free-line drawings on the node-graph canvas, or specific inputs and/or outputs. Users may also access the output in various formats, such as by downloading a “before/after” pair of images, a WebM of a video, a GIF of the video, and so forth. -
FIG. 2 is a diagram illustrating an examplegraphical user interface 200 for a node-graph editor to compare multiple machine learning models, in accordance with example embodiments. For example,GUI 200 may be configured to provide users with an option to interactively compare different versions of machine learning models in a node-graph editor. - In some embodiments, one portion of
GUI 200 may include a library with a list of nodes grouped by different types that users may use to build a pipeline. For example, the nodes may include input/output (I/O) nodes 205 (e.g., image from a camera, image from a library, raw image, etc.), various model types 210 (e.g., MobileNet, pose detection, etc.), effects 215 (e.g., shader effects, image/video adjustments, etc.), output options 220 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 225 (e.g., nose position extractor, HTML text, template, etc.). The image/video adjustments may include one or more user adjustable controls for translation, rotation, scaling, cropping, perspective transformation, shear mapping, adding noise, adding a user sketch, controlling brightness, adjusting hue, adjusting saturation, and so forth. The list may be configurable to add or remove additional and/or alternative nodes. - In some embodiments, a graph may be generated in a portion of interactive
graphical user interface 200. For example, a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph. For example, a first node,image 250, may be connected byedge 1 to a second node,first MobileNet model 255, and by asecond edge 2 to a third node,second MobileNet model 260.First MobileNet model 255 may be connected by athird edge 3 to a fourth node,first MobileNet result 265. Some embodiments involve detecting another user selection of a second output format from the third menu. Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second output format, and a third edge of the graph connecting the second node to the fourth node. For example,first MobileNet model 255 may be connected by afourth edge 4 to a fifth node,second MobileNet result 270.Second MobileNet model 260 may be connected by afifth edge 5 to a sixth node,third MobileNet result 275. In some embodiments,first MobileNet result 265 may include a drop-down menu 280 providing additional output options such as “MobileNet result,” “JSON viewer,” “HTML text,” and so forth. Such embodiments also involve applying the machine learning model to the input to generate a second output in the second output format. -
Images 230 may include a scrollable list of images, and a user may scroll down the list to select an image. For each selection made, input 250 may be reconfigured, and the node-graph may be run on the selected image. Results for each of the models may be displayed. For example, for the selectedimage 230 of a dog, the first model,MobileNet v2 235 may identify the dog as a “brittany spaniel” with a confidence score of “39.2%,” as a “golden retriever” with a confidence score of “17.9%,” and a “sussex spaniel” with a confidence score of “4.7%.” For the same selectedimage 230 of a dog, the second model,MobileNet v4 240 may identify the dog as a “brittany spaniel” with a first confidence score, as a “golden retriever” with a second confidence score, and a “sussex spaniel” with a third confidence score. For the same selectedimage 230 of a dog, the third model,MobileNet v3 245 may identify the dog as a “brittany spaniel” with a confidence score of “72.7%,” as a “golden retriever” with a confidence score of “14.4%,” and a “sussex spaniel” with a confidence score of “3.7%.” A side-by-side comparison of the confidence scores indicates that the third model,MobileNet v3 245, outperforms the other two models. The selectedimage 230 may be displayed asoutput image 285. One ormore properties 290 ofimage 285 may be provided, such as, for example, a list ofURLs 295 for the output images corresponding to inputimages 230. - As described,
GUI 200 may be configured to enable users to compare results across different visualizations and dimensions, an ability to check the same result, and compare across different images. In some embodiments, comparison nodes may receive input from input nodes, model nodes, and so forth, and may be the end points of the node-graph. Users may have an ability to dynamically map inputs to different models and compare respective outputs. Users may have an ability to upload and/or provide URLs to fetch a set of ground truth images for comparison. - In some embodiments, a comparison node may be configured to generate peak signal-to-noise ratio (PSNR) scores, and/or structural similarity (SSIM) index compared to ground truth images. In some embodiments, a comparison node may be configured to sort the results based on their PSNR scores and/or SSIM index compared to the ground truth images. The PSNR scores and/or SSIM index generally indicate a measure of likeness of an output of a model to a ground truth image. A higher measure of likeness is indicative of a better performance for an image to image machine learning model.
- In some embodiments,
GUI 200 may be configured to enable users to share a demo via a URL. The demo links may be configured to be private, or public. -
FIG. 3 illustrates an example interactive node-graph generation process 300, in accordance with example embodiments. At step I, the user may select an input option, such as an image. A corresponding node,image node 305, may be generated in a node-graph editor portion of an interactive graphical user interface. At step II, alinkable edge 1 may be displayed that can be configured to connectimage node 305 to a next node. At step III, the user may select a machine learning model, such as MobileNet. A corresponding node,MobileNet node 310, may be generated in the node-graph editor portion of the interactive graphical user interface. Also, for example,linkable edge 1 may be transformed to aconnected edge 2 that connectsimage node 305 toMobileNet node 310. In some embodiments, the displaying of the first edge is responsive to a user indication connecting the first node to the second node. For example, user may provide an indication to connectimage node 305 to MobileNet node 310 (e.g., by dragging an end oflinkable edge 1 to connect to MobileNet node 310), and the transforming oflinkable edge 1 to connectededge 2 may occur in response to the user indication. Some embodiments involve providing the user with a selectable edge (e.g., linkable edge 1) that enables the user to confirm a connection of the first node to the second node. The displaying of the first edge (e.g., connected edge 2) is performed upon receiving user confirmation to connect the first node to the second node. - At step IV, additional nodes and/or edges may be added following the procedure described in step III. For example,
image node 305 may be connected toMobileNet node 320 byconnected edge 3,MobileNet node 310 may be connected to an output node,MobileNet result node 315, byconnected edge 4, and to another output node,MobileNet result node 320, byconnected edge 5. Also, for example,MobileNet node 320 may have alinkable edge 6 extend tooutput node 325. In some embodiments,output node 325 may be configured to provide a user with an ability to select from various options, such as “MobileNet result,” “JSON viewer,” or “HTML text,” among others. As illustrated, the user may select from a drop-down menu of options, and may select an output format to be “JSON viewer.” Accordingly, at step V, a node-graph is generated whereoutput node 325 is replaced withJSON viewer node 330, andlinkable edge 6 is replaced with connectededge 7. - In some embodiments, if a user attempts to connect two nodes that cannot be connected, node-
graph generation process 300 may be configured to generate an error message indicating that the two nodes cannot be connected. Generally, two nodes may not be connected if their respective underlying executable codes cannot be pieced together for compilation and execution. Also, for example, node-graph generation process 300 may be configured to automatically generate a node graph based on an input node, or to provide one or more recommendation nodes and/or edges. - In some embodiments, the generating of the graph further involves predicting, by a trained graph predictive model, one or more of a next node or a next edge of the graph. Such embodiments involve recommending the one or more of the next node or the next edge to a user. For example, the recommendation may be based on a history of user preferences and/or user behavior. In some embodiments, the user preferences and/or user behavior may involve a plurality of users using the platform. Also, for example, the recommendation may be based on a next node that may be compatible with a current node. For example, if a current node is an image, a next node recommendation may include one or more image processing ML models. As another example, if a current node is an audio, a next node recommendation may include one or more audio processing ML models. Such embodiments may also involve training the graph predictive model based on a plurality of graphs deployed on a plurality of computing devices. For example, a type of machine learning model to be used for a given input may be provided as a recommendation. In some embodiments, the recommendation may be provided by adding a node in the node-graph editor interface.
- In some embodiments, the predicting may be performed by a predictive model that is a logical or mathematical type construct operable to predict a future event or outcome based on historical facts or data. A predictive model is a categorical model if its predictive outcomes are categories (e.g., a class of inputs, a class of ML models, etc.). In some embodiments, a predictive model is considered a regression model if its predictive outcomes are numeric values (e.g., runtime predictions, values for various image characteristics to be used in model comparison). In some cases, output from a number of distinct predictive models can be combined to achieve predictions that can be more accurate to predictions provided by individual models. Such predictions can be further improved by selecting a specific subset of predictive models for combination from a set of available models. For example, a subset can include predictive models that are particularly well suited for processing certain types of data (e.g., images, or audio, or video). Subsets of predictive models, however, can be selected based on any number of suitable factors.
- In some implementations, a predictive model can be constructed, or trained, using a training dataset in conjunction with a machine learning algorithm. Training datasets can include any number of training examples (e.g., tens, hundreds, thousands, or millions of examples) embodying a patterned occurrence. For example, predictions can be tailored to a particular user, and a training dataset may comprise the plurality of node-graphs generated by the user, user interactions with the interface, user selections of nodes, and so forth. Also, for example, training datasets may include user interactions and user behavior for a plurality of users of the described platform. Each training example can include a number of elements (for example, observed features) related to a known outcome (e.g., a category or a numeric value). In some examples, the observed feature(s) for each training example can be considered a feature vector. The dimensionality of a feature vector can be equal to, or less than, the number of observed features included therein.
-
FIG. 4 is a diagram illustrating an examplegraphical user interface 400 adjusting an input and comparing outputs of multiple machine learning models, in accordance with example embodiments. One portion ofGUI 400 may include a library with a list of nodes grouped by different types that users may use to build a pipeline. For example, the nodes may include input/output (I/O) nodes 405 (e.g., image from a camera, image from a library, raw image, etc.), various model types 410 (e.g., MobileNet, pose detection, etc.), effects 415 (e.g., shader effects, image/video adjustments, etc.), output options 420 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 425 (e.g., nose position extractor, HTML text, template, etc.). The list may be configurable to add or remove additional and/or alternative nodes. - In some embodiments, a graph may be generated in a portion of interactive
graphical user interface 400. For example, a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph. In some implementations, one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu may be detected. In some embodiments, the one or more user selections may include dragging and dropping an item from a menu into the portion of interactivegraphical user interface 400. For example, a user may drag-and-drop, or tap-to-add, nodes to connect different inputs, deep learning models, graphical shaders, comparison modes, and so forth, as end-to-end pipelines. - For example,
camera node 465 may be connected to image/video adjustment node 475, which may be connected tofirst MobileNet node 480 andsecond MobileNet model 485.First MobileNet node 480 may be connected to firstMobileNet result node 490, andsecond MobileNet node 485 may be connected to secondMobileNet result node 495. Users may also select an input and acorresponding input node 470 may be generated in the node-graph editor. -
Images 430 may include a scrollable list of images from the selected input “camera” as indicated bycamera node 465, and a user may scroll down the list to select an image. Results for each of the models may be displayed. For example, results ofMobileNet v1 435 are displayed for an object detection task. MobileNet v1 may correspond tofirst MobileNet node 480, and the results ofMobileNet v1 435 may correspond to firstMobileNet result node 490. Similarly, results ofMobileNet v2 440 are displayed for the same object detection task. MobileNet v2 may correspond tosecond MobileNet node 485, and the results ofMobileNet v2 440 may correspond to secondMobileNet result node 495. - For example, a machine learning researcher may apply image/video adjustments 445 (e.g., rotation, scaling, offset) to a live image received from a web camera to test the robustness of the two models side-by-side in real time. The options for image/
video adjustments 445 may be displayed when image/video adjustment node 475 is generated in the node-graph editor. Theresults 450 of the image/video adjustments 445 may be displayed. For example, the user may be provided with an indication to “adjust image or video, such as scale, offset, rotate, etc.” and an indication that the input is an “image,” or “video,” and the output is an “image.” One ormore properties 455 may be displayed, such as horizontal bars with adjustable controls for a translation in the x direction, a translation in they direction, a rotation (in degrees), a selectable option to flip the image, and so forth. For example,slider control 460 may be slid along the horizontal bar to adjust pixelate. Actual values for the image/video adjustments may be provided, enabling a user to perform side-by-side model comparisons and/or adjustments in real time. - A large variety of machine learning models, including face landmarks or super resolution denoising, and so forth may be supported. Also, for example,
GUI 400 may be configured to be compatible with a “Colaboratory” (Colab) platform, such as Python colab, so that the processing may take place in the Colab and on the cloud server, and after processing, the results may be displayed inGUI 400. -
FIG. 5 is a diagram illustrating an examplegraphical user interface 500 for interactively editing outputs of machine learning models, in accordance with example embodiments. In some embodiments, one portion ofGUI 500 may include a library with a list of nodes grouped by different types that users may use to build a pipeline. For example, the nodes may include input/output (I/O) nodes 505 (e.g., image from a camera, image from a library, raw image, etc.), various model types 510 (e.g., MobileNet, pose detection, etc.), effects 515 (e.g., shader effects, image/video adjustments, etc.), output options 520 (e.g., MobileNet results, pose detection visualizer, JSON viewer, etc.), and miscellaneous items 525 (e.g., nose position extractor, HTML text, template, etc.). The list may be configurable to add or remove additional and/or alternative nodes. - In some embodiments, a graph may be generated in a portion of interactive
graphical user interface 500. For example, a node graph editor is illustrated that enables users to select one or more nodes to generate a node-graph. For example, acamera node 535 may be connected to posedetection node 540, and toshader effects node 550.Pose detection node 540 may be connected tonose position extractor 545. And,nose position extractor 545 may be connected toshader effects node 550 and toJSON viewer node 560. Image 530 may be a live image from a webcam. A first ML model for pose detection may be applied, followed by a second ML model for a nose position extractor. Image 530 and an output of the nose position extractor may be displayed in the shader effects tool asimage 555. Awindow 565 may be displayed corresponding toJSON viewer node 560. In some embodiments,window 565 may be used to edit data and/or make dynamic adjustments to the pipeline. - The
results 570 of the noseposition extractor node 545 may be displayed. For example, the user may be provided with an indication to “extract and normalize nose position (x, y) from pose detector output,” and an indication that the input is a “pose detector result,” and the output is “xy.” One or more properties 575 may be displayed, such as a selectable option whether or not to flip the image over the x-axis (“Flip X”). - The node-graph causes the shader pipeline to receive a tensor output from other machine learning models on the graphical processing unit (GPU), without shipping the data back and forth between CPU and the GPU to accelerate the computation. Users can visualize results of unconventional model outputs. For example, visual effects (VFX)/JS nodes may receive input from input nodes and model nodes, and may be configured to output to comparison or output nodes. In some embodiments, for VFX nodes, users may visualize results with shaders (e.g., Depth), and for JS nodes, users may visualize results with shaders and 3D scenes in a self-contained JS module (e.g., 3D photo, point clouds, meshes from depth map, and so forth). In some embodiments, the JS node may not allow a user to change scripts, but may enable some parameters to be edited interactively. In some embodiments, low-pass filter JS nodes for smoothing landmarks, and/or for generating bounding boxes in videos, may also be used in the node-graph. In some embodiments, users may interactively crop an input image, change an animation speed of a 3D scene in a video input, and/or deploy an output on other form-factor devices (e.g., wearable glasses, Android phones, and other wearable devices).
-
FIG. 6 is an example architecture for rapid application prototyping system for artificial intelligence (RAPSAI) 600, in accordance with example embodiments. Various system components and a high-level architecture ofRapsai 600 are illustrated.Rapsai 600 can be configured to provide developers and researchers input 620 in a variety of data formats 605, a comprehensiveML model library 610, for example, to drag-and-drop into node-graph editor 615, and connect different models and 3D graphics scenes. For example,segmentation model 625 can receiveinput 620,depth model 630 can receive output ofsegmentation model 3D photo scene 635 can receive output fromdepth model 630, and the output from3D photo scene 635 can be deployed at 640 to various end-user applications. For example, the output may be provided to deployedapps 645, and/or for model comparison of an output withmodel A 650 and an output withModel B 655.Data 605 may include a live image from a webcam, an image, video or audio from a library, HTML links to image, video, sound, etc., output of a microphone, a voice input by a user, and so forth. Deployedapps 645 can include wearable devices (e.g., watches, wearable glasses, headphones, etc.), computing devices (e.g., smartphone, laptop, desktop, mobile computing device, etc.).Rapsai 600 may directly deploy the app on cross-device applications via web applications, Bluetooth, and/or WiFi-based streaming over the Ethernet. - Accordingly, as described, a frictionless experience between
Rapsai 600 and devices (e.g., Iris, TensorBoard, Coral, etc.) may be configured. For example, a depth modeling team can compare two depth models with newly uploaded images using a pre-made Rapsai graph.Rapsai 600 may be integrated into random cropping tools, tools for creating better data for testing, and so forth. Nodes may be configured to be extensible, allowing custom nodes to be created in a self-contained manner (e.g., no code changes are needed in the core stack for Rapsai 600). The pipeline editor may be injected into other applications as a web component, with well-defined input/output, and event APIs. -
FIG. 7 is a diagram illustrating an example graphical user interface for an end-to-end node-graph editor 700 with multiple machine learning models, in accordance with example embodiments. For example, a3D portrait generator 705 is shown. In some embodiments, acaption 710 may be displayed, such as “create a 3D portrait with your own photo.” The user may have an option to select from a plurality of available images 715. For example, images 715 may be displayed with a caption, “try with examples (select an image).” Also, for example, step-by-step instructions 720 may be provided for creating a 3D portrait, such as, for example, “1. Drag/drop/click to upload a portrait; 2. You can crop the image after upload; 3. Processing will begin automatically after upload; 4. Download your 3D photo (in GIF) and use it in your apps.” - An image editor interface may be provided with a caption 765 to “drag and drop or click to upload your image.” For example, a user may drag and drop images and select the image source to be a camera feed, or input image from another source. One or more machine learning models may be applied to the input image. For example, an
original image 735 may be input to a segmentation model to generatesegmented image 740.Segmented image 740 can be input to a depth estimation model to generate adepth image 745.Depth image 745 can be input into a 3D image generator model to generate3D image 750. In some embodiments, end-to-end node-graph editor 700 may display an end-to-end (E2E)latency 725, provide one ormore controls 730. Also, for example, end-to-end node-graph editor 700 may provide firstvirtual button 755 to enable users to measure the E2E latency. For example, when a user clicks firstvirtual button 755, end-to-end node-graph editor 700 may measure the E2E latency, and display it asE2E latency 725. Also, for example, secondvirtual button 760 may be provided to enable the user to download an animation (e.g., in GIF format). - An example deployment of
Rapsai 600 may be for AR glasses. For example, given an uploaded profile photo and/or video stream from a webcam,Rapsai 600 pipeline can process a real-timeselfie segmentation model 625, adepth estimation model 630, and then a 3Ddepth mesh scene 635, and can directly deploy the end results to AR glasses. -
Rapsai 600 may be configured to enable users to utilize existing ML models (e.g., MoveNet, MobileNet, Selfie Segmentation), and/or new models. Also, for example, additional models such as TF.js models (e.g., Selfie Segmentation, MoveNet, MobileNet) may be accessed from various ML sources (e.g., from the TF Hub). In some embodiments, TF.js models and/or Tensorflow Lite Micro (TFLM) models may be added to node-graph editor 615 as ML nodes. Users may have an option to maintain privacy of the models, or to make them publicly available. Users may have an option to share models with other users. In some embodiments, a built-in cloud visualizer, or mesh visualizer can convert a 3D tensor output to an interactive rendering environment.Rapsai 600 may be configured to have the visualizer to change a view of the mesh, display a grid view, provide zooming in and zooming out features, and so forth. - Referring to
FIGS. 6 and 7 , as a node graph is generated (e.g., by a process described with reference toFIG. 3 ) in node-graph editor 615,RAPSAI 600 automatically connects the respective pieces of executable code, and executes them, in the background. For example, if a first node corresponding to a camera input is selected,RAPSAI 600 applies code that enablesRAPSAI 600 to connect to a webcam and retrieve a live image. Next, when a second node corresponding tosegmentation model 625 is selected and connected to the first node,RAPSAI 600 automatically selects and applies executable code that enablesRAPSAI 600 to receive the image from the webcam and input it tosegmentation model 625.RAPSAI 600 also automatically runssegmentation model 625 oninput 620 to generate an output of segmentation model 625 (e.g.,segmented image 740 ofFIG. 7 ). - Similarly, when a third node corresponding to
depth model 630 is selected and connected to the second node,RAPSAI 600 automatically selects and applies executable code that enablesRAPSAI 600 to receive the output of segmentation model 625 (e.g.,segmented image 740 ofFIG. 7 ), and input it todepth model 630.RAPSAI 600 also automatically runsdepth model 630 on the output of segmentation model 625 (e.g.,segmented image 740 ofFIG. 7 ), to generate an output of depth model 630 (e.g.,depth image 745 ofFIG. 7 ). - Also, for example, when a fourth node corresponding to
3D photo scene 635 is selected and connected to the third node,RAPSAI 600 automatically selects and applies executable code that enablesRAPSAI 600 to receive the output of depth model 630 (e.g.,depth image 745 ofFIG. 7 ), and input it to3D photo scene 635.RAPSAI 600 also automatically runs3D photo scene 635 on the output of depth model 630 (e.g.,depth image 745 ofFIG. 7 ), to generate an output of 3D photo scene 635 (e.g.,3D image 750 ofFIG. 7 ). - Generally,
RAPSAI 600 may be configured to automatically piece together pieces of executable code as a node-graph is generated in node-graph editor 615. As an edge is formed to connect two nodes, the respective pieces of underlying executable code are stitched together in real-time, compiled and executed. The executable code includes code with instructions to receive an input based on a selection from the menu of input options, instructions to provide the received input to one or more machine learning algorithms based on a selection from the menu of ML models, instructions to run the selected one or more ML models, instructions to generate an output based on a selection from the menu of output formats, and instructions to provide the generated output to an end-user application, or to other ML models, and so forth. - The infrastructure of
RAPSAI 600 can be built on a multi-layered web-based system. Multiple web-based applications may be supported as plugins including plugins for graphics editors (e.g., Colab, Figma™), custom prototyping apps, standalone apps, and so forth, with a single pipeline. Also, for example,RAPSAI 600 can connect pre-post processing graphics libraries with machine learning models within the computation engine, and deploy to mobile devices (including AR glasses), browsers, node.js, and IoT devices. -
FIG. 8 is a schematic diagram illustrating an exampleunified prototyping platform 800, in accordance with example embodiments. For example, the RAPSAI system can provide a unifying AI prototyping experience. Generally, different teams may have different development processes, timelines, and/or deployment targets. For example, some teams may be targeting AR glasses, some teams may be targeting mobile phones, other teams may target website integration, and so forth, and each team may have different product life cycles. As described herein, RAPSAI system can be configured to provide a common platform for all the different teams.Prototyping platform 800 may be configured to have a multi-layered, flexible and extensible design.Prototyping platform 800 may be configured to run with various underlying ML engines and differing runtimes, and may be used as infra to build applications on top. - For example, ML researchers or developers may use
prototyping platform 800 for comparing and performing data augmentation in real time. For example, for a given input image, the blurriness may be changed in real-time, or it may be cropped or resized, a brightness setting may be adjusted, and so forth, to test whether the machine learning models under test work for a portrait in bright sunshine. Also, for example, output images may be compared side-by-side to determine model performance. For example, a user may hover over an image (from a scrollable list of input images) and compare the respective outputs from a first model and a second model, or a first pipeline and a second pipeline, directly within the node-graph editor interface. As previously described with reference toFIG. 5 , the pipeline may be tested on images from a live video stream. Existing techniques would require programmers to manually write executable code (e.g., Python code) to input a video and then process it using machine learning models. However,prototyping platform 800 enables a user to drag and drop or enable the web camera and select the camera, and view results from the ML models in real-time. Also, for example, by editing a node-graph in the node-graph editor, users may connect or disconnect nodes, create new pipelines, and test different models and/or multiple models with image/video adjustments, and so forth. - As illustrated in
FIG. 8 , a plurality of user interface (UI)applications 802 may be connected to the RAPSAI system, such ascustom prototyping app 804, Colab embedapp 806, Figma embedapp 808,RAPSAI platform 810, pipeline editor 812 (e.g., node-graph editor), andstandalone app 814. Also, for example, a plurality ofUI components 816 may be provided, such as data source management 818,pipeline loader 820, andvisualization 828. At pipeline runtime 830,inputs 824 from data source management 818 may be provided toML pipeline runtime 832.Pipeline loader 820 may generate serializedpipeline graph 822 which is configured to manageML pipeline runtime 832.Outputs 826 ofML pipeline runtime 832 are provided tovisualization 826 for display. -
Computation engine layer 834 may include components that enable pipeline runtime 830, such as, for example, extensions 836 (e.g., to connect tovarious inputs 824, ML models, etc.).Extensions 836 may be connected to pre- orpost-processing library 838. In some embodiments, the interactive graphical user interface may be hosted on a platform, and shared across a plurality of computing devices. One or more of the generating of the graph, the applying of the machine learning model, or the providing of the output may be synchronized across the plurality of computing devices. For example, additional models that are utilized may includeMediaPipe 840,ML engine 842, includingTJFS 844,TFLite 846, andTFMicro 848. Additional and/or alternative sources of ML models may be used, such as remote ML services 850. Another layer may comprisedevice platforms 852 that may include one or more end-user application plugins, such as for mobile devices, browser applications, node.js, an internet of things (IoT) device, and so forth. -
FIG. 9 shows diagram 900 illustrating atraining phase 902 and aninference phase 904 of trained machine learning model(s) 932, in accordance with example embodiments. Some machine learning techniques involve training one or more machine learning algorithms on an input set of training data to recognize patterns in the training data and provide output inferences and/or predictions about (patterns in the) training data. The resulting trained machine learning algorithm can be termed as a trained machine learning model. For example,FIG. 9 showstraining phase 902 where one or moremachine learning algorithms 920 are being trained ontraining data 910 to become trained machine learning model(s) 932. Then, duringinference phase 904, trained machine learning model(s) 932 can receiveinput data 930 and one or more inference/prediction requests 940 (perhaps as part of input data 930) and responsively provide as an output one or more inferences and/or prediction(s) 950. - As such, trained machine learning model(s) 932 can include one or more models of one or more
machine learning algorithms 920. Machine learning algorithm(s) 920 may include, but are not limited to: an artificial neural network (e.g., a herein-described convolutional neural networks, a recurrent neural network, a Bayesian network, a hidden Markov model, a Markov decision process, a logistic regression function, a support vector machine, a suitable statistical machine learning algorithm, and/or a heuristic machine learning system). Machine learning algorithm(s) 920 may be supervised or unsupervised, and may implement any suitable combination of online and offline learning. - In some examples, machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can be accelerated using on-device coprocessors, such as graphic processing units (GPUs), tensor processing units (TPUs), digital signal processors (DSPs), and/or application specific integrated circuits (ASICs). Such on-device coprocessors can be used to speed up machine learning algorithm(s) 920 and/or trained machine learning model(s) 932. In some examples, trained machine learning model(s) 932 can be trained, can reside on, and be executed, to provide inferences on a particular computing device, and/or otherwise can make inferences for the particular computing device.
- During
training phase 902, machine learning algorithm(s) 920 can be trained by providing atleast training data 910 as training input using unsupervised, supervised, semi-supervised, and/or reinforcement learning techniques. Unsupervised learning involves providing a portion (or all) oftraining data 910 to machine learning algorithm(s) 920 and machine learning algorithm(s) 920 determining one or more output inferences based on the provided portion (or all) oftraining data 910. Supervised learning involves providing a portion oftraining data 910 to machine learning algorithm(s) 920, with machine learning algorithm(s) 920 determining one or more output inferences based on the provided portion oftraining data 910, and the output inference(s) are either accepted or corrected based on correct results associated withtraining data 910. In some examples, supervised learning of machine learning algorithm(s) 920 can be governed by a set of rules and/or a set of labels for the training input, and the set of rules and/or set of labels may be used to correct inferences of machine learning algorithm(s) 920. - Semi-supervised learning involves having correct results for part, but not all, of
training data 910. During semi-supervised learning, supervised learning is used for a portion oftraining data 910 having correct results, and unsupervised learning is used for a portion oftraining data 910 not having correct results. Reinforcement learning involves machine learning algorithm(s) 920 receiving a reward signal regarding a prior inference, where the reward signal can be a numerical value. During reinforcement learning, machine learning algorithm(s) 920 can output an inference and receive a reward signal in response, where machine learning algorithm(s) 920 are configured to try to maximize the numerical value of the reward signal. In some examples, reinforcement learning also utilizes a value function that provides a numerical value representing an expected total of the numerical values provided by the reward signal over time. In some examples, machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can be trained using other machine learning techniques, including but not limited to, incremental learning and curriculum learning. - In some examples, machine learning algorithm(s) 920 and/or trained machine learning model(s) 932 can use transfer learning techniques. For example, transfer learning techniques can involve trained machine learning model(s) 932 being pre-trained on one set of data and additionally trained using
training data 910. More particularly, machine learning algorithm(s) 920 can be pre-trained on data from one or more computing devices and a resulting trained machine learning model provided to computing device CD1, where CD1 is intended to execute the trained machine learning model duringinference phase 904. Then, duringtraining phase 902, the pre-trained machine learning model can be additionally trained usingtraining data 910, wheretraining data 910 can be derived from kernel and non-kernel data of computing device CD1. This further training of the machine learning algorithm(s) 920 and/or the pre-trained machine learning model usingtraining data 910 of CD1's data can be performed using either supervised or unsupervised learning. Once machine learning algorithm(s) 920 and/or the pre-trained machine learning model has been trained on atleast training data 910,training phase 902 can be completed. The trained resulting machine learning model can be utilized as at least one of trained machine learning model(s) 932. - In particular, once
training phase 902 has been completed, trained machine learning model(s) 932 can be provided to a computing device, if not already on the computing device.Inference phase 904 can begin after trained machine learning model(s) 932 are provided to computing device CD1. - During
inference phase 904, trained machine learning model(s) 932 can receiveinput data 930 and generate and output one or more corresponding inferences and/or prediction(s) 950 aboutinput data 930. As such,input data 930 can be used as an input to trained machine learning model(s) 932 for providing corresponding inference(s) and/or prediction(s) 950 to kernel components and non-kernel components. For example, trained machine learning model(s) 932 can generate inference(s) and/or prediction(s) 950 in response to one or more inference/prediction requests 940. In some examples, trained machine learning model(s) 932 can be executed by a portion of other software. For example, trained machine learning model(s) 932 can be executed by an inference or prediction daemon to be readily available to provide inferences and/or predictions upon request.Input data 930 can include data from computing device CD1 executing trained machine learning model(s) 932 and/or input data from one or more computing devices other than CD1. -
Input data 930 can include training data described herein, such as user interaction data with the described interface, including user data from a plurality of users, devices, platforms, inputs, and so forth. Other types of input data are possible as well. - Inference(s) and/or prediction(s) 950 can include task outputs, numerical values, and/or other output data produced by trained machine learning model(s) 932 operating on input data 930 (and training data 910). In some examples, trained machine learning model(s) 932 can use output inference(s) and/or prediction(s) 950 as
input feedback 960. Trained machine learning model(s) 932 can also rely on past inferences as inputs for generating new inferences. - After training, the trained version of the neural network can be an example of trained machine learning model(s) 932. In this approach, an example of the one or more inference/prediction request(s) 940 can be a request to predict a node, edge, parameter, input, output format, and so forth and a corresponding example of inferences and/or prediction(s) 950 can be a predicted node, edge, parameter, input, output format, and so forth.
- In some examples, one computing device CD_SOLO can include the trained version of the neural network, perhaps after training. Then, computing device CD_SOLO can receive a request to predict a node, edge, parameter, input, output format, and so forth, and use the trained version of the neural network to predict the node, edge, parameter, input, output format, and so forth.
- In some examples, two or more computing devices CD_CLI and CD_SRV can be used to provide output; e.g., a first computing device CD_CLI can generate and send requests to predict anode, edge, parameter, input, output format, and so forth to a second computing device CD_SRV. Then, CD_SRV can use the trained version of the neural network, to predict the node, edge, parameter, input, output format, and so forth, and respond to the requests from CD_CLI. Then, upon reception of responses to the requests, CD_CLI can provide the requested output (e.g., using a user interface and/or a display, a printed copy, an electronic communication, etc.).
- Example Data Network
-
FIG. 10 depicts a distributedcomputing architecture 1000, in accordance with example embodiments. Distributedcomputing architecture 1000 includesserver devices network 1006, withprogrammable devices Network 1006 may correspond to a local area network (LAN), a wide area network (WAN), a WLAN, a WWAN, a corporate intranet, the public Internet, or any other type of network configured to provide a communications path between networked computing devices.Network 1006 may also correspond to a combination of one or more LANs, WANs, corporate intranets, and/or the public Internet. - Although
FIG. 10 only shows five programmable devices, distributed application architectures may serve tens, hundreds, or thousands of programmable devices. Moreover,programmable devices programmable devices network 1006. In other examples, such as illustrated byprogrammable device 1004 d, programmable devices can be indirectly connected tonetwork 1006 via an associated computing device, such asprogrammable device 1004 c. In this example,programmable device 1004 c can act as an associated computing device to pass electronic communications betweenprogrammable device 1004 d andnetwork 1006. In other examples, such as illustrated byprogrammable device 1004 e, a computing device can be part of and/or inside a vehicle, such as a car, a truck, a bus, a boat or ship, an airplane, etc. In other examples not shown inFIG. 10 , a programmable device can be both directly and indirectly connected tonetwork 1006. -
Server devices server device 1008 and/or 1010 can provide content to programmable devices 1004 a-1004 e. The content can include, but is not limited to, web pages, hypertext, scripts, binary data such as compiled software, images, audio, and/or video. The content can include compressed and/or uncompressed content. The content can be encrypted and/or unencrypted. Other types of content are possible as well. - As another example,
server device 1008 and/or 1010 can provide programmable devices 1004 a-1004 e with access to software for database, search, computation, graphical, audio, video, World Wide Web/Internet utilization, and/or other functions. Many other examples of server devices are possible as well. - Computing Device Architecture
-
FIG. 11 is a block diagram of anexample computing device 1100, in accordance with example embodiments. In particular,computing device 1100 shown inFIG. 11 can be configured to perform at least one function of and/or related toneural network 100, and/ormethod 1100. -
Computing device 1100 may include a user interface module 1101, a network communications module 1102, one ormore processors 1103,data storage 1104, one or more camera(s) 1118, one ormore sensors 1120, andpower system 1122, all of which may be linked together via a system bus, network, orother connection mechanism 1105. - User interface module 1101 can be operable to send data to and/or receive data from external user input/output devices. For example, user interface module 1101 can be configured to send and/or receive data to and/or from user input devices such as a touch screen, a computer mouse, a keyboard, a keypad, a touch pad, a trackball, a joystick, a voice recognition module, and/or other similar devices. User interface module 1101 can also be configured to provide output to user display devices, such as one or more cathode ray tubes (CRT), liquid crystal displays, light emitting diodes (LEDs), displays using digital light processing (DLP) technology, printers, light bulbs, and/or other similar devices, either now known or later developed. User interface module 1101 can also be configured to generate audible outputs, with devices such as a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices. User interface module 1101 can further be configured with one or more haptic devices that can generate haptic outputs, such as vibrations and/or other outputs detectable by touch and/or physical contact with
computing device 1100. In some examples, user interface module 1101 can be used to provide a graphical user interface (GUI) for utilizingcomputing device 1100, such as, for example, a graphical user interface of a mobile phone device. - Network communications module 1102 can include one or more devices that provide one or more wireless interface(s) 1107 and/or one or more wireline interface(s) 1108 that are configurable to communicate via a network. Wireless interface(s) 1107 can include one or more wireless transmitters, receivers, and/or transceivers, such as a Bluetooth™ transceiver, a Zigbee® transceiver, a Wi-Fi™ transceiver, a WiMAX™ transceiver, an LTE™ transceiver, and/or other type of wireless transceiver configurable to communicate via a wireless network. Wireline interface(s) 1108 can include one or more wireline transmitters, receivers, and/or transceivers, such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link, or a similar physical connection to a wireline network.
- In some examples, network communications module 1102 can be configured to provide reliable, secured, and/or authenticated communications. For each communication described herein, information for facilitating reliable communications (e.g., guaranteed message delivery) can be provided, perhaps as part of a message header and/or footer (e.g., packet/message sequencing information, encapsulation headers and/or footers, size/time information, and transmission verification information such as cyclic redundancy check (CRC) and/or parity check values). Communications can be made secure (e.g., be encoded or encrypted) and/or decrypted/decoded using one or more cryptographic protocols and/or algorithms, such as, but not limited to, Data Encryption Standard (DES), Advanced Encryption Standard (AES), a Rivest-Shamir-Adelman (RSA) algorithm, a Diffie-Hellman algorithm, a secure sockets protocol such as Secure Sockets Layer (SSL) or Transport Layer Security (TLS), and/or Digital Signature Algorithm (DSA). Other cryptographic protocols and/or algorithms can be used as well or in addition to those listed herein to secure (and then decrypt/decode) communications.
- One or
more processors 1103 can include one or more general purpose processors, and/or one or more special purpose processors (e.g., digital signal processors, tensor processing units (TPUs), graphics processing units (GPUs), application specific integrated circuits, etc.). One ormore processors 1103 can be configured to execute computer-readable instructions 1106 that are contained indata storage 1104 and/or other instructions as described herein. -
Data storage 1104 can include one or more non-transitory computer-readable storage media that can be read and/or accessed by at least one of one ormore processors 1103. The one or more computer-readable storage media can include volatile and/or non-volatile storage components, such as optical, magnetic, organic or other memory or disc storage, which can be integrated in whole or in part with at least one of one ormore processors 1103. In some examples,data storage 1104 can be implemented using a single physical device (e.g., one optical, magnetic, organic or other memory or disc storage unit), while in other examples,data storage 1104 can be implemented using two or more physical devices. -
Data storage 1104 can include computer-readable instructions 1106 and perhaps additional data. In some examples,data storage 1104 can include storage required to perform at least part of the herein-described methods, scenarios, and techniques and/or at least part of the functionality of the herein-described devices and networks. In some examples,data storage 1104 can include storage for a trained neural network model 1112 (e.g., a model of trained neural networks such as neural network 100). In particular of these examples, computer-readable instructions 1106 can include instructions that, when executed by one ormore processors 1103, enablecomputing device 1100 to provide for some or all of the functionality of trainedneural network model 1112. - In some examples,
computing device 1100 can include one or more camera(s) 1118. Camera(s) 1118 can include one or more image capture devices, such as still and/or video cameras, equipped to capture light and record the captured light in one or more images; that is, camera(s) 1118 can generate image(s) of captured light. The one or more images can be one or more still images and/or one or more images utilized in video imagery. Camera(s) 1118 can capture light and/or electromagnetic radiation emitted as visible light, infrared radiation, ultraviolet light, and/or as one or more other frequencies of light. - In some examples,
computing device 1100 can include one ormore sensors 1120.Sensors 1120 can be configured to measure conditions withincomputing device 1100 and/or conditions in an environment ofcomputing device 1100 and provide data about these conditions. For example, sensors 1120 can include one or more of: (i) sensors for obtaining data about computing device 1100, such as, but not limited to, a thermometer for measuring a temperature of computing device 1100, a battery sensor for measuring power of one or more batteries of power system 1122, and/or other sensors measuring conditions of computing device 1100; (ii) an identification sensor to identify other objects and/or devices, such as, but not limited to, a Radio Frequency Identification (RFID) reader, proximity sensor, one-dimensional barcode reader, two-dimensional barcode (e.g., Quick Response (QR) code) reader, and a laser tracker, where the identification sensors can be configured to read identifiers, such as RFID tags, barcodes, QR codes, and/or other devices and/or object configured to be read and provide at least identifying information; (iii) sensors to measure locations and/or movements of computing device 1100, such as, but not limited to, a tilt sensor, a gyroscope, an accelerometer, a Doppler sensor, a GPS device, a sonar sensor, a radar device, a laser-displacement sensor, and a compass; (iv) an environmental sensor to obtain data indicative of an environment of computing device 1100, such as, but not limited to, an infrared sensor, an optical sensor, a light sensor, a biosensor, a capacitive sensor, a touch sensor, a temperature sensor, a wireless sensor, a radio sensor, a movement sensor, a microphone, a sound sensor, an ultrasound sensor and/or a smoke sensor; and/or (v) a force sensor to measure one or more forces (e.g., inertial forces and/or G-forces) acting about computing device 1100, such as, but not limited to one or more sensors that measure: forces in one or more dimensions, torque, ground force, friction, and/or a zero moment point (ZMP) sensor that identifies ZMPs and/or locations of the ZMPs. Many other examples ofsensors 1120 are possible as well. -
Power system 1122 can include one ormore batteries 1124 and/or one or moreexternal power interfaces 1126 for providing electrical power tocomputing device 1100. Each battery of the one ormore batteries 1124 can, when electrically coupled to thecomputing device 1100, act as a source of stored electrical power forcomputing device 1100. One ormore batteries 1124 ofpower system 1122 can be configured to be portable. Some or all of one ormore batteries 1124 can be readily removable fromcomputing device 1100. In other examples, some or all of one ormore batteries 1124 can be internal tocomputing device 1100, and so may not be readily removable fromcomputing device 1100. Some or all of one ormore batteries 1124 can be rechargeable. For example, a rechargeable battery can be recharged via a wired connection between the battery and another power supply, such as by one or more power supplies that are external tocomputing device 1100 and connected tocomputing device 1100 via the one or more external power interfaces. In other examples, some or all of one ormore batteries 1124 can be non-rechargeable batteries. - One or more
external power interfaces 1126 ofpower system 1122 can include one or more wired-power interfaces, such as a USB cable and/or a power cord, that enable wired electrical power connections to one or more power supplies that are external tocomputing device 1100. One or moreexternal power interfaces 1126 can include one or more wireless power interfaces, such as a Qi wireless charger, that enable wireless electrical power connections, such as via a Qi wireless charger, to one or more external power supplies. Once an electrical power connection is established to an external power source using one or moreexternal power interfaces 1126,computing device 1100 can draw electrical power from the external power source the established electrical power connection. In some examples,power system 1122 can include related sensors, such as battery sensors associated with the one or more batteries or other types of electrical power sensors. - Cloud-Based Servers
-
FIG. 12 depicts a cloud-based server system in accordance with an example embodiment. InFIG. 12 , functionality of a neural network, and/or a computing device can be distributed amongcomputing clusters Computing cluster 1209 a can include one ormore computing devices 1200 a, cluster storage arrays 1210 a, and cluster routers 1211 a connected by alocal cluster network 1212 a. Similarly,computing cluster 1209 b can include one ormore computing devices 1200 b, cluster storage arrays 1210 b, and cluster routers 1211 b connected by alocal cluster network 1212 b. Likewise, computing cluster 1209 c can include one ormore computing devices 1200 c,cluster storage arrays 1210 c, andcluster routers 1211 c connected by alocal cluster network 1212 c. - In some embodiments,
computing clusters computing clusters FIG. 12 depicts each ofcomputing clusters - In some embodiments, data and services at
computing clusters computing clusters - In some embodiments, each of
computing clusters - In
computing cluster 1209 a, for example,computing devices 1200 a can be configured to perform various computing tasks of a conditioned, axial self-attention based neural network, and/or a computing device. In one embodiment, the various functionalities of a neural network, and/or a computing device can be distributed among one or more ofcomputing devices Computing devices respective computing clusters 1209 b and 1209 c can be configured similarly tocomputing devices 1200 a incomputing cluster 1209 a. On the other hand, in some embodiments,computing devices - In some embodiments, computing tasks and stored data associated with a neural network, and/or a computing device can be distributed across
computing devices computing devices -
Cluster storage arrays 1210 a, 1210 b, 1210 c ofcomputing clusters - Similar to the manner in which the functions of a conditioned, axial self-attention based neural network, and/or a computing device can be distributed across
computing devices computing clusters cluster storage arrays 1210 a, 1210 b, 1210 c. For example, some cluster storage arrays can be configured to store one portion of the data of a first layer of a neural network, and/or a computing device, while other cluster storage arrays can store other portion(s) of data of second layer of a neural network, and/or a computing device. Also, for example, some cluster storage arrays can be configured to store the data of an encoder of a neural network, while other cluster storage arrays can store the data of a decoder of a neural network. Additionally, some cluster storage arrays can be configured to store backup versions of data stored in other cluster storage arrays. -
Cluster routers 1211 a, 1211 b, 1211 c incomputing clusters computing cluster 1209 a can include one or more internet switching and routing devices configured to provide (i) local area network communications betweencomputing devices 1200 a and cluster storage arrays 1210 a vialocal cluster network 1212 a, and (ii) wide area network communications betweencomputing cluster 1209 a andcomputing clusters 1209 b and 1209 c via widearea network link 1213 a tonetwork 1006.Cluster routers 1211 b and 1211 c can include network equipment similar to cluster routers 1211 a, andcluster routers 1211 b and 1211 c can perform similar networking functions forcomputing clusters computing cluster 1209 a. - In some embodiments, the configuration of
cluster routers 1211 a, 1211 b, 1211 c can be based at least in part on the data communication requirements of the computing devices and cluster storage arrays, the data communications capabilities of the network equipment incluster routers 1211 a, 1211 b, 1211 c, the latency and throughput oflocal cluster networks area network links - Example Methods of Operation
-
FIG. 13 is a flowchart of amethod 1300, in accordance with example embodiments.Method 1300 can be executed by a computing device, such ascomputing device 1100.Method 1300 can begin at block 1310, where the method involves providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats. - At block 1320, the method involves generating a graph in a portion of the interactive graphical user interface. The generating of the graph involves detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node.
- At
block 1330, the method involves applying the machine learning model to an input associated with the input option to generate an output in the output format. - At block 1340, the method involves providing, by the interactive graphical user interface, the output in the output format.
- Some embodiments involve receiving, by a second portion of the interactive graphical user interface, the input associated with the input option.
- Some embodiments involve receiving, by a drop-down menu linked to the third node, the output in the output format.
- Some embodiments involve providing, by the interactive graphical user interface, the input.
- In some embodiments, the one or more user selections include dragging and dropping an item from a menu into the portion.
- Some embodiments involve enabling a user to edit one or more parameters associated with one or more of the input, the machine learning model, or the output.
- Some embodiments involve detecting another user selection of a second output format from the third menu. Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second output format, and a third edge of the graph connecting the second node to the fourth node. Such embodiments also involve applying the machine learning model to the input to generate a second output in the second output format.
- In some embodiments, the generating of the graph further involves detecting another user selection of a second machine learning model from the second menu. Such embodiments involve, responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second machine learning model, a third edge of the graph connecting the first node to the fourth node, and a fourth edge of the graph connecting the fourth node to the third node. Such embodiments also involve applying the second machine learning model to the input to generate a second output in the output format. In such embodiments, the other user selection includes dragging and dropping the second machine learning model from the second menu into the portion. In such embodiments, the other user selection includes uploading the second machine learning model from a library of the user.
- In some embodiments, the displaying of the first edge is responsive to a user indication connecting the first node to the second node.
- Some embodiments involve providing the user with a selectable edge that enables the user to confirm a connection of the first node to the second node. The displaying of the first edge is performed upon receiving user confirmation to connect the first node to the second node.
- In some embodiments, the generating of the graph further involves predicting, by a trained graph predictive model, one or more of a next node or a next edge of the graph. Such embodiments involve recommending the one or more of the next node or the next edge to a user. Such embodiments may also involve training the graph predictive model based on a plurality of graphs deployed on a plurality of computing devices.
- In some embodiments, the graph is an editable graph. Such embodiments involve enabling a user to update the graph by performing one or more of adding, removing, or replacing a node, an edge, or both. Such embodiments also involve updating the output in substantial real-time based on an update to the graph.
- In some embodiments, the providing of the output involves providing the output to an end-user application.
- In some embodiments, the input option includes one or more of an image, a video, an audio, or text.
- In some embodiments, the interactive graphical user interface may be hosted on a platform, and shared across a plurality of computing devices. One or more of the generating of the graph, the applying of the machine learning model, or the providing of the output may be synchronized across the plurality of computing devices.
- The present disclosure is not to be limited in terms of the particular embodiments described in this application, which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope, as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure, in addition to those enumerated herein, will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims.
- The above detailed description describes various features and functions of the disclosed systems, devices, and methods with reference to the accompanying figures. In the figures, similar symbols typically identify similar components, unless context dictates otherwise. The illustrative embodiments described in the detailed description, figures, and claims are not meant to be limiting. Other embodiments can be utilized, and other changes can be made, without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the figures, can be arranged, substituted, combined, separated, and designed in a wide variety of different configurations, all of which are explicitly contemplated herein.
- With respect to any or all of the ladder diagrams, scenarios, and flow charts in the figures and as discussed herein, each block and/or communication may represent a processing of information and/or a transmission of information in accordance with example embodiments. Alternative embodiments are included within the scope of these example embodiments. In these alternative embodiments, for example, functions described as blocks, transmissions, communications, requests, responses, and/or messages may be executed out of order from that shown or discussed, including substantially concurrent or in reverse order, depending on the functionality involved. Further, more or fewer blocks and/or functions may be used with any of the ladder diagrams, scenarios, and flow charts discussed herein, and these ladder diagrams, scenarios, and flow charts may be combined with one another, in part or in whole.
- A block that represents a processing of information may correspond to circuitry that can be configured to perform the specific logical functions of a herein-described method or technique. Alternatively or additionally, a block that represents a processing of information may correspond to a module, a segment, or a portion of program code (including related data). The program code may include one or more instructions executable by a processor for implementing specific logical functions or actions in the method or technique. The program code and/or related data may be stored on any type of computer readable medium such as a storage device including a disk or hard drive or other storage medium.
- The computer readable medium may also include non-transitory computer readable media such as non-transitory computer-readable media that stores data for short periods of time like register memory, processor cache, and random access memory (RAM). The computer readable media may also include non-transitory computer readable media that stores program code and/or data for longer periods of time, such as secondary or persistent long term storage, like read only memory (ROM), optical or magnetic disks, compact-disc read only memory (CD-ROM), for example. The computer readable media may also be any other volatile or non-volatile storage systems. A computer readable medium may be considered a computer readable storage medium, for example, or a tangible storage device.
- Moreover, a block that represents one or more information transmissions may correspond to information transmissions between software and/or hardware modules in the same physical device. However, other information transmissions may be between software modules and/or hardware modules in different physical devices.
- While various aspects and embodiments have been disclosed herein, other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are provided for explanatory purposes and are not intended to be limiting, with the true scope being associated with the following claims.
Claims (20)
1. A computer-implemented method, comprising:
providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats;
generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises:
detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu, and
responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node;
applying the machine learning model to an input associated with the input option to generate an output in the output format; and
providing, by the interactive graphical user interface, the output in the output format.
2. The computer-implemented method of claim 1 , further comprising:
receiving, by a second portion of the interactive graphical user interface, the input associated with the input option.
3. The computer-implemented method of claim 1 , further comprising:
receiving, by a drop-down menu linked to the third node, the output in the output format.
4. The computer-implemented method of claim 1 , further comprising:
providing, by the interactive graphical user interface, the input.
5. The computer-implemented method of claim 1 , wherein the one or more user selections comprises dragging and dropping an item from a menu into the portion.
6. The computer-implemented method of claim 1 , further comprising:
enabling a user to edit one or more parameters associated with one or more of the input, the machine learning model, or the output.
7. The computer-implemented method of claim 1 , wherein the generating of the graph further comprises:
detecting another user selection of a second output format from the third menu;
responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second output format, and a third edge of the graph connecting the second node to the fourth node; and
applying the machine learning model to the input to generate a second output in the second output format.
8. The computer-implemented method of claim 1 , wherein the generating of the graph further comprises:
detecting another user selection of a second machine learning model from the second menu;
responsive to the other user selection, displaying, in the portion, a fourth node of the graph corresponding to the second machine learning model, a third edge of the graph connecting the first node to the fourth node, and a fourth edge of the graph connecting the fourth node to the third node; and
applying the second machine learning model to the input to generate a second output in the output format.
9. The computer-implemented method of claim 8 , wherein the other user selection comprises dragging and dropping the second machine learning model from the second menu into the portion.
10. The computer-implemented method of claim 8 , wherein the other user selection comprises uploading the second machine learning model from a library of the user.
11. The computer-implemented method of claim 1 , wherein the displaying of the first edge is responsive to a user indication connecting the first node to the second node.
12. The computer-implemented method of claim 1 , further comprises:
providing the user with a selectable edge that enables the user to confirm a connection of the first node to the second node, and
wherein the displaying of the first edge is performed upon receiving user confirmation to connect the first node to the second node.
13. The computer-implemented method of claim 1 , wherein the generating of the graph further comprises:
predicting, by a trained graph predictive model, one or more of a next node or a next edge of the graph; and
recommending the one or more of the next node or the next edge to a user.
14. The computer-implemented method of claim 1 , further comprising:
training the graph predictive model based on a plurality of graphs deployed on a plurality of computing devices.
15. The computer-implemented method of claim 1 , wherein the graph is an editable graph, and further comprising:
enabling a user to update the graph by performing one or more of adding, removing, or replacing a node, an edge, or both; and
updating the output in substantial real-time based on an update to the graph.
16. The computer-implemented method of claim 1 , wherein the providing of the output comprises providing the output to an end-user application.
17. The computer-implemented method of claim 1 , wherein the input option comprises one or more of an image, a video, an audio, or text.
18. The computer-implemented method of claim 1 , wherein the interactive graphical user interface is hosted on a platform and shared across a plurality of computing devices, and wherein one or more of the generating of the graph, the applying of the machine learning model, or the providing of the output is synchronized across the plurality of computing devices.
19. A computing device, comprising:
one or more processors; and
data storage, wherein the data storage has stored thereon computer-executable instructions that, when executed by the one or more processors, cause the computing device to carry out functions comprising:
providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats;
generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises:
detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu;
responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node;
applying the machine learning model to an input associated with the input option to generate an output in the output format; and
providing, by the interactive graphical user interface, the output in the output format.
20. An article of manufacture comprising one or more non-transitory computer readable media having computer-readable instructions stored thereon that, when executed by one or more processors of a computing device, cause the computing device to carry out functions comprising:
providing, by a computing device, an interactive graphical user interface comprising a first menu providing one or more input options, a second menu providing one or more machine learning models, and a third menu providing one or more output formats;
generating a graph in a portion of the interactive graphical user interface, wherein the generating of the graph comprises:
detecting one or more user selections of an input option from the first menu, a machine learning model from the second menu, and an output format from the third menu;
responsive to the one or more user selections, displaying, in the portion, a first node of the graph corresponding to the input option, a second node of the graph corresponding to the machine learning model, a third node of the graph corresponding to the output format, a first edge of the graph connecting the first node to the second node, and a second edge of the graph connecting the second node to the third node;
applying the machine learning model to an input associated with the input option to generate an output in the output format; and
providing, by the interactive graphical user interface, the output in the output format.
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/818,852 US20240053877A1 (en) | 2022-08-10 | 2022-08-10 | Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines |
PCT/US2023/028575 WO2024035546A1 (en) | 2022-08-10 | 2023-07-25 | Interactive graphical user interfaces for deployment and application of neural network models using cross-device node-graph pipelines |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/818,852 US20240053877A1 (en) | 2022-08-10 | 2022-08-10 | Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240053877A1 true US20240053877A1 (en) | 2024-02-15 |
Family
ID=87696105
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/818,852 Pending US20240053877A1 (en) | 2022-08-10 | 2022-08-10 | Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines |
Country Status (2)
Country | Link |
---|---|
US (1) | US20240053877A1 (en) |
WO (1) | WO2024035546A1 (en) |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11948003B2 (en) * | 2020-11-04 | 2024-04-02 | RazorThink, Inc. | System and method for automated production and deployment of packaged AI solutions |
-
2022
- 2022-08-10 US US17/818,852 patent/US20240053877A1/en active Pending
-
2023
- 2023-07-25 WO PCT/US2023/028575 patent/WO2024035546A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
WO2024035546A1 (en) | 2024-02-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6944548B2 (en) | Automatic code generation | |
US10719301B1 (en) | Development environment for machine learning media models | |
US20230195845A1 (en) | Fast annotation of samples for machine learning model development | |
WO2021136365A1 (en) | Application development method and apparatus based on machine learning model, and electronic device | |
US20220138004A1 (en) | System and method for automated production and deployment of packaged ai solutions | |
US20200242771A1 (en) | Semantic image synthesis for generating substantially photorealistic images using neural networks | |
CN108604388B (en) | Direct volume rendering in virtual reality and/or augmented reality | |
EP3623961A1 (en) | Predictive modeling with machine learning in data management platforms | |
US9471872B2 (en) | Extension to the expert conversation builder | |
US11537506B1 (en) | System for visually diagnosing machine learning models | |
CN111931591B (en) | Method, device, electronic equipment and readable storage medium for constructing key point learning model | |
US11442704B2 (en) | Computerized system and method for a distributed low-code / no-code computing environment | |
KR20210055055A (en) | Technologies for enabling analysis of computing events based on augmented normalization of classified images | |
US20240126810A1 (en) | Using interpolation to generate a video from static images | |
US20230031702A1 (en) | Neural Networks based Multimodal Transformer for Multi-Task User Interface Modeling | |
US20220391176A1 (en) | Configuring machine learning models for training and deployment using graphical components | |
Zhang et al. | Unirltest: universal platform-independent testing with reinforcement learning via image understanding | |
US20240053877A1 (en) | Interactive Graphical User Interfaces for Deployment and Application of Neural Network Models using Cross-Device Node-Graph Pipelines | |
US11526345B2 (en) | Production compute deployment and governance | |
US20220405064A1 (en) | Robotic process automation | |
CN111553375B (en) | Using transformations to verify computer vision quality | |
US20230259788A1 (en) | Graphical design of a neural network for artificial intelligence applications | |
Heinerud et al. | Automatic testing of graphical user interfaces | |
JP2024518695A (en) | User input based distraction removal in media items - Patents.com | |
CN117453102A (en) | Material optimization processing method and device in game, storage medium and electronic equipment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DU, RUOFEI;LI, NA;JIN, JING;AND OTHERS;SIGNING DATES FROM 20220808 TO 20220810;REEL/FRAME:060771/0436 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |