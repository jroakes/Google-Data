US7376659B2 - System, method, and computer program product for generating a web application with dynamic content - Google Patents
System, method, and computer program product for generating a web application with dynamic content Download PDFInfo
- Publication number
- US7376659B2 US7376659B2 US10/864,046 US86404604A US7376659B2 US 7376659 B2 US7376659 B2 US 7376659B2 US 86404604 A US86404604 A US 86404604A US 7376659 B2 US7376659 B2 US 7376659B2
- Authority
- US
- United States
- Prior art keywords
- contents
- similarity
- web
- web application
- static
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/74—Reverse engineering; Extracting design information from source code
Definitions
- This invention relates to performing reverse engineering for a web application. Specifically, the invention can use objects and web contents dynamically generated on a server to generate a web application model to support a change or reconstruction of a system.
- JP2001134423A2 “Method for Outputting Picture Information of New System Using Interactive Existing System”, Japanese Published Unexamined Patent Application No. 2001-134423, by Maejima Yasunori et al., filed Nov. 8, 1999, referred to hereafter as Yasunori.
- JP2001027946A2 “Method for Outputting Screen Information of Interactive Program System, Japanese Published Unexamined Patent Application No. 2001-27946, by Umezawa Ikuyo et al., filed Jul. 14, 1999, referred to hereafter as Ikuyo.
- JP2002245068A2 “Method and System for Processing Information, Program and Recording Medium”, Japanese Published Unexamined Patent Application No. 2002-245068, by Fukuda Kentaro et al., filed Feb. 9, 2001, referred to hereafter as Kentaro.
- Hassan Ahmed E. Hassan and Richard C. Holt, “Architecture recovery of web applications”, Proceedings of the 24th International Conference on Software Engineering (ICSE2002), p. 349 to 359, referred to hereafter as Hassan.
- a conventional technique for reconfiguring an existing system to a novel system is based on information contained in the specifications of a web application (refer to, for example, Yasunori and Ikuyo).
- Another method is to use reverse engineering of a web site to understand the configuration of the whole web site by for example, identifying web contents and objects generated and discovering correlations among them, so that a web site manager can understand and maintain the functions of the whole web site (refer to, for example, Tilley).
- the existing system can also be changed and reconfigured by analyzing programs running on a server (refer to, for example, Hassan).
- the present invention which accomplishes this object, is implemented as a web application model generating apparatus configured as described below.
- This apparatus is characterized by comprising a template extracting section that analyzes configurations of static web contents captured by executing a predetermined web application to extract a template for dynamic web contents of the web application, a transition extracting section that extracts transition information on said web application to be processed on the basis of access information obtained when capturing said static web contents, and model generating means that generates a model of said web application on the basis of the template extracted by said template extracting section and the transition information extracted by said transition extracting section.
- the template extracting section compares a plurality of the static web contents with each other to extract fixed portions common to each web content as a template for the whole web contents, and if a particular display form is repeatedly used, the template extracting section extracts portions in which the particular display form is repeatedly used, as a template for the display form.
- the web application model generating apparatus may further comprise a classification processing section that classifies a plurality of the static web contents into groups on the basis of visual and logical characteristics of the web contents.
- the template extracting section extracts a template for each of the groups into which the web contents have been classified by the classification processing section.
- another web application model generating apparatus is characterized by comprising classifying means for classifying a plurality of web contents into groups in accordance with a level of similarity between the web contents, web contents analyzing means for analyzing configurations of the web contents for each of the groups into which the web contents have been classified by the classifying means, transition extracting means for extracting call information (for example, URIs (Uniform Resource Identifiers)) used between the groups and contained in the web contents, as transition information, and model generating means that generates a model of a web application on the basis of results of the analysis by the web contents analyzing means and the transition information extracted by the transition extracting means.
- classifying means for classifying a plurality of web contents into groups in accordance with a level of similarity between the web contents
- web contents analyzing means for analyzing configurations of the web contents for each of the groups into which the web contents have been classified by the classifying means
- transition extracting means for extracting call information (for example, URIs (Uniform Resource Identifiers)
- the classifying means carries out classification using one or both of a determination criteria as to whether or not the plurality of web contents have similar structures and a determination criteria as to whether or not the plurality of web contents play similar roles.
- the web contents analyzing means identifies fixed portions common to each web content and portions varying with a situation, and within the portions varying with the situation, further identifies portions in which a particular display form is repeatedly utilized and other portions.
- the web application model generating apparatus may further comprise execution supporting means for executing the web application for which a model is to be generated and log capturing means for capturing a log of operations of the execution supporting means.
- the classifying means classifies static web contents captured when the web application is executed by the execution supporting means
- the transition extracting means captures the transition information on the basis of the log captured by the log capturing means and results of analysis by the web contents analyzing means.
- the present invention is also implemented as a web contents classifying apparatus configured as described below.
- This apparatus is characterized by comprising a similarity calculating section that calculates a level of similarity between a plurality of web contents by comparing descriptions in the web contents with each other to determine portions having the same structure or similar structures and portions playing the same role or similar roles, and classification executing section that classifies the plurality of web contents on the basis of the similarity levels calculated by the similarity calculating section.
- the classification executing section classifies a plurality of the web contents the similarity level of which is equal to or lower than a preset threshold, into the same group.
- the classification executing section comprises user interface means for outputting information indicating the similarity levels between the web contents calculated by the similarity calculating section and accepting an inputted instruction for a group containing predetermined web contents, and classifies the web contents on the basis of the instruction inputted using the user interface means.
- the user interface means can generate a screen in which symbols representing web contents are used to represent the similarity levels between the web contents calculated by the similarity calculating section, and allow a predetermined display device to display the screen.
- the present invention which accomplishes the above object, is also implemented as a web application generation supporting method which is executed by using a computer and described below.
- this method is characterized by comprising a step of analyzing configurations of static web contents captured by executing a predetermined web application to extract a template for dynamic web contents of the web application and then storing the template in predetermined storage means, a step of extracting transition information on the web application on the basis of access information obtained when capturing the static web contents and then storing the transition information in predetermined storage means, and a step of generating a model of the web application on the basis of the template and transition information stored in the storage means.
- another web application generation supporting method is characterized by comprising a first step of classifying a plurality of static web contents into groups in accordance with a level of similarity between the static web contents and then storing results of the classification in predetermined storage means, a second step of analyzing configurations of the static web contents for each group of the static web contents contained in the classification results stored in the storage means and then storing results of the analysis in predetermined storage means, a third step of extracting call information used between said groups and contained in the static web contents, as transition information and then storing the call information in predetermined storage means, and a fourth step of generating a model of a web application on the basis of results of the analysis and the transition information stored in the storage means.
- the present invention is also implemented as a program for controlling a computer to function as the above web application model generating apparatus or web contents classifying apparatus, or a program that allows a computer to execute processes corresponding to the steps of the above web application generation supporting method.
- This program can be provided by being stored in a magnetic disk, an optical disk, a semiconductor memory, or another recording medium or being distributed via a network.
- FIG. 1 is a diagram schematically showing an example of the hardware configuration of a computer apparatus that implements a web application model generating apparatus according to the present embodiment
- FIG. 2 is a diagram showing the functional configuration of the web application model generating apparatus according to the present embodiment which apparatus is implemented by a computer apparatus such as the one shown in FIG. 1 ;
- FIG. 3 is a diagram showing an example of the configuration of access information captured by an access information capturing section according to the present embodiment
- FIG. 4 is a diagram showing the configuration of a classification processing section according to the present embodiment.
- FIG. 5 is a diagram illustrating the concept of the similarity between the roles of static contents which concept is used in the present embodiment
- FIG. 6 is a diagram showing an example of the configuration of a cart page captured by a static contents capturing section according to the present embodiment
- FIG. 7 is a diagram showing an example of the configuration of a cart page captured by the static contents capturing section according to the present embodiment
- FIG. 8 is a diagram showing an example of the configuration of a cart page captured by the static contents capturing section according to the present embodiment
- FIG. 9 is a diagram showing an example of the configuration of a cart page captured by the static contents capturing section according to the present embodiment.
- FIG. 10 is a diagram showing an example of the configuration of a cart page captured by the static contents capturing section according to the present embodiment
- FIG. 11 is a diagram showing an example of the configuration of a cart page captured by the static contents capturing section according to the present embodiment
- FIG. 12 is a diagram showing how a template is extracted from the cart pages shown in FIGS. 6 to 11 ;
- FIG. 13 is a diagram showing portions varying with a situation which are separated from the cart pages shown in FIGS. 6 to 11 ;
- FIG. 14 is a diagram showing how repeated portions are extracted from information on the portions varying with a situation which are shown in FIG. 13 ;
- FIG. 15 is a diagram showing how repeated portions are extracted from article display sections shown in FIGS. 6 , 7 , and 10 ;
- FIG. 16 is a diagram showing an example of the configuration of a user interface screen generated by a classification executing section according to the present embodiment
- FIG. 17 is a diagram showing the configuration of a web application model generated by model generating means according to the present embodiment.
- FIG. 18 is a flow chart illustrating the flow of a process of generating a web application model according to the present embodiment.
- FIG. 19 is a diagram illustrating operations performed by the web application model generating apparatus according to the present embodiment if a web application is changed.
- the present invention realizes reverse engineering of a system for a web application containing dynamically generated objects and web contents.
- An abstract model of the web application (hereinafter referred to as a “web application model”) is thus generated to support a change or reconfiguration of the system.
- FIG. 1 is a diagram schematically showing an example of the hardware configuration of a computer apparatus that implements a web application model generating apparatus according to the present embodiment.
- the computer apparatus shown in FIG. 1 comprises a CPU (Central Processing Unit) 101 operating as arithmetic means, a main memory 103 connected to the CPU 101 via an M/B (Mother Board) chip set 102 and a CPU bus, a video card 104 connected to the CPU 101 via the M/B chip set 102 and an AGP (Accelerated Graphics Port), a hard disk 105 and a network interface 106 connected to the M/B chip set 102 via a PCI (Peripheral Component Interconnect) bus, and a floppy disk drive 108 and a keyboard/mouse 109 connected to the M/B chip set 102 via a bridge circuit 107 and a low-speed bus such as an ISA (Industry Standard Architecture) bus through the PCI bus.
- ISA Industry Standard Architecture
- FIG. 1 only illustrates the hardware configuration of a computer apparatus that implements the present embodiment.
- Various other configurations are possible provided that the present embodiment is applicable to them.
- a video memory may be mounted so that the CPU 101 can process image data.
- a drive for a CD-R (Compact Disc Recordable) or a DVD-RAM (Digital Versatile Disc Random Access Memory) may be provided as an external storage device via an interface such as an ATA (AT Attachment) or a SCSI (Small Computer System Interface).
- ATA AT Attachment
- SCSI Small Computer System Interface
- FIG. 2 is a diagram showing the functional configuration of a web application model generating apparatus according to the present embodiment which apparatus is implemented by a computer apparatus such as the one shown in FIG. 1 .
- the web application model generating apparatus comprises an access support processing section 10 that supports accesses to a web application to be processed, a static contents capturing section 20 and an access information capturing section 30 which capture a log of accesses to the web application, a classification processing section 40 that classifies static contents (HTML contents) captured by static contents capturing section 20 , and a template extracting section 50 , a transition extracting section 60 , and model generating means 70 that generate a web application model on the basis of the results of the classification and the access log.
- an access support processing section 10 that supports accesses to a web application to be processed
- a static contents capturing section 20 and an access information capturing section 30 which capture a log of accesses to the web application
- a classification processing section 40 that classifies static contents (HTML contents) captured by static contents capturing section 20
- a template extracting section 50 e.g., a template extracting section 50
- transition extracting section 60 e.g., a transition extracting section 60
- the components shown in FIG. 2 are, for example, a software block implemented by the CPU 101 , shown in FIG. 1 and controlled by a program.
- the program for controlling the CPU 101 to provide the above functions can be provided by being stored in a magnetic disk, an optical disk, a semiconductor memory, or another recording medium or being distributed via a network.
- the access support processing section 10 supports execution of a web application. Specifically, the access support processing section 10 searches the contents provided by the web application for a next searchable link, and then executes the web application. Alternatively, the access support processing section 10 may output such a link to a display device for display to urge a user to execute the web application. For a web application already being executed according to the present embodiment, a list of information on calls during execution of the web application is recorded as access information (log) (this operation will be described later). Accordingly, this list can be captured to sequentially execute calls.
- the access support processing section 10 can be implemented using a conventional browser function.
- the static contents capturing section 20 captures static contents on the basis of execution of a web application.
- Static contents captured are HTTP responses obtained by accessing a web application, i.e. HTML, XHTML, or XML documents or HTML objects.
- the static contents captured are stored in predetermined storage means such as a main memory 103 or a hard disk 105 , shown in FIG. 1 .
- the contents are then used in processing executed by the classification processing section 40 , described later.
- the access support processing section 10 also uses the static contents captured to search for a next link destination.
- the access information capturing section 30 captures access information containing HTTP requests made in accessing the web application.
- FIG. 3 is a diagram showing an example of the configuration of access information captured by the access information capturing section 30 .
- HTTP requests issued by the access support processing section 10 the destination URIs of and communication data on the HTTP requests, and file names identifying static contents that are HTTP responses are stored in association with one another.
- the access information captured by the access information capturing section 30 is stored in the predetermined storage means such as the main memory 103 or hard disk 105 , shown in FIG. 1 .
- the access information is then used in processing executed by the transition extracting section 60 , described later. Furthermore, as described above, this information can be used when the access support processing section 10 executes linking in the web application.
- the static contents capturing section 20 and the access information capturing section 30 are provided for a transaction between a server and a client in which the web application is executed.
- the static contents capturing section 20 and the access information capturing section 30 can be implemented by a proxy server or as the functions of a browser used on the client.
- a conventional network technique can be used to implement the function provided by the static contents capturing section 20 and access information capturing section 30 to capture a log of HTTP requests and HTTP responses.
- the classification processing section 40 calculates the characteristic amounts of static contents captured by the static contents capturing section 20 to classify the static contents, in order to extract an abstract model from a web application to be processed.
- the characteristic amount is used as an index to determine the level of similarity between the static contents.
- FIG. 4 is a diagram showing the configuration of the classification processing section 40 .
- the classification processing section 40 comprises a similarity calculating section 41 that calculates the level of similarity between static contents, and a classification executing section 42 that groups the static contents on the basis of the similarity levels calculated by the similarity calculating section 41 . Description will be given below of processes including calculation of the similarity level and classification of contents.
- the similarity calculating section 41 calculates the level of similarity between static contents.
- a structure similarity level and a role similarity level are defined as the concept of the level of similarity between static contents.
- the structure similarity level indicates whether or not static contents are similar in their structures such as page layout, and means the visual characteristics of static contents.
- the role similarity level indicates whether or not static contents are similar in their roles such as the presence or absence of a form and its contents, and means the logical characteristics of static contents.
- the structures of tags such as ⁇ table>, ⁇ td>, and ⁇ th> in HTML which affect the layout are extracted from a plurality of static contents to be processed and are compared with each other.
- This enables the digitization of the similarity between the structures of a plurality of static contents.
- a detailed comparison can be made by associating pieces of information such as the attributes of the tags and the elements of subtrees of the tags, with each other as the tags' characteristic values.
- the attributes of the tag ⁇ td> include ⁇ align>, ⁇ valign>, ⁇ bgcolor>, ⁇ colspan>, ⁇ rowspan>, ⁇ height>, and ⁇ width>.
- the size of text in a td cell, the number of links or images, or a link destination can further be used as a characteristic value.
- the conventional technique disclosed in Kentaro can be used as the technique of determining the structure similarity level.
- a ⁇ form> tag and its components such as ⁇ input>, ⁇ textarea>, ⁇ option>, ⁇ button>, and ⁇ select> are extracted from an HTML document of static contents.
- the attributes of the tags or strings in the ⁇ option> tag are associated with the respective tags as characteristic values.
- the similarity of the roles of a plurality of static contents can be digitized by comparing the characteristic values of the static contents with each other.
- the conventional technique disclosed in Kentaro can be used as the technique of determining the role similarity level, as in the case of the structure similarity level.
- structures for the HTML description and layout are neglected, such as the order of appearance of the tags and the arrangement of the tags in a table.
- two static contents are transmitted to the same URI and have respective forms indicating an equal transmission method or equal components, they are determined to have the same role regardless of their positions within the HTML document and the order of appearance of the components in the ⁇ form> elements.
- FIG. 5 is a diagram illustrating the concept of the similarity between the roles of static contents.
- a ⁇ form> in a document 1 which is enclosed by a solid frame 511 and a ⁇ form> in a document 2 which is enclosed by a solid frame 521 are determined to play the same role regardless of their different positions in the HTML document or different orders of appearance of LABEL, INPUT, and the like which are enclosed by a broken line.
- a ⁇ form> in the document 1 which is enclosed by a solid frame 512 and a ⁇ form> in the document 2 which is enclosed by a solid frame 522 are determined to play different roles because they have different destination URIs and different variable names regardless of exactly the same position in the HTML document and exactly the same order of appearance of the components in the ⁇ form> elements.
- determinations are made on the basis of the functions of the ⁇ form>s to increase the similarity level if the static contents have respective ⁇ form>s indicating the same or a similar role, while reducing the similarity level if any form is present only in one of the static contents.
- the similarity level of the whole static contents can be digitized by performing the above operation on each form in the static contents to be compared.
- the classification processing section 40 classifies static contents on the basis of the two types of similarity levels obtained as described above.
- a method (criteria) of classifying static contents may be based on grouping of static contents having similar structures, grouping of static contents playing similar roles, grouping of static contents both having similar structures and playing similar roles, or the like.
- a classifying method to be applied is preferably selected and set in accordance with the object of generation of a web application model or its application.
- the results of classification of static contents are stored in predetermined storage means such as the main memory 103 or hard disk 105 , shown in FIG. 1 .
- the results are then used in processing executed by the template extracting section 50 or the transition extracting section 60 .
- the template extracting section 50 analyzes the grouped static contents and assigns dynamic contents typified by JSP, to the individual groups. To achieve this, the template extracting section 50 identifies fixed portions common to static contents classified into the same group and portions varying with a situation. Moreover, within the portions varying with the situation, the template extracting section 50 identifies portions in which a particular display form is repeatedly utilized (repeated portions) and the other portions.
- the template extracting section 50 first separates HTML contents dynamically generated from JSPs or the like, into fixed portions shared within the group and portions varying with the situation. This separating process can be executed using an existing tool having a function of calculating a difference between documents (refer to, for example, Lindholm and Sudarshan).
- the fixed portions extracted from the HTML contents can be used in replacing the HTML contents with dynamic contents, as a design template for the dynamic contents.
- the template extracting section 50 discovers repeated portions within the portions varying with the situation and extracts the repeated display form.
- a web application providing service for selling articles via web contents normally generates web contents (hereinafter referred to as “cart pages”) playing the role of shopping carts to manage information on articles a user desires to purchase.
- the cart pages manage information (the name and unit price of the article, the quantity of articles to be purchased, the total price, and the like) on an article the user intends to purchase. If cart pages are displayed, they show article information filled in a display section of a predetermined shape for each managed article. Accordingly, a particular display form is repeatedly utilized (repeated portions) for the display sections corresponding to the individual articles. On the other hand, the filled article information varies with the individual articles and thus has irregular contents.
- FIGS. 6 to 11 are diagrams showing examples of the configurations of cart pages captured by the static contents capturing section 20 .
- the cart pages in FIGS. 6 to 11 differ only in the number and displayed contents of sections 601 displaying registered article information and the value in a section 602 displaying the total amount.
- the number of article display sections 601 is one and the same but the number of articles to be purchased and the name of the article are different.
- the amount of money in the total amount section 602 is correspondingly different.
- FIGS. 8 , 9 , and 11 show two, zero, and six article display sections 601 , respectively. Fixed and repeated portions are extracted from these cart pages to obtain a template for the cart pages.
- FIG. 12 is a diagram showing how a template is extracted from the cart pages shown in FIGS. 6 to 11 .
- the template extracting section 50 first compares FIGS. 6 to 11 with one another to separate common portions from varying portions.
- the common portions constitute a design template for the whole cart pages.
- a shaded section 611 corresponds to the article display section 601 in the cart pages shown in FIGS. 6 to 11 .
- a shaded section 612 corresponds to the value in the total amount section 602 in the cart pages shown in FIGS. 6 to 11 .
- FIG. 13 is a diagram showing the portions varying with the situation which have been separated from the cart pages shown in FIGS. 6 to 11 .
- FIG. 13(A) shows the article display section 601 from the cart pages shown in FIGS. 6 to 11 .
- FIG. 13(B) shows the values filled in the total amount section 602 from the cart pages shown in FIGS. 6 to 11 .
- the template extracting section 50 detects a repeated display form from these portions varying with the situation. In this case, text or the like filled in a particular display section is abstracted. A predetermined conventional technique can be used to abstract the information.
- FIG. 14 is a diagram showing how a repeated portion is extracted from information on the portions varying with the situation, shown in FIG. 13 .
- a display form such as a display example 1401 is detected in FIG. 13(A) as a repeated portion.
- “shorttext” and “digit” in the display example 1401 are abstract expressions of information present at the corresponding positions.
- shorttext means the description of a predetermined text.
- “digit” means the description of a predetermined number.
- the template extracting section 50 uses a tag structure of a repeated portion such as the one shown in FIG. 14 , in replacing HTML contents with dynamic contents, as a design template for the display form of the dynamic contents.
- the template extracting section 50 can display this portion on a predetermined display device to present the user the tag structure and a display example of this portion.
- the template extracting section 50 can also present the user the values for abstracted portions (in the example shown in FIG. 14 , “shorttext” and “digit”) of the tag structure which values are actually used in the sample. Consequently, if fixed values or strings are actually inputted, the user can select any of them.
- the user can use this information as a criteria to arrange Tag Libraries, JavaBeansTM (a trademark of SUN Microsystems), or the like in dynamic contents.
- FIGS. 6 , 7 , and 10 each show only one article display section 601 . Only with these samples, it is impossible to determine whether or not the article display section 601 is a repeated display form.
- a display form used as a repeated portion can be extracted by capturing again samples containing the repeated display or collecting relevant portions from the contents in the group and falsely creating a repeated display to search for this repeated display.
- FIG. 15 is a diagram showing how a repeated portion is extracted from the article display sections 601 shown in FIGS. 6 , 7 , and 10 .
- a display form is detected which corresponds to abstraction of the article display sections 601 .
- Portions which are left after the processing by the template extracting section 50 and which vary with the situation and do not belong to the repeated portion are determined to be varied by a user desiring the HTML contents or depending on the time at which the HTML contents are generated (for example, messages such as “Welcome, Mr. (Ms.) X”, “Good Morning”, “Hello”, and “Service Time Over”).
- the transition extracting section 60 extracts transitions from the web application on the basis of access information captured by the access information capturing section 30 and the groups of static contents classified by the classification processing section 40 .
- the groups are assigned to the HTML requests and responses contained in the access information.
- parameter portions are extracted from the URIs contained in the access information.
- server logic calls can be estimated. For example, if the URI ends with “.do”, this corresponds to an action call in Struts, which is a part of the Apache Jakarta Project and is a web application framework.
- information on transitions in the application can be extracted on the call URIs for the groups and the required parameters.
- the model generating means 70 generates an abstract model of the web application using the dynamic contents including the template extracted by the template extracting section 50 as well as the transition information extracted by the transition extracting section 60 .
- the generated model is stored in, for example, the hard disk 105 , shown in FIG. 1 .
- the model is then utilized to change or reconstruct the existing web application to be processed.
- the classification executing section 40 generates a user interface screen displaying information on the levels of similarity between the static contents calculated by the similarity calculating section 41 , to display the user interface screen on the predetermined display device.
- FIG. 16 is a diagram showing an example of the configuration of the user interface screen generated by the classification executing section 42 .
- the user interface screen in FIG. 16 shows a graph containing graphics representing the static contents captured by the static contents capturing section 20 and star-shaped graphics representing the logic of action calls.
- the edges between the graphics correspond to the transitions between the static contents captured, i.e. possible transitions in the web application. This means that edged action calls allow static contents corresponding to predetermined graphics to change to static contents corresponding to other similarly edged graphics.
- the graphics representing the static contents are arranged so that the level of similarity between a pair of static contents calculated by the similarity calculating section 41 is reflected in the distance between the corresponding pair of graphics. Specifically, for a pair of static contents determined to have a high similarity level, the distance between the corresponding pair of graphics on the screen is short.
- the user can select and group desired static contents by performing operations such as one of dragging a mouse to enclose desired graphics and clicking them.
- the classification executing section 42 accepts the user's operations and classifies the static contents in accordance with the operations. If the classification executing section 42 groups the static contents on the basis of a preset threshold, the results of the grouping can be reflected in the user interface screen. On the screen, the broken lines each enclosing several static contents indicates groups obtained as a result of the classification of the static contents. The user can change the classification of the static contents to desired contents by performing an operation of modifying the broken lines on the screen.
- the user can arrange graphics on the basis of only the similarity of the structures or roles of static contents or can weight the graphics with two types of similarity levels for display.
- the similarity level can be represented by the distance between graphics by displaying web contents as small graphics such as thumbnails.
- An alternative representing means uses characters representative of web contents and numerical values representative of similarity levels. Consequently, the user can execute and modify the classification of the static contents by displaying the user interface screen while changing the weights of the similarity levels.
- the static contents are classified and then processed by the template extracting section 50 and the transaction extracting section 60 .
- the model generating means 70 generates a web application model.
- the configuration of the web application model can be outputted to the display device or the like for display using an existing editor.
- UML Unified Modeling Language
- the model can be outputted as various diagrams such as a component and class diagrams.
- FIG. 17 is a diagram showing the configuration of a web application model generated by the model generating means 70 on the basis of the results of classification shown in FIG. 16 (enclosed by the broken lines).
- this web application model comprises two dynamic contents composed of article catalog pages (catalog pages) and cart pages, as well as a checkout page with which articles to be purchased are determined (as shown in FIG. 16 , this page is composed of one type of static content).
- the model also comprises logic called from a catalog page or a cart page to shift to another cart page, logic called from a cart page or the checkout page to shift to a catalog page, and logic called from a cart page to shift to the checkout page.
- FIG. 18 is a flow chart illustrating the flow of a process of generating a web application model using the web application model generating apparatus according to the present embodiment, configured as described above.
- a web application for which a model is to be generated is executed in a normal execution environment (step 1801 ). It is contemplated that the user may operate a browser to execute the web application or the web application may be automatically executed using the functions of the access support processing section 10 or the like.
- the static contents capturing section 20 and the access information capturing section 30 capture static contents and access information (step 1802 ).
- Steps 1801 and 1802 are repeated until all the contents provided by the web application are executed by following links in the web application (step 1803 ).
- the classification processing section 40 calculates the level of similarity between the static contents captured (step 1804 ).
- the static contents are classified (step 1805 ).
- the results of the classification are held in, for example, the main memory 103 or the like, shown in FIG. 1 . It is also possible to generate a user interface screen such as the one shown in FIG. 15 or to accept the user's classification or modification of the results of the classification.
- the template extracting section 50 extracts a template for dynamic contents for each of the groups into which the static contents have been classified (step 1806 ).
- the template is constructed by identifying common portions (fixed portions) and different portions (portions varying with the situation) at a node level. Consequently, dynamic contents can be accurately generated.
- the transition extracting section 60 extracts transitions between the groups into which the static contents have been classified, on the basis of the template extracted by the template extracting section 50 and the access information captured by the access information capturing section 30 (step 1807 ).
- model generating means 70 generates an abstract model of the web application on the basis of the template for the dynamic contents extracted by the template extracting section 50 as well as the transition information extracted by the transition extracting section 60 (step 1808 ).
- FIG. 19 is a diagram illustrating operations performed by the web application model generating apparatus according to the present embodiment if the web application is changed.
- the access support processing section 10 executes the web application.
- the static contents capturing section 20 and the access information capturing section 30 capture static contents and access information, respectively.
- static contents and access information may be captured by executing this part.
- updated static contents can be identified by comparing non-updated static contents already captured using a tool for calculating differences between documents, with updated static contents newly captured.
- the static contents “03.html” and “09.html” and the last line of the access information are identified as the changed portions.
- the classification processing section 40 classifies the static contents captured. At this time, by classifying only the updated static contents, the results of the classification can be incrementally added to the non-updated classification. If the updated static contents belong to any of the non-updated groups, the number of dynamic contents generated remains unchanged. Thus, a changing operation corresponding to the updated contents is preformed on the group to which the static contents belong. On the other hand, if the updated static contents do not belong to any of the non-updated groups, they are recognized as a new group. Consequently, dynamic contents are generated. In the example shown in FIG. 19 , the static contents “03.html” and “09.html” belong to the group “group B”. Thus, the dynamic contents corresponding to the group “group B” are changed.
- the template extracting section 50 and the transition extracting section 60 execute processes based on the results of the classification executed by the classification processing section 40 as well as the access information captured by the access information capturing section 30 .
- the model generating means 70 generates an updated web application model.
- the web application model is updated by changing the dynamic contents corresponding to the group “group B” as described above.
- the template extracting section 50 executes detailed recalculation of the changed portions on the group “group B”.
- the model generating means 70 reflects the results of the calculation in the web application model.
- the present embodiment has been described in conjunction with the system and method for generating a web application model for dynamic web contents.
- the present invention is applicable not only to web applications but also to other common systems from and to which the user captures and inputs information using a GUI and which execute processes on the basis of the input.
- the present invention is applicable to a system in which a host computer is operated using, for example, a 3270 or 5250 terminal manufactured by IBM Corporation, U.S.
- a screen display on the 3270 terminal corresponds to the display form of the web contents in the above described embodiment.
- the roles of the web contents in the embodiment correspond to the assignment of functions to various function keys as well as input items.
- call information is obtained by analyzing transactions based on the HTTP protocol.
- call information can be obtained by analyzing transactions based on the 3270 protocol, or the like.
- a model and template of an application in the host computer can be generated by applying the present invention to the call information and carrying out grouping by calculating the similarity level on the basis of the screen display on the 3270 terminal, the assignment of the functions to the function keys, and the input items.
- a general purpose computer is programmed according to the inventive steps herein.
- the invention can also be embodied as an article of manufacture—a machine component—that is used by a digital processing apparatus to execute the present logic.
- This invention is realized in a critical machine component that causes a digital processing apparatus to perform the inventive method steps herein.
- the invention may be embodied by a computer program that is executed by a processor within a computer as a series of computer-executable instructions. These instructions may reside, for example, in RAM of a computer or on a hard drive or optical drive of the computer, or the instructions may be stored on a DASD array, magnetic tape, electronic read-only memory, or other appropriate data storage device.
Abstract
Description
- “web contents” mean electronic documents utilized on the web,
- “static web contents” mean web contents (for example, HTML, XML, and XHTML) that always return the same content in response to a call URI, and
- “dynamic web contents” mean web contents (for example, JSP and Servlet) that can generate a plurality of static web contents in response to a call URI.
Claims (4)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2003-166385 | 2003-06-11 | ||
JP2003166385A JP4097263B2 (en) | 2003-06-11 | 2003-06-11 | Web application model generation apparatus, web application generation support method, and program |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040268303A1 US20040268303A1 (en) | 2004-12-30 |
US7376659B2 true US7376659B2 (en) | 2008-05-20 |
Family
ID=33534572
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/864,046 Expired - Fee Related US7376659B2 (en) | 2003-06-11 | 2004-06-07 | System, method, and computer program product for generating a web application with dynamic content |
Country Status (2)
Country | Link |
---|---|
US (1) | US7376659B2 (en) |
JP (1) | JP4097263B2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120151433A1 (en) * | 2010-12-13 | 2012-06-14 | Microsoft Corporation | Reverse engineering user interface mockups from working software |
CN104598227A (en) * | 2014-12-31 | 2015-05-06 | 国家电网公司 | Method for modifying content of system presentation page |
US20150178263A1 (en) * | 2012-05-21 | 2015-06-25 | Google Inc. | System and Method for Constructing Markup Language Templates and Input Data Structure Specifications |
Families Citing this family (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2004086851A (en) * | 2002-06-27 | 2004-03-18 | Oki Electric Ind Co Ltd | Apparatus, method, and program for detecting significant updating of electronic document, and record medium storing the program |
US7373586B2 (en) * | 2004-09-03 | 2008-05-13 | International Business Machines Corporation | Differencing and merging tree-structured documents |
US20060101387A1 (en) * | 2004-10-22 | 2006-05-11 | Gerken Christopher H | An Open Model Driven Architecture Application Implementation Service |
US8024703B2 (en) * | 2004-10-22 | 2011-09-20 | International Business Machines Corporation | Building an open model driven architecture pattern based on exemplars |
US7376933B2 (en) * | 2004-10-22 | 2008-05-20 | International Business Machines Corporation | System and method for creating application content using an open model driven architecture |
CN1794296B (en) | 2004-12-23 | 2010-12-22 | 国际商业机器公司 | System and method for creating web services from an existing web site |
US7992127B2 (en) * | 2004-12-23 | 2011-08-02 | International Business Machines Corporation | Method and system of encapsulating web site transactions for computer-aided generation of web services |
US20070079282A1 (en) * | 2005-09-30 | 2007-04-05 | Pawan Nachnani | Browser based designer and player |
US8230002B2 (en) * | 2007-01-18 | 2012-07-24 | Oracle International Corporation | Method and system for automatic setup in web-based applications |
US9122650B1 (en) | 2007-11-14 | 2015-09-01 | Appcelerator, Inc. | Web server based on the same paradigms as web clients |
US8914774B1 (en) | 2007-11-15 | 2014-12-16 | Appcelerator, Inc. | System and method for tagging code to determine where the code runs |
US8954989B1 (en) | 2007-11-19 | 2015-02-10 | Appcelerator, Inc. | Flexible, event-driven JavaScript server architecture |
US8260845B1 (en) | 2007-11-21 | 2012-09-04 | Appcelerator, Inc. | System and method for auto-generating JavaScript proxies and meta-proxies |
US8719451B1 (en) | 2007-11-23 | 2014-05-06 | Appcelerator, Inc. | System and method for on-the-fly, post-processing document object model manipulation |
US8566807B1 (en) | 2007-11-23 | 2013-10-22 | Appcelerator, Inc. | System and method for accessibility of document object model and JavaScript by other platforms |
US8756579B1 (en) | 2007-12-03 | 2014-06-17 | Appcelerator, Inc. | Client-side and server-side unified validation |
US8806431B1 (en) | 2007-12-03 | 2014-08-12 | Appecelerator, Inc. | Aspect oriented programming |
US8819539B1 (en) | 2007-12-03 | 2014-08-26 | Appcelerator, Inc. | On-the-fly rewriting of uniform resource locators in a web-page |
US8938491B1 (en) | 2007-12-04 | 2015-01-20 | Appcelerator, Inc. | System and method for secure binding of client calls and server functions |
US8527860B1 (en) | 2007-12-04 | 2013-09-03 | Appcelerator, Inc. | System and method for exposing the dynamic web server-side |
US8639743B1 (en) | 2007-12-05 | 2014-01-28 | Appcelerator, Inc. | System and method for on-the-fly rewriting of JavaScript |
US8285813B1 (en) | 2007-12-05 | 2012-10-09 | Appcelerator, Inc. | System and method for emulating different user agents on a server |
US8335982B1 (en) | 2007-12-05 | 2012-12-18 | Appcelerator, Inc. | System and method for binding a document object model through JavaScript callbacks |
US8301998B2 (en) * | 2007-12-14 | 2012-10-30 | Ebay Inc. | Identification of content in an electronic document |
US8291079B1 (en) | 2008-06-04 | 2012-10-16 | Appcelerator, Inc. | System and method for developing, deploying, managing and monitoring a web application in a single environment |
US8880678B1 (en) | 2008-06-05 | 2014-11-04 | Appcelerator, Inc. | System and method for managing and monitoring a web application using multiple cloud providers |
US7596620B1 (en) | 2008-11-04 | 2009-09-29 | Aptana, Inc. | System and method for developing, deploying, managing and monitoring a web application in a single environment |
US9053487B2 (en) * | 2011-08-22 | 2015-06-09 | At&T Intellectual Property I, L.P. | Methods, systems, and products for notifying of enhancements to quality of service and experience |
JP2012084161A (en) * | 2011-11-18 | 2012-04-26 | Nomura Research Institute Ltd | Screen information generation method, screen information generation system, and screen information generation program |
EP2820582B1 (en) * | 2012-02-29 | 2018-08-22 | EntIT Software LLC | Network service interface analysis |
DE112012005628T5 (en) * | 2012-04-27 | 2014-10-09 | Hewlett-Packard Development Company, L.P. | Search and presentation of similarity scores |
US10346291B2 (en) * | 2017-02-21 | 2019-07-09 | International Business Machines Corporation | Testing web applications using clusters |
CN108614692A (en) * | 2017-07-24 | 2018-10-02 | 深圳壹账通智能科技有限公司 | Edit model method, apparatus, server and medium |
US20190347078A1 (en) * | 2018-05-09 | 2019-11-14 | International Business Machines Corporation | Generating Application Mock-Ups Based on Captured User Sessions |
US11641406B2 (en) * | 2018-10-17 | 2023-05-02 | Servicenow, Inc. | Identifying applications with machine learning |
Citations (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5616876A (en) * | 1995-04-19 | 1997-04-01 | Microsoft Corporation | System and methods for selecting music on the basis of subjective content |
JP2001027946A (en) | 1999-07-14 | 2001-01-30 | Hitachi Ltd | Method for outputting screen information of interactive program system |
JP2001134423A (en) | 1999-11-08 | 2001-05-18 | Hitachi Ltd | Method for outputting picture information of new system using interactive existing system |
US20020105539A1 (en) * | 2000-09-18 | 2002-08-08 | Wapdwap (Israel) Ltd. | Apparatus and methods for displaying information on mobile communication devices |
JP2002245068A (en) | 2001-02-09 | 2002-08-30 | Internatl Business Mach Corp <Ibm> | Method and system for processing information, program and recording medium |
US20020196976A1 (en) * | 2001-04-24 | 2002-12-26 | Mihcak M. Kivanc | Robust recognizer of perceptually similar content |
US20030004993A1 (en) * | 2001-06-28 | 2003-01-02 | Templeton Randal F. | System, method and computer program for the creation of web pages and communications between web pages |
US20030033221A1 (en) * | 2000-12-28 | 2003-02-13 | Tetsuji Fuwa | Electronic shop management system |
US20030069877A1 (en) * | 2001-08-13 | 2003-04-10 | Xerox Corporation | System for automatically generating queries |
US20040039795A1 (en) * | 2001-04-25 | 2004-02-26 | Percival John Nicholas | System and method for user updateable web sites and web pages |
US20040059997A1 (en) * | 2002-09-19 | 2004-03-25 | Myfamily.Com, Inc. | Systems and methods for displaying statistical information on a web page |
US20040103389A1 (en) * | 2002-11-27 | 2004-05-27 | Moon Sub Song | System and method for generating EJB components from reusable business logics in servlet program |
US20040217985A9 (en) * | 2001-06-29 | 2004-11-04 | Ries David E. | System and method for editing web pages in a client/server architecture |
US6961750B1 (en) * | 2000-05-18 | 2005-11-01 | Microsoft Corp. | Server-side control objects for processing client-side user interface elements |
US7096418B1 (en) * | 2000-02-02 | 2006-08-22 | Persistence Software, Inc. | Dynamic web page cache |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5319777A (en) * | 1990-10-16 | 1994-06-07 | Sinper Corporation | System and method for storing and retrieving information from a multidimensional array |
US6973656B1 (en) * | 1995-08-16 | 2005-12-06 | International Business Machines Corporation | Method and apparatus for linking data in a distributed data processing system |
US5819293A (en) * | 1996-06-06 | 1998-10-06 | Microsoft Corporation | Automatic Spreadsheet forms |
US6631497B1 (en) * | 1999-07-19 | 2003-10-07 | International Business Machines Corporation | Binding data from data source to cells in a spreadsheet |
US6567822B1 (en) * | 2000-03-21 | 2003-05-20 | Accenture Llp | Generating a data request graphical user interface for use in an electronic supply chain value assessment |
US6907434B2 (en) * | 2002-08-23 | 2005-06-14 | The Boeing Company | Message analysis tool |
-
2003
- 2003-06-11 JP JP2003166385A patent/JP4097263B2/en not_active Expired - Fee Related
-
2004
- 2004-06-07 US US10/864,046 patent/US7376659B2/en not_active Expired - Fee Related
Patent Citations (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5616876A (en) * | 1995-04-19 | 1997-04-01 | Microsoft Corporation | System and methods for selecting music on the basis of subjective content |
JP2001027946A (en) | 1999-07-14 | 2001-01-30 | Hitachi Ltd | Method for outputting screen information of interactive program system |
JP2001134423A (en) | 1999-11-08 | 2001-05-18 | Hitachi Ltd | Method for outputting picture information of new system using interactive existing system |
US7096418B1 (en) * | 2000-02-02 | 2006-08-22 | Persistence Software, Inc. | Dynamic web page cache |
US6961750B1 (en) * | 2000-05-18 | 2005-11-01 | Microsoft Corp. | Server-side control objects for processing client-side user interface elements |
US20020105539A1 (en) * | 2000-09-18 | 2002-08-08 | Wapdwap (Israel) Ltd. | Apparatus and methods for displaying information on mobile communication devices |
US20030033221A1 (en) * | 2000-12-28 | 2003-02-13 | Tetsuji Fuwa | Electronic shop management system |
JP2002245068A (en) | 2001-02-09 | 2002-08-30 | Internatl Business Mach Corp <Ibm> | Method and system for processing information, program and recording medium |
US20020196976A1 (en) * | 2001-04-24 | 2002-12-26 | Mihcak M. Kivanc | Robust recognizer of perceptually similar content |
US20040039795A1 (en) * | 2001-04-25 | 2004-02-26 | Percival John Nicholas | System and method for user updateable web sites and web pages |
US20030004993A1 (en) * | 2001-06-28 | 2003-01-02 | Templeton Randal F. | System, method and computer program for the creation of web pages and communications between web pages |
US20040217985A9 (en) * | 2001-06-29 | 2004-11-04 | Ries David E. | System and method for editing web pages in a client/server architecture |
US20030069877A1 (en) * | 2001-08-13 | 2003-04-10 | Xerox Corporation | System for automatically generating queries |
US20040059997A1 (en) * | 2002-09-19 | 2004-03-25 | Myfamily.Com, Inc. | Systems and methods for displaying statistical information on a web page |
US20040103389A1 (en) * | 2002-11-27 | 2004-05-27 | Moon Sub Song | System and method for generating EJB components from reusable business logics in servlet program |
Non-Patent Citations (4)
Title |
---|
Ahmed E. Hassan and Richard C. Holt, "Architecture recovery of web applications", Proceedings of the 24th International Conference on Software Engineering (ICSE2002), p. 349 to 359, referred to hereafter as Hassan. |
Scott Tilley, Shihong Huang, "Evaluating the Reverse Engineering Capabilities of Web Tools for Understanding Site Content and Structure: A Case Study", Proceedings of the 23rd International Conference on Software Engineering (ICSE2001: May 12-19, 2001; Toronto, Canada), p. 514 to 523, Los Alamitos, CA: IEEE Computer Society Press, 2001, referred to hereafter as Tilley. |
Sudarshan S. Chawathe and Anand Rajaraman and Hector Garcia-Molina and Jennifer Widom, "Change Detection in Hierarchically Structured Information", Proceedings of the 1996 ACM SIGMOD International Conference on Management of Data, p. 493 to 504, referred to hereafter as Sudarshan. |
Tancred Lindholm, "A 3-way Merging Algorithm for Synchronizing Ordered Trees-The 3DM Merging and Differencing Tool for XML", Master's Thesis, Helsinki University of Technology, Sep. 13, 2001, available at www.cs.hut.fi/~ctl/3dm/ referred to hereafter as Lindholm. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120151433A1 (en) * | 2010-12-13 | 2012-06-14 | Microsoft Corporation | Reverse engineering user interface mockups from working software |
US9262158B2 (en) * | 2010-12-13 | 2016-02-16 | Microsoft Technology Licensing, Llc | Reverse engineering user interface mockups from working software |
US20150178263A1 (en) * | 2012-05-21 | 2015-06-25 | Google Inc. | System and Method for Constructing Markup Language Templates and Input Data Structure Specifications |
US9152619B2 (en) * | 2012-05-21 | 2015-10-06 | Google Inc. | System and method for constructing markup language templates and input data structure specifications |
CN104598227A (en) * | 2014-12-31 | 2015-05-06 | 国家电网公司 | Method for modifying content of system presentation page |
Also Published As
Publication number | Publication date |
---|---|
JP4097263B2 (en) | 2008-06-11 |
JP2005004428A (en) | 2005-01-06 |
US20040268303A1 (en) | 2004-12-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7376659B2 (en) | System, method, and computer program product for generating a web application with dynamic content | |
US10783324B2 (en) | Wizard for configuring a field extraction rule | |
US11216491B2 (en) | Field extraction rules from clustered data samples | |
US7962524B2 (en) | Computer program, device, and method for sorting dataset records into groups according to frequent tree | |
US11416473B2 (en) | Using path encoding method and relational set operations for search and comparison of hierarchial structures | |
US11816140B1 (en) | Non-text machine data processing | |
Di Lucca et al. | WARE: A tool for the reverse engineering of web applications | |
JP5496853B2 (en) | Method for generating rules for classifying structured documents, and computer program and computer for the same | |
US20090248707A1 (en) | Site-specific information-type detection methods and systems | |
US11727196B2 (en) | System and method for automatic detection of webpage zones of interest | |
US9104709B2 (en) | Cleansing a database system to improve data quality | |
US8359307B2 (en) | Method and apparatus for building sales tools by mining data from websites | |
US20050120014A1 (en) | System and method for generating SQL using templates | |
JP2003141158A (en) | Retrieval device and method using pattern under consideration of sequence | |
US20080059429A1 (en) | Integrated search processing method and device | |
JP4876151B2 (en) | Search keyword candidate display system, search keyword candidate display method, and program | |
Wrembel | Data integration, cleaning, and deduplication: Research versus industrial projects | |
US20130218893A1 (en) | Executing in-database data mining processes | |
JPH11306187A (en) | Method and device for presenting retrieval result of document with category | |
Umamageswari et al. | Web harvesting: web data extraction techniques for deep web pages | |
JP2004342061A (en) | Development method and development supporting device for web application using link between screen and component | |
US20130265326A1 (en) | Discovering a reporting model from an existing reporting environment | |
KR20100014116A (en) | Wi-the mechanism of rule-based user defined for tab | |
CN110750685B (en) | Data warehousing method and device | |
WO2021205823A1 (en) | Production knowledge management system, production knowledge management method, and production knowledge management program |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ABE, MARI;TAI, HIDEKI;NEROME, TAKASHI;AND OTHERS;REEL/FRAME:015456/0987;SIGNING DATES FROM 20040526 TO 20040601 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20200520 |