GB2551234A - Adaptive overlapped block prediction in variable block size video coding - Google Patents
Adaptive overlapped block prediction in variable block size video coding Download PDFInfo
- Publication number
- GB2551234A GB2551234A GB1621884.4A GB201621884A GB2551234A GB 2551234 A GB2551234 A GB 2551234A GB 201621884 A GB201621884 A GB 201621884A GB 2551234 A GB2551234 A GB 2551234A
- Authority
- GB
- United Kingdom
- Prior art keywords
- prediction
- block
- adjacent
- current block
- overlap region
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/567—Motion estimation based on rate distortion criteria
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/583—Motion compensation with overlapping blocks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/103—Selection of coding mode or of prediction mode
- H04N19/105—Selection of the reference unit for prediction within a chosen coding or prediction mode, e.g. adaptive choice of position and number of pixels used for prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/103—Selection of coding mode or of prediction mode
- H04N19/107—Selection of coding mode or of prediction mode between spatial and temporal predictive coding, e.g. picture refresh
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/119—Adaptive subdivision aspects, e.g. subdivision of a picture into rectangular or non-rectangular coding blocks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/12—Selection from among a plurality of transforms or standards, e.g. selection between discrete cosine transform [DCT] and sub-band transform or selection between H.263 and H.264
- H04N19/122—Selection of transform size, e.g. 8x8 or 2x4x8 DCT; Selection of sub-band transforms of varying structure or type
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/157—Assigned coding mode, i.e. the coding mode being predefined or preselected to be further used for selection of another element or parameter
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/182—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a pixel
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
- H04N19/61—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding in combination with predictive coding
Abstract
Encoding a current block 720 of a current frame, generating a base prediction block for the current block based on current prediction parameters, and identifying adjacent prediction parameters used for encoding previously encoded adjacent blocks 721-724. At least one side of the current block is adjacent to at least two previously encoded adjacent blocks. The encoding includes determining overlap regions 731-734 in the current block, each of the overlap regions corresponding to a respective previously encoded adjacent block, and generating an overlapped prediction of pixel values for each of the overlap regions according to a weighted function of the base prediction and a prediction based on the adjacent prediction parameters. The weighted function is based on a difference between the current prediction parameters and the adjacent prediction parameters. The weighted function may be a function of relative distances between a predicted pixel (952, fig 9) and the centres of the current block (955, fig 9), and the adjacent block (954, fig 9). Alternatively, the weighted function may be a function of vertical or horizontal (963, 964, fig 9) relative distances between respective predicted pixels (953, 952, fig 9) and the boundaries between respective current blocks and adjacent blocks.
Description
ADAPTIVE OVERLAPPED BLOCK PREDICTION IN VARIABLE BLOCK SIZE
VIDEO CODING
BACKGROUND
[0001] Digital video can be used, for example, for remote business meetings via video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos. Due to the large amount of data involved in video data, high performance compression is needed for transmission and storage. Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding and decoding techniques.
SUMMARY
[0002] This application relates generally to encoding and decoding of video stream data for transmission or storage. Disclosed herein are aspects of systems, methods, and apparatuses related to adaptive overlapped block prediction in variable block size video coding.
[0003] An aspect of the teachings herein is a method for encoding frames of a video stream may include encoding a current block of a current frame, generating a base prediction block for the current block based on current prediction parameters associated with the current block, identifying adjacent prediction parameters used for encoding previously encoded adjacent blocks that are adjacent to the current block. At least one side of the current block is adjacent to two or more of the previously encoded adjacent blocks. The encoding may include determining overlap regions in the current block, each of the overlap regions corresponding to a respective previously encoded adjacent block, generating an overlapped prediction of pixel values for each of the overlap regions according to a weighted function of the base prediction and a prediction based on the adjacent prediction parameters. The weighted function may be based on a difference between the current prediction parameters and the adjacent prediction parameters.
[0004] Another aspect of the teachings herein is a method of encoding a current block in a current frame of a video stream, including determining a first overlap region within the current block and adjacent to a previously encoded first adjacent block, at least one side of the current block being adjacent to two or more of the previously encoded adjacent blocks, and generating an overlapped prediction of pixel values in the first overlap region as a weighted function of a first prediction using first prediction parameters of the current frame, and a second prediction using second prediction parameters of the first adjacent block, the weighted function being adaptable by a function of a difference between the first prediction parameters and the second prediction parameters.
[0005] Another aspect of the teachings herein is a method of encoding a current block of a current frame in a plurality of frames of a video stream, including generating a first prediction block of pixel values in the current block based on a first prediction using first prediction parameters, defining an overlap region within the current block and adjacent to an adjacent block among a plurality of previously encoded blocks having variable block sizes, at least one side of the current block being adjacent to two or more of the previously encoded blocks, and generating an updated prediction of pixel values for each pixel within the overlap region, the updated prediction being a weighted function of the first prediction and a second prediction, the second prediction being based on the second prediction parameters. The weighted function may be adaptable by a function of a difference between the first prediction parameters and the second prediction parameters.
[0006] The disclosure also provides corresponding apparatus arranged to put such methods in to effect, and computer program code arranged to implement such methods and apparatus when executed on suitable computer apparatus, and computer readable media carrying such program code.
[0007] Variations in these and other aspects will be described in additional detail hereafter.
BRIEF DESCRIPTION OF THE DRAWINGS
[0008] The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views unless otherwise noted.
[0009] FIG. 1 is a diagram of a computing device in accordance with implementations of this disclosure.
[0010] FIG. 2 is a diagram of a computing and communications system in accordance with implementations of this disclosure.
[0011] FIG. 3 is a diagram of a video stream for use in encoding and decoding in accordance with implementations of this disclosure.
[0012] FIG. 4 is a block diagram of an encoder in accordance with implementations of this disclosure.
[0013] FIG. 5 is a block diagram of a decoder in accordance with implementations of this disclosure.
[0014] FIG. 6 is a flowchart diagram of an example process for adaptive overlapped block prediction in accordance with implementations of this disclosure.
[0015] FIG. 7 is a block diagram of an example block based prediction with variable block sizes in accordance with implementations of this disclosure.
[0016] FIG. 8 is a block diagram of example size variations of overlap regions in accordance with implementations of this disclosure.
[0017] FIG. 9 is a block diagram of an example weighted function for overlapped prediction in accordance with implementations of this disclosure.
DETAILED DESCRIPTION
[0018] Video compression schemes may include breaking each image, or frame, into smaller portions, such as blocks, and generating an output bitstream using techniques to limit the information included for each block in the output. An encoded bitstream can be decoded to re-create the source images from the limited information. The information included for each block in the output may be limited by reducing spatial redundancy, reducing temporal redundancy, or a combination thereof. For example, temporal or spatial redundancies may be reduced by predicting a frame based on information available to both the encoder and decoder, and including information representing a difference, or residual, between the predicted frame and the original frame in an encoded video stream.
[0019] A frame may be divided into blocks of variable sizes, pixel values of each block are predicted using previously coded information, and prediction parameters and residual data of each block are encoded as output. A decoder receives the prediction parameters and residual data in the compressed bitstream and reconstructs the frame, which may include predicting blocks based on previously decoded image data.
[0020] Overlapped prediction can improve prediction of a block by using prediction information from adjacent blocks. The prediction block size of the adjacent blocks may vary among the adjacent blocks and may be different from the prediction block size of a current block. Respective overlap regions within the current block can be identified corresponding to respective adjacent blocks, and an overlapped prediction can be determined for respective overlap regions based on prediction parameters from the corresponding adjacent blocks. Overlapped prediction may be optimized by adapting the size of each overlap region in the current block, such as according to comparison of prediction parameters of the adjacent block and prediction parameters of the current block.
[0021] FIG. 1 is a diagram of a computing device 100 in accordance with implementations of this disclosure. A computing device 100 as shown includes a communication interface 110, a communication unit 120, a user interface (UI) 130, a processor 140, a memory 150, instructions 160, and a power source 170. As used herein, the term “computing device” includes any unit, or combination of units, capable of performing any method, or any portion or portions thereof, disclosed herein.
[0022] The computing device 100 may be a stationary computing device, such as a personal computer (PC), a server, a workstation, a minicomputer, or a mainframe computer; or a mobile computing device, such as a mobile telephone, a personal digital assistant (PDA), a laptop, or a tablet PC. Although shown as a single unit, any one or more elements of the communication device 100 can be integrated into any number of separate physical units. For example, the UI 130 and the processor 140 can be integrated in a first physical unit and the memory 150 can be integrated in a second physical unit.
[0023] The communication interface 110 is a wireless antenna, as shown. The communication interface 110 can alternatively or additionally be a wired communication port, such as an Ethernet port, an infrared port, a serial port, or any other wired or wireless unit capable of interfacing with a wired or wireless electronic communication medium 180.
[0024] The communication unit 120 is configured to transmit or receive signals via a wired or wireless medium 180. For example, as shown, the communication unit 120 is operatively connected to an antenna configured to communicate via wireless signals.
Although not explicitly shown in FIG. 1, the communication unit 120 can be configured to transmit, receive, or both via any wired or wireless communication medium, such as radio frequency (RF), ultra violet (UV), visible light, fiber optic, wire line, or a combination thereof. Although FIG. 1 shows a single communication unit 120 and a single communication interface 110, any number of communication units and any number of communication interfaces can be used.
[0025] The UI 130 includes any unit capable of interfacing with a user, such as a virtual or physical keypad, a touchpad, a display, a touch display, a speaker, a microphone, a video camera, a sensor, or any combination thereof. The UI 130 can be operatively coupled with the processor, as shown, or with any other element of the communication device 100, such as the power source 170. Although shown as a single unit, the UI 130 may include one or more physical units. For example, the UI 130 may include an audio interface for performing audio communication with a user. The UI 130 may include a touch display for performing visual and touch based communication with the user. Although shown as separate units, the communication interface 110, the communication unit 120, and the UI 130, or portions thereof, may be configured as a combined unit. For example, the communication interface 110, the communication unit 120, and the UI 130 may be implemented as a communications port capable of interfacing with an external touchscreen device.
[0026] The processor 140 includes any device or system capable of manipulating or processing a signal or other information now-existing or hereafter developed, including optical processors, quantum processors, molecular processors, or a combination thereof. For example, the processor 140 can include a special purpose processor, a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessor in association with a DSP core, a controller, a microcontroller, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), a programmable logic array, programmable logic controller, microcode, firmware, any type of integrated circuit (IC), a state machine, or any combination thereof. As used herein, the term “processor” includes a single processor or multiple processors. The processor 140 is operatively coupled with the communication interface 110, communication unit 120, the UI 130, the memory 150, the instructions 160, and the power source 170 in this example.
[0027] The memory 150 includes any non-transitory computer-usable or computer-readable medium, such as any tangible device that can, for example, contain, store, communicate, or transport the instructions 160, or any information associated therewith, for use by or in connection with the processor 140. The non-transitory computer-usable or computer-readable medium can be, for example, a solid state drive, a memory card, removable media, a read only memory (ROM), a random access memory (RAM), any type of disk including a hard disk, a floppy disk, an optical disk, a magnetic or optical card, an application specific integrated circuits (ASICs), or any type of non-transitory media suitable for storing electronic information, or any combination thereof. The memory 150 is connected to the processor 140 through, for example, a memory bus (not explicitly shown).
[0028] The instructions 160 include directions for performing any method, or any portion or portions thereof, disclosed herein. The instructions 160 can be realized in hardware, software, or any combination thereof. For example, the instructions 160 may be implemented as information stored in the memory 150, such as a computer program, that may be executed by the processor 140 to perform any of the respective methods, algorithms, aspects, or combinations thereof, as described herein. The instructions 160, or a portion thereof, may be implemented as a special purpose processor, or circuitry, that can include specialized hardware for carrying out any of the methods, algorithms, aspects, or combinations thereof, as described herein. Portions of the instructions 160 can be distributed across multiple processors on the same machine or different machines or across a network such as a local area network, a wide area network, the Internet, or a combination thereof.
[0029] The power source 170 is any suitable device for powering the computing device 100. For example, the power source 170 can include a wired power source; one or more dry cell batteries, such as nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion); solar cells; fuel cells; or any other device capable of powering the communication device 110. As shown in FIG. 1, the communication interface 110, the communication unit 120, the UI130, the processor 140, the instructions 160, and the memory 150 are operatively coupled with the power source 170.
[0030] Although shown as separate elements, the communication interface 110, the communication unit 120, the UI 130, the processor 140, the instructions 160, the power source 170, the memory 150, or any combination thereof can be integrated in one or more electronic units, circuits, or chips.
[0031] FIG. 2 is a diagram of a computing and communications system 200 in accordance with implementations of this disclosure. The computing and communications system 200 includes one or more computing and communication devices 100A/100B/100C, one or more access points 210A/210B, and one or more networks 220. For example, the computing and communication system 200 can be a multiple access system that provides communication, such as voice, data, video, messaging, broadcast, or a combination thereof, to one or more wired or wireless communicating devices, such as the computing and communication devices 100A/100B/100C. Although FIG. 2 shows three computing and communication devices 100A/100B/100C, two access points 210A/210B, and one network 220 for simplicity, any number of computing and communication devices, access points, and networks can be used.
[0032] A computing and communication device 100A/100B/100C can be, for example, a computing device, such as the computing device 100 shown in FIG. 1. As shown in this example, the computing and communication devices 100A/100B are each user devices, such as a mobile computing device, a laptop, a thin client, or a smartphone, and computing and the communication device 100C is a server, such as a mainframe or a cluster. Although the computing and communication devices 100A/100B are described as user devices, and the computing and communication device 100C is described as a server, any computing and communication device may perform some or all of the functions of a server, some or all of the functions of a user device, or some or all of the functions of a server and a user device.
[0033] Each computing and communication device 100A/100B/100C is configured to perform wired or wireless communication, or both. For example, a computing and communication device 100A/100B/100C can be configured to transmit or receive wired or wireless communication signals and can include a user equipment (UE), a mobile station, a fixed or mobile subscriber unit, a cellular telephone, a personal computer, a tablet computer, a server, consumer electronics, or any similar device. Although each computing and communication device 100A/100B/100C is shown as a single unit, a computing and communication device can include any number of interconnected elements.
[0034] Each access point 210A/210B is any type of device configured to communicate with a computing and communication device 100A/100B/100C, a network 220, or both via wired or wireless communication links 180A/180B/180C. For example, an access point 210A/210B can include a base station, a base transceiver station (BTS), a Node-B, an enhanced Node-B (eNode-B), a Home Node-B (HNode-B), a wireless router, a wired router, a hub, a relay, a switch, or any similar wired or wireless device. Although each access point 210A/210B is shown as a single unit, an access point can include any number of interconnected elements.
[0035] The network 220 is any type of network configured to provide services, such as voice, data, applications, voice over internet protocol (VoIP), or any other communications protocol or combination of communications protocols, over a wired or wireless communication link. For example, the network 220 can be a local area network (LAN), wide area network (WAN), virtual private network (VPN), a mobile or cellular telephone network, the Internet, or any other means of electronic communication. The network can use a communication protocol, such as the transmission control protocol (TCP), the user datagram protocol (UDP), the internet protocol (IP), the real-time transport protocol (RTP) the Hyper Text Transport Protocol (HTTP), or a combination thereof.
[0036] The computing and communication devices 100A/100B/100C can communicate with each other via the network 220 using one or more a wired or wireless communication links, or via a combination of wired and wireless communication links. For example, as shown the computing and communication devices 100A/100B communicate via wireless communication links 180A/180B, and computing and communication device 100C communicates via a wired communication link 180C. Any of the computing and communication devices 100A/100B/100C may communicate using any wired or wireless communication link, or links. For example, a first computing and communication device 100A can communicate via a first access point 210A using a first type of communication link, a second computing and communication device 100B can communicate via a second access point 210B using a second type of communication link, and a third computing and communication device 100C can communicate via a third access point (not shown) using a third type of communication link. Similarly, the access points 210A/210B can communicate with the network 220 via one or more types of wired or wireless communication links 230A/230B. Although FIG. 2 shows the computing and communication devices 100A/100B/100C in communication via the network 220, the computing and communication devices 100A/100B/100C can communicate with each other via any number of communication links, such as a direct wired or wireless communication link.
[0037] Other implementations of the computing and communications system 200 are possible. For example, the network 220 can be an ad-hock network and omit one or more of the access points 210A/210B. The computing and communications system 200 may include devices, units, or elements not shown in FIG. 2. For example, the computing and communications system 200 may include many more communicating devices, networks, and access points.
[0038] FIG. 3 is a diagram of a video stream 300 for use in encoding and decoding in accordance with implementations of this disclosure. A video stream 300, such as a video stream captured by a video camera or a video stream generated by a computing device, includes a video sequence 310. The video sequence 310 includes a sequence of adjacent frames 320. Although three adjacent frames 320 are shown, the video sequence 310 can include any number of adjacent frames 320. Each frame 330 from the adjacent frames 320 may represent a single image from the video stream. A frame 330 may include blocks 340. Although not expressly shown in FIG. 3, a block includes pixels. For example, a block can include a 16x16 group of pixels, an 8x8 group of pixels, an 8x16 group of pixels, or any other group of pixels. Unless otherwise indicated herein, the term ‘block’ can include a superblock, a macroblock, a segment, a slice, or any other portion of a frame. A frame, a block, a pixel, or a combination thereof can include display information, such as luminance information, chrominance information, or any other information that can be used to store, modify, communicate, or display the video stream or a portion thereof.
[0039] FIG. 4 is a block diagram of an encoder 400 in accordance with implementations of this disclosure. The encoder 400 can be implemented in a device, such as the computing device 100 shown in FIG. 1 or the computing and communication devices 100A/100B/100C shown in FIG. 2, as, for example, a computer software program stored in a data storage unit, such as the memory 150 shown in FIG. 1. The computer software program can include machine instructions that may be executed by a processor, such as the processor 140 shown in FIG. 1, and may cause the device to encode video data as described herein. The encoder 400 can be implemented as specialized hardware included, for example, in computing device 100.
[0040] The encoder 400 encodes an input video stream 402, such as the video stream 300 shown in FIG. 3 to generate an encoded (compressed) bitstream 404. The encoder 400 includes a forward path for generating the compressed bitstream 404. As shown, the forward path includes an intra/inter-prediction unit 410, a transform unit 420, a quantization unit 430, and an entropy encoding unit 440. The encoder 400 may include a reconstruction path (indicated by the broken connection lines) to reconstruct a frame for encoding of further blocks. As shown in FIG. 4, the reconstruction path may include a dequantization unit 450, an inverse transform unit 460, a reconstruction unit 470, and a loop filtering unit 480. Other structural variations of the encoder 400 can be used to encode the video stream 402.
[0041] For encoding the video stream 402, frames within the video stream 402 can be processed in units of blocks. Thus, a current block may be identified from the blocks in a frame, and the current block may be encoded.
[0042] At the intra/inter-prediction unit 410, the current block is encoded using either intra-frame prediction, which may be within a single frame, or inter-frame prediction, which may be from frame to frame. Intra-prediction may include generating a prediction block from samples in the current frame that have been previously encoded and reconstructed. Interprediction may include generating a prediction block from samples in one or more previously constructed reference frames. Generating a prediction block for a current block in a current frame may include performing motion estimation to generate a motion vector indicating an appropriate reference block in the reference frame.
[0043] The intra/inter-prediction unit 410 subtracts the prediction block from the current block (raw block) to produce a residual block. The transform unit 420 performs a block-based transform, which may include transforming the residual block into transform coefficients in, for example, the frequency domain. Examples of block-based transforms include the Karhunen-Loeve Transform (KLT), the Discrete Cosine Transform (DCT), and the Singular Value Decomposition Transform (SVD). In an example, the DCT includes transforming a block into the frequency domain. The DCT results in transform coefficient values based on spatial frequency, with the lowest frequency (i.e., DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix.
[0044] The quantization unit 430 converts the transform coefficients into discrete quantum values, which may be referred to as quantized transform coefficients, using a quantization (also called a quantizer) value or level. The quantized transform coefficients are entropy encoded by the entropy encoding unit 440 to produce entropy-encoded coefficients. Entropy encoding can include using a probability distribution metric. The entropy-encoded coefficients and information used to decode the block, which may include the type of prediction used, motion vectors, and quantizer values, is output to the compressed bitstream 404. The compressed bitstream 404 can be formatted using various techniques, such as run-length encoding (RLE) and zero-run coding.
[0045] The reconstruction path can be used to maintain reference frame synchronization between the encoder 400 and a corresponding decoder, such as the decoder 500 shown in FIG. 5. The reconstruction path may be similar to the decoding process discussed below, and as shown includes dequantizing the quantized transform coefficients at the dequantization unit 450 and inverse transforming the dequantized transform coefficients at the inverse transform unit 460 to produce a derivative residual block. The reconstruction unit 470 adds the prediction block generated by the intra/inter-prediction unit 410 to the derivative residual block to create a reconstructed block. The loop filtering unit 480 can be applied to the reconstructed block to reduce distortion, such as blocking artifacts.
[0046] Other variations of the encoder 400 can be used to encode the compressed bitstream 404. For example, a non-transform based encoder can quantize the residual block directly without the transform unit 420. The quantization unit 430 and the dequantization unit 450 may be combined into a single unit.
[0047] FIG. 5 is a block diagram of a decoder 500 in accordance with implementations of this disclosure. The decoder 500 can be implemented in a device, such as the computing device 100 shown in FIG. 1 or the computing and communication devices 100A/100B/100C shown in FIG. 2, as, for example, a computer software program stored in a data storage unit, such as the memory 150 shown in FIG. 1. The computer software program can include machine instructions that may be executed by a processor, such as the processor 140 shown in FIG. 1, and may cause the device to decode video data as described herein. The decoder 500 can be implemented as specialized hardware included, for example, in computing device 100.
[0048] The decoder 500 receives a compressed bitstream 502, such as the compressed bitstream 404 shown in FIG. 4, and decodes the compressed bitstream 502 to generate an output video stream 504. In the example of FIG. 5, the decoder 500 includes an entropy decoding unit 510, a dequantization unit 520, an inverse transform unit 530, an intra/inter-prediction unit 540, a reconstruction unit 550, a loop filtering unit 560, and a deblocking filtering unit 570. Other structural variations of the decoder 500 can be used to decode the compressed bitstream 502.
[0049] The entropy decoding unit 510 decodes data elements within the compressed bitstream 502 to produce a set of quantized transform coefficients. The entropy decoding unit 510 may use, for example, Context Adaptive Binary Arithmetic Decoding. The dequantization unit 520 dequantizes the quantized transform coefficients, and the inverse transform unit 530 inverse transforms the dequantized transform coefficients to produce a derivative residual block, which may correspond with the derivative residual block generated by the inverse transform unit 460 shown in FIG. 4. Using header information decoded from the compressed bitstream 502, the intra/inter-prediction unit 540 generates a prediction block corresponding to the prediction block created in the encoder 400. At the reconstruction unit 550, the prediction block is added to the derivative residual block to create a reconstructed block. The loop filtering unit 560 can be applied to the reconstructed block to reduce blocking artifacts. The deblocking filtering unit 570 can be applied to the reconstructed block to reduce blocking distortion. The result is output as the output video stream 504.
[0050] Other variations of the decoder 500 can be used to decode the compressed bitstream 502. For example, the decoder 500 can produce the output video stream 504 without the deblocking filtering unit 570.
[0051] Reducing temporal redundancy may include using similarities between frames to encode a frame using a relatively small amount of data based on one or more reference frames. The reference frames may be previously encoded, decoded, and reconstructed frames of the video stream. For example, a block or pixel of a current frame may be similar to a spatially corresponding block or pixel of a reference frame. A block or pixel of a current frame may be similar to block or pixel of a reference frame at a different portion. In this case, reducing temporal redundancy includes generating motion information indicating the spatial difference, or translation, between the location of the block or pixel in the current frame and corresponding location of the block or pixel in the reference frame.
[0052] Reducing temporal redundancy may include identifying a block or pixel in a reference frame, or a portion of the reference frame, that corresponds with a current block or pixel of a current frame. For example, a reference frame, or a portion of a reference frame, which may be stored in memory, may be searched for the best block or pixel to use for encoding a current block or pixel of the current frame. For example, the search identifies the block of the reference frame for which the difference in pixel values between the reference block and the current block is minimized, and may be referred to as motion searching. The portion of the reference frame searched may be limited. For example, the portion of the reference frame searched (also referred to as the search area) may include a limited number of rows of the reference frame. Identifying the reference block may include calculating a cost function, such as a sum of absolute differences (SAD), between the pixels of the blocks in the search area and the pixels of the current block. More than one reference frame may be provided. For example, three reference frames may be selected from eight candidate reference frames.
[0053] The spatial difference between the location of the reference block in the reference frame and the current block in the current frame is often represented as a motion vector. The difference in pixel values between the reference block and the current block is referred to as differential data, residual data, or as a residual block. Generating motion vectors may be referred to as motion estimation. A pixel of a current block may be indicated based on location using Cartesian coordinates as/xo. Similarly, a pixel of the search area of the reference frame may be indicated based on location using Cartesian coordinates as rx,y. A motion vector (MV) for the current block may be determined based on, for example, a SAD between the pixels of the current frame and the corresponding pixels of the reference frame.
[0054] For inter-prediction, the encoder 400 may convey encoded information for prediction blocks at block end points, including but not limited to a prediction mode, the prediction reference frame(s), motion vector(s) if needed, and subpixel interpolation filter type if needed.
[0055] FIG. 6 is a flowchart diagram of an example of a method for adaptive overlapped block prediction in accordance with implementations of this disclosure. Adaptive overlapped block prediction may be implemented in an encoder, such during prediction performed by the intra/inter-prediction unit 410 of encoder 400 as shown in FIG. 4, or in a decoder, such as during prediction performed by the intra/inter-prediction unit 540 in decoder 500 shown in FIG. 5. Adaptive overlapped block prediction as shown includes determining a base prediction of the current block based on prediction parameters for the current block at 610, identifying adjacent prediction parameters of an adjacent block at 620, determining an overlap region adjacent to the adjacent block in the current block at 630, determining an overlapped prediction of the overlap region as a weighted function of the base prediction and a prediction based on the adjacent prediction parameters at 640, and generating an overlapped prediction block based on combining the overlapped predictions at 650.
[0056] A base prediction for the current block is performed at 610 using current prediction parameters for the current block. For example, the prediction parameters for interprediction may include a reference frame and motion vectors of the current block. A base prediction block may be determined using the base prediction of the current block.
[0057] Adjacent prediction parameters are identified at 620. Identifying the adjacent prediction parameters may include identifying previously encoded or decoded adjacent blocks, and for each of the previously encoded or decoded adjacent blocks, identifying the prediction parameters used for encoding or decoding the adjacent block. The adjacent blocks may be those adjacent to (or peripheral to) the current block within the frame. The adjacent blocks may be those located before the current block in a scan order. The scan order may be raster scan order, a wavefront scan order, a zig-zag scan order, etc.
[0058] An overlap region is determined at 630. An overlap region in the current block may be determined for one or more of the encoded or decoded adjacent blocks identified at 620. The overlap region may include a region, such as a grouping of pixels, within the current block that is adjacent to the corresponding adjacent block. The overlap region determination may be conditional on whether there is at least one previously encoded or decoded adjacent block smaller in size than the current block.
[0059] An overlapped prediction is determined at 640 for the overlap region identified at 630. The overlapped prediction may be determined based on a weighted function of the base prediction determined at 610 and a prediction generated using the adjacent prediction parameters from the corresponding adjacent block to predict pixel values in the current block within the overlap region. For example, for an overlap region, a prediction block of a size equivalent to the size of the overlap region may be determined using the prediction parameters of the corresponding adjacent block. The overlapped prediction may be performed for the overlap region based on a weighted combination of a base prediction block pixel values and the prediction block pixel values generated for the overlap region based on the prediction parameters of the corresponding adjacent block. For example, the pixel value for a pixel in the overlap region can be a weighted average of the pixel value from the base prediction block and the corresponding pixel value from the prediction block generated for the overlap region based on the prediction parameters of the corresponding adjacent block. It is also possible that generating prediction blocks for the respective overlap regions is omitted in favor of generating the overlapped prediction block on a pixel-by-pixel basis.
[0060] An overlapped prediction block is generated using overlapped predictions from one or more adjacent blocks at 650. For example, the overlapped prediction at 640 may be repeated for one or more overlap region within the current block to form the overlapped prediction block.
[0061] A portion of the current block that does not correspond spatially with the overlap regions for the current block may be predicted based on the base prediction.
[0062] An overlapped prediction block for the current block may be compared to the base prediction block, and the base prediction block or the overlapped prediction block is used as the prediction block for the current block based on the comparison. For example, the comparison may be based on a residual-based error metric, such as a sum of absolute differences, that determines error values between the current block and each of the prediction blocks. The encoder 400 may select whichever of the base prediction block or the overlapped prediction block produces lower error value(s).
[0063] Information that indicates that an overlapped prediction was performed on the current block may be included in the encoded bitstream. For example, an indication of a type of weighted function used for the overlapped prediction may be indicated in the encoded bitstream. An indication of the weighted function may be omitted from the encoded bitstream, and decoding the encoded bitstream includes determining a weighted function using context information of previously decoded adjacent frames. For example, decoding may include identifying a weighted function based on which adjacent block prediction parameters produce the smallest residual-based errors.
[0064] FIG. 7 is a block diagram of an example block based prediction with variable block sizes in accordance with implementations of this disclosure. At least one side of the current block may be adjacent to two or more previously encoded or decoded blocks. As shown, current block 720 for prediction is surrounded by previously encoded or decoded top adjacent blocks 721, 722, 723, and left adjacent block 724. Although the previously encoded or decoded adjacent blocks are shown in FIG. 7 to be above and to the left of current block 720, in some implementations, previously encoded or decoded adjacent blocks may be below or to the right of the current block, or some combination of top, left, bottom or right (e.g., depending on the scan order).
[0065] As shown in FIG. 7, current block 720 is a 16 X 16 block, adjacent block 721 is an 8 X 8 block, adjacent blocks 722, 723 are 4 X 4 blocks, and adjacent block 724 is a 16 x 16 block. Although 16 X 16, 8x8, and 4x4 blocks are shown in FIG. 7, any other block sizes are may be used in accordance with this disclosure.
[0066] An overlap region may be determined for the overlapped prediction of current block 720 with respect to one or more previously encoded or decoded adjacent blocks. For example, pixels in current block 720 are grouped within defined overlap regions, where an overlap region is determined for one or more top adjacent blocks, such as overlap regions 731, 732, and 733 corresponding to adjacent blocks 721, 722, and 733, respectively, and overlap region 734, shown as at the left half of current block 720, corresponding to left adjacent block 724. As shown in FIG. 7, overlap regions themselves may overlap, such as shown with overlap regions 731 and 734, where overlap region 731 includes an intersection of overlap regions corresponding to top adjacent block 721 and left adjacent block 724. As shown, the overlap regions 731-734 are within the current block 720 and are adjacent to respective corresponding adjacent blocks 721-724.
[0067] The weighted function for the overlapped prediction may determine the overlap region size. The size of the overlap region may correspond with the size of the corresponding adjacent block, such as a corresponding column dimension v, row dimension w, or both. A vXw overlap region size may correspond to an x x y adjacent block size, where v = x and w = y. For example, an overlap region such as an 8 x 8 overlap region 731 within current block 720, as shown in FIG. 7, is determined with respect to 8 x 8 adjacent block 721.
[0068] The size of the overlap region may correspond with the size of the current block, such as such as a corresponding column dimension v, row dimension w, or both. In some implementations, avXw overlap region size may correspond to a x' x y' current block size, where v = x' and w = y’. As an example, the current block may be smaller than an adjacent block, and the overlap region size for one dimension is limited to the size of the current block at the boundary of the adjacent block. As another example, 4x8 overlap regions 732 and 733 as shown in FIG. 7 are determined with respect to 4 X 4 adjacent blocks 722 and 733, respectively, and the number of rows correspond to half of a 16 X 16 current block size dimension, where w =1/2 y’ = 8. A v X w overlap region size may correspond to a x' X y' current block size, where v = x'/2 and w = y\ For example, an 8X16 overlap region 734 is determined with respect to 16 X 16 left adjacent block 724. The size of the overlap region may correspond with both the adjacent block size and the current block size. Other variants of overlap region sizes may be used.
[0069] A weighted function index that indicates which one of various discrete overlap region sizes is used as a common size for all overlap regions may be included in the encoded bitstream. Relatedly, decoding the block may include decoding the index to determine which of the discrete overlap region sizes to use for the overlapped prediction weighted function. As an example, a first index may indicate that all overlap regions have a size with a first dimension equal to the adjacent block edge length, and a second dimension that extends Vi the length of current block, such as overlap region 732 shown in FIG. 7. A second index may indicate that all overlap regions have a first dimension equal to the adjacent block edge, and a second dimension that extends lA the length of the current block, such as overlap region 904 shown in FIG. 8. Encoding may include determining a weighted function that maps different relative sizes for each of the overlap regions, depending on prediction parameters for the adjacent blocks. For example, encoding may include generating multiple prediction block candidates according to various weighted functions, determining a rate distortion cost estimate for each candidate, and selecting the weighted function that provides the best rate distortion optimization (e.g., the lowest rate-distortion error).
[0070] FIG. 8 is a block diagram of example size variations of overlap regions in accordance with implementations of this disclosure. A dimension of the overlap region may exceed a corresponding dimension of the corresponding adjacent block. For example, as shown in FIG. 8, overlap region 902 corresponding with adjacent block 722 is determined having a horizontal size greater than the number of horizontal pixels in corresponding adjacent block 722, and equal in vertical size. As another example, overlap region 904 corresponding with adjacent block 722 is determined according to the horizontal size of the adjacent block, and lA the vertical size of the current block. Both horizontal and vertical dimensions of the overlap region may exceed corresponding dimensions of the corresponding adjacent block. Both horizontal and vertical dimensions of the overlap region may be exceeded by corresponding dimensions of the corresponding adjacent block.
[0071] Various overlap region sizes may be determined by using a set of discrete sizing functions, from which the overlap region size may be adaptively selected as a function of a difference between prediction parameters of the current block and the adjacent prediction parameters of the corresponding adjacent block. A comparison between motion vectors of the current block and motion vectors of the corresponding adjacent block for the overlap region may indicate a motion vector difference that exceeds a threshold, and one or more dimensions of a default overlap region size are adjusted accordingly. The determination of the difference of the prediction parameters between the adjacent block and the current block may be based on a comparison of the temporal distance between reference frames for the adjacent block and for the current block, respectively. For example, the reference frame for the adjacent block may be the previously encoded frame and the reference frame for the current block may be a frame encoded before the previously encoded frame, and the difference may be measured by number of frames, or temporal distance, between the reference frames.
[0072] Both the adjacent block and the current block may be predicted according to an inter-prediction, in which case overlap region sizing of the weighted function may be according to the above description. One of the adjacent block or the current block may be predicted according to an intra-prediction with the other being predicted according to an inter-prediction. In this case, a usable comparison of prediction parameters may not be available. When a comparison of prediction parameters is not available, the weighted function may define an overlap region size according to a predetermined function of current block size. For example, the overlap region size may be defined as a small overlap region, such as being based on Vi of current block length. As another example, the size for the overlap region may be set to zero, or no overlap region, since the adjacent prediction may be considered too different from the current block prediction. In this latter case, overlapped prediction can be omitted.
[0073] A defined overlap region size may range between (0,0), which indicates no overlap region, and x' X y\ which indicate the current block size. The weighted function for the overlapped prediction may adjust the defined overlap region size based on a difference between prediction parameters. For example, for an overlap region, such as the overlap region 732 shown in FIG. 7, motion vector values of adjacent block 722 may be very similar to motion vector values of the current block, such as current block 720 shown in FIG. 7. Accordingly, the size adjustment to the defined overlap size may be omitted. As another example, the motion vector values of an adjacent block, such as adjacent block 722 shown in FIG. 7, may differ from motion vector values of a current block, such as the current block 720 shown in FIG. 7, the difference may exceed an established threshold. In this case, the overlap region size may be adjusted. For example, the overlap region may be expanded as shown for overlap region 902, or may be contracted as shown for overlap region 904, as shown in FIG. 8. Adapting the overlap region size based on differences between prediction parameters may include adapting the weighted function of the overlapped prediction such that the weighting can be weighted to favor the contribution of the current block prediction parameters or the adjacent block prediction parameters depending on which prediction parameters optimize the overlapped prediction of the current block. For example, the weighted function may weight a contribution from the adjacent block prediction parameters to zero for some pixels in the current block by setting at least one dimension of the overlap region to be less than a corresponding dimension of the current block.
[0074] An overlap region may be omitted on a condition that the difference between prediction parameters of the current block and the adjacent block exceeds a threshold (i.e., the size of the overlap region is 0 X 0). An overlap region may be omitted on a condition that there is little or no difference between prediction parameters of the current block and the adjacent block. For example, the current block prediction may be substantially similar to the adjacent block prediction, the difference between prediction parameters may be less than a minimum threshold, and the size of the overlap region may be 0x0.
[0075] A base prediction may be determined for current block 720 using prediction parameters for current block 720. The base prediction may then be the base prediction for each overlap region 731-734. For example, a base prediction block may be determined for the entire current block, such that pixel values for the base prediction may be stored for later use when determining the overlapped prediction for each pixel in the overlap regions of the current block 720.
[0076] A prediction may be determined for each of the overlap regions, such as the overlap regions 731-734 shown in FIG. 7, based on prediction parameters of the adjacent block associated with the overlap region. For example, a prediction is determined for the pixels in an overlap region, such as the overlap region732 shown in FIG. 7, using prediction parameters that include corresponding reference frame and motion vectors for an adjacent block, such as adjacent block 722 shown in FIG. 7.
[0077] An overlapped prediction may be determined for one or more overlap region, such as the overlap regions 731-734 shown in FIG. 7, as a weighted function of the base prediction and predictions based on the respective adjacent prediction parameters. For example, the overlapped prediction for each pixel in overlap region, such as overlap region 732 shown in FIG. 7, is an average of the base prediction value and the prediction pixel value generated based on the respective adjacent prediction parameters. There may be more than one overlap region for a pixel in the current block. For example, two or more adjacent overlap regions may overlap, such as overlap regions 731, 732, and 733 shown in FIG. 7 and the overlapped prediction is determined as an average of the base prediction based on the prediction parameters for the current block, and n predictions based on the respective prediction parameters for each of the n adjacent blocks associated with the overlap regions.
For example, referring to FIG. 7, pixels in both overlap region 731 and 734 correspond to two predictions based on the respective adjacent prediction parameters (i.e., n=2), which may be averaged with the base prediction to determine the overlapped prediction. Each pixel in overlap region 731 may be determined as an average of a base prediction using prediction parameters of the current block 720, a prediction based on prediction parameters of the adjacent block 721, and a prediction based on prediction parameters of the adjacent block 724.
[0078] The weighted function for overlapped prediction may be a function of distance between the center of the current block and the center of an adjacent block associated with the overlap region. For example, the weighted function may determine an overlapped prediction that favors smaller sized adjacent blocks, which includes pixels located, on average, closer to the current block than larger adjacent blocks, and hence may be more reliable and provide a better prediction of the current block. For example, the weighted function weights overlap region 732 to contribute more heavily to the overlapped prediction of current block 720 than larger overlap region 734, as the center of adjacent block 722 is closer to the center of current block 720 compared to the center of adjacent block 724.
[0079] FIG. 9 is a block diagram of an example weighted function for overlapped prediction in accordance with implementations of this disclosure. The overlapped prediction may be optimized by a weighted average of the first prediction and the n adjacent block-based predictions. For example, Po indicates the prediction using current block prediction parameters, coo indicates the weight for prediction Po, Pn indicates the prediction using adjacent block prediction parameters, co„ indicate the weight for prediction Pn, and weighting of the overlapped prediction OP of pixel 952 is expressed as the following equation (1):
[0080] One or more predicted pixel values at each pixel in an overlap region may be weighted according to a weighted function based on the relative pixel position with respect to the adjacent block associated with the overlap region. For example, the overlapped prediction may be weighted such that a contribution by the prediction based on adjacent block prediction parameters is greater when the pixel is located relatively nearer to the adjacent block. For example, pixel 952 in overlap region 734 shown in FIG. 9 has a relative distance 954 to the center of corresponding adjacent block 724 and a relative distance 955 to the center of current block 720. Overlapped prediction weights ω0, ωη are a function of relative distances 954, 955. For example, d0 indicates the relative distance from pixel to center of current block, dn indicates the relative distance from pixel to center of adjacent block n, and the weighted function is a proportion of the relative distance values, which may be expressed as the following equations (2) and (3):
[0081] Overlapped prediction weights ω0, ωη may be a function of a directional relative distance between the pixel and the boundary between the adjacent block and the current block, such as horizontal relative distance 964 for left adjacent block 724. For example, the weighted function may be based on a raised cosine window function in which weights ω0, ωη are equal for a pixel located at the adjacent edge of overlap region n, and weights are ω0=1 , ωη=0 for a pixel located at the edge of the overlap region farthest from adjacent block n. As another example, overlapped prediction weights ω0, ωη may be a function of a vertical relative distance between the pixel and the nearest edge of the adjacent block, such as vertical relative distance 963 for pixel 953 with respect to top adjacent block 723.
[0082] The type of weighted function used for the overlapped prediction may be encoded with an index, such as by encoder 400 shown in FIG. 4, and included in the compressed video bitstream, such as the compressed video bitstream 404 shown in FIG. 4. The index is an indication for decoding, such as by the decoder 500 shown in FIG. 5, of which weighted function to use for overlapped prediction. For example, various raised cosine weightings may be mapped to a first set of indexes, and various weighted functions based on relative distance to block center points may be mapped to a second set of indexes.
[0083] The weighted function for overlapped prediction may be a combination of any or all weighted functions described in this disclosure. For example, the weighted function may be implemented to weight the overlapped prediction by adaptive adjustment of overlap region size, by weighting each of the base prediction and overlapped predictions for the current block, or a combination thereof.
[0084] The words “example” or “aspect” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “aspect” not necessarily to be construed as preferred or advantageous over other aspects or designs.
Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an embodiment” or “an implementation” throughout is not intended to mean the same embodiment or implementation unless described as such. As used herein, the terms “determine” and “identify”, or any variations thereof, includes selecting, ascertaining, computing, looking up, receiving, determining, establishing, obtaining, or otherwise identifying or determining in any manner whatsoever using one or more of the devices shown in FIG. 1.
[0085] Further, for simplicity of explanation, although the figures and descriptions herein may include sequences or series of steps or stages, elements of the methods disclosed herein can occur in various orders and/or concurrently. Additionally, elements of the methods disclosed herein may occur with other elements not explicitly presented and described herein. Furthermore, not all elements of the methods described herein may be required to implement a method in accordance with the disclosed subject matter.
[0086] The implementations of the transmitting station 100A and/or the receiving station 100B (and the algorithms, methods, instructions, etc. stored thereon and/or executed thereby) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmitting station 100A and the receiving station 100B do not necessarily have to be implemented in the same manner.
[0087] Further, in an implementation, for example, the transmitting station 100A or the receiving station 100B can be implemented using a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein. In addition or alternatively, for example, a special purpose computer/processor can be utilized which can contain specialized hardware for carrying out any of the methods, algorithms, or instructions described herein.
[0088] The transmitting station 100A and receiving station 100B can, for example, be implemented on computers in a real-time video system. Alternatively, the transmitting station 100A can be implemented on a server and the receiving station 100B can be implemented on a device separate from the server, such as a hand-held communications device. In this instance, the transmitting station 100A can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using a decoder 500. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 100A. Other suitable transmitting station 100A and receiving station 100B implementation schemes are available. For example, the receiving station 100B can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 400 may also include a decoder 500.
[0089] Further, all or a portion of implementations can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
[0090] The above-described implementations have been described in order to allow easy understanding of the application are not limiting. On the contrary, the application covers various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structure as is permitted under the law.
Claims (22)
1. A method of encoding frames of a video stream, comprising encoding a current block of a current frame, the encoding comprising: generating a base prediction block for the current block based on current prediction parameters associated with the current block; identifying adjacent prediction parameters used for encoding previously encoded adjacent blocks that are adjacent to the current block, wherein at least one side of the current block is adjacent to two or more of the previously encoded adjacent blocks; determining overlap regions in the current block, wherein each of the overlap regions corresponds to a respective previously encoded adjacent block; and generating an overlapped prediction of pixel values for each of the overlap regions according to a weighted function of the base prediction block and a prediction based on the adjacent prediction parameters, wherein the weighted function is based on a difference between the current prediction parameters and the adjacent prediction parameters.
2. The method of claim 1, further comprising: identifying adjacent prediction parameters used for encoding a plurality of previously encoded adjacent blocks of variable sizes; for each previously encoded adjacent block, determining an overlap region within the current block and adjacent to the adjacent block, the overlap region having a size corresponding with the size of the current block and the adjacent block.
3. The method of claim 2, further comprising encoding an index indicating an overlapped prediction for the current block.
4. The method of claim 3, wherein the index includes information for weighted function type, including one of a proportion for relative distance of a pixel to a center point of the current block and a center point of the adjacent block, and a raised cosine window function for relative distance of the pixel to the adjacent block.
5. The method of any preceding claim, further comprising determining weights for the weighted function as a function of distance between each respective pixel and a boundary between the current block and the adjacent block.
6. The method of any of claims 1 to 4, further comprising determining weights for the weighted function as a function of distance between each respective pixel and the center of the current block, and distance between each respective pixel and the center of the adjacent block.
7. The method of any preceding claim, further comprising: generating overlapped predictions for each previously encoded adjacent block using at least two discrete overlap region sizes; determining a rate distortion cost for each of the overlapped predictions; selecting an overlap region size for all overlapped predictions based on rate distortion cost optimization; encoding a weighted function index that indicates the selected overlap region size.
8. The method of claim 1, further comprising: generating an overlapped prediction block based on all overlap predictions in the current block; and selecting a prediction block for the current block as one of the base prediction block or the overlapped prediction block based on which produces lower residual values.
9. The method of any preceding claim, wherein the weighted function determines a size for the overlap region.
10. The method of any preceding claim, wherein the weighted function includes greater contribution from a smaller adjacent block for the overlapped prediction.
11. A method, comprising: encoding a current block in a current frame of a video stream, comprising: determining a first overlap region within the current block and adjacent to a previously encoded first adjacent block, wherein at least one side of the current block is adjacent to two or more of the previously encoded adjacent blocks; and generating an overlapped prediction of pixel values in the first overlap region as a weighted function of: a first prediction using first prediction parameters of the current frame, and a second prediction using second prediction parameters of the first adjacent block, wherein the weighted function is adaptable by a function of a difference between the first prediction parameters and the second prediction parameters.
12. The method of claim 11, wherein the first prediction parameters include motion vectors corresponding to a reference frame for the current frame, and the second prediction parameters include motion vectors used for prediction of the first adjacent block, and the difference is based on motion vector values.
13. The method of claim 11 or 12, wherein the function of a difference is based on temporal distance between a reference frame of the current block and a reference frame of the first adjacent block.
14. The method of any of claims 11 to 13, further comprising: defining a second overlap region within the current block and adjacent to a second adjacent block, the second overlap region having a size corresponding with a size of the second adjacent block, wherein the second adjacent block is encoded with third prediction parameters; and generating a prediction of the second overlap region as a function of the first prediction and a third prediction using the third prediction parameters from the second adjacent block.
15. The method of claim 14, wherein at least a portion of the first overlap region overlaps at least a portion of the second overlap region to form a fourth overlap region, the method further comprising: generating a prediction of the fourth overlap region as a function of the first prediction, the second prediction using the second prediction parameters from the adjacent block, and the third prediction using third prediction parameters from the second adjacent block.
16. A method of encoding a current block of a current frame in a plurality of frames of a video stream, comprising: generating a first prediction block of pixel values in the current block based on a first prediction using first prediction parameters; defining an overlap region within the current block and adjacent to an adjacent block among a plurality of previously encoded blocks having variable block sizes, wherein at least one side of the current block is adjacent to two or more of the previously encoded blocks; and generating an updated prediction of pixel values for pixels within the overlap region, the updated prediction being a weighted function of the first prediction and a second prediction, the second prediction being based on second prediction parameters, wherein the weighted function is adaptable by a function of a difference between the first prediction parameters and the second prediction parameters.
17. The method of claim 16, further comprising: generating an overlapped prediction block based on a plurality of updated predictions in the current block corresponding to overlap regions defined for previously encoded top adjacent blocks and previously encoded left adjacent blocks; and generating a prediction block for the current block as one of the first prediction block or the overlapped prediction block based on which produces lower residual values.
18. The method of claim 16 or 17, further comprising weighting the updated prediction in such a way that contribution by the second prediction is greater when the pixel is located relatively nearer to the adjacent block.
19. The method of claim 16 or 17, wherein the weighted function includes weights for the first prediction and the second prediction, the weights being determined as a function of distance between each respective pixel and a boundary between the current block and the adjacent block.
20. The method of claim 16 or 17, wherein weights for the pixel values of the first prediction are determined as a function of distance between each respective pixel and center of the current block, and weights for each of the pixel values of the second prediction are determined as a function of distance between each respective pixel and the center of the adjacent block.
21. Apparatus arranged to carry out the method steps of any preceding claim.
22. The apparatus of claim 21 comprising one or more processors and a memory, the memory storing instructions arranged to carry out the method steps of any of claims 1 to 20 when executed on the one or more processors.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/174,223 US10567793B2 (en) | 2016-06-06 | 2016-06-06 | Adaptive overlapped block prediction in variable block size video coding |
Publications (3)
Publication Number | Publication Date |
---|---|
GB201621884D0 GB201621884D0 (en) | 2017-02-01 |
GB2551234A true GB2551234A (en) | 2017-12-13 |
GB2551234B GB2551234B (en) | 2020-09-30 |
Family
ID=57794394
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
GB1621884.4A Active GB2551234B (en) | 2016-06-06 | 2016-12-21 | Adaptive overlapped block prediction in variable block size video coding |
Country Status (5)
Country | Link |
---|---|
US (1) | US10567793B2 (en) |
CN (1) | CN107465923B (en) |
DE (2) | DE102016125535A1 (en) |
GB (1) | GB2551234B (en) |
WO (1) | WO2017213700A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10390033B2 (en) * | 2016-06-06 | 2019-08-20 | Google Llc | Adaptive overlapped block prediction in variable block size video coding |
WO2019157717A1 (en) * | 2018-02-14 | 2019-08-22 | 北京大学 | Motion compensation method and device, and computer system |
CN112055965A (en) * | 2018-04-04 | 2020-12-08 | 日本放送协会 | Predictive image correction device, image encoding device, image decoding device, and program |
CA3102615A1 (en) * | 2018-07-06 | 2020-01-09 | Mitsubishi Electric Corporation | Bi-prediction video coding with adaptive weights |
CN111507903B (en) * | 2020-04-16 | 2021-05-11 | 鲁东大学 | Image amplification method and device based on pentagonal surface piece weighted average fitting |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150163509A1 (en) * | 2013-12-06 | 2015-06-11 | Mediatek Inc. | Method and Apparatus for Fine-grained Motion Boundary Processing |
US20160330475A1 (en) * | 2015-05-05 | 2016-11-10 | Broadcom Corporation | Apparatus and method for overlapped motion compensation for video coding |
Family Cites Families (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2853553B2 (en) * | 1994-02-22 | 1999-02-03 | 日本電気株式会社 | Video coding method |
US7653133B2 (en) | 2003-06-10 | 2010-01-26 | Rensselaer Polytechnic Institute (Rpi) | Overlapped block motion compression for variable size blocks in the context of MCTF scalable video coders |
KR20100015456A (en) * | 2007-04-09 | 2010-02-12 | 엘지전자 주식회사 | A method and an apparatus for processing a video signal |
CN101046964B (en) * | 2007-04-13 | 2011-09-14 | 清华大学 | Error hidden frame reconstruction method based on overlap change compression coding |
US9445121B2 (en) * | 2008-08-04 | 2016-09-13 | Dolby Laboratories Licensing Corporation | Overlapped block disparity estimation and compensation architecture |
KR101420957B1 (en) * | 2010-03-31 | 2014-07-30 | 미쓰비시덴키 가부시키가이샤 | Image encoding device, image decoding device, image encoding method, and image decoding method |
EP2375744A1 (en) | 2010-04-12 | 2011-10-12 | Panasonic Corporation | Complexity reduction for 1/8-pel interpolation |
CN102256126A (en) * | 2011-07-14 | 2011-11-23 | 北京工业大学 | Method for coding mixed image |
EP3078196B1 (en) | 2013-12-06 | 2023-04-05 | MediaTek Inc. | Method and apparatus for motion boundary processing |
CN104079937B (en) * | 2014-07-16 | 2017-06-23 | 山东大学 | It is a kind of based on motion vector analysis by H.264 to the quick interframe code-transferring method and transcoding device of HEVC |
US10390033B2 (en) * | 2016-06-06 | 2019-08-20 | Google Llc | Adaptive overlapped block prediction in variable block size video coding |
US10419777B2 (en) * | 2016-12-22 | 2019-09-17 | Google Llc | Non-causal overlapped block prediction in variable block size video coding |
-
2016
- 2016-06-06 US US15/174,223 patent/US10567793B2/en active Active
- 2016-12-21 GB GB1621884.4A patent/GB2551234B/en active Active
- 2016-12-23 DE DE102016125535.1A patent/DE102016125535A1/en active Pending
- 2016-12-23 DE DE202016008191.9U patent/DE202016008191U1/en active Active
- 2016-12-23 WO PCT/US2016/068473 patent/WO2017213700A1/en active Application Filing
- 2016-12-30 CN CN201611254152.XA patent/CN107465923B/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150163509A1 (en) * | 2013-12-06 | 2015-06-11 | Mediatek Inc. | Method and Apparatus for Fine-grained Motion Boundary Processing |
US20160330475A1 (en) * | 2015-05-05 | 2016-11-10 | Broadcom Corporation | Apparatus and method for overlapped motion compensation for video coding |
Also Published As
Publication number | Publication date |
---|---|
CN107465923A (en) | 2017-12-12 |
WO2017213700A1 (en) | 2017-12-14 |
US10567793B2 (en) | 2020-02-18 |
US20170353735A1 (en) | 2017-12-07 |
DE202016008191U1 (en) | 2017-04-27 |
GB2551234B (en) | 2020-09-30 |
GB201621884D0 (en) | 2017-02-01 |
DE102016125535A1 (en) | 2017-12-07 |
CN107465923B (en) | 2020-09-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10009625B2 (en) | Low-latency two-pass video coding | |
US10104398B2 (en) | Super-transform video coding | |
US10694180B2 (en) | Entropy coding transform partitioning information | |
GB2546888B (en) | Tile copying for video compression | |
US10701398B2 (en) | Context adaptive scan order for entropy coding | |
US9247251B1 (en) | Right-edge extension for quad-tree intra-prediction | |
USRE49615E1 (en) | Coding interpolation filter type | |
CN107465923B (en) | Adaptive overlapped block prediction in variable block size video coding | |
US20170237939A1 (en) | Loop filtering for multiform transform partitioning | |
CN107465925B (en) | Adaptive overlapped block prediction in variable block size video coding | |
EP3198555B1 (en) | Frequency-domain denoising | |
US10652552B1 (en) | Efficient noise reduction coding | |
EP3219103B1 (en) | Alternating block constrained decision mode coding | |
US20200252656A1 (en) | Adjustable per-symbol entropy coding probability updating for image and video coding | |
WO2024005777A1 (en) | Circular-shift transformation for image and video coding | |
EP4252419A1 (en) | Chroma transform type determination |