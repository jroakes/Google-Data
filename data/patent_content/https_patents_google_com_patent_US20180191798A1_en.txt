US20180191798A1 - Methods and systems for server-side rendering of native content for presentation - Google Patents
Methods and systems for server-side rendering of native content for presentation Download PDFInfo
- Publication number
- US20180191798A1 US20180191798A1 US15/415,322 US201715415322A US2018191798A1 US 20180191798 A1 US20180191798 A1 US 20180191798A1 US 201715415322 A US201715415322 A US 201715415322A US 2018191798 A1 US2018191798 A1 US 2018191798A1
- Authority
- US
- United States
- Prior art keywords
- content
- presentation
- rendered
- client device
- data processing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000009877 rendering Methods 0.000 title claims abstract description 94
- 238000000034 method Methods 0.000 title claims abstract description 81
- 238000012545 processing Methods 0.000 claims abstract description 98
- 238000013515 script Methods 0.000 claims description 38
- 230000003993 interaction Effects 0.000 claims description 18
- 230000000007 visual effect Effects 0.000 claims description 9
- 238000013507 mapping Methods 0.000 description 18
- 238000006243 chemical reaction Methods 0.000 description 15
- 238000004891 communication Methods 0.000 description 15
- 238000010586 diagram Methods 0.000 description 14
- 238000004590 computer program Methods 0.000 description 13
- 230000003044 adaptive effect Effects 0.000 description 12
- 238000004513 sizing Methods 0.000 description 12
- 230000008569 process Effects 0.000 description 7
- 230000009471 action Effects 0.000 description 6
- 230000004044 response Effects 0.000 description 5
- 238000012546 transfer Methods 0.000 description 5
- 238000002474 experimental method Methods 0.000 description 4
- 230000000670 limiting effect Effects 0.000 description 4
- 230000002829 reductive effect Effects 0.000 description 4
- 238000013499 data model Methods 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 238000001914 filtration Methods 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000003491 array Methods 0.000 description 1
- 238000013475 authorization Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 230000000116 mitigating effect Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
Images
Classifications
-
- H04L65/602—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/103—Formatting, i.e. changing of presentation of documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/103—Formatting, i.e. changing of presentation of documents
- G06F40/117—Tagging; Marking up; Designating a block; Setting of attributes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/131—Fragmentation of text files, e.g. creating reusable text-blocks; Linking to fragments, e.g. using XInclude; Namespaces
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/143—Markup, e.g. Standard Generalized Markup Language [SGML] or Document Type Definition [DTD]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/186—Templates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
- G06Q30/0601—Electronic shopping [e-shopping]
- G06Q30/0641—Shopping interfaces
- G06Q30/0643—Graphical representation of items or shoppers
-
- H04L65/4084—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/60—Network streaming of media packets
- H04L65/61—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio
- H04L65/612—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio for unicast
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/60—Network streaming of media packets
- H04L65/75—Media network packet handling
- H04L65/762—Media network packet handling at the source
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/06—Protocols specially adapted for file transfer, e.g. file transfer protocol [FTP]
-
- H04L67/36—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/561—Adding application-functional data or data for application control, e.g. adding metadata
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/75—Indicating network or usage conditions on the user display
-
- G06F17/2247—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H04L67/42—
Definitions
- data from a server can be delivered to a client device responsive to a request for content.
- the client device receives the data from the server.
- the data can include instructions for rendering content corresponding to the data for display at the client device.
- Client devices can include a content rendering application or functionality for rendering the content and displaying the rendered content via a display component of or coupled to the client device.
- a method for server-side rendering of native content for presentation within an environment of an application includes receiving, by a data processing system, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource.
- the method further includes accessing, by the data processing system using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource.
- the method further includes identifying, by the data processing system, responsive to the request for content, a content asset including a plurality of content components.
- the method further includes rendering, by a content renderer of the data processing system, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot.
- the method further includes transmitting, by the data processing system, the rendered content file to the client device for display within the content slot of the resource.
- the request for content includes a size value of the requested content.
- identifying the presentation schema includes identifying, by the data processing system, a plurality of presentation schemas, each of the presentation schemas including a respective presentation schema identifier corresponding to the content slot identifier; identifying, by the data processing system, a subset of the plurality of presentation schemas, each of the presentation schemas included in the subset including a size attribute matching the size value of the requested content; and selecting, by the data processing system, the identified presentation schema from the subset of the plurality of presentation schemas.
- the rendered content file includes a script configured to transmit, responsive to an interaction with the rendered content file, an indication of an interaction with the rendered content file at the client device.
- the method further includes inserting, by the data processing system, an address of a server to which the indication of the interaction is transmitted from the client device.
- the rendered content file includes a HyperText Markup Language (HTML) script configured to display the rendered content file at the client device.
- the rendered content file includes a Cascading Style Sheets (CSS) script configured to display the rendered content file at the client device.
- the presentation schema includes a plurality of style parameters, each of the style parameters including a value matching a value of the resource of the entity.
- the style parameters include a section category to be displayed in the content slot, a background color of the content slot, a font size of text, a position of the text, or a position of an image.
- visual characteristics of the rendered content file substantially match visual characteristics of the environment of the application.
- a system for server-side rendering of native content for presentation within an environment of an application includes a processor.
- the system further includes a memory coupled to the processor, the memory storing computer-executable instructions, which when executed by the processor, cause the processor to receive, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource; access, using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource; identify, responsive to the request for content, a content asset including a plurality of content components; render, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot; and transmit the rendered content file to the client device for display within the content slot of the resource.
- the request for content includes a size value of the requested content.
- the memory stores the computer-executable instructions, which when executed by the processor, further cause the processor to identify a plurality of presentation schemas, each of the presentation schemas including a respective presentation schema identifier corresponding to the content slot identifier; identify a subset of the plurality of presentation schemas, each of the presentation schemas included in the subset including a size attribute matching the size value of the requested content; and select the identified presentation schema from the subset of the plurality of presentation schemas.
- the rendered content file includes a script configured to transmit, responsive to an interaction with the rendered content file, an indication of an interaction with the rendered content file at the client device.
- the memory stores the computer-executable instructions, which when executed by the processor, further cause the processor to insert an address of a server to which the indication of the interaction is transmitted from the client device.
- the rendered content file includes a HyperText Markup Language (HTML) script configured to display the rendered content file at the client device.
- the rendered content file includes a Cascading Style Sheets (CSS) script configured to display the rendered content file at the client device.
- HTML HyperText Markup Language
- CSS Cascading Style Sheets
- the presentation schema includes a plurality of style parameters, each of the style parameters including a value matching a value of the resource of the entity.
- the style parameters include a section category to be displayed in the content slot, a background color of the content slot, a font size of text, a position of the text, or a position of an image.
- visual characteristics of the rendered content file substantially can match visual characteristics of the environment of the application.
- content may be selected for display.
- the selected content may be transmitted to a computer associated with a user for display as part of a user interface.
- the content may take any convenient form, and may for example be components of an interactive graphical user interface.
- aspects can be implemented in any convenient form.
- aspects may be implemented by appropriate computer programs which may be carried on appropriate carrier media which may be tangible carrier media (e.g. disks) or intangible carrier media (e.g. communications signals).
- Aspects may also be implemented using suitable apparatus which may take the form of programmable computers running computer programs arranged to implement aspects. Aspects may be combined and features described in the context of one aspect may be combined with features of other aspects.
- FIG. 1 is a block diagram depicting an environment for server-side rendering of native content according to illustrative implementations
- FIG. 2 is a block diagram depicting a content rendering module according to illustrative implementations
- FIG. 3 is a block diagram depicting a data model used by a content rendering module according to illustrative implementations
- FIG. 4A and FIG. 4B are block diagrams depicting sequences of rendering and transmitting content according to illustrative implementations
- FIG. 5 is a flow diagram depicting a method for server-side rendering of native content according to illustrative implementations.
- FIG. 6 is a block diagram illustrating a general architecture for a computer system that may be employed to implement elements of the systems and methods described and illustrated herein, according to illustrative implementations.
- the present disclosure relates to systems and methods for rendering native content at a server and transmitting the rendered native content to a client device for display on a web or mobile application.
- Native content can be rendered by an application (e.g., a mobile application or a web browser) executing on a client device and presented for display within an environment of the application.
- an application e.g., a mobile application or a web browser
- a raw content asset including one or more content components are transmitted from a server to the client device, where the application at the client device utilizes specialized rendering tools, scripts, or instructions to assemble the content components of the raw content asset according to predetermined parameters of the application.
- the application renders the native content using the content components
- the application presents the rendered native content for display within the environment of the application such that the rendered content appears to have the same look and feel as publisher-generated content.
- the application requires one or more specialized content rendering scripts capable of causing the client device to properly render the native content.
- the size of the application is larger than an application that does not need the content rendering scripts to render the native content.
- the increased size of the application increases an amount of time it takes to download or transfer the application and also utilizes greater memory resources at the client device.
- the application on the client device is required to receive updates to the computer-executable instructions as updates to the rendering process are made. These updates utilize network resources and often may render the application inoperable until the updates are performed.
- the application at the client device needs to repeatedly be updated, requiring both the consumption of network resources and client device resources, including computing resources and battery or power resources.
- causing the client device to execute the computer-executable instructions to render the content at the client device can result in increased battery consumption as well as requiring additional computing resources that may adversely affect the performance of the client device.
- the rendering operations may be limited to accommodate the reduced availability of computing resources on each client device.
- content publishers may lose the ability to create and manage A/B experiments or optimize rendering (e.g., the content publishers may have to manually establish A/B experiments or incorporate such a mechanism in their applications at the client devices).
- Native content can include, for example, content having a similar form and function as primary content of the application, in which the native content is inserted.
- a method for server-side rendering of native content for presentation within an environment of an application includes receiving, by a data processing system, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource.
- the content slot identifier can be used by the server to determine a presentation schema according to which to assemble, arrange, style and/or present a content item within the content slot identified by the content slot identifier. Characteristics of the content item can substantially match characteristics of other content included in the application (e.g., font, text size, background color or pattern, etc).
- the method further includes accessing, by the data processing system using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource.
- the method further includes identifying, by the data processing system, responsive to the request for content, a content asset including a plurality of content components.
- the method further includes rendering, by a content renderer of the data processing system, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot.
- the method further includes transmitting, by the data processing system, the rendered content file to the client device for display within the content slot of the resource.
- FIG. 1 illustrates a system 100 for server-side rendering of content for presentation via at least one computer network, such as the network 105 .
- the network 105 can include computer networks such as the internet, local, wide, metro or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile phone communication networks, and combinations thereof.
- the system 100 can also include at least one data processing system 110 , e.g., at least one logic device such as a computing device or server having a processor to communicate via the network 105 , for instance with at least one content provider computing device 115 , at least one content publisher computing device 120 , or at least one end user computing device or client device 125 .
- the data processing system 110 can include at least one server.
- the data processing system 110 can include a plurality of servers located in at least one data center or server farm.
- the data processing system 110 includes a content placement system.
- the data processing system 110 can include at least one content request module 130 , at least one content rendering module 135 , at least one rendered content delivery module 140 , and at least one database 145 .
- the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 can each include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with the database 145 and with other computing devices (e.g., the content provider computing device 115 , the content publisher computing device 120 , or the end user computing device 125 ) via the network 105 .
- the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 can include or execute at least one computer program or at least one script.
- the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 can be separate components, a single component, or part of the data processing system 110 .
- the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to obtain requests to initiate a content item placement, identify information resources of the content publisher computing device 120 , provide a rendering of the information resource at the content provider computing device 115 , identify content item slots of the information resource, provide content items for display in the rendering of the information resource, or receive authorization to provide content items for display with the information resource at the end user computing device 125 , for instance.
- the content provider computing devices 115 can include servers or other computing devices operated by a content provider entity to provide content items such as content for display on information resources at the end user computing device 125 .
- the content provided by the content provider computing device 115 can include third party content items for display on information resources such as a website or web page that includes primary content, e.g. content provided by the content publisher computing device 120 .
- the content items can also be displayed on a search results web page.
- the content provider computing device 115 can provide or be the source of content items for display in content slots of content web pages such as a web page of a company where the primary content of the web page is provided by the company, for display on a search results landing page provided by a search engine, or for display in a mobile application at a mobile device.
- the content items associated with the content provider computing device 115 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other end user computing device 125 .
- the content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the network 105 .
- the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page.
- the primary content can include content other than that provided by the content publisher computing device 120
- the web page can include content slots configured for the display of third party content items from the content provider computing devices 115 .
- the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website.
- the web pages can include content slots configured for the display of third party content items such as content of the content provider computing device 115 .
- the content publisher computing device 120 includes a search engine computing device (e.g.
- search engine web pages e.g., a results or landing web page
- results of a search can include results of a search as well as third party content items displayed in content slots such as content items from the content provider computing device 115 .
- the end user computing devices 125 are client device that can include computing devices configured to communicate via the network 105 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 115 (e.g., third party content items configured for display in a content slot of a web page).
- the end user computing device 125 , the content provider computing device 115 , and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, end user computing devices, consumer computing devices, servers, clients, and other computing devices.
- the end user computing device 125 , the content provider computing device 115 , and the content publisher computing device 120 can include user interfaces such as microphones, speakers, touchscreens, keyboards, pointing devices, a computer mouse, touchpad, or other input or output interfaces.
- the content request module 130 can receive a request for content from the end user computing device 125 .
- the request for content can include a request for an information resource, a request for one or more third-party content items, or a combination thereof.
- the request for content can include a request for third-party content.
- the request for third-party content can include an address or identifier of an information resource on which the third-party content is to be displayed.
- the request for third-party content can also include or identify one or more parameters that can be used by the data processing system 110 to determine the content to provide in response to the request for content. For example, the parameters can identify a size of a content slot within which to insert the requested content.
- the parameters can identify a type of content associated with the information resource, a type of third-party content requested (e.g., text, image, video, etc.), end user computing device information, size information for requested third-party content item, a network type associated with the end user computing device 125 (e.g., cellular network, WiFi, etc.), an application ID associated with an application at the end user computing device 125 , attributes associated with the application ID, a current or past location of the end user computing device 125 , or a combination thereof. Further disclosure regarding content requests is described below in connection with FIG. 2 .
- the request for content can include a request for an information resource.
- the request for an information resource can include an address or identifier of the information resource.
- the request for the information resource can include a Uniform Resource Locator (URL) of a specific resource such as a webpage (e.g., “http://www.example.com”).
- the request for information resource can also include client device information (such as a device type, device identifier or a combination thereof).
- the data processing system 110 can also include one or more content repositories or databases 145 .
- the databases 145 can be local to the data processing system 110 .
- the databases 145 can be remote to the data processing system 110 but can communicate with the data processing system 110 via the network 105 .
- the databases 145 can include web pages, portions of webpages, third-party content items, and a prefetching script, among others, to serve to an end user computing device 125 .
- the content rendering module 135 can be configured to select a content item for rendering and delivery to an end user computing device 125 .
- the content rendering module 135 can access the database 145 for selection of the content item.
- the content rendering module 135 can also access a presentation schema lookup database for selecting a presentation schema that dictates how the selected content item should be rendered.
- the content rendering module 135 can render the content item based on the selected content item and the selected presentation schema.
- the rendered content item can include a native content item to be displayed within a content slot of an information resource such that the rendered content item substantially matches visual characteristics of an environment of the information resource. Further discussion regarding the content rendering module 135 is found below in connection with FIG. 2 .
- the rendered content delivery module 140 can be configured to receive the content item that is rendered by the content rendering module 135 .
- the rendered content delivery module 140 can deliver the rendered content to an end user computing device 125 .
- the rendered content item includes an identifier that allows the rendered content delivery module 140 to determine a particular destination end user computing device 125 to transmit the rendered content item.
- the identifier can be received by the content request module 130 along with a request for content from the particular end user computing device 125 .
- the rendered content delivered by the rendered content delivery module 140 can be configured with an interaction script.
- the interaction script includes computer-executable instructions that cause the end user computing device 125 to transmit an indication of an interaction with the delivered content sent to the end user computing device 125 from the data processing system 110 .
- the interaction can include a click, swipe, tap, hover-over with a cursor, or any other interaction with a content item.
- the computer-executable instructions can include a script, such as HyperText Markup Language (HTML), Extensible HyperText Markup Language (XHTML), Extensible Markup Language (XML), Cascading Style Sheets (CSS), and JavaScript, among others.
- the computer-executable instructions can be executed within an application or web browser of the end user computing device 125 , such as the application or web browser that caused the end user computing device 125 to transmit the content request received by the content request module 130 .
- the application can include, for example, an Internet browser, a mobile application, a gaming application, a GPS application, a virtual reality application, or any other computer program capable of reading and executing the computer-executable instructions.
- FIG. 2 is a block diagram depicting the content rendering module 135 according to illustrative implementations.
- the depicted components of the content rendering module 135 can include a portion of the content rendering module 135 , and FIG. 2 may not depict all components of the content rendering module 135 .
- the content rendering module 135 includes a conversion module 205 , a content manager 210 , a content asset database 215 , a presentation schema database 220 , and a script database 225 .
- the content asset database 215 , the presentation schema database 220 , and the script database 225 are all part of the database 145 .
- the database 145 can be separated or partitioned to include the data stored by the content asset database 215 , the presentation schema database 220 , and the script database 225 .
- the data processing system 110 can receive data from the content provider 115 and from the content publisher 120 and store the received data into the corresponding database 215 , 220 , 225 .
- the content provider 115 can transmit content asset data to the data processing system 110 , and the data processing system 110 can load and store that information in the content asset database 215 .
- the content publisher 120 can transmit presentation schema data to the data processing system 110 , which can be loaded and stored in the presentation schema database 220 .
- the conversion module 205 is configured to receive a content request, for example, from the content request module 130 . In some implementations, the conversion module 205 can be a part of the content request module 130 .
- the conversion module 205 can be configured to receive a content request in a Hypertext Transfer Protocol (HTTP) format.
- HTTP Hypertext Transfer Protocol
- the content request can be received from an application (e.g., from a mobile end user computing device 125 ) or from a webpage.
- the HTTP content request is initially sent from the end user computing device 125 .
- the HTTP content request includes a content slot identifier and size information of the requested content item.
- the content slot identifier can include an identifier that identifies a portion of an information resource that is to be supplied with the requested content item, such as, for example, a content slot identifier that identifies a content slot of the information resource.
- the size information can include one set of size dimensions or multiple sets of size dimensions. In some implementations, the size information is a fixed size (e.g., a pixel by pixel size dimension). In some implementations, the size information designates whether the requested size is adaptive, such that the returned rendered content item is configured to fit in variously-sized content slots.
- the content request indicates a request for a native content item. In some implementations, the content request indicates a request for a non-native content item. In some implementations, the content request does not designate whether the request is for a native or non-native content item.
- the conversion module 205 can be configured to convert the HTTP request into a format compatible with the content manager 210 .
- the conversion module 205 can be configured to parse the HTTP content request to include additional contextual information for use by the content manager 210 (e.g., information such as an application identifier of the application that sent the content request, a user identifier of a user of the application, or the like).
- the conversion module 205 can format the HTTP content request such that the formatted request can be one that the content manager 210 can parse through and extract information from for use in content selection.
- the content manager 210 can parse the content request formatted or modified by the conversion module 205 to be able to extract identifiers from the content request and retrieve content relevant to the extracted identifiers.
- the content manager 210 is a module that is configured to select a presentation schema that is compatible with the content slot identified by the content slot identifier and the provided size information. Accordingly, in some implementations, the content manager 210 selects a list of content assets based on the content slot identifier, selects a list of presentation schemas assigned to or otherwise associated with the content slot, and filters out content assets that do not include corresponding presentation schemas matching the size information and those that are not targeted to the identified content slot by the content slot identifier.
- the content manager 210 can include a content selection module 211 , a presentation lookup module 212 , a presentation filter 213 , and a ranking module 214 .
- the content selection module 211 can receive the content request including the content slot identifier and the size information.
- the content selection module 211 can access the content asset database 215 for selecting a list of native content assets responsive to the content request.
- a content provider of a content asset can assign or link the particular content asset to one or more content asset templates, and the content asset template can include a specification according to which content components of the content asset can be arranged.
- the content components can include, but are not limited to, a headline, an image, a body, a call to action, a logo, an attribution, a click through URL, or the like.
- the content selection module 211 can use a query to identify content assets from the content asset database 215 .
- the query can include the content slot identifier and the size information from the content request.
- the content asset database 215 can be accessed by the content selection module 211 to retrieve one or more content assets matching the content slot identifier and the size information.
- the content asset database 215 stores a plurality of content assets and links or otherwise associates each of the content assets with a content slot identifier.
- the content asset database 215 can match, map, or link content assets assigned to a particular content asset template that is compatible with a presentation schema assigned to a content slot.
- the content asset database 215 can further receive (e.g., from the content provider 115 ) sizing information of content assets and map each of the content assets stored in the content asset database 215 with the sizing information.
- the content selection module 211 can perform a lookup at the content asset database 215 based on the requested content slot identifier and the size information, and retrieve corresponding content assets.
- the returned native content assets can each include a content asset template identifier that can be used to identify presentation schemas, as discussed below.
- each of the retrieved native content assets can include or exclude a flag or other indicator indicating whether or not any presentation schemas are assigned to or otherwise associated with the native content asset (e.g., whether presentation schemas are assigned to or otherwise associated with the content asset template identifier). For example, if one of the matching content assets includes a flag indicating that there are no presentation schemas assigned to or otherwise associated with the content asset, the content asset database 215 can exclude the flagged native content asset from being returned to the content selection module 211 .
- the content asset database 215 can return native content assets (e.g., those that are unflagged), and can exclude native content assets that are flagged as not being assigned to or otherwise associated with any presentation schemas.
- the content selection module 211 transmits the returned content assets including the corresponding content asset template identifiers to the presentation filter module 213 .
- the presentation lookup module 212 receives the content request including the content slot identifier and the sizing information.
- the presentation lookup module 212 can identify all eligible presentation schemas assigned to or otherwise associated with the content slot identifier included in the content request by accessing the presentation schema database 220 .
- the presentation schema database 220 stores a plurality of presentation schemas and associates each of the presentation schemas with a content slot identifier.
- the presentation lookup module 212 can perform a lookup at the presentation schema database 220 based on the requested content slot identifier, and can retrieve corresponding presentation schemas.
- the presentation lookup module 212 can filter out presentations retrieved from the presentation schema database 220 that fail to match the sizing information included in the content request.
- the presentation lookup module 212 filters out those presentation schemas that fail to match any of the sizes included in the content request.
- the presentation lookup module 212 can further dedupe presentation schemas that have the same size and that belong to the same content asset template. Accordingly, the presentation lookup module 212 can return a presentation schema mapping that maps a content asset template to a list of eligible presentation schemas assigned to or otherwise associated with the content asset template.
- the presentation lookup module 212 can create a template map for identifying presentation schemas corresponding to content asset template identifiers as follows:
- the above mapping illustrates that one or more presentation schemas are mapped to a content asset template identifier.
- the presentation lookup module 212 can retrieve a list of sizes included in the content request (e.g., the list can include one size or multiple sizes).
- the presentation lookup module 212 can retrieve the content slot identifier from the content request, and retrieve all presentation schemas assigned to or otherwise associated with the content slot identifier from the presentation database 220 .
- the presentation lookup module 212 can ignore the already existing presentation schema.
- the presentation lookup module 212 can ignore the presentation schema. Otherwise, the presentation lookup module 212 can add a new entry to the mapping. Once completed, the presentation lookup module 212 can transmit the presentation schema mapping to the presentation filter 213 .
- the presentation filter 213 receives the presentation schema mapping from the presentation lookup module 213 and the eligible content assets from the content selection module 211 , and filters out those content assets that do not correspond to the presentation schema mapping. For example, the presentation filter 213 can identify the eligible content asset templates that correspond to the eligible presentation schemas by the presentation schema mapping. The presentation filter 213 can then exclude those content assets including content asset template identifiers that do not match the determined eligible content asset templates. In other words, the presentation filter 213 can filter out those content assets whose content asset templates do not belong in the presentation schema mapping (e.g., those content assets that do not have eligible presentation schemas assigned to or otherwise associated with the requested content slot). The presentation filter 213 can send the filtered list of content assets to the ranking module 214 .
- the ranking module 214 performs a selection of one of the content assets from the list of content assets. If the selected content asset is assigned to or otherwise associated with more than one presentation schema, as determined based on the presentation schema mapping, the ranking module 214 can randomly select one of the presentation schemas assigned to or otherwise associated with the selected content asset. As such, after selecting a presentation schema, the ranking module 214 can transmit an identifier assigned to or otherwise associated with the selected content asset and an identifier assigned to or otherwise associated with the selected presentation schema of the selected content asset to the conversion module 205 as a content response that is responsive to the initial content request received by the conversion module 205 .
- the conversion module 205 receives the identifiers of the selected content asset (e.g., the content asset template identifier) and the selected presentation schema of the selected content asset from the ranking module 214 .
- the conversion module 205 can access the script database 225 to retrieve presentation schema and content components corresponding to the selected presentation schema identifier and the selected content asset.
- the presentation schema can include one or more of HTML code, CSS code or other computer-executable instructions that can modify or influence a presentation of a content item.
- the scripts database 225 stores various presentation schemas, each of which can be assigned to or have a presentation schema identifier.
- the content asset database 215 can further assign each of the presentation schemas to one or more content asset template identifiers. As such, the conversion module 205 can perform a lookup in the script database 225 based on the presentation schema identifier and/or the content asset template identifier, and retrieve the corresponding presentation schemas.
- the conversion module 205 can render a content item based on the received presentation schema and content components.
- the conversion module 205 can send the rendered content item to the rendered content delivery module 140 .
- the client device 125 can be configured to adjust the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset.
- FIG. 3 is a block diagram depicting a data model 300 illustrating the links between content assets, content asset templates, presentation schemas, and content slots used by the content rendering module 135 according to illustrative implementations.
- the data model 300 can include one or more content assets 305 A, 305 B, 305 C and a content asset template 310 linked to each of the content assets 305 A, 305 B, 305 C.
- one or more presentation schemas 315 A, 315 B can be linked to the content asset template 310 .
- one or more content slots 320 A, 320 B, 320 C, and 320 D can be linked to each of the presentation schemas 315 A, 315 B.
- the content asset template 310 can define a set of content components
- the content assets 305 A, 305 B, 305 C can define values of those content components
- the presentation schemas 315 A, 315 B can define a look and feel of a rendered content item using the content components.
- Content publishers may desire to provide content items generated from content assets for display on resources.
- Content publishers may assign or otherwise associate one or more content assets with a content asset template used to generate content items for display using the content components of the content assets.
- the content assets can include a plurality of content components that are arranged together to generate the content item.
- a content asset template can be used to determine the manner in which content components of the content asset are to form or generate the content item.
- the content asset template can include instructions according to which the content components can be arranged.
- the content items generated from the content asset can be displayed in one or more content slots. These content slots can be included in information resources of content publishers.
- Content publishers can assign or otherwise associate one or more presentation schemas to each of the content slots.
- the content rendering module 135 can utilize the content asset template to arrange the content components of the content asset in a particular manner, and can further utilize one of the presentation schemas assigned or otherwise linked to the content slot and to the content asset template to update one or more fields with values from the presentation schema. For instance, if the presentation schema includes a color value of blue for the background, the content rendering module 135 can render the content item by assigning the color blue to the value corresponding to the background color for the content item, and in this way the content item is displayed with a blue background.
- the content assets 305 A, 305 B, 305 C can each include a plurality of values that are defined, for example, by the content provider 115 .
- the content asset template 310 can include a plurality of fields that can be assigned to or otherwise associated with content provider-defined values of each of the content assets 305 A, 305 B, 305 C.
- the content components can include, but are not limited to, headline, image, body text, call to action, logo, attribution, click through URL, or the like.
- the content asset 305 A can include different content components with respect to the content asset fields defined by the content asset template 310 from the content components defined by the content assets 305 B and 305 C (e.g., the “headline” content component of content asset 305 A can be different from the “headline” content component of content assets 305 B and 305 C).
- the content assets 305 A, 305 B, 305 C are each assigned to or otherwise associated with a different content provider 115 .
- the content assets 305 A, 305 B, 305 C are stored in the content asset database 215 .
- Each of the content assets 305 A, 305 B, 305 C stored in the content asset database 215 can be linked to the content asset template 310 so that the content asset template 310 can readily be identified based on the content assets 305 A, 305 B, 305 C.
- the content asset template can be assigned to or otherwise associated with a unique identifier, and each of the content assets 305 A, 305 B, 305 C can include or can point to the unique identifier of the content asset template 310 .
- the presentation schemas 315 A, 315 B can be stored in the presentation schemas database 220 .
- the presentation schemas 315 A, 315 B stored in the presentation schema database 220 can be linked by the content asset template 310 so that the presentation schemas 315 A, 315 B can readily be identified based on the content asset template 310 .
- the presentation schemas 315 A, 315 B can each be assigned to or otherwise associated with a unique identifier, and the content asset template 310 can include or can point to the unique identifiers of the presentation schemas 315 A, 315 B.
- each of the presentation schemas 315 A, 315 B can be assigned to or otherwise associated with one or more content slots.
- the presentation schema 315 A can be assigned to or otherwise associated with the content slots 320 A and 320 B
- the presentation schema 315 B can be assigned to or otherwise associated with the content slots 320 C and 320 D.
- each of the content slots 320 A, 320 B, 320 C, and 320 D can include a unique identifier
- each of the presentation schemas 315 A and 315 B stored in the presentation schema database 220 can include or otherwise be assigned to or otherwise associated with the respective unique identifiers of the content slots 320 A, 320 B, 320 C, and 320 D.
- each of the presentation schemas 315 A, 315 B can be assigned to or otherwise associated with or targeted to a particular content slot of an information resource (e.g., a content item slot of an information resource).
- the presentation schemas 315 A, 315 B are configured by one or more content publishers 120 .
- the presentation schemas 315 A, 315 B can each be assigned to or otherwise associated with and configured by a single content publisher 120 , and each of the presentation schemas 315 A, 315 B can be targeted to different information resources of the content publisher, different content slots on a same information resource of the content publisher 120 , different areas of a website or an application of the content publisher, or the like.
- the presentation schema 315 A can be targeted to a homepage feed content slot of the content publisher 120 and the presentation schema 315 B can be targeted to a category page rail content slot of the content publisher 120 .
- the presentation schemas 315 A, 315 B can represent publisher-configured structures and styles of native content items.
- the presentation schemas 315 A, 315 B may not depend on and are not influenced by a particular content asset (e.g., content assets 305 A, 305 B, 305 C) or content provider (e.g., content provider 115 ), as the presentation schemas 315 A, 315 B can include specifications for how native content items should appear in a given section of an application or website of the content publisher 120 .
- the content publisher 120 can configure a particular presentation schema with attributes such as, but not limited to, a background color, a font size, a font type, a font color, locations within a content item slot, and so on. These configurations are entered and stored in the presentation schema database 220 as presentation schemas.
- the presentation schemas can be configured to include an assigned size.
- the presentation schema 315 A can include a first size and the presentation schema 315 B can include a second size.
- the first size can include a fixed size in a pixel dimension form (e.g., 300 pixels ⁇ 500 pixels).
- the second size can include an adaptive size indicator.
- the adaptive size indicator can indicate that the presentation schema 315 B can be compatible with adaptive content slots (e.g., adaptive content item slots) that do not have a fixed size.
- the client device 125 can be configured to render the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset.
- the presentation schemas 315 A and 315 B are adapters that can convert native content assets (e.g., content assets 305 A, 305 B, and 305 C) into rendered content items of a particular size.
- FIG. 4A is a block diagram 400 depicting sequences of rendering and transmitting content according to illustrative implementations.
- FIG. 4B is a block diagram 450 depicting sequences of rendering and transmitting content according to illustrative implementations.
- the block diagram 400 illustrates a data processing system 410 transmitting content components (e.g., content asset values provided to the data processing system 410 by the content provider 115 ) to a plurality of client devices 420 A, 420 B, 420 C.
- the data processing system 410 can be similar to the data processing system 110 as described above, except that the data processing system 410 does not include the content rendering module 135 .
- the client devices 420 A, 420 B, 420 C can be similar to the end user computing device 125 as described above. Because the data processing system 410 does not include the content rendering module 135 , each of the client devices 420 A, 420 B, 420 C includes a content rendering module for rendering native content items.
- the content components stored at the data processing system 410 can include values for one or more fields, such as, but not limited to, a headline, body text, an image, and a logo.
- the data processing system 410 transmits the content components to each of the client devices 420 A, 420 B, 420 C.
- the client devices 420 A, 420 B, 420 C receive the content components, and the respective content rendering module at each of the client devices 420 A, 420 B, 420 C is rendered to generate a rendered content item for display at each of the client devices 420 A, 420 B, 420 C.
- Each of the content rendering modules of the client devices 420 A, 420 B, 420 C may render the content assets in a different arrangement depending on a presentation schema selected during the content rendering process.
- the application requires one or more specialized content rendering scripts capable of causing the client device to properly render the native content.
- the size of the application is larger than an application that does not need the content rendering scripts to render the native content.
- the increased size of the application increases an amount of time it takes to download or transfer the application and also utilizes greater memory resources at the client device.
- the application on the client device is required to receive updates to the computer-executable instructions as updates to the rendering process are made.
- the block diagram 450 illustrates a data processing system 110 transmitting rendered native content (e.g., content components provided to the data processing system 110 by the content provider 115 ) to a plurality of client devices 470 A, 470 B, 470 C.
- the data processing system 110 includes the content rendering module 135 that renders native content as described above.
- the client devices 470 A, 470 B, 470 C can be similar to the end user computing device 125 as described above.
- the client devices 470 A, 470 B, 470 C can be running an application (e.g., on a mobile client device) or a website in a web browser.
- each of the client devices 470 A, 470 B, 470 C does not require and does not include a content rendering module for rendering native content items.
- the content rendering module 135 may render the content assets in a different arrangement depending on a presentation schema selected during the content rendering process such that a different presentation of the rendered content is selected for each of the client devices 470 A, 470 B, 470 C.
- the application need not require one or more specialized content rendering scripts capable of causing the client device to properly render the native content because the client device does not perform the rendering, reducing the size of the application, decreasing an amount of time it takes to download or transfer the application, and also mitigating use of memory resources at the client device.
- the application on the client device need not receive updates to the computer-executable instructions as updates to the rendering process are made, reducing utilization of network resources, thereby reducing instances that may render the application inoperable until the updates are performed.
- the application at the client device need not be repeatedly updated, reducing both the consumption of network resources and client device resources, including computing resources and battery or power resources.
- the client device that receives rendered content from the data processing system 110 such that it doesn't need to render the content itself can result in reduced battery consumption as well as reduced computing resources.
- the rendering operations may be expanded to accommodate the increased availability of computing resources at the server.
- content publishers may be able to create and manage A/B experiments or optimize rendering (e.g., the content publishers may not need to manually establish A/B experiments or incorporate such a mechanism in their applications at the client devices).
- FIG. 5 is a flow diagram depicting a method 500 for server-side rendering of native content according to illustrative implementations.
- the method 400 can include receiving a request for content (BLOCK 510 ).
- the method can include accessing a database to identify a presentation schema (BLOCK 520 ).
- the method can include identifying, responsive to the request for content, a content asset including a plurality of content components (BLOCK 530 ).
- the method can include rendering, as a rendered content file, the plurality of content components based on the presentation schema (BLOCK 540 ).
- the method can include transmitting the rendered content file to a client device for display (BLOCK 550 ).
- the method 500 can include the data processing system 110 receiving a request for content (BLOCK 510 ).
- the content request can be in a Hypertext Transfer Protocol (HTTP) format.
- HTTP Hypertext Transfer Protocol
- the content request can be in an HHTP/2 format, an SPDY format, or any other suitable networking protocol for transferring content.
- the content request can be received from an application (e.g., from a mobile end user computing device) or from a webpage.
- the content request can be initially sent from the end user computing device.
- the content request includes a content slot identifier and size information of the requested content item.
- the content slot identifier can include an identifier that identifies a portion of an information resource that is to be supplied with the requested content item.
- the size information can include one set of size dimensions or multiple sets of size dimensions. In some implementations, the size information is a fixed size (e.g., a pixel by pixel size dimension). In some implementations, the size information designates whether the requested size is adaptive, such that the returned rendered content item is configured to fit in variously-sized content slots.
- the content request indicates a request for a native content item. In some implementations, the content request indicates a request for a non-native content item. In some implementations, the content request does not designate whether the request is for a native or non-native content item.
- the method 500 can include the data processing system 110 converting the HTTP request into a format compatible with a content manager.
- the method 500 can include the data processing system 110 parsing the HTTP content request to include additional contextual information for use by the content manager (e.g., information such as an application identifier of the application that sent the content request, a user identifier of a user of the application, or the like).
- the method 500 can include the data processing system 110 formatting the HTTP content request such that the formatted request can be one that the content manager can parse and extract information from for use in content selection.
- the method 500 can include the data processing system 110 parsing the formatted or modified content request to be able to extract identifiers from the content request and retrieve content relevant to the extracted identifiers.
- the method can include the data processing system 110 accessing a database to identify a presentation schema (BLOCK 520 ).
- the method 500 can include the data processing system 110 identifying all eligible presentation schemas assigned to or otherwise associated with the content slot identifier included in the content request by accessing a presentation schema database.
- the presentation schema database stores a plurality of presentation schemas and associates each of the presentation schemas with a content slot identifier.
- the method 500 can include the data processing system 110 performing a lookup at the presentation schema database based on the requested content slot identifier, and retrieving corresponding presentation schemas.
- the method 500 can include the data processing system 110 filtering out presentation schemas retrieved from the presentation schema database that fail to match the sizing information included in the content request.
- the method 500 can include the data processing system 110 filtering out those presentation schemas that fail to match any of the sizes included in the content request.
- the method 500 can include the data processing system 110 deduping presentation schemas that have the same size and that belong to the same content asset template. Accordingly, the method 500 can include the data processing system 110 returning a presentation schema mapping that maps a content asset template to a list of eligible presentation schemas assigned to or otherwise associated with the content asset template.
- the method 500 can include the data processing system 110 creating a template map for identifying presentation schemas corresponding to content asset template identifiers.
- the mapping can illustrate that one or more presentation schemas are mapped to a content asset template identifier.
- the method 500 can include the data processing system 110 retrieving a list of sizes included in the content request (e.g., the list can include one size or multiple sizes).
- the method 500 can include the data processing system 110 retrieving the content slot identifier from the content request, and retrieve all presentation schemas assigned to or otherwise associated with the content slot identifier from the presentation database.
- the method 500 can include the data processing system 110 ignoring the already existing presentation schema. In addition, if a presentation schema does not have any of the sizes included in the content request, the method 500 can include the data processing system 110 ignoring the presentation schema. Otherwise, the method 500 can include the data processing system 110 adding a new entry to the mapping.
- the method can include the data processing system 110 identifying, responsive to the request for content, a content asset including a plurality of content components (BLOCK 530 ).
- the method 500 can include the data processing system 110 receiving the content request including the content slot identifier and the size information.
- the method 500 can include the data processing system 110 accessing a content asset database for selecting a list of native content assets responsive to the content request.
- a content provider of a content asset can assign or link the particular content asset to one or more content asset templates, and the content asset template can include a specification according to which content components of the content asset can be arranged.
- the content components can include, but are not limited to, a headline, an image, a body, a call to action, a logo, an attribution, a click through URL, or the like.
- the method 500 can include the data processing system 110 using a query to identify content assets from the content asset database.
- the query can include the content slot identifier and the size information from the content request.
- the method 500 can include accessing the content asset database to retrieve one or more content assets matching the content slot identifier and the size information.
- the content asset database stores a plurality of content assets and links or otherwise associates each of the content assets with a content slot identifier.
- the content asset database can match, map, or link content assets assigned to a particular content asset template that is compatible with a presentation schema assigned to a content slot.
- the presentation schema can be tagged or otherwise indicated to be compatible with a content asset template by receiving compatibility information of a particular presentation schema from a content publisher, and the compatibility information can be stored and mapped to corresponding compatible content asset templates within the content asset database (e.g., by utilizing cross-referencing identifiers or tags between a compatible presentation schema and a corresponding content asset template).
- the content asset database can further receive (e.g., from the content provider 115 ) sizing information of content assets and map each of the content assets stored in the content asset database with the sizing information.
- the method 500 can include the data processing system 110 performing a lookup at the content asset database based on the requested content slot identifier and the size information, and retrieve corresponding content assets.
- the returned native content assets can each include a content asset template identifier that can be used to identify presentation schemas.
- each of the retrieved native content assets can include or exclude a flag or other indicator indicating whether or not any presentation schemas are assigned to or otherwise associated with the native content asset (e.g., whether presentation schemas are assigned to or otherwise associated with the content asset template identifier). For example, if one of the matching content assets includes a flag indicating that there are no presentation schemas assigned to or otherwise associated with the content asset, the content asset database can exclude the flagged native content asset from being returned. Accordingly, the content asset database can return native content assets (e.g., those that are unflagged), and can exclude native content assets that are flagged as not being assigned to or otherwise associated with any presentation schemas.
- the method 500 can include the data processing system 110 rendering, as a rendered content file, the plurality of content components based on the presentation schema (BLOCK 540 ).
- the method 500 can include the data processing system 110 receiving the identifiers of the selected content asset (e.g., the content asset template identifier) and the selected presentation schema of the selected content asset.
- the method 500 can include the data processing system 110 accessing a script database to retrieve presentation schema and content components corresponding to the selected presentation schema identifier and the selected content asset.
- the presentation schema can include one or more of HTML code, CSS code, or other computer-executable instructions that can modify or influence a presentation of a content item.
- the scripts database stores various presentation schemas, each of which can be assigned to or have a presentation schema identifier.
- the content asset database can further assign each of the presentation schemas to one or more content asset template identifiers.
- the method 500 can include the data processing system 110 performing a lookup in the script database based on the presentation schema identifier and/or the content asset template identifier, and retrieve the corresponding presentation schemas.
- the method 500 can include the data processing system 110 rendering a content item based on the received presentation schema and content components.
- a client device can adjust the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset.
- the method can include the data processing system 110 transmitting the rendered content file to a client device for display (BLOCK 550 ).
- FIG. 6 is a block diagram illustrating a general architecture for a computer system 600 that may be employed to implement elements of the systems and methods described and illustrated herein (including the system 110 and its components such as the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 or the end user computing device 125 ) in accordance with some implementations.
- the computer system 600 can be used to provide information via the network 105 for display.
- the computer system 600 of FIG. 6 comprises one or more processors 620 communicatively coupled to memory 625 , one or more communications interfaces 605 , and one or more output devices 610 (e.g., one or more display units) and one or more input devices 615 .
- the processors 620 can be included in the data processing system 110 or the other components of the system 110 such as the content request module 130 , the content rendering module 135 , and the rendered content delivery module 140 .
- the memory 625 may comprise any computer-readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present).
- the data processing system 110 can include the memory 625 to store information related to the availability of inventory of one or more content units, reservations of one or more content units, among others.
- the memory 625 can include the database 145 .
- the processor(s) 620 shown in FIG. 6 may be used to execute instructions stored in the memory 625 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions.
- the processor 620 of the computer system 600 shown in FIG. 6 also may be communicatively coupled to or control the communications interface(s) 605 to transmit or receive various information pursuant to execution of instructions.
- the communications interface(s) 605 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow the computer system 600 to transmit information to or receive information from other devices (e.g., other computer systems).
- one or more communications interfaces facilitate information flow between the components of the system 600 .
- the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of the computer system 600 .
- Examples of communications interfaces 605 include user interfaces (e.g., web pages), through which the user can communicate with the data processing system 110 .
- the output devices 610 of the computer system 600 shown in FIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions.
- the input device(s) 615 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein.
- the subject matter and the operations described herein can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user.
- personal information e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location
- certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters.
- a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, postal code, or state level
- the user may have control over how information is collected about him or her and used by the content server.
- data processing system or “computing device” “module” “engine” “component” or “computing device” encompasses apparatuses, devices, and machines for processing data, including a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing, amongst others.
- the apparatuses can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination thereof.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the content request module 130 , the presentation selection module 132 , or the content management module 134 can include or share one or more data processing apparatuses, systems, computing devices, or processors.
- a computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 110 ) to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the subject matter described herein can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Communication networks can include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks), amongst others.
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks
- the computing system such as system 100 or system 500 can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network (e.g., the network 105 ).
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device e.g., a result of the user interaction
- can be received from the client device at the server e.g., received by the data processing system 110 from the content provider computing device 115 ).
- the separation of various system components does not require separation in all implementations, and the described program components can be included in a single hardware or software product.
- the content request module 130 , the script provider module 135 , and the content management module 134 can be a single module, a logic device having one or more processing circuits, or part of an online content item placement system.
- references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element.
- References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations.
- References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- any implementation disclosed herein may be combined with any other implementation, and references to “an implementation,” “some implementation,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- references to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
Abstract
Description
- The present application claims priority to U.S. Provisional Patent Application No. 62/440,748, titled “METHODS AND SYSTEMS FOR SERVER-SIDE RENDERING OF NATIVE CONTENT FOR PRESENTATION” and filed on Dec. 30, 2016, incorporated herein by reference in its entirety.
- In a computer networked environment such as the internet, data from a server can be delivered to a client device responsive to a request for content. The client device receives the data from the server. The data can include instructions for rendering content corresponding to the data for display at the client device. Client devices can include a content rendering application or functionality for rendering the content and displaying the rendered content via a display component of or coupled to the client device.
- According to various implementations there is provided a method for server-side rendering of native content for presentation within an environment of an application. The method includes receiving, by a data processing system, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource. The method further includes accessing, by the data processing system using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource. The method further includes identifying, by the data processing system, responsive to the request for content, a content asset including a plurality of content components. The method further includes rendering, by a content renderer of the data processing system, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot. The method further includes transmitting, by the data processing system, the rendered content file to the client device for display within the content slot of the resource.
- In some implementations, the request for content includes a size value of the requested content. In some implementations, identifying the presentation schema includes identifying, by the data processing system, a plurality of presentation schemas, each of the presentation schemas including a respective presentation schema identifier corresponding to the content slot identifier; identifying, by the data processing system, a subset of the plurality of presentation schemas, each of the presentation schemas included in the subset including a size attribute matching the size value of the requested content; and selecting, by the data processing system, the identified presentation schema from the subset of the plurality of presentation schemas.
- In some implementations, the rendered content file includes a script configured to transmit, responsive to an interaction with the rendered content file, an indication of an interaction with the rendered content file at the client device. In some implementations, the method further includes inserting, by the data processing system, an address of a server to which the indication of the interaction is transmitted from the client device.
- In some implementations, the rendered content file includes a HyperText Markup Language (HTML) script configured to display the rendered content file at the client device. In some implementations, the rendered content file includes a Cascading Style Sheets (CSS) script configured to display the rendered content file at the client device. In some implementations, the presentation schema includes a plurality of style parameters, each of the style parameters including a value matching a value of the resource of the entity. In some implementations, the style parameters include a section category to be displayed in the content slot, a background color of the content slot, a font size of text, a position of the text, or a position of an image. In some implementations, visual characteristics of the rendered content file substantially match visual characteristics of the environment of the application.
- According to various implementations, there is provided a system for server-side rendering of native content for presentation within an environment of an application. The system includes a processor. The system further includes a memory coupled to the processor, the memory storing computer-executable instructions, which when executed by the processor, cause the processor to receive, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource; access, using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource; identify, responsive to the request for content, a content asset including a plurality of content components; render, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot; and transmit the rendered content file to the client device for display within the content slot of the resource.
- In some implementations, the request for content includes a size value of the requested content. In some implementations, in identifying the presentation schema, the memory stores the computer-executable instructions, which when executed by the processor, further cause the processor to identify a plurality of presentation schemas, each of the presentation schemas including a respective presentation schema identifier corresponding to the content slot identifier; identify a subset of the plurality of presentation schemas, each of the presentation schemas included in the subset including a size attribute matching the size value of the requested content; and select the identified presentation schema from the subset of the plurality of presentation schemas.
- In some implementations, the rendered content file includes a script configured to transmit, responsive to an interaction with the rendered content file, an indication of an interaction with the rendered content file at the client device. In some implementations, the memory stores the computer-executable instructions, which when executed by the processor, further cause the processor to insert an address of a server to which the indication of the interaction is transmitted from the client device.
- In some implementations, the rendered content file includes a HyperText Markup Language (HTML) script configured to display the rendered content file at the client device. In some implementations, the rendered content file includes a Cascading Style Sheets (CSS) script configured to display the rendered content file at the client device.
- In some implementations, the presentation schema includes a plurality of style parameters, each of the style parameters including a value matching a value of the resource of the entity. In some implementations, the style parameters include a section category to be displayed in the content slot, a background color of the content slot, a font size of text, a position of the text, or a position of an image. In some implementations, visual characteristics of the rendered content file substantially can match visual characteristics of the environment of the application.
- In each of the aspects content may be selected for display. The selected content may be transmitted to a computer associated with a user for display as part of a user interface. The content may take any convenient form, and may for example be components of an interactive graphical user interface. It will be appreciated that aspects can be implemented in any convenient form. For example, aspects may be implemented by appropriate computer programs which may be carried on appropriate carrier media which may be tangible carrier media (e.g. disks) or intangible carrier media (e.g. communications signals). Aspects may also be implemented using suitable apparatus which may take the form of programmable computers running computer programs arranged to implement aspects. Aspects may be combined and features described in the context of one aspect may be combined with features of other aspects.
- These and other aspects and implementations are discussed in detail below. The foregoing information and the following detailed description include illustrative implementations of various aspects, and provide an overview or framework for understanding the nature and character of the claimed aspects and implementations. The drawings provide illustration and a further understanding of the various aspects and implementations, and are incorporated in and constitute a part of this specification.
- The accompanying drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
-
FIG. 1 is a block diagram depicting an environment for server-side rendering of native content according to illustrative implementations; -
FIG. 2 is a block diagram depicting a content rendering module according to illustrative implementations; -
FIG. 3 is a block diagram depicting a data model used by a content rendering module according to illustrative implementations; -
FIG. 4A andFIG. 4B are block diagrams depicting sequences of rendering and transmitting content according to illustrative implementations; -
FIG. 5 is a flow diagram depicting a method for server-side rendering of native content according to illustrative implementations; and -
FIG. 6 is a block diagram illustrating a general architecture for a computer system that may be employed to implement elements of the systems and methods described and illustrated herein, according to illustrative implementations. - Following below are more detailed descriptions of various concepts related to, and implementations of, methods, apparatuses, and systems relating to server-side rendering of native content. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular manner of implementation.
- In particular, the present disclosure relates to systems and methods for rendering native content at a server and transmitting the rendered native content to a client device for display on a web or mobile application. Native content can be rendered by an application (e.g., a mobile application or a web browser) executing on a client device and presented for display within an environment of the application. In such implementations, a raw content asset including one or more content components are transmitted from a server to the client device, where the application at the client device utilizes specialized rendering tools, scripts, or instructions to assemble the content components of the raw content asset according to predetermined parameters of the application. Once the application renders the native content using the content components, the application presents the rendered native content for display within the environment of the application such that the rendered content appears to have the same look and feel as publisher-generated content.
- There are several technical challenges with rendering native content by the application executing on the client device. First, the application requires one or more specialized content rendering scripts capable of causing the client device to properly render the native content. As a result of including the specialized content rendering scripts in the application, the size of the application is larger than an application that does not need the content rendering scripts to render the native content. The increased size of the application increases an amount of time it takes to download or transfer the application and also utilizes greater memory resources at the client device. Second, the application on the client device is required to receive updates to the computer-executable instructions as updates to the rendering process are made. These updates utilize network resources and often may render the application inoperable until the updates are performed. As a result, the application at the client device needs to repeatedly be updated, requiring both the consumption of network resources and client device resources, including computing resources and battery or power resources. Third, causing the client device to execute the computer-executable instructions to render the content at the client device can result in increased battery consumption as well as requiring additional computing resources that may adversely affect the performance of the client device. Fourth, by performing the rendering at the client device, the rendering operations may be limited to accommodate the reduced availability of computing resources on each client device. Fifth, by performing rendering at client devices, content publishers may lose the ability to create and manage A/B experiments or optimize rendering (e.g., the content publishers may have to manually establish A/B experiments or incorporate such a mechanism in their applications at the client devices).
- To address these technical challenges and others, the present disclosure relates to rendering native content for an application at a server and transmitting the rendered native content to an application executing on a client device for rendering. Native content can include, for example, content having a similar form and function as primary content of the application, in which the native content is inserted. For example, a method for server-side rendering of native content for presentation within an environment of an application includes receiving, by a data processing system, from a client device, a request for content including a content slot identifier identifying a particular content slot provided by a resource. The content slot identifier can be used by the server to determine a presentation schema according to which to assemble, arrange, style and/or present a content item within the content slot identified by the content slot identifier. Characteristics of the content item can substantially match characteristics of other content included in the application (e.g., font, text size, background color or pattern, etc).
- The method further includes accessing, by the data processing system using the content slot identifier, a database to identify a presentation schema used to arrange content components to generate rendered content files according to a specific configuration for display within an environment of the resource. The method further includes identifying, by the data processing system, responsive to the request for content, a content asset including a plurality of content components. The method further includes rendering, by a content renderer of the data processing system, as a rendered content file, the plurality of content components based on the presentation schema corresponding to the content slot. The method further includes transmitting, by the data processing system, the rendered content file to the client device for display within the content slot of the resource.
-
FIG. 1 illustrates asystem 100 for server-side rendering of content for presentation via at least one computer network, such as thenetwork 105. Thenetwork 105 can include computer networks such as the internet, local, wide, metro or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile phone communication networks, and combinations thereof. Thesystem 100 can also include at least onedata processing system 110, e.g., at least one logic device such as a computing device or server having a processor to communicate via thenetwork 105, for instance with at least one contentprovider computing device 115, at least one content publisher computing device 120, or at least one end user computing device or client device 125. - The
data processing system 110 can include at least one server. For instance, thedata processing system 110 can include a plurality of servers located in at least one data center or server farm. In some implementations, thedata processing system 110 includes a content placement system. Thedata processing system 110 can include at least onecontent request module 130, at least onecontent rendering module 135, at least one renderedcontent delivery module 140, and at least onedatabase 145. Thecontent request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140 can each include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with thedatabase 145 and with other computing devices (e.g., the contentprovider computing device 115, the content publisher computing device 120, or the end user computing device 125) via thenetwork 105. - The
content request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140 can include or execute at least one computer program or at least one script. Thecontent request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140 can be separate components, a single component, or part of thedata processing system 110. Thecontent request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to obtain requests to initiate a content item placement, identify information resources of the content publisher computing device 120, provide a rendering of the information resource at the contentprovider computing device 115, identify content item slots of the information resource, provide content items for display in the rendering of the information resource, or receive authorization to provide content items for display with the information resource at the end user computing device 125, for instance. - The content
provider computing devices 115 can include servers or other computing devices operated by a content provider entity to provide content items such as content for display on information resources at the end user computing device 125. The content provided by the contentprovider computing device 115 can include third party content items for display on information resources such as a website or web page that includes primary content, e.g. content provided by the content publisher computing device 120. The content items can also be displayed on a search results web page. For instance, the contentprovider computing device 115 can provide or be the source of content items for display in content slots of content web pages such as a web page of a company where the primary content of the web page is provided by the company, for display on a search results landing page provided by a search engine, or for display in a mobile application at a mobile device. The content items associated with the contentprovider computing device 115 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other end user computing device 125. - The content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the
network 105. For instance, the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page. The primary content can include content other than that provided by the content publisher computing device 120, and the web page can include content slots configured for the display of third party content items from the contentprovider computing devices 115. For instance, the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website. The web pages can include content slots configured for the display of third party content items such as content of the contentprovider computing device 115. In some implementations, the content publisher computing device 120 includes a search engine computing device (e.g. server) of a search engine operator that operates a search engine website. The primary content of search engine web pages (e.g., a results or landing web page) can include results of a search as well as third party content items displayed in content slots such as content items from the contentprovider computing device 115. - The end user computing devices 125 are client device that can include computing devices configured to communicate via the
network 105 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 115 (e.g., third party content items configured for display in a content slot of a web page). The end user computing device 125, the contentprovider computing device 115, and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, end user computing devices, consumer computing devices, servers, clients, and other computing devices. The end user computing device 125, the contentprovider computing device 115, and the content publisher computing device 120 can include user interfaces such as microphones, speakers, touchscreens, keyboards, pointing devices, a computer mouse, touchpad, or other input or output interfaces. - The
content request module 130 can receive a request for content from the end user computing device 125. The request for content can include a request for an information resource, a request for one or more third-party content items, or a combination thereof. In some implementations, the request for content can include a request for third-party content. In some implementations, the request for third-party content can include an address or identifier of an information resource on which the third-party content is to be displayed. The request for third-party content can also include or identify one or more parameters that can be used by thedata processing system 110 to determine the content to provide in response to the request for content. For example, the parameters can identify a size of a content slot within which to insert the requested content. The parameters can identify a type of content associated with the information resource, a type of third-party content requested (e.g., text, image, video, etc.), end user computing device information, size information for requested third-party content item, a network type associated with the end user computing device 125 (e.g., cellular network, WiFi, etc.), an application ID associated with an application at the end user computing device 125, attributes associated with the application ID, a current or past location of the end user computing device 125, or a combination thereof. Further disclosure regarding content requests is described below in connection withFIG. 2 . - In some implementations, the request for content can include a request for an information resource. The request for an information resource can include an address or identifier of the information resource. For example, the request for the information resource can include a Uniform Resource Locator (URL) of a specific resource such as a webpage (e.g., “http://www.example.com”). The request for information resource can also include client device information (such as a device type, device identifier or a combination thereof).
- The
data processing system 110 can also include one or more content repositories ordatabases 145. Thedatabases 145 can be local to thedata processing system 110. In some implementations, thedatabases 145 can be remote to thedata processing system 110 but can communicate with thedata processing system 110 via thenetwork 105. Thedatabases 145 can include web pages, portions of webpages, third-party content items, and a prefetching script, among others, to serve to an end user computing device 125. - The
content rendering module 135 can be configured to select a content item for rendering and delivery to an end user computing device 125. Thecontent rendering module 135 can access thedatabase 145 for selection of the content item. Thecontent rendering module 135 can also access a presentation schema lookup database for selecting a presentation schema that dictates how the selected content item should be rendered. Thecontent rendering module 135 can render the content item based on the selected content item and the selected presentation schema. The rendered content item can include a native content item to be displayed within a content slot of an information resource such that the rendered content item substantially matches visual characteristics of an environment of the information resource. Further discussion regarding thecontent rendering module 135 is found below in connection withFIG. 2 . - The rendered
content delivery module 140 can be configured to receive the content item that is rendered by thecontent rendering module 135. The renderedcontent delivery module 140 can deliver the rendered content to an end user computing device 125. In some implementations, the rendered content item includes an identifier that allows the renderedcontent delivery module 140 to determine a particular destination end user computing device 125 to transmit the rendered content item. The identifier can be received by thecontent request module 130 along with a request for content from the particular end user computing device 125. - The rendered content delivered by the rendered
content delivery module 140 can be configured with an interaction script. In some implementations, the interaction script includes computer-executable instructions that cause the end user computing device 125 to transmit an indication of an interaction with the delivered content sent to the end user computing device 125 from thedata processing system 110. For example, the interaction can include a click, swipe, tap, hover-over with a cursor, or any other interaction with a content item. The computer-executable instructions can include a script, such as HyperText Markup Language (HTML), Extensible HyperText Markup Language (XHTML), Extensible Markup Language (XML), Cascading Style Sheets (CSS), and JavaScript, among others. The computer-executable instructions can be executed within an application or web browser of the end user computing device 125, such as the application or web browser that caused the end user computing device 125 to transmit the content request received by thecontent request module 130. The application can include, for example, an Internet browser, a mobile application, a gaming application, a GPS application, a virtual reality application, or any other computer program capable of reading and executing the computer-executable instructions. -
FIG. 2 is a block diagram depicting thecontent rendering module 135 according to illustrative implementations. The depicted components of thecontent rendering module 135 can include a portion of thecontent rendering module 135, andFIG. 2 may not depict all components of thecontent rendering module 135. In some implementations, thecontent rendering module 135 includes aconversion module 205, acontent manager 210, acontent asset database 215, apresentation schema database 220, and ascript database 225. - In some implementations, the
content asset database 215, thepresentation schema database 220, and thescript database 225 are all part of thedatabase 145. Thedatabase 145 can be separated or partitioned to include the data stored by thecontent asset database 215, thepresentation schema database 220, and thescript database 225. In some implementations, thedata processing system 110 can receive data from thecontent provider 115 and from the content publisher 120 and store the received data into thecorresponding database content provider 115 can transmit content asset data to thedata processing system 110, and thedata processing system 110 can load and store that information in thecontent asset database 215. Likewise, the content publisher 120 can transmit presentation schema data to thedata processing system 110, which can be loaded and stored in thepresentation schema database 220. - In some implementations, the
conversion module 205 is configured to receive a content request, for example, from thecontent request module 130. In some implementations, theconversion module 205 can be a part of thecontent request module 130. Theconversion module 205 can be configured to receive a content request in a Hypertext Transfer Protocol (HTTP) format. The content request can be received from an application (e.g., from a mobile end user computing device 125) or from a webpage. The HTTP content request is initially sent from the end user computing device 125. - In some implementations, the HTTP content request includes a content slot identifier and size information of the requested content item. The content slot identifier can include an identifier that identifies a portion of an information resource that is to be supplied with the requested content item, such as, for example, a content slot identifier that identifies a content slot of the information resource. The size information can include one set of size dimensions or multiple sets of size dimensions. In some implementations, the size information is a fixed size (e.g., a pixel by pixel size dimension). In some implementations, the size information designates whether the requested size is adaptive, such that the returned rendered content item is configured to fit in variously-sized content slots. In some implementations, the content request indicates a request for a native content item. In some implementations, the content request indicates a request for a non-native content item. In some implementations, the content request does not designate whether the request is for a native or non-native content item.
- Upon receiving the HTTP content request, the
conversion module 205 can be configured to convert the HTTP request into a format compatible with thecontent manager 210. For example, theconversion module 205 can be configured to parse the HTTP content request to include additional contextual information for use by the content manager 210 (e.g., information such as an application identifier of the application that sent the content request, a user identifier of a user of the application, or the like). In addition, theconversion module 205 can format the HTTP content request such that the formatted request can be one that thecontent manager 210 can parse through and extract information from for use in content selection. For example, thecontent manager 210 can parse the content request formatted or modified by theconversion module 205 to be able to extract identifiers from the content request and retrieve content relevant to the extracted identifiers. - In some implementations, the
content manager 210 is a module that is configured to select a presentation schema that is compatible with the content slot identified by the content slot identifier and the provided size information. Accordingly, in some implementations, thecontent manager 210 selects a list of content assets based on the content slot identifier, selects a list of presentation schemas assigned to or otherwise associated with the content slot, and filters out content assets that do not include corresponding presentation schemas matching the size information and those that are not targeted to the identified content slot by the content slot identifier. Thecontent manager 210 can include acontent selection module 211, apresentation lookup module 212, apresentation filter 213, and aranking module 214. - In some implementations, the
content selection module 211 can receive the content request including the content slot identifier and the size information. Thecontent selection module 211 can access thecontent asset database 215 for selecting a list of native content assets responsive to the content request. In some implementations, a content provider of a content asset can assign or link the particular content asset to one or more content asset templates, and the content asset template can include a specification according to which content components of the content asset can be arranged. The content components can include, but are not limited to, a headline, an image, a body, a call to action, a logo, an attribution, a click through URL, or the like. - In some implementations, the
content selection module 211 can use a query to identify content assets from thecontent asset database 215. The query can include the content slot identifier and the size information from the content request. In response to the query, thecontent asset database 215 can be accessed by thecontent selection module 211 to retrieve one or more content assets matching the content slot identifier and the size information. In some implementations, thecontent asset database 215 stores a plurality of content assets and links or otherwise associates each of the content assets with a content slot identifier. In some implementations, thecontent asset database 215 can match, map, or link content assets assigned to a particular content asset template that is compatible with a presentation schema assigned to a content slot. Thecontent asset database 215 can further receive (e.g., from the content provider 115) sizing information of content assets and map each of the content assets stored in thecontent asset database 215 with the sizing information. As such, thecontent selection module 211 can perform a lookup at thecontent asset database 215 based on the requested content slot identifier and the size information, and retrieve corresponding content assets. - The returned native content assets can each include a content asset template identifier that can be used to identify presentation schemas, as discussed below. In some implementations, each of the retrieved native content assets can include or exclude a flag or other indicator indicating whether or not any presentation schemas are assigned to or otherwise associated with the native content asset (e.g., whether presentation schemas are assigned to or otherwise associated with the content asset template identifier). For example, if one of the matching content assets includes a flag indicating that there are no presentation schemas assigned to or otherwise associated with the content asset, the
content asset database 215 can exclude the flagged native content asset from being returned to thecontent selection module 211. Accordingly, thecontent asset database 215 can return native content assets (e.g., those that are unflagged), and can exclude native content assets that are flagged as not being assigned to or otherwise associated with any presentation schemas. In some implementations, thecontent selection module 211 transmits the returned content assets including the corresponding content asset template identifiers to thepresentation filter module 213. - In some implementations, the
presentation lookup module 212 receives the content request including the content slot identifier and the sizing information. Thepresentation lookup module 212 can identify all eligible presentation schemas assigned to or otherwise associated with the content slot identifier included in the content request by accessing thepresentation schema database 220. In some implementations, thepresentation schema database 220 stores a plurality of presentation schemas and associates each of the presentation schemas with a content slot identifier. As such, thepresentation lookup module 212 can perform a lookup at thepresentation schema database 220 based on the requested content slot identifier, and can retrieve corresponding presentation schemas. Thepresentation lookup module 212 can filter out presentations retrieved from thepresentation schema database 220 that fail to match the sizing information included in the content request. In some implementations, if the sizing information includes a plurality of different sizes, thepresentation lookup module 212 filters out those presentation schemas that fail to match any of the sizes included in the content request. Thepresentation lookup module 212 can further dedupe presentation schemas that have the same size and that belong to the same content asset template. Accordingly, thepresentation lookup module 212 can return a presentation schema mapping that maps a content asset template to a list of eligible presentation schemas assigned to or otherwise associated with the content asset template. - For example, in creating a presentation schema mapping, the
presentation lookup module 212 can create a template map for identifying presentation schemas corresponding to content asset template identifiers as follows: -
Content_asset_template_id=>Presentation_schema - The above mapping illustrates that one or more presentation schemas are mapped to a content asset template identifier. In filling out the mapping template, the
presentation lookup module 212 can retrieve a list of sizes included in the content request (e.g., the list can include one size or multiple sizes). Thepresentation lookup module 212 can retrieve the content slot identifier from the content request, and retrieve all presentation schemas assigned to or otherwise associated with the content slot identifier from thepresentation database 220. In some implementations, for each presentation schema, if a content asset template identifier assigned to or otherwise associated with a presentation schema already exists in the presentation schema mapping, thepresentation lookup module 212 can ignore the already existing presentation schema. In addition, if a presentation schema does not have any of the sizes included in the content request, thepresentation lookup module 212 can ignore the presentation schema. Otherwise, thepresentation lookup module 212 can add a new entry to the mapping. Once completed, thepresentation lookup module 212 can transmit the presentation schema mapping to thepresentation filter 213. - In some implementations, the
presentation filter 213 receives the presentation schema mapping from thepresentation lookup module 213 and the eligible content assets from thecontent selection module 211, and filters out those content assets that do not correspond to the presentation schema mapping. For example, thepresentation filter 213 can identify the eligible content asset templates that correspond to the eligible presentation schemas by the presentation schema mapping. Thepresentation filter 213 can then exclude those content assets including content asset template identifiers that do not match the determined eligible content asset templates. In other words, thepresentation filter 213 can filter out those content assets whose content asset templates do not belong in the presentation schema mapping (e.g., those content assets that do not have eligible presentation schemas assigned to or otherwise associated with the requested content slot). Thepresentation filter 213 can send the filtered list of content assets to theranking module 214. - In some implementations, the
ranking module 214 performs a selection of one of the content assets from the list of content assets. If the selected content asset is assigned to or otherwise associated with more than one presentation schema, as determined based on the presentation schema mapping, theranking module 214 can randomly select one of the presentation schemas assigned to or otherwise associated with the selected content asset. As such, after selecting a presentation schema, theranking module 214 can transmit an identifier assigned to or otherwise associated with the selected content asset and an identifier assigned to or otherwise associated with the selected presentation schema of the selected content asset to theconversion module 205 as a content response that is responsive to the initial content request received by theconversion module 205. - In some implementations, the
conversion module 205 receives the identifiers of the selected content asset (e.g., the content asset template identifier) and the selected presentation schema of the selected content asset from theranking module 214. Theconversion module 205 can access thescript database 225 to retrieve presentation schema and content components corresponding to the selected presentation schema identifier and the selected content asset. The presentation schema can include one or more of HTML code, CSS code or other computer-executable instructions that can modify or influence a presentation of a content item. In some implementations, thescripts database 225 stores various presentation schemas, each of which can be assigned to or have a presentation schema identifier. Thecontent asset database 215 can further assign each of the presentation schemas to one or more content asset template identifiers. As such, theconversion module 205 can perform a lookup in thescript database 225 based on the presentation schema identifier and/or the content asset template identifier, and retrieve the corresponding presentation schemas. - In some implementations, the
conversion module 205 can render a content item based on the received presentation schema and content components. Theconversion module 205 can send the rendered content item to the renderedcontent delivery module 140. For an adaptive-sized content request that causes thecontent rendering module 135 to return an adaptive content item, the client device 125 can be configured to adjust the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset. -
FIG. 3 is a block diagram depicting adata model 300 illustrating the links between content assets, content asset templates, presentation schemas, and content slots used by thecontent rendering module 135 according to illustrative implementations. Thedata model 300 can include one ormore content assets content asset template 310 linked to each of thecontent assets more presentation schemas content asset template 310. Furthermore, one ormore content slots presentation schemas content asset template 310 can define a set of content components, thecontent assets presentation schemas - Content publishers may desire to provide content items generated from content assets for display on resources. Content publishers may assign or otherwise associate one or more content assets with a content asset template used to generate content items for display using the content components of the content assets. As described above, the content assets can include a plurality of content components that are arranged together to generate the content item. A content asset template can be used to determine the manner in which content components of the content asset are to form or generate the content item. In some implementations, the content asset template can include instructions according to which the content components can be arranged. The content items generated from the content asset can be displayed in one or more content slots. These content slots can be included in information resources of content publishers. Content publishers can assign or otherwise associate one or more presentation schemas to each of the content slots. When a content asset is selected for displaying a content item in a particular content slot, the
content rendering module 135 can utilize the content asset template to arrange the content components of the content asset in a particular manner, and can further utilize one of the presentation schemas assigned or otherwise linked to the content slot and to the content asset template to update one or more fields with values from the presentation schema. For instance, if the presentation schema includes a color value of blue for the background, thecontent rendering module 135 can render the content item by assigning the color blue to the value corresponding to the background color for the content item, and in this way the content item is displayed with a blue background. - In some implementations, the
content assets content provider 115. In addition, thecontent asset template 310 can include a plurality of fields that can be assigned to or otherwise associated with content provider-defined values of each of thecontent assets content asset 305A can include different content components with respect to the content asset fields defined by thecontent asset template 310 from the content components defined by thecontent assets content asset 305A can be different from the “headline” content component ofcontent assets content assets different content provider 115. - In some implementations, the
content assets content asset database 215. Each of thecontent assets content asset database 215 can be linked to thecontent asset template 310 so that thecontent asset template 310 can readily be identified based on thecontent assets content assets content asset template 310. - In some implementations, the
presentation schemas presentation schemas database 220. The presentation schemas 315A, 315B stored in thepresentation schema database 220 can be linked by thecontent asset template 310 so that thepresentation schemas content asset template 310. For example, thepresentation schemas content asset template 310 can include or can point to the unique identifiers of thepresentation schemas - In addition, each of the
presentation schemas presentation schema 315A can be assigned to or otherwise associated with thecontent slots presentation schema 315B can be assigned to or otherwise associated with thecontent slots content slots presentation schemas presentation schema database 220 can include or otherwise be assigned to or otherwise associated with the respective unique identifiers of thecontent slots presentation schemas - In some implementations, the
presentation schemas presentation schemas presentation schemas presentation schema 315A can be targeted to a homepage feed content slot of the content publisher 120 and thepresentation schema 315B can be targeted to a category page rail content slot of the content publisher 120. - As such, the
presentation schemas presentation schemas content assets presentation schemas presentation schema database 220 as presentation schemas. - As discussed above, the presentation schemas can be configured to include an assigned size. For example, the
presentation schema 315A can include a first size and thepresentation schema 315B can include a second size. The first size can include a fixed size in a pixel dimension form (e.g., 300 pixels×500 pixels). The second size can include an adaptive size indicator. The adaptive size indicator can indicate that thepresentation schema 315B can be compatible with adaptive content slots (e.g., adaptive content item slots) that do not have a fixed size. For adaptive content item slots and corresponding adaptive presentation schemas, the client device 125 can be configured to render the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset. Accordingly, thepresentation schemas content assets -
FIG. 4A is a block diagram 400 depicting sequences of rendering and transmitting content according to illustrative implementations.FIG. 4B is a block diagram 450 depicting sequences of rendering and transmitting content according to illustrative implementations. - Referring to
FIG. 4A , the block diagram 400 illustrates adata processing system 410 transmitting content components (e.g., content asset values provided to thedata processing system 410 by the content provider 115) to a plurality ofclient devices data processing system 410 can be similar to thedata processing system 110 as described above, except that thedata processing system 410 does not include thecontent rendering module 135. Theclient devices data processing system 410 does not include thecontent rendering module 135, each of theclient devices - The content components stored at the
data processing system 410 can include values for one or more fields, such as, but not limited to, a headline, body text, an image, and a logo. Thedata processing system 410 transmits the content components to each of theclient devices client devices client devices client devices client devices - However, because rendering of the content is performed at each
client device client device - Referring now to
FIG. 4B , the block diagram 450 illustrates adata processing system 110 transmitting rendered native content (e.g., content components provided to thedata processing system 110 by the content provider 115) to a plurality ofclient devices data processing system 110 includes thecontent rendering module 135 that renders native content as described above. Theclient devices client devices data processing system 110 includes thecontent rendering module 135, each of theclient devices FIG. 4B , thecontent rendering module 135 may render the content assets in a different arrangement depending on a presentation schema selected during the content rendering process such that a different presentation of the rendered content is selected for each of theclient devices - Accordingly, because native content is rendered at the
data processing system 410 such that a rendered content item can be transmitted to each of theclient devices client devices data processing system 110 such that it doesn't need to render the content itself can result in reduced battery consumption as well as reduced computing resources. Fourth, by performing the rendering at the server, the rendering operations may be expanded to accommodate the increased availability of computing resources at the server. Fifth, by performing rendering at the server, content publishers may be able to create and manage A/B experiments or optimize rendering (e.g., the content publishers may not need to manually establish A/B experiments or incorporate such a mechanism in their applications at the client devices). -
FIG. 5 is a flow diagram depicting amethod 500 for server-side rendering of native content according to illustrative implementations. In brief overview, themethod 400 can include receiving a request for content (BLOCK 510). The method can include accessing a database to identify a presentation schema (BLOCK 520). The method can include identifying, responsive to the request for content, a content asset including a plurality of content components (BLOCK 530). The method can include rendering, as a rendered content file, the plurality of content components based on the presentation schema (BLOCK 540). The method can include transmitting the rendered content file to a client device for display (BLOCK 550). - In further detail, the
method 500 can include thedata processing system 110 receiving a request for content (BLOCK 510). The content request can be in a Hypertext Transfer Protocol (HTTP) format. In some implementations, the content request can be in an HHTP/2 format, an SPDY format, or any other suitable networking protocol for transferring content. The content request can be received from an application (e.g., from a mobile end user computing device) or from a webpage. The content request can be initially sent from the end user computing device. - In some implementations, the content request includes a content slot identifier and size information of the requested content item. The content slot identifier can include an identifier that identifies a portion of an information resource that is to be supplied with the requested content item. The size information can include one set of size dimensions or multiple sets of size dimensions. In some implementations, the size information is a fixed size (e.g., a pixel by pixel size dimension). In some implementations, the size information designates whether the requested size is adaptive, such that the returned rendered content item is configured to fit in variously-sized content slots. In some implementations, the content request indicates a request for a native content item. In some implementations, the content request indicates a request for a non-native content item. In some implementations, the content request does not designate whether the request is for a native or non-native content item.
- Upon receiving the content request, the
method 500 can include thedata processing system 110 converting the HTTP request into a format compatible with a content manager. For example, themethod 500 can include thedata processing system 110 parsing the HTTP content request to include additional contextual information for use by the content manager (e.g., information such as an application identifier of the application that sent the content request, a user identifier of a user of the application, or the like). In addition, themethod 500 can include thedata processing system 110 formatting the HTTP content request such that the formatted request can be one that the content manager can parse and extract information from for use in content selection. For example, themethod 500 can include thedata processing system 110 parsing the formatted or modified content request to be able to extract identifiers from the content request and retrieve content relevant to the extracted identifiers. - The method can include the
data processing system 110 accessing a database to identify a presentation schema (BLOCK 520). Themethod 500 can include thedata processing system 110 identifying all eligible presentation schemas assigned to or otherwise associated with the content slot identifier included in the content request by accessing a presentation schema database. In some implementations, the presentation schema database stores a plurality of presentation schemas and associates each of the presentation schemas with a content slot identifier. As such, themethod 500 can include thedata processing system 110 performing a lookup at the presentation schema database based on the requested content slot identifier, and retrieving corresponding presentation schemas. Themethod 500 can include thedata processing system 110 filtering out presentation schemas retrieved from the presentation schema database that fail to match the sizing information included in the content request. In some implementations, if the sizing information includes a plurality of different sizes, themethod 500 can include thedata processing system 110 filtering out those presentation schemas that fail to match any of the sizes included in the content request. Themethod 500 can include thedata processing system 110 deduping presentation schemas that have the same size and that belong to the same content asset template. Accordingly, themethod 500 can include thedata processing system 110 returning a presentation schema mapping that maps a content asset template to a list of eligible presentation schemas assigned to or otherwise associated with the content asset template. - For example, in creating a presentation schema mapping, the
method 500 can include thedata processing system 110 creating a template map for identifying presentation schemas corresponding to content asset template identifiers. The mapping can illustrate that one or more presentation schemas are mapped to a content asset template identifier. In filling out the mapping template, themethod 500 can include thedata processing system 110 retrieving a list of sizes included in the content request (e.g., the list can include one size or multiple sizes). Themethod 500 can include thedata processing system 110 retrieving the content slot identifier from the content request, and retrieve all presentation schemas assigned to or otherwise associated with the content slot identifier from the presentation database. In some implementations, for each presentation schema, if a content asset template identifier assigned to or otherwise associated with a presentation schema already exists in the presentation schema mapping, themethod 500 can include thedata processing system 110 ignoring the already existing presentation schema. In addition, if a presentation schema does not have any of the sizes included in the content request, themethod 500 can include thedata processing system 110 ignoring the presentation schema. Otherwise, themethod 500 can include thedata processing system 110 adding a new entry to the mapping. - The method can include the
data processing system 110 identifying, responsive to the request for content, a content asset including a plurality of content components (BLOCK 530). In some implementations, themethod 500 can include thedata processing system 110 receiving the content request including the content slot identifier and the size information. Themethod 500 can include thedata processing system 110 accessing a content asset database for selecting a list of native content assets responsive to the content request. In some implementations, a content provider of a content asset can assign or link the particular content asset to one or more content asset templates, and the content asset template can include a specification according to which content components of the content asset can be arranged. The content components can include, but are not limited to, a headline, an image, a body, a call to action, a logo, an attribution, a click through URL, or the like. - In some implementations, the
method 500 can include thedata processing system 110 using a query to identify content assets from the content asset database. The query can include the content slot identifier and the size information from the content request. In response to the query, themethod 500 can include accessing the content asset database to retrieve one or more content assets matching the content slot identifier and the size information. In some implementations, the content asset database stores a plurality of content assets and links or otherwise associates each of the content assets with a content slot identifier. In some implementations, the content asset database can match, map, or link content assets assigned to a particular content asset template that is compatible with a presentation schema assigned to a content slot. The presentation schema can be tagged or otherwise indicated to be compatible with a content asset template by receiving compatibility information of a particular presentation schema from a content publisher, and the compatibility information can be stored and mapped to corresponding compatible content asset templates within the content asset database (e.g., by utilizing cross-referencing identifiers or tags between a compatible presentation schema and a corresponding content asset template). The content asset database can further receive (e.g., from the content provider 115) sizing information of content assets and map each of the content assets stored in the content asset database with the sizing information. As such, themethod 500 can include thedata processing system 110 performing a lookup at the content asset database based on the requested content slot identifier and the size information, and retrieve corresponding content assets. - The returned native content assets can each include a content asset template identifier that can be used to identify presentation schemas. In some implementations, each of the retrieved native content assets can include or exclude a flag or other indicator indicating whether or not any presentation schemas are assigned to or otherwise associated with the native content asset (e.g., whether presentation schemas are assigned to or otherwise associated with the content asset template identifier). For example, if one of the matching content assets includes a flag indicating that there are no presentation schemas assigned to or otherwise associated with the content asset, the content asset database can exclude the flagged native content asset from being returned. Accordingly, the content asset database can return native content assets (e.g., those that are unflagged), and can exclude native content assets that are flagged as not being assigned to or otherwise associated with any presentation schemas.
- The
method 500 can include thedata processing system 110 rendering, as a rendered content file, the plurality of content components based on the presentation schema (BLOCK 540). In some implementations, themethod 500 can include thedata processing system 110 receiving the identifiers of the selected content asset (e.g., the content asset template identifier) and the selected presentation schema of the selected content asset. Themethod 500 can include thedata processing system 110 accessing a script database to retrieve presentation schema and content components corresponding to the selected presentation schema identifier and the selected content asset. The presentation schema can include one or more of HTML code, CSS code, or other computer-executable instructions that can modify or influence a presentation of a content item. In some implementations, the scripts database stores various presentation schemas, each of which can be assigned to or have a presentation schema identifier. The content asset database can further assign each of the presentation schemas to one or more content asset template identifiers. As such, themethod 500 can include thedata processing system 110 performing a lookup in the script database based on the presentation schema identifier and/or the content asset template identifier, and retrieve the corresponding presentation schemas. - In some implementations, the
method 500 can include thedata processing system 110 rendering a content item based on the received presentation schema and content components. For an adaptive-sized content request, a client device can adjust the adaptive content item by filling in 100% of a width of a content item slot with the rendered content item, and then sizing a height of the content item to include values of a selected content asset. The method can include thedata processing system 110 transmitting the rendered content file to a client device for display (BLOCK 550). -
FIG. 6 is a block diagram illustrating a general architecture for acomputer system 600 that may be employed to implement elements of the systems and methods described and illustrated herein (including thesystem 110 and its components such as thecontent request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140 or the end user computing device 125) in accordance with some implementations. Thecomputer system 600 can be used to provide information via thenetwork 105 for display. Thecomputer system 600 ofFIG. 6 comprises one ormore processors 620 communicatively coupled tomemory 625, one ormore communications interfaces 605, and one or more output devices 610 (e.g., one or more display units) and one ormore input devices 615. Theprocessors 620 can be included in thedata processing system 110 or the other components of thesystem 110 such as thecontent request module 130, thecontent rendering module 135, and the renderedcontent delivery module 140. - In the
computer system 600 ofFIG. 6 , thememory 625 may comprise any computer-readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present). Referring again to thesystem 110 ofFIG. 1 , thedata processing system 110 can include thememory 625 to store information related to the availability of inventory of one or more content units, reservations of one or more content units, among others. Thememory 625 can include thedatabase 145. The processor(s) 620 shown inFIG. 6 may be used to execute instructions stored in thememory 625 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions. - The
processor 620 of thecomputer system 600 shown inFIG. 6 also may be communicatively coupled to or control the communications interface(s) 605 to transmit or receive various information pursuant to execution of instructions. For example, the communications interface(s) 605 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow thecomputer system 600 to transmit information to or receive information from other devices (e.g., other computer systems). While not shown explicitly in the system ofFIG. 1 , one or more communications interfaces facilitate information flow between the components of thesystem 600. In some implementations, the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of thecomputer system 600. Examples ofcommunications interfaces 605 include user interfaces (e.g., web pages), through which the user can communicate with thedata processing system 110. - The
output devices 610 of thecomputer system 600 shown inFIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. The input device(s) 615 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein. - The subject matter and the operations described herein can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. The program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- For situations in which the systems discussed herein collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters. For instance, a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about him or her and used by the content server.
- The term “data processing system” or “computing device” “module” “engine” “component” or “computing device” encompasses apparatuses, devices, and machines for processing data, including a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing, amongst others. The apparatuses can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination thereof. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures. The
content request module 130, the presentation selection module 132, or the content management module 134 can include or share one or more data processing apparatuses, systems, computing devices, or processors. - A computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 110) to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- The subject matter described herein can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Communication networks can include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks), amongst others.
- The computing system such as
system 100 orsystem 500 can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network (e.g., the network 105). The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server (e.g., received by thedata processing system 110 from the content provider computing device 115). - While operations are depicted in the drawings in a particular order, such operations are not required to be performed in the particular order shown or in sequential order, and all illustrated operations are not required to be performed. Actions described herein can be performed in a different order.
- The separation of various system components does not require separation in all implementations, and the described program components can be included in a single hardware or software product. For instance, the
content request module 130, thescript provider module 135, and the content management module 134 can be a single module, a logic device having one or more processing circuits, or part of an online content item placement system. - Having now described some illustrative implementations, it is apparent that the foregoing is illustrative and not limiting. In particular, although many of the implementations presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one implementation are not intended to be excluded from a similar role in other implementations or implementations.
- The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of “including” “comprising” “having” “containing” “involving” “characterized by” “characterized in that” and variations thereof herein, is meant to encompass the items listed thereafter, equivalents thereof, and additional items, as well as alternate implementations consisting of the items listed thereafter exclusively. In one implementation, the systems and methods described herein consist of one, each combination of more than one, or all of the described elements, acts, or components.
- Any references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations. References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- Any implementation disclosed herein may be combined with any other implementation, and references to “an implementation,” “some implementation,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- References to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
- Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, neither the reference signs nor their absence have any limiting effect on the scope of any claim elements.
- The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing implementations are illustrative rather than limiting of the described systems and methods. Scope of the systems and methods described herein is thus indicated by the appended claims, rather than the foregoing description, and changes that come within the meaning and range of equivalency of the claims are embraced therein
Claims (20)
Priority Applications (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/415,322 US20180191798A1 (en) | 2016-12-30 | 2017-01-25 | Methods and systems for server-side rendering of native content for presentation |
KR1020197007045A KR102185864B1 (en) | 2016-12-30 | 2017-12-28 | Server-side rendering method and system of native content for presentation |
EP17835911.3A EP3485400B1 (en) | 2016-12-30 | 2017-12-28 | Methods and systems for server-side rendering of native content for presentation |
CN201780050083.7A CN109863527B (en) | 2016-12-30 | 2017-12-28 | Method and system for server-side rendering of rendered local content |
PCT/US2017/068736 WO2018126023A1 (en) | 2016-12-30 | 2017-12-28 | Methods and systems for server-side rendering of native content for presentation |
JP2019508244A JP6761112B2 (en) | 2016-12-30 | 2017-12-28 | Methods and systems for server-side rendering of native content for presentation |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662440748P | 2016-12-30 | 2016-12-30 | |
US15/415,322 US20180191798A1 (en) | 2016-12-30 | 2017-01-25 | Methods and systems for server-side rendering of native content for presentation |
Publications (1)
Publication Number | Publication Date |
---|---|
US20180191798A1 true US20180191798A1 (en) | 2018-07-05 |
Family
ID=62709121
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/415,322 Abandoned US20180191798A1 (en) | 2016-12-30 | 2017-01-25 | Methods and systems for server-side rendering of native content for presentation |
Country Status (6)
Country | Link |
---|---|
US (1) | US20180191798A1 (en) |
EP (1) | EP3485400B1 (en) |
JP (1) | JP6761112B2 (en) |
KR (1) | KR102185864B1 (en) |
CN (1) | CN109863527B (en) |
WO (1) | WO2018126023A1 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170300456A1 (en) * | 2013-09-30 | 2017-10-19 | Google Inc. | Resource size-based content item selection |
US10445406B1 (en) | 2013-09-30 | 2019-10-15 | Google Llc | Automatically determining a size for a content item for a web page |
US10630751B2 (en) | 2016-12-30 | 2020-04-21 | Google Llc | Sequence dependent data message consolidation in a voice activated computer network environment |
US10643608B2 (en) | 2016-12-30 | 2020-05-05 | Google Llc | Feedback controller for data transmissions |
US10956485B2 (en) | 2011-08-31 | 2021-03-23 | Google Llc | Retargeting in a search environment |
US10956529B1 (en) * | 2018-03-20 | 2021-03-23 | Pinterest, Inc. | Content presentation |
CN112800370A (en) * | 2021-01-28 | 2021-05-14 | 金蝶蝶金云计算有限公司 | Business document processing method and device, computer equipment and storage medium |
CN113158100A (en) * | 2020-01-22 | 2021-07-23 | 阿里巴巴集团控股有限公司 | Page display method and page display device |
US11223670B1 (en) * | 2020-12-10 | 2022-01-11 | Ebay Inc. | Multi request asynchronous delegation for enhanced performance |
WO2022051791A1 (en) * | 2020-09-11 | 2022-03-17 | Jentis Gmbh | Method for tracking user interactions with web pages |
US11350165B2 (en) * | 2017-03-03 | 2022-05-31 | Google Llc | Systems and methods for detecting improper implementation of presentation of content items by applications executing on client devices |
US20220350673A1 (en) * | 2021-04-29 | 2022-11-03 | International Business Machines Corporation | Deploying dynamic applications and infrastructure according to metadata assigned by content |
CN116028697A (en) * | 2023-03-20 | 2023-04-28 | 之江实验室 | Page rendering method and device, storage medium and electronic equipment |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11284144B2 (en) | 2020-01-30 | 2022-03-22 | Snap Inc. | Video generation system to render frames on demand using a fleet of GPUs |
US11356720B2 (en) * | 2020-01-30 | 2022-06-07 | Snap Inc. | Video generation system to render frames on demand |
KR102455521B1 (en) * | 2020-11-20 | 2022-10-14 | 경희대학교 산학협력단 | Apparatus for just-in-time semantic reconciliation of medical data and method thereof, and method for generating scheme map on the apparatus |
CN113763094A (en) * | 2020-11-23 | 2021-12-07 | 北京沃东天骏信息技术有限公司 | Service information processing method, device, server, medium and system |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090063619A1 (en) * | 2007-08-29 | 2009-03-05 | Yahoo! Inc. | Module Hosting and Content Generation Platform |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10452756B2 (en) * | 2006-09-29 | 2019-10-22 | Oath Inc. | Platform for rendering content for a remote device |
JP5186047B2 (en) * | 2009-11-30 | 2013-04-17 | 楽天株式会社 | Object display device, object display method, object display control program, and computer-readable recording medium recording the program |
US10289661B2 (en) * | 2012-09-12 | 2019-05-14 | Flipboard, Inc. | Generating a cover for a section of a digital magazine |
US9442912B1 (en) * | 2012-09-26 | 2016-09-13 | Google Inc. | Estimating the number of content items to fill an online space before distributing the content items to the online space |
CN104572822B (en) * | 2014-12-04 | 2018-09-04 | 百度在线网络技术（北京）有限公司 | Text shows method and device |
US20160344831A1 (en) * | 2015-05-21 | 2016-11-24 | Google Inc. | Proxy service for content requests |
-
2017
- 2017-01-25 US US15/415,322 patent/US20180191798A1/en not_active Abandoned
- 2017-12-28 JP JP2019508244A patent/JP6761112B2/en active Active
- 2017-12-28 CN CN201780050083.7A patent/CN109863527B/en active Active
- 2017-12-28 WO PCT/US2017/068736 patent/WO2018126023A1/en unknown
- 2017-12-28 KR KR1020197007045A patent/KR102185864B1/en active IP Right Grant
- 2017-12-28 EP EP17835911.3A patent/EP3485400B1/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090063619A1 (en) * | 2007-08-29 | 2009-03-05 | Yahoo! Inc. | Module Hosting and Content Generation Platform |
Non-Patent Citations (1)
Title |
---|
W3Schools, HTML Head, Dec 26th 2008, https://www.w3schools.com/html/html_head.asp (Year: 2008) * |
Cited By (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10956485B2 (en) | 2011-08-31 | 2021-03-23 | Google Llc | Retargeting in a search environment |
US11120195B2 (en) * | 2013-09-30 | 2021-09-14 | Google Llc | Resource size-based content item selection |
US11093686B2 (en) * | 2013-09-30 | 2021-08-17 | Google Llc | Resource size-based content item selection |
US11610045B2 (en) * | 2013-09-30 | 2023-03-21 | Google Llc | Resource size-based content item selection |
US11586801B2 (en) | 2013-09-30 | 2023-02-21 | Google Llc | Automatically determining a size for a content item for a web page |
US10614153B2 (en) * | 2013-09-30 | 2020-04-07 | Google Llc | Resource size-based content item selection |
US10445406B1 (en) | 2013-09-30 | 2019-10-15 | Google Llc | Automatically determining a size for a content item for a web page |
US20170300456A1 (en) * | 2013-09-30 | 2017-10-19 | Google Inc. | Resource size-based content item selection |
US11120194B2 (en) | 2013-09-30 | 2021-09-14 | Google Llc | Automatically determining a size for a content item for a web page |
US10630751B2 (en) | 2016-12-30 | 2020-04-21 | Google Llc | Sequence dependent data message consolidation in a voice activated computer network environment |
US11475886B2 (en) | 2016-12-30 | 2022-10-18 | Google Llc | Feedback controller for data transmissions |
US10643608B2 (en) | 2016-12-30 | 2020-05-05 | Google Llc | Feedback controller for data transmissions |
US10893088B2 (en) | 2016-12-30 | 2021-01-12 | Google Llc | Sequence dependent data message consolidation in a voice activated computer network environment |
US11785297B2 (en) * | 2017-03-03 | 2023-10-10 | Google Llc | Systems and methods for detecting improper implementation of presentation of content items by applications executing on client devices |
US20220286743A1 (en) * | 2017-03-03 | 2022-09-08 | Google Llc | Systems and Methods for Detecting Improper Implementation of Presentation of Content Items by Applications Executing on Client Devices |
US11350165B2 (en) * | 2017-03-03 | 2022-05-31 | Google Llc | Systems and methods for detecting improper implementation of presentation of content items by applications executing on client devices |
US10956529B1 (en) * | 2018-03-20 | 2021-03-23 | Pinterest, Inc. | Content presentation |
US11790024B2 (en) | 2018-03-20 | 2023-10-17 | Pinterest, Inc. | Content presentation |
CN113158100A (en) * | 2020-01-22 | 2021-07-23 | 阿里巴巴集团控股有限公司 | Page display method and page display device |
WO2022051791A1 (en) * | 2020-09-11 | 2022-03-17 | Jentis Gmbh | Method for tracking user interactions with web pages |
US20220191267A1 (en) * | 2020-12-10 | 2022-06-16 | Ebay Inc. | Multi request asynchronous delegation for enhanced performance |
US11223670B1 (en) * | 2020-12-10 | 2022-01-11 | Ebay Inc. | Multi request asynchronous delegation for enhanced performance |
US11778015B2 (en) * | 2020-12-10 | 2023-10-03 | Ebay Inc. | Multi request asynchronous delegation for enhanced performance |
CN112800370A (en) * | 2021-01-28 | 2021-05-14 | 金蝶蝶金云计算有限公司 | Business document processing method and device, computer equipment and storage medium |
US20220350673A1 (en) * | 2021-04-29 | 2022-11-03 | International Business Machines Corporation | Deploying dynamic applications and infrastructure according to metadata assigned by content |
US11977927B2 (en) * | 2021-04-29 | 2024-05-07 | International Business Machines Corporation | Deploying dynamic applications and infrastructure according to metadata assigned by content |
CN116028697A (en) * | 2023-03-20 | 2023-04-28 | 之江实验室 | Page rendering method and device, storage medium and electronic equipment |
Also Published As
Publication number | Publication date |
---|---|
WO2018126023A1 (en) | 2018-07-05 |
CN109863527B (en) | 2023-04-04 |
CN109863527A (en) | 2019-06-07 |
KR20190039230A (en) | 2019-04-10 |
EP3485400B1 (en) | 2021-12-01 |
JP6761112B2 (en) | 2020-09-23 |
JP2019530921A (en) | 2019-10-24 |
KR102185864B1 (en) | 2020-12-02 |
EP3485400A1 (en) | 2019-05-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3485400B1 (en) | Methods and systems for server-side rendering of native content for presentation | |
US20190251143A1 (en) | Web page rendering method and related device | |
TWI703463B (en) | Information display method, device and intelligent terminal | |
CN106575298A (en) | Fast rendering of websites containing dynamic content and stale content | |
US20150040098A1 (en) | Systems and methods for developing and delivering platform adaptive web and native application content | |
US10205678B2 (en) | Systems and methods for client-side dynamic information resource activation and deactivation | |
US20170192941A1 (en) | Computer-Automated Generation of Application Deep Links | |
US20140033228A1 (en) | Configuring content display dimensions | |
US11947377B2 (en) | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources | |
US10191971B2 (en) | Computer-automated display adaptation of search results according to layout file | |
CN104025084A (en) | Historical browsing session management | |
US20210352150A1 (en) | Maintaining session identifiers across multiple webpages for content selection | |
US11327644B2 (en) | Syndication of slideshow content through a web feed | |
US9047300B2 (en) | Techniques to manage universal file descriptor models for content files | |
US10049170B1 (en) | Methods and systems for selectively preventing third-party content from being displayed using undefined publisher identifier | |
US10324600B2 (en) | Web page generation system | |
CN112733009A (en) | Searching method and device | |
US11361048B2 (en) | Conditional interpretation of a single style definition identifier on a resource | |
CN113608737A (en) | Page generation method, device, equipment and medium | |
CN107807927B (en) | Page analysis method, device, client equipment and system based on issuing rule |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BENDER, JOHN;LIN, BO;ZHU, ZUTAO;SIGNING DATES FROM 20171208 TO 20171213;REEL/FRAME:044423/0135 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |